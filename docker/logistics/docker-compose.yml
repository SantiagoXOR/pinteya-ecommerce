# =====================================================
# DOCKER COMPOSE: LOGISTICS MODULE DEVELOPMENT
# Descripción: Stack completo para desarrollo del módulo de logística
# Basado en: Next.js + PostgreSQL + Redis + WebSocket Server
# =====================================================

version: '3.8'

services:
  # =====================================================
  # APLICACIÓN PRINCIPAL
  # =====================================================
  app:
    build:
      context: ../../
      dockerfile: docker/logistics/Dockerfile
      target: runner
    container_name: pinteya-logistics-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pinteya_logistics
      - REDIS_URL=redis://redis:6379
      - WEBSOCKET_URL=ws://websocket:3001
      - NEXT_PUBLIC_MAPTILER_API_KEY=${MAPTILER_API_KEY}
      - OCA_API_KEY=${OCA_API_KEY}
      - ANDREANI_API_KEY=${ANDREANI_API_KEY}
      - CORREO_ARGENTINO_API_KEY=${CORREO_ARGENTINO_API_KEY}
    depends_on:
      - postgres
      - redis
      - websocket
    volumes:
      - ../../src:/app/src:ro
      - ../../public:/app/public:ro
      - logistics_node_modules:/app/node_modules
    networks:
      - logistics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # BASE DE DATOS POSTGRESQL
  # =====================================================
  postgres:
    image: postgres:15-alpine
    container_name: pinteya-logistics-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pinteya_logistics
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - logistics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pinteya_logistics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # REDIS PARA CACHE Y RATE LIMITING
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: pinteya-logistics-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - logistics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # =====================================================
  # WEBSOCKET SERVER
  # =====================================================
  websocket:
    build:
      context: ../../
      dockerfile: docker/logistics/Dockerfile.websocket
    container_name: pinteya-logistics-websocket
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pinteya_logistics
      - WS_PORT=3001
      - WS_HOST=0.0.0.0
    depends_on:
      - redis
      - postgres
    volumes:
      - ../../src/lib/websockets:/app/src/lib/websockets:ro
    networks:
      - logistics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # NGINX REVERSE PROXY
  # =====================================================
  nginx:
    image: nginx:alpine
    container_name: pinteya-logistics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - websocket
    networks:
      - logistics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # MONITORING CON PROMETHEUS
  # =====================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pinteya-logistics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - logistics_network
    restart: unless-stopped

  # =====================================================
  # GRAFANA PARA DASHBOARDS
  # =====================================================
  grafana:
    image: grafana/grafana:latest
    container_name: pinteya-logistics-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - logistics_network
    restart: unless-stopped

  # =====================================================
  # MAILHOG PARA TESTING DE EMAILS
  # =====================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: pinteya-logistics-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - logistics_network
    restart: unless-stopped

# =====================================================
# VOLÚMENES PERSISTENTES
# =====================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logistics_node_modules:
    driver: local

# =====================================================
# RED PERSONALIZADA
# =====================================================
networks:
  logistics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
