// ===================================
// PINTEYA E-COMMERCE - VERIFICACI√ìN DE ROLES ADMIN EN PRODUCCI√ìN
// ===================================

const { createClerkClient } = require('@clerk/nextjs/server');

/**
 * Script para verificar que la cuenta admin tenga los roles correctos
 * en Clerk para resolver el error 401 en /admin/monitoring
 */

const ADMIN_EMAIL = 'santiago@xor.com.ar';

async function verifyAdminRole() {
  try {
    console.log('üîç Verificando configuraci√≥n de roles admin en Clerk...');
    
    // Verificar variables de entorno
    const clerkSecretKey = process.env.CLERK_SECRET_KEY;
    if (!clerkSecretKey) {
      console.error('‚ùå CLERK_SECRET_KEY no est√° configurada');
      return;
    }
    
    console.log('‚úÖ CLERK_SECRET_KEY configurada');
    
    // Crear cliente de Clerk
    const clerkClient = createClerkClient({
      secretKey: clerkSecretKey
    });
    
    // Buscar usuario por email
    console.log(`üîç Buscando usuario: ${ADMIN_EMAIL}`);
    const users = await clerkClient.users.getUserList({
      emailAddress: [ADMIN_EMAIL]
    });
    
    if (users.data.length === 0) {
      console.error(`‚ùå Usuario ${ADMIN_EMAIL} no encontrado en Clerk`);
      return;
    }
    
    const user = users.data[0];
    console.log(`‚úÖ Usuario encontrado: ${user.id}`);
    
    // Verificar metadata
    console.log('\nüìã Verificando metadata del usuario:');
    console.log('Public Metadata:', JSON.stringify(user.publicMetadata, null, 2));
    console.log('Private Metadata:', JSON.stringify(user.privateMetadata, null, 2));
    
    // Verificar roles
    const publicRole = user.publicMetadata?.role as string;
    const privateRole = user.privateMetadata?.role as string;
    const isAdmin = publicRole === 'admin' || privateRole === 'admin';
    
    console.log('\nüîê Verificaci√≥n de roles:');
    console.log(`Public Role: ${publicRole || 'No configurado'}`);
    console.log(`Private Role: ${privateRole || 'No configurado'}`);
    console.log(`Es Admin: ${isAdmin ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (!isAdmin) {
      console.log('\nüõ†Ô∏è SOLUCI√ìN REQUERIDA:');
      console.log('El usuario no tiene rol de admin configurado.');
      console.log('Configurar en Clerk Dashboard:');
      console.log('1. Ir a dashboard.clerk.com');
      console.log('2. Seleccionar el usuario santiago@xor.com.ar');
      console.log('3. En la secci√≥n "Metadata", agregar:');
      console.log('   Public Metadata: { "role": "admin" }');
      console.log('   O Private Metadata: { "role": "admin" }');
      
      // Intentar configurar autom√°ticamente (solo si tenemos permisos)
      try {
        console.log('\nüîß Intentando configurar rol autom√°ticamente...');
        await clerkClient.users.updateUser(user.id, {
          publicMetadata: {
            ...user.publicMetadata,
            role: 'admin'
          }
        });
        console.log('‚úÖ Rol admin configurado autom√°ticamente en publicMetadata');
      } catch (updateError) {
        console.warn('‚ö†Ô∏è No se pudo configurar autom√°ticamente:', updateError.message);
        console.log('Configurar manualmente en Clerk Dashboard');
      }
    } else {
      console.log('\n‚úÖ CONFIGURACI√ìN CORRECTA');
      console.log('El usuario tiene rol de admin configurado correctamente');
    }
    
    // Verificar sesiones activas
    console.log('\nüì± Verificando sesiones activas:');
    const sessions = await clerkClient.sessions.getSessionList({
      userId: user.id
    });
    
    console.log(`Sesiones activas: ${sessions.data.length}`);
    sessions.data.forEach((session, index) => {
      console.log(`Sesi√≥n ${index + 1}: ${session.id} - Status: ${session.status}`);
    });
    
  } catch (error) {
    console.error('‚ùå Error verificando roles admin:', error);
    
    if (error.message.includes('401')) {
      console.log('\nüîë Error de autenticaci√≥n:');
      console.log('Verificar que CLERK_SECRET_KEY sea correcta para producci√≥n');
    }
    
    if (error.message.includes('403')) {
      console.log('\nüö´ Error de permisos:');
      console.log('La clave de Clerk no tiene permisos para modificar usuarios');
    }
  }
}

// Funci√≥n para verificar configuraci√≥n de variables de entorno
function verifyEnvironmentConfig() {
  console.log('\nüåç Verificando configuraci√≥n de entorno:');
  
  const requiredVars = [
    'CLERK_SECRET_KEY',
    'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY'
  ];
  
  let allConfigured = true;
  
  requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`‚úÖ ${varName}: Configurada (${value.substring(0, 10)}...)`);
    } else {
      console.log(`‚ùå ${varName}: NO CONFIGURADA`);
      allConfigured = false;
    }
  });
  
  if (!allConfigured) {
    console.log('\n‚ö†Ô∏è Variables de entorno faltantes detectadas');
    console.log('Verificar configuraci√≥n en Vercel Dashboard o .env.local');
  }
  
  return allConfigured;
}

// Ejecutar verificaci√≥n
async function main() {
  console.log('üöÄ PINTEYA E-COMMERCE - Verificaci√≥n de Roles Admin');
  console.log('================================================\n');
  
  // Verificar variables de entorno
  const envOk = verifyEnvironmentConfig();
  
  if (envOk) {
    // Verificar roles de admin
    await verifyAdminRole();
  }
  
  console.log('\n================================================');
  console.log('‚úÖ Verificaci√≥n completada');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

export { verifyAdminRole, verifyEnvironmentConfig };
