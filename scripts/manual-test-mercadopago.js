#!/usr/bin/env node

// ===================================
// SCRIPT PARA PRUEBA MANUAL DE MERCADOPAGO
// ===================================

const { chromium } = require('playwright');

const CONFIG = {
  baseUrl: 'http://localhost:3000',
  timeout: 30000
};

async function manualTestMercadoPago() {
  console.log('üîç Abriendo navegador para prueba manual de MercadoPago...');
  console.log(`üåê URL base: ${CONFIG.baseUrl}`);
  console.log('\nüìã INSTRUCCIONES:');
  console.log('1. ‚úÖ Agregar producto al carrito desde /shop');
  console.log('2. ‚úÖ Ir a /checkout');
  console.log('3. ‚úÖ Llenar formulario Express:');
  console.log('   - Email: test@example.com');
  console.log('   - Tel√©fono: +54 11 1234-5678');
  console.log('   - Direcci√≥n: Av. Test 1234, Buenos Aires, Argentina');
  console.log('4. ‚úÖ Hacer click en "Finalizar Compra"');
  console.log('5. ‚úÖ Verificar si aparece MercadoPago Wallet');
  console.log('\n‚è∞ El navegador se mantendr√° abierto por 5 minutos...');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 500
  });
  
  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 }
  });
  
  const page = await context.newPage();
  page.setDefaultTimeout(CONFIG.timeout);
  
  // Interceptar requests importantes
  page.on('request', request => {
    if (request.url().includes('mercadopago') || request.url().includes('payments')) {
      console.log(`üì° REQUEST: ${request.method()} ${request.url()}`);
    }
  });
  
  page.on('response', async response => {
    if (response.url().includes('mercadopago') || response.url().includes('payments')) {
      console.log(`üì° RESPONSE: ${response.status()} ${response.url()}`);
      if (response.url().includes('/api/payments/create-preference')) {
        try {
          const data = await response.json();
          console.log('üí≥ Preferencia creada:', {
            success: data.success,
            preference_id: data.data?.preference_id,
            init_point: data.data?.init_point ? 'Presente' : 'Ausente'
          });
        } catch (e) {
          console.log('‚ö†Ô∏è No se pudo parsear respuesta de preferencia');
        }
      }
    }
  });
  
  // Interceptar errores
  page.on('console', msg => {
    if (msg.type() === 'error') {
      console.log(`‚ùå CONSOLE ERROR: ${msg.text()}`);
    } else if (msg.text().includes('MercadoPago') || msg.text().includes('wallet') || msg.text().includes('checkout')) {
      console.log(`üîç CONSOLE: ${msg.text()}`);
    }
  });
  
  page.on('pageerror', error => {
    console.log(`‚ùå PAGE ERROR: ${error.message}`);
  });
  
  try {
    // Ir a la p√°gina de shop
    console.log('\nüõçÔ∏è Navegando a /shop...');
    await page.goto(`${CONFIG.baseUrl}/shop`);
    await page.waitForLoadState('networkidle');
    
    // Agregar producto autom√°ticamente
    try {
      await page.click('button:has-text("Agregar al carrito")');
      console.log('‚úÖ Producto agregado autom√°ticamente');
      await page.waitForTimeout(1000);
    } catch (e) {
      console.log('‚ö†Ô∏è No se pudo agregar producto autom√°ticamente');
    }
    
    // Ir al checkout
    console.log('\nüí≥ Navegando a /checkout...');
    await page.goto(`${CONFIG.baseUrl}/checkout`);
    await page.waitForLoadState('networkidle');
    
    console.log('\nüéØ CHECKOUT CARGADO - Ahora puedes probar manualmente:');
    console.log('   1. Verificar que est√° en modo Express');
    console.log('   2. Llenar los 3 campos requeridos');
    console.log('   3. Hacer click en "Finalizar Compra"');
    console.log('   4. Verificar si aparece el Wallet de MercadoPago');
    
    // Mantener abierto por 5 minutos
    console.log('\n‚è∞ Manteniendo navegador abierto por 5 minutos...');
    await page.waitForTimeout(300000); // 5 minutos
    
  } catch (error) {
    console.error('‚ùå Error en la prueba manual:', error.message);
  } finally {
    console.log('\nüèÅ Cerrando navegador...');
    await browser.close();
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  manualTestMercadoPago()
    .then(() => {
      console.log('\n‚úÖ Prueba manual completada');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Error en la prueba manual:', error);
      process.exit(1);
    });
}

module.exports = { manualTestMercadoPago };
