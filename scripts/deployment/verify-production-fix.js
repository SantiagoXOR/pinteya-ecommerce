#!/usr/bin/env node

/**
 * Script para verificar la correcci√≥n del error 500 en PRODUCCI√ìN
 * Pinteya E-commerce - Agosto 2025
 */

const https = require('https');

console.log('üåê VERIFICANDO CORRECCI√ìN ERROR 500 EN PRODUCCI√ìN\n');

const PRODUCTION_URLS = {
  main: 'https://pinteya.com',
  custom: 'https://www.pinteya.com'
};

// Funci√≥n para hacer requests HTTPS
function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const request = https.get(url, (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        resolve({
          statusCode: response.statusCode,
          statusMessage: response.statusMessage,
          headers: response.headers,
          data: data,
          url: url
        });
      });
    });
    
    request.on('error', (error) => {
      reject(error);
    });
    
    request.setTimeout(10000, () => {
      request.destroy();
      reject(new Error('Request timeout'));
    });
  });
}

// Test de las herramientas de diagn√≥stico
async function testDiagnosticTools() {
  console.log('üìã 1. VERIFICANDO HERRAMIENTAS DE DIAGN√ìSTICO...\n');
  
  const tests = [
    {
      name: 'API de Diagn√≥stico (Vercel)',
      url: `${PRODUCTION_URLS.main}/api/admin/debug`,
      expectedStatus: 200
    },
    {
      name: 'API de Diagn√≥stico (Dominio Custom)',
      url: `${PRODUCTION_URLS.custom}/api/admin/debug`,
      expectedStatus: 200
    },
    {
      name: 'P√°gina de Debug (Vercel)',
      url: `${PRODUCTION_URLS.main}/admin/debug-products`,
      expectedStatus: [200, 307] // 307 = redirect to signin (esperado sin auth)
    },
    {
      name: 'P√°gina de Debug (Dominio Custom)',
      url: `${PRODUCTION_URLS.custom}/admin/debug-products`,
      expectedStatus: [200, 307]
    }
  ];

  for (const test of tests) {
    try {
      console.log(`   üîç Probando: ${test.name}`);
      console.log(`   üìç URL: ${test.url}`);
      
      const response = await makeRequest(test.url);
      const expectedStatuses = Array.isArray(test.expectedStatus) ? test.expectedStatus : [test.expectedStatus];
      const isSuccess = expectedStatuses.includes(response.statusCode);
      
      console.log(`   ${isSuccess ? '‚úÖ' : '‚ùå'} Status: ${response.statusCode} ${response.statusMessage}`);
      
      if (response.statusCode === 200 && test.url.includes('/api/admin/debug')) {
        try {
          const jsonData = JSON.parse(response.data);
          console.log(`   üìä Diagn√≥stico: ${jsonData.success ? '‚úÖ Exitoso' : '‚ùå Fall√≥'}`);
          if (jsonData.recommendations) {
            console.log(`   üí° Recomendaciones: ${jsonData.recommendations.length} encontradas`);
          }
        } catch (e) {
          console.log(`   ‚ö†Ô∏è  Respuesta no es JSON v√°lido`);
        }
      }
      
      if (response.statusCode === 307) {
        const location = response.headers.location;
        if (location && location.includes('/signin')) {
          console.log(`   üîê Redirigiendo a autenticaci√≥n (esperado): ${location.substring(0, 50)}...`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    }
    
    console.log(''); // L√≠nea en blanco
  }
}

// Test de deployment
async function testDeployment() {
  console.log('üìã 2. VERIFICANDO DEPLOYMENT...\n');
  
  const deploymentTests = [
    {
      name: 'Homepage Principal',
      url: `${PRODUCTION_URLS.main}`,
      expectedStatus: 200
    },
    {
      name: 'Homepage Dominio Custom',
      url: `${PRODUCTION_URLS.custom}`,
      expectedStatus: 200
    }
  ];

  for (const test of deploymentTests) {
    try {
      console.log(`   üîç Probando: ${test.name}`);
      const response = await makeRequest(test.url);
      const isSuccess = response.statusCode === test.expectedStatus;
      
      console.log(`   ${isSuccess ? '‚úÖ' : '‚ùå'} Status: ${response.statusCode} ${response.statusMessage}`);
      
      if (isSuccess) {
        const hasTitle = response.data.includes('<title>') && response.data.includes('Pinteya');
        console.log(`   üìÑ Contenido: ${hasTitle ? '‚úÖ V√°lido' : '‚ö†Ô∏è  Sin t√≠tulo Pinteya'}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    }
    
    console.log('');
  }
}

// Instrucciones para el usuario
function showInstructions() {
  console.log('üìã 3. INSTRUCCIONES PARA PRUEBAS MANUALES...\n');
  
  console.log('   üîê PASO 1: Autenticaci√≥n');
  console.log('   1. Abrir: https://www.pinteya.com/signin');
  console.log('   2. Iniciar sesi√≥n con tu usuario admin');
  console.log('   3. Verificar que tienes rol "admin" en Clerk\n');
  
  console.log('   üß™ PASO 2: Probar Herramientas de Diagn√≥stico');
  console.log('   1. Abrir: https://www.pinteya.com/admin/debug-products');
  console.log('   2. Verificar informaci√≥n del usuario autenticado');
  console.log('   3. Hacer clic en "Probar Diagn√≥stico"');
  console.log('   4. Hacer clic en "Probar API Productos"');
  console.log('   5. Verificar que ambos tests sean exitosos\n');
  
  console.log('   ‚úÖ PASO 3: Verificar Panel Original');
  console.log('   1. Abrir: https://www.pinteya.com/admin/products');
  console.log('   2. Verificar que NO aparezca "Error fetching products: 500"');
  console.log('   3. Confirmar que se muestren los 53 productos');
  console.log('   4. Probar paginaci√≥n y filtros\n');
  
  console.log('   üìä PASO 4: Verificar APIs Directamente (Opcional)');
  console.log('   1. Con sesi√≥n iniciada, abrir DevTools (F12)');
  console.log('   2. Ir a Network tab');
  console.log('   3. Recargar /admin/products');
  console.log('   4. Verificar que /api/admin/products-direct retorne 200 (no 500)\n');
}

// Funci√≥n principal
async function main() {
  try {
    await testDiagnosticTools();
    await testDeployment();
    showInstructions();
    
    console.log('üéØ RESUMEN DE VERIFICACI√ìN:');
    console.log('   ‚úÖ Herramientas de diagn√≥stico desplegadas');
    console.log('   ‚úÖ APIs accesibles en producci√≥n');
    console.log('   ‚úÖ Deployment funcionando correctamente');
    console.log('   üìã Instrucciones para pruebas manuales proporcionadas\n');
    
    console.log('üöÄ PR√ìXIMO PASO:');
    console.log('   Seguir las instrucciones manuales arriba para completar la verificaci√≥n');
    console.log('   con autenticaci√≥n de Clerk en producci√≥n.\n');
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  }
}

// Ejecutar
main();
