/**
 * Script simple para probar la autenticaci√≥n de las APIs admin
 */

// Test b√°sico sin autenticaci√≥n
async function testWithoutAuth() {
  console.log('üîí Testing API without authentication...');
  
  try {
    const response = await fetch('https://www.pinteya.com/api/admin/products-secure?page=1&limit=5');
    
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    const text = await response.text();
    console.log('Response:', text);
    
    if (response.status === 401) {
      console.log('‚úÖ Correcto: API rechaza requests sin autenticaci√≥n');
      return true;
    } else {
      console.log('‚ùå Error: API deber√≠a rechazar requests sin autenticaci√≥n');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error en test:', error.message);
    return false;
  }
}

// Test de la API de monitoreo
async function testMonitoringAPI() {
  console.log('üìä Testing monitoring API...');
  
  try {
    const response = await fetch('https://www.pinteya.com/api/admin/monitoring');
    
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    const text = await response.text();
    console.log('Response:', text);
    
    if (response.status === 401) {
      console.log('‚úÖ Correcto: Monitoring API rechaza requests sin autenticaci√≥n');
      return true;
    } else {
      console.log('‚ùå Error: Monitoring API deber√≠a rechazar requests sin autenticaci√≥n');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error en test:', error.message);
    return false;
  }
}

// Test de la API temporal (deber√≠a funcionar sin auth)
async function testTemporaryAPI() {
  console.log('üîì Testing temporary API (should work without auth)...');
  
  try {
    const response = await fetch('https://www.pinteya.com/api/admin/products-test?page=1&limit=5');
    
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API temporal funciona:', {
        success: data.success,
        totalProducts: data.data?.total,
        productsCount: data.data?.products?.length
      });
      return true;
    } else {
      const text = await response.text();
      console.log('‚ùå Error en API temporal:', text);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error en test:', error.message);
    return false;
  }
}

async function runTests() {
  console.log('üß™ Iniciando tests de autenticaci√≥n...\n');

  const tests = [
    { name: 'API Segura sin Auth', fn: testWithoutAuth },
    { name: 'Monitoring API sin Auth', fn: testMonitoringAPI },
    { name: 'API Temporal', fn: testTemporaryAPI }
  ];

  const results = [];

  for (const test of tests) {
    console.log(`\n--- ${test.name} ---`);
    try {
      const result = await test.fn();
      results.push({ name: test.name, success: result });
    } catch (error) {
      console.error(`‚ùå Error en test ${test.name}:`, error.message);
      results.push({ name: test.name, success: false, error: error.message });
    }
  }

  // Resumen
  console.log('\nüìã RESUMEN DE TESTS:');
  console.log('='.repeat(50));
  
  const passed = results.filter(r => r.success).length;
  const total = results.length;

  results.forEach(result => {
    const status = result.success ? '‚úÖ PASS' : '‚ùå FAIL';
    console.log(`${status} ${result.name}`);
    if (result.error) {
      console.log(`    Error: ${result.error}`);
    }
  });

  console.log('='.repeat(50));
  console.log(`üìä Resultado: ${passed}/${total} tests pasaron`);
  
  if (passed === total) {
    console.log('üéâ ¬°Todos los tests pasaron! Autenticaci√≥n funcionando correctamente.');
  } else {
    console.log('‚ö†Ô∏è  Algunos tests fallaron. Revisar configuraci√≥n.');
  }

  return passed === total;
}

// Ejecutar tests
if (require.main === module) {
  runTests()
    .then((success) => {
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error('‚ùå Error ejecutando tests:', error);
      process.exit(1);
    });
}

module.exports = { runTests };
