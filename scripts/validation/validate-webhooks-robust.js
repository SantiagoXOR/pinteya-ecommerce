#!/usr/bin/env node

/**
 * Script de validaci√≥n para webhooks robustos de Clerk
 * Verifica que el sistema de webhooks est√© implementado con validaci√≥n de firma y manejo de errores
 */

const fs = require('fs')
const path = require('path')

console.log('üîó VALIDANDO WEBHOOKS ROBUSTOS DE CLERK')
console.log('='.repeat(50))

/**
 * Validar que los archivos del webhook existan
 */
function validateWebhookFiles() {
  const webhookFiles = ['src/app/api/auth/webhook/route.ts', 'src/__tests__/webhook-robust.test.ts']

  console.log('\nüìÅ VERIFICACIONES DE ARCHIVOS:')

  webhookFiles.forEach(filePath => {
    const fullPath = path.join(process.cwd(), filePath)
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ ${filePath}`)
    } else {
      throw new Error(`‚ùå Archivo requerido no encontrado: ${filePath}`)
    }
  })

  return true
}

/**
 * Validar funciones del webhook robusto
 */
function validateWebhookFunctions() {
  const webhookPath = path.join(process.cwd(), 'src', 'app', 'api', 'auth', 'webhook', 'route.ts')
  const content = fs.readFileSync(webhookPath, 'utf8')

  const checks = [
    {
      name: 'Importa servicio de sincronizaci√≥n mejorado',
      test: content.includes("from '@/lib/auth/user-sync-service'"),
      required: true,
    },
    {
      name: 'Importa funciones de auditor√≠a',
      test: content.includes("from '@/lib/auth/security-audit'"),
      required: true,
    },
    {
      name: 'Funci√≥n validateWebhookHeaders implementada',
      test: content.includes('function validateWebhookHeaders'),
      required: true,
    },
    {
      name: 'Funci√≥n verifyWebhookSignature implementada',
      test: content.includes('async function verifyWebhookSignature'),
      required: true,
    },
    {
      name: 'Funci√≥n processWebhookEvent implementada',
      test: content.includes('async function processWebhookEvent'),
      required: true,
    },
    {
      name: 'Manejo de eventos user.created',
      test: content.includes("case 'user.created'"),
      required: true,
    },
    {
      name: 'Manejo de eventos user.updated',
      test: content.includes("case 'user.updated'"),
      required: true,
    },
    {
      name: 'Manejo de eventos user.deleted',
      test: content.includes("case 'user.deleted'"),
      required: true,
    },
    {
      name: 'Validaci√≥n de firma con svix',
      test: content.includes('new Webhook(secret)') && content.includes('wh.verify'),
      required: true,
    },
    {
      name: 'Logging de eventos de seguridad',
      test: content.includes('logSecurityEvent'),
      required: true,
    },
    {
      name: 'Logging de acciones administrativas',
      test: content.includes('logAdminAction'),
      required: true,
    },
    {
      name: 'Manejo robusto de errores',
      test: content.includes('try') && content.includes('catch') && content.includes('severity'),
      required: true,
    },
    {
      name: 'M√©tricas de procesamiento',
      test: content.includes('processingTime') && content.includes('Date.now()'),
      required: true,
    },
    {
      name: 'Health check mejorado',
      test: content.includes('export async function GET') && content.includes('healthy'),
      required: true,
    },
  ]

  console.log('\nüîó VERIFICACIONES DEL WEBHOOK:')
  let passed = 0
  let failed = 0

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`)
      passed++
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`)
      if (check.required) failed++
    }
  })

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`)

  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`)
  }

  return { passed, failed, total: checks.length }
}

/**
 * Validar caracter√≠sticas de seguridad
 */
function validateSecurityFeatures() {
  const webhookPath = path.join(process.cwd(), 'src', 'app', 'api', 'auth', 'webhook', 'route.ts')
  const content = fs.readFileSync(webhookPath, 'utf8')

  const checks = [
    {
      name: 'Validaci√≥n de headers svix',
      test:
        content.includes('svix-id') &&
        content.includes('svix-timestamp') &&
        content.includes('svix-signature'),
      required: true,
    },
    {
      name: 'Verificaci√≥n de secret del webhook',
      test: content.includes('CLERK_WEBHOOK_SECRET'),
      required: true,
    },
    {
      name: 'Manejo de payload vac√≠o',
      test: content.includes('payload') && content.includes('!payload'),
      required: true,
    },
    {
      name: 'Logging de violaciones de seguridad',
      test: content.includes('SECURITY_VIOLATION'),
      required: true,
    },
    {
      name: 'Diferentes niveles de severidad',
      test: content.includes('severity') && content.includes('medium') && content.includes('high'),
      required: true,
    },
    {
      name: 'Respuestas estructuradas JSON',
      test: content.includes('JSON.stringify') && content.includes('success'),
      required: true,
    },
    {
      name: 'Headers de respuesta apropiados',
      test: content.includes('Content-Type') && content.includes('application/json'),
      required: true,
    },
    {
      name: 'C√≥digos de estado HTTP correctos',
      test:
        content.includes('status: 400') &&
        content.includes('status: 401') &&
        content.includes('status: 500'),
      required: true,
    },
  ]

  console.log('\nüõ°Ô∏è VERIFICACIONES DE SEGURIDAD:')
  let passed = 0
  let failed = 0

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`)
      passed++
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`)
      if (check.required) failed++
    }
  })

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`)

  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`)
  }

  return { passed, failed, total: checks.length }
}

/**
 * Validar integraci√≥n con servicios
 */
function validateServiceIntegration() {
  const webhookPath = path.join(process.cwd(), 'src', 'app', 'api', 'auth', 'webhook', 'route.ts')
  const content = fs.readFileSync(webhookPath, 'utf8')

  const checks = [
    {
      name: 'Usa syncUserToSupabase del nuevo servicio',
      test: content.includes('syncUserToSupabase'),
      required: true,
    },
    {
      name: 'Usa deleteUserFromSupabase del nuevo servicio',
      test: content.includes('deleteUserFromSupabase'),
      required: true,
    },
    {
      name: 'Configuraci√≥n de opciones de sincronizaci√≥n',
      test: content.includes('retryAttempts') && content.includes('validateData'),
      required: true,
    },
    {
      name: 'Logging de acciones con contexto',
      test: content.includes('USER_CREATED_VIA_WEBHOOK') && content.includes('webhook_event'),
      required: true,
    },
    {
      name: 'Manejo de tipos TypeScript',
      test: content.includes('ClerkUserData') && content.includes('WebhookEventData'),
      required: true,
    },
  ]

  console.log('\nüîó VERIFICACIONES DE INTEGRACI√ìN:')
  let passed = 0
  let failed = 0

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`)
      passed++
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`)
      if (check.required) failed++
    }
  })

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`)

  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`)
  }

  return { passed, failed, total: checks.length }
}

/**
 * Funci√≥n principal
 */
async function main() {
  try {
    console.log('üöÄ Iniciando validaci√≥n de webhooks robustos...\n')

    // Ejecutar todas las validaciones
    validateWebhookFiles()
    const webhookResult = validateWebhookFunctions()
    const securityResult = validateSecurityFeatures()
    const integrationResult = validateServiceIntegration()

    const totalPassed = webhookResult.passed + securityResult.passed + integrationResult.passed
    const totalChecks = webhookResult.total + securityResult.total + integrationResult.total

    // Resumen final
    console.log('\n' + '='.repeat(50))
    console.log('üéâ ¬°WEBHOOKS ROBUSTOS VALIDADOS!')
    console.log('='.repeat(50))
    console.log('‚úÖ Webhook robusto implementado')
    console.log('‚úÖ Validaci√≥n de firma con svix')
    console.log('‚úÖ Manejo de errores avanzado')
    console.log('‚úÖ Integraci√≥n con servicios completada')
    console.log(`‚úÖ ${totalPassed}/${totalChecks} verificaciones pasadas`)

    console.log('\nüìã FUNCIONALIDADES IMPLEMENTADAS:')
    console.log('‚Ä¢ Validaci√≥n robusta de firma con svix')
    console.log('‚Ä¢ Manejo de eventos user.created/updated/deleted')
    console.log('‚Ä¢ Retry logic integrado con servicio de sincronizaci√≥n')
    console.log('‚Ä¢ Logging completo de eventos de seguridad')
    console.log('‚Ä¢ M√©tricas de procesamiento en tiempo real')
    console.log('‚Ä¢ Health check con informaci√≥n de configuraci√≥n')

    console.log('\nüõ°Ô∏è CARACTER√çSTICAS DE SEGURIDAD:')
    console.log('‚Ä¢ Validaci√≥n de headers svix obligatorios')
    console.log('‚Ä¢ Verificaci√≥n de firma criptogr√°fica')
    console.log('‚Ä¢ Logging de violaciones de seguridad')
    console.log('‚Ä¢ Manejo graceful de errores cr√≠ticos')
    console.log('‚Ä¢ Respuestas estructuradas con c√≥digos HTTP apropiados')
    console.log('‚Ä¢ Auditor√≠a completa de eventos de webhook')

    console.log('\nüîÑ INTEGRACI√ìN CON SERVICIOS:')
    console.log('‚Ä¢ Servicio de sincronizaci√≥n autom√°tica')
    console.log('‚Ä¢ Sistema de auditor√≠a de seguridad')
    console.log('‚Ä¢ Configuraci√≥n de retry logic')
    console.log('‚Ä¢ Logging de acciones administrativas')
    console.log('‚Ä¢ Tipos TypeScript robustos')

    console.log('\nüîÑ PR√ìXIMOS PASOS:')
    console.log('1. ‚úÖ Tarea 2.2 completada: Webhooks robustos')
    console.log('2. üîÑ Continuar con Tarea 2.3: Gesti√≥n avanzada de sesiones')

    process.exit(0)
  } catch (error) {
    console.log('\n‚ùå VALIDACI√ìN FALLIDA')
    console.log('='.repeat(50))
    console.error(`üí• Error: ${error.message}`)
    console.log('\nüîß ACCIONES REQUERIDAS:')
    console.log('‚Ä¢ Revisar la implementaci√≥n del webhook robusto')
    console.log('‚Ä¢ Verificar imports y funciones de validaci√≥n')
    console.log('‚Ä¢ Comprobar integraci√≥n con servicios de sincronizaci√≥n')
    process.exit(1)
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main()
}

module.exports = {
  validateWebhookFiles,
  validateWebhookFunctions,
  validateSecurityFeatures,
  validateServiceIntegration,
}
