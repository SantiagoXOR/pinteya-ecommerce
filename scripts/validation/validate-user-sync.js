#!/usr/bin/env node

/**
 * Script de validaci√≥n para la sincronizaci√≥n autom√°tica de usuarios
 * Verifica que el sistema de sincronizaci√≥n Clerk-Supabase est√© implementado correctamente
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ VALIDANDO SINCRONIZACI√ìN AUTOM√ÅTICA DE USUARIOS');
console.log('=' .repeat(50));

/**
 * Validar que los archivos del servicio existan
 */
function validateServiceFiles() {
  const serviceFiles = [
    'src/lib/auth/user-sync-service.ts',
    'src/app/api/auth/sync-user/route.ts',
    'src/__tests__/user-sync-service.test.ts'
  ];

  console.log('\nüìÅ VERIFICACIONES DE ARCHIVOS:');
  
  serviceFiles.forEach(filePath => {
    const fullPath = path.join(process.cwd(), filePath);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ ${filePath}`);
    } else {
      throw new Error(`‚ùå Archivo requerido no encontrado: ${filePath}`);
    }
  });

  return true;
}

/**
 * Validar funciones del servicio de sincronizaci√≥n
 */
function validateSyncServiceFunctions() {
  const servicePath = path.join(process.cwd(), 'src', 'lib', 'auth', 'user-sync-service.ts');
  const content = fs.readFileSync(servicePath, 'utf8');
  
  const checks = [
    {
      name: 'syncUserToSupabase implementada',
      test: content.includes('export async function syncUserToSupabase'),
      required: true
    },
    {
      name: 'deleteUserFromSupabase implementada',
      test: content.includes('export async function deleteUserFromSupabase'),
      required: true
    },
    {
      name: 'syncUserFromClerk implementada',
      test: content.includes('export async function syncUserFromClerk'),
      required: true
    },
    {
      name: 'bulkSyncUsersFromClerk implementada',
      test: content.includes('export async function bulkSyncUsersFromClerk'),
      required: true
    },
    {
      name: 'Retry logic implementado',
      test: content.includes('retryAttempts') && content.includes('retryDelay'),
      required: true
    },
    {
      name: 'Validaci√≥n de datos implementada',
      test: content.includes('validateClerkUserData'),
      required: true
    },
    {
      name: 'Manejo de errores robusto',
      test: content.includes('try') && content.includes('catch') && content.includes('lastError'),
      required: true
    },
    {
      name: 'Logging de eventos de seguridad',
      test: content.includes('logSecurityEvent'),
      required: true
    },
    {
      name: 'Soft delete implementado',
      test: content.includes('is_active: false'),
      required: true
    },
    {
      name: 'Tipos TypeScript definidos',
      test: content.includes('ClerkUserData') && content.includes('UserSyncResult'),
      required: true
    }
  ];

  console.log('\nüîÑ VERIFICACIONES DEL SERVICIO:');
  let passed = 0;
  let failed = 0;

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`);
      passed++;
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`);
      if (check.required) failed++;
    }
  });

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`);
  
  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`);
  }

  return { passed, failed, total: checks.length };
}

/**
 * Validar API de sincronizaci√≥n mejorada
 */
function validateSyncAPI() {
  const apiPath = path.join(process.cwd(), 'src', 'app', 'api', 'auth', 'sync-user', 'route.ts');
  const content = fs.readFileSync(apiPath, 'utf8');
  
  const checks = [
    {
      name: 'Importa servicio de sincronizaci√≥n',
      test: content.includes('from \'@/lib/auth/user-sync-service\''),
      required: true
    },
    {
      name: 'M√©todo GET mejorado',
      test: content.includes('export async function GET') && content.includes('action'),
      required: true
    },
    {
      name: 'M√©todo POST mejorado',
      test: content.includes('export async function POST') && content.includes('userData'),
      required: true
    },
    {
      name: 'Soporte para sincronizaci√≥n individual',
      test: content.includes('syncUserFromClerk'),
      required: true
    },
    {
      name: 'Soporte para sincronizaci√≥n masiva',
      test: content.includes('bulkSyncUsersFromClerk'),
      required: true
    },
    {
      name: 'Compatibilidad hacia atr√°s',
      test: content.includes('email, firstName, lastName, clerkUserId'),
      required: true
    },
    {
      name: 'Manejo de errores mejorado',
      test: content.includes('try') && content.includes('catch'),
      required: true
    },
    {
      name: 'Validaci√≥n de permisos para bulk',
      test: content.includes('getAuthenticatedUser'),
      required: true
    }
  ];

  console.log('\nüîó VERIFICACIONES DE API:');
  let passed = 0;
  let failed = 0;

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`);
      passed++;
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`);
      if (check.required) failed++;
    }
  });

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`);
  
  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`);
  }

  return { passed, failed, total: checks.length };
}

/**
 * Validar integraci√≥n con sistema de auditor√≠a
 */
function validateAuditIntegration() {
  const servicePath = path.join(process.cwd(), 'src', 'lib', 'auth', 'user-sync-service.ts');
  const content = fs.readFileSync(servicePath, 'utf8');
  
  const checks = [
    {
      name: 'Importa funciones de auditor√≠a',
      test: content.includes('from \'./security-audit\''),
      required: true
    },
    {
      name: 'Registra eventos de sincronizaci√≥n',
      test: content.includes('logSecurityEvent'),
      required: true
    },
    {
      name: 'Registra acciones administrativas',
      test: content.includes('logAdminAction'),
      required: true
    },
    {
      name: 'Categoriza eventos correctamente',
      test: content.includes('event_category') && content.includes('data_access'),
      required: true
    },
    {
      name: 'Asigna severidad apropiada',
      test: content.includes('severity'),
      required: true
    }
  ];

  console.log('\nüìä VERIFICACIONES DE AUDITOR√çA:');
  let passed = 0;
  let failed = 0;

  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`);
      passed++;
    } else {
      console.log(`${check.required ? '‚ùå' : '‚ö†Ô∏è'} ${check.name}`);
      if (check.required) failed++;
    }
  });

  console.log(`\nüìä Verificaciones: ${passed} pasadas, ${failed} fallidas`);
  
  if (failed > 0) {
    throw new Error(`‚ùå ${failed} verificaciones cr√≠ticas fallaron`);
  }

  return { passed, failed, total: checks.length };
}

/**
 * Funci√≥n principal
 */
async function main() {
  try {
    console.log('üöÄ Iniciando validaci√≥n de sincronizaci√≥n autom√°tica...\n');

    // Ejecutar todas las validaciones
    validateServiceFiles();
    const serviceResult = validateSyncServiceFunctions();
    const apiResult = validateSyncAPI();
    const auditResult = validateAuditIntegration();

    const totalPassed = serviceResult.passed + apiResult.passed + auditResult.passed;
    const totalChecks = serviceResult.total + apiResult.total + auditResult.total;

    // Resumen final
    console.log('\n' + '='.repeat(50));
    console.log('üéâ ¬°SINCRONIZACI√ìN AUTOM√ÅTICA VALIDADA!');
    console.log('='.repeat(50));
    console.log('‚úÖ Servicio de sincronizaci√≥n implementado');
    console.log('‚úÖ API de sincronizaci√≥n mejorada');
    console.log('‚úÖ Integraci√≥n con auditor√≠a completada');
    console.log(`‚úÖ ${totalPassed}/${totalChecks} verificaciones pasadas`);
    
    console.log('\nüìã FUNCIONALIDADES IMPLEMENTADAS:');
    console.log('‚Ä¢ Sincronizaci√≥n autom√°tica Clerk ‚Üí Supabase');
    console.log('‚Ä¢ Retry logic con backoff exponencial');
    console.log('‚Ä¢ Validaci√≥n robusta de datos de usuario');
    console.log('‚Ä¢ Soft delete para eliminaci√≥n de usuarios');
    console.log('‚Ä¢ Sincronizaci√≥n masiva con l√≠mites de seguridad');
    console.log('‚Ä¢ Logging completo de eventos de sincronizaci√≥n');

    console.log('\nüîÑ CAPACIDADES DE SINCRONIZACI√ìN:');
    console.log('‚Ä¢ Crear usuarios nuevos desde Clerk');
    console.log('‚Ä¢ Actualizar usuarios existentes');
    console.log('‚Ä¢ Eliminar usuarios (soft delete)');
    console.log('‚Ä¢ Sincronizaci√≥n individual por ID');
    console.log('‚Ä¢ Sincronizaci√≥n masiva con batches');
    console.log('‚Ä¢ Manejo de errores con reintentos');

    console.log('\nüõ°Ô∏è CARACTER√çSTICAS DE SEGURIDAD:');
    console.log('‚Ä¢ Validaci√≥n de datos antes de sincronizar');
    console.log('‚Ä¢ Auditor√≠a completa de eventos');
    console.log('‚Ä¢ L√≠mites de seguridad en operaciones masivas');
    console.log('‚Ä¢ Manejo graceful de errores');
    console.log('‚Ä¢ Compatibilidad hacia atr√°s mantenida');

    console.log('\nüîÑ PR√ìXIMOS PASOS:');
    console.log('1. ‚úÖ Tarea 2.1 completada: Sincronizaci√≥n autom√°tica');
    console.log('2. üîÑ Continuar con Tarea 2.2: Webhooks robustos');

    process.exit(0);
  } catch (error) {
    console.log('\n‚ùå VALIDACI√ìN FALLIDA');
    console.log('='.repeat(50));
    console.error(`üí• Error: ${error.message}`);
    console.log('\nüîß ACCIONES REQUERIDAS:');
    console.log('‚Ä¢ Revisar la implementaci√≥n del servicio de sincronizaci√≥n');
    console.log('‚Ä¢ Verificar imports y exports');
    console.log('‚Ä¢ Comprobar integraci√≥n con APIs existentes');
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { 
  validateServiceFiles, 
  validateSyncServiceFunctions, 
  validateSyncAPI,
  validateAuditIntegration 
};
