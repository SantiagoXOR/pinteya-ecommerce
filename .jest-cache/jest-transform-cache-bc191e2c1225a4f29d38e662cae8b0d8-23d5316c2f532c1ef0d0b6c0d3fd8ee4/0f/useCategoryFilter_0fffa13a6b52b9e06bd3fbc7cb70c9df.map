{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoryFilter.ts"],"sourcesContent":["/**\n * useCategoryFilter Hook\n * Manages category filter state and logic\n * Pinteya E-commerce - Enterprise-ready implementation\n */\n\nimport { useState, useCallback, useMemo } from 'react'\nimport { useSearchParams } from 'next/navigation'\nimport type { CategoryId, UseCategoryFilterReturn, CategoryChangeEvent } from '@/types/categories'\n\n/**\n * Configuration options for the category filter hook\n */\ninterface UseCategoryFilterOptions {\n  /** Initial selected categories */\n  initialCategories?: CategoryId[]\n  /** Maximum number of categories that can be selected */\n  maxSelections?: number\n  /** Whether to sync with URL parameters */\n  syncWithUrl?: boolean\n  /** URL parameter name for categories */\n  urlParamName?: string\n  /** Callback for category change events */\n  onCategoryChange?: (event: CategoryChangeEvent) => void\n  /** Whether to enable analytics tracking */\n  enableAnalytics?: boolean\n}\n\n/**\n * Custom hook for managing category filter state\n *\n * Features:\n * - State management for selected categories\n * - URL synchronization\n * - Analytics tracking\n * - Accessibility support\n * - Performance optimization\n *\n * @param options Configuration options\n * @returns Category filter state and actions\n */\nexport const useCategoryFilter = (\n  options: UseCategoryFilterOptions = {}\n): UseCategoryFilterReturn => {\n  const {\n    initialCategories = [],\n    maxSelections = 10,\n    syncWithUrl = true,\n    urlParamName = 'categories',\n    onCategoryChange,\n    enableAnalytics = true,\n  } = options\n\n  const searchParams = useSearchParams()\n\n  // Initialize state from URL if sync is enabled, otherwise use initial categories\n  const getInitialState = useCallback((): CategoryId[] => {\n    if (syncWithUrl) {\n      const urlCategories = searchParams.get(urlParamName)\n      if (urlCategories) {\n        return urlCategories.split(',').filter(Boolean)\n      }\n    }\n    return initialCategories\n  }, [syncWithUrl, searchParams, urlParamName, initialCategories])\n\n  const [selectedCategories, setSelectedCategories] = useState<CategoryId[]>(getInitialState)\n\n  /**\n   * Create category change event for analytics and callbacks\n   */\n  const createChangeEvent = useCallback(\n    (\n      type: CategoryChangeEvent['type'],\n      categoryId: CategoryId | undefined,\n      newCategories: CategoryId[],\n      previousCategories: CategoryId[]\n    ): CategoryChangeEvent => ({\n      type,\n      categoryId,\n      selectedCategories: newCategories,\n      previousCategories,\n      timestamp: new Date(),\n    }),\n    []\n  )\n\n  /**\n   * Track analytics event if enabled\n   */\n  const trackAnalytics = useCallback(\n    (event: CategoryChangeEvent) => {\n      if (!enableAnalytics) {\n        return\n      }\n\n      // Track with analytics service (placeholder for actual implementation)\n      if (typeof window !== 'undefined' && window.gtag) {\n        window.gtag('event', 'category_filter_change', {\n          event_category: 'filters',\n          event_label: event.categoryId || 'bulk_action',\n          value: event.selectedCategories.length,\n          custom_parameters: {\n            action_type: event.type,\n            selected_count: event.selectedCategories.length,\n          },\n        })\n      }\n\n      // Console log for development\n      if (process.env.NODE_ENV === 'development') {\n      }\n    },\n    [enableAnalytics]\n  )\n\n  /**\n   * Toggle a category selection\n   */\n  const toggleCategory = useCallback(\n    (categoryId: CategoryId) => {\n      setSelectedCategories(prev => {\n        const isCurrentlySelected = prev.includes(categoryId)\n        let newCategories: CategoryId[]\n\n        if (isCurrentlySelected) {\n          // Remove category\n          newCategories = prev.filter(id => id !== categoryId)\n        } else {\n          // Add category (respect max selections)\n          if (prev.length >= maxSelections) {\n            console.warn(`Maximum ${maxSelections} categories can be selected`)\n            return prev\n          }\n          newCategories = [...prev, categoryId]\n        }\n\n        // Create and track event\n        const event = createChangeEvent(\n          isCurrentlySelected ? 'deselect' : 'select',\n          categoryId,\n          newCategories,\n          prev\n        )\n\n        trackAnalytics(event)\n        onCategoryChange?.(event)\n\n        return newCategories\n      })\n    },\n    [maxSelections, createChangeEvent, trackAnalytics, onCategoryChange]\n  )\n\n  /**\n   * Clear all selected categories\n   */\n  const clearAll = useCallback(() => {\n    setSelectedCategories(prev => {\n      if (prev.length === 0) {\n        return prev\n      }\n\n      const event = createChangeEvent('clear', undefined, [], prev)\n      trackAnalytics(event)\n      onCategoryChange?.(event)\n\n      return []\n    })\n  }, [createChangeEvent, trackAnalytics, onCategoryChange])\n\n  /**\n   * Select all provided categories\n   */\n  const selectAll = useCallback(\n    (categoryIds: CategoryId[]) => {\n      setSelectedCategories(prev => {\n        // Respect max selections\n        const limitedCategories = categoryIds.slice(0, maxSelections)\n\n        if (categoryIds.length > maxSelections) {\n          console.warn(`Only first ${maxSelections} categories will be selected`)\n        }\n\n        const event = createChangeEvent('selectAll', undefined, limitedCategories, prev)\n        trackAnalytics(event)\n        onCategoryChange?.(event)\n\n        return limitedCategories\n      })\n    },\n    [maxSelections, createChangeEvent, trackAnalytics, onCategoryChange]\n  )\n\n  /**\n   * Check if a category is selected\n   */\n  const isSelected = useCallback(\n    (categoryId: CategoryId): boolean => {\n      return selectedCategories.includes(categoryId)\n    },\n    [selectedCategories]\n  )\n\n  /**\n   * Get count of selected categories\n   */\n  const selectedCount = useMemo(() => selectedCategories.length, [selectedCategories])\n\n  /**\n   * Memoized return object for performance\n   */\n  const returnValue = useMemo(\n    (): UseCategoryFilterReturn => ({\n      selectedCategories,\n      toggleCategory,\n      clearAll,\n      selectAll,\n      isSelected,\n      selectedCount,\n    }),\n    [selectedCategories, toggleCategory, clearAll, selectAll, isSelected, selectedCount]\n  )\n\n  return returnValue\n}\n\n/**\n * Type guard to check if a value is a valid CategoryId\n */\nexport const isCategoryId = (value: unknown): value is CategoryId => {\n  return typeof value === 'string' && value.length > 0\n}\n\n/**\n * Utility to validate category IDs array\n */\nexport const validateCategoryIds = (categoryIds: unknown[]): CategoryId[] => {\n  return categoryIds.filter(isCategoryId)\n}\n\n/**\n * Default export for convenience\n */\nexport default useCategoryFilter\n"],"names":["isCategoryId","useCategoryFilter","validateCategoryIds","options","initialCategories","maxSelections","syncWithUrl","urlParamName","onCategoryChange","enableAnalytics","searchParams","useSearchParams","getInitialState","useCallback","urlCategories","get","split","filter","Boolean","selectedCategories","setSelectedCategories","useState","createChangeEvent","type","categoryId","newCategories","previousCategories","timestamp","Date","trackAnalytics","event","window","gtag","event_category","event_label","value","length","custom_parameters","action_type","selected_count","process","env","NODE_ENV","toggleCategory","prev","isCurrentlySelected","includes","id","console","warn","clearAll","undefined","selectAll","categoryIds","limitedCategories","slice","isSelected","selectedCount","useMemo","returnValue"],"mappings":"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"}