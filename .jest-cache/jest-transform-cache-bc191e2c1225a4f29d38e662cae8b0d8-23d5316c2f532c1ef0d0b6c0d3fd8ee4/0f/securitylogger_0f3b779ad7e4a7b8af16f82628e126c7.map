{"version":3,"names":["SecurityEventType","cov_1y1c9345is","f","s","SecurityLogUtils","SecurityLogger","SecuritySeverity","securityLogger","DEFAULT_CONFIG","enabled","logLevel","includeStackTrace","maskSensitiveData","alertOnCritical","persistToDatabase","exportToSIEM","retentionDays","SENSITIVE_FIELDS","constructor","config","b","eventBuffer","startPeriodicFlush","getInstance","instance","logSecurityEvent","type","severity","message","context","source","tags","shouldLog","event","id","generateEventId","sanitizeContext","timestamp","Date","now","push","logImmediate","triggerCriticalAlert","logToConsole","logAuthenticationSuccess","userEmail","userId","logAuthenticationFailure","reason","failureReason","logAuthorizationDenied","resource","action","logRateLimitExceeded","limit","window","rateLimit","timeWindow","logSuspiciousActivity","description","riskScore","Math","floor","logDataAccess","dataType","recordCount","logDataModification","logPaymentFraudAttempt","amount","fraudReason","logSQLInjectionAttempt","query","suspiciousQuery","logXSSAttempt","payload","xssPayload","logWebhookValidationFailure","provider","validationFailure","logAPIAbuse","pattern","frequency","abusePattern","severityLevels","sanitized","headers","maskSensitiveHeaders","metadata","maskEmail","masked","Object","keys","forEach","key","some","field","toLowerCase","includes","data","length","substring","Array","isArray","email","local","domain","split","maskedLocal","_logger","logger","error","LogLevel","ERROR","LogCategory","SECURITY","getLogLevel","log","INFO","WARN","console","toISOString","random","toString","substr","flushInterval","setInterval","flushBuffer","info","eventCount","getSecurityStats","eventsBySeverity","reduce","acc","eventsByType","totalEvents","recentEvents","slice","destroy","clearInterval","extractSecurityContext","request","userAgent","ip","method","endpoint","url","referrer","referer","requestId","deviceType","detectDeviceType","browser","extractBrowser","sanitizeHeaders","test","String"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security-logger.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SECURITY LOGGER\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from './enterprise/logger';\r\n\r\n/**\r\n * Tipos de eventos de seguridad\r\n */\r\nexport enum SecurityEventType {\r\n  AUTHENTICATION_SUCCESS = 'auth_success',\r\n  AUTHENTICATION_FAILURE = 'auth_failure',\r\n  AUTHORIZATION_DENIED = 'auth_denied',\r\n  RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded',\r\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\r\n  DATA_ACCESS = 'data_access',\r\n  DATA_MODIFICATION = 'data_modification',\r\n  PRIVILEGE_ESCALATION = 'privilege_escalation',\r\n  SECURITY_VIOLATION = 'security_violation',\r\n  PAYMENT_FRAUD_ATTEMPT = 'payment_fraud_attempt',\r\n  SQL_INJECTION_ATTEMPT = 'sql_injection_attempt',\r\n  XSS_ATTEMPT = 'xss_attempt',\r\n  CSRF_ATTEMPT = 'csrf_attempt',\r\n  BRUTE_FORCE_ATTEMPT = 'brute_force_attempt',\r\n  SESSION_HIJACK_ATTEMPT = 'session_hijack_attempt',\r\n  API_ABUSE = 'api_abuse',\r\n  WEBHOOK_VALIDATION_FAILURE = 'webhook_validation_failure',\r\n  ENCRYPTION_FAILURE = 'encryption_failure',\r\n  COMPLIANCE_VIOLATION = 'compliance_violation'\r\n}\r\n\r\n/**\r\n * Severidad de eventos de seguridad\r\n */\r\nexport enum SecuritySeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n/**\r\n * Contexto de seguridad\r\n */\r\nexport interface SecurityContext {\r\n  // Información del usuario\r\n  userId?: string;\r\n  userEmail?: string;\r\n  userRole?: string;\r\n  sessionId?: string;\r\n  \r\n  // Información de la request\r\n  ip?: string;\r\n  userAgent?: string;\r\n  method?: string;\r\n  endpoint?: string;\r\n  headers?: Record<string, string>;\r\n  \r\n  // Información geográfica\r\n  country?: string;\r\n  region?: string;\r\n  city?: string;\r\n  \r\n  // Información del dispositivo\r\n  deviceType?: 'mobile' | 'desktop' | 'tablet' | 'unknown';\r\n  browser?: string;\r\n  os?: string;\r\n  \r\n  // Información adicional\r\n  referrer?: string;\r\n  timestamp?: number;\r\n  requestId?: string;\r\n  \r\n  // Datos específicos del evento\r\n  resource?: string;\r\n  action?: string;\r\n  targetUserId?: string;\r\n  dataType?: string;\r\n  recordCount?: number;\r\n  \r\n  // Información de seguridad\r\n  riskScore?: number;\r\n  threatLevel?: SecuritySeverity;\r\n  mitigationApplied?: string[];\r\n  \r\n  // Metadatos adicionales\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Evento de seguridad\r\n */\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  type: SecurityEventType;\r\n  severity: SecuritySeverity;\r\n  message: string;\r\n  context: SecurityContext;\r\n  timestamp: number;\r\n  source: string;\r\n  tags: string[];\r\n}\r\n\r\n/**\r\n * Configuración del logger de seguridad\r\n */\r\nexport interface SecurityLoggerConfig {\r\n  enabled: boolean;\r\n  logLevel: SecuritySeverity;\r\n  includeStackTrace: boolean;\r\n  maskSensitiveData: boolean;\r\n  alertOnCritical: boolean;\r\n  persistToDatabase: boolean;\r\n  exportToSIEM: boolean;\r\n  retentionDays: number;\r\n}\r\n\r\n/**\r\n * Configuración por defecto\r\n */\r\nconst DEFAULT_CONFIG: SecurityLoggerConfig = {\r\n  enabled: true,\r\n  logLevel: SecuritySeverity.LOW,\r\n  includeStackTrace: false,\r\n  maskSensitiveData: true,\r\n  alertOnCritical: true,\r\n  persistToDatabase: true,\r\n  exportToSIEM: false,\r\n  retentionDays: 90\r\n};\r\n\r\n/**\r\n * Datos sensibles que deben ser enmascarados\r\n */\r\nconst SENSITIVE_FIELDS = [\r\n  'password',\r\n  'token',\r\n  'secret',\r\n  'key',\r\n  'authorization',\r\n  'cookie',\r\n  'session',\r\n  'credit_card',\r\n  'ssn',\r\n  'phone',\r\n  'email',\r\n  'address'\r\n];\r\n\r\n/**\r\n * Logger de seguridad especializado\r\n */\r\nexport class SecurityLogger {\r\n  private static instance: SecurityLogger;\r\n  private config: SecurityLoggerConfig;\r\n  private eventBuffer: SecurityEvent[] = [];\r\n  private flushInterval?: NodeJS.Timeout;\r\n\r\n  private constructor(config: Partial<SecurityLoggerConfig> = {}) {\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n    this.startPeriodicFlush();\r\n  }\r\n\r\n  static getInstance(config?: Partial<SecurityLoggerConfig>): SecurityLogger {\r\n    if (!SecurityLogger.instance) {\r\n      SecurityLogger.instance = new SecurityLogger(config);\r\n    }\r\n    return SecurityLogger.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra un evento de seguridad\r\n   */\r\n  logSecurityEvent(\r\n    type: SecurityEventType,\r\n    severity: SecuritySeverity,\r\n    message: string,\r\n    context: SecurityContext = {},\r\n    source: string = 'api',\r\n    tags: string[] = []\r\n  ): void {\r\n    if (!this.config.enabled) {return;}\r\n\r\n    // Verificar si el nivel de severidad cumple el umbral\r\n    if (!this.shouldLog(severity)) {return;}\r\n\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      type,\r\n      severity,\r\n      message,\r\n      context: this.sanitizeContext(context),\r\n      timestamp: Date.now(),\r\n      source,\r\n      tags: [...tags, 'security', severity, type]\r\n    };\r\n\r\n    // Agregar al buffer\r\n    this.eventBuffer.push(event);\r\n\r\n    // Log inmediato para eventos críticos\r\n    if (severity === SecuritySeverity.CRITICAL) {\r\n      this.logImmediate(event);\r\n      \r\n      if (this.config.alertOnCritical) {\r\n        this.triggerCriticalAlert(event);\r\n      }\r\n    }\r\n\r\n    // Log normal para otros eventos\r\n    this.logToConsole(event);\r\n  }\r\n\r\n  /**\r\n   * Logs específicos por tipo de evento\r\n   */\r\n\r\n  /**\r\n   * Log de autenticación exitosa\r\n   */\r\n  logAuthenticationSuccess(context: SecurityContext): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.AUTHENTICATION_SUCCESS,\r\n      SecuritySeverity.LOW,\r\n      `Usuario autenticado exitosamente: ${context.userEmail || context.userId}`,\r\n      context,\r\n      'auth',\r\n      ['authentication', 'success']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de fallo de autenticación\r\n   */\r\n  logAuthenticationFailure(context: SecurityContext, reason: string = 'Invalid credentials'): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.AUTHENTICATION_FAILURE,\r\n      SecuritySeverity.MEDIUM,\r\n      `Fallo de autenticación: ${reason}`,\r\n      { ...context, failureReason: reason },\r\n      'auth',\r\n      ['authentication', 'failure']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de acceso denegado\r\n   */\r\n  logAuthorizationDenied(context: SecurityContext, resource: string, action: string): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.AUTHORIZATION_DENIED,\r\n      SecuritySeverity.MEDIUM,\r\n      `Acceso denegado a recurso: ${resource} (acción: ${action})`,\r\n      { ...context, resource, action },\r\n      'auth',\r\n      ['authorization', 'denied', resource]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de rate limiting\r\n   */\r\n  logRateLimitExceeded(context: SecurityContext, limit: number, window: string): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.RATE_LIMIT_EXCEEDED,\r\n      SecuritySeverity.MEDIUM,\r\n      `Rate limit excedido: ${limit} requests en ${window}`,\r\n      { ...context, rateLimit: limit, timeWindow: window },\r\n      'rate-limiter',\r\n      ['rate-limit', 'exceeded']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de actividad sospechosa\r\n   */\r\n  logSuspiciousActivity(context: SecurityContext, description: string, riskScore: number): void {\r\n    const severity = riskScore >= 80 ? SecuritySeverity.CRITICAL :\r\n                    riskScore >= 60 ? SecuritySeverity.HIGH :\r\n                    riskScore >= 40 ? SecuritySeverity.MEDIUM : SecuritySeverity.LOW;\r\n\r\n    this.logSecurityEvent(\r\n      SecurityEventType.SUSPICIOUS_ACTIVITY,\r\n      severity,\r\n      `Actividad sospechosa detectada: ${description}`,\r\n      { ...context, riskScore, description },\r\n      'security-monitor',\r\n      ['suspicious', 'activity', `risk-${Math.floor(riskScore / 20) * 20}`]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de acceso a datos sensibles\r\n   */\r\n  logDataAccess(context: SecurityContext, dataType: string, recordCount: number = 1): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.DATA_ACCESS,\r\n      SecuritySeverity.LOW,\r\n      `Acceso a datos: ${dataType} (${recordCount} registros)`,\r\n      { ...context, dataType, recordCount },\r\n      'data-access',\r\n      ['data', 'access', dataType]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de modificación de datos\r\n   */\r\n  logDataModification(context: SecurityContext, dataType: string, action: string, recordCount: number = 1): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.DATA_MODIFICATION,\r\n      SecuritySeverity.MEDIUM,\r\n      `Modificación de datos: ${action} en ${dataType} (${recordCount} registros)`,\r\n      { ...context, dataType, action, recordCount },\r\n      'data-modification',\r\n      ['data', 'modification', action, dataType]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de intento de fraude en pagos\r\n   */\r\n  logPaymentFraudAttempt(context: SecurityContext, reason: string, amount?: number): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.PAYMENT_FRAUD_ATTEMPT,\r\n      SecuritySeverity.CRITICAL,\r\n      `Intento de fraude en pago detectado: ${reason}`,\r\n      { ...context, fraudReason: reason, amount },\r\n      'payment-security',\r\n      ['payment', 'fraud', 'attempt']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de intento de inyección SQL\r\n   */\r\n  logSQLInjectionAttempt(context: SecurityContext, query: string): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.SQL_INJECTION_ATTEMPT,\r\n      SecuritySeverity.HIGH,\r\n      'Intento de inyección SQL detectado',\r\n      { ...context, suspiciousQuery: this.maskSensitiveData(query) },\r\n      'sql-security',\r\n      ['sql', 'injection', 'attempt']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de intento XSS\r\n   */\r\n  logXSSAttempt(context: SecurityContext, payload: string): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.XSS_ATTEMPT,\r\n      SecuritySeverity.HIGH,\r\n      'Intento de XSS detectado',\r\n      { ...context, xssPayload: this.maskSensitiveData(payload) },\r\n      'xss-security',\r\n      ['xss', 'attempt']\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de fallo de validación de webhook\r\n   */\r\n  logWebhookValidationFailure(context: SecurityContext, provider: string, reason: string): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.WEBHOOK_VALIDATION_FAILURE,\r\n      SecuritySeverity.HIGH,\r\n      `Fallo de validación de webhook de ${provider}: ${reason}`,\r\n      { ...context, provider, validationFailure: reason },\r\n      'webhook-security',\r\n      ['webhook', 'validation', 'failure', provider]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Log de abuso de API\r\n   */\r\n  logAPIAbuse(context: SecurityContext, pattern: string, frequency: number): void {\r\n    this.logSecurityEvent(\r\n      SecurityEventType.API_ABUSE,\r\n      SecuritySeverity.HIGH,\r\n      `Abuso de API detectado: ${pattern} (${frequency} veces)`,\r\n      { ...context, abusePattern: pattern, frequency },\r\n      'api-security',\r\n      ['api', 'abuse', pattern]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Métodos auxiliares\r\n   */\r\n\r\n  /**\r\n   * Verifica si debe registrar el evento según la configuración\r\n   */\r\n  private shouldLog(severity: SecuritySeverity): boolean {\r\n    const severityLevels = {\r\n      [SecuritySeverity.LOW]: 0,\r\n      [SecuritySeverity.MEDIUM]: 1,\r\n      [SecuritySeverity.HIGH]: 2,\r\n      [SecuritySeverity.CRITICAL]: 3\r\n    };\r\n\r\n    return severityLevels[severity] >= severityLevels[this.config.logLevel];\r\n  }\r\n\r\n  /**\r\n   * Sanitiza el contexto removiendo datos sensibles\r\n   */\r\n  private sanitizeContext(context: SecurityContext): SecurityContext {\r\n    if (!this.config.maskSensitiveData) {return context;}\r\n\r\n    const sanitized = { ...context };\r\n\r\n    // Enmascarar headers sensibles\r\n    if (sanitized.headers) {\r\n      sanitized.headers = this.maskSensitiveHeaders(sanitized.headers);\r\n    }\r\n\r\n    // Enmascarar metadata sensible\r\n    if (sanitized.metadata) {\r\n      sanitized.metadata = this.maskSensitiveData(sanitized.metadata);\r\n    }\r\n\r\n    // Enmascarar email parcialmente\r\n    if (sanitized.userEmail) {\r\n      sanitized.userEmail = this.maskEmail(sanitized.userEmail);\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Enmascara headers sensibles\r\n   */\r\n  private maskSensitiveHeaders(headers: Record<string, string>): Record<string, string> {\r\n    const masked = { ...headers };\r\n\r\n    Object.keys(masked).forEach(key => {\r\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field))) {\r\n        masked[key] = '***MASKED***';\r\n      }\r\n    });\r\n\r\n    return masked;\r\n  }\r\n\r\n  /**\r\n   * Enmascara datos sensibles en objetos\r\n   */\r\n  private maskSensitiveData(data: any): any {\r\n    if (typeof data === 'string') {\r\n      return data.length > 100 ? data.substring(0, 100) + '...' : data;\r\n    }\r\n\r\n    if (typeof data !== 'object' || data === null) {\r\n      return data;\r\n    }\r\n\r\n    const masked = Array.isArray(data) ? [...data] : { ...data };\r\n\r\n    Object.keys(masked).forEach(key => {\r\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field))) {\r\n        masked[key] = '***MASKED***';\r\n      } else if (typeof masked[key] === 'object') {\r\n        masked[key] = this.maskSensitiveData(masked[key]);\r\n      }\r\n    });\r\n\r\n    return masked;\r\n  }\r\n\r\n  /**\r\n   * Enmascara email parcialmente\r\n   */\r\n  private maskEmail(email: string): string {\r\n    const [local, domain] = email.split('@');\r\n    if (!domain) {return '***MASKED***';}\r\n\r\n    const maskedLocal = local.length > 2 \r\n      ? local.substring(0, 2) + '***' \r\n      : '***';\r\n\r\n    return `${maskedLocal}@${domain}`;\r\n  }\r\n\r\n  /**\r\n   * Log inmediato para eventos críticos\r\n   */\r\n  private logImmediate(event: SecurityEvent): void {\r\n    logger.error(LogLevel.ERROR, `SECURITY CRITICAL: ${event.message}`, event.context, LogCategory.SECURITY);\r\n  }\r\n\r\n  /**\r\n   * Log a consola\r\n   */\r\n  private logToConsole(event: SecurityEvent): void {\r\n    const logLevel = this.getLogLevel(event.severity);\r\n    logger.log(logLevel, `SECURITY: ${event.message}`, event.context, LogCategory.SECURITY);\r\n  }\r\n\r\n  /**\r\n   * Convierte severidad de seguridad a nivel de log\r\n   */\r\n  private getLogLevel(severity: SecuritySeverity): LogLevel {\r\n    switch (severity) {\r\n      case SecuritySeverity.LOW:\r\n        return LogLevel.INFO;\r\n      case SecuritySeverity.MEDIUM:\r\n        return LogLevel.WARN;\r\n      case SecuritySeverity.HIGH:\r\n        return LogLevel.ERROR;\r\n      case SecuritySeverity.CRITICAL:\r\n        return LogLevel.ERROR;\r\n      default:\r\n        return LogLevel.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispara alerta crítica\r\n   */\r\n  private triggerCriticalAlert(event: SecurityEvent): void {\r\n    // En implementación real, enviar a sistema de alertas\r\n    console.error('🚨 CRITICAL SECURITY ALERT 🚨', {\r\n      type: event.type,\r\n      message: event.message,\r\n      timestamp: new Date(event.timestamp).toISOString(),\r\n      context: event.context\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Genera ID único para evento\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Inicia flush periódico del buffer\r\n   */\r\n  private startPeriodicFlush(): void {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushBuffer();\r\n    }, 60000); // Cada minuto\r\n  }\r\n\r\n  /**\r\n   * Flush del buffer de eventos\r\n   */\r\n  private flushBuffer(): void {\r\n    if (this.eventBuffer.length === 0) {return;}\r\n\r\n    // En implementación real, persistir en base de datos o SIEM\r\n    logger.info(LogLevel.INFO, `Flushing ${this.eventBuffer.length} security events`, {\r\n      eventCount: this.eventBuffer.length\r\n    }, LogCategory.SECURITY);\r\n\r\n    this.eventBuffer = [];\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de seguridad\r\n   */\r\n  getSecurityStats(): {\r\n    totalEvents: number;\r\n    eventsBySeverity: Record<SecuritySeverity, number>;\r\n    eventsByType: Record<SecurityEventType, number>;\r\n    recentEvents: SecurityEvent[];\r\n  } {\r\n    const eventsBySeverity = this.eventBuffer.reduce((acc, event) => {\r\n      acc[event.severity] = (acc[event.severity] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<SecuritySeverity, number>);\r\n\r\n    const eventsByType = this.eventBuffer.reduce((acc, event) => {\r\n      acc[event.type] = (acc[event.type] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<SecurityEventType, number>);\r\n\r\n    return {\r\n      totalEvents: this.eventBuffer.length,\r\n      eventsBySeverity,\r\n      eventsByType,\r\n      recentEvents: this.eventBuffer.slice(-10)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n    }\r\n    this.flushBuffer();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const securityLogger = SecurityLogger.getInstance();\r\n\r\n/**\r\n * Utilidades para logging de seguridad\r\n */\r\nexport const SecurityLogUtils = {\r\n  /**\r\n   * Extrae contexto de seguridad de una request\r\n   */\r\n  extractSecurityContext(request: any): SecurityContext {\r\n    const headers = request.headers || {};\r\n    const userAgent = headers['user-agent'] || '';\r\n    \r\n    return {\r\n      ip: headers['x-forwarded-for'] || headers['x-real-ip'] || request.ip,\r\n      userAgent,\r\n      method: request.method,\r\n      endpoint: request.url,\r\n      referrer: headers.referer || headers.referrer,\r\n      timestamp: Date.now(),\r\n      requestId: headers['x-request-id'],\r\n      deviceType: this.detectDeviceType(userAgent),\r\n      browser: this.extractBrowser(userAgent),\r\n      headers: this.sanitizeHeaders(headers)\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Detecta tipo de dispositivo\r\n   */\r\n  detectDeviceType(userAgent: string): SecurityContext['deviceType'] {\r\n    if (/mobile|android|iphone/i.test(userAgent)) {return 'mobile';}\r\n    if (/tablet|ipad/i.test(userAgent)) {return 'tablet';}\r\n    if (/desktop|windows|mac|linux/i.test(userAgent)) {return 'desktop';}\r\n    return 'unknown';\r\n  },\r\n\r\n  /**\r\n   * Extrae información del navegador\r\n   */\r\n  extractBrowser(userAgent: string): string {\r\n    if (/chrome/i.test(userAgent)) {return 'Chrome';}\r\n    if (/firefox/i.test(userAgent)) {return 'Firefox';}\r\n    if (/safari/i.test(userAgent)) {return 'Safari';}\r\n    if (/edge/i.test(userAgent)) {return 'Edge';}\r\n    return 'Unknown';\r\n  },\r\n\r\n  /**\r\n   * Sanitiza headers para logging\r\n   */\r\n  sanitizeHeaders(headers: Record<string, any>): Record<string, string> {\r\n    const sanitized: Record<string, string> = {};\r\n    \r\n    Object.keys(headers).forEach(key => {\r\n      if (!SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field))) {\r\n        sanitized[key] = String(headers[key]);\r\n      }\r\n    });\r\n    \r\n    return sanitized;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}