d1e88a3a442f1929de7dbcf85e05d5b8
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ProactiveMonitoringService () {
        return ProactiveMonitoringService;
    },
    get proactiveMonitoring () {
        return proactiveMonitoring;
    },
    get reportError () {
        return reportError;
    },
    get startMonitoring () {
        return startMonitoring;
    },
    get stopMonitoring () {
        return stopMonitoring;
    }
});
const _logger = require("../enterprise/logger");
const _alertsystem = require("./alert-system");
const _enterprisemetrics = require("./enterprise-metrics");
const _email = require("../notifications/email");
const _slack = require("../notifications/slack");
class ProactiveMonitoringService {
    static getInstance() {
        if (!ProactiveMonitoringService.instance) {
            ProactiveMonitoringService.instance = new ProactiveMonitoringService();
        }
        return ProactiveMonitoringService.instance;
    }
    constructor(){
        this.errorPatterns = new Map();
        this.errorCounts = new Map();
        this.healthChecks = new Map();
        this.monitoringInterval = null;
        // Solo inicializar en el servidor
        if (typeof window === 'undefined') {
            this.alertSystem = _alertsystem.EnterpriseAlertSystem.getInstance();
            this.metricsCollector = _enterprisemetrics.EnterpriseMetricsCollector.getInstance();
        }
        this.config = {
            enabled: true,
            checkInterval: 30,
            errorThreshold: 5,
            responseTimeThreshold: 2000,
            memoryThreshold: 80,
            cpuThreshold: 70,
            enableAutoRecovery: true,
            notificationChannels: [
                'email',
                'slack'
            ]
        };
        this.initializeDefaultPatterns();
    }
    initializeDefaultPatterns() {
        const defaultPatterns = [
            {
                id: 'database_connection_error',
                name: 'Database Connection Error',
                pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,
                severity: 'critical',
                threshold: 3,
                timeWindow: 5,
                description: 'Errores de conexi칩n a la base de datos',
                isActive: true
            },
            {
                id: 'payment_processing_error',
                name: 'Payment Processing Error',
                pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,
                severity: 'high',
                threshold: 5,
                timeWindow: 10,
                description: 'Errores en el procesamiento de pagos',
                isActive: true
            },
            {
                id: 'authentication_error',
                name: 'Authentication Error',
                pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,
                severity: 'medium',
                threshold: 10,
                timeWindow: 15,
                description: 'Errores de autenticaci칩n',
                isActive: true
            },
            {
                id: 'api_rate_limit',
                name: 'API Rate Limit Exceeded',
                pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,
                severity: 'medium',
                threshold: 20,
                timeWindow: 5,
                description: 'L칤mite de velocidad de API excedido',
                isActive: true
            },
            {
                id: 'server_error',
                name: 'Internal Server Error',
                pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,
                severity: 'high',
                threshold: 5,
                timeWindow: 10,
                description: 'Errores internos del servidor',
                isActive: true
            }
        ];
        defaultPatterns.forEach((pattern)=>{
            this.errorPatterns.set(pattern.id, pattern);
        });
    }
    /**
   * Inicia el monitoreo proactivo
   */ start() {
        // Solo ejecutar en el servidor
        if (typeof window !== 'undefined') {
            return;
        }
        if (!this.config.enabled) {
            _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring is disabled', {}, _logger.LogCategory.SYSTEM);
            return;
        }
        if (this.monitoringInterval) {
            this.stop();
        }
        this.monitoringInterval = setInterval(()=>{
            this.performHealthCheck();
        }, this.config.checkInterval * 1000);
        _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring started', {
            interval: this.config.checkInterval,
            patterns: this.errorPatterns.size
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Detiene el monitoreo proactivo
   */ stop() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
            _logger.logger.info(_logger.LogLevel.INFO, 'Proactive monitoring stopped', {}, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Registra un error para an치lisis
   */ async reportError(error, context) {
        const errorMessage = error instanceof Error ? error.message : error;
        const errorStack = error instanceof Error ? error.stack : undefined;
        // Solo procesar en el servidor
        if (typeof window === 'undefined') {
            // Analizar patrones de error
            for (const [patternId, pattern] of this.errorPatterns){
                if (!pattern.isActive) {
                    continue;
                }
                const regex = pattern.pattern instanceof RegExp ? pattern.pattern : new RegExp(pattern.pattern, 'i');
                if (regex.test(errorMessage)) {
                    await this.handlePatternMatch(patternId, pattern, errorMessage, context);
                }
            }
            // Registrar m칠tricas si est치 disponible
            if (this.metricsCollector) {
                await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {
                    type: 'application_error',
                    ...context
                });
            }
        }
        // Log del error
        _logger.logger.error(_logger.LogLevel.ERROR, 'Error reported to monitoring', {
            error: errorMessage,
            stack: errorStack,
            context
        }, _logger.LogCategory.SYSTEM);
    }
    async handlePatternMatch(patternId, pattern, errorMessage, context) {
        const now = new Date();
        const key = `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`;
        const existing = this.errorCounts.get(key);
        if (existing) {
            existing.count++;
            existing.lastSeen = now;
        } else {
            this.errorCounts.set(key, {
                count: 1,
                firstSeen: now,
                lastSeen: now
            });
        }
        const errorCount = this.errorCounts.get(key);
        // Verificar si se alcanz칩 el umbral (solo en servidor)
        if (errorCount.count >= pattern.threshold && this.alertSystem) {
            await this.triggerAlert(pattern, errorCount, errorMessage, context);
            // Limpiar contador para evitar spam de alertas
            this.errorCounts.delete(key);
        }
    }
    async triggerAlert(pattern, errorCount, errorMessage, context) {
        const alert = {
            id: `pattern_${pattern.id}_${Date.now()}`,
            title: `Error Pattern Detected: ${pattern.name}`,
            message: `Pattern "${pattern.name}" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,
            severity: pattern.severity,
            details: {
                pattern: pattern.name,
                description: pattern.description,
                count: errorCount.count,
                threshold: pattern.threshold,
                timeWindow: pattern.timeWindow,
                firstSeen: errorCount.firstSeen.toISOString(),
                lastSeen: errorCount.lastSeen.toISOString(),
                lastError: errorMessage,
                context
            }
        };
        // Enviar notificaciones
        if (this.config.notificationChannels.includes('email')) {
            await this.sendEmailAlert(alert);
        }
        if (this.config.notificationChannels.includes('slack')) {
            await this.sendSlackAlert(alert);
        }
        _logger.logger.warn(_logger.LogLevel.WARN, 'Error pattern alert triggered', alert, _logger.LogCategory.SYSTEM);
    }
    async sendEmailAlert(alert) {
        try {
            await _email.emailService.sendNotification({
                to: [
                    'admin@example.com'
                ],
                subject: `游뚿 ${alert.title}`,
                template: 'error-pattern-alert',
                data: alert,
                priority: alert.severity === 'critical' ? 'high' : 'normal'
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send email alert', {
                error
            }, _logger.LogCategory.SYSTEM);
        }
    }
    async sendSlackAlert(alert) {
        try {
            await _slack.slackService.sendErrorAlert({
                error: alert.message,
                context: alert.title,
                timestamp: new Date(),
                severity: alert.severity
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to send Slack alert', {
                error
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Realiza verificaci칩n de salud del sistema
   */ async performHealthCheck() {
        try {
            const health = await this.getSystemHealth();
            // Verificar umbrales cr칤ticos
            if (health.status === 'critical' || health.status === 'down') {
                await this.handleCriticalHealth(health);
            } else if (health.status === 'warning') {
                await this.handleWarningHealth(health);
            }
            // Actualizar m칠tricas si est치 disponible
            if (this.metricsCollector) {
                await this.metricsCollector.recordMetric('system_health_score', this.calculateHealthScore(health));
                await this.metricsCollector.recordMetric('system_response_time', health.responseTime);
                await this.metricsCollector.recordMetric('system_error_rate', health.errorRate);
                await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage);
                await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage);
            }
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Health check failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    }
    async getSystemHealth() {
        const issues = [];
        let status = 'healthy';
        // Simular verificaciones de salud (en producci칩n, estas ser칤an verificaciones reales)
        const responseTime = Math.random() * 1000 + 200 // 200-1200ms
        ;
        const errorRate = Math.random() * 5 // 0-5%
        ;
        const memoryUsage = Math.random() * 40 + 40 // 40-80%
        ;
        const cpuUsage = Math.random() * 30 + 20 // 20-50%
        ;
        const activeConnections = Math.floor(Math.random() * 100) + 50;
        // Verificar umbrales
        if (responseTime > this.config.responseTimeThreshold) {
            issues.push({
                id: 'high_response_time',
                type: 'performance',
                severity: 'medium',
                message: 'High response time detected',
                details: {
                    responseTime,
                    threshold: this.config.responseTimeThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            status = 'warning';
        }
        if (errorRate > this.config.errorThreshold) {
            issues.push({
                id: 'high_error_rate',
                type: 'error',
                severity: 'high',
                message: 'High error rate detected',
                details: {
                    errorRate,
                    threshold: this.config.errorThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            status = 'critical';
        }
        if (memoryUsage > this.config.memoryThreshold) {
            issues.push({
                id: 'high_memory_usage',
                type: 'resource',
                severity: 'medium',
                message: 'High memory usage detected',
                details: {
                    memoryUsage,
                    threshold: this.config.memoryThreshold
                },
                firstDetected: new Date(),
                lastSeen: new Date(),
                count: 1
            });
            if (status === 'healthy') {
                status = 'warning';
            }
        }
        return {
            status,
            uptime: typeof process !== 'undefined' && process.uptime ? process.uptime() : Date.now() / 1000,
            responseTime,
            errorRate,
            memoryUsage,
            cpuUsage,
            activeConnections,
            lastCheck: new Date(),
            issues
        };
    }
    calculateHealthScore(health) {
        let score = 100;
        health.issues.forEach((issue)=>{
            switch(issue.severity){
                case 'critical':
                    score -= 30;
                    break;
                case 'high':
                    score -= 20;
                    break;
                case 'medium':
                    score -= 10;
                    break;
                case 'low':
                    score -= 5;
                    break;
            }
        });
        return Math.max(0, score);
    }
    async handleCriticalHealth(health) {
        _logger.logger.error(_logger.LogLevel.ERROR, 'Critical system health detected', {
            health
        }, _logger.LogCategory.SYSTEM);
        // Enviar alertas cr칤ticas
        await this.sendSlackAlert({
            title: '游뚿 CRITICAL: System Health Alert',
            message: 'System health is critical - immediate attention required',
            severity: 'critical',
            details: health
        });
        // Auto-recovery si est치 habilitado
        if (this.config.enableAutoRecovery) {
            await this.attemptAutoRecovery(health);
        }
    }
    async handleWarningHealth(health) {
        _logger.logger.warn(_logger.LogLevel.WARN, 'System health warning', {
            health
        }, _logger.LogCategory.SYSTEM);
    }
    async attemptAutoRecovery(health) {
        _logger.logger.info(_logger.LogLevel.INFO, 'Attempting auto-recovery', {
            health
        }, _logger.LogCategory.SYSTEM);
    // Implementar l칩gica de auto-recuperaci칩n
    // Por ejemplo: reiniciar servicios, limpiar cache, etc.
    }
    /**
   * Configuraci칩n del servicio
   */ updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
        if (this.config.enabled && !this.monitoringInterval) {
            this.start();
        } else if (!this.config.enabled && this.monitoringInterval) {
            this.stop();
        }
    }
    getConfig() {
        return {
            ...this.config
        };
    }
    /**
   * Gesti칩n de patrones de error
   */ addErrorPattern(pattern) {
        this.errorPatterns.set(pattern.id, pattern);
        _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern added', {
            patternId: pattern.id
        }, _logger.LogCategory.SYSTEM);
    }
    removeErrorPattern(patternId) {
        this.errorPatterns.delete(patternId);
        _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern removed', {
            patternId
        }, _logger.LogCategory.SYSTEM);
    }
    getErrorPatterns() {
        return Array.from(this.errorPatterns.values());
    }
    /**
   * Obtener estad칤sticas de monitoreo
   */ async getMonitoringStats() {
        const totalErrors = Array.from(this.errorCounts.values()).reduce((sum, count)=>sum + count.count, 0);
        const activePatterns = Array.from(this.errorPatterns.values()).filter((p)=>p.isActive).length;
        const recentAlerts = this.alertSystem ? Array.from(this.errorCounts.values()).filter((count)=>Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000).length : 0;
        const systemHealth = await this.getSystemHealth();
        return {
            totalErrors,
            activePatterns,
            recentAlerts,
            systemHealth
        };
    }
}
const proactiveMonitoring = ProactiveMonitoringService.getInstance();
const reportError = (error, context)=>proactiveMonitoring.reportError(error, context);
const startMonitoring = ()=>proactiveMonitoring.start();
const stopMonitoring = ()=>proactiveMonitoring.stop();

//# sourceMappingURL=data:application/json;base64,