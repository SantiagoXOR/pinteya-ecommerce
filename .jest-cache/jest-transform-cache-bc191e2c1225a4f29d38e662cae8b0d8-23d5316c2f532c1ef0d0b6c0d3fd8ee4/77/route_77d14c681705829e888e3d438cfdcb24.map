{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\navigation\\directions\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n/**\n * API para obtener direcciones de navegación usando Google Maps Directions API\n * POST /api/driver/navigation/directions\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/config'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { origin, destination, waypoints = [], travelMode = 'DRIVING' } = body\n\n    // Validar parámetros\n    if (!origin || !destination) {\n      return NextResponse.json({ error: 'Origen y destino son requeridos' }, { status: 400 })\n    }\n\n    if (!process.env.GOOGLE_MAPS_API_KEY) {\n      return NextResponse.json({ error: 'Google Maps API key no configurada' }, { status: 500 })\n    }\n\n    // Construir URL para Google Directions API\n    const baseUrl = 'https://maps.googleapis.com/maps/api/directions/json'\n    const params = new URLSearchParams({\n      origin: `${origin.lat},${origin.lng}`,\n      destination: `${destination.lat},${destination.lng}`,\n      mode: travelMode.toLowerCase(),\n      key: process.env.GOOGLE_MAPS_API_KEY,\n      language: 'es',\n      region: 'AR',\n      units: 'metric',\n      alternatives: 'false',\n      avoid: 'tolls',\n    })\n\n    // Agregar waypoints si existen\n    if (waypoints.length > 0) {\n      const waypointsStr = waypoints.map((wp: any) => `${wp.lat},${wp.lng}`).join('|')\n      params.append('waypoints', `optimize:true|${waypointsStr}`)\n    }\n\n    // Hacer petición a Google Directions API\n    const response = await fetch(`${baseUrl}?${params}`)\n    const data = await response.json()\n\n    if (data.status !== 'OK') {\n      console.error('Google Directions API error:', data)\n      return NextResponse.json({ error: `Error de Google Maps: ${data.status}` }, { status: 400 })\n    }\n\n    const route = data.routes[0]\n    if (!route) {\n      return NextResponse.json({ error: 'No se encontró ruta' }, { status: 404 })\n    }\n\n    // Procesar instrucciones de navegación\n    const instructions = []\n    let totalDistance = 0\n    let totalDuration = 0\n\n    for (const leg of route.legs) {\n      totalDistance += leg.distance.value\n      totalDuration += leg.duration.value\n\n      for (const step of leg.steps) {\n        instructions.push({\n          instruction: step.html_instructions.replace(/<[^>]*>/g, ''), // Remover HTML\n          distance: step.distance.text,\n          duration: step.duration.text,\n          maneuver: step.maneuver || 'straight',\n          coordinates: {\n            lat: step.start_location.lat,\n            lng: step.start_location.lng,\n          },\n          end_coordinates: {\n            lat: step.end_location.lat,\n            lng: step.end_location.lng,\n          },\n        })\n      }\n    }\n\n    // Respuesta estructurada\n    const navigationData = {\n      route: {\n        overview_polyline: route.overview_polyline.points,\n        bounds: route.bounds,\n        legs: route.legs.map(leg => ({\n          distance: leg.distance,\n          duration: leg.duration,\n          start_address: leg.start_address,\n          end_address: leg.end_address,\n          start_location: leg.start_location,\n          end_location: leg.end_location,\n        })),\n      },\n      instructions,\n      summary: {\n        total_distance: {\n          value: totalDistance,\n          text: `${(totalDistance / 1000).toFixed(1)} km`,\n        },\n        total_duration: {\n          value: totalDuration,\n          text: formatDuration(totalDuration),\n        },\n        waypoints_order: route.waypoint_order || [],\n      },\n      metadata: {\n        generated_at: new Date().toISOString(),\n        travel_mode: travelMode,\n        language: 'es',\n        region: 'AR',\n      },\n    }\n\n    return NextResponse.json(navigationData)\n  } catch (error) {\n    console.error('Error in navigation directions API:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\n/**\n * Formatear duración en segundos a formato legible\n */\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600)\n  const minutes = Math.floor((seconds % 3600) / 60)\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`\n  } else {\n    return `${minutes}m`\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    // Obtener parámetros de la URL\n    const { searchParams } = new URL(request.url)\n    const origin = searchParams.get('origin')\n    const destination = searchParams.get('destination')\n\n    if (!origin || !destination) {\n      return NextResponse.json(\n        { error: 'Parámetros origin y destination requeridos' },\n        { status: 400 }\n      )\n    }\n\n    // Redirigir a POST con los parámetros\n    const [originLat, originLng] = origin.split(',').map(Number)\n    const [destLat, destLng] = destination.split(',').map(Number)\n\n    const body = {\n      origin: { lat: originLat, lng: originLng },\n      destination: { lat: destLat, lng: destLng },\n    }\n\n    // Simular POST request\n    const postRequest = new NextRequest(request.url, {\n      method: 'POST',\n      headers: request.headers,\n      body: JSON.stringify(body),\n    })\n\n    return await POST(postRequest)\n  } catch (error) {\n    console.error('Error in navigation directions GET:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","body","origin","destination","waypoints","travelMode","process","env","GOOGLE_MAPS_API_KEY","baseUrl","params","URLSearchParams","lat","lng","mode","toLowerCase","key","language","region","units","alternatives","avoid","length","waypointsStr","map","wp","join","append","response","fetch","data","console","route","routes","instructions","totalDistance","totalDuration","leg","legs","distance","value","duration","step","steps","push","instruction","html_instructions","replace","text","maneuver","coordinates","start_location","end_coordinates","end_location","navigationData","overview_polyline","points","bounds","start_address","end_address","summary","total_distance","toFixed","total_duration","formatDuration","waypoints_order","waypoint_order","metadata","generated_at","Date","toISOString","travel_mode","seconds","hours","Math","floor","minutes","searchParams","URL","url","get","originLat","originLng","split","Number","destLat","destLng","postRequest","NextRequest","method","headers","JSON","stringify"],"mappings":"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"}