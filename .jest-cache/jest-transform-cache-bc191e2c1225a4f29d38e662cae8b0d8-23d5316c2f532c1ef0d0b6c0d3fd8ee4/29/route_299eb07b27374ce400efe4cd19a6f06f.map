{"version":3,"names":["cov_b09sl6144","actualCoverage","s","GET","request","params","f","orderId","id","session","_auth","auth","user","b","_server","NextResponse","json","success","error","status","_logger","logger","log","LogLevel","INFO","LogCategory","API","userId","supabase","_server1","createAdminClient","data","order","orderError","from","select","eq","single","WARN","statusHistory","history","historyError","ascending","length","map","item","index","new_status","timestamp","created_at","note","reason","user_profiles","name","push","DATABASE","historyCount","ERROR"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\history\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * GET /api/admin/orders/[id]/history\r\n * Obtiene el historial de estados de una orden específica\r\n */\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n): Promise<NextResponse> {\r\n  try {\r\n    const orderId = params.id;\r\n\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Fetching order history', { \r\n      orderId,\r\n      userId: session.user.id \r\n    });\r\n\r\n    // Verificar que la orden existe\r\n    const supabase = createAdminClient();\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, created_at')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      logger.log(LogLevel.WARN, LogCategory.API, 'Order not found', { orderId, orderError });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Intentar obtener historial de estados desde order_status_history\r\n    let statusHistory = [];\r\n    try {\r\n      const { data: history, error: historyError } = await supabase\r\n        .from('order_status_history')\r\n        .select(`\r\n          id,\r\n          previous_status,\r\n          new_status,\r\n          reason,\r\n          created_at,\r\n          user_profiles!order_status_history_changed_by_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (!historyError && history && history.length > 0) {\r\n        // Formatear historial real\r\n        statusHistory = history.map((item, index) => ({\r\n          id: item.id,\r\n          status: item.new_status,\r\n          timestamp: item.created_at,\r\n          note: item.reason || `Estado cambiado a ${item.new_status}`,\r\n          user: item.user_profiles?.name || 'Sistema'\r\n        }));\r\n      } else {\r\n        // Si no hay historial en la tabla, crear historial básico\r\n        statusHistory = [\r\n          {\r\n            id: '1',\r\n            status: order.status,\r\n            timestamp: order.created_at,\r\n            note: 'Orden creada',\r\n            user: 'Sistema'\r\n          }\r\n        ];\r\n\r\n        // Si el estado actual no es 'pending', agregar una entrada adicional\r\n        if (order.status !== 'pending') {\r\n          statusHistory.push({\r\n            id: '2',\r\n            status: order.status,\r\n            timestamp: order.created_at, // En un caso real, esto sería la fecha de cambio\r\n            note: `Estado actualizado a ${order.status}`,\r\n            user: 'Sistema'\r\n          });\r\n        }\r\n      }\r\n    } catch (historyError) {\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Error fetching order history, using fallback', { \r\n        orderId, \r\n        historyError \r\n      });\r\n\r\n      // Fallback: crear historial básico\r\n      statusHistory = [\r\n        {\r\n          id: '1',\r\n          status: order.status,\r\n          timestamp: order.created_at,\r\n          note: 'Orden creada',\r\n          user: 'Sistema'\r\n        }\r\n      ];\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Order history fetched successfully', {\r\n      orderId,\r\n      historyCount: statusHistory.length\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: statusHistory\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error in order history API', { \r\n      orderId: params.id,\r\n      error \r\n    });\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}