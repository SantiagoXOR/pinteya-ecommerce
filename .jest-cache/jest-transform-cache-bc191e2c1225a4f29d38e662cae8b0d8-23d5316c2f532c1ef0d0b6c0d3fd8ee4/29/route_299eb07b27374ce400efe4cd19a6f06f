84d207ad0eb37de79845e8ac7429b6e2
"use strict";

/* istanbul ignore next */
function cov_b09sl6144() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\history\\route.ts";
  var hash = "f71bb5477160a1331ea69c93e894d4bab22071fb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\history\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 47
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 78
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "9": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 26,
          column: 15
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 31,
          column: 11
        }
      },
      "13": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 58
        }
      },
      "14": {
        start: {
          line: 34,
          column: 51
        },
        end: {
          line: 34,
          column: 140
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "18": {
        start: {
          line: 48,
          column: 28
        },
        end: {
          line: 48,
          column: 30
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "20": {
        start: {
          line: 50,
          column: 59
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "21": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "22": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 71,
          column: 24
        }
      },
      "23": {
        start: {
          line: 65,
          column: 60
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "24": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "25": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 92,
          column: 17
        }
      },
      "26": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "27": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "28": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "29": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "30": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "31": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "32": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 45
          }
        },
        loc: {
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 71,
            column: 21
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 22
          }
        }, {
          start: {
            line: 35,
            column: 26
          },
          end: {
            line: 35,
            column: 32
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 93,
            column: 13
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 29
          }
        }, {
          start: {
            line: 63,
            column: 33
          },
          end: {
            line: 63,
            column: 40
          }
        }, {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 63,
            column: 62
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 69,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 69,
            column: 41
          }
        }, {
          start: {
            line: 69,
            column: 45
          },
          end: {
            line: 69,
            column: 83
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 30
          },
          end: {
            line: 70,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 30
          },
          end: {
            line: 70,
            column: 54
          }
        }, {
          start: {
            line: 70,
            column: 58
          },
          end: {
            line: 70,
            column: 67
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\history\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * GET /api/admin/orders/[id]/history\r\n * Obtiene el historial de estados de una orden espec\xEDfica\r\n */\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n): Promise<NextResponse> {\r\n  try {\r\n    const orderId = params.id;\r\n\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Fetching order history', { \r\n      orderId,\r\n      userId: session.user.id \r\n    });\r\n\r\n    // Verificar que la orden existe\r\n    const supabase = createAdminClient();\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, created_at')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      logger.log(LogLevel.WARN, LogCategory.API, 'Order not found', { orderId, orderError });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Intentar obtener historial de estados desde order_status_history\r\n    let statusHistory = [];\r\n    try {\r\n      const { data: history, error: historyError } = await supabase\r\n        .from('order_status_history')\r\n        .select(`\r\n          id,\r\n          previous_status,\r\n          new_status,\r\n          reason,\r\n          created_at,\r\n          user_profiles!order_status_history_changed_by_fkey (\r\n            name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (!historyError && history && history.length > 0) {\r\n        // Formatear historial real\r\n        statusHistory = history.map((item, index) => ({\r\n          id: item.id,\r\n          status: item.new_status,\r\n          timestamp: item.created_at,\r\n          note: item.reason || `Estado cambiado a ${item.new_status}`,\r\n          user: item.user_profiles?.name || 'Sistema'\r\n        }));\r\n      } else {\r\n        // Si no hay historial en la tabla, crear historial b\xE1sico\r\n        statusHistory = [\r\n          {\r\n            id: '1',\r\n            status: order.status,\r\n            timestamp: order.created_at,\r\n            note: 'Orden creada',\r\n            user: 'Sistema'\r\n          }\r\n        ];\r\n\r\n        // Si el estado actual no es 'pending', agregar una entrada adicional\r\n        if (order.status !== 'pending') {\r\n          statusHistory.push({\r\n            id: '2',\r\n            status: order.status,\r\n            timestamp: order.created_at, // En un caso real, esto ser\xEDa la fecha de cambio\r\n            note: `Estado actualizado a ${order.status}`,\r\n            user: 'Sistema'\r\n          });\r\n        }\r\n      }\r\n    } catch (historyError) {\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Error fetching order history, using fallback', { \r\n        orderId, \r\n        historyError \r\n      });\r\n\r\n      // Fallback: crear historial b\xE1sico\r\n      statusHistory = [\r\n        {\r\n          id: '1',\r\n          status: order.status,\r\n          timestamp: order.created_at,\r\n          note: 'Orden creada',\r\n          user: 'Sistema'\r\n        }\r\n      ];\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Order history fetched successfully', {\r\n      orderId,\r\n      historyCount: statusHistory.length\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: statusHistory\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error in order history API', { \r\n      orderId: params.id,\r\n      error \r\n    });\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["GET", "request", "params", "orderId", "id", "session", "auth", "user", "NextResponse", "json", "success", "error", "status", "logger", "log", "LogLevel", "INFO", "LogCategory", "API", "userId", "supabase", "createAdminClient", "data", "order", "orderError", "from", "select", "eq", "single", "WARN", "statusHistory", "history", "historyError", "ascending", "length", "map", "item", "index", "new_status", "timestamp", "created_at", "note", "reason", "user_profiles", "name", "push", "DATABASE", "historyCount", "ERROR"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f71bb5477160a1331ea69c93e894d4bab22071fb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_b09sl6144 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_b09sl6144();
cov_b09sl6144().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_b09sl6144().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_b09sl6144().f[0]++;
    cov_b09sl6144().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_b09sl6144().s[3]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_b09sl6144().s[4]++, require("../../../../../../auth"));
const _server1 =
/* istanbul ignore next */
(cov_b09sl6144().s[5]++, require("../../../../../../lib/integrations/supabase/server"));
const _logger =
/* istanbul ignore next */
(cov_b09sl6144().s[6]++, require("../../../../../../lib/enterprise/logger"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_b09sl6144().f[1]++;
  cov_b09sl6144().s[7]++;
  try {
    const orderId =
    /* istanbul ignore next */
    (cov_b09sl6144().s[8]++, params.id);
    // Verificar autenticación
    const session =
    /* istanbul ignore next */
    (cov_b09sl6144().s[9]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_b09sl6144().s[10]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_b09sl6144().b[0][0]++;
      cov_b09sl6144().s[11]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_b09sl6144().b[0][1]++;
    }
    cov_b09sl6144().s[12]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Fetching order history', {
      orderId,
      userId: session.user.id
    });
    // Verificar que la orden existe
    const supabase =
    /* istanbul ignore next */
    (cov_b09sl6144().s[13]++, (0, _server1.createAdminClient)());
    const {
      data: order,
      error: orderError
    } =
    /* istanbul ignore next */
    (cov_b09sl6144().s[14]++, await supabase.from('orders').select('id, status, created_at').eq('id', orderId).single());
    /* istanbul ignore next */
    cov_b09sl6144().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_b09sl6144().b[2][0]++, orderError) ||
    /* istanbul ignore next */
    (cov_b09sl6144().b[2][1]++, !order)) {
      /* istanbul ignore next */
      cov_b09sl6144().b[1][0]++;
      cov_b09sl6144().s[16]++;
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.API, 'Order not found', {
        orderId,
        orderError
      });
      /* istanbul ignore next */
      cov_b09sl6144().s[17]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Orden no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_b09sl6144().b[1][1]++;
    }
    // Intentar obtener historial de estados desde order_status_history
    let statusHistory =
    /* istanbul ignore next */
    (cov_b09sl6144().s[18]++, []);
    /* istanbul ignore next */
    cov_b09sl6144().s[19]++;
    try {
      const {
        data: history,
        error: historyError
      } =
      /* istanbul ignore next */
      (cov_b09sl6144().s[20]++, await supabase.from('order_status_history').select(`
          id,
          previous_status,
          new_status,
          reason,
          created_at,
          user_profiles!order_status_history_changed_by_fkey (
            name,
            email
          )
        `).eq('order_id', orderId).order('created_at', {
        ascending: true
      }));
      /* istanbul ignore next */
      cov_b09sl6144().s[21]++;
      if (
      /* istanbul ignore next */
      (cov_b09sl6144().b[4][0]++, !historyError) &&
      /* istanbul ignore next */
      (cov_b09sl6144().b[4][1]++, history) &&
      /* istanbul ignore next */
      (cov_b09sl6144().b[4][2]++, history.length > 0)) {
        /* istanbul ignore next */
        cov_b09sl6144().b[3][0]++;
        cov_b09sl6144().s[22]++;
        // Formatear historial real
        statusHistory = history.map((item, index) => {
          /* istanbul ignore next */
          cov_b09sl6144().f[2]++;
          cov_b09sl6144().s[23]++;
          return {
            id: item.id,
            status: item.new_status,
            timestamp: item.created_at,
            note:
            /* istanbul ignore next */
            (cov_b09sl6144().b[5][0]++, item.reason) ||
            /* istanbul ignore next */
            (cov_b09sl6144().b[5][1]++, `Estado cambiado a ${item.new_status}`),
            user:
            /* istanbul ignore next */
            (cov_b09sl6144().b[6][0]++, item.user_profiles?.name) ||
            /* istanbul ignore next */
            (cov_b09sl6144().b[6][1]++, 'Sistema')
          };
        });
      } else {
        /* istanbul ignore next */
        cov_b09sl6144().b[3][1]++;
        cov_b09sl6144().s[24]++;
        // Si no hay historial en la tabla, crear historial básico
        statusHistory = [{
          id: '1',
          status: order.status,
          timestamp: order.created_at,
          note: 'Orden creada',
          user: 'Sistema'
        }];
        // Si el estado actual no es 'pending', agregar una entrada adicional
        /* istanbul ignore next */
        cov_b09sl6144().s[25]++;
        if (order.status !== 'pending') {
          /* istanbul ignore next */
          cov_b09sl6144().b[7][0]++;
          cov_b09sl6144().s[26]++;
          statusHistory.push({
            id: '2',
            status: order.status,
            timestamp: order.created_at,
            note: `Estado actualizado a ${order.status}`,
            user: 'Sistema'
          });
        } else
        /* istanbul ignore next */
        {
          cov_b09sl6144().b[7][1]++;
        }
      }
    } catch (historyError) {
      /* istanbul ignore next */
      cov_b09sl6144().s[27]++;
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'Error fetching order history, using fallback', {
        orderId,
        historyError
      });
      // Fallback: crear historial básico
      /* istanbul ignore next */
      cov_b09sl6144().s[28]++;
      statusHistory = [{
        id: '1',
        status: order.status,
        timestamp: order.created_at,
        note: 'Orden creada',
        user: 'Sistema'
      }];
    }
    /* istanbul ignore next */
    cov_b09sl6144().s[29]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Order history fetched successfully', {
      orderId,
      historyCount: statusHistory.length
    });
    /* istanbul ignore next */
    cov_b09sl6144().s[30]++;
    return _server.NextResponse.json({
      success: true,
      data: statusHistory
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b09sl6144().s[31]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Unexpected error in order history API', {
      orderId: params.id,
      error
    });
    /* istanbul ignore next */
    cov_b09sl6144().s[32]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,