{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\logger\\index.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - STRUCTURED LOGGING SYSTEM\n// ===================================\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\nexport enum LogCategory {\n  PAYMENT = 'payment',\n  WEBHOOK = 'webhook',\n  ORDER = 'order',\n  AUTH = 'auth',\n  API = 'api',\n  SECURITY = 'security',\n  PERFORMANCE = 'performance',\n  USER = 'user',\n  NEXTJS = 'nextjs',\n  METADATA = 'metadata',\n  VERCEL = 'vercel',\n}\n\ninterface BaseLogEntry {\n  timestamp: string\n  level: LogLevel\n  category: LogCategory\n  message: string\n  requestId?: string\n  userId?: string\n  sessionId?: string\n  clientIP?: string\n  userAgent?: string\n  environment: string\n}\n\ninterface PaymentLogEntry extends BaseLogEntry {\n  category: LogCategory.PAYMENT\n  paymentData: {\n    orderId?: string\n    paymentId?: string\n    amount?: number\n    currency?: string\n    status?: string\n    method?: string\n    preferenceId?: string\n  }\n}\n\ninterface WebhookLogEntry extends BaseLogEntry {\n  category: LogCategory.WEBHOOK\n  webhookData: {\n    type?: string\n    action?: string\n    dataId?: string\n    signature?: string\n    isValid?: boolean\n    processingTime?: number\n  }\n}\n\ninterface SecurityLogEntry extends BaseLogEntry {\n  category: LogCategory.SECURITY\n  securityData: {\n    threat?: string\n    blocked?: boolean\n    reason?: string\n    riskScore?: number\n  }\n}\n\ninterface PerformanceLogEntry extends BaseLogEntry {\n  category: LogCategory.PERFORMANCE\n  performanceData: {\n    operation?: string\n    duration?: number\n    endpoint?: string\n    statusCode?: number\n    responseSize?: number\n  }\n}\n\ninterface NextJSLogEntry extends BaseLogEntry {\n  category: LogCategory.NEXTJS | LogCategory.METADATA | LogCategory.VERCEL\n  nextjsData: {\n    errorType?: 'metadata_viewport' | 'metadata_themeColor' | 'build_warning' | 'runtime_error'\n    route?: string\n    buildId?: string\n    requestId?: string\n    vercelRequestId?: string\n    metadataField?: string\n    nextjsVersion?: string\n    buildWarnings?: string[]\n    correlationId?: string\n  }\n}\n\ntype LogEntry =\n  | PaymentLogEntry\n  | WebhookLogEntry\n  | SecurityLogEntry\n  | PerformanceLogEntry\n  | NextJSLogEntry\n  | BaseLogEntry\n\nclass StructuredLogger {\n  private environment: string\n  private enableConsole: boolean\n  private enableFile: boolean\n  private minLevel: LogLevel\n\n  constructor() {\n    this.environment = process.env.NODE_ENV || 'development'\n    this.enableConsole = true\n    this.enableFile = process.env.NODE_ENV === 'production'\n    this.minLevel = process.env.NODE_ENV === 'production' ? LogLevel.INFO : LogLevel.DEBUG\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.CRITICAL]\n    return levels.indexOf(level) >= levels.indexOf(this.minLevel)\n  }\n\n  private formatLogEntry(entry: LogEntry): string {\n    return JSON.stringify(\n      {\n        ...entry,\n        timestamp: new Date().toISOString(),\n        environment: this.environment,\n      },\n      null,\n      this.environment === 'development' ? 2 : 0\n    )\n  }\n\n  private writeLog(entry: LogEntry): void {\n    if (!this.shouldLog(entry.level)) {\n      return\n    }\n\n    const formattedEntry = this.formatLogEntry(entry)\n\n    // Console output\n    if (this.enableConsole) {\n      switch (entry.level) {\n        case LogLevel.DEBUG:\n          console.debug(formattedEntry)\n          break\n        case LogLevel.INFO:\n          console.info(formattedEntry)\n          break\n        case LogLevel.WARN:\n          console.warn(formattedEntry)\n          break\n        case LogLevel.ERROR:\n        case LogLevel.CRITICAL:\n          console.error(formattedEntry)\n          break\n      }\n    }\n\n    // File output (en producción se podría integrar con servicios como Winston, Pino, etc.)\n    if (this.enableFile) {\n      // TODO: Implementar escritura a archivo o servicio de logging externo\n      // Por ahora solo console en producción\n    }\n  }\n\n  // Métodos públicos para diferentes categorías\n  payment(\n    level: LogLevel,\n    message: string,\n    paymentData: PaymentLogEntry['paymentData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.PAYMENT,\n      message,\n      paymentData,\n      environment: this.environment,\n      ...metadata,\n    } as PaymentLogEntry)\n  }\n\n  webhook(\n    level: LogLevel,\n    message: string,\n    webhookData: WebhookLogEntry['webhookData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.WEBHOOK,\n      message,\n      webhookData,\n      environment: this.environment,\n      ...metadata,\n    } as WebhookLogEntry)\n  }\n\n  security(\n    level: LogLevel,\n    message: string,\n    securityData: SecurityLogEntry['securityData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.SECURITY,\n      message,\n      securityData,\n      environment: this.environment,\n      ...metadata,\n    } as SecurityLogEntry)\n  }\n\n  performance(\n    level: LogLevel,\n    message: string,\n    performanceData: PerformanceLogEntry['performanceData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.PERFORMANCE,\n      message,\n      performanceData,\n      environment: this.environment,\n      ...metadata,\n    } as PerformanceLogEntry)\n  }\n\n  nextjs(\n    level: LogLevel,\n    message: string,\n    nextjsData: NextJSLogEntry['nextjsData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    const entry: NextJSLogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.NEXTJS,\n      message,\n      nextjsData,\n      environment: this.environment,\n      ...metadata,\n    }\n    this.writeLog(entry)\n  }\n\n  metadata(\n    level: LogLevel,\n    message: string,\n    nextjsData: NextJSLogEntry['nextjsData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    const entry: NextJSLogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.METADATA,\n      message,\n      nextjsData,\n      environment: this.environment,\n      ...metadata,\n    }\n    this.writeLog(entry)\n  }\n\n  vercel(\n    level: LogLevel,\n    message: string,\n    nextjsData: NextJSLogEntry['nextjsData'],\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    const entry: NextJSLogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category: LogCategory.VERCEL,\n      message,\n      nextjsData,\n      environment: this.environment,\n      ...metadata,\n    }\n    this.writeLog(entry)\n  }\n\n  // Método log genérico para compatibilidad\n  log(\n    level: LogLevel,\n    category: LogCategory,\n    message: string,\n    data?: any,\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      environment: this.environment,\n      data,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  // Métodos de conveniencia\n  debug(\n    level: LogLevel,\n    message: string,\n    data?: any,\n    category?: LogCategory,\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level: level,\n      category: category || LogCategory.API,\n      message,\n      environment: this.environment,\n      data,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  info(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level: LogLevel.INFO,\n      category,\n      message,\n      environment: this.environment,\n      data,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  warn(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level: LogLevel.WARN,\n      category,\n      message,\n      environment: this.environment,\n      data,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  error(\n    category: LogCategory,\n    message: string,\n    error?: Error,\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level: LogLevel.ERROR,\n      category,\n      message,\n      environment: this.environment,\n      error: error\n        ? {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          }\n        : undefined,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  critical(\n    category: LogCategory,\n    message: string,\n    error?: Error,\n    metadata?: Partial<BaseLogEntry>\n  ): void {\n    this.writeLog({\n      timestamp: new Date().toISOString(),\n      level: LogLevel.CRITICAL,\n      category,\n      message,\n      environment: this.environment,\n      error: error\n        ? {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          }\n        : undefined,\n      ...metadata,\n    } as BaseLogEntry)\n  }\n\n  // Método para medir performance\n  measurePerformance<T>(\n    operation: string,\n    fn: () => T | Promise<T>,\n    metadata?: Partial<BaseLogEntry>\n  ): T | Promise<T> {\n    const start = Date.now()\n\n    try {\n      const result = fn()\n\n      if (result instanceof Promise) {\n        return result\n          .then(value => {\n            const duration = Date.now() - start\n            this.performance(\n              LogLevel.INFO,\n              `Operation completed: ${operation}`,\n              {\n                operation,\n                duration,\n              },\n              metadata\n            )\n            return value\n          })\n          .catch(error => {\n            const duration = Date.now() - start\n            this.performance(\n              LogLevel.ERROR,\n              `Operation failed: ${operation}`,\n              {\n                operation,\n                duration,\n              },\n              metadata\n            )\n            throw error\n          })\n      } else {\n        const duration = Date.now() - start\n        this.performance(\n          LogLevel.INFO,\n          `Operation completed: ${operation}`,\n          {\n            operation,\n            duration,\n          },\n          metadata\n        )\n        return result\n      }\n    } catch (error) {\n      const duration = Date.now() - start\n      this.performance(\n        LogLevel.ERROR,\n        `Operation failed: ${operation}`,\n        {\n          operation,\n          duration,\n        },\n        metadata\n      )\n      throw error\n    }\n  }\n}\n\n// Instancia singleton del logger\nexport const logger = new StructuredLogger()\n\n// Funciones de conveniencia para uso directo\nexport const logPayment = (\n  level: LogLevel,\n  message: string,\n  paymentData: PaymentLogEntry['paymentData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.payment(level, message, paymentData, metadata)\n}\n\nexport const logWebhook = (\n  level: LogLevel,\n  message: string,\n  webhookData: WebhookLogEntry['webhookData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.webhook(level, message, webhookData, metadata)\n}\n\nexport const logSecurity = (\n  level: LogLevel,\n  message: string,\n  securityData: SecurityLogEntry['securityData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.security(level, message, securityData, metadata)\n}\n\nexport const logPerformance = (\n  level: LogLevel,\n  message: string,\n  performanceData: PerformanceLogEntry['performanceData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.performance(level, message, performanceData, metadata)\n}\n\nexport const logNextJS = (\n  level: LogLevel,\n  message: string,\n  nextjsData: NextJSLogEntry['nextjsData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.nextjs(level, message, nextjsData, metadata)\n}\n\nexport const logMetadata = (\n  level: LogLevel,\n  message: string,\n  nextjsData: NextJSLogEntry['nextjsData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.metadata(level, message, nextjsData, metadata)\n}\n\nexport const logVercel = (\n  level: LogLevel,\n  message: string,\n  nextjsData: NextJSLogEntry['nextjsData'],\n  metadata?: Partial<BaseLogEntry>\n) => {\n  logger.vercel(level, message, nextjsData, metadata)\n}\n\nexport default logger\n"],"names":["LogCategory","LogLevel","logMetadata","logNextJS","logPayment","logPerformance","logSecurity","logVercel","logWebhook","logger","StructuredLogger","environment","process","env","NODE_ENV","enableConsole","enableFile","minLevel","shouldLog","level","levels","indexOf","formatLogEntry","entry","JSON","stringify","timestamp","Date","toISOString","writeLog","formattedEntry","console","debug","info","warn","error","payment","message","paymentData","metadata","category","webhook","webhookData","security","securityData","performance","performanceData","nextjs","nextjsData","vercel","log","data","name","stack","undefined","critical","measurePerformance","operation","fn","start","now","result","Promise","then","value","duration","catch"],"mappings":"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"}