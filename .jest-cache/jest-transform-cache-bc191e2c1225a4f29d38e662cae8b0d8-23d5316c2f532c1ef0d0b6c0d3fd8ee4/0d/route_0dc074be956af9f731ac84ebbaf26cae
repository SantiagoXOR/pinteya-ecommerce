efde5619f311257940d24cf434532f02
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_hcl3fz0un() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts";
  var hash = "fa1d4feb5630f787d2d0e938962cacc1bf09ed7b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 57
        }
      },
      "9": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "10": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "11": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 63
        }
      },
      "12": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "14": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "18": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 79
        }
      },
      "19": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 64
        }
      },
      "20": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 154
        }
      },
      "21": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 159
        }
      },
      "22": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 152
        }
      },
      "23": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 88
        }
      },
      "24": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 83
        }
      },
      "25": {
        start: {
          line: 62,
          column: 32
        },
        end: {
          line: 62,
          column: 320
        }
      },
      "26": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "28": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "30": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "31": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "32": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "33": {
        start: {
          line: 87,
          column: 25
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "34": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 99
        }
      },
      "35": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 51
        }
      },
      "36": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 99
        }
      },
      "37": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 11
        }
      },
      "38": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "39": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 49
        }
      },
      "40": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "41": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "42": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "43": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "44": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 100
        }
      },
      "45": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 138,
            column: 19
          }
        },
        loc: {
          start: {
            line: 138,
            column: 29
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 138
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 28
          },
          end: {
            line: 59,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 59,
            column: 82
          }
        }, {
          start: {
            line: 59,
            column: 85
          },
          end: {
            line: 59,
            column: 88
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 46
          },
          end: {
            line: 60,
            column: 79
          }
        }, {
          start: {
            line: 60,
            column: 82
          },
          end: {
            line: 60,
            column: 83
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 301
          },
          end: {
            line: 62,
            column: 319
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 301
          },
          end: {
            line: 62,
            column: 314
          }
        }, {
          start: {
            line: 62,
            column: 318
          },
          end: {
            line: 62,
            column: 319
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 37
          },
          end: {
            line: 101,
            column: 178
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 83
          },
          end: {
            line: 101,
            column: 172
          }
        }, {
          start: {
            line: 101,
            column: 175
          },
          end: {
            line: 101,
            column: 178
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 37
          },
          end: {
            line: 107,
            column: 184
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 85
          },
          end: {
            line: 107,
            column: 178
          }
        }, {
          start: {
            line: 107,
            column: 181
          },
          end: {
            line: 107,
            column: 184
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 37
          },
          end: {
            line: 113,
            column: 175
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 82
          },
          end: {
            line: 113,
            column: 169
          }
        }, {
          start: {
            line: 113,
            column: 172
          },
          end: {
            line: 113,
            column: 175
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 119,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 47
          },
          end: {
            line: 119,
            column: 58
          }
        }, {
          start: {
            line: 119,
            column: 61
          },
          end: {
            line: 119,
            column: 75
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { isRedisAvailable } from '@/lib/integrations/redis';\r\nimport { logger, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Tipos para la respuesta de m\xE9tricas\r\ninterface MetricsResponse {\r\n  success: boolean;\r\n  data?: {\r\n    realTimeMetrics: {\r\n      totalRequests: number;\r\n      successRate: number;\r\n      errorRate: number;\r\n      averageResponseTime: number;\r\n      rateLimitHits: number;\r\n      retryAttempts: number;\r\n    };\r\n    endpointMetrics: {\r\n      createPreference: EndpointMetric;\r\n      webhook: EndpointMetric;\r\n      paymentQuery: EndpointMetric;\r\n    };\r\n    systemHealth: {\r\n      redisStatus: 'connected' | 'disconnected';\r\n      lastUpdate: string;\r\n      uptime: number;\r\n    };\r\n    alerts: Alert[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface EndpointMetric {\r\n  requests: number;\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n}\r\n\r\ninterface Alert {\r\n  type: 'warning' | 'error' | 'info';\r\n  message: string;\r\n  timestamp: string;\r\n  endpoint?: string;\r\n}\r\n\r\n/**\r\n * GET /api/admin/mercadopago/metrics\r\n * Obtiene m\xE9tricas en tiempo real de MercadoPago\r\n */\r\nexport async function GET(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // TODO: Verificar rol de admin\r\n    // const isAdmin = await checkUserRole(userId);\r\n    // if (!isAdmin) {\r\n    //   return NextResponse.json(\r\n    //     { success: false, error: 'Acceso denegado' },\r\n    //     { status: 403 }\r\n    //   );\r\n    // }\r\n\r\n    logger.info(LogCategory.API, 'Fetching MercadoPago metrics', { userId });\r\n\r\n    // Obtener m\xE9tricas del sistema\r\n    const metrics = await metricsCollector.getMercadoPagoMetrics();\r\n    const redisStatus = await isRedisAvailable();\r\n\r\n    // Calcular m\xE9tricas en tiempo real\r\n    const totalRequests = metrics.payment_creation.requests.total + \r\n                         metrics.payment_queries.requests.total + \r\n                         metrics.webhook_processing.requests.total;\r\n\r\n    const totalSuccess = metrics.payment_creation.requests.success + \r\n                        metrics.payment_queries.requests.success + \r\n                        metrics.webhook_processing.requests.success;\r\n\r\n    const totalErrors = metrics.payment_creation.requests.error + \r\n                       metrics.payment_queries.requests.error + \r\n                       metrics.webhook_processing.requests.error;\r\n\r\n    const successRate = totalRequests > 0 ? (totalSuccess / totalRequests) * 100 : 100;\r\n    const errorRate = totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0;\r\n\r\n    // Calcular tiempo de respuesta promedio ponderado\r\n    const avgResponseTime = (\r\n      metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total +\r\n      metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total +\r\n      metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total\r\n    ) / (totalRequests || 1);\r\n\r\n    // Generar alertas basadas en umbrales\r\n    const alerts: Alert[] = [];\r\n\r\n    if (errorRate > 5) {\r\n      alerts.push({\r\n        type: 'error',\r\n        message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (avgResponseTime > 3000) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (!redisStatus) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: 'Redis desconectado - usando fallback en memoria',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Preparar respuesta\r\n    const response: MetricsResponse = {\r\n      success: true,\r\n      data: {\r\n        realTimeMetrics: {\r\n          totalRequests,\r\n          successRate: Math.round(successRate * 100) / 100,\r\n          errorRate: Math.round(errorRate * 100) / 100,\r\n          averageResponseTime: Math.round(avgResponseTime),\r\n          rateLimitHits: metrics.payment_creation.requests.rate_limited + \r\n                        metrics.payment_queries.requests.rate_limited + \r\n                        metrics.webhook_processing.requests.rate_limited,\r\n          retryAttempts: metrics.payment_creation.retry_stats.total_retries + \r\n                        metrics.payment_queries.retry_stats.total_retries + \r\n                        metrics.webhook_processing.retry_stats.total_retries,\r\n        },\r\n        endpointMetrics: {\r\n          createPreference: {\r\n            requests: metrics.payment_creation.requests.total,\r\n            successRate: metrics.payment_creation.requests.total > 0 ? \r\n              (metrics.payment_creation.requests.success / metrics.payment_creation.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),\r\n            errorCount: metrics.payment_creation.requests.error,\r\n          },\r\n          webhook: {\r\n            requests: metrics.webhook_processing.requests.total,\r\n            successRate: metrics.webhook_processing.requests.total > 0 ? \r\n              (metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),\r\n            errorCount: metrics.webhook_processing.requests.error,\r\n          },\r\n          paymentQuery: {\r\n            requests: metrics.payment_queries.requests.total,\r\n            successRate: metrics.payment_queries.requests.total > 0 ? \r\n              (metrics.payment_queries.requests.success / metrics.payment_queries.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),\r\n            errorCount: metrics.payment_queries.requests.error,\r\n          },\r\n        },\r\n        systemHealth: {\r\n          redisStatus: redisStatus ? 'connected' : 'disconnected',\r\n          lastUpdate: new Date().toISOString(),\r\n          uptime: process.uptime(),\r\n        },\r\n        alerts,\r\n      },\r\n    };\r\n\r\n    logger.info(LogCategory.API, 'MercadoPago metrics retrieved successfully');\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error fetching MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/mercadopago/metrics\r\n * Reinicia las m\xE9tricas de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Resetting MercadoPago metrics', { userId });\r\n\r\n    // TODO: Implementar reset de m\xE9tricas\r\n    // await metricsCollector.resetMetrics();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'M\xE9tricas reiniciadas correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error resetting MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "session", "auth", "user", "NextResponse", "json", "success", "error", "status", "logger", "info", "LogCategory", "API", "userId", "metrics", "metricsCollector", "getMercadoPagoMetrics", "redisStatus", "isRedisAvailable", "totalRequests", "payment_creation", "requests", "total", "payment_queries", "webhook_processing", "totalSuccess", "totalErrors", "successRate", "errorRate", "avgResponseTime", "response_times", "avg", "alerts", "push", "type", "message", "toFixed", "timestamp", "Date", "toISOString", "response", "data", "realTimeMetrics", "Math", "round", "averageResponseTime", "rateLimitHits", "rate_limited", "retryAttempts", "retry_stats", "total_retries", "endpointMetrics", "createPreference", "errorCount", "webhook", "paymentQuery", "systemHealth", "lastUpdate", "uptime", "process"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fa1d4feb5630f787d2d0e938962cacc1bf09ed7b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hcl3fz0un = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hcl3fz0un();
cov_hcl3fz0un().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_hcl3fz0un().f[0]++;
  cov_hcl3fz0un().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_hcl3fz0un().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_hcl3fz0un().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_hcl3fz0un().f[1]++;
    cov_hcl3fz0un().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_hcl3fz0un().f[2]++;
    cov_hcl3fz0un().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_hcl3fz0un().f[3]++;
    cov_hcl3fz0un().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_hcl3fz0un().s[7]++, require("next/server"));
const _config =
/* istanbul ignore next */
(cov_hcl3fz0un().s[8]++, require("../../../../../lib/auth/config"));
const _metrics =
/* istanbul ignore next */
(cov_hcl3fz0un().s[9]++, require("../../../../../lib/enterprise/metrics"));
const _redis =
/* istanbul ignore next */
(cov_hcl3fz0un().s[10]++, require("../../../../../lib/integrations/redis"));
const _logger =
/* istanbul ignore next */
(cov_hcl3fz0un().s[11]++, require("../../../../../lib/enterprise/logger"));
const runtime =
/* istanbul ignore next */
(cov_hcl3fz0un().s[12]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_hcl3fz0un().f[4]++;
  cov_hcl3fz0un().s[13]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[14]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_hcl3fz0un().s[15]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_hcl3fz0un().b[0][0]++;
      cov_hcl3fz0un().s[16]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_hcl3fz0un().b[0][1]++;
    }
    // TODO: Verificar rol de admin
    // const isAdmin = await checkUserRole(userId);
    // if (!isAdmin) {
    //   return NextResponse.json(
    //     { success: false, error: 'Acceso denegado' },
    //     { status: 403 }
    //   );
    // }
    cov_hcl3fz0un().s[17]++;
    _logger.logger.info(_logger.LogCategory.API, 'Fetching MercadoPago metrics', {
      userId
    });
    // Obtener mÃ©tricas del sistema
    const metrics =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[18]++, await _metrics.metricsCollector.getMercadoPagoMetrics());
    const redisStatus =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[19]++, await (0, _redis.isRedisAvailable)());
    // Calcular mÃ©tricas en tiempo real
    const totalRequests =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[20]++, metrics.payment_creation.requests.total + metrics.payment_queries.requests.total + metrics.webhook_processing.requests.total);
    const totalSuccess =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[21]++, metrics.payment_creation.requests.success + metrics.payment_queries.requests.success + metrics.webhook_processing.requests.success);
    const totalErrors =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[22]++, metrics.payment_creation.requests.error + metrics.payment_queries.requests.error + metrics.webhook_processing.requests.error);
    const successRate =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[23]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[1][0]++, totalSuccess / totalRequests * 100) :
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[1][1]++, 100));
    const errorRate =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[24]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[2][0]++, totalErrors / totalRequests * 100) :
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[2][1]++, 0));
    // Calcular tiempo de respuesta promedio ponderado
    const avgResponseTime =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[25]++, (metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total + metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total + metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total) / (
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[3][0]++, totalRequests) ||
    /* istanbul ignore next */
    (cov_hcl3fz0un().b[3][1]++, 1)));
    // Generar alertas basadas en umbrales
    const alerts =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[26]++, []);
    /* istanbul ignore next */
    cov_hcl3fz0un().s[27]++;
    if (errorRate > 5) {
      /* istanbul ignore next */
      cov_hcl3fz0un().b[4][0]++;
      cov_hcl3fz0un().s[28]++;
      alerts.push({
        type: 'error',
        message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_hcl3fz0un().b[4][1]++;
    }
    cov_hcl3fz0un().s[29]++;
    if (avgResponseTime > 3000) {
      /* istanbul ignore next */
      cov_hcl3fz0un().b[5][0]++;
      cov_hcl3fz0un().s[30]++;
      alerts.push({
        type: 'warning',
        message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_hcl3fz0un().b[5][1]++;
    }
    cov_hcl3fz0un().s[31]++;
    if (!redisStatus) {
      /* istanbul ignore next */
      cov_hcl3fz0un().b[6][0]++;
      cov_hcl3fz0un().s[32]++;
      alerts.push({
        type: 'warning',
        message: 'Redis desconectado - usando fallback en memoria',
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_hcl3fz0un().b[6][1]++;
    }
    // Preparar respuesta
    const response =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[33]++, {
      success: true,
      data: {
        realTimeMetrics: {
          totalRequests,
          successRate: Math.round(successRate * 100) / 100,
          errorRate: Math.round(errorRate * 100) / 100,
          averageResponseTime: Math.round(avgResponseTime),
          rateLimitHits: metrics.payment_creation.requests.rate_limited + metrics.payment_queries.requests.rate_limited + metrics.webhook_processing.requests.rate_limited,
          retryAttempts: metrics.payment_creation.retry_stats.total_retries + metrics.payment_queries.retry_stats.total_retries + metrics.webhook_processing.retry_stats.total_retries
        },
        endpointMetrics: {
          createPreference: {
            requests: metrics.payment_creation.requests.total,
            successRate: metrics.payment_creation.requests.total > 0 ?
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[7][0]++, metrics.payment_creation.requests.success / metrics.payment_creation.requests.total * 100) :
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[7][1]++, 100),
            averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),
            errorCount: metrics.payment_creation.requests.error
          },
          webhook: {
            requests: metrics.webhook_processing.requests.total,
            successRate: metrics.webhook_processing.requests.total > 0 ?
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[8][0]++, metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total * 100) :
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[8][1]++, 100),
            averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),
            errorCount: metrics.webhook_processing.requests.error
          },
          paymentQuery: {
            requests: metrics.payment_queries.requests.total,
            successRate: metrics.payment_queries.requests.total > 0 ?
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[9][0]++, metrics.payment_queries.requests.success / metrics.payment_queries.requests.total * 100) :
            /* istanbul ignore next */
            (cov_hcl3fz0un().b[9][1]++, 100),
            averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),
            errorCount: metrics.payment_queries.requests.error
          }
        },
        systemHealth: {
          redisStatus: redisStatus ?
          /* istanbul ignore next */
          (cov_hcl3fz0un().b[10][0]++, 'connected') :
          /* istanbul ignore next */
          (cov_hcl3fz0un().b[10][1]++, 'disconnected'),
          lastUpdate: new Date().toISOString(),
          uptime: process.uptime()
        },
        alerts
      }
    });
    /* istanbul ignore next */
    cov_hcl3fz0un().s[34]++;
    _logger.logger.info(_logger.LogCategory.API, 'MercadoPago metrics retrieved successfully');
    /* istanbul ignore next */
    cov_hcl3fz0un().s[35]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_hcl3fz0un().s[36]++;
    _logger.logger.error(_logger.LogCategory.API, 'Error fetching MercadoPago metrics', error);
    /* istanbul ignore next */
    cov_hcl3fz0un().s[37]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_hcl3fz0un().f[5]++;
  cov_hcl3fz0un().s[38]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_hcl3fz0un().s[39]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_hcl3fz0un().s[40]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_hcl3fz0un().b[11][0]++;
      cov_hcl3fz0un().s[41]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_hcl3fz0un().b[11][1]++;
    }
    cov_hcl3fz0un().s[42]++;
    _logger.logger.info(_logger.LogCategory.API, 'Resetting MercadoPago metrics', {
      userId
    });
    // TODO: Implementar reset de mÃ©tricas
    // await metricsCollector.resetMetrics();
    /* istanbul ignore next */
    cov_hcl3fz0un().s[43]++;
    return _server.NextResponse.json({
      success: true,
      message: 'MÃ©tricas reiniciadas correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hcl3fz0un().s[44]++;
    _logger.logger.error(_logger.LogCategory.API, 'Error resetting MercadoPago metrics', error);
    /* istanbul ignore next */
    cov_hcl3fz0un().s[45]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,