{"version":3,"names":["cov_hcl3fz0un","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","b","_server","NextResponse","json","success","error","status","_logger","logger","info","LogCategory","API","userId","metrics","_metrics","metricsCollector","getMercadoPagoMetrics","redisStatus","_redis","isRedisAvailable","totalRequests","payment_creation","requests","total","payment_queries","webhook_processing","totalSuccess","totalErrors","successRate","errorRate","avgResponseTime","response_times","avg","alerts","push","type","message","toFixed","timestamp","Date","toISOString","response","data","realTimeMetrics","Math","round","averageResponseTime","rateLimitHits","rate_limited","retryAttempts","retry_stats","total_retries","endpointMetrics","createPreference","errorCount","webhook","paymentQuery","systemHealth","lastUpdate","uptime","process"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\mercadopago\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { isRedisAvailable } from '@/lib/integrations/redis';\r\nimport { logger, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Tipos para la respuesta de métricas\r\ninterface MetricsResponse {\r\n  success: boolean;\r\n  data?: {\r\n    realTimeMetrics: {\r\n      totalRequests: number;\r\n      successRate: number;\r\n      errorRate: number;\r\n      averageResponseTime: number;\r\n      rateLimitHits: number;\r\n      retryAttempts: number;\r\n    };\r\n    endpointMetrics: {\r\n      createPreference: EndpointMetric;\r\n      webhook: EndpointMetric;\r\n      paymentQuery: EndpointMetric;\r\n    };\r\n    systemHealth: {\r\n      redisStatus: 'connected' | 'disconnected';\r\n      lastUpdate: string;\r\n      uptime: number;\r\n    };\r\n    alerts: Alert[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface EndpointMetric {\r\n  requests: number;\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n}\r\n\r\ninterface Alert {\r\n  type: 'warning' | 'error' | 'info';\r\n  message: string;\r\n  timestamp: string;\r\n  endpoint?: string;\r\n}\r\n\r\n/**\r\n * GET /api/admin/mercadopago/metrics\r\n * Obtiene métricas en tiempo real de MercadoPago\r\n */\r\nexport async function GET(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // TODO: Verificar rol de admin\r\n    // const isAdmin = await checkUserRole(userId);\r\n    // if (!isAdmin) {\r\n    //   return NextResponse.json(\r\n    //     { success: false, error: 'Acceso denegado' },\r\n    //     { status: 403 }\r\n    //   );\r\n    // }\r\n\r\n    logger.info(LogCategory.API, 'Fetching MercadoPago metrics', { userId });\r\n\r\n    // Obtener métricas del sistema\r\n    const metrics = await metricsCollector.getMercadoPagoMetrics();\r\n    const redisStatus = await isRedisAvailable();\r\n\r\n    // Calcular métricas en tiempo real\r\n    const totalRequests = metrics.payment_creation.requests.total + \r\n                         metrics.payment_queries.requests.total + \r\n                         metrics.webhook_processing.requests.total;\r\n\r\n    const totalSuccess = metrics.payment_creation.requests.success + \r\n                        metrics.payment_queries.requests.success + \r\n                        metrics.webhook_processing.requests.success;\r\n\r\n    const totalErrors = metrics.payment_creation.requests.error + \r\n                       metrics.payment_queries.requests.error + \r\n                       metrics.webhook_processing.requests.error;\r\n\r\n    const successRate = totalRequests > 0 ? (totalSuccess / totalRequests) * 100 : 100;\r\n    const errorRate = totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0;\r\n\r\n    // Calcular tiempo de respuesta promedio ponderado\r\n    const avgResponseTime = (\r\n      metrics.payment_creation.response_times.avg * metrics.payment_creation.requests.total +\r\n      metrics.payment_queries.response_times.avg * metrics.payment_queries.requests.total +\r\n      metrics.webhook_processing.response_times.avg * metrics.webhook_processing.requests.total\r\n    ) / (totalRequests || 1);\r\n\r\n    // Generar alertas basadas en umbrales\r\n    const alerts: Alert[] = [];\r\n\r\n    if (errorRate > 5) {\r\n      alerts.push({\r\n        type: 'error',\r\n        message: `Tasa de error alta: ${errorRate.toFixed(1)}%`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (avgResponseTime > 3000) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: `Tiempo de respuesta alto: ${avgResponseTime.toFixed(0)}ms`,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    if (!redisStatus) {\r\n      alerts.push({\r\n        type: 'warning',\r\n        message: 'Redis desconectado - usando fallback en memoria',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Preparar respuesta\r\n    const response: MetricsResponse = {\r\n      success: true,\r\n      data: {\r\n        realTimeMetrics: {\r\n          totalRequests,\r\n          successRate: Math.round(successRate * 100) / 100,\r\n          errorRate: Math.round(errorRate * 100) / 100,\r\n          averageResponseTime: Math.round(avgResponseTime),\r\n          rateLimitHits: metrics.payment_creation.requests.rate_limited + \r\n                        metrics.payment_queries.requests.rate_limited + \r\n                        metrics.webhook_processing.requests.rate_limited,\r\n          retryAttempts: metrics.payment_creation.retry_stats.total_retries + \r\n                        metrics.payment_queries.retry_stats.total_retries + \r\n                        metrics.webhook_processing.retry_stats.total_retries,\r\n        },\r\n        endpointMetrics: {\r\n          createPreference: {\r\n            requests: metrics.payment_creation.requests.total,\r\n            successRate: metrics.payment_creation.requests.total > 0 ? \r\n              (metrics.payment_creation.requests.success / metrics.payment_creation.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_creation.response_times.avg),\r\n            errorCount: metrics.payment_creation.requests.error,\r\n          },\r\n          webhook: {\r\n            requests: metrics.webhook_processing.requests.total,\r\n            successRate: metrics.webhook_processing.requests.total > 0 ? \r\n              (metrics.webhook_processing.requests.success / metrics.webhook_processing.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.webhook_processing.response_times.avg),\r\n            errorCount: metrics.webhook_processing.requests.error,\r\n          },\r\n          paymentQuery: {\r\n            requests: metrics.payment_queries.requests.total,\r\n            successRate: metrics.payment_queries.requests.total > 0 ? \r\n              (metrics.payment_queries.requests.success / metrics.payment_queries.requests.total) * 100 : 100,\r\n            averageResponseTime: Math.round(metrics.payment_queries.response_times.avg),\r\n            errorCount: metrics.payment_queries.requests.error,\r\n          },\r\n        },\r\n        systemHealth: {\r\n          redisStatus: redisStatus ? 'connected' : 'disconnected',\r\n          lastUpdate: new Date().toISOString(),\r\n          uptime: process.uptime(),\r\n        },\r\n        alerts,\r\n      },\r\n    };\r\n\r\n    logger.info(LogCategory.API, 'MercadoPago metrics retrieved successfully');\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error fetching MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/mercadopago/metrics\r\n * Reinicia las métricas de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Resetting MercadoPago metrics', { userId });\r\n\r\n    // TODO: Implementar reset de métricas\r\n    // await metricsCollector.resetMetrics();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Métricas reiniciadas correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error resetting MercadoPago metrics', error as Error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Error interno del servidor',\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}