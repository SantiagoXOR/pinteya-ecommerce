{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\enterprise-performance-metrics.test.ts"],"sourcesContent":["/**\r\n * Tests de Performance y Métricas Enterprise\r\n * Valida el rendimiento y métricas del sistema enterprise implementado\r\n */\r\n\r\n// Mock de utilidades enterprise\r\njest.mock('@/lib/auth/enterprise-auth-utils', () => ({\r\n  getEnterpriseAuthContext: jest.fn(),\r\n  requireAdminAuth: jest.fn()\r\n}));\r\n\r\njest.mock('@/lib/auth/enterprise-cache', () => ({\r\n  getCacheStats: jest.fn(),\r\n  withCache: jest.fn(),\r\n  clearCache: jest.fn()\r\n}));\r\n\r\njest.mock('@/lib/auth/enterprise-rls-utils', () => ({\r\n  executeWithRLS: jest.fn(),\r\n  validateRLSContext: jest.fn()\r\n}));\r\n\r\nimport {\r\n  getEnterpriseAuthContext,\r\n  requireAdminAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  getCacheStats,\r\n  withCache,\r\n  clearCache\r\n} from '@/lib/auth/enterprise-cache';\r\nimport {\r\n  executeWithRLS,\r\n  validateRLSContext\r\n} from '@/lib/auth/enterprise-rls-utils';\r\n\r\ndescribe('Performance y Métricas Enterprise', () => {\r\n  let mockGetEnterpriseAuthContext: jest.MockedFunction<typeof getEnterpriseAuthContext>;\r\n  let mockRequireAdminAuth: jest.MockedFunction<typeof requireAdminAuth>;\r\n  let mockGetCacheStats: jest.MockedFunction<typeof getCacheStats>;\r\n  let mockWithCache: jest.MockedFunction<typeof withCache>;\r\n  let mockExecuteWithRLS: jest.MockedFunction<typeof executeWithRLS>;\r\n\r\n  beforeEach(() => {\r\n    mockGetEnterpriseAuthContext = getEnterpriseAuthContext as jest.MockedFunction<typeof getEnterpriseAuthContext>;\r\n    mockRequireAdminAuth = requireAdminAuth as jest.MockedFunction<typeof requireAdminAuth>;\r\n    mockGetCacheStats = getCacheStats as jest.MockedFunction<typeof getCacheStats>;\r\n    mockWithCache = withCache as jest.MockedFunction<typeof withCache>;\r\n    mockExecuteWithRLS = executeWithRLS as jest.MockedFunction<typeof executeWithRLS>;\r\n\r\n    jest.clearAllMocks();\r\n\r\n    // Setup mocks con métricas realistas\r\n    mockGetCacheStats.mockReturnValue({\r\n      hits: 150,\r\n      misses: 25,\r\n      entries: 45,\r\n      hitRate: 85.71,\r\n      memoryUsage: 2048\r\n    });\r\n\r\n    mockGetEnterpriseAuthContext.mockResolvedValue({\r\n      success: true,\r\n      context: {\r\n        userId: 'user_123',\r\n        role: 'admin',\r\n        permissions: ['admin_access'],\r\n        sessionValid: true,\r\n        securityLevel: 'critical',\r\n        supabase: {} as any,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      }\r\n    });\r\n\r\n    mockRequireAdminAuth.mockResolvedValue({\r\n      success: true,\r\n      context: {\r\n        userId: 'user_123',\r\n        role: 'admin',\r\n        permissions: ['admin_access'],\r\n        sessionValid: true,\r\n        securityLevel: 'critical',\r\n        supabase: {} as any,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      }\r\n    });\r\n\r\n    mockExecuteWithRLS.mockResolvedValue({\r\n      success: true,\r\n      data: { test: 'data' }\r\n    });\r\n  });\r\n\r\n  describe('Métricas de Performance de Autenticación', () => {\r\n    it('debe completar autenticación enterprise en menos de 100ms', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n      const result = await mockGetEnterpriseAuthContext(mockRequest, {\r\n        securityLevel: 'critical'\r\n      });\r\n      \r\n      const duration = Date.now() - startTime;\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(duration).toBeLessThan(100);\r\n    });\r\n\r\n    it('debe manejar múltiples autenticaciones concurrentes', async () => {\r\n      const concurrentRequests = 10;\r\n      const mockRequest = { query: {}, headers: {} } as any;\r\n      \r\n      const startTime = Date.now();\r\n      \r\n      const promises = Array(concurrentRequests).fill(null).map(() =>\r\n        mockGetEnterpriseAuthContext(mockRequest, { securityLevel: 'medium' })\r\n      );\r\n      \r\n      const results = await Promise.all(promises);\r\n      const duration = Date.now() - startTime;\r\n      \r\n      // Todas las requests deben ser exitosas\r\n      expect(results.every(r => r.success)).toBe(true);\r\n      \r\n      // Tiempo total debe ser razonable para 10 requests concurrentes\r\n      expect(duration).toBeLessThan(500);\r\n      \r\n      // Verificar que se llamó la función correcta cantidad de veces\r\n      expect(mockGetEnterpriseAuthContext).toHaveBeenCalledTimes(concurrentRequests);\r\n    });\r\n\r\n    it('debe mantener performance consistente con cache', async () => {\r\n      const iterations = 5;\r\n      const durations: number[] = [];\r\n      \r\n      for (let i = 0; i < iterations; i++) {\r\n        const startTime = Date.now();\r\n        \r\n        await mockWithCache(\r\n          `test_key_${i}`,\r\n          async () => ({ data: `test_${i}` }),\r\n          60000\r\n        );\r\n        \r\n        durations.push(Date.now() - startTime);\r\n      }\r\n      \r\n      // Verificar que todas las operaciones fueron rápidas\r\n      durations.forEach(duration => {\r\n        expect(duration).toBeLessThan(50);\r\n      });\r\n      \r\n      // Verificar que se usó cache\r\n      expect(mockWithCache).toHaveBeenCalledTimes(iterations);\r\n    });\r\n  });\r\n\r\n  describe('Métricas de Cache Enterprise', () => {\r\n    it('debe mantener hit rate superior al 80%', () => {\r\n      const stats = mockGetCacheStats();\r\n      \r\n      expect(stats.hitRate).toBeGreaterThan(80);\r\n      expect(stats.hits).toBeGreaterThan(stats.misses);\r\n    });\r\n\r\n    it('debe reportar uso de memoria razonable', () => {\r\n      const stats = mockGetCacheStats();\r\n      \r\n      // Memoria debe ser menor a 10MB (10,485,760 bytes)\r\n      expect(stats.memoryUsage).toBeLessThan(10485760);\r\n      \r\n      // Debe tener entradas en cache\r\n      expect(stats.entries).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe calcular métricas correctamente', () => {\r\n      const stats = mockGetCacheStats();\r\n      \r\n      const expectedHitRate = (stats.hits / (stats.hits + stats.misses)) * 100;\r\n      \r\n      expect(Math.abs(stats.hitRate - expectedHitRate)).toBeLessThan(0.01);\r\n    });\r\n\r\n    it('debe manejar operaciones de cache eficientemente', async () => {\r\n      const cacheOperations = 20;\r\n      const startTime = Date.now();\r\n      \r\n      // Simular múltiples operaciones de cache\r\n      const promises = Array(cacheOperations).fill(null).map((_, index) =>\r\n        mockWithCache(\r\n          `performance_test_${index}`,\r\n          async () => ({ id: index, data: `test_data_${index}` }),\r\n          30000\r\n        )\r\n      );\r\n      \r\n      const results = await Promise.all(promises);\r\n      const duration = Date.now() - startTime;\r\n      \r\n      // Todas las operaciones deben completarse\r\n      expect(results).toHaveLength(cacheOperations);\r\n      \r\n      // Tiempo total debe ser eficiente\r\n      expect(duration).toBeLessThan(200);\r\n    });\r\n  });\r\n\r\n  describe('Métricas de RLS Performance', () => {\r\n    it('debe ejecutar consultas RLS en tiempo óptimo', async () => {\r\n      const mockContext = {\r\n        userId: 'user_123',\r\n        role: 'admin' as const,\r\n        permissions: ['admin_access'],\r\n        sessionValid: true,\r\n        securityLevel: 'high' as const,\r\n        supabase: {} as any,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      };\r\n\r\n      const startTime = Date.now();\r\n      \r\n      const result = await mockExecuteWithRLS(\r\n        mockContext,\r\n        async () => ({ data: 'test' }),\r\n        { enforceRLS: true, auditLog: true }\r\n      );\r\n      \r\n      const duration = Date.now() - startTime;\r\n      \r\n      expect(result.success).toBe(true);\r\n      expect(duration).toBeLessThan(50);\r\n    });\r\n\r\n    it('debe manejar múltiples consultas RLS concurrentes', async () => {\r\n      const mockContext = {\r\n        userId: 'user_123',\r\n        role: 'admin' as const,\r\n        permissions: ['admin_access'],\r\n        sessionValid: true,\r\n        securityLevel: 'high' as const,\r\n        supabase: {} as any,\r\n        validations: {\r\n          jwtValid: true,\r\n          csrfValid: true,\r\n          rateLimitPassed: true,\r\n          originValid: true\r\n        }\r\n      };\r\n\r\n      const concurrentQueries = 8;\r\n      const startTime = Date.now();\r\n      \r\n      const promises = Array(concurrentQueries).fill(null).map((_, index) =>\r\n        mockExecuteWithRLS(\r\n          mockContext,\r\n          async () => ({ id: index, data: `query_${index}` }),\r\n          { enforceRLS: true }\r\n        )\r\n      );\r\n      \r\n      const results = await Promise.all(promises);\r\n      const duration = Date.now() - startTime;\r\n      \r\n      // Todas las consultas deben ser exitosas\r\n      expect(results.every(r => r.success)).toBe(true);\r\n      \r\n      // Tiempo total debe ser eficiente para consultas concurrentes\r\n      expect(duration).toBeLessThan(300);\r\n    });\r\n  });\r\n\r\n  describe('Métricas de Sistema Enterprise', () => {\r\n    it('debe mantener métricas de sistema saludables', () => {\r\n      const systemMetrics = {\r\n        authenticationLatency: 45, // ms\r\n        cacheHitRate: 85.71, // %\r\n        rlsQueryTime: 25, // ms\r\n        memoryUsage: 2048, // bytes\r\n        activeConnections: 12\r\n      };\r\n\r\n      // Validar métricas dentro de rangos aceptables\r\n      expect(systemMetrics.authenticationLatency).toBeLessThan(100);\r\n      expect(systemMetrics.cacheHitRate).toBeGreaterThan(80);\r\n      expect(systemMetrics.rlsQueryTime).toBeLessThan(50);\r\n      expect(systemMetrics.memoryUsage).toBeLessThan(10485760); // 10MB\r\n      expect(systemMetrics.activeConnections).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe reportar estadísticas de uso enterprise', () => {\r\n      const usageStats = {\r\n        totalAuthRequests: 1250,\r\n        successfulAuths: 1198,\r\n        failedAuths: 52,\r\n        cacheOperations: 3420,\r\n        rlsQueries: 890,\r\n        averageResponseTime: 67 // ms\r\n      };\r\n\r\n      // Calcular métricas derivadas\r\n      const successRate = (usageStats.successfulAuths / usageStats.totalAuthRequests) * 100;\r\n      const failureRate = (usageStats.failedAuths / usageStats.totalAuthRequests) * 100;\r\n\r\n      expect(successRate).toBeGreaterThan(95); // 95%+ success rate\r\n      expect(failureRate).toBeLessThan(5); // <5% failure rate\r\n      expect(usageStats.averageResponseTime).toBeLessThan(100);\r\n    });\r\n\r\n    it('debe validar límites de recursos enterprise', () => {\r\n      const resourceLimits = {\r\n        maxConcurrentUsers: 100,\r\n        maxCacheSize: 50, // MB\r\n        maxQueryTime: 1000, // ms\r\n        maxMemoryPerUser: 1024 // KB\r\n      };\r\n\r\n      const currentUsage = {\r\n        concurrentUsers: 45,\r\n        cacheSize: 12, // MB\r\n        averageQueryTime: 67, // ms\r\n        memoryPerUser: 512 // KB\r\n      };\r\n\r\n      // Validar que el uso actual está dentro de los límites\r\n      expect(currentUsage.concurrentUsers).toBeLessThan(resourceLimits.maxConcurrentUsers);\r\n      expect(currentUsage.cacheSize).toBeLessThan(resourceLimits.maxCacheSize);\r\n      expect(currentUsage.averageQueryTime).toBeLessThan(resourceLimits.maxQueryTime);\r\n      expect(currentUsage.memoryPerUser).toBeLessThan(resourceLimits.maxMemoryPerUser);\r\n    });\r\n  });\r\n\r\n  describe('Benchmarks de Performance', () => {\r\n    it('debe superar benchmarks de autenticación enterprise', async () => {\r\n      const benchmarks = {\r\n        authTime: 100, // ms\r\n        cacheHitRate: 80, // %\r\n        rlsQueryTime: 50, // ms\r\n        concurrentUsers: 50\r\n      };\r\n\r\n      // Test de autenticación\r\n      const authStartTime = Date.now();\r\n      await mockRequireAdminAuth({} as any, ['admin_access']);\r\n      const authDuration = Date.now() - authStartTime;\r\n\r\n      // Test de cache\r\n      const cacheStats = mockGetCacheStats();\r\n\r\n      // Test de RLS\r\n      const rlsStartTime = Date.now();\r\n      await mockExecuteWithRLS(\r\n        {} as any,\r\n        async () => ({ data: 'benchmark' }),\r\n        { enforceRLS: true }\r\n      );\r\n      const rlsDuration = Date.now() - rlsStartTime;\r\n\r\n      // Validar que superamos los benchmarks\r\n      expect(authDuration).toBeLessThan(benchmarks.authTime);\r\n      expect(cacheStats.hitRate).toBeGreaterThan(benchmarks.cacheHitRate);\r\n      expect(rlsDuration).toBeLessThan(benchmarks.rlsQueryTime);\r\n    });\r\n\r\n    it('debe mantener performance bajo carga', async () => {\r\n      const loadTestParams = {\r\n        concurrentRequests: 25,\r\n        iterations: 3,\r\n        maxResponseTime: 200 // ms\r\n      };\r\n\r\n      for (let iteration = 0; iteration < loadTestParams.iterations; iteration++) {\r\n        const startTime = Date.now();\r\n        \r\n        const promises = Array(loadTestParams.concurrentRequests).fill(null).map(() =>\r\n          mockRequireAdminAuth({} as any, ['admin_access'])\r\n        );\r\n        \r\n        const results = await Promise.all(promises);\r\n        const duration = Date.now() - startTime;\r\n        \r\n        // Todas las requests deben ser exitosas\r\n        expect(results.every(r => r.success)).toBe(true);\r\n        \r\n        // Tiempo debe estar dentro del límite\r\n        expect(duration).toBeLessThan(loadTestParams.maxResponseTime);\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","getEnterpriseAuthContext","fn","requireAdminAuth","getCacheStats","withCache","clearCache","executeWithRLS","validateRLSContext","describe","mockGetEnterpriseAuthContext","mockRequireAdminAuth","mockGetCacheStats","mockWithCache","mockExecuteWithRLS","beforeEach","clearAllMocks","mockReturnValue","hits","misses","entries","hitRate","memoryUsage","mockResolvedValue","success","context","userId","role","permissions","sessionValid","securityLevel","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","data","test","it","startTime","Date","now","mockRequest","query","headers","result","duration","expect","toBe","toBeLessThan","concurrentRequests","promises","Array","fill","map","results","Promise","all","every","r","toHaveBeenCalledTimes","iterations","durations","i","push","forEach","stats","toBeGreaterThan","expectedHitRate","Math","abs","cacheOperations","_","index","id","toHaveLength","mockContext","enforceRLS","auditLog","concurrentQueries","systemMetrics","authenticationLatency","cacheHitRate","rlsQueryTime","activeConnections","usageStats","totalAuthRequests","successfulAuths","failedAuths","rlsQueries","averageResponseTime","successRate","failureRate","resourceLimits","maxConcurrentUsers","maxCacheSize","maxQueryTime","maxMemoryPerUser","currentUsage","concurrentUsers","cacheSize","averageQueryTime","memoryPerUser","benchmarks","authTime","authStartTime","authDuration","cacheStats","rlsStartTime","rlsDuration","loadTestParams","maxResponseTime","iteration"],"mappings":"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"}