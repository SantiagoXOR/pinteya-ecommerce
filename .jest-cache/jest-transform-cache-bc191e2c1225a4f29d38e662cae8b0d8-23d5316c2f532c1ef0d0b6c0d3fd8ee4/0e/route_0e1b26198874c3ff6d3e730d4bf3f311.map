{"version":3,"names":["cov_cud1ux1t8","actualCoverage","s","GET","f","POST","runtime","request","startTime","Date","now","clientIP","b","headers","get","userAgent","session","_config","auth","user","_server","NextResponse","json","success","error","status","rateLimitResult","_ratelimiter","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","_logger","logger","warn","LogCategory","API","userId","response","addRateLimitHeaders","url","URL","reportType","searchParams","dateFrom","dateTo","includeMetrics","includes","info","reportData","generateReport","_metrics","metricsCollector","recordRequest","recordsCount","records","length","processingTime","data","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","PAYMENT_API","body","type","date_from","date_to","columns","report","createMercadoPagoReport","reportId","id","supabase","_supabase","getSupabaseClient","Error","endDate","startDate","query","from","select","gte","toISOString","lte","eq","in","orders","processedData","processReportData","metrics","calculateReportMetrics","undefined","total_records","generated_at","map","order","baseData","order_id","amount","total_amount","payment_status","created_at","updated_at","release_date","net_amount","fee_amount","transaction_type","balance_impact","items","order_items","item","name","products","quantity","unit_price","category","category_id","items_count","totalTransactions","successfulPayments","filter","o","failedPayments","totalAmount","reduce","sum","total_transactions","successful_payments","failed_payments","refunds","chargebacks","average_ticket","conversion_rate","Math","random","toString","substr"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\reports\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO REPORTS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { MercadoPagoReport, ReportMetrics } from '@/types/api';\r\n\r\n/**\r\n * GET /api/payments/reports\r\n * Obtiene reportes de MercadoPago según documentación oficial\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for reports', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const reportType = url.searchParams.get('type') || 'account_money';\r\n    const dateFrom = url.searchParams.get('date_from');\r\n    const dateTo = url.searchParams.get('date_to');\r\n    const includeMetrics = url.searchParams.get('include_metrics') === 'true';\r\n\r\n    // Validar parámetros\r\n    if (!['released_money', 'account_money', 'sales_report'].includes(reportType)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Tipo de reporte inválido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Reports request started', {\r\n      userId,\r\n      reportType,\r\n      dateFrom,\r\n      dateTo,\r\n      includeMetrics,\r\n      clientIP,\r\n    });\r\n\r\n    // Generar reporte\r\n    const reportData = await generateReport(reportType, dateFrom, dateTo, includeMetrics);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, reportType }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Reports request completed', {\r\n      userId,\r\n      reportType,\r\n      recordsCount: reportData.records?.length || 0,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: reportData,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Reports request failed', {\r\n      operation: 'reports-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'GET',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/payments/reports\r\n * Crea un nuevo reporte según documentación oficial de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.PAYMENT_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n      return response;\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { type, date_from, date_to, columns } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!type || !date_from || !date_to) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Faltan parámetros requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Report creation started', {\r\n      userId,\r\n      type,\r\n      date_from,\r\n      date_to,\r\n      clientIP,\r\n    });\r\n\r\n    // Crear reporte\r\n    const report = await createMercadoPagoReport(type, date_from, date_to, columns);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'POST',\r\n      201,\r\n      Date.now() - startTime,\r\n      { userId, reportType: type }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Report creation completed', {\r\n      userId,\r\n      reportId: report.id,\r\n      type,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: report,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    }, { status: 201 });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Report creation failed', {\r\n      operation: 'report-creation-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/reports',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Genera reporte basado en datos de Supabase (simulando API de MercadoPago)\r\n */\r\nasync function generateReport(\r\n  type: string,\r\n  dateFrom?: string | null,\r\n  dateTo?: string | null,\r\n  includeMetrics: boolean = false\r\n) {\r\n  const supabase = getSupabaseClient();\r\n  if (!supabase) {\r\n    throw new Error('Error de configuración de base de datos');\r\n  }\r\n\r\n  // Configurar fechas por defecto (últimos 30 días)\r\n  const endDate = dateTo ? new Date(dateTo) : new Date();\r\n  const startDate = dateFrom ? new Date(dateFrom) : new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\r\n\r\n  let query = supabase\r\n    .from('orders')\r\n    .select(`\r\n      id,\r\n      total_amount,\r\n      status,\r\n      payment_status,\r\n      created_at,\r\n      updated_at,\r\n      order_items (\r\n        quantity,\r\n        unit_price,\r\n        products (\r\n          name,\r\n          category_id\r\n        )\r\n      )\r\n    `)\r\n    .gte('created_at', startDate.toISOString())\r\n    .lte('created_at', endDate.toISOString());\r\n\r\n  // Filtrar según tipo de reporte\r\n  switch (type) {\r\n    case 'released_money':\r\n      query = query.eq('payment_status', 'approved');\r\n      break;\r\n    case 'account_money':\r\n      // Incluir todos los estados\r\n      break;\r\n    case 'sales_report':\r\n      query = query.in('status', ['completed', 'processing']);\r\n      break;\r\n  }\r\n\r\n  const { data: orders, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener datos: ${error.message}`);\r\n  }\r\n\r\n  // Procesar datos según tipo de reporte\r\n  const processedData = processReportData(orders || [], type);\r\n  \r\n  // Calcular métricas si se solicitan\r\n  const metrics = includeMetrics ? calculateReportMetrics(orders || []) : undefined;\r\n\r\n  return {\r\n    type,\r\n    date_from: startDate.toISOString(),\r\n    date_to: endDate.toISOString(),\r\n    records: processedData,\r\n    metrics,\r\n    total_records: processedData.length,\r\n    generated_at: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n/**\r\n * Procesa los datos según el tipo de reporte\r\n */\r\nfunction processReportData(orders: any[], type: string) {\r\n  return orders.map(order => {\r\n    const baseData = {\r\n      order_id: order.id,\r\n      amount: order.total_amount,\r\n      status: order.payment_status || order.status,\r\n      created_at: order.created_at,\r\n      updated_at: order.updated_at,\r\n    };\r\n\r\n    switch (type) {\r\n      case 'released_money':\r\n        return {\r\n          ...baseData,\r\n          release_date: order.updated_at,\r\n          net_amount: order.total_amount * 0.96, // Simular comisión MP\r\n          fee_amount: order.total_amount * 0.04,\r\n        };\r\n      \r\n      case 'account_money':\r\n        return {\r\n          ...baseData,\r\n          transaction_type: 'payment',\r\n          balance_impact: order.payment_status === 'approved' ? order.total_amount : 0,\r\n        };\r\n      \r\n      case 'sales_report':\r\n        return {\r\n          ...baseData,\r\n          items: order.order_items?.map((item: any) => ({\r\n            name: item.products?.name,\r\n            quantity: item.quantity,\r\n            unit_price: item.unit_price,\r\n            category: item.products?.category_id,\r\n          })) || [],\r\n          items_count: order.order_items?.length || 0,\r\n        };\r\n      \r\n      default:\r\n        return baseData;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Calcula métricas del reporte\r\n */\r\nfunction calculateReportMetrics(orders: any[]): ReportMetrics {\r\n  const totalTransactions = orders.length;\r\n  const successfulPayments = orders.filter(o => o.payment_status === 'approved').length;\r\n  const failedPayments = orders.filter(o => o.payment_status === 'rejected').length;\r\n  const totalAmount = orders.reduce((sum, o) => sum + (o.total_amount || 0), 0);\r\n  \r\n  return {\r\n    total_transactions: totalTransactions,\r\n    total_amount: totalAmount,\r\n    successful_payments: successfulPayments,\r\n    failed_payments: failedPayments,\r\n    refunds: 0, // TODO: Implementar cuando se agregue tabla de refunds\r\n    chargebacks: 0, // TODO: Implementar cuando se agregue tabla de chargebacks\r\n    average_ticket: totalTransactions > 0 ? totalAmount / totalTransactions : 0,\r\n    conversion_rate: totalTransactions > 0 ? (successfulPayments / totalTransactions) * 100 : 0,\r\n  };\r\n}\r\n\r\n/**\r\n * Crea un reporte en MercadoPago (simulado)\r\n */\r\nasync function createMercadoPagoReport(\r\n  type: string,\r\n  dateFrom: string,\r\n  dateTo: string,\r\n  columns?: string[]\r\n): Promise<MercadoPagoReport> {\r\n  // En una implementación real, aquí se haría la llamada a la API de MercadoPago\r\n  // Por ahora simulamos la creación del reporte\r\n  \r\n  const reportId = `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  return {\r\n    id: reportId,\r\n    type: type as any,\r\n    date_from: dateFrom,\r\n    date_to: dateTo,\r\n    status: 'pending',\r\n    created_at: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}