1120a408e1de3b6bb3c1fcd389be2898
/**
 * Tests para el Sistema Enterprise de Caché
 * Verifica funcionalidad básica del sistema de caché inteligente
 */ "use strict";
// Mock de dependencias
jest.mock('@/lib/cache-manager', ()=>({
        cacheManager: {
            get: jest.fn(),
            set: jest.fn()
        },
        CACHE_CONFIGS: {
            SYSTEM_CONFIG: {
                ttl: 300,
                prefix: 'system'
            },
            PRODUCT_DATA: {
                ttl: 1800,
                prefix: 'products'
            }
        }
    }));
jest.mock('@/lib/redis', ()=>({
        redisCache: {
            del: jest.fn(),
            client: {
                scanStream: jest.fn()
            }
        }
    }));
jest.mock('@/lib/security/enterprise-audit-system', ()=>({
        enterpriseAuditSystem: {
            logEnterpriseEvent: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _enterprisecachesystem = require("../../lib/optimization/enterprise-cache-system");
describe('Sistema Enterprise de Caché', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Configuraciones Predefinidas', ()=>{
        test('debe tener configuración AUTH_CRITICAL', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL).toBeDefined();
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.ttl).toBe(300);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.prefix).toBe('auth_critical');
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.securityLevel).toBe('critical');
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.encryptData).toBe(true);
        });
        test('debe tener configuración PRODUCTS_SMART', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART).toBeDefined();
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBe(1800);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.prefix).toBe('products_smart');
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.enableInvalidation).toBe(true);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.enableWarmup).toBe(true);
        });
        test('debe tener configuración PUBLIC_PERFORMANCE', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE).toBeDefined();
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.ttl).toBe(600);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.warmupStrategy).toBe('eager');
        });
        test('debe tener configuración USER_SESSIONS', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS).toBeDefined();
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.ttl).toBe(7200);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.encryptData).toBe(true);
        });
        test('debe tener configuración ANALYTICS_DATA', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA).toBeDefined();
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.ttl).toBe(900);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.compressionLevel).toBe(8);
        });
    });
    describe('Inicialización del Sistema', ()=>{
        test('debe inicializar correctamente', async ()=>{
            await expect(_enterprisecachesystem.enterpriseCacheSystem.initialize()).resolves.not.toThrow();
        });
        test('debe ser singleton', ()=>{
            const instance1 = _enterprisecachesystem.enterpriseCacheSystem;
            const instance2 = _enterprisecachesystem.enterpriseCacheSystem;
            expect(instance1).toBe(instance2);
        });
    });
    describe('Operaciones de Caché', ()=>{
        test('debe obtener métricas del sistema', ()=>{
            const metrics = _enterprisecachesystem.enterpriseCacheSystem.getMetrics();
            expect(metrics).toBeDefined();
            expect(typeof metrics).toBe('object');
        });
        test('debe obtener estadísticas de invalidación', ()=>{
            const stats = _enterprisecachesystem.enterpriseCacheSystem.getInvalidationStats();
            expect(Array.isArray(stats)).toBe(true);
        });
        test('debe obtener estadísticas de warmup', ()=>{
            const stats = _enterprisecachesystem.enterpriseCacheSystem.getWarmupStats();
            expect(Array.isArray(stats)).toBe(true);
        });
    });
    describe('Utilidades de Caché', ()=>{
        test('EnterpriseCacheUtils debe estar definido', ()=>{
            expect(_enterprisecachesystem.EnterpriseCacheUtils).toBeDefined();
            expect(typeof _enterprisecachesystem.EnterpriseCacheUtils.cacheProductData).toBe('function');
            expect(typeof _enterprisecachesystem.EnterpriseCacheUtils.cachePublicData).toBe('function');
            expect(typeof _enterprisecachesystem.EnterpriseCacheUtils.invalidateByPatterns).toBe('function');
        });
    });
    describe('Configuración de Seguridad', ()=>{
        test('configuraciones críticas deben tener encriptación habilitada', ()=>{
            const criticalConfigs = [
                _enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL,
                _enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS
            ];
            criticalConfigs.forEach((config)=>{
                expect(config.encryptData).toBe(true);
                expect([
                    'critical',
                    'high'
                ]).toContain(config.securityLevel);
            });
        });
        test('configuraciones públicas deben tener seguridad básica', ()=>{
            const publicConfigs = [
                _enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE,
                _enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA
            ];
            publicConfigs.forEach((config)=>{
                expect([
                    'basic',
                    'standard'
                ]).toContain(config.securityLevel);
            });
        });
    });
    describe('Configuración de Performance', ()=>{
        test('configuraciones deben tener TTL apropiados', ()=>{
            // Auth crítica: TTL corto para seguridad
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.ttl).toBeLessThanOrEqual(300);
            // Productos: TTL medio para balance
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBeGreaterThan(300);
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.ttl).toBeLessThanOrEqual(1800);
            // Sesiones: TTL largo para UX
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.USER_SESSIONS.ttl).toBeGreaterThan(1800);
        });
        test('configuraciones deben tener compresión apropiada', ()=>{
            // Datos críticos: compresión alta
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.compressionLevel).toBeGreaterThanOrEqual(9);
            // Analytics: compresión alta para volumen
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.compressionLevel).toBeGreaterThanOrEqual(8);
            // Performance público: compresión baja para velocidad
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.compressionLevel).toBeLessThanOrEqual(3);
        });
    });
    describe('Estrategias de Warmup', ()=>{
        test('configuraciones deben tener estrategias de warmup apropiadas', ()=>{
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.warmupStrategy).toBe('scheduled');
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.warmupStrategy).toBe('eager');
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.ANALYTICS_DATA.warmupStrategy).toBe('lazy');
        });
        test('configuraciones con warmup deben tener intervalos definidos', ()=>{
            const warmupConfigs = Object.values(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS).filter((config)=>config.enableWarmup);
            warmupConfigs.forEach((config)=>{
                if (config.warmupStrategy === 'scheduled') {
                    expect(config.warmupInterval).toBeDefined();
                    expect(config.warmupInterval).toBeGreaterThan(0);
                }
            });
        });
    });
    describe('Políticas de Eviction', ()=>{
        test('configuraciones deben tener políticas de eviction apropiadas', ()=>{
            // Auth crítica: TTL para seguridad
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL.evictionPolicy).toBe('ttl');
            // Productos: LRU para acceso frecuente
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART.evictionPolicy).toBe('lru');
            // Performance: LFU para datos populares
            expect(_enterprisecachesystem.ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE.evictionPolicy).toBe('lfu');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,