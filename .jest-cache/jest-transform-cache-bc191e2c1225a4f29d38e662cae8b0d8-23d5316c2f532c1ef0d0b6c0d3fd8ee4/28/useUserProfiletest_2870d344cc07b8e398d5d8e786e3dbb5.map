{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useUserProfile.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TESTS PARA HOOK USER PROFILE\r\n// ===================================\r\n\r\nimport { renderHook, waitFor, act } from '@testing-library/react';\r\nimport { useUserProfile } from '@/hooks/useUserProfile';\r\n\r\n// Mock fetch\r\nglobal.fetch = jest.fn();\r\n\r\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>;\r\n\r\nconst mockUserProfile = {\r\n  id: '1',\r\n  clerk_id: 'clerk_123',\r\n  name: 'Juan Pérez',\r\n  email: 'juan@example.com',\r\n  created_at: '2024-01-01T00:00:00Z',\r\n  updated_at: '2024-01-01T00:00:00Z',\r\n};\r\n\r\nbeforeEach(() => {\r\n  mockFetch.mockClear();\r\n});\r\n\r\ndescribe('useUserProfile', () => {\r\n  it('should initialize with loading state', () => {\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    expect(result.current.loading).toBe(true);\r\n    expect(result.current.profile).toBe(null);\r\n    expect(result.current.error).toBe(null);\r\n  });\r\n\r\n  it('should fetch profile successfully', async () => {\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.profile).toEqual(mockUserProfile);\r\n    expect(result.current.error).toBe(null);\r\n    expect(mockFetch).toHaveBeenCalledWith('/api/user/profile');\r\n  });\r\n\r\n  it('should handle fetch error', async () => {\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: false, error: 'Usuario no encontrado' }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.profile).toBe(null);\r\n    expect(result.current.error).toBe('Usuario no encontrado');\r\n  });\r\n\r\n  it('should handle network error', async () => {\r\n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.profile).toBe(null);\r\n    expect(result.current.error).toBe('Error de conexión');\r\n  });\r\n\r\n  it('should update profile successfully', async () => {\r\n    // Mock initial fetch\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Mock update\r\n    const updatedProfile = { ...mockUserProfile, name: 'Juan Carlos Pérez' };\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: updatedProfile }),\r\n    } as Response);\r\n\r\n    let updateResult: boolean;\r\n    await act(async () => {\r\n      updateResult = await result.current.updateProfile({ name: 'Juan Carlos Pérez' });\r\n    });\r\n\r\n    expect(updateResult!).toBe(true);\r\n    expect(mockFetch).toHaveBeenLastCalledWith('/api/user/profile', {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name: 'Juan Carlos Pérez' }),\r\n    });\r\n  });\r\n\r\n  it('should handle update error', async () => {\r\n    // Mock initial fetch\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Mock update error\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: false, error: 'Error de validación' }),\r\n    } as Response);\r\n\r\n    let updateResult: boolean;\r\n    await act(async () => {\r\n      updateResult = await result.current.updateProfile({ name: '' });\r\n    });\r\n\r\n    expect(updateResult!).toBe(false);\r\n  });\r\n\r\n  it('should refresh profile', async () => {\r\n    // Mock initial fetch\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Mock refresh\r\n    const refreshedProfile = { ...mockUserProfile, name: 'Juan Actualizado' };\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: refreshedProfile }),\r\n    } as Response);\r\n\r\n    act(() => {\r\n      result.current.refreshProfile();\r\n    });\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    expect(mockFetch).toHaveBeenCalledTimes(2); // Initial + refresh\r\n  });\r\n\r\n  it('should provide stable function references', () => {\r\n    mockFetch.mockResolvedValue({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result, rerender } = renderHook(() => useUserProfile());\r\n\r\n    const initialUpdateProfile = result.current.updateProfile;\r\n    const initialRefreshProfile = result.current.refreshProfile;\r\n\r\n    rerender();\r\n\r\n    expect(result.current.updateProfile).toBe(initialUpdateProfile);\r\n    expect(result.current.refreshProfile).toBe(initialRefreshProfile);\r\n  });\r\n\r\n  it('should handle update network error', async () => {\r\n    // Mock initial fetch\r\n    mockFetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true, profile: mockUserProfile }),\r\n    } as Response);\r\n\r\n    const { result } = renderHook(() => useUserProfile());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    // Mock update network error\r\n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\r\n\r\n    let updateResult: boolean;\r\n    await act(async () => {\r\n      updateResult = await result.current.updateProfile({ name: 'Test' });\r\n    });\r\n\r\n    expect(updateResult!).toBe(false);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["global","fetch","jest","fn","mockFetch","mockUserProfile","id","clerk_id","name","email","created_at","updated_at","beforeEach","mockClear","describe","it","mockResolvedValueOnce","ok","json","success","profile","result","renderHook","useUserProfile","expect","current","loading","toBe","error","waitFor","toEqual","toHaveBeenCalledWith","mockRejectedValueOnce","Error","updatedProfile","updateResult","act","updateProfile","toHaveBeenLastCalledWith","method","headers","body","JSON","stringify","refreshedProfile","refreshProfile","toHaveBeenCalledTimes","mockResolvedValue","rerender","initialUpdateProfile","initialRefreshProfile"],"mappings":"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"}