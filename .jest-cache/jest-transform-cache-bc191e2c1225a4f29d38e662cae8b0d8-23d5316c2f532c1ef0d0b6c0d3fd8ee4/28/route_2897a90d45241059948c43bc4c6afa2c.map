{"version":3,"names":["cov_1cel840kw9","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","id","b","_server","NextResponse","json","error","status","userId","data","trustedDevices","_supabase","supabaseAdmin","from","select","eq","order","ascending","console","devicesWithTrustLevel","map","device","trust_level","calculateTrustLevel","success","devices","total","length","body","session_id","device_name","updatedSession","update","is_trusted","single","requestInfo","_activityLogger","getRequestInfo","logSecurityActivity","device_type","ip_address","message","trustLevel","now","Date","lastActivity","last_activity","createdAt","created_at","ageInDays","Math","floor","getTime","inactiveHours","location","min","max"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\trusted-devices\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE DISPOSITIVOS DE CONFIANZA\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { logSecurityActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// GET - Obtener dispositivos de confianza del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Obtener dispositivos de confianza\r\n    const { data: trustedDevices, error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select(`\r\n        id,\r\n        device_type,\r\n        device_name,\r\n        browser,\r\n        os,\r\n        ip_address,\r\n        location,\r\n        is_trusted,\r\n        last_activity,\r\n        created_at\r\n      `)\r\n      .eq('user_id', userId)\r\n      .eq('is_trusted', true)\r\n      .order('last_activity', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error al obtener dispositivos de confianza:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener dispositivos de confianza' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Calcular nivel de confianza para cada dispositivo\r\n    const devicesWithTrustLevel = trustedDevices?.map(device => ({\r\n      ...device,\r\n      trust_level: calculateTrustLevel(device),\r\n    })) || [];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      devices: devicesWithTrustLevel,\r\n      total: devicesWithTrustLevel.length,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/trusted-devices:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Marcar dispositivo actual como confiable\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n    const { session_id, device_name } = body;\r\n\r\n    if (!session_id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de sesión requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Marcar sesión como confiable\r\n    const { data: updatedSession, error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .update({\r\n        is_trusted: true,\r\n        device_name: device_name || 'Dispositivo de confianza',\r\n      })\r\n      .eq('id', session_id)\r\n      .eq('user_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al marcar dispositivo como confiable:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al marcar dispositivo como confiable' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad de seguridad\r\n    const requestInfo = getRequestInfo(request);\r\n    await logSecurityActivity(\r\n      userId,\r\n      'trust_device',\r\n      {\r\n        session_id,\r\n        device_name: updatedSession.device_name,\r\n        device_type: updatedSession.device_type,\r\n        ip_address: updatedSession.ip_address,\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      device: {\r\n        ...updatedSession,\r\n        trust_level: calculateTrustLevel(updatedSession),\r\n      },\r\n      message: 'Dispositivo marcado como confiable',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/trusted-devices:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función para calcular nivel de confianza\r\nfunction calculateTrustLevel(device: any): number {\r\n  let trustLevel = 50; // Base\r\n\r\n  // Factores que aumentan la confianza\r\n  const now = new Date();\r\n  const lastActivity = new Date(device.last_activity);\r\n  const createdAt = new Date(device.created_at);\r\n  \r\n  // Antigüedad del dispositivo (máximo +30 puntos)\r\n  const ageInDays = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\r\n  if (ageInDays > 30) trustLevel += 30;\r\n  else if (ageInDays > 7) trustLevel += 20;\r\n  else if (ageInDays > 1) trustLevel += 10;\r\n\r\n  // Actividad reciente (máximo +20 puntos)\r\n  const inactiveHours = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60));\r\n  if (inactiveHours < 1) trustLevel += 20;\r\n  else if (inactiveHours < 24) trustLevel += 15;\r\n  else if (inactiveHours < 168) trustLevel += 10; // 1 semana\r\n  else if (inactiveHours < 720) trustLevel += 5; // 1 mes\r\n\r\n  // Tipo de dispositivo\r\n  if (device.device_type === 'desktop') trustLevel += 5;\r\n  else if (device.device_type === 'mobile') trustLevel += 3;\r\n\r\n  // Ubicación conocida (si está disponible)\r\n  if (device.location) trustLevel += 5;\r\n\r\n  // Asegurar que esté en el rango 0-100\r\n  return Math.min(100, Math.max(0, trustLevel));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}