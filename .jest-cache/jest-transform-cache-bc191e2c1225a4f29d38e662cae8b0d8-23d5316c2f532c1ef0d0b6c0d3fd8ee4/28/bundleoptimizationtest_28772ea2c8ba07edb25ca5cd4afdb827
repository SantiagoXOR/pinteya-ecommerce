0e264594eca79e17bea13c04bc3c321e
// ===================================
// TESTS DE BUNDLE OPTIMIZATION SYSTEM
// ===================================
"use strict";
// Mock file system
jest.mock('fs', ()=>({
        promises: {
            readFile: jest.fn().mockResolvedValue(JSON.stringify({
                dependencies: {
                    'react': '^18.2.0',
                    'next': '^15.3.3',
                    'framer-motion': '^12.23.0'
                }
            })),
            writeFile: jest.fn(),
            mkdir: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _bundleoptimizationmanager = require("../../src/lib/optimization/bundle-optimization-manager");
const _performancebudgetmonitor = require("../../src/lib/optimization/performance-budget-monitor");
const _webpackoptimizationconfig = require("../../src/lib/optimization/webpack-optimization-config");
describe('Bundle Optimization System', ()=>{
    let bundleManager;
    let budgetMonitor;
    beforeEach(()=>{
        bundleManager = _bundleoptimizationmanager.BundleOptimizationManager.getInstance();
        budgetMonitor = _performancebudgetmonitor.PerformanceBudgetMonitor.getInstance();
        jest.clearAllMocks();
    });
    describe('BundleOptimizationManager', ()=>{
        it('should be a singleton', ()=>{
            const instance1 = _bundleoptimizationmanager.BundleOptimizationManager.getInstance();
            const instance2 = _bundleoptimizationmanager.BundleOptimizationManager.getInstance();
            expect(instance1).toBe(instance2);
        });
        it('should analyze bundles and return analysis', async ()=>{
            const analysis = await bundleManager.analyzeBundles();
            expect(analysis).toHaveProperty('totalSize');
            expect(analysis).toHaveProperty('gzippedSize');
            expect(analysis).toHaveProperty('chunks');
            expect(analysis).toHaveProperty('dependencies');
            expect(analysis).toHaveProperty('recommendations');
            expect(analysis).toHaveProperty('performance');
            expect(typeof analysis.totalSize).toBe('number');
            expect(Array.isArray(analysis.chunks)).toBe(true);
            expect(Array.isArray(analysis.dependencies)).toBe(true);
            expect(Array.isArray(analysis.recommendations)).toBe(true);
        });
        it('should generate performance metrics correctly', async ()=>{
            const analysis = await bundleManager.analyzeBundles();
            const { performance } = analysis;
            expect(performance).toHaveProperty('firstLoadJS');
            expect(performance).toHaveProperty('totalJS');
            expect(performance).toHaveProperty('score');
            expect(performance).toHaveProperty('grade');
            expect(performance.score).toBeGreaterThanOrEqual(0);
            expect(performance.score).toBeLessThanOrEqual(100);
            expect([
                'A',
                'B',
                'C',
                'D',
                'F'
            ]).toContain(performance.grade);
        });
        it('should generate recommendations based on analysis', async ()=>{
            const analysis = await bundleManager.analyzeBundles();
            const { recommendations } = analysis;
            expect(Array.isArray(recommendations)).toBe(true);
            if (recommendations.length > 0) {
                const recommendation = recommendations[0];
                expect(recommendation).toHaveProperty('type');
                expect(recommendation).toHaveProperty('priority');
                expect(recommendation).toHaveProperty('description');
                expect(recommendation).toHaveProperty('estimatedSavings');
                expect(recommendation).toHaveProperty('implementation');
                expect(recommendation).toHaveProperty('effort');
                expect([
                    'code-splitting',
                    'tree-shaking',
                    'dependency-replacement',
                    'lazy-loading',
                    'compression'
                ]).toContain(recommendation.type);
                expect([
                    'critical',
                    'high',
                    'medium',
                    'low'
                ]).toContain(recommendation.priority);
                expect([
                    'low',
                    'medium',
                    'high'
                ]).toContain(recommendation.effort);
            }
        });
        it('should update configuration correctly', ()=>{
            const newConfig = {
                maxChunkSize: 300 * 1024,
                enableTreeShaking: false
            };
            bundleManager.updateConfig(newConfig);
            // Verificar que la configuración se actualizó
            // (En una implementación real, tendríamos un getter para la config)
            expect(true).toBe(true); // Placeholder
        });
        it('should generate optimization report', async ()=>{
            const analysis = await bundleManager.analyzeBundles();
            const report = bundleManager.generateOptimizationReport(analysis);
            expect(typeof report).toBe('string');
            expect(report).toContain('Bundle Optimization Report');
            expect(report).toContain('Performance Metrics');
            expect(report).toContain('Chunks Analysis');
            expect(report).toContain('Top Recommendations');
        });
    });
    describe('PerformanceBudgetMonitor', ()=>{
        it('should be a singleton', ()=>{
            const instance1 = _performancebudgetmonitor.PerformanceBudgetMonitor.getInstance();
            const instance2 = _performancebudgetmonitor.PerformanceBudgetMonitor.getInstance();
            expect(instance1).toBe(instance2);
        });
        it('should have default budgets configured', ()=>{
            const budgets = budgetMonitor.getBudgets();
            expect(Array.isArray(budgets)).toBe(true);
            expect(budgets.length).toBeGreaterThan(0);
            const firstLoadBudget = budgets.find((b)=>b.name === 'First Load JS');
            expect(firstLoadBudget).toBeDefined();
            expect(firstLoadBudget?.threshold).toBe(128 * 1024);
            expect(firstLoadBudget?.category).toBe('critical');
        });
        it('should add and manage budgets', ()=>{
            const initialCount = budgetMonitor.getBudgets().length;
            const newBudget = {
                name: 'Test Budget',
                type: 'size',
                threshold: 100 * 1024,
                warning: 80 * 1024,
                unit: 'bytes',
                category: 'optional',
                description: 'Test budget for testing'
            };
            budgetMonitor.addBudget(newBudget);
            const budgets = budgetMonitor.getBudgets();
            expect(budgets.length).toBe(initialCount + 1);
            const addedBudget = budgets.find((b)=>b.name === 'Test Budget');
            expect(addedBudget).toBeDefined();
            expect(addedBudget?.threshold).toBe(100 * 1024);
        });
        it('should update existing budgets', ()=>{
            const budgets = budgetMonitor.getBudgets();
            const firstBudget = budgets[0];
            const originalThreshold = firstBudget.threshold;
            budgetMonitor.updateBudget(firstBudget.name, {
                threshold: 200 * 1024
            });
            const updatedBudgets = budgetMonitor.getBudgets();
            const updatedBudget = updatedBudgets.find((b)=>b.name === firstBudget.name);
            expect(updatedBudget?.threshold).toBe(200 * 1024);
            expect(updatedBudget?.threshold).not.toBe(originalThreshold);
        });
        it('should analyze performance and detect violations', async ()=>{
            const report = await budgetMonitor.analyzePerformance();
            expect(report).toHaveProperty('timestamp');
            expect(report).toHaveProperty('buildId');
            expect(report).toHaveProperty('violations');
            expect(report).toHaveProperty('metrics');
            expect(report).toHaveProperty('score');
            expect(report).toHaveProperty('grade');
            expect(report).toHaveProperty('trends');
            expect(Array.isArray(report.violations)).toBe(true);
            expect(typeof report.score).toBe('number');
            expect([
                'A',
                'B',
                'C',
                'D',
                'F'
            ]).toContain(report.grade);
        });
        it('should calculate performance score correctly', async ()=>{
            const report = await budgetMonitor.analyzePerformance();
            expect(report.score).toBeGreaterThanOrEqual(0);
            expect(report.score).toBeLessThanOrEqual(100);
            // Score should correlate with grade
            if (report.grade === 'A') {
                expect(report.score).toBeGreaterThanOrEqual(90);
            } else if (report.grade === 'F') {
                expect(report.score).toBeLessThan(60);
            }
        });
        it('should generate text report', async ()=>{
            const report = await budgetMonitor.analyzePerformance();
            const textReport = budgetMonitor.generateTextReport(report);
            expect(typeof textReport).toBe('string');
            expect(textReport).toContain('Performance Budget Report');
            expect(textReport).toContain('Build ID');
            expect(textReport).toContain('Score');
            expect(textReport).toContain('Metrics Summary');
        });
        it('should track performance trends', async ()=>{
            // Limpiar historial previo
            const history = budgetMonitor.getHistory();
            while(history.length > 0){
                history.pop();
            }
            // Generar primer reporte
            const report1 = await budgetMonitor.analyzePerformance();
            expect(report1.trends.length).toBe(0); // No hay historial previo
            // Simular segundo reporte
            const report2 = await budgetMonitor.analyzePerformance();
            expect(report2.trends.length).toBeGreaterThan(0);
            const trend = report2.trends[0];
            expect(trend).toHaveProperty('metric');
            expect(trend).toHaveProperty('current');
            expect(trend).toHaveProperty('previous');
            expect(trend).toHaveProperty('change');
            expect(trend).toHaveProperty('changePercent');
            expect(trend).toHaveProperty('trend');
            expect([
                'improving',
                'degrading',
                'stable'
            ]).toContain(trend.trend);
        });
    });
    describe('Webpack Optimization Config', ()=>{
        it('should generate advanced split chunks config', ()=>{
            const options = {
                enableAdvancedSplitting: true,
                enableTreeShaking: true,
                enableCompression: true,
                enableCaching: true,
                enablePreloading: true,
                performanceMode: 'production'
            };
            const config = (0, _webpackoptimizationconfig.getAdvancedSplitChunksConfig)(options);
            expect(config).toHaveProperty('chunks');
            expect(config).toHaveProperty('cacheGroups');
            expect(config.chunks).toBe('all');
            const cacheGroups = config.cacheGroups;
            expect(cacheGroups).toHaveProperty('framework');
            expect(cacheGroups).toHaveProperty('vendor');
            expect(cacheGroups).toHaveProperty('uiComponents');
            expect(cacheGroups).toHaveProperty('admin');
            // Verificar configuración de framework
            expect(cacheGroups.framework.priority).toBe(40);
            expect(cacheGroups.framework.enforce).toBe(true);
        });
        it('should generate optimization config for different modes', ()=>{
            const productionOptions = {
                enableAdvancedSplitting: true,
                enableTreeShaking: true,
                enableCompression: true,
                enableCaching: true,
                enablePreloading: true,
                performanceMode: 'production'
            };
            const developmentOptions = {
                enableAdvancedSplitting: false,
                enableTreeShaking: false,
                enableCompression: false,
                enableCaching: true,
                enablePreloading: false,
                performanceMode: 'development'
            };
            const prodConfig = (0, _webpackoptimizationconfig.getOptimizationConfig)(productionOptions);
            const devConfig = (0, _webpackoptimizationconfig.getOptimizationConfig)(developmentOptions);
            expect(prodConfig.usedExports).toBe(true);
            expect(prodConfig.concatenateModules).toBe(true);
            expect(prodConfig.runtimeChunk).toBe('single');
            expect(devConfig.usedExports).toBe(false);
            expect(devConfig.concatenateModules).toBe(false);
            expect(devConfig.runtimeChunk).toBe(false);
        });
        it('should have valid optimization presets', ()=>{
            expect(_webpackoptimizationconfig.OPTIMIZATION_PRESETS).toHaveProperty('development');
            expect(_webpackoptimizationconfig.OPTIMIZATION_PRESETS).toHaveProperty('production');
            expect(_webpackoptimizationconfig.OPTIMIZATION_PRESETS).toHaveProperty('analysis');
            const prodPreset = _webpackoptimizationconfig.OPTIMIZATION_PRESETS.production;
            expect(prodPreset.enableAdvancedSplitting).toBe(true);
            expect(prodPreset.enableTreeShaking).toBe(true);
            expect(prodPreset.performanceMode).toBe('production');
            const devPreset = _webpackoptimizationconfig.OPTIMIZATION_PRESETS.development;
            expect(devPreset.enableAdvancedSplitting).toBe(false);
            expect(devPreset.enableTreeShaking).toBe(false);
            expect(devPreset.performanceMode).toBe('development');
        });
    });
    describe('Integration Tests', ()=>{
        it('should work together - bundle analysis and budget monitoring', async ()=>{
            // Analizar bundles
            const bundleAnalysis = await bundleManager.analyzeBundles();
            // Analizar performance budgets
            const budgetReport = await budgetMonitor.analyzePerformance();
            // Verificar que ambos sistemas funcionan juntos
            // Los scores pueden diferir ligeramente debido a diferentes algoritmos de cálculo
            expect(bundleAnalysis.performance.score).toBeGreaterThan(0);
            expect(budgetReport.score).toBeGreaterThan(0);
            expect([
                'A',
                'B',
                'C',
                'D',
                'F'
            ]).toContain(bundleAnalysis.performance.grade);
            expect([
                'A',
                'B',
                'C',
                'D',
                'F'
            ]).toContain(budgetReport.grade);
            // Verificar que las métricas están en rangos razonables
            expect(bundleAnalysis.performance.firstLoadJS).toBeGreaterThan(0);
            expect(budgetReport.metrics.firstLoadJS).toBeGreaterThan(0);
        });
        it('should generate comprehensive optimization recommendations', async ()=>{
            const bundleAnalysis = await bundleManager.analyzeBundles();
            const budgetReport = await budgetMonitor.analyzePerformance();
            const bundleRecommendations = bundleAnalysis.recommendations;
            const budgetViolations = budgetReport.violations;
            // Si hay violaciones de presupuesto, debería haber recomendaciones
            if (budgetViolations.length > 0) {
                expect(bundleRecommendations.length).toBeGreaterThan(0);
            }
            // Las recomendaciones deberían estar ordenadas por prioridad
            for(let i = 1; i < bundleRecommendations.length; i++){
                const priorityOrder = {
                    critical: 4,
                    high: 3,
                    medium: 2,
                    low: 1
                };
                const currentPriority = priorityOrder[bundleRecommendations[i].priority];
                const previousPriority = priorityOrder[bundleRecommendations[i - 1].priority];
                expect(currentPriority).toBeLessThanOrEqual(previousPriority);
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,