dbcd5fb92bebf439797613a9767f26a0
// ===================================
// HOOK: useSearchOptimized - Sistema de b√∫squeda con TanStack Query
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSearchOptimized () {
        return useSearchOptimized;
    }
});
const _react = require("react");
const _reactquery = require("@tanstack/react-query");
const _usedebounce = require("use-debounce");
const _products = require("../lib/api/products");
const _queryclient = require("../lib/query-client");
const _useSearchErrorHandler = require("./useSearchErrorHandler");
const _useSearchToast = require("./useSearchToast");
const _useSearchNavigation = require("./useSearchNavigation");
const _useTrendingSearches = require("./useTrendingSearches");
const _useRecentSearches = require("./useRecentSearches");
const _shop = require("../constants/shop");
function useSearchOptimized(options = {}) {
    const { debounceMs = 150, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, enablePrefetch = true, onSearch, onSuggestionSelect } = options;
    // Estados locales
    const [query, setQuery] = (0, _react.useState)('');
    const [debouncedQuery, setDebouncedQuery] = (0, _react.useState)('');
    const [recentSearches, setRecentSearches] = (0, _react.useState)([]);
    const [hasSearched, setHasSearched] = (0, _react.useState)(false);
    // Hooks externos
    const queryClient = (0, _reactquery.useQueryClient)();
    const errorHandler = (0, _useSearchErrorHandler.useSearchErrorHandler)();
    const toastHandler = (0, _useSearchToast.useSearchToast)();
    const navigation = (0, _useSearchNavigation.useSearchNavigation)({
        scrollToTop: true,
        onBeforeNavigate: (url)=>console.log('üîç Navegando a:', url),
        onAfterNavigate: (url)=>console.log('‚úÖ Navegaci√≥n completada:', url)
    });
    // Hooks para trending y recent searches
    const { trendingSearches, trackSearch } = (0, _useTrendingSearches.useTrendingSearches)({
        limit: 4,
        enabled: true
    });
    // Debug para trending searches
    if (process.env.NODE_ENV === 'development') {
        console.log('üî• useSearchOptimized: Trending searches state:', {
            trendingSearches: trendingSearches?.length || 0,
            trendingSearchesData: trendingSearches?.map((t)=>({
                    id: t.id,
                    query: t.query
                })) || []
        });
    }
    const { recentSearches: recentSearchesList, addSearch: addRecentSearch, getRecentSearches } = (0, _useRecentSearches.useRecentSearches)({
        maxSearches: _shop.SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,
        enablePersistence: saveRecentSearches,
        expirationDays: _shop.SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS
    });
    // ===================================
    // DEBOUNCED QUERY UPDATE
    // ===================================
    const updateDebouncedQuery = (0, _usedebounce.useDebouncedCallback)((value)=>{
        setDebouncedQuery(value);
        // Analytics tracking
        if (value.trim() && process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {
            console.log('üîç useSearchOptimized: Query enabled condition will be:', !!value?.trim());
        }
    }, debounceMs, {
        maxWait: 2000,
        leading: false,
        trailing: true
    });
    // ===================================
    // TANSTACK QUERY INTEGRATION
    // ===================================
    // Query principal para b√∫squedas
    const { data: searchResults, isLoading, error, isFetching, isStale, dataUpdatedAt } = (0, _reactquery.useQuery)({
        queryKey: _queryclient.searchQueryKeys.search(debouncedQuery),
        queryFn: async ({ queryKey, signal })=>{
            const [, , searchQuery] = queryKey;
            if (!searchQuery?.trim()) {
                return [];
            }
            try {
                // Usar la API de b√∫squeda correcta
                const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    signal
                });
                if (!response.ok) {
                    console.error('üîç useSearchOptimized: API response not ok:', response.status);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data.products || [];
            } catch (error) {
                console.error('üîç useSearchOptimized: API call failed:', error);
                throw error;
            }
        },
        enabled: !!debouncedQuery?.trim() && debouncedQuery.length >= 2,
        ..._queryclient.searchQueryConfig
    });
    // ===================================
    // SUGGESTIONS GENERATION
    // ===================================
    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {
        console.log('üîç useSearchOptimized: Current state before suggestions:', {
            query,
            debouncedQuery,
            searchResults: searchResults?.length || 0,
            isLoading,
            error: !!error
        });
    }
    const suggestions = (0, _react.useMemo)(()=>{
        const allSuggestions = [];
        const hasQuery = !!debouncedQuery?.trim();
        if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {
            console.log('üîç useSearchOptimized: query (current):', `"${query}"`);
            console.log('üîç useSearchOptimized: searchResults isArray:', Array.isArray(searchResults));
        }
        if (hasQuery) {
            // CUANDO HAY TEXTO: Priorizar productos SIEMPRE
            // Extraer productos de la respuesta de la API
            let products = [];
            // Si searchResults es un array directamente
            if (Array.isArray(searchResults)) {
                products = searchResults;
            } else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.data)) {
                products = searchResults.data;
            } else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.products)) {
                products = searchResults.products;
            }
            if (products.length > 0) {
                const productSuggestions = products.map((product)=>{
                    return {
                        id: product.id.toString(),
                        type: 'product',
                        title: product.name,
                        subtitle: product.category?.name,
                        image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],
                        badge: product.stock > 0 ? 'En stock' : 'Sin stock',
                        href: `/products/${product.id}`
                    };
                });
                allSuggestions.push(...productSuggestions);
            } else {
                if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {
                    console.log('üîç useSearchOptimized: searchResults structure:', {
                        isArray: Array.isArray(searchResults),
                        hasData: searchResults?.data ? 'yes' : 'no',
                        hasProducts: searchResults?.products ? 'yes' : 'no',
                        dataLength: searchResults?.data?.length,
                        productsLength: searchResults?.products?.length,
                        keys: searchResults ? Object.keys(searchResults) : 'null'
                    });
                }
            }
            // Solo agregar recent/trending si hay muy pocos productos
            if (allSuggestions.length < 2) {
                const recentSuggestions = getRecentSearches(2).map((search, index)=>({
                        id: `recent-${index}`,
                        type: 'recent',
                        title: search,
                        href: `/shop?q=${encodeURIComponent(search)}`
                    }));
                allSuggestions.push(...recentSuggestions);
            }
        } else {
            // CUANDO NO HAY TEXTO: Mostrar trending y recent
            // Agregar b√∫squedas recientes primero
            const recentSuggestions = getRecentSearches(3).map((search, index)=>({
                    id: `recent-${index}`,
                    type: 'recent',
                    title: search,
                    href: `/shop?q=${encodeURIComponent(search)}`
                }));
            allSuggestions.push(...recentSuggestions);
            // Agregar trending searches
            if (allSuggestions.length < maxSuggestions) {
                const remainingSlots = maxSuggestions - allSuggestions.length;
                const trendingSuggestions = trendingSearches.slice(0, remainingSlots).map((trending)=>({
                        id: trending.id,
                        type: 'trending',
                        title: trending.query,
                        href: trending.href,
                        badge: trending.count ? `${trending.count}` : undefined
                    }));
                allSuggestions.push(...trendingSuggestions);
            }
        }
        const finalSuggestions = allSuggestions.slice(0, maxSuggestions);
        if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {
            console.log('üîç useSearchOptimized: Final suggestions types:', finalSuggestions.map((s)=>s.type));
            console.log('üîç useSearchOptimized: Final suggestions titles:', finalSuggestions.map((s)=>s.title));
        }
        return finalSuggestions;
    }, [
        debouncedQuery,
        searchResults,
        isLoading,
        error,
        maxSuggestions,
        trendingSearches
    ]);
    // ===================================
    // SEARCH FUNCTIONS
    // ===================================
    const searchWithDebounce = (0, _react.useCallback)((searchQuery)=>{
        setQuery(searchQuery);
        updateDebouncedQuery(searchQuery);
        // Prefetch si est√° habilitado y la query es v√°lida
        if (enablePrefetch && searchQuery.trim().length >= 1) {
            // Prefetch de datos de b√∫squeda
            queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            });
            // Prefetch de p√°gina de resultados
            navigation.prefetchSearch(searchQuery.trim());
        }
    }, [
        updateDebouncedQuery,
        enablePrefetch,
        queryClient,
        maxSuggestions,
        navigation
    ]);
    const executeSearch = (0, _react.useCallback)(async (searchQuery)=>{
        if (!searchQuery.trim()) {
            return;
        }
        try {
            setHasSearched(true);
            // Guardar en historial usando el hook
            if (saveRecentSearches) {
                addRecentSearch(searchQuery.trim());
            }
            // Registrar en trending searches
            trackSearch(searchQuery.trim()).catch(console.warn);
            // Navegar a p√°gina de resultados usando navegaci√≥n optimizada
            navigation.navigateToSearch(searchQuery.trim());
            // Callback externo
            if (onSearch && searchResults) {
                onSearch(searchQuery, searchResults);
            }
            toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0);
        } catch (error) {
            console.error('‚ùå useSearchOptimized: Error en executeSearch:', error);
            errorHandler.handleError(error);
        }
    }, [
        saveRecentSearches,
        recentSearches,
        navigation,
        onSearch,
        searchResults,
        toastHandler,
        errorHandler
    ]);
    const selectSuggestion = (0, _react.useCallback)((suggestion)=>{
        // Navegar seg√∫n el tipo de sugerencia
        if (suggestion.type === 'product') {
            navigation.navigateToProduct(suggestion.id);
        } else {
            // Para b√∫squedas recientes o trending, navegar a b√∫squeda
            navigation.navigateToSearch(suggestion.title);
        }
        // Callback externo
        if (onSuggestionSelect) {
            onSuggestionSelect(suggestion);
        }
        toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'B√∫squeda'} seleccionado`, suggestion.title);
    }, [
        navigation,
        onSuggestionSelect,
        toastHandler
    ]);
    const clearSearch = (0, _react.useCallback)(()=>{
        setQuery('');
        setDebouncedQuery('');
        setHasSearched(false);
        // Limpiar cache de b√∫squedas si es necesario
        queryClient.removeQueries({
            queryKey: _queryclient.searchQueryKeys.searches()
        });
    }, [
        queryClient
    ]);
    // ===================================
    // LIFECYCLE
    // ===================================
    const initialize = (0, _react.useCallback)(()=>{
        // Cargar b√∫squedas recientes
        if (saveRecentSearches) {
            try {
                const saved = localStorage.getItem('pinteya-recent-searches');
                if (saved && saved.trim() !== '' && saved !== '""' && saved !== "''") {
                    // Validar que no est√© corrupto
                    if (saved.includes('""') && saved.length < 5) {
                        console.warn('Detected corrupted recent searches data, cleaning up');
                        localStorage.removeItem('pinteya-recent-searches');
                        return;
                    }
                    const parsed = JSON.parse(saved);
                    // Verificar que sea un array v√°lido
                    if (Array.isArray(parsed)) {
                        setRecentSearches(parsed);
                    } else {
                        console.warn('Invalid recent searches format, resetting');
                        localStorage.removeItem('pinteya-recent-searches');
                    }
                }
            } catch (error) {
                console.warn('Error cargando b√∫squedas recientes:', error);
                // Limpiar datos corruptos
                localStorage.removeItem('pinteya-recent-searches');
            }
        }
    }, [
        saveRecentSearches
    ]);
    const cleanup = (0, _react.useCallback)(()=>{
        // Limpiar debounce y cache si es necesario
        updateDebouncedQuery.cancel();
    }, [
        updateDebouncedQuery
    ]);
    // Inicializar al montar
    (0, _react.useEffect)(()=>{
        initialize();
        return cleanup;
    }, [
        initialize,
        cleanup
    ]);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Estado de b√∫squeda
        query,
        results: searchResults || [],
        suggestions,
        isLoading,
        error: error?.message || null,
        hasSearched,
        recentSearches: recentSearchesList,
        trendingSearches,
        // Estados de TanStack Query
        isFetching,
        isStale,
        dataUpdatedAt,
        // Estado de errores y toasts
        searchError: errorHandler.currentError,
        isRetrying: errorHandler.isRetrying,
        retryCount: errorHandler.retryCount,
        toasts: toastHandler.toasts,
        // Funciones principales
        searchWithDebounce,
        executeSearch,
        selectSuggestion,
        clearSearch,
        initialize,
        cleanup,
        // Funciones de manejo de errores
        clearError: errorHandler.clearError,
        retryManually: errorHandler.retryManually,
        // Funciones de toast
        removeToast: toastHandler.removeToast,
        clearToasts: toastHandler.clearToasts,
        // Utilidades de cache
        invalidateSearch: (searchQuery)=>queryClient.invalidateQueries({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery)
            }),
        prefetchSearch: (searchQuery)=>queryClient.prefetchQuery({
                queryKey: _queryclient.searchQueryKeys.search(searchQuery),
                queryFn: ()=>(0, _products.searchProducts)(searchQuery, maxSuggestions),
                ..._queryclient.searchQueryConfig
            }),
        // Funciones de navegaci√≥n optimizada
        navigateToSearch: navigation.navigateToSearch,
        navigateToProduct: navigation.navigateToProduct,
        navigateToCategory: navigation.navigateToCategory,
        prefetchSearchPage: navigation.prefetchSearch,
        prefetchProductPage: navigation.prefetchProduct,
        getCurrentSearchQuery: navigation.getCurrentSearchQuery,
        buildSearchUrl: navigation.buildSearchUrl
    };
}
const _default = useSearchOptimized;

//# sourceMappingURL=data:application/json;base64,