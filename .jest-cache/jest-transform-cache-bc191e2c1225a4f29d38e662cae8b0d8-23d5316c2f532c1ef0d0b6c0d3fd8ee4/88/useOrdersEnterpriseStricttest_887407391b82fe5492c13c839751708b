0894880ddf7a1aadd8f55c273d35b507
// ===================================
// PINTEYA E-COMMERCE - UNIT TESTS
// Pruebas unitarias para useOrdersEnterpriseStrict
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersEnterpriseStrict = require("../../hooks/admin/useOrdersEnterpriseStrict");
// ===================================
// MOCKS
// ===================================
// Mock del fetch global
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
// Mock de console para capturar logs
const mockConsoleError = _globals.jest.spyOn(console, 'error').mockImplementation(()=>{});
const mockConsoleWarn = _globals.jest.spyOn(console, 'warn').mockImplementation(()=>{});
// Datos de prueba
const mockOrder = {
    id: 'order-123',
    orderNumber: 'ORD-2024-001',
    status: 'pending',
    previousStatus: null,
    statusHistory: [
        {
            status: 'pending',
            timestamp: new Date().toISOString(),
            reason: 'Order created',
            userId: 'user-123'
        }
    ],
    customerId: 'customer-123',
    customerEmail: 'test@example.com',
    customerPhone: '+1234567890',
    items: [
        {
            id: 'item-1',
            productId: 'product-1',
            productName: 'Test Product',
            quantity: 2,
            unitPrice: 29.99,
            totalPrice: 59.98,
            sku: 'TEST-SKU-001'
        }
    ],
    subtotal: 59.98,
    taxAmount: 4.80,
    shippingAmount: 9.99,
    discountAmount: 0,
    totalAmount: 74.77,
    currency: 'USD',
    shippingAddress: {
        street: '123 Test St',
        city: 'Test City',
        state: 'TS',
        zipCode: '12345',
        country: 'US'
    },
    billingAddress: {
        street: '123 Test St',
        city: 'Test City',
        state: 'TS',
        zipCode: '12345',
        country: 'US'
    },
    paymentMethod: 'credit_card',
    paymentStatus: 'pending',
    shippingMethod: 'standard',
    estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    notes: 'Test order notes',
    tags: [
        'test',
        'automated'
    ],
    metadata: {
        source: 'web',
        campaign: 'test-campaign'
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
};
const mockApiResponse = {
    success: true,
    data: [
        mockOrder
    ],
    message: 'Orders retrieved successfully',
    timestamp: new Date().toISOString(),
    requestId: 'req-123',
    pagination: {
        page: 1,
        limit: 10,
        total: 1,
        totalPages: 1
    }
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockFetch.mockClear();
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS PRINCIPALES
// ===================================
(0, _globals.describe)('useOrdersEnterpriseStrict', ()=>{
    (0, _globals.describe)('Inicialización', ()=>{
        (0, _globals.it)('debe inicializar con estado por defecto', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false
                }));
            (0, _globals.expect)(result.current.orders).toEqual([]);
            (0, _globals.expect)(result.current.loading).toBe(false);
            (0, _globals.expect)(result.current.error).toBeNull();
            (0, _globals.expect)(result.current.pagination).toEqual({
                page: 1,
                limit: 10,
                total: 0,
                totalPages: 0
            });
        });
        (0, _globals.it)('debe aplicar filtros iniciales', ()=>{
            const initialFilters = {
                status: 'pending',
                customerId: 'customer-123'
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters,
                    enableCache: false
                }));
            (0, _globals.expect)(result.current.filters).toEqual(initialFilters);
        });
    });
    (0, _globals.describe)('Carga de datos exitosa', ()=>{
        (0, _globals.beforeEach)(()=>{
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>mockApiResponse
            });
        });
        (0, _globals.it)('debe cargar órdenes correctamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    autoFetch: true
                }));
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            (0, _globals.expect)(result.current.orders).toEqual([
                mockOrder
            ]);
            (0, _globals.expect)(result.current.error).toBeNull();
            (0, _globals.expect)(result.current.pagination).toEqual(mockApiResponse.pagination);
        });
        (0, _globals.it)('debe manejar filtros correctamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false
                }));
            await (0, _react.act)(async ()=>{
                result.current.setFilters({
                    status: 'pending'
                });
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('status=pending'), _globals.expect.any(Object));
            });
        });
        (0, _globals.it)('debe manejar paginación correctamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false
                }));
            await (0, _react.act)(async ()=>{
                result.current.setPage(2);
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('page=2'), _globals.expect.any(Object));
            });
        });
    });
    (0, _globals.describe)('Manejo de errores', ()=>{
        (0, _globals.it)('debe manejar errores de red', async ()=>{
            mockFetch.mockRejectedValue(new Error('Network error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    autoFetch: true
                }));
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            (0, _globals.expect)(result.current.error).toBeTruthy();
            (0, _globals.expect)(result.current.orders).toEqual([]);
        });
        (0, _globals.it)('debe manejar respuestas HTTP de error', async ()=>{
            mockFetch.mockResolvedValue({
                ok: false,
                status: 500,
                json: async ()=>({
                        success: false,
                        message: 'Internal server error'
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    autoFetch: true
                }));
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            (0, _globals.expect)(result.current.error).toBeTruthy();
            (0, _globals.expect)(result.current.orders).toEqual([]);
        });
        (0, _globals.it)('debe manejar datos inválidos', async ()=>{
            const invalidResponse = {
                success: true,
                data: [
                    {
                        id: 'invalid'
                    }
                ],
                message: 'Success'
            };
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>invalidResponse
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    autoFetch: true,
                    enableValidation: true
                }));
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalled();
            (0, _globals.expect)(result.current.orders).toEqual([]);
        });
    });
    (0, _globals.describe)('Sistema de caché', ()=>{
        (0, _globals.beforeEach)(()=>{
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>mockApiResponse
            });
        });
        (0, _globals.it)('debe usar caché cuando está habilitado', async ()=>{
            const { result, rerender } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: true,
                    cacheTime: 5000
                }));
            // Primera carga
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            const firstCallCount = mockFetch.mock.calls.length;
            // Segunda carga (debería usar caché)
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            (0, _globals.expect)(mockFetch.mock.calls.length).toBe(firstCallCount);
        });
        (0, _globals.it)('debe invalidar caché después del tiempo especificado', async ()=>{
            _globals.jest.useFakeTimers();
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: true,
                    cacheTime: 1000 // 1 segundo
                }));
            // Primera carga
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            const firstCallCount = mockFetch.mock.calls.length;
            // Avanzar tiempo más allá del cache time
            (0, _react.act)(()=>{
                _globals.jest.advanceTimersByTime(1500);
            });
            // Segunda carga (debería hacer nueva petición)
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            (0, _globals.expect)(mockFetch.mock.calls.length).toBeGreaterThan(firstCallCount);
            _globals.jest.useRealTimers();
        });
    });
    (0, _globals.describe)('Sistema de reintentos', ()=>{
        (0, _globals.it)('debe reintentar en caso de error', async ()=>{
            mockFetch.mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
                ok: true,
                status: 200,
                json: async ()=>mockApiResponse
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    retryAttempts: 3,
                    retryDelay: 100
                }));
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            }, {
                timeout: 5000
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3);
            (0, _globals.expect)(result.current.orders).toEqual([
                mockOrder
            ]);
            (0, _globals.expect)(result.current.error).toBeNull();
        });
        (0, _globals.it)('debe fallar después de agotar reintentos', async ()=>{
            mockFetch.mockRejectedValue(new Error('Persistent network error'));
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    retryAttempts: 2,
                    retryDelay: 50
                }));
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            }, {
                timeout: 3000
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3); // 1 inicial + 2 reintentos
            (0, _globals.expect)(result.current.error).toBeTruthy();
            (0, _globals.expect)(result.current.orders).toEqual([]);
        });
    });
    (0, _globals.describe)('Transformación de datos', ()=>{
        (0, _globals.it)('debe aplicar transformaciones personalizadas', async ()=>{
            const transformedOrder = {
                ...mockOrder,
                customField: 'transformed'
            };
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>mockApiResponse
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    transform: (orders)=>orders.map((order)=>({
                                ...order,
                                customField: 'transformed'
                            }))
                }));
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.loading).toBe(false);
            });
            (0, _globals.expect)(result.current.orders[0]).toEqual(transformedOrder);
        });
    });
    (0, _globals.describe)('Callbacks', ()=>{
        (0, _globals.it)('debe ejecutar callback onSuccess', async ()=>{
            const onSuccess = _globals.jest.fn();
            mockFetch.mockResolvedValue({
                ok: true,
                status: 200,
                json: async ()=>mockApiResponse
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    onSuccess
                }));
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(onSuccess).toHaveBeenCalledWith([
                    mockOrder
                ]);
            });
        });
        (0, _globals.it)('debe ejecutar callback onError', async ()=>{
            const onError = _globals.jest.fn();
            const error = new Error('Test error');
            mockFetch.mockRejectedValue(error);
            const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)({
                    initialFilters: {},
                    enableCache: false,
                    onError
                }));
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(onError).toHaveBeenCalledWith(error);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,