82f40240f9ae253b94c2613b3e3f0ff3
// ===================================
// PINTEYA E-COMMERCE - FUNCIONES DE API PARA MARCAS
// ===================================
"use strict";

/* istanbul ignore next */
function cov_1v58qmgnh0() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\brands.ts";
  var hash = "c850b5a9653f2e6282a4417a850ece7074c98da8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\brands.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 29
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 32
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 34
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "12": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "13": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "14": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 50
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "16": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "17": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 48,
          column: 17
        }
      },
      "18": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 63
        }
      },
      "19": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "20": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 74
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "22": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 27
        }
      },
      "24": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 57
        }
      },
      "25": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 20
        }
      },
      "26": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "27": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "28": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 77,
          column: 74
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "30": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 75
        }
      },
      "31": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 27
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 73
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 20
        }
      },
      "34": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 90,
          column: 7
        }
      },
      "35": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 95,
          column: 7
        }
      },
      "36": {
        start: {
          line: 98,
          column: 25
        },
        end: {
          line: 102,
          column: 6
        }
      },
      "37": {
        start: {
          line: 103,
          column: 21
        },
        end: {
          line: 108,
          column: 6
        }
      },
      "38": {
        start: {
          line: 110,
          column: 19
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "39": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "40": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 71
        }
      },
      "41": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 23
        }
      },
      "42": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "43": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 127,
          column: 45
        }
      },
      "44": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 48
        }
      },
      "45": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "46": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 140,
          column: 64
        }
      },
      "47": {
        start: {
          line: 143,
          column: 23
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "48": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 30
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "9": {
        name: "getBrands",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 24
          }
        },
        loc: {
          start: {
            line: 41,
            column: 34
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 41
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 45,
            column: 44
          },
          end: {
            line: 45,
            column: 45
          }
        },
        loc: {
          start: {
            line: 45,
            column: 60
          },
          end: {
            line: 49,
            column: 13
          }
        },
        line: 45
      },
      "11": {
        name: "getBrandStats",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 28
          }
        },
        loc: {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 68
      },
      "12": {
        name: "searchBrands",
        decl: {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 87,
            column: 27
          }
        },
        loc: {
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 87
      },
      "13": {
        name: "getPopularBrands",
        decl: {
          start: {
            line: 92,
            column: 15
          },
          end: {
            line: 92,
            column: 31
          }
        },
        loc: {
          start: {
            line: 92,
            column: 49
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 92
      },
      "14": {
        name: "getProductsByBrand",
        decl: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 33
          }
        },
        loc: {
          start: {
            line: 97,
            column: 67
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 97
      },
      "15": {
        name: "formatBrandName",
        decl: {
          start: {
            line: 116,
            column: 9
          },
          end: {
            line: 116,
            column: 24
          }
        },
        loc: {
          start: {
            line: 116,
            column: 36
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 116
      },
      "16": {
        name: "getBrandColor",
        decl: {
          start: {
            line: 130,
            column: 9
          },
          end: {
            line: 130,
            column: 22
          }
        },
        loc: {
          start: {
            line: 130,
            column: 34
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 130
      },
      "17": {
        name: "getBrandLogo",
        decl: {
          start: {
            line: 142,
            column: 9
          },
          end: {
            line: 142,
            column: 21
          }
        },
        loc: {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 142
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 46,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 46,
            column: 39
          }
        }, {
          start: {
            line: 46,
            column: 43
          },
          end: {
            line: 46,
            column: 57
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 19
          }
        }, {
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 59,
            column: 38
          }
        }, {
          start: {
            line: 59,
            column: 42
          },
          end: {
            line: 59,
            column: 54
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 41
          }
        }, {
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 60,
            column: 73
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 19
          }
        }, {
          start: {
            line: 78,
            column: 23
          },
          end: {
            line: 78,
            column: 38
          }
        }, {
          start: {
            line: 78,
            column: 42
          },
          end: {
            line: 78,
            column: 54
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 41
          }
        }, {
          start: {
            line: 79,
            column: 45
          },
          end: {
            line: 79,
            column: 73
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 32
          },
          end: {
            line: 92,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 46
          },
          end: {
            line: 92,
            column: 47
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 97,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 97,
            column: 52
          },
          end: {
            line: 97,
            column: 53
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 97,
            column: 55
          },
          end: {
            line: 97,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 97,
            column: 63
          },
          end: {
            line: 97,
            column: 65
          }
        }],
        line: 97
      },
      "12": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "13": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 15
          }
        }, {
          start: {
            line: 111,
            column: 19
          },
          end: {
            line: 111,
            column: 34
          }
        }, {
          start: {
            line: 111,
            column: 38
          },
          end: {
            line: 111,
            column: 50
          }
        }],
        line: 111
      },
      "14": {
        loc: {
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 37
          }
        }, {
          start: {
            line: 112,
            column: 41
          },
          end: {
            line: 112,
            column: 69
          }
        }],
        line: 112
      },
      "15": {
        loc: {
          start: {
            line: 128,
            column: 11
          },
          end: {
            line: 128,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 11
          },
          end: {
            line: 128,
            column: 34
          }
        }, {
          start: {
            line: 128,
            column: 38
          },
          end: {
            line: 128,
            column: 47
          }
        }],
        line: 128
      },
      "16": {
        loc: {
          start: {
            line: 140,
            column: 11
          },
          end: {
            line: 140,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 11
          },
          end: {
            line: 140,
            column: 50
          }
        }, {
          start: {
            line: 140,
            column: 54
          },
          end: {
            line: 140,
            column: 63
          }
        }],
        line: 140
      },
      "17": {
        loc: {
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 152,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 152,
            column: 49
          }
        }, {
          start: {
            line: 152,
            column: 53
          },
          end: {
            line: 152,
            column: 81
          }
        }],
        line: 152
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\brands.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA MARCAS\r\n// ===================================\r\n\r\nimport { ApiResponse } from '@/types/api';\r\nimport { Brand, BrandFilters } from '@/app/api/brands/route';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// Re-exportar tipos para uso en el frontend\r\nexport type { Brand, BrandFilters };\r\n\r\n// ===================================\r\n// FUNCIONES PARA EL FRONTEND\r\n// ===================================\r\n\r\n/**\r\n * Obtiene todas las marcas disponibles desde la API\r\n * @param filters - Filtros de marcas\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function getBrands(filters?: BrandFilters): Promise<ApiResponse<Brand[]>> {\r\n  try {\r\n    const searchParams = new URLSearchParams();\r\n    \r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          searchParams.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    const response = await fetch(`/api/brands?${searchParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<Brand[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error obteniendo marcas:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene estad\xEDsticas detalladas de marcas\r\n * @returns Promise<ApiResponse<BrandStats[]>>\r\n */\r\nexport async function getBrandStats(): Promise<ApiResponse<any[]>> {\r\n  try {\r\n    const response = await fetch('/api/brands', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<any[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error obteniendo estad\xEDsticas de marcas:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Busca marcas por t\xE9rmino de b\xFAsqueda\r\n * @param searchTerm - T\xE9rmino de b\xFAsqueda\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function searchBrands(searchTerm: string): Promise<ApiResponse<Brand[]>> {\r\n  return getBrands({\r\n    search: searchTerm,\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene marcas populares (con m\xE1s productos)\r\n * @param minProducts - M\xEDnimo n\xFAmero de productos\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function getPopularBrands(minProducts: number = 3): Promise<ApiResponse<Brand[]>> {\r\n  return getBrands({\r\n    minProducts,\r\n  });\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES HELPER\r\n// ===================================\r\n\r\n/**\r\n * Obtiene productos por marca usando la API de productos\r\n * @param brandName - Nombre de la marca\r\n * @param page - P\xE1gina\r\n * @param limit - L\xEDmite de resultados\r\n */\r\nexport async function getProductsByBrand(\r\n  brandName: string,\r\n  page: number = 1,\r\n  limit: number = 12\r\n) {\r\n  const searchParams = new URLSearchParams({\r\n    brand: brandName,\r\n    page: page.toString(),\r\n    limit: limit.toString(),\r\n  });\r\n\r\n  const response = await fetch(`/api/products?${searchParams.toString()}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  // Usar parsing seguro de JSON\r\n  const result = await safeApiResponseJson(response);\r\n\r\n  if (!result || !result.success || !result.data) {\r\n    throw new Error(result?.error || 'Error parsing API response');\r\n  }\r\n\r\n  return result.data;\r\n}\r\n\r\n/**\r\n * Formatea el nombre de marca para mostrar\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Nombre formateado\r\n */\r\nexport function formatBrandName(brandName: string): string {\r\n  // Casos especiales de formato\r\n  const specialCases: Record<string, string> = {\r\n    'el galgo': 'El Galgo',\r\n    'sherwin williams': 'Sherwin Williams',\r\n    'gen\xE9rico': 'Gen\xE9rico',\r\n    'akapol': 'Akapol',\r\n    'plavicon': 'Plavicon',\r\n    'sinteplast': 'Sinteplast',\r\n    'petrilac': 'Petrilac',\r\n  };\r\n\r\n  const lowerCase = brandName.toLowerCase();\r\n  return specialCases[lowerCase] || brandName;\r\n}\r\n\r\n/**\r\n * Obtiene el color asociado a una marca (para UI)\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Color en formato CSS\r\n */\r\nexport function getBrandColor(brandName: string): string {\r\n  const brandColors: Record<string, string> = {\r\n    'El Galgo': '#FF6B35',\r\n    'Sherwin Williams': '#0066CC',\r\n    'Akapol': '#FF8C00',\r\n    'Plavicon': '#228B22',\r\n    'Sinteplast': '#8B4513',\r\n    'Petrilac': '#4169E1',\r\n    'Gen\xE9rico': '#708090',\r\n  };\r\n\r\n  return brandColors[formatBrandName(brandName)] || '#6B7280';\r\n}\r\n\r\n/**\r\n * Obtiene el logo/icono de una marca\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Ruta del logo o icono por defecto\r\n */\r\nexport function getBrandLogo(brandName: string): string {\r\n  const brandLogos: Record<string, string> = {\r\n    'El Galgo': '/images/brands/el-galgo.png',\r\n    'Sherwin Williams': '/images/brands/sherwin-williams.png',\r\n    'Akapol': '/images/brands/akapol.png',\r\n    'Plavicon': '/images/brands/plavicon.png',\r\n    'Sinteplast': '/images/brands/sinteplast.png',\r\n    'Petrilac': '/images/brands/petrilac.png',\r\n    'Gen\xE9rico': '/images/brands/generic.png',\r\n  };\r\n\r\n  return brandLogos[formatBrandName(brandName)] || '/images/brands/default.png';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["formatBrandName", "getBrandColor", "getBrandLogo", "getBrandStats", "getBrands", "getPopularBrands", "getProductsByBrand", "searchBrands", "filters", "searchParams", "URLSearchParams", "Object", "entries", "forEach", "key", "value", "undefined", "append", "toString", "response", "fetch", "method", "headers", "result", "safeApiResponseJson", "success", "data", "Error", "error", "console", "searchTerm", "search", "minProducts", "brandName", "page", "limit", "brand", "specialCases", "lowerCase", "toLowerCase", "brandColors", "brandLogos"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c850b5a9653f2e6282a4417a850ece7074c98da8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v58qmgnh0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v58qmgnh0();
cov_1v58qmgnh0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[0]++;
  cov_1v58qmgnh0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1v58qmgnh0().s[3]++;
_export(exports, {
  get formatBrandName() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[1]++;
    cov_1v58qmgnh0().s[4]++;
    return formatBrandName;
  },
  get getBrandColor() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[2]++;
    cov_1v58qmgnh0().s[5]++;
    return getBrandColor;
  },
  get getBrandLogo() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[3]++;
    cov_1v58qmgnh0().s[6]++;
    return getBrandLogo;
  },
  get getBrandStats() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[4]++;
    cov_1v58qmgnh0().s[7]++;
    return getBrandStats;
  },
  get getBrands() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[5]++;
    cov_1v58qmgnh0().s[8]++;
    return getBrands;
  },
  get getPopularBrands() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[6]++;
    cov_1v58qmgnh0().s[9]++;
    return getPopularBrands;
  },
  get getProductsByBrand() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[7]++;
    cov_1v58qmgnh0().s[10]++;
    return getProductsByBrand;
  },
  get searchBrands() {
    /* istanbul ignore next */
    cov_1v58qmgnh0().f[8]++;
    cov_1v58qmgnh0().s[11]++;
    return searchBrands;
  }
});
const _jsonutils =
/* istanbul ignore next */
(cov_1v58qmgnh0().s[12]++, require("../json-utils"));
async function getBrands(filters) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[9]++;
  cov_1v58qmgnh0().s[13]++;
  try {
    const searchParams =
    /* istanbul ignore next */
    (cov_1v58qmgnh0().s[14]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[15]++;
    if (filters) {
      /* istanbul ignore next */
      cov_1v58qmgnh0().b[0][0]++;
      cov_1v58qmgnh0().s[16]++;
      Object.entries(filters).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_1v58qmgnh0().f[10]++;
        cov_1v58qmgnh0().s[17]++;
        if (
        /* istanbul ignore next */
        (cov_1v58qmgnh0().b[2][0]++, value !== undefined) &&
        /* istanbul ignore next */
        (cov_1v58qmgnh0().b[2][1]++, value !== null)) {
          /* istanbul ignore next */
          cov_1v58qmgnh0().b[1][0]++;
          cov_1v58qmgnh0().s[18]++;
          searchParams.append(key, value.toString());
        } else
        /* istanbul ignore next */
        {
          cov_1v58qmgnh0().b[1][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1v58qmgnh0().b[0][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1v58qmgnh0().s[19]++, await fetch(`/api/brands?${searchParams.toString()}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }));
    // Usar parsing seguro de JSON
    const result =
    /* istanbul ignore next */
    (cov_1v58qmgnh0().s[20]++, await (0, _jsonutils.safeApiResponseJson)(response));
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[4][0]++, !result) ||
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[4][1]++, !result.success) ||
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[4][2]++, !result.data)) {
      /* istanbul ignore next */
      cov_1v58qmgnh0().b[3][0]++;
      cov_1v58qmgnh0().s[22]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_1v58qmgnh0().b[5][0]++, result?.error) ||
      /* istanbul ignore next */
      (cov_1v58qmgnh0().b[5][1]++, 'Error parsing API response'));
    } else
    /* istanbul ignore next */
    {
      cov_1v58qmgnh0().b[3][1]++;
    }
    cov_1v58qmgnh0().s[23]++;
    return result.data;
  } catch (error) {
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[24]++;
    console.error('Error obteniendo marcas:', error);
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[25]++;
    throw error;
  }
}
async function getBrandStats() {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[11]++;
  cov_1v58qmgnh0().s[26]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_1v58qmgnh0().s[27]++, await fetch('/api/brands', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }));
    // Usar parsing seguro de JSON
    const result =
    /* istanbul ignore next */
    (cov_1v58qmgnh0().s[28]++, await (0, _jsonutils.safeApiResponseJson)(response));
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[7][0]++, !result) ||
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[7][1]++, !result.success) ||
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[7][2]++, !result.data)) {
      /* istanbul ignore next */
      cov_1v58qmgnh0().b[6][0]++;
      cov_1v58qmgnh0().s[30]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_1v58qmgnh0().b[8][0]++, result?.error) ||
      /* istanbul ignore next */
      (cov_1v58qmgnh0().b[8][1]++, 'Error parsing API response'));
    } else
    /* istanbul ignore next */
    {
      cov_1v58qmgnh0().b[6][1]++;
    }
    cov_1v58qmgnh0().s[31]++;
    return result.data;
  } catch (error) {
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[32]++;
    console.error('Error obteniendo estadísticas de marcas:', error);
    /* istanbul ignore next */
    cov_1v58qmgnh0().s[33]++;
    throw error;
  }
}
async function searchBrands(searchTerm) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[12]++;
  cov_1v58qmgnh0().s[34]++;
  return getBrands({
    search: searchTerm
  });
}
async function getPopularBrands(minProducts =
/* istanbul ignore next */
(cov_1v58qmgnh0().b[9][0]++, 3)) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[13]++;
  cov_1v58qmgnh0().s[35]++;
  return getBrands({
    minProducts
  });
}
async function getProductsByBrand(brandName, page =
/* istanbul ignore next */
(cov_1v58qmgnh0().b[10][0]++, 1), limit =
/* istanbul ignore next */
(cov_1v58qmgnh0().b[11][0]++, 12)) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[14]++;
  const searchParams =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[36]++, new URLSearchParams({
    brand: brandName,
    page: page.toString(),
    limit: limit.toString()
  }));
  const response =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[37]++, await fetch(`/api/products?${searchParams.toString()}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  }));
  // Usar parsing seguro de JSON
  const result =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[38]++, await (0, _jsonutils.safeApiResponseJson)(response));
  /* istanbul ignore next */
  cov_1v58qmgnh0().s[39]++;
  if (
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[13][0]++, !result) ||
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[13][1]++, !result.success) ||
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[13][2]++, !result.data)) {
    /* istanbul ignore next */
    cov_1v58qmgnh0().b[12][0]++;
    cov_1v58qmgnh0().s[40]++;
    throw new Error(
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[14][0]++, result?.error) ||
    /* istanbul ignore next */
    (cov_1v58qmgnh0().b[14][1]++, 'Error parsing API response'));
  } else
  /* istanbul ignore next */
  {
    cov_1v58qmgnh0().b[12][1]++;
  }
  cov_1v58qmgnh0().s[41]++;
  return result.data;
}
function formatBrandName(brandName) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[15]++;
  // Casos especiales de formato
  const specialCases =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[42]++, {
    'el galgo': 'El Galgo',
    'sherwin williams': 'Sherwin Williams',
    'genérico': 'Genérico',
    'akapol': 'Akapol',
    'plavicon': 'Plavicon',
    'sinteplast': 'Sinteplast',
    'petrilac': 'Petrilac'
  });
  const lowerCase =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[43]++, brandName.toLowerCase());
  /* istanbul ignore next */
  cov_1v58qmgnh0().s[44]++;
  return /* istanbul ignore next */(cov_1v58qmgnh0().b[15][0]++, specialCases[lowerCase]) ||
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[15][1]++, brandName);
}
function getBrandColor(brandName) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[16]++;
  const brandColors =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[45]++, {
    'El Galgo': '#FF6B35',
    'Sherwin Williams': '#0066CC',
    'Akapol': '#FF8C00',
    'Plavicon': '#228B22',
    'Sinteplast': '#8B4513',
    'Petrilac': '#4169E1',
    'Genérico': '#708090'
  });
  /* istanbul ignore next */
  cov_1v58qmgnh0().s[46]++;
  return /* istanbul ignore next */(cov_1v58qmgnh0().b[16][0]++, brandColors[formatBrandName(brandName)]) ||
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[16][1]++, '#6B7280');
}
function getBrandLogo(brandName) {
  /* istanbul ignore next */
  cov_1v58qmgnh0().f[17]++;
  const brandLogos =
  /* istanbul ignore next */
  (cov_1v58qmgnh0().s[47]++, {
    'El Galgo': '/images/brands/el-galgo.png',
    'Sherwin Williams': '/images/brands/sherwin-williams.png',
    'Akapol': '/images/brands/akapol.png',
    'Plavicon': '/images/brands/plavicon.png',
    'Sinteplast': '/images/brands/sinteplast.png',
    'Petrilac': '/images/brands/petrilac.png',
    'Genérico': '/images/brands/generic.png'
  });
  /* istanbul ignore next */
  cov_1v58qmgnh0().s[48]++;
  return /* istanbul ignore next */(cov_1v58qmgnh0().b[17][0]++, brandLogos[formatBrandName(brandName)]) ||
  /* istanbul ignore next */
  (cov_1v58qmgnh0().b[17][1]++, '/images/brands/default.png');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,