{"version":3,"names":["formatBrandName","cov_1v58qmgnh0","f","s","getBrandColor","getBrandLogo","getBrandStats","getBrands","getPopularBrands","getProductsByBrand","searchBrands","filters","searchParams","URLSearchParams","b","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","method","headers","result","_jsonutils","safeApiResponseJson","success","data","Error","error","console","searchTerm","search","minProducts","brandName","page","limit","brand","specialCases","lowerCase","toLowerCase","brandColors","brandLogos"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\brands.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA MARCAS\r\n// ===================================\r\n\r\nimport { ApiResponse } from '@/types/api';\r\nimport { Brand, BrandFilters } from '@/app/api/brands/route';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// Re-exportar tipos para uso en el frontend\r\nexport type { Brand, BrandFilters };\r\n\r\n// ===================================\r\n// FUNCIONES PARA EL FRONTEND\r\n// ===================================\r\n\r\n/**\r\n * Obtiene todas las marcas disponibles desde la API\r\n * @param filters - Filtros de marcas\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function getBrands(filters?: BrandFilters): Promise<ApiResponse<Brand[]>> {\r\n  try {\r\n    const searchParams = new URLSearchParams();\r\n    \r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          searchParams.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    const response = await fetch(`/api/brands?${searchParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<Brand[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error obteniendo marcas:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas detalladas de marcas\r\n * @returns Promise<ApiResponse<BrandStats[]>>\r\n */\r\nexport async function getBrandStats(): Promise<ApiResponse<any[]>> {\r\n  try {\r\n    const response = await fetch('/api/brands', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Usar parsing seguro de JSON\r\n    const result = await safeApiResponseJson<ApiResponse<any[]>>(response);\r\n\r\n    if (!result || !result.success || !result.data) {\r\n      throw new Error(result?.error || 'Error parsing API response');\r\n    }\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error obteniendo estadísticas de marcas:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Busca marcas por término de búsqueda\r\n * @param searchTerm - Término de búsqueda\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function searchBrands(searchTerm: string): Promise<ApiResponse<Brand[]>> {\r\n  return getBrands({\r\n    search: searchTerm,\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene marcas populares (con más productos)\r\n * @param minProducts - Mínimo número de productos\r\n * @returns Promise<ApiResponse<Brand[]>>\r\n */\r\nexport async function getPopularBrands(minProducts: number = 3): Promise<ApiResponse<Brand[]>> {\r\n  return getBrands({\r\n    minProducts,\r\n  });\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES HELPER\r\n// ===================================\r\n\r\n/**\r\n * Obtiene productos por marca usando la API de productos\r\n * @param brandName - Nombre de la marca\r\n * @param page - Página\r\n * @param limit - Límite de resultados\r\n */\r\nexport async function getProductsByBrand(\r\n  brandName: string,\r\n  page: number = 1,\r\n  limit: number = 12\r\n) {\r\n  const searchParams = new URLSearchParams({\r\n    brand: brandName,\r\n    page: page.toString(),\r\n    limit: limit.toString(),\r\n  });\r\n\r\n  const response = await fetch(`/api/products?${searchParams.toString()}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  // Usar parsing seguro de JSON\r\n  const result = await safeApiResponseJson(response);\r\n\r\n  if (!result || !result.success || !result.data) {\r\n    throw new Error(result?.error || 'Error parsing API response');\r\n  }\r\n\r\n  return result.data;\r\n}\r\n\r\n/**\r\n * Formatea el nombre de marca para mostrar\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Nombre formateado\r\n */\r\nexport function formatBrandName(brandName: string): string {\r\n  // Casos especiales de formato\r\n  const specialCases: Record<string, string> = {\r\n    'el galgo': 'El Galgo',\r\n    'sherwin williams': 'Sherwin Williams',\r\n    'genérico': 'Genérico',\r\n    'akapol': 'Akapol',\r\n    'plavicon': 'Plavicon',\r\n    'sinteplast': 'Sinteplast',\r\n    'petrilac': 'Petrilac',\r\n  };\r\n\r\n  const lowerCase = brandName.toLowerCase();\r\n  return specialCases[lowerCase] || brandName;\r\n}\r\n\r\n/**\r\n * Obtiene el color asociado a una marca (para UI)\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Color en formato CSS\r\n */\r\nexport function getBrandColor(brandName: string): string {\r\n  const brandColors: Record<string, string> = {\r\n    'El Galgo': '#FF6B35',\r\n    'Sherwin Williams': '#0066CC',\r\n    'Akapol': '#FF8C00',\r\n    'Plavicon': '#228B22',\r\n    'Sinteplast': '#8B4513',\r\n    'Petrilac': '#4169E1',\r\n    'Genérico': '#708090',\r\n  };\r\n\r\n  return brandColors[formatBrandName(brandName)] || '#6B7280';\r\n}\r\n\r\n/**\r\n * Obtiene el logo/icono de una marca\r\n * @param brandName - Nombre de la marca\r\n * @returns string - Ruta del logo o icono por defecto\r\n */\r\nexport function getBrandLogo(brandName: string): string {\r\n  const brandLogos: Record<string, string> = {\r\n    'El Galgo': '/images/brands/el-galgo.png',\r\n    'Sherwin Williams': '/images/brands/sherwin-williams.png',\r\n    'Akapol': '/images/brands/akapol.png',\r\n    'Plavicon': '/images/brands/plavicon.png',\r\n    'Sinteplast': '/images/brands/sinteplast.png',\r\n    'Petrilac': '/images/brands/petrilac.png',\r\n    'Genérico': '/images/brands/generic.png',\r\n  };\r\n\r\n  return brandLogos[formatBrandName(brandName)] || '/images/brands/default.png';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}