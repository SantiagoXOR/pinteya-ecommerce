{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\admin\\useOrdersCache.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - USEORDERSCACHE TESTS\r\n// Tests completos para el hook de cache de órdenes\r\n// ===================================\r\n\r\nimport { renderHook, act } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\r\nimport { useOrdersCache } from '@/hooks/admin/useOrdersCache';\r\n\r\n// ===================================\r\n// MOCKS Y SETUP\r\n// ===================================\r\n\r\n// Mock de localStorage\r\nconst mockLocalStorage = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn(),\r\n};\r\n\r\nObject.defineProperty(window, 'localStorage', {\r\n  value: mockLocalStorage,\r\n  writable: true,\r\n});\r\n\r\n// Mock de Date para tests determinísticos\r\nconst mockDate = new Date('2025-01-01T12:00:00.000Z');\r\njest.useFakeTimers();\r\njest.setSystemTime(mockDate);\r\n\r\n// Datos de prueba\r\nconst mockOrdersData = {\r\n  orders: [\r\n    { id: '1', order_number: 'ORD-001', status: 'pending', total: 100 },\r\n    { id: '2', order_number: 'ORD-002', status: 'confirmed', total: 200 },\r\n  ],\r\n  pagination: { page: 1, totalPages: 5, hasNextPage: true },\r\n  analytics: { totalOrders: 2, totalRevenue: 300 }\r\n};\r\n\r\nconst mockFilters = {\r\n  page: 1,\r\n  limit: 20,\r\n  status: 'pending',\r\n  search: 'test'\r\n};\r\n\r\nconst mockCacheOptions = {\r\n  enableCache: true,\r\n  cacheTimeout: 300000, // 5 minutos\r\n  maxSize: 50,\r\n  cleanupInterval: 600000, // 10 minutos\r\n  minRequestInterval: 1000 // 1 segundo\r\n};\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockLocalStorage.getItem.mockReturnValue(null);\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS PRINCIPALES\r\n// ===================================\r\n\r\ndescribe('useOrdersCache', () => {\r\n  it('debe inicializarse correctamente', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    expect(result.current.getCachedData).toBeDefined();\r\n    expect(result.current.setCachedData).toBeDefined();\r\n    expect(result.current.clearCache).toBeDefined();\r\n    expect(result.current.isRequestTooRecent).toBeDefined();\r\n    expect(result.current.getCacheStats).toBeDefined();\r\n    expect(typeof result.current.getCachedData).toBe('function');\r\n    expect(typeof result.current.setCachedData).toBe('function');\r\n    expect(typeof result.current.clearCache).toBe('function');\r\n    expect(typeof result.current.isRequestTooRecent).toBe('function');\r\n    expect(typeof result.current.getCacheStats).toBe('function');\r\n  });\r\n\r\n  it('debe retornar null cuando no hay datos en cache', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    const cachedData = result.current.getCachedData(mockFilters);\r\n    expect(cachedData).toBeNull();\r\n  });\r\n\r\n  it('debe guardar datos en cache correctamente', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Verificar que se guardó en el cache interno (no localStorage en esta implementación)\r\n    const cachedData = result.current.getCachedData(mockFilters);\r\n    expect(cachedData).toEqual(mockOrdersData);\r\n  });\r\n\r\n  it('debe recuperar datos del cache cuando están disponibles y son válidos', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Primero guardar datos\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Luego recuperar\r\n    const cachedData = result.current.getCachedData(mockFilters);\r\n    expect(cachedData).toEqual(mockOrdersData);\r\n  });\r\n\r\n  it('debe retornar null cuando los datos del cache están expirados', () => {\r\n    // Usar opciones con timeout muy corto para simular expiración\r\n    const shortTimeoutOptions = { ...mockCacheOptions, cacheTimeout: 100 };\r\n    const { result } = renderHook(() => useOrdersCache(shortTimeoutOptions));\r\n\r\n    // Guardar datos\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Simular paso del tiempo\r\n    jest.advanceTimersByTime(200);\r\n\r\n    // Los datos deben estar expirados\r\n    const cachedData = result.current.getCachedData(mockFilters);\r\n    expect(cachedData).toBeNull();\r\n  });\r\n\r\n  it('debe limpiar cache correctamente', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Guardar algunos datos\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Verificar que están en cache\r\n    expect(result.current.getCachedData(mockFilters)).toEqual(mockOrdersData);\r\n\r\n    // Limpiar cache\r\n    act(() => {\r\n      result.current.clearCache();\r\n    });\r\n\r\n    // Verificar que se limpiaron\r\n    expect(result.current.getCachedData(mockFilters)).toBeNull();\r\n  });\r\n\r\n  it('debe limpiar todo el cache cuando se llama clearCache', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Guardar múltiples entradas en cache\r\n    const filters1 = { ...mockFilters, page: 1 };\r\n    const filters2 = { ...mockFilters, page: 2 };\r\n\r\n    act(() => {\r\n      result.current.setCachedData(filters1, mockOrdersData);\r\n      result.current.setCachedData(filters2, mockOrdersData);\r\n    });\r\n\r\n    // Verificar que están en cache\r\n    expect(result.current.getCachedData(filters1)).toEqual(mockOrdersData);\r\n    expect(result.current.getCachedData(filters2)).toEqual(mockOrdersData);\r\n\r\n    // Limpiar todo el cache\r\n    act(() => {\r\n      result.current.clearCache();\r\n    });\r\n\r\n    // Verificar que se limpiaron todas las entradas\r\n    expect(result.current.getCachedData(filters1)).toBeNull();\r\n    expect(result.current.getCachedData(filters2)).toBeNull();\r\n  });\r\n\r\n  it('debe detectar requests demasiado recientes (anti-spam)', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Simular un request reciente guardando datos\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Inmediatamente después, debe detectar que es demasiado reciente\r\n    const isTooRecent = result.current.isRequestTooRecent(mockFilters);\r\n    expect(isTooRecent).toBe(true);\r\n  });\r\n\r\n  it('debe permitir requests cuando ha pasado suficiente tiempo', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Simular un request y luego avanzar el tiempo\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Avanzar tiempo más allá del intervalo mínimo\r\n    jest.advanceTimersByTime(2000);\r\n\r\n    const isTooRecent = result.current.isRequestTooRecent(mockFilters);\r\n    expect(isTooRecent).toBe(false);\r\n  });\r\n\r\n  it('debe manejar cache stats correctamente', () => {\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Verificar stats iniciales\r\n    const initialStats = result.current.getCacheStats();\r\n    expect(initialStats.size).toBe(0);\r\n    expect(initialStats.maxSize).toBeGreaterThan(0);\r\n\r\n    // Agregar datos al cache\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // Verificar que las stats se actualizaron\r\n    const updatedStats = result.current.getCacheStats();\r\n    expect(updatedStats.size).toBe(1);\r\n  });\r\n\r\n  it('debe manejar filtros con valores undefined/null', () => {\r\n    const filtersWithNulls = {\r\n      page: 1,\r\n      limit: 20,\r\n      status: undefined,\r\n      search: null\r\n    };\r\n\r\n    const { result } = renderHook(() => useOrdersCache(mockCacheOptions));\r\n\r\n    // Debe poder guardar y recuperar datos con filtros que tienen valores null/undefined\r\n    act(() => {\r\n      result.current.setCachedData(filtersWithNulls, mockOrdersData);\r\n    });\r\n\r\n    const cachedData = result.current.getCachedData(filtersWithNulls);\r\n    expect(cachedData).toEqual(mockOrdersData);\r\n  });\r\n\r\n  it('debe manejar múltiples entradas en cache', () => {\r\n    const { result } = renderHook(() => useOrdersCache());\r\n\r\n    // Agregar múltiples entradas al cache\r\n    const filters1 = { ...mockFilters, page: 1 };\r\n    const filters2 = { ...mockFilters, page: 2 };\r\n    const filters3 = { ...mockFilters, page: 3 };\r\n\r\n    act(() => {\r\n      result.current.setCachedData(filters1, mockOrdersData);\r\n      result.current.setCachedData(filters2, mockOrdersData);\r\n      result.current.setCachedData(filters3, mockOrdersData);\r\n    });\r\n\r\n    // Verificar que todas las entradas están en cache\r\n    expect(result.current.getCachedData(filters1)).toEqual(mockOrdersData);\r\n    expect(result.current.getCachedData(filters2)).toEqual(mockOrdersData);\r\n    expect(result.current.getCachedData(filters3)).toEqual(mockOrdersData);\r\n\r\n    // Verificar stats\r\n    const stats = result.current.getCacheStats();\r\n    expect(stats.size).toBe(3);\r\n  });\r\n\r\n  it('debe manejar cache deshabilitado', () => {\r\n    const disabledCacheOptions = { ...mockCacheOptions, enableCache: false };\r\n    const { result } = renderHook(() => useOrdersCache(disabledCacheOptions));\r\n\r\n    // Intentar guardar datos\r\n    act(() => {\r\n      result.current.setCachedData(mockFilters, mockOrdersData);\r\n    });\r\n\r\n    // No debe retornar datos cuando el cache está deshabilitado\r\n    const cachedData = result.current.getCachedData(mockFilters);\r\n    expect(cachedData).toBeNull();\r\n\r\n    // Las stats deben mostrar cache vacío\r\n    const stats = result.current.getCacheStats();\r\n    expect(stats.size).toBe(0);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockLocalStorage","getItem","jest","fn","setItem","removeItem","clear","Object","defineProperty","window","value","writable","mockDate","Date","useFakeTimers","setSystemTime","mockOrdersData","orders","id","order_number","status","total","pagination","page","totalPages","hasNextPage","analytics","totalOrders","totalRevenue","mockFilters","limit","search","mockCacheOptions","enableCache","cacheTimeout","maxSize","cleanupInterval","minRequestInterval","beforeEach","clearAllMocks","mockReturnValue","afterEach","clearAllTimers","describe","it","result","renderHook","useOrdersCache","expect","current","getCachedData","toBeDefined","setCachedData","clearCache","isRequestTooRecent","getCacheStats","toBe","cachedData","toBeNull","act","toEqual","shortTimeoutOptions","advanceTimersByTime","filters1","filters2","isTooRecent","initialStats","size","toBeGreaterThan","updatedStats","filtersWithNulls","undefined","filters3","stats","disabledCacheOptions"],"mappings":"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"}