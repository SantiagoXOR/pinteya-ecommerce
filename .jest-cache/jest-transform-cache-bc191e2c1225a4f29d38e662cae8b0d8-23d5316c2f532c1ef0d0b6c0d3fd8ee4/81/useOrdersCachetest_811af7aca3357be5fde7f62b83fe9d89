32f456dd18b0c66ae7fdf911c870a850
// ===================================
// PINTEYA E-COMMERCE - USEORDERSCACHE TESTS
// Tests completos para el hook de cache de órdenes
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersCache = require("../../../hooks/admin/useOrdersCache");
// ===================================
// MOCKS Y SETUP
// ===================================
// Mock de localStorage
const mockLocalStorage = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: mockLocalStorage,
    writable: true
});
// Mock de Date para tests determinísticos
const mockDate = new Date('2025-01-01T12:00:00.000Z');
_globals.jest.useFakeTimers();
_globals.jest.setSystemTime(mockDate);
// Datos de prueba
const mockOrdersData = {
    orders: [
        {
            id: '1',
            order_number: 'ORD-001',
            status: 'pending',
            total: 100
        },
        {
            id: '2',
            order_number: 'ORD-002',
            status: 'confirmed',
            total: 200
        }
    ],
    pagination: {
        page: 1,
        totalPages: 5,
        hasNextPage: true
    },
    analytics: {
        totalOrders: 2,
        totalRevenue: 300
    }
};
const mockFilters = {
    page: 1,
    limit: 20,
    status: 'pending',
    search: 'test'
};
const mockCacheOptions = {
    enableCache: true,
    cacheTimeout: 300000,
    maxSize: 50,
    cleanupInterval: 600000,
    minRequestInterval: 1000 // 1 segundo
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockLocalStorage.getItem.mockReturnValue(null);
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS PRINCIPALES
// ===================================
(0, _globals.describe)('useOrdersCache', ()=>{
    (0, _globals.it)('debe inicializarse correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        (0, _globals.expect)(result.current.getCachedData).toBeDefined();
        (0, _globals.expect)(result.current.setCachedData).toBeDefined();
        (0, _globals.expect)(result.current.clearCache).toBeDefined();
        (0, _globals.expect)(result.current.isRequestTooRecent).toBeDefined();
        (0, _globals.expect)(result.current.getCacheStats).toBeDefined();
        (0, _globals.expect)(typeof result.current.getCachedData).toBe('function');
        (0, _globals.expect)(typeof result.current.setCachedData).toBe('function');
        (0, _globals.expect)(typeof result.current.clearCache).toBe('function');
        (0, _globals.expect)(typeof result.current.isRequestTooRecent).toBe('function');
        (0, _globals.expect)(typeof result.current.getCacheStats).toBe('function');
    });
    (0, _globals.it)('debe retornar null cuando no hay datos en cache', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        const cachedData = result.current.getCachedData(mockFilters);
        (0, _globals.expect)(cachedData).toBeNull();
    });
    (0, _globals.it)('debe guardar datos en cache correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Verificar que se guardó en el cache interno (no localStorage en esta implementación)
        const cachedData = result.current.getCachedData(mockFilters);
        (0, _globals.expect)(cachedData).toEqual(mockOrdersData);
    });
    (0, _globals.it)('debe recuperar datos del cache cuando están disponibles y son válidos', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Primero guardar datos
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Luego recuperar
        const cachedData = result.current.getCachedData(mockFilters);
        (0, _globals.expect)(cachedData).toEqual(mockOrdersData);
    });
    (0, _globals.it)('debe retornar null cuando los datos del cache están expirados', ()=>{
        // Usar opciones con timeout muy corto para simular expiración
        const shortTimeoutOptions = {
            ...mockCacheOptions,
            cacheTimeout: 100
        };
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(shortTimeoutOptions));
        // Guardar datos
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Simular paso del tiempo
        _globals.jest.advanceTimersByTime(200);
        // Los datos deben estar expirados
        const cachedData = result.current.getCachedData(mockFilters);
        (0, _globals.expect)(cachedData).toBeNull();
    });
    (0, _globals.it)('debe limpiar cache correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Guardar algunos datos
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Verificar que están en cache
        (0, _globals.expect)(result.current.getCachedData(mockFilters)).toEqual(mockOrdersData);
        // Limpiar cache
        (0, _react.act)(()=>{
            result.current.clearCache();
        });
        // Verificar que se limpiaron
        (0, _globals.expect)(result.current.getCachedData(mockFilters)).toBeNull();
    });
    (0, _globals.it)('debe limpiar todo el cache cuando se llama clearCache', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Guardar múltiples entradas en cache
        const filters1 = {
            ...mockFilters,
            page: 1
        };
        const filters2 = {
            ...mockFilters,
            page: 2
        };
        (0, _react.act)(()=>{
            result.current.setCachedData(filters1, mockOrdersData);
            result.current.setCachedData(filters2, mockOrdersData);
        });
        // Verificar que están en cache
        (0, _globals.expect)(result.current.getCachedData(filters1)).toEqual(mockOrdersData);
        (0, _globals.expect)(result.current.getCachedData(filters2)).toEqual(mockOrdersData);
        // Limpiar todo el cache
        (0, _react.act)(()=>{
            result.current.clearCache();
        });
        // Verificar que se limpiaron todas las entradas
        (0, _globals.expect)(result.current.getCachedData(filters1)).toBeNull();
        (0, _globals.expect)(result.current.getCachedData(filters2)).toBeNull();
    });
    (0, _globals.it)('debe detectar requests demasiado recientes (anti-spam)', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Simular un request reciente guardando datos
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Inmediatamente después, debe detectar que es demasiado reciente
        const isTooRecent = result.current.isRequestTooRecent(mockFilters);
        (0, _globals.expect)(isTooRecent).toBe(true);
    });
    (0, _globals.it)('debe permitir requests cuando ha pasado suficiente tiempo', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Simular un request y luego avanzar el tiempo
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Avanzar tiempo más allá del intervalo mínimo
        _globals.jest.advanceTimersByTime(2000);
        const isTooRecent = result.current.isRequestTooRecent(mockFilters);
        (0, _globals.expect)(isTooRecent).toBe(false);
    });
    (0, _globals.it)('debe manejar cache stats correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Verificar stats iniciales
        const initialStats = result.current.getCacheStats();
        (0, _globals.expect)(initialStats.size).toBe(0);
        (0, _globals.expect)(initialStats.maxSize).toBeGreaterThan(0);
        // Agregar datos al cache
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // Verificar que las stats se actualizaron
        const updatedStats = result.current.getCacheStats();
        (0, _globals.expect)(updatedStats.size).toBe(1);
    });
    (0, _globals.it)('debe manejar filtros con valores undefined/null', ()=>{
        const filtersWithNulls = {
            page: 1,
            limit: 20,
            status: undefined,
            search: null
        };
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(mockCacheOptions));
        // Debe poder guardar y recuperar datos con filtros que tienen valores null/undefined
        (0, _react.act)(()=>{
            result.current.setCachedData(filtersWithNulls, mockOrdersData);
        });
        const cachedData = result.current.getCachedData(filtersWithNulls);
        (0, _globals.expect)(cachedData).toEqual(mockOrdersData);
    });
    (0, _globals.it)('debe manejar múltiples entradas en cache', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)());
        // Agregar múltiples entradas al cache
        const filters1 = {
            ...mockFilters,
            page: 1
        };
        const filters2 = {
            ...mockFilters,
            page: 2
        };
        const filters3 = {
            ...mockFilters,
            page: 3
        };
        (0, _react.act)(()=>{
            result.current.setCachedData(filters1, mockOrdersData);
            result.current.setCachedData(filters2, mockOrdersData);
            result.current.setCachedData(filters3, mockOrdersData);
        });
        // Verificar que todas las entradas están en cache
        (0, _globals.expect)(result.current.getCachedData(filters1)).toEqual(mockOrdersData);
        (0, _globals.expect)(result.current.getCachedData(filters2)).toEqual(mockOrdersData);
        (0, _globals.expect)(result.current.getCachedData(filters3)).toEqual(mockOrdersData);
        // Verificar stats
        const stats = result.current.getCacheStats();
        (0, _globals.expect)(stats.size).toBe(3);
    });
    (0, _globals.it)('debe manejar cache deshabilitado', ()=>{
        const disabledCacheOptions = {
            ...mockCacheOptions,
            enableCache: false
        };
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersCache.useOrdersCache)(disabledCacheOptions));
        // Intentar guardar datos
        (0, _react.act)(()=>{
            result.current.setCachedData(mockFilters, mockOrdersData);
        });
        // No debe retornar datos cuando el cache está deshabilitado
        const cachedData = result.current.getCachedData(mockFilters);
        (0, _globals.expect)(cachedData).toBeNull();
        // Las stats deben mostrar cache vacío
        const stats = result.current.getCacheStats();
        (0, _globals.expect)(stats.size).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;base64,