{"version":3,"names":["cov_9pglkml6o","actualCoverage","s","GET","f","POST","runtime","AddressSchema","_zod","z","object","street","string","min","number","apartment","optional","neighborhood","city","state","postal_code","country","default","latitude","longitude","reference","CreateShipmentSchema","order_id","positive","carrier_id","shipping_service","nativeEnum","_logistics","ShippingService","items","array","order_item_id","product_id","quantity","weight_kg","pickup_address","delivery_address","dimensions_cm","regex","special_instructions","max","notes","estimated_delivery_date","datetime","GetShipmentsSchema","page","coerce","limit","status","ShipmentStatus","carrier","date_from","date_to","search","order_by","enum","order_direction","validateAdminAuth","request","session","_config","auth","user","b","_server","NextResponse","json","error","adminEmails","includes","email","generateShipmentNumber","date","Date","dateStr","toISOString","slice","replace","randomStr","Math","random","toString","substring","toUpperCase","validateOrderExists","supabase","orderId","data","from","select","eq","single","createShipmentItems","shipmentId","shipmentItems","map","item","shipment_id","insert","authError","searchParams","URL","url","queryParams","Object","fromEntries","entries","validatedParams","parse","_server1","createClient","query","count","gte","lte","or","isNaN","Number","order","ascending","offset","range","shipments","totalPages","ceil","response","pagination","total","total_pages","has_next","has_prev","console","ZodError","details","errors","reduce","acc","err","path","join","message","Error","body","validatedData","orderExists","shipmentNumber","shipment","shipmentError","shipment_number","id","completeShipment","fetchError","description","occurred_at"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\shipments\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTIÓN DE ENVÍOS ENTERPRISE\r\n// Endpoints: GET/POST /api/admin/logistics/shipments\r\n// Descripción: CRUD completo de envíos con validación\r\n// Basado en: Patrones Spree Commerce + WooCommerce\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { z } from 'zod';\r\nimport { \r\n  CreateShipmentRequest, \r\n  GetShipmentsRequest,\r\n  Shipment,\r\n  PaginatedResponse,\r\n  ShipmentStatus,\r\n  ShippingService \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACIÓN ZOD\r\n// =====================================================\r\n\r\nconst AddressSchema = z.object({\r\n  street: z.string().min(1, 'Calle es requerida'),\r\n  number: z.string().min(1, 'Número es requerido'),\r\n  apartment: z.string().optional(),\r\n  neighborhood: z.string().min(1, 'Barrio es requerido'),\r\n  city: z.string().min(1, 'Ciudad es requerida'),\r\n  state: z.string().min(1, 'Provincia es requerida'),\r\n  postal_code: z.string().min(4, 'Código postal debe tener al menos 4 caracteres'),\r\n  country: z.string().default('Argentina'),\r\n  latitude: z.number().optional(),\r\n  longitude: z.number().optional(),\r\n  reference: z.string().optional()\r\n});\r\n\r\nconst CreateShipmentSchema = z.object({\r\n  order_id: z.number().positive('ID de orden debe ser positivo'),\r\n  carrier_id: z.number().positive().optional(),\r\n  shipping_service: z.nativeEnum(ShippingService),\r\n  items: z.array(z.object({\r\n    order_item_id: z.number().positive().optional(),\r\n    product_id: z.number().positive('ID de producto es requerido'),\r\n    quantity: z.number().positive('Cantidad debe ser positiva'),\r\n    weight_kg: z.number().positive().optional()\r\n  })).min(1, 'Debe incluir al menos un item'),\r\n  pickup_address: AddressSchema.optional(),\r\n  delivery_address: AddressSchema,\r\n  weight_kg: z.number().positive().optional(),\r\n  dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH (ej: 30x20x15)').optional(),\r\n  special_instructions: z.string().max(500).optional(),\r\n  notes: z.string().max(1000).optional(),\r\n  estimated_delivery_date: z.string().datetime().optional()\r\n});\r\n\r\nconst GetShipmentsSchema = z.object({\r\n  page: z.coerce.number().positive().default(1),\r\n  limit: z.coerce.number().positive().max(100).default(20),\r\n  status: z.nativeEnum(ShipmentStatus).optional(),\r\n  carrier: z.string().optional(),\r\n  date_from: z.string().datetime().optional(),\r\n  date_to: z.string().datetime().optional(),\r\n  search: z.string().optional(),\r\n  order_by: z.enum(['created_at', 'updated_at', 'estimated_delivery_date']).default('created_at'),\r\n  order_direction: z.enum(['asc', 'desc']).default('desc')\r\n});\r\n\r\n// =====================================================\r\n// MIDDLEWARE DE AUTENTICACIÓN\r\n// =====================================================\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'Unauthorized' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  // Verificar rol de administrador usando el email\r\n  const adminEmails = ['santiago@xor.com.ar'];\r\n  if (!adminEmails.includes(session.user.email || '')) {\r\n    return NextResponse.json(\r\n      { error: 'Insufficient permissions' },\r\n      { status: 403 }\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction generateShipmentNumber(): string {\r\n  const date = new Date();\r\n  const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '');\r\n  const randomStr = Math.random().toString(36).substring(2, 8).toUpperCase();\r\n  return `SH${dateStr}${randomStr}`;\r\n}\r\n\r\nasync function validateOrderExists(supabase: any, orderId: number): Promise<boolean> {\r\n  const { data, error } = await supabase\r\n    .from('orders')\r\n    .select('id')\r\n    .eq('id', orderId)\r\n    .single();\r\n  \r\n  return !error && data;\r\n}\r\n\r\nasync function createShipmentItems(\r\n  supabase: any, \r\n  shipmentId: number, \r\n  items: CreateShipmentRequest['items']\r\n): Promise<void> {\r\n  const shipmentItems = items.map(item => ({\r\n    shipment_id: shipmentId,\r\n    order_item_id: item.order_item_id,\r\n    product_id: item.product_id,\r\n    quantity: item.quantity,\r\n    weight_kg: item.weight_kg\r\n  }));\r\n  \r\n  const { error } = await supabase\r\n    .from('shipment_items')\r\n    .insert(shipmentItems);\r\n  \r\n  if (error) {throw error;}\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER ENVÍOS CON FILTROS Y PAGINACIÓN\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const queryParams = Object.fromEntries(searchParams.entries());\r\n    \r\n    const validatedParams = GetShipmentsSchema.parse(queryParams);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Construir query base\r\n    let query = supabase\r\n      .from('shipments')\r\n      .select(`\r\n        *,\r\n        carrier:couriers(id, name, code),\r\n        items:shipment_items(\r\n          id, quantity, weight_kg,\r\n          product:products(id, name, slug, images)\r\n        )\r\n      `, { count: 'exact' });\r\n    \r\n    // Aplicar filtros\r\n    if (validatedParams.status) {\r\n      query = query.eq('status', validatedParams.status);\r\n    }\r\n    \r\n    if (validatedParams.carrier) {\r\n      query = query.eq('couriers.code', validatedParams.carrier);\r\n    }\r\n    \r\n    if (validatedParams.date_from) {\r\n      query = query.gte('created_at', validatedParams.date_from);\r\n    }\r\n    \r\n    if (validatedParams.date_to) {\r\n      query = query.lte('created_at', validatedParams.date_to);\r\n    }\r\n    \r\n    if (validatedParams.search) {\r\n      query = query.or(`\r\n        shipment_number.ilike.%${validatedParams.search}%,\r\n        tracking_number.ilike.%${validatedParams.search}%,\r\n        order_id.eq.${isNaN(Number(validatedParams.search)) ? 0 : validatedParams.search}\r\n      `);\r\n    }\r\n    \r\n    // Aplicar ordenamiento\r\n    query = query.order(\r\n      validatedParams.order_by, \r\n      { ascending: validatedParams.order_direction === 'asc' }\r\n    );\r\n    \r\n    // Aplicar paginación\r\n    const offset = (validatedParams.page - 1) * validatedParams.limit;\r\n    query = query.range(offset, offset + validatedParams.limit - 1);\r\n    \r\n    // Ejecutar query\r\n    const { data: shipments, error, count } = await query;\r\n    \r\n    if (error) {throw error;}\r\n    \r\n    // Construir respuesta paginada\r\n    const totalPages = Math.ceil((count || 0) / validatedParams.limit);\r\n    \r\n    const response: PaginatedResponse<Shipment> = {\r\n      data: shipments || [],\r\n      pagination: {\r\n        page: validatedParams.page,\r\n        limit: validatedParams.limit,\r\n        total: count || 0,\r\n        total_pages: totalPages,\r\n        has_next: validatedParams.page < totalPages,\r\n        has_prev: validatedParams.page > 1\r\n      }\r\n    };\r\n    \r\n    return NextResponse.json(response);\r\n    \r\n  } catch (error) {\r\n    console.error('Error in GET shipments API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR NUEVO ENVÍO\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar autenticación\r\n    const authError = await validateAdminAuth(request);\r\n    if (authError) {return authError;}\r\n    \r\n    // Parsear y validar body\r\n    const body = await request.json();\r\n    const validatedData = CreateShipmentSchema.parse(body);\r\n    \r\n    // Crear cliente Supabase\r\n    const supabase = await createClient();\r\n    \r\n    // Validar que la orden existe\r\n    const orderExists = await validateOrderExists(supabase, validatedData.order_id);\r\n    if (!orderExists) {\r\n      return NextResponse.json(\r\n        { error: 'Order not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Generar número de envío único\r\n    const shipmentNumber = generateShipmentNumber();\r\n    \r\n    // Crear el envío\r\n    const { data: shipment, error: shipmentError } = await supabase\r\n      .from('shipments')\r\n      .insert({\r\n        shipment_number: shipmentNumber,\r\n        order_id: validatedData.order_id,\r\n        status: 'pending',\r\n        carrier_id: validatedData.carrier_id,\r\n        shipping_service: validatedData.shipping_service,\r\n        pickup_address: validatedData.pickup_address,\r\n        delivery_address: validatedData.delivery_address,\r\n        weight_kg: validatedData.weight_kg,\r\n        dimensions_cm: validatedData.dimensions_cm,\r\n        special_instructions: validatedData.special_instructions,\r\n        notes: validatedData.notes,\r\n        estimated_delivery_date: validatedData.estimated_delivery_date\r\n      })\r\n      .select(`\r\n        *,\r\n        carrier:couriers(id, name, code)\r\n      `)\r\n      .single();\r\n    \r\n    if (shipmentError) {throw shipmentError;}\r\n    \r\n    // Crear los items del envío\r\n    await createShipmentItems(supabase, shipment.id, validatedData.items);\r\n    \r\n    // Obtener el envío completo con items\r\n    const { data: completeShipment, error: fetchError } = await supabase\r\n      .from('shipments')\r\n      .select(`\r\n        *,\r\n        carrier:couriers(id, name, code),\r\n        items:shipment_items(\r\n          id, quantity, weight_kg,\r\n          product:products(id, name, slug, images)\r\n        )\r\n      `)\r\n      .eq('id', shipment.id)\r\n      .single();\r\n    \r\n    if (fetchError) {throw fetchError;}\r\n    \r\n    // Crear evento de tracking inicial\r\n    await supabase\r\n      .from('tracking_events')\r\n      .insert({\r\n        shipment_id: shipment.id,\r\n        status: 'pending',\r\n        description: 'Envío creado y pendiente de confirmación',\r\n        occurred_at: new Date().toISOString()\r\n      });\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        data: completeShipment,\r\n        message: 'Shipment created successfully'\r\n      },\r\n      { status: 201 }\r\n    );\r\n    \r\n  } catch (error) {\r\n    console.error('Error in POST shipments API:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation error',\r\n          details: error.errors.reduce((acc, err) => {\r\n            acc[err.path.join('.')] = [err.message];\r\n            return acc;\r\n          }, {} as Record<string, string[]>)\r\n        },\r\n        { status: 422 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}