{"version":3,"names":["RedisCache","cov_1lr17wi2px","f","s","cleanupRateLimitKeys","closeRedisConnection","enterpriseRateLimit","getRateLimitInfo","getRateLimitStats","getRedisClient","incrementRateLimit","isRedisAvailable","redis","redisCache","slidingWindowRateLimit","REDIS_CONFIG","host","b","process","env","REDIS_HOST","port","parseInt","REDIS_PORT","password","REDIS_PASSWORD","db","REDIS_DB","retryDelayOnFailover","maxRetriesPerRequest","lazyConnect","keepAlive","connectTimeout","commandTimeout","MockRedis","get","key","storage","set","value","args","del","existed","has","delete","exists","incr","current","newValue","toString","expire","seconds","keys","pattern","regex","RegExp","replace","Array","from","filter","test","flushall","clear","lpush","values","list","unshift","length","ltrim","start","stop","trimmed","slice","lrange","ttl","pipeline","MockPipeline","connect","console","log","disconnect","on","event","callback","quit","Map","constructor","commands","push","method","exec","results","command","result","error","redisClient","isUsingMock","DISABLE_REDIS","_ioredis","default","_logger","logger","info","LogCategory","API","warn","message","client","ping","ttlSeconds","setex","countResult","ttlResult","count","windowSeconds","isNewWindow","windowMs","maxRequests","now","Date","window","Math","floor","redisKey","ceil","remaining","max","resetTime","allowed","retryAfter","undefined","debug","precision","windowSize","currentWindow","i","oldWindow","currentKey","windowKey","totalCount","countResults","totalKeys","activeWindows","topKeys","forEach","keyStats","sort","a","stat","ttlResults","expiredKeys"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\redis\\index.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - REDIS CONFIGURATION\r\n// ===================================\r\n\r\nimport Redis from 'ioredis';\r\nimport { logger, LogLevel, LogCategory } from '../../enterprise/logger';\r\n\r\n// Configuración de Redis\r\nconst REDIS_CONFIG = {\r\n  host: process.env.REDIS_HOST || 'localhost',\r\n  port: parseInt(process.env.REDIS_PORT || '6379'),\r\n  password: process.env.REDIS_PASSWORD,\r\n  db: parseInt(process.env.REDIS_DB || '0'),\r\n  retryDelayOnFailover: 100,\r\n  maxRetriesPerRequest: 3,\r\n  lazyConnect: true,\r\n  keepAlive: 30000,\r\n  connectTimeout: 10000,\r\n  commandTimeout: 5000,\r\n};\r\n\r\n// Mock Redis para desarrollo cuando Redis no está disponible\r\nclass MockRedis {\r\n  private storage = new Map<string, any>();\r\n\r\n  async get(key: string): Promise<string | null> {\r\n    return this.storage.get(key) || null;\r\n  }\r\n\r\n  async set(key: string, value: any, ...args: any[]): Promise<'OK'> {\r\n    this.storage.set(key, value);\r\n    return 'OK';\r\n  }\r\n\r\n  async del(key: string): Promise<number> {\r\n    const existed = this.storage.has(key);\r\n    this.storage.delete(key);\r\n    return existed ? 1 : 0;\r\n  }\r\n\r\n  async exists(key: string): Promise<number> {\r\n    return this.storage.has(key) ? 1 : 0;\r\n  }\r\n\r\n  async incr(key: string): Promise<number> {\r\n    const current = parseInt(this.storage.get(key) || '0');\r\n    const newValue = current + 1;\r\n    this.storage.set(key, newValue.toString());\r\n    return newValue;\r\n  }\r\n\r\n  async expire(key: string, seconds: number): Promise<number> {\r\n    // Mock: no implementamos expiración real\r\n    return 1;\r\n  }\r\n\r\n  async keys(pattern: string): Promise<string[]> {\r\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\r\n    return Array.from(this.storage.keys()).filter(key => regex.test(key));\r\n  }\r\n\r\n  async flushall(): Promise<'OK'> {\r\n    this.storage.clear();\r\n    return 'OK';\r\n  }\r\n\r\n  // Métodos de listas para métricas\r\n  async lpush(key: string, ...values: string[]): Promise<number> {\r\n    const list = this.storage.get(key) || [];\r\n    list.unshift(...values);\r\n    this.storage.set(key, list);\r\n    return list.length;\r\n  }\r\n\r\n  async ltrim(key: string, start: number, stop: number): Promise<'OK'> {\r\n    const list = this.storage.get(key) || [];\r\n    const trimmed = list.slice(start, stop + 1);\r\n    this.storage.set(key, trimmed);\r\n    return 'OK';\r\n  }\r\n\r\n  async lrange(key: string, start: number, stop: number): Promise<string[]> {\r\n    const list = this.storage.get(key) || [];\r\n    if (stop === -1) {\r\n      return list.slice(start);\r\n    }\r\n    return list.slice(start, stop + 1);\r\n  }\r\n\r\n  async ttl(key: string): Promise<number> {\r\n    // Mock: retornar -1 (sin expiración) o un valor fijo\r\n    return this.storage.has(key) ? 3600 : -2;\r\n  }\r\n\r\n  // Pipeline mock para operaciones batch\r\n  pipeline(): MockPipeline {\r\n    return new MockPipeline(this);\r\n  }\r\n\r\n  // Métodos de conexión mock\r\n  async connect(): Promise<void> {\r\n    console.log('[REDIS MOCK] Conectado (simulado)');\r\n  }\r\n\r\n  disconnect(): void {\r\n    console.log('[REDIS MOCK] Desconectado (simulado)');\r\n  }\r\n\r\n  on(event: string, callback: Function): this {\r\n    return this;\r\n  }\r\n\r\n  async quit(): Promise<'OK'> {\r\n    console.log('[REDIS MOCK] Desconectado (quit simulado)');\r\n    return 'OK';\r\n  }\r\n}\r\n\r\n// Mock Pipeline para operaciones batch\r\nclass MockPipeline {\r\n  private commands: Array<{ method: string; args: any[] }> = [];\r\n  private redis: MockRedis;\r\n\r\n  constructor(redis: MockRedis) {\r\n    this.redis = redis;\r\n  }\r\n\r\n  get(key: string): this {\r\n    this.commands.push({ method: 'get', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  ttl(key: string): this {\r\n    this.commands.push({ method: 'ttl', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  incr(key: string): this {\r\n    this.commands.push({ method: 'incr', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  expire(key: string, seconds: number): this {\r\n    this.commands.push({ method: 'expire', args: [key, seconds] });\r\n    return this;\r\n  }\r\n\r\n  async exec(): Promise<Array<[Error | null, any]>> {\r\n    const results: Array<[Error | null, any]> = [];\r\n\r\n    for (const command of this.commands) {\r\n      try {\r\n        const result = await (this.redis as any)[command.method](...command.args);\r\n        results.push([null, result]);\r\n      } catch (error) {\r\n        results.push([error as Error, null]);\r\n      }\r\n    }\r\n\r\n    this.commands = []; // Limpiar comandos después de ejecutar\r\n    return results;\r\n  }\r\n}\r\n\r\n// Cliente Redis singleton\r\nlet redisClient: Redis | MockRedis | null = null;\r\nlet isUsingMock = false;\r\n\r\n/**\r\n * Obtiene o crea la instancia de Redis\r\n */\r\nexport function getRedisClient(): Redis | MockRedis {\r\n  if (!redisClient) {\r\n    // Verificar si Redis está deshabilitado\r\n    if (process.env.DISABLE_REDIS === 'true') {\r\n      console.log('[REDIS] Redis deshabilitado por configuración, usando mock');\r\n      redisClient = new MockRedis();\r\n      isUsingMock = true;\r\n      return redisClient;\r\n    }\r\n\r\n    try {\r\n      redisClient = new Redis(REDIS_CONFIG);\r\n\r\n      // Event listeners para logging\r\n      redisClient.on('connect', () => {\r\n        logger.info(LogCategory.API, 'Redis connected successfully');\r\n        isUsingMock = false;\r\n      });\r\n\r\n      redisClient.on('error', (error) => {\r\n        logger.error(LogCategory.API, 'Redis connection error', error);\r\n        // Si hay error de conexión, usar mock\r\n        if (!isUsingMock) {\r\n          console.log('[REDIS] Cambiando a modo mock debido a error de conexión');\r\n          redisClient = new MockRedis();\r\n          isUsingMock = true;\r\n        }\r\n      });\r\n\r\n      redisClient.on('close', () => {\r\n        logger.warn(LogCategory.API, 'Redis connection closed');\r\n      });\r\n\r\n      redisClient.on('reconnecting', () => {\r\n        logger.info(LogCategory.API, 'Redis reconnecting...');\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log('[REDIS] Error inicializando Redis, usando mock:', error.message);\r\n      redisClient = new MockRedis();\r\n      isUsingMock = true;\r\n    }\r\n  }\r\n\r\n  return redisClient;\r\n}\r\n\r\n/**\r\n * Verifica si Redis está disponible\r\n */\r\nexport async function isRedisAvailable(): Promise<boolean> {\r\n  try {\r\n    if (isUsingMock) {\r\n      return false; // Mock no es Redis real\r\n    }\r\n    const client = getRedisClient();\r\n    if (client instanceof MockRedis) {\r\n      return false;\r\n    }\r\n    await (client as Redis).ping();\r\n    return true;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Redis health check failed', error as Error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la conexión de Redis\r\n */\r\nexport async function closeRedisConnection(): Promise<void> {\r\n  if (redisClient) {\r\n    await redisClient.quit();\r\n    redisClient = null;\r\n    logger.info(LogCategory.API, 'Redis connection closed gracefully');\r\n  }\r\n}\r\n\r\n/**\r\n * Operaciones de cache con manejo de errores\r\n */\r\nexport class RedisCache {\r\n  private client: Redis;\r\n\r\n  constructor() {\r\n    this.client = getRedisClient();\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cache\r\n   */\r\n  async get(key: string): Promise<string | null> {\r\n    try {\r\n      const value = await this.client.get(key);\r\n      logger.info(LogCategory.API, 'Cache get operation');\r\n      return value;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache get operation failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cache\r\n   */\r\n  async set(key: string, value: string, ttlSeconds?: number): Promise<boolean> {\r\n    try {\r\n      if (ttlSeconds) {\r\n        await this.client.setex(key, ttlSeconds, value);\r\n      } else {\r\n        await this.client.set(key, value);\r\n      }\r\n      \r\n      logger.info(LogCategory.API, 'Cache set operation');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache set operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un valor del cache\r\n   */\r\n  async del(key: string): Promise<boolean> {\r\n    try {\r\n      const result = await this.client.del(key);\r\n      logger.info(LogCategory.API, 'Cache delete operation');\r\n      return result > 0;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache delete operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Incrementa un contador atómicamente\r\n   */\r\n  async incr(key: string): Promise<number | null> {\r\n    try {\r\n      const result = await this.client.incr(key);\r\n      logger.info(LogCategory.API, 'Cache increment operation');\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache increment operation failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece TTL para una clave existente\r\n   */\r\n  async expire(key: string, ttlSeconds: number): Promise<boolean> {\r\n    try {\r\n      const result = await this.client.expire(key, ttlSeconds);\r\n      logger.info(LogCategory.API, 'Cache expire operation');\r\n      return result === 1;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache expire operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene TTL restante de una clave\r\n   */\r\n  async ttl(key: string): Promise<number | null> {\r\n    try {\r\n      const result = await this.client.ttl(key);\r\n      logger.info(LogCategory.API, 'Cache TTL check');\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache TTL check failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del cache\r\nexport const redisCache = new RedisCache();\r\n\r\n// Funciones de utilidad para rate limiting\r\nexport async function getRateLimitInfo(key: string): Promise<{\r\n  count: number;\r\n  ttl: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const pipeline = client.pipeline();\r\n    pipeline.get(key);\r\n    pipeline.ttl(key);\r\n    \r\n    const results = await pipeline.exec();\r\n    \r\n    if (!results || results.length !== 2) {\r\n      return null;\r\n    }\r\n\r\n    const [countResult, ttlResult] = results;\r\n    const count = parseInt(countResult[1] as string) || 0;\r\n    const ttl = ttlResult[1] as number;\r\n\r\n    return { count, ttl };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit info retrieval failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function incrementRateLimit(key: string, windowSeconds: number): Promise<{\r\n  count: number;\r\n  ttl: number;\r\n  isNewWindow: boolean;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const pipeline = client.pipeline();\r\n\r\n    // Incrementar contador\r\n    pipeline.incr(key);\r\n    // Establecer TTL solo si es la primera vez\r\n    pipeline.expire(key, windowSeconds);\r\n    // Obtener TTL actual\r\n    pipeline.ttl(key);\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results || results.length !== 3) {\r\n      return null;\r\n    }\r\n\r\n    const count = results[0][1] as number;\r\n    const ttl = results[2][1] as number;\r\n    const isNewWindow = count === 1;\r\n\r\n    return { count, ttl, isNewWindow };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit increment failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES ENTERPRISE PARA RATE LIMITING\r\n// =====================================================\r\n\r\n/**\r\n * Rate limiting enterprise con sliding window\r\n */\r\nexport async function enterpriseRateLimit(\r\n  key: string,\r\n  windowMs: number,\r\n  maxRequests: number\r\n): Promise<{\r\n  allowed: boolean;\r\n  count: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n  retryAfter?: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const now = Date.now();\r\n    const window = Math.floor(now / windowMs);\r\n    const redisKey = `rate_limit:${key}:${window}`;\r\n\r\n    // Usar pipeline para operaciones atómicas\r\n    const pipeline = client.pipeline();\r\n    pipeline.incr(redisKey);\r\n    pipeline.expire(redisKey, Math.ceil(windowMs / 1000));\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results || results.length !== 2) {\r\n      return null;\r\n    }\r\n\r\n    const count = results[0][1] as number;\r\n    const remaining = Math.max(0, maxRequests - count);\r\n    const resetTime = (window + 1) * windowMs;\r\n    const allowed = count <= maxRequests;\r\n\r\n    const result = {\r\n      allowed,\r\n      count,\r\n      remaining,\r\n      resetTime,\r\n      retryAfter: allowed ? undefined : Math.ceil((resetTime - now) / 1000)\r\n    };\r\n\r\n    logger.debug(LogCategory.API, 'Enterprise rate limit check', {\r\n      key: redisKey,\r\n      count,\r\n      maxRequests,\r\n      allowed,\r\n      remaining\r\n    });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Enterprise rate limit failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Rate limiting con múltiples ventanas (más preciso)\r\n */\r\nexport async function slidingWindowRateLimit(\r\n  key: string,\r\n  windowMs: number,\r\n  maxRequests: number,\r\n  precision: number = 10\r\n): Promise<{\r\n  allowed: boolean;\r\n  count: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const now = Date.now();\r\n    const windowSize = Math.floor(windowMs / precision);\r\n    const currentWindow = Math.floor(now / windowSize);\r\n\r\n    // Limpiar ventanas antiguas y contar requests en ventana actual\r\n    const pipeline = client.pipeline();\r\n\r\n    // Eliminar ventanas más antiguas que el período de rate limiting\r\n    for (let i = 1; i <= precision; i++) {\r\n      const oldWindow = currentWindow - precision - i;\r\n      pipeline.del(`${key}:${oldWindow}`);\r\n    }\r\n\r\n    // Incrementar contador para ventana actual\r\n    const currentKey = `${key}:${currentWindow}`;\r\n    pipeline.incr(currentKey);\r\n    pipeline.expire(currentKey, Math.ceil(windowMs / 1000));\r\n\r\n    // Obtener contadores de todas las ventanas en el período\r\n    for (let i = 0; i < precision; i++) {\r\n      const windowKey = `${key}:${currentWindow - i}`;\r\n      pipeline.get(windowKey);\r\n    }\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results) {\r\n      return null;\r\n    }\r\n\r\n    // Calcular total de requests en la ventana deslizante\r\n    let totalCount = 0;\r\n    const countResults = results.slice(precision + 2); // Saltar operaciones de limpieza e incremento\r\n\r\n    for (const result of countResults) {\r\n      if (result[1]) {\r\n        totalCount += parseInt(result[1] as string);\r\n      }\r\n    }\r\n\r\n    const remaining = Math.max(0, maxRequests - totalCount);\r\n    const allowed = totalCount <= maxRequests;\r\n    const resetTime = (currentWindow + 1) * windowSize;\r\n\r\n    return {\r\n      allowed,\r\n      count: totalCount,\r\n      remaining,\r\n      resetTime\r\n    };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Sliding window rate limit failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtener estadísticas de rate limiting\r\n */\r\nexport async function getRateLimitStats(pattern: string = 'rate_limit:*'): Promise<{\r\n  totalKeys: number;\r\n  activeWindows: number;\r\n  topKeys: Array<{ key: string; count: number; ttl: number }>;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const keys = await client.keys(pattern);\r\n\r\n    if (keys.length === 0) {\r\n      return {\r\n        totalKeys: 0,\r\n        activeWindows: 0,\r\n        topKeys: []\r\n      };\r\n    }\r\n\r\n    // Obtener información de las claves más activas\r\n    const pipeline = client.pipeline();\r\n    keys.forEach(key => {\r\n      pipeline.get(key);\r\n      pipeline.ttl(key);\r\n    });\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results) {\r\n      return null;\r\n    }\r\n\r\n    const keyStats: Array<{ key: string; count: number; ttl: number }> = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const countResult = results[i * 2];\r\n      const ttlResult = results[i * 2 + 1];\r\n\r\n      if (countResult[1] && ttlResult[1]) {\r\n        keyStats.push({\r\n          key: keys[i],\r\n          count: parseInt(countResult[1] as string),\r\n          ttl: ttlResult[1] as number\r\n        });\r\n      }\r\n    }\r\n\r\n    // Ordenar por count descendente\r\n    keyStats.sort((a, b) => b.count - a.count);\r\n\r\n    return {\r\n      totalKeys: keys.length,\r\n      activeWindows: keyStats.filter(stat => stat.ttl > 0).length,\r\n      topKeys: keyStats.slice(0, 10) // Top 10\r\n    };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit stats failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Limpiar claves de rate limiting expiradas\r\n */\r\nexport async function cleanupRateLimitKeys(pattern: string = 'rate_limit:*'): Promise<number> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const keys = await client.keys(pattern);\r\n\r\n    if (keys.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Verificar TTL de cada clave y eliminar las expiradas\r\n    const pipeline = client.pipeline();\r\n    keys.forEach(key => {\r\n      pipeline.ttl(key);\r\n    });\r\n\r\n    const ttlResults = await pipeline.exec();\r\n\r\n    if (!ttlResults) {\r\n      return 0;\r\n    }\r\n\r\n    const expiredKeys: string[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const ttlResult = ttlResults[i];\r\n      if (ttlResult[1] === -2) { // Clave expirada\r\n        expiredKeys.push(keys[i]);\r\n      }\r\n    }\r\n\r\n    if (expiredKeys.length > 0) {\r\n      await client.del(...expiredKeys);\r\n      logger.info(LogCategory.API, `Cleaned up ${expiredKeys.length} expired rate limit keys`);\r\n    }\r\n\r\n    return expiredKeys.length;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit cleanup failed', error as Error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n// Exportar cliente Redis para uso directo\r\nexport const redis = getRedisClient();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}