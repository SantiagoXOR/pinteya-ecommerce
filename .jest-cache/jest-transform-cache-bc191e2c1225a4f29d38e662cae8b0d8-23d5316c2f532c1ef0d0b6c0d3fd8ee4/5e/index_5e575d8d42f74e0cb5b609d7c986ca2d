6f9473881ce8c0557ef26b92f7827a4f
// ===================================
// PINTEYA E-COMMERCE - REDIS CONFIGURATION
// ===================================
"use strict";

/* istanbul ignore next */
function cov_1lr17wi2px() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\redis\\index.ts";
  var hash = "f5443b98cc48d7d0f226d7ff84835bb2c9c59a9d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\redis\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 36
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 33
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 32
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 21
        }
      },
      "14": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 26
        }
      },
      "15": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "16": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 75
        }
      },
      "17": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "18": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 6
        }
      },
      "19": {
        start: {
          line: 60,
          column: 21
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "20": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 45
        }
      },
      "21": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "22": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 20
        }
      },
      "23": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 45
        }
      },
      "24": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 33
        }
      },
      "25": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 31
        }
      },
      "26": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 45
        }
      },
      "27": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "28": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 36
        }
      },
      "29": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "30": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "31": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "32": {
        start: {
          line: 100,
          column: 22
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "33": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 78
        }
      },
      "34": {
        start: {
          line: 101,
          column: 61
        },
        end: {
          line: 101,
          column: 76
        }
      },
      "35": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 29
        }
      },
      "36": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 20
        }
      },
      "37": {
        start: {
          line: 109,
          column: 21
        },
        end: {
          line: 109,
          column: 48
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 32
        }
      },
      "39": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "40": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 27
        }
      },
      "41": {
        start: {
          line: 115,
          column: 21
        },
        end: {
          line: 115,
          column: 48
        }
      },
      "42": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 51
        }
      },
      "43": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "44": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "45": {
        start: {
          line: 121,
          column: 21
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "47": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 37
        }
      },
      "48": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 43
        }
      },
      "49": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 49
        }
      },
      "50": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "51": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 57
        }
      },
      "52": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "53": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 20
        }
      },
      "54": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 65
        }
      },
      "55": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 20
        }
      },
      "56": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 33
        }
      },
      "57": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 27
        }
      },
      "58": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 27
        }
      },
      "59": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "60": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 20
        }
      },
      "61": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "62": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 20
        }
      },
      "63": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "64": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 20
        }
      },
      "65": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "66": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 20
        }
      },
      "67": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 26
        }
      },
      "68": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "69": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "70": {
        start: {
          line: 200,
          column: 31
        },
        end: {
          line: 200,
          column: 80
        }
      },
      "71": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 204,
          column: 19
        }
      },
      "72": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 209,
          column: 19
        }
      },
      "73": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 27
        }
      },
      "74": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 23
        }
      },
      "75": {
        start: {
          line: 217,
          column: 18
        },
        end: {
          line: 217,
          column: 22
        }
      },
      "76": {
        start: {
          line: 218,
          column: 18
        },
        end: {
          line: 218,
          column: 23
        }
      },
      "77": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "78": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "79": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 86
        }
      },
      "80": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 42
        }
      },
      "81": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 31
        }
      },
      "82": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 31
        }
      },
      "83": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "84": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 61
        }
      },
      "85": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 15
        }
      },
      "86": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 93
        }
      },
      "87": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 36
        }
      },
      "88": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "89": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 95
        }
      },
      "90": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "91": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 92
        }
      },
      "92": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 50
        }
      },
      "93": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 39
        }
      },
      "94": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "95": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 88
        }
      },
      "96": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "97": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 86
        }
      },
      "98": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 90
        }
      },
      "99": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 42
        }
      },
      "100": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 31
        }
      },
      "101": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 256,
          column: 23
        }
      },
      "102": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 272,
          column: 5
        }
      },
      "103": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "104": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 25
        }
      },
      "105": {
        start: {
          line: 263,
          column: 23
        },
        end: {
          line: 263,
          column: 39
        }
      },
      "106": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "107": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 25
        }
      },
      "108": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 28
        }
      },
      "109": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 20
        }
      },
      "110": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 90
        }
      },
      "111": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 21
        }
      },
      "112": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 279,
          column: 5
        }
      },
      "113": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 33
        }
      },
      "114": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 27
        }
      },
      "115": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 91
        }
      },
      "116": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 39
        }
      },
      "117": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "118": {
        start: {
          line: 289,
          column: 26
        },
        end: {
          line: 289,
          column: 52
        }
      },
      "119": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 80
        }
      },
      "120": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "121": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 95
        }
      },
      "122": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 24
        }
      },
      "123": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "124": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "125": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 64
        }
      },
      "126": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 50
        }
      },
      "127": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 80
        }
      },
      "128": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "129": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 95
        }
      },
      "130": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 25
        }
      },
      "131": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "132": {
        start: {
          line: 317,
          column: 27
        },
        end: {
          line: 317,
          column: 53
        }
      },
      "133": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 83
        }
      },
      "134": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 30
        }
      },
      "135": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 98
        }
      },
      "136": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 25
        }
      },
      "137": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "138": {
        start: {
          line: 329,
          column: 27
        },
        end: {
          line: 329,
          column: 54
        }
      },
      "139": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 86
        }
      },
      "140": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 26
        }
      },
      "141": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 101
        }
      },
      "142": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 24
        }
      },
      "143": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "144": {
        start: {
          line: 341,
          column: 27
        },
        end: {
          line: 341,
          column: 68
        }
      },
      "145": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 83
        }
      },
      "146": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 32
        }
      },
      "147": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 98
        }
      },
      "148": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 25
        }
      },
      "149": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "150": {
        start: {
          line: 353,
          column: 27
        },
        end: {
          line: 353,
          column: 53
        }
      },
      "151": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 76
        }
      },
      "152": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 26
        }
      },
      "153": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 91
        }
      },
      "154": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 24
        }
      },
      "155": {
        start: {
          line: 362,
          column: 19
        },
        end: {
          line: 362,
          column: 35
        }
      },
      "156": {
        start: {
          line: 364,
          column: 4
        },
        end: {
          line: 383,
          column: 5
        }
      },
      "157": {
        start: {
          line: 365,
          column: 23
        },
        end: {
          line: 365,
          column: 39
        }
      },
      "158": {
        start: {
          line: 366,
          column: 25
        },
        end: {
          line: 366,
          column: 42
        }
      },
      "159": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 26
        }
      },
      "160": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 368,
          column: 26
        }
      },
      "161": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 45
        }
      },
      "162": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "163": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 24
        }
      },
      "164": {
        start: {
          line: 373,
          column: 41
        },
        end: {
          line: 373,
          column: 48
        }
      },
      "165": {
        start: {
          line: 374,
          column: 22
        },
        end: {
          line: 374,
          column: 51
        }
      },
      "166": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 32
        }
      },
      "167": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 379,
          column: 10
        }
      },
      "168": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 97
        }
      },
      "169": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 20
        }
      },
      "170": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 410,
          column: 5
        }
      },
      "171": {
        start: {
          line: 387,
          column: 23
        },
        end: {
          line: 387,
          column: 39
        }
      },
      "172": {
        start: {
          line: 388,
          column: 25
        },
        end: {
          line: 388,
          column: 42
        }
      },
      "173": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 27
        }
      },
      "174": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 44
        }
      },
      "175": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 26
        }
      },
      "176": {
        start: {
          line: 395,
          column: 24
        },
        end: {
          line: 395,
          column: 45
        }
      },
      "177": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "178": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 24
        }
      },
      "179": {
        start: {
          line: 399,
          column: 22
        },
        end: {
          line: 399,
          column: 35
        }
      },
      "180": {
        start: {
          line: 400,
          column: 20
        },
        end: {
          line: 400,
          column: 33
        }
      },
      "181": {
        start: {
          line: 401,
          column: 28
        },
        end: {
          line: 401,
          column: 39
        }
      },
      "182": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 406,
          column: 10
        }
      },
      "183": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 92
        }
      },
      "184": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 20
        }
      },
      "185": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 448,
          column: 5
        }
      },
      "186": {
        start: {
          line: 414,
          column: 23
        },
        end: {
          line: 414,
          column: 39
        }
      },
      "187": {
        start: {
          line: 415,
          column: 20
        },
        end: {
          line: 415,
          column: 30
        }
      },
      "188": {
        start: {
          line: 416,
          column: 23
        },
        end: {
          line: 416,
          column: 49
        }
      },
      "189": {
        start: {
          line: 417,
          column: 25
        },
        end: {
          line: 417,
          column: 54
        }
      },
      "190": {
        start: {
          line: 419,
          column: 25
        },
        end: {
          line: 419,
          column: 42
        }
      },
      "191": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 32
        }
      },
      "192": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 62
        }
      },
      "193": {
        start: {
          line: 422,
          column: 24
        },
        end: {
          line: 422,
          column: 45
        }
      },
      "194": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "195": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 24
        }
      },
      "196": {
        start: {
          line: 426,
          column: 22
        },
        end: {
          line: 426,
          column: 35
        }
      },
      "197": {
        start: {
          line: 427,
          column: 26
        },
        end: {
          line: 427,
          column: 58
        }
      },
      "198": {
        start: {
          line: 428,
          column: 26
        },
        end: {
          line: 428,
          column: 49
        }
      },
      "199": {
        start: {
          line: 429,
          column: 24
        },
        end: {
          line: 429,
          column: 44
        }
      },
      "200": {
        start: {
          line: 430,
          column: 23
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "201": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "202": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 22
        }
      },
      "203": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 93
        }
      },
      "204": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 447,
          column: 20
        }
      },
      "205": {
        start: {
          line: 451,
          column: 4
        },
        end: {
          line: 496,
          column: 5
        }
      },
      "206": {
        start: {
          line: 452,
          column: 23
        },
        end: {
          line: 452,
          column: 39
        }
      },
      "207": {
        start: {
          line: 453,
          column: 20
        },
        end: {
          line: 453,
          column: 30
        }
      },
      "208": {
        start: {
          line: 454,
          column: 27
        },
        end: {
          line: 454,
          column: 59
        }
      },
      "209": {
        start: {
          line: 455,
          column: 30
        },
        end: {
          line: 455,
          column: 58
        }
      },
      "210": {
        start: {
          line: 457,
          column: 25
        },
        end: {
          line: 457,
          column: 42
        }
      },
      "211": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "212": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 459,
          column: 21
        }
      },
      "213": {
        start: {
          line: 460,
          column: 30
        },
        end: {
          line: 460,
          column: 59
        }
      },
      "214": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 48
        }
      },
      "215": {
        start: {
          line: 464,
          column: 27
        },
        end: {
          line: 464,
          column: 52
        }
      },
      "216": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 34
        }
      },
      "217": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 64
        }
      },
      "218": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "219": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 468,
          column: 21
        }
      },
      "220": {
        start: {
          line: 469,
          column: 30
        },
        end: {
          line: 469,
          column: 59
        }
      },
      "221": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 36
        }
      },
      "222": {
        start: {
          line: 472,
          column: 24
        },
        end: {
          line: 472,
          column: 45
        }
      },
      "223": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "224": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 24
        }
      },
      "225": {
        start: {
          line: 477,
          column: 25
        },
        end: {
          line: 477,
          column: 26
        }
      },
      "226": {
        start: {
          line: 478,
          column: 29
        },
        end: {
          line: 478,
          column: 57
        }
      },
      "227": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 483,
          column: 9
        }
      },
      "228": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 482,
          column: 13
        }
      },
      "229": {
        start: {
          line: 481,
          column: 16
        },
        end: {
          line: 481,
          column: 50
        }
      },
      "230": {
        start: {
          line: 484,
          column: 26
        },
        end: {
          line: 484,
          column: 63
        }
      },
      "231": {
        start: {
          line: 485,
          column: 24
        },
        end: {
          line: 485,
          column: 49
        }
      },
      "232": {
        start: {
          line: 486,
          column: 26
        },
        end: {
          line: 486,
          column: 58
        }
      },
      "233": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 492,
          column: 10
        }
      },
      "234": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 97
        }
      },
      "235": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 20
        }
      },
      "236": {
        start: {
          line: 499,
          column: 4
        },
        end: {
          line: 541,
          column: 5
        }
      },
      "237": {
        start: {
          line: 500,
          column: 23
        },
        end: {
          line: 500,
          column: 39
        }
      },
      "238": {
        start: {
          line: 501,
          column: 21
        },
        end: {
          line: 501,
          column: 47
        }
      },
      "239": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "240": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 507,
          column: 14
        }
      },
      "241": {
        start: {
          line: 510,
          column: 25
        },
        end: {
          line: 510,
          column: 42
        }
      },
      "242": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 514,
          column: 11
        }
      },
      "243": {
        start: {
          line: 512,
          column: 12
        },
        end: {
          line: 512,
          column: 30
        }
      },
      "244": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 30
        }
      },
      "245": {
        start: {
          line: 515,
          column: 24
        },
        end: {
          line: 515,
          column: 45
        }
      },
      "246": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 518,
          column: 9
        }
      },
      "247": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 517,
          column: 24
        }
      },
      "248": {
        start: {
          line: 519,
          column: 25
        },
        end: {
          line: 519,
          column: 27
        }
      },
      "249": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 530,
          column: 9
        }
      },
      "250": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 21
        }
      },
      "251": {
        start: {
          line: 521,
          column: 32
        },
        end: {
          line: 521,
          column: 46
        }
      },
      "252": {
        start: {
          line: 522,
          column: 30
        },
        end: {
          line: 522,
          column: 48
        }
      },
      "253": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 529,
          column: 13
        }
      },
      "254": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 528,
          column: 19
        }
      },
      "255": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 532,
          column: 49
        }
      },
      "256": {
        start: {
          line: 532,
          column: 30
        },
        end: {
          line: 532,
          column: 47
        }
      },
      "257": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 537,
          column: 10
        }
      },
      "258": {
        start: {
          line: 535,
          column: 51
        },
        end: {
          line: 535,
          column: 63
        }
      },
      "259": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 88
        }
      },
      "260": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 540,
          column: 20
        }
      },
      "261": {
        start: {
          line: 544,
          column: 4
        },
        end: {
          line: 574,
          column: 5
        }
      },
      "262": {
        start: {
          line: 545,
          column: 23
        },
        end: {
          line: 545,
          column: 39
        }
      },
      "263": {
        start: {
          line: 546,
          column: 21
        },
        end: {
          line: 546,
          column: 47
        }
      },
      "264": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 549,
          column: 9
        }
      },
      "265": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 548,
          column: 21
        }
      },
      "266": {
        start: {
          line: 551,
          column: 25
        },
        end: {
          line: 551,
          column: 42
        }
      },
      "267": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 554,
          column: 11
        }
      },
      "268": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 30
        }
      },
      "269": {
        start: {
          line: 555,
          column: 27
        },
        end: {
          line: 555,
          column: 48
        }
      },
      "270": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 558,
          column: 9
        }
      },
      "271": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 21
        }
      },
      "272": {
        start: {
          line: 559,
          column: 28
        },
        end: {
          line: 559,
          column: 30
        }
      },
      "273": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 565,
          column: 9
        }
      },
      "274": {
        start: {
          line: 560,
          column: 20
        },
        end: {
          line: 560,
          column: 21
        }
      },
      "275": {
        start: {
          line: 561,
          column: 30
        },
        end: {
          line: 561,
          column: 43
        }
      },
      "276": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 564,
          column: 13
        }
      },
      "277": {
        start: {
          line: 563,
          column: 16
        },
        end: {
          line: 563,
          column: 42
        }
      },
      "278": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 569,
          column: 9
        }
      },
      "279": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 567,
          column: 45
        }
      },
      "280": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 568,
          column: 117
        }
      },
      "281": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 34
        }
      },
      "282": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 90
        }
      },
      "283": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 17
        }
      },
      "284": {
        start: {
          line: 576,
          column: 14
        },
        end: {
          line: 576,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 26
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 30
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 28
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 17
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 34
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "13": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 33
          }
        },
        loc: {
          start: {
            line: 54,
            column: 39
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 54
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 77
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 81
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 86
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 89
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 95
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 24
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 99
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 101,
            column: 54
          },
          end: {
            line: 101,
            column: 55
          }
        },
        loc: {
          start: {
            line: 101,
            column: 61
          },
          end: {
            line: 101,
            column: 76
          }
        },
        line: 101
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 21
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 103
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 32
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 108
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 34
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 114
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 35
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 120
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 19
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 127
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 15
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 132
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 136
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 17
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 139
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 142
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 17
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 145
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 17
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 149
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 155
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 13
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 159
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 13
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 168
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 14
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 177
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 25
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 186
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 17
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 196
      },
      "39": {
        name: "getRedisClient",
        decl: {
          start: {
            line: 219,
            column: 9
          },
          end: {
            line: 219,
            column: 23
          }
        },
        loc: {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 219
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 231,
            column: 38
          },
          end: {
            line: 231,
            column: 39
          }
        },
        loc: {
          start: {
            line: 231,
            column: 42
          },
          end: {
            line: 234,
            column: 13
          }
        },
        line: 231
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 235,
            column: 37
          }
        },
        loc: {
          start: {
            line: 235,
            column: 45
          },
          end: {
            line: 243,
            column: 13
          }
        },
        line: 235
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 244,
            column: 36
          },
          end: {
            line: 244,
            column: 37
          }
        },
        loc: {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 246,
            column: 13
          }
        },
        line: 244
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 247,
            column: 43
          },
          end: {
            line: 247,
            column: 44
          }
        },
        loc: {
          start: {
            line: 247,
            column: 47
          },
          end: {
            line: 249,
            column: 13
          }
        },
        line: 247
      },
      "44": {
        name: "isRedisAvailable",
        decl: {
          start: {
            line: 258,
            column: 15
          },
          end: {
            line: 258,
            column: 31
          }
        },
        loc: {
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 258
      },
      "45": {
        name: "closeRedisConnection",
        decl: {
          start: {
            line: 274,
            column: 15
          },
          end: {
            line: 274,
            column: 35
          }
        },
        loc: {
          start: {
            line: 274,
            column: 38
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 274
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 17
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 282
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 287,
            column: 6
          },
          end: {
            line: 287,
            column: 7
          }
        },
        loc: {
          start: {
            line: 287,
            column: 21
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 287
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 299,
            column: 6
          },
          end: {
            line: 299,
            column: 7
          }
        },
        loc: {
          start: {
            line: 299,
            column: 40
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 299
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 315,
            column: 6
          },
          end: {
            line: 315,
            column: 7
          }
        },
        loc: {
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 315
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 327,
            column: 6
          },
          end: {
            line: 327,
            column: 7
          }
        },
        loc: {
          start: {
            line: 327,
            column: 22
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 327
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 36
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 339
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 351,
            column: 6
          },
          end: {
            line: 351,
            column: 7
          }
        },
        loc: {
          start: {
            line: 351,
            column: 21
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 351
      },
      "53": {
        name: "getRateLimitInfo",
        decl: {
          start: {
            line: 363,
            column: 15
          },
          end: {
            line: 363,
            column: 31
          }
        },
        loc: {
          start: {
            line: 363,
            column: 37
          },
          end: {
            line: 384,
            column: 1
          }
        },
        line: 363
      },
      "54": {
        name: "incrementRateLimit",
        decl: {
          start: {
            line: 385,
            column: 15
          },
          end: {
            line: 385,
            column: 33
          }
        },
        loc: {
          start: {
            line: 385,
            column: 54
          },
          end: {
            line: 411,
            column: 1
          }
        },
        line: 385
      },
      "55": {
        name: "enterpriseRateLimit",
        decl: {
          start: {
            line: 412,
            column: 15
          },
          end: {
            line: 412,
            column: 34
          }
        },
        loc: {
          start: {
            line: 412,
            column: 63
          },
          end: {
            line: 449,
            column: 1
          }
        },
        line: 412
      },
      "56": {
        name: "slidingWindowRateLimit",
        decl: {
          start: {
            line: 450,
            column: 15
          },
          end: {
            line: 450,
            column: 37
          }
        },
        loc: {
          start: {
            line: 450,
            column: 82
          },
          end: {
            line: 497,
            column: 1
          }
        },
        line: 450
      },
      "57": {
        name: "getRateLimitStats",
        decl: {
          start: {
            line: 498,
            column: 15
          },
          end: {
            line: 498,
            column: 32
          }
        },
        loc: {
          start: {
            line: 498,
            column: 59
          },
          end: {
            line: 542,
            column: 1
          }
        },
        line: 498
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 511,
            column: 21
          },
          end: {
            line: 511,
            column: 22
          }
        },
        loc: {
          start: {
            line: 511,
            column: 28
          },
          end: {
            line: 514,
            column: 9
          }
        },
        line: 511
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 532,
            column: 22
          },
          end: {
            line: 532,
            column: 23
          }
        },
        loc: {
          start: {
            line: 532,
            column: 30
          },
          end: {
            line: 532,
            column: 47
          }
        },
        line: 532
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 535,
            column: 43
          },
          end: {
            line: 535,
            column: 44
          }
        },
        loc: {
          start: {
            line: 535,
            column: 51
          },
          end: {
            line: 535,
            column: 63
          }
        },
        line: 535
      },
      "61": {
        name: "cleanupRateLimitKeys",
        decl: {
          start: {
            line: 543,
            column: 15
          },
          end: {
            line: 543,
            column: 35
          }
        },
        loc: {
          start: {
            line: 543,
            column: 62
          },
          end: {
            line: 575,
            column: 1
          }
        },
        line: 543
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 552,
            column: 21
          },
          end: {
            line: 552,
            column: 22
          }
        },
        loc: {
          start: {
            line: 552,
            column: 28
          },
          end: {
            line: 554,
            column: 9
          }
        },
        line: 552
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 55,
            column: 11
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 38
          }
        }, {
          start: {
            line: 55,
            column: 41
          },
          end: {
            line: 57,
            column: 5
          }
        }],
        line: 55
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 11
          },
          end: {
            line: 55,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 11
          },
          end: {
            line: 55,
            column: 14
          }
        }, {
          start: {
            line: 55,
            column: 18
          },
          end: {
            line: 55,
            column: 32
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 10
          },
          end: {
            line: 61,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 10
          },
          end: {
            line: 61,
            column: 32
          }
        }, {
          start: {
            line: 61,
            column: 36
          },
          end: {
            line: 61,
            column: 47
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 19
          },
          end: {
            line: 62,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 19
          },
          end: {
            line: 62,
            column: 41
          }
        }, {
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 51
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 17
          },
          end: {
            line: 64,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 17
          },
          end: {
            line: 64,
            column: 37
          }
        }, {
          start: {
            line: 64,
            column: 41
          },
          end: {
            line: 64,
            column: 44
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 36
          }
        }, {
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 75,
            column: 44
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 84,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 84,
            column: 26
          }
        }, {
          start: {
            line: 84,
            column: 29
          },
          end: {
            line: 84,
            column: 30
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 87,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 39
          },
          end: {
            line: 87,
            column: 40
          }
        }, {
          start: {
            line: 87,
            column: 43
          },
          end: {
            line: 87,
            column: 44
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 33
          },
          end: {
            line: 90,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 33
          },
          end: {
            line: 90,
            column: 54
          }
        }, {
          start: {
            line: 90,
            column: 58
          },
          end: {
            line: 90,
            column: 61
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 21
          },
          end: {
            line: 109,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 21
          },
          end: {
            line: 109,
            column: 42
          }
        }, {
          start: {
            line: 109,
            column: 46
          },
          end: {
            line: 109,
            column: 48
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 42
          }
        }, {
          start: {
            line: 115,
            column: 46
          },
          end: {
            line: 115,
            column: 48
          }
        }],
        line: 115
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 42
          }
        }, {
          start: {
            line: 121,
            column: 46
          },
          end: {
            line: 121,
            column: 48
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 129,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 39
          },
          end: {
            line: 129,
            column: 43
          }
        }, {
          start: {
            line: 129,
            column: 46
          },
          end: {
            line: 129,
            column: 48
          }
        }],
        line: 129
      },
      "14": {
        loc: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "15": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "16": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "19": {
        loc: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 279,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "20": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        }, {
          start: {
            line: 303,
            column: 19
          },
          end: {
            line: 305,
            column: 13
          }
        }],
        line: 301
      },
      "21": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "22": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 370,
            column: 20
          }
        }, {
          start: {
            line: 370,
            column: 24
          },
          end: {
            line: 370,
            column: 44
          }
        }],
        line: 370
      },
      "23": {
        loc: {
          start: {
            line: 374,
            column: 22
          },
          end: {
            line: 374,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 22
          },
          end: {
            line: 374,
            column: 46
          }
        }, {
          start: {
            line: 374,
            column: 50
          },
          end: {
            line: 374,
            column: 51
          }
        }],
        line: 374
      },
      "24": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "25": {
        loc: {
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 396,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 396,
            column: 20
          }
        }, {
          start: {
            line: 396,
            column: 24
          },
          end: {
            line: 396,
            column: 44
          }
        }],
        line: 396
      },
      "26": {
        loc: {
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "27": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 423,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 423,
            column: 20
          }
        }, {
          start: {
            line: 423,
            column: 24
          },
          end: {
            line: 423,
            column: 44
          }
        }],
        line: 423
      },
      "28": {
        loc: {
          start: {
            line: 435,
            column: 24
          },
          end: {
            line: 435,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 34
          },
          end: {
            line: 435,
            column: 43
          }
        }, {
          start: {
            line: 435,
            column: 46
          },
          end: {
            line: 435,
            column: 81
          }
        }],
        line: 435
      },
      "29": {
        loc: {
          start: {
            line: 450,
            column: 66
          },
          end: {
            line: 450,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 450,
            column: 78
          },
          end: {
            line: 450,
            column: 80
          }
        }],
        line: 450
      },
      "30": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "31": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 482,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "32": {
        loc: {
          start: {
            line: 498,
            column: 33
          },
          end: {
            line: 498,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 498,
            column: 43
          },
          end: {
            line: 498,
            column: 57
          }
        }],
        line: 498
      },
      "33": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "34": {
        loc: {
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 518,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 518,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "35": {
        loc: {
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 529,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 529,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "36": {
        loc: {
          start: {
            line: 523,
            column: 16
          },
          end: {
            line: 523,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 16
          },
          end: {
            line: 523,
            column: 30
          }
        }, {
          start: {
            line: 523,
            column: 34
          },
          end: {
            line: 523,
            column: 46
          }
        }],
        line: 523
      },
      "37": {
        loc: {
          start: {
            line: 543,
            column: 36
          },
          end: {
            line: 543,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 543,
            column: 46
          },
          end: {
            line: 543,
            column: 60
          }
        }],
        line: 543
      },
      "38": {
        loc: {
          start: {
            line: 547,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 547,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 547
      },
      "39": {
        loc: {
          start: {
            line: 556,
            column: 8
          },
          end: {
            line: 558,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 556,
            column: 8
          },
          end: {
            line: 558,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 556
      },
      "40": {
        loc: {
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "41": {
        loc: {
          start: {
            line: 566,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 566,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 566
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\redis\\index.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - REDIS CONFIGURATION\r\n// ===================================\r\n\r\nimport Redis from 'ioredis';\r\nimport { logger, LogLevel, LogCategory } from '../../enterprise/logger';\r\n\r\n// Configuraci\xF3n de Redis\r\nconst REDIS_CONFIG = {\r\n  host: process.env.REDIS_HOST || 'localhost',\r\n  port: parseInt(process.env.REDIS_PORT || '6379'),\r\n  password: process.env.REDIS_PASSWORD,\r\n  db: parseInt(process.env.REDIS_DB || '0'),\r\n  retryDelayOnFailover: 100,\r\n  maxRetriesPerRequest: 3,\r\n  lazyConnect: true,\r\n  keepAlive: 30000,\r\n  connectTimeout: 10000,\r\n  commandTimeout: 5000,\r\n};\r\n\r\n// Mock Redis para desarrollo cuando Redis no est\xE1 disponible\r\nclass MockRedis {\r\n  private storage = new Map<string, any>();\r\n\r\n  async get(key: string): Promise<string | null> {\r\n    return this.storage.get(key) || null;\r\n  }\r\n\r\n  async set(key: string, value: any, ...args: any[]): Promise<'OK'> {\r\n    this.storage.set(key, value);\r\n    return 'OK';\r\n  }\r\n\r\n  async del(key: string): Promise<number> {\r\n    const existed = this.storage.has(key);\r\n    this.storage.delete(key);\r\n    return existed ? 1 : 0;\r\n  }\r\n\r\n  async exists(key: string): Promise<number> {\r\n    return this.storage.has(key) ? 1 : 0;\r\n  }\r\n\r\n  async incr(key: string): Promise<number> {\r\n    const current = parseInt(this.storage.get(key) || '0');\r\n    const newValue = current + 1;\r\n    this.storage.set(key, newValue.toString());\r\n    return newValue;\r\n  }\r\n\r\n  async expire(key: string, seconds: number): Promise<number> {\r\n    // Mock: no implementamos expiraci\xF3n real\r\n    return 1;\r\n  }\r\n\r\n  async keys(pattern: string): Promise<string[]> {\r\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\r\n    return Array.from(this.storage.keys()).filter(key => regex.test(key));\r\n  }\r\n\r\n  async flushall(): Promise<'OK'> {\r\n    this.storage.clear();\r\n    return 'OK';\r\n  }\r\n\r\n  // M\xE9todos de listas para m\xE9tricas\r\n  async lpush(key: string, ...values: string[]): Promise<number> {\r\n    const list = this.storage.get(key) || [];\r\n    list.unshift(...values);\r\n    this.storage.set(key, list);\r\n    return list.length;\r\n  }\r\n\r\n  async ltrim(key: string, start: number, stop: number): Promise<'OK'> {\r\n    const list = this.storage.get(key) || [];\r\n    const trimmed = list.slice(start, stop + 1);\r\n    this.storage.set(key, trimmed);\r\n    return 'OK';\r\n  }\r\n\r\n  async lrange(key: string, start: number, stop: number): Promise<string[]> {\r\n    const list = this.storage.get(key) || [];\r\n    if (stop === -1) {\r\n      return list.slice(start);\r\n    }\r\n    return list.slice(start, stop + 1);\r\n  }\r\n\r\n  async ttl(key: string): Promise<number> {\r\n    // Mock: retornar -1 (sin expiraci\xF3n) o un valor fijo\r\n    return this.storage.has(key) ? 3600 : -2;\r\n  }\r\n\r\n  // Pipeline mock para operaciones batch\r\n  pipeline(): MockPipeline {\r\n    return new MockPipeline(this);\r\n  }\r\n\r\n  // M\xE9todos de conexi\xF3n mock\r\n  async connect(): Promise<void> {\r\n    console.log('[REDIS MOCK] Conectado (simulado)');\r\n  }\r\n\r\n  disconnect(): void {\r\n    console.log('[REDIS MOCK] Desconectado (simulado)');\r\n  }\r\n\r\n  on(event: string, callback: Function): this {\r\n    return this;\r\n  }\r\n\r\n  async quit(): Promise<'OK'> {\r\n    console.log('[REDIS MOCK] Desconectado (quit simulado)');\r\n    return 'OK';\r\n  }\r\n}\r\n\r\n// Mock Pipeline para operaciones batch\r\nclass MockPipeline {\r\n  private commands: Array<{ method: string; args: any[] }> = [];\r\n  private redis: MockRedis;\r\n\r\n  constructor(redis: MockRedis) {\r\n    this.redis = redis;\r\n  }\r\n\r\n  get(key: string): this {\r\n    this.commands.push({ method: 'get', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  ttl(key: string): this {\r\n    this.commands.push({ method: 'ttl', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  incr(key: string): this {\r\n    this.commands.push({ method: 'incr', args: [key] });\r\n    return this;\r\n  }\r\n\r\n  expire(key: string, seconds: number): this {\r\n    this.commands.push({ method: 'expire', args: [key, seconds] });\r\n    return this;\r\n  }\r\n\r\n  async exec(): Promise<Array<[Error | null, any]>> {\r\n    const results: Array<[Error | null, any]> = [];\r\n\r\n    for (const command of this.commands) {\r\n      try {\r\n        const result = await (this.redis as any)[command.method](...command.args);\r\n        results.push([null, result]);\r\n      } catch (error) {\r\n        results.push([error as Error, null]);\r\n      }\r\n    }\r\n\r\n    this.commands = []; // Limpiar comandos despu\xE9s de ejecutar\r\n    return results;\r\n  }\r\n}\r\n\r\n// Cliente Redis singleton\r\nlet redisClient: Redis | MockRedis | null = null;\r\nlet isUsingMock = false;\r\n\r\n/**\r\n * Obtiene o crea la instancia de Redis\r\n */\r\nexport function getRedisClient(): Redis | MockRedis {\r\n  if (!redisClient) {\r\n    // Verificar si Redis est\xE1 deshabilitado\r\n    if (process.env.DISABLE_REDIS === 'true') {\r\n      console.log('[REDIS] Redis deshabilitado por configuraci\xF3n, usando mock');\r\n      redisClient = new MockRedis();\r\n      isUsingMock = true;\r\n      return redisClient;\r\n    }\r\n\r\n    try {\r\n      redisClient = new Redis(REDIS_CONFIG);\r\n\r\n      // Event listeners para logging\r\n      redisClient.on('connect', () => {\r\n        logger.info(LogCategory.API, 'Redis connected successfully');\r\n        isUsingMock = false;\r\n      });\r\n\r\n      redisClient.on('error', (error) => {\r\n        logger.error(LogCategory.API, 'Redis connection error', error);\r\n        // Si hay error de conexi\xF3n, usar mock\r\n        if (!isUsingMock) {\r\n          console.log('[REDIS] Cambiando a modo mock debido a error de conexi\xF3n');\r\n          redisClient = new MockRedis();\r\n          isUsingMock = true;\r\n        }\r\n      });\r\n\r\n      redisClient.on('close', () => {\r\n        logger.warn(LogCategory.API, 'Redis connection closed');\r\n      });\r\n\r\n      redisClient.on('reconnecting', () => {\r\n        logger.info(LogCategory.API, 'Redis reconnecting...');\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log('[REDIS] Error inicializando Redis, usando mock:', error.message);\r\n      redisClient = new MockRedis();\r\n      isUsingMock = true;\r\n    }\r\n  }\r\n\r\n  return redisClient;\r\n}\r\n\r\n/**\r\n * Verifica si Redis est\xE1 disponible\r\n */\r\nexport async function isRedisAvailable(): Promise<boolean> {\r\n  try {\r\n    if (isUsingMock) {\r\n      return false; // Mock no es Redis real\r\n    }\r\n    const client = getRedisClient();\r\n    if (client instanceof MockRedis) {\r\n      return false;\r\n    }\r\n    await (client as Redis).ping();\r\n    return true;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Redis health check failed', error as Error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la conexi\xF3n de Redis\r\n */\r\nexport async function closeRedisConnection(): Promise<void> {\r\n  if (redisClient) {\r\n    await redisClient.quit();\r\n    redisClient = null;\r\n    logger.info(LogCategory.API, 'Redis connection closed gracefully');\r\n  }\r\n}\r\n\r\n/**\r\n * Operaciones de cache con manejo de errores\r\n */\r\nexport class RedisCache {\r\n  private client: Redis;\r\n\r\n  constructor() {\r\n    this.client = getRedisClient();\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cache\r\n   */\r\n  async get(key: string): Promise<string | null> {\r\n    try {\r\n      const value = await this.client.get(key);\r\n      logger.info(LogCategory.API, 'Cache get operation');\r\n      return value;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache get operation failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cache\r\n   */\r\n  async set(key: string, value: string, ttlSeconds?: number): Promise<boolean> {\r\n    try {\r\n      if (ttlSeconds) {\r\n        await this.client.setex(key, ttlSeconds, value);\r\n      } else {\r\n        await this.client.set(key, value);\r\n      }\r\n      \r\n      logger.info(LogCategory.API, 'Cache set operation');\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache set operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un valor del cache\r\n   */\r\n  async del(key: string): Promise<boolean> {\r\n    try {\r\n      const result = await this.client.del(key);\r\n      logger.info(LogCategory.API, 'Cache delete operation');\r\n      return result > 0;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache delete operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Incrementa un contador at\xF3micamente\r\n   */\r\n  async incr(key: string): Promise<number | null> {\r\n    try {\r\n      const result = await this.client.incr(key);\r\n      logger.info(LogCategory.API, 'Cache increment operation');\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache increment operation failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece TTL para una clave existente\r\n   */\r\n  async expire(key: string, ttlSeconds: number): Promise<boolean> {\r\n    try {\r\n      const result = await this.client.expire(key, ttlSeconds);\r\n      logger.info(LogCategory.API, 'Cache expire operation');\r\n      return result === 1;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache expire operation failed', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene TTL restante de una clave\r\n   */\r\n  async ttl(key: string): Promise<number | null> {\r\n    try {\r\n      const result = await this.client.ttl(key);\r\n      logger.info(LogCategory.API, 'Cache TTL check');\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache TTL check failed', error as Error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del cache\r\nexport const redisCache = new RedisCache();\r\n\r\n// Funciones de utilidad para rate limiting\r\nexport async function getRateLimitInfo(key: string): Promise<{\r\n  count: number;\r\n  ttl: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const pipeline = client.pipeline();\r\n    pipeline.get(key);\r\n    pipeline.ttl(key);\r\n    \r\n    const results = await pipeline.exec();\r\n    \r\n    if (!results || results.length !== 2) {\r\n      return null;\r\n    }\r\n\r\n    const [countResult, ttlResult] = results;\r\n    const count = parseInt(countResult[1] as string) || 0;\r\n    const ttl = ttlResult[1] as number;\r\n\r\n    return { count, ttl };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit info retrieval failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function incrementRateLimit(key: string, windowSeconds: number): Promise<{\r\n  count: number;\r\n  ttl: number;\r\n  isNewWindow: boolean;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const pipeline = client.pipeline();\r\n\r\n    // Incrementar contador\r\n    pipeline.incr(key);\r\n    // Establecer TTL solo si es la primera vez\r\n    pipeline.expire(key, windowSeconds);\r\n    // Obtener TTL actual\r\n    pipeline.ttl(key);\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results || results.length !== 3) {\r\n      return null;\r\n    }\r\n\r\n    const count = results[0][1] as number;\r\n    const ttl = results[2][1] as number;\r\n    const isNewWindow = count === 1;\r\n\r\n    return { count, ttl, isNewWindow };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit increment failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES ENTERPRISE PARA RATE LIMITING\r\n// =====================================================\r\n\r\n/**\r\n * Rate limiting enterprise con sliding window\r\n */\r\nexport async function enterpriseRateLimit(\r\n  key: string,\r\n  windowMs: number,\r\n  maxRequests: number\r\n): Promise<{\r\n  allowed: boolean;\r\n  count: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n  retryAfter?: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const now = Date.now();\r\n    const window = Math.floor(now / windowMs);\r\n    const redisKey = `rate_limit:${key}:${window}`;\r\n\r\n    // Usar pipeline para operaciones at\xF3micas\r\n    const pipeline = client.pipeline();\r\n    pipeline.incr(redisKey);\r\n    pipeline.expire(redisKey, Math.ceil(windowMs / 1000));\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results || results.length !== 2) {\r\n      return null;\r\n    }\r\n\r\n    const count = results[0][1] as number;\r\n    const remaining = Math.max(0, maxRequests - count);\r\n    const resetTime = (window + 1) * windowMs;\r\n    const allowed = count <= maxRequests;\r\n\r\n    const result = {\r\n      allowed,\r\n      count,\r\n      remaining,\r\n      resetTime,\r\n      retryAfter: allowed ? undefined : Math.ceil((resetTime - now) / 1000)\r\n    };\r\n\r\n    logger.debug(LogCategory.API, 'Enterprise rate limit check', {\r\n      key: redisKey,\r\n      count,\r\n      maxRequests,\r\n      allowed,\r\n      remaining\r\n    });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Enterprise rate limit failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Rate limiting con m\xFAltiples ventanas (m\xE1s preciso)\r\n */\r\nexport async function slidingWindowRateLimit(\r\n  key: string,\r\n  windowMs: number,\r\n  maxRequests: number,\r\n  precision: number = 10\r\n): Promise<{\r\n  allowed: boolean;\r\n  count: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const now = Date.now();\r\n    const windowSize = Math.floor(windowMs / precision);\r\n    const currentWindow = Math.floor(now / windowSize);\r\n\r\n    // Limpiar ventanas antiguas y contar requests en ventana actual\r\n    const pipeline = client.pipeline();\r\n\r\n    // Eliminar ventanas m\xE1s antiguas que el per\xEDodo de rate limiting\r\n    for (let i = 1; i <= precision; i++) {\r\n      const oldWindow = currentWindow - precision - i;\r\n      pipeline.del(`${key}:${oldWindow}`);\r\n    }\r\n\r\n    // Incrementar contador para ventana actual\r\n    const currentKey = `${key}:${currentWindow}`;\r\n    pipeline.incr(currentKey);\r\n    pipeline.expire(currentKey, Math.ceil(windowMs / 1000));\r\n\r\n    // Obtener contadores de todas las ventanas en el per\xEDodo\r\n    for (let i = 0; i < precision; i++) {\r\n      const windowKey = `${key}:${currentWindow - i}`;\r\n      pipeline.get(windowKey);\r\n    }\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results) {\r\n      return null;\r\n    }\r\n\r\n    // Calcular total de requests en la ventana deslizante\r\n    let totalCount = 0;\r\n    const countResults = results.slice(precision + 2); // Saltar operaciones de limpieza e incremento\r\n\r\n    for (const result of countResults) {\r\n      if (result[1]) {\r\n        totalCount += parseInt(result[1] as string);\r\n      }\r\n    }\r\n\r\n    const remaining = Math.max(0, maxRequests - totalCount);\r\n    const allowed = totalCount <= maxRequests;\r\n    const resetTime = (currentWindow + 1) * windowSize;\r\n\r\n    return {\r\n      allowed,\r\n      count: totalCount,\r\n      remaining,\r\n      resetTime\r\n    };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Sliding window rate limit failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtener estad\xEDsticas de rate limiting\r\n */\r\nexport async function getRateLimitStats(pattern: string = 'rate_limit:*'): Promise<{\r\n  totalKeys: number;\r\n  activeWindows: number;\r\n  topKeys: Array<{ key: string; count: number; ttl: number }>;\r\n} | null> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const keys = await client.keys(pattern);\r\n\r\n    if (keys.length === 0) {\r\n      return {\r\n        totalKeys: 0,\r\n        activeWindows: 0,\r\n        topKeys: []\r\n      };\r\n    }\r\n\r\n    // Obtener informaci\xF3n de las claves m\xE1s activas\r\n    const pipeline = client.pipeline();\r\n    keys.forEach(key => {\r\n      pipeline.get(key);\r\n      pipeline.ttl(key);\r\n    });\r\n\r\n    const results = await pipeline.exec();\r\n\r\n    if (!results) {\r\n      return null;\r\n    }\r\n\r\n    const keyStats: Array<{ key: string; count: number; ttl: number }> = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const countResult = results[i * 2];\r\n      const ttlResult = results[i * 2 + 1];\r\n\r\n      if (countResult[1] && ttlResult[1]) {\r\n        keyStats.push({\r\n          key: keys[i],\r\n          count: parseInt(countResult[1] as string),\r\n          ttl: ttlResult[1] as number\r\n        });\r\n      }\r\n    }\r\n\r\n    // Ordenar por count descendente\r\n    keyStats.sort((a, b) => b.count - a.count);\r\n\r\n    return {\r\n      totalKeys: keys.length,\r\n      activeWindows: keyStats.filter(stat => stat.ttl > 0).length,\r\n      topKeys: keyStats.slice(0, 10) // Top 10\r\n    };\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit stats failed', error as Error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Limpiar claves de rate limiting expiradas\r\n */\r\nexport async function cleanupRateLimitKeys(pattern: string = 'rate_limit:*'): Promise<number> {\r\n  try {\r\n    const client = getRedisClient();\r\n    const keys = await client.keys(pattern);\r\n\r\n    if (keys.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Verificar TTL de cada clave y eliminar las expiradas\r\n    const pipeline = client.pipeline();\r\n    keys.forEach(key => {\r\n      pipeline.ttl(key);\r\n    });\r\n\r\n    const ttlResults = await pipeline.exec();\r\n\r\n    if (!ttlResults) {\r\n      return 0;\r\n    }\r\n\r\n    const expiredKeys: string[] = [];\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const ttlResult = ttlResults[i];\r\n      if (ttlResult[1] === -2) { // Clave expirada\r\n        expiredKeys.push(keys[i]);\r\n      }\r\n    }\r\n\r\n    if (expiredKeys.length > 0) {\r\n      await client.del(...expiredKeys);\r\n      logger.info(LogCategory.API, `Cleaned up ${expiredKeys.length} expired rate limit keys`);\r\n    }\r\n\r\n    return expiredKeys.length;\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Rate limit cleanup failed', error as Error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n// Exportar cliente Redis para uso directo\r\nexport const redis = getRedisClient();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["RedisCache", "cleanupRateLimitKeys", "closeRedisConnection", "enterpriseRateLimit", "getRateLimitInfo", "getRateLimitStats", "getRedisClient", "incrementRateLimit", "isRedisAvailable", "redis", "redisCache", "slidingWindowRateLimit", "REDIS_CONFIG", "host", "process", "env", "REDIS_HOST", "port", "parseInt", "REDIS_PORT", "password", "REDIS_PASSWORD", "db", "REDIS_DB", "retryDelayOnFailover", "maxRetriesPerRequest", "lazyConnect", "keepAlive", "connectTimeout", "commandTimeout", "MockRedis", "get", "key", "storage", "set", "value", "args", "del", "existed", "has", "delete", "exists", "incr", "current", "newValue", "toString", "expire", "seconds", "keys", "pattern", "regex", "RegExp", "replace", "Array", "from", "filter", "test", "flushall", "clear", "lpush", "values", "list", "unshift", "length", "ltrim", "start", "stop", "trimmed", "slice", "lrange", "ttl", "pipeline", "MockPipeline", "connect", "console", "log", "disconnect", "on", "event", "callback", "quit", "Map", "commands", "push", "method", "exec", "results", "command", "result", "error", "redisClient", "isUsingMock", "DISABLE_REDIS", "Redis", "logger", "info", "LogCategory", "API", "warn", "message", "client", "ping", "ttlSeconds", "setex", "countResult", "ttlResult", "count", "windowSeconds", "isNewWindow", "windowMs", "maxRequests", "now", "Date", "window", "Math", "floor", "redisKey", "ceil", "remaining", "max", "resetTime", "allowed", "retryAfter", "undefined", "debug", "precision", "windowSize", "currentWindow", "i", "oldWindow", "currentKey", "windowKey", "totalCount", "countResults", "totalKeys", "activeWindows", "topKeys", "forEach", "keyStats", "sort", "a", "b", "stat", "ttlResults", "expiredKeys"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f5443b98cc48d7d0f226d7ff84835bb2c9c59a9d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lr17wi2px = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lr17wi2px();
cov_1lr17wi2px().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[0]++;
  cov_1lr17wi2px().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1lr17wi2px().s[3]++;
_export(exports, {
  get RedisCache() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[1]++;
    cov_1lr17wi2px().s[4]++;
    return RedisCache;
  },
  get cleanupRateLimitKeys() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[2]++;
    cov_1lr17wi2px().s[5]++;
    return cleanupRateLimitKeys;
  },
  get closeRedisConnection() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[3]++;
    cov_1lr17wi2px().s[6]++;
    return closeRedisConnection;
  },
  get enterpriseRateLimit() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[4]++;
    cov_1lr17wi2px().s[7]++;
    return enterpriseRateLimit;
  },
  get getRateLimitInfo() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[5]++;
    cov_1lr17wi2px().s[8]++;
    return getRateLimitInfo;
  },
  get getRateLimitStats() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[6]++;
    cov_1lr17wi2px().s[9]++;
    return getRateLimitStats;
  },
  get getRedisClient() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[7]++;
    cov_1lr17wi2px().s[10]++;
    return getRedisClient;
  },
  get incrementRateLimit() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[8]++;
    cov_1lr17wi2px().s[11]++;
    return incrementRateLimit;
  },
  get isRedisAvailable() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[9]++;
    cov_1lr17wi2px().s[12]++;
    return isRedisAvailable;
  },
  get redis() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[10]++;
    cov_1lr17wi2px().s[13]++;
    return redis;
  },
  get redisCache() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[11]++;
    cov_1lr17wi2px().s[14]++;
    return redisCache;
  },
  get slidingWindowRateLimit() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[12]++;
    cov_1lr17wi2px().s[15]++;
    return slidingWindowRateLimit;
  }
});
const _ioredis =
/* istanbul ignore next */
(/*#__PURE__*/cov_1lr17wi2px().s[16]++, _interop_require_default(require("ioredis")));
const _logger =
/* istanbul ignore next */
(cov_1lr17wi2px().s[17]++, require("../../enterprise/logger"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[13]++;
  cov_1lr17wi2px().s[18]++;
  return /* istanbul ignore next */(cov_1lr17wi2px().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[0][1]++, {
    default: obj
  });
}
// Configuración de Redis
const REDIS_CONFIG =
/* istanbul ignore next */
(cov_1lr17wi2px().s[19]++, {
  host:
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[2][0]++, process.env.REDIS_HOST) ||
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[2][1]++, 'localhost'),
  port: parseInt(
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[3][0]++, process.env.REDIS_PORT) ||
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[3][1]++, '6379')),
  password: process.env.REDIS_PASSWORD,
  db: parseInt(
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[4][0]++, process.env.REDIS_DB) ||
  /* istanbul ignore next */
  (cov_1lr17wi2px().b[4][1]++, '0')),
  retryDelayOnFailover: 100,
  maxRetriesPerRequest: 3,
  lazyConnect: true,
  keepAlive: 30000,
  connectTimeout: 10000,
  commandTimeout: 5000
});
// Mock Redis para desarrollo cuando Redis no está disponible
class MockRedis {
  async get(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[14]++;
    cov_1lr17wi2px().s[20]++;
    return /* istanbul ignore next */(cov_1lr17wi2px().b[5][0]++, this.storage.get(key)) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[5][1]++, null);
  }
  async set(key, value, ...args) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[15]++;
    cov_1lr17wi2px().s[21]++;
    this.storage.set(key, value);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[22]++;
    return 'OK';
  }
  async del(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[16]++;
    const existed =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[23]++, this.storage.has(key));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[24]++;
    this.storage.delete(key);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[25]++;
    return existed ?
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[6][0]++, 1) :
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[6][1]++, 0);
  }
  async exists(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[17]++;
    cov_1lr17wi2px().s[26]++;
    return this.storage.has(key) ?
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[7][0]++, 1) :
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[7][1]++, 0);
  }
  async incr(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[18]++;
    const current =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[27]++, parseInt(
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[8][0]++, this.storage.get(key)) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[8][1]++, '0')));
    const newValue =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[28]++, current + 1);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[29]++;
    this.storage.set(key, newValue.toString());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[30]++;
    return newValue;
  }
  async expire(key, seconds) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[19]++;
    cov_1lr17wi2px().s[31]++;
    // Mock: no implementamos expiración real
    return 1;
  }
  async keys(pattern) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[20]++;
    const regex =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[32]++, new RegExp(pattern.replace(/\*/g, '.*')));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[33]++;
    return Array.from(this.storage.keys()).filter(key => {
      /* istanbul ignore next */
      cov_1lr17wi2px().f[21]++;
      cov_1lr17wi2px().s[34]++;
      return regex.test(key);
    });
  }
  async flushall() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[22]++;
    cov_1lr17wi2px().s[35]++;
    this.storage.clear();
    /* istanbul ignore next */
    cov_1lr17wi2px().s[36]++;
    return 'OK';
  }
  // Métodos de listas para métricas
  async lpush(key, ...values) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[23]++;
    const list =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[37]++,
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[9][0]++, this.storage.get(key)) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[9][1]++, []));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[38]++;
    list.unshift(...values);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[39]++;
    this.storage.set(key, list);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[40]++;
    return list.length;
  }
  async ltrim(key, start, stop) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[24]++;
    const list =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[41]++,
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[10][0]++, this.storage.get(key)) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[10][1]++, []));
    const trimmed =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[42]++, list.slice(start, stop + 1));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[43]++;
    this.storage.set(key, trimmed);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[44]++;
    return 'OK';
  }
  async lrange(key, start, stop) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[25]++;
    const list =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[45]++,
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[11][0]++, this.storage.get(key)) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[11][1]++, []));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[46]++;
    if (stop === -1) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[12][0]++;
      cov_1lr17wi2px().s[47]++;
      return list.slice(start);
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[12][1]++;
    }
    cov_1lr17wi2px().s[48]++;
    return list.slice(start, stop + 1);
  }
  async ttl(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[26]++;
    cov_1lr17wi2px().s[49]++;
    // Mock: retornar -1 (sin expiración) o un valor fijo
    return this.storage.has(key) ?
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[13][0]++, 3600) :
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[13][1]++, -2);
  }
  // Pipeline mock para operaciones batch
  pipeline() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[27]++;
    cov_1lr17wi2px().s[50]++;
    return new MockPipeline(this);
  }
  // Métodos de conexión mock
  async connect() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[28]++;
    cov_1lr17wi2px().s[51]++;
    console.log('[REDIS MOCK] Conectado (simulado)');
  }
  disconnect() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[29]++;
    cov_1lr17wi2px().s[52]++;
    console.log('[REDIS MOCK] Desconectado (simulado)');
  }
  on(event, callback) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[30]++;
    cov_1lr17wi2px().s[53]++;
    return this;
  }
  async quit() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[31]++;
    cov_1lr17wi2px().s[54]++;
    console.log('[REDIS MOCK] Desconectado (quit simulado)');
    /* istanbul ignore next */
    cov_1lr17wi2px().s[55]++;
    return 'OK';
  }
  constructor() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[32]++;
    cov_1lr17wi2px().s[56]++;
    this.storage = new Map();
  }
}
// Mock Pipeline para operaciones batch
class MockPipeline {
  constructor(redis) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[33]++;
    cov_1lr17wi2px().s[57]++;
    this.commands = [];
    /* istanbul ignore next */
    cov_1lr17wi2px().s[58]++;
    this.redis = redis;
  }
  get(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[34]++;
    cov_1lr17wi2px().s[59]++;
    this.commands.push({
      method: 'get',
      args: [key]
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[60]++;
    return this;
  }
  ttl(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[35]++;
    cov_1lr17wi2px().s[61]++;
    this.commands.push({
      method: 'ttl',
      args: [key]
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[62]++;
    return this;
  }
  incr(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[36]++;
    cov_1lr17wi2px().s[63]++;
    this.commands.push({
      method: 'incr',
      args: [key]
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[64]++;
    return this;
  }
  expire(key, seconds) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[37]++;
    cov_1lr17wi2px().s[65]++;
    this.commands.push({
      method: 'expire',
      args: [key, seconds]
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[66]++;
    return this;
  }
  async exec() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[38]++;
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[67]++, []);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[68]++;
    for (const command of this.commands) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[69]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1lr17wi2px().s[70]++, await this.redis[command.method](...command.args));
        /* istanbul ignore next */
        cov_1lr17wi2px().s[71]++;
        results.push([null, result]);
      } catch (error) {
        /* istanbul ignore next */
        cov_1lr17wi2px().s[72]++;
        results.push([error, null]);
      }
    }
    /* istanbul ignore next */
    cov_1lr17wi2px().s[73]++;
    this.commands = []; // Limpiar comandos después de ejecutar
    /* istanbul ignore next */
    cov_1lr17wi2px().s[74]++;
    return results;
  }
}
// Cliente Redis singleton
let redisClient =
/* istanbul ignore next */
(cov_1lr17wi2px().s[75]++, null);
let isUsingMock =
/* istanbul ignore next */
(cov_1lr17wi2px().s[76]++, false);
function getRedisClient() {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[39]++;
  cov_1lr17wi2px().s[77]++;
  if (!redisClient) {
    /* istanbul ignore next */
    cov_1lr17wi2px().b[14][0]++;
    cov_1lr17wi2px().s[78]++;
    // Verificar si Redis está deshabilitado
    if (process.env.DISABLE_REDIS === 'true') {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[15][0]++;
      cov_1lr17wi2px().s[79]++;
      console.log('[REDIS] Redis deshabilitado por configuración, usando mock');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[80]++;
      redisClient = new MockRedis();
      /* istanbul ignore next */
      cov_1lr17wi2px().s[81]++;
      isUsingMock = true;
      /* istanbul ignore next */
      cov_1lr17wi2px().s[82]++;
      return redisClient;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[15][1]++;
    }
    cov_1lr17wi2px().s[83]++;
    try {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[84]++;
      redisClient = new _ioredis.default(REDIS_CONFIG);
      // Event listeners para logging
      /* istanbul ignore next */
      cov_1lr17wi2px().s[85]++;
      redisClient.on('connect', () => {
        /* istanbul ignore next */
        cov_1lr17wi2px().f[40]++;
        cov_1lr17wi2px().s[86]++;
        _logger.logger.info(_logger.LogCategory.API, 'Redis connected successfully');
        /* istanbul ignore next */
        cov_1lr17wi2px().s[87]++;
        isUsingMock = false;
      });
      /* istanbul ignore next */
      cov_1lr17wi2px().s[88]++;
      redisClient.on('error', error => {
        /* istanbul ignore next */
        cov_1lr17wi2px().f[41]++;
        cov_1lr17wi2px().s[89]++;
        _logger.logger.error(_logger.LogCategory.API, 'Redis connection error', error);
        // Si hay error de conexión, usar mock
        /* istanbul ignore next */
        cov_1lr17wi2px().s[90]++;
        if (!isUsingMock) {
          /* istanbul ignore next */
          cov_1lr17wi2px().b[16][0]++;
          cov_1lr17wi2px().s[91]++;
          console.log('[REDIS] Cambiando a modo mock debido a error de conexión');
          /* istanbul ignore next */
          cov_1lr17wi2px().s[92]++;
          redisClient = new MockRedis();
          /* istanbul ignore next */
          cov_1lr17wi2px().s[93]++;
          isUsingMock = true;
        } else
        /* istanbul ignore next */
        {
          cov_1lr17wi2px().b[16][1]++;
        }
      });
      /* istanbul ignore next */
      cov_1lr17wi2px().s[94]++;
      redisClient.on('close', () => {
        /* istanbul ignore next */
        cov_1lr17wi2px().f[42]++;
        cov_1lr17wi2px().s[95]++;
        _logger.logger.warn(_logger.LogCategory.API, 'Redis connection closed');
      });
      /* istanbul ignore next */
      cov_1lr17wi2px().s[96]++;
      redisClient.on('reconnecting', () => {
        /* istanbul ignore next */
        cov_1lr17wi2px().f[43]++;
        cov_1lr17wi2px().s[97]++;
        _logger.logger.info(_logger.LogCategory.API, 'Redis reconnecting...');
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[98]++;
      console.log('[REDIS] Error inicializando Redis, usando mock:', error.message);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[99]++;
      redisClient = new MockRedis();
      /* istanbul ignore next */
      cov_1lr17wi2px().s[100]++;
      isUsingMock = true;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1lr17wi2px().b[14][1]++;
  }
  cov_1lr17wi2px().s[101]++;
  return redisClient;
}
async function isRedisAvailable() {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[44]++;
  cov_1lr17wi2px().s[102]++;
  try {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[103]++;
    if (isUsingMock) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[17][0]++;
      cov_1lr17wi2px().s[104]++;
      return false; // Mock no es Redis real
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[17][1]++;
    }
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[105]++, getRedisClient());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[106]++;
    if (client instanceof MockRedis) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[18][0]++;
      cov_1lr17wi2px().s[107]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[18][1]++;
    }
    cov_1lr17wi2px().s[108]++;
    await client.ping();
    /* istanbul ignore next */
    cov_1lr17wi2px().s[109]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[110]++;
    _logger.logger.error(_logger.LogCategory.API, 'Redis health check failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[111]++;
    return false;
  }
}
async function closeRedisConnection() {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[45]++;
  cov_1lr17wi2px().s[112]++;
  if (redisClient) {
    /* istanbul ignore next */
    cov_1lr17wi2px().b[19][0]++;
    cov_1lr17wi2px().s[113]++;
    await redisClient.quit();
    /* istanbul ignore next */
    cov_1lr17wi2px().s[114]++;
    redisClient = null;
    /* istanbul ignore next */
    cov_1lr17wi2px().s[115]++;
    _logger.logger.info(_logger.LogCategory.API, 'Redis connection closed gracefully');
  } else
  /* istanbul ignore next */
  {
    cov_1lr17wi2px().b[19][1]++;
  }
}
class RedisCache {
  constructor() {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[46]++;
    cov_1lr17wi2px().s[116]++;
    this.client = getRedisClient();
  }
  /**
  * Obtiene un valor del cache
  */
  async get(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[47]++;
    cov_1lr17wi2px().s[117]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[118]++, await this.client.get(key));
      /* istanbul ignore next */
      cov_1lr17wi2px().s[119]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache get operation');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[120]++;
      return value;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[121]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache get operation failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[122]++;
      return null;
    }
  }
  /**
  * Establece un valor en el cache
  */
  async set(key, value, ttlSeconds) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[48]++;
    cov_1lr17wi2px().s[123]++;
    try {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[124]++;
      if (ttlSeconds) {
        /* istanbul ignore next */
        cov_1lr17wi2px().b[20][0]++;
        cov_1lr17wi2px().s[125]++;
        await this.client.setex(key, ttlSeconds, value);
      } else {
        /* istanbul ignore next */
        cov_1lr17wi2px().b[20][1]++;
        cov_1lr17wi2px().s[126]++;
        await this.client.set(key, value);
      }
      /* istanbul ignore next */
      cov_1lr17wi2px().s[127]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache set operation');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[128]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[129]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache set operation failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[130]++;
      return false;
    }
  }
  /**
  * Elimina un valor del cache
  */
  async del(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[49]++;
    cov_1lr17wi2px().s[131]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[132]++, await this.client.del(key));
      /* istanbul ignore next */
      cov_1lr17wi2px().s[133]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache delete operation');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[134]++;
      return result > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[135]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache delete operation failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[136]++;
      return false;
    }
  }
  /**
  * Incrementa un contador atómicamente
  */
  async incr(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[50]++;
    cov_1lr17wi2px().s[137]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[138]++, await this.client.incr(key));
      /* istanbul ignore next */
      cov_1lr17wi2px().s[139]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache increment operation');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[140]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[141]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache increment operation failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[142]++;
      return null;
    }
  }
  /**
  * Establece TTL para una clave existente
  */
  async expire(key, ttlSeconds) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[51]++;
    cov_1lr17wi2px().s[143]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[144]++, await this.client.expire(key, ttlSeconds));
      /* istanbul ignore next */
      cov_1lr17wi2px().s[145]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache expire operation');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[146]++;
      return result === 1;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[147]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache expire operation failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[148]++;
      return false;
    }
  }
  /**
  * Obtiene TTL restante de una clave
  */
  async ttl(key) {
    /* istanbul ignore next */
    cov_1lr17wi2px().f[52]++;
    cov_1lr17wi2px().s[149]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[150]++, await this.client.ttl(key));
      /* istanbul ignore next */
      cov_1lr17wi2px().s[151]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache TTL check');
      /* istanbul ignore next */
      cov_1lr17wi2px().s[152]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[153]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache TTL check failed', error);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[154]++;
      return null;
    }
  }
}
const redisCache =
/* istanbul ignore next */
(cov_1lr17wi2px().s[155]++, new RedisCache());
async function getRateLimitInfo(key) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[53]++;
  cov_1lr17wi2px().s[156]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[157]++, getRedisClient());
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[158]++, client.pipeline());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[159]++;
    pipeline.get(key);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[160]++;
    pipeline.ttl(key);
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[161]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[162]++;
    if (
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[22][0]++, !results) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[22][1]++, results.length !== 2)) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[21][0]++;
      cov_1lr17wi2px().s[163]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[21][1]++;
    }
    const [countResult, ttlResult] =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[164]++, results);
    const count =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[165]++,
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[23][0]++, parseInt(countResult[1])) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[23][1]++, 0));
    const ttl =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[166]++, ttlResult[1]);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[167]++;
    return {
      count,
      ttl
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[168]++;
    _logger.logger.error(_logger.LogCategory.API, 'Rate limit info retrieval failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[169]++;
    return null;
  }
}
async function incrementRateLimit(key, windowSeconds) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[54]++;
  cov_1lr17wi2px().s[170]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[171]++, getRedisClient());
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[172]++, client.pipeline());
    // Incrementar contador
    /* istanbul ignore next */
    cov_1lr17wi2px().s[173]++;
    pipeline.incr(key);
    // Establecer TTL solo si es la primera vez
    /* istanbul ignore next */
    cov_1lr17wi2px().s[174]++;
    pipeline.expire(key, windowSeconds);
    // Obtener TTL actual
    /* istanbul ignore next */
    cov_1lr17wi2px().s[175]++;
    pipeline.ttl(key);
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[176]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[177]++;
    if (
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[25][0]++, !results) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[25][1]++, results.length !== 3)) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[24][0]++;
      cov_1lr17wi2px().s[178]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[24][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[179]++, results[0][1]);
    const ttl =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[180]++, results[2][1]);
    const isNewWindow =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[181]++, count === 1);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[182]++;
    return {
      count,
      ttl,
      isNewWindow
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[183]++;
    _logger.logger.error(_logger.LogCategory.API, 'Rate limit increment failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[184]++;
    return null;
  }
}
async function enterpriseRateLimit(key, windowMs, maxRequests) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[55]++;
  cov_1lr17wi2px().s[185]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[186]++, getRedisClient());
    const now =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[187]++, Date.now());
    const window =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[188]++, Math.floor(now / windowMs));
    const redisKey =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[189]++, `rate_limit:${key}:${window}`);
    // Usar pipeline para operaciones atómicas
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[190]++, client.pipeline());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[191]++;
    pipeline.incr(redisKey);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[192]++;
    pipeline.expire(redisKey, Math.ceil(windowMs / 1000));
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[193]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[194]++;
    if (
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[27][0]++, !results) ||
    /* istanbul ignore next */
    (cov_1lr17wi2px().b[27][1]++, results.length !== 2)) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[26][0]++;
      cov_1lr17wi2px().s[195]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[26][1]++;
    }
    const count =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[196]++, results[0][1]);
    const remaining =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[197]++, Math.max(0, maxRequests - count));
    const resetTime =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[198]++, (window + 1) * windowMs);
    const allowed =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[199]++, count <= maxRequests);
    const result =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[200]++, {
      allowed,
      count,
      remaining,
      resetTime,
      retryAfter: allowed ?
      /* istanbul ignore next */
      (cov_1lr17wi2px().b[28][0]++, undefined) :
      /* istanbul ignore next */
      (cov_1lr17wi2px().b[28][1]++, Math.ceil((resetTime - now) / 1000))
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[201]++;
    _logger.logger.debug(_logger.LogCategory.API, 'Enterprise rate limit check', {
      key: redisKey,
      count,
      maxRequests,
      allowed,
      remaining
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[202]++;
    return result;
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[203]++;
    _logger.logger.error(_logger.LogCategory.API, 'Enterprise rate limit failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[204]++;
    return null;
  }
}
async function slidingWindowRateLimit(key, windowMs, maxRequests, precision =
/* istanbul ignore next */
(cov_1lr17wi2px().b[29][0]++, 10)) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[56]++;
  cov_1lr17wi2px().s[205]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[206]++, getRedisClient());
    const now =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[207]++, Date.now());
    const windowSize =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[208]++, Math.floor(windowMs / precision));
    const currentWindow =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[209]++, Math.floor(now / windowSize));
    // Limpiar ventanas antiguas y contar requests en ventana actual
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[210]++, client.pipeline());
    // Eliminar ventanas más antiguas que el período de rate limiting
    /* istanbul ignore next */
    cov_1lr17wi2px().s[211]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[212]++, 1); i <= precision; i++) {
      const oldWindow =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[213]++, currentWindow - precision - i);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[214]++;
      pipeline.del(`${key}:${oldWindow}`);
    }
    // Incrementar contador para ventana actual
    const currentKey =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[215]++, `${key}:${currentWindow}`);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[216]++;
    pipeline.incr(currentKey);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[217]++;
    pipeline.expire(currentKey, Math.ceil(windowMs / 1000));
    // Obtener contadores de todas las ventanas en el período
    /* istanbul ignore next */
    cov_1lr17wi2px().s[218]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[219]++, 0); i < precision; i++) {
      const windowKey =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[220]++, `${key}:${currentWindow - i}`);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[221]++;
      pipeline.get(windowKey);
    }
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[222]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[223]++;
    if (!results) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[30][0]++;
      cov_1lr17wi2px().s[224]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[30][1]++;
    }
    // Calcular total de requests en la ventana deslizante
    let totalCount =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[225]++, 0);
    const countResults =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[226]++, results.slice(precision + 2)); // Saltar operaciones de limpieza e incremento
    /* istanbul ignore next */
    cov_1lr17wi2px().s[227]++;
    for (const result of countResults) {
      /* istanbul ignore next */
      cov_1lr17wi2px().s[228]++;
      if (result[1]) {
        /* istanbul ignore next */
        cov_1lr17wi2px().b[31][0]++;
        cov_1lr17wi2px().s[229]++;
        totalCount += parseInt(result[1]);
      } else
      /* istanbul ignore next */
      {
        cov_1lr17wi2px().b[31][1]++;
      }
    }
    const remaining =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[230]++, Math.max(0, maxRequests - totalCount));
    const allowed =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[231]++, totalCount <= maxRequests);
    const resetTime =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[232]++, (currentWindow + 1) * windowSize);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[233]++;
    return {
      allowed,
      count: totalCount,
      remaining,
      resetTime
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[234]++;
    _logger.logger.error(_logger.LogCategory.API, 'Sliding window rate limit failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[235]++;
    return null;
  }
}
async function getRateLimitStats(pattern =
/* istanbul ignore next */
(cov_1lr17wi2px().b[32][0]++, 'rate_limit:*')) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[57]++;
  cov_1lr17wi2px().s[236]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[237]++, getRedisClient());
    const keys =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[238]++, await client.keys(pattern));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[239]++;
    if (keys.length === 0) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[33][0]++;
      cov_1lr17wi2px().s[240]++;
      return {
        totalKeys: 0,
        activeWindows: 0,
        topKeys: []
      };
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[33][1]++;
    }
    // Obtener información de las claves más activas
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[241]++, client.pipeline());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[242]++;
    keys.forEach(key => {
      /* istanbul ignore next */
      cov_1lr17wi2px().f[58]++;
      cov_1lr17wi2px().s[243]++;
      pipeline.get(key);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[244]++;
      pipeline.ttl(key);
    });
    const results =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[245]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[246]++;
    if (!results) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[34][0]++;
      cov_1lr17wi2px().s[247]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[34][1]++;
    }
    const keyStats =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[248]++, []);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[249]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[250]++, 0); i < keys.length; i++) {
      const countResult =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[251]++, results[i * 2]);
      const ttlResult =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[252]++, results[i * 2 + 1]);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[253]++;
      if (
      /* istanbul ignore next */
      (cov_1lr17wi2px().b[36][0]++, countResult[1]) &&
      /* istanbul ignore next */
      (cov_1lr17wi2px().b[36][1]++, ttlResult[1])) {
        /* istanbul ignore next */
        cov_1lr17wi2px().b[35][0]++;
        cov_1lr17wi2px().s[254]++;
        keyStats.push({
          key: keys[i],
          count: parseInt(countResult[1]),
          ttl: ttlResult[1]
        });
      } else
      /* istanbul ignore next */
      {
        cov_1lr17wi2px().b[35][1]++;
      }
    }
    // Ordenar por count descendente
    /* istanbul ignore next */
    cov_1lr17wi2px().s[255]++;
    keyStats.sort((a, b) => {
      /* istanbul ignore next */
      cov_1lr17wi2px().f[59]++;
      cov_1lr17wi2px().s[256]++;
      return b.count - a.count;
    });
    /* istanbul ignore next */
    cov_1lr17wi2px().s[257]++;
    return {
      totalKeys: keys.length,
      activeWindows: keyStats.filter(stat => {
        /* istanbul ignore next */
        cov_1lr17wi2px().f[60]++;
        cov_1lr17wi2px().s[258]++;
        return stat.ttl > 0;
      }).length,
      topKeys: keyStats.slice(0, 10) // Top 10
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[259]++;
    _logger.logger.error(_logger.LogCategory.API, 'Rate limit stats failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[260]++;
    return null;
  }
}
async function cleanupRateLimitKeys(pattern =
/* istanbul ignore next */
(cov_1lr17wi2px().b[37][0]++, 'rate_limit:*')) {
  /* istanbul ignore next */
  cov_1lr17wi2px().f[61]++;
  cov_1lr17wi2px().s[261]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[262]++, getRedisClient());
    const keys =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[263]++, await client.keys(pattern));
    /* istanbul ignore next */
    cov_1lr17wi2px().s[264]++;
    if (keys.length === 0) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[38][0]++;
      cov_1lr17wi2px().s[265]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[38][1]++;
    }
    // Verificar TTL de cada clave y eliminar las expiradas
    const pipeline =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[266]++, client.pipeline());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[267]++;
    keys.forEach(key => {
      /* istanbul ignore next */
      cov_1lr17wi2px().f[62]++;
      cov_1lr17wi2px().s[268]++;
      pipeline.ttl(key);
    });
    const ttlResults =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[269]++, await pipeline.exec());
    /* istanbul ignore next */
    cov_1lr17wi2px().s[270]++;
    if (!ttlResults) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[39][0]++;
      cov_1lr17wi2px().s[271]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[39][1]++;
    }
    const expiredKeys =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[272]++, []);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[273]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1lr17wi2px().s[274]++, 0); i < keys.length; i++) {
      const ttlResult =
      /* istanbul ignore next */
      (cov_1lr17wi2px().s[275]++, ttlResults[i]);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[276]++;
      if (ttlResult[1] === -2) {
        /* istanbul ignore next */
        cov_1lr17wi2px().b[40][0]++;
        cov_1lr17wi2px().s[277]++;
        expiredKeys.push(keys[i]);
      } else
      /* istanbul ignore next */
      {
        cov_1lr17wi2px().b[40][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1lr17wi2px().s[278]++;
    if (expiredKeys.length > 0) {
      /* istanbul ignore next */
      cov_1lr17wi2px().b[41][0]++;
      cov_1lr17wi2px().s[279]++;
      await client.del(...expiredKeys);
      /* istanbul ignore next */
      cov_1lr17wi2px().s[280]++;
      _logger.logger.info(_logger.LogCategory.API, `Cleaned up ${expiredKeys.length} expired rate limit keys`);
    } else
    /* istanbul ignore next */
    {
      cov_1lr17wi2px().b[41][1]++;
    }
    cov_1lr17wi2px().s[281]++;
    return expiredKeys.length;
  } catch (error) {
    /* istanbul ignore next */
    cov_1lr17wi2px().s[282]++;
    _logger.logger.error(_logger.LogCategory.API, 'Rate limit cleanup failed', error);
    /* istanbul ignore next */
    cov_1lr17wi2px().s[283]++;
    return 0;
  }
}
const redis =
/* istanbul ignore next */
(cov_1lr17wi2px().s[284]++, getRedisClient());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWRpc0NhY2hlIiwiY292XzFscjE3d2kycHgiLCJmIiwicyIsImNsZWFudXBSYXRlTGltaXRLZXlzIiwiY2xvc2VSZWRpc0Nvbm5lY3Rpb24iLCJlbnRlcnByaXNlUmF0ZUxpbWl0IiwiZ2V0UmF0ZUxpbWl0SW5mbyIsImdldFJhdGVMaW1pdFN0YXRzIiwiZ2V0UmVkaXNDbGllbnQiLCJpbmNyZW1lbnRSYXRlTGltaXQiLCJpc1JlZGlzQXZhaWxhYmxlIiwicmVkaXMiLCJyZWRpc0NhY2hlIiwic2xpZGluZ1dpbmRvd1JhdGVMaW1pdCIsIlJFRElTX0NPTkZJRyIsImhvc3QiLCJiIiwicHJvY2VzcyIsImVudiIsIlJFRElTX0hPU1QiLCJwb3J0IiwicGFyc2VJbnQiLCJSRURJU19QT1JUIiwicGFzc3dvcmQiLCJSRURJU19QQVNTV09SRCIsImRiIiwiUkVESVNfREIiLCJyZXRyeURlbGF5T25GYWlsb3ZlciIsIm1heFJldHJpZXNQZXJSZXF1ZXN0IiwibGF6eUNvbm5lY3QiLCJrZWVwQWxpdmUiLCJjb25uZWN0VGltZW91dCIsImNvbW1hbmRUaW1lb3V0IiwiTW9ja1JlZGlzIiwiZ2V0Iiwia2V5Iiwic3RvcmFnZSIsInNldCIsInZhbHVlIiwiYXJncyIsImRlbCIsImV4aXN0ZWQiLCJoYXMiLCJkZWxldGUiLCJleGlzdHMiLCJpbmNyIiwiY3VycmVudCIsIm5ld1ZhbHVlIiwidG9TdHJpbmciLCJleHBpcmUiLCJzZWNvbmRzIiwia2V5cyIsInBhdHRlcm4iLCJyZWdleCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJBcnJheSIsImZyb20iLCJmaWx0ZXIiLCJ0ZXN0IiwiZmx1c2hhbGwiLCJjbGVhciIsImxwdXNoIiwidmFsdWVzIiwibGlzdCIsInVuc2hpZnQiLCJsZW5ndGgiLCJsdHJpbSIsInN0YXJ0Iiwic3RvcCIsInRyaW1tZWQiLCJzbGljZSIsImxyYW5nZSIsInR0bCIsInBpcGVsaW5lIiwiTW9ja1BpcGVsaW5lIiwiY29ubmVjdCIsImNvbnNvbGUiLCJsb2ciLCJkaXNjb25uZWN0Iiwib24iLCJldmVudCIsImNhbGxiYWNrIiwicXVpdCIsIk1hcCIsImNvbnN0cnVjdG9yIiwiY29tbWFuZHMiLCJwdXNoIiwibWV0aG9kIiwiZXhlYyIsInJlc3VsdHMiLCJjb21tYW5kIiwicmVzdWx0IiwiZXJyb3IiLCJyZWRpc0NsaWVudCIsImlzVXNpbmdNb2NrIiwiRElTQUJMRV9SRURJUyIsIl9pb3JlZGlzIiwiZGVmYXVsdCIsIl9sb2dnZXIiLCJsb2dnZXIiLCJpbmZvIiwiTG9nQ2F0ZWdvcnkiLCJBUEkiLCJ3YXJuIiwibWVzc2FnZSIsImNsaWVudCIsInBpbmciLCJ0dGxTZWNvbmRzIiwic2V0ZXgiLCJjb3VudFJlc3VsdCIsInR0bFJlc3VsdCIsImNvdW50Iiwid2luZG93U2Vjb25kcyIsImlzTmV3V2luZG93Iiwid2luZG93TXMiLCJtYXhSZXF1ZXN0cyIsIm5vdyIsIkRhdGUiLCJ3aW5kb3ciLCJNYXRoIiwiZmxvb3IiLCJyZWRpc0tleSIsImNlaWwiLCJyZW1haW5pbmciLCJtYXgiLCJyZXNldFRpbWUiLCJhbGxvd2VkIiwicmV0cnlBZnRlciIsInVuZGVmaW5lZCIsImRlYnVnIiwicHJlY2lzaW9uIiwid2luZG93U2l6ZSIsImN1cnJlbnRXaW5kb3ciLCJpIiwib2xkV2luZG93IiwiY3VycmVudEtleSIsIndpbmRvd0tleSIsInRvdGFsQ291bnQiLCJjb3VudFJlc3VsdHMiLCJ0b3RhbEtleXMiLCJhY3RpdmVXaW5kb3dzIiwidG9wS2V5cyIsImZvckVhY2giLCJrZXlTdGF0cyIsInNvcnQiLCJhIiwic3RhdCIsInR0bFJlc3VsdHMiLCJleHBpcmVkS2V5cyJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxpbnRlZ3JhdGlvbnNcXHJlZGlzXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBQSU5URVlBIEUtQ09NTUVSQ0UgLSBSRURJUyBDT05GSUdVUkFUSU9OXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcyc7XHJcbmltcG9ydCB7IGxvZ2dlciwgTG9nTGV2ZWwsIExvZ0NhdGVnb3J5IH0gZnJvbSAnLi4vLi4vZW50ZXJwcmlzZS9sb2dnZXInO1xyXG5cclxuLy8gQ29uZmlndXJhY2nDs24gZGUgUmVkaXNcclxuY29uc3QgUkVESVNfQ09ORklHID0ge1xyXG4gIGhvc3Q6IHByb2Nlc3MuZW52LlJFRElTX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXHJcbiAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUkVESVNfUE9SVCB8fCAnNjM3OScpLFxyXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5SRURJU19QQVNTV09SRCxcclxuICBkYjogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUkVESVNfREIgfHwgJzAnKSxcclxuICByZXRyeURlbGF5T25GYWlsb3ZlcjogMTAwLFxyXG4gIG1heFJldHJpZXNQZXJSZXF1ZXN0OiAzLFxyXG4gIGxhenlDb25uZWN0OiB0cnVlLFxyXG4gIGtlZXBBbGl2ZTogMzAwMDAsXHJcbiAgY29ubmVjdFRpbWVvdXQ6IDEwMDAwLFxyXG4gIGNvbW1hbmRUaW1lb3V0OiA1MDAwLFxyXG59O1xyXG5cclxuLy8gTW9jayBSZWRpcyBwYXJhIGRlc2Fycm9sbG8gY3VhbmRvIFJlZGlzIG5vIGVzdMOhIGRpc3BvbmlibGVcclxuY2xhc3MgTW9ja1JlZGlzIHtcclxuICBwcml2YXRlIHN0b3JhZ2UgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xyXG5cclxuICBhc3luYyBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0KGtleSkgfHwgbnVsbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgLi4uYXJnczogYW55W10pOiBQcm9taXNlPCdPSyc+IHtcclxuICAgIHRoaXMuc3RvcmFnZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gJ09LJztcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbChrZXk6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICBjb25zdCBleGlzdGVkID0gdGhpcy5zdG9yYWdlLmhhcyhrZXkpO1xyXG4gICAgdGhpcy5zdG9yYWdlLmRlbGV0ZShrZXkpO1xyXG4gICAgcmV0dXJuIGV4aXN0ZWQgPyAxIDogMDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGV4aXN0cyhrZXk6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmhhcyhrZXkpID8gMSA6IDA7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbmNyKGtleTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGN1cnJlbnQgPSBwYXJzZUludCh0aGlzLnN0b3JhZ2UuZ2V0KGtleSkgfHwgJzAnKTtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gY3VycmVudCArIDE7XHJcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0KGtleSwgbmV3VmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICByZXR1cm4gbmV3VmFsdWU7XHJcbiAgfVxyXG5cclxuICBhc3luYyBleHBpcmUoa2V5OiBzdHJpbmcsIHNlY29uZHM6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAvLyBNb2NrOiBubyBpbXBsZW1lbnRhbW9zIGV4cGlyYWNpw7NuIHJlYWxcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMga2V5cyhwYXR0ZXJuOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybi5yZXBsYWNlKC9cXCovZywgJy4qJykpO1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zdG9yYWdlLmtleXMoKSkuZmlsdGVyKGtleSA9PiByZWdleC50ZXN0KGtleSkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZmx1c2hhbGwoKTogUHJvbWlzZTwnT0snPiB7XHJcbiAgICB0aGlzLnN0b3JhZ2UuY2xlYXIoKTtcclxuICAgIHJldHVybiAnT0snO1xyXG4gIH1cclxuXHJcbiAgLy8gTcOpdG9kb3MgZGUgbGlzdGFzIHBhcmEgbcOpdHJpY2FzXHJcbiAgYXN5bmMgbHB1c2goa2V5OiBzdHJpbmcsIC4uLnZhbHVlczogc3RyaW5nW10pOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgY29uc3QgbGlzdCA9IHRoaXMuc3RvcmFnZS5nZXQoa2V5KSB8fCBbXTtcclxuICAgIGxpc3QudW5zaGlmdCguLi52YWx1ZXMpO1xyXG4gICAgdGhpcy5zdG9yYWdlLnNldChrZXksIGxpc3QpO1xyXG4gICAgcmV0dXJuIGxpc3QubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbHRyaW0oa2V5OiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIsIHN0b3A6IG51bWJlcik6IFByb21pc2U8J09LJz4ge1xyXG4gICAgY29uc3QgbGlzdCA9IHRoaXMuc3RvcmFnZS5nZXQoa2V5KSB8fCBbXTtcclxuICAgIGNvbnN0IHRyaW1tZWQgPSBsaXN0LnNsaWNlKHN0YXJ0LCBzdG9wICsgMSk7XHJcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0KGtleSwgdHJpbW1lZCk7XHJcbiAgICByZXR1cm4gJ09LJztcclxuICB9XHJcblxyXG4gIGFzeW5jIGxyYW5nZShrZXk6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgc3RvcDogbnVtYmVyKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgbGlzdCA9IHRoaXMuc3RvcmFnZS5nZXQoa2V5KSB8fCBbXTtcclxuICAgIGlmIChzdG9wID09PSAtMSkge1xyXG4gICAgICByZXR1cm4gbGlzdC5zbGljZShzdGFydCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGlzdC5zbGljZShzdGFydCwgc3RvcCArIDEpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdHRsKGtleTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIC8vIE1vY2s6IHJldG9ybmFyIC0xIChzaW4gZXhwaXJhY2nDs24pIG8gdW4gdmFsb3IgZmlqb1xyXG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5oYXMoa2V5KSA/IDM2MDAgOiAtMjtcclxuICB9XHJcblxyXG4gIC8vIFBpcGVsaW5lIG1vY2sgcGFyYSBvcGVyYWNpb25lcyBiYXRjaFxyXG4gIHBpcGVsaW5lKCk6IE1vY2tQaXBlbGluZSB7XHJcbiAgICByZXR1cm4gbmV3IE1vY2tQaXBlbGluZSh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8vIE3DqXRvZG9zIGRlIGNvbmV4acOzbiBtb2NrXHJcbiAgYXN5bmMgY29ubmVjdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbUkVESVMgTU9DS10gQ29uZWN0YWRvIChzaW11bGFkbyknKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3QoKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZygnW1JFRElTIE1PQ0tdIERlc2NvbmVjdGFkbyAoc2ltdWxhZG8pJyk7XHJcbiAgfVxyXG5cclxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiB0aGlzIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcXVpdCgpOiBQcm9taXNlPCdPSyc+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbUkVESVMgTU9DS10gRGVzY29uZWN0YWRvIChxdWl0IHNpbXVsYWRvKScpO1xyXG4gICAgcmV0dXJuICdPSyc7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBNb2NrIFBpcGVsaW5lIHBhcmEgb3BlcmFjaW9uZXMgYmF0Y2hcclxuY2xhc3MgTW9ja1BpcGVsaW5lIHtcclxuICBwcml2YXRlIGNvbW1hbmRzOiBBcnJheTx7IG1ldGhvZDogc3RyaW5nOyBhcmdzOiBhbnlbXSB9PiA9IFtdO1xyXG4gIHByaXZhdGUgcmVkaXM6IE1vY2tSZWRpcztcclxuXHJcbiAgY29uc3RydWN0b3IocmVkaXM6IE1vY2tSZWRpcykge1xyXG4gICAgdGhpcy5yZWRpcyA9IHJlZGlzO1xyXG4gIH1cclxuXHJcbiAgZ2V0KGtleTogc3RyaW5nKTogdGhpcyB7XHJcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goeyBtZXRob2Q6ICdnZXQnLCBhcmdzOiBba2V5XSB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgdHRsKGtleTogc3RyaW5nKTogdGhpcyB7XHJcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goeyBtZXRob2Q6ICd0dGwnLCBhcmdzOiBba2V5XSB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgaW5jcihrZXk6IHN0cmluZyk6IHRoaXMge1xyXG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHsgbWV0aG9kOiAnaW5jcicsIGFyZ3M6IFtrZXldIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBleHBpcmUoa2V5OiBzdHJpbmcsIHNlY29uZHM6IG51bWJlcik6IHRoaXMge1xyXG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHsgbWV0aG9kOiAnZXhwaXJlJywgYXJnczogW2tleSwgc2Vjb25kc10gfSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGFzeW5jIGV4ZWMoKTogUHJvbWlzZTxBcnJheTxbRXJyb3IgfCBudWxsLCBhbnldPj4ge1xyXG4gICAgY29uc3QgcmVzdWx0czogQXJyYXk8W0Vycm9yIHwgbnVsbCwgYW55XT4gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgdGhpcy5jb21tYW5kcykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICh0aGlzLnJlZGlzIGFzIGFueSlbY29tbWFuZC5tZXRob2RdKC4uLmNvbW1hbmQuYXJncyk7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKFtudWxsLCByZXN1bHRdKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXN1bHRzLnB1c2goW2Vycm9yIGFzIEVycm9yLCBudWxsXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbW1hbmRzID0gW107IC8vIExpbXBpYXIgY29tYW5kb3MgZGVzcHXDqXMgZGUgZWplY3V0YXJcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ2xpZW50ZSBSZWRpcyBzaW5nbGV0b25cclxubGV0IHJlZGlzQ2xpZW50OiBSZWRpcyB8IE1vY2tSZWRpcyB8IG51bGwgPSBudWxsO1xyXG5sZXQgaXNVc2luZ01vY2sgPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBPYnRpZW5lIG8gY3JlYSBsYSBpbnN0YW5jaWEgZGUgUmVkaXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWRpc0NsaWVudCgpOiBSZWRpcyB8IE1vY2tSZWRpcyB7XHJcbiAgaWYgKCFyZWRpc0NsaWVudCkge1xyXG4gICAgLy8gVmVyaWZpY2FyIHNpIFJlZGlzIGVzdMOhIGRlc2hhYmlsaXRhZG9cclxuICAgIGlmIChwcm9jZXNzLmVudi5ESVNBQkxFX1JFRElTID09PSAndHJ1ZScpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1tSRURJU10gUmVkaXMgZGVzaGFiaWxpdGFkbyBwb3IgY29uZmlndXJhY2nDs24sIHVzYW5kbyBtb2NrJyk7XHJcbiAgICAgIHJlZGlzQ2xpZW50ID0gbmV3IE1vY2tSZWRpcygpO1xyXG4gICAgICBpc1VzaW5nTW9jayA9IHRydWU7XHJcbiAgICAgIHJldHVybiByZWRpc0NsaWVudDtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICByZWRpc0NsaWVudCA9IG5ldyBSZWRpcyhSRURJU19DT05GSUcpO1xyXG5cclxuICAgICAgLy8gRXZlbnQgbGlzdGVuZXJzIHBhcmEgbG9nZ2luZ1xyXG4gICAgICByZWRpc0NsaWVudC5vbignY29ubmVjdCcsICgpID0+IHtcclxuICAgICAgICBsb2dnZXIuaW5mbyhMb2dDYXRlZ29yeS5BUEksICdSZWRpcyBjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XHJcbiAgICAgICAgaXNVc2luZ01vY2sgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZWRpc0NsaWVudC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoTG9nQ2F0ZWdvcnkuQVBJLCAnUmVkaXMgY29ubmVjdGlvbiBlcnJvcicsIGVycm9yKTtcclxuICAgICAgICAvLyBTaSBoYXkgZXJyb3IgZGUgY29uZXhpw7NuLCB1c2FyIG1vY2tcclxuICAgICAgICBpZiAoIWlzVXNpbmdNb2NrKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JFRElTXSBDYW1iaWFuZG8gYSBtb2RvIG1vY2sgZGViaWRvIGEgZXJyb3IgZGUgY29uZXhpw7NuJyk7XHJcbiAgICAgICAgICByZWRpc0NsaWVudCA9IG5ldyBNb2NrUmVkaXMoKTtcclxuICAgICAgICAgIGlzVXNpbmdNb2NrID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmVkaXNDbGllbnQub24oJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICAgIGxvZ2dlci53YXJuKExvZ0NhdGVnb3J5LkFQSSwgJ1JlZGlzIGNvbm5lY3Rpb24gY2xvc2VkJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmVkaXNDbGllbnQub24oJ3JlY29ubmVjdGluZycsICgpID0+IHtcclxuICAgICAgICBsb2dnZXIuaW5mbyhMb2dDYXRlZ29yeS5BUEksICdSZWRpcyByZWNvbm5lY3RpbmcuLi4nKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1tSRURJU10gRXJyb3IgaW5pY2lhbGl6YW5kbyBSZWRpcywgdXNhbmRvIG1vY2s6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHJlZGlzQ2xpZW50ID0gbmV3IE1vY2tSZWRpcygpO1xyXG4gICAgICBpc1VzaW5nTW9jayA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVkaXNDbGllbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWZXJpZmljYSBzaSBSZWRpcyBlc3TDoSBkaXNwb25pYmxlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNSZWRpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKGlzVXNpbmdNb2NrKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gTW9jayBubyBlcyBSZWRpcyByZWFsXHJcbiAgICB9XHJcbiAgICBjb25zdCBjbGllbnQgPSBnZXRSZWRpc0NsaWVudCgpO1xyXG4gICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIE1vY2tSZWRpcykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBhd2FpdCAoY2xpZW50IGFzIFJlZGlzKS5waW5nKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1JlZGlzIGhlYWx0aCBjaGVjayBmYWlsZWQnLCBlcnJvciBhcyBFcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2llcnJhIGxhIGNvbmV4acOzbiBkZSBSZWRpc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlUmVkaXNDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGlmIChyZWRpc0NsaWVudCkge1xyXG4gICAgYXdhaXQgcmVkaXNDbGllbnQucXVpdCgpO1xyXG4gICAgcmVkaXNDbGllbnQgPSBudWxsO1xyXG4gICAgbG9nZ2VyLmluZm8oTG9nQ2F0ZWdvcnkuQVBJLCAnUmVkaXMgY29ubmVjdGlvbiBjbG9zZWQgZ3JhY2VmdWxseScpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE9wZXJhY2lvbmVzIGRlIGNhY2hlIGNvbiBtYW5lam8gZGUgZXJyb3Jlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlZGlzQ2FjaGUge1xyXG4gIHByaXZhdGUgY2xpZW50OiBSZWRpcztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNsaWVudCA9IGdldFJlZGlzQ2xpZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIHVuIHZhbG9yIGRlbCBjYWNoZVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldChrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoa2V5KTtcclxuICAgICAgbG9nZ2VyLmluZm8oTG9nQ2F0ZWdvcnkuQVBJLCAnQ2FjaGUgZ2V0IG9wZXJhdGlvbicpO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dnZXIuZXJyb3IoTG9nQ2F0ZWdvcnkuQVBJLCAnQ2FjaGUgZ2V0IG9wZXJhdGlvbiBmYWlsZWQnLCBlcnJvciBhcyBFcnJvcik7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXN0YWJsZWNlIHVuIHZhbG9yIGVuIGVsIGNhY2hlXHJcbiAgICovXHJcbiAgYXN5bmMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB0dGxTZWNvbmRzPzogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAodHRsU2Vjb25kcykge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnNldGV4KGtleSwgdHRsU2Vjb25kcywgdmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnNldChrZXksIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbG9nZ2VyLmluZm8oTG9nQ2F0ZWdvcnkuQVBJLCAnQ2FjaGUgc2V0IG9wZXJhdGlvbicpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dDYXRlZ29yeS5BUEksICdDYWNoZSBzZXQgb3BlcmF0aW9uIGZhaWxlZCcsIGVycm9yIGFzIEVycm9yKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRWxpbWluYSB1biB2YWxvciBkZWwgY2FjaGVcclxuICAgKi9cclxuICBhc3luYyBkZWwoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2xpZW50LmRlbChrZXkpO1xyXG4gICAgICBsb2dnZXIuaW5mbyhMb2dDYXRlZ29yeS5BUEksICdDYWNoZSBkZWxldGUgb3BlcmF0aW9uJyk7XHJcbiAgICAgIHJldHVybiByZXN1bHQgPiAwO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ0NhY2hlIGRlbGV0ZSBvcGVyYXRpb24gZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmNyZW1lbnRhIHVuIGNvbnRhZG9yIGF0w7NtaWNhbWVudGVcclxuICAgKi9cclxuICBhc3luYyBpbmNyKGtleTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXIgfCBudWxsPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNsaWVudC5pbmNyKGtleSk7XHJcbiAgICAgIGxvZ2dlci5pbmZvKExvZ0NhdGVnb3J5LkFQSSwgJ0NhY2hlIGluY3JlbWVudCBvcGVyYXRpb24nKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dDYXRlZ29yeS5BUEksICdDYWNoZSBpbmNyZW1lbnQgb3BlcmF0aW9uIGZhaWxlZCcsIGVycm9yIGFzIEVycm9yKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFc3RhYmxlY2UgVFRMIHBhcmEgdW5hIGNsYXZlIGV4aXN0ZW50ZVxyXG4gICAqL1xyXG4gIGFzeW5jIGV4cGlyZShrZXk6IHN0cmluZywgdHRsU2Vjb25kczogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNsaWVudC5leHBpcmUoa2V5LCB0dGxTZWNvbmRzKTtcclxuICAgICAgbG9nZ2VyLmluZm8oTG9nQ2F0ZWdvcnkuQVBJLCAnQ2FjaGUgZXhwaXJlIG9wZXJhdGlvbicpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSAxO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ0NhY2hlIGV4cGlyZSBvcGVyYXRpb24gZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRpZW5lIFRUTCByZXN0YW50ZSBkZSB1bmEgY2xhdmVcclxuICAgKi9cclxuICBhc3luYyB0dGwoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2xpZW50LnR0bChrZXkpO1xyXG4gICAgICBsb2dnZXIuaW5mbyhMb2dDYXRlZ29yeS5BUEksICdDYWNoZSBUVEwgY2hlY2snKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dDYXRlZ29yeS5BUEksICdDYWNoZSBUVEwgY2hlY2sgZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEluc3RhbmNpYSBzaW5nbGV0b24gZGVsIGNhY2hlXHJcbmV4cG9ydCBjb25zdCByZWRpc0NhY2hlID0gbmV3IFJlZGlzQ2FjaGUoKTtcclxuXHJcbi8vIEZ1bmNpb25lcyBkZSB1dGlsaWRhZCBwYXJhIHJhdGUgbGltaXRpbmdcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJhdGVMaW1pdEluZm8oa2V5OiBzdHJpbmcpOiBQcm9taXNlPHtcclxuICBjb3VudDogbnVtYmVyO1xyXG4gIHR0bDogbnVtYmVyO1xyXG59IHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBnZXRSZWRpc0NsaWVudCgpO1xyXG4gICAgY29uc3QgcGlwZWxpbmUgPSBjbGllbnQucGlwZWxpbmUoKTtcclxuICAgIHBpcGVsaW5lLmdldChrZXkpO1xyXG4gICAgcGlwZWxpbmUudHRsKGtleSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwaXBlbGluZS5leGVjKCk7XHJcbiAgICBcclxuICAgIGlmICghcmVzdWx0cyB8fCByZXN1bHRzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBbY291bnRSZXN1bHQsIHR0bFJlc3VsdF0gPSByZXN1bHRzO1xyXG4gICAgY29uc3QgY291bnQgPSBwYXJzZUludChjb3VudFJlc3VsdFsxXSBhcyBzdHJpbmcpIHx8IDA7XHJcbiAgICBjb25zdCB0dGwgPSB0dGxSZXN1bHRbMV0gYXMgbnVtYmVyO1xyXG5cclxuICAgIHJldHVybiB7IGNvdW50LCB0dGwgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1JhdGUgbGltaXQgaW5mbyByZXRyaWV2YWwgZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5jcmVtZW50UmF0ZUxpbWl0KGtleTogc3RyaW5nLCB3aW5kb3dTZWNvbmRzOiBudW1iZXIpOiBQcm9taXNlPHtcclxuICBjb3VudDogbnVtYmVyO1xyXG4gIHR0bDogbnVtYmVyO1xyXG4gIGlzTmV3V2luZG93OiBib29sZWFuO1xyXG59IHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBnZXRSZWRpc0NsaWVudCgpO1xyXG4gICAgY29uc3QgcGlwZWxpbmUgPSBjbGllbnQucGlwZWxpbmUoKTtcclxuXHJcbiAgICAvLyBJbmNyZW1lbnRhciBjb250YWRvclxyXG4gICAgcGlwZWxpbmUuaW5jcihrZXkpO1xyXG4gICAgLy8gRXN0YWJsZWNlciBUVEwgc29sbyBzaSBlcyBsYSBwcmltZXJhIHZlelxyXG4gICAgcGlwZWxpbmUuZXhwaXJlKGtleSwgd2luZG93U2Vjb25kcyk7XHJcbiAgICAvLyBPYnRlbmVyIFRUTCBhY3R1YWxcclxuICAgIHBpcGVsaW5lLnR0bChrZXkpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwaXBlbGluZS5leGVjKCk7XHJcblxyXG4gICAgaWYgKCFyZXN1bHRzIHx8IHJlc3VsdHMubGVuZ3RoICE9PSAzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvdW50ID0gcmVzdWx0c1swXVsxXSBhcyBudW1iZXI7XHJcbiAgICBjb25zdCB0dGwgPSByZXN1bHRzWzJdWzFdIGFzIG51bWJlcjtcclxuICAgIGNvbnN0IGlzTmV3V2luZG93ID0gY291bnQgPT09IDE7XHJcblxyXG4gICAgcmV0dXJuIHsgY291bnQsIHR0bCwgaXNOZXdXaW5kb3cgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1JhdGUgbGltaXQgaW5jcmVtZW50IGZhaWxlZCcsIGVycm9yIGFzIEVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRlVOQ0lPTkVTIEVOVEVSUFJJU0UgUEFSQSBSQVRFIExJTUlUSU5HXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKipcclxuICogUmF0ZSBsaW1pdGluZyBlbnRlcnByaXNlIGNvbiBzbGlkaW5nIHdpbmRvd1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVudGVycHJpc2VSYXRlTGltaXQoXHJcbiAga2V5OiBzdHJpbmcsXHJcbiAgd2luZG93TXM6IG51bWJlcixcclxuICBtYXhSZXF1ZXN0czogbnVtYmVyXHJcbik6IFByb21pc2U8e1xyXG4gIGFsbG93ZWQ6IGJvb2xlYW47XHJcbiAgY291bnQ6IG51bWJlcjtcclxuICByZW1haW5pbmc6IG51bWJlcjtcclxuICByZXNldFRpbWU6IG51bWJlcjtcclxuICByZXRyeUFmdGVyPzogbnVtYmVyO1xyXG59IHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBnZXRSZWRpc0NsaWVudCgpO1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IHdpbmRvdyA9IE1hdGguZmxvb3Iobm93IC8gd2luZG93TXMpO1xyXG4gICAgY29uc3QgcmVkaXNLZXkgPSBgcmF0ZV9saW1pdDoke2tleX06JHt3aW5kb3d9YDtcclxuXHJcbiAgICAvLyBVc2FyIHBpcGVsaW5lIHBhcmEgb3BlcmFjaW9uZXMgYXTDs21pY2FzXHJcbiAgICBjb25zdCBwaXBlbGluZSA9IGNsaWVudC5waXBlbGluZSgpO1xyXG4gICAgcGlwZWxpbmUuaW5jcihyZWRpc0tleSk7XHJcbiAgICBwaXBlbGluZS5leHBpcmUocmVkaXNLZXksIE1hdGguY2VpbCh3aW5kb3dNcyAvIDEwMDApKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcGlwZWxpbmUuZXhlYygpO1xyXG5cclxuICAgIGlmICghcmVzdWx0cyB8fCByZXN1bHRzLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb3VudCA9IHJlc3VsdHNbMF1bMV0gYXMgbnVtYmVyO1xyXG4gICAgY29uc3QgcmVtYWluaW5nID0gTWF0aC5tYXgoMCwgbWF4UmVxdWVzdHMgLSBjb3VudCk7XHJcbiAgICBjb25zdCByZXNldFRpbWUgPSAod2luZG93ICsgMSkgKiB3aW5kb3dNcztcclxuICAgIGNvbnN0IGFsbG93ZWQgPSBjb3VudCA8PSBtYXhSZXF1ZXN0cztcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgIGFsbG93ZWQsXHJcbiAgICAgIGNvdW50LFxyXG4gICAgICByZW1haW5pbmcsXHJcbiAgICAgIHJlc2V0VGltZSxcclxuICAgICAgcmV0cnlBZnRlcjogYWxsb3dlZCA/IHVuZGVmaW5lZCA6IE1hdGguY2VpbCgocmVzZXRUaW1lIC0gbm93KSAvIDEwMDApXHJcbiAgICB9O1xyXG5cclxuICAgIGxvZ2dlci5kZWJ1ZyhMb2dDYXRlZ29yeS5BUEksICdFbnRlcnByaXNlIHJhdGUgbGltaXQgY2hlY2snLCB7XHJcbiAgICAgIGtleTogcmVkaXNLZXksXHJcbiAgICAgIGNvdW50LFxyXG4gICAgICBtYXhSZXF1ZXN0cyxcclxuICAgICAgYWxsb3dlZCxcclxuICAgICAgcmVtYWluaW5nXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2dnZXIuZXJyb3IoTG9nQ2F0ZWdvcnkuQVBJLCAnRW50ZXJwcmlzZSByYXRlIGxpbWl0IGZhaWxlZCcsIGVycm9yIGFzIEVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJhdGUgbGltaXRpbmcgY29uIG3Dumx0aXBsZXMgdmVudGFuYXMgKG3DoXMgcHJlY2lzbylcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzbGlkaW5nV2luZG93UmF0ZUxpbWl0KFxyXG4gIGtleTogc3RyaW5nLFxyXG4gIHdpbmRvd01zOiBudW1iZXIsXHJcbiAgbWF4UmVxdWVzdHM6IG51bWJlcixcclxuICBwcmVjaXNpb246IG51bWJlciA9IDEwXHJcbik6IFByb21pc2U8e1xyXG4gIGFsbG93ZWQ6IGJvb2xlYW47XHJcbiAgY291bnQ6IG51bWJlcjtcclxuICByZW1haW5pbmc6IG51bWJlcjtcclxuICByZXNldFRpbWU6IG51bWJlcjtcclxufSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UmVkaXNDbGllbnQoKTtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCB3aW5kb3dTaXplID0gTWF0aC5mbG9vcih3aW5kb3dNcyAvIHByZWNpc2lvbik7XHJcbiAgICBjb25zdCBjdXJyZW50V2luZG93ID0gTWF0aC5mbG9vcihub3cgLyB3aW5kb3dTaXplKTtcclxuXHJcbiAgICAvLyBMaW1waWFyIHZlbnRhbmFzIGFudGlndWFzIHkgY29udGFyIHJlcXVlc3RzIGVuIHZlbnRhbmEgYWN0dWFsXHJcbiAgICBjb25zdCBwaXBlbGluZSA9IGNsaWVudC5waXBlbGluZSgpO1xyXG5cclxuICAgIC8vIEVsaW1pbmFyIHZlbnRhbmFzIG3DoXMgYW50aWd1YXMgcXVlIGVsIHBlcsOtb2RvIGRlIHJhdGUgbGltaXRpbmdcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHByZWNpc2lvbjsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IG9sZFdpbmRvdyA9IGN1cnJlbnRXaW5kb3cgLSBwcmVjaXNpb24gLSBpO1xyXG4gICAgICBwaXBlbGluZS5kZWwoYCR7a2V5fToke29sZFdpbmRvd31gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbmNyZW1lbnRhciBjb250YWRvciBwYXJhIHZlbnRhbmEgYWN0dWFsXHJcbiAgICBjb25zdCBjdXJyZW50S2V5ID0gYCR7a2V5fToke2N1cnJlbnRXaW5kb3d9YDtcclxuICAgIHBpcGVsaW5lLmluY3IoY3VycmVudEtleSk7XHJcbiAgICBwaXBlbGluZS5leHBpcmUoY3VycmVudEtleSwgTWF0aC5jZWlsKHdpbmRvd01zIC8gMTAwMCkpO1xyXG5cclxuICAgIC8vIE9idGVuZXIgY29udGFkb3JlcyBkZSB0b2RhcyBsYXMgdmVudGFuYXMgZW4gZWwgcGVyw61vZG9cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlY2lzaW9uOyBpKyspIHtcclxuICAgICAgY29uc3Qgd2luZG93S2V5ID0gYCR7a2V5fToke2N1cnJlbnRXaW5kb3cgLSBpfWA7XHJcbiAgICAgIHBpcGVsaW5lLmdldCh3aW5kb3dLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwaXBlbGluZS5leGVjKCk7XHJcblxyXG4gICAgaWYgKCFyZXN1bHRzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGN1bGFyIHRvdGFsIGRlIHJlcXVlc3RzIGVuIGxhIHZlbnRhbmEgZGVzbGl6YW50ZVxyXG4gICAgbGV0IHRvdGFsQ291bnQgPSAwO1xyXG4gICAgY29uc3QgY291bnRSZXN1bHRzID0gcmVzdWx0cy5zbGljZShwcmVjaXNpb24gKyAyKTsgLy8gU2FsdGFyIG9wZXJhY2lvbmVzIGRlIGxpbXBpZXphIGUgaW5jcmVtZW50b1xyXG5cclxuICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIGNvdW50UmVzdWx0cykge1xyXG4gICAgICBpZiAocmVzdWx0WzFdKSB7XHJcbiAgICAgICAgdG90YWxDb3VudCArPSBwYXJzZUludChyZXN1bHRbMV0gYXMgc3RyaW5nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlbWFpbmluZyA9IE1hdGgubWF4KDAsIG1heFJlcXVlc3RzIC0gdG90YWxDb3VudCk7XHJcbiAgICBjb25zdCBhbGxvd2VkID0gdG90YWxDb3VudCA8PSBtYXhSZXF1ZXN0cztcclxuICAgIGNvbnN0IHJlc2V0VGltZSA9IChjdXJyZW50V2luZG93ICsgMSkgKiB3aW5kb3dTaXplO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFsbG93ZWQsXHJcbiAgICAgIGNvdW50OiB0b3RhbENvdW50LFxyXG4gICAgICByZW1haW5pbmcsXHJcbiAgICAgIHJlc2V0VGltZVxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1NsaWRpbmcgd2luZG93IHJhdGUgbGltaXQgZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogT2J0ZW5lciBlc3RhZMOtc3RpY2FzIGRlIHJhdGUgbGltaXRpbmdcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSYXRlTGltaXRTdGF0cyhwYXR0ZXJuOiBzdHJpbmcgPSAncmF0ZV9saW1pdDoqJyk6IFByb21pc2U8e1xyXG4gIHRvdGFsS2V5czogbnVtYmVyO1xyXG4gIGFjdGl2ZVdpbmRvd3M6IG51bWJlcjtcclxuICB0b3BLZXlzOiBBcnJheTx7IGtleTogc3RyaW5nOyBjb3VudDogbnVtYmVyOyB0dGw6IG51bWJlciB9PjtcclxufSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UmVkaXNDbGllbnQoKTtcclxuICAgIGNvbnN0IGtleXMgPSBhd2FpdCBjbGllbnQua2V5cyhwYXR0ZXJuKTtcclxuXHJcbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3RhbEtleXM6IDAsXHJcbiAgICAgICAgYWN0aXZlV2luZG93czogMCxcclxuICAgICAgICB0b3BLZXlzOiBbXVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9idGVuZXIgaW5mb3JtYWNpw7NuIGRlIGxhcyBjbGF2ZXMgbcOhcyBhY3RpdmFzXHJcbiAgICBjb25zdCBwaXBlbGluZSA9IGNsaWVudC5waXBlbGluZSgpO1xyXG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIHBpcGVsaW5lLmdldChrZXkpO1xyXG4gICAgICBwaXBlbGluZS50dGwoa2V5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwaXBlbGluZS5leGVjKCk7XHJcblxyXG4gICAgaWYgKCFyZXN1bHRzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGtleVN0YXRzOiBBcnJheTx7IGtleTogc3RyaW5nOyBjb3VudDogbnVtYmVyOyB0dGw6IG51bWJlciB9PiA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBjb3VudFJlc3VsdCA9IHJlc3VsdHNbaSAqIDJdO1xyXG4gICAgICBjb25zdCB0dGxSZXN1bHQgPSByZXN1bHRzW2kgKiAyICsgMV07XHJcblxyXG4gICAgICBpZiAoY291bnRSZXN1bHRbMV0gJiYgdHRsUmVzdWx0WzFdKSB7XHJcbiAgICAgICAga2V5U3RhdHMucHVzaCh7XHJcbiAgICAgICAgICBrZXk6IGtleXNbaV0sXHJcbiAgICAgICAgICBjb3VudDogcGFyc2VJbnQoY291bnRSZXN1bHRbMV0gYXMgc3RyaW5nKSxcclxuICAgICAgICAgIHR0bDogdHRsUmVzdWx0WzFdIGFzIG51bWJlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3JkZW5hciBwb3IgY291bnQgZGVzY2VuZGVudGVcclxuICAgIGtleVN0YXRzLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3RhbEtleXM6IGtleXMubGVuZ3RoLFxyXG4gICAgICBhY3RpdmVXaW5kb3dzOiBrZXlTdGF0cy5maWx0ZXIoc3RhdCA9PiBzdGF0LnR0bCA+IDApLmxlbmd0aCxcclxuICAgICAgdG9wS2V5czoga2V5U3RhdHMuc2xpY2UoMCwgMTApIC8vIFRvcCAxMFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1JhdGUgbGltaXQgc3RhdHMgZmFpbGVkJywgZXJyb3IgYXMgRXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTGltcGlhciBjbGF2ZXMgZGUgcmF0ZSBsaW1pdGluZyBleHBpcmFkYXNcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwUmF0ZUxpbWl0S2V5cyhwYXR0ZXJuOiBzdHJpbmcgPSAncmF0ZV9saW1pdDoqJyk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldFJlZGlzQ2xpZW50KCk7XHJcbiAgICBjb25zdCBrZXlzID0gYXdhaXQgY2xpZW50LmtleXMocGF0dGVybik7XHJcblxyXG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBUVEwgZGUgY2FkYSBjbGF2ZSB5IGVsaW1pbmFyIGxhcyBleHBpcmFkYXNcclxuICAgIGNvbnN0IHBpcGVsaW5lID0gY2xpZW50LnBpcGVsaW5lKCk7XHJcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgcGlwZWxpbmUudHRsKGtleSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB0dGxSZXN1bHRzID0gYXdhaXQgcGlwZWxpbmUuZXhlYygpO1xyXG5cclxuICAgIGlmICghdHRsUmVzdWx0cykge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBleHBpcmVkS2V5czogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgdHRsUmVzdWx0ID0gdHRsUmVzdWx0c1tpXTtcclxuICAgICAgaWYgKHR0bFJlc3VsdFsxXSA9PT0gLTIpIHsgLy8gQ2xhdmUgZXhwaXJhZGFcclxuICAgICAgICBleHBpcmVkS2V5cy5wdXNoKGtleXNbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4cGlyZWRLZXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgYXdhaXQgY2xpZW50LmRlbCguLi5leHBpcmVkS2V5cyk7XHJcbiAgICAgIGxvZ2dlci5pbmZvKExvZ0NhdGVnb3J5LkFQSSwgYENsZWFuZWQgdXAgJHtleHBpcmVkS2V5cy5sZW5ndGh9IGV4cGlyZWQgcmF0ZSBsaW1pdCBrZXlzYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4cGlyZWRLZXlzLmxlbmd0aDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nZ2VyLmVycm9yKExvZ0NhdGVnb3J5LkFQSSwgJ1JhdGUgbGltaXQgY2xlYW51cCBmYWlsZWQnLCBlcnJvciBhcyBFcnJvcik7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbn1cclxuXHJcbi8vIEV4cG9ydGFyIGNsaWVudGUgUmVkaXMgcGFyYSB1c28gZGlyZWN0b1xyXG5leHBvcnQgY29uc3QgcmVkaXMgPSBnZXRSZWRpc0NsaWVudCgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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