{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-testing-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - AUTOMATED TESTING MANAGER\r\n// Sistema de testing automatizado con regression, performance y accessibility\r\n// ===================================\r\n\r\n// Importar performance hooks solo en servidor\r\nconst perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null;\r\n\r\n// Helper para obtener timestamp de performance\r\nconst getPerformanceNow = (): number => {\r\n  if (typeof window !== 'undefined' && window.performance) {\r\n    return window.getPerformanceNow();\r\n  }\r\n  if (perfHooks && perfHooks.performance) {\r\n    return perfHooks.getPerformanceNow();\r\n  }\r\n  return Date.now();\r\n};\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\ninterface TestResult {\r\n  name: string;\r\n  status: 'passed' | 'failed' | 'skipped';\r\n  duration: number;\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\ninterface TestSuite {\r\n  name: string;\r\n  tests: TestResult[];\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  duration: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  loadTime: number;\r\n  renderTime: number;\r\n  memoryUsage: number;\r\n  bundleSize: number;\r\n  lighthouse?: {\r\n    performance: number;\r\n    accessibility: number;\r\n    bestPractices: number;\r\n    seo: number;\r\n  };\r\n}\r\n\r\ninterface AccessibilityResult {\r\n  violations: Array<{\r\n    id: string;\r\n    impact: 'minor' | 'moderate' | 'serious' | 'critical';\r\n    description: string;\r\n    nodes: number;\r\n  }>;\r\n  passes: number;\r\n  incomplete: number;\r\n  score: number;\r\n}\r\n\r\ninterface RegressionTestConfig {\r\n  baselineUrl?: string;\r\n  threshold: number;\r\n  components: string[];\r\n  apis: string[];\r\n}\r\n\r\n// ===================================\r\n// AUTOMATED TESTING MANAGER\r\n// ===================================\r\n\r\nclass AutomatedTestingManager {\r\n  private static instance: AutomatedTestingManager;\r\n  private testResults: Map<string, TestSuite> = new Map();\r\n  private performanceBaselines: Map<string, PerformanceMetrics> = new Map();\r\n\r\n  static getInstance(): AutomatedTestingManager {\r\n    if (!AutomatedTestingManager.instance) {\r\n      AutomatedTestingManager.instance = new AutomatedTestingManager();\r\n    }\r\n    return AutomatedTestingManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // REGRESSION TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de regresión\r\n   */\r\n  async runRegressionTests(config: RegressionTestConfig): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de regresión...');\r\n\r\n    // Test de componentes\r\n    for (const component of config.components) {\r\n      const testResult = await this.testComponentRegression(component, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de APIs\r\n    for (const api of config.apis) {\r\n      const testResult = await this.testApiRegression(api, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Regression Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('regression', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de regresión de componente\r\n   */\r\n  private async testComponentRegression(component: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de componente\r\n      const currentMetrics = await this.measureComponentPerformance(component);\r\n      const baseline = this.performanceBaselines.get(component);\r\n\r\n      if (!baseline) {\r\n        // Establecer baseline si no existe\r\n        this.performanceBaselines.set(component, currentMetrics);\r\n        return {\r\n          name: `${component} - Baseline Set`,\r\n          status: 'passed',\r\n          duration: getPerformanceNow() - startTime,\r\n          details: currentMetrics\r\n        };\r\n      }\r\n\r\n      // Comparar con baseline\r\n      const performanceDelta = (currentMetrics.renderTime - baseline.renderTime) / baseline.renderTime;\r\n      \r\n      if (performanceDelta > threshold) {\r\n        return {\r\n          name: `${component} - Performance Regression`,\r\n          status: 'failed',\r\n          duration: getPerformanceNow() - startTime,\r\n          error: `Performance degraded by ${(performanceDelta * 100).toFixed(2)}%`,\r\n          details: { current: currentMetrics, baseline }\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${component} - Performance Check`,\r\n        status: 'passed',\r\n        duration: getPerformanceNow() - startTime,\r\n        details: { current: currentMetrics, baseline }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de regresión de API\r\n   */\r\n  private async testApiRegression(api: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de API\r\n      const response = await this.testApiEndpoint(api);\r\n      const responseTime = getPerformanceNow() - startTime;\r\n\r\n      if (responseTime > threshold) {\r\n        return {\r\n          name: `${api} - Response Time`,\r\n          status: 'failed',\r\n          duration: responseTime,\r\n          error: `Response time ${responseTime.toFixed(2)}ms exceeds threshold ${threshold}ms`\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${api} - Response Time`,\r\n        status: 'passed',\r\n        duration: responseTime,\r\n        details: { responseTime, status: response.status }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${api} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // PERFORMANCE TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de performance\r\n   */\r\n  async runPerformanceTests(components: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de performance...');\r\n\r\n    for (const component of components) {\r\n      const testResult = await this.testComponentPerformance(component);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de bundle size\r\n    const bundleTest = await this.testBundleSize();\r\n    tests.push(bundleTest);\r\n\r\n    // Test de memory leaks\r\n    const memoryTest = await this.testMemoryLeaks();\r\n    tests.push(memoryTest);\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Performance Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('performance', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Medir performance de componente\r\n   */\r\n  private async measureComponentPerformance(component: string): Promise<PerformanceMetrics> {\r\n    // Simular medición de performance\r\n    return {\r\n      loadTime: Math.random() * 100 + 50, // 50-150ms\r\n      renderTime: Math.random() * 20 + 5, // 5-25ms\r\n      memoryUsage: Math.random() * 10 + 5, // 5-15MB\r\n      bundleSize: Math.random() * 50 + 20 // 20-70KB\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test de performance de componente\r\n   */\r\n  private async testComponentPerformance(component: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      const metrics = await this.measureComponentPerformance(component);\r\n      \r\n      // Verificar thresholds\r\n      const issues: string[] = [];\r\n      if (metrics.renderTime > 16) {issues.push('Render time > 16ms');}\r\n      if (metrics.memoryUsage > 50) {issues.push('Memory usage > 50MB');}\r\n      if (metrics.bundleSize > 100) {issues.push('Bundle size > 100KB');}\r\n\r\n      return {\r\n        name: `${component} - Performance`,\r\n        status: issues.length === 0 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: issues.length > 0 ? issues.join(', ') : undefined,\r\n        details: metrics\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Performance Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de bundle size\r\n   */\r\n  private async testBundleSize(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular análisis de bundle\r\n      const bundleSize = Math.random() * 1000 + 500; // 500-1500KB\r\n      const threshold = 1000; // 1MB\r\n\r\n      return {\r\n        name: 'Bundle Size Check',\r\n        status: bundleSize <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: bundleSize > threshold ? `Bundle size ${bundleSize.toFixed(2)}KB exceeds ${threshold}KB` : undefined,\r\n        details: { bundleSize, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Bundle Size Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de memory leaks\r\n   */\r\n  private async testMemoryLeaks(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de memory leaks\r\n      const memoryGrowth = Math.random() * 20; // 0-20MB growth\r\n      const threshold = 10; // 10MB threshold\r\n\r\n      return {\r\n        name: 'Memory Leak Check',\r\n        status: memoryGrowth <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: memoryGrowth > threshold ? `Memory growth ${memoryGrowth.toFixed(2)}MB exceeds ${threshold}MB` : undefined,\r\n        details: { memoryGrowth, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Memory Leak Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ACCESSIBILITY TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de accesibilidad\r\n   */\r\n  async runAccessibilityTests(pages: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de accesibilidad...');\r\n\r\n    for (const page of pages) {\r\n      const testResult = await this.testPageAccessibility(page);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Accessibility Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('accessibility', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de accesibilidad de página\r\n   */\r\n  private async testPageAccessibility(page: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de accesibilidad\r\n      const result = await this.runAccessibilityAudit(page);\r\n      \r\n      return {\r\n        name: `${page} - Accessibility`,\r\n        status: result.score >= 80 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: result.score < 80 ? `Accessibility score ${result.score}% below 80%` : undefined,\r\n        details: result\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${page} - Accessibility Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar auditoría de accesibilidad\r\n   */\r\n  private async runAccessibilityAudit(page: string): Promise<AccessibilityResult> {\r\n    // Simular auditoría de accesibilidad\r\n    const violations = Math.floor(Math.random() * 5); // 0-4 violations\r\n    const score = Math.max(60, 100 - (violations * 10)); // 60-100% score\r\n\r\n    return {\r\n      violations: Array.from({ length: violations }, (_, i) => ({\r\n        id: `violation-${i}`,\r\n        impact: ['minor', 'moderate', 'serious', 'critical'][Math.floor(Math.random() * 4)] as any,\r\n        description: `Accessibility violation ${i + 1}`,\r\n        nodes: Math.floor(Math.random() * 5) + 1\r\n      })),\r\n      passes: Math.floor(Math.random() * 20) + 10,\r\n      incomplete: Math.floor(Math.random() * 3),\r\n      score\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // UTILITY METHODS\r\n  // ===================================\r\n\r\n  /**\r\n   * Test de endpoint de API\r\n   */\r\n  private async testApiEndpoint(endpoint: string): Promise<{ status: number; responseTime: number }> {\r\n    // Simular llamada a API\r\n    const responseTime = Math.random() * 200 + 50; // 50-250ms\r\n    const status = Math.random() > 0.1 ? 200 : 500; // 90% success rate\r\n\r\n    return { status, responseTime };\r\n  }\r\n\r\n  /**\r\n   * Obtener resultados de tests\r\n   */\r\n  getTestResults(): Map<string, TestSuite> {\r\n    return this.testResults;\r\n  }\r\n\r\n  /**\r\n   * Obtener resumen de tests\r\n   */\r\n  getTestSummary() {\r\n    const suites = Array.from(this.testResults.values());\r\n    const totalTests = suites.reduce((sum, suite) => sum + suite.totalTests, 0);\r\n    const passedTests = suites.reduce((sum, suite) => sum + suite.passedTests, 0);\r\n    const failedTests = suites.reduce((sum, suite) => sum + suite.failedTests, 0);\r\n    const totalDuration = suites.reduce((sum, suite) => sum + suite.duration, 0);\r\n\r\n    return {\r\n      totalSuites: suites.length,\r\n      totalTests,\r\n      passedTests,\r\n      failedTests,\r\n      successRate: totalTests > 0 ? (passedTests / totalTests) * 100 : 0,\r\n      totalDuration\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Limpiar resultados\r\n   */\r\n  clearResults(): void {\r\n    this.testResults.clear();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport const automatedTestingManager = AutomatedTestingManager.getInstance();\r\n\r\nexport default {\r\n  automatedTestingManager,\r\n  AutomatedTestingManager\r\n};\r\n\r\nexport type {\r\n  TestResult,\r\n  TestSuite,\r\n  PerformanceMetrics,\r\n  AccessibilityResult,\r\n  RegressionTestConfig\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["automatedTestingManager","perfHooks","window","require","getPerformanceNow","performance","Date","now","AutomatedTestingManager","getInstance","instance","runRegressionTests","config","startTime","tests","console","log","component","components","testResult","testComponentRegression","threshold","push","api","apis","testApiRegression","duration","suite","name","totalTests","length","passedTests","filter","t","status","failedTests","skippedTests","testResults","set","currentMetrics","measureComponentPerformance","baseline","performanceBaselines","get","details","performanceDelta","renderTime","error","toFixed","current","Error","message","response","testApiEndpoint","responseTime","runPerformanceTests","testComponentPerformance","bundleTest","testBundleSize","memoryTest","testMemoryLeaks","loadTime","Math","random","memoryUsage","bundleSize","metrics","issues","join","undefined","memoryGrowth","runAccessibilityTests","pages","page","testPageAccessibility","result","runAccessibilityAudit","score","violations","floor","max","Array","from","_","i","id","impact","description","nodes","passes","incomplete","endpoint","getTestResults","getTestSummary","suites","values","reduce","sum","totalDuration","totalSuites","successRate","clearResults","clear","Map"],"mappings":"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"}