{"version":3,"names":["CustomSupabaseAdapter","cov_9jf51avdx","f","supabase","s","_server","createAdminClient","createUser","user","console","log","userId","b","id","crypto","randomUUID","data","error","from","insert","name","email","emailVerified","image","select","single","getUser","eq","getUserByEmail","message","getUserByAccount","providerAccountId","provider","account","accountError","userError","updateUser","update","deleteUser","delete","linkAccount","type","refresh_token","access_token","expires_at","token_type","scope","id_token","session_state","oauth_token_secret","oauth_token","unlinkAccount","createSession","sessionToken","expires","getSessionAndUser","session","updateSession","deleteSession","createVerificationToken","identifier","token","useVerificationToken"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth-adapter.ts"],"sourcesContent":["// =====================================================\r\n// CUSTOM NEXTAUTH.JS ADAPTER FOR SUPABASE\r\n// Descripción: Adaptador personalizado para NextAuth.js con Supabase\r\n// Basado en: NextAuth.js Adapter interface y documentación oficial\r\n// =====================================================\r\n\r\nimport type { Adapter } from \"next-auth/adapters\"\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server'\r\n\r\nexport function CustomSupabaseAdapter(): Adapter {\r\n  const supabase = createAdminClient()\r\n\r\n  return {\r\n    async createUser(user) {\r\n      try {\r\n        console.log('[ADAPTER] Creating user:', user)\r\n\r\n        const userId = user.id || crypto.randomUUID()\r\n        const { data, error } = await supabase\r\n          .from('users')\r\n          .insert({\r\n            id: userId,\r\n            name: user.name,\r\n            email: user.email,\r\n            emailVerified: user.emailVerified,\r\n            image: user.image,\r\n          })\r\n          .select()\r\n          .single()\r\n\r\n        if (error) {\r\n          console.error('[ADAPTER] Error creating user:', error)\r\n          throw error\r\n        }\r\n\r\n        console.log('[ADAPTER] User created successfully:', data)\r\n        return data\r\n      } catch (error) {\r\n        console.error('[ADAPTER] Exception in createUser:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async getUser(id) {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n\r\n      if (error) return null\r\n      return data\r\n    },\r\n\r\n    async getUserByEmail(email) {\r\n      try {\r\n        console.log('[ADAPTER] Getting user by email:', email)\r\n        const { data, error } = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .eq('email', email)\r\n          .single()\r\n\r\n        if (error) {\r\n          console.log('[ADAPTER] No user found by email:', error.message)\r\n          return null\r\n        }\r\n        console.log('[ADAPTER] User found by email:', data)\r\n        return data\r\n      } catch (error) {\r\n        console.error('[ADAPTER] Exception in getUserByEmail:', error)\r\n        return null\r\n      }\r\n    },\r\n\r\n    async getUserByAccount({ providerAccountId, provider }) {\r\n      try {\r\n        console.log('[ADAPTER] Getting user by account:', { providerAccountId, provider })\r\n\r\n        // Buscar la cuenta primero\r\n        const { data: account, error: accountError } = await supabase\r\n          .from('accounts')\r\n          .select('userId')\r\n          .eq('provider', provider)\r\n          .eq('providerAccountId', providerAccountId)\r\n          .single()\r\n\r\n        if (accountError || !account) {\r\n          console.log('[ADAPTER] No account found:', accountError?.message)\r\n          return null\r\n        }\r\n\r\n        // Luego buscar el usuario\r\n        const { data: user, error: userError } = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .eq('id', account.userId)\r\n          .single()\r\n\r\n        if (userError) {\r\n          console.log('[ADAPTER] No user found for account:', userError.message)\r\n          return null\r\n        }\r\n\r\n        console.log('[ADAPTER] User found by account:', user)\r\n        return user\r\n      } catch (error) {\r\n        console.error('[ADAPTER] Exception in getUserByAccount:', error)\r\n        return null\r\n      }\r\n    },\r\n\r\n    async updateUser(user) {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .update({\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified,\r\n          image: user.image,\r\n        })\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n\r\n    async deleteUser(userId) {\r\n      const { error } = await supabase\r\n        .from('users')\r\n        .delete()\r\n        .eq('id', userId)\r\n\r\n      if (error) throw error\r\n    },\r\n\r\n    async linkAccount(account) {\r\n      try {\r\n        console.log('[ADAPTER] Linking account:', account)\r\n        const { data, error } = await supabase\r\n          .from('accounts')\r\n          .insert({\r\n            id: crypto.randomUUID(),\r\n            type: account.type,\r\n            provider: account.provider,\r\n            providerAccountId: account.providerAccountId,\r\n            refresh_token: account.refresh_token,\r\n            access_token: account.access_token,\r\n            expires_at: account.expires_at,\r\n            token_type: account.token_type,\r\n            scope: account.scope,\r\n            id_token: account.id_token,\r\n            session_state: account.session_state,\r\n            oauth_token_secret: account.oauth_token_secret,\r\n            oauth_token: account.oauth_token,\r\n            userId: account.userId,\r\n          })\r\n          .select()\r\n          .single()\r\n\r\n        if (error) {\r\n          console.error('[ADAPTER] Error linking account:', error)\r\n          throw error\r\n        }\r\n\r\n        console.log('[ADAPTER] Account linked successfully:', data)\r\n        return data\r\n      } catch (error) {\r\n        console.error('[ADAPTER] Exception in linkAccount:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async unlinkAccount({ providerAccountId, provider }) {\r\n      const { error } = await supabase\r\n        .from('accounts')\r\n        .delete()\r\n        .eq('provider', provider)\r\n        .eq('providerAccountId', providerAccountId)\r\n\r\n      if (error) throw error\r\n    },\r\n\r\n    async createSession({ sessionToken, userId, expires }) {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          sessionToken,\r\n          userId,\r\n          expires,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n\r\n    async getSessionAndUser(sessionToken) {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .select(`\r\n          *,\r\n          user:userId (*)\r\n        `)\r\n        .eq('sessionToken', sessionToken)\r\n        .single()\r\n\r\n      if (error) return null\r\n      if (!data?.user) return null\r\n\r\n      return {\r\n        session: {\r\n          sessionToken: data.sessionToken,\r\n          userId: data.userId,\r\n          expires: data.expires,\r\n        },\r\n        user: data.user,\r\n      }\r\n    },\r\n\r\n    async updateSession({ sessionToken, ...session }) {\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update(session)\r\n        .eq('sessionToken', sessionToken)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n\r\n    async deleteSession(sessionToken) {\r\n      const { error } = await supabase\r\n        .from('sessions')\r\n        .delete()\r\n        .eq('sessionToken', sessionToken)\r\n\r\n      if (error) throw error\r\n    },\r\n\r\n    async createVerificationToken({ identifier, expires, token }) {\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .insert({\r\n          identifier,\r\n          expires,\r\n          token,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) throw error\r\n      return data\r\n    },\r\n\r\n    async useVerificationToken({ identifier, token }) {\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .delete()\r\n        .eq('identifier', identifier)\r\n        .eq('token', token)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) return null\r\n      return data\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}