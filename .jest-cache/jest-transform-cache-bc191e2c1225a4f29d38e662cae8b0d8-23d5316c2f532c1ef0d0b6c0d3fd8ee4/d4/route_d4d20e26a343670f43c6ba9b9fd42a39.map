{"version":3,"names":["cov_ah28xr4wa","actualCoverage","s","DELETE","f","GET","POST","runtime","metricsStore","performHealthCheck","checks","api","database","checkDatabase","memory","checkMemory","performance","checkPerformance","healthyCount","Object","values","filter","Boolean","length","status","b","timestamp","Date","now","process","memoryUsage","usage","usedMB","heapUsed","analytics","_performancemonitoring","APIAnalytics","report","generateReport","averageResponseTime","errorRate","formatTimeWindow","ms","minutes","hours","days","Math","round","request","session","_config","auth","user","_server","NextResponse","json","error","message","searchParams","URL","url","timeframe","get","includeHealth","timeWindow","startTime","filteredMetrics","metric","endpointTimes","Map","forEach","path","has","set","responseTime","metrics","renderTime","TTI","push","slowestEndpoints","Array","from","entries","map","times","avgTime","reduce","a","sort","slice","errorsByStatus","floor","random","healthCheck","response","toISOString","timeWindowHuman","totalRequests","meta","generatedAt","version","environment","env","NODE_ENV","console","isDevelopment","authHeader","headers","body","userAgent","connection","batchSize","isArray","processedMetrics","newMetric","splice","violations","checkBudgetViolations","warn","success","processedCount","totalStored","calculateAggregatedStats","LCP","avg","p50","p95","p99","FID","CLS","FCP","calculatePercentiles","sorted","len","sum","val","lcpValues","m","v","undefined","fidValues","clsValues","fcpValues","renderValues","budgets","key","budget","value","olderThan","cutoffTime","originalCount","deletedCount","data","remainingCount"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\performance\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Performance Metrics\r\n// Endpoint para recopilar y servir métricas de performance\r\n// Integrado con sistema de monitoring de producción\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { APIAnalytics } from '@/middleware/performance-monitoring';\r\nimport { productionMonitor } from '@/config/production-monitoring';\r\n\r\ninterface PerformanceMetric {\r\n  timestamp: number;\r\n  url: string;\r\n  metrics: {\r\n    LCP?: number;\r\n    FID?: number;\r\n    CLS?: number;\r\n    FCP?: number;\r\n    TTI?: number;\r\n    bundleSize?: number;\r\n    renderTime?: number;\r\n  };\r\n  userAgent: string;\r\n  connection?: string;\r\n}\r\n\r\n// Interfaz para health check\r\ninterface HealthCheck {\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  checks: {\r\n    api: boolean;\r\n    database: boolean;\r\n    memory: boolean;\r\n    performance: boolean;\r\n  };\r\n  timestamp: number;\r\n}\r\n\r\n// Almacenamiento temporal de métricas (en producción usar base de datos)\r\nlet metricsStore: PerformanceMetric[] = [];\r\n\r\n// Función para realizar health check\r\nasync function performHealthCheck(): Promise<HealthCheck> {\r\n  const checks = {\r\n    api: true, // Siempre true si llegamos aquí\r\n    database: await checkDatabase(),\r\n    memory: await checkMemory(),\r\n    performance: await checkPerformance()\r\n  };\r\n\r\n  const healthyCount = Object.values(checks).filter(Boolean).length;\r\n  let status: 'healthy' | 'degraded' | 'unhealthy';\r\n  \r\n  if (healthyCount === 4) {status = 'healthy';}\r\n  else if (healthyCount >= 2) {status = 'degraded';}\r\n  else {status = 'unhealthy';}\r\n\r\n  return {\r\n    status,\r\n    checks,\r\n    timestamp: Date.now()\r\n  };\r\n}\r\n\r\n// Verificar estado de la base de datos\r\nasync function checkDatabase(): Promise<boolean> {\r\n  try {\r\n    // Aquí iría la verificación real de la DB\r\n    // Por ahora simulamos una verificación exitosa\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Verificar uso de memoria\r\nasync function checkMemory(): Promise<boolean> {\r\n  try {\r\n    if (typeof process !== 'undefined' && process.memoryUsage) {\r\n      const usage = process.memoryUsage();\r\n      const usedMB = usage.heapUsed / 1024 / 1024;\r\n      // Considerar unhealthy si usa más de 512MB\r\n      return usedMB < 512;\r\n    }\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Verificar rendimiento general\r\nasync function checkPerformance(): Promise<boolean> {\r\n  try {\r\n    const analytics = new APIAnalytics();\r\n    const report = analytics.generateReport();\r\n    // Considerar unhealthy si el tiempo promedio es > 2s o error rate > 10%\r\n    return report.averageResponseTime < 2000 && report.errorRate < 0.1;\r\n  } catch {\r\n    return true; // Default a healthy si no podemos verificar\r\n  }\r\n}\r\n\r\n// Función para formatear tiempo legible\r\nfunction formatTimeWindow(ms: number): string {\r\n  const minutes = ms / (1000 * 60);\r\n  const hours = minutes / 60;\r\n  const days = hours / 24;\r\n  \r\n  if (days >= 1) {return `${Math.round(days)} día${days !== 1 ? 's' : ''}`;}\r\n  if (hours >= 1) {return `${Math.round(hours)} hora${hours !== 1 ? 's' : ''}`;}\r\n  return `${Math.round(minutes)} minuto${minutes !== 1 ? 's' : ''}`;\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Unauthorized', message: 'Authentication required' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const timeframe = searchParams.get('timeframe') || '1h';\r\n    const url = searchParams.get('url');\r\n    const includeHealth = searchParams.get('health') === 'true';\r\n\r\n    // Calcular timestamp de inicio basado en timeframe\r\n    const now = Date.now();\r\n    let timeWindow = 60 * 60 * 1000; // Default 1h\r\n    \r\n    switch (timeframe) {\r\n      case '15m':\r\n        timeWindow = 15 * 60 * 1000;\r\n        break;\r\n      case '1h':\r\n        timeWindow = 60 * 60 * 1000;\r\n        break;\r\n      case '24h':\r\n        timeWindow = 24 * 60 * 60 * 1000;\r\n        break;\r\n      case '7d':\r\n        timeWindow = 7 * 24 * 60 * 60 * 1000;\r\n        break;\r\n    }\r\n    \r\n    const startTime = now - timeWindow;\r\n    \r\n    // Obtener métricas del sistema de monitoring\r\n    const analytics = new APIAnalytics();\r\n    const report = analytics.generateReport();\r\n    \r\n    // Filtrar métricas por ventana de tiempo\r\n    const filteredMetrics = metricsStore.filter(\r\n      metric => metric.timestamp >= startTime\r\n    );\r\n    \r\n    // Calcular endpoints más lentos\r\n    const endpointTimes = new Map<string, number[]>();\r\n    filteredMetrics.forEach(metric => {\r\n      const path = metric.url;\r\n      if (!endpointTimes.has(path)) {\r\n        endpointTimes.set(path, []);\r\n      }\r\n      // Usar renderTime como tiempo de respuesta si está disponible\r\n      const responseTime = metric.metrics.renderTime || metric.metrics.TTI || 0;\r\n      endpointTimes.get(path)!.push(responseTime);\r\n    });\r\n    \r\n    const slowestEndpoints = Array.from(endpointTimes.entries())\r\n      .map(([path, times]) => ({\r\n        path,\r\n        avgTime: times.reduce((a, b) => a + b, 0) / times.length\r\n      }))\r\n      .sort((a, b) => b.avgTime - a.avgTime)\r\n      .slice(0, 10);\r\n    \r\n    // Calcular errores por código de estado (simulado)\r\n    const errorsByStatus: Record<number, number> = {\r\n      404: Math.floor(Math.random() * 10),\r\n      500: Math.floor(Math.random() * 5),\r\n      503: Math.floor(Math.random() * 3)\r\n    };\r\n    \r\n    // Incluir health check si se solicita\r\n    let healthCheck = null;\r\n    if (includeHealth) {\r\n      healthCheck = await performHealthCheck();\r\n    }\r\n    \r\n    // Preparar respuesta en el formato esperado por el componente\r\n    const response = {\r\n      timestamp: new Date().toISOString(),\r\n      timeWindow,\r\n      timeWindowHuman: formatTimeWindow(timeWindow),\r\n      metrics: {\r\n        totalRequests: filteredMetrics.length,\r\n        averageResponseTime: report.averageResponseTime,\r\n        errorRate: report.errorRate,\r\n        slowestEndpoints,\r\n        errorsByStatus\r\n      },\r\n      healthCheck,\r\n      meta: {\r\n        generatedAt: Date.now(),\r\n        version: '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development'\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching performance metrics:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin (bypass para desarrollo)\r\n    const isDevelopment = process.env.NODE_ENV === 'development';\r\n    \r\n    if (!isDevelopment) {\r\n      const authHeader = request.headers.get('authorization');\r\n      if (!authHeader) {\r\n        return NextResponse.json(\r\n          { error: 'Unauthorized - Admin access required' },\r\n          { status: 401 }\r\n        );\r\n      }\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { metrics, url, userAgent, connection, timestamp, batchSize } = body;\r\n\r\n    // Validar que las métricas sean válidas\r\n    if (!metrics || !Array.isArray(metrics)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid metrics data - expected array' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar URL\r\n    if (!url || typeof url !== 'string') {\r\n      return NextResponse.json(\r\n        { error: 'Invalid URL' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Procesar cada métrica del batch\r\n    const processedMetrics: PerformanceMetric[] = [];\r\n    \r\n    for (const metric of metrics) {\r\n      if (!metric || typeof metric !== 'object') {continue;}\r\n      \r\n      const newMetric: PerformanceMetric = {\r\n        timestamp: timestamp || Date.now(),\r\n        url,\r\n        metrics: metric,\r\n        userAgent: userAgent || 'Unknown',\r\n        connection: connection || 'Unknown'\r\n      };\r\n      \r\n      processedMetrics.push(newMetric);\r\n    }\r\n\r\n    // Almacenar en memoria (limitado a 1000 métricas)\r\n    metricsStore.push(...processedMetrics);\r\n    if (metricsStore.length > 1000) {\r\n      metricsStore.splice(0, metricsStore.length - 1000); // Mantener solo las últimas 1000\r\n    }\r\n\r\n    // Verificar violaciones de presupuesto para la última métrica\r\n    const violations = processedMetrics.length > 0 ? \r\n      checkBudgetViolations(processedMetrics[processedMetrics.length - 1]) : [];\r\n    \r\n    if (violations.length > 0) {\r\n      console.warn('Performance budget violations detected:', violations);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      processedCount: processedMetrics.length,\r\n      totalStored: metricsStore.length,\r\n      violations,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error processing performance metrics:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateAggregatedStats(metrics: PerformanceMetric[]) {\r\n  if (metrics.length === 0) {\r\n    return {\r\n      LCP: { avg: 0, p50: 0, p95: 0, p99: 0 },\r\n      FID: { avg: 0, p50: 0, p95: 0, p99: 0 },\r\n      CLS: { avg: 0, p50: 0, p95: 0, p99: 0 },\r\n      FCP: { avg: 0, p50: 0, p95: 0, p99: 0 },\r\n      renderTime: { avg: 0, p50: 0, p95: 0, p99: 0 }\r\n    };\r\n  }\r\n\r\n  const calculatePercentiles = (values: number[]) => {\r\n    const sorted = values.sort((a, b) => a - b);\r\n    const len = sorted.length;\r\n    \r\n    return {\r\n      avg: values.reduce((sum, val) => sum + val, 0) / len,\r\n      p50: sorted[Math.floor(len * 0.5)],\r\n      p95: sorted[Math.floor(len * 0.95)],\r\n      p99: sorted[Math.floor(len * 0.99)]\r\n    };\r\n  };\r\n\r\n  const lcpValues = metrics.map(m => m.metrics.LCP).filter(v => v !== undefined) as number[];\r\n  const fidValues = metrics.map(m => m.metrics.FID).filter(v => v !== undefined) as number[];\r\n  const clsValues = metrics.map(m => m.metrics.CLS).filter(v => v !== undefined) as number[];\r\n  const fcpValues = metrics.map(m => m.metrics.FCP).filter(v => v !== undefined) as number[];\r\n  const renderValues = metrics.map(m => m.metrics.renderTime).filter(v => v !== undefined) as number[];\r\n\r\n  return {\r\n    LCP: calculatePercentiles(lcpValues),\r\n    FID: calculatePercentiles(fidValues),\r\n    CLS: calculatePercentiles(clsValues),\r\n    FCP: calculatePercentiles(fcpValues),\r\n    renderTime: calculatePercentiles(renderValues)\r\n  };\r\n}\r\n\r\nfunction checkBudgetViolations(metric: PerformanceMetric): string[] {\r\n  const violations: string[] = [];\r\n  const budgets = {\r\n    LCP: 2500,\r\n    FID: 100,\r\n    CLS: 0.1,\r\n    FCP: 1800,\r\n    TTI: 3800\r\n  };\r\n\r\n  Object.entries(budgets).forEach(([key, budget]) => {\r\n    const value = metric.metrics[key as keyof typeof budgets];\r\n    if (value !== undefined && value > budget) {\r\n      violations.push(`${key}: ${value} exceeds budget of ${budget}`);\r\n    }\r\n  });\r\n\r\n  return violations;\r\n}\r\n\r\n// Endpoint para limpiar métricas antiguas\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificación básica de autenticación (simplificada para demo)\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader && process.env.NODE_ENV === 'production') {\r\n      return NextResponse.json(\r\n        { error: 'Acceso no autorizado' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const olderThan = searchParams.get('olderThan') || '24h';\r\n\r\n    let cutoffTime = Date.now();\r\n    switch (olderThan) {\r\n      case '1h':\r\n        cutoffTime -= (60 * 60 * 1000);\r\n        break;\r\n      case '24h':\r\n        cutoffTime -= (24 * 60 * 60 * 1000);\r\n        break;\r\n      case '7d':\r\n        cutoffTime -= (7 * 24 * 60 * 60 * 1000);\r\n        break;\r\n    }\r\n\r\n    const originalCount = metricsStore.length;\r\n    metricsStore = metricsStore.filter(metric => metric.timestamp >= cutoffTime);\r\n    const deletedCount = originalCount - metricsStore.length;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        deletedCount,\r\n        remainingCount: metricsStore.length\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error cleaning performance metrics:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}