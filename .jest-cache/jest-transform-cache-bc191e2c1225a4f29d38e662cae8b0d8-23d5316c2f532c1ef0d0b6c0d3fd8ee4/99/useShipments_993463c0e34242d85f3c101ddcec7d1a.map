{"version":3,"names":["useBulkShipmentOperations","cov_15v1kwyijg","f","s","useCreateShipment","useDeleteShipment","useShipmentFilters","useShipmentStats","useShipments","useUpdateShipment","SHIPMENTS_QUERY_KEY","STALE_TIME","fetchShipments","params","searchParams","URLSearchParams","Object","entries","forEach","key","value","b","undefined","append","toString","response","fetch","method","headers","ok","errorData","json","catch","Error","error","status","statusText","createShipment","data","body","JSON","stringify","result","updateShipment","id","deleteShipment","queryClient","_reactquery","useQueryClient","queryKey","isLoading","refetch","useQuery","queryFn","staleTime","retry","retryDelay","attemptIndex","Math","min","useMutation","mutationFn","onSuccess","newShipment","invalidateQueries","_sonner","toast","success","description","shipment_number","onError","message","updatedShipment","setQueryData","_","deletedId","removeQueries","filters","setFilters","_react","useState","page","limit","order_by","order_direction","updateFilter","useCallback","prev","resetFilters","setPage","setStatus","setSearch","search","setDateRange","dateFrom","dateTo","date_from","date_to","shipments","total","length","byStatus","reduce","acc","shipment","totalCost","total_cost","averageCost","selectedShipments","setSelectedShipments","bulkUpdateStatus","shipmentIds","promises","map","Promise","all","bulkDelete","toggleSelection","shipmentId","includes","filter","selectAll","clearSelection","isPending"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useShipments.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: SHIPMENTS MANAGEMENT ENTERPRISE\r\n// Descripción: Hook para gestión completa de envíos\r\n// Basado en: Patrones TanStack Query + React Hook Form\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { useState, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  Shipment,\r\n  CreateShipmentRequest,\r\n  UpdateShipmentRequest,\r\n  GetShipmentsRequest,\r\n  PaginatedResponse,\r\n  UseShipmentsReturn,\r\n  ShipmentStatus \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN DE QUERIES\r\n// =====================================================\r\n\r\nconst SHIPMENTS_QUERY_KEY = ['admin', 'logistics', 'shipments'];\r\nconst STALE_TIME = 30000; // 30 segundos\r\n\r\n// =====================================================\r\n// FUNCIONES DE API\r\n// =====================================================\r\n\r\nasync function fetchShipments(params: GetShipmentsRequest): Promise<PaginatedResponse<Shipment>> {\r\n  const searchParams = new URLSearchParams();\r\n  \r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (value !== undefined && value !== null) {\r\n      searchParams.append(key, value.toString());\r\n    }\r\n  });\r\n  \r\n  const response = await fetch(`/api/admin/logistics/shipments?${searchParams}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function createShipment(data: CreateShipmentRequest): Promise<Shipment> {\r\n  const response = await fetch('/api/admin/logistics/shipments', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function updateShipment(id: number, data: UpdateShipmentRequest): Promise<Shipment> {\r\n  const response = await fetch(`/api/admin/logistics/shipments/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function deleteShipment(id: number): Promise<void> {\r\n  const response = await fetch(`/api/admin/logistics/shipments/${id}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL: useShipments\r\n// =====================================================\r\n\r\nexport function useShipments(params: GetShipmentsRequest = {}): UseShipmentsReturn {\r\n  const queryClient = useQueryClient();\r\n  \r\n  const queryKey = [...SHIPMENTS_QUERY_KEY, params];\r\n  \r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey,\r\n    queryFn: () => fetchShipments(params),\r\n    staleTime: STALE_TIME,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\r\n  });\r\n  \r\n  return {\r\n    data,\r\n    isLoading,\r\n    error: error as Error | null,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useCreateShipment\r\n// =====================================================\r\n\r\nexport function useCreateShipment() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: createShipment,\r\n    onSuccess: (newShipment) => {\r\n      // Invalidar cache de shipments\r\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\r\n      \r\n      // Invalidar dashboard de logística\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success('Envío creado exitosamente', {\r\n        description: `Número de envío: ${newShipment.shipment_number}`\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al crear envío', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useUpdateShipment\r\n// =====================================================\r\n\r\nexport function useUpdateShipment() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ id, data }: { id: number; data: UpdateShipmentRequest }) => \r\n      updateShipment(id, data),\r\n    onSuccess: (updatedShipment) => {\r\n      // Actualizar cache específico del shipment\r\n      queryClient.setQueryData(\r\n        ['admin', 'logistics', 'shipment', updatedShipment.id],\r\n        updatedShipment\r\n      );\r\n      \r\n      // Invalidar listas de shipments\r\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\r\n      \r\n      // Invalidar dashboard si cambió el estado\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success('Envío actualizado exitosamente');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al actualizar envío', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useDeleteShipment\r\n// =====================================================\r\n\r\nexport function useDeleteShipment() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: deleteShipment,\r\n    onSuccess: (_, deletedId) => {\r\n      // Remover del cache\r\n      queryClient.removeQueries({ queryKey: ['admin', 'logistics', 'shipment', deletedId] });\r\n      \r\n      // Invalidar listas\r\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success('Envío eliminado exitosamente');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al eliminar envío', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useShipmentFilters\r\n// =====================================================\r\n\r\nexport function useShipmentFilters() {\r\n  const [filters, setFilters] = useState<GetShipmentsRequest>({\r\n    page: 1,\r\n    limit: 20,\r\n    order_by: 'created_at',\r\n    order_direction: 'desc'\r\n  });\r\n  \r\n  const updateFilter = useCallback((key: keyof GetShipmentsRequest, value: any) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [key]: value,\r\n      page: key !== 'page' ? 1 : value // Reset page when other filters change\r\n    }));\r\n  }, []);\r\n  \r\n  const resetFilters = useCallback(() => {\r\n    setFilters({\r\n      page: 1,\r\n      limit: 20,\r\n      order_by: 'created_at',\r\n      order_direction: 'desc'\r\n    });\r\n  }, []);\r\n  \r\n  const setPage = useCallback((page: number) => {\r\n    updateFilter('page', page);\r\n  }, [updateFilter]);\r\n  \r\n  const setStatus = useCallback((status: ShipmentStatus | undefined) => {\r\n    updateFilter('status', status);\r\n  }, [updateFilter]);\r\n  \r\n  const setSearch = useCallback((search: string) => {\r\n    updateFilter('search', search || undefined);\r\n  }, [updateFilter]);\r\n  \r\n  const setDateRange = useCallback((dateFrom?: string, dateTo?: string) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      date_from: dateFrom,\r\n      date_to: dateTo,\r\n      page: 1\r\n    }));\r\n  }, []);\r\n  \r\n  return {\r\n    filters,\r\n    updateFilter,\r\n    resetFilters,\r\n    setPage,\r\n    setStatus,\r\n    setSearch,\r\n    setDateRange\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useShipmentStats\r\n// =====================================================\r\n\r\nexport function useShipmentStats(shipments?: Shipment[]) {\r\n  return {\r\n    total: shipments?.length || 0,\r\n    byStatus: shipments?.reduce((acc, shipment) => {\r\n      acc[shipment.status] = (acc[shipment.status] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<ShipmentStatus, number>) || {},\r\n    totalCost: shipments?.reduce((acc, shipment) => acc + shipment.total_cost, 0) || 0,\r\n    averageCost: shipments?.length \r\n      ? (shipments.reduce((acc, shipment) => acc + shipment.total_cost, 0) / shipments.length)\r\n      : 0\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useBulkShipmentOperations\r\n// =====================================================\r\n\r\nexport function useBulkShipmentOperations() {\r\n  const queryClient = useQueryClient();\r\n  const [selectedShipments, setSelectedShipments] = useState<number[]>([]);\r\n  \r\n  const bulkUpdateStatus = useMutation({\r\n    mutationFn: async ({ shipmentIds, status }: { shipmentIds: number[]; status: ShipmentStatus }) => {\r\n      const promises = shipmentIds.map(id => updateShipment(id, { status }));\r\n      return Promise.all(promises);\r\n    },\r\n    onSuccess: (_, { shipmentIds, status }) => {\r\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success(`${shipmentIds.length} envíos actualizados a ${status}`);\r\n      setSelectedShipments([]);\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error en operación masiva', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n  \r\n  const bulkDelete = useMutation({\r\n    mutationFn: async (shipmentIds: number[]) => {\r\n      const promises = shipmentIds.map(id => deleteShipment(id));\r\n      return Promise.all(promises);\r\n    },\r\n    onSuccess: (_, shipmentIds) => {\r\n      queryClient.invalidateQueries({ queryKey: SHIPMENTS_QUERY_KEY });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success(`${shipmentIds.length} envíos eliminados`);\r\n      setSelectedShipments([]);\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al eliminar envíos', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n  \r\n  const toggleSelection = useCallback((shipmentId: number) => {\r\n    setSelectedShipments(prev => \r\n      prev.includes(shipmentId)\r\n        ? prev.filter(id => id !== shipmentId)\r\n        : [...prev, shipmentId]\r\n    );\r\n  }, []);\r\n  \r\n  const selectAll = useCallback((shipmentIds: number[]) => {\r\n    setSelectedShipments(shipmentIds);\r\n  }, []);\r\n  \r\n  const clearSelection = useCallback(() => {\r\n    setSelectedShipments([]);\r\n  }, []);\r\n  \r\n  return {\r\n    selectedShipments,\r\n    toggleSelection,\r\n    selectAll,\r\n    clearSelection,\r\n    bulkUpdateStatus,\r\n    bulkDelete,\r\n    isLoading: bulkUpdateStatus.isPending || bulkDelete.isPending\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}