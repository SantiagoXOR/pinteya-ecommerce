{"version":3,"names":["cov_2gaevugybo","actualCoverage","s","useAvatarUpload","ALLOWED_TYPES","MAX_FILE_SIZE","MAX_DIMENSIONS","width","height","f","isSignedIn","_useAuth","useAuth","uploading","setUploading","_react","useState","progress","setProgress","error","setError","preview","setPreview","validateFile","useCallback","file","includes","type","b","valid","size","generatePreview","validation","reader","FileReader","onload","e","target","result","onerror","readAsDataURL","clearPreview","validateImageDimensions","Promise","resolve","img","Image","isValid","src","URL","createObjectURL","uploadAvatar","_sonner","toast","dimensionsValid","formData","FormData","append","progressInterval","setInterval","prev","clearInterval","response","fetch","method","body","ok","Error","json","success","avatar_url","err","errorMessage","message","console","deleteAvatar"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useAvatarUpload.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport { toast } from 'sonner';\r\n\r\ninterface UseAvatarUploadReturn {\r\n  uploading: boolean;\r\n  progress: number;\r\n  error: string | null;\r\n  preview: string | null;\r\n  uploadAvatar: (file: File) => Promise<string | null>;\r\n  deleteAvatar: () => Promise<boolean>;\r\n  validateFile: (file: File) => { valid: boolean; error?: string };\r\n  generatePreview: (file: File) => void;\r\n  clearPreview: () => void;\r\n}\r\n\r\n// Configuración de validación de archivos\r\nconst ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\nconst MAX_DIMENSIONS = { width: 2048, height: 2048 };\r\n\r\nexport function useAvatarUpload(): UseAvatarUploadReturn {\r\n  const { isSignedIn } = useAuth();\r\n  const [uploading, setUploading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [preview, setPreview] = useState<string | null>(null);\r\n\r\n  // Función para validar archivos\r\n  const validateFile = useCallback((file: File): { valid: boolean; error?: string } => {\r\n    // Verificar tipo de archivo\r\n    if (!ALLOWED_TYPES.includes(file.type)) {\r\n      return {\r\n        valid: false,\r\n        error: 'Tipo de archivo no permitido. Solo se permiten imágenes JPG, PNG y WebP.',\r\n      };\r\n    }\r\n\r\n    // Verificar tamaño\r\n    if (file.size > MAX_FILE_SIZE) {\r\n      return {\r\n        valid: false,\r\n        error: 'El archivo es demasiado grande. El tamaño máximo es 5MB.',\r\n      };\r\n    }\r\n\r\n    return { valid: true };\r\n  }, []);\r\n\r\n  // Función para generar preview\r\n  const generatePreview = useCallback((file: File) => {\r\n    const validation = validateFile(file);\r\n    if (!validation.valid) {\r\n      setError(validation.error || 'Archivo no válido');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      if (e.target?.result) {\r\n        setPreview(e.target.result as string);\r\n        setError(null);\r\n      }\r\n    };\r\n    reader.onerror = () => {\r\n      setError('Error al leer el archivo');\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }, [validateFile]);\r\n\r\n  // Función para limpiar preview\r\n  const clearPreview = useCallback(() => {\r\n    setPreview(null);\r\n    setError(null);\r\n    setProgress(0);\r\n  }, []);\r\n\r\n  // Función para validar dimensiones de imagen\r\n  const validateImageDimensions = useCallback((file: File): Promise<boolean> => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const isValid = img.width <= MAX_DIMENSIONS.width && img.height <= MAX_DIMENSIONS.height;\r\n        if (!isValid) {\r\n          setError(`Las dimensiones máximas permitidas son ${MAX_DIMENSIONS.width}x${MAX_DIMENSIONS.height}px`);\r\n        }\r\n        resolve(isValid);\r\n      };\r\n      img.onerror = () => {\r\n        setError('Error al validar las dimensiones de la imagen');\r\n        resolve(false);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }, []);\r\n\r\n  // Función para subir avatar\r\n  const uploadAvatar = useCallback(async (file: File): Promise<string | null> => {\r\n    if (!isSignedIn) {\r\n      toast.error('Debes estar autenticado para subir un avatar');\r\n      return null;\r\n    }\r\n\r\n    // Validar archivo\r\n    const validation = validateFile(file);\r\n    if (!validation.valid) {\r\n      setError(validation.error || 'Archivo no válido');\r\n      toast.error(validation.error || 'Archivo no válido');\r\n      return null;\r\n    }\r\n\r\n    // Validar dimensiones\r\n    const dimensionsValid = await validateImageDimensions(file);\r\n    if (!dimensionsValid) {\r\n      toast.error('Las dimensiones de la imagen no son válidas');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      setUploading(true);\r\n      setError(null);\r\n      setProgress(0);\r\n\r\n      const formData = new FormData();\r\n      formData.append('avatar', file);\r\n\r\n      // Simular progreso de subida\r\n      const progressInterval = setInterval(() => {\r\n        setProgress((prev) => {\r\n          if (prev >= 90) {\r\n            clearInterval(progressInterval);\r\n            return 90;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 100);\r\n\r\n      const response = await fetch('/api/user/avatar', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      clearInterval(progressInterval);\r\n      setProgress(100);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al subir el avatar');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success && result.avatar_url) {\r\n        toast.success('Avatar subido correctamente');\r\n        clearPreview();\r\n        return result.avatar_url;\r\n      } else {\r\n        throw new Error(result.error || 'Error al subir el avatar');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      console.error('Error al subir avatar:', err);\r\n      return null;\r\n    } finally {\r\n      setUploading(false);\r\n      setProgress(0);\r\n    }\r\n  }, [isSignedIn, validateFile, validateImageDimensions, clearPreview]);\r\n\r\n  // Función para eliminar avatar\r\n  const deleteAvatar = useCallback(async (): Promise<boolean> => {\r\n    if (!isSignedIn) {\r\n      toast.error('Debes estar autenticado para eliminar tu avatar');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      setUploading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/user/avatar', {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al eliminar el avatar');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        toast.success('Avatar eliminado correctamente');\r\n        clearPreview();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.error || 'Error al eliminar el avatar');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      console.error('Error al eliminar avatar:', err);\r\n      return false;\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }, [isSignedIn, clearPreview]);\r\n\r\n  return {\r\n    uploading,\r\n    progress,\r\n    error,\r\n    preview,\r\n    uploadAvatar,\r\n    deleteAvatar,\r\n    validateFile,\r\n    generatePreview,\r\n    clearPreview,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}