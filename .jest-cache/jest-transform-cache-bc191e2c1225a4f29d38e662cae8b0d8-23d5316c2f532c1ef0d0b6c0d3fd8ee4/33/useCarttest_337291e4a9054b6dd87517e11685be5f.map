{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useCart.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TESTS PARA USECART HOOK\n// ===================================\n\nimport React from 'react'\nimport { renderHook, act } from '@testing-library/react'\nimport { Provider } from 'react-redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport cartReducer, {\n  addItemToCart,\n  removeItemFromCart,\n  updateCartItemQuantity,\n  removeAllItemsFromCart,\n  selectCartItems,\n  selectTotalPrice,\n} from '@/redux/features/cart-slice'\nimport { useAppSelector, useAppDispatch } from '@/redux/store'\n\n// Selector personalizado para contar items del carrito\nconst selectCartCount = (state: any) => state.cartReducer.items.length\n\n// Mock del hook personalizado useCart\nconst useCart = () => {\n  const dispatch = useAppDispatch()\n  const cartItems = useAppSelector(selectCartItems)\n  const totalPrice = useAppSelector(selectTotalPrice)\n  const cartCount = useAppSelector(selectCartCount)\n\n  const addToCart = (item: any) => {\n    dispatch(addItemToCart(item))\n  }\n\n  const removeFromCart = (id: number) => {\n    dispatch(removeItemFromCart(id))\n  }\n\n  const updateQuantity = (id: number, quantity: number) => {\n    dispatch(updateCartItemQuantity({ id, quantity }))\n  }\n\n  const clearCart = () => {\n    dispatch(removeAllItemsFromCart())\n  }\n\n  return {\n    cartItems,\n    totalPrice,\n    cartCount,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n  }\n}\n\n// Producto de prueba\nconst mockProduct = {\n  id: 1,\n  title: 'Pintura Latex Interior Blanco 4L',\n  price: 18000,\n  discountedPrice: 15000,\n  quantity: 1,\n  imgs: {\n    thumbnails: ['/images/products/pintura-latex-blanco-sm.jpg'],\n    previews: ['/images/products/pintura-latex-blanco.jpg'],\n  },\n}\n\n// Función helper para renderizar hook con Redux store\nconst renderHookWithStore = (initialState = {}) => {\n  const store = configureStore({\n    reducer: {\n      cartReducer,\n    },\n    preloadedState: initialState,\n  })\n\n  const wrapper = ({ children }: { children: React.ReactNode }) =>\n    React.createElement(Provider, { store }, children)\n\n  return {\n    ...renderHook(() => useCart(), { wrapper }),\n    store,\n  }\n}\n\ndescribe('useCart Hook', () => {\n  it('should initialize with empty cart', () => {\n    const { result } = renderHookWithStore()\n\n    expect(result.current.cartItems).toEqual([])\n    expect(result.current.totalPrice).toBe(0)\n    expect(result.current.cartCount).toBe(0)\n  })\n\n  it('should add item to cart', () => {\n    const { result } = renderHookWithStore()\n\n    act(() => {\n      result.current.addToCart(mockProduct)\n    })\n\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].id).toBe(mockProduct.id)\n    expect(result.current.cartItems[0].quantity).toBe(1)\n    expect(result.current.cartCount).toBe(1)\n  })\n\n  it('should increase quantity when adding existing item', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.addToCart(mockProduct)\n    })\n\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].quantity).toBe(2)\n    expect(result.current.cartCount).toBe(1) // Número de productos únicos\n  })\n\n  it('should remove item from cart', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.removeFromCart(mockProduct.id)\n    })\n\n    expect(result.current.cartItems).toHaveLength(0)\n    expect(result.current.cartCount).toBe(0)\n    expect(result.current.totalPrice).toBe(0)\n  })\n\n  it('should update item quantity', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.updateQuantity(mockProduct.id, 3)\n    })\n\n    expect(result.current.cartItems[0].quantity).toBe(3)\n  })\n\n  it('should set item quantity to 0 (but not remove from cart)', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.updateQuantity(mockProduct.id, 0)\n    })\n\n    // El reducer actual no elimina automáticamente items con cantidad 0\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].quantity).toBe(0)\n  })\n\n  it('should clear entire cart', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct, { ...mockProduct, id: 2, title: 'Otro producto' }],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.clearCart()\n    })\n\n    expect(result.current.cartItems).toHaveLength(0)\n    expect(result.current.cartCount).toBe(0)\n    expect(result.current.totalPrice).toBe(0)\n  })\n\n  it('should calculate total price correctly', () => {\n    const product1 = { ...mockProduct, quantity: 2 } // 15000 * 2 = 30000\n    const product2 = { ...mockProduct, id: 2, discountedPrice: 10000, quantity: 1 } // 10000 * 1 = 10000\n\n    const initialState = {\n      cartReducer: {\n        items: [product1, product2],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    expect(result.current.totalPrice).toBe(40000) // 30000 + 10000\n  })\n\n  it('should handle multiple different products', () => {\n    const { result } = renderHookWithStore()\n\n    const product1 = mockProduct\n    const product2 = { ...mockProduct, id: 2, title: 'Esmalte Azul' }\n    const product3 = { ...mockProduct, id: 3, title: 'Barniz Transparente' }\n\n    act(() => {\n      result.current.addToCart(product1)\n      result.current.addToCart(product2)\n      result.current.addToCart(product3)\n    })\n\n    expect(result.current.cartItems).toHaveLength(3)\n    expect(result.current.cartCount).toBe(3)\n  })\n\n  it('should handle edge cases with invalid quantities', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    // Intentar establecer cantidad negativa\n    act(() => {\n      result.current.updateQuantity(mockProduct.id, -1)\n    })\n\n    // El reducer actual permite cantidades negativas\n    expect(result.current.cartItems[0].quantity).toBe(-1)\n\n    // Verificar que el item sigue en el carrito\n    expect(result.current.cartItems).toHaveLength(1)\n  })\n\n  it('should handle removing non-existent item', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.removeFromCart(999) // ID que no existe\n    })\n\n    // El carrito debería permanecer sin cambios\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].id).toBe(mockProduct.id)\n  })\n\n  it('should handle updating quantity of non-existent item', () => {\n    const initialState = {\n      cartReducer: {\n        items: [mockProduct],\n      },\n    }\n\n    const { result } = renderHookWithStore(initialState)\n\n    act(() => {\n      result.current.updateQuantity(999, 5) // ID que no existe\n    })\n\n    // El carrito debería permanecer sin cambios\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].quantity).toBe(mockProduct.quantity)\n  })\n\n  it('should maintain cart state consistency', () => {\n    const { result } = renderHookWithStore()\n\n    // Agregar varios productos y realizar operaciones\n    act(() => {\n      result.current.addToCart(mockProduct)\n      result.current.addToCart({ ...mockProduct, id: 2 })\n      result.current.updateQuantity(1, 3)\n      result.current.removeFromCart(2)\n    })\n\n    expect(result.current.cartItems).toHaveLength(1)\n    expect(result.current.cartItems[0].id).toBe(1)\n    expect(result.current.cartItems[0].quantity).toBe(3)\n    expect(result.current.cartCount).toBe(1)\n  })\n\n  it('should handle products with different price structures', () => {\n    const productWithoutDiscount = {\n      ...mockProduct,\n      id: 2,\n      price: 20000,\n      discountedPrice: 20000, // Sin descuento\n    }\n\n    const { result } = renderHookWithStore()\n\n    act(() => {\n      result.current.addToCart(mockProduct) // Con descuento\n      result.current.addToCart(productWithoutDiscount) // Sin descuento\n    })\n\n    expect(result.current.cartItems).toHaveLength(2)\n    expect(result.current.totalPrice).toBe(35000) // 15000 + 20000\n  })\n})\n"],"names":["selectCartCount","state","cartReducer","items","length","useCart","dispatch","useAppDispatch","cartItems","useAppSelector","selectCartItems","totalPrice","selectTotalPrice","cartCount","addToCart","item","addItemToCart","removeFromCart","id","removeItemFromCart","updateQuantity","quantity","updateCartItemQuantity","clearCart","removeAllItemsFromCart","mockProduct","title","price","discountedPrice","imgs","thumbnails","previews","renderHookWithStore","initialState","store","configureStore","reducer","preloadedState","wrapper","children","React","createElement","Provider","renderHook","describe","it","result","expect","current","toEqual","toBe","act","toHaveLength","product1","product2","product3","productWithoutDiscount"],"mappings":"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"}