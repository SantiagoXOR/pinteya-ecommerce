{"version":3,"names":["cov_2k2brcu9az","actualCoverage","s","EmailNotificationService","f","emailService","sendLowStockAlert","sendOrderConfirmation","sendPasswordReset","sendShippingNotification","sendWelcomeEmail","getInstance","instance","b","sendNotification","config","response","fetch","apiEndpoint","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","_usetoast","toast","title","description","variant","orderData","to","customerEmail","subject","orderId","template","data","priority","shippingData","userData","email","productData","adminEmails","productName","sendOrderStatusUpdate","statusData","sendPromotionalEmail","promoData","recipients","getEmailTemplates","scheduleEmail","scheduledAt"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\notifications\\email.ts"],"sourcesContent":["'use client'\r\n\r\nimport { toast } from '@/components/ui/use-toast'\r\n\r\nexport interface EmailNotificationConfig {\r\n  to: string | string[]\r\n  subject: string\r\n  template: string\r\n  data?: Record<string, any>\r\n  priority?: 'low' | 'normal' | 'high'\r\n  scheduledAt?: Date\r\n}\r\n\r\nexport interface EmailTemplate {\r\n  id: string\r\n  name: string\r\n  subject: string\r\n  htmlContent: string\r\n  textContent?: string\r\n  variables: string[]\r\n}\r\n\r\nexport class EmailNotificationService {\r\n  private static instance: EmailNotificationService\r\n  private apiEndpoint = '/api/notifications/email'\r\n\r\n  static getInstance(): EmailNotificationService {\r\n    if (!EmailNotificationService.instance) {\r\n      EmailNotificationService.instance = new EmailNotificationService()\r\n    }\r\n    return EmailNotificationService.instance\r\n  }\r\n\r\n  async sendNotification(config: EmailNotificationConfig): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(this.apiEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(config)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al enviar notificación por email')\r\n      }\r\n\r\n      const result = await response.json()\r\n      return result.success\r\n    } catch (error) {\r\n      console.error('Error sending email notification:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'No se pudo enviar la notificación por email',\r\n        variant: 'destructive'\r\n      })\r\n      return false\r\n    }\r\n  }\r\n\r\n  async sendOrderConfirmation(orderData: {\r\n    customerEmail: string\r\n    orderId: string\r\n    customerName: string\r\n    items: Array<{ name: string; quantity: number; price: number }>\r\n    total: number\r\n    shippingAddress: any\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: orderData.customerEmail,\r\n      subject: `Confirmación de pedido #${orderData.orderId}`,\r\n      template: 'order-confirmation',\r\n      data: orderData,\r\n      priority: 'high'\r\n    })\r\n  }\r\n\r\n  async sendShippingNotification(shippingData: {\r\n    customerEmail: string\r\n    orderId: string\r\n    trackingNumber: string\r\n    estimatedDelivery: string\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: shippingData.customerEmail,\r\n      subject: `Tu pedido #${shippingData.orderId} está en camino`,\r\n      template: 'shipping-notification',\r\n      data: shippingData,\r\n      priority: 'normal'\r\n    })\r\n  }\r\n\r\n  async sendPasswordReset(userData: {\r\n    email: string\r\n    resetToken: string\r\n    userName: string\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: userData.email,\r\n      subject: 'Restablecer contraseña',\r\n      template: 'password-reset',\r\n      data: userData,\r\n      priority: 'high'\r\n    })\r\n  }\r\n\r\n  async sendWelcomeEmail(userData: {\r\n    email: string\r\n    userName: string\r\n    verificationToken?: string\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: userData.email,\r\n      subject: '¡Bienvenido a nuestra tienda!',\r\n      template: 'welcome',\r\n      data: userData,\r\n      priority: 'normal'\r\n    })\r\n  }\r\n\r\n  async sendLowStockAlert(productData: {\r\n    adminEmails: string[]\r\n    productName: string\r\n    currentStock: number\r\n    minimumStock: number\r\n    productId: string\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: productData.adminEmails,\r\n      subject: `Alerta: Stock bajo - ${productData.productName}`,\r\n      template: 'low-stock-alert',\r\n      data: productData,\r\n      priority: 'high'\r\n    })\r\n  }\r\n\r\n  async sendOrderStatusUpdate(statusData: {\r\n    customerEmail: string\r\n    orderId: string\r\n    newStatus: string\r\n    customerName: string\r\n    statusMessage?: string\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: statusData.customerEmail,\r\n      subject: `Actualización de pedido #${statusData.orderId}`,\r\n      template: 'order-status-update',\r\n      data: statusData,\r\n      priority: 'normal'\r\n    })\r\n  }\r\n\r\n  async sendPromotionalEmail(promoData: {\r\n    recipients: string[]\r\n    subject: string\r\n    promoCode?: string\r\n    discount?: number\r\n    validUntil?: string\r\n    products?: Array<{ name: string; price: number; image: string }>\r\n  }): Promise<boolean> {\r\n    return this.sendNotification({\r\n      to: promoData.recipients,\r\n      subject: promoData.subject,\r\n      template: 'promotional',\r\n      data: promoData,\r\n      priority: 'low'\r\n    })\r\n  }\r\n\r\n  async getEmailTemplates(): Promise<EmailTemplate[]> {\r\n    try {\r\n      const response = await fetch('/api/notifications/email/templates')\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener plantillas')\r\n      }\r\n      return await response.json()\r\n    } catch (error) {\r\n      console.error('Error fetching email templates:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  async scheduleEmail(config: EmailNotificationConfig): Promise<boolean> {\r\n    if (!config.scheduledAt) {\r\n      throw new Error('scheduledAt is required for scheduled emails')\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/notifications/email/schedule', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(config)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al programar email')\r\n      }\r\n\r\n      return true\r\n    } catch (error) {\r\n      console.error('Error scheduling email:', error)\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton para uso global\r\nexport const emailService = EmailNotificationService.getInstance()\r\n\r\n// Funciones de conveniencia\r\nexport const sendOrderConfirmation = (orderData: Parameters<EmailNotificationService['sendOrderConfirmation']>[0]) => \r\n  emailService.sendOrderConfirmation(orderData)\r\n\r\nexport const sendShippingNotification = (shippingData: Parameters<EmailNotificationService['sendShippingNotification']>[0]) => \r\n  emailService.sendShippingNotification(shippingData)\r\n\r\nexport const sendPasswordReset = (userData: Parameters<EmailNotificationService['sendPasswordReset']>[0]) => \r\n  emailService.sendPasswordReset(userData)\r\n\r\nexport const sendWelcomeEmail = (userData: Parameters<EmailNotificationService['sendWelcomeEmail']>[0]) => \r\n  emailService.sendWelcomeEmail(userData)\r\n\r\nexport const sendLowStockAlert = (productData: Parameters<EmailNotificationService['sendLowStockAlert']>[0]) => \r\n  emailService.sendLowStockAlert(productData)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}