f2796746e0202a8a9528329dff5f7ae3
// ===================================
// PINTEYA E-COMMERCE - ADMIN USER BY ID API ENTERPRISE
// ===================================
"use strict";

/* istanbul ignore next */
function cov_q3edlhspw() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\[id]\\route.ts";
  var hash = "243521b08e6a90580b9f7d497feea3d23ba39b82";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 22
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "7": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "8": {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "9": {
        start: {
          line: 27,
          column: 14
        },
        end: {
          line: 27,
          column: 44
        }
      },
      "10": {
        start: {
          line: 28,
          column: 13
        },
        end: {
          line: 28,
          column: 27
        }
      },
      "11": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "12": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 70
        }
      },
      "13": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "14": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 65
        }
      },
      "15": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "16": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 55,
          column: 2
        }
      },
      "17": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "20": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 47
        }
      },
      "21": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "22": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 77,
          column: 14
        }
      },
      "23": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 68
        }
      },
      "24": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "25": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "26": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 10
        }
      },
      "27": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "28": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "29": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "30": {
        start: {
          line: 107,
          column: 49
        },
        end: {
          line: 121,
          column: 34
        }
      },
      "31": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "32": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "33": {
        start: {
          line: 126,
          column: 37
        },
        end: {
          line: 126,
          column: 145
        }
      },
      "34": {
        start: {
          line: 127,
          column: 29
        },
        end: {
          line: 127,
          column: 52
        }
      },
      "35": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 94
        }
      },
      "36": {
        start: {
          line: 128,
          column: 61
        },
        end: {
          line: 128,
          column: 85
        }
      },
      "37": {
        start: {
          line: 130,
          column: 39
        },
        end: {
          line: 132,
          column: 19
        }
      },
      "38": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 10
        }
      },
      "39": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "40": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 20
        }
      },
      "41": {
        start: {
          line: 148,
          column: 22
        },
        end: {
          line: 148,
          column: 32
        }
      },
      "42": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "43": {
        start: {
          line: 151,
          column: 32
        },
        end: {
          line: 155,
          column: 31
        }
      },
      "44": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "45": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "46": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 77
        }
      },
      "47": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 28
        }
      },
      "48": {
        start: {
          line: 166,
          column: 27
        },
        end: {
          line: 166,
          column: 52
        }
      },
      "49": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "50": {
        start: {
          line: 168,
          column: 34
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "51": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "52": {
        start: {
          line: 178,
          column: 33
        },
        end: {
          line: 180,
          column: 10
        }
      },
      "53": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "54": {
        start: {
          line: 182,
          column: 34
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "55": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "56": {
        start: {
          line: 191,
          column: 23
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "57": {
        start: {
          line: 192,
          column: 21
        },
        end: {
          line: 192,
          column: 51
        }
      },
      "58": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "59": {
        start: {
          line: 194,
          column: 34
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "60": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "61": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "62": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "63": {
        start: {
          line: 216,
          column: 25
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "64": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "65": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 77
        }
      },
      "66": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 28
        }
      },
      "67": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "68": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      },
      "69": {
        start: {
          line: 237,
          column: 30
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "70": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "71": {
        start: {
          line: 248,
          column: 22
        },
        end: {
          line: 248,
          column: 32
        }
      },
      "72": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 402,
          column: 5
        }
      },
      "73": {
        start: {
          line: 251,
          column: 32
        },
        end: {
          line: 255,
          column: 31
        }
      },
      "74": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "75": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "76": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 77
        }
      },
      "77": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 28
        }
      },
      "78": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 266,
          column: 52
        }
      },
      "79": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "80": {
        start: {
          line: 268,
          column: 34
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "81": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 275,
          column: 15
        }
      },
      "82": {
        start: {
          line: 278,
          column: 33
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "83": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "84": {
        start: {
          line: 282,
          column: 34
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "85": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 289,
          column: 15
        }
      },
      "86": {
        start: {
          line: 292,
          column: 21
        },
        end: {
          line: 292,
          column: 41
        }
      },
      "87": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 293,
          column: 65
        }
      },
      "88": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "89": {
        start: {
          line: 295,
          column: 34
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "90": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "91": {
        start: {
          line: 304,
          column: 23
        },
        end: {
          line: 304,
          column: 47
        }
      },
      "92": {
        start: {
          line: 305,
          column: 27
        },
        end: {
          line: 305,
          column: 48
        }
      },
      "93": {
        start: {
          line: 307,
          column: 29
        },
        end: {
          line: 307,
          column: 59
        }
      },
      "94": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "95": {
        start: {
          line: 309,
          column: 34
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "96": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "97": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "98": {
        start: {
          line: 320,
          column: 34
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "99": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "100": {
        start: {
          line: 330,
          column: 58
        },
        end: {
          line: 333,
          column: 45
        }
      },
      "101": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "102": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 338,
          column: 15
        }
      },
      "103": {
        start: {
          line: 339,
          column: 34
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "104": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "105": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "106": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 355,
          column: 15
        }
      },
      "107": {
        start: {
          line: 358,
          column: 30
        },
        end: {
          line: 358,
          column: 60
        }
      },
      "108": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 366,
          column: 11
        }
      },
      "109": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 372,
          column: 11
        }
      },
      "110": {
        start: {
          line: 373,
          column: 25
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "111": {
        start: {
          line: 378,
          column: 29
        },
        end: {
          line: 378,
          column: 64
        }
      },
      "112": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 77
        }
      },
      "113": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 28
        }
      },
      "114": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 385,
          column: 11
        }
      },
      "115": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 393,
          column: 11
        }
      },
      "116": {
        start: {
          line: 394,
          column: 30
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "117": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 401,
          column: 11
        }
      },
      "118": {
        start: {
          line: 405,
          column: 22
        },
        end: {
          line: 405,
          column: 32
        }
      },
      "119": {
        start: {
          line: 406,
          column: 4
        },
        end: {
          line: 552,
          column: 5
        }
      },
      "120": {
        start: {
          line: 408,
          column: 32
        },
        end: {
          line: 412,
          column: 31
        }
      },
      "121": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "122": {
        start: {
          line: 414,
          column: 29
        },
        end: {
          line: 418,
          column: 14
        }
      },
      "123": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 77
        }
      },
      "124": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 28
        }
      },
      "125": {
        start: {
          line: 423,
          column: 27
        },
        end: {
          line: 423,
          column: 52
        }
      },
      "126": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "127": {
        start: {
          line: 425,
          column: 34
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "128": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 432,
          column: 15
        }
      },
      "129": {
        start: {
          line: 435,
          column: 33
        },
        end: {
          line: 437,
          column: 10
        }
      },
      "130": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "131": {
        start: {
          line: 439,
          column: 34
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "132": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 446,
          column: 15
        }
      },
      "133": {
        start: {
          line: 448,
          column: 23
        },
        end: {
          line: 448,
          column: 47
        }
      },
      "134": {
        start: {
          line: 450,
          column: 29
        },
        end: {
          line: 450,
          column: 59
        }
      },
      "135": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "136": {
        start: {
          line: 452,
          column: 34
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "137": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 459,
          column: 15
        }
      },
      "138": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "139": {
        start: {
          line: 463,
          column: 34
        },
        end: {
          line: 467,
          column: 13
        }
      },
      "140": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 470,
          column: 15
        }
      },
      "141": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 482,
          column: 9
        }
      },
      "142": {
        start: {
          line: 474,
          column: 34
        },
        end: {
          line: 478,
          column: 13
        }
      },
      "143": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 481,
          column: 15
        }
      },
      "144": {
        start: {
          line: 484,
          column: 43
        },
        end: {
          line: 484,
          column: 102
        }
      },
      "145": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "146": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 489,
          column: 15
        }
      },
      "147": {
        start: {
          line: 490,
          column: 34
        },
        end: {
          line: 494,
          column: 13
        }
      },
      "148": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 497,
          column: 15
        }
      },
      "149": {
        start: {
          line: 500,
          column: 46
        },
        end: {
          line: 500,
          column: 115
        }
      },
      "150": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "151": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 505,
          column: 15
        }
      },
      "152": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 516,
          column: 11
        }
      },
      "153": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 522,
          column: 11
        }
      },
      "154": {
        start: {
          line: 523,
          column: 25
        },
        end: {
          line: 527,
          column: 9
        }
      },
      "155": {
        start: {
          line: 528,
          column: 29
        },
        end: {
          line: 528,
          column: 64
        }
      },
      "156": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 77
        }
      },
      "157": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 28
        }
      },
      "158": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 535,
          column: 11
        }
      },
      "159": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 543,
          column: 11
        }
      },
      "160": {
        start: {
          line: 544,
          column: 30
        },
        end: {
          line: 548,
          column: 9
        }
      },
      "161": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 551,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "validateAdminAuth",
        decl: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 32
          }
        },
        loc: {
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 59
      },
      "5": {
        name: "getUserWithStats",
        decl: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 31
          }
        },
        loc: {
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 128,
            column: 47
          },
          end: {
            line: 128,
            column: 48
          }
        },
        loc: {
          start: {
            line: 128,
            column: 61
          },
          end: {
            line: 128,
            column: 85
          }
        },
        line: 128
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 147,
            column: 18
          }
        },
        loc: {
          start: {
            line: 147,
            column: 40
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 147
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 247,
            column: 15
          },
          end: {
            line: 247,
            column: 18
          }
        },
        loc: {
          start: {
            line: 247,
            column: 40
          },
          end: {
            line: 403,
            column: 1
          }
        },
        line: 247
      },
      "9": {
        name: "DELETE",
        decl: {
          start: {
            line: 404,
            column: 15
          },
          end: {
            line: 404,
            column: 21
          }
        },
        loc: {
          start: {
            line: 404,
            column: 43
          },
          end: {
            line: 553,
            column: 1
          }
        },
        line: 404
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 50
          }
        }, {
          start: {
            line: 62,
            column: 54
          },
          end: {
            line: 62,
            column: 88
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 21
          }
        }, {
          start: {
            line: 122,
            column: 25
          },
          end: {
            line: 122,
            column: 30
          }
        }],
        line: 122
      },
      "6": {
        loc: {
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 47
          }
        }, {
          start: {
            line: 127,
            column: 51
          },
          end: {
            line: 127,
            column: 52
          }
        }],
        line: 127
      },
      "7": {
        loc: {
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 89
          }
        }, {
          start: {
            line: 128,
            column: 93
          },
          end: {
            line: 128,
            column: 94
          }
        }],
        line: 128
      },
      "8": {
        loc: {
          start: {
            line: 128,
            column: 68
          },
          end: {
            line: 128,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 68
          },
          end: {
            line: 128,
            column: 79
          }
        }, {
          start: {
            line: 128,
            column: 83
          },
          end: {
            line: 128,
            column: 84
          }
        }],
        line: 128
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 27
          },
          end: {
            line: 137,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 27
          },
          end: {
            line: 137,
            column: 39
          }
        }, {
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 45
          }
        }],
        line: 137
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 21
          },
          end: {
            line: 154,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 21
          },
          end: {
            line: 154,
            column: 66
          }
        }, {
          start: {
            line: 154,
            column: 70
          },
          end: {
            line: 154,
            column: 110
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "14": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "15": {
        loc: {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 235,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 44
          },
          end: {
            line: 235,
            column: 57
          }
        }, {
          start: {
            line: 235,
            column: 60
          },
          end: {
            line: 235,
            column: 75
          }
        }],
        line: 235
      },
      "16": {
        loc: {
          start: {
            line: 254,
            column: 21
          },
          end: {
            line: 254,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 21
          },
          end: {
            line: 254,
            column: 66
          }
        }, {
          start: {
            line: 254,
            column: 70
          },
          end: {
            line: 254,
            column: 110
          }
        }],
        line: 254
      },
      "17": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "18": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "19": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "20": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "21": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "22": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "23": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 319,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 319,
            column: 40
          }
        }, {
          start: {
            line: 319,
            column: 44
          },
          end: {
            line: 319,
            column: 74
          }
        }],
        line: 319
      },
      "24": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 347,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "25": {
        loc: {
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "26": {
        loc: {
          start: {
            line: 392,
            column: 19
          },
          end: {
            line: 392,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 44
          },
          end: {
            line: 392,
            column: 57
          }
        }, {
          start: {
            line: 392,
            column: 60
          },
          end: {
            line: 392,
            column: 75
          }
        }],
        line: 392
      },
      "27": {
        loc: {
          start: {
            line: 411,
            column: 21
          },
          end: {
            line: 411,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 21
          },
          end: {
            line: 411,
            column: 66
          }
        }, {
          start: {
            line: 411,
            column: 70
          },
          end: {
            line: 411,
            column: 110
          }
        }],
        line: 411
      },
      "28": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "29": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "30": {
        loc: {
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "31": {
        loc: {
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "32": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "33": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 482,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "34": {
        loc: {
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 498,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 498,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "35": {
        loc: {
          start: {
            line: 501,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "36": {
        loc: {
          start: {
            line: 542,
            column: 19
          },
          end: {
            line: 542,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 542,
            column: 44
          },
          end: {
            line: 542,
            column: 57
          }
        }, {
          start: {
            line: 542,
            column: 60
          },
          end: {
            line: 542,
            column: 75
          }
        }],
        line: 542
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\[id]\\route.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN USER BY ID API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nconst UpdateUserSchema = z.object({\r\n  name: z.string().min(1, 'Nombre requerido').max(100, 'M\xE1ximo 100 caracteres').optional(),\r\n  role: z.enum(['user', 'admin', 'moderator']).optional(),\r\n  is_active: z.boolean().optional(),\r\n  phone: z.string().optional().nullable(),\r\n  address: z.object({\r\n    street_name: z.string().optional(),\r\n    street_number: z.string().optional(),\r\n    zip_code: z.string().optional(),\r\n    city_name: z.string().optional(),\r\n    state_name: z.string().optional(),\r\n  }).optional().nullable(),\r\n});\r\n\r\nconst UserParamsSchema = z.object({\r\n  id: z.string().uuid('ID de usuario inv\xE1lido')\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface UserWithStats {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  is_active: boolean;\r\n  phone?: string;\r\n  address?: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_login?: string;\r\n  orders_count: number;\r\n  total_spent: number;\r\n  avatar_url?: string;\r\n  recent_orders?: Array<{\r\n    id: string;\r\n    total: number;\r\n    status: string;\r\n    created_at: string;\r\n  }>;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACI\xD3N ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // BYPASS TEMPORAL PARA DESARROLLO\r\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n      return {\r\n        user: {\r\n          id: 'dev-admin',\r\n          email: 'santiago@xor.com.ar',\r\n          name: 'Dev Admin'\r\n        },\r\n        userId: 'dev-admin'\r\n      };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validaci\xF3n admin', { error });\r\n    return { error: 'Error de autenticaci\xF3n', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function getUserWithStats(userId: string): Promise<UserWithStats | null> {\r\n  try {\r\n    // Obtener datos del usuario\r\n    const { data: user, error: userError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select(`\r\n        id,\r\n        email,\r\n        first_name,\r\n        last_name,\r\n        role_id,\r\n        is_active,\r\n        metadata,\r\n        created_at,\r\n        updated_at,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !user) {\r\n      return null;\r\n    }\r\n\r\n    // Obtener estad\xEDsticas de \xF3rdenes\r\n    const { data: orderStats } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('total')\r\n      .eq('user_id', userId)\r\n      .eq('status', 'completed');\r\n\r\n    const orders_count = orderStats?.length || 0;\r\n    const total_spent = orderStats?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n\r\n    // Obtener \xF3rdenes recientes\r\n    const { data: recentOrders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, total, status, created_at')\r\n      .eq('user_id', userId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    return {\r\n      ...user,\r\n      orders_count,\r\n      total_spent,\r\n      recent_orders: recentOrders || []\r\n    };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo usuario con estad\xEDsticas', { error, userId });\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener usuario espec\xEDfico por ID\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-detail'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar par\xE1metros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inv\xE1lido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n    const user = await getUserWithStats(userId);\r\n\r\n    if (!user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Registrar m\xE9tricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditor\xEDa\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario consultado', {\r\n      adminUserId: authResult.userId,\r\n      targetUserId: userId\r\n    });\r\n\r\n    const response: ApiResponse<UserWithStats> = {\r\n      data: user,\r\n      success: true,\r\n      message: 'Usuario obtenido exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar m\xE9tricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar usuario\r\n// ===================================\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-update'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar par\xE1metros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inv\xE1lido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = UpdateUserSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Datos de actualizaci\xF3n inv\xE1lidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n    const updateData = validationResult.data;\r\n\r\n    // Verificar que el usuario existe\r\n    const existingUser = await getUserWithStats(userId);\r\n    if (!existingUser) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Prevenir que un admin se desactive a s\xED mismo\r\n    if (userId === authResult.userId && updateData.is_active === false) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No puedes desactivar tu propia cuenta',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Actualizar usuario en la base de datos\r\n    const { data: updatedUser, error: updateError } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        ...updateData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.API, 'Error actualizando usuario', { updateError, userId });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error actualizando usuario',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Si se cambi\xF3 el rol, actualizar tambi\xE9n en Auth metadata\r\n    if (updateData.role) {\r\n      await supabaseAdmin.auth.admin.updateUserById(userId, {\r\n        user_metadata: {\r\n          ...existingUser,\r\n          role: updateData.role\r\n        }\r\n      });\r\n    }\r\n\r\n    // Obtener usuario actualizado con estad\xEDsticas\r\n    const userWithStats = await getUserWithStats(userId);\r\n\r\n    // Registrar m\xE9tricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'PUT',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditor\xEDa\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario actualizado', {\r\n      adminUserId: authResult.userId,\r\n      targetUserId: userId,\r\n      changes: updateData\r\n    });\r\n\r\n    const response: ApiResponse<UserWithStats> = {\r\n      data: userWithStats!,\r\n      success: true,\r\n      message: 'Usuario actualizado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en PUT /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar m\xE9tricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'PUT',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Eliminar usuario\r\n// ===================================\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-delete'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar par\xE1metros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inv\xE1lido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n\r\n    // Verificar que el usuario existe\r\n    const existingUser = await getUserWithStats(userId);\r\n    if (!existingUser) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Prevenir que un admin se elimine a s\xED mismo\r\n    if (userId === authResult.userId) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No puedes eliminar tu propia cuenta',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Verificar si el usuario tiene \xF3rdenes\r\n    if (existingUser.orders_count > 0) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No se puede eliminar un usuario con \xF3rdenes asociadas. Considera desactivarlo en su lugar.',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Eliminar usuario de Auth\r\n    const { error: authDeleteError } = await supabaseAdmin.auth.admin.deleteUser(userId);\r\n    if (authDeleteError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error eliminando usuario de Auth', { authDeleteError, userId });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error eliminando usuario de autenticaci\xF3n',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Eliminar perfil de usuario\r\n    const { error: profileDeleteError } = await supabaseAdmin\r\n      .from('users')\r\n      .delete()\r\n      .eq('id', userId);\r\n\r\n    if (profileDeleteError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.API, 'Error eliminando perfil de usuario', { profileDeleteError, userId });\r\n      // Nota: El usuario ya fue eliminado de Auth, pero el perfil fall\xF3\r\n      // En un escenario real, podr\xEDas querer implementar una limpieza manual\r\n    }\r\n\r\n    // Registrar m\xE9tricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'DELETE',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditor\xEDa\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario eliminado', {\r\n      adminUserId: authResult.userId,\r\n      deletedUserId: userId,\r\n      deletedUserEmail: existingUser.email\r\n    });\r\n\r\n    const response: ApiResponse<null> = {\r\n      data: null,\r\n      success: true,\r\n      message: 'Usuario eliminado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en DELETE /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar m\xE9tricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'DELETE',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}"],
      names: ["DELETE", "GET", "PUT", "UpdateUserSchema", "z", "object", "name", "string", "min", "max", "optional", "role", "enum", "is_active", "boolean", "phone", "nullable", "address", "street_name", "street_number", "zip_code", "city_name", "state_name", "UserParamsSchema", "id", "uuid", "validateAdminAuth", "process", "env", "NODE_ENV", "BYPASS_AUTH", "user", "email", "userId", "session", "auth", "error", "status", "isAdmin", "logger", "log", "LogLevel", "ERROR", "LogCategory", "AUTH", "getUserWithStats", "data", "userError", "supabaseAdmin", "from", "select", "eq", "single", "orderStats", "orders_count", "length", "total_spent", "reduce", "sum", "order", "total", "recentOrders", "ascending", "limit", "recent_orders", "API", "request", "params", "startTime", "Date", "now", "rateLimitResult", "checkRateLimit", "windowMs", "RATE_LIMIT_CONFIGS", "admin", "maxRequests", "message", "success", "response", "NextResponse", "json", "addRateLimitHeaders", "authResult", "errorResponse", "paramsValidation", "safeParse", "metricsCollector", "recordApiCall", "endpoint", "method", "statusCode", "responseTime", "INFO", "ADMIN", "adminUserId", "targetUserId", "nextResponse", "Error", "body", "validationResult", "updateData", "existingUser", "updatedUser", "updateError", "update", "updated_at", "toISOString", "updateUserById", "user_metadata", "userWithStats", "changes", "authDeleteError", "deleteUser", "profileDeleteError", "delete", "deletedUserId", "deletedUserEmail"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "243521b08e6a90580b9f7d497feea3d23ba39b82"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_q3edlhspw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_q3edlhspw();
cov_q3edlhspw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_q3edlhspw().f[0]++;
  cov_q3edlhspw().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_q3edlhspw().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_q3edlhspw().f[1]++;
    cov_q3edlhspw().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_q3edlhspw().f[2]++;
    cov_q3edlhspw().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_q3edlhspw().f[3]++;
    cov_q3edlhspw().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_q3edlhspw().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_q3edlhspw().s[8]++, require("../../../../../lib/integrations/supabase"));
const _auth =
/* istanbul ignore next */
(cov_q3edlhspw().s[9]++, require("../../../../../auth"));
const _zod =
/* istanbul ignore next */
(cov_q3edlhspw().s[10]++, require("zod"));
const _logger =
/* istanbul ignore next */
(cov_q3edlhspw().s[11]++, require("../../../../../lib/enterprise/logger"));
const _ratelimiting =
/* istanbul ignore next */
(cov_q3edlhspw().s[12]++, require("../../../../../lib/auth/rate-limiting"));
const _ratelimiter =
/* istanbul ignore next */
(cov_q3edlhspw().s[13]++, require("../../../../../lib/enterprise/rate-limiter"));
const _metrics =
/* istanbul ignore next */
(cov_q3edlhspw().s[14]++, require("../../../../../lib/enterprise/metrics"));
// ===================================
// SCHEMAS DE VALIDACIÓN
// ===================================
const UpdateUserSchema =
/* istanbul ignore next */
(cov_q3edlhspw().s[15]++, _zod.z.object({
  name: _zod.z.string().min(1, 'Nombre requerido').max(100, 'Máximo 100 caracteres').optional(),
  role: _zod.z.enum(['user', 'admin', 'moderator']).optional(),
  is_active: _zod.z.boolean().optional(),
  phone: _zod.z.string().optional().nullable(),
  address: _zod.z.object({
    street_name: _zod.z.string().optional(),
    street_number: _zod.z.string().optional(),
    zip_code: _zod.z.string().optional(),
    city_name: _zod.z.string().optional(),
    state_name: _zod.z.string().optional()
  }).optional().nullable()
}));
const UserParamsSchema =
/* istanbul ignore next */
(cov_q3edlhspw().s[16]++, _zod.z.object({
  id: _zod.z.string().uuid('ID de usuario inválido')
}));
// ===================================
// MIDDLEWARE DE AUTENTICACIÓN ADMIN
// ===================================
async function validateAdminAuth() {
  /* istanbul ignore next */
  cov_q3edlhspw().f[4]++;
  cov_q3edlhspw().s[17]++;
  try {
    /* istanbul ignore next */
    cov_q3edlhspw().s[18]++;
    // BYPASS TEMPORAL PARA DESARROLLO
    if (
    /* istanbul ignore next */
    (cov_q3edlhspw().b[1][0]++, process.env.NODE_ENV === 'development') &&
    /* istanbul ignore next */
    (cov_q3edlhspw().b[1][1]++, process.env.BYPASS_AUTH === 'true')) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[0][0]++;
      cov_q3edlhspw().s[19]++;
      return {
        user: {
          id: 'dev-admin',
          email: 'santiago@xor.com.ar',
          name: 'Dev Admin'
        },
        userId: 'dev-admin'
      };
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[0][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[20]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_q3edlhspw().s[21]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[2][0]++;
      cov_q3edlhspw().s[22]++;
      return {
        error: 'Usuario no autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[2][1]++;
    }
    // Verificar si es admin
    const isAdmin =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[23]++, session.user.email === 'santiago@xor.com.ar');
    /* istanbul ignore next */
    cov_q3edlhspw().s[24]++;
    if (!isAdmin) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[3][0]++;
      cov_q3edlhspw().s[25]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[3][1]++;
    }
    cov_q3edlhspw().s[26]++;
    return {
      user: session.user,
      userId: session.user.id
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[27]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.AUTH, 'Error en validación admin', {
      error
    });
    /* istanbul ignore next */
    cov_q3edlhspw().s[28]++;
    return {
      error: 'Error de autenticación',
      status: 500
    };
  }
}
// ===================================
// FUNCIONES AUXILIARES
// ===================================
async function getUserWithStats(userId) {
  /* istanbul ignore next */
  cov_q3edlhspw().f[5]++;
  cov_q3edlhspw().s[29]++;
  try {
    // Obtener datos del usuario
    const {
      data: user,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[30]++, await _supabase.supabaseAdmin.from('user_profiles').select(`
        id,
        email,
        first_name,
        last_name,
        role_id,
        is_active,
        metadata,
        created_at,
        updated_at,
        user_roles (
          role_name,
          permissions
        )
      `).eq('id', userId).single());
    /* istanbul ignore next */
    cov_q3edlhspw().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_q3edlhspw().b[5][0]++, userError) ||
    /* istanbul ignore next */
    (cov_q3edlhspw().b[5][1]++, !user)) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[4][0]++;
      cov_q3edlhspw().s[32]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[4][1]++;
    }
    // Obtener estadísticas de órdenes
    const {
      data: orderStats
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[33]++, await _supabase.supabaseAdmin.from('orders').select('total').eq('user_id', userId).eq('status', 'completed'));
    const orders_count =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[34]++,
    /* istanbul ignore next */
    (cov_q3edlhspw().b[6][0]++, orderStats?.length) ||
    /* istanbul ignore next */
    (cov_q3edlhspw().b[6][1]++, 0));
    const total_spent =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[35]++,
    /* istanbul ignore next */
    (cov_q3edlhspw().b[7][0]++, orderStats?.reduce((sum, order) => {
      /* istanbul ignore next */
      cov_q3edlhspw().f[6]++;
      cov_q3edlhspw().s[36]++;
      return sum + (
      /* istanbul ignore next */
      (cov_q3edlhspw().b[8][0]++, order.total) ||
      /* istanbul ignore next */
      (cov_q3edlhspw().b[8][1]++, 0));
    }, 0)) ||
    /* istanbul ignore next */
    (cov_q3edlhspw().b[7][1]++, 0));
    // Obtener órdenes recientes
    const {
      data: recentOrders
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[37]++, await _supabase.supabaseAdmin.from('orders').select('id, total, status, created_at').eq('user_id', userId).order('created_at', {
      ascending: false
    }).limit(5));
    /* istanbul ignore next */
    cov_q3edlhspw().s[38]++;
    return {
      ...user,
      orders_count,
      total_spent,
      recent_orders:
      /* istanbul ignore next */
      (cov_q3edlhspw().b[9][0]++, recentOrders) ||
      /* istanbul ignore next */
      (cov_q3edlhspw().b[9][1]++, [])
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[39]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error obteniendo usuario con estadísticas', {
      error,
      userId
    });
    /* istanbul ignore next */
    cov_q3edlhspw().s[40]++;
    throw error;
  }
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_q3edlhspw().f[7]++;
  const startTime =
  /* istanbul ignore next */
  (cov_q3edlhspw().s[41]++, Date.now());
  /* istanbul ignore next */
  cov_q3edlhspw().s[42]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[43]++, await (0, _ratelimiting.checkRateLimit)(request, {
      windowMs: _ratelimiter.RATE_LIMIT_CONFIGS.admin.windowMs,
      maxRequests: _ratelimiter.RATE_LIMIT_CONFIGS.admin.maxRequests,
      message:
      /* istanbul ignore next */
      (cov_q3edlhspw().b[10][0]++, _ratelimiter.RATE_LIMIT_CONFIGS.admin.message) ||
      /* istanbul ignore next */
      (cov_q3edlhspw().b[10][1]++, 'Demasiadas solicitudes administrativas')
    }, 'admin-user-detail'));
    /* istanbul ignore next */
    cov_q3edlhspw().s[44]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[11][0]++;
      const response =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[45]++, _server.NextResponse.json({
        error: rateLimitResult.message
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_q3edlhspw().s[46]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_q3edlhspw().s[47]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[11][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[48]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_q3edlhspw().s[49]++;
    if (authResult.error) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[12][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[50]++, {
        data: null,
        success: false,
        error: authResult.error
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[51]++;
      return _server.NextResponse.json(errorResponse, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[12][1]++;
    }
    // Validar parámetros
    const paramsValidation =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[52]++, UserParamsSchema.safeParse({
      id: params.id
    }));
    /* istanbul ignore next */
    cov_q3edlhspw().s[53]++;
    if (!paramsValidation.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[13][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[54]++, {
        data: null,
        success: false,
        error: 'ID de usuario inválido'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[55]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[13][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[56]++, paramsValidation.data.id);
    const user =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[57]++, await getUserWithStats(userId));
    /* istanbul ignore next */
    cov_q3edlhspw().s[58]++;
    if (!user) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[14][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[59]++, {
        data: null,
        success: false,
        error: 'Usuario no encontrado'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[60]++;
      return _server.NextResponse.json(errorResponse, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[14][1]++;
    }
    // Registrar métricas
    cov_q3edlhspw().s[61]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'GET',
      statusCode: 200,
      responseTime: Date.now() - startTime,
      userId: authResult.userId
    });
    // Log de auditoría
    /* istanbul ignore next */
    cov_q3edlhspw().s[62]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.ADMIN, 'Usuario consultado', {
      adminUserId: authResult.userId,
      targetUserId: userId
    });
    const response =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[63]++, {
      data: user,
      success: true,
      message: 'Usuario obtenido exitosamente'
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[64]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_q3edlhspw().s[65]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_q3edlhspw().s[66]++;
    return nextResponse;
  } catch (error) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[67]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en GET /api/admin/users/[id]', {
      error,
      userId: params.id
    });
    // Registrar métricas de error
    /* istanbul ignore next */
    cov_q3edlhspw().s[68]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'GET',
      statusCode: 500,
      responseTime: Date.now() - startTime,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_q3edlhspw().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_q3edlhspw().b[15][1]++, 'Unknown error')
    });
    const errorResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[69]++, {
      data: null,
      success: false,
      error: 'Error interno del servidor'
    });
    /* istanbul ignore next */
    cov_q3edlhspw().s[70]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_q3edlhspw().f[8]++;
  const startTime =
  /* istanbul ignore next */
  (cov_q3edlhspw().s[71]++, Date.now());
  /* istanbul ignore next */
  cov_q3edlhspw().s[72]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[73]++, await (0, _ratelimiting.checkRateLimit)(request, {
      windowMs: _ratelimiter.RATE_LIMIT_CONFIGS.admin.windowMs,
      maxRequests: _ratelimiter.RATE_LIMIT_CONFIGS.admin.maxRequests,
      message:
      /* istanbul ignore next */
      (cov_q3edlhspw().b[16][0]++, _ratelimiter.RATE_LIMIT_CONFIGS.admin.message) ||
      /* istanbul ignore next */
      (cov_q3edlhspw().b[16][1]++, 'Demasiadas solicitudes administrativas')
    }, 'admin-user-update'));
    /* istanbul ignore next */
    cov_q3edlhspw().s[74]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[17][0]++;
      const response =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[75]++, _server.NextResponse.json({
        error: rateLimitResult.message
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_q3edlhspw().s[76]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_q3edlhspw().s[77]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[17][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[78]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_q3edlhspw().s[79]++;
    if (authResult.error) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[18][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[80]++, {
        data: null,
        success: false,
        error: authResult.error
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[81]++;
      return _server.NextResponse.json(errorResponse, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[18][1]++;
    }
    // Validar parámetros
    const paramsValidation =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[82]++, UserParamsSchema.safeParse({
      id: params.id
    }));
    /* istanbul ignore next */
    cov_q3edlhspw().s[83]++;
    if (!paramsValidation.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[19][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[84]++, {
        data: null,
        success: false,
        error: 'ID de usuario inválido'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[85]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[19][1]++;
    }
    // Validar datos de entrada
    const body =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[86]++, await request.json());
    const validationResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[87]++, UpdateUserSchema.safeParse(body));
    /* istanbul ignore next */
    cov_q3edlhspw().s[88]++;
    if (!validationResult.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[20][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[89]++, {
        data: null,
        success: false,
        error: 'Datos de actualización inválidos'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[90]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[20][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[91]++, paramsValidation.data.id);
    const updateData =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[92]++, validationResult.data);
    // Verificar que el usuario existe
    const existingUser =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[93]++, await getUserWithStats(userId));
    /* istanbul ignore next */
    cov_q3edlhspw().s[94]++;
    if (!existingUser) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[21][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[95]++, {
        data: null,
        success: false,
        error: 'Usuario no encontrado'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[96]++;
      return _server.NextResponse.json(errorResponse, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[21][1]++;
    }
    // Prevenir que un admin se desactive a sí mismo
    cov_q3edlhspw().s[97]++;
    if (
    /* istanbul ignore next */
    (cov_q3edlhspw().b[23][0]++, userId === authResult.userId) &&
    /* istanbul ignore next */
    (cov_q3edlhspw().b[23][1]++, updateData.is_active === false)) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[22][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[98]++, {
        data: null,
        success: false,
        error: 'No puedes desactivar tu propia cuenta'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[99]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[22][1]++;
    }
    // Actualizar usuario en la base de datos
    const {
      data: updatedUser,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[100]++, await _supabase.supabaseAdmin.from('users').update({
      ...updateData,
      updated_at: new Date().toISOString()
    }).eq('id', userId).select().single());
    /* istanbul ignore next */
    cov_q3edlhspw().s[101]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[24][0]++;
      cov_q3edlhspw().s[102]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error actualizando usuario', {
        updateError,
        userId
      });
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[103]++, {
        data: null,
        success: false,
        error: 'Error actualizando usuario'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[104]++;
      return _server.NextResponse.json(errorResponse, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[24][1]++;
    }
    // Si se cambió el rol, actualizar también en Auth metadata
    cov_q3edlhspw().s[105]++;
    if (updateData.role) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[25][0]++;
      cov_q3edlhspw().s[106]++;
      await _supabase.supabaseAdmin.auth.admin.updateUserById(userId, {
        user_metadata: {
          ...existingUser,
          role: updateData.role
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[25][1]++;
    }
    // Obtener usuario actualizado con estadísticas
    const userWithStats =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[107]++, await getUserWithStats(userId));
    // Registrar métricas
    /* istanbul ignore next */
    cov_q3edlhspw().s[108]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'PUT',
      statusCode: 200,
      responseTime: Date.now() - startTime,
      userId: authResult.userId
    });
    // Log de auditoría
    /* istanbul ignore next */
    cov_q3edlhspw().s[109]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.ADMIN, 'Usuario actualizado', {
      adminUserId: authResult.userId,
      targetUserId: userId,
      changes: updateData
    });
    const response =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[110]++, {
      data: userWithStats,
      success: true,
      message: 'Usuario actualizado exitosamente'
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[111]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_q3edlhspw().s[112]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_q3edlhspw().s[113]++;
    return nextResponse;
  } catch (error) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[114]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en PUT /api/admin/users/[id]', {
      error,
      userId: params.id
    });
    // Registrar métricas de error
    /* istanbul ignore next */
    cov_q3edlhspw().s[115]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'PUT',
      statusCode: 500,
      responseTime: Date.now() - startTime,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_q3edlhspw().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_q3edlhspw().b[26][1]++, 'Unknown error')
    });
    const errorResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[116]++, {
      data: null,
      success: false,
      error: 'Error interno del servidor'
    });
    /* istanbul ignore next */
    cov_q3edlhspw().s[117]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_q3edlhspw().f[9]++;
  const startTime =
  /* istanbul ignore next */
  (cov_q3edlhspw().s[118]++, Date.now());
  /* istanbul ignore next */
  cov_q3edlhspw().s[119]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[120]++, await (0, _ratelimiting.checkRateLimit)(request, {
      windowMs: _ratelimiter.RATE_LIMIT_CONFIGS.admin.windowMs,
      maxRequests: _ratelimiter.RATE_LIMIT_CONFIGS.admin.maxRequests,
      message:
      /* istanbul ignore next */
      (cov_q3edlhspw().b[27][0]++, _ratelimiter.RATE_LIMIT_CONFIGS.admin.message) ||
      /* istanbul ignore next */
      (cov_q3edlhspw().b[27][1]++, 'Demasiadas solicitudes administrativas')
    }, 'admin-user-delete'));
    /* istanbul ignore next */
    cov_q3edlhspw().s[121]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[28][0]++;
      const response =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[122]++, _server.NextResponse.json({
        error: rateLimitResult.message
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_q3edlhspw().s[123]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_q3edlhspw().s[124]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[28][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[125]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_q3edlhspw().s[126]++;
    if (authResult.error) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[29][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[127]++, {
        data: null,
        success: false,
        error: authResult.error
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[128]++;
      return _server.NextResponse.json(errorResponse, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[29][1]++;
    }
    // Validar parámetros
    const paramsValidation =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[129]++, UserParamsSchema.safeParse({
      id: params.id
    }));
    /* istanbul ignore next */
    cov_q3edlhspw().s[130]++;
    if (!paramsValidation.success) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[30][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[131]++, {
        data: null,
        success: false,
        error: 'ID de usuario inválido'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[132]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[30][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[133]++, paramsValidation.data.id);
    // Verificar que el usuario existe
    const existingUser =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[134]++, await getUserWithStats(userId));
    /* istanbul ignore next */
    cov_q3edlhspw().s[135]++;
    if (!existingUser) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[31][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[136]++, {
        data: null,
        success: false,
        error: 'Usuario no encontrado'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[137]++;
      return _server.NextResponse.json(errorResponse, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[31][1]++;
    }
    // Prevenir que un admin se elimine a sí mismo
    cov_q3edlhspw().s[138]++;
    if (userId === authResult.userId) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[32][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[139]++, {
        data: null,
        success: false,
        error: 'No puedes eliminar tu propia cuenta'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[140]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[32][1]++;
    }
    // Verificar si el usuario tiene órdenes
    cov_q3edlhspw().s[141]++;
    if (existingUser.orders_count > 0) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[33][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[142]++, {
        data: null,
        success: false,
        error: 'No se puede eliminar un usuario con órdenes asociadas. Considera desactivarlo en su lugar.'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[143]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[33][1]++;
    }
    // Eliminar usuario de Auth
    const {
      error: authDeleteError
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[144]++, await _supabase.supabaseAdmin.auth.admin.deleteUser(userId));
    /* istanbul ignore next */
    cov_q3edlhspw().s[145]++;
    if (authDeleteError) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[34][0]++;
      cov_q3edlhspw().s[146]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.AUTH, 'Error eliminando usuario de Auth', {
        authDeleteError,
        userId
      });
      const errorResponse =
      /* istanbul ignore next */
      (cov_q3edlhspw().s[147]++, {
        data: null,
        success: false,
        error: 'Error eliminando usuario de autenticación'
      });
      /* istanbul ignore next */
      cov_q3edlhspw().s[148]++;
      return _server.NextResponse.json(errorResponse, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[34][1]++;
    }
    // Eliminar perfil de usuario
    const {
      error: profileDeleteError
    } =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[149]++, await _supabase.supabaseAdmin.from('users').delete().eq('id', userId));
    /* istanbul ignore next */
    cov_q3edlhspw().s[150]++;
    if (profileDeleteError) {
      /* istanbul ignore next */
      cov_q3edlhspw().b[35][0]++;
      cov_q3edlhspw().s[151]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error eliminando perfil de usuario', {
        profileDeleteError,
        userId
      });
      // Nota: El usuario ya fue eliminado de Auth, pero el perfil falló
      // En un escenario real, podrías querer implementar una limpieza manual
    } else
    /* istanbul ignore next */
    {
      cov_q3edlhspw().b[35][1]++;
    }
    // Registrar métricas
    cov_q3edlhspw().s[152]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'DELETE',
      statusCode: 200,
      responseTime: Date.now() - startTime,
      userId: authResult.userId
    });
    // Log de auditoría
    /* istanbul ignore next */
    cov_q3edlhspw().s[153]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.ADMIN, 'Usuario eliminado', {
      adminUserId: authResult.userId,
      deletedUserId: userId,
      deletedUserEmail: existingUser.email
    });
    const response =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[154]++, {
      data: null,
      success: true,
      message: 'Usuario eliminado exitosamente'
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[155]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_q3edlhspw().s[156]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_q3edlhspw().s[157]++;
    return nextResponse;
  } catch (error) {
    /* istanbul ignore next */
    cov_q3edlhspw().s[158]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en DELETE /api/admin/users/[id]', {
      error,
      userId: params.id
    });
    // Registrar métricas de error
    /* istanbul ignore next */
    cov_q3edlhspw().s[159]++;
    _metrics.metricsCollector.recordApiCall({
      endpoint: '/api/admin/users/[id]',
      method: 'DELETE',
      statusCode: 500,
      responseTime: Date.now() - startTime,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_q3edlhspw().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_q3edlhspw().b[36][1]++, 'Unknown error')
    });
    const errorResponse =
    /* istanbul ignore next */
    (cov_q3edlhspw().s[160]++, {
      data: null,
      success: false,
      error: 'Error interno del servidor'
    });
    /* istanbul ignore next */
    cov_q3edlhspw().s[161]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,