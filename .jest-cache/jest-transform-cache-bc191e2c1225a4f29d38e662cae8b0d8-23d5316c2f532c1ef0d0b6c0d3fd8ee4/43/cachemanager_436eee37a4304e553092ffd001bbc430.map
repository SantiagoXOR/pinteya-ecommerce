{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - CACHE MANAGER\n// ===================================\n\nimport { redisCache } from './integrations/redis'\nimport { logger, LogLevel, LogCategory } from './enterprise/logger'\n\n// Configuración de cache\nexport interface CacheConfig {\n  ttl: number // Time to live en segundos\n  prefix: string // Prefijo para las claves\n  compress?: boolean // Comprimir datos grandes\n  serialize?: boolean // Serializar objetos complejos\n}\n\n// Configuraciones predefinidas\nexport const CACHE_CONFIGS = {\n  // Para respuestas de MercadoPago (corta duración)\n  MERCADOPAGO_RESPONSE: {\n    ttl: 300, // 5 minutos\n    prefix: 'mp_response',\n    compress: true,\n    serialize: true,\n  },\n\n  // Para información de pagos (duración media)\n  PAYMENT_INFO: {\n    ttl: 1800, // 30 minutos\n    prefix: 'payment_info',\n    compress: false,\n    serialize: true,\n  },\n\n  // Para configuraciones del sistema (larga duración)\n  SYSTEM_CONFIG: {\n    ttl: 3600, // 1 hora\n    prefix: 'sys_config',\n    compress: false,\n    serialize: true,\n  },\n\n  // Para datos de productos (duración media)\n  PRODUCT_DATA: {\n    ttl: 900, // 15 minutos\n    prefix: 'product',\n    compress: true,\n    serialize: true,\n  },\n\n  // Para sesiones de usuario (corta duración)\n  USER_SESSION: {\n    ttl: 600, // 10 minutos\n    prefix: 'user_session',\n    compress: false,\n    serialize: true,\n  },\n} as const\n\n/**\n * Clase principal para manejo de cache\n */\nexport class CacheManager {\n  private static instance: CacheManager\n\n  private constructor() {}\n\n  static getInstance(): CacheManager {\n    if (!CacheManager.instance) {\n      CacheManager.instance = new CacheManager()\n    }\n    return CacheManager.instance\n  }\n\n  /**\n   * Genera clave de cache\n   */\n  private generateKey(config: CacheConfig, key: string): string {\n    return `cache:${config.prefix}:${key}`\n  }\n\n  /**\n   * Serializa datos para almacenamiento\n   */\n  private serialize<T>(data: T, config: CacheConfig): string {\n    try {\n      let serialized = config.serialize ? JSON.stringify(data) : data.toString()\n\n      if (config.compress && serialized.length > 1000) {\n        // Implementación básica de compresión (en producción usar zlib)\n        serialized = this.simpleCompress(serialized)\n      }\n\n      return serialized\n    } catch (error) {\n      logger.error(LogCategory.API, 'Serialization error', error as Error)\n      throw error\n    }\n  }\n\n  /**\n   * Deserializa datos del cache\n   */\n  private deserialize<T>(data: string, config: CacheConfig): T {\n    try {\n      let deserialized = data\n\n      if (config.compress && data.startsWith('COMPRESSED:')) {\n        deserialized = this.simpleDecompress(data)\n      }\n\n      return config.serialize ? JSON.parse(deserialized) : deserialized\n    } catch (error) {\n      logger.error(LogCategory.API, 'Deserialization error', error as Error)\n      throw error\n    }\n  }\n\n  /**\n   * Compresión simple (placeholder para implementación real)\n   */\n  private simpleCompress(data: string): string {\n    // En producción, usar zlib o similar\n    return `COMPRESSED:${data}`\n  }\n\n  /**\n   * Descompresión simple (placeholder para implementación real)\n   */\n  private simpleDecompress(data: string): string {\n    return data.replace('COMPRESSED:', '')\n  }\n\n  /**\n   * Obtiene un valor del cache\n   */\n  async get<T>(key: string, config: CacheConfig): Promise<T | null> {\n    const startTime = Date.now()\n    const cacheKey = this.generateKey(config, key)\n\n    try {\n      const cached = await redisCache.get(cacheKey)\n\n      if (cached === null) {\n        logger.info(LogCategory.API, 'Cache miss')\n        return null\n      }\n\n      const result = this.deserialize<T>(cached, config)\n\n      logger.info(LogCategory.API, 'Cache hit')\n\n      return result\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache get error', error as Error)\n      return null // Fallar silenciosamente para no afectar la aplicación\n    }\n  }\n\n  /**\n   * Establece un valor en el cache\n   */\n  async set<T>(key: string, value: T, config: CacheConfig): Promise<boolean> {\n    const startTime = Date.now()\n    const cacheKey = this.generateKey(config, key)\n\n    try {\n      const serialized = this.serialize<T>(value, config)\n      const success = await redisCache.set(cacheKey, serialized, config.ttl)\n\n      logger.info(LogCategory.API, 'Cache set')\n\n      return success\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache set error', error as Error)\n      return false\n    }\n  }\n\n  /**\n   * Elimina un valor del cache\n   */\n  async delete(key: string, config: CacheConfig): Promise<boolean> {\n    const cacheKey = this.generateKey(config, key)\n\n    try {\n      const success = await redisCache.del(cacheKey)\n\n      logger.info(LogCategory.API, 'Cache delete')\n\n      return success\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache delete error', error as Error)\n      return false\n    }\n  }\n\n  /**\n   * Obtiene o establece un valor (patrón cache-aside)\n   */\n  async getOrSet<T>(key: string, fetcher: () => Promise<T>, config: CacheConfig): Promise<T> {\n    // Intentar obtener del cache primero\n    const cached = await this.get<T>(key, config)\n    if (cached !== null) {\n      return cached\n    }\n\n    // Si no está en cache, obtener del origen\n    const startTime = Date.now()\n    try {\n      const value = await fetcher()\n\n      // Almacenar en cache de forma asíncrona\n      this.set(key, value, config).catch(error => {\n        logger.warn(LogCategory.API, 'Background cache set failed')\n      })\n\n      logger.info(LogCategory.API, 'Cache miss - fetched from source')\n\n      return value\n    } catch (error) {\n      logger.error(LogCategory.API, 'Fetcher error in getOrSet', error as Error)\n      throw error\n    }\n  }\n\n  /**\n   * Invalida cache por patrón\n   */\n  async invalidatePattern(pattern: string, config: CacheConfig): Promise<number> {\n    const fullPattern = this.generateKey(config, pattern)\n\n    try {\n      // En Redis real, usaríamos SCAN + DEL para patrones\n      // Por simplicidad, aquí solo registramos la operación\n      logger.info(LogCategory.API, 'Cache invalidation requested')\n\n      // TODO: Implementar invalidación real por patrón\n      return 0\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache invalidation error', error as Error)\n      return 0\n    }\n  }\n\n  /**\n   * Obtiene estadísticas del cache\n   */\n  async getStats(): Promise<{\n    hits: number\n    misses: number\n    hitRate: number\n    totalKeys: number\n  }> {\n    try {\n      // En implementación real, obtendríamos estas métricas de Redis\n      return {\n        hits: 0,\n        misses: 0,\n        hitRate: 0,\n        totalKeys: 0,\n      }\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache stats error', error as Error)\n      return {\n        hits: 0,\n        misses: 0,\n        hitRate: 0,\n        totalKeys: 0,\n      }\n    }\n  }\n\n  /**\n   * Limpia todo el cache de un prefijo\n   */\n  async clear(config: CacheConfig): Promise<boolean> {\n    try {\n      logger.info(LogCategory.API, 'Cache clear requested')\n\n      // TODO: Implementar limpieza real por prefijo\n      return true\n    } catch (error) {\n      logger.error(LogCategory.API, 'Cache clear error', error as Error)\n      return false\n    }\n  }\n}\n\n// Instancia singleton\nexport const cacheManager = CacheManager.getInstance()\n\n/**\n * Decorador para cachear resultados de funciones\n */\nexport function cached(config: CacheConfig, keyGenerator?: (...args: any[]) => string) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value\n\n    descriptor.value = async function (...args: any[]) {\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`\n\n      return cacheManager.getOrSet(key, () => method.apply(this, args), config)\n    }\n\n    return descriptor\n  }\n}\n\n/**\n * Funciones de utilidad para casos comunes\n */\nexport const CacheUtils = {\n  /**\n   * Cache para respuestas de MercadoPago\n   */\n  async cacheMercadoPagoResponse<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\n    return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE)\n  },\n\n  /**\n   * Cache para información de pagos\n   */\n  async cachePaymentInfo<T>(paymentId: string, fetcher: () => Promise<T>): Promise<T> {\n    return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO)\n  },\n\n  /**\n   * Cache para datos de productos\n   */\n  async cacheProductData<T>(productId: string, fetcher: () => Promise<T>): Promise<T> {\n    return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA)\n  },\n\n  /**\n   * Invalida cache de un pago específico\n   */\n  async invalidatePayment(paymentId: string): Promise<boolean> {\n    return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO)\n  },\n\n  /**\n   * Invalida cache de un producto específico\n   */\n  async invalidateProduct(productId: string): Promise<boolean> {\n    return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA)\n  },\n}\n"],"names":["CACHE_CONFIGS","CacheManager","CacheUtils","cacheManager","cached","MERCADOPAGO_RESPONSE","ttl","prefix","compress","serialize","PAYMENT_INFO","SYSTEM_CONFIG","PRODUCT_DATA","USER_SESSION","getInstance","instance","generateKey","config","key","data","serialized","JSON","stringify","toString","length","simpleCompress","error","logger","LogCategory","API","deserialize","deserialized","startsWith","simpleDecompress","parse","replace","get","startTime","Date","now","cacheKey","redisCache","info","result","set","value","success","delete","del","getOrSet","fetcher","catch","warn","invalidatePattern","pattern","fullPattern","getStats","hits","misses","hitRate","totalKeys","clear","keyGenerator","target","propertyName","descriptor","method","args","apply","cacheMercadoPagoResponse","cachePaymentInfo","paymentId","cacheProductData","productId","invalidatePayment","invalidateProduct"],"mappings":"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"}