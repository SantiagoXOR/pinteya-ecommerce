{"version":3,"names":["DELETE","cov_q3edlhspw","f","s","GET","PUT","UpdateUserSchema","_zod","z","object","name","string","min","max","optional","role","enum","is_active","boolean","phone","nullable","address","street_name","street_number","zip_code","city_name","state_name","UserParamsSchema","id","uuid","validateAdminAuth","b","process","env","NODE_ENV","BYPASS_AUTH","user","email","userId","session","_auth","auth","error","status","isAdmin","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","getUserWithStats","data","userError","_supabase","supabaseAdmin","from","select","eq","single","orderStats","orders_count","length","total_spent","reduce","sum","order","total","recentOrders","ascending","limit","recent_orders","API","request","params","startTime","Date","now","rateLimitResult","_ratelimiting","checkRateLimit","windowMs","_ratelimiter","RATE_LIMIT_CONFIGS","admin","maxRequests","message","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","paramsValidation","safeParse","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","INFO","ADMIN","adminUserId","targetUserId","nextResponse","Error","body","validationResult","updateData","existingUser","updatedUser","updateError","update","updated_at","toISOString","updateUserById","user_metadata","userWithStats","changes","authDeleteError","deleteUser","profileDeleteError","delete","deletedUserId","deletedUserEmail"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\[id]\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN USER BY ID API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst UpdateUserSchema = z.object({\r\n  name: z.string().min(1, 'Nombre requerido').max(100, 'Máximo 100 caracteres').optional(),\r\n  role: z.enum(['user', 'admin', 'moderator']).optional(),\r\n  is_active: z.boolean().optional(),\r\n  phone: z.string().optional().nullable(),\r\n  address: z.object({\r\n    street_name: z.string().optional(),\r\n    street_number: z.string().optional(),\r\n    zip_code: z.string().optional(),\r\n    city_name: z.string().optional(),\r\n    state_name: z.string().optional(),\r\n  }).optional().nullable(),\r\n});\r\n\r\nconst UserParamsSchema = z.object({\r\n  id: z.string().uuid('ID de usuario inválido')\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface UserWithStats {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  is_active: boolean;\r\n  phone?: string;\r\n  address?: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_login?: string;\r\n  orders_count: number;\r\n  total_spent: number;\r\n  avatar_url?: string;\r\n  recent_orders?: Array<{\r\n    id: string;\r\n    total: number;\r\n    status: string;\r\n    created_at: string;\r\n  }>;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // BYPASS TEMPORAL PARA DESARROLLO\r\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n      return {\r\n        user: {\r\n          id: 'dev-admin',\r\n          email: 'santiago@xor.com.ar',\r\n          name: 'Dev Admin'\r\n        },\r\n        userId: 'dev-admin'\r\n      };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function getUserWithStats(userId: string): Promise<UserWithStats | null> {\r\n  try {\r\n    // Obtener datos del usuario\r\n    const { data: user, error: userError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select(`\r\n        id,\r\n        email,\r\n        first_name,\r\n        last_name,\r\n        role_id,\r\n        is_active,\r\n        metadata,\r\n        created_at,\r\n        updated_at,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (userError || !user) {\r\n      return null;\r\n    }\r\n\r\n    // Obtener estadísticas de órdenes\r\n    const { data: orderStats } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('total')\r\n      .eq('user_id', userId)\r\n      .eq('status', 'completed');\r\n\r\n    const orders_count = orderStats?.length || 0;\r\n    const total_spent = orderStats?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n\r\n    // Obtener órdenes recientes\r\n    const { data: recentOrders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, total, status, created_at')\r\n      .eq('user_id', userId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    return {\r\n      ...user,\r\n      orders_count,\r\n      total_spent,\r\n      recent_orders: recentOrders || []\r\n    };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo usuario con estadísticas', { error, userId });\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener usuario específico por ID\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-detail'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar parámetros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inválido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n    const user = await getUserWithStats(userId);\r\n\r\n    if (!user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario consultado', {\r\n      adminUserId: authResult.userId,\r\n      targetUserId: userId\r\n    });\r\n\r\n    const response: ApiResponse<UserWithStats> = {\r\n      data: user,\r\n      success: true,\r\n      message: 'Usuario obtenido exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar usuario\r\n// ===================================\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-update'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar parámetros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inválido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = UpdateUserSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Datos de actualización inválidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n    const updateData = validationResult.data;\r\n\r\n    // Verificar que el usuario existe\r\n    const existingUser = await getUserWithStats(userId);\r\n    if (!existingUser) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Prevenir que un admin se desactive a sí mismo\r\n    if (userId === authResult.userId && updateData.is_active === false) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No puedes desactivar tu propia cuenta',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Actualizar usuario en la base de datos\r\n    const { data: updatedUser, error: updateError } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        ...updateData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.API, 'Error actualizando usuario', { updateError, userId });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error actualizando usuario',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Si se cambió el rol, actualizar también en Auth metadata\r\n    if (updateData.role) {\r\n      await supabaseAdmin.auth.admin.updateUserById(userId, {\r\n        user_metadata: {\r\n          ...existingUser,\r\n          role: updateData.role\r\n        }\r\n      });\r\n    }\r\n\r\n    // Obtener usuario actualizado con estadísticas\r\n    const userWithStats = await getUserWithStats(userId);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'PUT',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario actualizado', {\r\n      adminUserId: authResult.userId,\r\n      targetUserId: userId,\r\n      changes: updateData\r\n    });\r\n\r\n    const response: ApiResponse<UserWithStats> = {\r\n      data: userWithStats!,\r\n      success: true,\r\n      message: 'Usuario actualizado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en PUT /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'PUT',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Eliminar usuario\r\n// ===================================\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-user-delete'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar parámetros\r\n    const paramsValidation = UserParamsSchema.safeParse({ id: params.id });\r\n    if (!paramsValidation.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'ID de usuario inválido',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const userId = paramsValidation.data.id;\r\n\r\n    // Verificar que el usuario existe\r\n    const existingUser = await getUserWithStats(userId);\r\n    if (!existingUser) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no encontrado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Prevenir que un admin se elimine a sí mismo\r\n    if (userId === authResult.userId) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No puedes eliminar tu propia cuenta',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Verificar si el usuario tiene órdenes\r\n    if (existingUser.orders_count > 0) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'No se puede eliminar un usuario con órdenes asociadas. Considera desactivarlo en su lugar.',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Eliminar usuario de Auth\r\n    const { error: authDeleteError } = await supabaseAdmin.auth.admin.deleteUser(userId);\r\n    if (authDeleteError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error eliminando usuario de Auth', { authDeleteError, userId });\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Error eliminando usuario de autenticación',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Eliminar perfil de usuario\r\n    const { error: profileDeleteError } = await supabaseAdmin\r\n      .from('users')\r\n      .delete()\r\n      .eq('id', userId);\r\n\r\n    if (profileDeleteError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.API, 'Error eliminando perfil de usuario', { profileDeleteError, userId });\r\n      // Nota: El usuario ya fue eliminado de Auth, pero el perfil falló\r\n      // En un escenario real, podrías querer implementar una limpieza manual\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'DELETE',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Usuario eliminado', {\r\n      adminUserId: authResult.userId,\r\n      deletedUserId: userId,\r\n      deletedUserEmail: existingUser.email\r\n    });\r\n\r\n    const response: ApiResponse<null> = {\r\n      data: null,\r\n      success: true,\r\n      message: 'Usuario eliminado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en DELETE /api/admin/users/[id]', { error, userId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/[id]',\r\n      method: 'DELETE',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}"],"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","ignoreList":[]}