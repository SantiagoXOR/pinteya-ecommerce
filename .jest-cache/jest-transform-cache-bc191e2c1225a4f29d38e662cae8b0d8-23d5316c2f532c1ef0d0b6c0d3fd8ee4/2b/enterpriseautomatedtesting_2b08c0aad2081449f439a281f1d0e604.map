{"version":3,"names":["cov_2nnuikch0f","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ENTERPRISE_TEST_CASES","EnterpriseAutomatedTesting","enterpriseAutomatedTesting","id","description","severity","enabled","timeout","retries","interval","testFunction","startTime","Date","toISOString","runId","now","metrics","_enterpriseratelimiter","metricsCollector","getMetrics","totalRequests","Error","averageResponseTime","testId","status","endTime","duration","getTime","passed","assertions","assertionsPassed","assertionsFailed","environment","details","error","message","alertOnFailure","alertThreshold","tags","createdAt","updatedAt","testContext","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","correlationId","_enterpriseauditsystem","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","metadata","test","ip_address","user_agent","startsWith","cacheMetrics","_enterprisecachesystem","enterpriseCacheSystem","cacheKeys","Object","keys","length","warning","cacheKeysCount","totalHits","reduce","sum","key","hits","totalMisses","misses","hitRate","toFixed","hitRatePercent","activeAlerts","_enterprisealertsystem","enterpriseAlertSystem","getActiveAlerts","alertMetrics","getAlertMetrics","testAlertId","EnterpriseAlertUtils","createManualAlert","createdAlert","find","alert","resolved","resolveAlert","activeAlertsCount","totalAlerts","constructor","testCases","Map","testResults","runningTests","Set","testTimers","isInitialized","getInstance","instance","initialize","forEach","testCase","set","startScheduledTests","console","log","size","runTest","get","has","add","result","Promise","race","_","reject","setTimeout","push","checkAlertThreshold","failedResult","delete","runAllTests","enabledTests","Array","from","values","filter","results","getTestMetrics","allResults","flat","totalTests","passedTests","failedTests","skippedTests","successRate","averageDuration","totalDuration","lastRun","r","latest","getTestResults","limit","slice","reverse","getAllTests","recentResults","recentFailures"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\enterprise-automated-testing.ts"],"sourcesContent":["/**\r\n * Sistema Enterprise de Testing Automatizado\r\n * Ejecuta tests continuos de todos los sistemas enterprise\r\n */\r\n\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { enterpriseAlertSystem, EnterpriseAlertUtils } from '@/lib/monitoring/enterprise-alert-system';\r\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\nexport type TestType = 'unit' | 'integration' | 'e2e' | 'security' | 'performance' | 'smoke';\r\nexport type TestStatus = 'pending' | 'running' | 'passed' | 'failed' | 'skipped' | 'timeout';\r\nexport type TestSeverity = 'low' | 'medium' | 'high' | 'critical';\r\n\r\nexport interface TestCase {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: TestType;\r\n  severity: TestSeverity;\r\n  enabled: boolean;\r\n  \r\n  // Configuración de ejecución\r\n  timeout: number; // milisegundos\r\n  retries: number;\r\n  interval: number; // segundos para tests continuos\r\n  \r\n  // Función de test\r\n  testFunction: () => Promise<TestResult>;\r\n  \r\n  // Configuración de alertas\r\n  alertOnFailure: boolean;\r\n  alertThreshold: number; // número de fallos consecutivos\r\n  \r\n  // Metadatos\r\n  tags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface TestResult {\r\n  testId: string;\r\n  status: TestStatus;\r\n  startTime: string;\r\n  endTime: string;\r\n  duration: number; // milisegundos\r\n  \r\n  // Resultados\r\n  passed: boolean;\r\n  error?: string;\r\n  details?: any;\r\n  \r\n  // Métricas\r\n  assertions: number;\r\n  assertionsPassed: number;\r\n  assertionsFailed: number;\r\n  \r\n  // Metadatos\r\n  environment: string;\r\n  version: string;\r\n  runId: string;\r\n}\r\n\r\nexport interface TestSuite {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  tests: TestCase[];\r\n  enabled: boolean;\r\n  \r\n  // Configuración de ejecución\r\n  parallel: boolean;\r\n  maxConcurrency: number;\r\n  \r\n  // Configuración de programación\r\n  schedule?: {\r\n    enabled: boolean;\r\n    cron: string;\r\n    timezone: string;\r\n  };\r\n  \r\n  // Metadatos\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface TestMetrics {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  successRate: number;\r\n  averageDuration: number;\r\n  totalDuration: number;\r\n  lastRun: string;\r\n}\r\n\r\n// =====================================================\r\n// TESTS PREDEFINIDOS\r\n// =====================================================\r\n\r\nexport const ENTERPRISE_TEST_CASES: TestCase[] = [\r\n  // Tests de seguridad\r\n  {\r\n    id: 'security_rate_limiting_basic',\r\n    name: 'Rate Limiting - Funcionalidad Básica',\r\n    description: 'Verifica que el rate limiting funcione correctamente',\r\n    type: 'security',\r\n    severity: 'critical',\r\n    enabled: true,\r\n    timeout: 30000,\r\n    retries: 2,\r\n    interval: 300, // 5 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Simular requests para probar rate limiting\r\n        const metrics = metricsCollector.getMetrics();\r\n        \r\n        // Verificar que las métricas existen\r\n        if (typeof metrics.totalRequests !== 'number') {\r\n          throw new Error('Rate limiting metrics not available');\r\n        }\r\n        \r\n        // Verificar que el sistema está respondiendo\r\n        if (metrics.averageResponseTime > 5000) {\r\n          throw new Error(`Response time too high: ${metrics.averageResponseTime}ms`);\r\n        }\r\n        \r\n        return {\r\n          testId: 'security_rate_limiting_basic',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 2,\r\n          assertionsPassed: 2,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            totalRequests: metrics.totalRequests,\r\n            averageResponseTime: metrics.averageResponseTime\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'security_rate_limiting_basic',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 2,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 2,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 2,\r\n    tags: ['security', 'rate-limiting', 'critical'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  {\r\n    id: 'security_audit_logging',\r\n    name: 'Auditoría - Sistema de Logging',\r\n    description: 'Verifica que el sistema de auditoría esté funcionando',\r\n    type: 'security',\r\n    severity: 'high',\r\n    enabled: true,\r\n    timeout: 20000,\r\n    retries: 1,\r\n    interval: 600, // 10 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Crear evento de prueba\r\n        const testContext: EnterpriseAuthContext = {\r\n          userId: 'test_user',\r\n          sessionId: 'test_session',\r\n          email: 'test@pinteya.com',\r\n          role: 'admin',\r\n          permissions: ['test_access'],\r\n          sessionValid: true,\r\n          securityLevel: 'high',\r\n          ipAddress: '127.0.0.1',\r\n          userAgent: 'AutomatedTest/1.0',\r\n          supabase: {} as any,\r\n          validations: {\r\n            jwtValid: true,\r\n            csrfValid: true,\r\n            rateLimitPassed: true,\r\n            originValid: true\r\n          }\r\n        };\r\n\r\n        const correlationId = await enterpriseAuditSystem.logEnterpriseEvent({\r\n          user_id: 'test_user',\r\n          event_type: 'TEST_EVENT' as any,\r\n          event_category: 'automated_testing',\r\n          severity: 'low' as any,\r\n          description: 'Automated test event',\r\n          metadata: { test: true, runId },\r\n          ip_address: '127.0.0.1',\r\n          user_agent: 'AutomatedTest/1.0'\r\n        }, testContext);\r\n\r\n        if (!correlationId || !correlationId.startsWith('corr_')) {\r\n          throw new Error('Audit system did not return valid correlation ID');\r\n        }\r\n\r\n        return {\r\n          testId: 'security_audit_logging',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 1,\r\n          assertionsPassed: 1,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            correlationId\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'security_audit_logging',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 1,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 1,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 1,\r\n    tags: ['security', 'audit', 'logging'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  // Tests de performance\r\n  {\r\n    id: 'performance_cache_hit_rate',\r\n    name: 'Performance - Cache Hit Rate',\r\n    description: 'Verifica que la tasa de hit del cache sea óptima',\r\n    type: 'performance',\r\n    severity: 'medium',\r\n    enabled: true,\r\n    timeout: 15000,\r\n    retries: 1,\r\n    interval: 300, // 5 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n        const cacheKeys = Object.keys(cacheMetrics);\r\n        \r\n        if (cacheKeys.length === 0) {\r\n          // Si no hay métricas de cache, el test pasa pero con advertencia\r\n          return {\r\n            testId: 'performance_cache_hit_rate',\r\n            status: 'passed' as TestStatus,\r\n            startTime,\r\n            endTime: new Date().toISOString(),\r\n            duration: Date.now() - new Date(startTime).getTime(),\r\n            passed: true,\r\n            assertions: 1,\r\n            assertionsPassed: 1,\r\n            assertionsFailed: 0,\r\n            environment: 'production',\r\n            version: '1.0.0',\r\n            runId,\r\n            details: {\r\n              warning: 'No cache metrics available',\r\n              cacheKeysCount: 0\r\n            }\r\n          };\r\n        }\r\n\r\n        // Calcular hit rate promedio\r\n        const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0);\r\n        const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0);\r\n        const totalRequests = totalHits + totalMisses;\r\n        const hitRate = totalRequests > 0 ? totalHits / totalRequests : 0;\r\n\r\n        // Verificar que el hit rate sea aceptable (> 70%)\r\n        if (hitRate < 0.7) {\r\n          throw new Error(`Cache hit rate too low: ${(hitRate * 100).toFixed(2)}% (expected > 70%)`);\r\n        }\r\n\r\n        return {\r\n          testId: 'performance_cache_hit_rate',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 1,\r\n          assertionsPassed: 1,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            hitRate: hitRate,\r\n            hitRatePercent: (hitRate * 100).toFixed(2),\r\n            totalHits,\r\n            totalMisses,\r\n            cacheKeysCount: cacheKeys.length\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'performance_cache_hit_rate',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 1,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 1,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 3,\r\n    tags: ['performance', 'cache', 'optimization'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  // Tests de integración\r\n  {\r\n    id: 'integration_alert_system',\r\n    name: 'Integración - Sistema de Alertas',\r\n    description: 'Verifica que el sistema de alertas esté funcionando',\r\n    type: 'integration',\r\n    severity: 'high',\r\n    enabled: true,\r\n    timeout: 25000,\r\n    retries: 1,\r\n    interval: 900, // 15 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Verificar que el sistema de alertas esté inicializado\r\n        const activeAlerts = enterpriseAlertSystem.getActiveAlerts();\r\n        const alertMetrics = enterpriseAlertSystem.getAlertMetrics();\r\n        \r\n        // Crear una alerta de prueba\r\n        const testAlertId = await EnterpriseAlertUtils.createManualAlert(\r\n          'Test Alert',\r\n          'Automated test alert',\r\n          'low',\r\n          'availability',\r\n          'automated_test'\r\n        );\r\n\r\n        // Verificar que la alerta se creó\r\n        const createdAlert = enterpriseAlertSystem.getActiveAlerts()\r\n          .find(alert => alert.id === testAlertId);\r\n\r\n        if (!createdAlert) {\r\n          throw new Error('Test alert was not created successfully');\r\n        }\r\n\r\n        // Resolver la alerta de prueba\r\n        const resolved = await enterpriseAlertSystem.resolveAlert(testAlertId, 'automated_test');\r\n        \r\n        if (!resolved) {\r\n          throw new Error('Test alert could not be resolved');\r\n        }\r\n\r\n        return {\r\n          testId: 'integration_alert_system',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 3,\r\n          assertionsPassed: 3,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            testAlertId,\r\n            activeAlertsCount: activeAlerts.length,\r\n            totalAlerts: alertMetrics.totalAlerts\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'integration_alert_system',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 3,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 3,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 1,\r\n    tags: ['integration', 'alerts', 'monitoring'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// =====================================================\r\n// SISTEMA ENTERPRISE DE TESTING AUTOMATIZADO\r\n// =====================================================\r\n\r\nexport class EnterpriseAutomatedTesting {\r\n  private static instance: EnterpriseAutomatedTesting;\r\n  private testCases: Map<string, TestCase> = new Map();\r\n  private testResults: Map<string, TestResult[]> = new Map();\r\n  private runningTests: Set<string> = new Set();\r\n  private testTimers: Map<string, NodeJS.Timeout> = new Map();\r\n  private isInitialized = false;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): EnterpriseAutomatedTesting {\r\n    if (!EnterpriseAutomatedTesting.instance) {\r\n      EnterpriseAutomatedTesting.instance = new EnterpriseAutomatedTesting();\r\n    }\r\n    return EnterpriseAutomatedTesting.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el sistema de testing automatizado\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {return;}\r\n\r\n    try {\r\n      // Cargar tests predefinidos\r\n      ENTERPRISE_TEST_CASES.forEach(testCase => {\r\n        this.testCases.set(testCase.id, testCase);\r\n      });\r\n\r\n      // Iniciar ejecución programada de tests\r\n      this.startScheduledTests();\r\n\r\n      this.isInitialized = true;\r\n      console.log('[ENTERPRISE_TESTING] Sistema inicializado con', this.testCases.size, 'tests');\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_TESTING] Error inicializando sistema:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test específico\r\n   */\r\n  async runTest(testId: string): Promise<TestResult> {\r\n    const testCase = this.testCases.get(testId);\r\n    if (!testCase) {\r\n      throw new Error(`Test case not found: ${testId}`);\r\n    }\r\n\r\n    if (!testCase.enabled) {\r\n      return {\r\n        testId,\r\n        status: 'skipped',\r\n        startTime: new Date().toISOString(),\r\n        endTime: new Date().toISOString(),\r\n        duration: 0,\r\n        passed: false,\r\n        assertions: 0,\r\n        assertionsPassed: 0,\r\n        assertionsFailed: 0,\r\n        environment: 'production',\r\n        version: '1.0.0',\r\n        runId: `skip_${Date.now()}`\r\n      };\r\n    }\r\n\r\n    if (this.runningTests.has(testId)) {\r\n      throw new Error(`Test is already running: ${testId}`);\r\n    }\r\n\r\n    this.runningTests.add(testId);\r\n\r\n    try {\r\n      // Ejecutar test con timeout\r\n      const result = await Promise.race([\r\n        testCase.testFunction(),\r\n        new Promise<TestResult>((_, reject) => \r\n          setTimeout(() => reject(new Error('Test timeout')), testCase.timeout)\r\n        )\r\n      ]);\r\n\r\n      // Guardar resultado\r\n      if (!this.testResults.has(testId)) {\r\n        this.testResults.set(testId, []);\r\n      }\r\n      this.testResults.get(testId)!.push(result);\r\n\r\n      // Verificar si necesita alerta\r\n      if (!result.passed && testCase.alertOnFailure) {\r\n        await this.checkAlertThreshold(testCase, result);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const failedResult: TestResult = {\r\n        testId,\r\n        status: error.message === 'Test timeout' ? 'timeout' : 'failed',\r\n        startTime: new Date().toISOString(),\r\n        endTime: new Date().toISOString(),\r\n        duration: testCase.timeout,\r\n        passed: false,\r\n        error: error.message,\r\n        assertions: 0,\r\n        assertionsPassed: 0,\r\n        assertionsFailed: 1,\r\n        environment: 'production',\r\n        version: '1.0.0',\r\n        runId: `error_${Date.now()}`\r\n      };\r\n\r\n      // Guardar resultado fallido\r\n      if (!this.testResults.has(testId)) {\r\n        this.testResults.set(testId, []);\r\n      }\r\n      this.testResults.get(testId)!.push(failedResult);\r\n\r\n      // Verificar si necesita alerta\r\n      if (testCase.alertOnFailure) {\r\n        await this.checkAlertThreshold(testCase, failedResult);\r\n      }\r\n\r\n      return failedResult;\r\n    } finally {\r\n      this.runningTests.delete(testId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los tests habilitados\r\n   */\r\n  async runAllTests(): Promise<TestResult[]> {\r\n    const enabledTests = Array.from(this.testCases.values()).filter(test => test.enabled);\r\n    const results: TestResult[] = [];\r\n\r\n    for (const testCase of enabledTests) {\r\n      try {\r\n        const result = await this.runTest(testCase.id);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`[ENTERPRISE_TESTING] Error running test ${testCase.id}:`, error);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas de testing\r\n   */\r\n  getTestMetrics(): TestMetrics {\r\n    const allResults = Array.from(this.testResults.values()).flat();\r\n    \r\n    if (allResults.length === 0) {\r\n      return {\r\n        totalTests: 0,\r\n        passedTests: 0,\r\n        failedTests: 0,\r\n        skippedTests: 0,\r\n        successRate: 0,\r\n        averageDuration: 0,\r\n        totalDuration: 0,\r\n        lastRun: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    const passedTests = allResults.filter(r => r.passed).length;\r\n    const failedTests = allResults.filter(r => !r.passed && r.status !== 'skipped').length;\r\n    const skippedTests = allResults.filter(r => r.status === 'skipped').length;\r\n    const totalDuration = allResults.reduce((sum, r) => sum + r.duration, 0);\r\n    const averageDuration = totalDuration / allResults.length;\r\n    const successRate = allResults.length > 0 ? passedTests / allResults.length : 0;\r\n    const lastRun = allResults.reduce((latest, r) => \r\n      r.endTime > latest ? r.endTime : latest, allResults[0].endTime);\r\n\r\n    return {\r\n      totalTests: allResults.length,\r\n      passedTests,\r\n      failedTests,\r\n      skippedTests,\r\n      successRate,\r\n      averageDuration,\r\n      totalDuration,\r\n      lastRun\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene resultados de un test específico\r\n   */\r\n  getTestResults(testId: string, limit: number = 10): TestResult[] {\r\n    const results = this.testResults.get(testId) || [];\r\n    return results.slice(-limit).reverse(); // Últimos N resultados, más reciente primero\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los tests\r\n   */\r\n  getAllTests(): TestCase[] {\r\n    return Array.from(this.testCases.values());\r\n  }\r\n\r\n  // =====================================================\r\n  // MÉTODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  private startScheduledTests(): void {\r\n    console.log('[ENTERPRISE_TESTING] 🚫 TESTS PROGRAMADOS TEMPORALMENTE DESHABILITADOS');\r\n    console.log('[ENTERPRISE_TESTING] 📋 Razón: Evitar llamadas recursivas a APIs de auth');\r\n\r\n    // CÓDIGO COMENTADO TEMPORALMENTE PARA EVITAR RECURSIÓN\r\n    // for (const [testId, testCase] of this.testCases.entries()) {\r\n    //   if (!testCase.enabled || testCase.interval <= 0) continue;\r\n\r\n    //   const timer = setInterval(async () => {\r\n    //     try {\r\n    //       await this.runTest(testId);\r\n    //     } catch (error) {\r\n    //       console.error(`[ENTERPRISE_TESTING] Error in scheduled test ${testId}:`, error);\r\n    //     }\r\n    //   }, testCase.interval * 1000);\r\n\r\n    //   this.testTimers.set(testId, timer);\r\n    // }\r\n  }\r\n\r\n  private async checkAlertThreshold(testCase: TestCase, result: TestResult): Promise<void> {\r\n    const recentResults = this.getTestResults(testCase.id, testCase.alertThreshold);\r\n    const recentFailures = recentResults.filter(r => !r.passed).length;\r\n\r\n    if (recentFailures >= testCase.alertThreshold) {\r\n      // Crear alerta\r\n      await EnterpriseAlertUtils.createManualAlert(\r\n        `Test Failure: ${testCase.name}`,\r\n        `Test ${testCase.name} has failed ${recentFailures} times consecutively. Last error: ${result.error}`,\r\n        testCase.severity === 'critical' ? 'critical' : \r\n        testCase.severity === 'high' ? 'high' : 'medium',\r\n        'availability',\r\n        'automated_testing'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON\r\n// =====================================================\r\n\r\nexport const enterpriseAutomatedTesting = EnterpriseAutomatedTesting.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}