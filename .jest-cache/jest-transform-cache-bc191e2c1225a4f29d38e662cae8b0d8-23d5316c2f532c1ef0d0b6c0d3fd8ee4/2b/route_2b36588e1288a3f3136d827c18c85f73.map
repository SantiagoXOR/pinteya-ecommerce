{"version":3,"names":["cov_267vgkv1vh","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","body","location","speed","heading","accuracy","lat","lng","supabase","_server1","createClient","data","driver","driverError","from","select","eq","single","locationData","timestamp","Date","toISOString","updatedDriver","updateError","update","current_location","updated_at","id","console","insert","driver_id","created_at","historyError","warn","checkProximityToDestinations","success","last_updated","driverId","currentLocation","activeRoutes","length","route","shipments","i","shipment","destination","coordinates","distance","calculateDistance","log","customer_name","point1","point2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\location\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para actualizar la ubicación del driver en tiempo real\r\n * POST /api/driver/location\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { location, speed, heading, accuracy } = body;\r\n\r\n    // Validar datos de ubicación\r\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\r\n      return NextResponse.json(\r\n        { error: 'Datos de ubicación inválidos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, status')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de ubicación\r\n    const locationData = {\r\n      lat: location.lat,\r\n      lng: location.lng,\r\n      timestamp: new Date().toISOString(),\r\n      speed: speed || 0,\r\n      heading: heading || 0,\r\n      accuracy: accuracy || 0\r\n    };\r\n\r\n    // Actualizar ubicación del driver\r\n    const { data: updatedDriver, error: updateError } = await supabase\r\n      .from('drivers')\r\n      .update({\r\n        current_location: locationData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', driver.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating driver location:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error actualizando ubicación' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Opcional: Guardar historial de ubicaciones para tracking\r\n    try {\r\n      await supabase\r\n        .from('driver_location_history')\r\n        .insert({\r\n          driver_id: driver.id,\r\n          location: locationData,\r\n          created_at: new Date().toISOString()\r\n        });\r\n    } catch (historyError) {\r\n      // No fallar si no se puede guardar el historial\r\n      console.warn('Could not save location history:', historyError);\r\n    }\r\n\r\n    // Si el driver está en una ruta activa, verificar proximidad a destinos\r\n    if (driver.status === 'busy') {\r\n      await checkProximityToDestinations(driver.id, location);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      location: locationData,\r\n      driver: {\r\n        id: updatedDriver.id,\r\n        status: updatedDriver.status,\r\n        current_location: updatedDriver.current_location\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver location API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener ubicación actual del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, current_location, status, updated_at')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      location: driver.current_location,\r\n      status: driver.status,\r\n      last_updated: driver.updated_at\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error getting driver location:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Función helper para verificar proximidad a destinos de entrega\r\n */\r\nasync function checkProximityToDestinations(\r\n  driverId: string, \r\n  currentLocation: { lat: number; lng: number }\r\n) {\r\n  try {\r\n    const supabase = await createClient();\r\n\r\n    // Obtener rutas activas del driver\r\n    const { data: activeRoutes, error } = await supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('driver_id', driverId)\r\n      .eq('status', 'active');\r\n\r\n    if (error || !activeRoutes?.length) return;\r\n\r\n    // Verificar proximidad a cada destino\r\n    for (const route of activeRoutes) {\r\n      if (!route.shipments) continue;\r\n\r\n      for (let i = 0; i < route.shipments.length; i++) {\r\n        const shipment = route.shipments[i];\r\n        \r\n        if (shipment.status === 'delivered') continue;\r\n\r\n        const destination = shipment.destination?.coordinates;\r\n        if (!destination) continue;\r\n\r\n        const distance = calculateDistance(currentLocation, destination);\r\n        \r\n        // Si está a menos de 100 metros del destino\r\n        if (distance < 100) {\r\n          // Opcional: Enviar notificación o actualizar estado\r\n          console.log(`Driver ${driverId} is near delivery destination: ${shipment.customer_name}`);\r\n          \r\n          // Aquí se podría implementar:\r\n          // - Notificación push al cliente\r\n          // - Actualización automática de estado\r\n          // - Alerta al dashboard administrativo\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking proximity:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Calcular distancia entre dos puntos en metros\r\n */\r\nfunction calculateDistance(\r\n  point1: { lat: number; lng: number },\r\n  point2: { lat: number; lng: number }\r\n): number {\r\n  const R = 6371000; // Radio de la Tierra en metros\r\n  const dLat = (point2.lat - point1.lat) * Math.PI / 180;\r\n  const dLon = (point2.lng - point1.lng) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * \r\n    Math.sin(dLon/2) * Math.sin(dLon/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}