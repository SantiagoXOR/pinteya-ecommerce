e3e1aebf58d0a1e33326da508caee6cd
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA HOOK STICKY MENU
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useStickyMenu = require("../../hooks/useStickyMenu");
// Mock para window scroll
const mockAddEventListener = jest.fn();
const mockRemoveEventListener = jest.fn();
beforeEach(()=>{
    // Reset mocks
    mockAddEventListener.mockClear();
    mockRemoveEventListener.mockClear();
    // Mock window.addEventListener
    Object.defineProperty(window, 'addEventListener', {
        value: mockAddEventListener,
        writable: true
    });
    Object.defineProperty(window, 'removeEventListener', {
        value: mockRemoveEventListener,
        writable: true
    });
    // Mock scroll properties
    Object.defineProperty(window, 'pageYOffset', {
        value: 0,
        writable: true
    });
    Object.defineProperty(document.documentElement, 'scrollTop', {
        value: 0,
        writable: true
    });
});
describe('useStickyMenu', ()=>{
    it('should initialize with non-sticky state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(result.current.isSticky).toBe(false);
    });
    it('should use default threshold of 80', ()=>{
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should use custom threshold', ()=>{
        const customThreshold = 100;
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(customThreshold));
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should add scroll event listener on mount', ()=>{
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should remove scroll event listener on unmount', ()=>{
        const { unmount } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        unmount();
        expect(mockRemoveEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should become sticky when scroll exceeds threshold', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock scroll position above threshold
        Object.defineProperty(window, 'pageYOffset', {
            value: 100,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
    it('should not be sticky when scroll is below threshold', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock scroll position below threshold
        Object.defineProperty(window, 'pageYOffset', {
            value: 50,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(false);
    });
    it('should use documentElement.scrollTop as fallback', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock pageYOffset as undefined and use scrollTop
        Object.defineProperty(window, 'pageYOffset', {
            value: undefined,
            writable: true
        });
        Object.defineProperty(document.documentElement, 'scrollTop', {
            value: 100,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
    it('should handle threshold of 0', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(0));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Any scroll should make it sticky
        Object.defineProperty(window, 'pageYOffset', {
            value: 1,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlU3RpY2t5TWVudS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFBJTlRFWUEgRS1DT01NRVJDRSAtIFRFU1RTIFBBUkEgSE9PSyBTVElDS1kgTUVOVVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0aWNreU1lbnUgfSBmcm9tICdAL2hvb2tzL3VzZVN0aWNreU1lbnUnO1xyXG5cclxuLy8gTW9jayBwYXJhIHdpbmRvdyBzY3JvbGxcclxuY29uc3QgbW9ja0FkZEV2ZW50TGlzdGVuZXIgPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tSZW1vdmVFdmVudExpc3RlbmVyID0gamVzdC5mbigpO1xyXG5cclxuYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgLy8gUmVzZXQgbW9ja3NcclxuICBtb2NrQWRkRXZlbnRMaXN0ZW5lci5tb2NrQ2xlYXIoKTtcclxuICBtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lci5tb2NrQ2xlYXIoKTtcclxuICBcclxuICAvLyBNb2NrIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2FkZEV2ZW50TGlzdGVuZXInLCB7XHJcbiAgICB2YWx1ZTogbW9ja0FkZEV2ZW50TGlzdGVuZXIsXHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICB9KTtcclxuICBcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsIHtcclxuICAgIHZhbHVlOiBtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcixcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIE1vY2sgc2Nyb2xsIHByb3BlcnRpZXNcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAncGFnZVlPZmZzZXQnLCB7XHJcbiAgICB2YWx1ZTogMCxcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG4gIFxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdzY3JvbGxUb3AnLCB7XHJcbiAgICB2YWx1ZTogMCxcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCd1c2VTdGlja3lNZW51JywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIG5vbi1zdGlja3kgc3RhdGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdGlja3lNZW51KCkpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTdGlja3kpLnRvQmUoZmFsc2UpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHVzZSBkZWZhdWx0IHRocmVzaG9sZCBvZiA4MCcsICgpID0+IHtcclxuICAgIHJlbmRlckhvb2soKCkgPT4gdXNlU3RpY2t5TWVudSgpKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tBZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc2Nyb2xsJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHVzZSBjdXN0b20gdGhyZXNob2xkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY3VzdG9tVGhyZXNob2xkID0gMTAwO1xyXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VTdGlja3lNZW51KGN1c3RvbVRocmVzaG9sZCkpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja0FkZEV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdzY3JvbGwnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgYWRkIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBtb3VudCcsICgpID0+IHtcclxuICAgIHJlbmRlckhvb2soKCkgPT4gdXNlU3RpY2t5TWVudSgpKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tBZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc2Nyb2xsJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gdW5tb3VudCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgdW5tb3VudCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdGlja3lNZW51KCkpO1xyXG4gICAgXHJcbiAgICB1bm1vdW50KCk7XHJcbiAgICBcclxuICAgIGV4cGVjdChtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Njcm9sbCcsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBiZWNvbWUgc3RpY2t5IHdoZW4gc2Nyb2xsIGV4Y2VlZHMgdGhyZXNob2xkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdGhyZXNob2xkID0gODA7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdGlja3lNZW51KHRocmVzaG9sZCkpO1xyXG4gICAgXHJcbiAgICAvLyBTaW11bGF0ZSBzY3JvbGwgZXZlbnRcclxuICAgIGNvbnN0IHNjcm9sbEhhbmRsZXIgPSBtb2NrQWRkRXZlbnRMaXN0ZW5lci5tb2NrLmNhbGxzWzBdWzFdO1xyXG4gICAgXHJcbiAgICAvLyBNb2NrIHNjcm9sbCBwb3NpdGlvbiBhYm92ZSB0aHJlc2hvbGRcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdwYWdlWU9mZnNldCcsIHtcclxuICAgICAgdmFsdWU6IDEwMCxcclxuICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICBzY3JvbGxIYW5kbGVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTdGlja3kpLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgbm90IGJlIHN0aWNreSB3aGVuIHNjcm9sbCBpcyBiZWxvdyB0aHJlc2hvbGQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB0aHJlc2hvbGQgPSA4MDtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVN0aWNreU1lbnUodGhyZXNob2xkKSk7XHJcbiAgICBcclxuICAgIC8vIFNpbXVsYXRlIHNjcm9sbCBldmVudFxyXG4gICAgY29uc3Qgc2Nyb2xsSGFuZGxlciA9IG1vY2tBZGRFdmVudExpc3RlbmVyLm1vY2suY2FsbHNbMF1bMV07XHJcbiAgICBcclxuICAgIC8vIE1vY2sgc2Nyb2xsIHBvc2l0aW9uIGJlbG93IHRocmVzaG9sZFxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3BhZ2VZT2Zmc2V0Jywge1xyXG4gICAgICB2YWx1ZTogNTAsXHJcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgc2Nyb2xsSGFuZGxlcigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU3RpY2t5KS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB1c2UgZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCBhcyBmYWxsYmFjaycsICgpID0+IHtcclxuICAgIGNvbnN0IHRocmVzaG9sZCA9IDgwO1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RpY2t5TWVudSh0aHJlc2hvbGQpKTtcclxuICAgIFxyXG4gICAgLy8gU2ltdWxhdGUgc2Nyb2xsIGV2ZW50XHJcbiAgICBjb25zdCBzY3JvbGxIYW5kbGVyID0gbW9ja0FkZEV2ZW50TGlzdGVuZXIubW9jay5jYWxsc1swXVsxXTtcclxuICAgIFxyXG4gICAgLy8gTW9jayBwYWdlWU9mZnNldCBhcyB1bmRlZmluZWQgYW5kIHVzZSBzY3JvbGxUb3BcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdwYWdlWU9mZnNldCcsIHtcclxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcclxuICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJ3Njcm9sbFRvcCcsIHtcclxuICAgICAgdmFsdWU6IDEwMCxcclxuICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICBzY3JvbGxIYW5kbGVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTdGlja3kpLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGFuZGxlIHRocmVzaG9sZCBvZiAwJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU3RpY2t5TWVudSgwKSk7XHJcbiAgICBcclxuICAgIC8vIFNpbXVsYXRlIHNjcm9sbCBldmVudFxyXG4gICAgY29uc3Qgc2Nyb2xsSGFuZGxlciA9IG1vY2tBZGRFdmVudExpc3RlbmVyLm1vY2suY2FsbHNbMF1bMV07XHJcbiAgICBcclxuICAgIC8vIEFueSBzY3JvbGwgc2hvdWxkIG1ha2UgaXQgc3RpY2t5XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAncGFnZVlPZmZzZXQnLCB7XHJcbiAgICAgIHZhbHVlOiAxLFxyXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHNjcm9sbEhhbmRsZXIoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1N0aWNreSkudG9CZSh0cnVlKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJtb2NrQWRkRXZlbnRMaXN0ZW5lciIsImplc3QiLCJmbiIsIm1vY2tSZW1vdmVFdmVudExpc3RlbmVyIiwiYmVmb3JlRWFjaCIsIm1vY2tDbGVhciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid2luZG93IiwidmFsdWUiLCJ3cml0YWJsZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsInJlbmRlckhvb2siLCJ1c2VTdGlja3lNZW51IiwiZXhwZWN0IiwiY3VycmVudCIsImlzU3RpY2t5IiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55IiwiRnVuY3Rpb24iLCJjdXN0b21UaHJlc2hvbGQiLCJ1bm1vdW50IiwidGhyZXNob2xkIiwic2Nyb2xsSGFuZGxlciIsIm1vY2siLCJjYWxscyIsImFjdCIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLG1EQUFtRDtBQUNuRCxzQ0FBc0M7Ozs7O3VCQUVOOytCQUNGO0FBRTlCLDBCQUEwQjtBQUMxQixNQUFNQSx1QkFBdUJDLEtBQUtDLEVBQUU7QUFDcEMsTUFBTUMsMEJBQTBCRixLQUFLQyxFQUFFO0FBRXZDRSxXQUFXO0lBQ1QsY0FBYztJQUNkSixxQkFBcUJLLFNBQVM7SUFDOUJGLHdCQUF3QkUsU0FBUztJQUVqQywrQkFBK0I7SUFDL0JDLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxvQkFBb0I7UUFDaERDLE9BQU9UO1FBQ1BVLFVBQVU7SUFDWjtJQUVBSixPQUFPQyxjQUFjLENBQUNDLFFBQVEsdUJBQXVCO1FBQ25EQyxPQUFPTjtRQUNQTyxVQUFVO0lBQ1o7SUFFQSx5QkFBeUI7SUFDekJKLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxlQUFlO1FBQzNDQyxPQUFPO1FBQ1BDLFVBQVU7SUFDWjtJQUVBSixPQUFPQyxjQUFjLENBQUNJLFNBQVNDLGVBQWUsRUFBRSxhQUFhO1FBQzNESCxPQUFPO1FBQ1BDLFVBQVU7SUFDWjtBQUNGO0FBRUFHLFNBQVMsaUJBQWlCO0lBQ3hCQyxHQUFHLDJDQUEyQztRQUM1QyxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFhO1FBRWpEQyxPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxDQUFDO0lBQ3ZDO0lBRUFQLEdBQUcsc0NBQXNDO1FBQ3ZDRSxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFhO1FBRTlCQyxPQUFPbEIsc0JBQXNCc0Isb0JBQW9CLENBQUMsVUFBVUosT0FBT0ssR0FBRyxDQUFDQztJQUN6RTtJQUVBVixHQUFHLCtCQUErQjtRQUNoQyxNQUFNVyxrQkFBa0I7UUFDeEJULElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsNEJBQWEsRUFBQ1E7UUFFL0JQLE9BQU9sQixzQkFBc0JzQixvQkFBb0IsQ0FBQyxVQUFVSixPQUFPSyxHQUFHLENBQUNDO0lBQ3pFO0lBRUFWLEdBQUcsNkNBQTZDO1FBQzlDRSxJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFhO1FBRTlCQyxPQUFPbEIsc0JBQXNCc0Isb0JBQW9CLENBQUMsVUFBVUosT0FBT0ssR0FBRyxDQUFDQztJQUN6RTtJQUVBVixHQUFHLGtEQUFrRDtRQUNuRCxNQUFNLEVBQUVZLE9BQU8sRUFBRSxHQUFHVixJQUFBQSxpQkFBVSxFQUFDLElBQU1DLElBQUFBLDRCQUFhO1FBRWxEUztRQUVBUixPQUFPZix5QkFBeUJtQixvQkFBb0IsQ0FBQyxVQUFVSixPQUFPSyxHQUFHLENBQUNDO0lBQzVFO0lBRUFWLEdBQUcsc0RBQXNEO1FBQ3ZELE1BQU1hLFlBQVk7UUFDbEIsTUFBTSxFQUFFWixNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSw0QkFBYSxFQUFDVTtRQUVsRCx3QkFBd0I7UUFDeEIsTUFBTUMsZ0JBQWdCNUIscUJBQXFCNkIsSUFBSSxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFM0QsdUNBQXVDO1FBQ3ZDeEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGVBQWU7WUFDM0NDLE9BQU87WUFDUEMsVUFBVTtRQUNaO1FBRUFxQixJQUFBQSxVQUFHLEVBQUM7WUFDRkg7UUFDRjtRQUVBVixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxDQUFDO0lBQ3ZDO0lBRUFQLEdBQUcsdURBQXVEO1FBQ3hELE1BQU1hLFlBQVk7UUFDbEIsTUFBTSxFQUFFWixNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSw0QkFBYSxFQUFDVTtRQUVsRCx3QkFBd0I7UUFDeEIsTUFBTUMsZ0JBQWdCNUIscUJBQXFCNkIsSUFBSSxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFM0QsdUNBQXVDO1FBQ3ZDeEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGVBQWU7WUFDM0NDLE9BQU87WUFDUEMsVUFBVTtRQUNaO1FBRUFxQixJQUFBQSxVQUFHLEVBQUM7WUFDRkg7UUFDRjtRQUVBVixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxDQUFDO0lBQ3ZDO0lBRUFQLEdBQUcsb0RBQW9EO1FBQ3JELE1BQU1hLFlBQVk7UUFDbEIsTUFBTSxFQUFFWixNQUFNLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVUsRUFBQyxJQUFNQyxJQUFBQSw0QkFBYSxFQUFDVTtRQUVsRCx3QkFBd0I7UUFDeEIsTUFBTUMsZ0JBQWdCNUIscUJBQXFCNkIsSUFBSSxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFM0Qsa0RBQWtEO1FBQ2xEeEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGVBQWU7WUFDM0NDLE9BQU91QjtZQUNQdEIsVUFBVTtRQUNaO1FBRUFKLE9BQU9DLGNBQWMsQ0FBQ0ksU0FBU0MsZUFBZSxFQUFFLGFBQWE7WUFDM0RILE9BQU87WUFDUEMsVUFBVTtRQUNaO1FBRUFxQixJQUFBQSxVQUFHLEVBQUM7WUFDRkg7UUFDRjtRQUVBVixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxDQUFDO0lBQ3ZDO0lBRUFQLEdBQUcsZ0NBQWdDO1FBQ2pDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdDLElBQUFBLGlCQUFVLEVBQUMsSUFBTUMsSUFBQUEsNEJBQWEsRUFBQztRQUVsRCx3QkFBd0I7UUFDeEIsTUFBTVcsZ0JBQWdCNUIscUJBQXFCNkIsSUFBSSxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFM0QsbUNBQW1DO1FBQ25DeEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGVBQWU7WUFDM0NDLE9BQU87WUFDUEMsVUFBVTtRQUNaO1FBRUFxQixJQUFBQSxVQUFHLEVBQUM7WUFDRkg7UUFDRjtRQUVBVixPQUFPSCxPQUFPSSxPQUFPLENBQUNDLFFBQVEsRUFBRUMsSUFBSSxDQUFDO0lBQ3ZDO0FBQ0YifQ==