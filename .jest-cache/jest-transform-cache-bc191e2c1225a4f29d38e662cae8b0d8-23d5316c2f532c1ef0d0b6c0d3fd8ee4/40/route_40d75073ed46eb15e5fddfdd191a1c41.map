{"version":3,"names":["cov_2edutjuu5c","actualCoverage","s","POST","request","params","f","orderId","id","body","json","amount","reason","b","session","_auth","auth","user","_server","NextResponse","success","error","status","_logger","logger","log","LogLevel","INFO","LogCategory","API","userId","supabase","_server1","createAdminClient","data","order","orderError","from","select","eq","single","WARN","payment_status","total","refundAmount","refundResult","refund_id","Date","now","ERROR","PAYMENT","updateData","updated_at","toISOString","updateError","update","DATABASE","insert","order_id","previous_status","new_status","changed_by","metadata","JSON","stringify","refund_amount","refund_reason","processed_by","historyError","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\refund\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * POST /api/admin/orders/[id]/refund\r\n * Procesa un reembolso para una orden\r\n */\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n): Promise<NextResponse> {\r\n  try {\r\n    const orderId = params.id;\r\n    const body = await request.json();\r\n    const { amount, reason = 'Reembolso solicitado por administrador' } = body;\r\n\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Processing refund for order', { \r\n      orderId,\r\n      userId: session.user.id,\r\n      amount,\r\n      reason\r\n    });\r\n\r\n    // Obtener datos actuales de la orden\r\n    const supabase = createAdminClient();\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, payment_status, total, payment_id, payment_preference_id')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      logger.log(LogLevel.WARN, LogCategory.API, 'Order not found', { orderId, orderError });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la orden esté pagada\r\n    if (order.payment_status !== 'paid') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Solo se pueden reembolsar órdenes pagadas' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que el monto no exceda el total de la orden\r\n    if (amount && amount > order.total) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'El monto del reembolso no puede exceder el total de la orden' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const refundAmount = amount || order.total;\r\n\r\n    // TODO: Aquí se integraría con MercadoPago para procesar el reembolso real\r\n    // Por ahora, simularemos el proceso\r\n    \r\n    // Simular procesamiento de reembolso\r\n    const refundResult = {\r\n      success: true,\r\n      refund_id: `refund_${Date.now()}`,\r\n      amount: refundAmount,\r\n      status: 'approved'\r\n    };\r\n\r\n    if (!refundResult.success) {\r\n      logger.log(LogLevel.ERROR, LogCategory.PAYMENT, 'Error processing refund', { \r\n        orderId,\r\n        refundResult \r\n      });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al procesar reembolso' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Actualizar estado de la orden\r\n    const updateData = {\r\n      payment_status: 'refunded',\r\n      status: 'refunded',\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const { error: updateError } = await supabase\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId);\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error updating order after refund', { \r\n        orderId,\r\n        updateError \r\n      });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al actualizar estado de la orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar en historial de estados\r\n    try {\r\n      await supabase\r\n        .from('order_status_history')\r\n        .insert({\r\n          order_id: orderId,\r\n          previous_status: order.status,\r\n          new_status: 'refunded',\r\n          changed_by: session.user.id,\r\n          reason: `Reembolso procesado: ${reason}`,\r\n          metadata: JSON.stringify({\r\n            refund_id: refundResult.refund_id,\r\n            refund_amount: refundAmount,\r\n            refund_reason: reason,\r\n            processed_by: session.user.id\r\n          })\r\n        });\r\n    } catch (historyError) {\r\n      // Si la tabla no existe, continuar sin registrar historial\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Could not register refund in status history', { historyError });\r\n    }\r\n\r\n    // TODO: Aquí se podrían agregar acciones adicionales como:\r\n    // - Enviar email de confirmación de reembolso al cliente\r\n    // - Restaurar inventario si es necesario\r\n    // - Crear notificaciones\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Refund processed successfully', {\r\n      orderId,\r\n      refund_id: refundResult.refund_id,\r\n      amount: refundAmount\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        order_id: orderId,\r\n        refund_id: refundResult.refund_id,\r\n        refund_amount: refundAmount,\r\n        payment_status: 'refunded',\r\n        status: 'refunded'\r\n      },\r\n      message: 'Reembolso procesado exitosamente'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error processing refund', { \r\n      orderId: params.id,\r\n      error \r\n    });\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}