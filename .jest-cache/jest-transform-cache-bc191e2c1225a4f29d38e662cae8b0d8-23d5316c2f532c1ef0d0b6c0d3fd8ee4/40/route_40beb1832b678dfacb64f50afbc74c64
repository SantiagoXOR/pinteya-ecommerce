4b0a45b318dc0adc42e6be26117bf5f7
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_phiddfqxn() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\carriers\\route.ts";
  var hash = "fc413d5b7fa43e9a43bf7d4967645fe5d933b7b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\carriers\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "9": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "10": {
        start: {
          line: 30,
          column: 13
        },
        end: {
          line: 30,
          column: 27
        }
      },
      "11": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 81
        }
      },
      "12": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 32,
          column: 69
        }
      },
      "13": {
        start: {
          line: 33,
          column: 19
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "14": {
        start: {
          line: 34,
          column: 17
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "15": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 57
        }
      },
      "16": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 70
        }
      },
      "17": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 60
        }
      },
      "18": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "19": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "20": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 77,
          column: 2
        }
      },
      "21": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 80,
          column: 2
        }
      },
      "22": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 45
        }
      },
      "23": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "24": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "25": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 99,
          column: 6
        }
      },
      "26": {
        start: {
          line: 98,
          column: 29
        },
        end: {
          line: 98,
          column: 78
        }
      },
      "27": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "28": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "29": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 16
        }
      },
      "30": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 50
        }
      },
      "31": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 58
        }
      },
      "32": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 54
        }
      },
      "33": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "34": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 25
        }
      },
      "35": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 129,
          column: 49
        }
      },
      "36": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 139,
          column: 6
        }
      },
      "37": {
        start: {
          line: 140,
          column: 21
        },
        end: {
          line: 140,
          column: 49
        }
      },
      "38": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 144,
          column: 6
        }
      },
      "39": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "40": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 90
        }
      },
      "41": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "42": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 57
        }
      },
      "43": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "44": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "45": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "46": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "47": {
        start: {
          line: 163,
          column: 17
        },
        end: {
          line: 163,
          column: 51
        }
      },
      "48": {
        start: {
          line: 164,
          column: 15
        },
        end: {
          line: 164,
          column: 39
        }
      },
      "49": {
        start: {
          line: 165,
          column: 45
        },
        end: {
          line: 167,
          column: 22
        }
      },
      "50": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "51": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 106
        }
      },
      "52": {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 175,
          column: 12
        }
      },
      "53": {
        start: {
          line: 172,
          column: 95
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "54": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 190,
          column: 5
        }
      },
      "55": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "56": {
        start: {
          line: 195,
          column: 22
        },
        end: {
          line: 195,
          column: 54
        }
      },
      "57": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "58": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 25
        }
      },
      "59": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 199,
          column: 45
        }
      },
      "60": {
        start: {
          line: 200,
          column: 17
        },
        end: {
          line: 200,
          column: 37
        }
      },
      "61": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 57
        }
      },
      "62": {
        start: {
          line: 202,
          column: 21
        },
        end: {
          line: 202,
          column: 49
        }
      },
      "63": {
        start: {
          line: 204,
          column: 38
        },
        end: {
          line: 204,
          column: 122
        }
      },
      "64": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "65": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 89
        }
      },
      "66": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 209,
          column: 30
        }
      },
      "67": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 212,
          column: 5
        }
      },
      "68": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 69
        }
      },
      "69": {
        start: {
          line: 214,
          column: 37
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "70": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 234,
          column: 5
        }
      },
      "71": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 103
        }
      },
      "72": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 106
        }
      },
      "73": {
        start: {
          line: 237,
          column: 21
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "74": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 247,
          column: 7
        }
      },
      "75": {
        start: {
          line: 251,
          column: 22
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "76": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 254,
          column: 5
        }
      },
      "77": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "78": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 45
        }
      },
      "79": {
        start: {
          line: 256,
          column: 29
        },
        end: {
          line: 256,
          column: 49
        }
      },
      "80": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 44
        }
      },
      "81": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "82": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 85
        }
      },
      "83": {
        start: {
          line: 261,
          column: 17
        },
        end: {
          line: 261,
          column: 37
        }
      },
      "84": {
        start: {
          line: 262,
          column: 26
        },
        end: {
          line: 262,
          column: 57
        }
      },
      "85": {
        start: {
          line: 263,
          column: 21
        },
        end: {
          line: 263,
          column: 49
        }
      },
      "86": {
        start: {
          line: 265,
          column: 57
        },
        end: {
          line: 265,
          column: 129
        }
      },
      "87": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "88": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 77
        }
      },
      "89": {
        start: {
          line: 270,
          column: 26
        },
        end: {
          line: 270,
          column: 59
        }
      },
      "90": {
        start: {
          line: 271,
          column: 4
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "91": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 69
        }
      },
      "92": {
        start: {
          line: 275,
          column: 37
        },
        end: {
          line: 279,
          column: 44
        }
      },
      "93": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 282,
          column: 5
        }
      },
      "94": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 108
        }
      },
      "95": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 284,
          column: 117
        }
      },
      "96": {
        start: {
          line: 285,
          column: 21
        },
        end: {
          line: 292,
          column: 5
        }
      },
      "97": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 293,
          column: 47
        }
      },
      "98": {
        start: {
          line: 297,
          column: 22
        },
        end: {
          line: 297,
          column: 54
        }
      },
      "99": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 300,
          column: 5
        }
      },
      "100": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 25
        }
      },
      "101": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 45
        }
      },
      "102": {
        start: {
          line: 302,
          column: 29
        },
        end: {
          line: 302,
          column: 49
        }
      },
      "103": {
        start: {
          line: 303,
          column: 22
        },
        end: {
          line: 303,
          column: 44
        }
      },
      "104": {
        start: {
          line: 304,
          column: 4
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "105": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 85
        }
      },
      "106": {
        start: {
          line: 307,
          column: 21
        },
        end: {
          line: 307,
          column: 49
        }
      },
      "107": {
        start: {
          line: 309,
          column: 57
        },
        end: {
          line: 309,
          column: 129
        }
      },
      "108": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 312,
          column: 5
        }
      },
      "109": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 77
        }
      },
      "110": {
        start: {
          line: 314,
          column: 61
        },
        end: {
          line: 320,
          column: 6
        }
      },
      "111": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 323,
          column: 5
        }
      },
      "112": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 117
        }
      },
      "113": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "114": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 108
        }
      },
      "115": {
        start: {
          line: 328,
          column: 22
        },
        end: {
          line: 331,
          column: 26
        }
      },
      "116": {
        start: {
          line: 332,
          column: 4
        },
        end: {
          line: 334,
          column: 5
        }
      },
      "117": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 106
        }
      },
      "118": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 336,
          column: 113
        }
      },
      "119": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 340,
          column: 7
        }
      },
      "120": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 126
        }
      },
      "121": {
        start: {
          line: 343,
          column: 13
        },
        end: {
          line: 343,
          column: 128
        }
      },
      "122": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 126
        }
      },
      "123": {
        start: {
          line: 345,
          column: 15
        },
        end: {
          line: 345,
          column: 132
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "validateAdminAuth",
        decl: {
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 84,
            column: 32
          }
        },
        loc: {
          start: {
            line: 84,
            column: 42
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 98,
            column: 23
          }
        },
        loc: {
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 78
          }
        },
        line: 98
      },
      "8": {
        name: "encryptApiKey",
        decl: {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 111,
            column: 28
          }
        },
        loc: {
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 111
      },
      "9": {
        name: "decryptApiKey",
        decl: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 28
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 116
      },
      "10": {
        name: "getHandler",
        decl: {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 123,
            column: 25
          }
        },
        loc: {
          start: {
            line: 123,
            column: 35
          },
          end: {
            line: 192,
            column: 1
          }
        },
        line: 123
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 172,
            column: 77
          },
          end: {
            line: 172,
            column: 78
          }
        },
        loc: {
          start: {
            line: 172,
            column: 95
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 172
      },
      "12": {
        name: "postHandler",
        decl: {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 26
          }
        },
        loc: {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 193
      },
      "13": {
        name: "putHandler",
        decl: {
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 249,
            column: 25
          }
        },
        loc: {
          start: {
            line: 249,
            column: 35
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 249
      },
      "14": {
        name: "deleteHandler",
        decl: {
          start: {
            line: 295,
            column: 15
          },
          end: {
            line: 295,
            column: 28
          }
        },
        loc: {
          start: {
            line: 295,
            column: 38
          },
          end: {
            line: 341,
            column: 1
          }
        },
        line: 295
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "1": {
        loc: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "2": {
        loc: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 47
          }
        }, {
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 131,
            column: 54
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 132,
            column: 24
          },
          end: {
            line: 132,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 24
          },
          end: {
            line: 132,
            column: 49
          }
        }, {
          start: {
            line: 132,
            column: 53
          },
          end: {
            line: 132,
            column: 57
          }
        }],
        line: 132
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 42
          }
        }, {
          start: {
            line: 133,
            column: 46
          },
          end: {
            line: 133,
            column: 55
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 134,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 51
          },
          end: {
            line: 134,
            column: 91
          }
        }, {
          start: {
            line: 134,
            column: 94
          },
          end: {
            line: 134,
            column: 103
          }
        }],
        line: 134
      },
      "7": {
        loc: {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 135,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 135,
            column: 44
          }
        }, {
          start: {
            line: 135,
            column: 48
          },
          end: {
            line: 135,
            column: 57
          }
        }],
        line: 135
      },
      "8": {
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 56
          }
        }, {
          start: {
            line: 136,
            column: 60
          },
          end: {
            line: 136,
            column: 69
          }
        }],
        line: 136
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 17
          },
          end: {
            line: 137,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 17
          },
          end: {
            line: 137,
            column: 44
          }
        }, {
          start: {
            line: 137,
            column: 48
          },
          end: {
            line: 137,
            column: 54
          }
        }],
        line: 137
      },
      "10": {
        loc: {
          start: {
            line: 138,
            column: 20
          },
          end: {
            line: 138,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 20
          },
          end: {
            line: 138,
            column: 50
          }
        }, {
          start: {
            line: 138,
            column: 54
          },
          end: {
            line: 138,
            column: 59
          }
        }],
        line: 138
      },
      "11": {
        loc: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "14": {
        loc: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "15": {
        loc: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "16": {
        loc: {
          start: {
            line: 172,
            column: 57
          },
          end: {
            line: 172,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 57
          },
          end: {
            line: 172,
            column: 65
          }
        }, {
          start: {
            line: 172,
            column: 69
          },
          end: {
            line: 172,
            column: 71
          }
        }],
        line: 172
      },
      "17": {
        loc: {
          start: {
            line: 174,
            column: 31
          },
          end: {
            line: 174,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 59
          },
          end: {
            line: 174,
            column: 76
          }
        }, {
          start: {
            line: 174,
            column: 79
          },
          end: {
            line: 174,
            column: 83
          }
        }],
        line: 174
      },
      "18": {
        loc: {
          start: {
            line: 181,
            column: 19
          },
          end: {
            line: 181,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 19
          },
          end: {
            line: 181,
            column: 24
          }
        }, {
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 181,
            column: 29
          }
        }],
        line: 181
      },
      "19": {
        loc: {
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 35
          }
        }, {
          start: {
            line: 182,
            column: 39
          },
          end: {
            line: 182,
            column: 40
          }
        }],
        line: 182
      },
      "20": {
        loc: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "21": {
        loc: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "22": {
        loc: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 240,
            column: 31
          },
          end: {
            line: 240,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 59
          },
          end: {
            line: 240,
            column: 76
          }
        }, {
          start: {
            line: 240,
            column: 79
          },
          end: {
            line: 240,
            column: 83
          }
        }],
        line: 240
      },
      "25": {
        loc: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "26": {
        loc: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "27": {
        loc: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "28": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 18
          }
        }, {
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 38
          }
        }],
        line: 266
      },
      "29": {
        loc: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "30": {
        loc: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "31": {
        loc: {
          start: {
            line: 288,
            column: 31
          },
          end: {
            line: 288,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 59
          },
          end: {
            line: 288,
            column: 76
          }
        }, {
          start: {
            line: 288,
            column: 79
          },
          end: {
            line: 288,
            column: 83
          }
        }],
        line: 288
      },
      "32": {
        loc: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "33": {
        loc: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "34": {
        loc: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "35": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 310,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 310,
            column: 18
          }
        }, {
          start: {
            line: 310,
            column: 22
          },
          end: {
            line: 310,
            column: 38
          }
        }],
        line: 310
      },
      "36": {
        loc: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "37": {
        loc: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "38": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 324,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 324,
            column: 23
          }
        }, {
          start: {
            line: 324,
            column: 27
          },
          end: {
            line: 324,
            column: 53
          }
        }],
        line: 324
      },
      "39": {
        loc: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\carriers\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTI\xD3N DE TRANSPORTISTAS/CARRIERS ENTERPRISE\r\n// Endpoint: /api/admin/logistics/carriers\r\n// Descripci\xF3n: CRUD completo para gesti\xF3n de transportistas\r\n// Basado en: Patrones enterprise establecidos en el proyecto\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { composeMiddlewares } from '@/lib/api/middleware-composer';\r\nimport { withErrorHandler, ApiError, ValidationError, NotFoundError } from '@/lib/api/error-handler';\r\nimport { withApiLogging, logAdminAction } from '@/lib/api/api-logger';\r\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware';\r\nimport { withValidation } from '@/lib/validation/admin-schemas';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { \r\n  Courier, \r\n  ShippingService,\r\n  CarrierFiltersRequest,\r\n  CarrierCreateRequest,\r\n  CarrierUpdateRequest,\r\n  CarrierResponse,\r\n  CarrierListResponse\r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// VALIDATION SCHEMAS\r\n// =====================================================\r\n\r\nconst CarrierFiltersSchema = z.object({\r\n  page: z.coerce.number().int().min(1).default(1),\r\nlimit: z.coerce.number().int().min(1).max(100).default(20),\r\n  search: z.string().optional(),\r\n  is_active: z.boolean().optional(),\r\n  service: z.nativeEnum(ShippingService).optional(),\r\n  coverage_area: z.string().optional(),\r\n  sort_by: z.enum(['name', 'created_at', 'base_cost', 'cost_per_kg']).default('name'),\r\n  sort_order: z.enum(['asc', 'desc']).default('asc')\r\n});\r\n\r\nconst CarrierCreateSchema = z.object({\r\n  name: z.string().min(1, 'Nombre es requerido').max(255),\r\n  code: z.string().min(2, 'C\xF3digo debe tener al menos 2 caracteres').max(10).regex(/^[A-Z0-9_]+$/, 'C\xF3digo debe ser alfanum\xE9rico en may\xFAsculas'),\r\n  api_endpoint: z.string().url().optional(),\r\n  api_key: z.string().optional(),\r\n  supported_services: z.array(z.nativeEnum(ShippingService)).min(1, 'Debe soportar al menos un servicio'),\r\n  coverage_areas: z.array(z.string()).min(1, 'Debe cubrir al menos un \xE1rea'),\r\n  base_cost: z.number().min(0, 'Costo base no puede ser negativo'),\r\n  cost_per_kg: z.number().min(0, 'Costo por kg no puede ser negativo'),\r\n  free_shipping_threshold: z.number().min(0).optional(),\r\n  max_weight_kg: z.number().min(0).optional(),\r\n  max_dimensions_cm: z.string().regex(/^\\d+x\\d+x\\d+$/, 'Formato debe ser LxWxH (ej: 100x80x60)').optional(),\r\n  logo_url: z.string().url().optional(),\r\n  website_url: z.string().url().optional(),\r\n  contact_phone: z.string().optional(),\r\n  contact_email: z.string().email().optional(),\r\n  is_active: z.boolean().default(true)\r\n});\r\n\r\nconst CarrierUpdateSchema = CarrierCreateSchema.partial().omit({ code: true });\r\n\r\n// =====================================================\r\n// HELPER FUNCTIONS\r\n// =====================================================\r\n\r\nasync function validateAdminAuth(request: NextRequest) {\r\n  const session = await auth();\r\n  if (!session?.user) {\r\n    return NextResponse.json(\r\n      { error: 'No autorizado', code: 'UNAUTHORIZED' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  // Verificar rate limiting\r\n  const rateLimitResult = await checkRateLimit(request, {\r\n    windowMs: 60 * 1000, // 1 minuto\r\n    maxRequests: 100,\r\n    keyGenerator: (req) => `admin_carriers_${session.user.id}_${req.method}`\r\n  });\r\n\r\n  if (!rateLimitResult.success) {\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Demasiadas solicitudes', \r\n        code: 'RATE_LIMIT_EXCEEDED',\r\n        retryAfter: rateLimitResult.retryAfter \r\n      },\r\n      { status: 429 }\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nasync function encryptApiKey(apiKey: string): Promise<string> {\r\n  // Implementaci\xF3n b\xE1sica de encriptaci\xF3n\r\n  // En producci\xF3n usar crypto m\xE1s robusto\r\n  return Buffer.from(apiKey).toString('base64');\r\n}\r\n\r\nasync function decryptApiKey(encryptedKey: string): Promise<string> {\r\n  // Implementaci\xF3n b\xE1sica de desencriptaci\xF3n\r\n  return Buffer.from(encryptedKey, 'base64').toString();\r\n}\r\n\r\n// =====================================================\r\n// HANDLERS\r\n// =====================================================\r\n\r\nasync function getHandler(request: NextRequest) {\r\n  // Validar autenticaci\xF3n\r\n  const authError = await validateAdminAuth(request);\r\n  if (authError) {return authError;}\r\n\r\n  const { searchParams } = new URL(request.url);\r\n  const filters = CarrierFiltersSchema.parse({\r\n    page: parseInt(searchParams.get('page') || '1'),\r\n    limit: parseInt(searchParams.get('limit') || '20'),\r\n    search: searchParams.get('search') || undefined,\r\n    is_active: searchParams.get('is_active') ? searchParams.get('is_active') === 'true' : undefined,\r\n    service: searchParams.get('service') || undefined,\r\n    coverage_area: searchParams.get('coverage_area') || undefined,\r\n    sort_by: searchParams.get('sort_by') || 'name',\r\n    sort_order: searchParams.get('sort_order') || 'asc'\r\n  });\r\n\r\n  const supabase = createClient();\r\n\r\n  // Construir query con filtros\r\n  let query = supabase\r\n    .from('couriers')\r\n    .select('*', { count: 'exact' });\r\n\r\n  // Aplicar filtros\r\n  if (filters.search) {\r\n    query = query.or(`name.ilike.%${filters.search}%,code.ilike.%${filters.search}%`);\r\n  }\r\n\r\n  if (filters.is_active !== undefined) {\r\n    query = query.eq('is_active', filters.is_active);\r\n  }\r\n\r\n  if (filters.service) {\r\n    query = query.contains('supported_services', [filters.service]);\r\n  }\r\n\r\n  if (filters.coverage_area) {\r\n    query = query.contains('coverage_areas', [filters.coverage_area]);\r\n  }\r\n\r\n  // Aplicar ordenamiento y paginaci\xF3n\r\n  const from = (filters.page - 1) * filters.limit;\r\n  const to = from + filters.limit - 1;\r\n\r\n  const { data: carriers, error, count } = await query\r\n    .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\r\n    .range(from, to);\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al obtener transportistas', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Desencriptar API keys para respuesta (solo mostrar si existen)\r\n  const carriersWithDecryptedKeys = await Promise.all(\r\n    (carriers || []).map(async (carrier) => ({\r\n      ...carrier,\r\n      api_key_encrypted: carrier.api_key_encrypted ? '***ENCRYPTED***' : null\r\n    }))\r\n  );\r\n\r\n  const response: CarrierListResponse = {\r\n    data: carriersWithDecryptedKeys,\r\n    pagination: {\r\n      page: filters.page,\r\n      limit: filters.limit,\r\n      total: count || 0,\r\n      pages: Math.ceil((count || 0) / filters.limit)\r\n    },\r\n    filters: {\r\n      search: filters.search,\r\n      is_active: filters.is_active,\r\n      service: filters.service,\r\n      coverage_area: filters.coverage_area\r\n    }\r\n  };\r\n\r\n  return NextResponse.json(response);\r\n}\r\n\r\nasync function postHandler(request: NextRequest) {\r\n  // Validar autenticaci\xF3n\r\n  const authError = await validateAdminAuth(request);\r\n  if (authError) {return authError;}\r\n\r\n  const session = await auth();\r\n  const body = await request.json();\r\n  const validatedData = CarrierCreateSchema.parse(body);\r\n\r\n  const supabase = createClient();\r\n\r\n  // Verificar que el c\xF3digo no exista\r\n  const { data: existingCarrier } = await supabase\r\n    .from('couriers')\r\n    .select('id')\r\n    .eq('code', validatedData.code)\r\n    .single();\r\n\r\n  if (existingCarrier) {\r\n    throw new ValidationError('El c\xF3digo del transportista ya existe');\r\n  }\r\n\r\n  // Encriptar API key si se proporciona\r\n  let apiKeyEncrypted = null;\r\n  if (validatedData.api_key) {\r\n    apiKeyEncrypted = await encryptApiKey(validatedData.api_key);\r\n  }\r\n\r\n  // Crear transportista\r\n  const { data: carrier, error } = await supabase\r\n    .from('couriers')\r\n    .insert({\r\n      name: validatedData.name,\r\n      code: validatedData.code,\r\n      api_endpoint: validatedData.api_endpoint,\r\n      api_key_encrypted: apiKeyEncrypted,\r\n      supported_services: validatedData.supported_services,\r\n      coverage_areas: validatedData.coverage_areas,\r\n      base_cost: validatedData.base_cost,\r\n      cost_per_kg: validatedData.cost_per_kg,\r\n      free_shipping_threshold: validatedData.free_shipping_threshold,\r\n      max_weight_kg: validatedData.max_weight_kg,\r\n      max_dimensions_cm: validatedData.max_dimensions_cm,\r\n      logo_url: validatedData.logo_url,\r\n      website_url: validatedData.website_url,\r\n      contact_phone: validatedData.contact_phone,\r\n      contact_email: validatedData.contact_email,\r\n      is_active: validatedData.is_active\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al crear transportista', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Log de auditor\xEDa\r\n  await logAdminAction(session.user.id, 'CREATE', 'carrier', carrier.id, null, carrier);\r\n\r\n  const response: CarrierResponse = {\r\n    data: {\r\n      ...carrier,\r\n      api_key_encrypted: carrier.api_key_encrypted ? '***ENCRYPTED***' : null\r\n    },\r\n    success: true,\r\n    message: 'Transportista creado exitosamente'\r\n  };\r\n\r\n  return NextResponse.json(response, { status: 201 });\r\n}\r\n\r\nasync function putHandler(request: NextRequest) {\r\n  // Validar autenticaci\xF3n\r\n  const authError = await validateAdminAuth(request);\r\n  if (authError) {return authError;}\r\n\r\n  const session = await auth();\r\n  const { searchParams } = new URL(request.url);\r\n  const carrierId = searchParams.get('id');\r\n\r\n  if (!carrierId) {\r\n    throw new ValidationError('ID del transportista es requerido');\r\n  }\r\n\r\n  const body = await request.json();\r\n  const validatedData = CarrierUpdateSchema.parse(body);\r\n\r\n  const supabase = createClient();\r\n\r\n  // Verificar que el transportista existe\r\n  const { data: existingCarrier, error: fetchError } = await supabase\r\n    .from('couriers')\r\n    .select('*')\r\n    .eq('id', carrierId)\r\n    .single();\r\n\r\n  if (fetchError || !existingCarrier) {\r\n    throw new NotFoundError('Transportista no encontrado');\r\n  }\r\n\r\n  // Encriptar nueva API key si se proporciona\r\n  let apiKeyEncrypted = existingCarrier.api_key_encrypted;\r\n  if (validatedData.api_key) {\r\n    apiKeyEncrypted = await encryptApiKey(validatedData.api_key);\r\n  }\r\n\r\n  // Actualizar transportista\r\n  const { data: carrier, error } = await supabase\r\n    .from('couriers')\r\n    .update({\r\n      ...validatedData,\r\n      api_key_encrypted: apiKeyEncrypted,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', carrierId)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al actualizar transportista', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Log de auditor\xEDa\r\n  await logAdminAction(session.user.id, 'UPDATE', 'carrier', carrier.id, existingCarrier, carrier);\r\n\r\n  const response: CarrierResponse = {\r\n    data: {\r\n      ...carrier,\r\n      api_key_encrypted: carrier.api_key_encrypted ? '***ENCRYPTED***' : null\r\n    },\r\n    success: true,\r\n    message: 'Transportista actualizado exitosamente'\r\n  };\r\n\r\n  return NextResponse.json(response);\r\n}\r\n\r\nasync function deleteHandler(request: NextRequest) {\r\n  // Validar autenticaci\xF3n\r\n  const authError = await validateAdminAuth(request);\r\n  if (authError) {return authError;}\r\n\r\n  const session = await auth();\r\n  const { searchParams } = new URL(request.url);\r\n  const carrierId = searchParams.get('id');\r\n\r\n  if (!carrierId) {\r\n    throw new ValidationError('ID del transportista es requerido');\r\n  }\r\n\r\n  const supabase = createClient();\r\n\r\n  // Verificar que el transportista existe\r\n  const { data: existingCarrier, error: fetchError } = await supabase\r\n    .from('couriers')\r\n    .select('*')\r\n    .eq('id', carrierId)\r\n    .single();\r\n\r\n  if (fetchError || !existingCarrier) {\r\n    throw new NotFoundError('Transportista no encontrado');\r\n  }\r\n\r\n  // Verificar que no tenga env\xEDos activos\r\n  const { data: activeShipments, error: shipmentsError } = await supabase\r\n    .from('shipments')\r\n    .select('id')\r\n    .eq('carrier_id', carrierId)\r\n    .in('status', ['pending', 'confirmed', 'picked_up', 'in_transit', 'out_for_delivery']);\r\n\r\n  if (shipmentsError) {\r\n    throw new ApiError('Error al verificar env\xEDos activos', 500, 'DATABASE_ERROR', shipmentsError);\r\n  }\r\n\r\n  if (activeShipments && activeShipments.length > 0) {\r\n    throw new ValidationError('No se puede eliminar un transportista con env\xEDos activos');\r\n  }\r\n\r\n  // Eliminar transportista (soft delete - marcar como inactivo)\r\n  const { error } = await supabase\r\n    .from('couriers')\r\n    .update({\r\n      is_active: false,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', carrierId);\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al eliminar transportista', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Log de auditor\xEDa\r\n  await logAdminAction(session.user.id, 'DELETE', 'carrier', carrierId, existingCarrier, null);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Transportista eliminado exitosamente'\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// EXPORTS CON MIDDLEWARES\r\n// =====================================================\r\n\r\nexport const GET = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging\r\n)(getHandler);\r\n\r\nexport const POST = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging\r\n)(postHandler);\r\n\r\nexport const PUT = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging\r\n)(putHandler);\r\n\r\nexport const DELETE = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging\r\n)(deleteHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "POST", "PUT", "runtime", "CarrierFiltersSchema", "z", "object", "page", "coerce", "number", "int", "min", "default", "limit", "max", "search", "string", "optional", "is_active", "boolean", "service", "nativeEnum", "ShippingService", "coverage_area", "sort_by", "enum", "sort_order", "CarrierCreateSchema", "name", "code", "regex", "api_endpoint", "url", "api_key", "supported_services", "array", "coverage_areas", "base_cost", "cost_per_kg", "free_shipping_threshold", "max_weight_kg", "max_dimensions_cm", "logo_url", "website_url", "contact_phone", "contact_email", "email", "CarrierUpdateSchema", "partial", "omit", "validateAdminAuth", "request", "session", "auth", "user", "NextResponse", "json", "error", "status", "rateLimitResult", "checkRateLimit", "windowMs", "maxRequests", "keyGenerator", "req", "id", "method", "success", "retryAfter", "encryptApiKey", "apiKey", "Buffer", "from", "toString", "decryptApiKey", "encryptedKey", "getHandler", "authError", "searchParams", "URL", "filters", "parse", "parseInt", "get", "undefined", "supabase", "createClient", "query", "select", "count", "or", "eq", "contains", "to", "data", "carriers", "order", "ascending", "range", "ApiError", "carriersWithDecryptedKeys", "Promise", "all", "map", "carrier", "api_key_encrypted", "response", "pagination", "total", "pages", "Math", "ceil", "postHandler", "body", "validatedData", "existingCarrier", "single", "ValidationError", "apiKeyEncrypted", "insert", "logAdminAction", "message", "putHandler", "carrierId", "fetchError", "NotFoundError", "update", "updated_at", "Date", "toISOString", "deleteHandler", "activeShipments", "shipmentsError", "in", "length", "composeMiddlewares", "withErrorHandler", "withApiLogging"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fc413d5b7fa43e9a43bf7d4967645fe5d933b7b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_phiddfqxn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_phiddfqxn();
cov_phiddfqxn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[0]++;
  cov_phiddfqxn().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_phiddfqxn().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_phiddfqxn().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_phiddfqxn().f[1]++;
    cov_phiddfqxn().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_phiddfqxn().f[2]++;
    cov_phiddfqxn().s[5]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_phiddfqxn().f[3]++;
    cov_phiddfqxn().s[6]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_phiddfqxn().f[4]++;
    cov_phiddfqxn().s[7]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_phiddfqxn().f[5]++;
    cov_phiddfqxn().s[8]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_phiddfqxn().s[9]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_phiddfqxn().s[10]++, require("zod"));
const _middlewarecomposer =
/* istanbul ignore next */
(cov_phiddfqxn().s[11]++, require("../../../../../lib/api/middleware-composer"));
const _errorhandler =
/* istanbul ignore next */
(cov_phiddfqxn().s[12]++, require("../../../../../lib/api/error-handler"));
const _apilogger =
/* istanbul ignore next */
(cov_phiddfqxn().s[13]++, require("../../../../../lib/api/api-logger"));
const _server1 =
/* istanbul ignore next */
(cov_phiddfqxn().s[14]++, require("../../../../../lib/integrations/supabase/server"));
const _config =
/* istanbul ignore next */
(cov_phiddfqxn().s[15]++, require("../../../../../lib/auth/config"));
const _ratelimiting =
/* istanbul ignore next */
(cov_phiddfqxn().s[16]++, require("../../../../../lib/auth/rate-limiting"));
const _logistics =
/* istanbul ignore next */
(cov_phiddfqxn().s[17]++, require("../../../../../types/logistics"));
const runtime =
/* istanbul ignore next */
(cov_phiddfqxn().s[18]++, 'nodejs');
// =====================================================
// VALIDATION SCHEMAS
// =====================================================
const CarrierFiltersSchema =
/* istanbul ignore next */
(cov_phiddfqxn().s[19]++, _zod.z.object({
  page: _zod.z.coerce.number().int().min(1).default(1),
  limit: _zod.z.coerce.number().int().min(1).max(100).default(20),
  search: _zod.z.string().optional(),
  is_active: _zod.z.boolean().optional(),
  service: _zod.z.nativeEnum(_logistics.ShippingService).optional(),
  coverage_area: _zod.z.string().optional(),
  sort_by: _zod.z.enum(['name', 'created_at', 'base_cost', 'cost_per_kg']).default('name'),
  sort_order: _zod.z.enum(['asc', 'desc']).default('asc')
}));
const CarrierCreateSchema =
/* istanbul ignore next */
(cov_phiddfqxn().s[20]++, _zod.z.object({
  name: _zod.z.string().min(1, 'Nombre es requerido').max(255),
  code: _zod.z.string().min(2, 'CÃ³digo debe tener al menos 2 caracteres').max(10).regex(/^[A-Z0-9_]+$/, 'CÃ³digo debe ser alfanumÃ©rico en mayÃºsculas'),
  api_endpoint: _zod.z.string().url().optional(),
  api_key: _zod.z.string().optional(),
  supported_services: _zod.z.array(_zod.z.nativeEnum(_logistics.ShippingService)).min(1, 'Debe soportar al menos un servicio'),
  coverage_areas: _zod.z.array(_zod.z.string()).min(1, 'Debe cubrir al menos un Ã¡rea'),
  base_cost: _zod.z.number().min(0, 'Costo base no puede ser negativo'),
  cost_per_kg: _zod.z.number().min(0, 'Costo por kg no puede ser negativo'),
  free_shipping_threshold: _zod.z.number().min(0).optional(),
  max_weight_kg: _zod.z.number().min(0).optional(),
  max_dimensions_cm: _zod.z.string().regex(/^\d+x\d+x\d+$/, 'Formato debe ser LxWxH (ej: 100x80x60)').optional(),
  logo_url: _zod.z.string().url().optional(),
  website_url: _zod.z.string().url().optional(),
  contact_phone: _zod.z.string().optional(),
  contact_email: _zod.z.string().email().optional(),
  is_active: _zod.z.boolean().default(true)
}));
const CarrierUpdateSchema =
/* istanbul ignore next */
(cov_phiddfqxn().s[21]++, CarrierCreateSchema.partial().omit({
  code: true
}));
// =====================================================
// HELPER FUNCTIONS
// =====================================================
async function validateAdminAuth(request) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[6]++;
  const session =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[22]++, await (0, _config.auth)());
  /* istanbul ignore next */
  cov_phiddfqxn().s[23]++;
  if (!session?.user) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[0][0]++;
    cov_phiddfqxn().s[24]++;
    return _server.NextResponse.json({
      error: 'No autorizado',
      code: 'UNAUTHORIZED'
    }, {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[0][1]++;
  }
  // Verificar rate limiting
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[25]++, await (0, _ratelimiting.checkRateLimit)(request, {
    windowMs: 60 * 1000,
    maxRequests: 100,
    keyGenerator: req => {
      /* istanbul ignore next */
      cov_phiddfqxn().f[7]++;
      cov_phiddfqxn().s[26]++;
      return `admin_carriers_${session.user.id}_${req.method}`;
    }
  }));
  /* istanbul ignore next */
  cov_phiddfqxn().s[27]++;
  if (!rateLimitResult.success) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[1][0]++;
    cov_phiddfqxn().s[28]++;
    return _server.NextResponse.json({
      error: 'Demasiadas solicitudes',
      code: 'RATE_LIMIT_EXCEEDED',
      retryAfter: rateLimitResult.retryAfter
    }, {
      status: 429
    });
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[1][1]++;
  }
  cov_phiddfqxn().s[29]++;
  return null;
}
async function encryptApiKey(apiKey) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[8]++;
  cov_phiddfqxn().s[30]++;
  // ImplementaciÃ³n bÃ¡sica de encriptaciÃ³n
  // En producciÃ³n usar crypto mÃ¡s robusto
  return Buffer.from(apiKey).toString('base64');
}
async function decryptApiKey(encryptedKey) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[9]++;
  cov_phiddfqxn().s[31]++;
  // ImplementaciÃ³n bÃ¡sica de desencriptaciÃ³n
  return Buffer.from(encryptedKey, 'base64').toString();
}
// =====================================================
// HANDLERS
// =====================================================
async function getHandler(request) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[10]++;
  // Validar autenticaciÃ³n
  const authError =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[32]++, await validateAdminAuth(request));
  /* istanbul ignore next */
  cov_phiddfqxn().s[33]++;
  if (authError) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[2][0]++;
    cov_phiddfqxn().s[34]++;
    return authError;
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[2][1]++;
  }
  const {
    searchParams
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[35]++, new URL(request.url));
  const filters =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[36]++, CarrierFiltersSchema.parse({
    page: parseInt(
    /* istanbul ignore next */
    (cov_phiddfqxn().b[3][0]++, searchParams.get('page')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[3][1]++, '1')),
    limit: parseInt(
    /* istanbul ignore next */
    (cov_phiddfqxn().b[4][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[4][1]++, '20')),
    search:
    /* istanbul ignore next */
    (cov_phiddfqxn().b[5][0]++, searchParams.get('search')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[5][1]++, undefined),
    is_active: searchParams.get('is_active') ?
    /* istanbul ignore next */
    (cov_phiddfqxn().b[6][0]++, searchParams.get('is_active') === 'true') :
    /* istanbul ignore next */
    (cov_phiddfqxn().b[6][1]++, undefined),
    service:
    /* istanbul ignore next */
    (cov_phiddfqxn().b[7][0]++, searchParams.get('service')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[7][1]++, undefined),
    coverage_area:
    /* istanbul ignore next */
    (cov_phiddfqxn().b[8][0]++, searchParams.get('coverage_area')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[8][1]++, undefined),
    sort_by:
    /* istanbul ignore next */
    (cov_phiddfqxn().b[9][0]++, searchParams.get('sort_by')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[9][1]++, 'name'),
    sort_order:
    /* istanbul ignore next */
    (cov_phiddfqxn().b[10][0]++, searchParams.get('sort_order')) ||
    /* istanbul ignore next */
    (cov_phiddfqxn().b[10][1]++, 'asc')
  }));
  const supabase =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[37]++, (0, _server1.createClient)());
  // Construir query con filtros
  let query =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[38]++, supabase.from('couriers').select('*', {
    count: 'exact'
  }));
  // Aplicar filtros
  /* istanbul ignore next */
  cov_phiddfqxn().s[39]++;
  if (filters.search) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[11][0]++;
    cov_phiddfqxn().s[40]++;
    query = query.or(`name.ilike.%${filters.search}%,code.ilike.%${filters.search}%`);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[11][1]++;
  }
  cov_phiddfqxn().s[41]++;
  if (filters.is_active !== undefined) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[12][0]++;
    cov_phiddfqxn().s[42]++;
    query = query.eq('is_active', filters.is_active);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[12][1]++;
  }
  cov_phiddfqxn().s[43]++;
  if (filters.service) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[13][0]++;
    cov_phiddfqxn().s[44]++;
    query = query.contains('supported_services', [filters.service]);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[13][1]++;
  }
  cov_phiddfqxn().s[45]++;
  if (filters.coverage_area) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[14][0]++;
    cov_phiddfqxn().s[46]++;
    query = query.contains('coverage_areas', [filters.coverage_area]);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[14][1]++;
  }
  // Aplicar ordenamiento y paginaciÃ³n
  const from =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[47]++, (filters.page - 1) * filters.limit);
  const to =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[48]++, from + filters.limit - 1);
  const {
    data: carriers,
    error,
    count
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[49]++, await query.order(filters.sort_by, {
    ascending: filters.sort_order === 'asc'
  }).range(from, to));
  /* istanbul ignore next */
  cov_phiddfqxn().s[50]++;
  if (error) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[15][0]++;
    cov_phiddfqxn().s[51]++;
    throw new _errorhandler.ApiError('Error al obtener transportistas', 500, 'DATABASE_ERROR', error);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[15][1]++;
  }
  // Desencriptar API keys para respuesta (solo mostrar si existen)
  const carriersWithDecryptedKeys =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[52]++, await Promise.all((
  /* istanbul ignore next */
  (cov_phiddfqxn().b[16][0]++, carriers) ||
  /* istanbul ignore next */
  (cov_phiddfqxn().b[16][1]++, [])).map(async carrier => {
    /* istanbul ignore next */
    cov_phiddfqxn().f[11]++;
    cov_phiddfqxn().s[53]++;
    return {
      ...carrier,
      api_key_encrypted: carrier.api_key_encrypted ?
      /* istanbul ignore next */
      (cov_phiddfqxn().b[17][0]++, '***ENCRYPTED***') :
      /* istanbul ignore next */
      (cov_phiddfqxn().b[17][1]++, null)
    };
  })));
  const response =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[54]++, {
    data: carriersWithDecryptedKeys,
    pagination: {
      page: filters.page,
      limit: filters.limit,
      total:
      /* istanbul ignore next */
      (cov_phiddfqxn().b[18][0]++, count) ||
      /* istanbul ignore next */
      (cov_phiddfqxn().b[18][1]++, 0),
      pages: Math.ceil((
      /* istanbul ignore next */
      (cov_phiddfqxn().b[19][0]++, count) ||
      /* istanbul ignore next */
      (cov_phiddfqxn().b[19][1]++, 0)) / filters.limit)
    },
    filters: {
      search: filters.search,
      is_active: filters.is_active,
      service: filters.service,
      coverage_area: filters.coverage_area
    }
  });
  /* istanbul ignore next */
  cov_phiddfqxn().s[55]++;
  return _server.NextResponse.json(response);
}
async function postHandler(request) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[12]++;
  // Validar autenticaciÃ³n
  const authError =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[56]++, await validateAdminAuth(request));
  /* istanbul ignore next */
  cov_phiddfqxn().s[57]++;
  if (authError) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[20][0]++;
    cov_phiddfqxn().s[58]++;
    return authError;
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[20][1]++;
  }
  const session =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[59]++, await (0, _config.auth)());
  const body =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[60]++, await request.json());
  const validatedData =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[61]++, CarrierCreateSchema.parse(body));
  const supabase =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[62]++, (0, _server1.createClient)());
  // Verificar que el cÃ³digo no exista
  const {
    data: existingCarrier
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[63]++, await supabase.from('couriers').select('id').eq('code', validatedData.code).single());
  /* istanbul ignore next */
  cov_phiddfqxn().s[64]++;
  if (existingCarrier) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[21][0]++;
    cov_phiddfqxn().s[65]++;
    throw new _errorhandler.ValidationError('El cÃ³digo del transportista ya existe');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[21][1]++;
  }
  // Encriptar API key si se proporciona
  let apiKeyEncrypted =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[66]++, null);
  /* istanbul ignore next */
  cov_phiddfqxn().s[67]++;
  if (validatedData.api_key) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[22][0]++;
    cov_phiddfqxn().s[68]++;
    apiKeyEncrypted = await encryptApiKey(validatedData.api_key);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[22][1]++;
  }
  // Crear transportista
  const {
    data: carrier,
    error
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[69]++, await supabase.from('couriers').insert({
    name: validatedData.name,
    code: validatedData.code,
    api_endpoint: validatedData.api_endpoint,
    api_key_encrypted: apiKeyEncrypted,
    supported_services: validatedData.supported_services,
    coverage_areas: validatedData.coverage_areas,
    base_cost: validatedData.base_cost,
    cost_per_kg: validatedData.cost_per_kg,
    free_shipping_threshold: validatedData.free_shipping_threshold,
    max_weight_kg: validatedData.max_weight_kg,
    max_dimensions_cm: validatedData.max_dimensions_cm,
    logo_url: validatedData.logo_url,
    website_url: validatedData.website_url,
    contact_phone: validatedData.contact_phone,
    contact_email: validatedData.contact_email,
    is_active: validatedData.is_active
  }).select().single());
  /* istanbul ignore next */
  cov_phiddfqxn().s[70]++;
  if (error) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[23][0]++;
    cov_phiddfqxn().s[71]++;
    throw new _errorhandler.ApiError('Error al crear transportista', 500, 'DATABASE_ERROR', error);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[23][1]++;
  }
  // Log de auditorÃ­a
  cov_phiddfqxn().s[72]++;
  await (0, _apilogger.logAdminAction)(session.user.id, 'CREATE', 'carrier', carrier.id, null, carrier);
  const response =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[73]++, {
    data: {
      ...carrier,
      api_key_encrypted: carrier.api_key_encrypted ?
      /* istanbul ignore next */
      (cov_phiddfqxn().b[24][0]++, '***ENCRYPTED***') :
      /* istanbul ignore next */
      (cov_phiddfqxn().b[24][1]++, null)
    },
    success: true,
    message: 'Transportista creado exitosamente'
  });
  /* istanbul ignore next */
  cov_phiddfqxn().s[74]++;
  return _server.NextResponse.json(response, {
    status: 201
  });
}
async function putHandler(request) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[13]++;
  // Validar autenticaciÃ³n
  const authError =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[75]++, await validateAdminAuth(request));
  /* istanbul ignore next */
  cov_phiddfqxn().s[76]++;
  if (authError) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[25][0]++;
    cov_phiddfqxn().s[77]++;
    return authError;
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[25][1]++;
  }
  const session =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[78]++, await (0, _config.auth)());
  const {
    searchParams
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[79]++, new URL(request.url));
  const carrierId =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[80]++, searchParams.get('id'));
  /* istanbul ignore next */
  cov_phiddfqxn().s[81]++;
  if (!carrierId) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[26][0]++;
    cov_phiddfqxn().s[82]++;
    throw new _errorhandler.ValidationError('ID del transportista es requerido');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[26][1]++;
  }
  const body =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[83]++, await request.json());
  const validatedData =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[84]++, CarrierUpdateSchema.parse(body));
  const supabase =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[85]++, (0, _server1.createClient)());
  // Verificar que el transportista existe
  const {
    data: existingCarrier,
    error: fetchError
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[86]++, await supabase.from('couriers').select('*').eq('id', carrierId).single());
  /* istanbul ignore next */
  cov_phiddfqxn().s[87]++;
  if (
  /* istanbul ignore next */
  (cov_phiddfqxn().b[28][0]++, fetchError) ||
  /* istanbul ignore next */
  (cov_phiddfqxn().b[28][1]++, !existingCarrier)) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[27][0]++;
    cov_phiddfqxn().s[88]++;
    throw new _errorhandler.NotFoundError('Transportista no encontrado');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[27][1]++;
  }
  // Encriptar nueva API key si se proporciona
  let apiKeyEncrypted =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[89]++, existingCarrier.api_key_encrypted);
  /* istanbul ignore next */
  cov_phiddfqxn().s[90]++;
  if (validatedData.api_key) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[29][0]++;
    cov_phiddfqxn().s[91]++;
    apiKeyEncrypted = await encryptApiKey(validatedData.api_key);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[29][1]++;
  }
  // Actualizar transportista
  const {
    data: carrier,
    error
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[92]++, await supabase.from('couriers').update({
    ...validatedData,
    api_key_encrypted: apiKeyEncrypted,
    updated_at: new Date().toISOString()
  }).eq('id', carrierId).select().single());
  /* istanbul ignore next */
  cov_phiddfqxn().s[93]++;
  if (error) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[30][0]++;
    cov_phiddfqxn().s[94]++;
    throw new _errorhandler.ApiError('Error al actualizar transportista', 500, 'DATABASE_ERROR', error);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[30][1]++;
  }
  // Log de auditorÃ­a
  cov_phiddfqxn().s[95]++;
  await (0, _apilogger.logAdminAction)(session.user.id, 'UPDATE', 'carrier', carrier.id, existingCarrier, carrier);
  const response =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[96]++, {
    data: {
      ...carrier,
      api_key_encrypted: carrier.api_key_encrypted ?
      /* istanbul ignore next */
      (cov_phiddfqxn().b[31][0]++, '***ENCRYPTED***') :
      /* istanbul ignore next */
      (cov_phiddfqxn().b[31][1]++, null)
    },
    success: true,
    message: 'Transportista actualizado exitosamente'
  });
  /* istanbul ignore next */
  cov_phiddfqxn().s[97]++;
  return _server.NextResponse.json(response);
}
async function deleteHandler(request) {
  /* istanbul ignore next */
  cov_phiddfqxn().f[14]++;
  // Validar autenticaciÃ³n
  const authError =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[98]++, await validateAdminAuth(request));
  /* istanbul ignore next */
  cov_phiddfqxn().s[99]++;
  if (authError) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[32][0]++;
    cov_phiddfqxn().s[100]++;
    return authError;
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[32][1]++;
  }
  const session =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[101]++, await (0, _config.auth)());
  const {
    searchParams
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[102]++, new URL(request.url));
  const carrierId =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[103]++, searchParams.get('id'));
  /* istanbul ignore next */
  cov_phiddfqxn().s[104]++;
  if (!carrierId) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[33][0]++;
    cov_phiddfqxn().s[105]++;
    throw new _errorhandler.ValidationError('ID del transportista es requerido');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[33][1]++;
  }
  const supabase =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[106]++, (0, _server1.createClient)());
  // Verificar que el transportista existe
  const {
    data: existingCarrier,
    error: fetchError
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[107]++, await supabase.from('couriers').select('*').eq('id', carrierId).single());
  /* istanbul ignore next */
  cov_phiddfqxn().s[108]++;
  if (
  /* istanbul ignore next */
  (cov_phiddfqxn().b[35][0]++, fetchError) ||
  /* istanbul ignore next */
  (cov_phiddfqxn().b[35][1]++, !existingCarrier)) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[34][0]++;
    cov_phiddfqxn().s[109]++;
    throw new _errorhandler.NotFoundError('Transportista no encontrado');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[34][1]++;
  }
  // Verificar que no tenga envÃ­os activos
  const {
    data: activeShipments,
    error: shipmentsError
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[110]++, await supabase.from('shipments').select('id').eq('carrier_id', carrierId).in('status', ['pending', 'confirmed', 'picked_up', 'in_transit', 'out_for_delivery']));
  /* istanbul ignore next */
  cov_phiddfqxn().s[111]++;
  if (shipmentsError) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[36][0]++;
    cov_phiddfqxn().s[112]++;
    throw new _errorhandler.ApiError('Error al verificar envÃ­os activos', 500, 'DATABASE_ERROR', shipmentsError);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[36][1]++;
  }
  cov_phiddfqxn().s[113]++;
  if (
  /* istanbul ignore next */
  (cov_phiddfqxn().b[38][0]++, activeShipments) &&
  /* istanbul ignore next */
  (cov_phiddfqxn().b[38][1]++, activeShipments.length > 0)) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[37][0]++;
    cov_phiddfqxn().s[114]++;
    throw new _errorhandler.ValidationError('No se puede eliminar un transportista con envÃ­os activos');
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[37][1]++;
  }
  // Eliminar transportista (soft delete - marcar como inactivo)
  const {
    error
  } =
  /* istanbul ignore next */
  (cov_phiddfqxn().s[115]++, await supabase.from('couriers').update({
    is_active: false,
    updated_at: new Date().toISOString()
  }).eq('id', carrierId));
  /* istanbul ignore next */
  cov_phiddfqxn().s[116]++;
  if (error) {
    /* istanbul ignore next */
    cov_phiddfqxn().b[39][0]++;
    cov_phiddfqxn().s[117]++;
    throw new _errorhandler.ApiError('Error al eliminar transportista', 500, 'DATABASE_ERROR', error);
  } else
  /* istanbul ignore next */
  {
    cov_phiddfqxn().b[39][1]++;
  }
  // Log de auditorÃ­a
  cov_phiddfqxn().s[118]++;
  await (0, _apilogger.logAdminAction)(session.user.id, 'DELETE', 'carrier', carrierId, existingCarrier, null);
  /* istanbul ignore next */
  cov_phiddfqxn().s[119]++;
  return _server.NextResponse.json({
    success: true,
    message: 'Transportista eliminado exitosamente'
  });
}
const GET =
/* istanbul ignore next */
(cov_phiddfqxn().s[120]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging)(getHandler));
const POST =
/* istanbul ignore next */
(cov_phiddfqxn().s[121]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging)(postHandler));
const PUT =
/* istanbul ignore next */
(cov_phiddfqxn().s[122]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging)(putHandler));
const DELETE =
/* istanbul ignore next */
(cov_phiddfqxn().s[123]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging)(deleteHandler));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcGhpZGRmcXhuIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiREVMRVRFIiwiZiIsIkdFVCIsIlBPU1QiLCJQVVQiLCJydW50aW1lIiwiQ2FycmllckZpbHRlcnNTY2hlbWEiLCJfem9kIiwieiIsIm9iamVjdCIsInBhZ2UiLCJjb2VyY2UiLCJudW1iZXIiLCJpbnQiLCJtaW4iLCJkZWZhdWx0IiwibGltaXQiLCJtYXgiLCJzZWFyY2giLCJzdHJpbmciLCJvcHRpb25hbCIsImlzX2FjdGl2ZSIsImJvb2xlYW4iLCJzZXJ2aWNlIiwibmF0aXZlRW51bSIsIl9sb2dpc3RpY3MiLCJTaGlwcGluZ1NlcnZpY2UiLCJjb3ZlcmFnZV9hcmVhIiwic29ydF9ieSIsImVudW0iLCJzb3J0X29yZGVyIiwiQ2FycmllckNyZWF0ZVNjaGVtYSIsIm5hbWUiLCJjb2RlIiwicmVnZXgiLCJhcGlfZW5kcG9pbnQiLCJ1cmwiLCJhcGlfa2V5Iiwic3VwcG9ydGVkX3NlcnZpY2VzIiwiYXJyYXkiLCJjb3ZlcmFnZV9hcmVhcyIsImJhc2VfY29zdCIsImNvc3RfcGVyX2tnIiwiZnJlZV9zaGlwcGluZ190aHJlc2hvbGQiLCJtYXhfd2VpZ2h0X2tnIiwibWF4X2RpbWVuc2lvbnNfY20iLCJsb2dvX3VybCIsIndlYnNpdGVfdXJsIiwiY29udGFjdF9waG9uZSIsImNvbnRhY3RfZW1haWwiLCJlbWFpbCIsIkNhcnJpZXJVcGRhdGVTY2hlbWEiLCJwYXJ0aWFsIiwib21pdCIsInZhbGlkYXRlQWRtaW5BdXRoIiwicmVxdWVzdCIsInNlc3Npb24iLCJfY29uZmlnIiwiYXV0aCIsInVzZXIiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInJhdGVMaW1pdFJlc3VsdCIsIl9yYXRlbGltaXRpbmciLCJjaGVja1JhdGVMaW1pdCIsIndpbmRvd01zIiwibWF4UmVxdWVzdHMiLCJrZXlHZW5lcmF0b3IiLCJyZXEiLCJpZCIsIm1ldGhvZCIsInN1Y2Nlc3MiLCJyZXRyeUFmdGVyIiwiZW5jcnlwdEFwaUtleSIsImFwaUtleSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImRlY3J5cHRBcGlLZXkiLCJlbmNyeXB0ZWRLZXkiLCJnZXRIYW5kbGVyIiwiYXV0aEVycm9yIiwic2VhcmNoUGFyYW1zIiwiVVJMIiwiZmlsdGVycyIsInBhcnNlIiwicGFyc2VJbnQiLCJnZXQiLCJ1bmRlZmluZWQiLCJzdXBhYmFzZSIsIl9zZXJ2ZXIxIiwiY3JlYXRlQ2xpZW50IiwicXVlcnkiLCJzZWxlY3QiLCJjb3VudCIsIm9yIiwiZXEiLCJjb250YWlucyIsInRvIiwiZGF0YSIsImNhcnJpZXJzIiwib3JkZXIiLCJhc2NlbmRpbmciLCJyYW5nZSIsIl9lcnJvcmhhbmRsZXIiLCJBcGlFcnJvciIsImNhcnJpZXJzV2l0aERlY3J5cHRlZEtleXMiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiY2FycmllciIsImFwaV9rZXlfZW5jcnlwdGVkIiwicmVzcG9uc2UiLCJwYWdpbmF0aW9uIiwidG90YWwiLCJwYWdlcyIsIk1hdGgiLCJjZWlsIiwicG9zdEhhbmRsZXIiLCJib2R5IiwidmFsaWRhdGVkRGF0YSIsImV4aXN0aW5nQ2FycmllciIsInNpbmdsZSIsIlZhbGlkYXRpb25FcnJvciIsImFwaUtleUVuY3J5cHRlZCIsImluc2VydCIsIl9hcGlsb2dnZXIiLCJsb2dBZG1pbkFjdGlvbiIsIm1lc3NhZ2UiLCJwdXRIYW5kbGVyIiwiY2FycmllcklkIiwiZmV0Y2hFcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJ1cGRhdGUiLCJ1cGRhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZGVsZXRlSGFuZGxlciIsImFjdGl2ZVNoaXBtZW50cyIsInNoaXBtZW50c0Vycm9yIiwiaW4iLCJsZW5ndGgiLCJfbWlkZGxld2FyZWNvbXBvc2VyIiwiY29tcG9zZU1pZGRsZXdhcmVzIiwid2l0aEVycm9ySGFuZGxlciIsIndpdGhBcGlMb2dnaW5nIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxtYXJ0aVxcRGVza3RvcFxcREVTQVJST0xMT1NXXFxCT0lMRVJQTEFUVEUgRS1DT01NRVJDRVxcc3JjXFxhcHBcXGFwaVxcYWRtaW5cXGxvZ2lzdGljc1xcY2FycmllcnNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZ3VyYWNpw7NuIHBhcmEgTm9kZS5qcyBSdW50aW1lXHJcbmV4cG9ydCBjb25zdCBydW50aW1lID0gJ25vZGVqcyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBBUEk6IEdFU1RJw5NOIERFIFRSQU5TUE9SVElTVEFTL0NBUlJJRVJTIEVOVEVSUFJJU0VcclxuLy8gRW5kcG9pbnQ6IC9hcGkvYWRtaW4vbG9naXN0aWNzL2NhcnJpZXJzXHJcbi8vIERlc2NyaXBjacOzbjogQ1JVRCBjb21wbGV0byBwYXJhIGdlc3Rpw7NuIGRlIHRyYW5zcG9ydGlzdGFzXHJcbi8vIEJhc2FkbyBlbjogUGF0cm9uZXMgZW50ZXJwcmlzZSBlc3RhYmxlY2lkb3MgZW4gZWwgcHJveWVjdG9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xyXG5pbXBvcnQgeyBjb21wb3NlTWlkZGxld2FyZXMgfSBmcm9tICdAL2xpYi9hcGkvbWlkZGxld2FyZS1jb21wb3Nlcic7XHJcbmltcG9ydCB7IHdpdGhFcnJvckhhbmRsZXIsIEFwaUVycm9yLCBWYWxpZGF0aW9uRXJyb3IsIE5vdEZvdW5kRXJyb3IgfSBmcm9tICdAL2xpYi9hcGkvZXJyb3ItaGFuZGxlcic7XHJcbmltcG9ydCB7IHdpdGhBcGlMb2dnaW5nLCBsb2dBZG1pbkFjdGlvbiB9IGZyb20gJ0AvbGliL2FwaS9hcGktbG9nZ2VyJztcclxuaW1wb3J0IHsgd2l0aEFkbWluQXV0aCB9IGZyb20gJ0AvbGliL2F1dGgvYXBpLWF1dGgtbWlkZGxld2FyZSc7XHJcbmltcG9ydCB7IHdpdGhWYWxpZGF0aW9uIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9hZG1pbi1zY2hlbWFzJztcclxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQC9saWIvaW50ZWdyYXRpb25zL3N1cGFiYXNlL3NlcnZlcic7XHJcbmltcG9ydCB7IGF1dGggfSBmcm9tICdAL2xpYi9hdXRoL2NvbmZpZyc7XHJcbmltcG9ydCB7IGNoZWNrUmF0ZUxpbWl0IH0gZnJvbSAnQC9saWIvYXV0aC9yYXRlLWxpbWl0aW5nJztcclxuaW1wb3J0IHsgXHJcbiAgQ291cmllciwgXHJcbiAgU2hpcHBpbmdTZXJ2aWNlLFxyXG4gIENhcnJpZXJGaWx0ZXJzUmVxdWVzdCxcclxuICBDYXJyaWVyQ3JlYXRlUmVxdWVzdCxcclxuICBDYXJyaWVyVXBkYXRlUmVxdWVzdCxcclxuICBDYXJyaWVyUmVzcG9uc2UsXHJcbiAgQ2Fycmllckxpc3RSZXNwb25zZVxyXG59IGZyb20gJ0AvdHlwZXMvbG9naXN0aWNzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFZBTElEQVRJT04gU0NIRU1BU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uc3QgQ2FycmllckZpbHRlcnNTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgcGFnZTogei5jb2VyY2UubnVtYmVyKCkuaW50KCkubWluKDEpLmRlZmF1bHQoMSksXHJcbmxpbWl0OiB6LmNvZXJjZS5udW1iZXIoKS5pbnQoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCgyMCksXHJcbiAgc2VhcmNoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgaXNfYWN0aXZlOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxyXG4gIHNlcnZpY2U6IHoubmF0aXZlRW51bShTaGlwcGluZ1NlcnZpY2UpLm9wdGlvbmFsKCksXHJcbiAgY292ZXJhZ2VfYXJlYTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxyXG4gIHNvcnRfYnk6IHouZW51bShbJ25hbWUnLCAnY3JlYXRlZF9hdCcsICdiYXNlX2Nvc3QnLCAnY29zdF9wZXJfa2cnXSkuZGVmYXVsdCgnbmFtZScpLFxyXG4gIHNvcnRfb3JkZXI6IHouZW51bShbJ2FzYycsICdkZXNjJ10pLmRlZmF1bHQoJ2FzYycpXHJcbn0pO1xyXG5cclxuY29uc3QgQ2FycmllckNyZWF0ZVNjaGVtYSA9IHoub2JqZWN0KHtcclxuICBuYW1lOiB6LnN0cmluZygpLm1pbigxLCAnTm9tYnJlIGVzIHJlcXVlcmlkbycpLm1heCgyNTUpLFxyXG4gIGNvZGU6IHouc3RyaW5nKCkubWluKDIsICdDw7NkaWdvIGRlYmUgdGVuZXIgYWwgbWVub3MgMiBjYXJhY3RlcmVzJykubWF4KDEwKS5yZWdleCgvXltBLVowLTlfXSskLywgJ0PDs2RpZ28gZGViZSBzZXIgYWxmYW51bcOpcmljbyBlbiBtYXnDunNjdWxhcycpLFxyXG4gIGFwaV9lbmRwb2ludDogei5zdHJpbmcoKS51cmwoKS5vcHRpb25hbCgpLFxyXG4gIGFwaV9rZXk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcclxuICBzdXBwb3J0ZWRfc2VydmljZXM6IHouYXJyYXkoei5uYXRpdmVFbnVtKFNoaXBwaW5nU2VydmljZSkpLm1pbigxLCAnRGViZSBzb3BvcnRhciBhbCBtZW5vcyB1biBzZXJ2aWNpbycpLFxyXG4gIGNvdmVyYWdlX2FyZWFzOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxLCAnRGViZSBjdWJyaXIgYWwgbWVub3MgdW4gw6FyZWEnKSxcclxuICBiYXNlX2Nvc3Q6IHoubnVtYmVyKCkubWluKDAsICdDb3N0byBiYXNlIG5vIHB1ZWRlIHNlciBuZWdhdGl2bycpLFxyXG4gIGNvc3RfcGVyX2tnOiB6Lm51bWJlcigpLm1pbigwLCAnQ29zdG8gcG9yIGtnIG5vIHB1ZWRlIHNlciBuZWdhdGl2bycpLFxyXG4gIGZyZWVfc2hpcHBpbmdfdGhyZXNob2xkOiB6Lm51bWJlcigpLm1pbigwKS5vcHRpb25hbCgpLFxyXG4gIG1heF93ZWlnaHRfa2c6IHoubnVtYmVyKCkubWluKDApLm9wdGlvbmFsKCksXHJcbiAgbWF4X2RpbWVuc2lvbnNfY206IHouc3RyaW5nKCkucmVnZXgoL15cXGQreFxcZCt4XFxkKyQvLCAnRm9ybWF0byBkZWJlIHNlciBMeFd4SCAoZWo6IDEwMHg4MHg2MCknKS5vcHRpb25hbCgpLFxyXG4gIGxvZ29fdXJsOiB6LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCksXHJcbiAgd2Vic2l0ZV91cmw6IHouc3RyaW5nKCkudXJsKCkub3B0aW9uYWwoKSxcclxuICBjb250YWN0X3Bob25lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgY29udGFjdF9lbWFpbDogei5zdHJpbmcoKS5lbWFpbCgpLm9wdGlvbmFsKCksXHJcbiAgaXNfYWN0aXZlOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpXHJcbn0pO1xyXG5cclxuY29uc3QgQ2FycmllclVwZGF0ZVNjaGVtYSA9IENhcnJpZXJDcmVhdGVTY2hlbWEucGFydGlhbCgpLm9taXQoeyBjb2RlOiB0cnVlIH0pO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gSEVMUEVSIEZVTkNUSU9OU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVBZG1pbkF1dGgocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICBjb25zdCBzZXNzaW9uID0gYXdhaXQgYXV0aCgpO1xyXG4gIGlmICghc2Vzc2lvbj8udXNlcikge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IGVycm9yOiAnTm8gYXV0b3JpemFkbycsIGNvZGU6ICdVTkFVVEhPUklaRUQnIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA0MDEgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIFZlcmlmaWNhciByYXRlIGxpbWl0aW5nXHJcbiAgY29uc3QgcmF0ZUxpbWl0UmVzdWx0ID0gYXdhaXQgY2hlY2tSYXRlTGltaXQocmVxdWVzdCwge1xyXG4gICAgd2luZG93TXM6IDYwICogMTAwMCwgLy8gMSBtaW51dG9cclxuICAgIG1heFJlcXVlc3RzOiAxMDAsXHJcbiAgICBrZXlHZW5lcmF0b3I6IChyZXEpID0+IGBhZG1pbl9jYXJyaWVyc18ke3Nlc3Npb24udXNlci5pZH1fJHtyZXEubWV0aG9kfWBcclxuICB9KTtcclxuXHJcbiAgaWYgKCFyYXRlTGltaXRSZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IFxyXG4gICAgICAgIGVycm9yOiAnRGVtYXNpYWRhcyBzb2xpY2l0dWRlcycsIFxyXG4gICAgICAgIGNvZGU6ICdSQVRFX0xJTUlUX0VYQ0VFREVEJyxcclxuICAgICAgICByZXRyeUFmdGVyOiByYXRlTGltaXRSZXN1bHQucmV0cnlBZnRlciBcclxuICAgICAgfSxcclxuICAgICAgeyBzdGF0dXM6IDQyOSB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGVuY3J5cHRBcGlLZXkoYXBpS2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gIC8vIEltcGxlbWVudGFjacOzbiBiw6FzaWNhIGRlIGVuY3JpcHRhY2nDs25cclxuICAvLyBFbiBwcm9kdWNjacOzbiB1c2FyIGNyeXB0byBtw6FzIHJvYnVzdG9cclxuICByZXR1cm4gQnVmZmVyLmZyb20oYXBpS2V5KS50b1N0cmluZygnYmFzZTY0Jyk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRlY3J5cHRBcGlLZXkoZW5jcnlwdGVkS2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gIC8vIEltcGxlbWVudGFjacOzbiBiw6FzaWNhIGRlIGRlc2VuY3JpcHRhY2nDs25cclxuICByZXR1cm4gQnVmZmVyLmZyb20oZW5jcnlwdGVkS2V5LCAnYmFzZTY0JykudG9TdHJpbmcoKTtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gSEFORExFUlNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEhhbmRsZXIocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICAvLyBWYWxpZGFyIGF1dGVudGljYWNpw7NuXHJcbiAgY29uc3QgYXV0aEVycm9yID0gYXdhaXQgdmFsaWRhdGVBZG1pbkF1dGgocmVxdWVzdCk7XHJcbiAgaWYgKGF1dGhFcnJvcikge3JldHVybiBhdXRoRXJyb3I7fVxyXG5cclxuICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XHJcbiAgY29uc3QgZmlsdGVycyA9IENhcnJpZXJGaWx0ZXJzU2NoZW1hLnBhcnNlKHtcclxuICAgIHBhZ2U6IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ3BhZ2UnKSB8fCAnMScpLFxyXG4gICAgbGltaXQ6IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykgfHwgJzIwJyksXHJcbiAgICBzZWFyY2g6IHNlYXJjaFBhcmFtcy5nZXQoJ3NlYXJjaCcpIHx8IHVuZGVmaW5lZCxcclxuICAgIGlzX2FjdGl2ZTogc2VhcmNoUGFyYW1zLmdldCgnaXNfYWN0aXZlJykgPyBzZWFyY2hQYXJhbXMuZ2V0KCdpc19hY3RpdmUnKSA9PT0gJ3RydWUnIDogdW5kZWZpbmVkLFxyXG4gICAgc2VydmljZTogc2VhcmNoUGFyYW1zLmdldCgnc2VydmljZScpIHx8IHVuZGVmaW5lZCxcclxuICAgIGNvdmVyYWdlX2FyZWE6IHNlYXJjaFBhcmFtcy5nZXQoJ2NvdmVyYWdlX2FyZWEnKSB8fCB1bmRlZmluZWQsXHJcbiAgICBzb3J0X2J5OiBzZWFyY2hQYXJhbXMuZ2V0KCdzb3J0X2J5JykgfHwgJ25hbWUnLFxyXG4gICAgc29ydF9vcmRlcjogc2VhcmNoUGFyYW1zLmdldCgnc29ydF9vcmRlcicpIHx8ICdhc2MnXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KCk7XHJcblxyXG4gIC8vIENvbnN0cnVpciBxdWVyeSBjb24gZmlsdHJvc1xyXG4gIGxldCBxdWVyeSA9IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnY291cmllcnMnKVxyXG4gICAgLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcgfSk7XHJcblxyXG4gIC8vIEFwbGljYXIgZmlsdHJvc1xyXG4gIGlmIChmaWx0ZXJzLnNlYXJjaCkge1xyXG4gICAgcXVlcnkgPSBxdWVyeS5vcihgbmFtZS5pbGlrZS4lJHtmaWx0ZXJzLnNlYXJjaH0lLGNvZGUuaWxpa2UuJSR7ZmlsdGVycy5zZWFyY2h9JWApO1xyXG4gIH1cclxuXHJcbiAgaWYgKGZpbHRlcnMuaXNfYWN0aXZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ2lzX2FjdGl2ZScsIGZpbHRlcnMuaXNfYWN0aXZlKTtcclxuICB9XHJcblxyXG4gIGlmIChmaWx0ZXJzLnNlcnZpY2UpIHtcclxuICAgIHF1ZXJ5ID0gcXVlcnkuY29udGFpbnMoJ3N1cHBvcnRlZF9zZXJ2aWNlcycsIFtmaWx0ZXJzLnNlcnZpY2VdKTtcclxuICB9XHJcblxyXG4gIGlmIChmaWx0ZXJzLmNvdmVyYWdlX2FyZWEpIHtcclxuICAgIHF1ZXJ5ID0gcXVlcnkuY29udGFpbnMoJ2NvdmVyYWdlX2FyZWFzJywgW2ZpbHRlcnMuY292ZXJhZ2VfYXJlYV0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQXBsaWNhciBvcmRlbmFtaWVudG8geSBwYWdpbmFjacOzblxyXG4gIGNvbnN0IGZyb20gPSAoZmlsdGVycy5wYWdlIC0gMSkgKiBmaWx0ZXJzLmxpbWl0O1xyXG4gIGNvbnN0IHRvID0gZnJvbSArIGZpbHRlcnMubGltaXQgLSAxO1xyXG5cclxuICBjb25zdCB7IGRhdGE6IGNhcnJpZXJzLCBlcnJvciwgY291bnQgfSA9IGF3YWl0IHF1ZXJ5XHJcbiAgICAub3JkZXIoZmlsdGVycy5zb3J0X2J5LCB7IGFzY2VuZGluZzogZmlsdGVycy5zb3J0X29yZGVyID09PSAnYXNjJyB9KVxyXG4gICAgLnJhbmdlKGZyb20sIHRvKTtcclxuXHJcbiAgaWYgKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0Vycm9yIGFsIG9idGVuZXIgdHJhbnNwb3J0aXN0YXMnLCA1MDAsICdEQVRBQkFTRV9FUlJPUicsIGVycm9yKTtcclxuICB9XHJcblxyXG4gIC8vIERlc2VuY3JpcHRhciBBUEkga2V5cyBwYXJhIHJlc3B1ZXN0YSAoc29sbyBtb3N0cmFyIHNpIGV4aXN0ZW4pXHJcbiAgY29uc3QgY2FycmllcnNXaXRoRGVjcnlwdGVkS2V5cyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgKGNhcnJpZXJzIHx8IFtdKS5tYXAoYXN5bmMgKGNhcnJpZXIpID0+ICh7XHJcbiAgICAgIC4uLmNhcnJpZXIsXHJcbiAgICAgIGFwaV9rZXlfZW5jcnlwdGVkOiBjYXJyaWVyLmFwaV9rZXlfZW5jcnlwdGVkID8gJyoqKkVOQ1JZUFRFRCoqKicgOiBudWxsXHJcbiAgICB9KSlcclxuICApO1xyXG5cclxuICBjb25zdCByZXNwb25zZTogQ2Fycmllckxpc3RSZXNwb25zZSA9IHtcclxuICAgIGRhdGE6IGNhcnJpZXJzV2l0aERlY3J5cHRlZEtleXMsXHJcbiAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgIHBhZ2U6IGZpbHRlcnMucGFnZSxcclxuICAgICAgbGltaXQ6IGZpbHRlcnMubGltaXQsXHJcbiAgICAgIHRvdGFsOiBjb3VudCB8fCAwLFxyXG4gICAgICBwYWdlczogTWF0aC5jZWlsKChjb3VudCB8fCAwKSAvIGZpbHRlcnMubGltaXQpXHJcbiAgICB9LFxyXG4gICAgZmlsdGVyczoge1xyXG4gICAgICBzZWFyY2g6IGZpbHRlcnMuc2VhcmNoLFxyXG4gICAgICBpc19hY3RpdmU6IGZpbHRlcnMuaXNfYWN0aXZlLFxyXG4gICAgICBzZXJ2aWNlOiBmaWx0ZXJzLnNlcnZpY2UsXHJcbiAgICAgIGNvdmVyYWdlX2FyZWE6IGZpbHRlcnMuY292ZXJhZ2VfYXJlYVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHBvc3RIYW5kbGVyKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgLy8gVmFsaWRhciBhdXRlbnRpY2FjacOzblxyXG4gIGNvbnN0IGF1dGhFcnJvciA9IGF3YWl0IHZhbGlkYXRlQWRtaW5BdXRoKHJlcXVlc3QpO1xyXG4gIGlmIChhdXRoRXJyb3IpIHtyZXR1cm4gYXV0aEVycm9yO31cclxuXHJcbiAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcclxuICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcbiAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IENhcnJpZXJDcmVhdGVTY2hlbWEucGFyc2UoYm9keSk7XHJcblxyXG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KCk7XHJcblxyXG4gIC8vIFZlcmlmaWNhciBxdWUgZWwgY8OzZGlnbyBubyBleGlzdGFcclxuICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nQ2FycmllciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgIC5mcm9tKCdjb3VyaWVycycpXHJcbiAgICAuc2VsZWN0KCdpZCcpXHJcbiAgICAuZXEoJ2NvZGUnLCB2YWxpZGF0ZWREYXRhLmNvZGUpXHJcbiAgICAuc2luZ2xlKCk7XHJcblxyXG4gIGlmIChleGlzdGluZ0NhcnJpZXIpIHtcclxuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0VsIGPDs2RpZ28gZGVsIHRyYW5zcG9ydGlzdGEgeWEgZXhpc3RlJyk7XHJcbiAgfVxyXG5cclxuICAvLyBFbmNyaXB0YXIgQVBJIGtleSBzaSBzZSBwcm9wb3JjaW9uYVxyXG4gIGxldCBhcGlLZXlFbmNyeXB0ZWQgPSBudWxsO1xyXG4gIGlmICh2YWxpZGF0ZWREYXRhLmFwaV9rZXkpIHtcclxuICAgIGFwaUtleUVuY3J5cHRlZCA9IGF3YWl0IGVuY3J5cHRBcGlLZXkodmFsaWRhdGVkRGF0YS5hcGlfa2V5KTtcclxuICB9XHJcblxyXG4gIC8vIENyZWFyIHRyYW5zcG9ydGlzdGFcclxuICBjb25zdCB7IGRhdGE6IGNhcnJpZXIsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgLmZyb20oJ2NvdXJpZXJzJylcclxuICAgIC5pbnNlcnQoe1xyXG4gICAgICBuYW1lOiB2YWxpZGF0ZWREYXRhLm5hbWUsXHJcbiAgICAgIGNvZGU6IHZhbGlkYXRlZERhdGEuY29kZSxcclxuICAgICAgYXBpX2VuZHBvaW50OiB2YWxpZGF0ZWREYXRhLmFwaV9lbmRwb2ludCxcclxuICAgICAgYXBpX2tleV9lbmNyeXB0ZWQ6IGFwaUtleUVuY3J5cHRlZCxcclxuICAgICAgc3VwcG9ydGVkX3NlcnZpY2VzOiB2YWxpZGF0ZWREYXRhLnN1cHBvcnRlZF9zZXJ2aWNlcyxcclxuICAgICAgY292ZXJhZ2VfYXJlYXM6IHZhbGlkYXRlZERhdGEuY292ZXJhZ2VfYXJlYXMsXHJcbiAgICAgIGJhc2VfY29zdDogdmFsaWRhdGVkRGF0YS5iYXNlX2Nvc3QsXHJcbiAgICAgIGNvc3RfcGVyX2tnOiB2YWxpZGF0ZWREYXRhLmNvc3RfcGVyX2tnLFxyXG4gICAgICBmcmVlX3NoaXBwaW5nX3RocmVzaG9sZDogdmFsaWRhdGVkRGF0YS5mcmVlX3NoaXBwaW5nX3RocmVzaG9sZCxcclxuICAgICAgbWF4X3dlaWdodF9rZzogdmFsaWRhdGVkRGF0YS5tYXhfd2VpZ2h0X2tnLFxyXG4gICAgICBtYXhfZGltZW5zaW9uc19jbTogdmFsaWRhdGVkRGF0YS5tYXhfZGltZW5zaW9uc19jbSxcclxuICAgICAgbG9nb191cmw6IHZhbGlkYXRlZERhdGEubG9nb191cmwsXHJcbiAgICAgIHdlYnNpdGVfdXJsOiB2YWxpZGF0ZWREYXRhLndlYnNpdGVfdXJsLFxyXG4gICAgICBjb250YWN0X3Bob25lOiB2YWxpZGF0ZWREYXRhLmNvbnRhY3RfcGhvbmUsXHJcbiAgICAgIGNvbnRhY3RfZW1haWw6IHZhbGlkYXRlZERhdGEuY29udGFjdF9lbWFpbCxcclxuICAgICAgaXNfYWN0aXZlOiB2YWxpZGF0ZWREYXRhLmlzX2FjdGl2ZVxyXG4gICAgfSlcclxuICAgIC5zZWxlY3QoKVxyXG4gICAgLnNpbmdsZSgpO1xyXG5cclxuICBpZiAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBBcGlFcnJvcignRXJyb3IgYWwgY3JlYXIgdHJhbnNwb3J0aXN0YScsIDUwMCwgJ0RBVEFCQVNFX0VSUk9SJywgZXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIGRlIGF1ZGl0b3LDrWFcclxuICBhd2FpdCBsb2dBZG1pbkFjdGlvbihzZXNzaW9uLnVzZXIuaWQsICdDUkVBVEUnLCAnY2FycmllcicsIGNhcnJpZXIuaWQsIG51bGwsIGNhcnJpZXIpO1xyXG5cclxuICBjb25zdCByZXNwb25zZTogQ2FycmllclJlc3BvbnNlID0ge1xyXG4gICAgZGF0YToge1xyXG4gICAgICAuLi5jYXJyaWVyLFxyXG4gICAgICBhcGlfa2V5X2VuY3J5cHRlZDogY2Fycmllci5hcGlfa2V5X2VuY3J5cHRlZCA/ICcqKipFTkNSWVBURUQqKionIDogbnVsbFxyXG4gICAgfSxcclxuICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICBtZXNzYWdlOiAnVHJhbnNwb3J0aXN0YSBjcmVhZG8gZXhpdG9zYW1lbnRlJ1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSwgeyBzdGF0dXM6IDIwMSB9KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcHV0SGFuZGxlcihyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIC8vIFZhbGlkYXIgYXV0ZW50aWNhY2nDs25cclxuICBjb25zdCBhdXRoRXJyb3IgPSBhd2FpdCB2YWxpZGF0ZUFkbWluQXV0aChyZXF1ZXN0KTtcclxuICBpZiAoYXV0aEVycm9yKSB7cmV0dXJuIGF1dGhFcnJvcjt9XHJcblxyXG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBhdXRoKCk7XHJcbiAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gIGNvbnN0IGNhcnJpZXJJZCA9IHNlYXJjaFBhcmFtcy5nZXQoJ2lkJyk7XHJcblxyXG4gIGlmICghY2FycmllcklkKSB7XHJcbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJRCBkZWwgdHJhbnNwb3J0aXN0YSBlcyByZXF1ZXJpZG8nKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcclxuICBjb25zdCB2YWxpZGF0ZWREYXRhID0gQ2FycmllclVwZGF0ZVNjaGVtYS5wYXJzZShib2R5KTtcclxuXHJcbiAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoKTtcclxuXHJcbiAgLy8gVmVyaWZpY2FyIHF1ZSBlbCB0cmFuc3BvcnRpc3RhIGV4aXN0ZVxyXG4gIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdDYXJyaWVyLCBlcnJvcjogZmV0Y2hFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgIC5mcm9tKCdjb3VyaWVycycpXHJcbiAgICAuc2VsZWN0KCcqJylcclxuICAgIC5lcSgnaWQnLCBjYXJyaWVySWQpXHJcbiAgICAuc2luZ2xlKCk7XHJcblxyXG4gIGlmIChmZXRjaEVycm9yIHx8ICFleGlzdGluZ0NhcnJpZXIpIHtcclxuICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKCdUcmFuc3BvcnRpc3RhIG5vIGVuY29udHJhZG8nKTtcclxuICB9XHJcblxyXG4gIC8vIEVuY3JpcHRhciBudWV2YSBBUEkga2V5IHNpIHNlIHByb3BvcmNpb25hXHJcbiAgbGV0IGFwaUtleUVuY3J5cHRlZCA9IGV4aXN0aW5nQ2Fycmllci5hcGlfa2V5X2VuY3J5cHRlZDtcclxuICBpZiAodmFsaWRhdGVkRGF0YS5hcGlfa2V5KSB7XHJcbiAgICBhcGlLZXlFbmNyeXB0ZWQgPSBhd2FpdCBlbmNyeXB0QXBpS2V5KHZhbGlkYXRlZERhdGEuYXBpX2tleSk7XHJcbiAgfVxyXG5cclxuICAvLyBBY3R1YWxpemFyIHRyYW5zcG9ydGlzdGFcclxuICBjb25zdCB7IGRhdGE6IGNhcnJpZXIsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgLmZyb20oJ2NvdXJpZXJzJylcclxuICAgIC51cGRhdGUoe1xyXG4gICAgICAuLi52YWxpZGF0ZWREYXRhLFxyXG4gICAgICBhcGlfa2V5X2VuY3J5cHRlZDogYXBpS2V5RW5jcnlwdGVkLFxyXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgIH0pXHJcbiAgICAuZXEoJ2lkJywgY2FycmllcklkKVxyXG4gICAgLnNlbGVjdCgpXHJcbiAgICAuc2luZ2xlKCk7XHJcblxyXG4gIGlmIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEFwaUVycm9yKCdFcnJvciBhbCBhY3R1YWxpemFyIHRyYW5zcG9ydGlzdGEnLCA1MDAsICdEQVRBQkFTRV9FUlJPUicsIGVycm9yKTtcclxuICB9XHJcblxyXG4gIC8vIExvZyBkZSBhdWRpdG9yw61hXHJcbiAgYXdhaXQgbG9nQWRtaW5BY3Rpb24oc2Vzc2lvbi51c2VyLmlkLCAnVVBEQVRFJywgJ2NhcnJpZXInLCBjYXJyaWVyLmlkLCBleGlzdGluZ0NhcnJpZXIsIGNhcnJpZXIpO1xyXG5cclxuICBjb25zdCByZXNwb25zZTogQ2FycmllclJlc3BvbnNlID0ge1xyXG4gICAgZGF0YToge1xyXG4gICAgICAuLi5jYXJyaWVyLFxyXG4gICAgICBhcGlfa2V5X2VuY3J5cHRlZDogY2Fycmllci5hcGlfa2V5X2VuY3J5cHRlZCA/ICcqKipFTkNSWVBURUQqKionIDogbnVsbFxyXG4gICAgfSxcclxuICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICBtZXNzYWdlOiAnVHJhbnNwb3J0aXN0YSBhY3R1YWxpemFkbyBleGl0b3NhbWVudGUnXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlSGFuZGxlcihyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIC8vIFZhbGlkYXIgYXV0ZW50aWNhY2nDs25cclxuICBjb25zdCBhdXRoRXJyb3IgPSBhd2FpdCB2YWxpZGF0ZUFkbWluQXV0aChyZXF1ZXN0KTtcclxuICBpZiAoYXV0aEVycm9yKSB7cmV0dXJuIGF1dGhFcnJvcjt9XHJcblxyXG4gIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBhdXRoKCk7XHJcbiAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gIGNvbnN0IGNhcnJpZXJJZCA9IHNlYXJjaFBhcmFtcy5nZXQoJ2lkJyk7XHJcblxyXG4gIGlmICghY2FycmllcklkKSB7XHJcbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJRCBkZWwgdHJhbnNwb3J0aXN0YSBlcyByZXF1ZXJpZG8nKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KCk7XHJcblxyXG4gIC8vIFZlcmlmaWNhciBxdWUgZWwgdHJhbnNwb3J0aXN0YSBleGlzdGVcclxuICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nQ2FycmllciwgZXJyb3I6IGZldGNoRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnY291cmllcnMnKVxyXG4gICAgLnNlbGVjdCgnKicpXHJcbiAgICAuZXEoJ2lkJywgY2FycmllcklkKVxyXG4gICAgLnNpbmdsZSgpO1xyXG5cclxuICBpZiAoZmV0Y2hFcnJvciB8fCAhZXhpc3RpbmdDYXJyaWVyKSB7XHJcbiAgICB0aHJvdyBuZXcgTm90Rm91bmRFcnJvcignVHJhbnNwb3J0aXN0YSBubyBlbmNvbnRyYWRvJyk7XHJcbiAgfVxyXG5cclxuICAvLyBWZXJpZmljYXIgcXVlIG5vIHRlbmdhIGVudsOtb3MgYWN0aXZvc1xyXG4gIGNvbnN0IHsgZGF0YTogYWN0aXZlU2hpcG1lbnRzLCBlcnJvcjogc2hpcG1lbnRzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnc2hpcG1lbnRzJylcclxuICAgIC5zZWxlY3QoJ2lkJylcclxuICAgIC5lcSgnY2Fycmllcl9pZCcsIGNhcnJpZXJJZClcclxuICAgIC5pbignc3RhdHVzJywgWydwZW5kaW5nJywgJ2NvbmZpcm1lZCcsICdwaWNrZWRfdXAnLCAnaW5fdHJhbnNpdCcsICdvdXRfZm9yX2RlbGl2ZXJ5J10pO1xyXG5cclxuICBpZiAoc2hpcG1lbnRzRXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBBcGlFcnJvcignRXJyb3IgYWwgdmVyaWZpY2FyIGVudsOtb3MgYWN0aXZvcycsIDUwMCwgJ0RBVEFCQVNFX0VSUk9SJywgc2hpcG1lbnRzRXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGFjdGl2ZVNoaXBtZW50cyAmJiBhY3RpdmVTaGlwbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignTm8gc2UgcHVlZGUgZWxpbWluYXIgdW4gdHJhbnNwb3J0aXN0YSBjb24gZW52w61vcyBhY3Rpdm9zJyk7XHJcbiAgfVxyXG5cclxuICAvLyBFbGltaW5hciB0cmFuc3BvcnRpc3RhIChzb2Z0IGRlbGV0ZSAtIG1hcmNhciBjb21vIGluYWN0aXZvKVxyXG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAuZnJvbSgnY291cmllcnMnKVxyXG4gICAgLnVwZGF0ZSh7XHJcbiAgICAgIGlzX2FjdGl2ZTogZmFsc2UsXHJcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgfSlcclxuICAgIC5lcSgnaWQnLCBjYXJyaWVySWQpO1xyXG5cclxuICBpZiAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBBcGlFcnJvcignRXJyb3IgYWwgZWxpbWluYXIgdHJhbnNwb3J0aXN0YScsIDUwMCwgJ0RBVEFCQVNFX0VSUk9SJywgZXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIGRlIGF1ZGl0b3LDrWFcclxuICBhd2FpdCBsb2dBZG1pbkFjdGlvbihzZXNzaW9uLnVzZXIuaWQsICdERUxFVEUnLCAnY2FycmllcicsIGNhcnJpZXJJZCwgZXhpc3RpbmdDYXJyaWVyLCBudWxsKTtcclxuXHJcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICBtZXNzYWdlOiAnVHJhbnNwb3J0aXN0YSBlbGltaW5hZG8gZXhpdG9zYW1lbnRlJ1xyXG4gIH0pO1xyXG59XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBFWFBPUlRTIENPTiBNSURETEVXQVJFU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IEdFVCA9IGNvbXBvc2VNaWRkbGV3YXJlcyhcclxuICB3aXRoRXJyb3JIYW5kbGVyLFxyXG4gIHdpdGhBcGlMb2dnaW5nXHJcbikoZ2V0SGFuZGxlcik7XHJcblxyXG5leHBvcnQgY29uc3QgUE9TVCA9IGNvbXBvc2VNaWRkbGV3YXJlcyhcclxuICB3aXRoRXJyb3JIYW5kbGVyLFxyXG4gIHdpdGhBcGlMb2dnaW5nXHJcbikocG9zdEhhbmRsZXIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBVVCA9IGNvbXBvc2VNaWRkbGV3YXJlcyhcclxuICB3aXRoRXJyb3JIYW5kbGVyLFxyXG4gIHdpdGhBcGlMb2dnaW5nXHJcbikocHV0SGFuZGxlcik7XHJcblxyXG5leHBvcnQgY29uc3QgREVMRVRFID0gY29tcG9zZU1pZGRsZXdhcmVzKFxyXG4gIHdpdGhFcnJvckhhbmRsZXIsXHJcbiAgd2l0aEFwaUxvZ2dpbmdcclxuKShkZWxldGVIYW5kbGVyKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQStZYTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFlQUMsT0FBQTtJQUFBO0lBQUFILGFBQUEsR0FBQUksQ0FBQTtJQUFBSixhQUFBLEdB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