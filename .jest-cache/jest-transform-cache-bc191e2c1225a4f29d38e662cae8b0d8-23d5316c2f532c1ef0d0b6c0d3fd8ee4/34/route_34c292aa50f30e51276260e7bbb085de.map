{"version":3,"names":["cov_qjbyb75va","actualCoverage","s","GET","f","POST","runtime","checkAdminPermissionsForProducts","action","request","_adminauth","checkCRUDPermissions","getHandler","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","legacyAuthResult","supabase","user","searchParams","URL","url","statusParam","get","rawParams","page","limit","search","undefined","category_id","is_active","price_min","price_max","sort_by","sort_order","filters","_adminschemas","ProductFiltersSchema","parse","query","from","select","count","ilike","eq","gte","lte","order","ascending","to","range","data","products","console","transformedProducts","map","product","category_name","categories","name","total","totalPages","Math","ceil","pageSize","sort","by","_zod","z","ZodError","details","errors","postHandler","productData","validatedBody","category","categoryError","single","insert","created_at","Date","toISOString","updated_at","transformedProduct","logAdminAction","id","message","timestamp","postHandlerSimple","log","allowed","body","JSON","stringify","requiredFields","field","description","short_description","price","parseFloat","discounted_price","compare_price","cost_price","stock","parseInt","low_stock_threshold","track_inventory","allow_backorders","slug","toLowerCase","replace","trim","now","Error","supabaseAdmin","Promise","resolve","then","_interop_require_wildcard","require","length"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { checkCRUDPermissions, logAdminAction, getRequestInfo } from '@/lib/auth/admin-auth';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { withCriticalValidation } from '@/lib/validation/enterprise-validation-middleware';\r\nimport {\r\n  EnterpriseProductSchema,\r\n  EnterpriseProductFiltersSchema,\r\n  EnterprisePaginationSchema\r\n} from '@/lib/validation/enterprise-schemas';\r\nimport { ProductFiltersSchema } from '@/lib/validation/admin-schemas';\r\nimport type { ValidatedRequest } from '@/lib/validation/enterprise-validation-middleware';\r\n\r\n// Helper function to check admin permissions with proper role verification\r\nasync function checkAdminPermissionsForProducts(action: 'create' | 'read' | 'update' | 'delete', request?: NextRequest) {\r\n  return await checkCRUDPermissions(action, 'products');\r\n}\r\n\r\n/**\r\n * GET /api/admin/products\r\n * Obtener lista paginada de productos con filtros (ENTERPRISE)\r\n */\r\nconst getHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // ENTERPRISE: Verificar autenticación con contexto completo\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'products_read']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // LEGACY: Mantener compatibilidad con sistema anterior\r\n    const legacyAuthResult = await checkAdminPermissionsForProducts('read', request);\r\n    if (!legacyAuthResult.success) {\r\n      return NextResponse.json(\r\n        { error: legacyAuthResult.error },\r\n        { status: legacyAuthResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n\r\n    // Parse query parameters - let schema handle type conversion\r\n    const statusParam = searchParams.get('status');\r\n    \r\n    const rawParams = {\r\n      page: searchParams.get('page') || '1',\r\n      limit: searchParams.get('limit') || searchParams.get('pageSize') || '20',\r\n      search: searchParams.get('search') || undefined,\r\n      category_id: searchParams.get('category') || undefined,\r\n      is_active: statusParam ? statusParam === 'active' : undefined,\r\n      price_min: searchParams.get('priceMin') || undefined,\r\n      price_max: searchParams.get('priceMax') || undefined,\r\n      sort_by: searchParams.get('sortBy') || 'created_at',\r\n      sort_order: (searchParams.get('sortOrder') as 'asc' | 'desc') || 'desc'\r\n    };\r\n\r\n    const filters = ProductFiltersSchema.parse(rawParams);\r\n\r\n    // Build query\r\n    let query = supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        description,\r\n        price,\r\n        stock,\r\n        category_id,\r\n        images,\r\n        created_at,\r\n        updated_at,\r\n        categories (\r\n          id,\r\n          name\r\n        )\r\n      `, { count: 'exact' });\r\n\r\n    // Apply filters\r\n    if (filters.search) {\r\n      query = query.ilike('name', `%${filters.search}%`);\r\n    }\r\n    if (filters.category_id) {\r\n      query = query.eq('category_id', filters.category_id);\r\n    }\r\n    if (filters.is_active !== undefined) {\r\n      query = query.eq('is_active', filters.is_active);\r\n    }\r\n    if (filters.price_min !== undefined) {\r\n      query = query.gte('price', filters.price_min);\r\n    }\r\n    if (filters.price_max !== undefined) {\r\n      query = query.lte('price', filters.price_max);\r\n    }\r\n\r\n    // Apply sorting\r\n    query = query.order(filters.sort_by, { ascending: filters.sort_order === 'asc' });\r\n\r\n    // Apply pagination\r\n    const from = (filters.page - 1) * filters.limit;\r\n    const to = from + filters.limit - 1;\r\n    query = query.range(from, to);\r\n\r\n    const { data: products, error, count } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error fetching products:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener productos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Transform data to include category name\r\n    const transformedProducts = products?.map(product => ({\r\n      ...product,\r\n      category_name: product.categories?.name || null,\r\n      categories: undefined, // Remove nested object\r\n    })) || [];\r\n\r\n    const total = count || 0;\r\n    const totalPages = Math.ceil(total / filters.limit);\r\n\r\n    return NextResponse.json({\r\n      data: transformedProducts,\r\n      total,\r\n      page: filters.page,\r\n      pageSize: filters.limit,\r\n      totalPages,\r\n      filters,\r\n      sort: {\r\n        by: filters.sort_by,\r\n        order: filters.sort_order,\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/admin/products:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parámetros inválidos', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/products\r\n * Crear nuevo producto (ENTERPRISE)\r\n */\r\nconst postHandler = async (request: ValidatedRequest) => {\r\n  try {\r\n    // ENTERPRISE: Verificar autenticación con contexto completo\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'products_create']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // LEGACY: Mantener compatibilidad con sistema anterior\r\n    const legacyAuthResult = await checkAdminPermissionsForProducts('create');\r\n    if (!legacyAuthResult.success) {\r\n      return NextResponse.json(\r\n        { error: legacyAuthResult.error },\r\n        { status: legacyAuthResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = legacyAuthResult;\r\n\r\n    // ENTERPRISE: Usar datos ya validados por middleware\r\n    const productData = request.validatedBody;\r\n\r\n    if (!productData) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Datos de validación no encontrados',\r\n          code: 'VALIDATION_DATA_MISSING',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify category exists\r\n    const { data: category, error: categoryError } = await supabase\r\n      .from('categories')\r\n      .select('id')\r\n      .eq('id', productData.category_id)\r\n      .single();\r\n\r\n    if (categoryError || !category) {\r\n      return NextResponse.json(\r\n        { error: 'Categoría no encontrada' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create product\r\n    const { data: product, error } = await supabase\r\n      .from('products')\r\n      .insert({\r\n        ...productData,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .select(`\r\n        id,\r\n        name,\r\n        description,\r\n        price,\r\n        stock,\r\n        category_id,\r\n        images,\r\n        created_at,\r\n        updated_at,\r\n        categories (\r\n          id,\r\n          name\r\n        )\r\n      `)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating product:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear producto' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Transform response\r\n    const transformedProduct = {\r\n      ...product,\r\n      category_name: product.categories?.name || null,\r\n      categories: undefined,\r\n    };\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'CREATE',\r\n      'product',\r\n      product.id,\r\n      null,\r\n      transformedProduct\r\n    );\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Producto creado exitosamente',\r\n        data: transformedProduct\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error in POST /api/admin/products:', error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * POST SIMPLIFICADO /api/admin/products\r\n * Crear nuevo producto SIN validaciones enterprise complejas\r\n */\r\nconst postHandlerSimple = async (request: NextRequest) => {\r\n  try {\r\n    console.log('🔧 Products API: Creating product (SIMPLE MODE)...');\r\n\r\n    // Verificar autenticación básica\r\n    const authResult = await checkCRUDPermissions('create', 'products');\r\n\r\n    if (!authResult.allowed) {\r\n      console.log('❌ Auth failed:', authResult.error);\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error || 'Autenticación requerida',\r\n          code: 'AUTH_ERROR'\r\n        },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    console.log('✅ Auth successful');\r\n    const { supabase, user } = authResult;\r\n\r\n    const body = await request.json();\r\n    console.log('📝 Request body:', JSON.stringify(body, null, 2));\r\n\r\n    // Validación básica de campos requeridos\r\n    const requiredFields = ['name', 'price'];\r\n    for (const field of requiredFields) {\r\n      if (!body[field]) {\r\n        return NextResponse.json(\r\n          {\r\n            error: `Campo requerido: ${field}`,\r\n            code: 'MISSING_FIELD'\r\n          },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Mapear datos del frontend al formato de base de datos\r\n    const productData = {\r\n      name: body.name,\r\n      description: body.description || '',\r\n      short_description: body.short_description || '',\r\n      price: parseFloat(body.price),\r\n      discounted_price: body.compare_price ? parseFloat(body.compare_price) : null,\r\n      cost_price: body.cost_price ? parseFloat(body.cost_price) : null,\r\n      stock: parseInt(body.stock) || 0,\r\n      low_stock_threshold: parseInt(body.low_stock_threshold) || 5,\r\n      category_id: body.category_id ? parseInt(body.category_id) : null,\r\n      status: body.status || 'draft',\r\n      is_active: body.status === 'active',\r\n      track_inventory: body.track_inventory !== false,\r\n      allow_backorders: body.allow_backorders === true,\r\n      // Generar slug automático\r\n      slug: body.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9\\s-]/g, '')\r\n        .replace(/\\s+/g, '-')\r\n        .replace(/-+/g, '-')\r\n        .trim() + '-' + Date.now(),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    console.log('🔄 Mapped product data:', JSON.stringify(productData, null, 2));\r\n\r\n    // Verificar categoría si se proporciona\r\n    if (productData.category_id) {\r\n      const { data: category, error: categoryError } = await supabase\r\n        .from('categories')\r\n        .select('id')\r\n        .eq('id', productData.category_id)\r\n        .single();\r\n\r\n      if (categoryError || !category) {\r\n        console.log('❌ Category not found:', categoryError);\r\n        return NextResponse.json(\r\n          {\r\n            error: 'Categoría no encontrada',\r\n            code: 'CATEGORY_NOT_FOUND'\r\n          },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Crear producto\r\n    const { data: product, error } = await supabase\r\n      .from('products')\r\n      .insert(productData)\r\n      .select(`\r\n        id,\r\n        name,\r\n        description,\r\n        price,\r\n        stock,\r\n        category_id,\r\n        status,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('❌ Error creating product:', error);\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Error al crear producto',\r\n          code: 'DATABASE_ERROR',\r\n          details: error.message\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('✅ Product created successfully:', product);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        message: 'Producto creado exitosamente',\r\n        data: product\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error in POST /api/admin/products (SIMPLE):', error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// USAR VERSIÓN SIMPLIFICADA TEMPORALMENTE PARA DEBUG\r\nexport const GET = async (request: NextRequest) => {\r\n  try {\r\n    console.log('🔍 GET /api/admin/products - Starting request');\r\n    \r\n    // Simple auth check\r\n    const authResult = await checkAdminPermissionsForProducts('read');\r\n    if (!authResult.allowed) {\r\n      console.log('❌ Auth failed:', authResult.error);\r\n      return NextResponse.json(\r\n        { error: authResult.error || 'Acceso denegado' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Get supabase instance\r\n    const { supabaseAdmin } = await import('@/lib/supabase');\r\n    const supabase = supabaseAdmin;\r\n    console.log('✅ Auth successful, querying products...');\r\n\r\n    // Simple query without complex filters\r\n    const { data: products, error, count } = await supabase\r\n      .from('products')\r\n      .select(`\r\n        *,\r\n        categories!inner(name)\r\n      `, { count: 'exact' })\r\n      .eq('is_active', true)\r\n      .order('created_at', { ascending: false })\r\n      .limit(20);\r\n\r\n    if (error) {\r\n      console.error('❌ Database error:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener productos', details: error.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('✅ Products fetched:', products?.length || 0, 'total:', count);\r\n\r\n    // Transform data\r\n    const transformedProducts = products?.map(product => ({\r\n      ...product,\r\n      category_name: product.categories?.name || null,\r\n      categories: undefined,\r\n    })) || [];\r\n\r\n    return NextResponse.json({\r\n      data: transformedProducts,\r\n      total: count || 0,\r\n      page: 1,\r\n      pageSize: 20,\r\n      totalPages: Math.ceil((count || 0) / 20),\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error in GET /api/admin/products:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor', details: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// USAR VERSIÓN SIMPLIFICADA TEMPORALMENTE\r\nexport const POST = postHandlerSimple;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}