{"version":3,"names":["cov_1gyl8z81ds","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","message","create","NotificationFiltersSchema","_zod","z","object","type","enum","optional","status","priority","recipient_type","date_from","string","date_to","search","page","coerce","number","min","default","limit","max","sort_by","sort_order","CreateNotificationSchema","title","recipient_ids","array","action_url","url","action_label","expires_at","datetime","metadata","record","any","BulkActionSchema","action","notification_ids","validateAdminAuth","session","_config","auth","user","b","error","data","profile","from","select","eq","id","single","role","userId","getNotifications","filters","query","gte","lte","or","count","head","offset","order","ascending","range","Error","notifications","total","totalPages","Math","ceil","createNotification","notificationData","createdBy","insert","created_by","length","individualNotifications","map","recipientId","recipient_id","performBulkAction","notificationIds","updateData","deleteError","delete","in","affected","update","updated_at","Date","toISOString","getNotificationStats","stats","not","summary","unread","filter","n","by_type","info","warning","success","by_priority","low","medium","high","urgent","request","startTime","now","rateLimitResult","_ratelimiter","checkRateLimit","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","searchParams","URL","parse","get","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","pagination","nextResponse","_logger","logger","log","LogLevel","ERROR","LogCategory","API","body","validationResult","safeParse","result","notification"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\notifications\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { checkRateLimit, addRateLimitHeaders } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nconst RATE_LIMIT_CONFIGS = {\r\n  admin: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    maxRequests: 100,\r\n    message: 'Demasiadas solicitudes administrativas'\r\n  },\r\n  create: {\r\n    windowMs: 60 * 1000, // 1 minuto\r\n    maxRequests: 10,\r\n    message: 'Demasiadas notificaciones creadas'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// ===================================\r\nconst NotificationFiltersSchema = z.object({\r\n  type: z.enum(['info', 'warning', 'error', 'success']).optional(),\r\n  status: z.enum(['read', 'unread', 'archived']).optional(),\r\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).optional(),\r\n  recipient_type: z.enum(['user', 'admin', 'all']).optional(),\r\n  date_from: z.string().optional(),\r\n  date_to: z.string().optional(),\r\n  search: z.string().optional(),\r\n  page: z.coerce.number().min(1).default(1),\r\n  limit: z.coerce.number().min(1).max(100).default(20),\r\n  sort_by: z.enum(['created_at', 'updated_at', 'priority', 'type']).default('created_at'),\r\n  sort_order: z.enum(['asc', 'desc']).default('desc')\r\n});\r\n\r\nconst CreateNotificationSchema = z.object({\r\n  title: z.string().min(1).max(200),\r\n  message: z.string().min(1).max(1000),\r\n  type: z.enum(['info', 'warning', 'error', 'success']),\r\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).default('medium'),\r\n  recipient_type: z.enum(['user', 'admin', 'all']),\r\n  recipient_ids: z.array(z.string()).optional(),\r\n  action_url: z.string().url().optional(),\r\n  action_label: z.string().max(50).optional(),\r\n  expires_at: z.string().datetime().optional(),\r\n  metadata: z.record(z.any()).optional()\r\n});\r\n\r\nconst BulkActionSchema = z.object({\r\n  action: z.enum(['mark_read', 'mark_unread', 'archive', 'delete']),\r\n  notification_ids: z.array(z.string()).min(1)\r\n});\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  pagination?: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\ninterface NotificationData {\r\n  id: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'warning' | 'error' | 'success';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  status: 'read' | 'unread' | 'archived';\r\n  recipient_type: 'user' | 'admin' | 'all';\r\n  recipient_id?: string;\r\n  action_url?: string;\r\n  action_label?: string;\r\n  expires_at?: string;\r\n  metadata?: Record<string, any>;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\nasync function validateAdminAuth() {\r\n  const session = await auth();\r\n  \r\n  if (!session?.user) {\r\n    return { error: 'No autorizado', status: 401 };\r\n  }\r\n\r\n  // Verificar rol de administrador\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', session.user.id)\r\n    .single();\r\n\r\n  if (profile?.role !== 'admin') {\r\n    return { error: 'Acceso denegado', status: 403 };\r\n  }\r\n\r\n  return { userId: session.user.id };\r\n}\r\n\r\nasync function getNotifications(filters: z.infer<typeof NotificationFiltersSchema>) {\r\n  let query = supabase\r\n    .from('notifications')\r\n    .select(`\r\n      *,\r\n      recipient:profiles!notifications_recipient_id_fkey(\r\n        id,\r\n        email,\r\n        full_name\r\n      ),\r\n      creator:profiles!notifications_created_by_fkey(\r\n        id,\r\n        email,\r\n        full_name\r\n      )\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (filters.type) {\r\n    query = query.eq('type', filters.type);\r\n  }\r\n\r\n  if (filters.status) {\r\n    query = query.eq('status', filters.status);\r\n  }\r\n\r\n  if (filters.priority) {\r\n    query = query.eq('priority', filters.priority);\r\n  }\r\n\r\n  if (filters.recipient_type) {\r\n    query = query.eq('recipient_type', filters.recipient_type);\r\n  }\r\n\r\n  if (filters.date_from) {\r\n    query = query.gte('created_at', filters.date_from);\r\n  }\r\n\r\n  if (filters.date_to) {\r\n    query = query.lte('created_at', filters.date_to);\r\n  }\r\n\r\n  if (filters.search) {\r\n    query = query.or(`title.ilike.%${filters.search}%,message.ilike.%${filters.search}%`);\r\n  }\r\n\r\n  // Contar total\r\n  const { count } = await query.select('*', { count: 'exact', head: true });\r\n\r\n  // Aplicar paginación y ordenamiento\r\n  const offset = (filters.page - 1) * filters.limit;\r\n  query = query\r\n    .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\r\n    .range(offset, offset + filters.limit - 1);\r\n\r\n  const { data, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener notificaciones: ${error.message}`);\r\n  }\r\n\r\n  return {\r\n    notifications: data || [],\r\n    total: count || 0,\r\n    totalPages: Math.ceil((count || 0) / filters.limit)\r\n  };\r\n}\r\n\r\nasync function createNotification(\r\n  notificationData: z.infer<typeof CreateNotificationSchema>,\r\n  createdBy: string\r\n) {\r\n  const { data, error } = await supabase\r\n    .from('notifications')\r\n    .insert({\r\n      ...notificationData,\r\n      created_by: createdBy,\r\n      status: 'unread'\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new Error(`Error al crear notificación: ${error.message}`);\r\n  }\r\n\r\n  // Si es para usuarios específicos, crear registros individuales\r\n  if (notificationData.recipient_ids && notificationData.recipient_ids.length > 0) {\r\n    const individualNotifications = notificationData.recipient_ids.map(recipientId => ({\r\n      ...notificationData,\r\n      recipient_id: recipientId,\r\n      recipient_type: 'user' as const,\r\n      created_by: createdBy,\r\n      status: 'unread' as const\r\n    }));\r\n\r\n    await supabase\r\n      .from('notifications')\r\n      .insert(individualNotifications);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nasync function performBulkAction(\r\n  action: string,\r\n  notificationIds: string[],\r\n  userId: string\r\n) {\r\n  let updateData: Partial<NotificationData> = {};\r\n\r\n  switch (action) {\r\n    case 'mark_read':\r\n      updateData = { status: 'read' };\r\n      break;\r\n    case 'mark_unread':\r\n      updateData = { status: 'unread' };\r\n      break;\r\n    case 'archive':\r\n      updateData = { status: 'archived' };\r\n      break;\r\n    case 'delete':\r\n      const { error: deleteError } = await supabase\r\n        .from('notifications')\r\n        .delete()\r\n        .in('id', notificationIds);\r\n      \r\n      if (deleteError) {\r\n        throw new Error(`Error al eliminar notificaciones: ${deleteError.message}`);\r\n      }\r\n      \r\n      return { affected: notificationIds.length };\r\n  }\r\n\r\n  const { data, error } = await supabase\r\n    .from('notifications')\r\n    .update({\r\n      ...updateData,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .in('id', notificationIds)\r\n    .select();\r\n\r\n  if (error) {\r\n    throw new Error(`Error en acción masiva: ${error.message}`);\r\n  }\r\n\r\n  return { affected: data?.length || 0 };\r\n}\r\n\r\nasync function getNotificationStats() {\r\n  const { data: stats, error } = await supabase\r\n    .from('notifications')\r\n    .select('type, status, priority')\r\n    .not('status', 'eq', 'archived');\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener estadísticas: ${error.message}`);\r\n  }\r\n\r\n  const summary = {\r\n    total: stats.length,\r\n    unread: stats.filter(n => n.status === 'unread').length,\r\n    by_type: {\r\n      info: stats.filter(n => n.type === 'info').length,\r\n      warning: stats.filter(n => n.type === 'warning').length,\r\n      error: stats.filter(n => n.type === 'error').length,\r\n      success: stats.filter(n => n.type === 'success').length\r\n    },\r\n    by_priority: {\r\n      low: stats.filter(n => n.priority === 'low').length,\r\n      medium: stats.filter(n => n.priority === 'medium').length,\r\n      high: stats.filter(n => n.priority === 'high').length,\r\n      urgent: stats.filter(n => n.priority === 'urgent').length\r\n    }\r\n  };\r\n\r\n  return summary;\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener notificaciones\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message\r\n      },\r\n      'admin-notifications'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Parsear parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const filters = NotificationFiltersSchema.parse({\r\n      type: searchParams.get('type'),\r\n      status: searchParams.get('status'),\r\n      priority: searchParams.get('priority'),\r\n      recipient_type: searchParams.get('recipient_type'),\r\n      date_from: searchParams.get('date_from'),\r\n      date_to: searchParams.get('date_to'),\r\n      search: searchParams.get('search'),\r\n      page: searchParams.get('page'),\r\n      limit: searchParams.get('limit'),\r\n      sort_by: searchParams.get('sort_by'),\r\n      sort_order: searchParams.get('sort_order')\r\n    });\r\n\r\n    // Obtener notificaciones\r\n    const { notifications, total, totalPages } = await getNotifications(filters);\r\n\r\n    // Obtener estadísticas si se solicita\r\n    let stats = null;\r\n    if (searchParams.get('include_stats') === 'true') {\r\n      stats = await getNotificationStats();\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/notifications',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<NotificationData[]> = {\r\n      data: notifications,\r\n      success: true,\r\n      message: 'Notificaciones obtenidas exitosamente',\r\n      pagination: {\r\n        page: filters.page,\r\n        limit: filters.limit,\r\n        total,\r\n        totalPages\r\n      },\r\n      ...(stats && { stats })\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/notifications', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/notifications',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Crear notificación o acción masiva\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.create.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.create.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.create.message\r\n      },\r\n      'admin-notifications-create'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n\r\n    // Determinar si es acción masiva o creación\r\n    if (action === 'bulk') {\r\n      // Validar datos para acción masiva\r\n      const validationResult = BulkActionSchema.safeParse(body);\r\n      if (!validationResult.success) {\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Datos de acción masiva inválidos',\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n\r\n      // Ejecutar acción masiva\r\n      const result = await performBulkAction(\r\n        validationResult.data.action,\r\n        validationResult.data.notification_ids,\r\n        authResult.userId!\r\n      );\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/notifications',\r\n        method: 'POST',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<typeof result> = {\r\n        data: result,\r\n        success: true,\r\n        message: `Acción ${validationResult.data.action} ejecutada en ${result.affected} notificaciones`\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    } else {\r\n      // Validar datos para crear notificación\r\n      const validationResult = CreateNotificationSchema.safeParse(body);\r\n      if (!validationResult.success) {\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Datos de notificación inválidos',\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n\r\n      // Crear notificación\r\n      const notification = await createNotification(\r\n        validationResult.data,\r\n        authResult.userId!\r\n      );\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/notifications',\r\n        method: 'POST',\r\n        statusCode: 201,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<NotificationData> = {\r\n        data: notification,\r\n        success: true,\r\n        message: 'Notificación creada exitosamente'\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response, { status: 201 });\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/notifications', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/notifications',\r\n      method: 'POST',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}