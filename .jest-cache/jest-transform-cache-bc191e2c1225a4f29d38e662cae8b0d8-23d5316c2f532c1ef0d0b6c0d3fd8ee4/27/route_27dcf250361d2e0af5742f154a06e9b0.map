{"version":3,"names":["cov_33lsxch8r","actualCoverage","s","GET","f","runtime","DASHBOARD_RATE_LIMITS","dashboard","requests","window","DashboardFiltersSchema","_zod","z","object","period","enum","optional","default","timezone","string","include_comparisons","boolean","metrics","array","validateAdminAuth","process","env","NODE_ENV","b","_logger","logger","log","LogLevel","WARN","LogCategory","AUTH","userId","email","session","_config","auth","user","Error","data","profile","error","_supabase","supabaseAdmin","from","select","eq","single","role","id","ERROR","getDashboardMetrics","now","Date","startDate","previousStartDate","getFullYear","getMonth","getDate","getTime","ordersData","gte","toISOString","previousOrdersData","lt","productsData","customersData","categoriesData","currentRevenue","reduce","sum","order","total","previousRevenue","revenueGrowth","totalOrders","length","averageOrderValue","totalProducts","activeProducts","filter","p","is_active","lowStockProducts","stock_quantity","outOfStockProducts","totalCustomers","newCustomers","c","created_at","ordersByStatus","acc","status","dailySales","date","split","amount","orders","recentOrders","sort","a","slice","map","customer_name","overview","total_revenue","total_orders","total_customers","total_products","conversion_rate","average_order_value","sales","current_period","previous_period","growth_percentage","daily_sales","Object","values","pending","processing","shipped","delivered","cancelled","recent_orders","customers","new_this_period","active_customers","Math","floor","top_customers","products","active","low_stock","out_of_stock","top_selling","inventory","total_value","price","low_stock_alerts","categories_count","average_stock_level","performance","page_load_time","api_response_time","error_rate","uptime_percentage","DATABASE","logAuditAction","adminUserId","action","details","insert","user_id","resource_type","ip_address","user_agent","AUDIT","request","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","admin","securityLogger","_securitylogger","createSecurityLogger","startTime","logApiAccess","context","authResult","_apitimeouts","withTimeout","ENDPOINT_TIMEOUTS","searchParams","URL","url","validationResult","safeParse","get","undefined","success","_server","NextResponse","json","errors","responseTime","_metrics","metricsCollector","recordApiCall","logAdminAction","response","metadata","timestamp","cache_duration","logApiError","endpoint","method","API","message","stack","includes"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\dashboard\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN DASHBOARD API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\nimport { withTimeout, ENDPOINT_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DE RATE LIMITING\r\n// ===================================\r\n\r\nconst DASHBOARD_RATE_LIMITS = {\r\n  dashboard: { requests: 30, window: 60 * 1000 }, // 30 requests per minute\r\n};\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst DashboardFiltersSchema = z.object({\r\n  period: z.enum(['today', '7days', '30days', '90days', 'year']).optional().default('30days'),\r\n  timezone: z.string().optional().default('America/Argentina/Buenos_Aires'),\r\n  include_comparisons: z.boolean().optional().default(true),\r\n  metrics: z.array(z.enum([\r\n    'sales', 'orders', 'customers', 'products', 'categories', \r\n    'inventory', 'revenue', 'conversion', 'traffic', 'performance'\r\n  ])).optional()\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface DashboardMetrics {\r\n  overview: {\r\n    total_revenue: number;\r\n    total_orders: number;\r\n    total_customers: number;\r\n    total_products: number;\r\n    conversion_rate: number;\r\n    average_order_value: number;\r\n  };\r\n  sales: {\r\n    current_period: number;\r\n    previous_period: number;\r\n    growth_percentage: number;\r\n    daily_sales: Array<{ date: string; amount: number; orders: number }>;\r\n  };\r\n  orders: {\r\n    total: number;\r\n    pending: number;\r\n    processing: number;\r\n    shipped: number;\r\n    delivered: number;\r\n    cancelled: number;\r\n    recent_orders: Array<{\r\n      id: string;\r\n      customer_name: string;\r\n      total: number;\r\n      status: string;\r\n      created_at: string;\r\n    }>;\r\n  };\r\n  customers: {\r\n    total: number;\r\n    new_this_period: number;\r\n    active_customers: number;\r\n    top_customers: Array<{\r\n      id: string;\r\n      name: string;\r\n      email: string;\r\n      total_orders: number;\r\n      total_spent: number;\r\n    }>;\r\n  };\r\n  products: {\r\n    total: number;\r\n    active: number;\r\n    low_stock: number;\r\n    out_of_stock: number;\r\n    top_selling: Array<{\r\n      id: string;\r\n      name: string;\r\n      sales_count: number;\r\n      revenue: number;\r\n    }>;\r\n  };\r\n  inventory: {\r\n    total_value: number;\r\n    low_stock_alerts: number;\r\n    categories_count: number;\r\n    average_stock_level: number;\r\n  };\r\n  performance: {\r\n    page_load_time: number;\r\n    api_response_time: number;\r\n    error_rate: number;\r\n    uptime_percentage: number;\r\n  };\r\n}\r\n\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n  message?: string;\r\n  metadata?: {\r\n    timestamp: string;\r\n    period: string;\r\n    timezone: string;\r\n    cache_duration?: number;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // En desarrollo, permitir acceso sin autenticación\r\n    if (process.env.NODE_ENV === 'development') {\r\n      logger.log(LogLevel.WARN, LogCategory.AUTH, 'Admin auth bypassed in development mode');\r\n      return { userId: 'dev-admin', email: 'dev@admin.com' };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user?.email) {\r\n      throw new Error('No authenticated session found');\r\n    }\r\n\r\n    // Verificar si el usuario es admin\r\n    const { data: profile, error } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('role, permissions')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (error || !profile) {\r\n      throw new Error('User profile not found');\r\n    }\r\n\r\n    if (profile.role !== 'admin' && profile.role !== 'super_admin') {\r\n      throw new Error('Insufficient permissions');\r\n    }\r\n\r\n    return { userId: session.user.id, email: session.user.email };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Admin authentication failed', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getDashboardMetrics(period: string, timezone: string): Promise<DashboardMetrics> {\r\n  try {\r\n    const now = new Date();\r\n    let startDate: Date;\r\n    let previousStartDate: Date;\r\n\r\n    // Calcular fechas según el período\r\n    switch (period) {\r\n      case 'today':\r\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n        previousStartDate = new Date(startDate.getTime() - 24 * 60 * 60 * 1000);\r\n        break;\r\n      case '7days':\r\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        previousStartDate = new Date(startDate.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n        break;\r\n      case '30days':\r\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n        previousStartDate = new Date(startDate.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n        break;\r\n      case '90days':\r\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\r\n        previousStartDate = new Date(startDate.getTime() - 90 * 24 * 60 * 60 * 1000);\r\n        break;\r\n      case 'year':\r\n        startDate = new Date(now.getFullYear(), 0, 1);\r\n        previousStartDate = new Date(now.getFullYear() - 1, 0, 1);\r\n        break;\r\n      default:\r\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n        previousStartDate = new Date(startDate.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n    }\r\n\r\n    // Obtener métricas de órdenes\r\n    const { data: ordersData } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, total, status, created_at, customer_id')\r\n      .gte('created_at', startDate.toISOString());\r\n\r\n    const { data: previousOrdersData } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('total')\r\n      .gte('created_at', previousStartDate.toISOString())\r\n      .lt('created_at', startDate.toISOString());\r\n\r\n    // Obtener métricas de productos\r\n    const { data: productsData } = await supabaseAdmin\r\n      .from('products')\r\n      .select('id, name, price, stock_quantity, is_active');\r\n\r\n    // Obtener métricas de clientes\r\n    const { data: customersData } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id, full_name, email, created_at')\r\n      .eq('role', 'customer');\r\n\r\n    // Obtener categorías\r\n    const { data: categoriesData } = await supabaseAdmin\r\n      .from('categories')\r\n      .select('id')\r\n      .eq('is_active', true);\r\n\r\n    // Calcular métricas\r\n    const currentRevenue = ordersData?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n    const previousRevenue = previousOrdersData?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n    const revenueGrowth = previousRevenue > 0 ? ((currentRevenue - previousRevenue) / previousRevenue) * 100 : 0;\r\n\r\n    const totalOrders = ordersData?.length || 0;\r\n    const averageOrderValue = totalOrders > 0 ? currentRevenue / totalOrders : 0;\r\n\r\n    const totalProducts = productsData?.length || 0;\r\n    const activeProducts = productsData?.filter(p => p.is_active)?.length || 0;\r\n    const lowStockProducts = productsData?.filter(p => (p.stock_quantity || 0) < 10)?.length || 0;\r\n    const outOfStockProducts = productsData?.filter(p => (p.stock_quantity || 0) === 0)?.length || 0;\r\n\r\n    const totalCustomers = customersData?.length || 0;\r\n    const newCustomers = customersData?.filter(c => \r\n      new Date(c.created_at) >= startDate\r\n    )?.length || 0;\r\n\r\n    // Agrupar órdenes por estado\r\n    const ordersByStatus = ordersData?.reduce((acc, order) => {\r\n      acc[order.status] = (acc[order.status] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>) || {};\r\n\r\n    // Ventas diarias\r\n    const dailySales = ordersData?.reduce((acc, order) => {\r\n      const date = new Date(order.created_at).toISOString().split('T')[0];\r\n      if (!acc[date]) {\r\n        acc[date] = { date, amount: 0, orders: 0 };\r\n      }\r\n      acc[date].amount += order.total || 0;\r\n      acc[date].orders += 1;\r\n      return acc;\r\n    }, {} as Record<string, { date: string; amount: number; orders: number }>) || {};\r\n\r\n    // Órdenes recientes\r\n    const recentOrders = ordersData\r\n      ?.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n      ?.slice(0, 10)\r\n      ?.map(order => ({\r\n        id: order.id,\r\n        customer_name: 'Cliente', // Se podría obtener del perfil\r\n        total: order.total || 0,\r\n        status: order.status,\r\n        created_at: order.created_at\r\n      })) || [];\r\n\r\n    const metrics: DashboardMetrics = {\r\n      overview: {\r\n        total_revenue: currentRevenue,\r\n        total_orders: totalOrders,\r\n        total_customers: totalCustomers,\r\n        total_products: totalProducts,\r\n        conversion_rate: 2.5, // Placeholder - se calcularía con datos de tráfico\r\n        average_order_value: averageOrderValue\r\n      },\r\n      sales: {\r\n        current_period: currentRevenue,\r\n        previous_period: previousRevenue,\r\n        growth_percentage: revenueGrowth,\r\n        daily_sales: Object.values(dailySales)\r\n      },\r\n      orders: {\r\n        total: totalOrders,\r\n        pending: ordersByStatus['pending'] || 0,\r\n        processing: ordersByStatus['processing'] || 0,\r\n        shipped: ordersByStatus['shipped'] || 0,\r\n        delivered: ordersByStatus['delivered'] || 0,\r\n        cancelled: ordersByStatus['cancelled'] || 0,\r\n        recent_orders: recentOrders\r\n      },\r\n      customers: {\r\n        total: totalCustomers,\r\n        new_this_period: newCustomers,\r\n        active_customers: Math.floor(totalCustomers * 0.3), // Placeholder\r\n        top_customers: [] // Se podría calcular con datos de órdenes\r\n      },\r\n      products: {\r\n        total: totalProducts,\r\n        active: activeProducts,\r\n        low_stock: lowStockProducts,\r\n        out_of_stock: outOfStockProducts,\r\n        top_selling: [] // Se podría calcular con datos de ventas\r\n      },\r\n      inventory: {\r\n        total_value: productsData?.reduce((sum, p) => sum + ((p.price || 0) * (p.stock_quantity || 0)), 0) || 0,\r\n        low_stock_alerts: lowStockProducts,\r\n        categories_count: categoriesData?.length || 0,\r\n        average_stock_level: totalProducts > 0 ? \r\n          (productsData?.reduce((sum, p) => sum + (p.stock_quantity || 0), 0) || 0) / totalProducts : 0\r\n      },\r\n      performance: {\r\n        page_load_time: 1.2, // Placeholder - se obtendría de métricas reales\r\n        api_response_time: 0.3, // Placeholder\r\n        error_rate: 0.1, // Placeholder\r\n        uptime_percentage: 99.9 // Placeholder\r\n      }\r\n    };\r\n\r\n    return metrics;\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error getting dashboard metrics', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function logAuditAction(adminUserId: string, action: string, details?: any) {\r\n  try {\r\n    await supabaseAdmin\r\n      .from('audit_logs')\r\n      .insert({\r\n        user_id: adminUserId,\r\n        action,\r\n        resource_type: 'dashboard',\r\n        details: details || {},\r\n        ip_address: '127.0.0.1', // Se obtendría del request\r\n        user_agent: 'Admin Dashboard'\r\n      });\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUDIT, 'Error logging audit action', { error });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// HANDLERS DE LA API\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs administrativos\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.admin,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n      const startTime = Date.now();\r\n      let adminUserId = '';\r\n\r\n      try {\r\n        // Log del acceso al dashboard administrativo\r\n        securityLogger.logApiAccess(securityLogger.context, 'admin/dashboard', 'read');\r\n\r\n        // Autenticación con timeout\r\n        const authResult = await withTimeout(\r\n          () => validateAdminAuth(),\r\n          ENDPOINT_TIMEOUTS['/api/admin']?.request || 30000,\r\n          'Validación de autenticación de admin'\r\n        );\r\n        adminUserId = authResult.userId;\r\n\r\n        // Validar parámetros\r\n        const { searchParams } = new URL(request.url);\r\n        const validationResult = DashboardFiltersSchema.safeParse({\r\n          period: searchParams.get('period'),\r\n          timezone: searchParams.get('timezone'),\r\n          include_comparisons: searchParams.get('include_comparisons') === 'true',\r\n          metrics: searchParams.get('metrics')?.split(',') || undefined\r\n        });\r\n\r\n        if (!validationResult.success) {\r\n          return NextResponse.json(\r\n            {\r\n              success: false,\r\n              error: 'Invalid parameters',\r\n              details: validationResult.error.errors\r\n            },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const { period, timezone, include_comparisons } = validationResult.data;\r\n\r\n        // Obtener métricas del dashboard con timeout\r\n        const metrics = await withTimeout(\r\n          () => getDashboardMetrics(period, timezone),\r\n          ENDPOINT_TIMEOUTS['/api/admin']?.request || 30000,\r\n          'Obtención de métricas del dashboard'\r\n        );\r\n\r\n        // Métricas de rendimiento\r\n        const responseTime = Date.now() - startTime;\r\n        metricsCollector.recordApiCall('admin_dashboard_get', responseTime, 'success');\r\n\r\n        // Log de seguridad para acceso exitoso\r\n        securityLogger.logAdminAction(securityLogger.context, 'dashboard_view', {\r\n          period,\r\n          timezone,\r\n          include_comparisons,\r\n          responseTime\r\n        });\r\n\r\n        // Audit log\r\n        await logAuditAction(adminUserId, 'dashboard_view', {\r\n          period,\r\n          timezone,\r\n          include_comparisons\r\n        });\r\n\r\n        const response: ApiResponse<DashboardMetrics> = {\r\n          success: true,\r\n          data: metrics,\r\n          metadata: {\r\n            timestamp: new Date().toISOString(),\r\n            period,\r\n            timezone,\r\n            cache_duration: 300 // 5 minutos\r\n          }\r\n        };\r\n\r\n        return NextResponse.json(response);\r\n\r\n      } catch (error) {\r\n        const responseTime = Date.now() - startTime;\r\n        metricsCollector.recordApiCall('admin_dashboard_get', responseTime, 'error');\r\n\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/admin/dashboard',\r\n          method: 'GET',\r\n          adminUserId,\r\n          responseTime\r\n        });\r\n\r\n        logger.log(LogLevel.ERROR, LogCategory.API, 'Dashboard API error', {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n          adminUserId,\r\n          stack: error instanceof Error ? error.stack : undefined\r\n        });\r\n\r\n        if (error instanceof Error && error.message.includes('authentication')) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Authentication required' },\r\n            { status: 401 }\r\n          );\r\n        }\r\n\r\n        if (error instanceof Error && error.message.includes('permissions')) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Insufficient permissions' },\r\n            { status: 403 }\r\n          );\r\n        }\r\n\r\n        return NextResponse.json(\r\n          { success: false, error: 'Internal server error' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}