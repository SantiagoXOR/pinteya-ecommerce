{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\examples\\centralized-mocks-example.test.ts"],"sourcesContent":["// ===================================\r\n// EJEMPLO DE USO DE MOCKS CENTRALIZADOS - PINTEYA E-COMMERCE\r\n// ===================================\r\n\r\n/**\r\n * Test de ejemplo que demuestra el uso de los mocks centralizados\r\n * Este archivo sirve como referencia para futuros tests\r\n */\r\n\r\nimport { renderHook, waitFor } from '@testing-library/react'\r\nimport { useProducts } from '@/hooks/useProducts'\r\nimport { setupApiMocks, mockApiResponses, mockConfigurations } from '../__mocks__/api-mocks'\r\nimport { createMockUseProducts, mockUseProductsState } from '../__mocks__/hooks-mocks'\r\n\r\ndescribe('Ejemplo de Mocks Centralizados', () => {\r\n  // Setup de mocks usando helper centralizado\r\n  const { mockFetch, resetMocks, mockSuccess, mockError, mockHttpError } = setupApiMocks()\r\n\r\n  beforeEach(() => {\r\n    resetMocks()\r\n  })\r\n\r\n  describe('API Mocks Centralizados', () => {\r\n    it('debe usar respuesta exitosa por defecto', async () => {\r\n      // El mock ya está configurado con respuesta exitosa por defecto\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.products).toHaveLength(3) // mockProducts tiene 3 items\r\n      expect(result.current.error).toBeNull()\r\n    })\r\n\r\n    it('debe manejar errores usando helper mockError', async () => {\r\n      mockError('Network connection failed')\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.error).toBe('Error obteniendo productos')\r\n      expect(result.current.products).toEqual([])\r\n    })\r\n\r\n    it('debe manejar errores HTTP usando helper mockHttpError', async () => {\r\n      mockHttpError(500, 'Internal Server Error')\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.error).toBe('Error obteniendo productos')\r\n      expect(result.current.products).toEqual([])\r\n    })\r\n\r\n    it('debe usar respuestas predefinidas', async () => {\r\n      // Usar respuesta vacía predefinida\r\n      mockSuccess(mockApiResponses.products.empty)\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.products).toEqual([])\r\n      expect(result.current.pagination.total).toBe(0)\r\n    })\r\n\r\n    it('debe usar configuraciones mock comunes', async () => {\r\n      // Usar configuración de error 404\r\n      mockFetch.mockResolvedValueOnce(mockConfigurations.notFound())\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.error).toBe('Error obteniendo productos')\r\n    })\r\n  })\r\n\r\n  describe('Hook Mocks Centralizados', () => {\r\n    it('debe crear mock de useProducts con estado por defecto', () => {\r\n      const mockHook = createMockUseProducts()\r\n\r\n      expect(mockHook.products).toHaveLength(3)\r\n      expect(mockHook.loading).toBe(false)\r\n      expect(mockHook.error).toBeNull()\r\n      expect(mockHook.hasProducts).toBe(true)\r\n      expect(typeof mockHook.fetchProducts).toBe('function')\r\n    })\r\n\r\n    it('debe crear mock de useProducts con estado personalizado', () => {\r\n      const mockHook = createMockUseProducts(mockUseProductsState.loading)\r\n\r\n      expect(mockHook.products).toEqual([])\r\n      expect(mockHook.loading).toBe(true)\r\n      expect(mockHook.error).toBeNull()\r\n      expect(mockHook.hasProducts).toBe(false)\r\n    })\r\n\r\n    it('debe crear mock de useProducts con estado de error', () => {\r\n      const mockHook = createMockUseProducts(mockUseProductsState.error)\r\n\r\n      expect(mockHook.products).toEqual([])\r\n      expect(mockHook.loading).toBe(false)\r\n      expect(mockHook.error).toBe('Error obteniendo productos')\r\n      expect(mockHook.hasError).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('Ventajas de Mocks Centralizados', () => {\r\n    it('debe proporcionar datos consistentes entre tests', async () => {\r\n      // Primer test\r\n      const { result: result1 } = renderHook(() => useProducts())\r\n      await waitFor(() => expect(result1.current.loading).toBe(false))\r\n\r\n      // Segundo test con reset\r\n      resetMocks()\r\n      const { result: result2 } = renderHook(() => useProducts())\r\n      await waitFor(() => expect(result2.current.loading).toBe(false))\r\n\r\n      // Ambos deben tener los mismos datos mock\r\n      expect(result1.current.products).toEqual(result2.current.products)\r\n    })\r\n\r\n    it('debe facilitar testing de casos edge', async () => {\r\n      // Caso: respuesta con delay para testing de loading states\r\n      mockFetch.mockResolvedValueOnce(\r\n        mockConfigurations.delayed(mockApiResponses.products.success, 100)\r\n      )\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      // Inicialmente debe estar cargando\r\n      expect(result.current.loading).toBe(true)\r\n\r\n      // Después del delay debe tener datos\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n\r\n      expect(result.current.products).toHaveLength(3)\r\n    })\r\n\r\n    it('debe permitir testing de múltiples llamadas API', async () => {\r\n      // Primera llamada: éxito\r\n      mockSuccess(mockApiResponses.products.success)\r\n      \r\n      // Segunda llamada: error\r\n      mockError('Second call failed')\r\n\r\n      const { result } = renderHook(() => useProducts())\r\n\r\n      // Primera llamada exitosa\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n      expect(result.current.products).toHaveLength(3)\r\n\r\n      // Simular segunda llamada (ej: refresh)\r\n      result.current.fetchProducts()\r\n\r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false)\r\n      })\r\n      expect(result.current.error).toBe('Error obteniendo productos')\r\n    })\r\n  })\r\n\r\n  describe('Reutilización de Mocks', () => {\r\n    it('debe reutilizar mocks entre diferentes hooks', () => {\r\n      // Los mismos datos mock pueden usarse para diferentes hooks\r\n      const productsData = mockApiResponses.products.success.data\r\n      \r\n      expect(productsData).toHaveLength(3)\r\n      expect(productsData[0]).toHaveProperty('name')\r\n      expect(productsData[0]).toHaveProperty('price')\r\n      expect(productsData[0]).toHaveProperty('category')\r\n    })\r\n\r\n    it('debe mantener estructura consistente de respuestas', () => {\r\n      const responses = [\r\n        mockApiResponses.products.success,\r\n        mockApiResponses.products.empty,\r\n        mockApiResponses.products.error\r\n      ]\r\n\r\n      responses.forEach(response => {\r\n        expect(response).toHaveProperty('success')\r\n        expect(response).toHaveProperty('data')\r\n        expect(response).toHaveProperty('pagination')\r\n      })\r\n    })\r\n  })\r\n})\r\n\r\n// ===================================\r\n// DOCUMENTACIÓN DE MEJORES PRÁCTICAS\r\n// ===================================\r\n\r\n/**\r\n * MEJORES PRÁCTICAS PARA USAR MOCKS CENTRALIZADOS:\r\n * \r\n * 1. SETUP CONSISTENTE:\r\n *    - Usar setupApiMocks() en beforeEach\r\n *    - Llamar resetMocks() para limpiar estado\r\n * \r\n * 2. HELPERS ESPECÍFICOS:\r\n *    - mockSuccess() para respuestas exitosas\r\n *    - mockError() para errores de red\r\n *    - mockHttpError() para errores HTTP específicos\r\n * \r\n * 3. DATOS REALISTAS:\r\n *    - Usar mockApiResponses.* para datos predefinidos\r\n *    - Mantener estructura consistente con API real\r\n * \r\n * 4. CASOS EDGE:\r\n *    - Usar mockConfigurations.* para casos especiales\r\n *    - Testing de loading states con delayed responses\r\n * \r\n * 5. REUTILIZACIÓN:\r\n *    - Importar mocks desde archivos centralizados\r\n *    - Evitar duplicar datos mock en cada test\r\n * \r\n * 6. MANTENIMIENTO:\r\n *    - Actualizar mocks cuando cambie la API\r\n *    - Mantener sincronizados con tipos TypeScript\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["describe","mockFetch","resetMocks","mockSuccess","mockError","mockHttpError","setupApiMocks","beforeEach","it","result","renderHook","useProducts","waitFor","expect","current","loading","toBe","products","toHaveLength","error","toBeNull","toEqual","mockApiResponses","empty","pagination","total","mockResolvedValueOnce","mockConfigurations","notFound","mockHook","createMockUseProducts","hasProducts","fetchProducts","mockUseProductsState","hasError","result1","result2","delayed","success","productsData","data","toHaveProperty","responses","forEach","response"],"mappings":"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"}