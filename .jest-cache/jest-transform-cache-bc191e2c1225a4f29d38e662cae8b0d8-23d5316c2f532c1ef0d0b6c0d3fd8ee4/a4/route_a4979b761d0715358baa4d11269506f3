2d4a5cb99a2ee10defafdab672da8f82
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1agt1x6ihh() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\optimize-route\\route.ts";
  var hash = "bb9e82d470d67679167a9f138cd3ec32f5d70af9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\optimize-route\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 20
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 54
        }
      },
      "8": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "10": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "13": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 41
        }
      },
      "14": {
        start: {
          line: 35,
          column: 54
        },
        end: {
          line: 35,
          column: 58
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "17": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 90
        }
      },
      "20": {
        start: {
          line: 52,
          column: 35
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "21": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 57,
          column: 17
        }
      },
      "22": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 65
        }
      },
      "23": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 45
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "25": {
        start: {
          line: 63,
          column: 71
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "26": {
        start: {
          line: 84,
          column: 26
        },
        end: {
          line: 84,
          column: 67
        }
      },
      "27": {
        start: {
          line: 84,
          column: 44
        },
        end: {
          line: 84,
          column: 56
        }
      },
      "28": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 64
        }
      },
      "29": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 70
        }
      },
      "30": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 87,
          column: 93
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 57
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 67
        }
      },
      "33": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 82
        }
      },
      "34": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 79
        }
      },
      "35": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 57
        }
      },
      "36": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 55
        }
      },
      "37": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "38": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 61
        }
      },
      "39": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "40": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 64
        }
      },
      "41": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "42": {
        start: {
          line: 101,
          column: 31
        },
        end: {
          line: 101,
          column: 52
        }
      },
      "43": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 73
        }
      },
      "45": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 74
        }
      },
      "46": {
        start: {
          line: 106,
          column: 35
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "47": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "48": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 65
        }
      },
      "49": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 45
        }
      },
      "50": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "51": {
        start: {
          line: 117,
          column: 71
        },
        end: {
          line: 124,
          column: 25
        }
      },
      "52": {
        start: {
          line: 138,
          column: 22
        },
        end: {
          line: 138,
          column: 46
        }
      },
      "53": {
        start: {
          line: 139,
          column: 30
        },
        end: {
          line: 139,
          column: 76
        }
      },
      "54": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "55": {
        start: {
          line: 142,
          column: 25
        },
        end: {
          line: 142,
          column: 37
        }
      },
      "56": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 44
        }
      },
      "57": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "58": {
        start: {
          line: 158,
          column: 30
        },
        end: {
          line: 158,
          column: 95
        }
      },
      "59": {
        start: {
          line: 158,
          column: 60
        },
        end: {
          line: 158,
          column: 84
        }
      },
      "60": {
        start: {
          line: 159,
          column: 30
        },
        end: {
          line: 159,
          column: 93
        }
      },
      "61": {
        start: {
          line: 159,
          column: 60
        },
        end: {
          line: 159,
          column: 84
        }
      },
      "62": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "63": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "64": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 29
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 20
          }
        },
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 59,
            column: 13
          }
        },
        line: 54
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 63,
            column: 55
          },
          end: {
            line: 63,
            column: 56
          }
        },
        loc: {
          start: {
            line: 63,
            column: 71
          },
          end: {
            line: 70,
            column: 25
          }
        },
        line: 63
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 36
          },
          end: {
            line: 84,
            column: 37
          }
        },
        loc: {
          start: {
            line: 84,
            column: 44
          },
          end: {
            line: 84,
            column: 56
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 108,
            column: 20
          }
        },
        loc: {
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 113,
            column: 13
          }
        },
        line: 108
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 117,
            column: 55
          },
          end: {
            line: 117,
            column: 56
          }
        },
        loc: {
          start: {
            line: 117,
            column: 71
          },
          end: {
            line: 124,
            column: 25
          }
        },
        line: 117
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 141,
            column: 49
          },
          end: {
            line: 141,
            column: 50
          }
        },
        loc: {
          start: {
            line: 141,
            column: 68
          },
          end: {
            line: 156,
            column: 9
          }
        },
        line: 141
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 158,
            column: 48
          },
          end: {
            line: 158,
            column: 49
          }
        },
        loc: {
          start: {
            line: 158,
            column: 60
          },
          end: {
            line: 158,
            column: 84
          }
        },
        line: 158
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 159,
            column: 48
          },
          end: {
            line: 159,
            column: 49
          }
        },
        loc: {
          start: {
            line: 159,
            column: 60
          },
          end: {
            line: 159,
            column: 84
          }
        },
        line: 159
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 18
          }
        }, {
          start: {
            line: 36,
            column: 22
          },
          end: {
            line: 36,
            column: 40
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 44,
            column: 42
          }
        }, {
          start: {
            line: 44,
            column: 46
          },
          end: {
            line: 47,
            column: 9
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 56,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 56,
            column: 38
          }
        }, {
          start: {
            line: 56,
            column: 42
          },
          end: {
            line: 56,
            column: 43
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 56,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 56,
            column: 58
          }
        }, {
          start: {
            line: 56,
            column: 62
          },
          end: {
            line: 56,
            column: 63
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 60
          }
        }, {
          start: {
            line: 86,
            column: 64
          },
          end: {
            line: 86,
            column: 70
          }
        }],
        line: 86
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "12": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "13": {
        loc: {
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 110,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 110,
            column: 38
          }
        }, {
          start: {
            line: 110,
            column: 42
          },
          end: {
            line: 110,
            column: 43
          }
        }],
        line: 110
      },
      "14": {
        loc: {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 110,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 110,
            column: 58
          }
        }, {
          start: {
            line: 110,
            column: 62
          },
          end: {
            line: 110,
            column: 63
          }
        }],
        line: 110
      },
      "15": {
        loc: {
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 139,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 139,
            column: 70
          }
        }, {
          start: {
            line: 139,
            column: 74
          },
          end: {
            line: 139,
            column: 76
          }
        }],
        line: 139
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\optimize-route\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para optimizar rutas de entrega usando Google Maps\r\n * POST /api/driver/optimize-route\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\ninterface DeliveryStop {\r\n  orderId: number;\r\n  address: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  priority?: number;\r\n  estimatedDuration?: number;\r\n}\r\n\r\ninterface OptimizeRouteRequest {\r\n  stops: DeliveryStop[];\r\n  startLocation?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  preferences?: {\r\n    optimizeFor: 'time' | 'distance' | 'fuel';\r\n    avoidTolls: boolean;\r\n    avoidHighways: boolean;\r\n  };\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body: OptimizeRouteRequest = await request.json();\r\n    const { stops, startLocation, preferences } = body;\r\n\r\n    if (!stops || stops.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Se requieren paradas para optimizar la ruta' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Configuraci\xF3n por defecto para C\xF3rdoba, Argentina\r\n    const defaultStart = startLocation || {\r\n      lat: -31.4201,\r\n      lng: -64.1888\r\n    };\r\n\r\n    // Si no tenemos Google Maps API key, usar algoritmo simple\r\n    if (!process.env.GOOGLE_MAPS_API_KEY) {\r\n      console.warn('Google Maps API key not configured, using simple optimization');\r\n      \r\n      // Algoritmo simple: ordenar por prioridad y luego por orden de creaci\xF3n\r\n      const optimizedStops = [...stops].sort((a, b) => {\r\n        if (a.priority !== b.priority) {\r\n          return (a.priority || 0) - (b.priority || 0);\r\n        }\r\n        return a.orderId - b.orderId;\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          optimizedRoute: optimizedStops.map((stop, index) => ({\r\n            ...stop,\r\n            sequence: index + 1,\r\n            estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),\r\n            estimatedDuration: 30,\r\n            distanceFromPrevious: 5.0,\r\n            durationFromPrevious: 15\r\n          })),\r\n          summary: {\r\n            totalDistance: stops.length * 5.0,\r\n            totalDuration: stops.length * 30,\r\n            totalStops: stops.length,\r\n            estimatedStartTime: new Date().toISOString(),\r\n            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),\r\n            optimizationMethod: 'simple'\r\n          },\r\n          startLocation: defaultStart\r\n        }\r\n      });\r\n    }\r\n\r\n    // Usar Google Maps Directions API para optimizaci\xF3n avanzada\r\n    const waypoints = stops.map(stop => stop.address).join('|');\r\n    const origin = `${defaultStart.lat},${defaultStart.lng}`;\r\n    const destination = stops[stops.length - 1]?.address || origin;\r\n\r\n    const directionsUrl = new URL('https://maps.googleapis.com/maps/api/directions/json');\r\n    directionsUrl.searchParams.set('origin', origin);\r\n    directionsUrl.searchParams.set('destination', destination);\r\n    directionsUrl.searchParams.set('waypoints', `optimize:true|${waypoints}`);\r\n    directionsUrl.searchParams.set('key', process.env.GOOGLE_MAPS_API_KEY!);\r\n    directionsUrl.searchParams.set('language', 'es');\r\n    directionsUrl.searchParams.set('region', 'AR');\r\n    \r\n    if (preferences?.avoidTolls) {\r\n      directionsUrl.searchParams.set('avoid', 'tolls');\r\n    }\r\n    if (preferences?.avoidHighways) {\r\n      directionsUrl.searchParams.set('avoid', 'highways');\r\n    }\r\n\r\n    const response = await fetch(directionsUrl.toString());\r\n    const directionsData = await response.json();\r\n\r\n    if (directionsData.status !== 'OK') {\r\n      console.warn('Google Directions API error:', directionsData);\r\n      console.warn('Falling back to simple optimization algorithm');\r\n\r\n      // Fallback al algoritmo simple si Google Maps falla\r\n      const optimizedStops = [...stops].sort((a, b) => {\r\n        if (a.priority !== b.priority) {\r\n          return (a.priority || 0) - (b.priority || 0);\r\n        }\r\n        return a.orderId - b.orderId;\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          optimizedRoute: optimizedStops.map((stop, index) => ({\r\n            ...stop,\r\n            sequence: index + 1,\r\n            estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),\r\n            estimatedDuration: 30,\r\n            distanceFromPrevious: 5.0,\r\n            durationFromPrevious: 15\r\n          })),\r\n          summary: {\r\n            totalDistance: stops.length * 5.0,\r\n            totalDuration: stops.length * 30,\r\n            totalStops: stops.length,\r\n            estimatedStartTime: new Date().toISOString(),\r\n            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),\r\n            optimizationMethod: 'simple_fallback'\r\n          },\r\n          startLocation: defaultStart\r\n        }\r\n      });\r\n    }\r\n\r\n    // Procesar respuesta de Google Maps\r\n    const route = directionsData.routes[0];\r\n    const waypointOrder = directionsData.routes[0]?.waypoint_order || [];\r\n    \r\n    // Reordenar paradas seg\xFAn la optimizaci\xF3n de Google\r\n    const optimizedStops = waypointOrder.map((index: number, sequence: number) => {\r\n      const stop = stops[index];\r\n      const leg = route.legs[sequence];\r\n      \r\n      return {\r\n        ...stop,\r\n        sequence: sequence + 1,\r\n        estimatedArrival: new Date(Date.now() + leg.duration.value * 1000).toISOString(),\r\n        estimatedDuration: Math.ceil(leg.duration.value / 60),\r\n        distanceFromPrevious: leg.distance.value / 1000,\r\n        durationFromPrevious: Math.ceil(leg.duration.value / 60),\r\n        coordinates: {\r\n          lat: leg.end_location.lat,\r\n          lng: leg.end_location.lng\r\n        }\r\n      };\r\n    });\r\n\r\n    // Calcular resumen de la ruta\r\n    const totalDistance = route.legs.reduce((sum: number, leg: any) => sum + leg.distance.value, 0) / 1000;\r\n    const totalDuration = route.legs.reduce((sum: number, leg: any) => sum + leg.duration.value, 0) / 60;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        optimizedRoute: optimizedStops,\r\n        summary: {\r\n          totalDistance: Math.round(totalDistance * 100) / 100,\r\n          totalDuration: Math.ceil(totalDuration),\r\n          totalStops: stops.length,\r\n          estimatedStartTime: new Date().toISOString(),\r\n          estimatedEndTime: new Date(Date.now() + totalDuration * 60 * 1000).toISOString(),\r\n          optimizationMethod: 'google_maps',\r\n          polyline: route.overview_polyline?.points\r\n        },\r\n        startLocation: defaultStart,\r\n        googleMapsData: {\r\n          route,\r\n          waypointOrder\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in optimize-route API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["POST", "runtime", "request", "session", "auth", "user", "email", "NextResponse", "json", "error", "status", "body", "stops", "startLocation", "preferences", "length", "defaultStart", "lat", "lng", "process", "env", "GOOGLE_MAPS_API_KEY", "console", "warn", "optimizedStops", "sort", "a", "b", "priority", "orderId", "success", "data", "optimizedRoute", "map", "stop", "index", "sequence", "estimatedArrival", "Date", "now", "toISOString", "estimatedDuration", "distanceFromPrevious", "durationFromPrevious", "summary", "totalDistance", "totalDuration", "totalStops", "estimatedStartTime", "estimatedEndTime", "optimizationMethod", "waypoints", "address", "join", "origin", "destination", "directionsUrl", "URL", "searchParams", "set", "avoidTolls", "avoidHighways", "response", "fetch", "toString", "directionsData", "route", "routes", "waypointOrder", "waypoint_order", "leg", "legs", "duration", "value", "Math", "ceil", "distance", "coordinates", "end_location", "reduce", "sum", "round", "polyline", "overview_polyline", "points", "googleMapsData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bb9e82d470d67679167a9f138cd3ec32f5d70af9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1agt1x6ihh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1agt1x6ihh();
cov_1agt1x6ihh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1agt1x6ihh().f[0]++;
  cov_1agt1x6ihh().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1agt1x6ihh().s[3]++;
_export(exports, {
  get POST() {
    /* istanbul ignore next */
    cov_1agt1x6ihh().f[1]++;
    cov_1agt1x6ihh().s[4]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1agt1x6ihh().f[2]++;
    cov_1agt1x6ihh().s[5]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1agt1x6ihh().s[6]++, require("next/server"));
const _config =
/* istanbul ignore next */
(cov_1agt1x6ihh().s[7]++, require("../../../../lib/auth/config"));
const runtime =
/* istanbul ignore next */
(cov_1agt1x6ihh().s[8]++, 'nodejs');
async function POST(request) {
  /* istanbul ignore next */
  cov_1agt1x6ihh().f[3]++;
  cov_1agt1x6ihh().s[9]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[10]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[11]++;
    if (!session?.user?.email) {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[0][0]++;
      cov_1agt1x6ihh().s[12]++;
      return _server.NextResponse.json({
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[13]++, await request.json());
    const {
      stops,
      startLocation,
      preferences
    } =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[14]++, body);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[2][0]++, !stops) ||
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[2][1]++, stops.length === 0)) {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[1][0]++;
      cov_1agt1x6ihh().s[16]++;
      return _server.NextResponse.json({
        error: 'Se requieren paradas para optimizar la ruta'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[1][1]++;
    }
    // ConfiguraciÃ³n por defecto para CÃ³rdoba, Argentina
    const defaultStart =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[17]++,
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[3][0]++, startLocation) ||
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[3][1]++, {
      lat: -31.4201,
      lng: -64.1888
    }));
    // Si no tenemos Google Maps API key, usar algoritmo simple
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[18]++;
    if (!process.env.GOOGLE_MAPS_API_KEY) {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[4][0]++;
      cov_1agt1x6ihh().s[19]++;
      console.warn('Google Maps API key not configured, using simple optimization');
      // Algoritmo simple: ordenar por prioridad y luego por orden de creaciÃ³n
      const optimizedStops =
      /* istanbul ignore next */
      (cov_1agt1x6ihh().s[20]++, [...stops].sort((a, b) => {
        /* istanbul ignore next */
        cov_1agt1x6ihh().f[4]++;
        cov_1agt1x6ihh().s[21]++;
        if (a.priority !== b.priority) {
          /* istanbul ignore next */
          cov_1agt1x6ihh().b[5][0]++;
          cov_1agt1x6ihh().s[22]++;
          return (
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[6][0]++, a.priority) ||
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[6][1]++, 0)) - (
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[7][0]++, b.priority) ||
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[7][1]++, 0));
        } else
        /* istanbul ignore next */
        {
          cov_1agt1x6ihh().b[5][1]++;
        }
        cov_1agt1x6ihh().s[23]++;
        return a.orderId - b.orderId;
      }));
      /* istanbul ignore next */
      cov_1agt1x6ihh().s[24]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          optimizedRoute: optimizedStops.map((stop, index) => {
            /* istanbul ignore next */
            cov_1agt1x6ihh().f[5]++;
            cov_1agt1x6ihh().s[25]++;
            return {
              ...stop,
              sequence: index + 1,
              estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),
              estimatedDuration: 30,
              distanceFromPrevious: 5.0,
              durationFromPrevious: 15
            };
          }),
          summary: {
            totalDistance: stops.length * 5.0,
            totalDuration: stops.length * 30,
            totalStops: stops.length,
            estimatedStartTime: new Date().toISOString(),
            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),
            optimizationMethod: 'simple'
          },
          startLocation: defaultStart
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[4][1]++;
    }
    // Usar Google Maps Directions API para optimizaciÃ³n avanzada
    const waypoints =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[26]++, stops.map(stop => {
      /* istanbul ignore next */
      cov_1agt1x6ihh().f[6]++;
      cov_1agt1x6ihh().s[27]++;
      return stop.address;
    }).join('|'));
    const origin =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[28]++, `${defaultStart.lat},${defaultStart.lng}`);
    const destination =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[29]++,
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[8][0]++, stops[stops.length - 1]?.address) ||
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[8][1]++, origin));
    const directionsUrl =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[30]++, new URL('https://maps.googleapis.com/maps/api/directions/json'));
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[31]++;
    directionsUrl.searchParams.set('origin', origin);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[32]++;
    directionsUrl.searchParams.set('destination', destination);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[33]++;
    directionsUrl.searchParams.set('waypoints', `optimize:true|${waypoints}`);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[34]++;
    directionsUrl.searchParams.set('key', process.env.GOOGLE_MAPS_API_KEY);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[35]++;
    directionsUrl.searchParams.set('language', 'es');
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[36]++;
    directionsUrl.searchParams.set('region', 'AR');
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[37]++;
    if (preferences?.avoidTolls) {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[9][0]++;
      cov_1agt1x6ihh().s[38]++;
      directionsUrl.searchParams.set('avoid', 'tolls');
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[9][1]++;
    }
    cov_1agt1x6ihh().s[39]++;
    if (preferences?.avoidHighways) {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[10][0]++;
      cov_1agt1x6ihh().s[40]++;
      directionsUrl.searchParams.set('avoid', 'highways');
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[10][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[41]++, await fetch(directionsUrl.toString()));
    const directionsData =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[42]++, await response.json());
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[43]++;
    if (directionsData.status !== 'OK') {
      /* istanbul ignore next */
      cov_1agt1x6ihh().b[11][0]++;
      cov_1agt1x6ihh().s[44]++;
      console.warn('Google Directions API error:', directionsData);
      /* istanbul ignore next */
      cov_1agt1x6ihh().s[45]++;
      console.warn('Falling back to simple optimization algorithm');
      // Fallback al algoritmo simple si Google Maps falla
      const optimizedStops =
      /* istanbul ignore next */
      (cov_1agt1x6ihh().s[46]++, [...stops].sort((a, b) => {
        /* istanbul ignore next */
        cov_1agt1x6ihh().f[7]++;
        cov_1agt1x6ihh().s[47]++;
        if (a.priority !== b.priority) {
          /* istanbul ignore next */
          cov_1agt1x6ihh().b[12][0]++;
          cov_1agt1x6ihh().s[48]++;
          return (
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[13][0]++, a.priority) ||
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[13][1]++, 0)) - (
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[14][0]++, b.priority) ||
          /* istanbul ignore next */
          (cov_1agt1x6ihh().b[14][1]++, 0));
        } else
        /* istanbul ignore next */
        {
          cov_1agt1x6ihh().b[12][1]++;
        }
        cov_1agt1x6ihh().s[49]++;
        return a.orderId - b.orderId;
      }));
      /* istanbul ignore next */
      cov_1agt1x6ihh().s[50]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          optimizedRoute: optimizedStops.map((stop, index) => {
            /* istanbul ignore next */
            cov_1agt1x6ihh().f[8]++;
            cov_1agt1x6ihh().s[51]++;
            return {
              ...stop,
              sequence: index + 1,
              estimatedArrival: new Date(Date.now() + (index + 1) * 30 * 60 * 1000).toISOString(),
              estimatedDuration: 30,
              distanceFromPrevious: 5.0,
              durationFromPrevious: 15
            };
          }),
          summary: {
            totalDistance: stops.length * 5.0,
            totalDuration: stops.length * 30,
            totalStops: stops.length,
            estimatedStartTime: new Date().toISOString(),
            estimatedEndTime: new Date(Date.now() + stops.length * 30 * 60 * 1000).toISOString(),
            optimizationMethod: 'simple_fallback'
          },
          startLocation: defaultStart
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agt1x6ihh().b[11][1]++;
    }
    // Procesar respuesta de Google Maps
    const route =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[52]++, directionsData.routes[0]);
    const waypointOrder =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[53]++,
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[15][0]++, directionsData.routes[0]?.waypoint_order) ||
    /* istanbul ignore next */
    (cov_1agt1x6ihh().b[15][1]++, []));
    // Reordenar paradas segÃºn la optimizaciÃ³n de Google
    const optimizedStops =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[54]++, waypointOrder.map((index, sequence) => {
      /* istanbul ignore next */
      cov_1agt1x6ihh().f[9]++;
      const stop =
      /* istanbul ignore next */
      (cov_1agt1x6ihh().s[55]++, stops[index]);
      const leg =
      /* istanbul ignore next */
      (cov_1agt1x6ihh().s[56]++, route.legs[sequence]);
      /* istanbul ignore next */
      cov_1agt1x6ihh().s[57]++;
      return {
        ...stop,
        sequence: sequence + 1,
        estimatedArrival: new Date(Date.now() + leg.duration.value * 1000).toISOString(),
        estimatedDuration: Math.ceil(leg.duration.value / 60),
        distanceFromPrevious: leg.distance.value / 1000,
        durationFromPrevious: Math.ceil(leg.duration.value / 60),
        coordinates: {
          lat: leg.end_location.lat,
          lng: leg.end_location.lng
        }
      };
    }));
    // Calcular resumen de la ruta
    const totalDistance =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[58]++, route.legs.reduce((sum, leg) => {
      /* istanbul ignore next */
      cov_1agt1x6ihh().f[10]++;
      cov_1agt1x6ihh().s[59]++;
      return sum + leg.distance.value;
    }, 0) / 1000);
    const totalDuration =
    /* istanbul ignore next */
    (cov_1agt1x6ihh().s[60]++, route.legs.reduce((sum, leg) => {
      /* istanbul ignore next */
      cov_1agt1x6ihh().f[11]++;
      cov_1agt1x6ihh().s[61]++;
      return sum + leg.duration.value;
    }, 0) / 60);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[62]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        optimizedRoute: optimizedStops,
        summary: {
          totalDistance: Math.round(totalDistance * 100) / 100,
          totalDuration: Math.ceil(totalDuration),
          totalStops: stops.length,
          estimatedStartTime: new Date().toISOString(),
          estimatedEndTime: new Date(Date.now() + totalDuration * 60 * 1000).toISOString(),
          optimizationMethod: 'google_maps',
          polyline: route.overview_polyline?.points
        },
        startLocation: defaultStart,
        googleMapsData: {
          route,
          waypointOrder
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[63]++;
    console.error('Error in optimize-route API:', error);
    /* istanbul ignore next */
    cov_1agt1x6ihh().s[64]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,