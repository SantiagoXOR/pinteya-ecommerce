218079e4d56798127cb70f9a1077fb21
"use strict";
// Mock Swiper CSS imports
jest.mock('swiper/css', ()=>({}));
jest.mock('swiper/css/pagination', ()=>({}));
jest.mock('swiper/css/navigation', ()=>({}));
// Mock Swiper components
jest.mock('swiper/react', ()=>({
        Swiper: ({ children, onSlideChange, onSwiper, ...props })=>{
            const mockSwiper = {
                slidePrev: jest.fn(),
                slideNext: jest.fn(),
                autoplay: {
                    start: jest.fn(),
                    stop: jest.fn()
                },
                realIndex: 0
            };
            _react.default.useEffect(()=>{
                if (onSwiper) {
                    onSwiper(mockSwiper);
                }
            }, [
                onSwiper
            ]);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "swiper",
                ...props,
                children: children
            });
        },
        SwiperSlide: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "swiper-slide",
                ...props,
                children: children
            })
    }));
jest.mock('swiper/modules', ()=>({
        Autoplay: 'Autoplay',
        Pagination: 'Pagination',
        Navigation: 'Navigation',
        Keyboard: 'Keyboard',
        A11y: 'A11y'
    }));
// Mock Next.js Image component
jest.mock('next/image', ()=>{
    return function MockImage({ src, alt, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props,
            "data-testid": "next-image"
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _HeroCarousel = /*#__PURE__*/ _interop_require_default(require("../HeroCarousel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockImages = [
    {
        src: '/images/hero/hero-01.png',
        alt: 'Imagen 1 - Productos de pinturería',
        priority: true
    },
    {
        src: '/images/hero/hero-02.png',
        alt: 'Imagen 2 - Ferretería y corralón',
        priority: false
    },
    {
        src: '/images/hero/hero-03.png',
        alt: 'Imagen 3 - Envío gratis',
        priority: false
    },
    {
        src: '/images/hero/hero-04.png',
        alt: 'Imagen 4 - Pagos seguros',
        priority: false
    }
];
describe('HeroImageCarousel', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders correctly with default props', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        expect(_react1.screen.getByRole('region')).toBeInTheDocument();
        expect(_react1.screen.getByLabelText('Carrusel de imágenes principales')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('swiper')).toBeInTheDocument();
    });
    it('renders all images correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const images = _react1.screen.getAllByTestId('next-image');
        expect(images).toHaveLength(mockImages.length);
        mockImages.forEach((image, index)=>{
            expect(images[index]).toHaveAttribute('src', image.src);
            expect(images[index]).toHaveAttribute('alt', image.alt);
        });
    });
    it('has proper ARIA attributes for accessibility', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const carousel = _react1.screen.getByRole('region');
        expect(carousel).toHaveAttribute('aria-label', 'Carrusel de imágenes principales');
        expect(carousel).toHaveAttribute('aria-live', 'polite');
        const swiper = _react1.screen.getByTestId('swiper');
        expect(swiper).toHaveAttribute('aria-label', 'Galería de imágenes de productos');
    });
    it('shows navigation buttons when enabled', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            showNavigation: true
        }));
        expect(_react1.screen.getByLabelText('Imagen anterior')).toBeInTheDocument();
        expect(_react1.screen.getByLabelText('Imagen siguiente')).toBeInTheDocument();
    });
    it('hides navigation buttons when disabled', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            showNavigation: false
        }));
        expect(_react1.screen.queryByLabelText('Imagen anterior')).not.toBeInTheDocument();
        expect(_react1.screen.queryByLabelText('Imagen siguiente')).not.toBeInTheDocument();
    });
    it('applies custom className correctly', ()=>{
        const customClass = 'custom-carousel-class';
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            className: customClass
        }));
        const carousel = _react1.screen.getByRole('region');
        expect(carousel).toHaveClass(customClass);
    });
    it('handles slide change callback', ()=>{
        const onSlideChange = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            onSlideChange: onSlideChange
        }));
        // El callback se debería llamar cuando se inicializa el swiper
        // En un entorno real, esto se activaría cuando cambie la diapositiva
        // En el mock, verificamos que el componente se renderiza correctamente
        expect(_react1.screen.getByTestId('swiper')).toBeInTheDocument();
    });
    it('supports keyboard navigation', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const carousel = _react1.screen.getByRole('region');
        // Simular navegación con teclado
        _react1.fireEvent.keyDown(document, {
            key: 'ArrowRight'
        });
        _react1.fireEvent.keyDown(document, {
            key: 'ArrowLeft'
        });
        _react1.fireEvent.keyDown(document, {
            key: 'Escape'
        });
        // Verificar que no hay errores y el componente sigue funcionando
        expect(carousel).toBeInTheDocument();
    });
    it('handles mouse enter and leave for autoplay control', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const carousel = _react1.screen.getByRole('region');
        // Simular mouse enter (debería pausar autoplay)
        _react1.fireEvent.mouseEnter(carousel);
        // Simular mouse leave (debería reanudar autoplay)
        _react1.fireEvent.mouseLeave(carousel);
        expect(carousel).toBeInTheDocument();
    });
    it('renders slide descriptions for screen readers', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        mockImages.forEach((image, index)=>{
            const description = document.getElementById(`slide-description-${index}`);
            expect(description).toBeInTheDocument();
            expect(description).toHaveTextContent(image.alt);
            expect(description).toHaveClass('sr-only');
        });
    });
    it('provides live region updates for screen readers', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const liveRegion = _react1.screen.getByText(/Imagen 1 de 4/);
        expect(liveRegion).toBeInTheDocument();
        expect(liveRegion).toHaveClass('sr-only');
    });
    it('handles empty images array gracefully', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: []
        }));
        expect(_react1.screen.getByRole('region')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('swiper')).toBeInTheDocument();
    });
    it('uses correct autoplay delay', ()=>{
        const customDelay = 3000;
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            autoplayDelay: customDelay
        }));
        // En un test real, verificaríamos que el swiper se configura con el delay correcto
        expect(_react1.screen.getByTestId('swiper')).toBeInTheDocument();
    });
    it('renders with proper slide group labels', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages
        }));
        const slides = _react1.screen.getAllByTestId('swiper-slide');
        slides.forEach((slide, index)=>{
            expect(slide).toHaveAttribute('role', 'group');
            expect(slide).toHaveAttribute('aria-label', `${index + 1} de ${mockImages.length}`);
        });
    });
    it('maintains focus management for accessibility', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HeroCarousel.default, {
            images: mockImages,
            showNavigation: true
        }));
        const prevButton = _react1.screen.getByLabelText('Imagen anterior');
        const nextButton = _react1.screen.getByLabelText('Imagen siguiente');
        expect(prevButton).toHaveAttribute('type', 'button');
        expect(nextButton).toHaveAttribute('type', 'button');
        // Verificar que los botones tienen las clases de focus correctas
        expect(prevButton).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-yellow-400');
        expect(nextButton).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-yellow-400');
    });
});

//# sourceMappingURL=data:application/json;base64,