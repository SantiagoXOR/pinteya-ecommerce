{"version":3,"names":["createQueryClient","cov_29cdhxiq16","f","s","queryClient","queryClientConfig","searchQueryConfig","searchQueryKeys","searchQueryUtils","shouldRetryError","error","networkErrors","b","code","includes","message","toLowerCase","status","defaultOptions","queries","staleTime","gcTime","retry","failureCount","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","networkMode","mutations","_reactquery","QueryClient","all","searches","search","query","suggestions","recent","trending","invalidateAll","invalidateQueries","queryKey","invalidateSearch","clearSearchCache","removeQueries","prefetchSearch","prefetchQuery","queryFn","Promise","resolve","then","_interop_require_wildcard","require","m","searchProducts"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\query-client.ts"],"sourcesContent":["// ===================================\r\n// CONFIGURACIÓN: TanStack Query Client\r\n// ===================================\r\n\r\nimport { QueryClient } from '@tanstack/react-query';\r\n\r\n// Función para detectar errores de red que deben ser reintentados\r\nfunction shouldRetryError(error: any): boolean {\r\n  // Errores de red comunes que deben ser reintentados\r\n  const networkErrors = [\r\n    'ERR_NETWORK',\r\n    'ERR_INTERNET_DISCONNECTED',\r\n    'ERR_CONNECTION_REFUSED',\r\n    'ERR_CONNECTION_RESET',\r\n    'ERR_CONNECTION_TIMED_OUT',\r\n    'ERR_ABORTED', // Incluir ERR_ABORTED para reintentos\r\n    'NETWORK_ERROR',\r\n    'TIMEOUT_ERROR'\r\n  ];\r\n\r\n  // Verificar si es un error de red\r\n  if (error?.code && networkErrors.includes(error.code)) {\r\n    return true;\r\n  }\r\n\r\n  // Verificar por mensaje de error\r\n  if (error?.message) {\r\n    const message = error.message.toLowerCase();\r\n    if (message.includes('network') ||\r\n        message.includes('fetch') ||\r\n        message.includes('aborted') ||\r\n        message.includes('timeout') ||\r\n        message.includes('connection')) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Errores HTTP 5xx (servidor) deben ser reintentados\r\n  if (error?.status >= 500) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// Configuración optimizada para e-commerce con manejo robusto de errores de red\r\nexport const queryClientConfig = {\r\n  defaultOptions: {\r\n    queries: {\r\n      // Cache por 5 minutos para datos de productos\r\n      staleTime: 5 * 60 * 1000,\r\n      // Mantener en cache por 10 minutos\r\n      gcTime: 10 * 60 * 1000,\r\n      // Retry logic inteligente con manejo de errores de red\r\n      retry: (failureCount: number, error: any) => {\r\n        // No retry para errores 4xx (cliente) excepto 408 (timeout)\r\n        if (error?.status >= 400 && error?.status < 500 && error?.status !== 408) {\r\n          return false;\r\n        }\r\n\r\n        // Retry para errores de red detectados\r\n        if (shouldRetryError(error)) {\r\n          return failureCount < 3; // Más reintentos para errores de red\r\n        }\r\n\r\n        // Máximo 2 reintentos para otros errores de servidor\r\n        return failureCount < 2;\r\n      },\r\n      // Intervalo de retry con backoff exponencial más agresivo para errores de red\r\n      retryDelay: (attemptIndex: number, error: any) => {\r\n        // Delay más corto para errores de red\r\n        if (shouldRetryError(error)) {\r\n          return Math.min(500 * 2 ** attemptIndex, 5000);\r\n        }\r\n        // Delay normal para otros errores\r\n        return Math.min(1000 * 2 ** attemptIndex, 30000);\r\n      },\r\n      // Refetch en focus para datos críticos\r\n      refetchOnWindowFocus: false,\r\n      // Refetch en reconexión\r\n      refetchOnReconnect: true,\r\n      // No refetch en mount si los datos están frescos\r\n      refetchOnMount: true,\r\n      // Configuración de red más robusta\r\n      networkMode: 'online',\r\n    },\r\n    mutations: {\r\n      // Retry para mutaciones críticas con manejo de errores de red\r\n      retry: (failureCount: number, error: any) => {\r\n        // Retry para errores de red en mutaciones\r\n        if (shouldRetryError(error)) {\r\n          return failureCount < 2;\r\n        }\r\n        // Un solo retry para otros errores\r\n        return failureCount < 1;\r\n      },\r\n      retryDelay: (attemptIndex: number, error: any) => {\r\n        // Delay más corto para errores de red en mutaciones\r\n        if (shouldRetryError(error)) {\r\n          return Math.min(300 * 2 ** attemptIndex, 3000);\r\n        }\r\n        return 1000;\r\n      },\r\n      networkMode: 'online',\r\n    },\r\n  },\r\n};\r\n\r\n// Función para crear QueryClient con configuración optimizada\r\nexport function createQueryClient() {\r\n  return new QueryClient(queryClientConfig);\r\n}\r\n\r\n// Instancia singleton para uso en la aplicación\r\nexport const queryClient = createQueryClient();\r\n\r\n// Configuración específica para búsquedas\r\nexport const searchQueryConfig = {\r\n  // Cache más agresivo para búsquedas\r\n  staleTime: 2 * 60 * 1000, // 2 minutos\r\n  gcTime: 5 * 60 * 1000,    // 5 minutos\r\n  // Retry más conservador para búsquedas\r\n  retry: 1,\r\n  retryDelay: 500,\r\n  // No refetch automático para búsquedas\r\n  refetchOnWindowFocus: false,\r\n  refetchOnReconnect: false,\r\n  refetchOnMount: false,\r\n};\r\n\r\n// Keys para queries de búsqueda\r\nexport const searchQueryKeys = {\r\n  all: ['search'] as const,\r\n  searches: () => [...searchQueryKeys.all, 'searches'] as const,\r\n  search: (query: string) => [...searchQueryKeys.searches(), query] as const,\r\n  suggestions: (query: string) => [...searchQueryKeys.all, 'suggestions', query] as const,\r\n  recent: () => [...searchQueryKeys.all, 'recent'] as const,\r\n  trending: () => [...searchQueryKeys.all, 'trending'] as const,\r\n} as const;\r\n\r\n// Utilidades para invalidación de cache\r\nexport const searchQueryUtils = {\r\n  // Invalidar todas las búsquedas\r\n  invalidateAll: () => queryClient.invalidateQueries({ queryKey: searchQueryKeys.all }),\r\n  \r\n  // Invalidar búsquedas específicas\r\n  invalidateSearch: (query: string) => \r\n    queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(query) }),\r\n  \r\n  // Limpiar cache de búsquedas\r\n  clearSearchCache: () => queryClient.removeQueries({ queryKey: searchQueryKeys.all }),\r\n  \r\n  // Prefetch de búsqueda\r\n  prefetchSearch: (query: string) => \r\n    queryClient.prefetchQuery({\r\n      queryKey: searchQueryKeys.search(query),\r\n      queryFn: () => import('@/lib/api/products').then(m => m.searchProducts(query, 6)),\r\n      ...searchQueryConfig,\r\n    }),\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}