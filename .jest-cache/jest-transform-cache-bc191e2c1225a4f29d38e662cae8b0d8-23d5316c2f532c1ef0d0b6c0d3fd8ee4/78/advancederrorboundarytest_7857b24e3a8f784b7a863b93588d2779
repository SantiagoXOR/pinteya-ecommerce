fe8a122069e628240636454790192032
/**
 * @jest-environment jsdom
 */ // ===================================
// ADVANCED ERROR BOUNDARY TESTS
// ===================================
// Tests comprehensivos para el sistema de Error Boundaries
"use strict";
// ===================================
// MOCKS
// ===================================
// Mock del Error Boundary Manager
jest.mock('@/lib/error-boundary/error-boundary-manager', ()=>({
        errorBoundaryManager: {
            reportError: jest.fn(),
            getConfig: jest.fn(()=>({
                    level: 'component',
                    enableRetry: true,
                    maxRetries: 3,
                    retryDelay: 1000,
                    enableAutoRecovery: true,
                    recoveryTimeout: 3000,
                    enableReporting: true
                })),
            getHealthStatus: jest.fn(()=>({
                    status: 'healthy',
                    errorRate: 0,
                    criticalErrors: 0,
                    recommendations: []
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _advancederrorboundary = require("../../src/lib/error-boundary/advanced-error-boundary");
const _errorboundarymanager = require("../../src/lib/error-boundary/error-boundary-manager");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de fetch
global.fetch = jest.fn();
// Mock de console para evitar logs en tests
const originalConsoleError = console.error;
const originalConsoleLog = console.log;
const originalConsoleWarn = console.warn;
beforeEach(()=>{
    console.error = jest.fn();
    console.log = jest.fn();
    console.warn = jest.fn();
    jest.clearAllMocks();
    fetch.mockClear();
});
afterEach(()=>{
    console.error = originalConsoleError;
    console.log = originalConsoleLog;
    console.warn = originalConsoleWarn;
});
// ===================================
// COMPONENTES DE PRUEBA
// ===================================
const ThrowError = ({ shouldThrow = false, errorType = 'generic' })=>{
    if (shouldThrow) {
        switch(errorType){
            case 'chunk':
                throw new Error('Loading chunk 123 failed');
            case 'network':
                throw new Error('Network request failed');
            case 'react':
                throw new Error('Cannot read property of undefined');
            default:
                throw new Error('Test error');
        }
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "working-component",
        children: "Component works!"
    });
};
const TestWrapper = ({ children, errorBoundaryProps = {} })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_advancederrorboundary.AdvancedErrorBoundary, {
        ...errorBoundaryProps,
        children: children
    });
// ===================================
// TESTS BÁSICOS
// ===================================
describe('AdvancedErrorBoundary - Funcionalidad Básica', ()=>{
    test('renderiza children cuando no hay errores', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: false
            })
        }));
        expect(_react1.screen.getByTestId('working-component')).toBeInTheDocument();
        expect(_react1.screen.getByText('Component works!')).toBeInTheDocument();
    });
    test('captura y muestra error cuando el componente falla', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.queryByTestId('working-component')).not.toBeInTheDocument();
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
        expect(_react1.screen.getByText(/intentando recuperación automática/i)).toBeInTheDocument();
    });
    test('muestra botón de reintentar cuando está habilitado', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableRetry: true
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByRole('button', {
            name: /reintentar/i
        })).toBeInTheDocument();
    });
    test('no muestra botón de reintentar cuando está deshabilitado', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableRetry: false
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.queryByRole('button', {
            name: /reintentar/i
        })).not.toBeInTheDocument();
    });
});
// ===================================
// TESTS DE CLASIFICACIÓN DE ERRORES
// ===================================
describe('AdvancedErrorBoundary - Clasificación de Errores', ()=>{
    test('clasifica correctamente errores de chunk loading', ()=>{
        const errorType = _advancederrorboundary.AdvancedErrorBoundary.classifyError(new Error('Loading chunk 123 failed'));
        expect(errorType).toBe('chunk');
    });
    test('clasifica correctamente errores de red', ()=>{
        const errorType = _advancederrorboundary.AdvancedErrorBoundary.classifyError(new Error('Network request failed'));
        expect(errorType).toBe('network');
    });
    test('clasifica correctamente errores de React', ()=>{
        const error = new Error('Cannot read property of undefined');
        error.stack = 'Error at React.Component.render';
        const errorType = _advancederrorboundary.AdvancedErrorBoundary.classifyError(error);
        expect(errorType).toBe('component');
    });
    test('clasifica errores desconocidos como unknown', ()=>{
        const errorType = _advancederrorboundary.AdvancedErrorBoundary.classifyError(new Error('Some random error'));
        expect(errorType).toBe('unknown');
    });
});
// ===================================
// TESTS DE ESTRATEGIAS DE RECUPERACIÓN
// ===================================
describe('AdvancedErrorBoundary - Estrategias de Recuperación', ()=>{
    test('determina estrategia reload para errores de chunk', ()=>{
        const strategy = _advancederrorboundary.AdvancedErrorBoundary.determineRecoveryStrategy(new Error('Loading chunk failed'), 'chunk');
        expect(strategy).toBe('reload');
    });
    test('determina estrategia retry para errores de red', ()=>{
        const strategy = _advancederrorboundary.AdvancedErrorBoundary.determineRecoveryStrategy(new Error('Network failed'), 'network');
        expect(strategy).toBe('retry');
    });
    test('determina estrategia fallback para errores de componente', ()=>{
        const strategy = _advancederrorboundary.AdvancedErrorBoundary.determineRecoveryStrategy(new Error('Component error'), 'component');
        expect(strategy).toBe('fallback');
    });
});
// ===================================
// TESTS DE REINTENTOS
// ===================================
describe('AdvancedErrorBoundary - Sistema de Reintentos', ()=>{
    beforeEach(()=>{
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    test('permite reintentar manualmente', async ()=>{
        let shouldThrow = true;
        const DynamicComponent = ()=>{
            if (shouldThrow) {
                throw new Error('Test error');
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "success",
                children: "Success!"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableRetry: true,
                maxRetries: 3
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(DynamicComponent, {})
        }));
        // Verificar que se muestra el error
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
        // Simular que el error se resuelve
        shouldThrow = false;
        // Hacer clic en reintentar
        const retryButton = _react1.screen.getByRole('button', {
            name: /reintentar/i
        });
        _react1.fireEvent.click(retryButton);
        // Verificar que el componente se recupera
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('success')).toBeInTheDocument();
        });
    });
    test('respeta el límite máximo de reintentos', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableRetry: true,
                maxRetries: 2
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        const retryButton = _react1.screen.getByRole('button', {
            name: /reintentar/i
        });
        // Primer reintento
        _react1.fireEvent.click(retryButton);
        expect(_react1.screen.getByRole('button', {
            name: /reintentar/i
        })).toBeInTheDocument();
        // Segundo reintento
        _react1.fireEvent.click(retryButton);
        expect(_react1.screen.getByRole('button', {
            name: /reintentar/i
        })).toBeInTheDocument();
        // Tercer reintento - debería alcanzar el límite
        _react1.fireEvent.click(retryButton);
    // El botón debería seguir ahí pero el comportamiento interno cambia
    // (esto requeriría acceso al estado interno para verificar completamente)
    });
    test('implementa backoff exponencial en reintentos automáticos', ()=>{
        const setTimeoutSpy = jest.spyOn(global, 'setTimeout');
        const onError = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableRetry: true,
                enableAutoRecovery: true,
                retryDelay: 1000,
                onError
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true,
                errorType: "network"
            })
        }));
        expect(onError).toHaveBeenCalled();
        // Verificar que se programa un reintento automático
        expect(setTimeoutSpy).toHaveBeenCalled();
        setTimeoutSpy.mockRestore();
    });
});
// ===================================
// TESTS DE REPORTE DE ERRORES
// ===================================
describe('AdvancedErrorBoundary - Reporte de Errores', ()=>{
    test('reporta errores al Error Boundary Manager', ()=>{
        const onError = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableReporting: true,
                onError,
                context: 'test-component'
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(onError).toHaveBeenCalled();
        // El reporte se hace en componentDidCatch, que puede ser asíncrono
        expect(onError).toHaveBeenCalledWith(expect.any(Error), expect.any(Object), expect.any(String));
    });
    test('no reporta errores cuando está deshabilitado', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableReporting: false
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_errorboundarymanager.errorBoundaryManager.reportError).not.toHaveBeenCalled();
    });
    test('envía reporte a API cuando está habilitado', async ()=>{
        fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true
                })
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableReporting: true
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        await (0, _react1.waitFor)(()=>{
            expect(fetch).toHaveBeenCalledWith('/api/monitoring/errors', expect.objectContaining({
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }));
        });
    });
});
// ===================================
// TESTS DE UI SEGÚN NIVEL
// ===================================
describe('AdvancedErrorBoundary - UI según Nivel', ()=>{
    test('muestra UI de página para level="page"', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                level: 'page'
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByText(/¡oops! algo salió mal/i)).toBeInTheDocument();
        expect(_react1.screen.getByRole('button', {
            name: /ir al inicio/i
        })).toBeInTheDocument();
        expect(_react1.screen.getByRole('button', {
            name: /recargar página/i
        })).toBeInTheDocument();
    });
    test('muestra UI de componente para level="component"', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                level: 'component'
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
        expect(_react1.screen.queryByText(/¡oops! algo salió mal/i)).not.toBeInTheDocument();
    });
    test('muestra fallback personalizado cuando se proporciona', ()=>{
        const CustomFallback = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "custom-fallback",
                children: "Custom Error UI"
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(CustomFallback, {})
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react1.screen.getByTestId('custom-fallback')).toBeInTheDocument();
        expect(_react1.screen.getByText('Custom Error UI')).toBeInTheDocument();
    });
});
// ===================================
// TESTS DE INTEGRACIÓN
// ===================================
describe('AdvancedErrorBoundary - Integración', ()=>{
    test('funciona correctamente con múltiples niveles anidados', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                level: 'page',
                context: 'page-boundary'
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                    errorBoundaryProps: {
                        level: 'section',
                        context: 'section-boundary'
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                            errorBoundaryProps: {
                                level: 'component',
                                context: 'component-boundary'
                            },
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                                shouldThrow: true
                            })
                        })
                    })
                })
            })
        }));
        // El error debería ser capturado por el boundary más cercano (component)
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
    });
    test('maneja errores asincrónicos correctamente', async ()=>{
        const AsyncComponent = ()=>{
            _react.default.useEffect(()=>{
                setTimeout(()=>{
                    throw new Error('Async error');
                }, 100);
            }, []);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Async Component"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AsyncComponent, {})
        }));
        // Los errores asincrónicos no son capturados por Error Boundaries
        // Este test verifica que el componente se renderiza normalmente
        expect(_react1.screen.getByText('Async Component')).toBeInTheDocument();
    });
});
// ===================================
// TESTS DE PERFORMANCE
// ===================================
describe('AdvancedErrorBoundary - Performance', ()=>{
    test('no afecta el rendimiento cuando no hay errores', ()=>{
        const startTime = performance.now();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: Array.from({
                    length: 100
                }, (_, i)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Item ",
                            i
                        ]
                    }, i))
            })
        }));
        const endTime = performance.now();
        const renderTime = endTime - startTime;
        // El tiempo de renderizado debería ser razonable (menos de 100ms)
        expect(renderTime).toBeLessThan(100);
    });
    test('limpia timeouts al desmontarse', ()=>{
        const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            errorBoundaryProps: {
                enableAutoRecovery: true
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        unmount();
        expect(clearTimeoutSpy).toHaveBeenCalled();
        clearTimeoutSpy.mockRestore();
    });
});
// ===================================
// TESTS DE EDGE CASES
// ===================================
describe('AdvancedErrorBoundary - Edge Cases', ()=>{
    test('maneja errores sin stack trace', ()=>{
        const errorWithoutStack = new Error('Error without stack');
        delete errorWithoutStack.stack;
        const ThrowErrorWithoutStack = ()=>{
            throw errorWithoutStack;
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowErrorWithoutStack, {})
        }));
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
    });
    test('maneja errores con mensajes muy largos', ()=>{
        const longMessage = 'A'.repeat(1000);
        const ThrowLongError = ()=>{
            throw new Error(longMessage);
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowLongError, {})
        }));
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
    });
    test('maneja múltiples errores consecutivos', ()=>{
        let errorCount = 0;
        const MultipleErrorComponent = ()=>{
            errorCount++;
            throw new Error(`Error ${errorCount}`);
        };
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MultipleErrorComponent, {})
        }));
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
        // Simular otro error
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MultipleErrorComponent, {})
        }));
        expect(_react1.screen.getByText(/error en componente/i)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,