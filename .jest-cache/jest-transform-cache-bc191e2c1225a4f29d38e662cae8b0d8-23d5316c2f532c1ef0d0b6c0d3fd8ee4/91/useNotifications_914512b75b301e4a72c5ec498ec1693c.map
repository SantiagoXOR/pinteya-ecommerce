{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useNotifications.ts"],"sourcesContent":["'use client'\n\nimport { useCallback } from 'react'\nimport { toast } from 'sonner'\nimport { EmailNotificationType } from '@/app/api/user/notifications/email/route'\n\ninterface NotificationOptions {\n  showToast?: boolean\n  sendEmail?: boolean\n  toastType?: 'success' | 'error' | 'info' | 'warning'\n  toastDuration?: number\n}\n\ninterface EmailNotificationData {\n  type: EmailNotificationType\n  oldValue?: string\n  newValue?: string\n  metadata?: Record<string, any>\n}\n\ninterface UseNotificationsReturn {\n  notifyProfileChange: (\n    message: string,\n    emailData?: EmailNotificationData,\n    options?: NotificationOptions\n  ) => Promise<void>\n  notifyAvatarChange: (message: string, options?: NotificationOptions) => Promise<void>\n  notifyAddressChange: (message: string, options?: NotificationOptions) => Promise<void>\n  notifySecurityAlert: (\n    message: string,\n    emailData?: EmailNotificationData,\n    options?: NotificationOptions\n  ) => Promise<void>\n  sendEmailNotification: (data: EmailNotificationData) => Promise<boolean>\n}\n\nexport function useNotifications(): UseNotificationsReturn {\n  // Función para enviar notificación por email\n  const sendEmailNotification = useCallback(\n    async (data: EmailNotificationData): Promise<boolean> => {\n      try {\n        const response = await fetch('/api/user/notifications/email', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        })\n\n        if (!response.ok) {\n          throw new Error('Error al enviar notificación por email')\n        }\n\n        const result = await response.json()\n        return result.success\n      } catch (error) {\n        console.error('Error al enviar notificación por email:', error)\n        return false\n      }\n    },\n    []\n  )\n\n  // Función para mostrar toast notification\n  const showToast = useCallback(\n    (\n      message: string,\n      type: 'success' | 'error' | 'info' | 'warning' = 'success',\n      duration?: number\n    ) => {\n      const toastOptions = duration ? { duration } : undefined\n\n      switch (type) {\n        case 'success':\n          toast.success(message, toastOptions)\n          break\n        case 'error':\n          toast.error(message, toastOptions)\n          break\n        case 'info':\n          toast.info(message, toastOptions)\n          break\n        case 'warning':\n          toast.warning(message, toastOptions)\n          break\n      }\n    },\n    []\n  )\n\n  // Notificar cambios de perfil\n  const notifyProfileChange = useCallback(\n    async (\n      message: string,\n      emailData?: EmailNotificationData,\n      options: NotificationOptions = {}\n    ) => {\n      const {\n        showToast: shouldShowToast = true,\n        sendEmail = false,\n        toastType = 'success',\n        toastDuration,\n      } = options\n\n      // Mostrar toast notification\n      if (shouldShowToast) {\n        showToast(message, toastType, toastDuration)\n      }\n\n      // Enviar notificación por email si es necesario\n      if (sendEmail && emailData) {\n        try {\n          const emailSent = await sendEmailNotification(emailData)\n          if (emailSent) {\n            console.log('✅ Email notification sent for profile change')\n          } else {\n            console.warn('⚠️ Failed to send email notification for profile change')\n          }\n        } catch (error) {\n          console.error('❌ Error sending email notification:', error)\n        }\n      }\n    },\n    [showToast, sendEmailNotification]\n  )\n\n  // Notificar cambios de avatar\n  const notifyAvatarChange = useCallback(\n    async (message: string, options: NotificationOptions = {}) => {\n      const { showToast: shouldShowToast = true, toastType = 'success', toastDuration } = options\n\n      if (shouldShowToast) {\n        showToast(message, toastType, toastDuration)\n      }\n    },\n    [showToast]\n  )\n\n  // Notificar cambios de direcciones\n  const notifyAddressChange = useCallback(\n    async (message: string, options: NotificationOptions = {}) => {\n      const { showToast: shouldShowToast = true, toastType = 'success', toastDuration } = options\n\n      if (shouldShowToast) {\n        showToast(message, toastType, toastDuration)\n      }\n    },\n    [showToast]\n  )\n\n  // Notificar alertas de seguridad\n  const notifySecurityAlert = useCallback(\n    async (\n      message: string,\n      emailData?: EmailNotificationData,\n      options: NotificationOptions = {}\n    ) => {\n      const {\n        showToast: shouldShowToast = true,\n        sendEmail = true, // Por defecto enviar email para alertas de seguridad\n        toastType = 'warning',\n        toastDuration = 8000, // Duración más larga para alertas\n      } = options\n\n      // Mostrar toast notification\n      if (shouldShowToast) {\n        showToast(message, toastType, toastDuration)\n      }\n\n      // Enviar notificación por email\n      if (sendEmail && emailData) {\n        try {\n          const emailSent = await sendEmailNotification(emailData)\n          if (emailSent) {\n            console.log('✅ Security alert email sent')\n          } else {\n            console.warn('⚠️ Failed to send security alert email')\n          }\n        } catch (error) {\n          console.error('❌ Error sending security alert email:', error)\n        }\n      }\n    },\n    [showToast, sendEmailNotification]\n  )\n\n  return {\n    notifyProfileChange,\n    notifyAvatarChange,\n    notifyAddressChange,\n    notifySecurityAlert,\n    sendEmailNotification,\n  }\n}\n"],"names":["useNotifications","sendEmailNotification","useCallback","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","showToast","message","type","duration","toastOptions","undefined","toast","info","warning","notifyProfileChange","emailData","options","shouldShowToast","sendEmail","toastType","toastDuration","emailSent","log","warn","notifyAvatarChange","notifyAddressChange","notifySecurityAlert"],"mappings":"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"}