aa0d87ddad723d67cff866011630935d
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2ncq6243qo() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\route.ts";
  var hash = "2fb89082045888d966c45997897a160b7c362df8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 52
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "10": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "12": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 41
        }
      },
      "13": {
        start: {
          line: 36,
          column: 49
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "18": {
        start: {
          line: 53,
          column: 43
        },
        end: {
          line: 53,
          column: 80
        }
      },
      "19": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 54,
          column: 78
        }
      },
      "20": {
        start: {
          line: 54,
          column: 60
        },
        end: {
          line: 54,
          column: 77
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 34
        }
      },
      "23": {
        start: {
          line: 60,
          column: 60
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "24": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "25": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 70
        }
      },
      "26": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 76,
          column: 19
        }
      },
      "27": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 40
        }
      },
      "28": {
        start: {
          line: 81,
          column: 42
        },
        end: {
          line: 81,
          column: 118
        }
      },
      "29": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "30": {
        start: {
          line: 84,
          column: 65
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "31": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "32": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 70
        }
      },
      "33": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "34": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "35": {
        start: {
          line: 113,
          column: 40
        },
        end: {
          line: 113,
          column: 120
        }
      },
      "36": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "37": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "38": {
        start: {
          line: 121,
          column: 62
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "39": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "40": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 71
        }
      },
      "41": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 145,
          column: 19
        }
      },
      "42": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "43": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 60
        }
      },
      "44": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "45": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 170,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 19
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 55
          },
          end: {
            line: 54,
            column: 56
          }
        },
        loc: {
          start: {
            line: 54,
            column: 60
          },
          end: {
            line: 54,
            column: 77
          }
        },
        line: 54
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 166,
            column: 15
          },
          end: {
            line: 166,
            column: 18
          }
        },
        loc: {
          start: {
            line: 166,
            column: 21
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 166
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 18
          }
        }, {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 31
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 79,
            column: 9
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 156,
            column: 9
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para crear el usuario administrador en Supabase Auth\r\n * Solo debe ejecutarse una vez para configurar el sistema\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar que se proporcione una clave de seguridad\r\n    const body = await request.json();\r\n    const { securityKey, email, password } = body;\r\n\r\n    // Clave de seguridad simple para evitar ejecuci\xF3n accidental\r\n    if (securityKey !== 'CREATE_ADMIN_PINTEYA_2025') {\r\n      return NextResponse.json(\r\n        { error: 'Clave de seguridad incorrecta' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email y contrase\xF1a son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar si el usuario ya existe en auth.users\r\n    const { data: existingAuthUser } = await supabase.auth.admin.listUsers();\r\n    const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n    let authUser;\r\n\r\n    if (userExists) {\r\n      authUser = userExists;\r\n    } else {\r\n      // Crear usuario en Supabase Auth\r\n      const { data: newAuthUser, error: authError } = await supabase.auth.admin.createUser({\r\n        email,\r\n        password,\r\n        email_confirm: true, // Confirmar email autom\xE1ticamente\r\n        user_metadata: {\r\n          first_name: 'Santiago',\r\n          last_name: 'Admin',\r\n          role: 'admin'\r\n        }\r\n      });\r\n\r\n      if (authError) {\r\n        console.error('Error creating auth user:', authError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear usuario en Auth: ' + authError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      authUser = newAuthUser.user;\r\n    }\r\n\r\n    // Verificar si el perfil ya existe\r\n    const { data: existingProfile } = await supabase\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('email', email)\r\n      .single();\r\n\r\n    if (existingProfile) {\r\n      // Actualizar el perfil existente con el supabase_user_id\r\n      const { data: updatedProfile, error: updateError } = await supabase\r\n        .from('user_profiles')\r\n        .update({\r\n          supabase_user_id: authUser.id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('email', email)\r\n        .select(`\r\n          *,\r\n          user_roles (\r\n            role_name,\r\n            permissions\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error updating profile:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al actualizar perfil: ' + updateError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Usuario administrador actualizado correctamente',\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: updatedProfile\r\n        }\r\n      });\r\n    } else {\r\n      // Crear nuevo perfil (esto no deber\xEDa pasar si ya ejecutamos el script anterior)\r\n      const { data: adminRole } = await supabase\r\n        .from('user_roles')\r\n        .select('id')\r\n        .eq('role_name', 'admin')\r\n        .single();\r\n\r\n      if (!adminRole) {\r\n        return NextResponse.json(\r\n          { error: 'Rol de admin no encontrado' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      const { data: newProfile, error: profileError } = await supabase\r\n        .from('user_profiles')\r\n        .insert({\r\n          supabase_user_id: authUser.id,\r\n          email,\r\n          first_name: 'Santiago',\r\n          last_name: 'Admin',\r\n          role_id: adminRole.id,\r\n          is_active: true,\r\n          metadata: { created_by: 'admin_setup', is_super_admin: true }\r\n        })\r\n        .select(`\r\n          *,\r\n          user_roles (\r\n            role_name,\r\n            permissions\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (profileError) {\r\n        console.error('Error creating profile:', profileError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil: ' + profileError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Usuario administrador creado correctamente',\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: newProfile\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in create-admin-user:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    message: 'Endpoint para crear usuario administrador',\r\n    instructions: 'Usar POST con securityKey, email y password'\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "supabase", "createClient", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY", "auth", "autoRefreshToken", "persistSession", "request", "body", "json", "securityKey", "email", "password", "NextResponse", "error", "status", "data", "existingAuthUser", "admin", "listUsers", "userExists", "users", "find", "u", "authUser", "newAuthUser", "authError", "createUser", "email_confirm", "user_metadata", "first_name", "last_name", "role", "console", "message", "user", "existingProfile", "from", "select", "eq", "single", "updatedProfile", "updateError", "update", "supabase_user_id", "id", "updated_at", "Date", "toISOString", "success", "auth_id", "profile", "adminRole", "newProfile", "profileError", "insert", "role_id", "is_active", "metadata", "created_by", "is_super_admin", "instructions"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2fb89082045888d966c45997897a160b7c362df8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ncq6243qo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ncq6243qo();
cov_2ncq6243qo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ncq6243qo().f[0]++;
  cov_2ncq6243qo().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ncq6243qo().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2ncq6243qo().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2ncq6243qo().f[1]++;
    cov_2ncq6243qo().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2ncq6243qo().f[2]++;
    cov_2ncq6243qo().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2ncq6243qo().f[3]++;
    cov_2ncq6243qo().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ncq6243qo().s[7]++, require("next/server"));
const _supabasejs =
/* istanbul ignore next */
(cov_2ncq6243qo().s[8]++, require("@supabase/supabase-js"));
const runtime =
/* istanbul ignore next */
(cov_2ncq6243qo().s[9]++, 'nodejs');
const supabase =
/* istanbul ignore next */
(cov_2ncq6243qo().s[10]++, (0, _supabasejs.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2ncq6243qo().f[4]++;
  cov_2ncq6243qo().s[11]++;
  try {
    // Verificar que se proporcione una clave de seguridad
    const body =
    /* istanbul ignore next */
    (cov_2ncq6243qo().s[12]++, await request.json());
    const {
      securityKey,
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_2ncq6243qo().s[13]++, body);
    // Clave de seguridad simple para evitar ejecuciÃ³n accidental
    /* istanbul ignore next */
    cov_2ncq6243qo().s[14]++;
    if (securityKey !== 'CREATE_ADMIN_PINTEYA_2025') {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[0][0]++;
      cov_2ncq6243qo().s[15]++;
      return _server.NextResponse.json({
        error: 'Clave de seguridad incorrecta'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ncq6243qo().b[0][1]++;
    }
    cov_2ncq6243qo().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_2ncq6243qo().b[2][0]++, !email) ||
    /* istanbul ignore next */
    (cov_2ncq6243qo().b[2][1]++, !password)) {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[1][0]++;
      cov_2ncq6243qo().s[17]++;
      return _server.NextResponse.json({
        error: 'Email y contraseÃ±a son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ncq6243qo().b[1][1]++;
    }
    // Verificar si el usuario ya existe en auth.users
    const {
      data: existingAuthUser
    } =
    /* istanbul ignore next */
    (cov_2ncq6243qo().s[18]++, await supabase.auth.admin.listUsers());
    const userExists =
    /* istanbul ignore next */
    (cov_2ncq6243qo().s[19]++, existingAuthUser.users.find(u => {
      /* istanbul ignore next */
      cov_2ncq6243qo().f[5]++;
      cov_2ncq6243qo().s[20]++;
      return u.email === email;
    }));
    let authUser;
    /* istanbul ignore next */
    cov_2ncq6243qo().s[21]++;
    if (userExists) {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[3][0]++;
      cov_2ncq6243qo().s[22]++;
      authUser = userExists;
    } else {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[3][1]++;
      // Crear usuario en Supabase Auth
      const {
        data: newAuthUser,
        error: authError
      } =
      /* istanbul ignore next */
      (cov_2ncq6243qo().s[23]++, await supabase.auth.admin.createUser({
        email,
        password,
        email_confirm: true,
        user_metadata: {
          first_name: 'Santiago',
          last_name: 'Admin',
          role: 'admin'
        }
      }));
      /* istanbul ignore next */
      cov_2ncq6243qo().s[24]++;
      if (authError) {
        /* istanbul ignore next */
        cov_2ncq6243qo().b[4][0]++;
        cov_2ncq6243qo().s[25]++;
        console.error('Error creating auth user:', authError);
        /* istanbul ignore next */
        cov_2ncq6243qo().s[26]++;
        return _server.NextResponse.json({
          error: 'Error al crear usuario en Auth: ' + authError.message
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ncq6243qo().b[4][1]++;
      }
      cov_2ncq6243qo().s[27]++;
      authUser = newAuthUser.user;
    }
    // Verificar si el perfil ya existe
    const {
      data: existingProfile
    } =
    /* istanbul ignore next */
    (cov_2ncq6243qo().s[28]++, await supabase.from('user_profiles').select('*').eq('email', email).single());
    /* istanbul ignore next */
    cov_2ncq6243qo().s[29]++;
    if (existingProfile) {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[5][0]++;
      // Actualizar el perfil existente con el supabase_user_id
      const {
        data: updatedProfile,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_2ncq6243qo().s[30]++, await supabase.from('user_profiles').update({
        supabase_user_id: authUser.id,
        updated_at: new Date().toISOString()
      }).eq('email', email).select(`
          *,
          user_roles (
            role_name,
            permissions
          )
        `).single());
      /* istanbul ignore next */
      cov_2ncq6243qo().s[31]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_2ncq6243qo().b[6][0]++;
        cov_2ncq6243qo().s[32]++;
        console.error('Error updating profile:', updateError);
        /* istanbul ignore next */
        cov_2ncq6243qo().s[33]++;
        return _server.NextResponse.json({
          error: 'Error al actualizar perfil: ' + updateError.message
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ncq6243qo().b[6][1]++;
      }
      cov_2ncq6243qo().s[34]++;
      return _server.NextResponse.json({
        success: true,
        message: 'Usuario administrador actualizado correctamente',
        user: {
          auth_id: authUser.id,
          email: authUser.email,
          profile: updatedProfile
        }
      });
    } else {
      /* istanbul ignore next */
      cov_2ncq6243qo().b[5][1]++;
      // Crear nuevo perfil (esto no deberÃ­a pasar si ya ejecutamos el script anterior)
      const {
        data: adminRole
      } =
      /* istanbul ignore next */
      (cov_2ncq6243qo().s[35]++, await supabase.from('user_roles').select('id').eq('role_name', 'admin').single());
      /* istanbul ignore next */
      cov_2ncq6243qo().s[36]++;
      if (!adminRole) {
        /* istanbul ignore next */
        cov_2ncq6243qo().b[7][0]++;
        cov_2ncq6243qo().s[37]++;
        return _server.NextResponse.json({
          error: 'Rol de admin no encontrado'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ncq6243qo().b[7][1]++;
      }
      const {
        data: newProfile,
        error: profileError
      } =
      /* istanbul ignore next */
      (cov_2ncq6243qo().s[38]++, await supabase.from('user_profiles').insert({
        supabase_user_id: authUser.id,
        email,
        first_name: 'Santiago',
        last_name: 'Admin',
        role_id: adminRole.id,
        is_active: true,
        metadata: {
          created_by: 'admin_setup',
          is_super_admin: true
        }
      }).select(`
          *,
          user_roles (
            role_name,
            permissions
          )
        `).single());
      /* istanbul ignore next */
      cov_2ncq6243qo().s[39]++;
      if (profileError) {
        /* istanbul ignore next */
        cov_2ncq6243qo().b[8][0]++;
        cov_2ncq6243qo().s[40]++;
        console.error('Error creating profile:', profileError);
        /* istanbul ignore next */
        cov_2ncq6243qo().s[41]++;
        return _server.NextResponse.json({
          error: 'Error al crear perfil: ' + profileError.message
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ncq6243qo().b[8][1]++;
      }
      cov_2ncq6243qo().s[42]++;
      return _server.NextResponse.json({
        success: true,
        message: 'Usuario administrador creado correctamente',
        user: {
          auth_id: authUser.id,
          email: authUser.email,
          profile: newProfile
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2ncq6243qo().s[43]++;
    console.error('Error in create-admin-user:', error);
    /* istanbul ignore next */
    cov_2ncq6243qo().s[44]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_2ncq6243qo().f[6]++;
  cov_2ncq6243qo().s[45]++;
  return _server.NextResponse.json({
    message: 'Endpoint para crear usuario administrador',
    instructions: 'Usar POST con securityKey, email y password'
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm5jcTYyNDNxbyIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsImYiLCJQT1NUIiwicnVudGltZSIsInN1cGFiYXNlIiwiX3N1cGFiYXNlanMiLCJjcmVhdGVDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsImF1dGgiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJyZXF1ZXN0IiwiYm9keSIsImpzb24iLCJzZWN1cml0eUtleSIsImVtYWlsIiwicGFzc3dvcmQiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImVycm9yIiwic3RhdHVzIiwiZGF0YSIsImV4aXN0aW5nQXV0aFVzZXIiLCJhZG1pbiIsImxpc3RVc2VycyIsInVzZXJFeGlzdHMiLCJ1c2VycyIsImZpbmQiLCJ1IiwiYXV0aFVzZXIiLCJuZXdBdXRoVXNlciIsImF1dGhFcnJvciIsImNyZWF0ZVVzZXIiLCJlbWFpbF9jb25maXJtIiwidXNlcl9tZXRhZGF0YSIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJyb2xlIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJ1c2VyIiwiZXhpc3RpbmdQcm9maWxlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwidXBkYXRlZFByb2ZpbGUiLCJ1cGRhdGVFcnJvciIsInVwZGF0ZSIsInN1cGFiYXNlX3VzZXJfaWQiLCJpZCIsInVwZGF0ZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzdWNjZXNzIiwiYXV0aF9pZCIsInByb2ZpbGUiLCJhZG1pblJvbGUiLCJuZXdQcm9maWxlIiwicHJvZmlsZUVycm9yIiwiaW5zZXJ0Iiwicm9sZV9pZCIsImlzX2FjdGl2ZSIsIm1ldGFkYXRhIiwiY3JlYXRlZF9ieSIsImlzX3N1cGVyX2FkbWluIiwiaW5zdHJ1Y3Rpb25zIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxtYXJ0aVxcRGVza3RvcFxcREVTQVJST0xMT1NXXFxCT0lMRVJQTEFUVEUgRS1DT01NRVJDRVxcc3JjXFxhcHBcXGFwaVxcYWRtaW5cXGNyZWF0ZS1hZG1pbi11c2VyXFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb25maWd1cmFjacOzbiBwYXJhIE5vZGUuanMgUnVudGltZVxyXG5leHBvcnQgY29uc3QgcnVudGltZSA9ICdub2RlanMnO1xyXG5cclxuLyoqXHJcbiAqIEFQSSBwYXJhIGNyZWFyIGVsIHVzdWFyaW8gYWRtaW5pc3RyYWRvciBlbiBTdXBhYmFzZSBBdXRoXHJcbiAqIFNvbG8gZGViZSBlamVjdXRhcnNlIHVuYSB2ZXogcGFyYSBjb25maWd1cmFyIGVsIHNpc3RlbWFcclxuICovXHJcblxyXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5cclxuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoXHJcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcclxuICBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZISxcclxuICB7XHJcbiAgICBhdXRoOiB7XHJcbiAgICAgIGF1dG9SZWZyZXNoVG9rZW46IGZhbHNlLFxyXG4gICAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbik7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBWZXJpZmljYXIgcXVlIHNlIHByb3BvcmNpb25lIHVuYSBjbGF2ZSBkZSBzZWd1cmlkYWRcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcclxuICAgIGNvbnN0IHsgc2VjdXJpdHlLZXksIGVtYWlsLCBwYXNzd29yZCB9ID0gYm9keTtcclxuXHJcbiAgICAvLyBDbGF2ZSBkZSBzZWd1cmlkYWQgc2ltcGxlIHBhcmEgZXZpdGFyIGVqZWN1Y2nDs24gYWNjaWRlbnRhbFxyXG4gICAgaWYgKHNlY3VyaXR5S2V5ICE9PSAnQ1JFQVRFX0FETUlOX1BJTlRFWUFfMjAyNScpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdDbGF2ZSBkZSBzZWd1cmlkYWQgaW5jb3JyZWN0YScgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAzIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0VtYWlsIHkgY29udHJhc2XDsWEgc29uIHJlcXVlcmlkb3MnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8geWEgZXhpc3RlIGVuIGF1dGgudXNlcnNcclxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdBdXRoVXNlciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5hZG1pbi5saXN0VXNlcnMoKTtcclxuICAgIGNvbnN0IHVzZXJFeGlzdHMgPSBleGlzdGluZ0F1dGhVc2VyLnVzZXJzLmZpbmQodSA9PiB1LmVtYWlsID09PSBlbWFpbCk7XHJcblxyXG4gICAgbGV0IGF1dGhVc2VyO1xyXG5cclxuICAgIGlmICh1c2VyRXhpc3RzKSB7XHJcbiAgICAgIGF1dGhVc2VyID0gdXNlckV4aXN0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENyZWFyIHVzdWFyaW8gZW4gU3VwYWJhc2UgQXV0aFxyXG4gICAgICBjb25zdCB7IGRhdGE6IG5ld0F1dGhVc2VyLCBlcnJvcjogYXV0aEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmFkbWluLmNyZWF0ZVVzZXIoe1xyXG4gICAgICAgIGVtYWlsLFxyXG4gICAgICAgIHBhc3N3b3JkLFxyXG4gICAgICAgIGVtYWlsX2NvbmZpcm06IHRydWUsIC8vIENvbmZpcm1hciBlbWFpbCBhdXRvbcOhdGljYW1lbnRlXHJcbiAgICAgICAgdXNlcl9tZXRhZGF0YToge1xyXG4gICAgICAgICAgZmlyc3RfbmFtZTogJ1NhbnRpYWdvJyxcclxuICAgICAgICAgIGxhc3RfbmFtZTogJ0FkbWluJyxcclxuICAgICAgICAgIHJvbGU6ICdhZG1pbidcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGF1dGhFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGF1dGggdXNlcjonLCBhdXRoRXJyb3IpO1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFcnJvciBhbCBjcmVhciB1c3VhcmlvIGVuIEF1dGg6ICcgKyBhdXRoRXJyb3IubWVzc2FnZSB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXV0aFVzZXIgPSBuZXdBdXRoVXNlci51c2VyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBzaSBlbCBwZXJmaWwgeWEgZXhpc3RlXHJcbiAgICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nUHJvZmlsZSB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ3VzZXJfcHJvZmlsZXMnKVxyXG4gICAgICAuc2VsZWN0KCcqJylcclxuICAgICAgLmVxKCdlbWFpbCcsIGVtYWlsKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKGV4aXN0aW5nUHJvZmlsZSkge1xyXG4gICAgICAvLyBBY3R1YWxpemFyIGVsIHBlcmZpbCBleGlzdGVudGUgY29uIGVsIHN1cGFiYXNlX3VzZXJfaWRcclxuICAgICAgY29uc3QgeyBkYXRhOiB1cGRhdGVkUHJvZmlsZSwgZXJyb3I6IHVwZGF0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcclxuICAgICAgICAudXBkYXRlKHtcclxuICAgICAgICAgIHN1cGFiYXNlX3VzZXJfaWQ6IGF1dGhVc2VyLmlkLFxyXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZXEoJ2VtYWlsJywgZW1haWwpXHJcbiAgICAgICAgLnNlbGVjdChgXHJcbiAgICAgICAgICAqLFxyXG4gICAgICAgICAgdXNlcl9yb2xlcyAoXHJcbiAgICAgICAgICAgIHJvbGVfbmFtZSxcclxuICAgICAgICAgICAgcGVybWlzc2lvbnNcclxuICAgICAgICAgIClcclxuICAgICAgICBgKVxyXG4gICAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICAgIGlmICh1cGRhdGVFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHByb2ZpbGU6JywgdXBkYXRlRXJyb3IpO1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFcnJvciBhbCBhY3R1YWxpemFyIHBlcmZpbDogJyArIHVwZGF0ZUVycm9yLm1lc3NhZ2UgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBtZXNzYWdlOiAnVXN1YXJpbyBhZG1pbmlzdHJhZG9yIGFjdHVhbGl6YWRvIGNvcnJlY3RhbWVudGUnLFxyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgIGF1dGhfaWQ6IGF1dGhVc2VyLmlkLFxyXG4gICAgICAgICAgZW1haWw6IGF1dGhVc2VyLmVtYWlsLFxyXG4gICAgICAgICAgcHJvZmlsZTogdXBkYXRlZFByb2ZpbGVcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ3JlYXIgbnVldm8gcGVyZmlsIChlc3RvIG5vIGRlYmVyw61hIHBhc2FyIHNpIHlhIGVqZWN1dGFtb3MgZWwgc2NyaXB0IGFudGVyaW9yKVxyXG4gICAgICBjb25zdCB7IGRhdGE6IGFkbWluUm9sZSB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgICAgLnNlbGVjdCgnaWQnKVxyXG4gICAgICAgIC5lcSgncm9sZV9uYW1lJywgJ2FkbWluJylcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAoIWFkbWluUm9sZSkge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdSb2wgZGUgYWRtaW4gbm8gZW5jb250cmFkbycgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgZGF0YTogbmV3UHJvZmlsZSwgZXJyb3I6IHByb2ZpbGVFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXHJcbiAgICAgICAgLmluc2VydCh7XHJcbiAgICAgICAgICBzdXBhYmFzZV91c2VyX2lkOiBhdXRoVXNlci5pZCxcclxuICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgZmlyc3RfbmFtZTogJ1NhbnRpYWdvJyxcclxuICAgICAgICAgIGxhc3RfbmFtZTogJ0FkbWluJyxcclxuICAgICAgICAgIHJvbGVfaWQ6IGFkbWluUm9sZS5pZCxcclxuICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgIG1ldGFkYXRhOiB7IGNyZWF0ZWRfYnk6ICdhZG1pbl9zZXR1cCcsIGlzX3N1cGVyX2FkbWluOiB0cnVlIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zZWxlY3QoYFxyXG4gICAgICAgICAgKixcclxuICAgICAgICAgIHVzZXJfcm9sZXMgKFxyXG4gICAgICAgICAgICByb2xlX25hbWUsXHJcbiAgICAgICAgICAgIHBlcm1pc3Npb25zXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgYClcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAocHJvZmlsZUVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcHJvZmlsZTonLCBwcm9maWxlRXJyb3IpO1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFcnJvciBhbCBjcmVhciBwZXJmaWw6ICcgKyBwcm9maWxlRXJyb3IubWVzc2FnZSB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdVc3VhcmlvIGFkbWluaXN0cmFkb3IgY3JlYWRvIGNvcnJlY3RhbWVudGUnLFxyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgIGF1dGhfaWQ6IGF1dGhVc2VyLmlkLFxyXG4gICAgICAgICAgZW1haWw6IGF1dGhVc2VyLmVtYWlsLFxyXG4gICAgICAgICAgcHJvZmlsZTogbmV3UHJvZmlsZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGNyZWF0ZS1hZG1pbi11c2VyOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xyXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICBtZXNzYWdlOiAnRW5kcG9pbnQgcGFyYSBjcmVhciB1c3VhcmlvIGFkbWluaXN0cmFkb3InLFxyXG4gICAgaW5zdHJ1Y3Rpb25zOiAnVXNhciBQT1NUIGNvbiBzZWN1cml0eUtleSwgZW1haWwgeSBwYXNzd29yZCdcclxuICB9KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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