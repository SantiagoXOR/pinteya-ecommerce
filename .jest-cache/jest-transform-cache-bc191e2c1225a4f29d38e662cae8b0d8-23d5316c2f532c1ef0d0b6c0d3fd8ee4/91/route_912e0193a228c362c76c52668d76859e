4c9677bf4db12145803aefa516a7b023
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1qknxl133o() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\roles\\route.ts";
  var hash = "573c4a099c896e66082f7f367582f4edb4096261";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\roles\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "9": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "10": {
        start: {
          line: 30,
          column: 19
        },
        end: {
          line: 30,
          column: 61
        }
      },
      "11": {
        start: {
          line: 31,
          column: 13
        },
        end: {
          line: 31,
          column: 27
        }
      },
      "12": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "13": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "14": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "15": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 86
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "18": {
        start: {
          line: 52,
          column: 35
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "19": {
        start: {
          line: 53,
          column: 33
        },
        end: {
          line: 53,
          column: 53
        }
      },
      "20": {
        start: {
          line: 55,
          column: 32
        },
        end: {
          line: 55,
          column: 79
        }
      },
      "21": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 78
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "23": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "24": {
        start: {
          line: 62,
          column: 39
        },
        end: {
          line: 62,
          column: 50
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "26": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 58
        }
      },
      "27": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "28": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "30": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "31": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "32": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "33": {
        start: {
          line: 89,
          column: 27
        },
        end: {
          line: 89,
          column: 94
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "35": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "36": {
        start: {
          line: 97,
          column: 35
        },
        end: {
          line: 97,
          column: 45
        }
      },
      "37": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 41
        }
      },
      "38": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "39": {
        start: {
          line: 102,
          column: 39
        },
        end: {
          line: 102,
          column: 130
        }
      },
      "40": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "41": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "42": {
        start: {
          line: 111,
          column: 54
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "43": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "44": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 63
        }
      },
      "45": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "46": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 110
        }
      },
      "47": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "48": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 64
        }
      },
      "49": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "50": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "51": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "52": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "53": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 94
        }
      },
      "54": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "55": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 156,
          column: 15
        }
      },
      "56": {
        start: {
          line: 158,
          column: 35
        },
        end: {
          line: 158,
          column: 45
        }
      },
      "57": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 159,
          column: 53
        }
      },
      "58": {
        start: {
          line: 160,
          column: 23
        },
        end: {
          line: 160,
          column: 45
        }
      },
      "59": {
        start: {
          line: 161,
          column: 21
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "60": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "61": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "62": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 57
        }
      },
      "63": {
        start: {
          line: 172,
          column: 58
        },
        end: {
          line: 172,
          column: 129
        }
      },
      "64": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "65": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "66": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "67": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "68": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "69": {
        start: {
          line: 189,
          column: 44
        },
        end: {
          line: 189,
          column: 153
        }
      },
      "70": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "71": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 195,
          column: 19
        }
      },
      "72": {
        start: {
          line: 199,
          column: 58
        },
        end: {
          line: 202,
          column: 45
        }
      },
      "73": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "74": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 63
        }
      },
      "75": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "76": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 107
        }
      },
      "77": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "78": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 63
        }
      },
      "79": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "80": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "81": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "82": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 304,
          column: 5
        }
      },
      "83": {
        start: {
          line: 236,
          column: 27
        },
        end: {
          line: 236,
          column: 94
        }
      },
      "84": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "85": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "86": {
        start: {
          line: 244,
          column: 35
        },
        end: {
          line: 244,
          column: 45
        }
      },
      "87": {
        start: {
          line: 245,
          column: 33
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "88": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 45
        }
      },
      "89": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "90": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 252,
          column: 15
        }
      },
      "91": {
        start: {
          line: 255,
          column: 58
        },
        end: {
          line: 255,
          column: 129
        }
      },
      "92": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "93": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "94": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "95": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "96": {
        start: {
          line: 271,
          column: 26
        },
        end: {
          line: 274,
          column: 32
        }
      },
      "97": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "98": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "99": {
        start: {
          line: 283,
          column: 39
        },
        end: {
          line: 283,
          column: 98
        }
      },
      "100": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "101": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 63
        }
      },
      "102": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 290,
          column: 15
        }
      },
      "103": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 100
        }
      },
      "104": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "105": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 66
        }
      },
      "106": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 18
          }
        },
        loc: {
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 41
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 87,
            column: 19
          }
        },
        loc: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 87
      },
      "8": {
        name: "PUT",
        decl: {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 148,
            column: 18
          }
        },
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 148
      },
      "9": {
        name: "DELETE",
        decl: {
          start: {
            line: 234,
            column: 15
          },
          end: {
            line: 234,
            column: 21
          }
        },
        loc: {
          start: {
            line: 234,
            column: 31
          },
          end: {
            line: 305,
            column: 1
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "8": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "9": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "10": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 22
          }
        }, {
          start: {
            line: 173,
            column: 26
          },
          end: {
            line: 173,
            column: 39
          }
        }],
        line: 173
      },
      "11": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "12": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "13": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 188,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 188,
            column: 30
          }
        }, {
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 188,
            column: 79
          }
        }],
        line: 188
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "16": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "18": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "19": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 22
          }
        }, {
          start: {
            line: 256,
            column: 26
          },
          end: {
            line: 256,
            column: 39
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "22": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "23": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: 275,
            column: 21
          },
          end: {
            line: 275,
            column: 30
          }
        }],
        line: 275
      },
      "24": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\roles\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para gesti\xF3n de roles del sistema\r\n * Requiere permisos de administrador para modificar\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { checkCRUDPermissions, logAdminAction } from '@/lib/auth/admin-auth';\r\nimport { z } from 'zod';\r\n\r\n// Schema de validaci\xF3n para roles\r\nconst RoleSchema = z.object({\r\n  role_name: z.string().min(1, 'El nombre del rol es requerido'),\r\n  display_name: z.string().min(1, 'El nombre para mostrar es requerido'),\r\n  description: z.string().optional(),\r\n  permissions: z.record(z.any()).default({}),\r\n  is_active: z.boolean().default(true)\r\n});\r\n\r\n/**\r\n * GET /api/admin/roles\r\n * Obtener lista de roles del sistema\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Para leer roles, solo necesita estar autenticado como admin/moderator\r\n    const authResult = await checkCRUDPermissions('users', 'read');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n\r\n    // Par\xE1metros de consulta\r\n    const includeInactive = searchParams.get('include_inactive') === 'true';\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .order('role_name');\r\n\r\n    // Filtrar por estado activo si no se incluyen inactivos\r\n    if (!includeInactive) {\r\n      query = query.eq('is_active', true);\r\n    }\r\n\r\n    const { data: roles, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error fetching roles:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener roles' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log access\r\n    await logAdminAction(\r\n      user.id,\r\n      'READ',\r\n      'roles',\r\n      'list',\r\n      null,\r\n      { include_inactive: includeInactive }\r\n    );\r\n\r\n    return NextResponse.json({\r\n      data: roles\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/admin/roles:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/roles\r\n * Crear nuevo rol (solo para super admins)\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const body = await request.json();\r\n\r\n    // Validar datos de entrada\r\n    const roleData = RoleSchema.parse(body);\r\n\r\n    // Verificar que el nombre del rol no existe\r\n    const { data: existingRole } = await supabase\r\n      .from('user_roles')\r\n      .select('id')\r\n      .eq('role_name', roleData.role_name)\r\n      .single();\r\n\r\n    if (existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Ya existe un rol con ese nombre' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear nuevo rol\r\n    const { data: newRole, error: createError } = await supabase\r\n      .from('user_roles')\r\n      .insert({\r\n        ...roleData,\r\n        is_system_role: false // Los roles creados por admin no son del sistema\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (createError) {\r\n      console.error('Error creating role:', createError);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'CREATE',\r\n      'role',\r\n      newRole.id.toString(),\r\n      null,\r\n      newRole\r\n    );\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Rol creado exitosamente',\r\n        data: newRole\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error in POST /api/admin/roles:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Datos inv\xE1lidos', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * PUT /api/admin/roles/[id]\r\n * Actualizar rol existente\r\n */\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n    const roleId = searchParams.get('id');\r\n    const body = await request.json();\r\n\r\n    if (!roleId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de rol requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const roleData = RoleSchema.partial().parse(body);\r\n\r\n    // Verificar que el rol existe y no es del sistema\r\n    const { data: existingRole, error: fetchError } = await supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .eq('id', roleId)\r\n      .single();\r\n\r\n    if (fetchError || !existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Rol no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRole.is_system_role) {\r\n      return NextResponse.json(\r\n        { error: 'No se pueden modificar roles del sistema' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Verificar nombre \xFAnico si se est\xE1 cambiando\r\n    if (roleData.role_name && roleData.role_name !== existingRole.role_name) {\r\n      const { data: duplicateRole } = await supabase\r\n        .from('user_roles')\r\n        .select('id')\r\n        .eq('role_name', roleData.role_name)\r\n        .neq('id', roleId)\r\n        .single();\r\n\r\n      if (duplicateRole) {\r\n        return NextResponse.json(\r\n          { error: 'Ya existe un rol con ese nombre' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Actualizar rol\r\n    const { data: updatedRole, error: updateError } = await supabase\r\n      .from('user_roles')\r\n      .update({\r\n        ...roleData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', roleId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating role:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'UPDATE',\r\n      'role',\r\n      roleId,\r\n      existingRole,\r\n      updatedRole\r\n    );\r\n\r\n    return NextResponse.json({\r\n      message: 'Rol actualizado exitosamente',\r\n      data: updatedRole\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in PUT /api/admin/roles:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Datos inv\xE1lidos', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/admin/roles/[id]\r\n * Eliminar rol (solo si no est\xE1 en uso)\r\n */\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const authResult = await checkCRUDPermissions('users', 'manage_roles');\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const { supabase, user } = authResult;\r\n    const { searchParams } = new URL(request.url);\r\n    const roleId = searchParams.get('id');\r\n\r\n    if (!roleId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de rol requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que el rol existe y no es del sistema\r\n    const { data: existingRole, error: fetchError } = await supabase\r\n      .from('user_roles')\r\n      .select('*')\r\n      .eq('id', roleId)\r\n      .single();\r\n\r\n    if (fetchError || !existingRole) {\r\n      return NextResponse.json(\r\n        { error: 'Rol no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRole.is_system_role) {\r\n      return NextResponse.json(\r\n        { error: 'No se pueden eliminar roles del sistema' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Verificar que no hay usuarios con este rol\r\n    const { count } = await supabase\r\n      .from('user_profiles')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('role_id', roleId);\r\n\r\n    if (count && count > 0) {\r\n      return NextResponse.json(\r\n        { error: `No se puede eliminar el rol. Hay ${count} usuario(s) asignado(s) a este rol.` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Eliminar rol\r\n    const { error: deleteError } = await supabase\r\n      .from('user_roles')\r\n      .delete()\r\n      .eq('id', roleId);\r\n\r\n    if (deleteError) {\r\n      console.error('Error deleting role:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar rol' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Log admin action\r\n    await logAdminAction(\r\n      user.id,\r\n      'DELETE',\r\n      'role',\r\n      roleId,\r\n      existingRole,\r\n      null\r\n    );\r\n\r\n    return NextResponse.json({\r\n      message: 'Rol eliminado exitosamente'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in DELETE /api/admin/roles:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "POST", "PUT", "runtime", "RoleSchema", "z", "object", "role_name", "string", "min", "display_name", "description", "optional", "permissions", "record", "any", "default", "is_active", "boolean", "request", "authResult", "checkCRUDPermissions", "success", "NextResponse", "json", "error", "status", "supabase", "user", "searchParams", "URL", "url", "includeInactive", "get", "query", "from", "select", "order", "eq", "data", "roles", "console", "logAdminAction", "id", "include_inactive", "body", "roleData", "parse", "existingRole", "single", "newRole", "createError", "insert", "is_system_role", "toString", "message", "ZodError", "details", "errors", "roleId", "partial", "fetchError", "duplicateRole", "neq", "updatedRole", "updateError", "update", "updated_at", "Date", "toISOString", "count", "head", "deleteError", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "573c4a099c896e66082f7f367582f4edb4096261"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qknxl133o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qknxl133o();
cov_1qknxl133o().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1qknxl133o().f[0]++;
  cov_1qknxl133o().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1qknxl133o().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1qknxl133o().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1qknxl133o().f[1]++;
    cov_1qknxl133o().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1qknxl133o().f[2]++;
    cov_1qknxl133o().s[5]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1qknxl133o().f[3]++;
    cov_1qknxl133o().s[6]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1qknxl133o().f[4]++;
    cov_1qknxl133o().s[7]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1qknxl133o().f[5]++;
    cov_1qknxl133o().s[8]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1qknxl133o().s[9]++, require("next/server"));
const _adminauth =
/* istanbul ignore next */
(cov_1qknxl133o().s[10]++, require("../../../../lib/auth/admin-auth"));
const _zod =
/* istanbul ignore next */
(cov_1qknxl133o().s[11]++, require("zod"));
const runtime =
/* istanbul ignore next */
(cov_1qknxl133o().s[12]++, 'nodejs');
// Schema de validaciÃ³n para roles
const RoleSchema =
/* istanbul ignore next */
(cov_1qknxl133o().s[13]++, _zod.z.object({
  role_name: _zod.z.string().min(1, 'El nombre del rol es requerido'),
  display_name: _zod.z.string().min(1, 'El nombre para mostrar es requerido'),
  description: _zod.z.string().optional(),
  permissions: _zod.z.record(_zod.z.any()).default({}),
  is_active: _zod.z.boolean().default(true)
}));
async function GET(request) {
  /* istanbul ignore next */
  cov_1qknxl133o().f[6]++;
  cov_1qknxl133o().s[14]++;
  try {
    // Para leer roles, solo necesita estar autenticado como admin/moderator
    const authResult =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[15]++, await (0, _adminauth.checkCRUDPermissions)('users', 'read'));
    /* istanbul ignore next */
    cov_1qknxl133o().s[16]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[0][0]++;
      cov_1qknxl133o().s[17]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[0][1]++;
    }
    const {
      supabase,
      user
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[18]++, authResult);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[19]++, new URL(request.url));
    // ParÃ¡metros de consulta
    const includeInactive =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[20]++, searchParams.get('include_inactive') === 'true');
    // Construir query
    let query =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[21]++, supabase.from('user_roles').select('*').order('role_name'));
    // Filtrar por estado activo si no se incluyen inactivos
    /* istanbul ignore next */
    cov_1qknxl133o().s[22]++;
    if (!includeInactive) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[1][0]++;
      cov_1qknxl133o().s[23]++;
      query = query.eq('is_active', true);
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[1][1]++;
    }
    const {
      data: roles,
      error
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[24]++, await query);
    /* istanbul ignore next */
    cov_1qknxl133o().s[25]++;
    if (error) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[2][0]++;
      cov_1qknxl133o().s[26]++;
      console.error('Error fetching roles:', error);
      /* istanbul ignore next */
      cov_1qknxl133o().s[27]++;
      return _server.NextResponse.json({
        error: 'Error al obtener roles'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[2][1]++;
    }
    // Log access
    cov_1qknxl133o().s[28]++;
    await (0, _adminauth.logAdminAction)(user.id, 'READ', 'roles', 'list', null, {
      include_inactive: includeInactive
    });
    /* istanbul ignore next */
    cov_1qknxl133o().s[29]++;
    return _server.NextResponse.json({
      data: roles
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1qknxl133o().s[30]++;
    console.error('Error in GET /api/admin/roles:', error);
    /* istanbul ignore next */
    cov_1qknxl133o().s[31]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1qknxl133o().f[7]++;
  cov_1qknxl133o().s[32]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[33]++, await (0, _adminauth.checkCRUDPermissions)('users', 'manage_roles'));
    /* istanbul ignore next */
    cov_1qknxl133o().s[34]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[3][0]++;
      cov_1qknxl133o().s[35]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[3][1]++;
    }
    const {
      supabase,
      user
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[36]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[37]++, await request.json());
    // Validar datos de entrada
    const roleData =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[38]++, RoleSchema.parse(body));
    // Verificar que el nombre del rol no existe
    const {
      data: existingRole
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[39]++, await supabase.from('user_roles').select('id').eq('role_name', roleData.role_name).single());
    /* istanbul ignore next */
    cov_1qknxl133o().s[40]++;
    if (existingRole) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[4][0]++;
      cov_1qknxl133o().s[41]++;
      return _server.NextResponse.json({
        error: 'Ya existe un rol con ese nombre'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[4][1]++;
    }
    // Crear nuevo rol
    const {
      data: newRole,
      error: createError
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[42]++, await supabase.from('user_roles').insert({
      ...roleData,
      is_system_role: false // Los roles creados por admin no son del sistema
    }).select().single());
    /* istanbul ignore next */
    cov_1qknxl133o().s[43]++;
    if (createError) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[5][0]++;
      cov_1qknxl133o().s[44]++;
      console.error('Error creating role:', createError);
      /* istanbul ignore next */
      cov_1qknxl133o().s[45]++;
      return _server.NextResponse.json({
        error: 'Error al crear rol'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[5][1]++;
    }
    // Log admin action
    cov_1qknxl133o().s[46]++;
    await (0, _adminauth.logAdminAction)(user.id, 'CREATE', 'role', newRole.id.toString(), null, newRole);
    /* istanbul ignore next */
    cov_1qknxl133o().s[47]++;
    return _server.NextResponse.json({
      message: 'Rol creado exitosamente',
      data: newRole
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1qknxl133o().s[48]++;
    console.error('Error in POST /api/admin/roles:', error);
    /* istanbul ignore next */
    cov_1qknxl133o().s[49]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[6][0]++;
      cov_1qknxl133o().s[50]++;
      return _server.NextResponse.json({
        error: 'Datos invÃ¡lidos',
        details: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[6][1]++;
    }
    cov_1qknxl133o().s[51]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PUT(request) {
  /* istanbul ignore next */
  cov_1qknxl133o().f[8]++;
  cov_1qknxl133o().s[52]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[53]++, await (0, _adminauth.checkCRUDPermissions)('users', 'manage_roles'));
    /* istanbul ignore next */
    cov_1qknxl133o().s[54]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[7][0]++;
      cov_1qknxl133o().s[55]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[7][1]++;
    }
    const {
      supabase,
      user
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[56]++, authResult);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[57]++, new URL(request.url));
    const roleId =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[58]++, searchParams.get('id'));
    const body =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[59]++, await request.json());
    /* istanbul ignore next */
    cov_1qknxl133o().s[60]++;
    if (!roleId) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[8][0]++;
      cov_1qknxl133o().s[61]++;
      return _server.NextResponse.json({
        error: 'ID de rol requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[8][1]++;
    }
    // Validar datos de entrada
    const roleData =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[62]++, RoleSchema.partial().parse(body));
    // Verificar que el rol existe y no es del sistema
    const {
      data: existingRole,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[63]++, await supabase.from('user_roles').select('*').eq('id', roleId).single());
    /* istanbul ignore next */
    cov_1qknxl133o().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1qknxl133o().b[10][0]++, fetchError) ||
    /* istanbul ignore next */
    (cov_1qknxl133o().b[10][1]++, !existingRole)) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[9][0]++;
      cov_1qknxl133o().s[65]++;
      return _server.NextResponse.json({
        error: 'Rol no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[9][1]++;
    }
    cov_1qknxl133o().s[66]++;
    if (existingRole.is_system_role) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[11][0]++;
      cov_1qknxl133o().s[67]++;
      return _server.NextResponse.json({
        error: 'No se pueden modificar roles del sistema'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[11][1]++;
    }
    // Verificar nombre Ãºnico si se estÃ¡ cambiando
    cov_1qknxl133o().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1qknxl133o().b[13][0]++, roleData.role_name) &&
    /* istanbul ignore next */
    (cov_1qknxl133o().b[13][1]++, roleData.role_name !== existingRole.role_name)) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[12][0]++;
      const {
        data: duplicateRole
      } =
      /* istanbul ignore next */
      (cov_1qknxl133o().s[69]++, await supabase.from('user_roles').select('id').eq('role_name', roleData.role_name).neq('id', roleId).single());
      /* istanbul ignore next */
      cov_1qknxl133o().s[70]++;
      if (duplicateRole) {
        /* istanbul ignore next */
        cov_1qknxl133o().b[14][0]++;
        cov_1qknxl133o().s[71]++;
        return _server.NextResponse.json({
          error: 'Ya existe un rol con ese nombre'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1qknxl133o().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[12][1]++;
    }
    // Actualizar rol
    const {
      data: updatedRole,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[72]++, await supabase.from('user_roles').update({
      ...roleData,
      updated_at: new Date().toISOString()
    }).eq('id', roleId).select().single());
    /* istanbul ignore next */
    cov_1qknxl133o().s[73]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[15][0]++;
      cov_1qknxl133o().s[74]++;
      console.error('Error updating role:', updateError);
      /* istanbul ignore next */
      cov_1qknxl133o().s[75]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar rol'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[15][1]++;
    }
    // Log admin action
    cov_1qknxl133o().s[76]++;
    await (0, _adminauth.logAdminAction)(user.id, 'UPDATE', 'role', roleId, existingRole, updatedRole);
    /* istanbul ignore next */
    cov_1qknxl133o().s[77]++;
    return _server.NextResponse.json({
      message: 'Rol actualizado exitosamente',
      data: updatedRole
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1qknxl133o().s[78]++;
    console.error('Error in PUT /api/admin/roles:', error);
    /* istanbul ignore next */
    cov_1qknxl133o().s[79]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[16][0]++;
      cov_1qknxl133o().s[80]++;
      return _server.NextResponse.json({
        error: 'Datos invÃ¡lidos',
        details: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[16][1]++;
    }
    cov_1qknxl133o().s[81]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1qknxl133o().f[9]++;
  cov_1qknxl133o().s[82]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[83]++, await (0, _adminauth.checkCRUDPermissions)('users', 'manage_roles'));
    /* istanbul ignore next */
    cov_1qknxl133o().s[84]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[17][0]++;
      cov_1qknxl133o().s[85]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[17][1]++;
    }
    const {
      supabase,
      user
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[86]++, authResult);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[87]++, new URL(request.url));
    const roleId =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[88]++, searchParams.get('id'));
    /* istanbul ignore next */
    cov_1qknxl133o().s[89]++;
    if (!roleId) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[18][0]++;
      cov_1qknxl133o().s[90]++;
      return _server.NextResponse.json({
        error: 'ID de rol requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[18][1]++;
    }
    // Verificar que el rol existe y no es del sistema
    const {
      data: existingRole,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[91]++, await supabase.from('user_roles').select('*').eq('id', roleId).single());
    /* istanbul ignore next */
    cov_1qknxl133o().s[92]++;
    if (
    /* istanbul ignore next */
    (cov_1qknxl133o().b[20][0]++, fetchError) ||
    /* istanbul ignore next */
    (cov_1qknxl133o().b[20][1]++, !existingRole)) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[19][0]++;
      cov_1qknxl133o().s[93]++;
      return _server.NextResponse.json({
        error: 'Rol no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[19][1]++;
    }
    cov_1qknxl133o().s[94]++;
    if (existingRole.is_system_role) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[21][0]++;
      cov_1qknxl133o().s[95]++;
      return _server.NextResponse.json({
        error: 'No se pueden eliminar roles del sistema'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[21][1]++;
    }
    // Verificar que no hay usuarios con este rol
    const {
      count
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[96]++, await supabase.from('user_profiles').select('*', {
      count: 'exact',
      head: true
    }).eq('role_id', roleId));
    /* istanbul ignore next */
    cov_1qknxl133o().s[97]++;
    if (
    /* istanbul ignore next */
    (cov_1qknxl133o().b[23][0]++, count) &&
    /* istanbul ignore next */
    (cov_1qknxl133o().b[23][1]++, count > 0)) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[22][0]++;
      cov_1qknxl133o().s[98]++;
      return _server.NextResponse.json({
        error: `No se puede eliminar el rol. Hay ${count} usuario(s) asignado(s) a este rol.`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[22][1]++;
    }
    // Eliminar rol
    const {
      error: deleteError
    } =
    /* istanbul ignore next */
    (cov_1qknxl133o().s[99]++, await supabase.from('user_roles').delete().eq('id', roleId));
    /* istanbul ignore next */
    cov_1qknxl133o().s[100]++;
    if (deleteError) {
      /* istanbul ignore next */
      cov_1qknxl133o().b[24][0]++;
      cov_1qknxl133o().s[101]++;
      console.error('Error deleting role:', deleteError);
      /* istanbul ignore next */
      cov_1qknxl133o().s[102]++;
      return _server.NextResponse.json({
        error: 'Error al eliminar rol'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1qknxl133o().b[24][1]++;
    }
    // Log admin action
    cov_1qknxl133o().s[103]++;
    await (0, _adminauth.logAdminAction)(user.id, 'DELETE', 'role', roleId, existingRole, null);
    /* istanbul ignore next */
    cov_1qknxl133o().s[104]++;
    return _server.NextResponse.json({
      message: 'Rol eliminado exitosamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1qknxl133o().s[105]++;
    console.error('Error in DELETE /api/admin/roles:', error);
    /* istanbul ignore next */
    cov_1qknxl133o().s[106]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXFrbnhsMTMzbyIsImFjdHVhbENvdmVyYWdlIiwicyIsIkRFTEVURSIsImYiLCJHRVQiLCJQT1NUIiwiUFVUIiwicnVudGltZSIsIlJvbGVTY2hlbWEiLCJfem9kIiwieiIsIm9iamVjdCIsInJvbGVfbmFtZSIsInN0cmluZyIsIm1pbiIsImRpc3BsYXlfbmFtZSIsImRlc2NyaXB0aW9uIiwib3B0aW9uYWwiLCJwZXJtaXNzaW9ucyIsInJlY29yZCIsImFueSIsImRlZmF1bHQiLCJpc19hY3RpdmUiLCJib29sZWFuIiwicmVxdWVzdCIsImF1dGhSZXN1bHQiLCJfYWRtaW5hdXRoIiwiY2hlY2tDUlVEUGVybWlzc2lvbnMiLCJzdWNjZXNzIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJzdXBhYmFzZSIsInVzZXIiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJpbmNsdWRlSW5hY3RpdmUiLCJnZXQiLCJxdWVyeSIsImZyb20iLCJzZWxlY3QiLCJvcmRlciIsImVxIiwiZGF0YSIsInJvbGVzIiwiY29uc29sZSIsImxvZ0FkbWluQWN0aW9uIiwiaWQiLCJpbmNsdWRlX2luYWN0aXZlIiwiYm9keSIsInJvbGVEYXRhIiwicGFyc2UiLCJleGlzdGluZ1JvbGUiLCJzaW5nbGUiLCJuZXdSb2xlIiwiY3JlYXRlRXJyb3IiLCJpbnNlcnQiLCJpc19zeXN0ZW1fcm9sZSIsInRvU3RyaW5nIiwibWVzc2FnZSIsIlpvZEVycm9yIiwiZGV0YWlscyIsImVycm9ycyIsInJvbGVJZCIsInBhcnRpYWwiLCJmZXRjaEVycm9yIiwiZHVwbGljYXRlUm9sZSIsIm5lcSIsInVwZGF0ZWRSb2xlIiwidXBkYXRlRXJyb3IiLCJ1cGRhdGUiLCJ1cGRhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY291bnQiLCJoZWFkIiwiZGVsZXRlRXJyb3IiLCJkZWxldGUiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG1hcnRpXFxEZXNrdG9wXFxERVNBUlJPTExPU1dcXEJPSUxFUlBMQVRURSBFLUNPTU1FUkNFXFxzcmNcXGFwcFxcYXBpXFxhZG1pblxccm9sZXNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZ3VyYWNpw7NuIHBhcmEgTm9kZS5qcyBSdW50aW1lXHJcbmV4cG9ydCBjb25zdCBydW50aW1lID0gJ25vZGVqcyc7XHJcblxyXG4vKipcclxuICogQVBJIHBhcmEgZ2VzdGnDs24gZGUgcm9sZXMgZGVsIHNpc3RlbWFcclxuICogUmVxdWllcmUgcGVybWlzb3MgZGUgYWRtaW5pc3RyYWRvciBwYXJhIG1vZGlmaWNhclxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IGNoZWNrQ1JVRFBlcm1pc3Npb25zLCBsb2dBZG1pbkFjdGlvbiB9IGZyb20gJ0AvbGliL2F1dGgvYWRtaW4tYXV0aCc7XHJcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xyXG5cclxuLy8gU2NoZW1hIGRlIHZhbGlkYWNpw7NuIHBhcmEgcm9sZXNcclxuY29uc3QgUm9sZVNjaGVtYSA9IHoub2JqZWN0KHtcclxuICByb2xlX25hbWU6IHouc3RyaW5nKCkubWluKDEsICdFbCBub21icmUgZGVsIHJvbCBlcyByZXF1ZXJpZG8nKSxcclxuICBkaXNwbGF5X25hbWU6IHouc3RyaW5nKCkubWluKDEsICdFbCBub21icmUgcGFyYSBtb3N0cmFyIGVzIHJlcXVlcmlkbycpLFxyXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXHJcbiAgcGVybWlzc2lvbnM6IHoucmVjb3JkKHouYW55KCkpLmRlZmF1bHQoe30pLFxyXG4gIGlzX2FjdGl2ZTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBHRVQgL2FwaS9hZG1pbi9yb2xlc1xyXG4gKiBPYnRlbmVyIGxpc3RhIGRlIHJvbGVzIGRlbCBzaXN0ZW1hXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFBhcmEgbGVlciByb2xlcywgc29sbyBuZWNlc2l0YSBlc3RhciBhdXRlbnRpY2FkbyBjb21vIGFkbWluL21vZGVyYXRvclxyXG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IGNoZWNrQ1JVRFBlcm1pc3Npb25zKCd1c2VycycsICdyZWFkJyk7XHJcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogYXV0aFJlc3VsdC5lcnJvciB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiBhdXRoUmVzdWx0LnN0YXR1cyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBzdXBhYmFzZSwgdXNlciB9ID0gYXV0aFJlc3VsdDtcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuXHJcbiAgICAvLyBQYXLDoW1ldHJvcyBkZSBjb25zdWx0YVxyXG4gICAgY29uc3QgaW5jbHVkZUluYWN0aXZlID0gc2VhcmNoUGFyYW1zLmdldCgnaW5jbHVkZV9pbmFjdGl2ZScpID09PSAndHJ1ZSc7XHJcblxyXG4gICAgLy8gQ29uc3RydWlyIHF1ZXJ5XHJcbiAgICBsZXQgcXVlcnkgPSBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgIC5zZWxlY3QoJyonKVxyXG4gICAgICAub3JkZXIoJ3JvbGVfbmFtZScpO1xyXG5cclxuICAgIC8vIEZpbHRyYXIgcG9yIGVzdGFkbyBhY3Rpdm8gc2kgbm8gc2UgaW5jbHV5ZW4gaW5hY3Rpdm9zXHJcbiAgICBpZiAoIWluY2x1ZGVJbmFjdGl2ZSkge1xyXG4gICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdpc19hY3RpdmUnLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IGRhdGE6IHJvbGVzLCBlcnJvciB9ID0gYXdhaXQgcXVlcnk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHJvbGVzOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdFcnJvciBhbCBvYnRlbmVyIHJvbGVzJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExvZyBhY2Nlc3NcclxuICAgIGF3YWl0IGxvZ0FkbWluQWN0aW9uKFxyXG4gICAgICB1c2VyLmlkLFxyXG4gICAgICAnUkVBRCcsXHJcbiAgICAgICdyb2xlcycsXHJcbiAgICAgICdsaXN0JyxcclxuICAgICAgbnVsbCxcclxuICAgICAgeyBpbmNsdWRlX2luYWN0aXZlOiBpbmNsdWRlSW5hY3RpdmUgfVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBkYXRhOiByb2xlc1xyXG4gICAgfSk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBHRVQgL2FwaS9hZG1pbi9yb2xlczonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGRlbCBzZXJ2aWRvcicgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBPU1QgL2FwaS9hZG1pbi9yb2xlc1xyXG4gKiBDcmVhciBudWV2byByb2wgKHNvbG8gcGFyYSBzdXBlciBhZG1pbnMpXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgY2hlY2tDUlVEUGVybWlzc2lvbnMoJ3VzZXJzJywgJ21hbmFnZV9yb2xlcycpO1xyXG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6IGF1dGhSZXN1bHQuZXJyb3IgfSxcclxuICAgICAgICB7IHN0YXR1czogYXV0aFJlc3VsdC5zdGF0dXMgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgc3VwYWJhc2UsIHVzZXIgfSA9IGF1dGhSZXN1bHQ7XHJcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcblxyXG4gICAgLy8gVmFsaWRhciBkYXRvcyBkZSBlbnRyYWRhXHJcbiAgICBjb25zdCByb2xlRGF0YSA9IFJvbGVTY2hlbWEucGFyc2UoYm9keSk7XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBub21icmUgZGVsIHJvbCBubyBleGlzdGVcclxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdSb2xlIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgIC5zZWxlY3QoJ2lkJylcclxuICAgICAgLmVxKCdyb2xlX25hbWUnLCByb2xlRGF0YS5yb2xlX25hbWUpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICBpZiAoZXhpc3RpbmdSb2xlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnWWEgZXhpc3RlIHVuIHJvbCBjb24gZXNlIG5vbWJyZScgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhciBudWV2byByb2xcclxuICAgIGNvbnN0IHsgZGF0YTogbmV3Um9sZSwgZXJyb3I6IGNyZWF0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgIC5pbnNlcnQoe1xyXG4gICAgICAgIC4uLnJvbGVEYXRhLFxyXG4gICAgICAgIGlzX3N5c3RlbV9yb2xlOiBmYWxzZSAvLyBMb3Mgcm9sZXMgY3JlYWRvcyBwb3IgYWRtaW4gbm8gc29uIGRlbCBzaXN0ZW1hXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKGNyZWF0ZUVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHJvbGU6JywgY3JlYXRlRXJyb3IpO1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIGNyZWFyIHJvbCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMb2cgYWRtaW4gYWN0aW9uXHJcbiAgICBhd2FpdCBsb2dBZG1pbkFjdGlvbihcclxuICAgICAgdXNlci5pZCxcclxuICAgICAgJ0NSRUFURScsXHJcbiAgICAgICdyb2xlJyxcclxuICAgICAgbmV3Um9sZS5pZC50b1N0cmluZygpLFxyXG4gICAgICBudWxsLFxyXG4gICAgICBuZXdSb2xlXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdSb2wgY3JlYWRvIGV4aXRvc2FtZW50ZScsXHJcbiAgICAgICAgZGF0YTogbmV3Um9sZVxyXG4gICAgICB9LFxyXG4gICAgICB7IHN0YXR1czogMjAxIH1cclxuICAgICk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBQT1NUIC9hcGkvYWRtaW4vcm9sZXM6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnRGF0b3MgaW52w6FsaWRvcycsIGRldGFpbHM6IGVycm9yLmVycm9ycyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUFVUIC9hcGkvYWRtaW4vcm9sZXMvW2lkXVxyXG4gKiBBY3R1YWxpemFyIHJvbCBleGlzdGVudGVcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQVVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IGNoZWNrQ1JVRFBlcm1pc3Npb25zKCd1c2VycycsICdtYW5hZ2Vfcm9sZXMnKTtcclxuICAgIGlmICghYXV0aFJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiBhdXRoUmVzdWx0LmVycm9yIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IGF1dGhSZXN1bHQuc3RhdHVzIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHN1cGFiYXNlLCB1c2VyIH0gPSBhdXRoUmVzdWx0O1xyXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gICAgY29uc3Qgcm9sZUlkID0gc2VhcmNoUGFyYW1zLmdldCgnaWQnKTtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcclxuXHJcbiAgICBpZiAoIXJvbGVJZCkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0lEIGRlIHJvbCByZXF1ZXJpZG8nIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmFsaWRhciBkYXRvcyBkZSBlbnRyYWRhXHJcbiAgICBjb25zdCByb2xlRGF0YSA9IFJvbGVTY2hlbWEucGFydGlhbCgpLnBhcnNlKGJvZHkpO1xyXG5cclxuICAgIC8vIFZlcmlmaWNhciBxdWUgZWwgcm9sIGV4aXN0ZSB5IG5vIGVzIGRlbCBzaXN0ZW1hXHJcbiAgICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nUm9sZSwgZXJyb3I6IGZldGNoRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX3JvbGVzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5lcSgnaWQnLCByb2xlSWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICBpZiAoZmV0Y2hFcnJvciB8fCAhZXhpc3RpbmdSb2xlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnUm9sIG5vIGVuY29udHJhZG8nIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4aXN0aW5nUm9sZS5pc19zeXN0ZW1fcm9sZSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ05vIHNlIHB1ZWRlbiBtb2RpZmljYXIgcm9sZXMgZGVsIHNpc3RlbWEnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIG5vbWJyZSDDum5pY28gc2kgc2UgZXN0w6EgY2FtYmlhbmRvXHJcbiAgICBpZiAocm9sZURhdGEucm9sZV9uYW1lICYmIHJvbGVEYXRhLnJvbGVfbmFtZSAhPT0gZXhpc3RpbmdSb2xlLnJvbGVfbmFtZSkge1xyXG4gICAgICBjb25zdCB7IGRhdGE6IGR1cGxpY2F0ZVJvbGUgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ3VzZXJfcm9sZXMnKVxyXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcclxuICAgICAgICAuZXEoJ3JvbGVfbmFtZScsIHJvbGVEYXRhLnJvbGVfbmFtZSlcclxuICAgICAgICAubmVxKCdpZCcsIHJvbGVJZClcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAoZHVwbGljYXRlUm9sZSkge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdZYSBleGlzdGUgdW4gcm9sIGNvbiBlc2Ugbm9tYnJlJyB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFjdHVhbGl6YXIgcm9sXHJcbiAgICBjb25zdCB7IGRhdGE6IHVwZGF0ZWRSb2xlLCBlcnJvcjogdXBkYXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX3JvbGVzJylcclxuICAgICAgLnVwZGF0ZSh7XHJcbiAgICAgICAgLi4ucm9sZURhdGEsXHJcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICAgIH0pXHJcbiAgICAgIC5lcSgnaWQnLCByb2xlSWQpXHJcbiAgICAgIC5zZWxlY3QoKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKHVwZGF0ZUVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHJvbGU6JywgdXBkYXRlRXJyb3IpO1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIGFjdHVhbGl6YXIgcm9sJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExvZyBhZG1pbiBhY3Rpb25cclxuICAgIGF3YWl0IGxvZ0FkbWluQWN0aW9uKFxyXG4gICAgICB1c2VyLmlkLFxyXG4gICAgICAnVVBEQVRFJyxcclxuICAgICAgJ3JvbGUnLFxyXG4gICAgICByb2xlSWQsXHJcbiAgICAgIGV4aXN0aW5nUm9sZSxcclxuICAgICAgdXBkYXRlZFJvbGVcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgbWVzc2FnZTogJ1JvbCBhY3R1YWxpemFkbyBleGl0b3NhbWVudGUnLFxyXG4gICAgICBkYXRhOiB1cGRhdGVkUm9sZVxyXG4gICAgfSk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBQVVQgL2FwaS9hZG1pbi9yb2xlczonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdEYXRvcyBpbnbDoWxpZG9zJywgZGV0YWlsczogZXJyb3IuZXJyb3JzIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IGVycm9yOiAnRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3InIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBERUxFVEUgL2FwaS9hZG1pbi9yb2xlcy9baWRdXHJcbiAqIEVsaW1pbmFyIHJvbCAoc29sbyBzaSBubyBlc3TDoSBlbiB1c28pXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCBjaGVja0NSVURQZXJtaXNzaW9ucygndXNlcnMnLCAnbWFuYWdlX3JvbGVzJyk7XHJcbiAgICBpZiAoIWF1dGhSZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogYXV0aFJlc3VsdC5lcnJvciB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiBhdXRoUmVzdWx0LnN0YXR1cyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBzdXBhYmFzZSwgdXNlciB9ID0gYXV0aFJlc3VsdDtcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgIGNvbnN0IHJvbGVJZCA9IHNlYXJjaFBhcmFtcy5nZXQoJ2lkJyk7XHJcblxyXG4gICAgaWYgKCFyb2xlSWQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdJRCBkZSByb2wgcmVxdWVyaWRvJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBxdWUgZWwgcm9sIGV4aXN0ZSB5IG5vIGVzIGRlbCBzaXN0ZW1hXHJcbiAgICBjb25zdCB7IGRhdGE6IGV4aXN0aW5nUm9sZSwgZXJyb3I6IGZldGNoRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX3JvbGVzJylcclxuICAgICAgLnNlbGVjdCgnKicpXHJcbiAgICAgIC5lcSgnaWQnLCByb2xlSWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICBpZiAoZmV0Y2hFcnJvciB8fCAhZXhpc3RpbmdSb2xlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnUm9sIG5vIGVuY29udHJhZG8nIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4aXN0aW5nUm9sZS5pc19zeXN0ZW1fcm9sZSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ05vIHNlIHB1ZWRlbiBlbGltaW5hciByb2xlcyBkZWwgc2lzdGVtYScgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAzIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZmljYXIgcXVlIG5vIGhheSB1c3VhcmlvcyBjb24gZXN0ZSByb2xcclxuICAgIGNvbnN0IHsgY291bnQgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcclxuICAgICAgLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSlcclxuICAgICAgLmVxKCdyb2xlX2lkJywgcm9sZUlkKTtcclxuXHJcbiAgICBpZiAoY291bnQgJiYgY291bnQgPiAwKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiBgTm8gc2UgcHVlZGUgZWxpbWluYXIgZWwgcm9sLiBIYXkgJHtjb3VudH0gdXN1YXJpbyhzKSBhc2lnbmFkbyhzKSBhIGVzdGUgcm9sLmAgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFbGltaW5hciByb2xcclxuICAgIGNvbnN0IHsgZXJyb3I6IGRlbGV0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgIC5kZWxldGUoKVxyXG4gICAgICAuZXEoJ2lkJywgcm9sZUlkKTtcclxuXHJcbiAgICBpZiAoZGVsZXRlRXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgcm9sZTonLCBkZWxldGVFcnJvcik7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnRXJyb3IgYWwgZWxpbWluYXIgcm9sJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExvZyBhZG1pbiBhY3Rpb25cclxuICAgIGF3YWl0IGxvZ0FkbWluQWN0aW9uKFxyXG4gICAgICB1c2VyLmlkLFxyXG4gICAgICAnREVMRVRFJyxcclxuICAgICAgJ3JvbGUnLFxyXG4gICAgICByb2xlSWQsXHJcbiAgICAgIGV4aXN0aW5nUm9sZSxcclxuICAgICAgbnVsbFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBtZXNzYWdlOiAnUm9sIGVsaW1pbmFkbyBleGl0b3NhbWVudGUnXHJcbiAgICB9KTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIERFTEVURSAvYXBpL2FkbWluL3JvbGVzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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