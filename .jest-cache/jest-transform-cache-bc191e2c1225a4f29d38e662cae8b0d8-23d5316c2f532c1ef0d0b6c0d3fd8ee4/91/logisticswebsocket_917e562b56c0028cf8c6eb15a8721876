bd52442f4e74c93ad66b32f611224742
// =====================================================
// WEBSOCKET: LOGISTICS REAL-TIME SYSTEM
// Descripci√≥n: Sistema WebSocket para tracking tiempo real
// Basado en: WebSocket API + React Context + Event Emitter
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get LogisticsWebSocketClient () {
        return LogisticsWebSocketClient;
    },
    get LogisticsWebSocketSimulator () {
        return LogisticsWebSocketSimulator;
    },
    get getLogisticsWebSocket () {
        return getLogisticsWebSocket;
    }
});
const _events = require("events");
class LogisticsWebSocketClient extends _events.EventEmitter {
    constructor(url){
        super(), this.ws = null, this.reconnectAttempts = 0, this.maxReconnectAttempts = 5, this.reconnectDelay = 1000, this.heartbeatInterval = null, this.isConnected = false, this.subscriptions = new Set();
        this.url = url;
    }
    // =====================================================
    // CONEXI√ìN Y RECONEXI√ìN
    // =====================================================
    connect() {
        return new Promise((resolve, reject)=>{
            try {
                this.ws = new WebSocket(this.url);
                this.ws.onopen = ()=>{
                    console.log('üîó WebSocket conectado');
                    this.isConnected = true;
                    this.reconnectAttempts = 0;
                    this.startHeartbeat();
                    this.resubscribe();
                    this.emit('connected');
                    resolve();
                };
                this.ws.onmessage = (event)=>{
                    try {
                        const message = JSON.parse(event.data);
                        this.handleMessage(message);
                    } catch (error) {
                        console.error('‚ùå Error parsing WebSocket message:', error);
                    }
                };
                this.ws.onclose = (event)=>{
                    console.log('üîå WebSocket desconectado:', event.code, event.reason);
                    this.isConnected = false;
                    this.stopHeartbeat();
                    this.emit('disconnected', event);
                    if (!event.wasClean && this.reconnectAttempts < this.maxReconnectAttempts) {
                        this.scheduleReconnect();
                    }
                };
                this.ws.onerror = (error)=>{
                    console.error('‚ùå WebSocket error:', error);
                    this.emit('error', error);
                    reject(error);
                };
            } catch (error) {
                reject(error);
            }
        });
    }
    scheduleReconnect() {
        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts);
        console.log(`üîÑ Reconectando en ${delay}ms (intento ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);
        setTimeout(()=>{
            this.reconnectAttempts++;
            this.connect().catch(()=>{
                if (this.reconnectAttempts >= this.maxReconnectAttempts) {
                    console.error('‚ùå M√°ximo de intentos de reconexi√≥n alcanzado');
                    this.emit('max_reconnect_attempts');
                }
            });
        }, delay);
    }
    disconnect() {
        if (this.ws) {
            this.ws.close(1000, 'Client disconnect');
            this.ws = null;
        }
        this.stopHeartbeat();
        this.isConnected = false;
    }
    // =====================================================
    // HEARTBEAT
    // =====================================================
    startHeartbeat() {
        this.heartbeatInterval = setInterval(()=>{
            if (this.isConnected && this.ws?.readyState === WebSocket.OPEN) {
                this.send({
                    type: 'ping',
                    data: {},
                    timestamp: new Date().toISOString()
                });
            }
        }, 30000); // 30 segundos
    }
    stopHeartbeat() {
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }
    // =====================================================
    // ENV√çO DE MENSAJES
    // =====================================================
    send(message) {
        if (this.ws?.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(message));
        } else {
            console.warn('‚ö†Ô∏è WebSocket no est√° conectado, mensaje no enviado:', message);
        }
    }
    // =====================================================
    // SUSCRIPCIONES
    // =====================================================
    subscribeToShipment(shipmentId) {
        const subscription = `shipment:${shipmentId}`;
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    unsubscribeFromShipment(shipmentId) {
        const subscription = `shipment:${shipmentId}`;
        this.subscriptions.delete(subscription);
        this.send({
            type: 'unsubscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    subscribeToGeofence(zoneId) {
        const subscription = `geofence:${zoneId}`;
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    subscribeToAlerts() {
        const subscription = 'alerts:all';
        this.subscriptions.add(subscription);
        this.send({
            type: 'subscribe',
            data: {
                subscription
            },
            timestamp: new Date().toISOString()
        });
    }
    resubscribe() {
        this.subscriptions.forEach((subscription)=>{
            this.send({
                type: 'subscribe',
                data: {
                    subscription
                },
                timestamp: new Date().toISOString()
            });
        });
    }
    // =====================================================
    // MANEJO DE MENSAJES
    // =====================================================
    handleMessage(message) {
        console.log('üì® WebSocket message received:', message.type);
        switch(message.type){
            case 'tracking_update':
                this.handleTrackingUpdate(message.data);
                break;
            case 'shipment_status':
                this.handleShipmentStatus(message.data);
                break;
            case 'alert':
                this.handleAlert(message.data);
                break;
            case 'geofence_event':
                this.handleGeofenceEvent(message.data);
                break;
            case 'route_update':
                this.handleRouteUpdate(message.data);
                break;
            default:
                console.log('ü§∑ Unknown message type:', message.type);
        }
        // Emitir evento gen√©rico
        this.emit('message', message);
    }
    handleTrackingUpdate(update) {
        console.log('üìç Tracking update:', update);
        this.emit('tracking_update', update);
    }
    handleShipmentStatus(data) {
        console.log('üì¶ Shipment status update:', data);
        this.emit('shipment_status', data);
    }
    handleAlert(alert) {
        console.log('üö® Alert received:', alert);
        this.emit('alert', alert);
        // Mostrar notificaci√≥n del navegador si est√° permitido (DESHABILITADO EN DESARROLLO)
        if ('Notification' in window && Notification.permission === 'granted' && process.env.NODE_ENV === 'production') {
            new Notification(`Alerta de Log√≠stica - ${alert.type}`, {
                body: alert.message,
                icon: '/favicon.ico',
                tag: alert.id
            });
        }
    }
    handleGeofenceEvent(event) {
        console.log('üó∫Ô∏è Geofence event:', event);
        this.emit('geofence_event', event);
    }
    handleRouteUpdate(data) {
        console.log('üõ£Ô∏è Route update:', data);
        this.emit('route_update', data);
    }
    // =====================================================
    // UTILIDADES
    // =====================================================
    getConnectionState() {
        if (!this.ws) {
            return 'disconnected';
        }
        switch(this.ws.readyState){
            case WebSocket.CONNECTING:
                return 'connecting';
            case WebSocket.OPEN:
                return 'connected';
            case WebSocket.CLOSING:
            case WebSocket.CLOSED:
                return 'disconnected';
            default:
                return 'error';
        }
    }
    isReady() {
        return this.isConnected && this.ws?.readyState === WebSocket.OPEN;
    }
    getSubscriptions() {
        return Array.from(this.subscriptions);
    }
}
// =====================================================
// INSTANCIA SINGLETON
// =====================================================
let logisticsWS = null;
function getLogisticsWebSocket() {
    if (!logisticsWS) {
        // En desarrollo usar WebSocket local, en producci√≥n usar WSS
        const wsUrl = process.env.NODE_ENV === 'development' ? 'ws://localhost:3001/logistics' : 'wss://api.pinteya.com/logistics';
        logisticsWS = new LogisticsWebSocketClient(wsUrl);
    }
    return logisticsWS;
}
class LogisticsWebSocketSimulator extends _events.EventEmitter {
    start() {
        if (this.isRunning) {
            return;
        }
        this.isRunning = true;
        console.log('üé≠ Iniciando simulador WebSocket');
        // Simular actualizaciones de tracking cada 10 segundos
        const trackingInterval = setInterval(()=>{
            this.simulateTrackingUpdate();
        }, 10000);
        // Simular alertas cada 30 segundos
        const alertInterval = setInterval(()=>{
            this.simulateAlert();
        }, 30000);
        // Simular eventos de geofence cada 45 segundos
        const geofenceInterval = setInterval(()=>{
            this.simulateGeofenceEvent();
        }, 45000);
        this.intervals.push(trackingInterval, alertInterval, geofenceInterval);
    }
    stop() {
        this.intervals.forEach((interval)=>clearInterval(interval));
        this.intervals = [];
        this.isRunning = false;
        console.log('üõë Simulador WebSocket detenido');
    }
    simulateTrackingUpdate() {
        const update = {
            shipment_id: Math.floor(Math.random() * 100) + 1,
            location: {
                latitude: -34.6037 + (Math.random() - 0.5) * 0.1,
                longitude: -58.3816 + (Math.random() - 0.5) * 0.1,
                address: 'Av. Corrientes 1234, CABA'
            },
            status: [
                'in_transit',
                'out_for_delivery'
            ][Math.floor(Math.random() * 2)],
            timestamp: new Date().toISOString(),
            courier_id: Math.floor(Math.random() * 4) + 1,
            estimated_arrival: new Date(Date.now() + 3600000).toISOString()
        };
        this.emit('tracking_update', update);
    }
    simulateAlert() {
        const alerts = [
            {
                type: 'delay',
                message: 'Retraso en la entrega debido al tr√°fico'
            },
            {
                type: 'exception',
                message: 'Direcci√≥n incorrecta, contactar cliente'
            },
            {
                type: 'delivery_attempt',
                message: 'Primer intento de entrega fallido'
            }
        ];
        const randomAlert = alerts[Math.floor(Math.random() * alerts.length)];
        const alert = {
            id: `alert_${Date.now()}`,
            type: randomAlert.type,
            severity: [
                'low',
                'medium',
                'high'
            ][Math.floor(Math.random() * 3)],
            shipment_id: Math.floor(Math.random() * 100) + 1,
            message: randomAlert.message,
            timestamp: new Date().toISOString(),
            auto_resolve: Math.random() > 0.5
        };
        this.emit('alert', alert);
    }
    simulateGeofenceEvent() {
        const event = {
            shipment_id: Math.floor(Math.random() * 100) + 1,
            zone_id: [
                'caba',
                'gba_norte'
            ][Math.floor(Math.random() * 2)],
            zone_name: [
                'CABA - Zona Prioritaria',
                'GBA Norte - Zona de Entrega'
            ][Math.floor(Math.random() * 2)],
            event_type: [
                'enter',
                'exit'
            ][Math.floor(Math.random() * 2)],
            location: {
                latitude: -34.6037 + (Math.random() - 0.5) * 0.1,
                longitude: -58.3816 + (Math.random() - 0.5) * 0.1
            },
            timestamp: new Date().toISOString()
        };
        this.emit('geofence_event', event);
    }
    constructor(...args){
        super(...args), this.intervals = [], this.isRunning = false;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFx3ZWJzb2NrZXRzXFxsb2dpc3RpY3Mtd2Vic29ja2V0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBXRUJTT0NLRVQ6IExPR0lTVElDUyBSRUFMLVRJTUUgU1lTVEVNXG4vLyBEZXNjcmlwY2nDs246IFNpc3RlbWEgV2ViU29ja2V0IHBhcmEgdHJhY2tpbmcgdGllbXBvIHJlYWxcbi8vIEJhc2FkbyBlbjogV2ViU29ja2V0IEFQSSArIFJlYWN0IENvbnRleHQgKyBFdmVudCBFbWl0dGVyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBJTlRFUkZBQ0VTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgaW50ZXJmYWNlIFdlYlNvY2tldE1lc3NhZ2Uge1xuICB0eXBlOiAndHJhY2tpbmdfdXBkYXRlJyB8ICdzaGlwbWVudF9zdGF0dXMnIHwgJ2FsZXJ0JyB8ICdnZW9mZW5jZV9ldmVudCcgfCAncm91dGVfdXBkYXRlJ1xuICBkYXRhOiBhbnlcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgc2hpcG1lbnRfaWQ/OiBudW1iZXJcbiAgdXNlcl9pZD86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYWNraW5nVXBkYXRlIHtcbiAgc2hpcG1lbnRfaWQ6IG51bWJlclxuICBsb2NhdGlvbjoge1xuICAgIGxhdGl0dWRlOiBudW1iZXJcbiAgICBsb25naXR1ZGU6IG51bWJlclxuICAgIGFkZHJlc3M/OiBzdHJpbmdcbiAgfVxuICBzdGF0dXM6IHN0cmluZ1xuICB0aW1lc3RhbXA6IHN0cmluZ1xuICBjb3VyaWVyX2lkPzogbnVtYmVyXG4gIGVzdGltYXRlZF9hcnJpdmFsPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VvZmVuY2VFdmVudCB7XG4gIHNoaXBtZW50X2lkOiBudW1iZXJcbiAgem9uZV9pZDogc3RyaW5nXG4gIHpvbmVfbmFtZTogc3RyaW5nXG4gIGV2ZW50X3R5cGU6ICdlbnRlcicgfCAnZXhpdCdcbiAgbG9jYXRpb246IHtcbiAgICBsYXRpdHVkZTogbnVtYmVyXG4gICAgbG9uZ2l0dWRlOiBudW1iZXJcbiAgfVxuICB0aW1lc3RhbXA6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2lzdGljc0FsZXJ0IHtcbiAgaWQ6IHN0cmluZ1xuICB0eXBlOiAnZGVsYXknIHwgJ2V4Y2VwdGlvbicgfCAnZGVsaXZlcnlfYXR0ZW1wdCcgfCAncm91dGVfZGV2aWF0aW9uJ1xuICBzZXZlcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCdcbiAgc2hpcG1lbnRfaWQ6IG51bWJlclxuICBtZXNzYWdlOiBzdHJpbmdcbiAgdGltZXN0YW1wOiBzdHJpbmdcbiAgYXV0b19yZXNvbHZlOiBib29sZWFuXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBXRUJTT0NLRVQgQ0xJRU5UIENMQVNTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgY2xhc3MgTG9naXN0aWNzV2ViU29ja2V0Q2xpZW50IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSB3czogV2ViU29ja2V0IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSB1cmw6IHN0cmluZ1xuICBwcml2YXRlIHJlY29ubmVjdEF0dGVtcHRzID0gMFxuICBwcml2YXRlIG1heFJlY29ubmVjdEF0dGVtcHRzID0gNVxuICBwcml2YXRlIHJlY29ubmVjdERlbGF5ID0gMTAwMFxuICBwcml2YXRlIGhlYXJ0YmVhdEludGVydmFsOiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgaXNDb25uZWN0ZWQgPSBmYWxzZVxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBuZXcgU2V0PHN0cmluZz4oKVxuXG4gIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudXJsID0gdXJsXG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBDT05FWEnDk04gWSBSRUNPTkVYScOTTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGNvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KHRoaXMudXJsKVxuXG4gICAgICAgIHRoaXMud3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SXIFdlYlNvY2tldCBjb25lY3RhZG8nKVxuICAgICAgICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDBcbiAgICAgICAgICB0aGlzLnN0YXJ0SGVhcnRiZWF0KClcbiAgICAgICAgICB0aGlzLnJlc3Vic2NyaWJlKClcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3RlZCcpXG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGV2ZW50ID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZTogV2ViU29ja2V0TWVzc2FnZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSlcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZShtZXNzYWdlKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgcGFyc2luZyBXZWJTb2NrZXQgbWVzc2FnZTonLCBlcnJvcilcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSBldmVudCA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflIwgV2ViU29ja2V0IGRlc2NvbmVjdGFkbzonLCBldmVudC5jb2RlLCBldmVudC5yZWFzb24pXG4gICAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICAgICAgdGhpcy5zdG9wSGVhcnRiZWF0KClcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3RlZCcsIGV2ZW50KVxuXG4gICAgICAgICAgaWYgKCFldmVudC53YXNDbGVhbiAmJiB0aGlzLnJlY29ubmVjdEF0dGVtcHRzIDwgdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZVJlY29ubmVjdCgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53cy5vbmVycm9yID0gZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBXZWJTb2NrZXQgZXJyb3I6JywgZXJyb3IpXG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKVxuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlUmVjb25uZWN0KCk6IHZvaWQge1xuICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5yZWNvbm5lY3REZWxheSAqIE1hdGgucG93KDIsIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMpXG4gICAgY29uc29sZS5sb2coXG4gICAgICBg8J+UhCBSZWNvbmVjdGFuZG8gZW4gJHtkZWxheX1tcyAoaW50ZW50byAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHMgKyAxfS8ke3RoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHN9KWBcbiAgICApXG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMrK1xuICAgICAgdGhpcy5jb25uZWN0KCkuY2F0Y2goKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA+PSB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIE3DoXhpbW8gZGUgaW50ZW50b3MgZGUgcmVjb25leGnDs24gYWxjYW56YWRvJylcbiAgICAgICAgICB0aGlzLmVtaXQoJ21heF9yZWNvbm5lY3RfYXR0ZW1wdHMnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGRlbGF5KVxuICB9XG5cbiAgZGlzY29ubmVjdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy53cykge1xuICAgICAgdGhpcy53cy5jbG9zZSgxMDAwLCAnQ2xpZW50IGRpc2Nvbm5lY3QnKVxuICAgICAgdGhpcy53cyA9IG51bGxcbiAgICB9XG4gICAgdGhpcy5zdG9wSGVhcnRiZWF0KClcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2VcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEhFQVJUQkVBVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHByaXZhdGUgc3RhcnRIZWFydGJlYXQoKTogdm9pZCB7XG4gICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkICYmIHRoaXMud3M/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgdHlwZTogJ3BpbmcnLFxuICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIDMwMDAwKSAvLyAzMCBzZWd1bmRvc1xuICB9XG5cbiAgcHJpdmF0ZSBzdG9wSGVhcnRiZWF0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmhlYXJ0YmVhdEludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwpXG4gICAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEVOVsONTyBERSBNRU5TQUpFU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHByaXZhdGUgc2VuZChtZXNzYWdlOiBXZWJTb2NrZXRNZXNzYWdlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMud3M/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICB0aGlzLndzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFdlYlNvY2tldCBubyBlc3TDoSBjb25lY3RhZG8sIG1lbnNhamUgbm8gZW52aWFkbzonLCBtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFNVU0NSSVBDSU9ORVNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBzdWJzY3JpYmVUb1NoaXBtZW50KHNoaXBtZW50SWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGBzaGlwbWVudDoke3NoaXBtZW50SWR9YFxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKVxuXG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLFxuICAgICAgZGF0YTogeyBzdWJzY3JpcHRpb24gfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0pXG4gIH1cblxuICB1bnN1YnNjcmliZUZyb21TaGlwbWVudChzaGlwbWVudElkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBgc2hpcG1lbnQ6JHtzaGlwbWVudElkfWBcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKHN1YnNjcmlwdGlvbilcblxuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLFxuICAgICAgZGF0YTogeyBzdWJzY3JpcHRpb24gfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0pXG4gIH1cblxuICBzdWJzY3JpYmVUb0dlb2ZlbmNlKHpvbmVJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYGdlb2ZlbmNlOiR7em9uZUlkfWBcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGlvbilcblxuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAnc3Vic2NyaWJlJyxcbiAgICAgIGRhdGE6IHsgc3Vic2NyaXB0aW9uIH0sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KVxuICB9XG5cbiAgc3Vic2NyaWJlVG9BbGVydHMoKTogdm9pZCB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gJ2FsZXJ0czphbGwnXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpcHRpb24pXG5cbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ3N1YnNjcmliZScsXG4gICAgICBkYXRhOiB7IHN1YnNjcmlwdGlvbiB9LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgcmVzdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHtcbiAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLFxuICAgICAgICBkYXRhOiB7IHN1YnNjcmlwdGlvbiB9LFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIE1BTkVKTyBERSBNRU5TQUpFU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHByaXZhdGUgaGFuZGxlTWVzc2FnZShtZXNzYWdlOiBXZWJTb2NrZXRNZXNzYWdlKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ/Cfk6ggV2ViU29ja2V0IG1lc3NhZ2UgcmVjZWl2ZWQ6JywgbWVzc2FnZS50eXBlKVxuXG4gICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RyYWNraW5nX3VwZGF0ZSc6XG4gICAgICAgIHRoaXMuaGFuZGxlVHJhY2tpbmdVcGRhdGUobWVzc2FnZS5kYXRhIGFzIFRyYWNraW5nVXBkYXRlKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdzaGlwbWVudF9zdGF0dXMnOlxuICAgICAgICB0aGlzLmhhbmRsZVNoaXBtZW50U3RhdHVzKG1lc3NhZ2UuZGF0YSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnYWxlcnQnOlxuICAgICAgICB0aGlzLmhhbmRsZUFsZXJ0KG1lc3NhZ2UuZGF0YSBhcyBMb2dpc3RpY3NBbGVydClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnZ2VvZmVuY2VfZXZlbnQnOlxuICAgICAgICB0aGlzLmhhbmRsZUdlb2ZlbmNlRXZlbnQobWVzc2FnZS5kYXRhIGFzIEdlb2ZlbmNlRXZlbnQpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3JvdXRlX3VwZGF0ZSc6XG4gICAgICAgIHRoaXMuaGFuZGxlUm91dGVVcGRhdGUobWVzc2FnZS5kYXRhKVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLmxvZygn8J+ktyBVbmtub3duIG1lc3NhZ2UgdHlwZTonLCBtZXNzYWdlLnR5cGUpXG4gICAgfVxuXG4gICAgLy8gRW1pdGlyIGV2ZW50byBnZW7DqXJpY29cbiAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBtZXNzYWdlKVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUcmFja2luZ1VwZGF0ZSh1cGRhdGU6IFRyYWNraW5nVXBkYXRlKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ/Cfk40gVHJhY2tpbmcgdXBkYXRlOicsIHVwZGF0ZSlcbiAgICB0aGlzLmVtaXQoJ3RyYWNraW5nX3VwZGF0ZScsIHVwZGF0ZSlcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2hpcG1lbnRTdGF0dXMoZGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ/Cfk6YgU2hpcG1lbnQgc3RhdHVzIHVwZGF0ZTonLCBkYXRhKVxuICAgIHRoaXMuZW1pdCgnc2hpcG1lbnRfc3RhdHVzJywgZGF0YSlcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQWxlcnQoYWxlcnQ6IExvZ2lzdGljc0FsZXJ0KTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ/CfmqggQWxlcnQgcmVjZWl2ZWQ6JywgYWxlcnQpXG4gICAgdGhpcy5lbWl0KCdhbGVydCcsIGFsZXJ0KVxuXG4gICAgLy8gTW9zdHJhciBub3RpZmljYWNpw7NuIGRlbCBuYXZlZ2Fkb3Igc2kgZXN0w6EgcGVybWl0aWRvIChERVNIQUJJTElUQURPIEVOIERFU0FSUk9MTE8pXG4gICAgaWYgKFxuICAgICAgJ05vdGlmaWNhdGlvbicgaW4gd2luZG93ICYmXG4gICAgICBOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgKSB7XG4gICAgICBuZXcgTm90aWZpY2F0aW9uKGBBbGVydGEgZGUgTG9nw61zdGljYSAtICR7YWxlcnQudHlwZX1gLCB7XG4gICAgICAgIGJvZHk6IGFsZXJ0Lm1lc3NhZ2UsXG4gICAgICAgIGljb246ICcvZmF2aWNvbi5pY28nLFxuICAgICAgICB0YWc6IGFsZXJ0LmlkLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUdlb2ZlbmNlRXZlbnQoZXZlbnQ6IEdlb2ZlbmNlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygn8J+Xuu+4jyBHZW9mZW5jZSBldmVudDonLCBldmVudClcbiAgICB0aGlzLmVtaXQoJ2dlb2ZlbmNlX2V2ZW50JywgZXZlbnQpXG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVJvdXRlVXBkYXRlKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCfwn5uj77iPIFJvdXRlIHVwZGF0ZTonLCBkYXRhKVxuICAgIHRoaXMuZW1pdCgncm91dGVfdXBkYXRlJywgZGF0YSlcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFVUSUxJREFERVNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBnZXRDb25uZWN0aW9uU3RhdGUoKTogJ2Nvbm5lY3RpbmcnIHwgJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcicge1xuICAgIGlmICghdGhpcy53cykge1xuICAgICAgcmV0dXJuICdkaXNjb25uZWN0ZWQnXG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLndzLnJlYWR5U3RhdGUpIHtcbiAgICAgIGNhc2UgV2ViU29ja2V0LkNPTk5FQ1RJTkc6XG4gICAgICAgIHJldHVybiAnY29ubmVjdGluZydcbiAgICAgIGNhc2UgV2ViU29ja2V0Lk9QRU46XG4gICAgICAgIHJldHVybiAnY29ubmVjdGVkJ1xuICAgICAgY2FzZSBXZWJTb2NrZXQuQ0xPU0lORzpcbiAgICAgIGNhc2UgV2ViU29ja2V0LkNMT1NFRDpcbiAgICAgICAgcmV0dXJuICdkaXNjb25uZWN0ZWQnXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ2Vycm9yJ1xuICAgIH1cbiAgfVxuXG4gIGlzUmVhZHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNDb25uZWN0ZWQgJiYgdGhpcy53cz8ucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU5cbiAgfVxuXG4gIGdldFN1YnNjcmlwdGlvbnMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuc3Vic2NyaXB0aW9ucylcbiAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gSU5TVEFOQ0lBIFNJTkdMRVRPTlxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxubGV0IGxvZ2lzdGljc1dTOiBMb2dpc3RpY3NXZWJTb2NrZXRDbGllbnQgfCBudWxsID0gbnVsbFxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9naXN0aWNzV2ViU29ja2V0KCk6IExvZ2lzdGljc1dlYlNvY2tldENsaWVudCB7XG4gIGlmICghbG9naXN0aWNzV1MpIHtcbiAgICAvLyBFbiBkZXNhcnJvbGxvIHVzYXIgV2ViU29ja2V0IGxvY2FsLCBlbiBwcm9kdWNjacOzbiB1c2FyIFdTU1xuICAgIGNvbnN0IHdzVXJsID1cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnXG4gICAgICAgID8gJ3dzOi8vbG9jYWxob3N0OjMwMDEvbG9naXN0aWNzJ1xuICAgICAgICA6ICd3c3M6Ly9hcGkucGludGV5YS5jb20vbG9naXN0aWNzJ1xuXG4gICAgbG9naXN0aWNzV1MgPSBuZXcgTG9naXN0aWNzV2ViU29ja2V0Q2xpZW50KHdzVXJsKVxuICB9XG5cbiAgcmV0dXJuIGxvZ2lzdGljc1dTXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTSU1VTEFET1IgUEFSQSBERVNBUlJPTExPXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgY2xhc3MgTG9naXN0aWNzV2ViU29ja2V0U2ltdWxhdG9yIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSBpbnRlcnZhbHM6IE5vZGVKUy5UaW1lb3V0W10gPSBbXVxuICBwcml2YXRlIGlzUnVubmluZyA9IGZhbHNlXG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmlzUnVubmluZyA9IHRydWVcbiAgICBjb25zb2xlLmxvZygn8J+OrSBJbmljaWFuZG8gc2ltdWxhZG9yIFdlYlNvY2tldCcpXG5cbiAgICAvLyBTaW11bGFyIGFjdHVhbGl6YWNpb25lcyBkZSB0cmFja2luZyBjYWRhIDEwIHNlZ3VuZG9zXG4gICAgY29uc3QgdHJhY2tpbmdJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuc2ltdWxhdGVUcmFja2luZ1VwZGF0ZSgpXG4gICAgfSwgMTAwMDApXG5cbiAgICAvLyBTaW11bGFyIGFsZXJ0YXMgY2FkYSAzMCBzZWd1bmRvc1xuICAgIGNvbnN0IGFsZXJ0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnNpbXVsYXRlQWxlcnQoKVxuICAgIH0sIDMwMDAwKVxuXG4gICAgLy8gU2ltdWxhciBldmVudG9zIGRlIGdlb2ZlbmNlIGNhZGEgNDUgc2VndW5kb3NcbiAgICBjb25zdCBnZW9mZW5jZUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5zaW11bGF0ZUdlb2ZlbmNlRXZlbnQoKVxuICAgIH0sIDQ1MDAwKVxuXG4gICAgdGhpcy5pbnRlcnZhbHMucHVzaCh0cmFja2luZ0ludGVydmFsLCBhbGVydEludGVydmFsLCBnZW9mZW5jZUludGVydmFsKVxuICB9XG5cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLmludGVydmFscy5mb3JFYWNoKGludGVydmFsID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpKVxuICAgIHRoaXMuaW50ZXJ2YWxzID0gW11cbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlXG4gICAgY29uc29sZS5sb2coJ/Cfm5EgU2ltdWxhZG9yIFdlYlNvY2tldCBkZXRlbmlkbycpXG4gIH1cblxuICBwcml2YXRlIHNpbXVsYXRlVHJhY2tpbmdVcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3QgdXBkYXRlOiBUcmFja2luZ1VwZGF0ZSA9IHtcbiAgICAgIHNoaXBtZW50X2lkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMSxcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGxhdGl0dWRlOiAtMzQuNjAzNyArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMSxcbiAgICAgICAgbG9uZ2l0dWRlOiAtNTguMzgxNiArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMSxcbiAgICAgICAgYWRkcmVzczogJ0F2LiBDb3JyaWVudGVzIDEyMzQsIENBQkEnLFxuICAgICAgfSxcbiAgICAgIHN0YXR1czogWydpbl90cmFuc2l0JywgJ291dF9mb3JfZGVsaXZlcnknXVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKV0sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNvdXJpZXJfaWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpICsgMSxcbiAgICAgIGVzdGltYXRlZF9hcnJpdmFsOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzYwMDAwMCkudG9JU09TdHJpbmcoKSxcbiAgICB9XG5cbiAgICB0aGlzLmVtaXQoJ3RyYWNraW5nX3VwZGF0ZScsIHVwZGF0ZSlcbiAgfVxuXG4gIHByaXZhdGUgc2ltdWxhdGVBbGVydCgpOiB2b2lkIHtcbiAgICBjb25zdCBhbGVydHMgPSBbXG4gICAgICB7IHR5cGU6ICdkZWxheScsIG1lc3NhZ2U6ICdSZXRyYXNvIGVuIGxhIGVudHJlZ2EgZGViaWRvIGFsIHRyw6FmaWNvJyB9LFxuICAgICAgeyB0eXBlOiAnZXhjZXB0aW9uJywgbWVzc2FnZTogJ0RpcmVjY2nDs24gaW5jb3JyZWN0YSwgY29udGFjdGFyIGNsaWVudGUnIH0sXG4gICAgICB7IHR5cGU6ICdkZWxpdmVyeV9hdHRlbXB0JywgbWVzc2FnZTogJ1ByaW1lciBpbnRlbnRvIGRlIGVudHJlZ2EgZmFsbGlkbycgfSxcbiAgICBdXG5cbiAgICBjb25zdCByYW5kb21BbGVydCA9IGFsZXJ0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGVydHMubGVuZ3RoKV1cblxuICAgIGNvbnN0IGFsZXJ0OiBMb2dpc3RpY3NBbGVydCA9IHtcbiAgICAgIGlkOiBgYWxlcnRfJHtEYXRlLm5vdygpfWAsXG4gICAgICB0eXBlOiByYW5kb21BbGVydC50eXBlIGFzIGFueSxcbiAgICAgIHNldmVyaXR5OiBbJ2xvdycsICdtZWRpdW0nLCAnaGlnaCddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpXSBhcyBhbnksXG4gICAgICBzaGlwbWVudF9pZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSArIDEsXG4gICAgICBtZXNzYWdlOiByYW5kb21BbGVydC5tZXNzYWdlLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBhdXRvX3Jlc29sdmU6IE1hdGgucmFuZG9tKCkgPiAwLjUsXG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdhbGVydCcsIGFsZXJ0KVxuICB9XG5cbiAgcHJpdmF0ZSBzaW11bGF0ZUdlb2ZlbmNlRXZlbnQoKTogdm9pZCB7XG4gICAgY29uc3QgZXZlbnQ6IEdlb2ZlbmNlRXZlbnQgPSB7XG4gICAgICBzaGlwbWVudF9pZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSArIDEsXG4gICAgICB6b25lX2lkOiBbJ2NhYmEnLCAnZ2JhX25vcnRlJ11bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildLFxuICAgICAgem9uZV9uYW1lOiBbJ0NBQkEgLSBab25hIFByaW9yaXRhcmlhJywgJ0dCQSBOb3J0ZSAtIFpvbmEgZGUgRW50cmVnYSddW1xuICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKVxuICAgICAgXSxcbiAgICAgIGV2ZW50X3R5cGU6IFsnZW50ZXInLCAnZXhpdCddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXSBhcyBhbnksXG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBsYXRpdHVkZTogLTM0LjYwMzcgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjEsXG4gICAgICAgIGxvbmdpdHVkZTogLTU4LjM4MTYgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjEsXG4gICAgICB9LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdnZW9mZW5jZV9ldmVudCcsIGV2ZW50KVxuICB9XG59XG4iXSwibmFtZXMiOlsiTG9naXN0aWNzV2ViU29ja2V0Q2xpZW50IiwiTG9naXN0aWNzV2ViU29ja2V0U2ltdWxhdG9yIiwiZ2V0TG9naXN0aWNzV2ViU29ja2V0IiwiRXZlbnRFbWl0dGVyIiwidXJsIiwid3MiLCJyZWNvbm5lY3RBdHRlbXB0cyIsIm1heFJlY29ubmVjdEF0dGVtcHRzIiwicmVjb25uZWN0RGVsYXkiLCJoZWFydGJlYXRJbnRlcnZhbCIsImlzQ29ubmVjdGVkIiwic3Vic2NyaXB0aW9ucyIsIlNldCIsImNvbm5lY3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIldlYlNvY2tldCIsIm9ub3BlbiIsImNvbnNvbGUiLCJsb2ciLCJzdGFydEhlYXJ0YmVhdCIsInJlc3Vic2NyaWJlIiwiZW1pdCIsIm9ubWVzc2FnZSIsImV2ZW50IiwibWVzc2FnZSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJoYW5kbGVNZXNzYWdlIiwiZXJyb3IiLCJvbmNsb3NlIiwiY29kZSIsInJlYXNvbiIsInN0b3BIZWFydGJlYXQiLCJ3YXNDbGVhbiIsInNjaGVkdWxlUmVjb25uZWN0Iiwib25lcnJvciIsImRlbGF5IiwiTWF0aCIsInBvdyIsInNldFRpbWVvdXQiLCJjYXRjaCIsImRpc2Nvbm5lY3QiLCJjbG9zZSIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJzZW5kIiwidHlwZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNsZWFySW50ZXJ2YWwiLCJzdHJpbmdpZnkiLCJ3YXJuIiwic3Vic2NyaWJlVG9TaGlwbWVudCIsInNoaXBtZW50SWQiLCJzdWJzY3JpcHRpb24iLCJhZGQiLCJ1bnN1YnNjcmliZUZyb21TaGlwbWVudCIsImRlbGV0ZSIsInN1YnNjcmliZVRvR2VvZmVuY2UiLCJ6b25lSWQiLCJzdWJzY3JpYmVUb0FsZXJ0cyIsImZvckVhY2giLCJoYW5kbGVUcmFja2luZ1VwZGF0ZSIsImhhbmRsZVNoaXBtZW50U3RhdHVzIiwiaGFuZGxlQWxlcnQiLCJoYW5kbGVHZW9mZW5jZUV2ZW50IiwiaGFuZGxlUm91dGVVcGRhdGUiLCJ1cGRhdGUiLCJhbGVydCIsIndpbmRvdyIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJib2R5IiwiaWNvbiIsInRhZyIsImlkIiwiZ2V0Q29ubmVjdGlvblN0YXRlIiwiQ09OTkVDVElORyIsIkNMT1NJTkciLCJDTE9TRUQiLCJpc1JlYWR5IiwiZ2V0U3Vic2NyaXB0aW9ucyIsIkFycmF5IiwiZnJvbSIsImxvZ2lzdGljc1dTIiwid3NVcmwiLCJzdGFydCIsImlzUnVubmluZyIsInRyYWNraW5nSW50ZXJ2YWwiLCJzaW11bGF0ZVRyYWNraW5nVXBkYXRlIiwiYWxlcnRJbnRlcnZhbCIsInNpbXVsYXRlQWxlcnQiLCJnZW9mZW5jZUludGVydmFsIiwic2ltdWxhdGVHZW9mZW5jZUV2ZW50IiwiaW50ZXJ2YWxzIiwicHVzaCIsInN0b3AiLCJpbnRlcnZhbCIsInNoaXBtZW50X2lkIiwiZmxvb3IiLCJyYW5kb20iLCJsb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYWRkcmVzcyIsInN0YXR1cyIsImNvdXJpZXJfaWQiLCJlc3RpbWF0ZWRfYXJyaXZhbCIsIm5vdyIsImFsZXJ0cyIsInJhbmRvbUFsZXJ0IiwibGVuZ3RoIiwic2V2ZXJpdHkiLCJhdXRvX3Jlc29sdmUiLCJ6b25lX2lkIiwiem9uZV9uYW1lIiwiZXZlbnRfdHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEsd0RBQXdEO0FBQ3hELHdDQUF3QztB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