{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useOrdersEnterprise.test.js"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - USE ORDERS ENTERPRISE HOOK TESTS\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { useOrdersEnterprise, useOrderDetail } from '@/hooks/useOrdersEnterprise'\nimport { mockOrders, createMockFetch, resetAllMocks } from '../setup/orders-mocks'\n\n// ===================================\n// SETUP MOCKS\n// ===================================\n\nconst mockFetch = createMockFetch()\nglobal.fetch = mockFetch\n\n// ===================================\n// TESTS BÁSICOS useOrdersEnterprise\n// ===================================\n\ndescribe('useOrdersEnterprise', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should initialize with default state', async () => {\n    // Arrange & Act\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Assert initial state\n    expect(result.current.orders).toEqual([])\n    expect(result.current.loading).toBe(true)\n    expect(result.current.error).toBe(null)\n    expect(result.current.filters).toEqual({\n      page: 1,\n      limit: 20,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n    })\n  })\n\n  test('should fetch orders on mount', async () => {\n    // Arrange & Act\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/orders'))\n    expect(result.current.orders).toEqual(mockOrders)\n    expect(result.current.error).toBe(null)\n  })\n\n  test('should handle fetch errors', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() =>\n      Promise.resolve({\n        ok: false,\n        status: 500,\n        json: () => Promise.resolve({ error: 'Server error' }),\n      })\n    )\n\n    // Act\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Assert\n    expect(result.current.error).toBe('Error al cargar órdenes')\n    expect(result.current.orders).toEqual([])\n  })\n\n  test('should accept initial filters', async () => {\n    // Arrange\n    const initialFilters = {\n      status: 'pending',\n      page: 2,\n      limit: 10,\n    }\n\n    // Act\n    const { result } = renderHook(() => useOrdersEnterprise(initialFilters))\n\n    // Assert\n    expect(result.current.filters).toEqual({\n      page: 2,\n      limit: 10,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n      status: 'pending',\n    })\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('status=pending'))\n    })\n  })\n})\n\n// ===================================\n// TESTS DE FILTROS\n// ===================================\n\ndescribe('useOrdersEnterprise - Filters', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should update search filter', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setSearch('test search')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('search=test'))\n  })\n\n  test('should update status filter', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setStatus('pending')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('status=pending'))\n  })\n\n  test('should update payment status filter', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setPaymentStatus('paid')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('payment_status=paid'))\n  })\n\n  test('should update sorting', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setSorting('total_amount', 'asc')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('sort_by=total_amount'))\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('sort_order=asc'))\n  })\n\n  test('should update date range', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setDateRange('2024-01-01', '2024-01-31')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('date_from=2024-01-01'))\n  })\n\n  test('should clear all filters', async () => {\n    // Arrange\n    const { result } = renderHook(() =>\n      useOrdersEnterprise({\n        status: 'pending',\n        search: 'test',\n        page: 3,\n      })\n    )\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.clearFilters()\n    })\n\n    // Assert - Verificar que se llamó a fetch con filtros limpiados\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('/api/admin/orders'))\n  })\n})\n\n// ===================================\n// TESTS DE PAGINACIÓN\n// ===================================\n\ndescribe('useOrdersEnterprise - Pagination', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should handle page changes', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      result.current.setPage(2)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('page=2'))\n  })\n\n  test('should provide pagination helpers', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() =>\n      Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () =>\n          Promise.resolve({\n            data: {\n              orders: mockOrders,\n              pagination: {\n                page: 2,\n                limit: 20,\n                total: 50,\n                totalPages: 3,\n                hasNextPage: true,\n                hasPreviousPage: true,\n              },\n              filters: {},\n            },\n            success: true,\n            error: null,\n          }),\n      })\n    )\n\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Assert pagination helpers\n    expect(result.current.hasNextPage).toBe(true)\n    expect(result.current.hasPreviousPage).toBe(true)\n    expect(result.current.totalOrders).toBe(50)\n    expect(result.current.currentPage).toBe(2)\n    expect(result.current.totalPages).toBe(3)\n  })\n})\n\n// ===================================\n// TESTS DE OPERACIONES CRUD\n// ===================================\n\ndescribe('useOrdersEnterprise - CRUD Operations', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should create order', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    const orderData = {\n      user_id: 'test-user-id',\n      items: [{ product_id: 1, quantity: 1, unit_price: 15000 }],\n    }\n\n    // Act\n    let createdOrder\n    await act(async () => {\n      createdOrder = await result.current.createOrder(orderData)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders',\n      expect.objectContaining({\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData),\n      })\n    )\n    expect(createdOrder).toBeDefined()\n  })\n\n  test('should update order', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    const updateData = { notes: 'Updated notes' }\n\n    // Act\n    let updatedOrder\n    await act(async () => {\n      updatedOrder = await result.current.updateOrder('order-1', updateData)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders/order-1',\n      expect.objectContaining({\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updateData),\n      })\n    )\n    expect(updatedOrder).toBeDefined()\n  })\n\n  test('should change order status', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    await act(async () => {\n      await result.current.changeOrderStatus('order-1', 'confirmed', 'Payment confirmed')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders/order-1/status',\n      expect.objectContaining({\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          status: 'confirmed',\n          reason: 'Payment confirmed',\n        }),\n      })\n    )\n  })\n\n  test('should handle bulk status update', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    const bulkData = {\n      order_ids: ['order-1', 'order-2'],\n      status: 'confirmed',\n      reason: 'Bulk confirmation',\n    }\n\n    // Act\n    let bulkResult\n    await act(async () => {\n      bulkResult = await result.current.bulkUpdateStatus(bulkData)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders/bulk?operation=status_update',\n      expect.objectContaining({\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(bulkData),\n      })\n    )\n    expect(bulkResult).toBeDefined()\n  })\n\n  test('should export orders', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    let exportResult\n    await act(async () => {\n      exportResult = await result.current.exportOrders('csv')\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith(\n      '/api/admin/orders/bulk?operation=export',\n      expect.objectContaining({\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          format: 'csv',\n          filters: result.current.filters,\n          include_items: true,\n        }),\n      })\n    )\n    expect(exportResult).toBeDefined()\n  })\n})\n\n// ===================================\n// TESTS DE UTILIDADES\n// ===================================\n\ndescribe('useOrdersEnterprise - Utilities', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should get order by id', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    const order = result.current.getOrderById('order-1')\n\n    // Assert\n    expect(order).toEqual(mockOrders[0])\n  })\n\n  test('should get orders by status', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    const pendingOrders = result.current.getOrdersByStatus('pending')\n\n    // Assert\n    expect(pendingOrders).toEqual(mockOrders.filter(order => order.status === 'pending'))\n  })\n\n  test('should calculate total revenue', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    const totalRevenue = result.current.getTotalRevenue()\n\n    // Assert\n    const expectedRevenue = mockOrders\n      .filter(order => order.status !== 'cancelled')\n      .reduce((sum, order) => sum + order.total_amount, 0)\n    expect(totalRevenue).toBe(expectedRevenue)\n  })\n\n  test('should calculate average order value', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Act\n    const avgOrderValue = result.current.getAverageOrderValue()\n\n    // Assert\n    const validOrders = mockOrders.filter(order => order.status !== 'cancelled')\n    const expectedAvg =\n      validOrders.reduce((sum, order) => sum + order.total_amount, 0) / validOrders.length\n    expect(avgOrderValue).toBe(expectedAvg)\n  })\n\n  test('should refresh data', async () => {\n    // Arrange\n    const { result } = renderHook(() => useOrdersEnterprise())\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    const initialCallCount = mockFetch.mock.calls.length\n\n    // Act\n    await act(async () => {\n      result.current.refresh()\n    })\n\n    // Assert\n    expect(mockFetch.mock.calls.length).toBe(initialCallCount + 1)\n  })\n})\n\n// ===================================\n// TESTS useOrderDetail\n// ===================================\n\ndescribe('useOrderDetail', () => {\n  beforeEach(() => {\n    resetAllMocks()\n    mockFetch.mockClear()\n  })\n\n  test('should fetch order detail', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() =>\n      Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () =>\n          Promise.resolve({\n            data: {\n              order: mockOrders[0],\n              statusHistory: [],\n              notes: [],\n            },\n            success: true,\n            error: null,\n          }),\n      })\n    )\n\n    // Act\n    const { result } = renderHook(() => useOrderDetail('order-1'))\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Assert\n    expect(mockFetch).toHaveBeenCalledWith('/api/admin/orders/order-1')\n    expect(result.current.order).toEqual(mockOrders[0])\n    expect(result.current.error).toBe(null)\n  })\n\n  test('should handle fetch error', async () => {\n    // Arrange\n    mockFetch.mockImplementationOnce(() =>\n      Promise.resolve({\n        ok: false,\n        status: 404,\n        json: () => Promise.resolve({ error: 'Order not found' }),\n      })\n    )\n\n    // Act\n    const { result } = renderHook(() => useOrderDetail('order-1'))\n\n    // Wait for fetch to complete\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    // Assert\n    expect(result.current.error).toBe('Order not found')\n    expect(result.current.order).toBe(null)\n  })\n\n  test('should not fetch if no orderId provided', async () => {\n    // Arrange & Act\n    const { result } = renderHook(() => useOrderDetail(''))\n\n    // Wait a bit to ensure no fetch is made\n    await new Promise(resolve => setTimeout(resolve, 100))\n\n    // Assert\n    expect(mockFetch).not.toHaveBeenCalled()\n    expect(result.current.loading).toBe(true)\n  })\n\n  test('should refresh order detail', async () => {\n    // Arrange\n    mockFetch.mockImplementation(() =>\n      Promise.resolve({\n        ok: true,\n        status: 200,\n        json: () =>\n          Promise.resolve({\n            data: {\n              order: mockOrders[0],\n              statusHistory: [],\n              notes: [],\n            },\n            success: true,\n            error: null,\n          }),\n      })\n    )\n\n    const { result } = renderHook(() => useOrderDetail('order-1'))\n\n    // Wait for initial fetch\n    await waitFor(() => {\n      expect(result.current.loading).toBe(false)\n    })\n\n    const initialCallCount = mockFetch.mock.calls.length\n\n    // Act\n    await act(async () => {\n      result.current.refresh()\n    })\n\n    // Assert\n    expect(mockFetch.mock.calls.length).toBe(initialCallCount + 1)\n  })\n})\n"],"names":["mockFetch","createMockFetch","global","fetch","describe","beforeEach","resetAllMocks","mockClear","test","result","renderHook","useOrdersEnterprise","expect","current","orders","toEqual","loading","toBe","error","filters","page","limit","sort_by","sort_order","waitFor","toHaveBeenCalledWith","stringContaining","mockOrders","mockImplementationOnce","Promise","resolve","ok","status","json","initialFilters","act","setSearch","setStatus","setPaymentStatus","setSorting","setDateRange","search","clearFilters","setPage","data","pagination","total","totalPages","hasNextPage","hasPreviousPage","success","totalOrders","currentPage","orderData","user_id","items","product_id","quantity","unit_price","createdOrder","createOrder","objectContaining","method","headers","body","JSON","stringify","toBeDefined","updateData","notes","updatedOrder","updateOrder","changeOrderStatus","reason","bulkData","order_ids","bulkResult","bulkUpdateStatus","exportResult","exportOrders","format","include_items","order","getOrderById","pendingOrders","getOrdersByStatus","filter","totalRevenue","getTotalRevenue","expectedRevenue","reduce","sum","total_amount","avgOrderValue","getAverageOrderValue","validOrders","expectedAvg","length","initialCallCount","mock","calls","refresh","statusHistory","useOrderDetail","setTimeout","not","toHaveBeenCalled","mockImplementation"],"mappings":"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"}