5d687eefc013809587ba9a6249dd1cda
/**
 * Utilidades para manejo seguro de JSON
 * Previene errores de parsing con datos corruptos o malformados
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get STORAGE_KEYS () {
        return STORAGE_KEYS;
    },
    get cleanCorruptedLocalStorage () {
        return cleanCorruptedLocalStorage;
    },
    get initializeJsonSafety () {
        return initializeJsonSafety;
    },
    get safeApiResponseJson () {
        return safeApiResponseJson;
    },
    get safeJsonParse () {
        return safeJsonParse;
    },
    get safeJsonStringify () {
        return safeJsonStringify;
    },
    get safeLocalStorageGet () {
        return safeLocalStorageGet;
    },
    get safeLocalStorageSet () {
        return safeLocalStorageSet;
    }
});
function safeJsonParse(jsonString) {
    // Validaciones b√°sicas
    if (!jsonString) {
        return {
            success: false,
            data: null,
            error: 'JSON string is null or undefined'
        };
    }
    // Limpiar string
    const trimmed = jsonString.trim();
    // Detectar casos problem√°ticos
    if (trimmed === '' || trimmed === '""' || trimmed === "''" || trimmed === 'null' || trimmed === 'undefined') {
        return {
            success: false,
            data: null,
            error: 'JSON string is empty or invalid'
        };
    }
    // Detectar comillas dobles corruptas
    if (trimmed.includes('""') && trimmed.length < 5) {
        return {
            success: false,
            data: null,
            error: 'Detected corrupted JSON with empty quotes'
        };
    }
    // Intentar parsear
    try {
        const parsed = JSON.parse(trimmed);
        return {
            success: true,
            data: parsed,
            error: undefined
        };
    } catch (error) {
        return {
            success: false,
            data: null,
            error: error instanceof Error ? error.message : 'Unknown JSON parse error'
        };
    }
}
function safeJsonStringify(data, space) {
    try {
        const result = JSON.stringify(data, null, space);
        return {
            success: true,
            data: result,
            error: undefined
        };
    } catch (error) {
        // Intentar con replacer para objetos circulares
        try {
            const seen = new WeakSet();
            const result = JSON.stringify(data, (key, value)=>{
                if (typeof value === 'object' && value !== null) {
                    if (seen.has(value)) {
                        return '[Circular Reference]';
                    }
                    seen.add(value);
                }
                return value;
            }, space);
            return {
                success: true,
                data: result,
                error: undefined
            };
        } catch (fallbackError) {
            return {
                success: false,
                data: null,
                error: fallbackError instanceof Error ? fallbackError.message : 'Unknown JSON stringify error'
            };
        }
    }
}
function safeLocalStorageGet(key) {
    if (typeof window === 'undefined') {
        return {
            success: false,
            data: null,
            error: 'localStorage not available (SSR)'
        };
    }
    try {
        const stored = localStorage.getItem(key);
        if (!stored) {
            return {
                success: false,
                data: null,
                error: 'No data found in localStorage'
            };
        }
        return safeJsonParse(stored);
    } catch (error) {
        return {
            success: false,
            data: null,
            error: error instanceof Error ? error.message : 'localStorage access error'
        };
    }
}
function safeLocalStorageSet(key, data) {
    if (typeof window === 'undefined') {
        return {
            success: false,
            data: false,
            error: 'localStorage not available (SSR)'
        };
    }
    try {
        const stringifyResult = safeJsonStringify(data);
        if (!stringifyResult.success) {
            return {
                success: false,
                data: false,
                error: `Failed to stringify data: ${stringifyResult.error}`
            };
        }
        localStorage.setItem(key, stringifyResult.data);
        return {
            success: true,
            data: true,
            error: undefined
        };
    } catch (error) {
        return {
            success: false,
            data: false,
            error: error instanceof Error ? error.message : 'localStorage write error'
        };
    }
}
function cleanCorruptedLocalStorage(keys) {
    if (typeof window === 'undefined') {
        return 0;
    }
    let cleanedCount = 0;
    keys.forEach((key)=>{
        try {
            const stored = localStorage.getItem(key);
            if (stored) {
                const parseResult = safeJsonParse(stored);
                if (!parseResult.success) {
                    console.warn(`Cleaning corrupted localStorage key: ${key}`, parseResult.error);
                    localStorage.removeItem(key);
                    cleanedCount++;
                }
            }
        } catch (error) {
            console.warn(`Error checking localStorage key ${key}:`, error);
            localStorage.removeItem(key);
            cleanedCount++;
        }
    });
    return cleanedCount;
}
async function safeApiResponseJson(response) {
    const DEBUG_MODE = process.env.NODE_ENV === 'development';
    try {
        if (DEBUG_MODE) {}
        // Verificar que la respuesta sea v√°lida
        if (!response.ok) {
            // Try to get error details from response body
            let errorDetails = '';
            try {
                const errorText = await response.text();
                if (DEBUG_MODE) {}
                errorDetails = errorText ? ` - ${errorText}` : '';
            } catch (textError) {
                if (DEBUG_MODE) {
                    console.warn('Could not read error response body:', textError);
                }
            }
            return {
                success: false,
                data: null,
                error: `HTTP ${response.status}: ${response.statusText}${errorDetails}`
            };
        }
        // Obtener el texto primero
        const text = await response.text();
        if (DEBUG_MODE) {
            console.log('üìÑ Response text preview:', text.substring(0, 200) + (text.length > 200 ? '...' : ''));
        }
        // Parsear de forma segura
        const parseResult = safeJsonParse(text);
        if (DEBUG_MODE) {}
        return parseResult;
    } catch (error) {
        console.error('‚ùå safeApiResponseJson error:', error);
        return {
            success: false,
            data: null,
            error: error instanceof Error ? error.message : 'API response error'
        };
    }
}
const STORAGE_KEYS = {
    CART: 'pinteya-cart',
    RECENT_SEARCHES: 'pinteya-recent-searches',
    USER_PREFERENCES: 'pinteya-user-preferences',
    ANALYTICS: 'pinteya-analytics'
};
function initializeJsonSafety() {
    if (typeof window === 'undefined') {
        return;
    }
    const keysToCheck = Object.values(STORAGE_KEYS);
    const cleanedCount = cleanCorruptedLocalStorage(keysToCheck);
    if (cleanedCount > 0) {}
}

//# sourceMappingURL=data:application/json;base64,