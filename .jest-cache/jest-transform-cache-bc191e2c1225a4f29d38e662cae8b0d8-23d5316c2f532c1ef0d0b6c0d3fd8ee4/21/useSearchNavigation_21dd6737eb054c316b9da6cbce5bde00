22652e0edbe7a5e6b39baf7ff3b6e067
// ===================================
// HOOK: useSearchNavigation - Navegación optimizada para búsquedas
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSearchNavigation () {
        return useSearchNavigation;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
function useSearchNavigation(options = {}) {
    const { preserveParams = false, scrollToTop = true, replace = false, onBeforeNavigate, onAfterNavigate } = options;
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    // ===================================
    // NAVEGACIÓN A RESULTADOS DE BÚSQUEDA
    // ===================================
    const navigateToSearch = (0, _react.useCallback)((query, category, additionalParams)=>{
        if (!query.trim()) {
            return;
        }
        // Construir URL de búsqueda
        const params = new URLSearchParams();
        // Parámetro principal de búsqueda
        params.set('q', query.trim());
        // Categoría si se especifica
        if (category && category !== 'all') {
            params.set('category', category);
        }
        // Preservar parámetros existentes si está habilitado
        if (preserveParams) {
            searchParams.forEach((value, key)=>{
                if (key !== 'q' && key !== 'category') {
                    params.set(key, value);
                }
            });
        }
        // Parámetros adicionales
        if (additionalParams) {
            Object.entries(additionalParams).forEach(([key, value])=>{
                params.set(key, value);
            });
        }
        const searchUrl = `/search?${params.toString()}`;
        // Callback antes de navegar
        onBeforeNavigate?.(searchUrl);
        // Navegar
        if (replace) {
            router.replace(searchUrl);
        } else {
            router.push(searchUrl);
        }
        // Scroll al top si está habilitado
        if (scrollToTop) {
            setTimeout(()=>{
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            }, 100);
        }
        // Callback después de navegar
        onAfterNavigate?.(searchUrl);
    }, [
        router,
        searchParams,
        preserveParams,
        replace,
        scrollToTop,
        onBeforeNavigate,
        onAfterNavigate
    ]);
    // ===================================
    // NAVEGACIÓN A PRODUCTO
    // ===================================
    const navigateToProduct = (0, _react.useCallback)((productId, productSlug)=>{
        const productUrl = productSlug ? `/products/${productSlug}` : `/products/${productId}`;
        onBeforeNavigate?.(productUrl);
        router.push(productUrl);
        onAfterNavigate?.(productUrl);
    }, [
        router,
        onBeforeNavigate,
        onAfterNavigate
    ]);
    // ===================================
    // NAVEGACIÓN A CATEGORÍA
    // ===================================
    const navigateToCategory = (0, _react.useCallback)((categoryId, categorySlug)=>{
        const categoryUrl = categorySlug ? `/shop/${categorySlug}` : `/shop?category=${categoryId}`;
        onBeforeNavigate?.(categoryUrl);
        router.push(categoryUrl);
        onAfterNavigate?.(categoryUrl);
    }, [
        router,
        onBeforeNavigate,
        onAfterNavigate
    ]);
    // ===================================
    // PREFETCH OPTIMIZADO
    // ===================================
    const prefetchSearch = (0, _react.useCallback)((query, category)=>{
        if (!query.trim()) {
            return;
        }
        const params = new URLSearchParams();
        params.set('q', query.trim());
        if (category && category !== 'all') {
            params.set('category', category);
        }
        const searchUrl = `/search?${params.toString()}`;
        router.prefetch(searchUrl);
    }, [
        router
    ]);
    const prefetchProduct = (0, _react.useCallback)((productId, productSlug)=>{
        const productUrl = productSlug ? `/products/${productSlug}` : `/products/${productId}`;
        router.prefetch(productUrl);
    }, [
        router
    ]);
    // ===================================
    // UTILIDADES
    // ===================================
    const getCurrentSearchQuery = (0, _react.useCallback)(()=>{
        return searchParams.get('q') || '';
    }, [
        searchParams
    ]);
    const getCurrentCategory = (0, _react.useCallback)(()=>{
        return searchParams.get('category') || '';
    }, [
        searchParams
    ]);
    const buildSearchUrl = (0, _react.useCallback)((query, category, additionalParams)=>{
        const params = new URLSearchParams();
        params.set('q', query.trim());
        if (category && category !== 'all') {
            params.set('category', category);
        }
        if (additionalParams) {
            Object.entries(additionalParams).forEach(([key, value])=>{
                params.set(key, value);
            });
        }
        return `/search?${params.toString()}`;
    }, []);
    // ===================================
    // RETURN
    // ===================================
    return {
        // Funciones de navegación
        navigateToSearch,
        navigateToProduct,
        navigateToCategory,
        // Funciones de prefetch
        prefetchSearch,
        prefetchProduct,
        // Utilidades
        getCurrentSearchQuery,
        getCurrentCategory,
        buildSearchUrl,
        // Router directo para casos especiales
        router
    };
}
const _default = useSearchNavigation;

//# sourceMappingURL=data:application/json;base64,