{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\monitoring\\RealTimeMonitoringDashboard.test.tsx"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - REAL-TIME MONITORING DASHBOARD TESTS\n// ===================================\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport RealTimeMonitoringDashboard from '@/components/admin/monitoring/RealTimeMonitoringDashboard'\n\n// Mock fetch global\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock de datos del dashboard\nconst mockDashboardData = {\n  success: true,\n  data: {\n    metrics: {\n      performance: {\n        responseTime: 285,\n        errorRate: 0.004,\n        throughput: 120,\n        uptime: 0.9997,\n      },\n      business: {\n        totalRevenue: 15000.5,\n        ordersToday: 25,\n        conversionRate: 0.034,\n        activeUsers: 42,\n      },\n      security: {\n        securityEvents: 2,\n        blockedRequests: 1,\n        authFailures: 0,\n        riskLevel: 'low' as const,\n      },\n      infrastructure: {\n        circuitBreakerStatus: 'closed' as const,\n        cacheHitRate: 0.87,\n        databaseConnections: 8,\n        memoryUsage: 0.65,\n      },\n    },\n    alerts: [\n      {\n        id: 'alert-1',\n        level: 'warning' as const,\n        message: 'Response time above threshold',\n        timestamp: '2025-01-01T12:00:00Z',\n        metric: 'performance.api.duration',\n        value: 1200,\n        threshold: 1000,\n      },\n    ],\n    trends: {\n      'performance.api.duration': [\n        { timestamp: '2025-01-01T11:00:00Z', value: 250 },\n        { timestamp: '2025-01-01T11:30:00Z', value: 285 },\n        { timestamp: '2025-01-01T12:00:00Z', value: 300 },\n      ],\n    },\n    timestamp: '2025-01-01T12:00:00Z',\n  },\n}\n\ndescribe('RealTimeMonitoringDashboard', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    jest.useFakeTimers()\n\n    // Mock successful fetch by default\n    mockFetch.mockResolvedValue({\n      ok: true,\n      status: 200,\n      statusText: 'OK',\n      json: jest.fn().mockResolvedValue(mockDashboardData),\n    })\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  describe('Renderizado inicial', () => {\n    test('debe mostrar loading inicialmente', () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      expect(screen.getByText('Cargando métricas...')).toBeInTheDocument()\n    })\n\n    test('debe mostrar el título del dashboard', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Dashboard de Monitoreo')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar la descripción', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(\n          screen.getByText('Métricas en tiempo real del sistema Pinteya E-commerce')\n        ).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Carga de datos', () => {\n    test('debe hacer fetch de métricas al montar', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/admin/monitoring/metrics', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        })\n      })\n    })\n\n    test('debe mostrar métricas después de cargar', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('285ms')).toBeInTheDocument() // Response time\n        expect(screen.getByText('0,40%')).toBeInTheDocument() // Error rate\n        expect(screen.getByText('120')).toBeInTheDocument() // Throughput\n        expect(screen.getByText('99,97%')).toBeInTheDocument() // Uptime\n      })\n    })\n\n    test('debe mostrar métricas de negocio', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('$ 15.000,50')).toBeInTheDocument() // Revenue\n        expect(screen.getByText('25')).toBeInTheDocument() // Orders\n        expect(screen.getByText('3,4%')).toBeInTheDocument() // Conversion\n        expect(screen.getByText('42')).toBeInTheDocument() // Active users\n      })\n    })\n  })\n\n  describe('Alertas', () => {\n    test('debe mostrar alertas activas', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Alertas Activas (1)')).toBeInTheDocument()\n        expect(screen.getByText('Response time above threshold')).toBeInTheDocument()\n        expect(screen.getByText('WARNING')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar detalles de la alerta', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        // Patrón 2 exitoso: Expectativas específicas - formato argentino con comas\n        expect(\n          screen.getByText('performance.api.duration: 1.200,00 / 1.000,00')\n        ).toBeInTheDocument()\n      })\n    })\n\n    test('no debe mostrar sección de alertas si no hay alertas', async () => {\n      const dataWithoutAlerts = {\n        ...mockDashboardData,\n        data: {\n          ...mockDashboardData.data,\n          alerts: [],\n        },\n      }\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue(dataWithoutAlerts),\n      })\n\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.queryByText('Alertas Activas')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Controles del dashboard', () => {\n    test('debe mostrar botones de control', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Pausar')).toBeInTheDocument()\n        expect(screen.getByText('Actualizar')).toBeInTheDocument()\n      })\n    })\n\n    test('debe pausar auto-refresh al hacer click en pausar', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        const pauseButton = screen.getByText('Pausar')\n        fireEvent.click(pauseButton)\n      })\n\n      expect(screen.getByText('Reanudar')).toBeInTheDocument()\n    })\n\n    test('debe hacer refresh manual al hacer click en actualizar', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        const refreshButton = screen.getByText('Actualizar')\n        fireEvent.click(refreshButton)\n      })\n\n      // Debería hacer una llamada adicional al fetch\n      expect(mockFetch).toHaveBeenCalledTimes(2)\n    })\n  })\n\n  describe('Auto-refresh', () => {\n    test('debe hacer auto-refresh cada 5 segundos', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      // Esperar carga inicial\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledTimes(1)\n      })\n\n      // Avanzar 5 segundos\n      act(() => {\n        jest.advanceTimersByTime(5000)\n      })\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledTimes(2)\n      })\n    })\n\n    test('no debe hacer auto-refresh cuando está pausado', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      // Esperar carga inicial y pausar\n      await waitFor(() => {\n        const pauseButton = screen.getByText('Pausar')\n        fireEvent.click(pauseButton)\n      })\n\n      // Avanzar 5 segundos\n      act(() => {\n        jest.advanceTimersByTime(5000)\n      })\n\n      // No debería hacer llamadas adicionales\n      expect(mockFetch).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe('Manejo de errores', () => {\n    test('debe mostrar error cuando falla el fetch', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'))\n\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Error de Conexión')).toBeInTheDocument()\n        expect(screen.getByText('Network error')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar error cuando la respuesta no es ok', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n      })\n\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Error de Conexión')).toBeInTheDocument()\n        expect(screen.getByText('HTTP 500: Internal Server Error')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar error cuando la respuesta indica fallo', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          success: false,\n          error: 'Database connection failed',\n        }),\n      })\n\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Error de Conexión')).toBeInTheDocument()\n        expect(screen.getByText('Database connection failed')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Formateo de datos', () => {\n    test('debe formatear números correctamente', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        // Verificar formateo de números\n        expect(screen.getByText('285ms')).toBeInTheDocument()\n        expect(screen.getByText('0,40%')).toBeInTheDocument()\n        expect(screen.getByText('99,97%')).toBeInTheDocument()\n      })\n    })\n\n    test('debe formatear moneda correctamente', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('$ 15.000,50')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Estados de infraestructura', () => {\n    test('debe mostrar estado del circuit breaker', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('CLOSED')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar métricas de infraestructura', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('87,0%')).toBeInTheDocument() // Cache hit rate\n        expect(screen.getByText('8')).toBeInTheDocument() // DB connections\n        expect(screen.getByText('65,0%')).toBeInTheDocument() // Memory usage\n      })\n    })\n  })\n\n  describe('Niveles de riesgo de seguridad', () => {\n    test('debe mostrar nivel de riesgo bajo', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('LOW')).toBeInTheDocument()\n      })\n    })\n\n    test('debe mostrar métricas de seguridad', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('2')).toBeInTheDocument() // Security events\n        expect(screen.getByText('1')).toBeInTheDocument() // Blocked requests\n        expect(screen.getByText('0')).toBeInTheDocument() // Auth failures\n      })\n    })\n  })\n\n  describe('Timestamp de última actualización', () => {\n    test('debe mostrar timestamp de última actualización', async () => {\n      render(<RealTimeMonitoringDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText(/Última actualización:/)).toBeInTheDocument()\n      })\n    })\n  })\n})\n"],"names":["mockFetch","jest","fn","global","fetch","mockDashboardData","success","data","metrics","performance","responseTime","errorRate","throughput","uptime","business","totalRevenue","ordersToday","conversionRate","activeUsers","security","securityEvents","blockedRequests","authFailures","riskLevel","infrastructure","circuitBreakerStatus","cacheHitRate","databaseConnections","memoryUsage","alerts","id","level","message","timestamp","metric","value","threshold","trends","describe","beforeEach","clearAllMocks","useFakeTimers","mockResolvedValue","ok","status","statusText","json","afterEach","useRealTimers","test","render","RealTimeMonitoringDashboard","expect","screen","getByText","toBeInTheDocument","waitFor","toHaveBeenCalledWith","method","headers","dataWithoutAlerts","queryByText","not","pauseButton","fireEvent","click","refreshButton","toHaveBeenCalledTimes","act","advanceTimersByTime","mockRejectedValue","Error","error"],"mappings":"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"}