{"version":3,"names":["cov_2i5aysw0qp","actualCoverage","s","POST","f","runtime","request","console","log","testPaymentData","id","status","external_reference","transaction_amount","currency_id","JSON","stringify","supabase","_supabase","getSupabaseClient","b","error","_server","NextResponse","json","orderReference","data","order","orderError","from","select","eq","single","details","newOrderStatus","newPaymentStatus","updatedOrder","updateError","update","payment_status","payment_id","updated_at","Date","toISOString","success","message","test_data","stack","process","env","NODE_ENV","undefined"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-webhook-processing\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - TEST WEBHOOK PROCESSING\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('[TEST_WEBHOOK] Iniciando prueba de procesamiento...');\r\n\r\n    // Datos de prueba simulando MercadoPago\r\n    const testPaymentData = {\r\n      id: '123456',\r\n      status: 'approved',\r\n      external_reference: 'express_checkout_1757431045283',\r\n      transaction_amount: 100,\r\n      currency_id: 'ARS'\r\n    };\r\n\r\n    console.log('[TEST_WEBHOOK] Datos de pago simulados:', JSON.stringify(testPaymentData, null, 2));\r\n\r\n    // Inicializar Supabase\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      console.error('[TEST_WEBHOOK] Cliente de Supabase no disponible');\r\n      return NextResponse.json({\r\n        error: 'Supabase client not available'\r\n      }, { status: 500 });\r\n    }\r\n\r\n    console.log('[TEST_WEBHOOK] Cliente de Supabase inicializado correctamente');\r\n\r\n    // Buscar la orden por external_reference\r\n    const orderReference = testPaymentData.external_reference;\r\n    console.log('[TEST_WEBHOOK] Buscando orden con external_reference:', orderReference);\r\n\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('*')\r\n      .eq('external_reference', orderReference)\r\n      .single();\r\n\r\n    if (orderError) {\r\n      console.error('[TEST_WEBHOOK] Error buscando orden:', orderError);\r\n      return NextResponse.json({\r\n        error: 'Order lookup failed',\r\n        details: orderError\r\n      }, { status: 500 });\r\n    }\r\n\r\n    if (!order) {\r\n      console.error('[TEST_WEBHOOK] Order not found by external_reference:', orderReference);\r\n      return NextResponse.json({\r\n        error: 'Order not found',\r\n        external_reference: orderReference\r\n      }, { status: 404 });\r\n    }\r\n\r\n    console.log('[TEST_WEBHOOK] Order encontrada:', order.id, 'Status actual:', order.status);\r\n\r\n    // Mapear estados\r\n    const newOrderStatus = 'paid'; // ✅ CORREGIDO: Usar estado válido\r\n    const newPaymentStatus = 'paid';\r\n\r\n    console.log('[TEST_WEBHOOK] Actualizando orden con status:', newOrderStatus, 'payment_status:', newPaymentStatus);\r\n\r\n    // Actualizar la orden\r\n    const { data: updatedOrder, error: updateError } = await supabase\r\n      .from('orders')\r\n      .update({\r\n        payment_status: newPaymentStatus,\r\n        status: newOrderStatus,\r\n        payment_id: testPaymentData.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('[TEST_WEBHOOK] Error actualizando orden:', updateError);\r\n      return NextResponse.json({\r\n        error: 'Order update failed',\r\n        details: updateError\r\n      }, { status: 500 });\r\n    }\r\n\r\n    console.log('[TEST_WEBHOOK] ✅ Orden actualizada exitosamente:', JSON.stringify(updatedOrder, null, 2));\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Webhook processing test completed successfully',\r\n      order: {\r\n        id: updatedOrder.id,\r\n        status: updatedOrder.status,\r\n        payment_status: updatedOrder.payment_status,\r\n        payment_id: updatedOrder.payment_id,\r\n        updated_at: updatedOrder.updated_at\r\n      },\r\n      test_data: testPaymentData\r\n    }, { status: 200 });\r\n\r\n  } catch (error: any) {\r\n    console.error('[TEST_WEBHOOK] Error en prueba:', error);\r\n    console.error('[TEST_WEBHOOK] Stack trace:', error.stack);\r\n\r\n    return NextResponse.json({\r\n      error: 'Test failed',\r\n      message: error.message,\r\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}