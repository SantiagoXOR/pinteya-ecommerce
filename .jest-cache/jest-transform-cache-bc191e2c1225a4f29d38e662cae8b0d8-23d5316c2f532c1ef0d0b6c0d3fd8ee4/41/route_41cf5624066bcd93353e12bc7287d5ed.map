{"version":3,"names":["cov_1pyctp2jgl","actualCoverage","s","GET","f","runtime","AnalyticsFiltersSchema","_zod","z","object","period","enum","default","date_from","string","optional","nullable","date_to","metrics","array","validateAdminAuth","b","process","env","NODE_ENV","BYPASS_AUTH","user","id","email","name","userId","session","_config","auth","error","status","isAdmin","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","getOverviewMetrics","dateFrom","dateTo","data","revenueData","_supabase","supabaseAdmin","from","select","gte","lte","eq","totalRevenue","reduce","sum","order","total","count","totalOrders","head","totalProducts","totalUsers","avgOrderValue","conversionRate","total_revenue","total_orders","total_products","total_users","avg_order_value","conversion_rate","API","getTrends","revenueTrend","acc","date","created_at","split","existing","find","item","value","push","ordersData","ordersTrend","usersData","usersTrend","revenue_trend","orders_trend","users_trend","getTopProducts","productStats","productId","product_id","products","sales","revenue","quantity","unit_price","Object","values","sort","a","slice","getTopCategories","categoryStats","categoryId","category_id","categoryName","categories","getRecentOrders","ascending","limit","map","user_email","users","request","startTime","Date","now","rateLimitResult","_ratelimiting","checkRateLimit","windowMs","_ratelimiter","RATE_LIMIT_CONFIGS","admin","maxRequests","message","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","searchParams","URL","url","validationResult","safeParse","get","toISOString","getTime","overview","trends","topProducts","topCategories","recentOrders","Promise","all","analyticsData","top_products","top_categories","recent_orders","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","INFO","ADMIN","nextResponse","Error"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\analytics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN ANALYTICS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst AnalyticsFiltersSchema = z.object({\r\n  period: z.enum(['7d', '30d', '90d', '1y']).default('30d'),\r\n  date_from: z.string().optional().nullable(),\r\n  date_to: z.string().optional().nullable(),\r\n  metrics: z.array(z.enum([\r\n    'sales',\r\n    'orders',\r\n    'products',\r\n    'users',\r\n    'revenue',\r\n    'conversion',\r\n    'top_products',\r\n    'top_categories'\r\n  ])).optional(),\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface AnalyticsData {\r\n  overview: {\r\n    total_revenue: number;\r\n    total_orders: number;\r\n    total_products: number;\r\n    total_users: number;\r\n    avg_order_value: number;\r\n    conversion_rate: number;\r\n  };\r\n  trends: {\r\n    revenue_trend: Array<{ date: string; value: number }>;\r\n    orders_trend: Array<{ date: string; value: number }>;\r\n    users_trend: Array<{ date: string; value: number }>;\r\n  };\r\n  top_products: Array<{\r\n    id: number;\r\n    name: string;\r\n    sales: number;\r\n    revenue: number;\r\n  }>;\r\n  top_categories: Array<{\r\n    id: number;\r\n    name: string;\r\n    sales: number;\r\n    revenue: number;\r\n  }>;\r\n  recent_orders: Array<{\r\n    id: string;\r\n    total: number;\r\n    status: string;\r\n    created_at: string;\r\n    user_email?: string;\r\n  }>;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // BYPASS TEMPORAL PARA DESARROLLO\r\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n      return {\r\n        user: {\r\n          id: 'dev-admin',\r\n          email: 'santiago@xor.com.ar',\r\n          name: 'Dev Admin'\r\n        },\r\n        userId: 'dev-admin'\r\n      };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES DE CONSULTA DE DATOS\r\n// ===================================\r\n\r\nasync function getOverviewMetrics(dateFrom: string, dateTo: string) {\r\n  try {\r\n    // Total de ingresos\r\n    const { data: revenueData } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('total')\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo)\r\n      .eq('status', 'completed');\r\n\r\n    const totalRevenue = revenueData?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n\r\n    // Total de órdenes\r\n    const { count: totalOrders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('*', { count: 'exact', head: true })\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo);\r\n\r\n    // Total de productos\r\n    const { count: totalProducts } = await supabaseAdmin\r\n      .from('products')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('is_active', true);\r\n\r\n    // Total de usuarios\r\n    const { count: totalUsers } = await supabaseAdmin\r\n      .from('users')\r\n      .select('*', { count: 'exact', head: true })\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo);\r\n\r\n    const avgOrderValue = totalOrders ? totalRevenue / totalOrders : 0;\r\n    const conversionRate = 0.025; // Placeholder - calcular basado en visitas vs órdenes\r\n\r\n    return {\r\n      total_revenue: totalRevenue,\r\n      total_orders: totalOrders || 0,\r\n      total_products: totalProducts || 0,\r\n      total_users: totalUsers || 0,\r\n      avg_order_value: avgOrderValue,\r\n      conversion_rate: conversionRate\r\n    };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo métricas overview', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getTrends(dateFrom: string, dateTo: string) {\r\n  try {\r\n    // Tendencia de ingresos por día\r\n    const { data: revenueData } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('created_at, total')\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo)\r\n      .eq('status', 'completed')\r\n      .order('created_at');\r\n\r\n    // Agrupar por día\r\n    const revenueTrend = revenueData?.reduce((acc: any[], order) => {\r\n      const date = order.created_at.split('T')[0];\r\n      const existing = acc.find(item => item.date === date);\r\n      if (existing) {\r\n        existing.value += order.total || 0;\r\n      } else {\r\n        acc.push({ date, value: order.total || 0 });\r\n      }\r\n      return acc;\r\n    }, []) || [];\r\n\r\n    // Tendencia de órdenes por día\r\n    const { data: ordersData } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('created_at')\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo)\r\n      .order('created_at');\r\n\r\n    const ordersTrend = ordersData?.reduce((acc: any[], order) => {\r\n      const date = order.created_at.split('T')[0];\r\n      const existing = acc.find(item => item.date === date);\r\n      if (existing) {\r\n        existing.value += 1;\r\n      } else {\r\n        acc.push({ date, value: 1 });\r\n      }\r\n      return acc;\r\n    }, []) || [];\r\n\r\n    // Tendencia de usuarios por día\r\n    const { data: usersData } = await supabaseAdmin\r\n      .from('users')\r\n      .select('created_at')\r\n      .gte('created_at', dateFrom)\r\n      .lte('created_at', dateTo)\r\n      .order('created_at');\r\n\r\n    const usersTrend = usersData?.reduce((acc: any[], user) => {\r\n      const date = user.created_at.split('T')[0];\r\n      const existing = acc.find(item => item.date === date);\r\n      if (existing) {\r\n        existing.value += 1;\r\n      } else {\r\n        acc.push({ date, value: 1 });\r\n      }\r\n      return acc;\r\n    }, []) || [];\r\n\r\n    return {\r\n      revenue_trend: revenueTrend,\r\n      orders_trend: ordersTrend,\r\n      users_trend: usersTrend\r\n    };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo tendencias', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getTopProducts(dateFrom: string, dateTo: string) {\r\n  try {\r\n    const { data } = await supabaseAdmin\r\n      .from('order_items')\r\n      .select(`\r\n        product_id,\r\n        quantity,\r\n        unit_price,\r\n        products!inner(\r\n          id,\r\n          name\r\n        ),\r\n        orders!inner(\r\n          created_at,\r\n          status\r\n        )\r\n      `)\r\n      .gte('orders.created_at', dateFrom)\r\n      .lte('orders.created_at', dateTo)\r\n      .eq('orders.status', 'completed');\r\n\r\n    // Agrupar por producto\r\n    const productStats = data?.reduce((acc: Record<string, any>, item) => {\r\n      const productId = item.product_id;\r\n      if (!acc[productId]) {\r\n        acc[productId] = {\r\n          id: productId,\r\n          name: item.products.name,\r\n          sales: 0,\r\n          revenue: 0\r\n        };\r\n      }\r\n      acc[productId].sales += item.quantity;\r\n      acc[productId].revenue += (item.quantity * item.unit_price);\r\n      return acc;\r\n    }, {}) || {};\r\n\r\n    return Object.values(productStats)\r\n      .sort((a: { revenue: number }, b: { revenue: number }) => b.revenue - a.revenue)\r\n      .slice(0, 10);\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo top productos', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getTopCategories(dateFrom: string, dateTo: string) {\r\n  try {\r\n    const { data } = await supabaseAdmin\r\n      .from('order_items')\r\n      .select(`\r\n        quantity,\r\n        unit_price,\r\n        products!inner(\r\n          category_id,\r\n          categories!inner(\r\n            id,\r\n            name\r\n          )\r\n        ),\r\n        orders!inner(\r\n          created_at,\r\n          status\r\n        )\r\n      `)\r\n      .gte('orders.created_at', dateFrom)\r\n      .lte('orders.created_at', dateTo)\r\n      .eq('orders.status', 'completed');\r\n\r\n    // Agrupar por categoría\r\n    const categoryStats = data?.reduce((acc: Record<string, any>, item) => {\r\n      const categoryId = item.products.category_id;\r\n      const categoryName = item.products.categories?.name;\r\n      if (!categoryId || !categoryName) {return acc;}\r\n      \r\n      if (!acc[categoryId]) {\r\n        acc[categoryId] = {\r\n          id: categoryId,\r\n          name: categoryName,\r\n          sales: 0,\r\n          revenue: 0\r\n        };\r\n      }\r\n      acc[categoryId].sales += item.quantity;\r\n      acc[categoryId].revenue += (item.quantity * item.unit_price);\r\n      return acc;\r\n    }, {}) || {};\r\n\r\n    return Object.values(categoryStats)\r\n      .sort((a: { revenue: number }, b: { revenue: number }) => b.revenue - a.revenue)\r\n      .slice(0, 10);\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo top categorías', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getRecentOrders() {\r\n  try {\r\n    const { data } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        total,\r\n        status,\r\n        created_at,\r\n        users(\r\n          email\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    return data?.map(order => ({\r\n      id: order.id,\r\n      total: order.total,\r\n      status: order.status,\r\n      created_at: order.created_at,\r\n      user_email: order.users?.email\r\n    })) || [];\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error obteniendo órdenes recientes', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener analytics del dashboard\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-analytics'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar parámetros\r\n    const { searchParams } = new URL(request.url);\r\n    const validationResult = AnalyticsFiltersSchema.safeParse({\r\n      period: searchParams.get('period'),\r\n      date_from: searchParams.get('date_from'),\r\n      date_to: searchParams.get('date_to'),\r\n      metrics: searchParams.get('metrics')?.split(','),\r\n    });\r\n\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Parámetros inválidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const { period, date_from, date_to } = validationResult.data;\r\n\r\n    // Calcular fechas basadas en el período\r\n    let dateFrom: string;\r\n    let dateTo: string;\r\n\r\n    if (date_from && date_to) {\r\n      dateFrom = date_from;\r\n      dateTo = date_to;\r\n    } else {\r\n      const now = new Date();\r\n      dateTo = now.toISOString();\r\n      \r\n      switch (period) {\r\n        case '7d':\r\n          dateFrom = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\r\n          break;\r\n        case '30d':\r\n          dateFrom = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\r\n          break;\r\n        case '90d':\r\n          dateFrom = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000).toISOString();\r\n          break;\r\n        case '1y':\r\n          dateFrom = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000).toISOString();\r\n          break;\r\n        default:\r\n          dateFrom = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\r\n      }\r\n    }\r\n\r\n    // Obtener datos de analytics\r\n    const [overview, trends, topProducts, topCategories, recentOrders] = await Promise.all([\r\n      getOverviewMetrics(dateFrom, dateTo),\r\n      getTrends(dateFrom, dateTo),\r\n      getTopProducts(dateFrom, dateTo),\r\n      getTopCategories(dateFrom, dateTo),\r\n      getRecentOrders()\r\n    ]);\r\n\r\n    const analyticsData: AnalyticsData = {\r\n      overview,\r\n      trends,\r\n      top_products: topProducts,\r\n      top_categories: topCategories,\r\n      recent_orders: recentOrders\r\n    };\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/analytics',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Analytics consultados', {\r\n      userId: authResult.userId,\r\n      period,\r\n      dateFrom,\r\n      dateTo\r\n    });\r\n\r\n    const response: ApiResponse<AnalyticsData> = {\r\n      data: analyticsData,\r\n      success: true,\r\n      message: 'Analytics obtenidos exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/analytics', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/analytics',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}