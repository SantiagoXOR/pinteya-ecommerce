e8c7db643d7e8cc24f13450f5eb30df5
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get PUT () {
        return PUT;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/integrations/supabase");
const _config = require("../../../../lib/auth/config");
const _activityLogger = require("../../../../lib/activity/activityLogger");
const _ratelimiter = require("../../../../lib/rate-limiting/rate-limiter");
const _apitimeouts = require("../../../../lib/config/api-timeouts");
const _securitylogger = require("../../../../lib/logging/security-logger");
const runtime = 'nodejs';
async function GET(request) {
    // Crear logger de seguridad con contexto
    const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
    // Aplicar rate limiting para APIs de usuario
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.auth, async ()=>{
        // Log de acceso a la API
        securityLogger.log({
            type: 'api_access',
            endpoint: '/api/user/profile',
            method: 'GET',
            userAgent: request.headers.get('user-agent'),
            timestamp: new Date().toISOString()
        });
        try {
            // Verificar que el cliente administrativo esté disponible
            if (!_supabase.supabaseAdmin) {
                console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');
                // Log de error de seguridad
                securityLogger.log({
                    type: 'service_unavailable',
                    service: 'supabase_admin',
                    endpoint: '/api/user/profile'
                });
                return _server.NextResponse.json({
                    error: 'Servicio de base de datos no disponible'
                }, {
                    status: 503
                });
            }
            // Autenticación con Clerk
            const session = await (0, _config.auth)();
            if (!session?.user) {
                // Log de intento de acceso no autorizado
                securityLogger.log({
                    type: 'unauthorized_access',
                    endpoint: '/api/user/profile',
                    reason: 'no_session'
                });
                const errorResponse = {
                    data: null,
                    success: false,
                    error: 'Usuario no autenticado'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 401
                });
            }
            // Buscar usuario en Supabase
            const userId = session.user.id;
            const { data: user, error } = await (0, _apitimeouts.withDatabaseTimeout)(_supabase.supabaseAdmin.from('users').select('*').eq('clerk_id', userId).single(), _apitimeouts.API_TIMEOUTS.database);
            if (error && error.code !== 'PGRST116') {
                console.error('Error al obtener usuario:', error);
                // Log de error de base de datos
                securityLogger.logApiError(error.message, '/api/user/profile');
                return _server.NextResponse.json({
                    error: 'Error al obtener perfil de usuario'
                }, {
                    status: 500
                });
            }
            // Si no existe el usuario, crear uno demo
            if (!user) {
                const { data: newUser, error: createError } = await _supabase.supabaseAdmin.from('users').insert([
                    {
                        clerk_id: userId,
                        email: 'usuario@demo.com',
                        name: 'Usuario Demo'
                    }
                ]).select().single();
                if (createError) {
                    console.error('Error al crear usuario demo:', createError);
                    return _server.NextResponse.json({
                        error: 'Error al crear perfil de usuario'
                    }, {
                        status: 500
                    });
                }
                return _server.NextResponse.json({
                    success: true,
                    user: newUser
                });
            }
            // Log de operación exitosa
            securityLogger.log({
                type: 'user_profile_retrieved',
                userId: userId,
                hasUser: !!user
            });
            return _server.NextResponse.json({
                success: true,
                user
            });
        } catch (error) {
            console.error('Error en GET /api/user/profile:', error);
            // Log de error de seguridad
            securityLogger.logApiError(error instanceof Error ? error.message : 'Unknown error', '/api/user/profile');
            return _server.NextResponse.json({
                error: 'Error interno del servidor'
            }, {
                status: 500
            });
        }
    });
    // Manejar rate limit excedido
    if (rateLimitResult instanceof _server.NextResponse) {
        securityLogger.logRateLimitExceeded(securityLogger.context, {
            endpoint: '/api/user/profile',
            method: 'GET'
        });
        return rateLimitResult;
    }
    return rateLimitResult;
}
async function PUT(request) {
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');
            return _server.NextResponse.json({
                error: 'Servicio de base de datos no disponible'
            }, {
                status: 503
            });
        }
        // Autenticación con Clerk
        const session = await (0, _config.auth)();
        if (!session?.user) {
            const errorResponse = {
                data: null,
                success: false,
                error: 'Usuario no autenticado'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 401
            });
        }
        const userId = session.user.id;
        const body = await request.json();
        // Validar datos requeridos
        const { name, email, phone } = body;
        if (!name || !email) {
            return _server.NextResponse.json({
                error: 'Nombre y email son requeridos'
            }, {
                status: 400
            });
        }
        // Actualizar usuario en Supabase
        const { data: updatedUser, error } = await _supabase.supabaseAdmin.from('users').update({
            name,
            email,
            phone: phone || null,
            updated_at: new Date().toISOString()
        }).eq('clerk_id', userId).select().single();
        if (error) {
            console.error('Error al actualizar usuario:', error);
            return _server.NextResponse.json({
                error: 'Error al actualizar perfil de usuario'
            }, {
                status: 500
            });
        }
        // Registrar actividad de actualización de perfil
        const requestInfo = (0, _activityLogger.getRequestInfo)(request);
        await (0, _activityLogger.logProfileActivity)(updatedUser.id, 'update_profile', {
            fields_updated: Object.keys(body),
            previous_name: updatedUser.name !== name ? 'changed' : 'unchanged',
            previous_email: updatedUser.email !== email ? 'changed' : 'unchanged',
            previous_phone: updatedUser.phone !== phone ? 'changed' : 'unchanged'
        }, requestInfo);
        return _server.NextResponse.json({
            success: true,
            user: updatedUser,
            message: 'Perfil actualizado correctamente'
        });
    } catch (error) {
        console.error('Error en PUT /api/user/profile:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,