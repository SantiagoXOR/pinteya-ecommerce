{"version":3,"names":["useCouriers","cov_2f0xa6b4u8","f","s","useQuoteCalculator","useQuoteComparison","useQuoteHistory","useShippingQuote","getShippingQuote","request","response","fetch","method","headers","body","JSON","stringify","ok","b","errorData","json","catch","Error","error","status","statusText","result","data","getCouriers","lastQuoteRequest","setLastQuoteRequest","_react","useState","selectedQuote","setSelectedQuote","quoteMutation","_reactquery","useMutation","mutationFn","onSuccess","_sonner","toast","success","quotes","length","description","cheapest_quote","cost","onError","message","getQuote","useCallback","mutateAsync","selectQuote","quote","courier_name","clearSelection","cheapestQuote","fastestQuote","fastest_quote","recommendedQuote","recommended_quote","isLoading","isPending","isSuccess","options","queryKey","refetch","useQuery","queryFn","params","URLSearchParams","activeOnly","append","includeStats","then","res","staleTime","retry","comparison","cheapest","reduce","prev","current","fastest","estimated_delivery_days","mostReliable","prevScore","currentScore","averageCost","acc","averageDeliveryTime","priceRange","min","Math","map","q","max","deliveryRange","calculatorData","setCalculatorData","weight","dimensions","origin","destination","serviceType","updateCalculatorData","updates","calculateEstimate","courier","base_cost","cost_per_kg","serviceMultipliers","standard","express","next_day","same_day","baseDays","estimatedDays","round","name","quoteHistory","setQuoteHistory","addToHistory","historyItem","id","Date","now","toString","timestamp","toISOString","slice","clearHistory","getHistoryItem","find","item"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useShippingQuote.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: SHIPPING QUOTE ENTERPRISE\r\n// Descripción: Hook para cotización de envíos con múltiples couriers\r\n// Basado en: TanStack Query + React Hook Form\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useMutation, useQuery } from '@tanstack/react-query';\r\nimport { useState, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  ShippingQuoteRequest,\r\n  ShippingQuoteResponse,\r\n  ShippingQuote,\r\n  Courier \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// FUNCIONES DE API\r\n// =====================================================\r\n\r\nasync function getShippingQuote(request: ShippingQuoteRequest): Promise<ShippingQuoteResponse> {\r\n  const response = await fetch('/api/admin/logistics/couriers/quote', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(request)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function getCouriers(): Promise<Courier[]> {\r\n  const response = await fetch('/api/admin/logistics/couriers?active_only=true', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL: useShippingQuote\r\n// =====================================================\r\n\r\nexport function useShippingQuote() {\r\n  const [lastQuoteRequest, setLastQuoteRequest] = useState<ShippingQuoteRequest | null>(null);\r\n  const [selectedQuote, setSelectedQuote] = useState<ShippingQuote | null>(null);\r\n  \r\n  const quoteMutation = useMutation({\r\n    mutationFn: getShippingQuote,\r\n    onSuccess: (data) => {\r\n      toast.success(`${data.quotes.length} cotizaciones obtenidas`, {\r\n        description: `Mejor precio: $${data.cheapest_quote?.cost || 0}`\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al obtener cotizaciones', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n  \r\n  const getQuote = useCallback(async (request: ShippingQuoteRequest) => {\r\n    setLastQuoteRequest(request);\r\n    return quoteMutation.mutateAsync(request);\r\n  }, [quoteMutation]);\r\n  \r\n  const selectQuote = useCallback((quote: ShippingQuote) => {\r\n    setSelectedQuote(quote);\r\n    toast.success('Cotización seleccionada', {\r\n      description: `${quote.courier_name} - $${quote.cost}`\r\n    });\r\n  }, []);\r\n  \r\n  const clearSelection = useCallback(() => {\r\n    setSelectedQuote(null);\r\n    setLastQuoteRequest(null);\r\n  }, []);\r\n  \r\n  return {\r\n    getQuote,\r\n    selectQuote,\r\n    clearSelection,\r\n    selectedQuote,\r\n    lastQuoteRequest,\r\n    quotes: quoteMutation.data?.quotes || [],\r\n    cheapestQuote: quoteMutation.data?.cheapest_quote,\r\n    fastestQuote: quoteMutation.data?.fastest_quote,\r\n    recommendedQuote: quoteMutation.data?.recommended_quote,\r\n    isLoading: quoteMutation.isPending,\r\n    error: quoteMutation.error,\r\n    isSuccess: quoteMutation.isSuccess\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useCouriers\r\n// =====================================================\r\n\r\nexport function useCouriers(options?: { activeOnly?: boolean; includeStats?: boolean }) {\r\n  const queryKey = ['admin', 'logistics', 'couriers', options];\r\n  \r\n  const { data, isLoading, error, refetch } = useQuery({\r\n    queryKey,\r\n    queryFn: () => {\r\n      const params = new URLSearchParams();\r\n      if (options?.activeOnly) {params.append('active_only', 'true');}\r\n      if (options?.includeStats) {params.append('include_stats', 'true');}\r\n      \r\n      return fetch(`/api/admin/logistics/couriers?${params}`)\r\n        .then(res => res.json())\r\n        .then(result => result.data);\r\n    },\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    retry: 3\r\n  });\r\n  \r\n  return {\r\n    data: data || [],\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useQuoteComparison\r\n// =====================================================\r\n\r\nexport function useQuoteComparison(quotes: ShippingQuote[]) {\r\n  const comparison = {\r\n    cheapest: quotes.reduce((prev, current) => \r\n      prev.cost < current.cost ? prev : current\r\n    ),\r\n    fastest: quotes.reduce((prev, current) => \r\n      prev.estimated_delivery_days < current.estimated_delivery_days ? prev : current\r\n    ),\r\n    mostReliable: quotes.reduce((prev, current) => {\r\n      // Lógica simple: courier con mejor balance precio/tiempo\r\n      const prevScore = (1 / prev.cost) + (1 / prev.estimated_delivery_days);\r\n      const currentScore = (1 / current.cost) + (1 / current.estimated_delivery_days);\r\n      return currentScore > prevScore ? current : prev;\r\n    }),\r\n    averageCost: quotes.reduce((acc, quote) => acc + quote.cost, 0) / quotes.length,\r\n    averageDeliveryTime: quotes.reduce((acc, quote) => acc + quote.estimated_delivery_days, 0) / quotes.length,\r\n    priceRange: {\r\n      min: Math.min(...quotes.map(q => q.cost)),\r\n      max: Math.max(...quotes.map(q => q.cost))\r\n    },\r\n    deliveryRange: {\r\n      min: Math.min(...quotes.map(q => q.estimated_delivery_days)),\r\n      max: Math.max(...quotes.map(q => q.estimated_delivery_days))\r\n    }\r\n  };\r\n  \r\n  return comparison;\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useQuoteCalculator\r\n// =====================================================\r\n\r\nexport function useQuoteCalculator() {\r\n  const [calculatorData, setCalculatorData] = useState({\r\n    weight: 0,\r\n    dimensions: '',\r\n    origin: '',\r\n    destination: '',\r\n    serviceType: 'standard'\r\n  });\r\n  \r\n  const updateCalculatorData = useCallback((updates: Partial<typeof calculatorData>) => {\r\n    setCalculatorData(prev => ({ ...prev, ...updates }));\r\n  }, []);\r\n  \r\n  const calculateEstimate = useCallback((courier: Courier) => {\r\n    if (!calculatorData.weight || !courier) {return null;}\r\n    \r\n    // Cálculo básico basado en la configuración del courier\r\n    let cost = courier.base_cost + (courier.cost_per_kg * calculatorData.weight);\r\n    \r\n    // Ajustes por tipo de servicio\r\n    const serviceMultipliers = {\r\n      standard: 1,\r\n      express: 1.5,\r\n      next_day: 2,\r\n      same_day: 3\r\n    };\r\n    \r\n    cost *= serviceMultipliers[calculatorData.serviceType as keyof typeof serviceMultipliers] || 1;\r\n    \r\n    // Estimación de días de entrega\r\n    const baseDays = {\r\n      standard: 5,\r\n      express: 3,\r\n      next_day: 1,\r\n      same_day: 1\r\n    };\r\n    \r\n    const estimatedDays = baseDays[calculatorData.serviceType as keyof typeof baseDays] || 5;\r\n    \r\n    return {\r\n      cost: Math.round(cost * 100) / 100,\r\n      estimatedDays,\r\n      courier: courier.name\r\n    };\r\n  }, [calculatorData]);\r\n  \r\n  return {\r\n    calculatorData,\r\n    updateCalculatorData,\r\n    calculateEstimate\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useQuoteHistory\r\n// =====================================================\r\n\r\nexport function useQuoteHistory() {\r\n  const [quoteHistory, setQuoteHistory] = useState<Array<{\r\n    id: string;\r\n    request: ShippingQuoteRequest;\r\n    response: ShippingQuoteResponse;\r\n    selectedQuote?: ShippingQuote;\r\n    timestamp: string;\r\n  }>>([]);\r\n  \r\n  const addToHistory = useCallback((\r\n    request: ShippingQuoteRequest, \r\n    response: ShippingQuoteResponse,\r\n    selectedQuote?: ShippingQuote\r\n  ) => {\r\n    const historyItem = {\r\n      id: Date.now().toString(),\r\n      request,\r\n      response,\r\n      selectedQuote,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setQuoteHistory(prev => [historyItem, ...prev.slice(0, 9)]); // Mantener últimas 10\r\n  }, []);\r\n  \r\n  const clearHistory = useCallback(() => {\r\n    setQuoteHistory([]);\r\n  }, []);\r\n  \r\n  const getHistoryItem = useCallback((id: string) => {\r\n    return quoteHistory.find(item => item.id === id);\r\n  }, [quoteHistory]);\r\n  \r\n  return {\r\n    quoteHistory,\r\n    addToHistory,\r\n    clearHistory,\r\n    getHistoryItem\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// TIPOS EXTENDIDOS\r\n// =====================================================\r\n\r\nexport interface UseShippingQuoteReturn {\r\n  getQuote: (request: ShippingQuoteRequest) => Promise<ShippingQuoteResponse>;\r\n  selectQuote: (quote: ShippingQuote) => void;\r\n  clearSelection: () => void;\r\n  selectedQuote: ShippingQuote | null;\r\n  lastQuoteRequest: ShippingQuoteRequest | null;\r\n  quotes: ShippingQuote[];\r\n  cheapestQuote?: ShippingQuote;\r\n  fastestQuote?: ShippingQuote;\r\n  recommendedQuote?: ShippingQuote;\r\n  isLoading: boolean;\r\n  error: Error | null;\r\n  isSuccess: boolean;\r\n}\r\n\r\nexport interface UseCouriersReturn {\r\n  data: Courier[];\r\n  isLoading: boolean;\r\n  error: Error | null;\r\n  refetch: () => void;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}