{"version":3,"names":["default","cov_2osvgg30i2","f","s","_default","useSearchErrorHandler","DEFAULT_RETRY_CONFIG","maxRetries","baseDelay","maxDelay","backoffFactor","classifyError","error","timestamp","Date","now","b","name","message","includes","type","retryable","status","code","toString","calculateDelay","attempt","config","delay","Math","pow","min","options","retryConfig","userRetryConfig","onError","onRetrySuccess","onRetryFailed","_react","useMemo","currentError","setCurrentError","useState","retryCount","setRetryCount","isRetrying","setIsRetrying","handleError","useCallback","searchError","executeWithRetry","operation","operationName","lastError","result","console","warn","Promise","resolve","setTimeout","clearError","retryManually","hasError"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchErrorHandler - Manejo robusto de errores de búsqueda\r\n// ===================================\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchError {\r\n  type: 'network' | 'server' | 'validation' | 'timeout' | 'unknown';\r\n  message: string;\r\n  code?: string;\r\n  retryable: boolean;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface RetryConfig {\r\n  maxRetries: number;\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n  backoffFactor: number;\r\n}\r\n\r\nexport interface UseSearchErrorHandlerOptions {\r\n  retryConfig?: Partial<RetryConfig>;\r\n  onError?: (error: SearchError) => void;\r\n  onRetrySuccess?: () => void;\r\n  onRetryFailed?: (error: SearchError, attempts: number) => void;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_RETRY_CONFIG: RetryConfig = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 10000,\r\n  backoffFactor: 2,\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Clasifica el tipo de error basado en el error original\r\n */\r\nfunction classifyError(error: any): SearchError {\r\n  const timestamp = Date.now();\r\n  \r\n  // Error de red\r\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n    return {\r\n      type: 'network',\r\n      message: 'Error de conexión. Verifica tu conexión a internet.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de timeout\r\n  if (error.name === 'AbortError' || error.message.includes('timeout')) {\r\n    return {\r\n      type: 'timeout',\r\n      message: 'La búsqueda tardó demasiado. Intenta nuevamente.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error del servidor\r\n  if (error.status >= 500) {\r\n    return {\r\n      type: 'server',\r\n      message: 'Error del servidor. Intenta nuevamente en unos momentos.',\r\n      code: error.status?.toString(),\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de validación\r\n  if (error.status >= 400 && error.status < 500) {\r\n    return {\r\n      type: 'validation',\r\n      message: error.message || 'Parámetros de búsqueda inválidos.',\r\n      code: error.status?.toString(),\r\n      retryable: false,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error desconocido\r\n  return {\r\n    type: 'unknown',\r\n    message: error.message || 'Error inesperado durante la búsqueda.',\r\n    retryable: true,\r\n    timestamp,\r\n  };\r\n}\r\n\r\n/**\r\n * Calcula el delay para el siguiente retry con backoff exponencial\r\n */\r\nfunction calculateDelay(attempt: number, config: RetryConfig): number {\r\n  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\r\n  return Math.min(delay, config.maxDelay);\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchErrorHandler(options: UseSearchErrorHandlerOptions = {}) {\r\n  const {\r\n    retryConfig: userRetryConfig = {},\r\n    onError,\r\n    onRetrySuccess,\r\n    onRetryFailed,\r\n  } = options;\r\n\r\n  const retryConfig = useMemo(() => ({\r\n    ...DEFAULT_RETRY_CONFIG,\r\n    ...userRetryConfig\r\n  }), [userRetryConfig]);\r\n  \r\n  const [currentError, setCurrentError] = useState<SearchError | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [isRetrying, setIsRetrying] = useState(false);\r\n\r\n  /**\r\n   * Maneja un error de búsqueda\r\n   */\r\n  const handleError = useCallback((error: any): SearchError => {\r\n    const searchError = classifyError(error);\r\n    setCurrentError(searchError);\r\n    setRetryCount(0);\r\n    \r\n    // Callback personalizado\r\n    onError?.(searchError);\r\n    \r\n    return searchError;\r\n  }, [onError]);\r\n\r\n  /**\r\n   * Ejecuta una operación con retry automático\r\n   */\r\n  const executeWithRetry = useCallback(async <T>(\r\n    operation: () => Promise<T>,\r\n    operationName: string = 'búsqueda'\r\n  ): Promise<T> => {\r\n    let lastError: any;\r\n\r\n    for (let attempt = 1; attempt <= retryConfig.maxRetries + 1; attempt++) {\r\n      try {\r\n        setIsRetrying(attempt > 1);\r\n        setRetryCount(attempt > 1 ? attempt - 1 : 0);\r\n\r\n        const result = await operation();\r\n\r\n        // Éxito\r\n        if (attempt > 1) {\r\n          setCurrentError(null);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onRetrySuccess?.();\r\n        }\r\n\r\n        return result;\r\n\r\n      } catch (error) {\r\n        lastError = error;\r\n        const searchError = classifyError(error);\r\n\r\n        // Si no es retryable, fallar inmediatamente\r\n        if (!searchError.retryable) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onError?.(searchError);\r\n          throw error;\r\n        }\r\n\r\n        // Si hemos agotado los intentos\r\n        if (attempt > retryConfig.maxRetries) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(attempt - 1);\r\n          setIsRetrying(false);\r\n          onRetryFailed?.(searchError, attempt - 1);\r\n          throw error;\r\n        }\r\n\r\n        // Preparar para retry\r\n        const delay = calculateDelay(attempt, retryConfig);\r\n\r\n        console.warn(`${operationName} falló (intento ${attempt}/${retryConfig.maxRetries}). Reintentando en ${delay}ms...`, error);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }, [retryConfig, onError, onRetrySuccess, onRetryFailed]);\r\n\r\n  /**\r\n   * Limpia el estado de error\r\n   */\r\n  const clearError = useCallback(() => {\r\n    setCurrentError(null);\r\n    setRetryCount(0);\r\n    setIsRetrying(false);\r\n  }, []);\r\n\r\n  /**\r\n   * Retry manual\r\n   */\r\n  const retryManually = useCallback(async <T>(\r\n    operation: () => Promise<T>\r\n  ): Promise<T> => {\r\n    clearError();\r\n    return executeWithRetry(operation, 'retry manual');\r\n  }, [executeWithRetry, clearError]);\r\n\r\n  return {\r\n    // Estado\r\n    currentError,\r\n    retryCount,\r\n    isRetrying,\r\n    hasError: currentError !== null,\r\n    \r\n    // Funciones\r\n    handleError,\r\n    executeWithRetry,\r\n    clearError,\r\n    retryManually,\r\n    \r\n    // Configuración\r\n    retryConfig,\r\n  };\r\n}\r\n\r\nexport default useSearchErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}