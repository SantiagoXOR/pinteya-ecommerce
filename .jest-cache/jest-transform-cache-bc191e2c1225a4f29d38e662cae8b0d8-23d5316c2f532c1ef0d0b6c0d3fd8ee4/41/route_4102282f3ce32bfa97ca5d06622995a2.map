{"version":3,"names":["DELETE","cov_11h2gaw6vz","f","s","GET","PUT","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","message","UpdateCouponSchema","_zod","z","object","name","string","min","optional","description","type","enum","discount_value","number","minimum_order_amount","maximum_discount_amount","usage_limit","int","usage_limit_per_user","starts_at","expires_at","is_active","boolean","applicable_to","category_ids","array","uuid","product_ids","exclude_sale_items","first_time_customers_only","CouponUsageSchema","page","coerce","default","limit","max","sort_by","sort_order","date_from","date_to","validateAdminAuth","session","_auth","auth","user","b","error","status","data","profile","from","select","eq","id","single","includes","role","userId","getCouponById","couponId","includeUsage","query","coupon","Error","now","Date","startsAt","expiresAt","usage_count","processedCoupon","categories","map","cc","category","products","cp","product","usageHistory","order","ascending","usage_history","updateCoupon","updateData","existingCoupon","couponUpdateData","finalUpdateData","updated_at","toISOString","updatedCoupon","updateError","update","undefined","delete","length","categoryInserts","categoryId","coupon_id","category_id","categoryError","insert","productInserts","productId","product_id","productError","user_id","action","resource_type","resource_id","details","updated_fields","Object","keys","old_values","new_values","created_at","deleteCoupon","count","usageCount","head","deleteError","deleted_coupon","success","getCouponUsage","filters","gte","lte","offset","range","usage","total","totalPages","Math","ceil","request","params","startTime","rateLimitResult","_ratelimiter","checkRateLimit","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","searchParams","URL","url","get","parse","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","pagination","nextResponse","_logger","logger","log","LogLevel","ERROR","LogCategory","API","floor","body","result"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\coupons\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/auth';\r\nimport { checkRateLimit, addRateLimitHeaders } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nconst RATE_LIMIT_CONFIGS = {\r\n  admin: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    maxRequests: 50,\r\n    message: 'Demasiadas solicitudes de cupón'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// ===================================\r\nconst UpdateCouponSchema = z.object({\r\n  name: z.string().min(1, 'El nombre es requerido').optional(),\r\n  description: z.string().optional(),\r\n  type: z.enum(['percentage', 'fixed_amount', 'free_shipping']).optional(),\r\n  discount_value: z.number().min(0).optional(),\r\n  minimum_order_amount: z.number().min(0).optional(),\r\n  maximum_discount_amount: z.number().min(0).optional(),\r\n  usage_limit: z.number().int().min(1).optional(),\r\n  usage_limit_per_user: z.number().int().min(1).optional(),\r\n  starts_at: z.string().optional(),\r\n  expires_at: z.string().optional(),\r\n  is_active: z.boolean().optional(),\r\n  applicable_to: z.enum(['all', 'categories', 'products']).optional(),\r\n  category_ids: z.array(z.string().uuid()).optional(),\r\n  product_ids: z.array(z.string().uuid()).optional(),\r\n  exclude_sale_items: z.boolean().optional(),\r\n  first_time_customers_only: z.boolean().optional()\r\n});\r\n\r\nconst CouponUsageSchema = z.object({\r\n  page: z.coerce.number().min(1).default(1),\r\n  limit: z.coerce.number().min(1).max(100).default(20),\r\n  sort_by: z.enum(['created_at', 'discount_amount', 'order_total']).default('created_at'),\r\n  sort_order: z.enum(['asc', 'desc']).default('desc'),\r\n  date_from: z.string().optional(),\r\n  date_to: z.string().optional()\r\n});\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  pagination?: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\ninterface CouponData {\r\n  id: string;\r\n  code: string;\r\n  name: string;\r\n  description?: string;\r\n  type: 'percentage' | 'fixed_amount' | 'free_shipping';\r\n  discount_value: number;\r\n  minimum_order_amount?: number;\r\n  maximum_discount_amount?: number;\r\n  usage_limit?: number;\r\n  usage_limit_per_user?: number;\r\n  usage_count: number;\r\n  starts_at: string;\r\n  expires_at?: string;\r\n  is_active: boolean;\r\n  applicable_to: 'all' | 'categories' | 'products';\r\n  category_ids?: string[];\r\n  product_ids?: string[];\r\n  exclude_sale_items: boolean;\r\n  first_time_customers_only: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  status: 'active' | 'inactive' | 'expired' | 'used_up';\r\n  categories?: Array<{\r\n    id: string;\r\n    name: string;\r\n  }>;\r\n  products?: Array<{\r\n    id: string;\r\n    name: string;\r\n    sku: string;\r\n  }>;\r\n  creator?: {\r\n    full_name: string;\r\n    email: string;\r\n  };\r\n  usage_history?: Array<{\r\n    id: string;\r\n    user_id: string;\r\n    order_id: string;\r\n    discount_amount: number;\r\n    order_total: number;\r\n    created_at: string;\r\n    user?: {\r\n      full_name: string;\r\n      email: string;\r\n    };\r\n    order?: {\r\n      order_number: string;\r\n      status: string;\r\n    };\r\n  }>;\r\n}\r\n\r\ninterface CouponUsageData {\r\n  id: string;\r\n  user_id: string;\r\n  order_id: string;\r\n  discount_amount: number;\r\n  order_total: number;\r\n  created_at: string;\r\n  user: {\r\n    full_name: string;\r\n    email: string;\r\n  };\r\n  order: {\r\n    order_number: string;\r\n    status: string;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\nasync function validateAdminAuth() {\r\n  const session = await auth();\r\n  \r\n  if (!session?.user) {\r\n    return { error: 'No autorizado', status: 401 };\r\n  }\r\n\r\n  // Verificar rol de administrador o manager\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', session.user.id)\r\n    .single();\r\n\r\n  if (!['admin', 'manager'].includes(profile?.role)) {\r\n    return { error: 'Acceso denegado', status: 403 };\r\n  }\r\n\r\n  return { userId: session.user.id, role: profile.role };\r\n}\r\n\r\nasync function getCouponById(couponId: string, includeUsage: boolean = false): Promise<CouponData> {\r\n  const query = supabase\r\n    .from('coupons')\r\n    .select(`\r\n      *,\r\n      categories:coupon_categories!coupon_categories_coupon_id_fkey(\r\n        category:categories!coupon_categories_category_id_fkey(\r\n          id,\r\n          name\r\n        )\r\n      ),\r\n      products:coupon_products!coupon_products_coupon_id_fkey(\r\n        product:products!coupon_products_product_id_fkey(\r\n          id,\r\n          name,\r\n          sku\r\n        )\r\n      ),\r\n      creator:profiles!coupons_created_by_fkey(\r\n        full_name,\r\n        email\r\n      )\r\n    `)\r\n    .eq('id', couponId)\r\n    .single();\r\n\r\n  const { data: coupon, error } = await query;\r\n\r\n  if (error || !coupon) {\r\n    throw new Error('Cupón no encontrado');\r\n  }\r\n\r\n  // Calcular estado\r\n  const now = new Date();\r\n  const startsAt = new Date(coupon.starts_at);\r\n  const expiresAt = coupon.expires_at ? new Date(coupon.expires_at) : null;\r\n  \r\n  let status: 'active' | 'inactive' | 'expired' | 'used_up';\r\n  \r\n  if (!coupon.is_active) {\r\n    status = 'inactive';\r\n  } else if (now < startsAt) {\r\n    status = 'inactive';\r\n  } else if (expiresAt && now > expiresAt) {\r\n    status = 'expired';\r\n  } else if (coupon.usage_limit && coupon.usage_count >= coupon.usage_limit) {\r\n    status = 'used_up';\r\n  } else {\r\n    status = 'active';\r\n  }\r\n\r\n  const processedCoupon: CouponData = {\r\n    ...coupon,\r\n    status,\r\n    categories: coupon.categories?.map((cc: { category: unknown }) => cc.category) || [],\r\n      products: coupon.products?.map((cp: { product: unknown }) => cp.product) || []\r\n  };\r\n\r\n  // Incluir historial de uso si se solicita\r\n  if (includeUsage) {\r\n    const { data: usageHistory } = await supabase\r\n      .from('coupon_usage')\r\n      .select(`\r\n        *,\r\n        user:profiles!coupon_usage_user_id_fkey(\r\n          full_name,\r\n          email\r\n        ),\r\n        order:orders!coupon_usage_order_id_fkey(\r\n          order_number,\r\n          status\r\n        )\r\n      `)\r\n      .eq('coupon_id', couponId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(50);\r\n\r\n    processedCoupon.usage_history = usageHistory || [];\r\n  }\r\n\r\n  return processedCoupon;\r\n}\r\n\r\nasync function updateCoupon(couponId: string, updateData: z.infer<typeof UpdateCouponSchema>, userId: string) {\r\n  // Verificar que el cupón existe\r\n  const existingCoupon = await getCouponById(couponId);\r\n\r\n  // Validar fechas si se proporcionan\r\n  if (updateData.starts_at || updateData.expires_at) {\r\n    const startsAt = updateData.starts_at ? new Date(updateData.starts_at) : new Date(existingCoupon.starts_at);\r\n    const expiresAt = updateData.expires_at ? new Date(updateData.expires_at) : \r\n                     (existingCoupon.expires_at ? new Date(existingCoupon.expires_at) : null);\r\n    \r\n    if (expiresAt && startsAt >= expiresAt) {\r\n      throw new Error('La fecha de inicio debe ser anterior a la fecha de expiración');\r\n    }\r\n  }\r\n\r\n  // Validar descuento si se proporciona\r\n  if (updateData.type === 'percentage' && updateData.discount_value && updateData.discount_value > 100) {\r\n    throw new Error('El descuento porcentual no puede ser mayor al 100%');\r\n  }\r\n\r\n  // Preparar datos de actualización\r\n  const { category_ids, product_ids, ...couponUpdateData } = updateData;\r\n  const finalUpdateData = {\r\n    ...couponUpdateData,\r\n    updated_at: new Date().toISOString()\r\n  };\r\n\r\n  // Actualizar cupón\r\n  const { data: updatedCoupon, error: updateError } = await supabase\r\n    .from('coupons')\r\n    .update(finalUpdateData)\r\n    .eq('id', couponId)\r\n    .select()\r\n    .single();\r\n\r\n  if (updateError) {\r\n    throw new Error(`Error al actualizar cupón: ${updateError.message}`);\r\n  }\r\n\r\n  // Actualizar asociaciones de categorías si se proporcionan\r\n  if (category_ids !== undefined) {\r\n    // Eliminar asociaciones existentes\r\n    await supabase\r\n      .from('coupon_categories')\r\n      .delete()\r\n      .eq('coupon_id', couponId);\r\n\r\n    // Crear nuevas asociaciones\r\n    if (category_ids.length > 0) {\r\n      const categoryInserts = category_ids.map(categoryId => ({\r\n        coupon_id: couponId,\r\n        category_id: categoryId\r\n      }));\r\n\r\n      const { error: categoryError } = await supabase\r\n        .from('coupon_categories')\r\n        .insert(categoryInserts);\r\n\r\n      if (categoryError) {\r\n        throw new Error(`Error al actualizar categorías: ${categoryError.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Actualizar asociaciones de productos si se proporcionan\r\n  if (product_ids !== undefined) {\r\n    // Eliminar asociaciones existentes\r\n    await supabase\r\n      .from('coupon_products')\r\n      .delete()\r\n      .eq('coupon_id', couponId);\r\n\r\n    // Crear nuevas asociaciones\r\n    if (product_ids.length > 0) {\r\n      const productInserts = product_ids.map(productId => ({\r\n        coupon_id: couponId,\r\n        product_id: productId\r\n      }));\r\n\r\n      const { error: productError } = await supabase\r\n        .from('coupon_products')\r\n        .insert(productInserts);\r\n\r\n      if (productError) {\r\n        throw new Error(`Error al actualizar productos: ${productError.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Registrar auditoría\r\n  await supabase\r\n    .from('audit_logs')\r\n    .insert({\r\n      user_id: userId,\r\n      action: 'update',\r\n      resource_type: 'coupon',\r\n      resource_id: couponId,\r\n      details: {\r\n        updated_fields: Object.keys(updateData),\r\n        old_values: existingCoupon,\r\n        new_values: updateData\r\n      },\r\n      created_at: new Date().toISOString()\r\n    });\r\n\r\n  return updatedCoupon;\r\n}\r\n\r\nasync function deleteCoupon(couponId: string, userId: string) {\r\n  // Verificar que el cupón existe\r\n  const existingCoupon = await getCouponById(couponId);\r\n\r\n  // Verificar si el cupón ha sido usado\r\n  const { count: usageCount } = await supabase\r\n    .from('coupon_usage')\r\n    .select('*', { count: 'exact', head: true })\r\n    .eq('coupon_id', couponId);\r\n\r\n  if (usageCount && usageCount > 0) {\r\n    throw new Error('No se puede eliminar un cupón que ya ha sido utilizado. Considere desactivarlo en su lugar.');\r\n  }\r\n\r\n  // Eliminar asociaciones\r\n  await supabase\r\n    .from('coupon_categories')\r\n    .delete()\r\n    .eq('coupon_id', couponId);\r\n\r\n  await supabase\r\n    .from('coupon_products')\r\n    .delete()\r\n    .eq('coupon_id', couponId);\r\n\r\n  // Eliminar cupón\r\n  const { error: deleteError } = await supabase\r\n    .from('coupons')\r\n    .delete()\r\n    .eq('id', couponId);\r\n\r\n  if (deleteError) {\r\n    throw new Error(`Error al eliminar cupón: ${deleteError.message}`);\r\n  }\r\n\r\n  // Registrar auditoría\r\n  await supabase\r\n    .from('audit_logs')\r\n    .insert({\r\n      user_id: userId,\r\n      action: 'delete',\r\n      resource_type: 'coupon',\r\n      resource_id: couponId,\r\n      details: {\r\n        deleted_coupon: existingCoupon\r\n      },\r\n      created_at: new Date().toISOString()\r\n    });\r\n\r\n  return { success: true };\r\n}\r\n\r\nasync function getCouponUsage(couponId: string, filters: z.infer<typeof CouponUsageSchema>) {\r\n  let query = supabase\r\n    .from('coupon_usage')\r\n    .select(`\r\n      *,\r\n      user:profiles!coupon_usage_user_id_fkey(\r\n        full_name,\r\n        email\r\n      ),\r\n      order:orders!coupon_usage_order_id_fkey(\r\n        order_number,\r\n        status\r\n      )\r\n    `, { count: 'exact' })\r\n    .eq('coupon_id', couponId);\r\n\r\n  // Aplicar filtros de fecha\r\n  if (filters.date_from) {\r\n    query = query.gte('created_at', filters.date_from);\r\n  }\r\n\r\n  if (filters.date_to) {\r\n    query = query.lte('created_at', filters.date_to);\r\n  }\r\n\r\n  // Contar total\r\n  const { count } = await query.select('*', { count: 'exact', head: true });\r\n\r\n  // Aplicar paginación y ordenamiento\r\n  const offset = (filters.page - 1) * filters.limit;\r\n  query = query\r\n    .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\r\n    .range(offset, offset + filters.limit - 1);\r\n\r\n  const { data, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener historial de uso: ${error.message}`);\r\n  }\r\n\r\n  return {\r\n    usage: data || [],\r\n    total: count || 0,\r\n    totalPages: Math.ceil((count || 0) / filters.limit)\r\n  };\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener cupón específico\r\n// ===================================\r\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message\r\n      },\r\n      'admin-coupon-detail'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const couponId = params.id;\r\n\r\n    if (action === 'usage') {\r\n      // Obtener historial de uso\r\n      const filters = CouponUsageSchema.parse({\r\n        page: searchParams.get('page'),\r\n        limit: searchParams.get('limit'),\r\n        sort_by: searchParams.get('sort_by'),\r\n        sort_order: searchParams.get('sort_order'),\r\n        date_from: searchParams.get('date_from'),\r\n        date_to: searchParams.get('date_to')\r\n      });\r\n\r\n      const { usage, total, totalPages } = await getCouponUsage(couponId, filters);\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/coupons/[id]',\r\n        method: 'GET',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<CouponUsageData[]> = {\r\n        data: usage,\r\n        success: true,\r\n        message: 'Historial de uso obtenido exitosamente',\r\n        pagination: {\r\n          page: filters.page,\r\n          limit: filters.limit,\r\n          total,\r\n          totalPages\r\n        }\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    // Obtener cupón específico\r\n    const includeUsage = searchParams.get('include_usage') === 'true';\r\n    const coupon = await getCouponById(couponId, includeUsage);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<CouponData> = {\r\n      data: coupon,\r\n      success: true,\r\n      message: 'Cupón obtenido exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/coupons/[id]', { error, couponId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'GET',\r\n      statusCode: error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const statusCode = error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500;\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: statusCode });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar cupón\r\n// ===================================\r\nexport async function PUT(request: NextRequest, { params }: { params: { id: string } }) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: Math.floor(RATE_LIMIT_CONFIGS.admin.maxRequests / 2),\r\n        message: 'Demasiadas actualizaciones de cupón'\r\n      },\r\n      'admin-coupon-update'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const updateData = UpdateCouponSchema.parse(body);\r\n    const couponId = params.id;\r\n\r\n    // Actualizar cupón\r\n    const updatedCoupon = await updateCoupon(couponId, updateData, authResult.userId!);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'PUT',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<typeof updatedCoupon> = {\r\n      data: updatedCoupon,\r\n      success: true,\r\n      message: 'Cupón actualizado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en PUT /api/admin/coupons/[id]', { error, couponId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'PUT',\r\n      statusCode: error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const statusCode = error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500;\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: statusCode });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Eliminar cupón\r\n// ===================================\r\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: Math.floor(RATE_LIMIT_CONFIGS.admin.maxRequests / 4),\r\n        message: 'Demasiadas eliminaciones de cupón'\r\n      },\r\n      'admin-coupon-delete'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    const couponId = params.id;\r\n\r\n    // Eliminar cupón\r\n    const result = await deleteCoupon(couponId, authResult.userId!);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'DELETE',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<typeof result> = {\r\n      data: result,\r\n      success: true,\r\n      message: 'Cupón eliminado exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en DELETE /api/admin/coupons/[id]', { error, couponId: params.id });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/coupons/[id]',\r\n      method: 'DELETE',\r\n      statusCode: error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const statusCode = error instanceof Error && error.message === 'Cupón no encontrado' ? 404 : 500;\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: statusCode });\r\n  }\r\n}"],"mappingsmqBsBA,OAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,MAAA;;MAvNAI,IAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,GAAA;;MA+HAC,IAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,GAAA;;;;;kCA3kBoB;;;kCACxB;;;kCACW;;;mCACR;;;mCAC+B;;;mCACN;;;mCACb;AAEjC;AACA;AACA;AACA,MAAMC,QAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,QAAW,IAAAI,WAAA,CAAAC,YAAY,EAC3BC,OAAA,CAAQC,GAAG,CAACC,wBAAwB,EACpCF,OAAA,CAAQC,GAAG,CAACE,yBAAyB;AAGvC,MAAMC,kBAAA;AAAA;AAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAqB;EACzBW,KAAA,EAAO;IACLC,QAAA,EAAU,KAAK,KAAK;IACpBC,WAAA,EAAa;IACbC,OAAA,EAAS;EACX;AACF;AAEA;AACA;AACA;AACA,MAAMC,kBAAA;AAAA;AAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAqBgB,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EAClCC,IAAA,EAAMH,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG,0BAA0BC,QAAQ;EAC1DC,WAAA,EAAaP,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAChCE,IAAA,EAAMR,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,cAAc,gBAAgB,gBAAgB,EAAEH,QAAQ;EACtEI,cAAA,EAAgBV,IAAA,CAAAC,CAAC,CAACU,MAAM,GAAGN,GAAG,CAAC,GAAGC,QAAQ;EAC1CM,oBAAA,EAAsBZ,IAAA,CAAAC,CAAC,CAACU,MAAM,GAAGN,GAAG,CAAC,GAAGC,QAAQ;EAChDO,uBAAA,EAAyBb,IAAA,CAAAC,CAAC,CAACU,MAAM,GAAGN,GAAG,CAAC,GAAGC,QAAQ;EACnDQ,WAAA,EAAad,IAAA,CAAAC,CAAC,CAACU,MAAM,GAAGI,GAAG,GAAGV,GAAG,CAAC,GAAGC,QAAQ;EAC7CU,oBAAA,EAAsBhB,IAAA,CAAAC,CAAC,CAACU,MAAM,GAAGI,GAAG,GAAGV,GAAG,CAAC,GAAGC,QAAQ;EACtDW,SAAA,EAAWjB,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAC9BY,UAAA,EAAYlB,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAC/Ba,SAAA,EAAWnB,IAAA,CAAAC,CAAC,CAACmB,OAAO,GAAGd,QAAQ;EAC/Be,aAAA,EAAerB,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,OAAO,cAAc,WAAW,EAAEH,QAAQ;EACjEgB,YAAA,EAActB,IAAA,CAAAC,CAAC,CAACsB,KAAK,CAACvB,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGoB,IAAI,IAAIlB,QAAQ;EACjDmB,WAAA,EAAazB,IAAA,CAAAC,CAAC,CAACsB,KAAK,CAACvB,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGoB,IAAI,IAAIlB,QAAQ;EAChDoB,kBAAA,EAAoB1B,IAAA,CAAAC,CAAC,CAACmB,OAAO,GAAGd,QAAQ;EACxCqB,yBAAA,EAA2B3B,IAAA,CAAAC,CAAC,CAACmB,OAAO,GAAGd,QAAQ;AACjD;AAEA,MAAMsB,iBAAA;AAAA;AAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAoBgB,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EACjC2B,IAAA,EAAM7B,IAAA,CAAAC,CAAC,CAAC6B,MAAM,CAACnB,MAAM,GAAGN,GAAG,CAAC,GAAG0B,OAAO,CAAC;EACvCC,KAAA,EAAOhC,IAAA,CAAAC,CAAC,CAAC6B,MAAM,CAACnB,MAAM,GAAGN,GAAG,CAAC,GAAG4B,GAAG,CAAC,KAAKF,OAAO,CAAC;EACjDG,OAAA,EAASlC,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,cAAc,mBAAmB,cAAc,EAAEsB,OAAO,CAAC;EAC1EI,UAAA,EAAYnC,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,OAAO,OAAO,EAAEsB,OAAO,CAAC;EAC5CK,SAAA,EAAWpC,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAC9B+B,OAAA,EAASrC,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;AAC9B;AA0FA;AACA;AACA;AACA,eAAegC,kBAAA;EAAA;EAAAxD,cAAA,GAAAC,CAAA;EACb,MAAMwD,OAAA;EAAA;EAAA,CAAAzD,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAwD,KAAA,CAAAC,IAAI;EAAA;EAAA3D,cAAA,GAAAE,CAAA;EAE1B,IAAI,CAACuD,OAAA,EAASG,IAAA,EAAM;IAAA;IAAA5D,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IAClB,OAAO;MAAE4D,KAAA,EAAO;MAAiBC,MAAA,EAAQ;IAAI;EAC/C;EAAA;EAAA;IAAA/D,cAAA,GAAA6D,CAAA;EAAA;EAEA;EACA,MAAM;IAAEG,IAAA,EAAMC;EAAO,CAAE;EAAA;EAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CAC7B6D,IAAI,CAAC,YACLC,MAAM,CAAC,QACPC,EAAE,CAAC,MAAMX,OAAA,CAAQG,IAAI,CAACS,EAAE,EACxBC,MAAM;EAAA;EAAAtE,cAAA,GAAAE,CAAA;EAET,IAAI,CAAC,CAAC,SAAS,UAAU,CAACqE,QAAQ,CAACN,OAAA,EAASO,IAAA,GAAO;IAAA;IAAAxE,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACjD,OAAO;MAAE4D,KAAA,EAAO;MAAmBC,MAAA,EAAQ;IAAI;EACjD;EAAA;EAAA;IAAA/D,cAAA,GAAA6D,CAAA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EAEA,OAAO;IAAEuE,MAAA,EAAQhB,OAAA,CAAQG,IAAI,CAACS,EAAE;IAAEG,IAAA,EAAMP,OAAA,CAAQO;EAAK;AACvD;AAEA,eAAeE,cAAcC,QAAgB,EAAEC,YAAA;AAAA;AAAA,CAAA5E,cAAA,GAAA6D,CAAA,UAAwB,KAAK;EAAA;EAAA7D,cAAA,GAAAC,CAAA;EAC1E,MAAM4E,KAAA;EAAA;EAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAQG,QAAA,CACX6D,IAAI,CAAC,WACLC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;KAmBP,EACAC,EAAE,CAAC,MAAMO,QAAA,EACTL,MAAM;EAET,MAAM;IAAEN,IAAA,EAAMc,MAAM;IAAEhB;EAAK,CAAE;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG,MAAM2E,KAAA;EAAA;EAAA7E,cAAA,GAAAE,CAAA;EAEtC;EAAI;EAAA,CAAAF,cAAA,GAAA6D,CAAA,UAAAC,KAAA;EAAA;EAAA,CAAA9D,cAAA,GAAA6D,CAAA,UAAS,CAACiB,MAAA,GAAQ;IAAA;IAAA9E,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACpB,MAAM,IAAI6E,KAAA,CAAM;EAClB;EAAA;EAAA;IAAA/E,cAAA,GAAA6D,CAAA;EAAA;EAEA;EACA,MAAMmB,GAAA;EAAA;EAAA,CAAAhF,cAAA,GAAAE,CAAA,QAAM,IAAI+E,IAAA;EAChB,MAAMC,QAAA;EAAA;EAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAW,IAAI+E,IAAA,CAAKH,MAAA,CAAO3C,SAAS;EAC1C,MAAMgD,SAAA;EAAA;EAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAY4E,MAAA,CAAO1C,UAAU;EAAA;EAAA,CAAApC,cAAA,GAAA6D,CAAA,UAAG,IAAIoB,IAAA,CAAKH,MAAA,CAAO1C,UAAU;EAAA;EAAA,CAAApC,cAAA,GAAA6D,CAAA,UAAI;EAEpE,IAAIE,MAAA;EAAA;EAAA/D,cAAA,GAAAE,CAAA;EAEJ,IAAI,CAAC4E,MAAA,CAAOzC,SAAS,EAAE;IAAA;IAAArC,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACrB6D,MAAA,GAAS;EACX,OAAO;IAAA;IAAA/D,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IAAA,IAAI8E,GAAA,GAAME,QAAA,EAAU;MAAA;MAAAlF,cAAA,GAAA6D,CAAA;MAAA7D,cAAA,GAAAE,CAAA;MACzB6D,MAAA,GAAS;IACX,OAAO;MAAA;MAAA/D,cAAA,GAAA6D,CAAA;MAAA7D,cAAA,GAAAE,CAAA;MAAA;MAAI;MAAA,CAAAF,cAAA,GAAA6D,CAAA,UAAAsB,SAAA;MAAA;MAAA,CAAAnF,cAAA,GAAA6D,CAAA,UAAamB,GAAA,GAAMG,SAAA,GAAW;QAAA;QAAAnF,cAAA,GAAA6D,CAAA;QAAA7D,cAAA,GAAAE,CAAA;QACvC6D,MAAA,GAAS;MACX,OAAO;QAAA;QAAA/D,cAAA,GAAA6D,CAAA;QAAA7D,cAAA,GAAAE,CAAA;QAAA;QAAI;QAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAiB,MAAA,CAAO9C,WAAW;QAAA;QAAA,CAAAhC,cAAA,GAAA6D,CAAA,WAAIiB,MAAA,CAAOM,WAAW,IAAIN,MAAA,CAAO9C,WAAW,GAAE;UAAA;UAAAhC,cAAA,GAAA6D,CAAA;UAAA7D,cAAA,GAAAE,CAAA;UACzE6D,MAAA,GAAS;QACX,OAAO;UAAA;UAAA/D,cAAA,GAAA6D,CAAA;UAAA7D,cAAA,GAAAE,CAAA;UACL6D,MAAA,GAAS;QACX;MAAA;IAAA;EAAA;EAEA,MAAMsB,eAAA;EAAA;EAAA,CAAArF,cAAA,GAAAE,CAAA,QAA8B;IAClC,GAAG4E,MAAM;IACTf,MAAA;IACAuB,UAAA;IAAY;IAAA,CAAAtF,cAAA,GAAA6D,CAAA,WAAAiB,MAAA,CAAOQ,UAAU,EAAEC,GAAA,CAAKC,EAAA,IAA8B;MAAA;MAAAxF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsF,EAAA,CAAGC,QAAQ;IAAR,CAAQ;IAAA;IAAA,CAAAzF,cAAA,GAAA6D,CAAA,WAAK,EAAE;IAClF6B,QAAA;IAAU;IAAA,CAAA1F,cAAA,GAAA6D,CAAA,WAAAiB,MAAA,CAAOY,QAAQ,EAAEH,GAAA,CAAKI,EAAA,IAA6B;MAAA;MAAA3F,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyF,EAAA,CAAGC,OAAO;IAAP,CAAO;IAAA;IAAA,CAAA5F,cAAA,GAAA6D,CAAA,WAAK,EAAE;EAClF;EAEA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EACA,IAAI0E,YAAA,EAAc;IAAA;IAAA5E,cAAA,GAAA6D,CAAA;IAChB,MAAM;MAAEG,IAAA,EAAM6B;IAAY,CAAE;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CAClC6D,IAAI,CAAC,gBACLC,MAAM,CAAC;;;;;;;;;;OAUP,EACAC,EAAE,CAAC,aAAaO,QAAA,EAChBmB,KAAK,CAAC,cAAc;MAAEC,SAAA,EAAW;IAAM,GACvC7C,KAAK,CAAC;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAETmF,eAAA,CAAgBW,aAAa;IAAG;IAAA,CAAAhG,cAAA,GAAA6D,CAAA,WAAAgC,YAAA;IAAA;IAAA,CAAA7F,cAAA,GAAA6D,CAAA,WAAgB,EAAE;EACpD;EAAA;EAAA;IAAA7D,cAAA,GAAA6D,CAAA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EAEA,OAAOmF,eAAA;AACT;AAEA,eAAeY,aAAatB,QAAgB,EAAEuB,UAA8C,EAAEzB,MAAc;EAAA;EAAAzE,cAAA,GAAAC,CAAA;EAC1G;EACA,MAAMkG,cAAA;EAAA;EAAA,CAAAnG,cAAA,GAAAE,CAAA,QAAiB,MAAMwE,aAAA,CAAcC,QAAA;EAE3C;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAqC,UAAA,CAAW/D,SAAS;EAAA;EAAA,CAAAnC,cAAA,GAAA6D,CAAA,WAAIqC,UAAA,CAAW9D,UAAU,GAAE;IAAA;IAAApC,cAAA,GAAA6D,CAAA;IACjD,MAAMqB,QAAA;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAWgG,UAAA,CAAW/D,SAAS;IAAA;IAAA,CAAAnC,cAAA,GAAA6D,CAAA,WAAG,IAAIoB,IAAA,CAAKiB,UAAA,CAAW/D,SAAS;IAAA;IAAA,CAAAnC,cAAA,GAAA6D,CAAA,WAAI,IAAIoB,IAAA,CAAKkB,cAAA,CAAehE,SAAS;IAC1G,MAAMgD,SAAA;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAYgG,UAAA,CAAW9D,UAAU;IAAA;IAAA,CAAApC,cAAA,GAAA6D,CAAA,WAAG,IAAIoB,IAAA,CAAKiB,UAAA,CAAW9D,UAAU;IAAA;IAAA,CAAApC,cAAA,GAAA6D,CAAA,WACtDsC,cAAA,CAAe/D,UAAU;IAAA;IAAA,CAAApC,cAAA,GAAA6D,CAAA,WAAG,IAAIoB,IAAA,CAAKkB,cAAA,CAAe/D,UAAU;IAAA;IAAA,CAAApC,cAAA,GAAA6D,CAAA,WAAI;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IAEpF;IAAI;IAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAsB,SAAA;IAAA;IAAA,CAAAnF,cAAA,GAAA6D,CAAA,WAAaqB,QAAA,IAAYC,SAAA,GAAW;MAAA;MAAAnF,cAAA,GAAA6D,CAAA;MAAA7D,cAAA,GAAAE,CAAA;MACtC,MAAM,IAAI6E,KAAA,CAAM;IAClB;IAAA;IAAA;MAAA/E,cAAA,GAAA6D,CAAA;IAAA;EACF;EAAA;EAAA;IAAA7D,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAqC,UAAA,CAAWxE,IAAI,KAAK;EAAA;EAAA,CAAA1B,cAAA,GAAA6D,CAAA,WAAgBqC,UAAA,CAAWtE,cAAc;EAAA;EAAA,CAAA5B,cAAA,GAAA6D,CAAA,WAAIqC,UAAA,CAAWtE,cAAc,GAAG,MAAK;IAAA;IAAA5B,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACpG,MAAM,IAAI6E,KAAA,CAAM;EAClB;EAAA;EAAA;IAAA/E,cAAA,GAAA6D,CAAA;EAAA;EAEA;EACA,MAAM;IAAErB,YAAY;IAAEG,WAAW;IAAE,GAAGyD;EAAA,CAAkB;EAAA;EAAA,CAAApG,cAAA,GAAAE,CAAA,QAAGgG,UAAA;EAC3D,MAAMG,eAAA;EAAA;EAAA,CAAArG,cAAA,GAAAE,CAAA,QAAkB;IACtB,GAAGkG,gBAAgB;IACnBE,UAAA,EAAY,IAAIrB,IAAA,GAAOsB,WAAW;EACpC;EAEA;EACA,MAAM;IAAEvC,IAAA,EAAMwC,aAAa;IAAE1C,KAAA,EAAO2C;EAAW,CAAE;EAAA;EAAA,CAAAzG,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CACvD6D,IAAI,CAAC,WACLwC,MAAM,CAACL,eAAA,EACPjC,EAAE,CAAC,MAAMO,QAAA,EACTR,MAAM,GACNG,MAAM;EAAA;EAAAtE,cAAA,GAAAE,CAAA;EAET,IAAIuG,WAAA,EAAa;IAAA;IAAAzG,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACf,MAAM,IAAI6E,KAAA,CAAM,8BAA8B0B,WAAA,CAAYzF,OAAO,EAAE;EACrE;EAAA;EAAA;IAAAhB,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA,IAAIsC,YAAA,KAAiBmE,SAAA,EAAW;IAAA;IAAA3G,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IAC9B;IACA,MAAMG,QAAA,CACH6D,IAAI,CAAC,qBACL0C,MAAM,GACNxC,EAAE,CAAC,aAAaO,QAAA;IAEnB;IAAA;IAAA3E,cAAA,GAAAE,CAAA;IACA,IAAIsC,YAAA,CAAaqE,MAAM,GAAG,GAAG;MAAA;MAAA7G,cAAA,GAAA6D,CAAA;MAC3B,MAAMiD,eAAA;MAAA;MAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAkBsC,YAAA,CAAa+C,GAAG,CAACwB,UAAA,IAAe;QAAA;QAAA/G,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA;UACtD8G,SAAA,EAAWrC,QAAA;UACXsC,WAAA,EAAaF;QACf;MAAA;MAEA,MAAM;QAAEjD,KAAA,EAAOoD;MAAa,CAAE;MAAA;MAAA,CAAAlH,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CACpC6D,IAAI,CAAC,qBACLiD,MAAM,CAACL,eAAA;MAAA;MAAA9G,cAAA,GAAAE,CAAA;MAEV,IAAIgH,aAAA,EAAe;QAAA;QAAAlH,cAAA,GAAA6D,CAAA;QAAA7D,cAAA,GAAAE,CAAA;QACjB,MAAM,IAAI6E,KAAA,CAAM,mCAAmCmC,aAAA,CAAclG,OAAO,EAAE;MAC5E;MAAA;MAAA;QAAAhB,cAAA,GAAA6D,CAAA;MAAA;IACF;IAAA;IAAA;MAAA7D,cAAA,GAAA6D,CAAA;IAAA;EACF;EAAA;EAAA;IAAA7D,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA,IAAIyC,WAAA,KAAgBgE,SAAA,EAAW;IAAA;IAAA3G,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IAC7B;IACA,MAAMG,QAAA,CACH6D,IAAI,CAAC,mBACL0C,MAAM,GACNxC,EAAE,CAAC,aAAaO,QAAA;IAEnB;IAAA;IAAA3E,cAAA,GAAAE,CAAA;IACA,IAAIyC,WAAA,CAAYkE,MAAM,GAAG,GAAG;MAAA;MAAA7G,cAAA,GAAA6D,CAAA;MAC1B,MAAMuD,cAAA;MAAA;MAAA,CAAApH,cAAA,GAAAE,CAAA,QAAiByC,WAAA,CAAY4C,GAAG,CAAC8B,SAAA,IAAc;QAAA;QAAArH,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA;UACnD8G,SAAA,EAAWrC,QAAA;UACX2C,UAAA,EAAYD;QACd;MAAA;MAEA,MAAM;QAAEvD,KAAA,EAAOyD;MAAY,CAAE;MAAA;MAAA,CAAAvH,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CACnC6D,IAAI,CAAC,mBACLiD,MAAM,CAACC,cAAA;MAAA;MAAApH,cAAA,GAAAE,CAAA;MAEV,IAAIqH,YAAA,EAAc;QAAA;QAAAvH,cAAA,GAAA6D,CAAA;QAAA7D,cAAA,GAAAE,CAAA;QAChB,MAAM,IAAI6E,KAAA,CAAM,kCAAkCwC,YAAA,CAAavG,OAAO,EAAE;MAC1E;MAAA;MAAA;QAAAhB,cAAA,GAAA6D,CAAA;MAAA;IACF;IAAA;IAAA;MAAA7D,cAAA,GAAA6D,CAAA;IAAA;EACF;EAAA;EAAA;IAAA7D,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA,MAAMG,QAAA,CACH6D,IAAI,CAAC,cACLiD,MAAM,CAAC;IACNK,OAAA,EAAS/C,MAAA;IACTgD,MAAA,EAAQ;IACRC,aAAA,EAAe;IACfC,WAAA,EAAahD,QAAA;IACbiD,OAAA,EAAS;MACPC,cAAA,EAAgBC,MAAA,CAAOC,IAAI,CAAC7B,UAAA;MAC5B8B,UAAA,EAAY7B,cAAA;MACZ8B,UAAA,EAAY/B;IACd;IACAgC,UAAA,EAAY,IAAIjD,IAAA,GAAOsB,WAAW;EACpC;EAAA;EAAAvG,cAAA,GAAAE,CAAA;EAEF,OAAOsG,aAAA;AACT;AAEA,eAAe2B,aAAaxD,QAAgB,EAAEF,MAAc;EAAA;EAAAzE,cAAA,GAAAC,CAAA;EAC1D;EACA,MAAMkG,cAAA;EAAA;EAAA,CAAAnG,cAAA,GAAAE,CAAA,QAAiB,MAAMwE,aAAA,CAAcC,QAAA;EAE3C;EACA,MAAM;IAAEyD,KAAA,EAAOC;EAAU,CAAE;EAAA;EAAA,CAAArI,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CACjC6D,IAAI,CAAC,gBACLC,MAAM,CAAC,KAAK;IAAEiE,KAAA,EAAO;IAASE,IAAA,EAAM;EAAK,GACzClE,EAAE,CAAC,aAAaO,QAAA;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EAEnB;EAAI;EAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAwE,UAAA;EAAA;EAAA,CAAArI,cAAA,GAAA6D,CAAA,WAAcwE,UAAA,GAAa,IAAG;IAAA;IAAArI,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IAChC,MAAM,IAAI6E,KAAA,CAAM;EAClB;EAAA;EAAA;IAAA/E,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA,MAAMG,QAAA,CACH6D,IAAI,CAAC,qBACL0C,MAAM,GACNxC,EAAE,CAAC,aAAaO,QAAA;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EAEnB,MAAMG,QAAA,CACH6D,IAAI,CAAC,mBACL0C,MAAM,GACNxC,EAAE,CAAC,aAAaO,QAAA;EAEnB;EACA,MAAM;IAAEb,KAAA,EAAOyE;EAAW,CAAE;EAAA;EAAA,CAAAvI,cAAA,GAAAE,CAAA,QAAG,MAAMG,QAAA,CAClC6D,IAAI,CAAC,WACL0C,MAAM,GACNxC,EAAE,CAAC,MAAMO,QAAA;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EAEZ,IAAIqI,WAAA,EAAa;IAAA;IAAAvI,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACf,MAAM,IAAI6E,KAAA,CAAM,4BAA4BwD,WAAA,CAAYvH,OAAO,EAAE;EACnE;EAAA;EAAA;IAAAhB,cAAA,GAAA6D,CAAA;EAAA;EAEA;EAAA7D,cAAA,GAAAE,CAAA;EACA,MAAMG,QAAA,CACH6D,IAAI,CAAC,cACLiD,MAAM,CAAC;IACNK,OAAA,EAAS/C,MAAA;IACTgD,MAAA,EAAQ;IACRC,aAAA,EAAe;IACfC,WAAA,EAAahD,QAAA;IACbiD,OAAA,EAAS;MACPY,cAAA,EAAgBrC;IAClB;IACA+B,UAAA,EAAY,IAAIjD,IAAA,GAAOsB,WAAW;EACpC;EAAA;EAAAvG,cAAA,GAAAE,CAAA;EAEF,OAAO;IAAEuI,OAAA,EAAS;EAAK;AACzB;AAEA,eAAeC,eAAe/D,QAAgB,EAAEgE,OAA0C;EAAA;EAAA3I,cAAA,GAAAC,CAAA;EACxF,IAAI4E,KAAA;EAAA;EAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAQG,QAAA,CACT6D,IAAI,CAAC,gBACLC,MAAM,CAAC;;;;;;;;;;KAUP,EAAE;IAAEiE,KAAA,EAAO;EAAQ,GACnBhE,EAAE,CAAC,aAAaO,QAAA;EAEnB;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EACA,IAAIyI,OAAA,CAAQrF,SAAS,EAAE;IAAA;IAAAtD,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACrB2E,KAAA,GAAQA,KAAA,CAAM+D,GAAG,CAAC,cAAcD,OAAA,CAAQrF,SAAS;EACnD;EAAA;EAAA;IAAAtD,cAAA,GAAA6D,CAAA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EAEA,IAAIyI,OAAA,CAAQpF,OAAO,EAAE;IAAA;IAAAvD,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACnB2E,KAAA,GAAQA,KAAA,CAAMgE,GAAG,CAAC,cAAcF,OAAA,CAAQpF,OAAO;EACjD;EAAA;EAAA;IAAAvD,cAAA,GAAA6D,CAAA;EAAA;EAEA;EACA,MAAM;IAAEuE;EAAK,CAAE;EAAA;EAAA,CAAApI,cAAA,GAAAE,CAAA,QAAG,MAAM2E,KAAA,CAAMV,MAAM,CAAC,KAAK;IAAEiE,KAAA,EAAO;IAASE,IAAA,EAAM;EAAK;EAEvE;EACA,MAAMQ,MAAA;EAAA;EAAA,CAAA9I,cAAA,GAAAE,CAAA,QAAS,CAACyI,OAAA,CAAQ5F,IAAI,GAAG,KAAK4F,OAAA,CAAQzF,KAAK;EAAA;EAAAlD,cAAA,GAAAE,CAAA;EACjD2E,KAAA,GAAQA,KAAA,CACLiB,KAAK,CAAC6C,OAAA,CAAQvF,OAAO,EAAE;IAAE2C,SAAA,EAAW4C,OAAA,CAAQtF,UAAU,KAAK;EAAM,GACjE0F,KAAK,CAACD,MAAA,EAAQA,MAAA,GAASH,OAAA,CAAQzF,KAAK,GAAG;EAE1C,MAAM;IAAEc,IAAI;IAAEF;EAAK,CAAE;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG,MAAM2E,KAAA;EAAA;EAAA7E,cAAA,GAAAE,CAAA;EAE9B,IAAI4D,KAAA,EAAO;IAAA;IAAA9D,cAAA,GAAA6D,CAAA;IAAA7D,cAAA,GAAAE,CAAA;IACT,MAAM,IAAI6E,KAAA,CAAM,sCAAsCjB,KAAA,CAAM9C,OAAO,EAAE;EACvE;EAAA;EAAA;IAAAhB,cAAA,GAAA6D,CAAA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EAEA,OAAO;IACL8I,KAAA;IAAO;IAAA,CAAAhJ,cAAA,GAAA6D,CAAA,WAAAG,IAAA;IAAA;IAAA,CAAAhE,cAAA,GAAA6D,CAAA,WAAQ,EAAE;IACjBoF,KAAA;IAAO;IAAA,CAAAjJ,cAAA,GAAA6D,CAAA,WAAAuE,KAAA;IAAA;IAAA,CAAApI,cAAA,GAAA6D,CAAA,WAAS;IAChBqF,UAAA,EAAYC,IAAA,CAAKC,IAAI,CAAC;IAAC;IAAA,CAAApJ,cAAA,GAAA6D,CAAA,WAAAuE,KAAA;IAAA;IAAA,CAAApI,cAAA,GAAA6D,CAAA,WAAS,MAAK8E,OAAA,CAAQzF,KAAK;EACpD;AACF;AAKO,eAAe/C,IAAIkJ,OAAoB,EAAE;EAAEC;AAAM,CAA8B;EAAA;EAAAtJ,cAAA,GAAAC,CAAA;EACpF,MAAMsJ,SAAA;EAAA;EAAA,CAAAvJ,cAAA,GAAAE,CAAA,SAAY+E,IAAA,CAAKD,GAAG;EAAA;EAAAhF,cAAA,GAAAE,CAAA;EAE1B,IAAI;IACF;IACA,MAAMsJ,eAAA;IAAA;IAAA,CAAAxJ,cAAA,GAAAE,CAAA,SAAkB,MAAM,IAAAuJ,YAAA,CAAAC,cAAc,EAC1CL,OAAA,EACA;MACEvI,QAAA,EAAUF,kBAAA,CAAmBC,KAAK,CAACC,QAAQ;MAC3CC,WAAA,EAAaH,kBAAA,CAAmBC,KAAK,CAACE,WAAW;MACjDC,OAAA,EAASJ,kBAAA,CAAmBC,KAAK,CAACG;IACpC,GACA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAGF,IAAI,CAACsJ,eAAA,CAAgBf,OAAO,EAAE;MAAA;MAAAzI,cAAA,GAAA6D,CAAA;MAC5B,MAAM8F,QAAA;MAAA;MAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAW0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAChC;QAAEhG,KAAA,EAAO0F,eAAA,CAAgBxI;MAAQ,GACjC;QAAE+C,MAAA,EAAQ;MAAI;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAEhB,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACJ,QAAA,EAAUH,eAAA;MAAA;MAAAxJ,cAAA,GAAAE,CAAA;MAC9B,OAAOyJ,QAAA;IACT;IAAA;IAAA;MAAA3J,cAAA,GAAA6D,CAAA;IAAA;IAEA;IACA,MAAMmG,UAAA;IAAA;IAAA,CAAAhK,cAAA,GAAAE,CAAA,SAAa,MAAMsD,iBAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzB,IAAI8J,UAAA,CAAWlG,KAAK,EAAE;MAAA;MAAA9D,cAAA,GAAA6D,CAAA;MACpB,MAAMoG,aAAA;MAAA;MAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;QACvC8D,IAAA,EAAM;QACNyE,OAAA,EAAS;QACT3E,KAAA,EAAOkG,UAAA,CAAWlG;MACpB;MAAA;MAAA9D,cAAA,GAAAE,CAAA;MACA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;QAAElG,MAAA,EAAQiG,UAAA,CAAWjG;MAAO;IACtE;IAAA;IAAA;MAAA/D,cAAA,GAAA6D,CAAA;IAAA;IAEA,MAAM;MAAEqG;IAAY,CAAE;IAAA;IAAA,CAAAlK,cAAA,GAAAE,CAAA,SAAG,IAAIiK,GAAA,CAAId,OAAA,CAAQe,GAAG;IAC5C,MAAM3C,MAAA;IAAA;IAAA,CAAAzH,cAAA,GAAAE,CAAA,SAASgK,YAAA,CAAaG,GAAG,CAAC;IAChC,MAAM1F,QAAA;IAAA;IAAA,CAAA3E,cAAA,GAAAE,CAAA,SAAWoJ,MAAA,CAAOjF,EAAE;IAAA;IAAArE,cAAA,GAAAE,CAAA;IAE1B,IAAIuH,MAAA,KAAW,SAAS;MAAA;MAAAzH,cAAA,GAAA6D,CAAA;MACtB;MACA,MAAM8E,OAAA;MAAA;MAAA,CAAA3I,cAAA,GAAAE,CAAA,SAAU4C,iBAAA,CAAkBwH,KAAK,CAAC;QACtCvH,IAAA,EAAMmH,YAAA,CAAaG,GAAG,CAAC;QACvBnH,KAAA,EAAOgH,YAAA,CAAaG,GAAG,CAAC;QACxBjH,OAAA,EAAS8G,YAAA,CAAaG,GAAG,CAAC;QAC1BhH,UAAA,EAAY6G,YAAA,CAAaG,GAAG,CAAC;QAC7B/G,SAAA,EAAW4G,YAAA,CAAaG,GAAG,CAAC;QAC5B9G,OAAA,EAAS2G,YAAA,CAAaG,GAAG,CAAC;MAC5B;MAEA,MAAM;QAAErB,KAAK;QAAEC,KAAK;QAAEC;MAAU,CAAE;MAAA;MAAA,CAAAlJ,cAAA,GAAAE,CAAA,SAAG,MAAMwI,cAAA,CAAe/D,QAAA,EAAUgE,OAAA;MAEpE;MAAA;MAAA3I,cAAA,GAAAE,CAAA;MACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;QAC7BC,QAAA,EAAU;QACVC,MAAA,EAAQ;QACRC,UAAA,EAAY;QACZC,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;QAC3B9E,MAAA,EAAQuF,UAAA,CAAWvF;MACrB;MAEA,MAAMkF,QAAA;MAAA;MAAA,CAAA3J,cAAA,GAAAE,CAAA,SAA2C;QAC/C8D,IAAA,EAAMgF,KAAA;QACNP,OAAA,EAAS;QACTzH,OAAA,EAAS;QACT8J,UAAA,EAAY;UACV/H,IAAA,EAAM4F,OAAA,CAAQ5F,IAAI;UAClBG,KAAA,EAAOyF,OAAA,CAAQzF,KAAK;UACpB+F,KAAA;UACAC;QACF;MACF;MAEA,MAAM6B,YAAA;MAAA;MAAA,CAAA/K,cAAA,GAAAE,CAAA,SAAe0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACH,QAAA;MAAA;MAAA3J,cAAA,GAAAE,CAAA;MACvC,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACgB,YAAA,EAAcvB,eAAA;MAAA;MAAAxJ,cAAA,GAAAE,CAAA;MAClC,OAAO6K,YAAA;IACT;IAAA;IAAA;MAAA/K,cAAA,GAAA6D,CAAA;IAAA;IAEA;IACA,MAAMe,YAAA;IAAA;IAAA,CAAA5E,cAAA,GAAAE,CAAA,SAAegK,YAAA,CAAaG,GAAG,CAAC,qBAAqB;IAC3D,MAAMvF,MAAA;IAAA;IAAA,CAAA9E,cAAA,GAAAE,CAAA,SAAS,MAAMwE,aAAA,CAAcC,QAAA,EAAUC,YAAA;IAE7C;IAAA;IAAA5E,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA,EAAY;MACZC,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3B9E,MAAA,EAAQuF,UAAA,CAAWvF;IACrB;IAEA,MAAMkF,QAAA;IAAA;IAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAoC;MACxC8D,IAAA,EAAMc,MAAA;MACN2D,OAAA,EAAS;MACTzH,OAAA,EAAS;IACX;IAEA,MAAM+J,YAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAE,CAAA,SAAe0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACH,QAAA;IAAA;IAAA3J,cAAA,GAAAE,CAAA;IACvC,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACgB,YAAA,EAAcvB,eAAA;IAAA;IAAAxJ,cAAA,GAAAE,CAAA;IAClC,OAAO6K,YAAA;EAET,EAAE,OAAOjH,KAAA,EAAO;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACd8K,OAAA,CAAAC,MAAM,CAACC,GAAG,CAACF,OAAA,CAAAG,QAAQ,CAACC,KAAK,EAAEJ,OAAA,CAAAK,WAAW,CAACC,GAAG,EAAE,wCAAwC;MAAExH,KAAA;MAAOa,QAAA,EAAU2E,MAAA,CAAOjF;IAAG;IAEjH;IAAA;IAAArE,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA;MAAY;MAAA,CAAA5K,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;MAAA;MAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;MACtFgH,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3BzF,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAEA,MAAM+G,UAAA;IAAA;IAAA,CAAA5K,cAAA,GAAAE,CAAA;IAAa;IAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;IAAA;IAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;IAAA;IAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;IAAA;IAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;IAC7F,MAAMoG,aAAA;IAAA;IAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;MACvC8D,IAAA,EAAM;MACNyE,OAAA,EAAS;MACT3E,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IAEA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;MAAElG,MAAA,EAAQ6G;IAAW;EAC/D;AACF;AAKO,eAAexK,IAAIiJ,OAAoB,EAAE;EAAEC;AAAM,CAA8B;EAAA;EAAAtJ,cAAA,GAAAC,CAAA;EACpF,MAAMsJ,SAAA;EAAA;EAAA,CAAAvJ,cAAA,GAAAE,CAAA,SAAY+E,IAAA,CAAKD,GAAG;EAAA;EAAAhF,cAAA,GAAAE,CAAA;EAE1B,IAAI;IACF;IACA,MAAMsJ,eAAA;IAAA;IAAA,CAAAxJ,cAAA,GAAAE,CAAA,SAAkB,MAAM,IAAAuJ,YAAA,CAAAC,cAAc,EAC1CL,OAAA,EACA;MACEvI,QAAA,EAAUF,kBAAA,CAAmBC,KAAK,CAACC,QAAQ;MAC3CC,WAAA,EAAaoI,IAAA,CAAKoC,KAAK,CAAC3K,kBAAA,CAAmBC,KAAK,CAACE,WAAW,GAAG;MAC/DC,OAAA,EAAS;IACX,GACA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAGF,IAAI,CAACsJ,eAAA,CAAgBf,OAAO,EAAE;MAAA;MAAAzI,cAAA,GAAA6D,CAAA;MAC5B,MAAM8F,QAAA;MAAA;MAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAW0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAChC;QAAEhG,KAAA,EAAO0F,eAAA,CAAgBxI;MAAQ,GACjC;QAAE+C,MAAA,EAAQ;MAAI;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAEhB,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACJ,QAAA,EAAUH,eAAA;MAAA;MAAAxJ,cAAA,GAAAE,CAAA;MAC9B,OAAOyJ,QAAA;IACT;IAAA;IAAA;MAAA3J,cAAA,GAAA6D,CAAA;IAAA;IAEA;IACA,MAAMmG,UAAA;IAAA;IAAA,CAAAhK,cAAA,GAAAE,CAAA,SAAa,MAAMsD,iBAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzB,IAAI8J,UAAA,CAAWlG,KAAK,EAAE;MAAA;MAAA9D,cAAA,GAAA6D,CAAA;MACpB,MAAMoG,aAAA;MAAA;MAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;QACvC8D,IAAA,EAAM;QACNyE,OAAA,EAAS;QACT3E,KAAA,EAAOkG,UAAA,CAAWlG;MACpB;MAAA;MAAA9D,cAAA,GAAAE,CAAA;MACA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;QAAElG,MAAA,EAAQiG,UAAA,CAAWjG;MAAO;IACtE;IAAA;IAAA;MAAA/D,cAAA,GAAA6D,CAAA;IAAA;IAEA;IACA,MAAM2H,IAAA;IAAA;IAAA,CAAAxL,cAAA,GAAAE,CAAA,SAAO,MAAMmJ,OAAA,CAAQS,IAAI;IAC/B,MAAM5D,UAAA;IAAA;IAAA,CAAAlG,cAAA,GAAAE,CAAA,SAAae,kBAAA,CAAmBqJ,KAAK,CAACkB,IAAA;IAC5C,MAAM7G,QAAA;IAAA;IAAA,CAAA3E,cAAA,GAAAE,CAAA,SAAWoJ,MAAA,CAAOjF,EAAE;IAE1B;IACA,MAAMmC,aAAA;IAAA;IAAA,CAAAxG,cAAA,GAAAE,CAAA,SAAgB,MAAM+F,YAAA,CAAatB,QAAA,EAAUuB,UAAA,EAAY8D,UAAA,CAAWvF,MAAM;IAEhF;IAAA;IAAAzE,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA,EAAY;MACZC,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3B9E,MAAA,EAAQuF,UAAA,CAAWvF;IACrB;IAEA,MAAMkF,QAAA;IAAA;IAAA,CAAA3J,cAAA,GAAAE,CAAA,SAA8C;MAClD8D,IAAA,EAAMwC,aAAA;MACNiC,OAAA,EAAS;MACTzH,OAAA,EAAS;IACX;IAEA,MAAM+J,YAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAE,CAAA,SAAe0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACH,QAAA;IAAA;IAAA3J,cAAA,GAAAE,CAAA;IACvC,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACgB,YAAA,EAAcvB,eAAA;IAAA;IAAAxJ,cAAA,GAAAE,CAAA;IAClC,OAAO6K,YAAA;EAET,EAAE,OAAOjH,KAAA,EAAO;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACd8K,OAAA,CAAAC,MAAM,CAACC,GAAG,CAACF,OAAA,CAAAG,QAAQ,CAACC,KAAK,EAAEJ,OAAA,CAAAK,WAAW,CAACC,GAAG,EAAE,wCAAwC;MAAExH,KAAA;MAAOa,QAAA,EAAU2E,MAAA,CAAOjF;IAAG;IAEjH;IAAA;IAAArE,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA;MAAY;MAAA,CAAA5K,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;MAAA;MAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;MACtFgH,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3BzF,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAEA,MAAM+G,UAAA;IAAA;IAAA,CAAA5K,cAAA,GAAAE,CAAA;IAAa;IAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;IAAA;IAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;IAAA;IAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;IAAA;IAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;IAC7F,MAAMoG,aAAA;IAAA;IAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;MACvC8D,IAAA,EAAM;MACNyE,OAAA,EAAS;MACT3E,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IAEA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;MAAElG,MAAA,EAAQ6G;IAAW;EAC/D;AACF;AAKO,eAAe7K,OAAOsJ,OAAoB,EAAE;EAAEC;AAAM,CAA8B;EAAA;EAAAtJ,cAAA,GAAAC,CAAA;EACvF,MAAMsJ,SAAA;EAAA;EAAA,CAAAvJ,cAAA,GAAAE,CAAA,SAAY+E,IAAA,CAAKD,GAAG;EAAA;EAAAhF,cAAA,GAAAE,CAAA;EAE1B,IAAI;IACF;IACA,MAAMsJ,eAAA;IAAA;IAAA,CAAAxJ,cAAA,GAAAE,CAAA,SAAkB,MAAM,IAAAuJ,YAAA,CAAAC,cAAc,EAC1CL,OAAA,EACA;MACEvI,QAAA,EAAUF,kBAAA,CAAmBC,KAAK,CAACC,QAAQ;MAC3CC,WAAA,EAAaoI,IAAA,CAAKoC,KAAK,CAAC3K,kBAAA,CAAmBC,KAAK,CAACE,WAAW,GAAG;MAC/DC,OAAA,EAAS;IACX,GACA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAGF,IAAI,CAACsJ,eAAA,CAAgBf,OAAO,EAAE;MAAA;MAAAzI,cAAA,GAAA6D,CAAA;MAC5B,MAAM8F,QAAA;MAAA;MAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAW0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAChC;QAAEhG,KAAA,EAAO0F,eAAA,CAAgBxI;MAAQ,GACjC;QAAE+C,MAAA,EAAQ;MAAI;MAAA;MAAA/D,cAAA,GAAAE,CAAA;MAEhB,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACJ,QAAA,EAAUH,eAAA;MAAA;MAAAxJ,cAAA,GAAAE,CAAA;MAC9B,OAAOyJ,QAAA;IACT;IAAA;IAAA;MAAA3J,cAAA,GAAA6D,CAAA;IAAA;IAEA;IACA,MAAMmG,UAAA;IAAA;IAAA,CAAAhK,cAAA,GAAAE,CAAA,SAAa,MAAMsD,iBAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzB,IAAI8J,UAAA,CAAWlG,KAAK,EAAE;MAAA;MAAA9D,cAAA,GAAA6D,CAAA;MACpB,MAAMoG,aAAA;MAAA;MAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;QACvC8D,IAAA,EAAM;QACNyE,OAAA,EAAS;QACT3E,KAAA,EAAOkG,UAAA,CAAWlG;MACpB;MAAA;MAAA9D,cAAA,GAAAE,CAAA;MACA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;QAAElG,MAAA,EAAQiG,UAAA,CAAWjG;MAAO;IACtE;IAAA;IAAA;MAAA/D,cAAA,GAAA6D,CAAA;IAAA;IAEA,MAAMc,QAAA;IAAA;IAAA,CAAA3E,cAAA,GAAAE,CAAA,SAAWoJ,MAAA,CAAOjF,EAAE;IAE1B;IACA,MAAMoH,MAAA;IAAA;IAAA,CAAAzL,cAAA,GAAAE,CAAA,SAAS,MAAMiI,YAAA,CAAaxD,QAAA,EAAUqF,UAAA,CAAWvF,MAAM;IAE7D;IAAA;IAAAzE,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA,EAAY;MACZC,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3B9E,MAAA,EAAQuF,UAAA,CAAWvF;IACrB;IAEA,MAAMkF,QAAA;IAAA;IAAA,CAAA3J,cAAA,GAAAE,CAAA,SAAuC;MAC3C8D,IAAA,EAAMyH,MAAA;MACNhD,OAAA,EAAS;MACTzH,OAAA,EAAS;IACX;IAEA,MAAM+J,YAAA;IAAA;IAAA,CAAA/K,cAAA,GAAAE,CAAA,SAAe0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACH,QAAA;IAAA;IAAA3J,cAAA,GAAAE,CAAA;IACvC,IAAAuJ,YAAA,CAAAM,mBAAmB,EAACgB,YAAA,EAAcvB,eAAA;IAAA;IAAAxJ,cAAA,GAAAE,CAAA;IAClC,OAAO6K,YAAA;EAET,EAAE,OAAOjH,KAAA,EAAO;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACd8K,OAAA,CAAAC,MAAM,CAACC,GAAG,CAACF,OAAA,CAAAG,QAAQ,CAACC,KAAK,EAAEJ,OAAA,CAAAK,WAAW,CAACC,GAAG,EAAE,2CAA2C;MAAExH,KAAA;MAAOa,QAAA,EAAU2E,MAAA,CAAOjF;IAAG;IAEpH;IAAA;IAAArE,cAAA,GAAAE,CAAA;IACAqK,QAAA,CAAAC,gBAAgB,CAACC,aAAa,CAAC;MAC7BC,QAAA,EAAU;MACVC,MAAA,EAAQ;MACRC,UAAA;MAAY;MAAA,CAAA5K,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;MAAA;MAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;MACtFgH,YAAA,EAAc5F,IAAA,CAAKD,GAAG,KAAKuE,SAAA;MAC3BzF,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAEA,MAAM+G,UAAA;IAAA;IAAA,CAAA5K,cAAA,GAAAE,CAAA;IAAa;IAAA,CAAAF,cAAA,GAAA6D,CAAA,WAAAC,KAAA,YAAiBiB,KAAA;IAAA;IAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAASC,KAAA,CAAM9C,OAAO,KAAK;IAAA;IAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAwB;IAAA;IAAA,CAAA7D,cAAA,GAAA6D,CAAA,WAAM;IAC7F,MAAMoG,aAAA;IAAA;IAAA,CAAAjK,cAAA,GAAAE,CAAA,SAAmC;MACvC8D,IAAA,EAAM;MACNyE,OAAA,EAAS;MACT3E,KAAA,EAAOA,KAAA,YAAiBiB,KAAA;MAAA;MAAA,CAAA/E,cAAA,GAAA6D,CAAA,WAAQC,KAAA,CAAM9C,OAAO;MAAA;MAAA,CAAAhB,cAAA,GAAA6D,CAAA,WAAG;IAClD;IAAA;IAAA7D,cAAA,GAAAE,CAAA;IAEA,OAAO0J,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACG,aAAA,EAAe;MAAElG,MAAA,EAAQ6G;IAAW;EAC/D;AACF","ignoreList":[]}