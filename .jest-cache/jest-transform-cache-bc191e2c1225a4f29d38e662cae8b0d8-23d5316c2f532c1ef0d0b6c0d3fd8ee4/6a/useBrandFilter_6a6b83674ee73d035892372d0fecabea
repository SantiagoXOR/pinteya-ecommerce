e559149535b23942f5df928b3c17a0eb
// ===================================
// HOOK: useBrandFilter
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get brandsToUrlString () {
        return brandsToUrlString;
    },
    get filterValidBrands () {
        return filterValidBrands;
    },
    get urlStringToBrands () {
        return urlStringToBrands;
    },
    get useBrandFilter () {
        return useBrandFilter;
    },
    get useSimpleBrandFilter () {
        return useSimpleBrandFilter;
    },
    get validateBrand () {
        return validateBrand;
    }
});
const _react = require("react");
const _brands = require("../lib/api/brands");
const _navigation = require("next/navigation");
function useBrandFilter(options = {}) {
    const { autoLoad = true, syncWithUrl = false, urlParam = 'brands', minProducts = 1, onBrandsChange } = options;
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    // Estados
    const [brands, setBrands] = (0, _react.useState)([]);
    const [selectedBrands, setSelectedBrandsState] = (0, _react.useState)([]);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    // Inicializar marcas seleccionadas desde URL
    (0, _react.useEffect)(()=>{
        if (syncWithUrl && searchParams) {
            const urlBrands = searchParams.get(urlParam);
            if (urlBrands) {
                const brandsArray = urlBrands.split(',').filter(Boolean);
                setSelectedBrandsState(brandsArray);
            }
        }
    }, [
        syncWithUrl,
        urlParam,
        searchParams
    ]);
    // Cargar marcas
    const fetchBrands = (0, _react.useCallback)(async ()=>{
        setIsLoading(true);
        setError(null);
        try {
            const response = await (0, _brands.getBrands)({
                minProducts
            });
            if (response.success && response.data) {
                setBrands(response.data);
            } else {
                setError(response.error || 'Error cargando marcas');
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Error desconocido');
        } finally{
            setIsLoading(false);
        }
    }, [
        minProducts
    ]);
    // Cargar marcas automáticamente
    (0, _react.useEffect)(()=>{
        if (autoLoad) {
            fetchBrands();
        }
    }, [
        autoLoad,
        fetchBrands
    ]);
    // Actualizar URL cuando cambian las marcas seleccionadas
    const updateUrl = (0, _react.useCallback)((newBrands)=>{
        if (!syncWithUrl) {
            return;
        }
        const params = new URLSearchParams(searchParams?.toString());
        if (newBrands.length > 0) {
            params.set(urlParam, newBrands.join(','));
        } else {
            params.delete(urlParam);
        }
        const newUrl = `${window.location.pathname}?${params.toString()}`;
        router.push(newUrl, {
            scroll: false
        });
    }, [
        syncWithUrl,
        urlParam,
        searchParams,
        router
    ]);
    // Función para cambiar marcas seleccionadas
    const setSelectedBrands = (0, _react.useCallback)((newBrands)=>{
        setSelectedBrandsState(newBrands);
        updateUrl(newBrands);
        onBrandsChange?.(newBrands);
    }, [
        updateUrl,
        onBrandsChange
    ]);
    // Función para alternar una marca
    const toggleBrand = (0, _react.useCallback)((brandName)=>{
        const newBrands = selectedBrands.includes(brandName) ? selectedBrands.filter((b)=>b !== brandName) : [
            ...selectedBrands,
            brandName
        ];
        setSelectedBrands(newBrands);
    }, [
        selectedBrands,
        setSelectedBrands
    ]);
    // Función para limpiar todas las marcas
    const clearBrands = (0, _react.useCallback)(()=>{
        setSelectedBrands([]);
    }, [
        setSelectedBrands
    ]);
    // Función para buscar marcas
    const searchBrands = (0, _react.useCallback)(async (searchTerm)=>{
        setIsLoading(true);
        setError(null);
        try {
            const response = await (0, _brands.getBrands)({
                search: searchTerm,
                minProducts
            });
            if (response.success && response.data) {
                setBrands(response.data);
            } else {
                setError(response.error || 'Error buscando marcas');
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Error desconocido');
        } finally{
            setIsLoading(false);
        }
    }, [
        minProducts
    ]);
    return {
        brands,
        selectedBrands,
        isLoading,
        error,
        setSelectedBrands,
        toggleBrand,
        clearBrands,
        refetch: fetchBrands,
        searchBrands
    };
}
function useSimpleBrandFilter() {
    const [selectedBrands, setSelectedBrands] = (0, _react.useState)([]);
    const toggleBrand = (0, _react.useCallback)((brandName)=>{
        setSelectedBrands((prev)=>prev.includes(brandName) ? prev.filter((b)=>b !== brandName) : [
                ...prev,
                brandName
            ]);
    }, []);
    const clearBrands = (0, _react.useCallback)(()=>{
        setSelectedBrands([]);
    }, []);
    return {
        selectedBrands,
        setSelectedBrands,
        toggleBrand,
        clearBrands
    };
}
function brandsToUrlString(brands) {
    return brands.join(',');
}
function urlStringToBrands(urlString) {
    return urlString.split(',').filter(Boolean);
}
function validateBrand(brandName, availableBrands) {
    return availableBrands.some((brand)=>brand.name === brandName);
}
function filterValidBrands(brandNames, availableBrands) {
    return brandNames.filter((name)=>validateBrand(name, availableBrands));
}

//# sourceMappingURL=data:application/json;base64,