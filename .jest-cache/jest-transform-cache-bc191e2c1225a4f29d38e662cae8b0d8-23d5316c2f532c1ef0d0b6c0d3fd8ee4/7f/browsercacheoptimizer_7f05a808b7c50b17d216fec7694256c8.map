{"version":3,"names":["BROWSER_CACHE_CONFIGS","cov_mke0xydv3","f","s","BrowserCacheOptimizer","BrowserCacheStrategy","BrowserCacheUtils","SERVICE_WORKER_TEMPLATE","browserCacheOptimizer","STATIC_ASSETS","strategy","cacheName","maxAge","maxEntries","urlPatterns","headers","HTML_PAGES","networkTimeoutSeconds","excludePatterns","PUBLIC_API","PRODUCT_IMAGES","USER_DATA","JSON","stringify","constructor","isServiceWorkerRegistered","isServiceWorkerSupported","b","window","navigator","getInstance","instance","initialize","_logger","logger","warn","LogCategory","CACHE","registerServiceWorker","setupCacheHeaders","setupPerformanceObserver","info","error","swBlob","Blob","type","swUrl","URL","createObjectURL","registration","serviceWorker","register","scope","addEventListener","newWorker","installing","state","controller","notifyServiceWorkerUpdate","addCacheMetaTags","setupResourcePreloading","head","document","cacheControlMeta","createElement","httpEquiv","content","appendChild","preconnectDomains","forEach","domain","link","rel","href","criticalResources","as","crossorigin","resource","crossOrigin","navObserver","PerformanceObserver","list","entries","getEntries","entry","entryType","logNavigationMetrics","observe","entryTypes","resourceObserver","logResourceMetrics","metrics","dns","domainLookupEnd","domainLookupStart","tcp","connectEnd","connectStart","request","responseStart","requestStart","response","responseEnd","dom","domContentLoadedEventEnd","load","loadEventEnd","loadEventStart","total","navigationStart","isCacheHit","transferSize","decodedBodySize","debug","name","event","CustomEvent","detail","message","dispatchEvent","clearOldCaches","postMessage","updateServiceWorker","getRegistration","update","waiting","getCacheStats","caches","totalSize","totalEntries","cacheNames","keys","cacheStats","Promise","all","map","cache","open","size","match","blob","length","reduce","sum","isServiceWorkerActive","getStats","isActive"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\browser-cache-optimizer.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - BROWSER CACHE OPTIMIZER\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\n\r\n/**\r\n * Estrategias de cache del navegador\r\n */\r\nexport enum BrowserCacheStrategy {\r\n  CACHE_FIRST = 'cache-first',\r\n  NETWORK_FIRST = 'network-first',\r\n  STALE_WHILE_REVALIDATE = 'stale-while-revalidate',\r\n  NETWORK_ONLY = 'network-only',\r\n  CACHE_ONLY = 'cache-only'\r\n}\r\n\r\n/**\r\n * Configuración de cache del navegador\r\n */\r\nexport interface BrowserCacheConfig {\r\n  strategy: BrowserCacheStrategy;\r\n  cacheName: string;\r\n  maxAge: number;\r\n  maxEntries?: number;\r\n  networkTimeoutSeconds?: number;\r\n  urlPatterns: RegExp[];\r\n  excludePatterns?: RegExp[];\r\n  headers?: Record<string, string>;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas para diferentes tipos de recursos\r\n */\r\nexport const BROWSER_CACHE_CONFIGS: Record<string, BrowserCacheConfig> = {\r\n  // Assets estáticos (CSS, JS, imágenes)\r\n  STATIC_ASSETS: {\r\n    strategy: BrowserCacheStrategy.CACHE_FIRST,\r\n    cacheName: 'static-assets-v1',\r\n    maxAge: 86400 * 30, // 30 días\r\n    maxEntries: 100,\r\n    urlPatterns: [\r\n      /\\.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\r\n      /\\/_next\\/static\\//\r\n    ],\r\n    headers: {\r\n      'Cache-Control': 'public, max-age=2592000, immutable'\r\n    }\r\n  },\r\n\r\n  // Páginas HTML\r\n  HTML_PAGES: {\r\n    strategy: BrowserCacheStrategy.NETWORK_FIRST,\r\n    cacheName: 'html-pages-v1',\r\n    maxAge: 3600, // 1 hora\r\n    maxEntries: 50,\r\n    networkTimeoutSeconds: 3,\r\n    urlPatterns: [\r\n      /\\/$/,\r\n      /\\/shop/,\r\n      /\\/products/,\r\n      /\\/categories/\r\n    ],\r\n    excludePatterns: [\r\n      /\\/admin/,\r\n      /\\/api/,\r\n      /\\/auth/\r\n    ]\r\n  },\r\n\r\n  // APIs públicas\r\n  PUBLIC_API: {\r\n    strategy: BrowserCacheStrategy.STALE_WHILE_REVALIDATE,\r\n    cacheName: 'public-api-v1',\r\n    maxAge: 300, // 5 minutos\r\n    maxEntries: 100,\r\n    networkTimeoutSeconds: 5,\r\n    urlPatterns: [\r\n      /\\/api\\/products/,\r\n      /\\/api\\/categories/,\r\n      /\\/api\\/search/\r\n    ],\r\n    excludePatterns: [\r\n      /\\/api\\/auth/,\r\n      /\\/api\\/admin/,\r\n      /\\/api\\/user/\r\n    ]\r\n  },\r\n\r\n  // Imágenes de productos\r\n  PRODUCT_IMAGES: {\r\n    strategy: BrowserCacheStrategy.CACHE_FIRST,\r\n    cacheName: 'product-images-v1',\r\n    maxAge: 86400 * 7, // 7 días\r\n    maxEntries: 200,\r\n    urlPatterns: [\r\n      /\\/images\\/products\\//,\r\n      /\\/uploads\\/products\\//,\r\n      /\\.supabase\\.co\\/storage\\/.*\\/products\\//\r\n    ],\r\n    headers: {\r\n      'Cache-Control': 'public, max-age=604800'\r\n    }\r\n  },\r\n\r\n  // Datos de usuario (cache corto)\r\n  USER_DATA: {\r\n    strategy: BrowserCacheStrategy.NETWORK_FIRST,\r\n    cacheName: 'user-data-v1',\r\n    maxAge: 300, // 5 minutos\r\n    maxEntries: 20,\r\n    networkTimeoutSeconds: 2,\r\n    urlPatterns: [\r\n      /\\/api\\/user\\/profile/,\r\n      /\\/api\\/user\\/preferences/\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * Service Worker template para cache optimizado\r\n */\r\nexport const SERVICE_WORKER_TEMPLATE = `\r\n// ===================================\r\n// PINTEYA E-COMMERCE - SERVICE WORKER\r\n// ===================================\r\n\r\nconst CACHE_VERSION = 'v1.2.0';\r\nconst CACHE_CONFIGS = ${JSON.stringify(BROWSER_CACHE_CONFIGS, null, 2)};\r\n\r\n// Instalar Service Worker\r\nself.addEventListener('install', (event) => {\r\n  console.log('[SW] Installing Service Worker');\r\n  \r\n  event.waitUntil(\r\n    Promise.all([\r\n      // Pre-cache assets críticos\r\n      caches.open(CACHE_CONFIGS.STATIC_ASSETS.cacheName).then((cache) => {\r\n        return cache.addAll([\r\n          '/',\r\n          '/manifest.json',\r\n          '/_next/static/css/app.css',\r\n          '/_next/static/js/app.js'\r\n        ]);\r\n      })\r\n    ])\r\n  );\r\n  \r\n  self.skipWaiting();\r\n});\r\n\r\n// Activar Service Worker\r\nself.addEventListener('activate', (event) => {\r\n  console.log('[SW] Activating Service Worker');\r\n  \r\n  event.waitUntil(\r\n    caches.keys().then((cacheNames) => {\r\n      return Promise.all(\r\n        cacheNames.map((cacheName) => {\r\n          // Eliminar caches antiguos\r\n          if (!Object.values(CACHE_CONFIGS).some(config => config.cacheName === cacheName)) {\r\n            console.log('[SW] Deleting old cache:', cacheName);\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n  \r\n  self.clients.claim();\r\n});\r\n\r\n// Interceptar requests\r\nself.addEventListener('fetch', (event) => {\r\n  const request = event.request;\r\n  const url = new URL(request.url);\r\n  \r\n  // Solo manejar requests GET\r\n  if (request.method !== 'GET') return;\r\n  \r\n  // Encontrar configuración de cache apropiada\r\n  const config = findCacheConfig(url.pathname + url.search);\r\n  if (!config) return;\r\n  \r\n  event.respondWith(handleRequest(request, config));\r\n});\r\n\r\n// Encontrar configuración de cache para una URL\r\nfunction findCacheConfig(url) {\r\n  for (const [name, config] of Object.entries(CACHE_CONFIGS)) {\r\n    // Verificar patrones de exclusión\r\n    if (config.excludePatterns && config.excludePatterns.some(pattern => new RegExp(pattern).test(url))) {\r\n      continue;\r\n    }\r\n    \r\n    // Verificar patrones de inclusión\r\n    if (config.urlPatterns.some(pattern => new RegExp(pattern).test(url))) {\r\n      return config;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Manejar request según estrategia\r\nasync function handleRequest(request, config) {\r\n  switch (config.strategy) {\r\n    case 'cache-first':\r\n      return cacheFirst(request, config);\r\n    case 'network-first':\r\n      return networkFirst(request, config);\r\n    case 'stale-while-revalidate':\r\n      return staleWhileRevalidate(request, config);\r\n    case 'network-only':\r\n      return fetch(request);\r\n    case 'cache-only':\r\n      return cacheOnly(request, config);\r\n    default:\r\n      return fetch(request);\r\n  }\r\n}\r\n\r\n// Estrategia Cache First\r\nasync function cacheFirst(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  \r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      await cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('[SW] Cache First failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Estrategia Network First\r\nasync function networkFirst(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  \r\n  try {\r\n    const networkPromise = fetch(request);\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('Network timeout')), (config.networkTimeoutSeconds || 3) * 1000);\r\n    });\r\n    \r\n    const response = await Promise.race([networkPromise, timeoutPromise]);\r\n    \r\n    if (response.ok) {\r\n      await cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.log('[SW] Network failed, trying cache:', error.message);\r\n    const cached = await cache.match(request);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Estrategia Stale While Revalidate\r\nasync function staleWhileRevalidate(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  // Revalidar en background\r\n  const fetchPromise = fetch(request).then(response => {\r\n    if (response.ok) {\r\n      cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  }).catch(error => {\r\n    console.error('[SW] Background revalidation failed:', error);\r\n  });\r\n  \r\n  // Retornar cache inmediatamente si existe\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  \r\n  // Si no hay cache, esperar por la red\r\n  return fetchPromise;\r\n}\r\n\r\n// Estrategia Cache Only\r\nasync function cacheOnly(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  if (!cached) {\r\n    throw new Error('No cached response available');\r\n  }\r\n  \r\n  return cached;\r\n}\r\n\r\n// Limpiar caches antiguos\r\nasync function cleanupOldCaches() {\r\n  const cacheNames = await caches.keys();\r\n  const validCacheNames = Object.values(CACHE_CONFIGS).map(config => config.cacheName);\r\n  \r\n  return Promise.all(\r\n    cacheNames.map(cacheName => {\r\n      if (!validCacheNames.includes(cacheName)) {\r\n        console.log('[SW] Deleting old cache:', cacheName);\r\n        return caches.delete(cacheName);\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\n// Mensaje desde el cliente\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n  \r\n  if (event.data && event.data.type === 'CLEANUP_CACHES') {\r\n    cleanupOldCaches();\r\n  }\r\n});\r\n`;\r\n\r\n/**\r\n * Optimizador de cache del navegador\r\n */\r\nexport class BrowserCacheOptimizer {\r\n  private static instance: BrowserCacheOptimizer;\r\n  private isServiceWorkerSupported: boolean;\r\n  private isServiceWorkerRegistered: boolean = false;\r\n\r\n  private constructor() {\r\n    this.isServiceWorkerSupported = typeof window !== 'undefined' && 'serviceWorker' in navigator;\r\n  }\r\n\r\n  static getInstance(): BrowserCacheOptimizer {\r\n    if (!BrowserCacheOptimizer.instance) {\r\n      BrowserCacheOptimizer.instance = new BrowserCacheOptimizer();\r\n    }\r\n    return BrowserCacheOptimizer.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el optimizador de cache del navegador\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported) {\r\n      logger.warn(LogCategory.CACHE, 'Service Worker no soportado en este navegador');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.registerServiceWorker();\r\n      await this.setupCacheHeaders();\r\n      this.setupPerformanceObserver();\r\n      \r\n      logger.info(LogCategory.CACHE, 'Browser Cache Optimizer inicializado correctamente');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error inicializando Browser Cache Optimizer', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra el Service Worker\r\n   */\r\n  private async registerServiceWorker(): Promise<void> {\r\n    if (this.isServiceWorkerRegistered) {return;}\r\n\r\n    try {\r\n      // Crear y registrar Service Worker dinámicamente\r\n      const swBlob = new Blob([SERVICE_WORKER_TEMPLATE], { type: 'application/javascript' });\r\n      const swUrl = URL.createObjectURL(swBlob);\r\n      \r\n      const registration = await navigator.serviceWorker.register(swUrl, {\r\n        scope: '/'\r\n      });\r\n\r\n      registration.addEventListener('updatefound', () => {\r\n        const newWorker = registration.installing;\r\n        if (newWorker) {\r\n          newWorker.addEventListener('statechange', () => {\r\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n              // Nuevo Service Worker disponible\r\n              this.notifyServiceWorkerUpdate();\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      this.isServiceWorkerRegistered = true;\r\n      logger.info(LogCategory.CACHE, 'Service Worker registrado correctamente');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error registrando Service Worker', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configura headers de cache optimizados\r\n   */\r\n  private async setupCacheHeaders(): Promise<void> {\r\n    // Esta función se ejecuta en el cliente para configurar headers\r\n    // Los headers reales se configuran en el servidor\r\n    \r\n    if (typeof window !== 'undefined') {\r\n      // Configurar meta tags para cache\r\n      this.addCacheMetaTags();\r\n      \r\n      // Configurar preload para recursos críticos\r\n      this.setupResourcePreloading();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Añade meta tags para optimización de cache\r\n   */\r\n  private addCacheMetaTags(): void {\r\n    const head = document.head;\r\n    \r\n    // Cache-Control para la página actual\r\n    const cacheControlMeta = document.createElement('meta');\r\n    cacheControlMeta.httpEquiv = 'Cache-Control';\r\n    cacheControlMeta.content = 'public, max-age=3600, stale-while-revalidate=86400';\r\n    head.appendChild(cacheControlMeta);\r\n    \r\n    // Preconnect a dominios externos\r\n    const preconnectDomains = [\r\n      'https://fonts.googleapis.com',\r\n      'https://fonts.gstatic.com',\r\n      'https://api.maptiler.com'\r\n    ];\r\n    \r\n    preconnectDomains.forEach(domain => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preconnect';\r\n      link.href = domain;\r\n      head.appendChild(link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configura preloading de recursos críticos\r\n   */\r\n  private setupResourcePreloading(): void {\r\n    const head = document.head;\r\n    \r\n    // Preload de recursos críticos\r\n    const criticalResources = [\r\n      { href: '/_next/static/css/app.css', as: 'style' },\r\n      { href: '/_next/static/js/app.js', as: 'script' },\r\n      { href: '/fonts/inter.woff2', as: 'font', type: 'font/woff2', crossorigin: 'anonymous' }\r\n    ];\r\n    \r\n    criticalResources.forEach(resource => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preload';\r\n      link.href = resource.href;\r\n      link.as = resource.as;\r\n      if (resource.type) {link.type = resource.type;}\r\n      if (resource.crossorigin) {link.crossOrigin = resource.crossorigin;}\r\n      head.appendChild(link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configura Performance Observer para monitoreo\r\n   */\r\n  private setupPerformanceObserver(): void {\r\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {return;}\r\n\r\n    try {\r\n      // Observer para Navigation Timing\r\n      const navObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach(entry => {\r\n          if (entry.entryType === 'navigation') {\r\n            this.logNavigationMetrics(entry as PerformanceNavigationTiming);\r\n          }\r\n        });\r\n      });\r\n      navObserver.observe({ entryTypes: ['navigation'] });\r\n\r\n      // Observer para Resource Timing\r\n      const resourceObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach(entry => {\r\n          if (entry.entryType === 'resource') {\r\n            this.logResourceMetrics(entry as PerformanceResourceTiming);\r\n          }\r\n        });\r\n      });\r\n      resourceObserver.observe({ entryTypes: ['resource'] });\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error configurando Performance Observer', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de navegación\r\n   */\r\n  private logNavigationMetrics(entry: PerformanceNavigationTiming): void {\r\n    const metrics = {\r\n      dns: entry.domainLookupEnd - entry.domainLookupStart,\r\n      tcp: entry.connectEnd - entry.connectStart,\r\n      request: entry.responseStart - entry.requestStart,\r\n      response: entry.responseEnd - entry.responseStart,\r\n      dom: entry.domContentLoadedEventEnd - entry.responseEnd,\r\n      load: entry.loadEventEnd - entry.loadEventStart,\r\n      total: entry.loadEventEnd - entry.navigationStart\r\n    };\r\n\r\n    logger.info(LogCategory.CACHE, 'Navigation metrics:', metrics);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de recursos\r\n   */\r\n  private logResourceMetrics(entry: PerformanceResourceTiming): void {\r\n    const isCacheHit = entry.transferSize === 0 && entry.decodedBodySize > 0;\r\n    \r\n    if (isCacheHit) {\r\n      logger.debug(LogCategory.CACHE, `Cache HIT: ${entry.name}`);\r\n    } else {\r\n      logger.debug(LogCategory.CACHE, `Cache MISS: ${entry.name} (${entry.transferSize} bytes)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notifica sobre actualización del Service Worker\r\n   */\r\n  private notifyServiceWorkerUpdate(): void {\r\n    // Mostrar notificación al usuario sobre nueva versión disponible\r\n    if (typeof window !== 'undefined') {\r\n      const event = new CustomEvent('sw-update-available', {\r\n        detail: { message: 'Nueva versión disponible. Recarga la página para actualizar.' }\r\n      });\r\n      window.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia caches antiguos\r\n   */\r\n  async clearOldCaches(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported || !navigator.serviceWorker.controller) {return;}\r\n\r\n    try {\r\n      navigator.serviceWorker.controller.postMessage({\r\n        type: 'CLEANUP_CACHES'\r\n      });\r\n      \r\n      logger.info(LogCategory.CACHE, 'Limpieza de caches antiguos iniciada');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error limpiando caches antiguos', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fuerza actualización del Service Worker\r\n   */\r\n  async updateServiceWorker(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported) {return;}\r\n\r\n    try {\r\n      const registration = await navigator.serviceWorker.getRegistration();\r\n      if (registration) {\r\n        await registration.update();\r\n        \r\n        if (registration.waiting) {\r\n          registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n        }\r\n      }\r\n      \r\n      logger.info(LogCategory.CACHE, 'Service Worker actualizado');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error actualizando Service Worker', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de cache del navegador\r\n   */\r\n  async getCacheStats(): Promise<{\r\n    caches: Array<{ name: string; size: number; entries: number }>;\r\n    totalSize: number;\r\n    totalEntries: number;\r\n  }> {\r\n    if (!this.isServiceWorkerSupported) {\r\n      return { caches: [], totalSize: 0, totalEntries: 0 };\r\n    }\r\n\r\n    try {\r\n      const cacheNames = await caches.keys();\r\n      const cacheStats = await Promise.all(\r\n        cacheNames.map(async (name) => {\r\n          const cache = await caches.open(name);\r\n          const keys = await cache.keys();\r\n          \r\n          let size = 0;\r\n          for (const request of keys) {\r\n            const response = await cache.match(request);\r\n            if (response) {\r\n              const blob = await response.blob();\r\n              size += blob.size;\r\n            }\r\n          }\r\n          \r\n          return { name, size, entries: keys.length };\r\n        })\r\n      );\r\n\r\n      const totalSize = cacheStats.reduce((sum, cache) => sum + cache.size, 0);\r\n      const totalEntries = cacheStats.reduce((sum, cache) => sum + cache.entries, 0);\r\n\r\n      return { caches: cacheStats, totalSize, totalEntries };\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error obteniendo estadísticas de cache', error as Error);\r\n      return { caches: [], totalSize: 0, totalEntries: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el Service Worker está activo\r\n   */\r\n  isServiceWorkerActive(): boolean {\r\n    return this.isServiceWorkerSupported && this.isServiceWorkerRegistered;\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const browserCacheOptimizer = BrowserCacheOptimizer.getInstance();\r\n\r\n/**\r\n * Utilidades para cache del navegador\r\n */\r\nexport const BrowserCacheUtils = {\r\n  /**\r\n   * Inicializa cache del navegador\r\n   */\r\n  async initialize(): Promise<void> {\r\n    await browserCacheOptimizer.initialize();\r\n  },\r\n\r\n  /**\r\n   * Obtiene estadísticas de cache\r\n   */\r\n  async getStats() {\r\n    return browserCacheOptimizer.getCacheStats();\r\n  },\r\n\r\n  /**\r\n   * Limpia caches antiguos\r\n   */\r\n  async clearOldCaches(): Promise<void> {\r\n    await browserCacheOptimizer.clearOldCaches();\r\n  },\r\n\r\n  /**\r\n   * Actualiza Service Worker\r\n   */\r\n  async updateServiceWorker(): Promise<void> {\r\n    await browserCacheOptimizer.updateServiceWorker();\r\n  },\r\n\r\n  /**\r\n   * Verifica si está activo\r\n   */\r\n  isActive(): boolean {\r\n    return browserCacheOptimizer.isServiceWorkerActive();\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}