cba71aeadb279250895d20e094e01737
// ===================================
// PINTEYA E-COMMERCE - BROWSER CACHE OPTIMIZER
// ===================================
"use strict";

/* istanbul ignore next */
function cov_mke0xydv3() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\browser-cache-optimizer.ts";
  var hash = "a5ab990ff83014a2cb187e2942bcfd15b6007b72";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\browser-cache-optimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 36
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 33
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 37
        }
      },
      "10": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "11": {
        start: {
          line: 35,
          column: 41
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "12": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 56
        }
      },
      "13": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 60
        }
      },
      "14": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 78
        }
      },
      "15": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 58
        }
      },
      "16": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 54
        }
      },
      "17": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 32
        }
      },
      "18": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 122,
          column: 1
        }
      },
      "19": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 330,
          column: 1
        }
      },
      "20": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 47
        }
      },
      "21": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 102
        }
      },
      "22": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "23": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 73
        }
      },
      "24": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 46
        }
      },
      "25": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "26": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 108
        }
      },
      "27": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 19
        }
      },
      "28": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "29": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 47
        }
      },
      "30": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 43
        }
      },
      "31": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 44
        }
      },
      "32": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 113
        }
      },
      "33": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 114
        }
      },
      "34": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "35": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 19
        }
      },
      "36": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "37": {
        start: {
          line: 366,
          column: 27
        },
        end: {
          line: 370,
          column: 14
        }
      },
      "38": {
        start: {
          line: 371,
          column: 26
        },
        end: {
          line: 371,
          column: 53
        }
      },
      "39": {
        start: {
          line: 372,
          column: 33
        },
        end: {
          line: 374,
          column: 14
        }
      },
      "40": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 385,
          column: 15
        }
      },
      "41": {
        start: {
          line: 376,
          column: 34
        },
        end: {
          line: 376,
          column: 57
        }
      },
      "42": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 384,
          column: 17
        }
      },
      "43": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 383,
          column: 23
        }
      },
      "44": {
        start: {
          line: 379,
          column: 24
        },
        end: {
          line: 382,
          column: 25
        }
      },
      "45": {
        start: {
          line: 381,
          column: 28
        },
        end: {
          line: 381,
          column: 61
        }
      },
      "46": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 50
        }
      },
      "47": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 102
        }
      },
      "48": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 103
        }
      },
      "49": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "50": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 36
        }
      },
      "51": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 43
        }
      },
      "52": {
        start: {
          line: 407,
          column: 21
        },
        end: {
          line: 407,
          column: 34
        }
      },
      "53": {
        start: {
          line: 409,
          column: 33
        },
        end: {
          line: 409,
          column: 63
        }
      },
      "54": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 53
        }
      },
      "55": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 88
        }
      },
      "56": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 43
        }
      },
      "57": {
        start: {
          line: 414,
          column: 34
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "58": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 424,
          column: 11
        }
      },
      "59": {
        start: {
          line: 420,
          column: 25
        },
        end: {
          line: 420,
          column: 55
        }
      },
      "60": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 36
        }
      },
      "61": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 31
        }
      },
      "62": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 35
        }
      },
      "63": {
        start: {
          line: 429,
          column: 21
        },
        end: {
          line: 429,
          column: 34
        }
      },
      "64": {
        start: {
          line: 431,
          column: 34
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "65": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 459,
          column: 11
        }
      },
      "66": {
        start: {
          line: 448,
          column: 25
        },
        end: {
          line: 448,
          column: 55
        }
      },
      "67": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 33
        }
      },
      "68": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 38
        }
      },
      "69": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 34
        }
      },
      "70": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 454,
          column: 13
        }
      },
      "71": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 42
        }
      },
      "72": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 457,
          column: 13
        }
      },
      "73": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 56
        }
      },
      "74": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 35
        }
      },
      "75": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "76": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "77": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "78": {
        start: {
          line: 469,
          column: 32
        },
        end: {
          line: 476,
          column: 14
        }
      },
      "79": {
        start: {
          line: 470,
          column: 32
        },
        end: {
          line: 470,
          column: 49
        }
      },
      "80": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 475,
          column: 19
        }
      },
      "81": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 474,
          column: 21
        }
      },
      "82": {
        start: {
          line: 473,
          column: 24
        },
        end: {
          line: 473,
          column: 57
        }
      },
      "83": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 481,
          column: 15
        }
      },
      "84": {
        start: {
          line: 483,
          column: 37
        },
        end: {
          line: 490,
          column: 14
        }
      },
      "85": {
        start: {
          line: 484,
          column: 32
        },
        end: {
          line: 484,
          column: 49
        }
      },
      "86": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 489,
          column: 19
        }
      },
      "87": {
        start: {
          line: 486,
          column: 20
        },
        end: {
          line: 488,
          column: 21
        }
      },
      "88": {
        start: {
          line: 487,
          column: 24
        },
        end: {
          line: 487,
          column: 55
        }
      },
      "89": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 495,
          column: 15
        }
      },
      "90": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 110
        }
      },
      "91": {
        start: {
          line: 503,
          column: 24
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "92": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 87
        }
      },
      "93": {
        start: {
          line: 517,
          column: 27
        },
        end: {
          line: 517,
          column: 80
        }
      },
      "94": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 522,
          column: 9
        }
      },
      "95": {
        start: {
          line: 519,
          column: 12
        },
        end: {
          line: 519,
          column: 88
        }
      },
      "96": {
        start: {
          line: 521,
          column: 12
        },
        end: {
          line: 521,
          column: 119
        }
      },
      "97": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 535,
          column: 9
        }
      },
      "98": {
        start: {
          line: 529,
          column: 26
        },
        end: {
          line: 533,
          column: 14
        }
      },
      "99": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 40
        }
      },
      "100": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "101": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 541,
          column: 19
        }
      },
      "102": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 550,
          column: 9
        }
      },
      "103": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 546,
          column: 15
        }
      },
      "104": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 99
        }
      },
      "105": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 549,
          column: 102
        }
      },
      "106": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 557,
          column: 9
        }
      },
      "107": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 19
        }
      },
      "108": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 571,
          column: 9
        }
      },
      "109": {
        start: {
          line: 559,
          column: 33
        },
        end: {
          line: 559,
          column: 80
        }
      },
      "110": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 567,
          column: 13
        }
      },
      "111": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 44
        }
      },
      "112": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 566,
          column: 17
        }
      },
      "113": {
        start: {
          line: 563,
          column: 20
        },
        end: {
          line: 565,
          column: 23
        }
      },
      "114": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 568,
          column: 89
        }
      },
      "115": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 570,
          column: 104
        }
      },
      "116": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 582,
          column: 9
        }
      },
      "117": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 581,
          column: 14
        }
      },
      "118": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 616,
          column: 9
        }
      },
      "119": {
        start: {
          line: 584,
          column: 31
        },
        end: {
          line: 584,
          column: 50
        }
      },
      "120": {
        start: {
          line: 585,
          column: 31
        },
        end: {
          line: 601,
          column: 15
        }
      },
      "121": {
        start: {
          line: 586,
          column: 30
        },
        end: {
          line: 586,
          column: 53
        }
      },
      "122": {
        start: {
          line: 587,
          column: 29
        },
        end: {
          line: 587,
          column: 47
        }
      },
      "123": {
        start: {
          line: 588,
          column: 27
        },
        end: {
          line: 588,
          column: 28
        }
      },
      "124": {
        start: {
          line: 589,
          column: 16
        },
        end: {
          line: 595,
          column: 17
        }
      },
      "125": {
        start: {
          line: 590,
          column: 37
        },
        end: {
          line: 590,
          column: 63
        }
      },
      "126": {
        start: {
          line: 591,
          column: 20
        },
        end: {
          line: 594,
          column: 21
        }
      },
      "127": {
        start: {
          line: 592,
          column: 37
        },
        end: {
          line: 592,
          column: 58
        }
      },
      "128": {
        start: {
          line: 593,
          column: 24
        },
        end: {
          line: 593,
          column: 42
        }
      },
      "129": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 600,
          column: 18
        }
      },
      "130": {
        start: {
          line: 602,
          column: 30
        },
        end: {
          line: 602,
          column: 82
        }
      },
      "131": {
        start: {
          line: 602,
          column: 62
        },
        end: {
          line: 602,
          column: 78
        }
      },
      "132": {
        start: {
          line: 603,
          column: 33
        },
        end: {
          line: 603,
          column: 88
        }
      },
      "133": {
        start: {
          line: 603,
          column: 65
        },
        end: {
          line: 603,
          column: 84
        }
      },
      "134": {
        start: {
          line: 604,
          column: 12
        },
        end: {
          line: 608,
          column: 14
        }
      },
      "135": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 610,
          column: 109
        }
      },
      "136": {
        start: {
          line: 611,
          column: 12
        },
        end: {
          line: 615,
          column: 14
        }
      },
      "137": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 621,
          column: 79
        }
      },
      "138": {
        start: {
          line: 624,
          column: 30
        },
        end: {
          line: 624,
          column: 65
        }
      },
      "139": {
        start: {
          line: 625,
          column: 26
        },
        end: {
          line: 651,
          column: 1
        }
      },
      "140": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 629,
          column: 49
        }
      },
      "141": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 634,
          column: 53
        }
      },
      "142": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 639,
          column: 53
        }
      },
      "143": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 58
        }
      },
      "144": {
        start: {
          line: 649,
          column: 8
        },
        end: {
          line: 649,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 33
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 35,
            column: 42
          }
        },
        loc: {
          start: {
            line: 35,
            column: 72
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 35
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 17
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 332
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 25
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 336
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 344,
            column: 6
          },
          end: {
            line: 344,
            column: 7
          }
        },
        loc: {
          start: {
            line: 344,
            column: 25
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 344
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 360,
            column: 6
          },
          end: {
            line: 360,
            column: 7
          }
        },
        loc: {
          start: {
            line: 360,
            column: 36
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 360
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 375,
            column: 57
          },
          end: {
            line: 375,
            column: 58
          }
        },
        loc: {
          start: {
            line: 375,
            column: 61
          },
          end: {
            line: 385,
            column: 13
          }
        },
        line: 375
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 378,
            column: 62
          },
          end: {
            line: 378,
            column: 63
          }
        },
        loc: {
          start: {
            line: 378,
            column: 66
          },
          end: {
            line: 383,
            column: 21
          }
        },
        line: 378
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 394,
            column: 6
          },
          end: {
            line: 394,
            column: 7
          }
        },
        loc: {
          start: {
            line: 394,
            column: 32
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 394
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 406,
            column: 6
          },
          end: {
            line: 406,
            column: 7
          }
        },
        loc: {
          start: {
            line: 406,
            column: 25
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 406
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 419,
            column: 34
          },
          end: {
            line: 419,
            column: 35
          }
        },
        loc: {
          start: {
            line: 419,
            column: 44
          },
          end: {
            line: 424,
            column: 9
          }
        },
        line: 419
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 428,
            column: 6
          },
          end: {
            line: 428,
            column: 7
          }
        },
        loc: {
          start: {
            line: 428,
            column: 32
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 428
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 447,
            column: 34
          },
          end: {
            line: 447,
            column: 35
          }
        },
        loc: {
          start: {
            line: 447,
            column: 46
          },
          end: {
            line: 459,
            column: 9
          }
        },
        line: 447
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 463,
            column: 6
          },
          end: {
            line: 463,
            column: 7
          }
        },
        loc: {
          start: {
            line: 463,
            column: 33
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 463
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 57
          }
        },
        loc: {
          start: {
            line: 469,
            column: 64
          },
          end: {
            line: 476,
            column: 13
          }
        },
        line: 469
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 471,
            column: 32
          },
          end: {
            line: 471,
            column: 33
          }
        },
        loc: {
          start: {
            line: 471,
            column: 41
          },
          end: {
            line: 475,
            column: 17
          }
        },
        line: 471
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 483,
            column: 61
          },
          end: {
            line: 483,
            column: 62
          }
        },
        loc: {
          start: {
            line: 483,
            column: 69
          },
          end: {
            line: 490,
            column: 13
          }
        },
        line: 483
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 485,
            column: 32
          },
          end: {
            line: 485,
            column: 33
          }
        },
        loc: {
          start: {
            line: 485,
            column: 41
          },
          end: {
            line: 489,
            column: 17
          }
        },
        line: 485
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 502,
            column: 6
          },
          end: {
            line: 502,
            column: 7
          }
        },
        loc: {
          start: {
            line: 502,
            column: 34
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 502
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 516,
            column: 6
          },
          end: {
            line: 516,
            column: 7
          }
        },
        loc: {
          start: {
            line: 516,
            column: 32
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 516
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 526,
            column: 6
          },
          end: {
            line: 526,
            column: 7
          }
        },
        loc: {
          start: {
            line: 526,
            column: 34
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 526
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 539,
            column: 6
          },
          end: {
            line: 539,
            column: 7
          }
        },
        loc: {
          start: {
            line: 539,
            column: 29
          },
          end: {
            line: 551,
            column: 5
          }
        },
        line: 539
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 554,
            column: 6
          },
          end: {
            line: 554,
            column: 7
          }
        },
        loc: {
          start: {
            line: 554,
            column: 34
          },
          end: {
            line: 572,
            column: 5
          }
        },
        line: 554
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 575,
            column: 6
          },
          end: {
            line: 575,
            column: 7
          }
        },
        loc: {
          start: {
            line: 575,
            column: 28
          },
          end: {
            line: 617,
            column: 5
          }
        },
        line: 575
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 585,
            column: 64
          },
          end: {
            line: 585,
            column: 65
          }
        },
        loc: {
          start: {
            line: 585,
            column: 78
          },
          end: {
            line: 601,
            column: 13
          }
        },
        line: 585
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 602,
            column: 48
          },
          end: {
            line: 602,
            column: 49
          }
        },
        loc: {
          start: {
            line: 602,
            column: 62
          },
          end: {
            line: 602,
            column: 78
          }
        },
        line: 602
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 603,
            column: 51
          },
          end: {
            line: 603,
            column: 52
          }
        },
        loc: {
          start: {
            line: 603,
            column: 65
          },
          end: {
            line: 603,
            column: 84
          }
        },
        line: 603
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 620,
            column: 6
          },
          end: {
            line: 620,
            column: 7
          }
        },
        loc: {
          start: {
            line: 620,
            column: 30
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 620
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 628,
            column: 6
          },
          end: {
            line: 628,
            column: 7
          }
        },
        loc: {
          start: {
            line: 628,
            column: 26
          },
          end: {
            line: 630,
            column: 5
          }
        },
        line: 628
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 633,
            column: 6
          },
          end: {
            line: 633,
            column: 7
          }
        },
        loc: {
          start: {
            line: 633,
            column: 24
          },
          end: {
            line: 635,
            column: 5
          }
        },
        line: 633
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 638,
            column: 6
          },
          end: {
            line: 638,
            column: 7
          }
        },
        loc: {
          start: {
            line: 638,
            column: 30
          },
          end: {
            line: 640,
            column: 5
          }
        },
        line: 638
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 643,
            column: 6
          },
          end: {
            line: 643,
            column: 7
          }
        },
        loc: {
          start: {
            line: 643,
            column: 35
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 643
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 648,
            column: 6
          },
          end: {
            line: 648,
            column: 7
          }
        },
        loc: {
          start: {
            line: 648,
            column: 18
          },
          end: {
            line: 650,
            column: 5
          }
        },
        line: 648
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 334,
            column: 40
          },
          end: {
            line: 334,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 40
          },
          end: {
            line: 334,
            column: 69
          }
        }, {
          start: {
            line: 334,
            column: 73
          },
          end: {
            line: 334,
            column: 101
          }
        }],
        line: 334
      },
      "1": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "2": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "3": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "4": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 384,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "5": {
        loc: {
          start: {
            line: 379,
            column: 24
          },
          end: {
            line: 382,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 24
          },
          end: {
            line: 382,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "6": {
        loc: {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 379,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 379,
            column: 59
          }
        }, {
          start: {
            line: 379,
            column: 63
          },
          end: {
            line: 379,
            column: 97
          }
        }],
        line: 379
      },
      "7": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "8": {
        loc: {
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 454,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 454,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "9": {
        loc: {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "10": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "11": {
        loc: {
          start: {
            line: 464,
            column: 12
          },
          end: {
            line: 464,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 12
          },
          end: {
            line: 464,
            column: 41
          }
        }, {
          start: {
            line: 464,
            column: 45
          },
          end: {
            line: 464,
            column: 79
          }
        }],
        line: 464
      },
      "12": {
        loc: {
          start: {
            line: 472,
            column: 20
          },
          end: {
            line: 474,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 20
          },
          end: {
            line: 474,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "13": {
        loc: {
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "14": {
        loc: {
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 517,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 517,
            column: 51
          }
        }, {
          start: {
            line: 517,
            column: 55
          },
          end: {
            line: 517,
            column: 80
          }
        }],
        line: 517
      },
      "15": {
        loc: {
          start: {
            line: 518,
            column: 8
          },
          end: {
            line: 522,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 8
          },
          end: {
            line: 522,
            column: 9
          }
        }, {
          start: {
            line: 520,
            column: 15
          },
          end: {
            line: 522,
            column: 9
          }
        }],
        line: 518
      },
      "16": {
        loc: {
          start: {
            line: 528,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 528
      },
      "17": {
        loc: {
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "18": {
        loc: {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 540,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 540,
            column: 42
          }
        }, {
          start: {
            line: 540,
            column: 46
          },
          end: {
            line: 540,
            column: 81
          }
        }],
        line: 540
      },
      "19": {
        loc: {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 557,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 557,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "20": {
        loc: {
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 567,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 567,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 560
      },
      "21": {
        loc: {
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 566,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 16
          },
          end: {
            line: 566,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 562
      },
      "22": {
        loc: {
          start: {
            line: 576,
            column: 8
          },
          end: {
            line: 582,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 576,
            column: 8
          },
          end: {
            line: 582,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 576
      },
      "23": {
        loc: {
          start: {
            line: 591,
            column: 20
          },
          end: {
            line: 594,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 591,
            column: 20
          },
          end: {
            line: 594,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 591
      },
      "24": {
        loc: {
          start: {
            line: 621,
            column: 15
          },
          end: {
            line: 621,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 621,
            column: 15
          },
          end: {
            line: 621,
            column: 44
          }
        }, {
          start: {
            line: 621,
            column: 48
          },
          end: {
            line: 621,
            column: 78
          }
        }],
        line: 621
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\browser-cache-optimizer.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - BROWSER CACHE OPTIMIZER\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\n\r\n/**\r\n * Estrategias de cache del navegador\r\n */\r\nexport enum BrowserCacheStrategy {\r\n  CACHE_FIRST = 'cache-first',\r\n  NETWORK_FIRST = 'network-first',\r\n  STALE_WHILE_REVALIDATE = 'stale-while-revalidate',\r\n  NETWORK_ONLY = 'network-only',\r\n  CACHE_ONLY = 'cache-only'\r\n}\r\n\r\n/**\r\n * Configuraci\xF3n de cache del navegador\r\n */\r\nexport interface BrowserCacheConfig {\r\n  strategy: BrowserCacheStrategy;\r\n  cacheName: string;\r\n  maxAge: number;\r\n  maxEntries?: number;\r\n  networkTimeoutSeconds?: number;\r\n  urlPatterns: RegExp[];\r\n  excludePatterns?: RegExp[];\r\n  headers?: Record<string, string>;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas para diferentes tipos de recursos\r\n */\r\nexport const BROWSER_CACHE_CONFIGS: Record<string, BrowserCacheConfig> = {\r\n  // Assets est\xE1ticos (CSS, JS, im\xE1genes)\r\n  STATIC_ASSETS: {\r\n    strategy: BrowserCacheStrategy.CACHE_FIRST,\r\n    cacheName: 'static-assets-v1',\r\n    maxAge: 86400 * 30, // 30 d\xEDas\r\n    maxEntries: 100,\r\n    urlPatterns: [\r\n      /\\.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\r\n      /\\/_next\\/static\\//\r\n    ],\r\n    headers: {\r\n      'Cache-Control': 'public, max-age=2592000, immutable'\r\n    }\r\n  },\r\n\r\n  // P\xE1ginas HTML\r\n  HTML_PAGES: {\r\n    strategy: BrowserCacheStrategy.NETWORK_FIRST,\r\n    cacheName: 'html-pages-v1',\r\n    maxAge: 3600, // 1 hora\r\n    maxEntries: 50,\r\n    networkTimeoutSeconds: 3,\r\n    urlPatterns: [\r\n      /\\/$/,\r\n      /\\/shop/,\r\n      /\\/products/,\r\n      /\\/categories/\r\n    ],\r\n    excludePatterns: [\r\n      /\\/admin/,\r\n      /\\/api/,\r\n      /\\/auth/\r\n    ]\r\n  },\r\n\r\n  // APIs p\xFAblicas\r\n  PUBLIC_API: {\r\n    strategy: BrowserCacheStrategy.STALE_WHILE_REVALIDATE,\r\n    cacheName: 'public-api-v1',\r\n    maxAge: 300, // 5 minutos\r\n    maxEntries: 100,\r\n    networkTimeoutSeconds: 5,\r\n    urlPatterns: [\r\n      /\\/api\\/products/,\r\n      /\\/api\\/categories/,\r\n      /\\/api\\/search/\r\n    ],\r\n    excludePatterns: [\r\n      /\\/api\\/auth/,\r\n      /\\/api\\/admin/,\r\n      /\\/api\\/user/\r\n    ]\r\n  },\r\n\r\n  // Im\xE1genes de productos\r\n  PRODUCT_IMAGES: {\r\n    strategy: BrowserCacheStrategy.CACHE_FIRST,\r\n    cacheName: 'product-images-v1',\r\n    maxAge: 86400 * 7, // 7 d\xEDas\r\n    maxEntries: 200,\r\n    urlPatterns: [\r\n      /\\/images\\/products\\//,\r\n      /\\/uploads\\/products\\//,\r\n      /\\.supabase\\.co\\/storage\\/.*\\/products\\//\r\n    ],\r\n    headers: {\r\n      'Cache-Control': 'public, max-age=604800'\r\n    }\r\n  },\r\n\r\n  // Datos de usuario (cache corto)\r\n  USER_DATA: {\r\n    strategy: BrowserCacheStrategy.NETWORK_FIRST,\r\n    cacheName: 'user-data-v1',\r\n    maxAge: 300, // 5 minutos\r\n    maxEntries: 20,\r\n    networkTimeoutSeconds: 2,\r\n    urlPatterns: [\r\n      /\\/api\\/user\\/profile/,\r\n      /\\/api\\/user\\/preferences/\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * Service Worker template para cache optimizado\r\n */\r\nexport const SERVICE_WORKER_TEMPLATE = `\r\n// ===================================\r\n// PINTEYA E-COMMERCE - SERVICE WORKER\r\n// ===================================\r\n\r\nconst CACHE_VERSION = 'v1.2.0';\r\nconst CACHE_CONFIGS = ${JSON.stringify(BROWSER_CACHE_CONFIGS, null, 2)};\r\n\r\n// Instalar Service Worker\r\nself.addEventListener('install', (event) => {\r\n  console.log('[SW] Installing Service Worker');\r\n  \r\n  event.waitUntil(\r\n    Promise.all([\r\n      // Pre-cache assets cr\xEDticos\r\n      caches.open(CACHE_CONFIGS.STATIC_ASSETS.cacheName).then((cache) => {\r\n        return cache.addAll([\r\n          '/',\r\n          '/manifest.json',\r\n          '/_next/static/css/app.css',\r\n          '/_next/static/js/app.js'\r\n        ]);\r\n      })\r\n    ])\r\n  );\r\n  \r\n  self.skipWaiting();\r\n});\r\n\r\n// Activar Service Worker\r\nself.addEventListener('activate', (event) => {\r\n  console.log('[SW] Activating Service Worker');\r\n  \r\n  event.waitUntil(\r\n    caches.keys().then((cacheNames) => {\r\n      return Promise.all(\r\n        cacheNames.map((cacheName) => {\r\n          // Eliminar caches antiguos\r\n          if (!Object.values(CACHE_CONFIGS).some(config => config.cacheName === cacheName)) {\r\n            console.log('[SW] Deleting old cache:', cacheName);\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n  \r\n  self.clients.claim();\r\n});\r\n\r\n// Interceptar requests\r\nself.addEventListener('fetch', (event) => {\r\n  const request = event.request;\r\n  const url = new URL(request.url);\r\n  \r\n  // Solo manejar requests GET\r\n  if (request.method !== 'GET') return;\r\n  \r\n  // Encontrar configuraci\xF3n de cache apropiada\r\n  const config = findCacheConfig(url.pathname + url.search);\r\n  if (!config) return;\r\n  \r\n  event.respondWith(handleRequest(request, config));\r\n});\r\n\r\n// Encontrar configuraci\xF3n de cache para una URL\r\nfunction findCacheConfig(url) {\r\n  for (const [name, config] of Object.entries(CACHE_CONFIGS)) {\r\n    // Verificar patrones de exclusi\xF3n\r\n    if (config.excludePatterns && config.excludePatterns.some(pattern => new RegExp(pattern).test(url))) {\r\n      continue;\r\n    }\r\n    \r\n    // Verificar patrones de inclusi\xF3n\r\n    if (config.urlPatterns.some(pattern => new RegExp(pattern).test(url))) {\r\n      return config;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Manejar request seg\xFAn estrategia\r\nasync function handleRequest(request, config) {\r\n  switch (config.strategy) {\r\n    case 'cache-first':\r\n      return cacheFirst(request, config);\r\n    case 'network-first':\r\n      return networkFirst(request, config);\r\n    case 'stale-while-revalidate':\r\n      return staleWhileRevalidate(request, config);\r\n    case 'network-only':\r\n      return fetch(request);\r\n    case 'cache-only':\r\n      return cacheOnly(request, config);\r\n    default:\r\n      return fetch(request);\r\n  }\r\n}\r\n\r\n// Estrategia Cache First\r\nasync function cacheFirst(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  \r\n  try {\r\n    const response = await fetch(request);\r\n    if (response.ok) {\r\n      await cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('[SW] Cache First failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Estrategia Network First\r\nasync function networkFirst(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  \r\n  try {\r\n    const networkPromise = fetch(request);\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error('Network timeout')), (config.networkTimeoutSeconds || 3) * 1000);\r\n    });\r\n    \r\n    const response = await Promise.race([networkPromise, timeoutPromise]);\r\n    \r\n    if (response.ok) {\r\n      await cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.log('[SW] Network failed, trying cache:', error.message);\r\n    const cached = await cache.match(request);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Estrategia Stale While Revalidate\r\nasync function staleWhileRevalidate(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  // Revalidar en background\r\n  const fetchPromise = fetch(request).then(response => {\r\n    if (response.ok) {\r\n      cache.put(request, response.clone());\r\n    }\r\n    return response;\r\n  }).catch(error => {\r\n    console.error('[SW] Background revalidation failed:', error);\r\n  });\r\n  \r\n  // Retornar cache inmediatamente si existe\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  \r\n  // Si no hay cache, esperar por la red\r\n  return fetchPromise;\r\n}\r\n\r\n// Estrategia Cache Only\r\nasync function cacheOnly(request, config) {\r\n  const cache = await caches.open(config.cacheName);\r\n  const cached = await cache.match(request);\r\n  \r\n  if (!cached) {\r\n    throw new Error('No cached response available');\r\n  }\r\n  \r\n  return cached;\r\n}\r\n\r\n// Limpiar caches antiguos\r\nasync function cleanupOldCaches() {\r\n  const cacheNames = await caches.keys();\r\n  const validCacheNames = Object.values(CACHE_CONFIGS).map(config => config.cacheName);\r\n  \r\n  return Promise.all(\r\n    cacheNames.map(cacheName => {\r\n      if (!validCacheNames.includes(cacheName)) {\r\n        console.log('[SW] Deleting old cache:', cacheName);\r\n        return caches.delete(cacheName);\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\n// Mensaje desde el cliente\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n  \r\n  if (event.data && event.data.type === 'CLEANUP_CACHES') {\r\n    cleanupOldCaches();\r\n  }\r\n});\r\n`;\r\n\r\n/**\r\n * Optimizador de cache del navegador\r\n */\r\nexport class BrowserCacheOptimizer {\r\n  private static instance: BrowserCacheOptimizer;\r\n  private isServiceWorkerSupported: boolean;\r\n  private isServiceWorkerRegistered: boolean = false;\r\n\r\n  private constructor() {\r\n    this.isServiceWorkerSupported = typeof window !== 'undefined' && 'serviceWorker' in navigator;\r\n  }\r\n\r\n  static getInstance(): BrowserCacheOptimizer {\r\n    if (!BrowserCacheOptimizer.instance) {\r\n      BrowserCacheOptimizer.instance = new BrowserCacheOptimizer();\r\n    }\r\n    return BrowserCacheOptimizer.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el optimizador de cache del navegador\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported) {\r\n      logger.warn(LogCategory.CACHE, 'Service Worker no soportado en este navegador');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.registerServiceWorker();\r\n      await this.setupCacheHeaders();\r\n      this.setupPerformanceObserver();\r\n      \r\n      logger.info(LogCategory.CACHE, 'Browser Cache Optimizer inicializado correctamente');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error inicializando Browser Cache Optimizer', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra el Service Worker\r\n   */\r\n  private async registerServiceWorker(): Promise<void> {\r\n    if (this.isServiceWorkerRegistered) {return;}\r\n\r\n    try {\r\n      // Crear y registrar Service Worker din\xE1micamente\r\n      const swBlob = new Blob([SERVICE_WORKER_TEMPLATE], { type: 'application/javascript' });\r\n      const swUrl = URL.createObjectURL(swBlob);\r\n      \r\n      const registration = await navigator.serviceWorker.register(swUrl, {\r\n        scope: '/'\r\n      });\r\n\r\n      registration.addEventListener('updatefound', () => {\r\n        const newWorker = registration.installing;\r\n        if (newWorker) {\r\n          newWorker.addEventListener('statechange', () => {\r\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n              // Nuevo Service Worker disponible\r\n              this.notifyServiceWorkerUpdate();\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      this.isServiceWorkerRegistered = true;\r\n      logger.info(LogCategory.CACHE, 'Service Worker registrado correctamente');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error registrando Service Worker', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configura headers de cache optimizados\r\n   */\r\n  private async setupCacheHeaders(): Promise<void> {\r\n    // Esta funci\xF3n se ejecuta en el cliente para configurar headers\r\n    // Los headers reales se configuran en el servidor\r\n    \r\n    if (typeof window !== 'undefined') {\r\n      // Configurar meta tags para cache\r\n      this.addCacheMetaTags();\r\n      \r\n      // Configurar preload para recursos cr\xEDticos\r\n      this.setupResourcePreloading();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A\xF1ade meta tags para optimizaci\xF3n de cache\r\n   */\r\n  private addCacheMetaTags(): void {\r\n    const head = document.head;\r\n    \r\n    // Cache-Control para la p\xE1gina actual\r\n    const cacheControlMeta = document.createElement('meta');\r\n    cacheControlMeta.httpEquiv = 'Cache-Control';\r\n    cacheControlMeta.content = 'public, max-age=3600, stale-while-revalidate=86400';\r\n    head.appendChild(cacheControlMeta);\r\n    \r\n    // Preconnect a dominios externos\r\n    const preconnectDomains = [\r\n      'https://fonts.googleapis.com',\r\n      'https://fonts.gstatic.com',\r\n      'https://api.maptiler.com'\r\n    ];\r\n    \r\n    preconnectDomains.forEach(domain => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preconnect';\r\n      link.href = domain;\r\n      head.appendChild(link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configura preloading de recursos cr\xEDticos\r\n   */\r\n  private setupResourcePreloading(): void {\r\n    const head = document.head;\r\n    \r\n    // Preload de recursos cr\xEDticos\r\n    const criticalResources = [\r\n      { href: '/_next/static/css/app.css', as: 'style' },\r\n      { href: '/_next/static/js/app.js', as: 'script' },\r\n      { href: '/fonts/inter.woff2', as: 'font', type: 'font/woff2', crossorigin: 'anonymous' }\r\n    ];\r\n    \r\n    criticalResources.forEach(resource => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preload';\r\n      link.href = resource.href;\r\n      link.as = resource.as;\r\n      if (resource.type) {link.type = resource.type;}\r\n      if (resource.crossorigin) {link.crossOrigin = resource.crossorigin;}\r\n      head.appendChild(link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configura Performance Observer para monitoreo\r\n   */\r\n  private setupPerformanceObserver(): void {\r\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {return;}\r\n\r\n    try {\r\n      // Observer para Navigation Timing\r\n      const navObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach(entry => {\r\n          if (entry.entryType === 'navigation') {\r\n            this.logNavigationMetrics(entry as PerformanceNavigationTiming);\r\n          }\r\n        });\r\n      });\r\n      navObserver.observe({ entryTypes: ['navigation'] });\r\n\r\n      // Observer para Resource Timing\r\n      const resourceObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach(entry => {\r\n          if (entry.entryType === 'resource') {\r\n            this.logResourceMetrics(entry as PerformanceResourceTiming);\r\n          }\r\n        });\r\n      });\r\n      resourceObserver.observe({ entryTypes: ['resource'] });\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error configurando Performance Observer', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de navegaci\xF3n\r\n   */\r\n  private logNavigationMetrics(entry: PerformanceNavigationTiming): void {\r\n    const metrics = {\r\n      dns: entry.domainLookupEnd - entry.domainLookupStart,\r\n      tcp: entry.connectEnd - entry.connectStart,\r\n      request: entry.responseStart - entry.requestStart,\r\n      response: entry.responseEnd - entry.responseStart,\r\n      dom: entry.domContentLoadedEventEnd - entry.responseEnd,\r\n      load: entry.loadEventEnd - entry.loadEventStart,\r\n      total: entry.loadEventEnd - entry.navigationStart\r\n    };\r\n\r\n    logger.info(LogCategory.CACHE, 'Navigation metrics:', metrics);\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de recursos\r\n   */\r\n  private logResourceMetrics(entry: PerformanceResourceTiming): void {\r\n    const isCacheHit = entry.transferSize === 0 && entry.decodedBodySize > 0;\r\n    \r\n    if (isCacheHit) {\r\n      logger.debug(LogCategory.CACHE, `Cache HIT: ${entry.name}`);\r\n    } else {\r\n      logger.debug(LogCategory.CACHE, `Cache MISS: ${entry.name} (${entry.transferSize} bytes)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notifica sobre actualizaci\xF3n del Service Worker\r\n   */\r\n  private notifyServiceWorkerUpdate(): void {\r\n    // Mostrar notificaci\xF3n al usuario sobre nueva versi\xF3n disponible\r\n    if (typeof window !== 'undefined') {\r\n      const event = new CustomEvent('sw-update-available', {\r\n        detail: { message: 'Nueva versi\xF3n disponible. Recarga la p\xE1gina para actualizar.' }\r\n      });\r\n      window.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia caches antiguos\r\n   */\r\n  async clearOldCaches(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported || !navigator.serviceWorker.controller) {return;}\r\n\r\n    try {\r\n      navigator.serviceWorker.controller.postMessage({\r\n        type: 'CLEANUP_CACHES'\r\n      });\r\n      \r\n      logger.info(LogCategory.CACHE, 'Limpieza de caches antiguos iniciada');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error limpiando caches antiguos', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fuerza actualizaci\xF3n del Service Worker\r\n   */\r\n  async updateServiceWorker(): Promise<void> {\r\n    if (!this.isServiceWorkerSupported) {return;}\r\n\r\n    try {\r\n      const registration = await navigator.serviceWorker.getRegistration();\r\n      if (registration) {\r\n        await registration.update();\r\n        \r\n        if (registration.waiting) {\r\n          registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n        }\r\n      }\r\n      \r\n      logger.info(LogCategory.CACHE, 'Service Worker actualizado');\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error actualizando Service Worker', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas de cache del navegador\r\n   */\r\n  async getCacheStats(): Promise<{\r\n    caches: Array<{ name: string; size: number; entries: number }>;\r\n    totalSize: number;\r\n    totalEntries: number;\r\n  }> {\r\n    if (!this.isServiceWorkerSupported) {\r\n      return { caches: [], totalSize: 0, totalEntries: 0 };\r\n    }\r\n\r\n    try {\r\n      const cacheNames = await caches.keys();\r\n      const cacheStats = await Promise.all(\r\n        cacheNames.map(async (name) => {\r\n          const cache = await caches.open(name);\r\n          const keys = await cache.keys();\r\n          \r\n          let size = 0;\r\n          for (const request of keys) {\r\n            const response = await cache.match(request);\r\n            if (response) {\r\n              const blob = await response.blob();\r\n              size += blob.size;\r\n            }\r\n          }\r\n          \r\n          return { name, size, entries: keys.length };\r\n        })\r\n      );\r\n\r\n      const totalSize = cacheStats.reduce((sum, cache) => sum + cache.size, 0);\r\n      const totalEntries = cacheStats.reduce((sum, cache) => sum + cache.entries, 0);\r\n\r\n      return { caches: cacheStats, totalSize, totalEntries };\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error obteniendo estad\xEDsticas de cache', error as Error);\r\n      return { caches: [], totalSize: 0, totalEntries: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica si el Service Worker est\xE1 activo\r\n   */\r\n  isServiceWorkerActive(): boolean {\r\n    return this.isServiceWorkerSupported && this.isServiceWorkerRegistered;\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const browserCacheOptimizer = BrowserCacheOptimizer.getInstance();\r\n\r\n/**\r\n * Utilidades para cache del navegador\r\n */\r\nexport const BrowserCacheUtils = {\r\n  /**\r\n   * Inicializa cache del navegador\r\n   */\r\n  async initialize(): Promise<void> {\r\n    await browserCacheOptimizer.initialize();\r\n  },\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas de cache\r\n   */\r\n  async getStats() {\r\n    return browserCacheOptimizer.getCacheStats();\r\n  },\r\n\r\n  /**\r\n   * Limpia caches antiguos\r\n   */\r\n  async clearOldCaches(): Promise<void> {\r\n    await browserCacheOptimizer.clearOldCaches();\r\n  },\r\n\r\n  /**\r\n   * Actualiza Service Worker\r\n   */\r\n  async updateServiceWorker(): Promise<void> {\r\n    await browserCacheOptimizer.updateServiceWorker();\r\n  },\r\n\r\n  /**\r\n   * Verifica si est\xE1 activo\r\n   */\r\n  isActive(): boolean {\r\n    return browserCacheOptimizer.isServiceWorkerActive();\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["BROWSER_CACHE_CONFIGS", "BrowserCacheOptimizer", "BrowserCacheStrategy", "BrowserCacheUtils", "SERVICE_WORKER_TEMPLATE", "browserCacheOptimizer", "STATIC_ASSETS", "strategy", "cacheName", "maxAge", "maxEntries", "urlPatterns", "headers", "HTML_PAGES", "networkTimeoutSeconds", "excludePatterns", "PUBLIC_API", "PRODUCT_IMAGES", "USER_DATA", "JSON", "stringify", "isServiceWorkerRegistered", "isServiceWorkerSupported", "window", "navigator", "getInstance", "instance", "initialize", "logger", "warn", "LogCategory", "CACHE", "registerServiceWorker", "setupCacheHeaders", "setupPerformanceObserver", "info", "error", "swBlob", "Blob", "type", "swUrl", "URL", "createObjectURL", "registration", "serviceWorker", "register", "scope", "addEventListener", "newWorker", "installing", "state", "controller", "notifyServiceWorkerUpdate", "addCacheMetaTags", "setupResourcePreloading", "head", "document", "cacheControlMeta", "createElement", "httpEquiv", "content", "appendChild", "preconnectDomains", "forEach", "domain", "link", "rel", "href", "criticalResources", "as", "crossorigin", "resource", "crossOrigin", "navObserver", "PerformanceObserver", "list", "entries", "getEntries", "entry", "entryType", "logNavigationMetrics", "observe", "entryTypes", "resourceObserver", "logResourceMetrics", "metrics", "dns", "domainLookupEnd", "domainLookupStart", "tcp", "connectEnd", "connectStart", "request", "responseStart", "requestStart", "response", "responseEnd", "dom", "domContentLoadedEventEnd", "load", "loadEventEnd", "loadEventStart", "total", "navigationStart", "isCacheHit", "transferSize", "decodedBodySize", "debug", "name", "event", "CustomEvent", "detail", "message", "dispatchEvent", "clearOldCaches", "postMessage", "updateServiceWorker", "getRegistration", "update", "waiting", "getCacheStats", "caches", "totalSize", "totalEntries", "cacheNames", "keys", "cacheStats", "Promise", "all", "map", "cache", "open", "size", "match", "blob", "length", "reduce", "sum", "isServiceWorkerActive", "getStats", "isActive"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a5ab990ff83014a2cb187e2942bcfd15b6007b72"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mke0xydv3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_mke0xydv3();
cov_mke0xydv3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_mke0xydv3().f[0]++;
  cov_mke0xydv3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_mke0xydv3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_mke0xydv3().s[3]++;
_export(exports, {
  get BROWSER_CACHE_CONFIGS() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[1]++;
    cov_mke0xydv3().s[4]++;
    return BROWSER_CACHE_CONFIGS;
  },
  get BrowserCacheOptimizer() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[2]++;
    cov_mke0xydv3().s[5]++;
    return BrowserCacheOptimizer;
  },
  get BrowserCacheStrategy() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[3]++;
    cov_mke0xydv3().s[6]++;
    return BrowserCacheStrategy;
  },
  get BrowserCacheUtils() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[4]++;
    cov_mke0xydv3().s[7]++;
    return BrowserCacheUtils;
  },
  get SERVICE_WORKER_TEMPLATE() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[5]++;
    cov_mke0xydv3().s[8]++;
    return SERVICE_WORKER_TEMPLATE;
  },
  get browserCacheOptimizer() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[6]++;
    cov_mke0xydv3().s[9]++;
    return browserCacheOptimizer;
  }
});
const _logger =
/* istanbul ignore next */
(cov_mke0xydv3().s[10]++, require("../enterprise/logger"));
var BrowserCacheStrategy =
/* istanbul ignore next */
(/*#__PURE__*/cov_mke0xydv3().s[11]++, function (BrowserCacheStrategy) {
  /* istanbul ignore next */
  cov_mke0xydv3().f[7]++;
  cov_mke0xydv3().s[12]++;
  BrowserCacheStrategy["CACHE_FIRST"] = "cache-first";
  /* istanbul ignore next */
  cov_mke0xydv3().s[13]++;
  BrowserCacheStrategy["NETWORK_FIRST"] = "network-first";
  /* istanbul ignore next */
  cov_mke0xydv3().s[14]++;
  BrowserCacheStrategy["STALE_WHILE_REVALIDATE"] = "stale-while-revalidate";
  /* istanbul ignore next */
  cov_mke0xydv3().s[15]++;
  BrowserCacheStrategy["NETWORK_ONLY"] = "network-only";
  /* istanbul ignore next */
  cov_mke0xydv3().s[16]++;
  BrowserCacheStrategy["CACHE_ONLY"] = "cache-only";
  /* istanbul ignore next */
  cov_mke0xydv3().s[17]++;
  return BrowserCacheStrategy;
}({}));
const BROWSER_CACHE_CONFIGS =
/* istanbul ignore next */
(cov_mke0xydv3().s[18]++, {
  // Assets estáticos (CSS, JS, imágenes)
  STATIC_ASSETS: {
    strategy: "cache-first",
    cacheName: 'static-assets-v1',
    maxAge: 86400 * 30,
    maxEntries: 100,
    urlPatterns: [/\.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/, /\/_next\/static\//],
    headers: {
      'Cache-Control': 'public, max-age=2592000, immutable'
    }
  },
  // Páginas HTML
  HTML_PAGES: {
    strategy: "network-first",
    cacheName: 'html-pages-v1',
    maxAge: 3600,
    maxEntries: 50,
    networkTimeoutSeconds: 3,
    urlPatterns: [/\/$/, /\/shop/, /\/products/, /\/categories/],
    excludePatterns: [/\/admin/, /\/api/, /\/auth/]
  },
  // APIs públicas
  PUBLIC_API: {
    strategy: "stale-while-revalidate",
    cacheName: 'public-api-v1',
    maxAge: 300,
    maxEntries: 100,
    networkTimeoutSeconds: 5,
    urlPatterns: [/\/api\/products/, /\/api\/categories/, /\/api\/search/],
    excludePatterns: [/\/api\/auth/, /\/api\/admin/, /\/api\/user/]
  },
  // Imágenes de productos
  PRODUCT_IMAGES: {
    strategy: "cache-first",
    cacheName: 'product-images-v1',
    maxAge: 86400 * 7,
    maxEntries: 200,
    urlPatterns: [/\/images\/products\//, /\/uploads\/products\//, /\.supabase\.co\/storage\/.*\/products\//],
    headers: {
      'Cache-Control': 'public, max-age=604800'
    }
  },
  // Datos de usuario (cache corto)
  USER_DATA: {
    strategy: "network-first",
    cacheName: 'user-data-v1',
    maxAge: 300,
    maxEntries: 20,
    networkTimeoutSeconds: 2,
    urlPatterns: [/\/api\/user\/profile/, /\/api\/user\/preferences/]
  }
});
const SERVICE_WORKER_TEMPLATE =
/* istanbul ignore next */
(cov_mke0xydv3().s[19]++, `
// ===================================
// PINTEYA E-COMMERCE - SERVICE WORKER
// ===================================

const CACHE_VERSION = 'v1.2.0';
const CACHE_CONFIGS = ${JSON.stringify(BROWSER_CACHE_CONFIGS, null, 2)};

// Instalar Service Worker
self.addEventListener('install', (event) => {
  console.log('[SW] Installing Service Worker');
  
  event.waitUntil(
    Promise.all([
      // Pre-cache assets críticos
      caches.open(CACHE_CONFIGS.STATIC_ASSETS.cacheName).then((cache) => {
        return cache.addAll([
          '/',
          '/manifest.json',
          '/_next/static/css/app.css',
          '/_next/static/js/app.js'
        ]);
      })
    ])
  );
  
  self.skipWaiting();
});

// Activar Service Worker
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating Service Worker');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Eliminar caches antiguos
          if (!Object.values(CACHE_CONFIGS).some(config => config.cacheName === cacheName)) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  
  self.clients.claim();
});

// Interceptar requests
self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // Solo manejar requests GET
  if (request.method !== 'GET') return;
  
  // Encontrar configuración de cache apropiada
  const config = findCacheConfig(url.pathname + url.search);
  if (!config) return;
  
  event.respondWith(handleRequest(request, config));
});

// Encontrar configuración de cache para una URL
function findCacheConfig(url) {
  for (const [name, config] of Object.entries(CACHE_CONFIGS)) {
    // Verificar patrones de exclusión
    if (config.excludePatterns && config.excludePatterns.some(pattern => new RegExp(pattern).test(url))) {
      continue;
    }
    
    // Verificar patrones de inclusión
    if (config.urlPatterns.some(pattern => new RegExp(pattern).test(url))) {
      return config;
    }
  }
  return null;
}

// Manejar request según estrategia
async function handleRequest(request, config) {
  switch (config.strategy) {
    case 'cache-first':
      return cacheFirst(request, config);
    case 'network-first':
      return networkFirst(request, config);
    case 'stale-while-revalidate':
      return staleWhileRevalidate(request, config);
    case 'network-only':
      return fetch(request);
    case 'cache-only':
      return cacheOnly(request, config);
    default:
      return fetch(request);
  }
}

// Estrategia Cache First
async function cacheFirst(request, config) {
  const cache = await caches.open(config.cacheName);
  const cached = await cache.match(request);
  
  if (cached) {
    return cached;
  }
  
  try {
    const response = await fetch(request);
    if (response.ok) {
      await cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    console.error('[SW] Cache First failed:', error);
    throw error;
  }
}

// Estrategia Network First
async function networkFirst(request, config) {
  const cache = await caches.open(config.cacheName);
  
  try {
    const networkPromise = fetch(request);
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Network timeout')), (config.networkTimeoutSeconds || 3) * 1000);
    });
    
    const response = await Promise.race([networkPromise, timeoutPromise]);
    
    if (response.ok) {
      await cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    console.log('[SW] Network failed, trying cache:', error.message);
    const cached = await cache.match(request);
    if (cached) {
      return cached;
    }
    throw error;
  }
}

// Estrategia Stale While Revalidate
async function staleWhileRevalidate(request, config) {
  const cache = await caches.open(config.cacheName);
  const cached = await cache.match(request);
  
  // Revalidar en background
  const fetchPromise = fetch(request).then(response => {
    if (response.ok) {
      cache.put(request, response.clone());
    }
    return response;
  }).catch(error => {
    console.error('[SW] Background revalidation failed:', error);
  });
  
  // Retornar cache inmediatamente si existe
  if (cached) {
    return cached;
  }
  
  // Si no hay cache, esperar por la red
  return fetchPromise;
}

// Estrategia Cache Only
async function cacheOnly(request, config) {
  const cache = await caches.open(config.cacheName);
  const cached = await cache.match(request);
  
  if (!cached) {
    throw new Error('No cached response available');
  }
  
  return cached;
}

// Limpiar caches antiguos
async function cleanupOldCaches() {
  const cacheNames = await caches.keys();
  const validCacheNames = Object.values(CACHE_CONFIGS).map(config => config.cacheName);
  
  return Promise.all(
    cacheNames.map(cacheName => {
      if (!validCacheNames.includes(cacheName)) {
        console.log('[SW] Deleting old cache:', cacheName);
        return caches.delete(cacheName);
      }
    })
  );
}

// Mensaje desde el cliente
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'CLEANUP_CACHES') {
    cleanupOldCaches();
  }
});
`);
class BrowserCacheOptimizer {
  constructor() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[8]++;
    cov_mke0xydv3().s[20]++;
    this.isServiceWorkerRegistered = false;
    /* istanbul ignore next */
    cov_mke0xydv3().s[21]++;
    this.isServiceWorkerSupported =
    /* istanbul ignore next */
    (cov_mke0xydv3().b[0][0]++, typeof window !== 'undefined') &&
    /* istanbul ignore next */
    (cov_mke0xydv3().b[0][1]++, 'serviceWorker' in navigator);
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[9]++;
    cov_mke0xydv3().s[22]++;
    if (!BrowserCacheOptimizer.instance) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[1][0]++;
      cov_mke0xydv3().s[23]++;
      BrowserCacheOptimizer.instance = new BrowserCacheOptimizer();
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[1][1]++;
    }
    cov_mke0xydv3().s[24]++;
    return BrowserCacheOptimizer.instance;
  }
  /**
  * Inicializa el optimizador de cache del navegador
  */
  async initialize() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[10]++;
    cov_mke0xydv3().s[25]++;
    if (!this.isServiceWorkerSupported) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[2][0]++;
      cov_mke0xydv3().s[26]++;
      _logger.logger.warn(_logger.LogCategory.CACHE, 'Service Worker no soportado en este navegador');
      /* istanbul ignore next */
      cov_mke0xydv3().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[2][1]++;
    }
    cov_mke0xydv3().s[28]++;
    try {
      /* istanbul ignore next */
      cov_mke0xydv3().s[29]++;
      await this.registerServiceWorker();
      /* istanbul ignore next */
      cov_mke0xydv3().s[30]++;
      await this.setupCacheHeaders();
      /* istanbul ignore next */
      cov_mke0xydv3().s[31]++;
      this.setupPerformanceObserver();
      /* istanbul ignore next */
      cov_mke0xydv3().s[32]++;
      _logger.logger.info(_logger.LogCategory.CACHE, 'Browser Cache Optimizer inicializado correctamente');
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[33]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error inicializando Browser Cache Optimizer', error);
    }
  }
  /**
  * Registra el Service Worker
  */
  async registerServiceWorker() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[11]++;
    cov_mke0xydv3().s[34]++;
    if (this.isServiceWorkerRegistered) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[3][0]++;
      cov_mke0xydv3().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[3][1]++;
    }
    cov_mke0xydv3().s[36]++;
    try {
      // Crear y registrar Service Worker dinámicamente
      const swBlob =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[37]++, new Blob([SERVICE_WORKER_TEMPLATE], {
        type: 'application/javascript'
      }));
      const swUrl =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[38]++, URL.createObjectURL(swBlob));
      const registration =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[39]++, await navigator.serviceWorker.register(swUrl, {
        scope: '/'
      }));
      /* istanbul ignore next */
      cov_mke0xydv3().s[40]++;
      registration.addEventListener('updatefound', () => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[12]++;
        const newWorker =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[41]++, registration.installing);
        /* istanbul ignore next */
        cov_mke0xydv3().s[42]++;
        if (newWorker) {
          /* istanbul ignore next */
          cov_mke0xydv3().b[4][0]++;
          cov_mke0xydv3().s[43]++;
          newWorker.addEventListener('statechange', () => {
            /* istanbul ignore next */
            cov_mke0xydv3().f[13]++;
            cov_mke0xydv3().s[44]++;
            if (
            /* istanbul ignore next */
            (cov_mke0xydv3().b[6][0]++, newWorker.state === 'installed') &&
            /* istanbul ignore next */
            (cov_mke0xydv3().b[6][1]++, navigator.serviceWorker.controller)) {
              /* istanbul ignore next */
              cov_mke0xydv3().b[5][0]++;
              cov_mke0xydv3().s[45]++;
              // Nuevo Service Worker disponible
              this.notifyServiceWorkerUpdate();
            } else
            /* istanbul ignore next */
            {
              cov_mke0xydv3().b[5][1]++;
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_mke0xydv3().b[4][1]++;
        }
      });
      /* istanbul ignore next */
      cov_mke0xydv3().s[46]++;
      this.isServiceWorkerRegistered = true;
      /* istanbul ignore next */
      cov_mke0xydv3().s[47]++;
      _logger.logger.info(_logger.LogCategory.CACHE, 'Service Worker registrado correctamente');
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[48]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error registrando Service Worker', error);
    }
  }
  /**
  * Configura headers de cache optimizados
  */
  async setupCacheHeaders() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[14]++;
    cov_mke0xydv3().s[49]++;
    // Esta función se ejecuta en el cliente para configurar headers
    // Los headers reales se configuran en el servidor
    if (typeof window !== 'undefined') {
      /* istanbul ignore next */
      cov_mke0xydv3().b[7][0]++;
      cov_mke0xydv3().s[50]++;
      // Configurar meta tags para cache
      this.addCacheMetaTags();
      // Configurar preload para recursos críticos
      /* istanbul ignore next */
      cov_mke0xydv3().s[51]++;
      this.setupResourcePreloading();
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[7][1]++;
    }
  }
  /**
  * Añade meta tags para optimización de cache
  */
  addCacheMetaTags() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[15]++;
    const head =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[52]++, document.head);
    // Cache-Control para la página actual
    const cacheControlMeta =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[53]++, document.createElement('meta'));
    /* istanbul ignore next */
    cov_mke0xydv3().s[54]++;
    cacheControlMeta.httpEquiv = 'Cache-Control';
    /* istanbul ignore next */
    cov_mke0xydv3().s[55]++;
    cacheControlMeta.content = 'public, max-age=3600, stale-while-revalidate=86400';
    /* istanbul ignore next */
    cov_mke0xydv3().s[56]++;
    head.appendChild(cacheControlMeta);
    // Preconnect a dominios externos
    const preconnectDomains =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[57]++, ['https://fonts.googleapis.com', 'https://fonts.gstatic.com', 'https://api.maptiler.com']);
    /* istanbul ignore next */
    cov_mke0xydv3().s[58]++;
    preconnectDomains.forEach(domain => {
      /* istanbul ignore next */
      cov_mke0xydv3().f[16]++;
      const link =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[59]++, document.createElement('link'));
      /* istanbul ignore next */
      cov_mke0xydv3().s[60]++;
      link.rel = 'preconnect';
      /* istanbul ignore next */
      cov_mke0xydv3().s[61]++;
      link.href = domain;
      /* istanbul ignore next */
      cov_mke0xydv3().s[62]++;
      head.appendChild(link);
    });
  }
  /**
  * Configura preloading de recursos críticos
  */
  setupResourcePreloading() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[17]++;
    const head =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[63]++, document.head);
    // Preload de recursos críticos
    const criticalResources =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[64]++, [{
      href: '/_next/static/css/app.css',
      as: 'style'
    }, {
      href: '/_next/static/js/app.js',
      as: 'script'
    }, {
      href: '/fonts/inter.woff2',
      as: 'font',
      type: 'font/woff2',
      crossorigin: 'anonymous'
    }]);
    /* istanbul ignore next */
    cov_mke0xydv3().s[65]++;
    criticalResources.forEach(resource => {
      /* istanbul ignore next */
      cov_mke0xydv3().f[18]++;
      const link =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[66]++, document.createElement('link'));
      /* istanbul ignore next */
      cov_mke0xydv3().s[67]++;
      link.rel = 'preload';
      /* istanbul ignore next */
      cov_mke0xydv3().s[68]++;
      link.href = resource.href;
      /* istanbul ignore next */
      cov_mke0xydv3().s[69]++;
      link.as = resource.as;
      /* istanbul ignore next */
      cov_mke0xydv3().s[70]++;
      if (resource.type) {
        /* istanbul ignore next */
        cov_mke0xydv3().b[8][0]++;
        cov_mke0xydv3().s[71]++;
        link.type = resource.type;
      } else
      /* istanbul ignore next */
      {
        cov_mke0xydv3().b[8][1]++;
      }
      cov_mke0xydv3().s[72]++;
      if (resource.crossorigin) {
        /* istanbul ignore next */
        cov_mke0xydv3().b[9][0]++;
        cov_mke0xydv3().s[73]++;
        link.crossOrigin = resource.crossorigin;
      } else
      /* istanbul ignore next */
      {
        cov_mke0xydv3().b[9][1]++;
      }
      cov_mke0xydv3().s[74]++;
      head.appendChild(link);
    });
  }
  /**
  * Configura Performance Observer para monitoreo
  */
  setupPerformanceObserver() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[19]++;
    cov_mke0xydv3().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_mke0xydv3().b[11][0]++, typeof window === 'undefined') ||
    /* istanbul ignore next */
    (cov_mke0xydv3().b[11][1]++, !('PerformanceObserver' in window))) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[10][0]++;
      cov_mke0xydv3().s[76]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[10][1]++;
    }
    cov_mke0xydv3().s[77]++;
    try {
      // Observer para Navigation Timing
      const navObserver =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[78]++, new PerformanceObserver(list => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[20]++;
        const entries =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[79]++, list.getEntries());
        /* istanbul ignore next */
        cov_mke0xydv3().s[80]++;
        entries.forEach(entry => {
          /* istanbul ignore next */
          cov_mke0xydv3().f[21]++;
          cov_mke0xydv3().s[81]++;
          if (entry.entryType === 'navigation') {
            /* istanbul ignore next */
            cov_mke0xydv3().b[12][0]++;
            cov_mke0xydv3().s[82]++;
            this.logNavigationMetrics(entry);
          } else
          /* istanbul ignore next */
          {
            cov_mke0xydv3().b[12][1]++;
          }
        });
      }));
      /* istanbul ignore next */
      cov_mke0xydv3().s[83]++;
      navObserver.observe({
        entryTypes: ['navigation']
      });
      // Observer para Resource Timing
      const resourceObserver =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[84]++, new PerformanceObserver(list => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[22]++;
        const entries =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[85]++, list.getEntries());
        /* istanbul ignore next */
        cov_mke0xydv3().s[86]++;
        entries.forEach(entry => {
          /* istanbul ignore next */
          cov_mke0xydv3().f[23]++;
          cov_mke0xydv3().s[87]++;
          if (entry.entryType === 'resource') {
            /* istanbul ignore next */
            cov_mke0xydv3().b[13][0]++;
            cov_mke0xydv3().s[88]++;
            this.logResourceMetrics(entry);
          } else
          /* istanbul ignore next */
          {
            cov_mke0xydv3().b[13][1]++;
          }
        });
      }));
      /* istanbul ignore next */
      cov_mke0xydv3().s[89]++;
      resourceObserver.observe({
        entryTypes: ['resource']
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[90]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error configurando Performance Observer', error);
    }
  }
  /**
  * Registra métricas de navegación
  */
  logNavigationMetrics(entry) {
    /* istanbul ignore next */
    cov_mke0xydv3().f[24]++;
    const metrics =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[91]++, {
      dns: entry.domainLookupEnd - entry.domainLookupStart,
      tcp: entry.connectEnd - entry.connectStart,
      request: entry.responseStart - entry.requestStart,
      response: entry.responseEnd - entry.responseStart,
      dom: entry.domContentLoadedEventEnd - entry.responseEnd,
      load: entry.loadEventEnd - entry.loadEventStart,
      total: entry.loadEventEnd - entry.navigationStart
    });
    /* istanbul ignore next */
    cov_mke0xydv3().s[92]++;
    _logger.logger.info(_logger.LogCategory.CACHE, 'Navigation metrics:', metrics);
  }
  /**
  * Registra métricas de recursos
  */
  logResourceMetrics(entry) {
    /* istanbul ignore next */
    cov_mke0xydv3().f[25]++;
    const isCacheHit =
    /* istanbul ignore next */
    (cov_mke0xydv3().s[93]++,
    /* istanbul ignore next */
    (cov_mke0xydv3().b[14][0]++, entry.transferSize === 0) &&
    /* istanbul ignore next */
    (cov_mke0xydv3().b[14][1]++, entry.decodedBodySize > 0));
    /* istanbul ignore next */
    cov_mke0xydv3().s[94]++;
    if (isCacheHit) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[15][0]++;
      cov_mke0xydv3().s[95]++;
      _logger.logger.debug(_logger.LogCategory.CACHE, `Cache HIT: ${entry.name}`);
    } else {
      /* istanbul ignore next */
      cov_mke0xydv3().b[15][1]++;
      cov_mke0xydv3().s[96]++;
      _logger.logger.debug(_logger.LogCategory.CACHE, `Cache MISS: ${entry.name} (${entry.transferSize} bytes)`);
    }
  }
  /**
  * Notifica sobre actualización del Service Worker
  */
  notifyServiceWorkerUpdate() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[26]++;
    cov_mke0xydv3().s[97]++;
    // Mostrar notificación al usuario sobre nueva versión disponible
    if (typeof window !== 'undefined') {
      /* istanbul ignore next */
      cov_mke0xydv3().b[16][0]++;
      const event =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[98]++, new CustomEvent('sw-update-available', {
        detail: {
          message: 'Nueva versión disponible. Recarga la página para actualizar.'
        }
      }));
      /* istanbul ignore next */
      cov_mke0xydv3().s[99]++;
      window.dispatchEvent(event);
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[16][1]++;
    }
  }
  /**
  * Limpia caches antiguos
  */
  async clearOldCaches() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[27]++;
    cov_mke0xydv3().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_mke0xydv3().b[18][0]++, !this.isServiceWorkerSupported) ||
    /* istanbul ignore next */
    (cov_mke0xydv3().b[18][1]++, !navigator.serviceWorker.controller)) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[17][0]++;
      cov_mke0xydv3().s[101]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[17][1]++;
    }
    cov_mke0xydv3().s[102]++;
    try {
      /* istanbul ignore next */
      cov_mke0xydv3().s[103]++;
      navigator.serviceWorker.controller.postMessage({
        type: 'CLEANUP_CACHES'
      });
      /* istanbul ignore next */
      cov_mke0xydv3().s[104]++;
      _logger.logger.info(_logger.LogCategory.CACHE, 'Limpieza de caches antiguos iniciada');
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[105]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error limpiando caches antiguos', error);
    }
  }
  /**
  * Fuerza actualización del Service Worker
  */
  async updateServiceWorker() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[28]++;
    cov_mke0xydv3().s[106]++;
    if (!this.isServiceWorkerSupported) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[19][0]++;
      cov_mke0xydv3().s[107]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[19][1]++;
    }
    cov_mke0xydv3().s[108]++;
    try {
      const registration =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[109]++, await navigator.serviceWorker.getRegistration());
      /* istanbul ignore next */
      cov_mke0xydv3().s[110]++;
      if (registration) {
        /* istanbul ignore next */
        cov_mke0xydv3().b[20][0]++;
        cov_mke0xydv3().s[111]++;
        await registration.update();
        /* istanbul ignore next */
        cov_mke0xydv3().s[112]++;
        if (registration.waiting) {
          /* istanbul ignore next */
          cov_mke0xydv3().b[21][0]++;
          cov_mke0xydv3().s[113]++;
          registration.waiting.postMessage({
            type: 'SKIP_WAITING'
          });
        } else
        /* istanbul ignore next */
        {
          cov_mke0xydv3().b[21][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_mke0xydv3().b[20][1]++;
      }
      cov_mke0xydv3().s[114]++;
      _logger.logger.info(_logger.LogCategory.CACHE, 'Service Worker actualizado');
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[115]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error actualizando Service Worker', error);
    }
  }
  /**
  * Obtiene estadísticas de cache del navegador
  */
  async getCacheStats() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[29]++;
    cov_mke0xydv3().s[116]++;
    if (!this.isServiceWorkerSupported) {
      /* istanbul ignore next */
      cov_mke0xydv3().b[22][0]++;
      cov_mke0xydv3().s[117]++;
      return {
        caches: [],
        totalSize: 0,
        totalEntries: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_mke0xydv3().b[22][1]++;
    }
    cov_mke0xydv3().s[118]++;
    try {
      const cacheNames =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[119]++, await caches.keys());
      const cacheStats =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[120]++, await Promise.all(cacheNames.map(async name => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[30]++;
        const cache =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[121]++, await caches.open(name));
        const keys =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[122]++, await cache.keys());
        let size =
        /* istanbul ignore next */
        (cov_mke0xydv3().s[123]++, 0);
        /* istanbul ignore next */
        cov_mke0xydv3().s[124]++;
        for (const request of keys) {
          const response =
          /* istanbul ignore next */
          (cov_mke0xydv3().s[125]++, await cache.match(request));
          /* istanbul ignore next */
          cov_mke0xydv3().s[126]++;
          if (response) {
            /* istanbul ignore next */
            cov_mke0xydv3().b[23][0]++;
            const blob =
            /* istanbul ignore next */
            (cov_mke0xydv3().s[127]++, await response.blob());
            /* istanbul ignore next */
            cov_mke0xydv3().s[128]++;
            size += blob.size;
          } else
          /* istanbul ignore next */
          {
            cov_mke0xydv3().b[23][1]++;
          }
        }
        /* istanbul ignore next */
        cov_mke0xydv3().s[129]++;
        return {
          name,
          size,
          entries: keys.length
        };
      })));
      const totalSize =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[130]++, cacheStats.reduce((sum, cache) => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[31]++;
        cov_mke0xydv3().s[131]++;
        return sum + cache.size;
      }, 0));
      const totalEntries =
      /* istanbul ignore next */
      (cov_mke0xydv3().s[132]++, cacheStats.reduce((sum, cache) => {
        /* istanbul ignore next */
        cov_mke0xydv3().f[32]++;
        cov_mke0xydv3().s[133]++;
        return sum + cache.entries;
      }, 0));
      /* istanbul ignore next */
      cov_mke0xydv3().s[134]++;
      return {
        caches: cacheStats,
        totalSize,
        totalEntries
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_mke0xydv3().s[135]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error obteniendo estadísticas de cache', error);
      /* istanbul ignore next */
      cov_mke0xydv3().s[136]++;
      return {
        caches: [],
        totalSize: 0,
        totalEntries: 0
      };
    }
  }
  /**
  * Verifica si el Service Worker está activo
  */
  isServiceWorkerActive() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[33]++;
    cov_mke0xydv3().s[137]++;
    return /* istanbul ignore next */(cov_mke0xydv3().b[24][0]++, this.isServiceWorkerSupported) &&
    /* istanbul ignore next */
    (cov_mke0xydv3().b[24][1]++, this.isServiceWorkerRegistered);
  }
}
const browserCacheOptimizer =
/* istanbul ignore next */
(cov_mke0xydv3().s[138]++, BrowserCacheOptimizer.getInstance());
const BrowserCacheUtils =
/* istanbul ignore next */
(cov_mke0xydv3().s[139]++, {
  /**
  * Inicializa cache del navegador
  */
  async initialize() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[34]++;
    cov_mke0xydv3().s[140]++;
    await browserCacheOptimizer.initialize();
  },
  /**
  * Obtiene estadísticas de cache
  */
  async getStats() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[35]++;
    cov_mke0xydv3().s[141]++;
    return browserCacheOptimizer.getCacheStats();
  },
  /**
  * Limpia caches antiguos
  */
  async clearOldCaches() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[36]++;
    cov_mke0xydv3().s[142]++;
    await browserCacheOptimizer.clearOldCaches();
  },
  /**
  * Actualiza Service Worker
  */
  async updateServiceWorker() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[37]++;
    cov_mke0xydv3().s[143]++;
    await browserCacheOptimizer.updateServiceWorker();
  },
  /**
  * Verifica si está activo
  */
  isActive() {
    /* istanbul ignore next */
    cov_mke0xydv3().f[38]++;
    cov_mke0xydv3().s[144]++;
    return browserCacheOptimizer.isServiceWorkerActive();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,