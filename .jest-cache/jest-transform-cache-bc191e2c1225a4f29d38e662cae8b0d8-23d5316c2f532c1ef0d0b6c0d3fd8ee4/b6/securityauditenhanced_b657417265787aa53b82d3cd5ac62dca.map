{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-audit-enhanced.ts"],"sourcesContent":["/**\r\n * Sistema de Auditoría de Seguridad Mejorado\r\n * Extiende el sistema base con análisis avanzado, alertas automáticas y reportes\r\n */\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { \r\n  logSecurityEvent, \r\n  type SecurityEvent, \r\n  type SecuritySeverity,\r\n  type SecurityEventType,\r\n  type SecurityEventCategory \r\n} from './security-audit';\r\nimport { CacheManager, CACHE_CONFIGS } from '@/lib/cache-manager';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES EXTENDIDAS\r\n// =====================================================\r\n\r\nexport interface SecurityPattern {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  severity: SecuritySeverity;\r\n  conditions: PatternCondition[];\r\n  timeWindow: number; // en minutos\r\n  threshold: number;\r\n  enabled: boolean;\r\n  actions: SecurityAction[];\r\n}\r\n\r\nexport interface PatternCondition {\r\n  field: string;\r\n  operator: 'equals' | 'contains' | 'greater_than' | 'less_than' | 'in' | 'not_in';\r\n  value: any;\r\n  weight: number; // peso en el cálculo del patrón\r\n}\r\n\r\nexport interface SecurityAction {\r\n  type: 'log' | 'alert' | 'block_user' | 'notify_admin' | 'invalidate_sessions';\r\n  parameters?: Record<string, any>;\r\n}\r\n\r\nexport interface SecurityReport {\r\n  id: string;\r\n  period_start: string;\r\n  period_end: string;\r\n  total_events: number;\r\n  events_by_severity: Record<SecuritySeverity, number>;\r\n  events_by_category: Record<SecurityEventCategory, number>;\r\n  top_users: Array<{ user_id: string; event_count: number }>;\r\n  top_ips: Array<{ ip_address: string; event_count: number }>;\r\n  patterns_detected: Array<{ pattern_id: string; occurrences: number }>;\r\n  recommendations: string[];\r\n  generated_at: string;\r\n}\r\n\r\nexport interface SecurityMetrics {\r\n  total_events_24h: number;\r\n  critical_events_24h: number;\r\n  unique_users_24h: number;\r\n  auth_failures_24h: number;\r\n  suspicious_activities_24h: number;\r\n  blocked_users: number;\r\n  active_alerts: number;\r\n  avg_response_time: number;\r\n  security_score: number; // 0-100\r\n}\r\n\r\nexport interface SecurityAlert {\r\n  id: string;\r\n  pattern_id: string;\r\n  user_id: string;\r\n  severity: SecuritySeverity;\r\n  title: string;\r\n  description: string;\r\n  event_count: number;\r\n  first_occurrence: string;\r\n  last_occurrence: string;\r\n  status: 'open' | 'investigating' | 'resolved' | 'false_positive';\r\n  assigned_to?: string;\r\n  resolution_notes?: string;\r\n  metadata: Record<string, any>;\r\n}\r\n\r\n// =====================================================\r\n// PATRONES DE SEGURIDAD PREDEFINIDOS\r\n// =====================================================\r\n\r\nexport const DEFAULT_SECURITY_PATTERNS: SecurityPattern[] = [\r\n  {\r\n    id: 'brute_force_login',\r\n    name: 'Ataque de Fuerza Bruta',\r\n    description: 'Múltiples intentos de login fallidos desde la misma IP',\r\n    severity: 'high',\r\n    timeWindow: 15,\r\n    threshold: 5,\r\n    enabled: true,\r\n    conditions: [\r\n      { field: 'event_type', operator: 'equals', value: 'AUTH_FAILURE', weight: 1 },\r\n      { field: 'ip_address', operator: 'equals', value: 'same', weight: 1 }\r\n    ],\r\n    actions: [\r\n      { type: 'alert', parameters: { notify_admins: true } },\r\n      { type: 'log', parameters: { severity: 'high' } }\r\n    ]\r\n  },\r\n  {\r\n    id: 'privilege_escalation',\r\n    name: 'Escalación de Privilegios',\r\n    description: 'Intento de acceso a recursos sin permisos suficientes',\r\n    severity: 'critical',\r\n    timeWindow: 60,\r\n    threshold: 3,\r\n    enabled: true,\r\n    conditions: [\r\n      { field: 'event_type', operator: 'equals', value: 'PERMISSION_DENIED', weight: 1 },\r\n      { field: 'event_category', operator: 'equals', value: 'authorization', weight: 1 }\r\n    ],\r\n    actions: [\r\n      { type: 'alert', parameters: { notify_admins: true, priority: 'high' } },\r\n      { type: 'log', parameters: { severity: 'critical' } }\r\n    ]\r\n  },\r\n  {\r\n    id: 'suspicious_data_access',\r\n    name: 'Acceso Sospechoso a Datos',\r\n    description: 'Acceso masivo a datos sensibles en corto período',\r\n    severity: 'medium',\r\n    timeWindow: 30,\r\n    threshold: 10,\r\n    enabled: true,\r\n    conditions: [\r\n      { field: 'event_type', operator: 'equals', value: 'DATA_ACCESS', weight: 1 },\r\n      { field: 'event_category', operator: 'equals', value: 'data_access', weight: 1 }\r\n    ],\r\n    actions: [\r\n      { type: 'alert', parameters: { notify_admins: false } },\r\n      { type: 'log', parameters: { severity: 'medium' } }\r\n    ]\r\n  },\r\n  {\r\n    id: 'admin_action_burst',\r\n    name: 'Ráfaga de Acciones Administrativas',\r\n    description: 'Múltiples acciones administrativas en corto período',\r\n    severity: 'medium',\r\n    timeWindow: 10,\r\n    threshold: 5,\r\n    enabled: true,\r\n    conditions: [\r\n      { field: 'event_type', operator: 'equals', value: 'ADMIN_ACTION', weight: 1 },\r\n      { field: 'event_category', operator: 'equals', value: 'admin_operations', weight: 1 }\r\n    ],\r\n    actions: [\r\n      { type: 'alert', parameters: { notify_admins: true } },\r\n      { type: 'log', parameters: { severity: 'medium' } }\r\n    ]\r\n  },\r\n  {\r\n    id: 'geographic_anomaly',\r\n    name: 'Anomalía Geográfica',\r\n    description: 'Acceso desde ubicaciones geográficas inusuales',\r\n    severity: 'medium',\r\n    timeWindow: 60,\r\n    threshold: 2,\r\n    enabled: true,\r\n    conditions: [\r\n      { field: 'event_type', operator: 'equals', value: 'AUTH_SUCCESS', weight: 1 },\r\n      { field: 'ip_address', operator: 'not_in', value: 'usual_locations', weight: 1 }\r\n    ],\r\n    actions: [\r\n      { type: 'alert', parameters: { notify_user: true } },\r\n      { type: 'log', parameters: { severity: 'medium' } }\r\n    ]\r\n  }\r\n];\r\n\r\n// =====================================================\r\n// FUNCIONES DE ANÁLISIS AVANZADO\r\n// =====================================================\r\n\r\n/**\r\n * Analiza eventos de seguridad para detectar patrones\r\n */\r\nexport async function analyzeSecurityPatterns(\r\n  userId?: string,\r\n  timeWindowHours: number = 24\r\n): Promise<SecurityAlert[]> {\r\n  try {\r\n    console.log('[SECURITY] Iniciando análisis de patrones de seguridad');\r\n\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    const timeThreshold = new Date(Date.now() - timeWindowHours * 60 * 60 * 1000).toISOString();\r\n    const alerts: SecurityAlert[] = [];\r\n\r\n    // Obtener eventos recientes\r\n    let query = supabaseAdmin\r\n      .from('security_events')\r\n      .select('*')\r\n      .gte('timestamp', timeThreshold)\r\n      .order('timestamp', { ascending: false });\r\n\r\n    if (userId) {\r\n      query = query.eq('user_id', userId);\r\n    }\r\n\r\n    const { data: events, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo eventos: ${error.message}`);\r\n    }\r\n\r\n    if (!events || events.length === 0) {\r\n      return alerts;\r\n    }\r\n\r\n    // Analizar cada patrón\r\n    for (const pattern of DEFAULT_SECURITY_PATTERNS) {\r\n      if (!pattern.enabled) {continue;}\r\n\r\n      const patternAlerts = await detectPattern(pattern, events);\r\n      alerts.push(...patternAlerts);\r\n    }\r\n\r\n    // Guardar alertas en base de datos\r\n    if (alerts.length > 0) {\r\n      const { error: insertError } = await supabaseAdmin\r\n        .from('security_alerts')\r\n        .insert(alerts);\r\n\r\n      if (insertError) {\r\n        console.error('[SECURITY] Error guardando alertas:', insertError);\r\n      }\r\n    }\r\n\r\n    console.log(`[SECURITY] Análisis completado: ${alerts.length} alertas generadas`);\r\n    return alerts;\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error en análisis de patrones:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Detecta un patrón específico en los eventos\r\n */\r\nasync function detectPattern(\r\n  pattern: SecurityPattern,\r\n  events: SecurityEvent[]\r\n): Promise<SecurityAlert[]> {\r\n  const alerts: SecurityAlert[] = [];\r\n  const timeWindow = pattern.timeWindow * 60 * 1000; // convertir a ms\r\n\r\n  // Agrupar eventos por usuario\r\n  const eventsByUser = events.reduce((acc, event) => {\r\n    if (!acc[event.user_id]) {\r\n      acc[event.user_id] = [];\r\n    }\r\n    acc[event.user_id].push(event);\r\n    return acc;\r\n  }, {} as Record<string, SecurityEvent[]>);\r\n\r\n  // Analizar cada usuario\r\n  for (const [userId, userEvents] of Object.entries(eventsByUser)) {\r\n    const matchingEvents = userEvents.filter(event => \r\n      matchesPatternConditions(event, pattern.conditions)\r\n    );\r\n\r\n    if (matchingEvents.length < pattern.threshold) {continue;}\r\n\r\n    // Verificar ventana de tiempo\r\n    const sortedEvents = matchingEvents.sort((a, b) => \r\n      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n    );\r\n\r\n    for (let i = 0; i <= sortedEvents.length - pattern.threshold; i++) {\r\n      const windowStart = new Date(sortedEvents[i].timestamp).getTime();\r\n      const windowEnd = windowStart + timeWindow;\r\n      \r\n      const eventsInWindow = sortedEvents.filter(event => {\r\n        const eventTime = new Date(event.timestamp).getTime();\r\n        return eventTime >= windowStart && eventTime <= windowEnd;\r\n      });\r\n\r\n      if (eventsInWindow.length >= pattern.threshold) {\r\n        // Patrón detectado\r\n        const alert: SecurityAlert = {\r\n          id: `${pattern.id}_${userId}_${Date.now()}`,\r\n          pattern_id: pattern.id,\r\n          user_id: userId,\r\n          severity: pattern.severity,\r\n          title: pattern.name,\r\n          description: `${pattern.description} - ${eventsInWindow.length} eventos detectados`,\r\n          event_count: eventsInWindow.length,\r\n          first_occurrence: eventsInWindow[0].timestamp,\r\n          last_occurrence: eventsInWindow[eventsInWindow.length - 1].timestamp,\r\n          status: 'open',\r\n          metadata: {\r\n            pattern_name: pattern.name,\r\n            events: eventsInWindow.map(e => e.id),\r\n            threshold: pattern.threshold,\r\n            time_window_minutes: pattern.timeWindow\r\n          }\r\n        };\r\n\r\n        alerts.push(alert);\r\n\r\n        // Ejecutar acciones del patrón\r\n        await executePatternActions(pattern.actions, alert, eventsInWindow);\r\n        break; // Solo una alerta por patrón por usuario\r\n      }\r\n    }\r\n  }\r\n\r\n  return alerts;\r\n}\r\n\r\n/**\r\n * Verifica si un evento coincide con las condiciones del patrón\r\n */\r\nfunction matchesPatternConditions(\r\n  event: SecurityEvent,\r\n  conditions: PatternCondition[]\r\n): boolean {\r\n  return conditions.every(condition => {\r\n    const eventValue = (event as any)[condition.field];\r\n    \r\n    switch (condition.operator) {\r\n      case 'equals':\r\n        return eventValue === condition.value;\r\n      case 'contains':\r\n        return typeof eventValue === 'string' && eventValue.includes(condition.value);\r\n      case 'greater_than':\r\n        return Number(eventValue) > Number(condition.value);\r\n      case 'less_than':\r\n        return Number(eventValue) < Number(condition.value);\r\n      case 'in':\r\n        return Array.isArray(condition.value) && condition.value.includes(eventValue);\r\n      case 'not_in':\r\n        return Array.isArray(condition.value) && !condition.value.includes(eventValue);\r\n      default:\r\n        return false;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Ejecuta las acciones definidas para un patrón\r\n */\r\nasync function executePatternActions(\r\n  actions: SecurityAction[],\r\n  alert: SecurityAlert,\r\n  events: SecurityEvent[]\r\n): Promise<void> {\r\n  for (const action of actions) {\r\n    try {\r\n      switch (action.type) {\r\n        case 'log':\r\n          await logSecurityEvent({\r\n            user_id: alert.user_id,\r\n            event_type: 'SUSPICIOUS_ACTIVITY',\r\n            event_category: 'suspicious_behavior',\r\n            severity: action.parameters?.severity || alert.severity,\r\n            description: `Patrón detectado: ${alert.title}`,\r\n            metadata: {\r\n              pattern_id: alert.pattern_id,\r\n              alert_id: alert.id,\r\n              event_count: alert.event_count,\r\n              ...action.parameters\r\n            }\r\n          });\r\n          break;\r\n\r\n        case 'alert':\r\n          console.warn(`[SECURITY ALERT] ${alert.title} - Usuario: ${alert.user_id}`);\r\n          if (action.parameters?.notify_admins) {\r\n            // Aquí se podría integrar con un sistema de notificaciones\r\n            console.log('[SECURITY] Notificando a administradores...');\r\n          }\r\n          break;\r\n\r\n        case 'block_user':\r\n          console.log(`[SECURITY] Bloqueando usuario: ${alert.user_id}`);\r\n          // Implementar lógica de bloqueo\r\n          break;\r\n\r\n        case 'invalidate_sessions':\r\n          console.log(`[SECURITY] Invalidando sesiones del usuario: ${alert.user_id}`);\r\n          // Integrar con sistema de gestión de sesiones\r\n          break;\r\n\r\n        default:\r\n          console.warn(`[SECURITY] Acción no reconocida: ${action.type}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`[SECURITY] Error ejecutando acción ${action.type}:`, error);\r\n    }\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE MÉTRICAS Y REPORTES\r\n// =====================================================\r\n\r\n/**\r\n * Obtiene métricas de seguridad en tiempo real\r\n */\r\nexport async function getSecurityMetrics(): Promise<SecurityMetrics> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    const cache = CacheManager.getInstance();\r\n    const cacheKey = 'security_metrics';\r\n\r\n    // Intentar obtener desde cache\r\n    const cached = await cache.get(CACHE_CONFIGS.USER_SESSION, cacheKey);\r\n    if (cached) {\r\n      return cached as SecurityMetrics;\r\n    }\r\n\r\n    const now = new Date();\r\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString();\r\n\r\n    // Obtener eventos de las últimas 24 horas\r\n    const { data: events, error } = await supabaseAdmin\r\n      .from('security_events')\r\n      .select('*')\r\n      .gte('timestamp', last24h);\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo eventos: ${error.message}`);\r\n    }\r\n\r\n    // Obtener alertas activas\r\n    const { data: alerts, error: alertsError } = await supabaseAdmin\r\n      .from('security_alerts')\r\n      .select('id')\r\n      .eq('status', 'open');\r\n\r\n    if (alertsError) {\r\n      console.error('[SECURITY] Error obteniendo alertas:', alertsError);\r\n    }\r\n\r\n    // Calcular métricas\r\n    const totalEvents = events?.length || 0;\r\n    const criticalEvents = events?.filter(e => e.severity === 'critical').length || 0;\r\n    const uniqueUsers = new Set(events?.map(e => e.user_id)).size;\r\n    const authFailures = events?.filter(e => e.event_type === 'AUTH_FAILURE').length || 0;\r\n    const suspiciousActivities = events?.filter(e => e.event_type === 'SUSPICIOUS_ACTIVITY').length || 0;\r\n    const activeAlerts = alerts?.length || 0;\r\n\r\n    // Calcular score de seguridad (0-100)\r\n    let securityScore = 100;\r\n    if (criticalEvents > 0) {securityScore -= criticalEvents * 10;}\r\n    if (authFailures > 10) {securityScore -= (authFailures - 10) * 2;}\r\n    if (suspiciousActivities > 5) {securityScore -= (suspiciousActivities - 5) * 5;}\r\n    if (activeAlerts > 0) {securityScore -= activeAlerts * 3;}\r\n    securityScore = Math.max(0, Math.min(100, securityScore));\r\n\r\n    const metrics: SecurityMetrics = {\r\n      total_events_24h: totalEvents,\r\n      critical_events_24h: criticalEvents,\r\n      unique_users_24h: uniqueUsers,\r\n      auth_failures_24h: authFailures,\r\n      suspicious_activities_24h: suspiciousActivities,\r\n      blocked_users: 0, // TODO: implementar cuando se tenga sistema de bloqueo\r\n      active_alerts: activeAlerts,\r\n      avg_response_time: 0, // TODO: calcular tiempo promedio de respuesta\r\n      security_score: securityScore\r\n    };\r\n\r\n    // Guardar en cache por 5 minutos\r\n    await cache.set(CACHE_CONFIGS.USER_SESSION, cacheKey, metrics);\r\n\r\n    return metrics;\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error obteniendo métricas:', error);\r\n    return {\r\n      total_events_24h: 0,\r\n      critical_events_24h: 0,\r\n      unique_users_24h: 0,\r\n      auth_failures_24h: 0,\r\n      suspicious_activities_24h: 0,\r\n      blocked_users: 0,\r\n      active_alerts: 0,\r\n      avg_response_time: 0,\r\n      security_score: 0\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Genera un reporte de seguridad para un período específico\r\n */\r\nexport async function generateSecurityReport(\r\n  startDate: Date,\r\n  endDate: Date\r\n): Promise<SecurityReport> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    console.log(`[SECURITY] Generando reporte de seguridad: ${startDate.toISOString()} - ${endDate.toISOString()}`);\r\n\r\n    // Obtener eventos del período\r\n    const { data: events, error } = await supabaseAdmin\r\n      .from('security_events')\r\n      .select('*')\r\n      .gte('timestamp', startDate.toISOString())\r\n      .lte('timestamp', endDate.toISOString())\r\n      .order('timestamp', { ascending: false });\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo eventos: ${error.message}`);\r\n    }\r\n\r\n    const totalEvents = events?.length || 0;\r\n\r\n    // Agrupar por severidad\r\n    const eventsBySeverity: Record<SecuritySeverity, number> = {\r\n      low: 0,\r\n      medium: 0,\r\n      high: 0,\r\n      critical: 0\r\n    };\r\n\r\n    // Agrupar por categoría\r\n    const eventsByCategory: Record<SecurityEventCategory, number> = {\r\n      authentication: 0,\r\n      authorization: 0,\r\n      data_access: 0,\r\n      admin_operations: 0,\r\n      suspicious_behavior: 0\r\n    };\r\n\r\n    // Contadores de usuarios e IPs\r\n    const userCounts: Record<string, number> = {};\r\n    const ipCounts: Record<string, number> = {};\r\n\r\n    events?.forEach(event => {\r\n      // Contar por severidad\r\n      eventsBySeverity[event.severity]++;\r\n\r\n      // Contar por categoría\r\n      eventsByCategory[event.event_category]++;\r\n\r\n      // Contar por usuario\r\n      userCounts[event.user_id] = (userCounts[event.user_id] || 0) + 1;\r\n\r\n      // Contar por IP\r\n      if (event.ip_address) {\r\n        ipCounts[event.ip_address] = (ipCounts[event.ip_address] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    // Top usuarios (más eventos)\r\n    const topUsers = Object.entries(userCounts)\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([user_id, event_count]) => ({ user_id, event_count }));\r\n\r\n    // Top IPs (más eventos)\r\n    const topIps = Object.entries(ipCounts)\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, 10)\r\n      .map(([ip_address, event_count]) => ({ ip_address, event_count }));\r\n\r\n    // Obtener patrones detectados\r\n    const { data: alerts, error: alertsError } = await supabaseAdmin\r\n      .from('security_alerts')\r\n      .select('pattern_id')\r\n      .gte('first_occurrence', startDate.toISOString())\r\n      .lte('last_occurrence', endDate.toISOString());\r\n\r\n    const patternsDetected: Array<{ pattern_id: string; occurrences: number }> = [];\r\n    if (!alertsError && alerts) {\r\n      const patternCounts: Record<string, number> = {};\r\n      alerts.forEach(alert => {\r\n        patternCounts[alert.pattern_id] = (patternCounts[alert.pattern_id] || 0) + 1;\r\n      });\r\n\r\n      Object.entries(patternCounts).forEach(([pattern_id, occurrences]) => {\r\n        patternsDetected.push({ pattern_id, occurrences });\r\n      });\r\n    }\r\n\r\n    // Generar recomendaciones\r\n    const recommendations = generateSecurityRecommendations(\r\n      eventsBySeverity,\r\n      eventsByCategory,\r\n      patternsDetected\r\n    );\r\n\r\n    const report: SecurityReport = {\r\n      id: `report_${Date.now()}`,\r\n      period_start: startDate.toISOString(),\r\n      period_end: endDate.toISOString(),\r\n      total_events: totalEvents,\r\n      events_by_severity: eventsBySeverity,\r\n      events_by_category: eventsByCategory,\r\n      top_users: topUsers,\r\n      top_ips: topIps,\r\n      patterns_detected: patternsDetected,\r\n      recommendations,\r\n      generated_at: new Date().toISOString()\r\n    };\r\n\r\n    // Guardar reporte en base de datos\r\n    const { error: insertError } = await supabaseAdmin\r\n      .from('security_reports')\r\n      .insert(report);\r\n\r\n    if (insertError) {\r\n      console.error('[SECURITY] Error guardando reporte:', insertError);\r\n    }\r\n\r\n    console.log(`[SECURITY] Reporte generado: ${totalEvents} eventos analizados`);\r\n    return report;\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error generando reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Genera recomendaciones de seguridad basadas en los datos del reporte\r\n */\r\nfunction generateSecurityRecommendations(\r\n  eventsBySeverity: Record<SecuritySeverity, number>,\r\n  eventsByCategory: Record<SecurityEventCategory, number>,\r\n  patternsDetected: Array<{ pattern_id: string; occurrences: number }>\r\n): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  // Recomendaciones basadas en severidad\r\n  if (eventsBySeverity.critical > 0) {\r\n    recommendations.push(`Se detectaron ${eventsBySeverity.critical} eventos críticos. Revisar inmediatamente.`);\r\n  }\r\n\r\n  if (eventsBySeverity.high > 10) {\r\n    recommendations.push(`Alto número de eventos de severidad alta (${eventsBySeverity.high}). Considerar reforzar medidas de seguridad.`);\r\n  }\r\n\r\n  // Recomendaciones basadas en categorías\r\n  if (eventsByCategory.authentication > 50) {\r\n    recommendations.push(`Muchos eventos de autenticación (${eventsByCategory.authentication}). Considerar implementar MFA.`);\r\n  }\r\n\r\n  if (eventsByCategory.authorization > 20) {\r\n    recommendations.push(`Eventos de autorización elevados (${eventsByCategory.authorization}). Revisar permisos de usuarios.`);\r\n  }\r\n\r\n  if (eventsByCategory.suspicious_behavior > 5) {\r\n    recommendations.push(`Actividad sospechosa detectada (${eventsByCategory.suspicious_behavior} eventos). Monitorear de cerca.`);\r\n  }\r\n\r\n  // Recomendaciones basadas en patrones\r\n  const highFrequencyPatterns = patternsDetected.filter(p => p.occurrences > 3);\r\n  if (highFrequencyPatterns.length > 0) {\r\n    recommendations.push(`Patrones de seguridad recurrentes detectados. Considerar medidas preventivas adicionales.`);\r\n  }\r\n\r\n  // Recomendaciones generales\r\n  if (recommendations.length === 0) {\r\n    recommendations.push('No se detectaron problemas críticos de seguridad. Mantener monitoreo regular.');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE GESTIÓN DE ALERTAS\r\n// =====================================================\r\n\r\n/**\r\n * Obtiene alertas de seguridad activas\r\n */\r\nexport async function getActiveSecurityAlerts(\r\n  userId?: string,\r\n  severity?: SecuritySeverity\r\n): Promise<SecurityAlert[]> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    let query = supabaseAdmin\r\n      .from('security_alerts')\r\n      .select('*')\r\n      .eq('status', 'open')\r\n      .order('last_occurrence', { ascending: false });\r\n\r\n    if (userId) {\r\n      query = query.eq('user_id', userId);\r\n    }\r\n\r\n    if (severity) {\r\n      query = query.eq('severity', severity);\r\n    }\r\n\r\n    const { data: alerts, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo alertas: ${error.message}`);\r\n    }\r\n\r\n    return alerts || [];\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error obteniendo alertas activas:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Actualiza el estado de una alerta\r\n */\r\nexport async function updateSecurityAlert(\r\n  alertId: string,\r\n  updates: Partial<Pick<SecurityAlert, 'status' | 'assigned_to' | 'resolution_notes'>>\r\n): Promise<boolean> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    const { error } = await supabaseAdmin\r\n      .from('security_alerts')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', alertId);\r\n\r\n    if (error) {\r\n      throw new Error(`Error actualizando alerta: ${error.message}`);\r\n    }\r\n\r\n    console.log(`[SECURITY] Alerta ${alertId} actualizada: ${JSON.stringify(updates)}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error actualizando alerta:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Resuelve una alerta de seguridad\r\n */\r\nexport async function resolveSecurityAlert(\r\n  alertId: string,\r\n  resolutionNotes: string,\r\n  resolvedBy: string\r\n): Promise<boolean> {\r\n  return await updateSecurityAlert(alertId, {\r\n    status: 'resolved',\r\n    assigned_to: resolvedBy,\r\n    resolution_notes: resolutionNotes\r\n  });\r\n}\r\n\r\n/**\r\n * Marca una alerta como falso positivo\r\n */\r\nexport async function markAlertAsFalsePositive(\r\n  alertId: string,\r\n  notes: string,\r\n  markedBy: string\r\n): Promise<boolean> {\r\n  return await updateSecurityAlert(alertId, {\r\n    status: 'false_positive',\r\n    assigned_to: markedBy,\r\n    resolution_notes: notes\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE MONITOREO EN TIEMPO REAL\r\n// =====================================================\r\n\r\n/**\r\n * Inicia el monitoreo automático de seguridad\r\n * 🚫 TEMPORALMENTE DESHABILITADO PARA EVITAR RECURSIÓN\r\n */\r\nexport function startSecurityMonitoring(intervalMinutes: number = 5): NodeJS.Timeout {\r\n  console.log(`[SECURITY] 🚫 MONITOREO AUTOMÁTICO TEMPORALMENTE DESHABILITADO`);\r\n  console.log(`[SECURITY] 📋 Razón: Evitar llamadas recursivas a APIs de auth`);\r\n\r\n  // RETORNAR UN TIMEOUT DUMMY PARA NO ROMPER EL CÓDIGO QUE LO LLAMA\r\n  return setTimeout(() => {\r\n    console.log('[SECURITY] Timeout dummy completado');\r\n  }, 1000) as NodeJS.Timeout;\r\n\r\n  // CÓDIGO COMENTADO TEMPORALMENTE\r\n  // return setInterval(async () => {\r\n  //   try {\r\n  //     console.log('[SECURITY] Ejecutando análisis automático...');\r\n\r\n  //     // Analizar patrones de seguridad\r\n  //     const alerts = await analyzeSecurityPatterns();\r\n\r\n  //     if (alerts.length > 0) {\r\n  //       console.log(`[SECURITY] ${alerts.length} nuevas alertas generadas`);\r\n\r\n  //       // Procesar alertas críticas inmediatamente\r\n  //       const criticalAlerts = alerts.filter(a => a.severity === 'critical');\r\n  //       if (criticalAlerts.length > 0) {\r\n  //         console.warn(`[SECURITY] ¡${criticalAlerts.length} alertas críticas detectadas!`);\r\n  //         // Aquí se podrían enviar notificaciones inmediatas\r\n  //       }\r\n  //     }\r\n\r\n  //     // Actualizar métricas\r\n  //     await getSecurityMetrics();\r\n\r\n  //   } catch (error) {\r\n  //     console.error('[SECURITY] Error en monitoreo automático:', error);\r\n  //   }\r\n  // }, intervalMinutes * 60 * 1000);\r\n}\r\n\r\n/**\r\n * Detiene el monitoreo automático\r\n */\r\nexport function stopSecurityMonitoring(intervalId: NodeJS.Timeout): void {\r\n  clearInterval(intervalId);\r\n  console.log('[SECURITY] Monitoreo automático detenido');\r\n}\r\n\r\n/**\r\n * Ejecuta una verificación completa de seguridad\r\n */\r\nexport async function runSecurityHealthCheck(): Promise<{\r\n  status: 'healthy' | 'warning' | 'critical';\r\n  issues: string[];\r\n  recommendations: string[];\r\n  metrics: SecurityMetrics;\r\n}> {\r\n  try {\r\n    console.log('[SECURITY] Ejecutando verificación completa de seguridad...');\r\n\r\n    // Obtener métricas actuales\r\n    const metrics = await getSecurityMetrics();\r\n\r\n    // Obtener alertas activas\r\n    const activeAlerts = await getActiveSecurityAlerts();\r\n\r\n    const issues: string[] = [];\r\n    const recommendations: string[] = [];\r\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\r\n\r\n    // Evaluar estado de seguridad\r\n    if (metrics.critical_events_24h > 0) {\r\n      issues.push(`${metrics.critical_events_24h} eventos críticos en las últimas 24 horas`);\r\n      status = 'critical';\r\n    }\r\n\r\n    if (metrics.auth_failures_24h > 20) {\r\n      issues.push(`Alto número de fallos de autenticación: ${metrics.auth_failures_24h}`);\r\n      if (status !== 'critical') {status = 'warning';}\r\n      recommendations.push('Considerar implementar medidas anti-brute force');\r\n    }\r\n\r\n    if (metrics.suspicious_activities_24h > 10) {\r\n      issues.push(`Actividad sospechosa elevada: ${metrics.suspicious_activities_24h} eventos`);\r\n      if (status !== 'critical') {status = 'warning';}\r\n      recommendations.push('Revisar patrones de actividad sospechosa');\r\n    }\r\n\r\n    if (metrics.active_alerts > 5) {\r\n      issues.push(`Muchas alertas activas sin resolver: ${metrics.active_alerts}`);\r\n      if (status !== 'critical') {status = 'warning';}\r\n      recommendations.push('Revisar y resolver alertas pendientes');\r\n    }\r\n\r\n    if (metrics.security_score < 70) {\r\n      issues.push(`Score de seguridad bajo: ${metrics.security_score}/100`);\r\n      if (status !== 'critical') {status = 'warning';}\r\n      recommendations.push('Implementar medidas para mejorar el score de seguridad');\r\n    }\r\n\r\n    // Recomendaciones generales\r\n    if (issues.length === 0) {\r\n      recommendations.push('Sistema de seguridad funcionando correctamente');\r\n      recommendations.push('Mantener monitoreo regular y actualizaciones de seguridad');\r\n    }\r\n\r\n    console.log(`[SECURITY] Verificación completada - Estado: ${status}`);\r\n\r\n    return {\r\n      status,\r\n      issues,\r\n      recommendations,\r\n      metrics\r\n    };\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error en verificación de seguridad:', error);\r\n    return {\r\n      status: 'critical',\r\n      issues: ['Error ejecutando verificación de seguridad'],\r\n      recommendations: ['Revisar logs del sistema'],\r\n      metrics: await getSecurityMetrics()\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE UTILIDAD\r\n// =====================================================\r\n\r\n/**\r\n * Limpia eventos de seguridad antiguos\r\n */\r\nexport async function cleanupOldSecurityEvents(daysToKeep: number = 90): Promise<number> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000).toISOString();\r\n\r\n    const { data, error } = await supabaseAdmin\r\n      .from('security_events')\r\n      .delete()\r\n      .lt('timestamp', cutoffDate);\r\n\r\n    if (error) {\r\n      throw new Error(`Error limpiando eventos: ${error.message}`);\r\n    }\r\n\r\n    const deletedCount = Array.isArray(data) ? data.length : 0;\r\n    console.log(`[SECURITY] Limpieza completada: ${deletedCount} eventos eliminados`);\r\n\r\n    return deletedCount;\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error en limpieza de eventos:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Exporta eventos de seguridad para análisis externo\r\n */\r\nexport async function exportSecurityEvents(\r\n  startDate: Date,\r\n  endDate: Date,\r\n  format: 'json' | 'csv' = 'json'\r\n): Promise<string> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Supabase admin client no disponible');\r\n    }\r\n\r\n    const { data: events, error } = await supabaseAdmin\r\n      .from('security_events')\r\n      .select('*')\r\n      .gte('timestamp', startDate.toISOString())\r\n      .lte('timestamp', endDate.toISOString())\r\n      .order('timestamp', { ascending: true });\r\n\r\n    if (error) {\r\n      throw new Error(`Error exportando eventos: ${error.message}`);\r\n    }\r\n\r\n    if (format === 'json') {\r\n      return JSON.stringify(events, null, 2);\r\n    } else {\r\n      // Formato CSV\r\n      if (!events || events.length === 0) {\r\n        return 'No hay eventos para exportar';\r\n      }\r\n\r\n      const headers = Object.keys(events[0]).join(',');\r\n      const rows = events.map(event =>\r\n        Object.values(event).map(value =>\r\n          typeof value === 'string' ? `\"${value.replace(/\"/g, '\"\"')}\"` : value\r\n        ).join(',')\r\n      );\r\n\r\n      return [headers, ...rows].join('\\n');\r\n    }\r\n  } catch (error) {\r\n    console.error('[SECURITY] Error exportando eventos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["DEFAULT_SECURITY_PATTERNS","analyzeSecurityPatterns","cleanupOldSecurityEvents","exportSecurityEvents","generateSecurityReport","getActiveSecurityAlerts","getSecurityMetrics","markAlertAsFalsePositive","resolveSecurityAlert","runSecurityHealthCheck","startSecurityMonitoring","stopSecurityMonitoring","updateSecurityAlert","id","name","description","severity","timeWindow","threshold","enabled","conditions","field","operator","value","weight","actions","type","parameters","notify_admins","priority","notify_user","userId","timeWindowHours","console","log","supabaseAdmin","Error","timeThreshold","Date","now","toISOString","alerts","query","from","select","gte","order","ascending","eq","data","events","error","message","length","pattern","patternAlerts","detectPattern","push","insertError","insert","eventsByUser","reduce","acc","event","user_id","userEvents","Object","entries","matchingEvents","filter","matchesPatternConditions","sortedEvents","sort","a","b","timestamp","getTime","i","windowStart","windowEnd","eventsInWindow","eventTime","alert","pattern_id","title","event_count","first_occurrence","last_occurrence","status","metadata","pattern_name","map","e","time_window_minutes","executePatternActions","every","condition","eventValue","includes","Number","Array","isArray","action","logSecurityEvent","event_type","event_category","alert_id","warn","cache","CacheManager","getInstance","cacheKey","cached","get","CACHE_CONFIGS","USER_SESSION","last24h","alertsError","totalEvents","criticalEvents","uniqueUsers","Set","size","authFailures","suspiciousActivities","activeAlerts","securityScore","Math","max","min","metrics","total_events_24h","critical_events_24h","unique_users_24h","auth_failures_24h","suspicious_activities_24h","blocked_users","active_alerts","avg_response_time","security_score","set","startDate","endDate","lte","eventsBySeverity","low","medium","high","critical","eventsByCategory","authentication","authorization","data_access","admin_operations","suspicious_behavior","userCounts","ipCounts","forEach","ip_address","topUsers","slice","topIps","patternsDetected","patternCounts","occurrences","recommendations","generateSecurityRecommendations","report","period_start","period_end","total_events","events_by_severity","events_by_category","top_users","top_ips","patterns_detected","generated_at","highFrequencyPatterns","p","alertId","updates","update","updated_at","JSON","stringify","resolutionNotes","resolvedBy","assigned_to","resolution_notes","notes","markedBy","intervalMinutes","setTimeout","intervalId","clearInterval","issues","daysToKeep","cutoffDate","delete","lt","deletedCount","format","headers","keys","join","rows","values","replace"],"mappings":"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"}