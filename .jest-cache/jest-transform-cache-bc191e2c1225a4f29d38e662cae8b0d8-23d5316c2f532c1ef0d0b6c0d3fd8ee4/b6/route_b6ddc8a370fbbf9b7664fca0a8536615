52a8d9b2c7bba2366fd2fb3a3c253706
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get OPTIONS () {
        return OPTIONS;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _ratelimiter = require("../../../../lib/rate-limiting/rate-limiter");
const _securitylogger = require("../../../../lib/logging/security-logger");
const runtime = 'nodejs';
// Schema de validación para checkout
const checkoutValidationSchema = _zod.z.object({
    customerInfo: _zod.z.object({
        firstName: _zod.z.string().min(1, 'Nombre es requerido'),
        lastName: _zod.z.string().min(1, 'Apellido es requerido'),
        email: _zod.z.string().email('Email inválido'),
        phone: _zod.z.string().min(8, 'Teléfono debe tener al menos 8 dígitos')
    }),
    shippingAddress: _zod.z.object({
        streetAddress: _zod.z.string().min(5, 'Dirección debe tener al menos 5 caracteres'),
        apartment: _zod.z.string().optional(),
        city: _zod.z.string().min(2, 'Ciudad es requerida'),
        state: _zod.z.string().min(2, 'Provincia es requerida'),
        zipCode: _zod.z.string().min(4, 'Código postal inválido'),
        country: _zod.z.string().default('Argentina'),
        observations: _zod.z.string().optional()
    }),
    items: _zod.z.array(_zod.z.object({
        id: _zod.z.string(),
        name: _zod.z.string(),
        price: _zod.z.number().positive('Precio debe ser positivo'),
        quantity: _zod.z.number().int().positive('Cantidad debe ser positiva'),
        stock: _zod.z.number().int().nonnegative().optional()
    })).min(1, 'Debe haber al menos un producto'),
    paymentMethod: _zod.z.enum([
        'mercadopago',
        'bank',
        'cash'
    ]),
    shippingMethod: _zod.z.enum([
        'free',
        'express',
        'pickup'
    ]),
    totals: _zod.z.object({
        subtotal: _zod.z.number().nonnegative(),
        shipping: _zod.z.number().nonnegative(),
        discount: _zod.z.number().nonnegative().default(0),
        total: _zod.z.number().positive('Total debe ser mayor a 0')
    })
});
async function POST(request) {
    // Crear logger de seguridad con contexto
    const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
    // Aplicar rate limiting para APIs de checkout
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.checkout, async ()=>{
        // Log de acceso a la API
        securityLogger.log({
            type: 'api_access',
            endpoint: '/api/checkout/validate',
            method: 'POST',
            userAgent: request.headers.get('user-agent'),
            timestamp: new Date().toISOString()
        });
        try {
            const body = await request.json();
            // Validar estructura básica
            const validatedData = checkoutValidationSchema.parse(body);
            const validationResults = {
                isValid: true,
                errors: [],
                warnings: [],
                suggestions: []
            };
            // Validaciones adicionales de negocio
            // 1. Validar stock de productos (simulado)
            for (const item of validatedData.items){
                const simulatedStock = Math.floor(Math.random() * 100) + 10 // Stock simulado
                ;
                if (item.quantity > simulatedStock) {
                    validationResults.errors.push(`Producto "${item.name}": Stock insuficiente (disponible: ${simulatedStock}, solicitado: ${item.quantity})`);
                    validationResults.isValid = false;
                }
            }
            // 2. Validar totales
            const calculatedSubtotal = validatedData.items.reduce((sum, item)=>sum + item.price * item.quantity, 0);
            if (Math.abs(calculatedSubtotal - validatedData.totals.subtotal) > 0.01) {
                validationResults.errors.push(`Subtotal incorrecto. Calculado: $${calculatedSubtotal}, Recibido: $${validatedData.totals.subtotal}`);
                validationResults.isValid = false;
            }
            // 3. Validar costo de envío
            const expectedShipping = calculateShippingCost(validatedData.shippingMethod, validatedData.totals.subtotal, validatedData.shippingAddress.state);
            if (Math.abs(expectedShipping - validatedData.totals.shipping) > 0.01) {
                validationResults.errors.push(`Costo de envío incorrecto. Esperado: $${expectedShipping}, Recibido: $${validatedData.totals.shipping}`);
                validationResults.isValid = false;
            }
            // 4. Validar total final
            const expectedTotal = calculatedSubtotal + expectedShipping - validatedData.totals.discount;
            if (Math.abs(expectedTotal - validatedData.totals.total) > 0.01) {
                validationResults.errors.push(`Total incorrecto. Esperado: $${expectedTotal}, Recibido: $${validatedData.totals.total}`);
                validationResults.isValid = false;
            }
            // 5. Validaciones de dirección
            if (validatedData.shippingAddress.state === 'CABA' && !validatedData.shippingAddress.zipCode.startsWith('C')) {
                validationResults.warnings.push('El código postal no parece corresponder a CABA');
            }
            // 6. Sugerencias basadas en observaciones
            if (validatedData.shippingAddress.observations) {
                const obs = validatedData.shippingAddress.observations.toLowerCase();
                if (obs.includes('barrio') || obs.includes('zona')) {
                    validationResults.suggestions.push('Excelente! Las observaciones sobre el barrio ayudarán al delivery');
                }
                if (obs.includes('horario') || obs.includes('hora')) {
                    validationResults.suggestions.push('Perfecto! Los horarios especificados facilitarán la entrega');
                }
            } else {
                validationResults.suggestions.push('Considera agregar observaciones sobre el barrio o horarios preferidos para mejorar la entrega');
            }
            // 7. Validar método de pago
            if (validatedData.paymentMethod === 'bank' && validatedData.totals.total < 10000) {
                validationResults.warnings.push('Para montos menores a $10.000, recomendamos MercadoPago para mayor comodidad');
            }
            // Log de validación
            console.log('✅ Validación de checkout:', {
                customer: `${validatedData.customerInfo.firstName} ${validatedData.customerInfo.lastName}`,
                items: validatedData.items.length,
                total: validatedData.totals.total,
                isValid: validationResults.isValid,
                errors: validationResults.errors.length,
                warnings: validationResults.warnings.length,
                observations: validatedData.shippingAddress.observations ? 'Sí' : 'No'
            });
            const response = {
                success: true,
                data: {
                    validation: validationResults,
                    estimatedDelivery: calculateEstimatedDelivery(validatedData.shippingMethod),
                    recommendedActions: generateRecommendations(validatedData, validationResults)
                },
                message: validationResults.isValid ? 'Checkout válido' : 'Checkout con errores'
            };
            // Log de validación exitosa
            securityLogger.log({
                type: 'checkout_validation',
                isValid: validationResults.isValid,
                errorsCount: validationResults.errors.length,
                warningsCount: validationResults.warnings.length,
                total: validatedData.totals.total,
                paymentMethod: validatedData.paymentMethod
            });
            return _server.NextResponse.json(response, {
                status: validationResults.isValid ? 200 : 400
            });
        } catch (error) {
            console.error('❌ Error validando checkout:', error);
            // Log de error de seguridad
            securityLogger.logApiError(error instanceof Error ? error.message : 'Unknown error', '/api/checkout/validate');
            if (error instanceof _zod.z.ZodError) {
                return _server.NextResponse.json({
                    success: false,
                    error: 'Datos de entrada inválidos',
                    details: error.errors.map((err)=>({
                            field: err.path.join('.'),
                            message: err.message
                        }))
                }, {
                    status: 400
                });
            }
            return _server.NextResponse.json({
                success: false,
                error: 'Error interno del servidor'
            }, {
                status: 500
            });
        }
    });
    // Manejar rate limit excedido
    if (rateLimitResult instanceof _server.NextResponse) {
        securityLogger.logRateLimitExceeded(securityLogger.context, {
            endpoint: '/api/checkout/validate',
            method: 'POST'
        });
        return rateLimitResult;
    }
    return rateLimitResult;
}
// Función auxiliar para calcular costo de envío
function calculateShippingCost(method, subtotal, state) {
    if (method === 'pickup') {
        return 0;
    }
    if (method === 'free' && subtotal >= 25000) {
        return 0;
    }
    const baseCost = method === 'express' ? 5000 : 2500;
    // Costo adicional por provincia
    const stateSurcharge = state === 'CABA' ? 0 : 500;
    return baseCost + stateSurcharge;
}
// Función auxiliar para calcular fecha estimada de entrega
function calculateEstimatedDelivery(shippingMethod) {
    const now = new Date();
    let daysToAdd = 7;
    switch(shippingMethod){
        case 'express':
            daysToAdd = 2;
            break;
        case 'free':
            daysToAdd = 7;
            break;
        case 'pickup':
            daysToAdd = 1;
            break;
    }
    const estimatedDate = new Date(now.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
    return estimatedDate.toISOString().split('T')[0] // Solo fecha
    ;
}
// Función auxiliar para generar recomendaciones
function generateRecommendations(data, validation) {
    const recommendations = [];
    if (!validation.isValid) {
        recommendations.push('Corrige los errores antes de continuar');
    }
    if (data.totals.total > 50000) {
        recommendations.push('Considera dividir la compra en múltiples órdenes para mayor seguridad');
    }
    if (data.paymentMethod === 'cash' && data.totals.total > 30000) {
        recommendations.push('Para montos altos, recomendamos pago digital por seguridad');
    }
    if (!data.shippingAddress.observations) {
        recommendations.push('Agrega observaciones para facilitar la entrega');
    }
    return recommendations;
}
async function OPTIONS() {
    return new _server.NextResponse(null, {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization'
        }
    });
}

//# sourceMappingURL=data:application/json;base64,