{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-optimization-tools.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ENHANCED SEO OPTIMIZATION TOOLS\n// Sistema avanzado de herramientas de optimización SEO con análisis de competidores,\n// A/B testing de metadata, optimización de Core Web Vitals y recomendaciones automáticas\n// ===================================\n\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger'\nimport { getRedisClient } from '@/lib/integrations/redis'\nimport { getSupabaseClient } from '@/lib/integrations/supabase'\nimport { enhancedSEOAnalyticsManager } from '@/lib/seo/seo-analytics-manager'\n\n// ===================================\n// INTERFACES Y TIPOS PRINCIPALES\n// ===================================\n\nexport interface SEOOptimizationConfig {\n  enableCompetitorAnalysis: boolean\n  enableABTesting: boolean\n  enableCoreWebVitalsOptimization: boolean\n  enableKeywordResearch: boolean\n  enableContentOptimization: boolean\n  enableTechnicalAudit: boolean\n\n  // Configuración de análisis\n  competitorAnalysisDepth: 'basic' | 'detailed' | 'comprehensive'\n  abTestDuration: number // días\n  coreWebVitalsThresholds: CoreWebVitalsThresholds\n\n  // Configuración de cache\n  cacheEnabled: boolean\n  cacheTTL: number // segundos\n\n  // APIs externas (opcional)\n  externalAPIs: {\n    semrush?: { apiKey: string; enabled: boolean }\n    ahrefs?: { apiKey: string; enabled: boolean }\n    googlePageSpeed?: { apiKey: string; enabled: boolean }\n  }\n}\n\nexport interface CoreWebVitalsThresholds {\n  lcp: { good: number; needsImprovement: number } // Largest Contentful Paint\n  fid: { good: number; needsImprovement: number } // First Input Delay\n  cls: { good: number; needsImprovement: number } // Cumulative Layout Shift\n  fcp: { good: number; needsImprovement: number } // First Contentful Paint\n  ttfb: { good: number; needsImprovement: number } // Time to First Byte\n  inp: { good: number; needsImprovement: number } // Interaction to Next Paint\n}\n\nexport interface CompetitorAnalysisResult {\n  competitor: string\n  domain: string\n  overallScore: number\n  strengths: string[]\n  weaknesses: string[]\n  opportunities: string[]\n  keywordGaps: KeywordGap[]\n  contentGaps: ContentGap[]\n  technicalAdvantages: string[]\n  backlinksAnalysis: BacklinksAnalysis\n  socialSignals: SocialSignalsAnalysis\n  lastAnalyzed: Date\n}\n\nexport interface KeywordGap {\n  keyword: string\n  competitorRanking: number\n  ourRanking: number | null\n  searchVolume: number\n  difficulty: number\n  opportunity: 'high' | 'medium' | 'low'\n  intent: 'informational' | 'navigational' | 'transactional' | 'commercial'\n  estimatedTraffic: number\n  estimatedRevenue: number\n}\n\nexport interface ContentGap {\n  topic: string\n  competitorContent: {\n    title: string\n    url: string\n    wordCount: number\n    socialShares: number\n    backlinks: number\n  }\n  ourContent: {\n    exists: boolean\n    url?: string\n    wordCount?: number\n    socialShares?: number\n    backlinks?: number\n  }\n  opportunity: 'create' | 'improve' | 'expand'\n  priority: 'high' | 'medium' | 'low'\n  estimatedEffort: 'low' | 'medium' | 'high'\n}\n\nexport interface BacklinksAnalysis {\n  totalBacklinks: number\n  uniqueDomains: number\n  domainAuthority: number\n  topReferringDomains: Array<{\n    domain: string\n    authority: number\n    backlinks: number\n    traffic: number\n  }>\n  anchorTextDistribution: Record<string, number>\n  linkTypes: {\n    doFollow: number\n    noFollow: number\n    sponsored: number\n    ugc: number\n  }\n}\n\nexport interface SocialSignalsAnalysis {\n  facebook: { likes: number; shares: number; comments: number }\n  twitter: { tweets: number; retweets: number; likes: number }\n  linkedin: { shares: number; likes: number; comments: number }\n  instagram: { posts: number; likes: number; comments: number }\n  totalEngagement: number\n  viralityScore: number\n}\n\nexport interface ABTestResult {\n  testId: string\n  testName: string\n  status: 'running' | 'completed' | 'paused' | 'cancelled'\n  startDate: Date\n  endDate?: Date\n\n  variants: Array<{\n    id: string\n    name: string\n    metadata: {\n      title?: string\n      description?: string\n      keywords?: string[]\n    }\n    metrics: {\n      impressions: number\n      clicks: number\n      ctr: number\n      conversions: number\n      conversionRate: number\n      revenue: number\n    }\n    confidence: number\n    isWinner: boolean\n  }>\n\n  results: {\n    winningVariant: string\n    improvement: number\n    significance: number\n    recommendation: string\n  }\n}\n\nexport interface CoreWebVitalsOptimization {\n  url: string\n  currentMetrics: {\n    lcp: number\n    fid: number\n    cls: number\n    fcp: number\n    ttfb: number\n    inp: number\n  }\n\n  targetMetrics: {\n    lcp: number\n    fid: number\n    cls: number\n    fcp: number\n    ttfb: number\n    inp: number\n  }\n\n  optimizations: Array<{\n    metric: string\n    issue: string\n    solution: string\n    priority: 'critical' | 'high' | 'medium' | 'low'\n    estimatedImpact: number // percentage improvement\n    implementationEffort: 'low' | 'medium' | 'high'\n    resources: string[]\n  }>\n\n  overallScore: number\n  improvementPotential: number\n}\n\nexport interface ContentOptimizationSuggestion {\n  url: string\n  contentType: 'product' | 'category' | 'blog' | 'page'\n  currentScore: number\n  targetScore: number\n\n  suggestions: Array<{\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema'\n    current: string\n    suggested: string\n    reason: string\n    impact: 'high' | 'medium' | 'low'\n    difficulty: 'easy' | 'medium' | 'hard'\n  }>\n\n  keywordOptimization: {\n    primaryKeyword: string\n    currentDensity: number\n    targetDensity: number\n    relatedKeywords: string[]\n    semanticKeywords: string[]\n  }\n\n  readabilityAnalysis: {\n    score: number\n    grade: string\n    suggestions: string[]\n  }\n}\n\nexport interface TechnicalSEOAuditResult {\n  url: string\n  overallScore: number\n\n  issues: Array<{\n    category: 'critical' | 'error' | 'warning' | 'notice'\n    type: string\n    description: string\n    solution: string\n    impact: 'high' | 'medium' | 'low'\n    effort: 'low' | 'medium' | 'high'\n    resources: string[]\n  }>\n\n  categories: {\n    crawlability: { score: number; issues: number }\n    indexability: { score: number; issues: number }\n    performance: { score: number; issues: number }\n    mobile: { score: number; issues: number }\n    security: { score: number; issues: number }\n    structured_data: { score: number; issues: number }\n  }\n\n  recommendations: Array<{\n    priority: 'immediate' | 'short_term' | 'long_term'\n    action: string\n    expectedImpact: string\n    resources: string[]\n  }>\n}\n\nexport interface AutomatedRecommendation {\n  id: string\n  type: 'keyword' | 'content' | 'technical' | 'competitor' | 'performance'\n  priority: 'critical' | 'high' | 'medium' | 'low'\n  title: string\n  description: string\n\n  actionItems: Array<{\n    task: string\n    effort: 'low' | 'medium' | 'high'\n    impact: 'high' | 'medium' | 'low'\n    timeline: string\n    resources: string[]\n  }>\n\n  expectedResults: {\n    trafficIncrease: number // percentage\n    rankingImprovement: number // positions\n    conversionIncrease: number // percentage\n    timeframe: string\n  }\n\n  createdAt: Date\n  status: 'pending' | 'in_progress' | 'completed' | 'dismissed'\n}\n\n// Configuración por defecto\nconst DEFAULT_SEO_OPTIMIZATION_CONFIG: SEOOptimizationConfig = {\n  enableCompetitorAnalysis: true,\n  enableABTesting: true,\n  enableCoreWebVitalsOptimization: true,\n  enableKeywordResearch: true,\n  enableContentOptimization: true,\n  enableTechnicalAudit: true,\n\n  competitorAnalysisDepth: 'detailed',\n  abTestDuration: 14, // 2 semanas\n\n  coreWebVitalsThresholds: {\n    lcp: { good: 2.5, needsImprovement: 4.0 },\n    fid: { good: 100, needsImprovement: 300 },\n    cls: { good: 0.1, needsImprovement: 0.25 },\n    fcp: { good: 1.8, needsImprovement: 3.0 },\n    ttfb: { good: 600, needsImprovement: 1500 },\n    inp: { good: 200, needsImprovement: 500 },\n  },\n\n  cacheEnabled: true,\n  cacheTTL: 3600, // 1 hora\n\n  externalAPIs: {\n    semrush: { apiKey: '', enabled: false },\n    ahrefs: { apiKey: '', enabled: false },\n    googlePageSpeed: { apiKey: '', enabled: false },\n  },\n}\n\n// ===================================\n// ENHANCED SEO OPTIMIZATION TOOLS CLASS\n// ===================================\n\nexport class EnhancedSEOOptimizationTools {\n  private static instance: EnhancedSEOOptimizationTools\n  private config: SEOOptimizationConfig\n  private redis: any\n  private cache: Map<string, { data: any; timestamp: number }> = new Map()\n  private activeABTests: Map<string, ABTestResult> = new Map()\n  private recommendations: AutomatedRecommendation[] = []\n\n  private constructor(config?: Partial<SEOOptimizationConfig>) {\n    this.config = { ...DEFAULT_SEO_OPTIMIZATION_CONFIG, ...config }\n    this.initializeRedis()\n\n    logger.info(\n      LogLevel.INFO,\n      'Enhanced SEO Optimization Tools initialized',\n      {\n        enabledFeatures: {\n          competitorAnalysis: this.config.enableCompetitorAnalysis,\n          abTesting: this.config.enableABTesting,\n          coreWebVitals: this.config.enableCoreWebVitalsOptimization,\n          keywordResearch: this.config.enableKeywordResearch,\n          contentOptimization: this.config.enableContentOptimization,\n          technicalAudit: this.config.enableTechnicalAudit,\n        },\n      },\n      LogCategory.SEO\n    )\n  }\n\n  public static getInstance(config?: Partial<SEOOptimizationConfig>): EnhancedSEOOptimizationTools {\n    if (!EnhancedSEOOptimizationTools.instance) {\n      EnhancedSEOOptimizationTools.instance = new EnhancedSEOOptimizationTools(config)\n    }\n    return EnhancedSEOOptimizationTools.instance\n  }\n\n  private async initializeRedis(): Promise<void> {\n    try {\n      this.redis = await getRedisClient()\n      logger.info(\n        LogLevel.INFO,\n        'Redis initialized for SEO optimization tools',\n        {},\n        LogCategory.SEO\n      )\n    } catch (error) {\n      logger.warn(\n        LogLevel.WARN,\n        'Redis not available for SEO optimization tools',\n        {},\n        LogCategory.SEO\n      )\n    }\n  }\n\n  // ===================================\n  // ANÁLISIS DE COMPETIDORES\n  // ===================================\n\n  /**\n   * Analizar competidores principales\n   */\n  public async analyzeCompetitors(competitors: string[]): Promise<CompetitorAnalysisResult[]> {\n    if (!this.config.enableCompetitorAnalysis) {\n      throw new Error('Competitor analysis is disabled')\n    }\n\n    try {\n      logger.info(LogLevel.INFO, 'Starting competitor analysis', { competitors }, LogCategory.SEO)\n\n      const results: CompetitorAnalysisResult[] = []\n\n      for (const competitor of competitors) {\n        // Verificar cache\n        const cached = await this.getCachedData(`competitor:${competitor}`)\n        if (cached) {\n          results.push(cached)\n          continue\n        }\n\n        // Realizar análisis completo\n        const analysis = await this.performCompetitorAnalysis(competitor)\n        results.push(analysis)\n\n        // Cachear resultado\n        await this.setCachedData(`competitor:${competitor}`, analysis)\n      }\n\n      // Integrar con SEO Analytics\n      enhancedSEOAnalyticsManager.trackSEOMetrics({\n        competitorAnalysis: {\n          competitorsAnalyzed: competitors.length,\n          timestamp: new Date(),\n        },\n      })\n\n      logger.info(\n        LogLevel.INFO,\n        'Competitor analysis completed',\n        {\n          competitorsAnalyzed: competitors.length,\n        },\n        LogCategory.SEO\n      )\n\n      return results\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to analyze competitors', error as Error, LogCategory.SEO)\n      throw error\n    }\n  }\n\n  /**\n   * Realizar análisis detallado de un competidor\n   */\n  private async performCompetitorAnalysis(competitor: string): Promise<CompetitorAnalysisResult> {\n    const domain = this.extractDomain(competitor)\n\n    // Simular análisis comprehensivo (en producción se integraría con APIs reales)\n    const analysis: CompetitorAnalysisResult = {\n      competitor,\n      domain,\n      overallScore: Math.floor(Math.random() * 40) + 60, // 60-100\n\n      strengths: [\n        'Strong domain authority',\n        'Excellent content marketing strategy',\n        'High-quality backlink profile',\n        'Optimized Core Web Vitals',\n        'Comprehensive keyword coverage',\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\n\n      weaknesses: [\n        'Limited social media presence',\n        'Slow page load times',\n        'Poor mobile optimization',\n        'Thin content on product pages',\n        'Missing structured data',\n      ].slice(0, Math.floor(Math.random() * 3) + 1),\n\n      opportunities: [\n        'Untapped long-tail keywords',\n        'Content gap in how-to guides',\n        'Local SEO optimization',\n        'Video content creation',\n        'Voice search optimization',\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\n\n      keywordGaps: await this.analyzeKeywordGaps(competitor),\n      contentGaps: await this.analyzeContentGaps(competitor),\n      technicalAdvantages: [\n        'HTTPS implementation',\n        'XML sitemap optimization',\n        'Clean URL structure',\n        'Proper canonical tags',\n      ],\n\n      backlinksAnalysis: {\n        totalBacklinks: Math.floor(Math.random() * 50000) + 10000,\n        uniqueDomains: Math.floor(Math.random() * 5000) + 1000,\n        domainAuthority: Math.floor(Math.random() * 30) + 50,\n        topReferringDomains: [\n          { domain: 'industry-blog.com', authority: 85, backlinks: 150, traffic: 50000 },\n          { domain: 'news-site.com', authority: 78, backlinks: 89, traffic: 75000 },\n          { domain: 'partner-site.com', authority: 72, backlinks: 234, traffic: 30000 },\n        ],\n        anchorTextDistribution: {\n          'brand name': 35,\n          'generic terms': 25,\n          'exact match': 15,\n          'partial match': 20,\n          other: 5,\n        },\n        linkTypes: {\n          doFollow: 75,\n          noFollow: 20,\n          sponsored: 3,\n          ugc: 2,\n        },\n      },\n\n      socialSignals: {\n        facebook: { likes: 15000, shares: 2500, comments: 800 },\n        twitter: { tweets: 5000, retweets: 1200, likes: 8000 },\n        linkedin: { shares: 800, likes: 1500, comments: 200 },\n        instagram: { posts: 1200, likes: 25000, comments: 1800 },\n        totalEngagement: 61900,\n        viralityScore: Math.floor(Math.random() * 40) + 60,\n      },\n\n      lastAnalyzed: new Date(),\n    }\n\n    return analysis\n  }\n\n  /**\n   * Analizar gaps de keywords\n   */\n  private async analyzeKeywordGaps(competitor: string): Promise<KeywordGap[]> {\n    // Simular análisis de keyword gaps\n    const keywords = [\n      'pintura interior',\n      'pintura exterior',\n      'esmalte sintético',\n      'látex acrílico',\n      'pintura antihumedad',\n      'barniz para madera',\n      'imprimación',\n      'rodillos de pintura',\n      'pinceles profesionales',\n      'pistola de pintar',\n    ]\n\n    return keywords.map(keyword => ({\n      keyword,\n      competitorRanking: Math.floor(Math.random() * 10) + 1,\n      ourRanking: Math.random() > 0.3 ? Math.floor(Math.random() * 20) + 11 : null,\n      searchVolume: Math.floor(Math.random() * 5000) + 500,\n      difficulty: Math.floor(Math.random() * 100),\n      opportunity: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\n      intent: ['informational', 'navigational', 'transactional', 'commercial'][\n        Math.floor(Math.random() * 4)\n      ] as any,\n      estimatedTraffic: Math.floor(Math.random() * 1000) + 100,\n      estimatedRevenue: Math.floor(Math.random() * 5000) + 500,\n    }))\n  }\n\n  /**\n   * Analizar gaps de contenido\n   */\n  private async analyzeContentGaps(competitor: string): Promise<ContentGap[]> {\n    const topics = [\n      'Guía de colores para interiores',\n      'Cómo preparar superficies antes de pintar',\n      'Técnicas de pintura profesional',\n      'Mantenimiento de herramientas de pintura',\n      'Tendencias en decoración 2024',\n    ]\n\n    return topics.map(topic => ({\n      topic,\n      competitorContent: {\n        title: `${topic} - Guía completa`,\n        url: `https://${competitor}/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}`,\n        wordCount: Math.floor(Math.random() * 2000) + 1000,\n        socialShares: Math.floor(Math.random() * 500) + 50,\n        backlinks: Math.floor(Math.random() * 50) + 10,\n      },\n      ourContent: {\n        exists: Math.random() > 0.5,\n        url: Math.random() > 0.5 ? `/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}` : undefined,\n        wordCount: Math.random() > 0.5 ? Math.floor(Math.random() * 1500) + 500 : undefined,\n        socialShares: Math.random() > 0.5 ? Math.floor(Math.random() * 200) + 20 : undefined,\n        backlinks: Math.random() > 0.5 ? Math.floor(Math.random() * 20) + 5 : undefined,\n      },\n      opportunity: Math.random() > 0.6 ? 'create' : Math.random() > 0.3 ? 'improve' : 'expand',\n      priority: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\n      estimatedEffort: Math.random() > 0.6 ? 'low' : Math.random() > 0.3 ? 'medium' : 'high',\n    }))\n  }\n\n  // ===================================\n  // A/B TESTING DE METADATA\n  // ===================================\n\n  /**\n   * Crear nuevo A/B test para metadata\n   */\n  public async createABTest(testConfig: {\n    name: string\n    url: string\n    variants: Array<{\n      name: string\n      metadata: {\n        title?: string\n        description?: string\n        keywords?: string[]\n      }\n    }>\n  }): Promise<string> {\n    if (!this.config.enableABTesting) {\n      throw new Error('A/B Testing is disabled')\n    }\n\n    try {\n      const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n      const abTest: ABTestResult = {\n        testId,\n        testName: testConfig.name,\n        status: 'running',\n        startDate: new Date(),\n\n        variants: testConfig.variants.map((variant, index) => ({\n          id: `variant_${index}`,\n          name: variant.name,\n          metadata: variant.metadata,\n          metrics: {\n            impressions: 0,\n            clicks: 0,\n            ctr: 0,\n            conversions: 0,\n            conversionRate: 0,\n            revenue: 0,\n          },\n          confidence: 0,\n          isWinner: false,\n        })),\n\n        results: {\n          winningVariant: '',\n          improvement: 0,\n          significance: 0,\n          recommendation: '',\n        },\n      }\n\n      this.activeABTests.set(testId, abTest)\n\n      // Cachear en Redis\n      await this.setCachedData(`ab_test:${testId}`, abTest)\n\n      logger.info(\n        LogLevel.INFO,\n        'A/B Test created',\n        {\n          testId,\n          testName: testConfig.name,\n          variants: testConfig.variants.length,\n        },\n        LogCategory.SEO\n      )\n\n      return testId\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to create A/B test', error as Error, LogCategory.SEO)\n      throw error\n    }\n  }\n\n  /**\n   * Actualizar métricas de A/B test\n   */\n  public async updateABTestMetrics(\n    testId: string,\n    variantId: string,\n    metrics: {\n      impressions?: number\n      clicks?: number\n      conversions?: number\n      revenue?: number\n    }\n  ): Promise<void> {\n    try {\n      const test = this.activeABTests.get(testId)\n      if (!test) {\n        throw new Error(`A/B Test ${testId} not found`)\n      }\n\n      const variant = test.variants.find(v => v.id === variantId)\n      if (!variant) {\n        throw new Error(`Variant ${variantId} not found in test ${testId}`)\n      }\n\n      // Actualizar métricas\n      if (metrics.impressions !== undefined) {\n        variant.metrics.impressions += metrics.impressions\n      }\n      if (metrics.clicks !== undefined) {\n        variant.metrics.clicks += metrics.clicks\n      }\n      if (metrics.conversions !== undefined) {\n        variant.metrics.conversions += metrics.conversions\n      }\n      if (metrics.revenue !== undefined) {\n        variant.metrics.revenue += metrics.revenue\n      }\n\n      // Recalcular métricas derivadas\n      variant.metrics.ctr =\n        variant.metrics.impressions > 0\n          ? (variant.metrics.clicks / variant.metrics.impressions) * 100\n          : 0\n\n      variant.metrics.conversionRate =\n        variant.metrics.clicks > 0\n          ? (variant.metrics.conversions / variant.metrics.clicks) * 100\n          : 0\n\n      // Actualizar cache\n      await this.setCachedData(`ab_test:${testId}`, test)\n\n      logger.info(\n        LogLevel.INFO,\n        'A/B Test metrics updated',\n        {\n          testId,\n          variantId,\n          metrics: variant.metrics,\n        },\n        LogCategory.SEO\n      )\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to update A/B test metrics',\n        error as Error,\n        LogCategory.SEO\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Analizar resultados de A/B test\n   */\n  public async analyzeABTestResults(testId: string): Promise<ABTestResult> {\n    try {\n      const test = this.activeABTests.get(testId)\n      if (!test) {\n        throw new Error(`A/B Test ${testId} not found`)\n      }\n\n      // Calcular significancia estadística (simplificado)\n      const controlVariant = test.variants[0]\n      const testVariants = test.variants.slice(1)\n\n      let bestVariant = controlVariant\n      let maxImprovement = 0\n\n      testVariants.forEach(variant => {\n        const improvement =\n          ((variant.metrics.conversionRate - controlVariant.metrics.conversionRate) /\n            controlVariant.metrics.conversionRate) *\n          100\n\n        if (improvement > maxImprovement) {\n          maxImprovement = improvement\n          bestVariant = variant\n        }\n\n        // Calcular confianza (simplificado)\n        variant.confidence = Math.min(\n          95,\n          Math.max(0, (variant.metrics.conversions / Math.max(1, variant.metrics.clicks)) * 100)\n        )\n      })\n\n      // Marcar ganador\n      test.variants.forEach(v => (v.isWinner = false))\n      bestVariant.isWinner = true\n\n      // Actualizar resultados\n      test.results = {\n        winningVariant: bestVariant.id,\n        improvement: maxImprovement,\n        significance: bestVariant.confidence,\n        recommendation:\n          maxImprovement > 10\n            ? `Implement ${bestVariant.name} - shows ${maxImprovement.toFixed(1)}% improvement`\n            : 'Continue testing - no significant difference detected',\n      }\n\n      // Actualizar cache\n      await this.setCachedData(`ab_test:${testId}`, test)\n\n      return test\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to analyze A/B test results',\n        error as Error,\n        LogCategory.SEO\n      )\n      throw error\n    }\n  }\n\n  // ===================================\n  // OPTIMIZACIÓN DE CORE WEB VITALS\n  // ===================================\n\n  /**\n   * Analizar Core Web Vitals de una URL\n   */\n  public async analyzeCoreWebVitals(url: string): Promise<CoreWebVitalsOptimization> {\n    if (!this.config.enableCoreWebVitalsOptimization) {\n      throw new Error('Core Web Vitals optimization is disabled')\n    }\n\n    try {\n      logger.info(LogLevel.INFO, 'Analyzing Core Web Vitals', { url }, LogCategory.SEO)\n\n      // Simular métricas actuales (en producción se usaría PageSpeed Insights API)\n      const currentMetrics = {\n        lcp: 2.8 + Math.random() * 2, // 2.8-4.8s\n        fid: 80 + Math.random() * 200, // 80-280ms\n        cls: 0.05 + Math.random() * 0.2, // 0.05-0.25\n        fcp: 1.5 + Math.random() * 1.5, // 1.5-3s\n        ttfb: 400 + Math.random() * 800, // 400-1200ms\n        inp: 150 + Math.random() * 300, // 150-450ms\n      }\n\n      const targetMetrics = {\n        lcp: this.config.coreWebVitalsThresholds.lcp.good,\n        fid: this.config.coreWebVitalsThresholds.fid.good,\n        cls: this.config.coreWebVitalsThresholds.cls.good,\n        fcp: this.config.coreWebVitalsThresholds.fcp.good,\n        ttfb: this.config.coreWebVitalsThresholds.ttfb.good,\n        inp: this.config.coreWebVitalsThresholds.inp.good,\n      }\n\n      const optimizations = this.generateCoreWebVitalsOptimizations(currentMetrics, targetMetrics)\n\n      const overallScore = this.calculateCoreWebVitalsScore(currentMetrics)\n      const improvementPotential = this.calculateImprovementPotential(currentMetrics, targetMetrics)\n\n      const result: CoreWebVitalsOptimization = {\n        url,\n        currentMetrics,\n        targetMetrics,\n        optimizations,\n        overallScore,\n        improvementPotential,\n      }\n\n      // Cachear resultado\n      await this.setCachedData(`cwv:${url}`, result)\n\n      logger.info(\n        LogLevel.INFO,\n        'Core Web Vitals analysis completed',\n        {\n          url,\n          overallScore,\n          improvementPotential,\n        },\n        LogCategory.SEO\n      )\n\n      return result\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to analyze Core Web Vitals',\n        error as Error,\n        LogCategory.SEO\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Generar optimizaciones específicas para Core Web Vitals\n   */\n  private generateCoreWebVitalsOptimizations(\n    current: any,\n    target: any\n  ): Array<{\n    metric: string\n    issue: string\n    solution: string\n    priority: 'critical' | 'high' | 'medium' | 'low'\n    estimatedImpact: number\n    implementationEffort: 'low' | 'medium' | 'high'\n    resources: string[]\n  }> {\n    const optimizations = []\n\n    // LCP Optimizations\n    if (current.lcp > target.lcp) {\n      optimizations.push({\n        metric: 'LCP',\n        issue: `LCP is ${current.lcp.toFixed(2)}s, target is ${target.lcp}s`,\n        solution:\n          'Optimize largest contentful paint by compressing images, using CDN, and preloading critical resources',\n        priority: current.lcp > 4.0 ? 'critical' : ('high' as any),\n        estimatedImpact: 25,\n        implementationEffort: 'medium' as any,\n        resources: ['Image optimization tools', 'CDN setup', 'Critical resource preloading'],\n      })\n    }\n\n    // FID Optimizations\n    if (current.fid > target.fid) {\n      optimizations.push({\n        metric: 'FID',\n        issue: `FID is ${current.fid.toFixed(0)}ms, target is ${target.fid}ms`,\n        solution: 'Reduce JavaScript execution time and optimize third-party scripts',\n        priority: current.fid > 300 ? 'critical' : ('high' as any),\n        estimatedImpact: 30,\n        implementationEffort: 'high' as any,\n        resources: ['JavaScript optimization', 'Code splitting', 'Third-party script audit'],\n      })\n    }\n\n    // CLS Optimizations\n    if (current.cls > target.cls) {\n      optimizations.push({\n        metric: 'CLS',\n        issue: `CLS is ${current.cls.toFixed(3)}, target is ${target.cls}`,\n        solution:\n          'Set explicit dimensions for images and ads, avoid inserting content above existing content',\n        priority: current.cls > 0.25 ? 'critical' : ('medium' as any),\n        estimatedImpact: 20,\n        implementationEffort: 'low' as any,\n        resources: [\n          'CSS layout optimization',\n          'Image dimension attributes',\n          'Font loading optimization',\n        ],\n      })\n    }\n\n    return optimizations\n  }\n\n  /**\n   * Calcular score general de Core Web Vitals\n   */\n  private calculateCoreWebVitalsScore(metrics: any): number {\n    const lcpScore = metrics.lcp <= 2.5 ? 100 : metrics.lcp <= 4.0 ? 75 : 25\n    const fidScore = metrics.fid <= 100 ? 100 : metrics.fid <= 300 ? 75 : 25\n    const clsScore = metrics.cls <= 0.1 ? 100 : metrics.cls <= 0.25 ? 75 : 25\n\n    return Math.round((lcpScore + fidScore + clsScore) / 3)\n  }\n\n  /**\n   * Calcular potencial de mejora\n   */\n  private calculateImprovementPotential(current: any, target: any): number {\n    const improvements = [\n      Math.max(0, ((current.lcp - target.lcp) / current.lcp) * 100),\n      Math.max(0, ((current.fid - target.fid) / current.fid) * 100),\n      Math.max(0, ((current.cls - target.cls) / current.cls) * 100),\n    ]\n\n    return Math.round(improvements.reduce((a, b) => a + b, 0) / improvements.length)\n  }\n\n  // ===================================\n  // OPTIMIZACIÓN DE CONTENIDO\n  // ===================================\n\n  /**\n   * Analizar y optimizar contenido de una página\n   */\n  public async optimizeContent(\n    url: string,\n    contentType: 'product' | 'category' | 'blog' | 'page'\n  ): Promise<ContentOptimizationSuggestion> {\n    if (!this.config.enableContentOptimization) {\n      throw new Error('Content optimization is disabled')\n    }\n\n    try {\n      logger.info(\n        LogLevel.INFO,\n        'Analyzing content for optimization',\n        { url, contentType },\n        LogCategory.SEO\n      )\n\n      // Simular análisis de contenido actual\n      const currentScore = Math.floor(Math.random() * 40) + 40 // 40-80\n      const targetScore = 85\n\n      const suggestions = this.generateContentSuggestions(contentType, currentScore)\n      const keywordOptimization = this.analyzeKeywordOptimization(contentType)\n      const readabilityAnalysis = this.analyzeReadability()\n\n      const result: ContentOptimizationSuggestion = {\n        url,\n        contentType,\n        currentScore,\n        targetScore,\n        suggestions,\n        keywordOptimization,\n        readabilityAnalysis,\n      }\n\n      // Cachear resultado\n      await this.setCachedData(`content:${url}`, result)\n\n      logger.info(\n        LogLevel.INFO,\n        'Content optimization analysis completed',\n        {\n          url,\n          currentScore,\n          suggestionsCount: suggestions.length,\n        },\n        LogCategory.SEO\n      )\n\n      return result\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to optimize content', error as Error, LogCategory.SEO)\n      throw error\n    }\n  }\n\n  /**\n   * Generar sugerencias de contenido\n   */\n  private generateContentSuggestions(\n    contentType: string,\n    currentScore: number\n  ): Array<{\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema'\n    current: string\n    suggested: string\n    reason: string\n    impact: 'high' | 'medium' | 'low'\n    difficulty: 'easy' | 'medium' | 'hard'\n  }> {\n    const suggestions = []\n\n    if (currentScore < 70) {\n      suggestions.push({\n        type: 'title' as any,\n        current: 'Pintura para Interiores',\n        suggested: 'Pintura para Interiores de Alta Calidad - Colores Vibrantes | Pinteya',\n        reason: 'Include target keywords and brand name for better SEO',\n        impact: 'high' as any,\n        difficulty: 'easy' as any,\n      })\n\n      suggestions.push({\n        type: 'description' as any,\n        current: 'Venta de pinturas',\n        suggested:\n          'Descubre nuestra amplia gama de pinturas para interiores de alta calidad. Colores vibrantes, acabados duraderos y precios competitivos. ¡Envío gratis!',\n        reason: 'More descriptive and includes call-to-action',\n        impact: 'high' as any,\n        difficulty: 'easy' as any,\n      })\n    }\n\n    if (contentType === 'product') {\n      suggestions.push({\n        type: 'content' as any,\n        current: 'Descripción básica del producto',\n        suggested:\n          'Descripción detallada con beneficios, especificaciones técnicas, casos de uso y testimonios',\n        reason: 'Richer content improves user engagement and SEO',\n        impact: 'medium' as any,\n        difficulty: 'medium' as any,\n      })\n\n      suggestions.push({\n        type: 'images' as any,\n        current: 'Imágenes sin alt text',\n        suggested: 'Agregar alt text descriptivo a todas las imágenes',\n        reason: 'Alt text improves accessibility and image SEO',\n        impact: 'medium' as any,\n        difficulty: 'easy' as any,\n      })\n    }\n\n    return suggestions\n  }\n\n  /**\n   * Analizar optimización de keywords\n   */\n  private analyzeKeywordOptimization(contentType: string): {\n    primaryKeyword: string\n    currentDensity: number\n    targetDensity: number\n    relatedKeywords: string[]\n    semanticKeywords: string[]\n  } {\n    const keywordsByType = {\n      product: 'pintura interior',\n      category: 'pinturas',\n      blog: 'como pintar',\n      page: 'pintura profesional',\n    }\n\n    return {\n      primaryKeyword: keywordsByType[contentType as keyof typeof keywordsByType] || 'pintura',\n      currentDensity: Math.random() * 3 + 0.5, // 0.5-3.5%\n      targetDensity: 2.0, // 2%\n      relatedKeywords: ['pintura acrílica', 'esmalte sintético', 'látex', 'barniz'],\n      semanticKeywords: ['decoración', 'hogar', 'renovación', 'color', 'acabado'],\n    }\n  }\n\n  /**\n   * Analizar legibilidad del contenido\n   */\n  private analyzeReadability(): {\n    score: number\n    grade: string\n    suggestions: string[]\n  } {\n    const score = Math.floor(Math.random() * 40) + 50 // 50-90\n\n    return {\n      score,\n      grade:\n        score >= 80\n          ? 'Excelente'\n          : score >= 70\n            ? 'Bueno'\n            : score >= 60\n              ? 'Regular'\n              : 'Necesita mejora',\n      suggestions: [\n        'Usar oraciones más cortas (máximo 20 palabras)',\n        'Incluir más subtítulos para dividir el contenido',\n        'Usar palabras más simples cuando sea posible',\n        'Agregar listas con viñetas para mejorar la escaneabilidad',\n      ].slice(0, Math.floor(Math.random() * 3) + 1),\n    }\n  }\n\n  // ===================================\n  // AUDITORÍA TÉCNICA SEO\n  // ===================================\n\n  /**\n   * Realizar auditoría técnica SEO completa\n   */\n  public async performTechnicalAudit(url: string): Promise<TechnicalSEOAuditResult> {\n    if (!this.config.enableTechnicalAudit) {\n      throw new Error('Technical SEO audit is disabled')\n    }\n\n    try {\n      logger.info(LogLevel.INFO, 'Starting technical SEO audit', { url }, LogCategory.SEO)\n\n      const issues = this.generateTechnicalIssues()\n      const categories = this.categorizeTechnicalIssues(issues)\n      const overallScore = this.calculateTechnicalScore(categories)\n      const recommendations = this.generateTechnicalRecommendations(issues)\n\n      const result: TechnicalSEOAuditResult = {\n        url,\n        overallScore,\n        issues,\n        categories,\n        recommendations,\n      }\n\n      // Cachear resultado\n      await this.setCachedData(`technical:${url}`, result)\n\n      logger.info(\n        LogLevel.INFO,\n        'Technical SEO audit completed',\n        {\n          url,\n          overallScore,\n          issuesCount: issues.length,\n        },\n        LogCategory.SEO\n      )\n\n      return result\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to perform technical audit',\n        error as Error,\n        LogCategory.SEO\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Generar issues técnicos simulados\n   */\n  private generateTechnicalIssues(): Array<{\n    category: 'critical' | 'error' | 'warning' | 'notice'\n    type: string\n    description: string\n    solution: string\n    impact: 'high' | 'medium' | 'low'\n    effort: 'low' | 'medium' | 'high'\n    resources: string[]\n  }> {\n    const possibleIssues = [\n      {\n        category: 'critical' as any,\n        type: 'Missing meta description',\n        description: 'Several pages are missing meta descriptions',\n        solution: 'Add unique, descriptive meta descriptions to all pages',\n        impact: 'high' as any,\n        effort: 'low' as any,\n        resources: ['SEO writing guide', 'Meta description best practices'],\n      },\n      {\n        category: 'error' as any,\n        type: 'Duplicate title tags',\n        description: 'Multiple pages have identical title tags',\n        solution: 'Create unique title tags for each page',\n        impact: 'high' as any,\n        effort: 'medium' as any,\n        resources: ['Title tag optimization guide', 'SEO templates'],\n      },\n      {\n        category: 'warning' as any,\n        type: 'Large images',\n        description: 'Some images are larger than 1MB',\n        solution: 'Compress images and use modern formats like WebP',\n        impact: 'medium' as any,\n        effort: 'low' as any,\n        resources: ['Image compression tools', 'WebP conversion guide'],\n      },\n      {\n        category: 'notice' as any,\n        type: 'Missing structured data',\n        description: 'Product pages lack structured data markup',\n        solution: 'Implement JSON-LD structured data for products',\n        impact: 'medium' as any,\n        effort: 'medium' as any,\n        resources: ['Schema.org documentation', 'JSON-LD generator'],\n      },\n    ]\n\n    // Retornar subset aleatorio de issues\n    return possibleIssues.slice(0, Math.floor(Math.random() * 3) + 2)\n  }\n\n  /**\n   * Categorizar issues técnicos\n   */\n  private categorizeTechnicalIssues(issues: any[]): {\n    crawlability: { score: number; issues: number }\n    indexability: { score: number; issues: number }\n    performance: { score: number; issues: number }\n    mobile: { score: number; issues: number }\n    security: { score: number; issues: number }\n    structured_data: { score: number; issues: number }\n  } {\n    const criticalIssues = issues.filter(i => i.category === 'critical').length\n    const errorIssues = issues.filter(i => i.category === 'error').length\n\n    return {\n      crawlability: { score: Math.max(50, 100 - criticalIssues * 20), issues: criticalIssues },\n      indexability: { score: Math.max(60, 100 - errorIssues * 15), issues: errorIssues },\n      performance: {\n        score: Math.floor(Math.random() * 30) + 70,\n        issues: Math.floor(Math.random() * 3),\n      },\n      mobile: { score: Math.floor(Math.random() * 20) + 80, issues: Math.floor(Math.random() * 2) },\n      security: {\n        score: Math.floor(Math.random() * 10) + 90,\n        issues: Math.floor(Math.random() * 1),\n      },\n      structured_data: {\n        score: Math.floor(Math.random() * 40) + 60,\n        issues: Math.floor(Math.random() * 3),\n      },\n    }\n  }\n\n  /**\n   * Calcular score técnico general\n   */\n  private calculateTechnicalScore(categories: any): number {\n    const scores = Object.values(categories).map((cat: any) => cat.score)\n    return Math.round(scores.reduce((a: number, b: number) => a + b, 0) / scores.length)\n  }\n\n  /**\n   * Generar recomendaciones técnicas\n   */\n  private generateTechnicalRecommendations(issues: any[]): Array<{\n    priority: 'immediate' | 'short_term' | 'long_term'\n    action: string\n    expectedImpact: string\n    resources: string[]\n  }> {\n    const recommendations = []\n\n    const criticalIssues = issues.filter(i => i.category === 'critical')\n    if (criticalIssues.length > 0) {\n      recommendations.push({\n        priority: 'immediate' as any,\n        action: 'Fix critical SEO issues affecting crawlability',\n        expectedImpact: 'Immediate improvement in search engine indexing',\n        resources: ['SEO audit checklist', 'Technical SEO guide'],\n      })\n    }\n\n    recommendations.push({\n      priority: 'short_term' as any,\n      action: 'Implement comprehensive structured data markup',\n      expectedImpact: 'Enhanced search result appearance and click-through rates',\n      resources: ['Schema.org implementation guide', 'Rich snippets testing tool'],\n    })\n\n    recommendations.push({\n      priority: 'long_term' as any,\n      action: 'Optimize Core Web Vitals and overall site performance',\n      expectedImpact: 'Better user experience and search rankings',\n      resources: ['PageSpeed Insights', 'Web Vitals optimization guide'],\n    })\n\n    return recommendations\n  }\n\n  // ===================================\n  // RECOMENDACIONES AUTOMÁTICAS\n  // ===================================\n\n  /**\n   * Generar recomendaciones automáticas basadas en análisis\n   */\n  public async generateAutomatedRecommendations(): Promise<AutomatedRecommendation[]> {\n    try {\n      logger.info(LogLevel.INFO, 'Generating automated SEO recommendations', {}, LogCategory.SEO)\n\n      const recommendations: AutomatedRecommendation[] = []\n\n      // Recomendación de keywords\n      recommendations.push({\n        id: `rec_${Date.now()}_keywords`,\n        type: 'keyword',\n        priority: 'high',\n        title: 'Optimizar keywords de cola larga',\n        description:\n          'Se han identificado oportunidades en keywords de cola larga con baja competencia',\n\n        actionItems: [\n          {\n            task: 'Investigar keywords de cola larga relacionadas con \"pintura ecológica\"',\n            effort: 'low',\n            impact: 'high',\n            timeline: '1 semana',\n            resources: ['Keyword research tools', 'Competitor analysis'],\n          },\n          {\n            task: 'Crear contenido optimizado para estas keywords',\n            effort: 'medium',\n            impact: 'high',\n            timeline: '2-3 semanas',\n            resources: ['Content creation team', 'SEO writing guidelines'],\n          },\n        ],\n\n        expectedResults: {\n          trafficIncrease: 25,\n          rankingImprovement: 5,\n          conversionIncrease: 15,\n          timeframe: '2-3 meses',\n        },\n\n        createdAt: new Date(),\n        status: 'pending',\n      })\n\n      // Recomendación técnica\n      recommendations.push({\n        id: `rec_${Date.now()}_technical`,\n        type: 'technical',\n        priority: 'critical',\n        title: 'Mejorar Core Web Vitals',\n        description: 'Las métricas de Core Web Vitals están por debajo del umbral recomendado',\n\n        actionItems: [\n          {\n            task: 'Optimizar imágenes y implementar lazy loading',\n            effort: 'medium',\n            impact: 'high',\n            timeline: '1 semana',\n            resources: ['Image optimization tools', 'Development team'],\n          },\n          {\n            task: 'Minimizar JavaScript y CSS',\n            effort: 'high',\n            impact: 'high',\n            timeline: '2 semanas',\n            resources: ['Build optimization tools', 'Performance audit'],\n          },\n        ],\n\n        expectedResults: {\n          trafficIncrease: 15,\n          rankingImprovement: 3,\n          conversionIncrease: 20,\n          timeframe: '1-2 meses',\n        },\n\n        createdAt: new Date(),\n        status: 'pending',\n      })\n\n      this.recommendations = recommendations\n\n      logger.info(\n        LogLevel.INFO,\n        'Automated recommendations generated',\n        {\n          count: recommendations.length,\n        },\n        LogCategory.SEO\n      )\n\n      return recommendations\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Failed to generate automated recommendations',\n        error as Error,\n        LogCategory.SEO\n      )\n      throw error\n    }\n  }\n\n  // ===================================\n  // MÉTODOS DE UTILIDAD Y CACHE\n  // ===================================\n\n  /**\n   * Extraer dominio de URL\n   */\n  private extractDomain(url: string): string {\n    try {\n      return new URL(url.startsWith('http') ? url : `https://${url}`).hostname\n    } catch {\n      return url\n    }\n  }\n\n  /**\n   * Obtener datos del cache\n   */\n  private async getCachedData(key: string): Promise<any> {\n    if (!this.config.cacheEnabled) {\n      return null\n    }\n\n    try {\n      // Intentar Redis primero\n      if (this.redis) {\n        const cached = await this.redis.get(`seo_tools:${key}`)\n        if (cached) {\n          return JSON.parse(cached)\n        }\n      }\n\n      // Fallback a cache en memoria\n      const cached = this.cache.get(key)\n      if (cached && Date.now() - cached.timestamp < this.config.cacheTTL * 1000) {\n        return cached.data\n      }\n\n      return null\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Error accessing cache', {}, LogCategory.SEO)\n      return null\n    }\n  }\n\n  /**\n   * Guardar datos en cache\n   */\n  private async setCachedData(key: string, data: any): Promise<void> {\n    if (!this.config.cacheEnabled) {\n      return\n    }\n\n    try {\n      // Cachear en Redis\n      if (this.redis) {\n        await this.redis.setex(`seo_tools:${key}`, this.config.cacheTTL, JSON.stringify(data))\n      }\n\n      // Cachear en memoria como fallback\n      this.cache.set(key, { data, timestamp: Date.now() })\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Error caching data', {}, LogCategory.SEO)\n    }\n  }\n\n  /**\n   * Configurar herramientas\n   */\n  public configure(config: Partial<SEOOptimizationConfig>): void {\n    this.config = { ...this.config, ...config }\n    logger.info(\n      LogLevel.INFO,\n      'SEO Optimization Tools reconfigured',\n      {\n        enabledFeatures: Object.keys(config),\n      },\n      LogCategory.SEO\n    )\n  }\n\n  /**\n   * Limpiar cache\n   */\n  public async clearCache(): Promise<void> {\n    try {\n      // Limpiar Redis\n      if (this.redis) {\n        const keys = await this.redis.keys('seo_tools:*')\n        if (keys.length > 0) {\n          await this.redis.del(...keys)\n        }\n      }\n\n      // Limpiar cache en memoria\n      this.cache.clear()\n\n      logger.info(LogLevel.INFO, 'SEO tools cache cleared', {}, LogCategory.SEO)\n    } catch (error) {\n      logger.warn(LogLevel.WARN, 'Error clearing cache', {}, LogCategory.SEO)\n    }\n  }\n\n  /**\n   * Obtener estadísticas de uso\n   */\n  public getUsageStats(): {\n    activeABTests: number\n    totalRecommendations: number\n    cacheSize: number\n    enabledFeatures: string[]\n  } {\n    return {\n      activeABTests: this.activeABTests.size,\n      totalRecommendations: this.recommendations.length,\n      cacheSize: this.cache.size,\n      enabledFeatures: Object.entries(this.config)\n        .filter(([key, value]) => key.startsWith('enable') && value)\n        .map(([key]) => key.replace('enable', '')),\n    }\n  }\n\n  /**\n   * Destruir instancia y limpiar recursos\n   */\n  public async destroy(): Promise<void> {\n    try {\n      await this.clearCache()\n\n      this.activeABTests.clear()\n      this.recommendations = []\n\n      if (this.redis) {\n        this.redis = null\n      }\n\n      logger.info(LogLevel.INFO, 'Enhanced SEO Optimization Tools destroyed', {}, LogCategory.SEO)\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Error destroying SEO optimization tools',\n        error as Error,\n        LogCategory.SEO\n      )\n    }\n  }\n}\n\n// ===================================\n// EXPORTACIONES\n// ===================================\n\n// Instancia singleton\nexport const enhancedSEOOptimizationTools = EnhancedSEOOptimizationTools.getInstance()\n\n// Exportar clase para uso directo\nexport { EnhancedSEOOptimizationTools as SEOOptimizationTools }\n\n// Exportar todos los tipos\nexport type {\n  SEOOptimizationConfig,\n  CoreWebVitalsThresholds,\n  CompetitorAnalysisResult,\n  KeywordGap,\n  ContentGap,\n  BacklinksAnalysis,\n  SocialSignalsAnalysis,\n  ABTestResult,\n  CoreWebVitalsOptimization,\n  ContentOptimizationSuggestion,\n  TechnicalSEOAuditResult,\n  AutomatedRecommendation,\n}\n"],"names":["EnhancedSEOOptimizationTools","SEOOptimizationTools","enhancedSEOOptimizationTools","DEFAULT_SEO_OPTIMIZATION_CONFIG","enableCompetitorAnalysis","enableABTesting","enableCoreWebVitalsOptimization","enableKeywordResearch","enableContentOptimization","enableTechnicalAudit","competitorAnalysisDepth","abTestDuration","coreWebVitalsThresholds","lcp","good","needsImprovement","fid","cls","fcp","ttfb","inp","cacheEnabled","cacheTTL","externalAPIs","semrush","apiKey","enabled","ahrefs","googlePageSpeed","config","cache","Map","activeABTests","recommendations","initializeRedis","logger","info","LogLevel","INFO","enabledFeatures","competitorAnalysis","abTesting","coreWebVitals","keywordResearch","contentOptimization","technicalAudit","LogCategory","SEO","getInstance","instance","redis","getRedisClient","error","warn","WARN","analyzeCompetitors","competitors","Error","results","competitor","cached","getCachedData","push","analysis","performCompetitorAnalysis","setCachedData","enhancedSEOAnalyticsManager","trackSEOMetrics","competitorsAnalyzed","length","timestamp","Date","ERROR","domain","extractDomain","overallScore","Math","floor","random","strengths","slice","weaknesses","opportunities","keywordGaps","analyzeKeywordGaps","contentGaps","analyzeContentGaps","technicalAdvantages","backlinksAnalysis","totalBacklinks","uniqueDomains","domainAuthority","topReferringDomains","authority","backlinks","traffic","anchorTextDistribution","other","linkTypes","doFollow","noFollow","sponsored","ugc","socialSignals","facebook","likes","shares","comments","twitter","tweets","retweets","linkedin","instagram","posts","totalEngagement","viralityScore","lastAnalyzed","keywords","map","keyword","competitorRanking","ourRanking","searchVolume","difficulty","opportunity","intent","estimatedTraffic","estimatedRevenue","topics","topic","competitorContent","title","url","toLowerCase","replace","wordCount","socialShares","ourContent","exists","undefined","priority","estimatedEffort","createABTest","testConfig","testId","now","toString","substr","abTest","testName","name","status","startDate","variants","variant","index","id","metadata","metrics","impressions","clicks","ctr","conversions","conversionRate","revenue","confidence","isWinner","winningVariant","improvement","significance","recommendation","set","updateABTestMetrics","variantId","test","get","find","v","analyzeABTestResults","controlVariant","testVariants","bestVariant","maxImprovement","forEach","min","max","toFixed","analyzeCoreWebVitals","currentMetrics","targetMetrics","optimizations","generateCoreWebVitalsOptimizations","calculateCoreWebVitalsScore","improvementPotential","calculateImprovementPotential","result","current","target","metric","issue","solution","estimatedImpact","implementationEffort","resources","lcpScore","fidScore","clsScore","round","improvements","reduce","a","b","optimizeContent","contentType","currentScore","targetScore","suggestions","generateContentSuggestions","keywordOptimization","analyzeKeywordOptimization","readabilityAnalysis","analyzeReadability","suggestionsCount","type","suggested","reason","impact","keywordsByType","product","category","blog","page","primaryKeyword","currentDensity","targetDensity","relatedKeywords","semanticKeywords","score","grade","performTechnicalAudit","issues","generateTechnicalIssues","categories","categorizeTechnicalIssues","calculateTechnicalScore","generateTechnicalRecommendations","issuesCount","possibleIssues","description","effort","criticalIssues","filter","i","errorIssues","crawlability","indexability","performance","mobile","security","structured_data","scores","Object","values","cat","action","expectedImpact","generateAutomatedRecommendations","actionItems","task","timeline","expectedResults","trafficIncrease","rankingImprovement","conversionIncrease","timeframe","createdAt","count","URL","startsWith","hostname","key","JSON","parse","data","setex","stringify","configure","keys","clearCache","del","clear","getUsageStats","size","totalRecommendations","cacheSize","entries","value","destroy"],"mappings":"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"}