027b0218b46a1724ecd15fb076a77a44
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get capitalize () {
        return capitalize;
    },
    get cn () {
        return cn;
    },
    get debounce () {
        return debounce;
    },
    get formatCurrency () {
        return formatCurrency;
    },
    get generateId () {
        return generateId;
    },
    get isEmpty () {
        return isEmpty;
    },
    get sleep () {
        return sleep;
    },
    get slugify () {
        return slugify;
    },
    get throttle () {
        return throttle;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function formatCurrency(amount) {
    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('es-AR', {
        style: 'currency',
        currency: 'ARS'
    }).format(numAmount);
}
function generateId(length = 8) {
    return Math.random().toString(36).substring(2, length + 2);
}
function debounce(func, wait) {
    let timeout;
    return (...args)=>{
        clearTimeout(timeout);
        timeout = setTimeout(()=>func(...args), wait);
    };
}
function throttle(func, limit) {
    let inThrottle;
    return (...args)=>{
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}
function sleep(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms));
}
function isEmpty(value) {
    if (value == null) return true;
    if (typeof value === 'string') return value.trim() === '';
    if (Array.isArray(value)) return value.length === 0;
    if (typeof value === 'object') return Object.keys(value).length === 0;
    return false;
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
function slugify(str) {
    return str.toLowerCase().trim().replace(/[^\w\s-]/g, '').replace(/[\s_-]+/g, '-').replace(/^-+|-+$/g, '');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxjb3JlXFx1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbHN4LCB0eXBlIENsYXNzVmFsdWUgfSBmcm9tICdjbHN4J1xuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gJ3RhaWx3aW5kLW1lcmdlJ1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gbWVyZ2UgVGFpbHdpbmQgQ1NTIGNsYXNzZXMgd2l0aCBjbHN4XG4gKiBAcGFyYW0gaW5wdXRzIC0gQ2xhc3MgdmFsdWVzIHRvIG1lcmdlXG4gKiBAcmV0dXJucyBNZXJnZWQgY2xhc3Mgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbiguLi5pbnB1dHM6IENsYXNzVmFsdWVbXSkge1xuICByZXR1cm4gdHdNZXJnZShjbHN4KGlucHV0cykpXG59XG5cbi8qKlxuICogRm9ybWF0IGN1cnJlbmN5IGluIEFyZ2VudGluZSBQZXNvIGZvcm1hdFxuICogQHBhcmFtIGFtb3VudCAtIEFtb3VudCB0byBmb3JtYXRcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCBjdXJyZW5jeSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEN1cnJlbmN5KGFtb3VudDogbnVtYmVyIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbnVtQW1vdW50ID0gdHlwZW9mIGFtb3VudCA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KGFtb3VudCkgOiBhbW91bnRcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZXMtQVInLCB7XG4gICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgY3VycmVuY3k6ICdBUlMnLFxuICB9KS5mb3JtYXQobnVtQW1vdW50KVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIElEXG4gKiBAcGFyYW0gbGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSBJRFxuICogQHJldHVybnMgUmFuZG9tIElEIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVJZChsZW5ndGg6IG51bWJlciA9IDgpOiBzdHJpbmcge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKVxuICAgIC50b1N0cmluZygzNilcbiAgICAuc3Vic3RyaW5nKDIsIGxlbmd0aCArIDIpXG59XG5cbi8qKlxuICogRGVib3VuY2UgZnVuY3Rpb25cbiAqIEBwYXJhbSBmdW5jIC0gRnVuY3Rpb24gdG8gZGVib3VuY2VcbiAqIEBwYXJhbSB3YWl0IC0gV2FpdCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICogQHJldHVybnMgRGVib3VuY2VkIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuICBmdW5jOiBULFxuICB3YWl0OiBudW1iZXJcbik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcbiAgbGV0IHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0XG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGZ1bmMoLi4uYXJncyksIHdhaXQpXG4gIH1cbn1cblxuLyoqXG4gKiBUaHJvdHRsZSBmdW5jdGlvblxuICogQHBhcmFtIGZ1bmMgLSBGdW5jdGlvbiB0byB0aHJvdHRsZVxuICogQHBhcmFtIGxpbWl0IC0gVGltZSBsaW1pdCBpbiBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIFRocm90dGxlZCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGU8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbiAgZnVuYzogVCxcbiAgbGltaXQ6IG51bWJlclxuKTogKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHZvaWQge1xuICBsZXQgaW5UaHJvdHRsZTogYm9vbGVhblxuICByZXR1cm4gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHtcbiAgICBpZiAoIWluVGhyb3R0bGUpIHtcbiAgICAgIGZ1bmMoLi4uYXJncylcbiAgICAgIGluVGhyb3R0bGUgPSB0cnVlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IChpblRocm90dGxlID0gZmFsc2UpLCBsaW1pdClcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBTbGVlcCBmdW5jdGlvbiBmb3IgYXN5bmMgb3BlcmF0aW9uc1xuICogQHBhcmFtIG1zIC0gTWlsbGlzZWNvbmRzIHRvIHNsZWVwXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCB0aW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgZW1wdHkgKG51bGwsIHVuZGVmaW5lZCwgZW1wdHkgc3RyaW5nLCBlbXB0eSBhcnJheSwgZW1wdHkgb2JqZWN0KVxuICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIFRydWUgaWYgZW1wdHksIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdHJ1ZVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlLnRyaW0oKSA9PT0gJydcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUubGVuZ3RoID09PSAwXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMFxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDYXBpdGFsaXplIGZpcnN0IGxldHRlciBvZiBhIHN0cmluZ1xuICogQHBhcmFtIHN0ciAtIFN0cmluZyB0byBjYXBpdGFsaXplXG4gKiBAcmV0dXJucyBDYXBpdGFsaXplZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59XG5cbi8qKlxuICogQ29udmVydCBzdHJpbmcgdG8gc2x1ZyBmb3JtYXRcbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gY29udmVydFxuICogQHJldHVybnMgU2x1ZyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsdWdpZnkoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2UoL1teXFx3XFxzLV0vZywgJycpXG4gICAgLnJlcGxhY2UoL1tcXHNfLV0rL2csICctJylcbiAgICAucmVwbGFjZSgvXi0rfC0rJC9nLCAnJylcbn1cbiJdLCJuYW1lcyI6WyJjYXBpdGFsaXplIiwiY24iLCJkZWJvdW5jZSIsImZvcm1hdEN1cnJlbmN5IiwiZ2VuZXJhdGVJZCIsImlzRW1wdHkiLCJzbGVlcCIsInNsdWdpZnkiLCJ0aHJvdHRsZSIsImlucHV0cyIsInR3TWVyZ2UiLCJjbHN4IiwiYW1vdW50IiwibnVtQW1vdW50IiwicGFyc2VGbG9hdCIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJzdHlsZSIsImN1cnJlbmN5IiwiZm9ybWF0IiwibGVuZ3RoIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0IiwiYXJncyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJsaW1pdCIsImluVGhyb3R0bGUiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwidmFsdWUiLCJ0cmltIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0Iiwia2V5cyIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBb0dnQkE7ZUFBQUE7O1FBNUZBQztlQUFBQTs7UUFrQ0FDO2VBQUFBOztRQXpCQUM7ZUFBQUE7O1FBYUFDO2VBQUFBOztRQXlEQUM7ZUFBQUE7O1FBVEFDO2VBQUFBOztRQStCQUM7ZUFBQUE7O1FBbERBQztlQUFBQTs7O3NCQTNEc0I7K0JBQ2Q7QUFPakIsU0FBU1AsR0FBRyxHQUFHUSxNQUFvQjtJQUN4QyxPQUFPQyxJQUFBQSxzQkFBTyxFQUFDQyxJQUFBQSxVQUFJLEVBQUNGO0FBQ3RCO0FBT08sU0FBU04sZUFBZVMsTUFBdUI7SUFDcEQsTUFBTUMsWUFBWSxPQUFPRCxXQUFXLFdBQVdFLFdBQVdGLFVBQVVBO0lBQ3BFLE9BQU8sSUFBSUcsS0FBS0MsWUFBWSxDQUFDLFNBQVM7UUFDcENDLE9BQU87UUFDUEMsVUFBVTtJQUNaLEdBQUdDLE1BQU0sQ0FBQ047QUFDWjtBQU9PLFNBQVNULFdBQVdnQixTQUFpQixDQUFDO0lBQzNDLE9BQU9DLEtBQUtDLE1BQU0sR0FDZkMsUUFBUSxDQUFDLElBQ1RDLFNBQVMsQ0FBQyxHQUFHSixTQUFTO0FBQzNCO0FBUU8sU0FBU2xCLFNBQ2R1QixJQUFPLEVBQ1BDLElBQVk7SUFFWixJQUFJQztJQUNKLE9BQU8sQ0FBQyxHQUFHQztRQUNUQyxhQUFhRjtRQUNiQSxVQUFVRyxXQUFXLElBQU1MLFFBQVFHLE9BQU9GO0lBQzVDO0FBQ0Y7QUFRTyxTQUFTbEIsU0FDZGlCLElBQU8sRUFDUE0sS0FBYTtJQUViLElBQUlDO0lBQ0osT0FBTyxDQUFDLEdBQUdKO1FBQ1QsSUFBSSxDQUFDSSxZQUFZO1lBQ2ZQLFFBQVFHO1lBQ1JJLGFBQWE7WUFDYkYsV0FBVyxJQUFPRSxhQUFhLE9BQVFEO1FBQ3pDO0lBQ0Y7QUFDRjtBQU9PLFNBQVN6QixNQUFNMkIsRUFBVTtJQUM5QixPQUFPLElBQUlDLFFBQVFDLENBQUFBLFVBQVdMLFdBQVdLLFNBQVNGO0FBQ3BEO0FBT08sU0FBUzVCLFFBQVErQixLQUFVO0lBQ2hDLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBQzFCLElBQUksT0FBT0EsVUFBVSxVQUFVLE9BQU9BLE1BQU1DLElBQUksT0FBTztJQUN2RCxJQUFJQyxNQUFNQyxPQUFPLENBQUNILFFBQVEsT0FBT0EsTUFBTWhCLE1BQU0sS0FBSztJQUNsRCxJQUFJLE9BQU9nQixVQUFVLFVBQVUsT0FBT0ksT0FBT0MsSUFBSSxDQUFDTCxPQUFPaEIsTUFBTSxLQUFLO0lBQ3BFLE9BQU87QUFDVDtBQU9PLFNBQVNwQixXQUFXMEMsR0FBVztJQUNwQyxPQUFPQSxJQUFJQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLRixJQUFJRyxLQUFLLENBQUM7QUFDakQ7QUFPTyxTQUFTdEMsUUFBUW1DLEdBQVc7SUFDakMsT0FBT0EsSUFDSkksV0FBVyxHQUNYVCxJQUFJLEdBQ0pVLE9BQU8sQ0FBQyxhQUFhLElBQ3JCQSxPQUFPLENBQUMsWUFBWSxLQUNwQkEsT0FBTyxDQUFDLFlBQVk7QUFDekIifQ==