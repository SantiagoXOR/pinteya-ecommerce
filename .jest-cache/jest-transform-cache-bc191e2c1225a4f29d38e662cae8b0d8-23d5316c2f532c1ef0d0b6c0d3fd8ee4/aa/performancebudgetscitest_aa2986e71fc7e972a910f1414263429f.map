{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\ci\\performance-budgets-ci.test.js"],"sourcesContent":["// ===================================\r\n// TESTS DE PERFORMANCE BUDGETS CI/CD\r\n// ===================================\r\n\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\nconst CIPerformanceChecker = require('../../scripts/ci-performance-check.js');\r\nconst budgetConfig = require('../../performance-budgets.config.js');\r\n\r\n// Mock file system y child_process\r\njest.mock('fs', () => ({\r\n  promises: {\r\n    access: jest.fn(),\r\n    mkdir: jest.fn(),\r\n    writeFile: jest.fn(),\r\n    appendFile: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('child_process', () => ({\r\n  execSync: jest.fn()\r\n}));\r\n\r\ndescribe('Performance Budgets CI/CD System', () => {\r\n  let originalEnv;\r\n  let checker;\r\n\r\n  beforeEach(() => {\r\n    originalEnv = process.env;\r\n    process.env = { ...originalEnv };\r\n    checker = new CIPerformanceChecker();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    process.env = originalEnv;\r\n  });\r\n\r\n  describe('Budget Configuration', () => {\r\n    it('should have valid budget configuration structure', () => {\r\n      expect(budgetConfig).toHaveProperty('general');\r\n      expect(budgetConfig).toHaveProperty('budgets');\r\n      expect(budgetConfig).toHaveProperty('environments');\r\n      expect(budgetConfig).toHaveProperty('analysis');\r\n      expect(budgetConfig).toHaveProperty('helpers');\r\n    });\r\n\r\n    it('should have critical budgets defined', () => {\r\n      const { critical } = budgetConfig.budgets;\r\n      \r\n      expect(critical).toHaveProperty('totalBundleSize');\r\n      expect(critical).toHaveProperty('firstLoadJS');\r\n      expect(critical).toHaveProperty('performanceScore');\r\n      expect(critical).toHaveProperty('chunkCount');\r\n      \r\n      // Verificar estructura de presupuesto\r\n      const bundleBudget = critical.totalBundleSize;\r\n      expect(bundleBudget).toHaveProperty('threshold');\r\n      expect(bundleBudget).toHaveProperty('warning');\r\n      expect(bundleBudget).toHaveProperty('unit');\r\n      expect(bundleBudget).toHaveProperty('description');\r\n      expect(bundleBudget).toHaveProperty('category');\r\n      expect(bundleBudget).toHaveProperty('failBuild');\r\n      \r\n      expect(bundleBudget.failBuild).toBe(true);\r\n      expect(bundleBudget.category).toBe('critical');\r\n    });\r\n\r\n    it('should have environment-specific configurations', () => {\r\n      const { environments } = budgetConfig;\r\n      \r\n      expect(environments).toHaveProperty('production');\r\n      expect(environments).toHaveProperty('staging');\r\n      expect(environments).toHaveProperty('development');\r\n      expect(environments).toHaveProperty('ci');\r\n      \r\n      // Verificar multiplicadores\r\n      expect(environments.production.multipliers.critical).toBe(1.0);\r\n      expect(environments.staging.multipliers.critical).toBe(1.1);\r\n      expect(environments.development.multipliers.critical).toBe(2.0);\r\n    });\r\n\r\n    it('should have helper functions working correctly', () => {\r\n      const { helpers } = budgetConfig;\r\n      \r\n      // Test formatBytes\r\n      expect(helpers.formatBytes(1024)).toBe('1 KB');\r\n      expect(helpers.formatBytes(1024 * 1024)).toBe('1 MB');\r\n      expect(helpers.formatBytes(0)).toBe('0 B');\r\n      \r\n      // Test formatTime\r\n      expect(helpers.formatTime(30)).toBe('30s');\r\n      expect(helpers.formatTime(90)).toBe('1m 30s');\r\n      expect(helpers.formatTime(120)).toBe('2m 0s');\r\n      \r\n      // Test getBudgetForEnvironment\r\n      const prodBudget = helpers.getBudgetForEnvironment('totalBundleSize', 'critical', 'production');\r\n      const devBudget = helpers.getBudgetForEnvironment('totalBundleSize', 'critical', 'development');\r\n      \r\n      expect(prodBudget.threshold).toBe(500 * 1024);\r\n      expect(devBudget.threshold).toBe(1000 * 1024); // 2x multiplier\r\n    });\r\n  });\r\n\r\n  describe('CIPerformanceChecker', () => {\r\n    it('should initialize with correct default configuration', () => {\r\n      expect(checker.results).toHaveProperty('timestamp');\r\n      expect(checker.results).toHaveProperty('environment');\r\n      expect(checker.results).toHaveProperty('metrics');\r\n      expect(checker.results).toHaveProperty('violations');\r\n      expect(checker.results).toHaveProperty('score');\r\n      expect(checker.results).toHaveProperty('grade');\r\n    });\r\n\r\n    it('should calculate performance score correctly', () => {\r\n      // Test con métricas buenas\r\n      checker.results.metrics = {\r\n        bundleSize: 300 * 1024,    // 300KB - bueno\r\n        firstLoadJS: 80 * 1024,    // 80KB - bueno\r\n        chunkCount: 10,            // 10 chunks - bueno\r\n        duplicateModules: 0        // sin duplicados - excelente\r\n      };\r\n      \r\n      const score = checker.calculatePerformanceScore();\r\n      expect(score).toBeGreaterThan(90);\r\n      \r\n      // Test con métricas malas\r\n      checker.results.metrics = {\r\n        bundleSize: 600 * 1024,    // 600KB - malo\r\n        firstLoadJS: 150 * 1024,   // 150KB - malo\r\n        chunkCount: 25,            // 25 chunks - malo\r\n        duplicateModules: 5        // muchos duplicados - malo\r\n      };\r\n      \r\n      const badScore = checker.calculatePerformanceScore();\r\n      expect(badScore).toBeLessThan(50);\r\n    });\r\n\r\n    it('should calculate grades correctly', () => {\r\n      expect(checker.calculateGrade(95)).toBe('A');\r\n      expect(checker.calculateGrade(85)).toBe('B');\r\n      expect(checker.calculateGrade(75)).toBe('C');\r\n      expect(checker.calculateGrade(65)).toBe('D');\r\n      expect(checker.calculateGrade(45)).toBe('F');\r\n    });\r\n\r\n    it('should detect budget violations correctly', () => {\r\n      const budget = {\r\n        threshold: 100 * 1024,\r\n        warning: 80 * 1024,\r\n        category: 'critical',\r\n        description: 'Test budget',\r\n        failBuild: true,\r\n        unit: 'bytes'\r\n      };\r\n      \r\n      const metrics = {\r\n        bundleSize: 120 * 1024  // Excede threshold\r\n      };\r\n      \r\n      const violation = checker.checkBudgetViolation('totalBundleSize', budget, metrics);\r\n      \r\n      expect(violation).toBeTruthy();\r\n      expect(violation.severity).toBe('error');\r\n      expect(violation.failBuild).toBe(true);\r\n      expect(violation.value).toBe(120 * 1024);\r\n      expect(violation.threshold).toBe(100 * 1024);\r\n    });\r\n\r\n    it('should format violation messages correctly', () => {\r\n      const budget = { threshold: 100 * 1024, warning: 80 * 1024 };\r\n      const message = checker.formatViolationMessage('bundleSize', 120 * 1024, budget, 'bytes');\r\n      \r\n      expect(message).toContain('120 KB');\r\n      expect(message).toContain('100 KB');\r\n      expect(message).toContain('exceeds threshold');\r\n    });\r\n\r\n    it('should generate markdown report correctly', () => {\r\n      checker.results = {\r\n        metrics: {\r\n          bundleSize: 400 * 1024,\r\n          gzippedSize: 140 * 1024,\r\n          firstLoadJS: 85 * 1024,\r\n          chunkCount: 12\r\n        },\r\n        score: 87,\r\n        grade: 'B',\r\n        violations: [\r\n          {\r\n            name: 'Test Violation',\r\n            severity: 'warning',\r\n            category: 'important',\r\n            message: 'Test violation message'\r\n          }\r\n        ],\r\n        comparison: null\r\n      };\r\n      \r\n      const report = checker.generateMarkdownReport();\r\n      \r\n      expect(report).toContain('# CI Performance Report');\r\n      expect(report).toContain('Score**: 87/100 (Grade: B)');\r\n      expect(report).toContain('400 KB');\r\n      expect(report).toContain('❌ 1 budget violation(s) detected');\r\n      expect(report).toContain('Test Violation');\r\n    });\r\n\r\n    it('should generate violations CSV correctly', () => {\r\n      checker.results.violations = [\r\n        {\r\n          name: 'Bundle Size',\r\n          category: 'critical',\r\n          severity: 'error',\r\n          value: 600000,\r\n          threshold: 500000,\r\n          unit: 'bytes',\r\n          message: 'Bundle too large'\r\n        }\r\n      ];\r\n      \r\n      const csv = checker.generateViolationsCSV();\r\n      \r\n      expect(csv).toContain('Name,Category,Severity,Value,Threshold,Unit,Message');\r\n      expect(csv).toContain('Bundle Size');\r\n      expect(csv).toContain('critical');\r\n      expect(csv).toContain('error');\r\n      expect(csv).toContain('600000');\r\n    });\r\n\r\n    it('should determine build failure correctly', () => {\r\n      // Sin violaciones críticas\r\n      checker.results.violations = [\r\n        { failBuild: false, severity: 'warning' }\r\n      ];\r\n      expect(checker.shouldFailBuild()).toBe(false);\r\n      \r\n      // Con violaciones críticas\r\n      checker.results.violations = [\r\n        { failBuild: true, severity: 'error' },\r\n        { failBuild: false, severity: 'warning' }\r\n      ];\r\n      expect(checker.shouldFailBuild()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Environment Configuration', () => {\r\n    it('should apply correct multipliers for different environments', () => {\r\n      const baseBudget = {\r\n        threshold: 100 * 1024,\r\n        warning: 80 * 1024,\r\n        category: 'critical'\r\n      };\r\n      \r\n      // Production - sin multiplicador\r\n      const prodBudget = budgetConfig.helpers.getBudgetForEnvironment('test', 'critical', 'production');\r\n      // Como no existe 'test', debería retornar null\r\n      expect(prodBudget).toBeNull();\r\n      \r\n      // Test con presupuesto real\r\n      const realProdBudget = budgetConfig.helpers.getBudgetForEnvironment('totalBundleSize', 'critical', 'production');\r\n      const realDevBudget = budgetConfig.helpers.getBudgetForEnvironment('totalBundleSize', 'critical', 'development');\r\n      \r\n      expect(realProdBudget.threshold).toBe(500 * 1024);\r\n      expect(realDevBudget.threshold).toBe(1000 * 1024); // 2x multiplier\r\n    });\r\n\r\n    it('should handle budget violation checking with environment multipliers', () => {\r\n      const violation = budgetConfig.helpers.checkBudgetViolation(\r\n        600 * 1024, // 600KB\r\n        { \r\n          name: 'totalBundleSize', \r\n          category: 'critical',\r\n          threshold: 500 * 1024,\r\n          warning: 400 * 1024\r\n        },\r\n        'production'\r\n      );\r\n      \r\n      expect(violation.violation).toBe(true);\r\n      expect(violation.severity).toBe('error');\r\n      expect(violation.percentageOver).toBeCloseTo(20, 1); // 20% over\r\n    });\r\n  });\r\n\r\n  describe('Integration Tests', () => {\r\n    it('should work with mocked file system operations', async () => {\r\n      // Mock successful file operations\r\n      require('fs').promises.access.mockResolvedValue();\r\n      require('fs').promises.mkdir.mockResolvedValue();\r\n      require('fs').promises.writeFile.mockResolvedValue();\r\n      require('fs').promises.appendFile.mockResolvedValue();\r\n      \r\n      // Mock successful bundle analysis\r\n      require('child_process').execSync.mockReturnValue('Bundle analysis output');\r\n      \r\n      // Mock environment variables\r\n      process.env.GITHUB_OUTPUT = '/tmp/github-output';\r\n      process.env.FAIL_ON_VIOLATIONS = 'false';\r\n      \r\n      // Verificar que no arroje errores\r\n      expect(() => {\r\n        checker.verifyBuild();\r\n        checker.runPerformanceAnalysis();\r\n        checker.checkBudgets();\r\n        checker.generateReports();\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('should handle missing build gracefully', async () => {\r\n      require('fs').promises.access.mockRejectedValue(new Error('ENOENT'));\r\n      \r\n      await expect(checker.verifyBuild()).rejects.toThrow('Build not found');\r\n    });\r\n\r\n    it('should handle bundle analysis failure gracefully', async () => {\r\n      require('child_process').execSync.mockImplementation(() => {\r\n        throw new Error('Bundle analysis failed');\r\n      });\r\n      \r\n      // Debería usar métricas por defecto sin fallar\r\n      await checker.runPerformanceAnalysis();\r\n      \r\n      expect(checker.results.metrics).toBeDefined();\r\n      expect(checker.results.score).toBeGreaterThan(0);\r\n    });\r\n  });\r\n\r\n  describe('GitHub Actions Integration', () => {\r\n    it('should export correct GitHub outputs', async () => {\r\n      process.env.GITHUB_OUTPUT = '/tmp/github-output';\r\n      \r\n      checker.results = {\r\n        score: 87,\r\n        grade: 'B',\r\n        metrics: { bundleSize: 400000, firstLoadJS: 85000 },\r\n        violations: [\r\n          { severity: 'error', failBuild: true },\r\n          { severity: 'warning', failBuild: false }\r\n        ]\r\n      };\r\n      \r\n      await checker.exportGitHubOutputs();\r\n      \r\n      const writeCall = require('fs').promises.appendFile.mock.calls[0];\r\n      const outputContent = writeCall[1];\r\n      \r\n      expect(outputContent).toContain('performance-score=87');\r\n      expect(outputContent).toContain('performance-grade=B');\r\n      expect(outputContent).toContain('bundle-size=400000');\r\n      expect(outputContent).toContain('violations-count=2');\r\n      expect(outputContent).toContain('critical-violations=1');\r\n      expect(outputContent).toContain('has-critical-violations=true');\r\n      expect(outputContent).toContain('should-fail-build=true');\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","promises","access","fn","mkdir","writeFile","appendFile","execSync","fs","require","path","CIPerformanceChecker","budgetConfig","describe","originalEnv","checker","beforeEach","process","env","clearAllMocks","afterEach","it","expect","toHaveProperty","critical","budgets","bundleBudget","totalBundleSize","failBuild","toBe","category","environments","production","multipliers","staging","development","helpers","formatBytes","formatTime","prodBudget","getBudgetForEnvironment","devBudget","threshold","results","metrics","bundleSize","firstLoadJS","chunkCount","duplicateModules","score","calculatePerformanceScore","toBeGreaterThan","badScore","toBeLessThan","calculateGrade","budget","warning","description","unit","violation","checkBudgetViolation","toBeTruthy","severity","value","message","formatViolationMessage","toContain","gzippedSize","grade","violations","name","comparison","report","generateMarkdownReport","csv","generateViolationsCSV","shouldFailBuild","baseBudget","toBeNull","realProdBudget","realDevBudget","percentageOver","toBeCloseTo","mockResolvedValue","mockReturnValue","GITHUB_OUTPUT","FAIL_ON_VIOLATIONS","verifyBuild","runPerformanceAnalysis","checkBudgets","generateReports","not","toThrow","mockRejectedValue","Error","rejects","mockImplementation","toBeDefined","exportGitHubOutputs","writeCall","calls","outputContent"],"mappings":"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"}