{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useOrdersEnterprise.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDERS ENTERPRISE HOOK\n// ===================================\n\n'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport {\n  OrderEnterprise,\n  OrderFilters,\n  OrderListResponse,\n  UseOrdersState,\n  BulkStatusUpdate,\n  BulkStatusUpdateResult,\n} from '@/types/orders-enterprise'\n\n// ===================================\n// HOOK PRINCIPAL\n// ===================================\n\nexport function useOrdersEnterprise(initialFilters?: OrderFilters) {\n  // Hook legacy - usar /hooks/admin/useOrdersEnterprise.ts en su lugar\n\n  const [state, setState] = useState<UseOrdersState>({\n    orders: [],\n    loading: true,\n    error: null,\n    filters: {\n      page: 1,\n      limit: 20,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n      ...initialFilters,\n    },\n    pagination: {\n      page: 1,\n      limit: 20,\n      total: 0,\n      totalPages: 0,\n      hasNextPage: false,\n      hasPreviousPage: false,\n    },\n  })\n\n  // ===================================\n  // FUNCIONES DE API\n  // ===================================\n\n  const fetchOrders = useCallback(async (filters: OrderFilters) => {\n    setState(prev => ({ ...prev, loading: true, error: null }))\n\n    try {\n      const queryParams = new URLSearchParams()\n      Object.entries(filters).forEach(([key, value]) => {\n        // FILTRAR OBJETOS: Solo agregar valores primitivos (string, number, boolean)\n        if (value !== undefined && value !== null && value !== '' && typeof value !== 'object') {\n          queryParams.append(key, value.toString())\n        }\n      })\n\n      const response = await fetch(`/api/admin/orders?${queryParams}`)\n      const data: { data: OrderListResponse } = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.data?.toString() || 'Error al cargar órdenes')\n      }\n\n      setState(prev => ({\n        ...prev,\n        orders: data.data.orders,\n        pagination: data.data.pagination,\n        filters: data.data.filters,\n        loading: false,\n      }))\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Error desconocido',\n        loading: false,\n      }))\n    }\n  }, [])\n\n  const createOrder = useCallback(\n    async (orderData: any): Promise<OrderEnterprise> => {\n      const response = await fetch('/api/admin/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al crear orden')\n      }\n\n      // Refrescar lista después de crear\n      await fetchOrders(state.filters)\n\n      return data.data\n    },\n    [state.filters, fetchOrders]\n  )\n\n  const updateOrder = useCallback(\n    async (orderId: string, orderData: any): Promise<OrderEnterprise> => {\n      const response = await fetch(`/api/admin/orders/${orderId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al actualizar orden')\n      }\n\n      // Actualizar orden en el estado local\n      setState(prev => ({\n        ...prev,\n        orders: prev.orders.map(order =>\n          order.id === orderId ? { ...order, ...data.data } : order\n        ),\n      }))\n\n      return data.data\n    },\n    []\n  )\n\n  const changeOrderStatus = useCallback(\n    async (\n      orderId: string,\n      newStatus: string,\n      reason: string,\n      additionalData?: any\n    ): Promise<void> => {\n      const response = await fetch(`/api/admin/orders/${orderId}/status`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status: newStatus,\n          reason,\n          ...additionalData,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al cambiar estado')\n      }\n\n      // Actualizar orden en el estado local\n      setState(prev => ({\n        ...prev,\n        orders: prev.orders.map(order =>\n          order.id === orderId ? { ...order, status: newStatus } : order\n        ),\n      }))\n    },\n    []\n  )\n\n  const bulkUpdateStatus = useCallback(\n    async (bulkData: BulkStatusUpdate): Promise<BulkStatusUpdateResult> => {\n      const response = await fetch('/api/admin/orders/bulk?operation=status_update', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(bulkData),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error en operación masiva')\n      }\n\n      // Refrescar lista después de operación masiva\n      await fetchOrders(state.filters)\n\n      return data.data\n    },\n    [state.filters, fetchOrders]\n  )\n\n  const exportOrders = useCallback(\n    async (format: 'csv' | 'json' = 'csv', filters?: OrderFilters): Promise<any> => {\n      const response = await fetch('/api/admin/orders/bulk?operation=export', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          format,\n          filters: filters || state.filters,\n          include_items: true,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al exportar órdenes')\n      }\n\n      return data.data\n    },\n    [state.filters]\n  )\n\n  // ===================================\n  // FUNCIONES DE FILTRADO Y PAGINACIÓN\n  // ===================================\n\n  const updateFilters = useCallback(\n    (newFilters: Partial<OrderFilters>) => {\n      const updatedFilters = {\n        ...state.filters,\n        ...newFilters,\n        page: newFilters.page || 1, // Reset page unless explicitly set\n      }\n\n      setState(prev => ({\n        ...prev,\n        filters: updatedFilters,\n      }))\n\n      fetchOrders(updatedFilters)\n    },\n    [state.filters, fetchOrders]\n  )\n\n  const setPage = useCallback(\n    (page: number) => {\n      updateFilters({ page })\n    },\n    [updateFilters]\n  )\n\n  const setSearch = useCallback(\n    (search: string) => {\n      updateFilters({ search, page: 1 })\n    },\n    [updateFilters]\n  )\n\n  const setStatus = useCallback(\n    (status: string | undefined) => {\n      updateFilters({ status, page: 1 })\n    },\n    [updateFilters]\n  )\n\n  const setPaymentStatus = useCallback(\n    (payment_status: string | undefined) => {\n      updateFilters({ payment_status, page: 1 })\n    },\n    [updateFilters]\n  )\n\n  const setSorting = useCallback(\n    (sort_by: string, sort_order: 'asc' | 'desc') => {\n      updateFilters({ sort_by, sort_order })\n    },\n    [updateFilters]\n  )\n\n  const setDateRange = useCallback(\n    (date_from?: string, date_to?: string) => {\n      updateFilters({ date_from, date_to, page: 1 })\n    },\n    [updateFilters]\n  )\n\n  const clearFilters = useCallback(() => {\n    const defaultFilters: OrderFilters = {\n      page: 1,\n      limit: 20,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n    }\n\n    setState(prev => ({\n      ...prev,\n      filters: defaultFilters,\n    }))\n\n    fetchOrders(defaultFilters)\n  }, [fetchOrders])\n\n  // ===================================\n  // FUNCIONES DE UTILIDAD\n  // ===================================\n\n  const refresh = useCallback(() => {\n    fetchOrders(state.filters)\n  }, [state.filters, fetchOrders])\n\n  const getOrderById = useCallback(\n    (orderId: string): OrderEnterprise | undefined => {\n      return state.orders.find(order => order.id === orderId)\n    },\n    [state.orders]\n  )\n\n  const getOrdersByStatus = useCallback(\n    (status: string): OrderEnterprise[] => {\n      return state.orders.filter(order => order.status === status)\n    },\n    [state.orders]\n  )\n\n  // ===================================\n  // FUNCIÓN DE VALIDACIÓN DE DATOS\n  // ===================================\n\n  const validateOrderTotal = useCallback((total: unknown): number => {\n    if (typeof total === 'number' && !isNaN(total) && total >= 0) {\n      return total\n    }\n    console.warn('[useOrdersEnterprise] Invalid order total detected:', total)\n    return 0\n  }, [])\n\n  const getOrderTotal = useCallback(\n    (order: any): number => {\n      // Manejar tanto 'total' como 'total_amount' para compatibilidad con mocks\n      const total = order.total ?? order.total_amount\n      return validateOrderTotal(total)\n    },\n    [validateOrderTotal]\n  )\n\n  const getTotalRevenue = useCallback((): number => {\n    return state.orders.reduce((total, order) => {\n      const orderTotal = getOrderTotal(order)\n      return order.status !== 'cancelled' ? total + orderTotal : total\n    }, 0)\n  }, [state.orders, getOrderTotal])\n\n  const getAverageOrderValue = useCallback((): number => {\n    const validOrders = state.orders.filter(order => {\n      const total = getOrderTotal(order)\n      return order.status !== 'cancelled' && total > 0\n    })\n\n    if (validOrders.length === 0) {\n      return 0\n    }\n\n    const total = validOrders.reduce((sum, order) => sum + getOrderTotal(order), 0)\n    return Math.round((total / validOrders.length) * 100) / 100\n  }, [state.orders, getOrderTotal])\n\n  // ===================================\n  // EFECTOS\n  // ===================================\n\n  useEffect(() => {\n    fetchOrders(state.filters)\n  }, []) // Solo ejecutar una vez al montar\n\n  // ===================================\n  // RETURN DEL HOOK\n  // ===================================\n\n  return {\n    // Estado\n    orders: state.orders,\n    loading: state.loading,\n    error: state.error,\n    filters: state.filters,\n    pagination: state.pagination,\n\n    // Operaciones CRUD\n    createOrder,\n    updateOrder,\n    changeOrderStatus,\n    bulkUpdateStatus,\n    exportOrders,\n\n    // Filtrado y paginación\n    updateFilters,\n    setPage,\n    setSearch,\n    setStatus,\n    setPaymentStatus,\n    setSorting,\n    setDateRange,\n    clearFilters,\n\n    // Utilidades\n    refresh,\n    getOrderById,\n    getOrdersByStatus,\n    getTotalRevenue,\n    getAverageOrderValue,\n\n    // Funciones de conveniencia\n    hasNextPage: state.pagination.hasNextPage,\n    hasPreviousPage: state.pagination.hasPreviousPage,\n    totalOrders: state.pagination.total,\n    currentPage: state.pagination.page,\n    totalPages: state.pagination.totalPages,\n  }\n}\n\n// ===================================\n// HOOK PARA ORDEN INDIVIDUAL\n// ===================================\n\nexport function useOrderDetail(orderId: string) {\n  const [order, setOrder] = useState<OrderEnterprise | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchOrder = useCallback(async () => {\n    if (!orderId) {\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await fetch(`/api/admin/orders/${orderId}`)\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al cargar orden')\n      }\n\n      setOrder(data.data.order)\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Error desconocido')\n    } finally {\n      setLoading(false)\n    }\n  }, [orderId])\n\n  useEffect(() => {\n    fetchOrder()\n  }, [fetchOrder])\n\n  return {\n    order,\n    loading,\n    error,\n    refresh: fetchOrder,\n  }\n}\n"],"names":["useOrderDetail","useOrdersEnterprise","initialFilters","state","setState","useState","orders","loading","error","filters","page","limit","sort_by","sort_order","pagination","total","totalPages","hasNextPage","hasPreviousPage","fetchOrders","useCallback","prev","queryParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","data","json","ok","Error","message","createOrder","orderData","method","headers","body","JSON","stringify","updateOrder","orderId","map","order","id","changeOrderStatus","newStatus","reason","additionalData","status","bulkUpdateStatus","bulkData","exportOrders","format","include_items","updateFilters","newFilters","updatedFilters","setPage","setSearch","search","setStatus","setPaymentStatus","payment_status","setSorting","setDateRange","date_from","date_to","clearFilters","defaultFilters","refresh","getOrderById","find","getOrdersByStatus","filter","validateOrderTotal","isNaN","console","warn","getOrderTotal","total_amount","getTotalRevenue","reduce","orderTotal","getAverageOrderValue","validOrders","length","sum","Math","round","useEffect","totalOrders","currentPage","setOrder","setLoading","setError","fetchOrder"],"mappings":"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"}