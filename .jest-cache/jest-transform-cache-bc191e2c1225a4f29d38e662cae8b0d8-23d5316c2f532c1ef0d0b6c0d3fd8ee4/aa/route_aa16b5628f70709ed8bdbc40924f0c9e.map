{"version":3,"names":["cov_1278znm8x9","actualCoverage","s","GET","f","POST","runtime","request","console","log","session","_config","auth","user","b","_server","NextResponse","json","success","error","status","_logger","logger","LogLevel","INFO","LogCategory","API","userId","id","searchParams","URL","url","page","parseInt","get","limit","search","offset","supabase","_server1","createAdminClient","query","from","select","count","or","order","ascending","range","data","customers","ERROR","DATABASE","formattedCustomers","map","customer","name","email","phone","address","created_at","response","total","pagination","totalPages","Math","ceil","hasNext","hasPrev","message","length","customersCount","details","Error"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\customers\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Tipos para clientes\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  address?: string;\r\n  created_at: string;\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('üîç API: GET /api/admin/customers - Iniciando...');\r\n\r\n    // Verificar autenticaci√≥n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      console.log('‚ùå Usuario no autenticado');\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'No autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Fetching customers for admin', {\r\n      userId: session.user.id\r\n    });\r\n\r\n    // Obtener par√°metros de query\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const search = searchParams.get('search') || '';\r\n\r\n    console.log('üìä Par√°metros:', { page, limit, search });\r\n\r\n    // Calcular offset\r\n    const offset = (page - 1) * limit;\r\n\r\n    // Construir query base\r\n    const supabase = createAdminClient();\r\n    let query = supabase\r\n      .from('users')\r\n      .select('id, name, email, created_at', { count: 'exact' });\r\n\r\n    // Aplicar filtros de b√∫squeda si se proporciona\r\n    if (search) {\r\n      query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%`);\r\n    }\r\n\r\n    // Aplicar paginaci√≥n y ordenamiento\r\n    query = query\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    const { data: customers, error, count } = await query;\r\n\r\n    if (error) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error fetching customers', { error });\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Error al obtener clientes'\r\n      }, { status: 500 });\r\n    }\r\n\r\n    // Formatear datos para el frontend\r\n    const formattedCustomers: Customer[] = customers?.map(customer => ({\r\n      id: customer.id,\r\n      name: customer.name || 'Sin nombre',\r\n      email: customer.email,\r\n      phone: '', // TODO: Agregar campo phone a la tabla users si es necesario\r\n      address: '', // TODO: Agregar campo address a la tabla users si es necesario\r\n      created_at: customer.created_at\r\n    })) || [];\r\n\r\n    const response = {\r\n      success: true,\r\n      data: formattedCustomers,\r\n      total: count || 0,\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil((count || 0) / limit),\r\n        hasNext: page < Math.ceil((count || 0) / limit),\r\n        hasPrev: page > 1,\r\n      },\r\n      message: `${formattedCustomers.length} clientes encontrados de ${count || 0} totales`\r\n    };\r\n\r\n    console.log('‚úÖ Respuesta exitosa:', {\r\n      customersCount: formattedCustomers.length,\r\n      total: count,\r\n      page,\r\n      totalPages: Math.ceil((count || 0) / limit)\r\n    });\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Customers fetched successfully', {\r\n      count: formattedCustomers.length,\r\n      total: count\r\n    });\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error en GET /api/admin/customers:', error);\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error in customers API', { error });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n      details: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üîç API: POST /api/admin/customers - Iniciando...');\r\n\r\n    // Verificar autenticaci√≥n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'No autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // TODO: Implementar creaci√≥n de clientes\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Funcionalidad no implementada a√∫n',\r\n      message: 'La creaci√≥n de clientes estar√° disponible en una pr√≥xima versi√≥n'\r\n    }, { status: 501 });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error en POST /api/admin/customers:', error);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n      details: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingssB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAzGAC,IAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,GAAA;;MAyGAE,KAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,IAAA;;MA1HTC,QAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,OAAA;;;;;kCAE6B;;;kCACrB;;;kCACa;;;mCACY;AALvC,MAAMA,OAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,QAAU;AAiBhB,eAAeC,IAAII,OAAoB;EAAA;EAAAP,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC5C,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACFM,OAAA,CAAQC,GAAG,CAAC;IAEZ;IACA,MAAMC,OAAA;IAAA;IAAA,CAAAV,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAS,OAAA,CAAAC,IAAI;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACQ,OAAA,EAASG,IAAA,EAAM;MAAA;MAAAb,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAClBM,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAT,cAAA,GAAAE,CAAA;MACZ,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACvBC,OAAA,EAAS;QACTC,KAAA,EAAO;MACT,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACnB;IAAA;IAAA;MAAApB,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAEAmB,OAAA,CAAAC,MAAM,CAACb,GAAG,CAACY,OAAA,CAAAE,QAAQ,CAACC,IAAI,EAAEH,OAAA,CAAAI,WAAW,CAACC,GAAG,EAAE,gCAAgC;MACzEC,MAAA,EAAQjB,OAAA,CAAQG,IAAI,CAACe;IACvB;IAEA;IACA,MAAM;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAI4B,GAAA,CAAIvB,OAAA,CAAQwB,GAAG;IAC5C,MAAMC,IAAA;IAAA;IAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAO+B,QAAA;IAAS;IAAA,CAAAjC,cAAA,GAAAc,CAAA,UAAAe,YAAA,CAAaK,GAAG,CAAC;IAAA;IAAA,CAAAlC,cAAA,GAAAc,CAAA,UAAW;IAClD,MAAMqB,KAAA;IAAA;IAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAQ+B,QAAA;IAAS;IAAA,CAAAjC,cAAA,GAAAc,CAAA,UAAAe,YAAA,CAAaK,GAAG,CAAC;IAAA;IAAA,CAAAlC,cAAA,GAAAc,CAAA,UAAY;IACpD,MAAMsB,MAAA;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,cAAA,GAAAc,CAAA,UAAAe,YAAA,CAAaK,GAAG,CAAC;IAAA;IAAA,CAAAlC,cAAA,GAAAc,CAAA,UAAa;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAE7CM,OAAA,CAAQC,GAAG,CAAC,kBAAkB;MAAEuB,IAAA;MAAMG,KAAA;MAAOC;IAAO;IAEpD;IACA,MAAMC,MAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAS,CAAC8B,IAAA,GAAO,KAAKG,KAAA;IAE5B;IACA,MAAMG,QAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAW,IAAAqC,QAAA,CAAAC,iBAAiB;IAClC,IAAIC,KAAA;IAAA;IAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAQoC,QAAA,CACTI,IAAI,CAAC,SACLC,MAAM,CAAC,+BAA+B;MAAEC,KAAA,EAAO;IAAQ;IAE1D;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IACA,IAAIkC,MAAA,EAAQ;MAAA;MAAApC,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACVuC,KAAA,GAAQA,KAAA,CAAMI,EAAE,CAAC,eAAeT,MAAA,kBAAwBA,MAAA,GAAS;IACnE;IAAA;IAAA;MAAApC,cAAA,GAAAc,CAAA;IAAA;IAEA;IAAAd,cAAA,GAAAE,CAAA;IACAuC,KAAA,GAAQA,KAAA,CACLK,KAAK,CAAC,cAAc;MAAEC,SAAA,EAAW;IAAM,GACvCC,KAAK,CAACX,MAAA,EAAQA,MAAA,GAASF,KAAA,GAAQ;IAElC,MAAM;MAAEc,IAAA,EAAMC,SAAS;MAAE/B,KAAK;MAAEyB;IAAK,CAAE;IAAA;IAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAG,MAAMuC,KAAA;IAAA;IAAAzC,cAAA,GAAAE,CAAA;IAEhD,IAAIiB,KAAA,EAAO;MAAA;MAAAnB,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACTmB,OAAA,CAAAC,MAAM,CAACb,GAAG,CAACY,OAAA,CAAAE,QAAQ,CAAC4B,KAAK,EAAE9B,OAAA,CAAAI,WAAW,CAAC2B,QAAQ,EAAE,4BAA4B;QAAEjC;MAAM;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MACrF,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACvBC,OAAA,EAAS;QACTC,KAAA,EAAO;MACT,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACnB;IAAA;IAAA;MAAApB,cAAA,GAAAc,CAAA;IAAA;IAEA;IACA,MAAMuC,kBAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA;IAAiC;IAAA,CAAAF,cAAA,GAAAc,CAAA,UAAAoC,SAAA,EAAWI,GAAA,CAAIC,QAAA,IAAa;MAAA;MAAAvD,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA;QACjE0B,EAAA,EAAI2B,QAAA,CAAS3B,EAAE;QACf4B,IAAA;QAAM;QAAA,CAAAxD,cAAA,GAAAc,CAAA,UAAAyC,QAAA,CAASC,IAAI;QAAA;QAAA,CAAAxD,cAAA,GAAAc,CAAA,UAAI;QACvB2C,KAAA,EAAOF,QAAA,CAASE,KAAK;QACrBC,KAAA,EAAO;QACPC,OAAA,EAAS;QACTC,UAAA,EAAYL,QAAA,CAASK;MACvB;IAAA;IAAA;IAAA,CAAA5D,cAAA,GAAAc,CAAA,UAAO,EAAE;IAET,MAAM+C,QAAA;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAW;MACfgB,OAAA,EAAS;MACT+B,IAAA,EAAMI,kBAAA;MACNS,KAAA;MAAO;MAAA,CAAA9D,cAAA,GAAAc,CAAA,UAAA8B,KAAA;MAAA;MAAA,CAAA5C,cAAA,GAAAc,CAAA,UAAS;MAChBiD,UAAA,EAAY;QACV/B,IAAA;QACAG,KAAA;QACA6B,UAAA,EAAYC,IAAA,CAAKC,IAAI,CAAC;QAAC;QAAA,CAAAlE,cAAA,GAAAc,CAAA,UAAA8B,KAAA;QAAA;QAAA,CAAA5C,cAAA,GAAAc,CAAA,UAAS,MAAKqB,KAAA;QACrCgC,OAAA,EAASnC,IAAA,GAAOiC,IAAA,CAAKC,IAAI,CAAC;QAAC;QAAA,CAAAlE,cAAA,GAAAc,CAAA,WAAA8B,KAAA;QAAA;QAAA,CAAA5C,cAAA,GAAAc,CAAA,WAAS,MAAKqB,KAAA;QACzCiC,OAAA,EAASpC,IAAA,GAAO;MAClB;MACAqC,OAAA,EAAS,GAAGhB,kBAAA,CAAmBiB,MAAM;MAA4B;MAAA,CAAAtE,cAAA,GAAAc,CAAA,WAAA8B,KAAA;MAAA;MAAA,CAAA5C,cAAA,GAAAc,CAAA,WAAS;IAC5E;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAEAM,OAAA,CAAQC,GAAG,CAAC,wBAAwB;MAClC8D,cAAA,EAAgBlB,kBAAA,CAAmBiB,MAAM;MACzCR,KAAA,EAAOlB,KAAA;MACPZ,IAAA;MACAgC,UAAA,EAAYC,IAAA,CAAKC,IAAI,CAAC;MAAC;MAAA,CAAAlE,cAAA,GAAAc,CAAA,WAAA8B,KAAA;MAAA;MAAA,CAAA5C,cAAA,GAAAc,CAAA,WAAS,MAAKqB,KAAA;IACvC;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IAEAmB,OAAA,CAAAC,MAAM,CAACb,GAAG,CAACY,OAAA,CAAAE,QAAQ,CAACC,IAAI,EAAEH,OAAA,CAAAI,WAAW,CAACC,GAAG,EAAE,kCAAkC;MAC3EkB,KAAA,EAAOS,kBAAA,CAAmBiB,MAAM;MAChCR,KAAA,EAAOlB;IACT;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC4C,QAAA;EAE3B,EAAE,OAAO1C,KAAA,EAAO;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACdM,OAAA,CAAQW,KAAK,CAAC,wCAAwCA,KAAA;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACtDmB,OAAA,CAAAC,MAAM,CAACb,GAAG,CAACY,OAAA,CAAAE,QAAQ,CAAC4B,KAAK,EAAE9B,OAAA,CAAAI,WAAW,CAACC,GAAG,EAAE,qCAAqC;MAAEP;IAAM;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IAEzF,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBC,OAAA,EAAS;MACTC,KAAA,EAAO;MACPqD,OAAA,EAASrD,KAAA,YAAiBsD,KAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAc,CAAA,WAAQK,KAAA,CAAMkD,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAc,CAAA,WAAG;IACpD,GAAG;MAAEM,MAAA,EAAQ;IAAI;EACnB;AACF;AAEO,eAAef,KAAKE,OAAoB;EAAA;EAAAP,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7C,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACFM,OAAA,CAAQC,GAAG,CAAC;IAEZ;IACA,MAAMC,OAAA;IAAA;IAAA,CAAAV,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAS,OAAA,CAAAC,IAAI;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACQ,OAAA,EAASG,IAAA,EAAM;MAAA;MAAAb,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAClB,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACvBC,OAAA,EAAS;QACTC,KAAA,EAAO;MACT,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACnB;IAAA;IAAA;MAAApB,cAAA,GAAAc,CAAA;IAAA;IAEA;IAAAd,cAAA,GAAAE,CAAA;IACA,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBC,OAAA,EAAS;MACTC,KAAA,EAAO;MACPkD,OAAA,EAAS;IACX,GAAG;MAAEjD,MAAA,EAAQ;IAAI;EAEnB,EAAE,OAAOD,KAAA,EAAO;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACdM,OAAA,CAAQW,KAAK,CAAC,yCAAyCA,KAAA;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IAEvD,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBC,OAAA,EAAS;MACTC,KAAA,EAAO;MACPqD,OAAA,EAASrD,KAAA,YAAiBsD,KAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAc,CAAA,WAAQK,KAAA,CAAMkD,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAc,CAAA,WAAG;IACpD,GAAG;MAAEM,MAAA,EAAQ;IAAI;EACnB;AACF","ignoreList":[]}