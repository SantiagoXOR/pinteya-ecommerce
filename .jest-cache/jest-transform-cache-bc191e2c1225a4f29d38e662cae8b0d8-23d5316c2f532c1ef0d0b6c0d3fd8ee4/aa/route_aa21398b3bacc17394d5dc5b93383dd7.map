{"version":3,"names":["cov_2e9k2aj7gc","actualCoverage","s","GET","f","runtime","request","console","log","userId","sessionClaims","_config","auth","session","user","b","_server","NextResponse","json","success","authenticated","error","status","adminUserIds","process","env","ADMIN_USER_IDS","split","map","id","trim","isAllowlistedUser","includes","sessionInfo","adminUserIdsCount","length","publicMetadata","privateMetadata","roleChecks","sessionPublicRole","role","sessionPrivateRole","isAdminBySession","finalAdminAccess","response","timestamp","Date","toISOString","debugInfo","environment","NODE_ENV","hasAdminUserIds","adminUserIdsLength","JSON","stringify","details","Error","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\debug\\simple-auth-check\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n/**\r\n * API simple para verificar el estado de autenticaci√≥n sin dependencias complejas\r\n * GET /api/debug/simple-auth-check\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('üîç Simple Auth Check: Starting...');\r\n\r\n    // Verificar autenticaci√≥n b√°sica\r\n    const { userId, sessionClaims } = await auth();\r\n    \r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          authenticated: false,\r\n          error: 'No authenticated user'\r\n        },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Verificar allowlist temporal\r\n    const adminUserIds = process.env.ADMIN_USER_IDS?.split(',').map(id => id.trim()) || [];\r\n    const isAllowlistedUser = adminUserIds.includes(userId);\r\n\r\n    // Informaci√≥n b√°sica de la sesi√≥n\r\n    const sessionInfo = {\r\n      userId,\r\n      isAllowlistedUser,\r\n      adminUserIdsCount: adminUserIds.length,\r\n      sessionClaims: {\r\n        publicMetadata: sessionClaims?.publicMetadata,\r\n        privateMetadata: sessionClaims?.privateMetadata\r\n      }\r\n    };\r\n\r\n    // Verificaciones de rol\r\n    const roleChecks = {\r\n      sessionPublicRole: sessionClaims?.publicMetadata?.role,\r\n      sessionPrivateRole: sessionClaims?.privateMetadata?.role,\r\n      isAdminBySession: (\r\n        sessionClaims?.publicMetadata?.role === 'admin' ||\r\n        sessionClaims?.privateMetadata?.role === 'admin'\r\n      ),\r\n      isAllowlistedUser,\r\n      finalAdminAccess: (\r\n        sessionClaims?.publicMetadata?.role === 'admin' ||\r\n        sessionClaims?.privateMetadata?.role === 'admin' ||\r\n        isAllowlistedUser\r\n      )\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      timestamp: new Date().toISOString(),\r\n      authenticated: true,\r\n      sessionInfo,\r\n      roleChecks,\r\n      debugInfo: {\r\n        environment: process.env.NODE_ENV,\r\n        hasAdminUserIds: !!process.env.ADMIN_USER_IDS,\r\n        adminUserIdsLength: adminUserIds.length\r\n      }\r\n    };\r\n\r\n    console.log('‚úÖ Simple Auth Check: Success', JSON.stringify(response, null, 2));\r\n\r\n    return NextResponse.json(response, { status: 200 });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Simple Auth Check Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false,\r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}