{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useNotifications.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { EmailNotificationType } from '@/app/api/user/notifications/email/route';\r\n\r\ninterface NotificationOptions {\r\n  showToast?: boolean;\r\n  sendEmail?: boolean;\r\n  toastType?: 'success' | 'error' | 'info' | 'warning';\r\n  toastDuration?: number;\r\n}\r\n\r\ninterface EmailNotificationData {\r\n  type: EmailNotificationType;\r\n  oldValue?: string;\r\n  newValue?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface UseNotificationsReturn {\r\n  notifyProfileChange: (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifyAvatarChange: (\r\n    message: string,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifyAddressChange: (\r\n    message: string,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  notifySecurityAlert: (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options?: NotificationOptions\r\n  ) => Promise<void>;\r\n  sendEmailNotification: (data: EmailNotificationData) => Promise<boolean>;\r\n}\r\n\r\nexport function useNotifications(): UseNotificationsReturn {\r\n  \r\n  // Función para enviar notificación por email\r\n  const sendEmailNotification = useCallback(async (data: EmailNotificationData): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/user/notifications/email', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al enviar notificación por email');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.success;\r\n    } catch (error) {\r\n      console.error('Error al enviar notificación por email:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para mostrar toast notification\r\n  const showToast = useCallback((\r\n    message: string,\r\n    type: 'success' | 'error' | 'info' | 'warning' = 'success',\r\n    duration?: number\r\n  ) => {\r\n    const toastOptions = duration ? { duration } : undefined;\r\n    \r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message, toastOptions);\r\n        break;\r\n      case 'error':\r\n        toast.error(message, toastOptions);\r\n        break;\r\n      case 'info':\r\n        toast.info(message, toastOptions);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message, toastOptions);\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  // Notificar cambios de perfil\r\n  const notifyProfileChange = useCallback(async (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      sendEmail = false,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    // Mostrar toast notification\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n\r\n    // Enviar notificación por email si es necesario\r\n    if (sendEmail && emailData) {\r\n      try {\r\n        const emailSent = await sendEmailNotification(emailData);\r\n        if (emailSent) {\r\n          console.log('✅ Email notification sent for profile change');\r\n        } else {\r\n          console.warn('⚠️ Failed to send email notification for profile change');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error sending email notification:', error);\r\n      }\r\n    }\r\n  }, [showToast, sendEmailNotification]);\r\n\r\n  // Notificar cambios de avatar\r\n  const notifyAvatarChange = useCallback(async (\r\n    message: string,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // Notificar cambios de direcciones\r\n  const notifyAddressChange = useCallback(async (\r\n    message: string,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      toastType = 'success',\r\n      toastDuration,\r\n    } = options;\r\n\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n  }, [showToast]);\r\n\r\n  // Notificar alertas de seguridad\r\n  const notifySecurityAlert = useCallback(async (\r\n    message: string,\r\n    emailData?: EmailNotificationData,\r\n    options: NotificationOptions = {}\r\n  ) => {\r\n    const {\r\n      showToast: shouldShowToast = true,\r\n      sendEmail = true, // Por defecto enviar email para alertas de seguridad\r\n      toastType = 'warning',\r\n      toastDuration = 8000, // Duración más larga para alertas\r\n    } = options;\r\n\r\n    // Mostrar toast notification\r\n    if (shouldShowToast) {\r\n      showToast(message, toastType, toastDuration);\r\n    }\r\n\r\n    // Enviar notificación por email\r\n    if (sendEmail && emailData) {\r\n      try {\r\n        const emailSent = await sendEmailNotification(emailData);\r\n        if (emailSent) {\r\n          console.log('✅ Security alert email sent');\r\n        } else {\r\n          console.warn('⚠️ Failed to send security alert email');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error sending security alert email:', error);\r\n      }\r\n    }\r\n  }, [showToast, sendEmailNotification]);\r\n\r\n  return {\r\n    notifyProfileChange,\r\n    notifyAvatarChange,\r\n    notifyAddressChange,\r\n    notifySecurityAlert,\r\n    sendEmailNotification,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useNotifications","sendEmailNotification","useCallback","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","showToast","message","type","duration","toastOptions","undefined","toast","info","warning","notifyProfileChange","emailData","options","shouldShowToast","sendEmail","toastType","toastDuration","emailSent","log","warn","notifyAvatarChange","notifyAddressChange","notifySecurityAlert"],"mappings":"AAAA;;;;;+BA0CgBA;;;eAAAA;;;uBAxCY;wBACN;AAuCf,SAASA;IAEd,6CAA6C;IAC7C,MAAMC,wBAAwBC,IAAAA,kBAAW,EAAC,OAAOC;QAC/C,IAAI;YACF,MAAMC,WAAW,MAAMC,MAAM,iCAAiC;gBAC5DC,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMC,KAAKC,SAAS,CAACP;YACvB;YAEA,IAAI,CAACC,SAASO,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMC,SAAS,MAAMT,SAASU,IAAI;YAClC,OAAOD,OAAOE,OAAO;QACvB,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,2CAA2CA;YACzD,OAAO;QACT;IACF,GAAG,EAAE;IAEL,0CAA0C;IAC1C,MAAME,YAAYhB,IAAAA,kBAAW,EAAC,CAC5BiB,SACAC,OAAiD,SAAS,EAC1DC;QAEA,MAAMC,eAAeD,WAAW;YAAEA;QAAS,IAAIE;QAE/C,OAAQH;YACN,KAAK;gBACHI,aAAK,CAACT,OAAO,CAACI,SAASG;gBACvB;YACF,KAAK;gBACHE,aAAK,CAACR,KAAK,CAACG,SAASG;gBACrB;YACF,KAAK;gBACHE,aAAK,CAACC,IAAI,CAACN,SAASG;gBACpB;YACF,KAAK;gBACHE,aAAK,CAACE,OAAO,CAACP,SAASG;gBACvB;QACJ;IACF,GAAG,EAAE;IAEL,8BAA8B;IAC9B,MAAMK,sBAAsBzB,IAAAA,kBAAW,EAAC,OACtCiB,SACAS,WACAC,UAA+B,CAAC,CAAC;QAEjC,MAAM,EACJX,WAAWY,kBAAkB,IAAI,EACjCC,YAAY,KAAK,EACjBC,YAAY,SAAS,EACrBC,aAAa,EACd,GAAGJ;QAEJ,6BAA6B;QAC7B,IAAIC,iBAAiB;YACnBZ,UAAUC,SAASa,WAAWC;QAChC;QAEA,gDAAgD;QAChD,IAAIF,aAAaH,WAAW;YAC1B,IAAI;gBACF,MAAMM,YAAY,MAAMjC,sBAAsB2B;gBAC9C,IAAIM,WAAW;oBACbjB,QAAQkB,GAAG,CAAC;gBACd,OAAO;oBACLlB,QAAQmB,IAAI,CAAC;gBACf;YACF,EAAE,OAAOpB,OAAO;gBACdC,QAAQD,KAAK,CAAC,uCAAuCA;YACvD;QACF;IACF,GAAG;QAACE;QAAWjB;KAAsB;IAErC,8BAA8B;IAC9B,MAAMoC,qBAAqBnC,IAAAA,kBAAW,EAAC,OACrCiB,SACAU,UAA+B,CAAC,CAAC;QAEjC,MAAM,EACJX,WAAWY,kBAAkB,IAAI,EACjCE,YAAY,SAAS,EACrBC,aAAa,EACd,GAAGJ;QAEJ,IAAIC,iBAAiB;YACnBZ,UAAUC,SAASa,WAAWC;QAChC;IACF,GAAG;QAACf;KAAU;IAEd,mCAAmC;IACnC,MAAMoB,sBAAsBpC,IAAAA,kBAAW,EAAC,OACtCiB,SACAU,UAA+B,CAAC,CAAC;QAEjC,MAAM,EACJX,WAAWY,kBAAkB,IAAI,EACjCE,YAAY,SAAS,EACrBC,aAAa,EACd,GAAGJ;QAEJ,IAAIC,iBAAiB;YACnBZ,UAAUC,SAASa,WAAWC;QAChC;IACF,GAAG;QAACf;KAAU;IAEd,iCAAiC;IACjC,MAAMqB,sBAAsBrC,IAAAA,kBAAW,EAAC,OACtCiB,SACAS,WACAC,UAA+B,CAAC,CAAC;QAEjC,MAAM,EACJX,WAAWY,kBAAkB,IAAI,EACjCC,YAAY,IAAI,EAChBC,YAAY,SAAS,EACrBC,gBAAgB,IAAI,EACrB,GAAGJ;QAEJ,6BAA6B;QAC7B,IAAIC,iBAAiB;YACnBZ,UAAUC,SAASa,WAAWC;QAChC;QAEA,gCAAgC;QAChC,IAAIF,aAAaH,WAAW;YAC1B,IAAI;gBACF,MAAMM,YAAY,MAAMjC,sBAAsB2B;gBAC9C,IAAIM,WAAW;oBACbjB,QAAQkB,GAAG,CAAC;gBACd,OAAO;oBACLlB,QAAQmB,IAAI,CAAC;gBACf;YACF,EAAE,OAAOpB,OAAO;gBACdC,QAAQD,KAAK,CAAC,yCAAyCA;YACzD;QACF;IACF,GAAG;QAACE;QAAWjB;KAAsB;IAErC,OAAO;QACL0B;QACAU;QACAC;QACAC;QACAtC;IACF;AACF"}