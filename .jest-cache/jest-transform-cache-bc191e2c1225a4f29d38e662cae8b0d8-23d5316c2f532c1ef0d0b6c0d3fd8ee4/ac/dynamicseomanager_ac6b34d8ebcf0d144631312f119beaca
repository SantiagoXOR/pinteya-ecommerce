9ededc826df8eb10d08d3dc542ca3b34
// ===================================
// PINTEYA E-COMMERCE - DYNAMIC SEO MANAGER - ENHANCED
// Sistema de gestión dinámica de SEO para productos, categorías y páginas
// Versión mejorada con templates, cache y análisis automático
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DynamicSEOManager () {
        return DynamicSEOManager;
    },
    get EnhancedDynamicSEOManager () {
        return EnhancedDynamicSEOManager;
    },
    get SEO_TEMPLATES () {
        return SEO_TEMPLATES;
    },
    get SITE_CONFIG () {
        return SITE_CONFIG;
    },
    get dynamicSEOManager () {
        return dynamicSEOManager;
    },
    get enhancedDynamicSEOManager () {
        return enhancedDynamicSEOManager;
    }
});
const _dynamicseotext = require("./dynamic-seo-text");
const _logger = require("../enterprise/logger");
const _redis = require("../integrations/redis");
// ===================================
// CONFIGURACIÓN POR DEFECTO
// ===================================
const DEFAULT_SEO_CONFIG = {
    defaultLanguage: 'es',
    supportedLanguages: [
        'es',
        'en'
    ],
    baseUrl: process.env.NEXT_PUBLIC_APP_URL || 'https://pinteya.com',
    siteName: 'Pinteya E-commerce',
    defaultImage: '/images/og-default.jpg',
    twitterHandle: '@pinteya',
    enableAutoGeneration: true,
    enableAnalytics: true,
    cacheEnabled: true,
    cacheTTL: 3600
};
const DEFAULT_TEMPLATES = [
    {
        id: 'product-default',
        name: 'Producto por Defecto',
        type: 'product',
        titleTemplate: '{productName} - {categoryName} | {siteName}',
        descriptionTemplate: 'Compra {productName} en {siteName}. {productDescription} Precio: ${productPrice}. Envío gratis.',
        keywordsTemplate: [
            '{productName}',
            '{categoryName}',
            'comprar',
            'precio',
            '{siteName}'
        ],
        robotsDirective: 'index,follow',
        priority: 1,
        isActive: true,
        variables: [
            'productName',
            'categoryName',
            'productDescription',
            'productPrice',
            'siteName'
        ]
    },
    {
        id: 'category-default',
        name: 'Categoría por Defecto',
        type: 'category',
        titleTemplate: '{categoryName} - Productos de Calidad | {siteName}',
        descriptionTemplate: 'Descubre nuestra selección de {categoryName} en {siteName}. {productCount} productos disponibles con envío gratis.',
        keywordsTemplate: [
            '{categoryName}',
            'productos',
            'comprar',
            '{siteName}'
        ],
        robotsDirective: 'index,follow',
        priority: 1,
        isActive: true,
        variables: [
            'categoryName',
            'productCount',
            'siteName'
        ]
    },
    {
        id: 'page-default',
        name: 'Página por Defecto',
        type: 'page',
        titleTemplate: '{pageTitle} | {siteName}',
        descriptionTemplate: '{pageDescription}',
        keywordsTemplate: [
            '{pageKeywords}'
        ],
        robotsDirective: 'index,follow',
        priority: 1,
        isActive: true,
        variables: [
            'pageTitle',
            'pageDescription',
            'pageKeywords',
            'siteName'
        ]
    }
];
class EnhancedDynamicSEOManager {
    constructor(config){
        this.config = {
            ...DEFAULT_SEO_CONFIG,
            ...config
        };
        this.templates = new Map();
        this.cache = new Map();
        // Cargar templates por defecto
        DEFAULT_TEMPLATES.forEach((template)=>{
            this.templates.set(template.id, template);
        });
        // Inicializar Redis si está disponible
        this.initializeRedis();
        _logger.logger.info(_logger.LogLevel.INFO, 'Enhanced Dynamic SEO Manager initialized', {
            templatesCount: this.templates.size,
            cacheEnabled: this.config.cacheEnabled
        }, _logger.LogCategory.SEO);
    }
    static getInstance(config) {
        if (!EnhancedDynamicSEOManager.instance) {
            EnhancedDynamicSEOManager.instance = new EnhancedDynamicSEOManager(config);
        }
        return EnhancedDynamicSEOManager.instance;
    }
    async initializeRedis() {
        try {
            this.redis = await (0, _redis.getRedisClient)();
            _logger.logger.info(_logger.LogLevel.INFO, 'Redis initialized for SEO caching', {}, _logger.LogCategory.SEO);
        } catch (error) {
            _logger.logger.warn(_logger.LogLevel.WARN, 'Redis not available, using memory cache only', {}, _logger.LogCategory.SEO);
        }
    }
    // ===================================
    // GESTIÓN DE TEMPLATES
    // ===================================
    addTemplate(template) {
        this.templates.set(template.id, template);
        _logger.logger.info(_logger.LogLevel.INFO, 'SEO template added', {
            templateId: template.id,
            type: template.type,
            priority: template.priority
        }, _logger.LogCategory.SEO);
    }
    updateTemplate(templateId, updates) {
        const template = this.templates.get(templateId);
        if (!template) {
            _logger.logger.warn(_logger.LogLevel.WARN, 'SEO template not found for update', {
                templateId
            }, _logger.LogCategory.SEO);
            return false;
        }
        const updatedTemplate = {
            ...template,
            ...updates
        };
        this.templates.set(templateId, updatedTemplate);
        // Limpiar cache relacionado
        this.clearCacheByType(template.type);
        _logger.logger.info(_logger.LogLevel.INFO, 'SEO template updated', {
            templateId,
            changes: Object.keys(updates)
        }, _logger.LogCategory.SEO);
        return true;
    }
    getTemplatesByType(type) {
        return Array.from(this.templates.values()).filter((template)=>template.type === type && template.isActive).sort((a, b)=>b.priority - a.priority);
    }
    // ===================================
    // GENERACIÓN DE METADATA MEJORADA
    // ===================================
    async generateMetadata(type, data, options) {
        const cacheKey = this.generateCacheKey(type, data, options);
        // Verificar cache
        if (this.config.cacheEnabled) {
            const cached = await this.getCachedMetadata(cacheKey);
            if (cached) {
                return cached;
            }
        }
        try {
            // Seleccionar template
            const template = this.selectTemplate(type, data, options);
            if (!template) {
                throw new Error(`No template found for type: ${type}`);
            }
            // Generar metadata
            const metadata = await this.processTemplate(template, data, options);
            // Cachear resultado
            if (this.config.cacheEnabled) {
                await this.setCachedMetadata(cacheKey, metadata);
            }
            _logger.logger.info(_logger.LogLevel.INFO, 'SEO metadata generated', {
                type,
                templateId: template.id,
                cacheKey,
                titleLength: metadata.title.length,
                descriptionLength: metadata.description.length
            }, _logger.LogCategory.SEO);
            return metadata;
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to generate SEO metadata', error, _logger.LogCategory.SEO);
            // Fallback a metadata básica
            return this.generateFallbackMetadata(type, data);
        }
    }
    selectTemplate(type, data, options) {
        // Template personalizado
        if (options?.customTemplate) {
            return {
                id: 'custom',
                name: 'Custom Template',
                type,
                priority: 999,
                isActive: true,
                variables: [],
                titleTemplate: '',
                descriptionTemplate: '',
                keywordsTemplate: [],
                ...options.customTemplate
            };
        }
        // Template específico
        if (options?.templateId) {
            const template = this.templates.get(options.templateId);
            if (template && template.isActive) {
                return template;
            }
        }
        // Buscar template por tipo y condiciones
        const candidates = this.getTemplatesByType(type);
        for (const template of candidates){
            if (this.evaluateConditions(template, data)) {
                return template;
            }
        }
        return candidates[0] || null;
    }
    evaluateConditions(template, data) {
        if (!template.conditions || template.conditions.length === 0) {
            return true;
        }
        return template.conditions.every((condition)=>{
            const value = this.getNestedValue(data, condition.field);
            switch(condition.operator){
                case 'equals':
                    return value === condition.value;
                case 'contains':
                    return String(value).includes(String(condition.value));
                case 'startsWith':
                    return String(value).startsWith(String(condition.value));
                case 'endsWith':
                    return String(value).endsWith(String(condition.value));
                case 'greaterThan':
                    return Number(value) > Number(condition.value);
                case 'lessThan':
                    return Number(value) < Number(condition.value);
                default:
                    return true;
            }
        });
    }
    async processTemplate(template, data, options) {
        const language = options?.language || this.config.defaultLanguage;
        const processedData = this.enrichData(data, language);
        // Procesar title
        const title = this.processTemplateString(template.titleTemplate, processedData);
        // Procesar description
        const description = this.processTemplateString(template.descriptionTemplate, processedData);
        // Procesar keywords
        const keywords = template.keywordsTemplate.map((keyword)=>this.processTemplateString(keyword, processedData)).filter(Boolean);
        // Generar URL canónica
        const canonical = this.generateCanonicalUrl(data, language);
        // Generar structured data
        const structuredData = await this.generateStructuredData(template.type, processedData);
        return {
            title: this.optimizeTitle(title),
            description: this.optimizeDescription(description),
            keywords: this.optimizeKeywords(keywords),
            canonical,
            ogImage: data.image || this.config.defaultImage,
            ogType: this.getOGType(template.type),
            twitterCard: 'summary_large_image',
            structuredData: structuredData ? [
                structuredData
            ] : undefined,
            noindex: template.robotsDirective?.includes('noindex') || false,
            nofollow: template.robotsDirective?.includes('nofollow') || false
        };
    }
    processTemplateString(template, data) {
        return template.replace(/\{([^}]+)\}/g, (match, key)=>{
            const value = this.getNestedValue(data, key);
            return value !== undefined ? String(value) : match;
        });
    }
    enrichData(data, language) {
        return {
            ...data,
            siteName: this.config.siteName,
            baseUrl: this.config.baseUrl,
            language,
            currentDate: new Date().toISOString().split('T')[0],
            currentYear: new Date().getFullYear()
        };
    }
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key)=>current?.[key], obj);
    }
    // ===================================
    // OPTIMIZACIÓN DE METADATA
    // ===================================
    optimizeTitle(title) {
        // Límite recomendado: 60 caracteres
        if (title.length <= 60) {
            return title;
        }
        // Truncar en palabra completa
        const truncated = title.substring(0, 57);
        const lastSpace = truncated.lastIndexOf(' ');
        return lastSpace > 40 ? truncated.substring(0, lastSpace) + '...' : truncated + '...';
    }
    optimizeDescription(description) {
        // Límite recomendado: 160 caracteres
        if (description.length <= 160) {
            return description;
        }
        // Truncar en palabra completa
        const truncated = description.substring(0, 157);
        const lastSpace = truncated.lastIndexOf(' ');
        return lastSpace > 140 ? truncated.substring(0, lastSpace) + '...' : truncated + '...';
    }
    optimizeKeywords(keywords) {
        // Filtrar keywords vacías y duplicadas
        const unique = [
            ...new Set(keywords.filter(Boolean))
        ];
        // Límite recomendado: 10 keywords
        return unique.slice(0, 10);
    }
    // ===================================
    // UTILIDADES
    // ===================================
    generateCanonicalUrl(data, language) {
        const baseUrl = this.config.baseUrl;
        const path = data.path || data.slug || '';
        const langPrefix = language !== this.config.defaultLanguage ? `/${language}` : '';
        return `${baseUrl}${langPrefix}${path}`;
    }
    getOGType(type) {
        switch(type){
            case 'product':
                return 'product';
            case 'blog':
                return 'article';
            default:
                return 'website';
        }
    }
    async generateStructuredData(type, data) {
        switch(type){
            case 'product':
                return this.generateProductStructuredData(data);
            case 'category':
                return this.generateCategoryStructuredData(data);
            case 'blog':
                return this.generateArticleStructuredData(data);
            default:
                return this.generateWebsiteStructuredData(data);
        }
    }
    generateProductStructuredData(data) {
        return {
            '@context': 'https://schema.org',
            '@type': 'Product',
            name: data.productName || data.name,
            description: data.productDescription || data.description,
            image: data.image || this.config.defaultImage,
            brand: {
                '@type': 'Brand',
                name: this.config.siteName
            },
            offers: {
                '@type': 'Offer',
                price: data.productPrice || data.price,
                priceCurrency: 'ARS',
                availability: data.stock > 0 ? 'https://schema.org/InStock' : 'https://schema.org/OutOfStock',
                seller: {
                    '@type': 'Organization',
                    name: this.config.siteName
                }
            }
        };
    }
    generateCategoryStructuredData(data) {
        return {
            '@context': 'https://schema.org',
            '@type': 'CollectionPage',
            name: data.categoryName || data.name,
            description: data.categoryDescription || data.description,
            url: this.generateCanonicalUrl(data, this.config.defaultLanguage)
        };
    }
    generateArticleStructuredData(data) {
        return {
            '@context': 'https://schema.org',
            '@type': 'Article',
            headline: data.title,
            description: data.description,
            image: data.image || this.config.defaultImage,
            author: {
                '@type': 'Person',
                name: data.author || this.config.siteName
            },
            publisher: {
                '@type': 'Organization',
                name: this.config.siteName,
                logo: {
                    '@type': 'ImageObject',
                    url: `${this.config.baseUrl}/logo.png`
                }
            },
            datePublished: data.publishedAt || data.createdAt,
            dateModified: data.updatedAt || data.publishedAt || data.createdAt
        };
    }
    generateWebsiteStructuredData(data) {
        return {
            '@context': 'https://schema.org',
            '@type': 'WebSite',
            name: this.config.siteName,
            url: this.config.baseUrl,
            potentialAction: {
                '@type': 'SearchAction',
                target: `${this.config.baseUrl}/search?q={search_term_string}`,
                'query-input': 'required name=search_term_string'
            }
        };
    }
    generateFallbackMetadata(type, data) {
        const title = data.title || data.name || `${this.config.siteName}`;
        const description = data.description || `Descubre productos de calidad en ${this.config.siteName}`;
        return {
            title: this.optimizeTitle(title),
            description: this.optimizeDescription(description),
            keywords: [
                'ecommerce',
                'productos',
                'comprar'
            ],
            canonical: this.generateCanonicalUrl(data, this.config.defaultLanguage),
            ogImage: this.config.defaultImage,
            ogType: 'website',
            twitterCard: 'summary_large_image',
            noindex: false,
            nofollow: false
        };
    }
    // ===================================
    // GESTIÓN DE CACHE
    // ===================================
    generateCacheKey(type, data, options) {
        const keyData = {
            type,
            id: data.id || data.slug,
            templateId: options?.templateId,
            language: options?.language || this.config.defaultLanguage
        };
        return `seo:${JSON.stringify(keyData)}`;
    }
    async getCachedMetadata(cacheKey) {
        try {
            // Intentar Redis primero
            if (this.redis) {
                const cached = await this.redis.get(cacheKey);
                if (cached) {
                    return JSON.parse(cached);
                }
            }
            // Fallback a cache en memoria
            const memoryCached = this.cache.get(cacheKey);
            if (memoryCached) {
                const isExpired = Date.now() - memoryCached.timestamp > this.config.cacheTTL * 1000;
                if (!isExpired) {
                    return memoryCached.metadata;
                } else {
                    this.cache.delete(cacheKey);
                }
            }
            return null;
        } catch (error) {
            _logger.logger.warn(_logger.LogLevel.WARN, 'Failed to get cached SEO metadata', {
                cacheKey
            }, _logger.LogCategory.SEO);
            return null;
        }
    }
    async setCachedMetadata(cacheKey, metadata) {
        try {
            // Cachear en Redis si está disponible
            if (this.redis) {
                await this.redis.setex(cacheKey, this.config.cacheTTL, JSON.stringify(metadata));
            }
            // Cachear en memoria como backup
            this.cache.set(cacheKey, {
                metadata,
                timestamp: Date.now()
            });
        } catch (error) {
            _logger.logger.warn(_logger.LogLevel.WARN, 'Failed to cache SEO metadata', {
                cacheKey
            }, _logger.LogCategory.SEO);
        }
    }
    clearCacheByType(type) {
        const keysToDelete = Array.from(this.cache.keys()).filter((key)=>key.includes(`"type":"${type}"`));
        keysToDelete.forEach((key)=>this.cache.delete(key));
        _logger.logger.info(_logger.LogLevel.INFO, 'SEO cache cleared by type', {
            type,
            clearedKeys: keysToDelete.length
        }, _logger.LogCategory.SEO);
    }
    clearCache() {
        this.cache.clear();
        _logger.logger.info(_logger.LogLevel.INFO, 'SEO cache cleared completely', {}, _logger.LogCategory.SEO);
    }
    // ===================================
    // ANÁLISIS SEO
    // ===================================
    analyzeSEO(metadata) {
        const issues = [];
        const recommendations = [];
        // Analizar título
        if (!metadata.title) {
            issues.push({
                type: 'error',
                category: 'title',
                message: 'El título es requerido',
                impact: 'high',
                fix: 'Agregar un título descriptivo'
            });
        } else if (metadata.title.length > 60) {
            issues.push({
                type: 'warning',
                category: 'title',
                message: 'El título es demasiado largo (>60 caracteres)',
                impact: 'medium',
                fix: 'Reducir la longitud del título'
            });
        } else if (metadata.title.length < 30) {
            issues.push({
                type: 'warning',
                category: 'title',
                message: 'El título es demasiado corto (<30 caracteres)',
                impact: 'medium',
                fix: 'Expandir el título con más información relevante'
            });
        }
        // Analizar descripción
        if (!metadata.description) {
            issues.push({
                type: 'error',
                category: 'description',
                message: 'La descripción es requerida',
                impact: 'high',
                fix: 'Agregar una descripción informativa'
            });
        } else if (metadata.description.length > 160) {
            issues.push({
                type: 'warning',
                category: 'description',
                message: 'La descripción es demasiado larga (>160 caracteres)',
                impact: 'medium',
                fix: 'Reducir la longitud de la descripción'
            });
        } else if (metadata.description.length < 120) {
            issues.push({
                type: 'info',
                category: 'description',
                message: 'La descripción podría ser más descriptiva',
                impact: 'low',
                fix: 'Expandir la descripción con más detalles'
            });
        }
        // Analizar keywords
        if (!metadata.keywords || metadata.keywords.length === 0) {
            issues.push({
                type: 'warning',
                category: 'keywords',
                message: 'No hay palabras clave definidas',
                impact: 'medium',
                fix: 'Agregar palabras clave relevantes'
            });
        } else if (metadata.keywords.length > 10) {
            issues.push({
                type: 'warning',
                category: 'keywords',
                message: 'Demasiadas palabras clave (>10)',
                impact: 'low',
                fix: 'Reducir a las palabras clave más importantes'
            });
        }
        // Calcular score
        const totalIssues = issues.length;
        const criticalIssues = issues.filter((i)=>i.impact === 'high').length;
        const mediumIssues = issues.filter((i)=>i.impact === 'medium').length;
        let score = 100;
        score -= criticalIssues * 20;
        score -= mediumIssues * 10;
        score -= (totalIssues - criticalIssues - mediumIssues) * 5;
        score = Math.max(0, score);
        return {
            score,
            issues,
            recommendations,
            metrics: {
                titleLength: metadata.title?.length || 0,
                descriptionLength: metadata.description?.length || 0,
                keywordDensity: metadata.keywords?.length || 0,
                readabilityScore: 0,
                imageOptimization: metadata.ogImage ? 100 : 0
            }
        };
    }
    // ===================================
    // CONFIGURACIÓN Y ESTADÍSTICAS
    // ===================================
    updateConfig(updates) {
        this.config = {
            ...this.config,
            ...updates
        };
        _logger.logger.info(_logger.LogLevel.INFO, 'SEO configuration updated', {
            changes: Object.keys(updates)
        }, _logger.LogCategory.SEO);
    }
    getConfig() {
        return {
            ...this.config
        };
    }
    getStats() {
        const activeTemplatesByType = Array.from(this.templates.values()).filter((t)=>t.isActive).reduce((acc, template)=>{
            acc[template.type] = (acc[template.type] || 0) + 1;
            return acc;
        }, {});
        return {
            templatesCount: this.templates.size,
            cacheSize: this.cache.size,
            activeTemplatesByType
        };
    }
    destroy() {
        this.cache.clear();
        this.templates.clear();
        EnhancedDynamicSEOManager.instance = null;
    }
}
const enhancedDynamicSEOManager = EnhancedDynamicSEOManager.getInstance();
// Configuración base del sitio (mantenida para compatibilidad)
const SITE_CONFIG = {
    name: 'Pinteya E-commerce',
    description: 'Tu pinturería online especializada en productos de pintura, ferretería y corralón',
    url: 'https://pinteya-ecommerce.vercel.app',
    logo: '/images/logo/LOGO POSITIVO.svg',
    defaultImage: '/images/hero/hero-bg.jpg',
    locale: 'es_AR',
    currency: 'ARS',
    themeColor: '#ea5a17',
    twitterHandle: '@pinteya_ecommerce'
};
// Plantillas de SEO optimizadas (mantenidas para compatibilidad)
const SEO_TEMPLATES = {
    product: {
        title: (product)=>`${product.name} - ${product.brand} | Pinteya E-commerce`,
        description: async (product)=>await (0, _dynamicseotext.generateProductSEOText)(product),
        keywords: (product)=>[
                product.name.toLowerCase(),
                product.brand.toLowerCase(),
                product.category.toLowerCase(),
                ...product.subcategory ? [
                    product.subcategory.toLowerCase()
                ] : [],
                'pinturería online',
                'envío gratis',
                'argentina',
                'comprar online'
            ]
    },
    category: {
        title: (category)=>`${category.name} | Pinteya E-commerce - Tu Pinturería Online`,
        description: (category)=>`Descubre nuestra selección de ${category.name.toLowerCase()} en Pinteya. ${category.description} ${category.productCount} productos disponibles. Envío gratis en compras superiores a $50.000.`,
        keywords: (category)=>[
                category.name.toLowerCase(),
                'pinturería online',
                'ferretería',
                'corralón',
                'envío gratis',
                'argentina',
                'productos de calidad'
            ]
    },
    page: {
        title: (page)=>`${page.title} | Pinteya E-commerce`,
        description: (page)=>page.description,
        keywords: ()=>[
                'pinturería online',
                'pinturas',
                'ferretería',
                'corralón',
                'argentina'
            ]
    }
};
class DynamicSEOManager {
    static getInstance() {
        if (!DynamicSEOManager.instance) {
            DynamicSEOManager.instance = new DynamicSEOManager();
        }
        return DynamicSEOManager.instance;
    }
    // Generar metadata para productos
    generateProductMetadata(product) {
        const title = SEO_TEMPLATES.product.title(product);
        const description = SEO_TEMPLATES.product.description(product);
        const keywords = SEO_TEMPLATES.product.keywords(product);
        // Validar que product.slug existe antes de generar canonical
        if (!product.slug) {
            console.warn('Product slug is missing, using fallback');
        }
        const canonical = product.slug ? `${SITE_CONFIG.url}/products/${product.slug}` : SITE_CONFIG.url;
        const ogImage = product.images?.[0] || SITE_CONFIG.defaultImage;
        return {
            title,
            description,
            keywords,
            alternates: canonical ? {
                canonical
            } : undefined,
            openGraph: {
                title,
                description,
                url: canonical,
                siteName: SITE_CONFIG.name,
                images: [
                    {
                        url: ogImage,
                        width: 1200,
                        height: 630,
                        alt: product.name
                    }
                ],
                locale: SITE_CONFIG.locale,
                type: 'website'
            },
            twitter: {
                card: 'summary_large_image',
                title,
                description,
                images: [
                    ogImage
                ]
            },
            robots: {
                index: true,
                follow: true,
                googleBot: {
                    index: true,
                    follow: true,
                    'max-video-preview': -1,
                    'max-image-preview': 'large',
                    'max-snippet': -1
                }
            },
            other: {
                'product:price:amount': product.price.toString(),
                'product:price:currency': 'ARS',
                'product:availability': product.stock > 0 ? 'InStock' : 'OutOfStock',
                'product:condition': 'NewCondition',
                'product:brand': product.brand,
                'product:category': product.category
            }
        };
    }
    // Generar metadata para categorías
    generateCategoryMetadata(category) {
        const title = SEO_TEMPLATES.category.title(category);
        const description = SEO_TEMPLATES.category.description(category);
        const keywords = SEO_TEMPLATES.category.keywords(category);
        // Validar que category.slug existe antes de generar canonical
        if (!category.slug) {
            console.warn('Category slug is missing, using fallback');
        }
        const canonical = category.slug ? `${SITE_CONFIG.url}/categories/${category.slug}` : SITE_CONFIG.url;
        const ogImage = category.image || SITE_CONFIG.defaultImage;
        return {
            title,
            description,
            keywords,
            alternates: canonical ? {
                canonical
            } : undefined,
            openGraph: {
                title,
                description,
                url: canonical,
                siteName: SITE_CONFIG.name,
                images: [
                    {
                        url: ogImage,
                        width: 1200,
                        height: 630,
                        alt: `${category.name} - ${SITE_CONFIG.name}`
                    }
                ],
                locale: SITE_CONFIG.locale,
                type: 'website'
            },
            twitter: {
                card: 'summary_large_image',
                title,
                description,
                images: [
                    ogImage
                ]
            },
            robots: {
                index: true,
                follow: true,
                googleBot: {
                    index: true,
                    follow: true,
                    'max-video-preview': -1,
                    'max-image-preview': 'large',
                    'max-snippet': -1
                }
            },
            other: {
                'category:name': category.name,
                'category:product_count': category.productCount.toString()
            }
        };
    }
    // Generar metadata para páginas generales
    generatePageMetadata(page) {
        const title = SEO_TEMPLATES.page.title(page);
        const description = SEO_TEMPLATES.page.description(page);
        const keywords = SEO_TEMPLATES.page.keywords();
        // Validar que page.path existe antes de generar canonical
        if (!page.path) {
            console.warn('Page path is missing, using fallback');
        }
        const canonical = page.path ? `${SITE_CONFIG.url}${page.path}` : SITE_CONFIG.url;
        return {
            title,
            description,
            keywords,
            alternates: canonical ? {
                canonical
            } : undefined,
            openGraph: {
                title,
                description,
                url: canonical,
                siteName: SITE_CONFIG.name,
                images: [
                    {
                        url: SITE_CONFIG.defaultImage,
                        width: 1200,
                        height: 630,
                        alt: `${page.title} - ${SITE_CONFIG.name}`
                    }
                ],
                locale: SITE_CONFIG.locale,
                type: page.type === 'article' ? 'article' : 'website'
            },
            twitter: {
                card: 'summary_large_image',
                title,
                description,
                images: [
                    SITE_CONFIG.defaultImage
                ]
            },
            robots: {
                index: page.type !== 'checkout' && page.type !== 'profile',
                follow: true,
                googleBot: {
                    index: page.type !== 'checkout' && page.type !== 'profile',
                    follow: true,
                    'max-video-preview': -1,
                    'max-image-preview': 'large',
                    'max-snippet': -1
                }
            }
        };
    }
    // Optimizar título para SEO
    optimizeTitle(title, maxLength = 60) {
        if (title.length <= maxLength) {
            return title;
        }
        // Truncar en la última palabra completa
        const truncated = title.slice(0, maxLength);
        const lastSpace = truncated.lastIndexOf(' ');
        return lastSpace > 0 ? truncated.slice(0, lastSpace) + '...' : truncated + '...';
    }
    // Optimizar descripción para SEO
    optimizeDescription(description, maxLength = 160) {
        if (description.length <= maxLength) {
            return description;
        }
        // Truncar en la última oración completa
        const truncated = description.slice(0, maxLength);
        const lastPeriod = truncated.lastIndexOf('.');
        const lastSpace = truncated.lastIndexOf(' ');
        const cutPoint = lastPeriod > 0 ? lastPeriod + 1 : lastSpace;
        return cutPoint > 0 ? truncated.slice(0, cutPoint) + '...' : truncated + '...';
    }
    // Generar slug SEO-friendly
    generateSlug(text) {
        return text.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '') // Remover acentos
        .replace(/[^a-z0-9\s-]/g, '') // Solo letras, números, espacios y guiones
        .replace(/\s+/g, '-') // Espacios a guiones
        .replace(/-+/g, '-') // Múltiples guiones a uno
        .replace(/^-|-$/g, '') // Remover guiones al inicio y final
        ;
    }
    // Extraer keywords relevantes del texto
    extractKeywords(text, maxKeywords = 10) {
        const stopWords = new Set([
            'el',
            'la',
            'de',
            'que',
            'y',
            'a',
            'en',
            'un',
            'es',
            'se',
            'no',
            'te',
            'lo',
            'le',
            'da',
            'su',
            'por',
            'son',
            'con',
            'para',
            'al',
            'del',
            'los',
            'las',
            'una',
            'como',
            'pero',
            'sus',
            'le',
            'ya',
            'o',
            'porque',
            'cuando',
            'muy',
            'sin',
            'sobre',
            'también',
            'me',
            'hasta',
            'donde',
            'quien',
            'desde',
            'todos',
            'durante',
            'todo',
            'esto',
            'eso'
        ]);
        const words = text.toLowerCase().replace(/[^\w\s]/g, ' ').split(/\s+/).filter((word)=>word.length > 3 && !stopWords.has(word));
        // Contar frecuencia de palabras
        const wordCount = words.reduce((acc, word)=>{
            acc[word] = (acc[word] || 0) + 1;
            return acc;
        }, {});
        // Ordenar por frecuencia y tomar las más relevantes
        return Object.entries(wordCount).sort(([, a], [, b])=>b - a).slice(0, maxKeywords).map(([word])=>word);
    }
    // Validar configuración SEO
    validateSEOConfig(config) {
        const errors = [];
        if (!config.title || config.title.length === 0) {
            errors.push('El título es requerido');
        } else if (config.title.length > 60) {
            errors.push('El título no debe exceder 60 caracteres');
        }
        if (!config.description || config.description.length === 0) {
            errors.push('La descripción es requerida');
        } else if (config.description.length > 160) {
            errors.push('La descripción no debe exceder 160 caracteres');
        }
        if (config.keywords && config.keywords.length === 0) {
            errors.push('Se recomienda incluir al menos 3 keywords');
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}
const dynamicSEOManager = DynamicSEOManager.getInstance();

//# sourceMappingURL=data:application/json;base64,