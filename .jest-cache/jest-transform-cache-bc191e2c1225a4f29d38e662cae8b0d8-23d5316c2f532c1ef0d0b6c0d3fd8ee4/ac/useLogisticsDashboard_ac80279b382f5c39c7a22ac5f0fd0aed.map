{"version":3,"names":["useCarrierPerformance","cov_2kpueguiif","f","s","useLogisticsAlerts","useLogisticsDashboard","useLogisticsRealTimeMetrics","QUERY_KEY","REFETCH_INTERVAL","STALE_TIME","fetchLogisticsDashboard","response","fetch","method","headers","cache","ok","b","errorData","json","catch","Error","error","status","statusText","data","options","queryClient","_reactquery","useQueryClient","isRefreshing","setIsRefreshing","_react","useState","isLoading","refetch","queryRefetch","isRefetching","useQuery","queryKey","queryFn","enabled","refetchInterval","staleTime","retry","retryDelay","attemptIndex","Math","min","onError","useCallback","invalidateCache","invalidateQueries","updateCache","updater","setQueryData","derivedMetrics","active_shipments_rate","stats","total_shipments","in_transit_shipments","pending_shipments","exception_rate","exception_shipments","average_shipping_cost","total_shipping_cost","shipments_trend","performance_metrics","length","last7Days","slice","previous7Days","last7Total","reduce","acc","day","shipments_count","previous7Total","best_performing_courier","carrier_performance","best","current","on_time_rate","criticalAlerts","alerts","filter","alert","type","warningAlerts","systemHealth","on_time_delivery_rate","score","round","active_couriers","metrics","recentShipments","recent_shipments","sortedCarriers","sort","a","topPerformer","worstPerformer","carriers","averageOnTimeRate","carrier","unreadAlerts","is_read","criticalCount","warningCount","totalUnread"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useLogisticsDashboard.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: LOGISTICS DASHBOARD ENTERPRISE\r\n// Descripción: Hook para dashboard de logística con métricas tiempo real\r\n// Basado en: Patrones WooCommerce Activity Panels + TanStack Query\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useState, useCallback } from 'react';\r\nimport { \r\n  LogisticsDashboardResponse,\r\n  UseLogisticsDashboardReturn \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN DE QUERY\r\n// =====================================================\r\n\r\nconst QUERY_KEY = ['admin', 'logistics', 'dashboard'];\r\nconst REFETCH_INTERVAL = 30000; // 30 segundos\r\nconst STALE_TIME = 20000; // 20 segundos\r\n\r\n// =====================================================\r\n// FUNCIÓN DE FETCH\r\n// =====================================================\r\n\r\nasync function fetchLogisticsDashboard(): Promise<LogisticsDashboardResponse['data']> {\r\n  const response = await fetch('/api/admin/logistics/dashboard', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    cache: 'no-store'\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const data = await response.json();\r\n  return data.data;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useLogisticsDashboard(options?: {\r\n  enabled?: boolean;\r\n  refetchInterval?: number;\r\n  onError?: (error: Error) => void;\r\n}): UseLogisticsDashboardReturn {\r\n  const queryClient = useQueryClient();\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  \r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch: queryRefetch,\r\n    isRefetching\r\n  } = useQuery({\r\n    queryKey: QUERY_KEY,\r\n    queryFn: fetchLogisticsDashboard,\r\n    enabled: options?.enabled ?? true,\r\n    refetchInterval: options?.refetchInterval ?? REFETCH_INTERVAL,\r\n    staleTime: STALE_TIME,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n    onError: options?.onError\r\n  });\r\n  \r\n  // =====================================================\r\n  // FUNCIONES AUXILIARES\r\n  // =====================================================\r\n  \r\n  const refetch = useCallback(async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await queryRefetch();\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  }, [queryRefetch]);\r\n  \r\n  const invalidateCache = useCallback(() => {\r\n    queryClient.invalidateQueries({ queryKey: QUERY_KEY });\r\n  }, [queryClient]);\r\n  \r\n  const updateCache = useCallback((updater: (oldData: LogisticsDashboardResponse['data'] | undefined) => LogisticsDashboardResponse['data']) => {\r\n    queryClient.setQueryData(QUERY_KEY, updater);\r\n  }, [queryClient]);\r\n  \r\n  // =====================================================\r\n  // MÉTRICAS DERIVADAS\r\n  // =====================================================\r\n  \r\n  const derivedMetrics = data ? {\r\n    // Tasa de envíos activos\r\n    active_shipments_rate: data.stats.total_shipments > 0 \r\n      ? ((data.stats.in_transit_shipments + data.stats.pending_shipments) / data.stats.total_shipments) * 100 \r\n      : 0,\r\n    \r\n    // Tasa de excepciones\r\n    exception_rate: data.stats.total_shipments > 0 \r\n      ? (data.stats.exception_shipments / data.stats.total_shipments) * 100 \r\n      : 0,\r\n    \r\n    // Costo promedio por envío\r\n    average_shipping_cost: data.stats.total_shipments > 0 \r\n      ? data.stats.total_shipping_cost / data.stats.total_shipments \r\n      : 0,\r\n    \r\n    // Tendencia de envíos (últimos 7 días vs anteriores)\r\n    shipments_trend: data.performance_metrics.length >= 14 ? (() => {\r\n      const last7Days = data.performance_metrics.slice(-7);\r\n      const previous7Days = data.performance_metrics.slice(-14, -7);\r\n      \r\n      const last7Total = last7Days.reduce((acc, day) => acc + day.shipments_count, 0);\r\n      const previous7Total = previous7Days.reduce((acc, day) => acc + day.shipments_count, 0);\r\n      \r\n      return previous7Total > 0 \r\n        ? ((last7Total - previous7Total) / previous7Total) * 100 \r\n        : 0;\r\n    })() : 0,\r\n    \r\n    // Mejor courier por performance\r\n    best_performing_courier: data.carrier_performance.length > 0 \r\n      ? data.carrier_performance.reduce((best, current) => \r\n          current.on_time_rate > best.on_time_rate ? current : best\r\n        )\r\n      : null\r\n  } : null;\r\n  \r\n  // =====================================================\r\n  // ALERTAS CRÍTICAS\r\n  // =====================================================\r\n  \r\n  const criticalAlerts = data?.alerts.filter(alert => alert.type === 'error') || [];\r\n  const warningAlerts = data?.alerts.filter(alert => alert.type === 'warning') || [];\r\n  \r\n  // =====================================================\r\n  // ESTADO DE SALUD DEL SISTEMA\r\n  // =====================================================\r\n  \r\n  const systemHealth = data ? {\r\n    status: (() => {\r\n      if (criticalAlerts.length > 0) {return 'critical';}\r\n      if (warningAlerts.length > 3) {return 'warning';}\r\n      if (data.stats.on_time_delivery_rate < 80) {return 'warning';}\r\n      return 'healthy';\r\n    })(),\r\n    score: Math.round(\r\n      (data.stats.on_time_delivery_rate * 0.4) + \r\n      ((100 - (derivedMetrics?.exception_rate || 0)) * 0.3) +\r\n      (data.stats.active_couriers > 0 ? 20 : 0) +\r\n      (criticalAlerts.length === 0 ? 10 : 0)\r\n    )\r\n  } : null;\r\n  \r\n  return {\r\n    // Datos principales\r\n    data,\r\n    isLoading: isLoading || isRefreshing,\r\n    error: error as Error | null,\r\n    refetch,\r\n    \r\n    // Estados adicionales\r\n    isRefetching: isRefetching || isRefreshing,\r\n    \r\n    // Funciones de cache\r\n    invalidateCache,\r\n    updateCache,\r\n    \r\n    // Métricas derivadas\r\n    derivedMetrics,\r\n    \r\n    // Alertas categorizadas\r\n    criticalAlerts,\r\n    warningAlerts,\r\n    \r\n    // Estado de salud\r\n    systemHealth\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA MÉTRICAS EN TIEMPO REAL\r\n// =====================================================\r\n\r\nexport function useLogisticsRealTimeMetrics() {\r\n  const { data, refetch } = useLogisticsDashboard({\r\n    refetchInterval: 10000 // 10 segundos para tiempo real\r\n  });\r\n  \r\n  return {\r\n    metrics: data?.stats,\r\n    recentShipments: data?.recent_shipments,\r\n    alerts: data?.alerts,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA PERFORMANCE DE COURIERS\r\n// =====================================================\r\n\r\nexport function useCarrierPerformance() {\r\n  const { data } = useLogisticsDashboard();\r\n  \r\n  const sortedCarriers = data?.carrier_performance.sort((a, b) => \r\n    b.on_time_rate - a.on_time_rate\r\n  ) || [];\r\n  \r\n  const topPerformer = sortedCarriers[0];\r\n  const worstPerformer = sortedCarriers[sortedCarriers.length - 1];\r\n  \r\n  return {\r\n    carriers: sortedCarriers,\r\n    topPerformer,\r\n    worstPerformer,\r\n    averageOnTimeRate: sortedCarriers.length > 0 \r\n      ? sortedCarriers.reduce((acc, carrier) => acc + carrier.on_time_rate, 0) / sortedCarriers.length \r\n      : 0\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA ALERTAS\r\n// =====================================================\r\n\r\nexport function useLogisticsAlerts() {\r\n  const { data, refetch } = useLogisticsDashboard();\r\n  \r\n  const unreadAlerts = data?.alerts.filter(alert => !alert.is_read) || [];\r\n  const criticalCount = unreadAlerts.filter(alert => alert.type === 'error').length;\r\n  const warningCount = unreadAlerts.filter(alert => alert.type === 'warning').length;\r\n  \r\n  return {\r\n    alerts: data?.alerts || [],\r\n    unreadAlerts,\r\n    criticalCount,\r\n    warningCount,\r\n    totalUnread: unreadAlerts.length,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// TIPOS EXTENDIDOS PARA EL HOOK\r\n// =====================================================\r\n\r\nexport interface UseLogisticsDashboardExtendedReturn extends UseLogisticsDashboardReturn {\r\n  isRefetching: boolean;\r\n  invalidateCache: () => void;\r\n  updateCache: (updater: (oldData: LogisticsDashboardResponse['data'] | undefined) => LogisticsDashboardResponse['data']) => void;\r\n  derivedMetrics: {\r\n    active_shipments_rate: number;\r\n    exception_rate: number;\r\n    average_shipping_cost: number;\r\n    shipments_trend: number;\r\n    best_performing_courier: any;\r\n  } | null;\r\n  criticalAlerts: any[];\r\n  warningAlerts: any[];\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'critical';\r\n    score: number;\r\n  } | null;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}