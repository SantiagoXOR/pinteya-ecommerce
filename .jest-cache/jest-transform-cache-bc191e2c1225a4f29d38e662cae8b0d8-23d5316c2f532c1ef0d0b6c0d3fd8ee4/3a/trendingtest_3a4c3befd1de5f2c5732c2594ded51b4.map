{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\trending.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TEST API TRENDING SEARCHES\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { GET } from '@/app/api/search/trending/route';\r\n\r\n// Mock Supabase\r\nconst mockSupabaseClient = {\r\n  from: jest.fn(() => ({\r\n    select: jest.fn(() => ({\r\n      eq: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          gte: jest.fn(() => ({\r\n            not: jest.fn(() => ({\r\n              data: [],\r\n              error: null,\r\n            })),\r\n          })),\r\n        })),\r\n      })),\r\n    })),\r\n  })),\r\n};\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn(() => mockSupabaseClient),\r\n}));\r\n\r\ndescribe('API /api/search/trending', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should return trending searches successfully', async () => {\r\n    const request = new NextRequest('http://localhost:3000/api/search/trending');\r\n    \r\n    const response = await GET(request);\r\n    const data = await response.json();\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(data.success).toBe(true);\r\n    expect(data.data).toBeDefined();\r\n    expect(data.data.trending).toBeDefined();\r\n    expect(Array.isArray(data.data.trending)).toBe(true);\r\n    expect(data.data.trending.length).toBeGreaterThan(0);\r\n  });\r\n\r\n  it('should return limited results when limit parameter is provided', async () => {\r\n    const request = new NextRequest('http://localhost:3000/api/search/trending?limit=3');\r\n    \r\n    const response = await GET(request);\r\n    const data = await response.json();\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(data.data.trending.length).toBeLessThanOrEqual(3);\r\n  });\r\n\r\n  it('should return trending searches with correct structure', async () => {\r\n    const request = new NextRequest('http://localhost:3000/api/search/trending');\r\n    \r\n    const response = await GET(request);\r\n    const data = await response.json();\r\n\r\n    expect(data.data.trending[0]).toHaveProperty('id');\r\n    expect(data.data.trending[0]).toHaveProperty('query');\r\n    expect(data.data.trending[0]).toHaveProperty('count');\r\n    expect(data.data.trending[0]).toHaveProperty('href');\r\n    expect(data.data.trending[0]).toHaveProperty('type');\r\n    expect(data.data.trending[0].type).toBe('trending');\r\n  });\r\n\r\n  it('should handle category filtering', async () => {\r\n    const request = new NextRequest('http://localhost:3000/api/search/trending?category=pinturas');\r\n    \r\n    const response = await GET(request);\r\n    const data = await response.json();\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(data.success).toBe(true);\r\n    // Should still return results (fallback data)\r\n    expect(data.data.trending.length).toBeGreaterThan(0);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","getSupabaseClient","fn","mockSupabaseClient","from","select","eq","gte","not","data","error","describe","beforeEach","clearAllMocks","it","request","NextRequest","response","GET","json","expect","status","toBe","success","toBeDefined","trending","Array","isArray","length","toBeGreaterThan","toBeLessThanOrEqual","toHaveProperty","type"],"mappings":"AAAA,sCAAsC;AACtC,kDAAkD;AAClD,sCAAsC;;AAuBtCA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,mBAAmBF,KAAKG,EAAE,CAAC,IAAMC;IACnC,CAAA;;;;wBAvB4B;uBACR;AAEpB,gBAAgB;AAChB,MAAMA,qBAAqB;IACzBC,MAAML,KAAKG,EAAE,CAAC,IAAO,CAAA;YACnBG,QAAQN,KAAKG,EAAE,CAAC,IAAO,CAAA;oBACrBI,IAAIP,KAAKG,EAAE,CAAC,IAAO,CAAA;4BACjBI,IAAIP,KAAKG,EAAE,CAAC,IAAO,CAAA;oCACjBK,KAAKR,KAAKG,EAAE,CAAC,IAAO,CAAA;4CAClBM,KAAKT,KAAKG,EAAE,CAAC,IAAO,CAAA;oDAClBO,MAAM,EAAE;oDACRC,OAAO;gDACT,CAAA;wCACF,CAAA;gCACF,CAAA;wBACF,CAAA;gBACF,CAAA;QACF,CAAA;AACF;AAMAC,SAAS,4BAA4B;IACnCC,WAAW;QACTb,KAAKc,aAAa;IACpB;IAEAC,GAAG,gDAAgD;QACjD,MAAMC,UAAU,IAAIC,mBAAW,CAAC;QAEhC,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMN,OAAO,MAAMQ,SAASE,IAAI;QAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOX,KAAKc,OAAO,EAAED,IAAI,CAAC;QAC1BF,OAAOX,KAAKA,IAAI,EAAEe,WAAW;QAC7BJ,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,EAAED,WAAW;QACtCJ,OAAOM,MAAMC,OAAO,CAAClB,KAAKA,IAAI,CAACgB,QAAQ,GAAGH,IAAI,CAAC;QAC/CF,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAACG,MAAM,EAAEC,eAAe,CAAC;IACpD;IAEAf,GAAG,kEAAkE;QACnE,MAAMC,UAAU,IAAIC,mBAAW,CAAC;QAEhC,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMN,OAAO,MAAMQ,SAASE,IAAI;QAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAACG,MAAM,EAAEE,mBAAmB,CAAC;IACxD;IAEAhB,GAAG,0DAA0D;QAC3D,MAAMC,UAAU,IAAIC,mBAAW,CAAC;QAEhC,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMN,OAAO,MAAMQ,SAASE,IAAI;QAEhCC,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,EAAEM,cAAc,CAAC;QAC7CX,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,EAAEM,cAAc,CAAC;QAC7CX,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,EAAEM,cAAc,CAAC;QAC7CX,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,EAAEM,cAAc,CAAC;QAC7CX,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,EAAEM,cAAc,CAAC;QAC7CX,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAAC,EAAE,CAACO,IAAI,EAAEV,IAAI,CAAC;IAC1C;IAEAR,GAAG,oCAAoC;QACrC,MAAMC,UAAU,IAAIC,mBAAW,CAAC;QAEhC,MAAMC,WAAW,MAAMC,IAAAA,UAAG,EAACH;QAC3B,MAAMN,OAAO,MAAMQ,SAASE,IAAI;QAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOX,KAAKc,OAAO,EAAED,IAAI,CAAC;QAC1B,8CAA8C;QAC9CF,OAAOX,KAAKA,IAAI,CAACgB,QAAQ,CAACG,MAAM,EAAEC,eAAe,CAAC;IACpD;AACF"}