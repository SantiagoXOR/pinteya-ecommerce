8e04b94b3f610ec5d81a33adce88466f
// ===================================
// PINTEYA E-COMMERCE - ADVANCED CACHE STRATEGY MANAGER
// ===================================
"use strict";

/* istanbul ignore next */
function cov_2ps24mzjhd() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\advanced-cache-strategy-manager.ts";
  var hash = "3b430f1f944294d46cc955209c1cf8997bf89d25";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\advanced-cache-strategy-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 44
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 33
        }
      },
      "10": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "11": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 49
        }
      },
      "12": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 81
        }
      },
      "13": {
        start: {
          line: 37,
          column: 15
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "14": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "15": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "16": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 53
        }
      },
      "17": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "18": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 51
        }
      },
      "19": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 47
        }
      },
      "20": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 41
        }
      },
      "21": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 43
        }
      },
      "22": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "23": {
        start: {
          line: 48,
          column: 34
        },
        end: {
          line: 154,
          column: 1
        }
      },
      "24": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 33
        }
      },
      "25": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 36
        }
      },
      "26": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 50
        }
      },
      "27": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "28": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 45
        }
      },
      "29": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "30": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 87
        }
      },
      "31": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "32": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "33": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 58
        }
      },
      "34": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "35": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 113
        }
      },
      "36": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 29
        }
      },
      "37": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "38": {
        start: {
          line: 182,
          column: 38
        },
        end: {
          line: 182,
          column: 86
        }
      },
      "39": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 95
        }
      },
      "40": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 68
        }
      },
      "41": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 26
        }
      },
      "42": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 69
        }
      },
      "43": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "44": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 126
        }
      },
      "45": {
        start: {
          line: 194,
          column: 39
        },
        end: {
          line: 197,
          column: 17
        }
      },
      "46": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 83
        }
      },
      "47": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 24
        }
      },
      "48": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "49": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 61
        }
      },
      "50": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 63
        }
      },
      "51": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 71
        }
      },
      "52": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 58
        }
      },
      "53": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 68
        }
      },
      "54": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 51
        }
      },
      "55": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 33
        }
      },
      "56": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 61
        }
      },
      "57": {
        start: {
          line: 229,
          column: 23
        },
        end: {
          line: 229,
          column: 51
        }
      },
      "58": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "59": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 26
        }
      },
      "60": {
        start: {
          line: 234,
          column: 21
        },
        end: {
          line: 234,
          column: 36
        }
      },
      "61": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 49
        }
      },
      "62": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 20
        }
      },
      "63": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "64": {
        start: {
          line: 243,
          column: 25
        },
        end: {
          line: 243,
          column: 40
        }
      },
      "65": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 53
        }
      },
      "66": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 24
        }
      },
      "67": {
        start: {
          line: 248,
          column: 27
        },
        end: {
          line: 248,
          column: 55
        }
      },
      "68": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "69": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 106
        }
      },
      "70": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 30
        }
      },
      "71": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 24
        }
      },
      "72": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 51
        }
      },
      "73": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "74": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 62
        }
      },
      "75": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "76": {
        start: {
          line: 266,
          column: 21
        },
        end: {
          line: 266,
          column: 36
        }
      },
      "77": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 49
        }
      },
      "78": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 20
        }
      },
      "79": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 51
        }
      },
      "80": {
        start: {
          line: 274,
          column: 31
        },
        end: {
          line: 274,
          column: 40
        }
      },
      "81": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "82": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 286,
          column: 14
        }
      },
      "83": {
        start: {
          line: 278,
          column: 45
        },
        end: {
          line: 281,
          column: 21
        }
      },
      "84": {
        start: {
          line: 282,
          column: 45
        },
        end: {
          line: 285,
          column: 21
        }
      },
      "85": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 290,
          column: 13
        }
      },
      "86": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 64
        }
      },
      "87": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 31
        }
      },
      "88": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 299,
          column: 23
        }
      },
      "89": {
        start: {
          line: 295,
          column: 31
        },
        end: {
          line: 295,
          column: 49
        }
      },
      "90": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 298,
          column: 17
        }
      },
      "91": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 34
        }
      },
      "92": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 304,
          column: 23
        }
      },
      "93": {
        start: {
          line: 301,
          column: 29
        },
        end: {
          line: 301,
          column: 49
        }
      },
      "94": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 57
        }
      },
      "95": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 28
        }
      },
      "96": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 24
        }
      },
      "97": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 43
        }
      },
      "98": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "99": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "100": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 48
        }
      },
      "101": {
        start: {
          line: 316,
          column: 19
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "102": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 44
        }
      },
      "103": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 59
        }
      },
      "104": {
        start: {
          line: 322,
          column: 30
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "105": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 74
        }
      },
      "106": {
        start: {
          line: 331,
          column: 23
        },
        end: {
          line: 331,
          column: 51
        }
      },
      "107": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "108": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 81
        }
      },
      "109": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 22
        }
      },
      "110": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "111": {
        start: {
          line: 342,
          column: 37
        },
        end: {
          line: 342,
          column: 96
        }
      },
      "112": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 345,
          column: 13
        }
      },
      "113": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 40
        }
      },
      "114": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 61
        }
      },
      "115": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 105
        }
      },
      "116": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 24
        }
      },
      "117": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "118": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 363,
          column: 15
        }
      },
      "119": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 103
        }
      },
      "120": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "121": {
        start: {
          line: 372,
          column: 25
        },
        end: {
          line: 372,
          column: 40
        }
      },
      "122": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 53
        }
      },
      "123": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 99
        }
      },
      "124": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 100
        }
      },
      "125": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "126": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 26
        }
      },
      "127": {
        start: {
          line: 385,
          column: 31
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "128": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "129": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "130": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "131": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 391,
          column: 61
        }
      },
      "132": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 30
        }
      },
      "133": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 416,
          column: 9
        }
      },
      "134": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 50
        }
      },
      "135": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 22
        }
      },
      "136": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 54
        }
      },
      "137": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 407,
          column: 22
        }
      },
      "138": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 46
        }
      },
      "139": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 22
        }
      },
      "140": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 48
        }
      },
      "141": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 22
        }
      },
      "142": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 29
        }
      },
      "143": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "144": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 56
        }
      },
      "145": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 54
        }
      },
      "146": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 54
        }
      },
      "147": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 96
        }
      },
      "148": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 98
        }
      },
      "149": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 29
        }
      },
      "150": {
        start: {
          line: 435,
          column: 29
        },
        end: {
          line: 435,
          column: 51
        }
      },
      "151": {
        start: {
          line: 436,
          column: 25
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "152": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 33
        }
      },
      "153": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "154": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 28
        }
      },
      "155": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 30
        }
      },
      "156": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 72
        }
      },
      "157": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 133
        }
      },
      "158": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 42
        }
      },
      "159": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 49
        }
      },
      "160": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 54
        }
      },
      "161": {
        start: {
          line: 465,
          column: 23
        },
        end: {
          line: 465,
          column: 25
        }
      },
      "162": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 468,
          column: 11
        }
      },
      "163": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 39
        }
      },
      "164": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 22
        }
      },
      "165": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 42
        }
      },
      "166": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 89
        }
      },
      "167": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 485,
          column: 9
        }
      },
      "168": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 86
        }
      },
      "169": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 108
        }
      },
      "170": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 103
        }
      },
      "171": {
        start: {
          line: 490,
          column: 25
        },
        end: {
          line: 490,
          column: 58
        }
      },
      "172": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 493,
          column: 9
        }
      },
      "173": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 19
        }
      },
      "174": {
        start: {
          line: 494,
          column: 31
        },
        end: {
          line: 504,
          column: 10
        }
      },
      "175": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 503,
          column: 13
        }
      },
      "176": {
        start: {
          line: 496,
          column: 32
        },
        end: {
          line: 496,
          column: 47
        }
      },
      "177": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 500,
          column: 17
        }
      },
      "178": {
        start: {
          line: 498,
          column: 20
        },
        end: {
          line: 498,
          column: 67
        }
      },
      "179": {
        start: {
          line: 499,
          column: 20
        },
        end: {
          line: 499,
          column: 102
        }
      },
      "180": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 108
        }
      },
      "181": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 49
        }
      },
      "182": {
        start: {
          line: 508,
          column: 37
        },
        end: {
          line: 508,
          column: 79
        }
      },
      "183": {
        start: {
          line: 510,
          column: 4
        },
        end: {
          line: 517,
          column: 6
        }
      },
      "184": {
        start: {
          line: 511,
          column: 23
        },
        end: {
          line: 511,
          column: 39
        }
      },
      "185": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 515,
          column: 10
        }
      },
      "186": {
        start: {
          line: 513,
          column: 24
        },
        end: {
          line: 513,
          column: 104
        }
      },
      "187": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 105
        }
      },
      "188": {
        start: {
          line: 514,
          column: 65
        },
        end: {
          line: 514,
          column: 89
        }
      },
      "189": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 26
        }
      },
      "190": {
        start: {
          line: 519,
          column: 27
        },
        end: {
          line: 548,
          column: 1
        }
      },
      "191": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 529,
          column: 10
        }
      },
      "192": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 535,
          column: 22
        }
      },
      "193": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "194": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 541,
          column: 29
        }
      },
      "195": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "196": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 544,
          column: 64
        }
      },
      "197": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 40
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 38,
            column: 35
          }
        },
        loc: {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 38
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 17
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 156
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 161,
            column: 58
          },
          end: {
            line: 161,
            column: 59
          }
        },
        loc: {
          start: {
            line: 161,
            column: 75
          },
          end: {
            line: 163,
            column: 9
          }
        },
        line: 161
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 25
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 165
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 173,
            column: 6
          },
          end: {
            line: 173,
            column: 7
          }
        },
        loc: {
          start: {
            line: 173,
            column: 57
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 173
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 205,
            column: 6
          },
          end: {
            line: 205,
            column: 7
          }
        },
        loc: {
          start: {
            line: 205,
            column: 59
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 205
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 227,
            column: 6
          },
          end: {
            line: 227,
            column: 7
          }
        },
        loc: {
          start: {
            line: 227,
            column: 45
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 227
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 240,
            column: 6
          },
          end: {
            line: 240,
            column: 7
          }
        },
        loc: {
          start: {
            line: 240,
            column: 47
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 240
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 258,
            column: 6
          },
          end: {
            line: 258,
            column: 7
          }
        },
        loc: {
          start: {
            line: 258,
            column: 55
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 258
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 272,
            column: 6
          },
          end: {
            line: 272,
            column: 7
          }
        },
        loc: {
          start: {
            line: 272,
            column: 42
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 272
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 278,
            column: 34
          },
          end: {
            line: 278,
            column: 35
          }
        },
        loc: {
          start: {
            line: 278,
            column: 45
          },
          end: {
            line: 281,
            column: 21
          }
        },
        line: 278
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 282,
            column: 36
          },
          end: {
            line: 282,
            column: 37
          }
        },
        loc: {
          start: {
            line: 282,
            column: 45
          },
          end: {
            line: 285,
            column: 21
          }
        },
        line: 282
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 310,
            column: 6
          },
          end: {
            line: 310,
            column: 7
          }
        },
        loc: {
          start: {
            line: 310,
            column: 52
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 310
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 330,
            column: 6
          },
          end: {
            line: 330,
            column: 7
          }
        },
        loc: {
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 330
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 339,
            column: 6
          },
          end: {
            line: 339,
            column: 7
          }
        },
        loc: {
          start: {
            line: 339,
            column: 30
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 339
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 355,
            column: 6
          },
          end: {
            line: 355,
            column: 7
          }
        },
        loc: {
          start: {
            line: 355,
            column: 42
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 355
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 370,
            column: 6
          },
          end: {
            line: 370,
            column: 7
          }
        },
        loc: {
          start: {
            line: 370,
            column: 57
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 370
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 381,
            column: 6
          },
          end: {
            line: 381,
            column: 7
          }
        },
        loc: {
          start: {
            line: 381,
            column: 48
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 381
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 399,
            column: 6
          },
          end: {
            line: 399,
            column: 7
          }
        },
        loc: {
          start: {
            line: 399,
            column: 44
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 399
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 434,
            column: 6
          },
          end: {
            line: 434,
            column: 7
          }
        },
        loc: {
          start: {
            line: 434,
            column: 60
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 434
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 459,
            column: 6
          },
          end: {
            line: 459,
            column: 7
          }
        },
        loc: {
          start: {
            line: 459,
            column: 31
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 459
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 464,
            column: 6
          },
          end: {
            line: 464,
            column: 7
          }
        },
        loc: {
          start: {
            line: 464,
            column: 22
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 464
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 466,
            column: 29
          },
          end: {
            line: 466,
            column: 30
          }
        },
        loc: {
          start: {
            line: 466,
            column: 50
          },
          end: {
            line: 468,
            column: 9
          }
        },
        line: 466
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 473,
            column: 6
          },
          end: {
            line: 473,
            column: 7
          }
        },
        loc: {
          start: {
            line: 473,
            column: 37
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 473
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 479,
            column: 6
          },
          end: {
            line: 479,
            column: 7
          }
        },
        loc: {
          start: {
            line: 479,
            column: 35
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 479
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 489,
            column: 6
          },
          end: {
            line: 489,
            column: 7
          }
        },
        loc: {
          start: {
            line: 489,
            column: 54
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 489
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 494,
            column: 40
          },
          end: {
            line: 494,
            column: 41
          }
        },
        loc: {
          start: {
            line: 494,
            column: 60
          },
          end: {
            line: 504,
            column: 9
          }
        },
        line: 494
      },
      "34": {
        name: "withCacheStrategy",
        decl: {
          start: {
            line: 509,
            column: 9
          },
          end: {
            line: 509,
            column: 26
          }
        },
        loc: {
          start: {
            line: 509,
            column: 55
          },
          end: {
            line: 518,
            column: 1
          }
        },
        line: 509
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 510,
            column: 11
          },
          end: {
            line: 510,
            column: 12
          }
        },
        loc: {
          start: {
            line: 510,
            column: 54
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 510
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 512,
            column: 27
          },
          end: {
            line: 512,
            column: 28
          }
        },
        loc: {
          start: {
            line: 512,
            column: 51
          },
          end: {
            line: 515,
            column: 9
          }
        },
        line: 512
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 514,
            column: 61
          },
          end: {
            line: 514,
            column: 62
          }
        },
        loc: {
          start: {
            line: 514,
            column: 65
          },
          end: {
            line: 514,
            column: 89
          }
        },
        line: 514
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 522,
            column: 6
          },
          end: {
            line: 522,
            column: 7
          }
        },
        loc: {
          start: {
            line: 522,
            column: 30
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 522
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 533,
            column: 6
          },
          end: {
            line: 533,
            column: 7
          }
        },
        loc: {
          start: {
            line: 533,
            column: 37
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 533
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 539,
            column: 6
          },
          end: {
            line: 539,
            column: 7
          }
        },
        loc: {
          start: {
            line: 539,
            column: 35
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 539
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "1": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "2": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "3": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 208,
            column: 61
          }
        }, {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 210,
            column: 63
          }
        }, {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 212,
            column: 71
          }
        }, {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 214,
            column: 58
          }
        }, {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 216,
            column: 68
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 51
          }
        }, {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 220,
            column: 33
          }
        }, {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 222,
            column: 61
          }
        }],
        line: 206
      },
      "4": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "5": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "6": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "7": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "8": {
        loc: {
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "9": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "10": {
        loc: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: 316,
            column: 19
          },
          end: {
            line: 320,
            column: 13
          }
        }],
        line: 314
      },
      "11": {
        loc: {
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 314,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 314,
            column: 49
          }
        }, {
          start: {
            line: 314,
            column: 53
          },
          end: {
            line: 314,
            column: 84
          }
        }],
        line: 314
      },
      "12": {
        loc: {
          start: {
            line: 316,
            column: 19
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 19
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: 318,
            column: 19
          },
          end: {
            line: 320,
            column: 13
          }
        }],
        line: 316
      },
      "13": {
        loc: {
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "14": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 345,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 345,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "15": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "16": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 382,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 382,
            column: 30
          }
        }, {
          start: {
            line: 382,
            column: 34
          },
          end: {
            line: 382,
            column: 42
          }
        }],
        line: 382
      },
      "17": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "18": {
        loc: {
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "19": {
        loc: {
          start: {
            line: 390,
            column: 20
          },
          end: {
            line: 390,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 20
          },
          end: {
            line: 390,
            column: 49
          }
        }, {
          start: {
            line: 390,
            column: 53
          },
          end: {
            line: 390,
            column: 72
          }
        }],
        line: 390
      },
      "20": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 416,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 404,
            column: 22
          }
        }, {
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 407,
            column: 22
          }
        }, {
          start: {
            line: 408,
            column: 12
          },
          end: {
            line: 410,
            column: 22
          }
        }, {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 413,
            column: 22
          }
        }, {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 415,
            column: 29
          }
        }],
        line: 401
      },
      "21": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 419,
            column: 56
          }
        }, {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 421,
            column: 54
          }
        }, {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 423,
            column: 54
          }
        }, {
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 425,
            column: 96
          }
        }, {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 427,
            column: 98
          }
        }, {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 429,
            column: 29
          }
        }],
        line: 417
      },
      "22": {
        loc: {
          start: {
            line: 425,
            column: 23
          },
          end: {
            line: 425,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 23
          },
          end: {
            line: 425,
            column: 53
          }
        }, {
          start: {
            line: 425,
            column: 57
          },
          end: {
            line: 425,
            column: 95
          }
        }],
        line: 425
      },
      "23": {
        loc: {
          start: {
            line: 427,
            column: 23
          },
          end: {
            line: 427,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 23
          },
          end: {
            line: 427,
            column: 55
          }
        }, {
          start: {
            line: 427,
            column: 59
          },
          end: {
            line: 427,
            column: 97
          }
        }],
        line: 427
      },
      "24": {
        loc: {
          start: {
            line: 436,
            column: 25
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 25
          },
          end: {
            line: 436,
            column: 55
          }
        }, {
          start: {
            line: 436,
            column: 59
          },
          end: {
            line: 445,
            column: 9
          }
        }],
        line: 436
      },
      "25": {
        loc: {
          start: {
            line: 444,
            column: 22
          },
          end: {
            line: 444,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 22
          },
          end: {
            line: 444,
            column: 65
          }
        }, {
          start: {
            line: 444,
            column: 69
          },
          end: {
            line: 444,
            column: 82
          }
        }],
        line: 444
      },
      "26": {
        loc: {
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        }, {
          start: {
            line: 449,
            column: 15
          },
          end: {
            line: 451,
            column: 9
          }
        }],
        line: 447
      },
      "27": {
        loc: {
          start: {
            line: 460,
            column: 15
          },
          end: {
            line: 460,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 460,
            column: 15
          },
          end: {
            line: 460,
            column: 45
          }
        }, {
          start: {
            line: 460,
            column: 49
          },
          end: {
            line: 460,
            column: 53
          }
        }],
        line: 460
      },
      "28": {
        loc: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "29": {
        loc: {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 491,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 491,
            column: 21
          }
        }, {
          start: {
            line: 491,
            column: 25
          },
          end: {
            line: 491,
            column: 48
          }
        }],
        line: 491
      },
      "30": {
        loc: {
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 500,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 16
          },
          end: {
            line: 500,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "31": {
        loc: {
          start: {
            line: 513,
            column: 24
          },
          end: {
            line: 513,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 513,
            column: 39
          },
          end: {
            line: 513,
            column: 60
          }
        }, {
          start: {
            line: 513,
            column: 63
          },
          end: {
            line: 513,
            column: 104
          }
        }],
        line: 513
      },
      "32": {
        loc: {
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "33": {
        loc: {
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 545,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 545,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 543
      },
      "34": {
        loc: {
          start: {
            line: 544,
            column: 19
          },
          end: {
            line: 544,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 544,
            column: 44
          },
          end: {
            line: 544,
            column: 52
          }
        }, {
          start: {
            line: 544,
            column: 55
          },
          end: {
            line: 544,
            column: 63
          }
        }],
        line: 544
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0, 0],
      "21": [0, 0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\advanced-cache-strategy-manager.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ADVANCED CACHE STRATEGY MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger';\r\nimport { cacheManager, CACHE_CONFIGS } from '../cache-manager';\r\nimport { enterpriseCacheSystem } from '../optimization/enterprise-cache-system';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Estrategias de cache disponibles\r\n */\r\nexport enum CacheStrategy {\r\n  CACHE_FIRST = 'cache-first',           // Cache primero, fallback a origen\r\n  NETWORK_FIRST = 'network-first',       // Red primero, fallback a cache\r\n  STALE_WHILE_REVALIDATE = 'stale-while-revalidate', // Cache stale + revalidaci\xF3n en background\r\n  NETWORK_ONLY = 'network-only',         // Solo red, sin cache\r\n  CACHE_ONLY = 'cache-only',            // Solo cache, sin red\r\n  FASTEST = 'fastest',                   // El m\xE1s r\xE1pido entre cache y red\r\n  ADAPTIVE = 'adaptive'                  // Adaptativo basado en condiciones\r\n}\r\n\r\n/**\r\n * Configuraci\xF3n de estrategia de cache\r\n */\r\nexport interface CacheStrategyConfig {\r\n  strategy: CacheStrategy;\r\n  ttl: number;\r\n  maxAge?: number;\r\n  staleWhileRevalidate?: number;\r\n  priority: 'low' | 'normal' | 'high' | 'critical';\r\n  tags?: string[];\r\n  conditions?: CacheCondition[];\r\n  fallbackStrategy?: CacheStrategy;\r\n  warmupEnabled?: boolean;\r\n  compressionEnabled?: boolean;\r\n  encryptionEnabled?: boolean;\r\n  analyticsEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * Condiciones para cache adaptativo\r\n */\r\nexport interface CacheCondition {\r\n  type: 'network' | 'device' | 'time' | 'user' | 'location' | 'load';\r\n  operator: 'eq' | 'gt' | 'lt' | 'gte' | 'lte' | 'in' | 'contains';\r\n  value: any;\r\n  action: 'use' | 'skip' | 'modify';\r\n  modifyTtl?: number;\r\n}\r\n\r\n/**\r\n * M\xE9tricas de performance de cache\r\n */\r\nexport interface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  bytesServed: number;\r\n  lastUpdated: number;\r\n  strategy: CacheStrategy;\r\n}\r\n\r\n/**\r\n * Contexto de ejecuci\xF3n de cache\r\n */\r\nexport interface CacheContext {\r\n  userAgent?: string;\r\n  connectionType?: string;\r\n  deviceType?: 'mobile' | 'tablet' | 'desktop';\r\n  location?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  timestamp: number;\r\n  priority: 'low' | 'normal' | 'high' | 'critical';\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas de estrategias\r\n */\r\nexport const ADVANCED_CACHE_STRATEGIES: Record<string, CacheStrategyConfig> = {\r\n  // Estrategia para datos cr\xEDticos del sistema\r\n  CRITICAL_SYSTEM_DATA: {\r\n    strategy: CacheStrategy.CACHE_FIRST,\r\n    ttl: 3600, // 1 hora\r\n    maxAge: 7200, // 2 horas\r\n    priority: 'critical',\r\n    tags: ['system', 'critical'],\r\n    warmupEnabled: true,\r\n    compressionEnabled: true,\r\n    encryptionEnabled: true,\r\n    analyticsEnabled: true,\r\n    fallbackStrategy: CacheStrategy.NETWORK_FIRST\r\n  },\r\n\r\n  // Estrategia para datos de productos\r\n  PRODUCT_DATA: {\r\n    strategy: CacheStrategy.STALE_WHILE_REVALIDATE,\r\n    ttl: 900, // 15 minutos\r\n    staleWhileRevalidate: 1800, // 30 minutos\r\n    priority: 'high',\r\n    tags: ['products', 'catalog'],\r\n    warmupEnabled: true,\r\n    compressionEnabled: true,\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'load',\r\n        operator: 'gt',\r\n        value: 0.8,\r\n        action: 'modify',\r\n        modifyTtl: 1800 // Extender TTL bajo alta carga\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para contenido est\xE1tico\r\n  STATIC_ASSETS: {\r\n    strategy: CacheStrategy.CACHE_FIRST,\r\n    ttl: 86400, // 24 horas\r\n    maxAge: 604800, // 7 d\xEDas\r\n    priority: 'normal',\r\n    tags: ['static', 'assets'],\r\n    compressionEnabled: true,\r\n    analyticsEnabled: false\r\n  },\r\n\r\n  // Estrategia para APIs p\xFAblicas\r\n  PUBLIC_API: {\r\n    strategy: CacheStrategy.NETWORK_FIRST,\r\n    ttl: 300, // 5 minutos\r\n    priority: 'normal',\r\n    tags: ['api', 'public'],\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'network',\r\n        operator: 'eq',\r\n        value: 'slow',\r\n        action: 'use',\r\n        modifyTtl: 600 // Extender TTL en conexiones lentas\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para datos de usuario\r\n  USER_DATA: {\r\n    strategy: CacheStrategy.ADAPTIVE,\r\n    ttl: 1800, // 30 minutos\r\n    priority: 'high',\r\n    tags: ['user', 'personal'],\r\n    encryptionEnabled: true,\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'user',\r\n        operator: 'eq',\r\n        value: 'premium',\r\n        action: 'modify',\r\n        modifyTtl: 3600 // TTL extendido para usuarios premium\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para b\xFAsquedas\r\n  SEARCH_RESULTS: {\r\n    strategy: CacheStrategy.FASTEST,\r\n    ttl: 600, // 10 minutos\r\n    priority: 'normal',\r\n    tags: ['search', 'results'],\r\n    compressionEnabled: true,\r\n    analyticsEnabled: true\r\n  }\r\n};\r\n\r\n/**\r\n * Manager avanzado de estrategias de cache\r\n */\r\nexport class AdvancedCacheStrategyManager {\r\n  private static instance: AdvancedCacheStrategyManager;\r\n  private metrics: Map<string, CacheMetrics> = new Map();\r\n  private strategies: Map<string, CacheStrategyConfig> = new Map();\r\n  private redis = getRedisClient();\r\n\r\n  private constructor() {\r\n    // Cargar estrategias predefinidas\r\n    Object.entries(ADVANCED_CACHE_STRATEGIES).forEach(([key, config]) => {\r\n      this.strategies.set(key, config);\r\n    });\r\n  }\r\n\r\n  static getInstance(): AdvancedCacheStrategyManager {\r\n    if (!AdvancedCacheStrategyManager.instance) {\r\n      AdvancedCacheStrategyManager.instance = new AdvancedCacheStrategyManager();\r\n    }\r\n    return AdvancedCacheStrategyManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una estrategia de cache\r\n   */\r\n  async execute<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    strategyName: string,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    const startTime = Date.now();\r\n    const strategy = this.strategies.get(strategyName);\r\n    \r\n    if (!strategy) {\r\n      logger.warn(LogCategory.CACHE, `Estrategia de cache no encontrada: ${strategyName}`);\r\n      return fetcher();\r\n    }\r\n\r\n    try {\r\n      // Evaluar condiciones si existen\r\n      const effectiveStrategy = await this.evaluateConditions(strategy, context);\r\n      \r\n      // Ejecutar estrategia\r\n      const result = await this.executeStrategy(key, fetcher, effectiveStrategy, context);\r\n      \r\n      // Registrar m\xE9tricas\r\n      await this.recordMetrics(strategyName, startTime, true);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      // Registrar m\xE9tricas de error\r\n      await this.recordMetrics(strategyName, startTime, false);\r\n      \r\n      // Intentar estrategia de fallback\r\n      if (strategy.fallbackStrategy) {\r\n        logger.info(LogCategory.CACHE, `Usando estrategia de fallback: ${strategy.fallbackStrategy}`);\r\n        const fallbackConfig = { ...strategy, strategy: strategy.fallbackStrategy };\r\n        return this.executeStrategy(key, fetcher, fallbackConfig, context);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta la estrategia espec\xEDfica\r\n   */\r\n  private async executeStrategy<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    switch (config.strategy) {\r\n      case CacheStrategy.CACHE_FIRST:\r\n        return this.cacheFirst(key, fetcher, config);\r\n      \r\n      case CacheStrategy.NETWORK_FIRST:\r\n        return this.networkFirst(key, fetcher, config);\r\n      \r\n      case CacheStrategy.STALE_WHILE_REVALIDATE:\r\n        return this.staleWhileRevalidate(key, fetcher, config);\r\n      \r\n      case CacheStrategy.FASTEST:\r\n        return this.fastest(key, fetcher, config);\r\n      \r\n      case CacheStrategy.ADAPTIVE:\r\n        return this.adaptive(key, fetcher, config, context);\r\n      \r\n      case CacheStrategy.CACHE_ONLY:\r\n        return this.cacheOnly(key, config);\r\n      \r\n      case CacheStrategy.NETWORK_ONLY:\r\n        return fetcher();\r\n      \r\n      default:\r\n        return this.cacheFirst(key, fetcher, config);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Cache First\r\n   */\r\n  private async cacheFirst<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache\r\n    const cached = await this.getFromCache<T>(key);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n\r\n    // Si no est\xE1 en cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await this.setToCache(key, data, config);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Estrategia Network First\r\n   */\r\n  private async networkFirst<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    try {\r\n      // Intentar obtener de la red\r\n      const data = await fetcher();\r\n      await this.setToCache(key, data, config);\r\n      return data;\r\n    } catch (error) {\r\n      // Si falla la red, intentar cache\r\n      const cached = await this.getFromCache<T>(key);\r\n      if (cached !== null) {\r\n        logger.info(LogCategory.CACHE, `Usando cache como fallback para: ${key}`);\r\n        return cached;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Stale While Revalidate\r\n   */\r\n  private async staleWhileRevalidate<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    const cached = await this.getFromCache<T>(key);\r\n    \r\n    if (cached !== null) {\r\n      // Revalidar en background\r\n      this.revalidateInBackground(key, fetcher, config);\r\n      return cached;\r\n    }\r\n\r\n    // Si no hay cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await this.setToCache(key, data, config);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Estrategia Fastest (race entre cache y red)\r\n   */\r\n  private async fastest<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    const cachePromise = this.getFromCache<T>(key);\r\n    const networkPromise = fetcher();\r\n\r\n    try {\r\n      // Race entre cache y red\r\n      const result = await Promise.race([\r\n        cachePromise.then(cached => ({ source: 'cache', data: cached })),\r\n        networkPromise.then(data => ({ source: 'network', data }))\r\n      ]);\r\n\r\n      if (result.source === 'network') {\r\n        // Si gan\xF3 la red, actualizar cache\r\n        await this.setToCache(key, result.data, config);\r\n      }\r\n\r\n      return result.data;\r\n    } catch (error) {\r\n      // Si falla el race, intentar el que no fall\xF3\r\n      try {\r\n        const cached = await cachePromise;\r\n        if (cached !== null) {return cached;}\r\n      } catch {}\r\n\r\n      try {\r\n        const data = await networkPromise;\r\n        await this.setToCache(key, data, config);\r\n        return data;\r\n      } catch {}\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Adaptativa\r\n   */\r\n  private async adaptive<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    // Determinar la mejor estrategia basada en el contexto\r\n    let adaptedStrategy = CacheStrategy.CACHE_FIRST;\r\n\r\n    if (context) {\r\n      if (context.connectionType === 'slow' || context.deviceType === 'mobile') {\r\n        adaptedStrategy = CacheStrategy.CACHE_FIRST;\r\n      } else if (context.priority === 'critical') {\r\n        adaptedStrategy = CacheStrategy.FASTEST;\r\n      } else {\r\n        adaptedStrategy = CacheStrategy.STALE_WHILE_REVALIDATE;\r\n      }\r\n    }\r\n\r\n    const adaptedConfig = { ...config, strategy: adaptedStrategy };\r\n    return this.executeStrategy(key, fetcher, adaptedConfig, context);\r\n  }\r\n\r\n  /**\r\n   * Estrategia Cache Only\r\n   */\r\n  private async cacheOnly<T>(key: string, config: CacheStrategyConfig): Promise<T> {\r\n    const cached = await this.getFromCache<T>(key);\r\n    if (cached === null) {\r\n      throw new Error(`Cache miss para key: ${key} (cache-only strategy)`);\r\n    }\r\n    return cached;\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del cache\r\n   */\r\n  private async getFromCache<T>(key: string): Promise<T | null> {\r\n    try {\r\n      // Intentar cache enterprise primero\r\n      const enterpriseResult = await enterpriseCacheSystem.get<T>(key);\r\n      if (enterpriseResult !== null) {return enterpriseResult;}\r\n\r\n      // Fallback a cache manager b\xE1sico\r\n      return await cacheManager.get<T>(key);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error obteniendo del cache: ${key}`, error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en el cache\r\n   */\r\n  private async setToCache<T>(key: string, data: T, config: CacheStrategyConfig): Promise<void> {\r\n    try {\r\n      // Usar cache enterprise si est\xE1 disponible\r\n      await enterpriseCacheSystem.set(key, data, {\r\n        ttl: config.ttl,\r\n        compress: config.compressionEnabled,\r\n        serialize: true,\r\n        enableMetrics: config.analyticsEnabled\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error guardando en cache: ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revalidaci\xF3n en background\r\n   */\r\n  private async revalidateInBackground<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<void> {\r\n    try {\r\n      const data = await fetcher();\r\n      await this.setToCache(key, data, config);\r\n      logger.info(LogCategory.CACHE, `Revalidaci\xF3n completada para: ${key}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error en revalidaci\xF3n: ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eval\xFAa condiciones para estrategia adaptativa\r\n   */\r\n  private async evaluateConditions(\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<CacheStrategyConfig> {\r\n    if (!config.conditions || !context) {return config;}\r\n\r\n    const modifiedConfig = { ...config };\r\n\r\n    for (const condition of config.conditions) {\r\n      if (this.evaluateCondition(condition, context)) {\r\n        if (condition.action === 'modify' && condition.modifyTtl) {\r\n          modifiedConfig.ttl = condition.modifyTtl;\r\n        }\r\n      }\r\n    }\r\n\r\n    return modifiedConfig;\r\n  }\r\n\r\n  /**\r\n   * Eval\xFAa una condici\xF3n espec\xEDfica\r\n   */\r\n  private evaluateCondition(condition: CacheCondition, context: CacheContext): boolean {\r\n    let contextValue: any;\r\n\r\n    switch (condition.type) {\r\n      case 'device':\r\n        contextValue = context.deviceType;\r\n        break;\r\n      case 'network':\r\n        contextValue = context.connectionType;\r\n        break;\r\n      case 'user':\r\n        contextValue = context.userId;\r\n        break;\r\n      case 'location':\r\n        contextValue = context.location;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    switch (condition.operator) {\r\n      case 'eq':\r\n        return contextValue === condition.value;\r\n      case 'gt':\r\n        return contextValue > condition.value;\r\n      case 'lt':\r\n        return contextValue < condition.value;\r\n      case 'in':\r\n        return Array.isArray(condition.value) && condition.value.includes(contextValue);\r\n      case 'contains':\r\n        return typeof contextValue === 'string' && contextValue.includes(condition.value);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra m\xE9tricas de performance\r\n   */\r\n  private async recordMetrics(strategyName: string, startTime: number, success: boolean): Promise<void> {\r\n    const responseTime = Date.now() - startTime;\r\n    const existing = this.metrics.get(strategyName) || {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgResponseTime: 0,\r\n      totalRequests: 0,\r\n      bytesServed: 0,\r\n      lastUpdated: Date.now(),\r\n      strategy: this.strategies.get(strategyName)?.strategy || CacheStrategy.CACHE_FIRST\r\n    };\r\n\r\n    existing.totalRequests++;\r\n    if (success) {\r\n      existing.hits++;\r\n    } else {\r\n      existing.misses++;\r\n    }\r\n    \r\n    existing.hitRate = (existing.hits / existing.totalRequests) * 100;\r\n    existing.avgResponseTime = ((existing.avgResponseTime * (existing.totalRequests - 1)) + responseTime) / existing.totalRequests;\r\n    existing.lastUpdated = Date.now();\r\n\r\n    this.metrics.set(strategyName, existing);\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas de una estrategia\r\n   */\r\n  getMetrics(strategyName: string): CacheMetrics | null {\r\n    return this.metrics.get(strategyName) || null;\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las m\xE9tricas\r\n   */\r\n  getAllMetrics(): Record<string, CacheMetrics> {\r\n    const result: Record<string, CacheMetrics> = {};\r\n    this.metrics.forEach((metrics, strategy) => {\r\n      result[strategy] = metrics;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registra una nueva estrategia\r\n   */\r\n  registerStrategy(name: string, config: CacheStrategyConfig): void {\r\n    this.strategies.set(name, config);\r\n    logger.info(LogCategory.CACHE, `Estrategia registrada: ${name}`);\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por tags\r\n   */\r\n  async invalidateByTags(tags: string[]): Promise<void> {\r\n    try {\r\n      await enterpriseCacheSystem.invalidateByTags(tags);\r\n      logger.info(LogCategory.CACHE, `Cache invalidado por tags: ${tags.join(', ')}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error invalidando cache por tags', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Precalienta cache para keys espec\xEDficos\r\n   */\r\n  async warmupCache(keys: string[], fetchers: (() => Promise<any>)[], strategyName: string): Promise<void> {\r\n    const strategy = this.strategies.get(strategyName);\r\n    if (!strategy || !strategy.warmupEnabled) {return;}\r\n\r\n    const warmupPromises = keys.map(async (key, index) => {\r\n      try {\r\n        const fetcher = fetchers[index];\r\n        if (fetcher) {\r\n          await this.execute(key, fetcher, strategyName);\r\n          logger.info(LogCategory.CACHE, `Cache precalentado para: ${key}`);\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error precalentando cache: ${key}`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(warmupPromises);\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const advancedCacheStrategyManager = AdvancedCacheStrategyManager.getInstance();\r\n\r\n/**\r\n * Decorador para aplicar estrategias de cache autom\xE1ticamente\r\n */\r\nexport function withCacheStrategy(strategyName: string, keyGenerator?: (...args: any[]) => string) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;\r\n      \r\n      return advancedCacheStrategyManager.execute(\r\n        key,\r\n        () => method.apply(this, args),\r\n        strategyName\r\n      );\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * Utilidades para estrategias de cache\r\n */\r\nexport const CacheStrategyUtils = {\r\n  /**\r\n   * Crea contexto de cache basado en request\r\n   */\r\n  createContext(request?: any): CacheContext {\r\n    return {\r\n      userAgent: request?.headers?.['user-agent'],\r\n      connectionType: this.detectConnectionType(request),\r\n      deviceType: this.detectDeviceType(request?.headers?.['user-agent']),\r\n      timestamp: Date.now(),\r\n      priority: 'normal'\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Detecta tipo de conexi\xF3n\r\n   */\r\n  detectConnectionType(request?: any): string {\r\n    // L\xF3gica para detectar tipo de conexi\xF3n\r\n    return 'fast'; // Placeholder\r\n  },\r\n\r\n  /**\r\n   * Detecta tipo de dispositivo\r\n   */\r\n  detectDeviceType(userAgent?: string): 'mobile' | 'tablet' | 'desktop' {\r\n    if (!userAgent) {return 'desktop';}\r\n    \r\n    if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {\r\n      return /iPad/.test(userAgent) ? 'tablet' : 'mobile';\r\n    }\r\n    \r\n    return 'desktop';\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["ADVANCED_CACHE_STRATEGIES", "AdvancedCacheStrategyManager", "CacheStrategy", "CacheStrategyUtils", "advancedCacheStrategyManager", "withCacheStrategy", "CRITICAL_SYSTEM_DATA", "strategy", "ttl", "maxAge", "priority", "tags", "warmupEnabled", "compressionEnabled", "encryptionEnabled", "analyticsEnabled", "fallbackStrategy", "PRODUCT_DATA", "staleWhileRevalidate", "conditions", "type", "operator", "value", "action", "modifyTtl", "STATIC_ASSETS", "PUBLIC_API", "USER_DATA", "SEARCH_RESULTS", "metrics", "Map", "strategies", "redis", "getRedisClient", "Object", "entries", "forEach", "key", "config", "set", "getInstance", "instance", "execute", "fetcher", "strategyName", "context", "startTime", "Date", "now", "get", "logger", "warn", "LogCategory", "CACHE", "effectiveStrategy", "evaluateConditions", "result", "executeStrategy", "recordMetrics", "error", "info", "fallbackConfig", "cacheFirst", "networkFirst", "fastest", "adaptive", "cacheOnly", "cached", "getFromCache", "data", "setToCache", "revalidateInBackground", "cachePromise", "networkPromise", "Promise", "race", "then", "source", "adaptedStrategy", "connectionType", "deviceType", "adaptedConfig", "Error", "enterpriseResult", "enterpriseCacheSystem", "cacheManager", "compress", "serialize", "enableMetrics", "modifiedConfig", "condition", "evaluateCondition", "contextValue", "userId", "location", "Array", "isArray", "includes", "success", "responseTime", "existing", "hits", "misses", "hitRate", "avgResponseTime", "totalRequests", "bytesServed", "lastUpdated", "getMetrics", "getAllMetrics", "registerStrategy", "name", "invalidateByTags", "join", "warmupCache", "keys", "fetchers", "warmupPromises", "map", "index", "allSettled", "keyGenerator", "target", "propertyName", "descriptor", "method", "args", "JSON", "stringify", "apply", "createContext", "request", "userAgent", "headers", "detectConnectionType", "detectDeviceType", "timestamp", "test"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b430f1f944294d46cc955209c1cf8997bf89d25"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ps24mzjhd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ps24mzjhd();
cov_2ps24mzjhd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ps24mzjhd().f[0]++;
  cov_2ps24mzjhd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2ps24mzjhd().s[3]++;
_export(exports, {
  get ADVANCED_CACHE_STRATEGIES() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[1]++;
    cov_2ps24mzjhd().s[4]++;
    return ADVANCED_CACHE_STRATEGIES;
  },
  get AdvancedCacheStrategyManager() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[2]++;
    cov_2ps24mzjhd().s[5]++;
    return AdvancedCacheStrategyManager;
  },
  get CacheStrategy() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[3]++;
    cov_2ps24mzjhd().s[6]++;
    return CacheStrategy;
  },
  get CacheStrategyUtils() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[4]++;
    cov_2ps24mzjhd().s[7]++;
    return CacheStrategyUtils;
  },
  get advancedCacheStrategyManager() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[5]++;
    cov_2ps24mzjhd().s[8]++;
    return advancedCacheStrategyManager;
  },
  get withCacheStrategy() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[6]++;
    cov_2ps24mzjhd().s[9]++;
    return withCacheStrategy;
  }
});
const _logger =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[10]++, require("../enterprise/logger"));
const _cachemanager =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[11]++, require("../cache-manager"));
const _enterprisecachesystem =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[12]++, require("../optimization/enterprise-cache-system"));
const _redis =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[13]++, require("../integrations/redis"));
var CacheStrategy =
/* istanbul ignore next */
(/*#__PURE__*/cov_2ps24mzjhd().s[14]++, function (CacheStrategy) {
  /* istanbul ignore next */
  cov_2ps24mzjhd().f[7]++;
  cov_2ps24mzjhd().s[15]++;
  CacheStrategy["CACHE_FIRST"] = "cache-first";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[16]++;
  CacheStrategy["NETWORK_FIRST"] = "network-first";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[17]++;
  CacheStrategy["STALE_WHILE_REVALIDATE"] = "stale-while-revalidate";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[18]++;
  CacheStrategy["NETWORK_ONLY"] = "network-only";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[19]++;
  CacheStrategy["CACHE_ONLY"] = "cache-only";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[20]++;
  CacheStrategy["FASTEST"] = "fastest";
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[21]++;
  CacheStrategy["ADAPTIVE"] = "adaptive"; // Adaptativo basado en condiciones
  /* istanbul ignore next */
  cov_2ps24mzjhd().s[22]++;
  return CacheStrategy;
}({}));
const ADVANCED_CACHE_STRATEGIES =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[23]++, {
  // Estrategia para datos críticos del sistema
  CRITICAL_SYSTEM_DATA: {
    strategy: "cache-first",
    ttl: 3600,
    maxAge: 7200,
    priority: 'critical',
    tags: ['system', 'critical'],
    warmupEnabled: true,
    compressionEnabled: true,
    encryptionEnabled: true,
    analyticsEnabled: true,
    fallbackStrategy: "network-first"
  },
  // Estrategia para datos de productos
  PRODUCT_DATA: {
    strategy: "stale-while-revalidate",
    ttl: 900,
    staleWhileRevalidate: 1800,
    priority: 'high',
    tags: ['products', 'catalog'],
    warmupEnabled: true,
    compressionEnabled: true,
    analyticsEnabled: true,
    conditions: [{
      type: 'load',
      operator: 'gt',
      value: 0.8,
      action: 'modify',
      modifyTtl: 1800 // Extender TTL bajo alta carga
    }]
  },
  // Estrategia para contenido estático
  STATIC_ASSETS: {
    strategy: "cache-first",
    ttl: 86400,
    maxAge: 604800,
    priority: 'normal',
    tags: ['static', 'assets'],
    compressionEnabled: true,
    analyticsEnabled: false
  },
  // Estrategia para APIs públicas
  PUBLIC_API: {
    strategy: "network-first",
    ttl: 300,
    priority: 'normal',
    tags: ['api', 'public'],
    analyticsEnabled: true,
    conditions: [{
      type: 'network',
      operator: 'eq',
      value: 'slow',
      action: 'use',
      modifyTtl: 600 // Extender TTL en conexiones lentas
    }]
  },
  // Estrategia para datos de usuario
  USER_DATA: {
    strategy: "adaptive",
    ttl: 1800,
    priority: 'high',
    tags: ['user', 'personal'],
    encryptionEnabled: true,
    analyticsEnabled: true,
    conditions: [{
      type: 'user',
      operator: 'eq',
      value: 'premium',
      action: 'modify',
      modifyTtl: 3600 // TTL extendido para usuarios premium
    }]
  },
  // Estrategia para búsquedas
  SEARCH_RESULTS: {
    strategy: "fastest",
    ttl: 600,
    priority: 'normal',
    tags: ['search', 'results'],
    compressionEnabled: true,
    analyticsEnabled: true
  }
});
class AdvancedCacheStrategyManager {
  constructor() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[8]++;
    cov_2ps24mzjhd().s[24]++;
    this.metrics = new Map();
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[25]++;
    this.strategies = new Map();
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[26]++;
    this.redis = (0, _redis.getRedisClient)();
    // Cargar estrategias predefinidas
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[27]++;
    Object.entries(ADVANCED_CACHE_STRATEGIES).forEach(([key, config]) => {
      /* istanbul ignore next */
      cov_2ps24mzjhd().f[9]++;
      cov_2ps24mzjhd().s[28]++;
      this.strategies.set(key, config);
    });
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[10]++;
    cov_2ps24mzjhd().s[29]++;
    if (!AdvancedCacheStrategyManager.instance) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[0][0]++;
      cov_2ps24mzjhd().s[30]++;
      AdvancedCacheStrategyManager.instance = new AdvancedCacheStrategyManager();
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[0][1]++;
    }
    cov_2ps24mzjhd().s[31]++;
    return AdvancedCacheStrategyManager.instance;
  }
  /**
  * Ejecuta una estrategia de cache
  */
  async execute(key, fetcher, strategyName, context) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[11]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[32]++, Date.now());
    const strategy =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[33]++, this.strategies.get(strategyName));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[34]++;
    if (!strategy) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[1][0]++;
      cov_2ps24mzjhd().s[35]++;
      _logger.logger.warn(_logger.LogCategory.CACHE, `Estrategia de cache no encontrada: ${strategyName}`);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[36]++;
      return fetcher();
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[1][1]++;
    }
    cov_2ps24mzjhd().s[37]++;
    try {
      // Evaluar condiciones si existen
      const effectiveStrategy =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[38]++, await this.evaluateConditions(strategy, context));
      // Ejecutar estrategia
      const result =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[39]++, await this.executeStrategy(key, fetcher, effectiveStrategy, context));
      // Registrar métricas
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[40]++;
      await this.recordMetrics(strategyName, startTime, true);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[41]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[42]++;
      // Registrar métricas de error
      await this.recordMetrics(strategyName, startTime, false);
      // Intentar estrategia de fallback
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[43]++;
      if (strategy.fallbackStrategy) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[2][0]++;
        cov_2ps24mzjhd().s[44]++;
        _logger.logger.info(_logger.LogCategory.CACHE, `Usando estrategia de fallback: ${strategy.fallbackStrategy}`);
        const fallbackConfig =
        /* istanbul ignore next */
        (cov_2ps24mzjhd().s[45]++, {
          ...strategy,
          strategy: strategy.fallbackStrategy
        });
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[46]++;
        return this.executeStrategy(key, fetcher, fallbackConfig, context);
      } else
      /* istanbul ignore next */
      {
        cov_2ps24mzjhd().b[2][1]++;
      }
      cov_2ps24mzjhd().s[47]++;
      throw error;
    }
  }
  /**
  * Ejecuta la estrategia específica
  */
  async executeStrategy(key, fetcher, config, context) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[12]++;
    cov_2ps24mzjhd().s[48]++;
    switch (config.strategy) {
      case "cache-first":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][0]++;
        cov_2ps24mzjhd().s[49]++;
        return this.cacheFirst(key, fetcher, config);
      case "network-first":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][1]++;
        cov_2ps24mzjhd().s[50]++;
        return this.networkFirst(key, fetcher, config);
      case "stale-while-revalidate":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][2]++;
        cov_2ps24mzjhd().s[51]++;
        return this.staleWhileRevalidate(key, fetcher, config);
      case "fastest":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][3]++;
        cov_2ps24mzjhd().s[52]++;
        return this.fastest(key, fetcher, config);
      case "adaptive":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][4]++;
        cov_2ps24mzjhd().s[53]++;
        return this.adaptive(key, fetcher, config, context);
      case "cache-only":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][5]++;
        cov_2ps24mzjhd().s[54]++;
        return this.cacheOnly(key, config);
      case "network-only":
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][6]++;
        cov_2ps24mzjhd().s[55]++;
        return fetcher();
      default:
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[3][7]++;
        cov_2ps24mzjhd().s[56]++;
        return this.cacheFirst(key, fetcher, config);
    }
  }
  /**
  * Estrategia Cache First
  */
  async cacheFirst(key, fetcher, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[13]++;
    // Intentar obtener del cache
    const cached =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[57]++, await this.getFromCache(key));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[58]++;
    if (cached !== null) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[4][0]++;
      cov_2ps24mzjhd().s[59]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[4][1]++;
    }
    // Si no está en cache, obtener de la fuente
    const data =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[60]++, await fetcher());
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[61]++;
    await this.setToCache(key, data, config);
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[62]++;
    return data;
  }
  /**
  * Estrategia Network First
  */
  async networkFirst(key, fetcher, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[14]++;
    cov_2ps24mzjhd().s[63]++;
    try {
      // Intentar obtener de la red
      const data =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[64]++, await fetcher());
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[65]++;
      await this.setToCache(key, data, config);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[66]++;
      return data;
    } catch (error) {
      // Si falla la red, intentar cache
      const cached =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[67]++, await this.getFromCache(key));
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[68]++;
      if (cached !== null) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[5][0]++;
        cov_2ps24mzjhd().s[69]++;
        _logger.logger.info(_logger.LogCategory.CACHE, `Usando cache como fallback para: ${key}`);
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[70]++;
        return cached;
      } else
      /* istanbul ignore next */
      {
        cov_2ps24mzjhd().b[5][1]++;
      }
      cov_2ps24mzjhd().s[71]++;
      throw error;
    }
  }
  /**
  * Estrategia Stale While Revalidate
  */
  async staleWhileRevalidate(key, fetcher, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[15]++;
    const cached =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[72]++, await this.getFromCache(key));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[73]++;
    if (cached !== null) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[6][0]++;
      cov_2ps24mzjhd().s[74]++;
      // Revalidar en background
      this.revalidateInBackground(key, fetcher, config);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[75]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[6][1]++;
    }
    // Si no hay cache, obtener de la fuente
    const data =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[76]++, await fetcher());
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[77]++;
    await this.setToCache(key, data, config);
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[78]++;
    return data;
  }
  /**
  * Estrategia Fastest (race entre cache y red)
  */
  async fastest(key, fetcher, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[16]++;
    const cachePromise =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[79]++, this.getFromCache(key));
    const networkPromise =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[80]++, fetcher());
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[81]++;
    try {
      // Race entre cache y red
      const result =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[82]++, await Promise.race([cachePromise.then(cached => {
        /* istanbul ignore next */
        cov_2ps24mzjhd().f[17]++;
        cov_2ps24mzjhd().s[83]++;
        return {
          source: 'cache',
          data: cached
        };
      }), networkPromise.then(data => {
        /* istanbul ignore next */
        cov_2ps24mzjhd().f[18]++;
        cov_2ps24mzjhd().s[84]++;
        return {
          source: 'network',
          data
        };
      })]));
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[85]++;
      if (result.source === 'network') {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[7][0]++;
        cov_2ps24mzjhd().s[86]++;
        // Si ganó la red, actualizar cache
        await this.setToCache(key, result.data, config);
      } else
      /* istanbul ignore next */
      {
        cov_2ps24mzjhd().b[7][1]++;
      }
      cov_2ps24mzjhd().s[87]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[88]++;
      // Si falla el race, intentar el que no falló
      try {
        const cached =
        /* istanbul ignore next */
        (cov_2ps24mzjhd().s[89]++, await cachePromise);
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[90]++;
        if (cached !== null) {
          /* istanbul ignore next */
          cov_2ps24mzjhd().b[8][0]++;
          cov_2ps24mzjhd().s[91]++;
          return cached;
        } else
        /* istanbul ignore next */
        {
          cov_2ps24mzjhd().b[8][1]++;
        }
      } catch {}
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[92]++;
      try {
        const data =
        /* istanbul ignore next */
        (cov_2ps24mzjhd().s[93]++, await networkPromise);
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[94]++;
        await this.setToCache(key, data, config);
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[95]++;
        return data;
      } catch {}
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[96]++;
      throw error;
    }
  }
  /**
  * Estrategia Adaptativa
  */
  async adaptive(key, fetcher, config, context) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[19]++;
    // Determinar la mejor estrategia basada en el contexto
    let adaptedStrategy =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[97]++, "cache-first");
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[98]++;
    if (context) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[9][0]++;
      cov_2ps24mzjhd().s[99]++;
      if (
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[11][0]++, context.connectionType === 'slow') ||
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[11][1]++, context.deviceType === 'mobile')) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[10][0]++;
        cov_2ps24mzjhd().s[100]++;
        adaptedStrategy = "cache-first";
      } else {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[10][1]++;
        cov_2ps24mzjhd().s[101]++;
        if (context.priority === 'critical') {
          /* istanbul ignore next */
          cov_2ps24mzjhd().b[12][0]++;
          cov_2ps24mzjhd().s[102]++;
          adaptedStrategy = "fastest";
        } else {
          /* istanbul ignore next */
          cov_2ps24mzjhd().b[12][1]++;
          cov_2ps24mzjhd().s[103]++;
          adaptedStrategy = "stale-while-revalidate";
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[9][1]++;
    }
    const adaptedConfig =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[104]++, {
      ...config,
      strategy: adaptedStrategy
    });
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[105]++;
    return this.executeStrategy(key, fetcher, adaptedConfig, context);
  }
  /**
  * Estrategia Cache Only
  */
  async cacheOnly(key, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[20]++;
    const cached =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[106]++, await this.getFromCache(key));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[107]++;
    if (cached === null) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[13][0]++;
      cov_2ps24mzjhd().s[108]++;
      throw new Error(`Cache miss para key: ${key} (cache-only strategy)`);
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[13][1]++;
    }
    cov_2ps24mzjhd().s[109]++;
    return cached;
  }
  /**
  * Obtiene datos del cache
  */
  async getFromCache(key) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[21]++;
    cov_2ps24mzjhd().s[110]++;
    try {
      // Intentar cache enterprise primero
      const enterpriseResult =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[111]++, await _enterprisecachesystem.enterpriseCacheSystem.get(key));
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[112]++;
      if (enterpriseResult !== null) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[14][0]++;
        cov_2ps24mzjhd().s[113]++;
        return enterpriseResult;
      } else
      /* istanbul ignore next */
      {
        cov_2ps24mzjhd().b[14][1]++;
      }
      // Fallback a cache manager básico
      cov_2ps24mzjhd().s[114]++;
      return await _cachemanager.cacheManager.get(key);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[115]++;
      _logger.logger.error(_logger.LogCategory.CACHE, `Error obteniendo del cache: ${key}`, error);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[116]++;
      return null;
    }
  }
  /**
  * Guarda datos en el cache
  */
  async setToCache(key, data, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[22]++;
    cov_2ps24mzjhd().s[117]++;
    try {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[118]++;
      // Usar cache enterprise si está disponible
      await _enterprisecachesystem.enterpriseCacheSystem.set(key, data, {
        ttl: config.ttl,
        compress: config.compressionEnabled,
        serialize: true,
        enableMetrics: config.analyticsEnabled
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[119]++;
      _logger.logger.error(_logger.LogCategory.CACHE, `Error guardando en cache: ${key}`, error);
    }
  }
  /**
  * Revalidación en background
  */
  async revalidateInBackground(key, fetcher, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[23]++;
    cov_2ps24mzjhd().s[120]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[121]++, await fetcher());
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[122]++;
      await this.setToCache(key, data, config);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[123]++;
      _logger.logger.info(_logger.LogCategory.CACHE, `Revalidación completada para: ${key}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[124]++;
      _logger.logger.error(_logger.LogCategory.CACHE, `Error en revalidación: ${key}`, error);
    }
  }
  /**
  * Evalúa condiciones para estrategia adaptativa
  */
  async evaluateConditions(config, context) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[24]++;
    cov_2ps24mzjhd().s[125]++;
    if (
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[16][0]++, !config.conditions) ||
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[16][1]++, !context)) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[15][0]++;
      cov_2ps24mzjhd().s[126]++;
      return config;
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[15][1]++;
    }
    const modifiedConfig =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[127]++, {
      ...config
    });
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[128]++;
    for (const condition of config.conditions) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[129]++;
      if (this.evaluateCondition(condition, context)) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[17][0]++;
        cov_2ps24mzjhd().s[130]++;
        if (
        /* istanbul ignore next */
        (cov_2ps24mzjhd().b[19][0]++, condition.action === 'modify') &&
        /* istanbul ignore next */
        (cov_2ps24mzjhd().b[19][1]++, condition.modifyTtl)) {
          /* istanbul ignore next */
          cov_2ps24mzjhd().b[18][0]++;
          cov_2ps24mzjhd().s[131]++;
          modifiedConfig.ttl = condition.modifyTtl;
        } else
        /* istanbul ignore next */
        {
          cov_2ps24mzjhd().b[18][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2ps24mzjhd().b[17][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[132]++;
    return modifiedConfig;
  }
  /**
  * Evalúa una condición específica
  */
  evaluateCondition(condition, context) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[25]++;
    let contextValue;
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[133]++;
    switch (condition.type) {
      case 'device':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[20][0]++;
        cov_2ps24mzjhd().s[134]++;
        contextValue = context.deviceType;
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[135]++;
        break;
      case 'network':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[20][1]++;
        cov_2ps24mzjhd().s[136]++;
        contextValue = context.connectionType;
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[137]++;
        break;
      case 'user':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[20][2]++;
        cov_2ps24mzjhd().s[138]++;
        contextValue = context.userId;
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[139]++;
        break;
      case 'location':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[20][3]++;
        cov_2ps24mzjhd().s[140]++;
        contextValue = context.location;
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[141]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[20][4]++;
        cov_2ps24mzjhd().s[142]++;
        return false;
    }
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[143]++;
    switch (condition.operator) {
      case 'eq':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][0]++;
        cov_2ps24mzjhd().s[144]++;
        return contextValue === condition.value;
      case 'gt':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][1]++;
        cov_2ps24mzjhd().s[145]++;
        return contextValue > condition.value;
      case 'lt':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][2]++;
        cov_2ps24mzjhd().s[146]++;
        return contextValue < condition.value;
      case 'in':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][3]++;
        cov_2ps24mzjhd().s[147]++;
        return /* istanbul ignore next */(cov_2ps24mzjhd().b[22][0]++, Array.isArray(condition.value)) &&
        /* istanbul ignore next */
        (cov_2ps24mzjhd().b[22][1]++, condition.value.includes(contextValue));
      case 'contains':
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][4]++;
        cov_2ps24mzjhd().s[148]++;
        return /* istanbul ignore next */(cov_2ps24mzjhd().b[23][0]++, typeof contextValue === 'string') &&
        /* istanbul ignore next */
        (cov_2ps24mzjhd().b[23][1]++, contextValue.includes(condition.value));
      default:
        /* istanbul ignore next */
        cov_2ps24mzjhd().b[21][5]++;
        cov_2ps24mzjhd().s[149]++;
        return false;
    }
  }
  /**
  * Registra métricas de performance
  */
  async recordMetrics(strategyName, startTime, success) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[26]++;
    const responseTime =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[150]++, Date.now() - startTime);
    const existing =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[151]++,
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[24][0]++, this.metrics.get(strategyName)) ||
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[24][1]++, {
      hits: 0,
      misses: 0,
      hitRate: 0,
      avgResponseTime: 0,
      totalRequests: 0,
      bytesServed: 0,
      lastUpdated: Date.now(),
      strategy:
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[25][0]++, this.strategies.get(strategyName)?.strategy) ||
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[25][1]++, "cache-first")
    }));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[152]++;
    existing.totalRequests++;
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[153]++;
    if (success) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[26][0]++;
      cov_2ps24mzjhd().s[154]++;
      existing.hits++;
    } else {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[26][1]++;
      cov_2ps24mzjhd().s[155]++;
      existing.misses++;
    }
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[156]++;
    existing.hitRate = existing.hits / existing.totalRequests * 100;
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[157]++;
    existing.avgResponseTime = (existing.avgResponseTime * (existing.totalRequests - 1) + responseTime) / existing.totalRequests;
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[158]++;
    existing.lastUpdated = Date.now();
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[159]++;
    this.metrics.set(strategyName, existing);
  }
  /**
  * Obtiene métricas de una estrategia
  */
  getMetrics(strategyName) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[27]++;
    cov_2ps24mzjhd().s[160]++;
    return /* istanbul ignore next */(cov_2ps24mzjhd().b[27][0]++, this.metrics.get(strategyName)) ||
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[27][1]++, null);
  }
  /**
  * Obtiene todas las métricas
  */
  getAllMetrics() {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[28]++;
    const result =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[161]++, {});
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[162]++;
    this.metrics.forEach((metrics, strategy) => {
      /* istanbul ignore next */
      cov_2ps24mzjhd().f[29]++;
      cov_2ps24mzjhd().s[163]++;
      result[strategy] = metrics;
    });
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[164]++;
    return result;
  }
  /**
  * Registra una nueva estrategia
  */
  registerStrategy(name, config) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[30]++;
    cov_2ps24mzjhd().s[165]++;
    this.strategies.set(name, config);
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[166]++;
    _logger.logger.info(_logger.LogCategory.CACHE, `Estrategia registrada: ${name}`);
  }
  /**
  * Invalida cache por tags
  */
  async invalidateByTags(tags) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[31]++;
    cov_2ps24mzjhd().s[167]++;
    try {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[168]++;
      await _enterprisecachesystem.enterpriseCacheSystem.invalidateByTags(tags);
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[169]++;
      _logger.logger.info(_logger.LogCategory.CACHE, `Cache invalidado por tags: ${tags.join(', ')}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[170]++;
      _logger.logger.error(_logger.LogCategory.CACHE, 'Error invalidando cache por tags', error);
    }
  }
  /**
  * Precalienta cache para keys específicos
  */
  async warmupCache(keys, fetchers, strategyName) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[32]++;
    const strategy =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[171]++, this.strategies.get(strategyName));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[172]++;
    if (
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[29][0]++, !strategy) ||
    /* istanbul ignore next */
    (cov_2ps24mzjhd().b[29][1]++, !strategy.warmupEnabled)) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[28][0]++;
      cov_2ps24mzjhd().s[173]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[28][1]++;
    }
    const warmupPromises =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[174]++, keys.map(async (key, index) => {
      /* istanbul ignore next */
      cov_2ps24mzjhd().f[33]++;
      cov_2ps24mzjhd().s[175]++;
      try {
        const fetcher =
        /* istanbul ignore next */
        (cov_2ps24mzjhd().s[176]++, fetchers[index]);
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[177]++;
        if (fetcher) {
          /* istanbul ignore next */
          cov_2ps24mzjhd().b[30][0]++;
          cov_2ps24mzjhd().s[178]++;
          await this.execute(key, fetcher, strategyName);
          /* istanbul ignore next */
          cov_2ps24mzjhd().s[179]++;
          _logger.logger.info(_logger.LogCategory.CACHE, `Cache precalentado para: ${key}`);
        } else
        /* istanbul ignore next */
        {
          cov_2ps24mzjhd().b[30][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2ps24mzjhd().s[180]++;
        _logger.logger.error(_logger.LogCategory.CACHE, `Error precalentando cache: ${key}`, error);
      }
    }));
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[181]++;
    await Promise.allSettled(warmupPromises);
  }
}
const advancedCacheStrategyManager =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[182]++, AdvancedCacheStrategyManager.getInstance());
function withCacheStrategy(strategyName, keyGenerator) {
  /* istanbul ignore next */
  cov_2ps24mzjhd().f[34]++;
  cov_2ps24mzjhd().s[183]++;
  return function (target, propertyName, descriptor) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[35]++;
    const method =
    /* istanbul ignore next */
    (cov_2ps24mzjhd().s[184]++, descriptor.value);
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[185]++;
    descriptor.value = async function (...args) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().f[36]++;
      const key =
      /* istanbul ignore next */
      (cov_2ps24mzjhd().s[186]++, keyGenerator ?
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[31][0]++, keyGenerator(...args)) :
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[31][1]++, `${propertyName}:${JSON.stringify(args)}`));
      /* istanbul ignore next */
      cov_2ps24mzjhd().s[187]++;
      return advancedCacheStrategyManager.execute(key, () => {
        /* istanbul ignore next */
        cov_2ps24mzjhd().f[37]++;
        cov_2ps24mzjhd().s[188]++;
        return method.apply(this, args);
      }, strategyName);
    };
    /* istanbul ignore next */
    cov_2ps24mzjhd().s[189]++;
    return descriptor;
  };
}
const CacheStrategyUtils =
/* istanbul ignore next */
(cov_2ps24mzjhd().s[190]++, {
  /**
  * Crea contexto de cache basado en request
  */
  createContext(request) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[38]++;
    cov_2ps24mzjhd().s[191]++;
    return {
      userAgent: request?.headers?.['user-agent'],
      connectionType: this.detectConnectionType(request),
      deviceType: this.detectDeviceType(request?.headers?.['user-agent']),
      timestamp: Date.now(),
      priority: 'normal'
    };
  },
  /**
  * Detecta tipo de conexión
  */
  detectConnectionType(request) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[39]++;
    cov_2ps24mzjhd().s[192]++;
    // Lógica para detectar tipo de conexión
    return 'fast'; // Placeholder
  },
  /**
  * Detecta tipo de dispositivo
  */
  detectDeviceType(userAgent) {
    /* istanbul ignore next */
    cov_2ps24mzjhd().f[40]++;
    cov_2ps24mzjhd().s[193]++;
    if (!userAgent) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[32][0]++;
      cov_2ps24mzjhd().s[194]++;
      return 'desktop';
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[32][1]++;
    }
    cov_2ps24mzjhd().s[195]++;
    if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {
      /* istanbul ignore next */
      cov_2ps24mzjhd().b[33][0]++;
      cov_2ps24mzjhd().s[196]++;
      return /iPad/.test(userAgent) ?
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[34][0]++, 'tablet') :
      /* istanbul ignore next */
      (cov_2ps24mzjhd().b[34][1]++, 'mobile');
    } else
    /* istanbul ignore next */
    {
      cov_2ps24mzjhd().b[33][1]++;
    }
    cov_2ps24mzjhd().s[197]++;
    return 'desktop';
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,