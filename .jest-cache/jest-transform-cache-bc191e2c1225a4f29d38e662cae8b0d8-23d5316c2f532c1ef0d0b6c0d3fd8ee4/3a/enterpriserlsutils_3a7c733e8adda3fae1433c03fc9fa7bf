de58917682989bdbf3a0441a49eb4bfb
/**
 * Utilidades RLS Enterprise
 * Integración entre Row Level Security de Supabase y autenticación enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get checkRLSPermission () {
        return checkRLSPermission;
    },
    get createRLSFilters () {
        return createRLSFilters;
    },
    get createUserSupabaseClient () {
        return createUserSupabaseClient;
    },
    get executeWithRLS () {
        return executeWithRLS;
    },
    get testRLSPolicies () {
        return testRLSPolicies;
    },
    get validateRLSContext () {
        return validateRLSContext;
    },
    get withRLS () {
        return withRLS;
    }
});
const _supabasejs = require("@supabase/supabase-js");
const _supabase = require("../integrations/supabase");
async function validateRLSContext(enterpriseContext) {
    try {
        if (!_supabase.supabaseAdmin) {
            return {
                valid: false,
                error: 'Supabase admin client no disponible',
                code: 'SUPABASE_UNAVAILABLE'
            };
        }
        // Obtener información del usuario desde Supabase
        const { data: userProfile, error: profileError } = await _supabase.supabaseAdmin.from('user_profiles').select('id, supabase_user_id, role_id, permissions, is_active, user_roles(role_name)').eq('clerk_user_id', enterpriseContext.userId).single();
        if (profileError) {
            console.error('[RLS] Error obteniendo perfil de usuario:', profileError);
            return {
                valid: false,
                error: 'Error obteniendo perfil de usuario',
                code: 'PROFILE_ERROR'
            };
        }
        if (!userProfile || !userProfile.is_active) {
            return {
                valid: false,
                error: 'Usuario inactivo o no encontrado',
                code: 'USER_INACTIVE'
            };
        }
        // Crear contexto RLS
        const rlsContext = {
            userId: enterpriseContext.userId,
            supabaseUserId: userProfile.supabase_user_id,
            role: userProfile.user_roles?.role_name || 'user',
            permissions: userProfile.permissions || [],
            isActive: userProfile.is_active
        };
        return {
            valid: true,
            context: rlsContext
        };
    } catch (error) {
        console.error('[RLS] Error validando contexto RLS:', error);
        return {
            valid: false,
            error: 'Error interno validando RLS',
            code: 'INTERNAL_ERROR'
        };
    }
}
function createUserSupabaseClient(supabaseUserId, accessToken) {
    try {
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
        const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
        if (!supabaseUrl || !supabaseAnonKey) {
            console.error('[RLS] Configuración de Supabase no disponible');
            return null;
        }
        // Crear cliente con contexto de usuario
        const client = (0, _supabasejs.createClient)(supabaseUrl, supabaseAnonKey, {
            auth: {
                autoRefreshToken: false,
                persistSession: false
            },
            global: {
                headers: {
                    'X-User-ID': supabaseUserId,
                    ...accessToken && {
                        Authorization: `Bearer ${accessToken}`
                    }
                }
            }
        });
        return client;
    } catch (error) {
        console.error('[RLS] Error creando cliente Supabase de usuario:', error);
        return null;
    }
}
async function executeWithRLS(enterpriseContext, queryFunction, options = {}) {
    try {
        // Validar contexto RLS
        const rlsValidation = await validateRLSContext(enterpriseContext);
        if (!rlsValidation.valid) {
            return {
                success: false,
                error: rlsValidation.error,
                code: rlsValidation.code
            };
        }
        const rlsContext = rlsValidation.context;
        // Determinar qué cliente usar
        let client;
        if (options.bypassRLS && enterpriseContext.role === 'admin') {
            // Admin puede usar cliente administrativo para bypass RLS
            client = _supabase.supabaseAdmin;
            console.log('[RLS] Usando cliente admin para bypass RLS');
        } else if (rlsContext.supabaseUserId) {
            // Usar cliente con contexto de usuario para RLS
            client = createUserSupabaseClient(rlsContext.supabaseUserId);
            if (!client) {
                return {
                    success: false,
                    error: 'Error creando cliente de usuario',
                    code: 'CLIENT_ERROR'
                };
            }
            console.log('[RLS] Usando cliente de usuario con RLS');
        } else {
            // Fallback a cliente admin
            client = _supabase.supabaseAdmin;
            console.log('[RLS] Usando cliente admin como fallback');
        }
        // Ejecutar consulta
        const result = await queryFunction(client, rlsContext);
        // Log de auditoría si está habilitado
        if (options.auditLog) {
            await logRLSOperation(enterpriseContext, 'query_executed', {
                bypassRLS: options.bypassRLS,
                adminOverride: options.adminOverride,
                success: true
            });
        }
        return {
            success: true,
            data: result
        };
    } catch (error) {
        console.error('[RLS] Error ejecutando consulta con RLS:', error);
        // Log de auditoría para errores
        if (options.auditLog) {
            await logRLSOperation(enterpriseContext, 'query_error', {
                error: error.message,
                bypassRLS: options.bypassRLS,
                adminOverride: options.adminOverride
            });
        }
        return {
            success: false,
            error: 'Error ejecutando consulta',
            code: 'QUERY_ERROR'
        };
    }
}
function checkRLSPermission(rlsContext, requiredPermission, resourceOwner) {
    // Admin siempre tiene acceso
    if (rlsContext.role === 'admin') {
        return true;
    }
    // Verificar permiso específico
    if (rlsContext.permissions.includes(requiredPermission)) {
        return true;
    }
    // Verificar si es el propietario del recurso
    if (resourceOwner && resourceOwner === rlsContext.userId) {
        return true;
    }
    return false;
}
function createRLSFilters(rlsContext, tableName) {
    const filters = {};
    switch(tableName){
        case 'user_profiles':
            if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {
                // Los usuarios solo pueden ver su propio perfil
                filters.clerk_user_id = rlsContext.userId;
            }
            break;
        case 'orders':
            if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {
                // Los usuarios solo pueden ver sus propias órdenes
                filters.user_id = rlsContext.userId;
            }
            break;
        case 'products':
            if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {
                // Los usuarios solo pueden ver productos activos
                filters.is_active = true;
            }
            break;
        default:
            break;
    }
    return filters;
}
function withRLS(options = {}) {
    return function(handler) {
        return async (request, ...args)=>{
            try {
                // Obtener contexto enterprise del request
                const enterpriseContext = request.enterpriseAuth;
                if (!enterpriseContext) {
                    const errorResponse = {
                        success: false,
                        error: 'Contexto enterprise no disponible',
                        code: 'NO_ENTERPRISE_CONTEXT',
                        timestamp: new Date().toISOString()
                    };
                    if ('query' in request) {
                        // Pages Router
                        const res = args[0];
                        return res.status(401).json(errorResponse);
                    } else {
                        // App Router
                        return new Response(JSON.stringify(errorResponse), {
                            status: 401,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                    }
                }
                // Validar contexto RLS
                const rlsValidation = await validateRLSContext(enterpriseContext);
                if (!rlsValidation.valid) {
                    const errorResponse = {
                        success: false,
                        error: rlsValidation.error,
                        code: rlsValidation.code,
                        rls: true,
                        timestamp: new Date().toISOString()
                    };
                    if ('query' in request) {
                        // Pages Router
                        const res = args[0];
                        return res.status(403).json(errorResponse);
                    } else {
                        // App Router
                        return new Response(JSON.stringify(errorResponse), {
                            status: 403,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                    }
                }
                // Añadir contexto RLS al request
                ;
                request.rlsContext = rlsValidation.context;
                return handler(request, ...args);
            } catch (error) {
                console.error('[RLS] Error en middleware RLS:', error);
                const errorResponse = {
                    success: false,
                    error: 'Error interno en middleware RLS',
                    code: 'RLS_MIDDLEWARE_ERROR',
                    timestamp: new Date().toISOString()
                };
                if ('query' in request) {
                    // Pages Router
                    const res = args[0];
                    return res.status(500).json(errorResponse);
                } else {
                    // App Router
                    return new Response(JSON.stringify(errorResponse), {
                        status: 500,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }
            }
        };
    };
}
// =====================================================
// FUNCIONES DE AUDITORÍA
// =====================================================
/**
 * Log de operaciones RLS para auditoría
 */ async function logRLSOperation(enterpriseContext, operation, metadata) {
    try {
        if (!_supabase.supabaseAdmin) {
            return;
        }
        await _supabase.supabaseAdmin.from('security_audit_logs').insert({
            user_id: enterpriseContext.userId,
            event_type: 'RLS_OPERATION',
            event_category: 'database_access',
            severity: 'info',
            description: `RLS operation: ${operation}`,
            metadata: {
                operation,
                role: enterpriseContext.role,
                permissions: enterpriseContext.permissions,
                security_level: enterpriseContext.securityLevel,
                ...metadata
            },
            ip_address: enterpriseContext.ipAddress,
            user_agent: enterpriseContext.userAgent,
            created_at: new Date().toISOString()
        });
    } catch (error) {
        console.error('[RLS] Error logging RLS operation:', error);
    }
}
async function testRLSPolicies(tableName, testCases) {
    const results = [];
    for (const testCase of testCases){
        try {
            // Implementar lógica de testing específica
            // Esta función se puede expandir para testing automatizado
            results.push({
                name: testCase.name,
                passed: true
            });
        } catch (error) {
            results.push({
                name: testCase.name,
                passed: false,
                error: error.message
            });
        }
    }
    return results;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxhdXRoXFxlbnRlcnByaXNlLXJscy11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpZGFkZXMgUkxTIEVudGVycHJpc2VcbiAqIEludGVncmFjacOzbiBlbnRyZSBSb3cgTGV2ZWwgU2VjdXJpdHkgZGUgU3VwYWJhc2UgeSBhdXRlbnRpY2FjacOzbiBlbnRlcnByaXNlXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJ1xuaW1wb3J0IHsgc3VwYWJhc2VBZG1pbiB9IGZyb20gJ0AvbGliL2ludGVncmF0aW9ucy9zdXBhYmFzZSdcbmltcG9ydCB0eXBlIHsgRW50ZXJwcmlzZUF1dGhDb250ZXh0IH0gZnJvbSAnLi9lbnRlcnByaXNlLWF1dGgtdXRpbHMnXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUSVBPUyBZIElOVEVSRkFDRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBpbnRlcmZhY2UgUkxTQ29udGV4dCB7XG4gIHVzZXJJZDogc3RyaW5nXG4gIHN1cGFiYXNlVXNlcklkPzogc3RyaW5nXG4gIHJvbGU6ICdhZG1pbicgfCAndXNlcicgfCAnbW9kZXJhdG9yJ1xuICBwZXJtaXNzaW9uczogc3RyaW5nW11cbiAgaXNBY3RpdmU6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSTFNWYWxpZGF0aW9uUmVzdWx0IHtcbiAgdmFsaWQ6IGJvb2xlYW5cbiAgY29udGV4dD86IFJMU0NvbnRleHRcbiAgZXJyb3I/OiBzdHJpbmdcbiAgY29kZT86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJMU1F1ZXJ5T3B0aW9ucyB7XG4gIGVuZm9yY2VSTFM/OiBib29sZWFuXG4gIGJ5cGFzc1JMUz86IGJvb2xlYW5cbiAgYWRtaW5PdmVycmlkZT86IGJvb2xlYW5cbiAgYXVkaXRMb2c/OiBib29sZWFuXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBGVU5DSU9ORVMgREUgVkFMSURBQ0nDk04gUkxTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIFZhbGlkYSBlbCBjb250ZXh0byBSTFMgcGFyYSB1biB1c3VhcmlvXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVJMU0NvbnRleHQoXG4gIGVudGVycHJpc2VDb250ZXh0OiBFbnRlcnByaXNlQXV0aENvbnRleHRcbik6IFByb21pc2U8UkxTVmFsaWRhdGlvblJlc3VsdD4ge1xuICB0cnkge1xuICAgIGlmICghc3VwYWJhc2VBZG1pbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1N1cGFiYXNlIGFkbWluIGNsaWVudCBubyBkaXNwb25pYmxlJyxcbiAgICAgICAgY29kZTogJ1NVUEFCQVNFX1VOQVZBSUxBQkxFJyxcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPYnRlbmVyIGluZm9ybWFjacOzbiBkZWwgdXN1YXJpbyBkZXNkZSBTdXBhYmFzZVxuICAgIGNvbnN0IHsgZGF0YTogdXNlclByb2ZpbGUsIGVycm9yOiBwcm9maWxlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcbiAgICAgIC5zZWxlY3QoJ2lkLCBzdXBhYmFzZV91c2VyX2lkLCByb2xlX2lkLCBwZXJtaXNzaW9ucywgaXNfYWN0aXZlLCB1c2VyX3JvbGVzKHJvbGVfbmFtZSknKVxuICAgICAgLmVxKCdjbGVya191c2VyX2lkJywgZW50ZXJwcmlzZUNvbnRleHQudXNlcklkKVxuICAgICAgLnNpbmdsZSgpXG5cbiAgICBpZiAocHJvZmlsZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbUkxTXSBFcnJvciBvYnRlbmllbmRvIHBlcmZpbCBkZSB1c3VhcmlvOicsIHByb2ZpbGVFcnJvcilcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdFcnJvciBvYnRlbmllbmRvIHBlcmZpbCBkZSB1c3VhcmlvJyxcbiAgICAgICAgY29kZTogJ1BST0ZJTEVfRVJST1InLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXNlclByb2ZpbGUgfHwgIXVzZXJQcm9maWxlLmlzX2FjdGl2ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1VzdWFyaW8gaW5hY3Rpdm8gbyBubyBlbmNvbnRyYWRvJyxcbiAgICAgICAgY29kZTogJ1VTRVJfSU5BQ1RJVkUnLFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWFyIGNvbnRleHRvIFJMU1xuICAgIGNvbnN0IHJsc0NvbnRleHQ6IFJMU0NvbnRleHQgPSB7XG4gICAgICB1c2VySWQ6IGVudGVycHJpc2VDb250ZXh0LnVzZXJJZCxcbiAgICAgIHN1cGFiYXNlVXNlcklkOiB1c2VyUHJvZmlsZS5zdXBhYmFzZV91c2VyX2lkLFxuICAgICAgcm9sZTogKHVzZXJQcm9maWxlLnVzZXJfcm9sZXMgYXMgYW55KT8ucm9sZV9uYW1lIHx8ICd1c2VyJyxcbiAgICAgIHBlcm1pc3Npb25zOiB1c2VyUHJvZmlsZS5wZXJtaXNzaW9ucyB8fCBbXSxcbiAgICAgIGlzQWN0aXZlOiB1c2VyUHJvZmlsZS5pc19hY3RpdmUsXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgY29udGV4dDogcmxzQ29udGV4dCxcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1JMU10gRXJyb3IgdmFsaWRhbmRvIGNvbnRleHRvIFJMUzonLCBlcnJvcilcbiAgICByZXR1cm4ge1xuICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIHZhbGlkYW5kbyBSTFMnLFxuICAgICAgY29kZTogJ0lOVEVSTkFMX0VSUk9SJyxcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhIHVuIGNsaWVudGUgU3VwYWJhc2UgY29uIGNvbnRleHRvIGRlIHVzdWFyaW8gcGFyYSBSTFNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVzZXJTdXBhYmFzZUNsaWVudChcbiAgc3VwYWJhc2VVc2VySWQ6IHN0cmluZyxcbiAgYWNjZXNzVG9rZW4/OiBzdHJpbmdcbik6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUNsaWVudD4gfCBudWxsIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTFxuICAgIGNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZXG5cbiAgICBpZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tSTFNdIENvbmZpZ3VyYWNpw7NuIGRlIFN1cGFiYXNlIG5vIGRpc3BvbmlibGUnKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyBDcmVhciBjbGllbnRlIGNvbiBjb250ZXh0byBkZSB1c3VhcmlvXG4gICAgY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXksIHtcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgYXV0b1JlZnJlc2hUb2tlbjogZmFsc2UsXG4gICAgICAgIHBlcnNpc3RTZXNzaW9uOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBnbG9iYWw6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLVVzZXItSUQnOiBzdXBhYmFzZVVzZXJJZCxcbiAgICAgICAgICAuLi4oYWNjZXNzVG9rZW4gJiYgeyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YWNjZXNzVG9rZW59YCB9KSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIHJldHVybiBjbGllbnRcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbUkxTXSBFcnJvciBjcmVhbmRvIGNsaWVudGUgU3VwYWJhc2UgZGUgdXN1YXJpbzonLCBlcnJvcilcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKlxuICogRWplY3V0YSB1bmEgY29uc3VsdGEgY29uIGNvbnRleHRvIFJMU1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVdpdGhSTFM8VD4oXG4gIGVudGVycHJpc2VDb250ZXh0OiBFbnRlcnByaXNlQXV0aENvbnRleHQsXG4gIHF1ZXJ5RnVuY3Rpb246IChjbGllbnQ6IGFueSwgcmxzQ29udGV4dDogUkxTQ29udGV4dCkgPT4gUHJvbWlzZTxUPixcbiAgb3B0aW9uczogUkxTUXVlcnlPcHRpb25zID0ge31cbik6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBkYXRhPzogVDsgZXJyb3I/OiBzdHJpbmc7IGNvZGU/OiBzdHJpbmcgfT4ge1xuICB0cnkge1xuICAgIC8vIFZhbGlkYXIgY29udGV4dG8gUkxTXG4gICAgY29uc3QgcmxzVmFsaWRhdGlvbiA9IGF3YWl0IHZhbGlkYXRlUkxTQ29udGV4dChlbnRlcnByaXNlQ29udGV4dClcbiAgICBpZiAoIXJsc1ZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogcmxzVmFsaWRhdGlvbi5lcnJvcixcbiAgICAgICAgY29kZTogcmxzVmFsaWRhdGlvbi5jb2RlLFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJsc0NvbnRleHQgPSBybHNWYWxpZGF0aW9uLmNvbnRleHQhXG5cbiAgICAvLyBEZXRlcm1pbmFyIHF1w6kgY2xpZW50ZSB1c2FyXG4gICAgbGV0IGNsaWVudFxuICAgIGlmIChvcHRpb25zLmJ5cGFzc1JMUyAmJiBlbnRlcnByaXNlQ29udGV4dC5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAvLyBBZG1pbiBwdWVkZSB1c2FyIGNsaWVudGUgYWRtaW5pc3RyYXRpdm8gcGFyYSBieXBhc3MgUkxTXG4gICAgICBjbGllbnQgPSBzdXBhYmFzZUFkbWluXG4gICAgICBjb25zb2xlLmxvZygnW1JMU10gVXNhbmRvIGNsaWVudGUgYWRtaW4gcGFyYSBieXBhc3MgUkxTJylcbiAgICB9IGVsc2UgaWYgKHJsc0NvbnRleHQuc3VwYWJhc2VVc2VySWQpIHtcbiAgICAgIC8vIFVzYXIgY2xpZW50ZSBjb24gY29udGV4dG8gZGUgdXN1YXJpbyBwYXJhIFJMU1xuICAgICAgY2xpZW50ID0gY3JlYXRlVXNlclN1cGFiYXNlQ2xpZW50KHJsc0NvbnRleHQuc3VwYWJhc2VVc2VySWQpXG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnRXJyb3IgY3JlYW5kbyBjbGllbnRlIGRlIHVzdWFyaW8nLFxuICAgICAgICAgIGNvZGU6ICdDTElFTlRfRVJST1InLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnW1JMU10gVXNhbmRvIGNsaWVudGUgZGUgdXN1YXJpbyBjb24gUkxTJylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgYSBjbGllbnRlIGFkbWluXG4gICAgICBjbGllbnQgPSBzdXBhYmFzZUFkbWluXG4gICAgICBjb25zb2xlLmxvZygnW1JMU10gVXNhbmRvIGNsaWVudGUgYWRtaW4gY29tbyBmYWxsYmFjaycpXG4gICAgfVxuXG4gICAgLy8gRWplY3V0YXIgY29uc3VsdGFcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeUZ1bmN0aW9uKGNsaWVudCwgcmxzQ29udGV4dClcblxuICAgIC8vIExvZyBkZSBhdWRpdG9yw61hIHNpIGVzdMOhIGhhYmlsaXRhZG9cbiAgICBpZiAob3B0aW9ucy5hdWRpdExvZykge1xuICAgICAgYXdhaXQgbG9nUkxTT3BlcmF0aW9uKGVudGVycHJpc2VDb250ZXh0LCAncXVlcnlfZXhlY3V0ZWQnLCB7XG4gICAgICAgIGJ5cGFzc1JMUzogb3B0aW9ucy5ieXBhc3NSTFMsXG4gICAgICAgIGFkbWluT3ZlcnJpZGU6IG9wdGlvbnMuYWRtaW5PdmVycmlkZSxcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiByZXN1bHQsXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tSTFNdIEVycm9yIGVqZWN1dGFuZG8gY29uc3VsdGEgY29uIFJMUzonLCBlcnJvcilcblxuICAgIC8vIExvZyBkZSBhdWRpdG9yw61hIHBhcmEgZXJyb3Jlc1xuICAgIGlmIChvcHRpb25zLmF1ZGl0TG9nKSB7XG4gICAgICBhd2FpdCBsb2dSTFNPcGVyYXRpb24oZW50ZXJwcmlzZUNvbnRleHQsICdxdWVyeV9lcnJvcicsIHtcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGJ5cGFzc1JMUzogb3B0aW9ucy5ieXBhc3NSTFMsXG4gICAgICAgIGFkbWluT3ZlcnJpZGU6IG9wdGlvbnMuYWRtaW5PdmVycmlkZSxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdFcnJvciBlamVjdXRhbmRvIGNvbnN1bHRhJyxcbiAgICAgIGNvZGU6ICdRVUVSWV9FUlJPUicsXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmVyaWZpY2EgcGVybWlzb3MgZXNwZWPDrWZpY29zIHBhcmEgb3BlcmFjaW9uZXMgUkxTXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JMU1Blcm1pc3Npb24oXG4gIHJsc0NvbnRleHQ6IFJMU0NvbnRleHQsXG4gIHJlcXVpcmVkUGVybWlzc2lvbjogc3RyaW5nLFxuICByZXNvdXJjZU93bmVyPzogc3RyaW5nXG4pOiBib29sZWFuIHtcbiAgLy8gQWRtaW4gc2llbXByZSB0aWVuZSBhY2Nlc29cbiAgaWYgKHJsc0NvbnRleHQucm9sZSA9PT0gJ2FkbWluJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBWZXJpZmljYXIgcGVybWlzbyBlc3BlY8OtZmljb1xuICBpZiAocmxzQ29udGV4dC5wZXJtaXNzaW9ucy5pbmNsdWRlcyhyZXF1aXJlZFBlcm1pc3Npb24pKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIFZlcmlmaWNhciBzaSBlcyBlbCBwcm9waWV0YXJpbyBkZWwgcmVjdXJzb1xuICBpZiAocmVzb3VyY2VPd25lciAmJiByZXNvdXJjZU93bmVyID09PSBybHNDb250ZXh0LnVzZXJJZCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDcmVhIGZpbHRyb3MgUkxTIHBhcmEgY29uc3VsdGFzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSTFNGaWx0ZXJzKHJsc0NvbnRleHQ6IFJMU0NvbnRleHQsIHRhYmxlTmFtZTogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gIGNvbnN0IGZpbHRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fVxuXG4gIHN3aXRjaCAodGFibGVOYW1lKSB7XG4gICAgY2FzZSAndXNlcl9wcm9maWxlcyc6XG4gICAgICBpZiAocmxzQ29udGV4dC5yb2xlICE9PSAnYWRtaW4nICYmIHJsc0NvbnRleHQucm9sZSAhPT0gJ21vZGVyYXRvcicpIHtcbiAgICAgICAgLy8gTG9zIHVzdWFyaW9zIHNvbG8gcHVlZGVuIHZlciBzdSBwcm9waW8gcGVyZmlsXG4gICAgICAgIGZpbHRlcnMuY2xlcmtfdXNlcl9pZCA9IHJsc0NvbnRleHQudXNlcklkXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnb3JkZXJzJzpcbiAgICAgIGlmIChybHNDb250ZXh0LnJvbGUgIT09ICdhZG1pbicgJiYgcmxzQ29udGV4dC5yb2xlICE9PSAnbW9kZXJhdG9yJykge1xuICAgICAgICAvLyBMb3MgdXN1YXJpb3Mgc29sbyBwdWVkZW4gdmVyIHN1cyBwcm9waWFzIMOzcmRlbmVzXG4gICAgICAgIGZpbHRlcnMudXNlcl9pZCA9IHJsc0NvbnRleHQudXNlcklkXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSAncHJvZHVjdHMnOlxuICAgICAgaWYgKHJsc0NvbnRleHQucm9sZSAhPT0gJ2FkbWluJyAmJiBybHNDb250ZXh0LnJvbGUgIT09ICdtb2RlcmF0b3InKSB7XG4gICAgICAgIC8vIExvcyB1c3VhcmlvcyBzb2xvIHB1ZWRlbiB2ZXIgcHJvZHVjdG9zIGFjdGl2b3NcbiAgICAgICAgZmlsdGVycy5pc19hY3RpdmUgPSB0cnVlXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFNpbiBmaWx0cm9zIGFkaWNpb25hbGVzIHBhcmEgb3RyYXMgdGFibGFzXG4gICAgICBicmVha1xuICB9XG5cbiAgcmV0dXJuIGZpbHRlcnNcbn1cblxuLyoqXG4gKiBNaWRkbGV3YXJlIFJMUyBwYXJhIEFQSXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhSTFMob3B0aW9uczogUkxTUXVlcnlPcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyOiBGdW5jdGlvbikge1xuICAgIHJldHVybiBhc3luYyAocmVxdWVzdDogYW55LCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gT2J0ZW5lciBjb250ZXh0byBlbnRlcnByaXNlIGRlbCByZXF1ZXN0XG4gICAgICAgIGNvbnN0IGVudGVycHJpc2VDb250ZXh0ID0gKHJlcXVlc3QgYXMgYW55KS5lbnRlcnByaXNlQXV0aFxuXG4gICAgICAgIGlmICghZW50ZXJwcmlzZUNvbnRleHQpIHtcbiAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0ge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogJ0NvbnRleHRvIGVudGVycHJpc2Ugbm8gZGlzcG9uaWJsZScsXG4gICAgICAgICAgICBjb2RlOiAnTk9fRU5URVJQUklTRV9DT05URVhUJyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgncXVlcnknIGluIHJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIFBhZ2VzIFJvdXRlclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXJnc1swXSBhcyBhbnlcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbihlcnJvclJlc3BvbnNlKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBcHAgUm91dGVyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGVycm9yUmVzcG9uc2UpLCB7XG4gICAgICAgICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhciBjb250ZXh0byBSTFNcbiAgICAgICAgY29uc3QgcmxzVmFsaWRhdGlvbiA9IGF3YWl0IHZhbGlkYXRlUkxTQ29udGV4dChlbnRlcnByaXNlQ29udGV4dClcbiAgICAgICAgaWYgKCFybHNWYWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHJsc1ZhbGlkYXRpb24uZXJyb3IsXG4gICAgICAgICAgICBjb2RlOiBybHNWYWxpZGF0aW9uLmNvZGUsXG4gICAgICAgICAgICBybHM6IHRydWUsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJ3F1ZXJ5JyBpbiByZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBQYWdlcyBSb3V0ZXJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGFyZ3NbMF0gYXMgYW55XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oZXJyb3JSZXNwb25zZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQXBwIFJvdXRlclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShlcnJvclJlc3BvbnNlKSwge1xuICAgICAgICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEHDsWFkaXIgY29udGV4dG8gUkxTIGFsIHJlcXVlc3RcbiAgICAgICAgOyhyZXF1ZXN0IGFzIGFueSkucmxzQ29udGV4dCA9IHJsc1ZhbGlkYXRpb24uY29udGV4dFxuXG4gICAgICAgIHJldHVybiBoYW5kbGVyKHJlcXVlc3QsIC4uLmFyZ3MpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbUkxTXSBFcnJvciBlbiBtaWRkbGV3YXJlIFJMUzonLCBlcnJvcilcblxuICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnRXJyb3IgaW50ZXJubyBlbiBtaWRkbGV3YXJlIFJMUycsXG4gICAgICAgICAgY29kZTogJ1JMU19NSURETEVXQVJFX0VSUk9SJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgncXVlcnknIGluIHJlcXVlc3QpIHtcbiAgICAgICAgICAvLyBQYWdlcyBSb3V0ZXJcbiAgICAgICAgICBjb25zdCByZXMgPSBhcmdzWzBdIGFzIGFueVxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbihlcnJvclJlc3BvbnNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFwcCBSb3V0ZXJcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGVycm9yUmVzcG9uc2UpLCB7XG4gICAgICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZVTkNJT05FUyBERSBBVURJVE9Sw41BXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIExvZyBkZSBvcGVyYWNpb25lcyBSTFMgcGFyYSBhdWRpdG9yw61hXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvZ1JMU09wZXJhdGlvbihcbiAgZW50ZXJwcmlzZUNvbnRleHQ6IEVudGVycHJpc2VBdXRoQ29udGV4dCxcbiAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gIG1ldGFkYXRhOiBhbnlcbik6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGlmICghc3VwYWJhc2VBZG1pbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgYXdhaXQgc3VwYWJhc2VBZG1pbi5mcm9tKCdzZWN1cml0eV9hdWRpdF9sb2dzJykuaW5zZXJ0KHtcbiAgICAgIHVzZXJfaWQ6IGVudGVycHJpc2VDb250ZXh0LnVzZXJJZCxcbiAgICAgIGV2ZW50X3R5cGU6ICdSTFNfT1BFUkFUSU9OJyxcbiAgICAgIGV2ZW50X2NhdGVnb3J5OiAnZGF0YWJhc2VfYWNjZXNzJyxcbiAgICAgIHNldmVyaXR5OiAnaW5mbycsXG4gICAgICBkZXNjcmlwdGlvbjogYFJMUyBvcGVyYXRpb246ICR7b3BlcmF0aW9ufWAsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgIHJvbGU6IGVudGVycHJpc2VDb250ZXh0LnJvbGUsXG4gICAgICAgIHBlcm1pc3Npb25zOiBlbnRlcnByaXNlQ29udGV4dC5wZXJtaXNzaW9ucyxcbiAgICAgICAgc2VjdXJpdHlfbGV2ZWw6IGVudGVycHJpc2VDb250ZXh0LnNlY3VyaXR5TGV2ZWwsXG4gICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgfSxcbiAgICAgIGlwX2FkZHJlc3M6IGVudGVycHJpc2VDb250ZXh0LmlwQWRkcmVzcyxcbiAgICAgIHVzZXJfYWdlbnQ6IGVudGVycHJpc2VDb250ZXh0LnVzZXJBZ2VudCxcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tSTFNdIEVycm9yIGxvZ2dpbmcgUkxTIG9wZXJhdGlvbjonLCBlcnJvcilcbiAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVVRJTElEQURFUyBERSBURVNUSU5HXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIEZ1bmNpw7NuIHBhcmEgdGVzdGluZyBkZSBwb2zDrXRpY2FzIFJMU1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGVzdFJMU1BvbGljaWVzKFxuICB0YWJsZU5hbWU6IHN0cmluZyxcbiAgdGVzdENhc2VzOiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgdXNlclJvbGU6ICdhZG1pbicgfCAndXNlcicgfCAnbW9kZXJhdG9yJ1xuICAgIG9wZXJhdGlvbjogJ1NFTEVDVCcgfCAnSU5TRVJUJyB8ICdVUERBVEUnIHwgJ0RFTEVURSdcbiAgICBleHBlY3RlZFJlc3VsdDogJ2FsbG93JyB8ICdkZW55J1xuICAgIHRlc3REYXRhPzogYW55XG4gIH0+XG4pOiBQcm9taXNlPEFycmF5PHsgbmFtZTogc3RyaW5nOyBwYXNzZWQ6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+PiB7XG4gIGNvbnN0IHJlc3VsdHMgPSBbXVxuXG4gIGZvciAoY29uc3QgdGVzdENhc2Ugb2YgdGVzdENhc2VzKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEltcGxlbWVudGFyIGzDs2dpY2EgZGUgdGVzdGluZyBlc3BlY8OtZmljYVxuICAgICAgLy8gRXN0YSBmdW5jacOzbiBzZSBwdWVkZSBleHBhbmRpciBwYXJhIHRlc3RpbmcgYXV0b21hdGl6YWRvXG4gICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICBuYW1lOiB0ZXN0Q2FzZS5uYW1lLFxuICAgICAgICBwYXNzZWQ6IHRydWUsIC8vIFBsYWNlaG9sZGVyXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICBuYW1lOiB0ZXN0Q2FzZS5uYW1lLFxuICAgICAgICBwYXNzZWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHNcbn1cbiJdLCJuYW1lcyI6WyJjaGVja1JMU1Blcm1pc3Npb24iLCJjcmVhdGVSTFNGaWx0ZXJzIiwiY3JlYXRlVXNlclN1cGFiYXNlQ2xpZW50IiwiZXhlY3V0ZVdpdGhSTFMiLCJ0ZXN0UkxTUG9saWNpZXMiLCJ2YWxpZGF0ZVJMU0NvbnRleHQiLCJ3aXRoUkxTIiwiZW50ZXJwcmlzZUNvbnRleHQiLCJzdXBhYmFzZUFkbWluIiwidmFsaWQiLCJlcnJvciIsImNvZGUiLCJkYXRhIiwidXNlclByb2ZpbGUiLCJwcm9maWxlRXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJ1c2VySWQiLCJzaW5nbGUiLCJjb25zb2xlIiwiaXNfYWN0aXZlIiwicmxzQ29udGV4dCIsInN1cGFiYXNlVXNlcklkIiwic3VwYWJhc2VfdXNlcl9pZCIsInJvbGUiLCJ1c2VyX3JvbGVzIiwicm9sZV9uYW1lIiwicGVybWlzc2lvbnMiLCJpc0FjdGl2ZSIsImNvbnRleHQiLCJhY2Nlc3NUb2tlbiIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiY2xpZW50IiwiY3JlYXRlQ2xpZW50IiwiYXV0aCIsImF1dG9SZWZyZXNoVG9rZW4iLCJwZXJzaXN0U2Vzc2lvbiIsImdsb2JhbCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwicXVlcnlGdW5jdGlvbiIsIm9wdGlvbnMiLCJybHNWYWxpZGF0aW9uIiwic3VjY2VzcyIsImJ5cGFzc1JMUyIsImxvZyIsInJlc3VsdCIsImF1ZGl0TG9nIiwibG9nUkxTT3BlcmF0aW9uIiwiYWRtaW5PdmVycmlkZSIsIm1lc3NhZ2UiLCJyZXF1aXJlZFBlcm1pc3Npb24iLCJyZXNvdXJjZU93bmVyIiwiaW5jbHVkZXMiLCJ0YWJsZU5hbWUiLCJmaWx0ZXJzIiwiY2xlcmtfdXNlcl9pZCIsInVzZXJfaWQiLCJoYW5kbGVyIiwicmVxdWVzdCIsImFyZ3MiLCJlbnRlcnByaXNlQXV0aCIsImVycm9yUmVzcG9uc2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZXMiLCJzdGF0dXMiLCJqc29uIiwiUmVzcG9uc2UiLCJKU09OIiwic3RyaW5naWZ5IiwicmxzIiwib3BlcmF0aW9uIiwibWV0YWRhdGEiLCJpbnNlcnQiLCJldmVudF90eXBlIiwiZXZlbnRfY2F0ZWdvcnkiLCJzZXZlcml0eSIsImRlc2NyaXB0aW9uIiwic2VjdXJpdHlfbGV2ZWwiLCJzZWN1cml0eUxldmVsIiwiaXBfYWRkcmVzcyIsImlwQWRkcmVzcyIsInVzZXJfYWdlbnQiLCJ1c2VyQWdlbnQiLCJjcmVhdGVkX2F0IiwidGVzdENhc2VzIiwicmVzdWx0cyIsInRlc3RDYXNlIiwicHVzaCIsIm5hbWUiLCJwYXNzZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQzs7Ozs7Ozs7Ozs7UUEwTmVBO2VBQUFBOztRQTBCQUM7ZUFBQUE7O1FBL0lBQztlQUFBQTs7UUFxQ01DO2VBQUFBOztRQThRQUM7ZUFBQUE7O1FBalhBQztlQUFBQTs7UUFpUE5DO2VBQUFBOzs7NEJBdFJhOzBCQUNDO0FBb0N2QixlQUFlRCxtQkFDcEJFLGlCQUF3QztJQUV4QyxJQUFJO1FBQ0YsSUFBSSxDQUFDQyx1QkFBYSxFQUFFO1lBQ2xCLE9BQU87Z0JBQ0xDLE9BQU87Z0JBQ1BDLE9BQU87Z0JBQ1BDLE1BQU07WUFDUjtRQUNGO1FBRUEsaURBQWlEO1FBQ2pELE1BQU0sRUFBRUMsTUFBTUMsV0FBVyxFQUFFSCxPQUFPSSxZQUFZLEVBQUUsR0FBRyxNQUFNTix1QkFBYSxDQUNuRU8sSUFBSSxDQUFDLGlCQUNMQyxNQUFNLENBQUMsZ0ZBQ1BDLEVBQUUsQ0FBQyxpQkFBaUJWLGtCQUFrQlcsTUFBTSxFQUM1Q0MsTUFBTTtRQUVULElBQUlMLGNBQWM7WUFDaEJNLFFBQVFWLEtBQUssQ0FBQyw2Q0FBNkNJO1lBQzNELE9BQU87Z0JBQ0xMLE9BQU87Z0JBQ1BDLE9BQU87Z0JBQ1BDLE1BQU07WUFDUjtRQUNGO1FBRUEsSUFBSSxDQUFDRSxlQUFlLENBQUNBLFlBQVlRLFNBQVMsRUFBRTtZQUMxQyxPQUFPO2dCQUNMWixPQUFPO2dCQUNQQyxPQUFPO2dCQUNQQyxNQUFNO1lBQ1I7UUFDRjtRQUVBLHFCQUFxQjtRQUNyQixNQUFNVyxhQUF5QjtZQUM3QkosUUFBUVgsa0JBQWtCVyxNQUFNO1lBQ2hDSyxnQkFBZ0JWLFlBQVlXLGdCQUFnQjtZQUM1Q0MsTUFBTSxBQUFDWixZQUFZYSxVQUFVLEVBQVVDLGFBQWE7WUFDcERDLGFBQWFmLFlBQVllLFdBQVcsSUFBSSxFQUFFO1lBQzFDQyxVQUFVaEIsWUFBWVEsU0FBUztRQUNqQztRQUVBLE9BQU87WUFDTFosT0FBTztZQUNQcUIsU0FBU1I7UUFDWDtJQUNGLEVBQUUsT0FBT1osT0FBTztRQUNkVSxRQUFRVixLQUFLLENBQUMsdUNBQXVDQTtRQUNyRCxPQUFPO1lBQ0xELE9BQU87WUFDUEMsT0FBTztZQUNQQyxNQUFNO1FBQ1I7SUFDRjtBQUNGO0FBS08sU0FBU1QseUJBQ2RxQixjQUFzQixFQUN0QlEsV0FBb0I7SUFFcEIsSUFBSTtRQUNGLE1BQU1DLGNBQWNDLFFBQVFDLEdBQUcsQ0FBQ0Msd0JBQXdCO1FBQ3hELE1BQU1DLGtCQUFrQkgsUUFBUUMsR0FBRyxDQUFDRyw2QkFBNkI7UUFFakUsSUFBSSxDQUFDTCxlQUFlLENBQUNJLGlCQUFpQjtZQUNwQ2hCLFFBQVFWLEtBQUssQ0FBQztZQUNkLE9BQU87UUFDVDtRQUVBLHdDQUF3QztRQUN4QyxNQUFNNEIsU0FBU0MsSUFBQUEsd0JBQVksRUFBQ1AsYUFBYUksaUJBQWlCO1lBQ3hESSxNQUFNO2dCQUNKQyxrQkFBa0I7Z0JBQ2xCQyxnQkFBZ0I7WUFDbEI7WUFDQUMsUUFBUTtnQkFDTkMsU0FBUztvQkFDUCxhQUFhckI7b0JBQ2IsR0FBSVEsZUFBZTt3QkFBRWMsZUFBZSxDQUFDLE9BQU8sRUFBRWQsYUFBYTtvQkFBQyxDQUFDO2dCQUMvRDtZQUNGO1FBQ0Y7UUFFQSxPQUFPTztJQUNULEVBQUUsT0FBTzVCLE9BQU87UUFDZFUsUUFBUVYsS0FBSyxDQUFDLG9EQUFvREE7UUFDbEUsT0FBTztJQUNUO0FBQ0Y7QUFLTyxlQUFlUCxlQUNwQkksaUJBQXdDLEVBQ3hDdUMsYUFBa0UsRUFDbEVDLFVBQTJCLENBQUMsQ0FBQztJQUU3QixJQUFJO1FBQ0YsdUJBQXVCO1FBQ3ZCLE1BQU1DLGdCQUFnQixNQUFNM0MsbUJBQW1CRTtRQUMvQyxJQUFJLENBQUN5QyxjQUFjdkMsS0FBSyxFQUFFO1lBQ3hCLE9BQU87Z0JBQ0x3QyxTQUFTO2dCQUNUdkMsT0FBT3NDLGNBQWN0QyxLQUFLO2dCQUMxQkMsTUFBTXFDLGNBQWNyQyxJQUFJO1lBQzFCO1FBQ0Y7UUFFQSxNQUFNVyxhQUFhMEIsY0FBY2xCLE9BQU87UUFFeEMsOEJBQThCO1FBQzlCLElBQUlRO1FBQ0osSUFBSVMsUUFBUUcsU0FBUyxJQUFJM0Msa0JBQWtCa0IsSUFBSSxLQUFLLFNBQVM7WUFDM0QsMERBQTBEO1lBQzFEYSxTQUFTOUIsdUJBQWE7WUFDdEJZLFFBQVErQixHQUFHLENBQUM7UUFDZCxPQUFPLElBQUk3QixXQUFXQyxjQUFjLEVBQUU7WUFDcEMsZ0RBQWdEO1lBQ2hEZSxTQUFTcEMseUJBQXlCb0IsV0FBV0MsY0FBYztZQUMzRCxJQUFJLENBQUNlLFFBQVE7Z0JBQ1gsT0FBTztvQkFDTFcsU0FBUztvQkFDVHZDLE9BQU87b0JBQ1BDLE1BQU07Z0JBQ1I7WUFDRjtZQUNBUyxRQUFRK0IsR0FBRyxDQUFDO1FBQ2QsT0FBTztZQUNMLDJCQUEyQjtZQUMzQmIsU0FBUzlCLHVCQUFhO1lBQ3RCWSxRQUFRK0IsR0FBRyxDQUFDO1FBQ2Q7UUFFQSxvQkFBb0I7UUFDcEIsTUFBTUMsU0FBUyxNQUFNTixjQUFjUixRQUFRaEI7UUFFM0Msc0NBQXNDO1FBQ3RDLElBQUl5QixRQUFRTSxRQUFRLEVBQUU7WUFDcEIsTUFBTUMsZ0JBQWdCL0MsbUJBQW1CLGtCQUFrQjtnQkFDekQyQyxXQUFXSCxRQUFRRyxTQUFTO2dCQUM1QkssZUFBZVIsUUFBUVEsYUFBYTtnQkFDcENOLFNBQVM7WUFDWDtRQUNGO1FBRUEsT0FBTztZQUNMQSxTQUFTO1lBQ1RyQyxNQUFNd0M7UUFDUjtJQUNGLEVBQUUsT0FBTzFDLE9BQU87UUFDZFUsUUFBUVYsS0FBSyxDQUFDLDRDQUE0Q0E7UUFFMUQsZ0NBQWdDO1FBQ2hDLElBQUlxQyxRQUFRTSxRQUFRLEVBQUU7WUFDcEIsTUFBTUMsZ0JBQWdCL0MsbUJBQW1CLGVBQWU7Z0JBQ3RERyxPQUFPQSxNQUFNOEMsT0FBTztnQkFDcEJOLFdBQVdILFFBQVFHLFNBQVM7Z0JBQzVCSyxlQUFlUixRQUFRUSxhQUFhO1lBQ3RDO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xOLFNBQVM7WUFDVHZDLE9BQU87WUFDUEMsTUFBTTtRQUNSO0lBQ0Y7QUFDRjtBQUtPLFNBQVNYLG1CQUNkc0IsVUFBc0IsRUFDdEJtQyxrQkFBMEIsRUFDMUJDLGFBQXNCO0lBRXRCLDZCQUE2QjtJQUM3QixJQUFJcEMsV0FBV0csSUFBSSxLQUFLLFNBQVM7UUFDL0IsT0FBTztJQUNUO0lBRUEsK0JBQStCO0lBQy9CLElBQUlILFdBQVdNLFdBQVcsQ0FBQytCLFFBQVEsQ0FBQ0YscUJBQXFCO1FBQ3ZELE9BQU87SUFDVDtJQUVBLDZDQUE2QztJQUM3QyxJQUFJQyxpQkFBaUJBLGtCQUFrQnBDLFdBQVdKLE1BQU0sRUFBRTtRQUN4RCxPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFLTyxTQUFTakIsaUJBQWlCcUIsVUFBc0IsRUFBRXNDLFNBQWlCO0lBQ3hFLE1BQU1DLFVBQStCLENBQUM7SUFFdEMsT0FBUUQ7UUFDTixLQUFLO1lBQ0gsSUFBSXRDLFdBQVdHLElBQUksS0FBSyxXQUFXSCxXQUFXRyxJQUFJLEtBQUssYUFBYTtnQkFDbEUsZ0RBQWdEO2dCQUNoRG9DLFFBQVFDLGFBQWEsR0FBR3hDLFdBQVdKLE1BQU07WUFDM0M7WUFDQTtRQUVGLEtBQUs7WUFDSCxJQUFJSSxXQUFXRyxJQUFJLEtBQUssV0FBV0gsV0FBV0csSUFBSSxLQUFLLGFBQWE7Z0JBQ2xFLG1EQUFtRDtnQkFDbkRvQyxRQUFRRSxPQUFPLEdBQUd6QyxXQUFXSixNQUFNO1lBQ3JDO1lBQ0E7UUFFRixLQUFLO1lBQ0gsSUFBSUksV0FBV0csSUFBSSxLQUFLLFdBQVdILFdBQVdHLElBQUksS0FBSyxhQUFhO2dCQUNsRSxpREFBaUQ7Z0JBQ2pEb0MsUUFBUXhDLFNBQVMsR0FBRztZQUN0QjtZQUNBO1FBRUY7WUFFRTtJQUNKO0lBRUEsT0FBT3dDO0FBQ1Q7QUFLTyxTQUFTdkQsUUFBUXlDLFVBQTJCLENBQUMsQ0FBQztJQUNuRCxPQUFPLFNBQVVpQixPQUFpQjtRQUNoQyxPQUFPLE9BQU9DLFNBQWMsR0FBR0M7WUFDN0IsSUFBSTtnQkFDRiwwQ0FBMEM7Z0JBQzFDLE1BQU0zRCxvQkFBb0IsQUFBQzBELFFBQWdCRSxjQUFjO2dCQUV6RCxJQUFJLENBQUM1RCxtQkFBbUI7b0JBQ3RCLE1BQU02RCxnQkFBZ0I7d0JBQ3BCbkIsU0FBUzt3QkFDVHZDLE9BQU87d0JBQ1BDLE1BQU07d0JBQ04wRCxXQUFXLElBQUlDLE9BQU9DLFdBQVc7b0JBQ25DO29CQUVBLElBQUksV0FBV04sU0FBUzt3QkFDdEIsZUFBZTt3QkFDZixNQUFNTyxNQUFNTixJQUFJLENBQUMsRUFBRTt3QkFDbkIsT0FBT00sSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ047b0JBQzlCLE9BQU87d0JBQ0wsYUFBYTt3QkFDYixPQUFPLElBQUlPLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQ1QsZ0JBQWdCOzRCQUNqREssUUFBUTs0QkFDUjdCLFNBQVM7Z0NBQUUsZ0JBQWdCOzRCQUFtQjt3QkFDaEQ7b0JBQ0Y7Z0JBQ0Y7Z0JBRUEsdUJBQXVCO2dCQUN2QixNQUFNSSxnQkFBZ0IsTUFBTTNDLG1CQUFtQkU7Z0JBQy9DLElBQUksQ0FBQ3lDLGNBQWN2QyxLQUFLLEVBQUU7b0JBQ3hCLE1BQU0yRCxnQkFBZ0I7d0JBQ3BCbkIsU0FBUzt3QkFDVHZDLE9BQU9zQyxjQUFjdEMsS0FBSzt3QkFDMUJDLE1BQU1xQyxjQUFjckMsSUFBSTt3QkFDeEJtRSxLQUFLO3dCQUNMVCxXQUFXLElBQUlDLE9BQU9DLFdBQVc7b0JBQ25DO29CQUVBLElBQUksV0FBV04sU0FBUzt3QkFDdEIsZUFBZTt3QkFDZixNQUFNTyxNQUFNTixJQUFJLENBQUMsRUFBRTt3QkFDbkIsT0FBT00sSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ047b0JBQzlCLE9BQU87d0JBQ0wsYUFBYTt3QkFDYixPQUFPLElBQUlPLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQ1QsZ0JBQWdCOzRCQUNqREssUUFBUTs0QkFDUjdCLFNBQVM7Z0NBQUUsZ0JBQWdCOzRCQUFtQjt3QkFDaEQ7b0JBQ0Y7Z0JBQ0Y7Z0JBRUEsaUNBQWlDOztnQkFDL0JxQixRQUFnQjNDLFVBQVUsR0FBRzBCLGNBQWNsQixPQUFPO2dCQUVwRCxPQUFPa0MsUUFBUUMsWUFBWUM7WUFDN0IsRUFBRSxPQUFPeEQsT0FBTztnQkFDZFUsUUFBUVYsS0FBSyxDQUFDLGtDQUFrQ0E7Z0JBRWhELE1BQU0wRCxnQkFBZ0I7b0JBQ3BCbkIsU0FBUztvQkFDVHZDLE9BQU87b0JBQ1BDLE1BQU07b0JBQ04wRCxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ25DO2dCQUVBLElBQUksV0FBV04sU0FBUztvQkFDdEIsZUFBZTtvQkFDZixNQUFNTyxNQUFNTixJQUFJLENBQUMsRUFBRTtvQkFDbkIsT0FBT00sSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ047Z0JBQzlCLE9BQU87b0JBQ0wsYUFBYTtvQkFDYixPQUFPLElBQUlPLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQ1QsZ0JBQWdCO3dCQUNqREssUUFBUTt3QkFDUjdCLFNBQVM7NEJBQUUsZ0JBQWdCO3dCQUFtQjtvQkFDaEQ7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLHdEQUF3RDtBQUN4RCx5QkFBeUI7QUFDekIsd0RBQXdEO0FBRXhEOztDQUVDLEdBQ0QsZUFBZVUsZ0JBQ2IvQyxpQkFBd0MsRUFDeEN3RSxTQUFpQixFQUNqQkMsUUFBYTtJQUViLElBQUk7UUFDRixJQUFJLENBQUN4RSx1QkFBYSxFQUFFO1lBQ2xCO1FBQ0Y7UUFFQSxNQUFNQSx1QkFBYSxDQUFDTyxJQUFJLENBQUMsdUJBQXVCa0UsTUFBTSxDQUFDO1lBQ3JEbEIsU0FBU3hELGtCQUFrQlcsTUFBTTtZQUNqQ2dFLFlBQVk7WUFDWkMsZ0JBQWdCO1lBQ2hCQyxVQUFVO1lBQ1ZDLGFBQWEsQ0FBQyxlQUFlLEVBQUVOLFdBQVc7WUFDMUNDLFVBQVU7Z0JBQ1JEO2dCQUNBdEQsTUFBTWxCLGtCQUFrQmtCLElBQUk7Z0JBQzVCRyxhQUFhckIsa0JBQWtCcUIsV0FBVztnQkFDMUMwRCxnQkFBZ0IvRSxrQkFBa0JnRixhQUFhO2dCQUMvQyxHQUFHUCxRQUFRO1lBQ2I7WUFDQVEsWUFBWWpGLGtCQUFrQmtGLFNBQVM7WUFDdkNDLFlBQVluRixrQkFBa0JvRixTQUFTO1lBQ3ZDQyxZQUFZLElBQUl0QixPQUFPQyxXQUFXO1FBQ3BDO0lBQ0YsRUFBRSxPQUFPN0QsT0FBTztRQUNkVSxRQUFRVixLQUFLLENBQUMsc0NBQXNDQTtJQUN0RDtBQUNGO0FBU08sZUFBZU4sZ0JBQ3BCd0QsU0FBaUIsRUFDakJpQyxTQU1FO0lBRUYsTUFBTUMsVUFBVSxFQUFFO0lBRWxCLEtBQUssTUFBTUMsWUFBWUYsVUFBVztRQUNoQyxJQUFJO1lBQ0YsMkNBQTJDO1lBQzNDLDJEQUEyRDtZQUMzREMsUUFBUUUsSUFBSSxDQUFDO2dCQUNYQyxNQUFNRixTQUFTRSxJQUFJO2dCQUNuQkMsUUFBUTtZQUNWO1FBQ0YsRUFBRSxPQUFPeEYsT0FBTztZQUNkb0YsUUFBUUUsSUFBSSxDQUFDO2dCQUNYQyxNQUFNRixTQUFTRSxJQUFJO2dCQUNuQkMsUUFBUTtnQkFDUnhGLE9BQU9BLE1BQU04QyxPQUFPO1lBQ3RCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9zQztBQUNUIn0=