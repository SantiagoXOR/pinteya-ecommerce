{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\retry-logic.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - RETRY LOGIC TESTS\n// ===================================\n\nimport {\n  retryWithBackoff,\n  retryMercadoPagoOperation,\n  retryWebhookOperation,\n  RETRY_CONFIGS,\n  RetryConfig,\n} from '@/lib/retry-logic'\n\n// Mock logger\njest.mock('@/lib/enterprise/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    debug: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n  LogLevel: {\n    INFO: 'info',\n    DEBUG: 'debug',\n    WARN: 'warn',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    SYSTEM: 'system',\n    PAYMENT: 'payment',\n  },\n}))\n\ndescribe('Retry Logic', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('retryWithBackoff', () => {\n    const basicConfig: RetryConfig = {\n      maxRetries: 2,\n      baseDelayMs: 100,\n      maxDelayMs: 1000,\n      backoffMultiplier: 2,\n      jitterMs: 50,\n      retryableErrors: ['ECONNRESET', '500'],\n      nonRetryableErrors: ['400', '401'],\n    }\n\n    it('should succeed on first attempt', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('success')\n\n      const promise = retryWithBackoff(mockOperation, basicConfig, 'test-operation')\n      const result = await promise\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBe('success')\n      expect(result.attempts).toBe(1)\n      expect(mockOperation).toHaveBeenCalledTimes(1)\n    })\n\n    it('should retry on retryable errors', async () => {\n      // Usar configuración con delays muy pequeños para tests rápidos\n      const fastConfig: RetryConfig = {\n        ...basicConfig,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        jitterMs: 0,\n      }\n\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('ECONNRESET'))\n        .mockResolvedValue('success')\n\n      const result = await retryWithBackoff(mockOperation, fastConfig, 'test-operation')\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBe('success')\n      expect(result.attempts).toBe(2)\n      expect(mockOperation).toHaveBeenCalledTimes(2)\n    })\n\n    it('should not retry on non-retryable errors', async () => {\n      const mockOperation = jest.fn().mockRejectedValue(new Error('400 Bad Request'))\n\n      const result = await retryWithBackoff(mockOperation, basicConfig, 'test-operation')\n\n      expect(result.success).toBe(false)\n      expect(result.attempts).toBe(1)\n      expect(result.error?.message).toContain('400')\n      expect(mockOperation).toHaveBeenCalledTimes(1)\n    })\n\n    it('should fail after max retries', async () => {\n      const fastConfig: RetryConfig = {\n        ...basicConfig,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        jitterMs: 0,\n      }\n\n      const mockOperation = jest.fn().mockRejectedValue(new Error('ECONNRESET'))\n\n      const result = await retryWithBackoff(mockOperation, fastConfig, 'test-operation')\n\n      expect(result.success).toBe(false)\n      expect(result.attempts).toBe(3) // Intento inicial + 2 retries\n      expect(result.error?.message).toContain('ECONNRESET')\n      expect(mockOperation).toHaveBeenCalledTimes(3)\n    })\n\n    it('should calculate exponential backoff delays', async () => {\n      const delays: number[] = []\n      const originalSetTimeout = global.setTimeout\n\n      // Mock setTimeout para capturar delays\n      global.setTimeout = jest.fn((callback, delay) => {\n        delays.push(delay)\n        return originalSetTimeout(callback, 0) // Ejecutar inmediatamente\n      }) as any\n\n      const fastConfig: RetryConfig = {\n        ...basicConfig,\n        baseDelayMs: 10,\n        maxDelayMs: 100,\n        jitterMs: 5,\n      }\n\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('500'))\n        .mockRejectedValueOnce(new Error('500'))\n        .mockResolvedValue('success')\n\n      await retryWithBackoff(mockOperation, fastConfig, 'test-operation')\n\n      // Verificar que los delays aumentan exponencialmente\n      expect(delays.length).toBe(2)\n      expect(delays[0]).toBeGreaterThanOrEqual(10) // baseDelay + jitter\n      expect(delays[1]).toBeGreaterThanOrEqual(20) // baseDelay * 2 + jitter\n\n      global.setTimeout = originalSetTimeout\n    })\n\n    it('should respect max delay limit', async () => {\n      const configWithLowMaxDelay: RetryConfig = {\n        ...basicConfig,\n        baseDelayMs: 10,\n        maxDelayMs: 15, // Límite bajo\n        backoffMultiplier: 10, // Multiplicador alto\n        jitterMs: 5,\n      }\n\n      const delays: number[] = []\n      const originalSetTimeout = global.setTimeout\n\n      global.setTimeout = jest.fn((callback, delay) => {\n        delays.push(delay)\n        return originalSetTimeout(callback, 0)\n      }) as any\n\n      const mockOperation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('500'))\n        .mockResolvedValue('success')\n\n      await retryWithBackoff(mockOperation, configWithLowMaxDelay, 'test-operation')\n\n      // El delay no debe exceder maxDelayMs + jitter\n      expect(delays[0]).toBeLessThanOrEqual(15 + 5)\n\n      global.setTimeout = originalSetTimeout\n    })\n  })\n\n  describe('Retry Configurations', () => {\n    it('should have MercadoPago critical config', () => {\n      const config = RETRY_CONFIGS.MERCADOPAGO_CRITICAL\n\n      expect(config.maxRetries).toBe(3)\n      expect(config.baseDelayMs).toBe(1000)\n      expect(config.retryableErrors).toContain('500')\n      expect(config.retryableErrors).toContain('ECONNRESET')\n      expect(config.nonRetryableErrors).toContain('400')\n      expect(config.nonRetryableErrors).toContain('401')\n    })\n\n    it('should have MercadoPago query config', () => {\n      const config = RETRY_CONFIGS.MERCADOPAGO_QUERY\n\n      expect(config.maxRetries).toBe(2)\n      expect(config.baseDelayMs).toBe(500)\n      expect(config.retryableErrors).toContain('500')\n      expect(config.nonRetryableErrors).toContain('400')\n    })\n\n    it('should have webhook processing config', () => {\n      const config = RETRY_CONFIGS.WEBHOOK_PROCESSING\n\n      expect(config.maxRetries).toBe(1)\n      expect(config.baseDelayMs).toBe(2000)\n      expect(config.retryableErrors).toContain('500')\n      expect(config.nonRetryableErrors).toContain('DUPLICATE_WEBHOOK')\n    })\n  })\n\n  describe('retryMercadoPagoOperation', () => {\n    it('should use critical config for critical operations', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('success')\n\n      const result = await retryMercadoPagoOperation(mockOperation, 'test', true)\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBe('success')\n      expect(mockOperation).toHaveBeenCalledTimes(1)\n    })\n\n    it('should use query config for non-critical operations', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('success')\n\n      const result = await retryMercadoPagoOperation(mockOperation, 'test', false)\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBe('success')\n      expect(mockOperation).toHaveBeenCalledTimes(1)\n    })\n\n    it('should retry critical operations more times', async () => {\n      // Mock la configuración para hacer el test más rápido\n      const originalConfig = require('@/lib/retry-logic').RETRY_CONFIGS.MERCADOPAGO_CRITICAL\n      require('@/lib/retry-logic').RETRY_CONFIGS.MERCADOPAGO_CRITICAL = {\n        ...originalConfig,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        jitterMs: 0,\n      }\n\n      const mockOperation = jest.fn().mockRejectedValue(new Error('500'))\n\n      const result = await retryMercadoPagoOperation(mockOperation, 'test', true)\n\n      expect(result.success).toBe(false)\n      expect(result.attempts).toBe(4) // 1 inicial + 3 retries para críticas\n      expect(mockOperation).toHaveBeenCalledTimes(4)\n\n      // Restaurar configuración original\n      require('@/lib/retry-logic').RETRY_CONFIGS.MERCADOPAGO_CRITICAL = originalConfig\n    })\n  })\n\n  describe('retryWebhookOperation', () => {\n    it('should use webhook config', async () => {\n      const mockOperation = jest.fn().mockResolvedValue('success')\n\n      const result = await retryWebhookOperation(mockOperation, 'test')\n\n      expect(result.success).toBe(true)\n      expect(result.data).toBe('success')\n      expect(mockOperation).toHaveBeenCalledTimes(1)\n    })\n\n    it('should retry webhook operations limited times', async () => {\n      // Mock la configuración para hacer el test más rápido\n      const originalConfig = require('@/lib/retry-logic').RETRY_CONFIGS.WEBHOOK_PROCESSING\n      require('@/lib/retry-logic').RETRY_CONFIGS.WEBHOOK_PROCESSING = {\n        ...originalConfig,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        jitterMs: 0,\n      }\n\n      const mockOperation = jest.fn().mockRejectedValue(new Error('500'))\n\n      const result = await retryWebhookOperation(mockOperation, 'test')\n\n      expect(result.success).toBe(false)\n      expect(result.attempts).toBe(2) // 1 inicial + 1 retry para webhooks\n      expect(mockOperation).toHaveBeenCalledTimes(2)\n\n      // Restaurar configuración original\n      require('@/lib/retry-logic').RETRY_CONFIGS.WEBHOOK_PROCESSING = originalConfig\n    })\n  })\n\n  describe('Error Classification', () => {\n    const basicConfig: RetryConfig = {\n      maxRetries: 2,\n      baseDelayMs: 100,\n      maxDelayMs: 1000,\n      backoffMultiplier: 2,\n      jitterMs: 50,\n      retryableErrors: ['ECONNRESET', '500'],\n      nonRetryableErrors: ['400', '401'],\n    }\n\n    it('should identify network errors as retryable', async () => {\n      const fastConfig: RetryConfig = {\n        ...basicConfig,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        jitterMs: 0,\n        retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ETIMEDOUT'],\n        nonRetryableErrors: ['400', '401'],\n      }\n\n      const networkErrors = ['ECONNRESET', 'ENOTFOUND', 'ETIMEDOUT']\n\n      for (const errorCode of networkErrors) {\n        const mockOperation = jest\n          .fn()\n          .mockRejectedValueOnce(new Error(errorCode))\n          .mockResolvedValue('success')\n\n        const result = await retryWithBackoff(mockOperation, fastConfig, 'test')\n\n        expect(result.success).toBe(true)\n        expect(result.attempts).toBe(2)\n\n        jest.clearAllMocks()\n      }\n    })\n\n    it('should identify HTTP 4xx errors as non-retryable', async () => {\n      const clientErrors = ['400', '401', '403', '404']\n\n      for (const errorCode of clientErrors) {\n        const mockOperation = jest.fn().mockRejectedValue(new Error(`${errorCode} Error`))\n\n        const result = await retryWithBackoff(\n          mockOperation,\n          RETRY_CONFIGS.MERCADOPAGO_CRITICAL,\n          'test'\n        )\n\n        expect(result.success).toBe(false)\n        expect(result.attempts).toBe(1) // No retry\n\n        jest.clearAllMocks()\n      }\n    })\n\n    it('should identify HTTP 5xx errors as retryable', async () => {\n      const fastConfig: RetryConfig = {\n        maxRetries: 2,\n        baseDelayMs: 1,\n        maxDelayMs: 5,\n        backoffMultiplier: 2,\n        jitterMs: 0,\n        retryableErrors: ['500', '502', '503', '504'],\n        nonRetryableErrors: ['400', '401'],\n      }\n\n      const serverErrors = ['500', '502', '503', '504']\n\n      for (const errorCode of serverErrors) {\n        const mockOperation = jest\n          .fn()\n          .mockRejectedValueOnce(new Error(`${errorCode} Error`))\n          .mockResolvedValue('success')\n\n        const result = await retryWithBackoff(mockOperation, fastConfig, 'test')\n\n        expect(result.success).toBe(true)\n        expect(result.attempts).toBe(2)\n\n        jest.clearAllMocks()\n      }\n    })\n  })\n})\n"],"names":["jest","mock","logger","info","fn","debug","warn","error","LogLevel","INFO","DEBUG","WARN","ERROR","LogCategory","SYSTEM","PAYMENT","describe","beforeEach","clearAllMocks","basicConfig","maxRetries","baseDelayMs","maxDelayMs","backoffMultiplier","jitterMs","retryableErrors","nonRetryableErrors","it","mockOperation","mockResolvedValue","promise","retryWithBackoff","result","expect","success","toBe","data","attempts","toHaveBeenCalledTimes","fastConfig","mockRejectedValueOnce","Error","mockRejectedValue","message","toContain","delays","originalSetTimeout","global","setTimeout","callback","delay","push","length","toBeGreaterThanOrEqual","configWithLowMaxDelay","toBeLessThanOrEqual","config","RETRY_CONFIGS","MERCADOPAGO_CRITICAL","MERCADOPAGO_QUERY","WEBHOOK_PROCESSING","retryMercadoPagoOperation","originalConfig","require","retryWebhookOperation","networkErrors","errorCode","clientErrors","serverErrors"],"mappings":"AAAA,sCAAsC;AACtC,yCAAyC;AACzC,sCAAsC;;AAUtC,cAAc;AACdA,KAAKC,IAAI,CAAC,2BAA2B,IAAO,CAAA;QAC1CC,QAAQ;YACNC,MAAMH,KAAKI,EAAE;YACbC,OAAOL,KAAKI,EAAE;YACdE,MAAMN,KAAKI,EAAE;YACbG,OAAOP,KAAKI,EAAE;QAChB;QACAI,UAAU;YACRC,MAAM;YACNC,OAAO;YACPC,MAAM;YACNC,OAAO;QACT;QACAC,aAAa;YACXC,QAAQ;YACRC,SAAS;QACX;IACF,CAAA;;;;4BApBO;AAsBPC,SAAS,eAAe;IACtBC,WAAW;QACTjB,KAAKkB,aAAa;IACpB;IAEAF,SAAS,oBAAoB;QAC3B,MAAMG,cAA2B;YAC/BC,YAAY;YACZC,aAAa;YACbC,YAAY;YACZC,mBAAmB;YACnBC,UAAU;YACVC,iBAAiB;gBAAC;gBAAc;aAAM;YACtCC,oBAAoB;gBAAC;gBAAO;aAAM;QACpC;QAEAC,GAAG,mCAAmC;YACpC,MAAMC,gBAAgB5B,KAAKI,EAAE,GAAGyB,iBAAiB,CAAC;YAElD,MAAMC,UAAUC,IAAAA,4BAAgB,EAACH,eAAeT,aAAa;YAC7D,MAAMa,SAAS,MAAMF;YAErBG,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOI,IAAI,EAAED,IAAI,CAAC;YACzBF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC;YAC7BF,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,oCAAoC;YACrC,gEAAgE;YAChE,MAAMY,aAA0B;gBAC9B,GAAGpB,WAAW;gBACdE,aAAa;gBACbC,YAAY;gBACZE,UAAU;YACZ;YAEA,MAAMI,gBAAgB5B,KACnBI,EAAE,GACFoC,qBAAqB,CAAC,IAAIC,MAAM,eAChCZ,iBAAiB,CAAC;YAErB,MAAMG,SAAS,MAAMD,IAAAA,4BAAgB,EAACH,eAAeW,YAAY;YAEjEN,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOI,IAAI,EAAED,IAAI,CAAC;YACzBF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC;YAC7BF,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,4CAA4C;YAC7C,MAAMC,gBAAgB5B,KAAKI,EAAE,GAAGsC,iBAAiB,CAAC,IAAID,MAAM;YAE5D,MAAMT,SAAS,MAAMD,IAAAA,4BAAgB,EAACH,eAAeT,aAAa;YAElEc,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC;YAC7BF,OAAOD,OAAOzB,KAAK,EAAEoC,SAASC,SAAS,CAAC;YACxCX,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,iCAAiC;YAClC,MAAMY,aAA0B;gBAC9B,GAAGpB,WAAW;gBACdE,aAAa;gBACbC,YAAY;gBACZE,UAAU;YACZ;YAEA,MAAMI,gBAAgB5B,KAAKI,EAAE,GAAGsC,iBAAiB,CAAC,IAAID,MAAM;YAE5D,MAAMT,SAAS,MAAMD,IAAAA,4BAAgB,EAACH,eAAeW,YAAY;YAEjEN,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC,IAAG,8BAA8B;YAC9DF,OAAOD,OAAOzB,KAAK,EAAEoC,SAASC,SAAS,CAAC;YACxCX,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,+CAA+C;YAChD,MAAMkB,SAAmB,EAAE;YAC3B,MAAMC,qBAAqBC,OAAOC,UAAU;YAE5C,uCAAuC;YACvCD,OAAOC,UAAU,GAAGhD,KAAKI,EAAE,CAAC,CAAC6C,UAAUC;gBACrCL,OAAOM,IAAI,CAACD;gBACZ,OAAOJ,mBAAmBG,UAAU,GAAG,0BAA0B;;YACnE;YAEA,MAAMV,aAA0B;gBAC9B,GAAGpB,WAAW;gBACdE,aAAa;gBACbC,YAAY;gBACZE,UAAU;YACZ;YAEA,MAAMI,gBAAgB5B,KACnBI,EAAE,GACFoC,qBAAqB,CAAC,IAAIC,MAAM,QAChCD,qBAAqB,CAAC,IAAIC,MAAM,QAChCZ,iBAAiB,CAAC;YAErB,MAAME,IAAAA,4BAAgB,EAACH,eAAeW,YAAY;YAElD,qDAAqD;YACrDN,OAAOY,OAAOO,MAAM,EAAEjB,IAAI,CAAC;YAC3BF,OAAOY,MAAM,CAAC,EAAE,EAAEQ,sBAAsB,CAAC,KAAI,qBAAqB;YAClEpB,OAAOY,MAAM,CAAC,EAAE,EAAEQ,sBAAsB,CAAC,KAAI,yBAAyB;YAEtEN,OAAOC,UAAU,GAAGF;QACtB;QAEAnB,GAAG,kCAAkC;YACnC,MAAM2B,wBAAqC;gBACzC,GAAGnC,WAAW;gBACdE,aAAa;gBACbC,YAAY;gBACZC,mBAAmB;gBACnBC,UAAU;YACZ;YAEA,MAAMqB,SAAmB,EAAE;YAC3B,MAAMC,qBAAqBC,OAAOC,UAAU;YAE5CD,OAAOC,UAAU,GAAGhD,KAAKI,EAAE,CAAC,CAAC6C,UAAUC;gBACrCL,OAAOM,IAAI,CAACD;gBACZ,OAAOJ,mBAAmBG,UAAU;YACtC;YAEA,MAAMrB,gBAAgB5B,KACnBI,EAAE,GACFoC,qBAAqB,CAAC,IAAIC,MAAM,QAChCZ,iBAAiB,CAAC;YAErB,MAAME,IAAAA,4BAAgB,EAACH,eAAe0B,uBAAuB;YAE7D,+CAA+C;YAC/CrB,OAAOY,MAAM,CAAC,EAAE,EAAEU,mBAAmB,CAAC,KAAK;YAE3CR,OAAOC,UAAU,GAAGF;QACtB;IACF;IAEA9B,SAAS,wBAAwB;QAC/BW,GAAG,2CAA2C;YAC5C,MAAM6B,SAASC,yBAAa,CAACC,oBAAoB;YAEjDzB,OAAOuB,OAAOpC,UAAU,EAAEe,IAAI,CAAC;YAC/BF,OAAOuB,OAAOnC,WAAW,EAAEc,IAAI,CAAC;YAChCF,OAAOuB,OAAO/B,eAAe,EAAEmB,SAAS,CAAC;YACzCX,OAAOuB,OAAO/B,eAAe,EAAEmB,SAAS,CAAC;YACzCX,OAAOuB,OAAO9B,kBAAkB,EAAEkB,SAAS,CAAC;YAC5CX,OAAOuB,OAAO9B,kBAAkB,EAAEkB,SAAS,CAAC;QAC9C;QAEAjB,GAAG,wCAAwC;YACzC,MAAM6B,SAASC,yBAAa,CAACE,iBAAiB;YAE9C1B,OAAOuB,OAAOpC,UAAU,EAAEe,IAAI,CAAC;YAC/BF,OAAOuB,OAAOnC,WAAW,EAAEc,IAAI,CAAC;YAChCF,OAAOuB,OAAO/B,eAAe,EAAEmB,SAAS,CAAC;YACzCX,OAAOuB,OAAO9B,kBAAkB,EAAEkB,SAAS,CAAC;QAC9C;QAEAjB,GAAG,yCAAyC;YAC1C,MAAM6B,SAASC,yBAAa,CAACG,kBAAkB;YAE/C3B,OAAOuB,OAAOpC,UAAU,EAAEe,IAAI,CAAC;YAC/BF,OAAOuB,OAAOnC,WAAW,EAAEc,IAAI,CAAC;YAChCF,OAAOuB,OAAO/B,eAAe,EAAEmB,SAAS,CAAC;YACzCX,OAAOuB,OAAO9B,kBAAkB,EAAEkB,SAAS,CAAC;QAC9C;IACF;IAEA5B,SAAS,6BAA6B;QACpCW,GAAG,sDAAsD;YACvD,MAAMC,gBAAgB5B,KAAKI,EAAE,GAAGyB,iBAAiB,CAAC;YAElD,MAAMG,SAAS,MAAM6B,IAAAA,qCAAyB,EAACjC,eAAe,QAAQ;YAEtEK,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOI,IAAI,EAAED,IAAI,CAAC;YACzBF,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,uDAAuD;YACxD,MAAMC,gBAAgB5B,KAAKI,EAAE,GAAGyB,iBAAiB,CAAC;YAElD,MAAMG,SAAS,MAAM6B,IAAAA,qCAAyB,EAACjC,eAAe,QAAQ;YAEtEK,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOI,IAAI,EAAED,IAAI,CAAC;YACzBF,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,+CAA+C;YAChD,sDAAsD;YACtD,MAAMmC,iBAAiBC,QAAQ,qBAAqBN,aAAa,CAACC,oBAAoB;YACtFK,QAAQ,qBAAqBN,aAAa,CAACC,oBAAoB,GAAG;gBAChE,GAAGI,cAAc;gBACjBzC,aAAa;gBACbC,YAAY;gBACZE,UAAU;YACZ;YAEA,MAAMI,gBAAgB5B,KAAKI,EAAE,GAAGsC,iBAAiB,CAAC,IAAID,MAAM;YAE5D,MAAMT,SAAS,MAAM6B,IAAAA,qCAAyB,EAACjC,eAAe,QAAQ;YAEtEK,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC,IAAG,sCAAsC;YACtEF,OAAOL,eAAeU,qBAAqB,CAAC;YAE5C,mCAAmC;YACnCyB,QAAQ,qBAAqBN,aAAa,CAACC,oBAAoB,GAAGI;QACpE;IACF;IAEA9C,SAAS,yBAAyB;QAChCW,GAAG,6BAA6B;YAC9B,MAAMC,gBAAgB5B,KAAKI,EAAE,GAAGyB,iBAAiB,CAAC;YAElD,MAAMG,SAAS,MAAMgC,IAAAA,iCAAqB,EAACpC,eAAe;YAE1DK,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOI,IAAI,EAAED,IAAI,CAAC;YACzBF,OAAOL,eAAeU,qBAAqB,CAAC;QAC9C;QAEAX,GAAG,iDAAiD;YAClD,sDAAsD;YACtD,MAAMmC,iBAAiBC,QAAQ,qBAAqBN,aAAa,CAACG,kBAAkB;YACpFG,QAAQ,qBAAqBN,aAAa,CAACG,kBAAkB,GAAG;gBAC9D,GAAGE,cAAc;gBACjBzC,aAAa;gBACbC,YAAY;gBACZE,UAAU;YACZ;YAEA,MAAMI,gBAAgB5B,KAAKI,EAAE,GAAGsC,iBAAiB,CAAC,IAAID,MAAM;YAE5D,MAAMT,SAAS,MAAMgC,IAAAA,iCAAqB,EAACpC,eAAe;YAE1DK,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC,IAAG,oCAAoC;YACpEF,OAAOL,eAAeU,qBAAqB,CAAC;YAE5C,mCAAmC;YACnCyB,QAAQ,qBAAqBN,aAAa,CAACG,kBAAkB,GAAGE;QAClE;IACF;IAEA9C,SAAS,wBAAwB;QAC/B,MAAMG,cAA2B;YAC/BC,YAAY;YACZC,aAAa;YACbC,YAAY;YACZC,mBAAmB;YACnBC,UAAU;YACVC,iBAAiB;gBAAC;gBAAc;aAAM;YACtCC,oBAAoB;gBAAC;gBAAO;aAAM;QACpC;QAEAC,GAAG,+CAA+C;YAChD,MAAMY,aAA0B;gBAC9B,GAAGpB,WAAW;gBACdE,aAAa;gBACbC,YAAY;gBACZE,UAAU;gBACVC,iBAAiB;oBAAC;oBAAc;oBAAa;iBAAY;gBACzDC,oBAAoB;oBAAC;oBAAO;iBAAM;YACpC;YAEA,MAAMuC,gBAAgB;gBAAC;gBAAc;gBAAa;aAAY;YAE9D,KAAK,MAAMC,aAAaD,cAAe;gBACrC,MAAMrC,gBAAgB5B,KACnBI,EAAE,GACFoC,qBAAqB,CAAC,IAAIC,MAAMyB,YAChCrC,iBAAiB,CAAC;gBAErB,MAAMG,SAAS,MAAMD,IAAAA,4BAAgB,EAACH,eAAeW,YAAY;gBAEjEN,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;gBAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC;gBAE7BnC,KAAKkB,aAAa;YACpB;QACF;QAEAS,GAAG,oDAAoD;YACrD,MAAMwC,eAAe;gBAAC;gBAAO;gBAAO;gBAAO;aAAM;YAEjD,KAAK,MAAMD,aAAaC,aAAc;gBACpC,MAAMvC,gBAAgB5B,KAAKI,EAAE,GAAGsC,iBAAiB,CAAC,IAAID,MAAM,GAAGyB,UAAU,MAAM,CAAC;gBAEhF,MAAMlC,SAAS,MAAMD,IAAAA,4BAAgB,EACnCH,eACA6B,yBAAa,CAACC,oBAAoB,EAClC;gBAGFzB,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;gBAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC,IAAG,WAAW;gBAE3CnC,KAAKkB,aAAa;YACpB;QACF;QAEAS,GAAG,gDAAgD;YACjD,MAAMY,aAA0B;gBAC9BnB,YAAY;gBACZC,aAAa;gBACbC,YAAY;gBACZC,mBAAmB;gBACnBC,UAAU;gBACVC,iBAAiB;oBAAC;oBAAO;oBAAO;oBAAO;iBAAM;gBAC7CC,oBAAoB;oBAAC;oBAAO;iBAAM;YACpC;YAEA,MAAM0C,eAAe;gBAAC;gBAAO;gBAAO;gBAAO;aAAM;YAEjD,KAAK,MAAMF,aAAaE,aAAc;gBACpC,MAAMxC,gBAAgB5B,KACnBI,EAAE,GACFoC,qBAAqB,CAAC,IAAIC,MAAM,GAAGyB,UAAU,MAAM,CAAC,GACpDrC,iBAAiB,CAAC;gBAErB,MAAMG,SAAS,MAAMD,IAAAA,4BAAgB,EAACH,eAAeW,YAAY;gBAEjEN,OAAOD,OAAOE,OAAO,EAAEC,IAAI,CAAC;gBAC5BF,OAAOD,OAAOK,QAAQ,EAAEF,IAAI,CAAC;gBAE7BnC,KAAKkB,aAAa;YACpB;QACF;IACF;AACF"}