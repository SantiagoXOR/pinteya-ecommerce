712531ead47e2276c59d5952bbe0c03c
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_29soprssx3() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\sync\\route.ts";
  var hash = "67136d67714b3cb146b01b86c41eafac40934971";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\sync\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 20
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 57
        }
      },
      "8": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 52
        }
      },
      "9": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 24
        }
      },
      "10": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 123
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "15": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 37,
          column: 63
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "18": {
        start: {
          line: 47,
          column: 58
        },
        end: {
          line: 47,
          column: 128
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "20": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 66
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "23": {
        start: {
          line: 60,
          column: 62
        },
        end: {
          line: 70,
          column: 48
        }
      },
      "24": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "25": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 75
        }
      },
      "26": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "27": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 35
        }
      },
      "28": {
        start: {
          line: 83,
          column: 58
        },
        end: {
          line: 97,
          column: 35
        }
      },
      "29": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "30": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 70
        }
      },
      "31": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 105,
          column: 19
        }
      },
      "32": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 31
        }
      },
      "33": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "34": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 68
        }
      },
      "35": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 19
          }
        },
        loc: {
          start: {
            line: 25,
            column: 29
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 15
          }
        }, {
          start: {
            line: 38,
            column: 19
          },
          end: {
            line: 38,
            column: 25
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 22
          }
        }, {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 56
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: 81,
            column: 15
          },
          end: {
            line: 108,
            column: 9
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 28
          },
          end: {
            line: 61,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 28
          },
          end: {
            line: 61,
            column: 47
          }
        }, {
          start: {
            line: 61,
            column: 51
          },
          end: {
            line: 61,
            column: 55
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 27
          },
          end: {
            line: 62,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 27
          },
          end: {
            line: 62,
            column: 62
          }
        }, {
          start: {
            line: 62,
            column: 66
          },
          end: {
            line: 62,
            column: 70
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 28
          },
          end: {
            line: 85,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 28
          },
          end: {
            line: 85,
            column: 47
          }
        }, {
          start: {
            line: 85,
            column: 51
          },
          end: {
            line: 85,
            column: 55
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 62
          }
        }, {
          start: {
            line: 86,
            column: 66
          },
          end: {
            line: 86,
            column: 70
          }
        }],
        line: 86
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\sync\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para sincronizar usuarios de NextAuth.js con Supabase\r\n * POST /api/admin/users/sync\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { auth } from '@/lib/auth/config'\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n)\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth()\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      )\r\n    }\r\n\r\n    const { id, email, name, image } = await request.json()\r\n\r\n    if (!id || !email) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'ID y email son requeridos' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Buscar usuario existente en la tabla p\xFAblica\r\n    const { data: existingUser, error: fetchError } = await supabase\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single()\r\n\r\n    if (fetchError && fetchError.code !== 'PGRST116') {\r\n      console.error('Error al buscar usuario:', fetchError)\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al buscar usuario' },\r\n        { status: 500 }\r\n      )\r\n    }\r\n\r\n    let userData\r\n\r\n    if (existingUser) {\r\n      // Actualizar usuario existente\r\n      const { data: updatedUser, error: updateError } = await supabase\r\n        .from('user_profiles')\r\n        .update({\r\n          first_name: name?.split(' ')[0] || null,\r\n          last_name: name?.split(' ').slice(1).join(' ') || null,\r\n          email,\r\n          metadata: {\r\n            ...existingUser.metadata,\r\n            updated_via: 'sync_api',\r\n            last_sync: new Date().toISOString()\r\n          },\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .select('*')\r\n        .single()\r\n\r\n      if (updateError) {\r\n        console.error('Error al actualizar usuario:', updateError)\r\n        return NextResponse.json(\r\n          { success: false, error: 'Error al actualizar usuario' },\r\n          { status: 500 }\r\n        )\r\n      }\r\n\r\n      userData = updatedUser\r\n    } else {\r\n      // Crear nuevo usuario\r\n      const { data: newUser, error: insertError } = await supabase\r\n        .from('user_profiles')\r\n        .insert({\r\n          id,\r\n          first_name: name?.split(' ')[0] || null,\r\n          last_name: name?.split(' ').slice(1).join(' ') || null,\r\n          email,\r\n          role_id: null,\r\n          is_active: true,\r\n          metadata: {\r\n            created_via: 'sync_api',\r\n            source: 'nextauth',\r\n            created_at: new Date().toISOString()\r\n          },\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .select('*')\r\n        .single()\r\n\r\n      if (insertError) {\r\n        console.error('Error al crear usuario:', insertError)\r\n        return NextResponse.json(\r\n          { success: false, error: 'Error al crear usuario' },\r\n          { status: 500 }\r\n        )\r\n      }\r\n\r\n      userData = newUser\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: userData,\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Error en sincronizaci\xF3n de usuario:', error)\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["POST", "runtime", "supabase", "createClient", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY", "request", "session", "auth", "user", "NextResponse", "json", "success", "error", "status", "id", "email", "name", "image", "data", "existingUser", "fetchError", "from", "select", "eq", "single", "code", "console", "userData", "updatedUser", "updateError", "update", "first_name", "split", "last_name", "slice", "join", "metadata", "updated_via", "last_sync", "Date", "toISOString", "updated_at", "newUser", "insertError", "insert", "role_id", "is_active", "created_via", "source", "created_at"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "67136d67714b3cb146b01b86c41eafac40934971"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29soprssx3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29soprssx3();
cov_29soprssx3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_29soprssx3().f[0]++;
  cov_29soprssx3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_29soprssx3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_29soprssx3().s[3]++;
_export(exports, {
  get POST() {
    /* istanbul ignore next */
    cov_29soprssx3().f[1]++;
    cov_29soprssx3().s[4]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_29soprssx3().f[2]++;
    cov_29soprssx3().s[5]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_29soprssx3().s[6]++, require("next/server"));
const _config =
/* istanbul ignore next */
(cov_29soprssx3().s[7]++, require("../../../../../lib/auth/config"));
const _supabasejs =
/* istanbul ignore next */
(cov_29soprssx3().s[8]++, require("@supabase/supabase-js"));
const runtime =
/* istanbul ignore next */
(cov_29soprssx3().s[9]++, 'nodejs');
const supabase =
/* istanbul ignore next */
(cov_29soprssx3().s[10]++, (0, _supabasejs.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY));
async function POST(request) {
  /* istanbul ignore next */
  cov_29soprssx3().f[3]++;
  cov_29soprssx3().s[11]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_29soprssx3().s[12]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_29soprssx3().s[13]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_29soprssx3().b[0][0]++;
      cov_29soprssx3().s[14]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_29soprssx3().b[0][1]++;
    }
    const {
      id,
      email,
      name,
      image
    } =
    /* istanbul ignore next */
    (cov_29soprssx3().s[15]++, await request.json());
    /* istanbul ignore next */
    cov_29soprssx3().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_29soprssx3().b[2][0]++, !id) ||
    /* istanbul ignore next */
    (cov_29soprssx3().b[2][1]++, !email)) {
      /* istanbul ignore next */
      cov_29soprssx3().b[1][0]++;
      cov_29soprssx3().s[17]++;
      return _server.NextResponse.json({
        success: false,
        error: 'ID y email son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_29soprssx3().b[1][1]++;
    }
    // Buscar usuario existente en la tabla pÃºblica
    const {
      data: existingUser,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_29soprssx3().s[18]++, await supabase.from('user_profiles').select('*').eq('id', id).single());
    /* istanbul ignore next */
    cov_29soprssx3().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_29soprssx3().b[4][0]++, fetchError) &&
    /* istanbul ignore next */
    (cov_29soprssx3().b[4][1]++, fetchError.code !== 'PGRST116')) {
      /* istanbul ignore next */
      cov_29soprssx3().b[3][0]++;
      cov_29soprssx3().s[20]++;
      console.error('Error al buscar usuario:', fetchError);
      /* istanbul ignore next */
      cov_29soprssx3().s[21]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error al buscar usuario'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_29soprssx3().b[3][1]++;
    }
    let userData;
    /* istanbul ignore next */
    cov_29soprssx3().s[22]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_29soprssx3().b[5][0]++;
      // Actualizar usuario existente
      const {
        data: updatedUser,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_29soprssx3().s[23]++, await supabase.from('user_profiles').update({
        first_name:
        /* istanbul ignore next */
        (cov_29soprssx3().b[6][0]++, name?.split(' ')[0]) ||
        /* istanbul ignore next */
        (cov_29soprssx3().b[6][1]++, null),
        last_name:
        /* istanbul ignore next */
        (cov_29soprssx3().b[7][0]++, name?.split(' ').slice(1).join(' ')) ||
        /* istanbul ignore next */
        (cov_29soprssx3().b[7][1]++, null),
        email,
        metadata: {
          ...existingUser.metadata,
          updated_via: 'sync_api',
          last_sync: new Date().toISOString()
        },
        updated_at: new Date().toISOString()
      }).eq('id', id).select('*').single());
      /* istanbul ignore next */
      cov_29soprssx3().s[24]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_29soprssx3().b[8][0]++;
        cov_29soprssx3().s[25]++;
        console.error('Error al actualizar usuario:', updateError);
        /* istanbul ignore next */
        cov_29soprssx3().s[26]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Error al actualizar usuario'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_29soprssx3().b[8][1]++;
      }
      cov_29soprssx3().s[27]++;
      userData = updatedUser;
    } else {
      /* istanbul ignore next */
      cov_29soprssx3().b[5][1]++;
      // Crear nuevo usuario
      const {
        data: newUser,
        error: insertError
      } =
      /* istanbul ignore next */
      (cov_29soprssx3().s[28]++, await supabase.from('user_profiles').insert({
        id,
        first_name:
        /* istanbul ignore next */
        (cov_29soprssx3().b[9][0]++, name?.split(' ')[0]) ||
        /* istanbul ignore next */
        (cov_29soprssx3().b[9][1]++, null),
        last_name:
        /* istanbul ignore next */
        (cov_29soprssx3().b[10][0]++, name?.split(' ').slice(1).join(' ')) ||
        /* istanbul ignore next */
        (cov_29soprssx3().b[10][1]++, null),
        email,
        role_id: null,
        is_active: true,
        metadata: {
          created_via: 'sync_api',
          source: 'nextauth',
          created_at: new Date().toISOString()
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }).select('*').single());
      /* istanbul ignore next */
      cov_29soprssx3().s[29]++;
      if (insertError) {
        /* istanbul ignore next */
        cov_29soprssx3().b[11][0]++;
        cov_29soprssx3().s[30]++;
        console.error('Error al crear usuario:', insertError);
        /* istanbul ignore next */
        cov_29soprssx3().s[31]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Error al crear usuario'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_29soprssx3().b[11][1]++;
      }
      cov_29soprssx3().s[32]++;
      userData = newUser;
    }
    /* istanbul ignore next */
    cov_29soprssx3().s[33]++;
    return _server.NextResponse.json({
      success: true,
      user: userData
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_29soprssx3().s[34]++;
    console.error('Error en sincronizaciÃ³n de usuario:', error);
    /* istanbul ignore next */
    cov_29soprssx3().s[35]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,