a7a22ff830ec75c37f7a1c83b11bb738
/**
 * Test independiente para useProductList sin dependencias de configuración global
 * Ejecutar con: npx jest src/hooks/admin/__tests__/useProductList.standalone.test.ts --no-cache --no-coverage
 */ // Mock React hooks
"use strict";
jest.mock('react', ()=>({
        useState: mockUseState,
        useEffect: mockUseEffect
    }));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockUseState = jest.fn();
const mockUseEffect = jest.fn();
// Mock fetch
global.fetch = jest.fn();
describe('useProductList Hook - Standalone Tests', ()=>{
    let mockSetProducts;
    let mockSetIsLoading;
    let mockSetError;
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock useState calls
        mockSetProducts = jest.fn();
        mockSetIsLoading = jest.fn();
        mockSetError = jest.fn();
        mockUseState.mockReturnValueOnce([
            [],
            mockSetProducts
        ]) // products state
        .mockReturnValueOnce([
            true,
            mockSetIsLoading
        ]) // isLoading state
        .mockReturnValueOnce([
            null,
            mockSetError
        ]); // error state
        // Mock useEffect to immediately call the effect
        mockUseEffect.mockImplementation((effect)=>{
            effect();
        });
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    it('should initialize with correct default state', async ()=>{
        // Mock successful API response
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true,
                    data: {
                        products: [],
                        total: 0
                    }
                })
        });
        // Import and execute the hook
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        const result = useProductList();
        // Verify initial state setup
        expect(mockUseState).toHaveBeenCalledTimes(3);
        expect(mockUseState).toHaveBeenNthCalledWith(1, []); // products
        expect(mockUseState).toHaveBeenNthCalledWith(2, true); // isLoading
        expect(mockUseState).toHaveBeenNthCalledWith(3, null); // error
        // Verify return value structure
        expect(result).toEqual({
            products: [],
            isLoading: true,
            error: null
        });
    });
    it('should call fetch with correct URL', async ()=>{
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true,
                    data: {
                        products: [],
                        total: 0
                    }
                })
        });
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        useProductList();
        expect(global.fetch).toHaveBeenCalledWith('/api/admin/products-direct?limit=25');
    });
    it('should handle successful API response', async ()=>{
        const mockProducts = [
            {
                id: 1,
                name: 'Test Product',
                description: 'Test Description',
                price: 1000,
                stock: 50,
                category_id: 1,
                images: {
                    main: '/test.jpg',
                    gallery: [],
                    previews: [],
                    thumbnails: []
                },
                created_at: '2025-01-01T00:00:00Z',
                updated_at: '2025-01-01T00:00:00Z',
                category_name: 'Test Category'
            }
        ];
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true,
                    data: {
                        products: mockProducts,
                        total: 1
                    }
                })
        });
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        useProductList();
        // Wait for async operations
        await new Promise((resolve)=>setTimeout(resolve, 0));
        expect(mockSetIsLoading).toHaveBeenCalledWith(true);
        expect(mockSetError).toHaveBeenCalledWith(null);
        expect(mockSetProducts).toHaveBeenCalledWith(mockProducts);
        expect(mockSetIsLoading).toHaveBeenCalledWith(false);
    });
    it('should handle API errors', async ()=>{
        global.fetch.mockResolvedValueOnce({
            ok: false,
            status: 500,
            statusText: 'Internal Server Error'
        });
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        useProductList();
        // Wait for async operations
        await new Promise((resolve)=>setTimeout(resolve, 0));
        expect(mockSetError).toHaveBeenCalledWith('Error 500: Internal Server Error');
        expect(mockSetProducts).toHaveBeenCalledWith([]);
        expect(mockSetIsLoading).toHaveBeenCalledWith(false);
    });
    it('should handle network errors', async ()=>{
        global.fetch.mockRejectedValueOnce(new Error('Network error'));
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        useProductList();
        // Wait for async operations
        await new Promise((resolve)=>setTimeout(resolve, 0));
        expect(mockSetError).toHaveBeenCalledWith('Network error');
        expect(mockSetProducts).toHaveBeenCalledWith([]);
        expect(mockSetIsLoading).toHaveBeenCalledWith(false);
    });
    it('should handle invalid response structure', async ()=>{
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: false,
                    error: 'Invalid request'
                })
        });
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        useProductList();
        // Wait for async operations
        await new Promise((resolve)=>setTimeout(resolve, 0));
        expect(mockSetError).toHaveBeenCalledWith('Estructura de respuesta inválida');
        expect(mockSetProducts).toHaveBeenCalledWith([]);
        expect(mockSetIsLoading).toHaveBeenCalledWith(false);
    });
    it('should export correct TypeScript types', async ()=>{
        const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        expect(typeof module.useProductList).toBe('function');
        expect(module.Product).toBeDefined;
        expect(module.ProductListResponse).toBeDefined;
    });
    it('should follow React Hooks best practices', async ()=>{
        const { useProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../useProductList")));
        // Hook should be a function
        expect(typeof useProductList).toBe('function');
        // Hook name should start with 'use'
        expect(useProductList.name).toBe('useProductList');
        // Hook follows React best practices
        expect(useProductList.name).toMatch(/^use/);
    });
});

//# sourceMappingURL=data:application/json;base64,