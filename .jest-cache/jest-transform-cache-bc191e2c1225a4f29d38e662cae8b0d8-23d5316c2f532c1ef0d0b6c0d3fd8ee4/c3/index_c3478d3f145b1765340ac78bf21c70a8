628157eefa1348bb62466a924a931734
// ===================================
// PINTEYA E-COMMERCE - STRUCTURED LOGGING SYSTEM
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get LogCategory () {
        return LogCategory;
    },
    get LogLevel () {
        return LogLevel;
    },
    get default () {
        return _default;
    },
    get logPayment () {
        return logPayment;
    },
    get logPerformance () {
        return logPerformance;
    },
    get logSecurity () {
        return logSecurity;
    },
    get logWebhook () {
        return logWebhook;
    },
    get logger () {
        return logger;
    }
});
var LogLevel = /*#__PURE__*/ function(LogLevel) {
    LogLevel["DEBUG"] = "debug";
    LogLevel["INFO"] = "info";
    LogLevel["WARN"] = "warn";
    LogLevel["ERROR"] = "error";
    LogLevel["CRITICAL"] = "critical";
    return LogLevel;
}({});
var LogCategory = /*#__PURE__*/ function(LogCategory) {
    LogCategory["PAYMENT"] = "payment";
    LogCategory["WEBHOOK"] = "webhook";
    LogCategory["ORDER"] = "order";
    LogCategory["AUTH"] = "auth";
    LogCategory["API"] = "api";
    LogCategory["SECURITY"] = "security";
    LogCategory["PERFORMANCE"] = "performance";
    LogCategory["USER"] = "user";
    return LogCategory;
}({});
class StructuredLogger {
    constructor(){
        this.environment = process.env.NODE_ENV || 'development';
        this.enableConsole = true;
        this.enableFile = process.env.NODE_ENV === 'production';
        this.minLevel = process.env.NODE_ENV === 'production' ? "info" : "debug";
    }
    shouldLog(level) {
        const levels = [
            "debug",
            "info",
            "warn",
            "error",
            "critical"
        ];
        return levels.indexOf(level) >= levels.indexOf(this.minLevel);
    }
    formatLogEntry(entry) {
        return JSON.stringify({
            ...entry,
            timestamp: new Date().toISOString(),
            environment: this.environment
        }, null, this.environment === 'development' ? 2 : 0);
    }
    writeLog(entry) {
        if (!this.shouldLog(entry.level)) {
            return;
        }
        const formattedEntry = this.formatLogEntry(entry);
        // Console output
        if (this.enableConsole) {
            switch(entry.level){
                case "debug":
                    console.debug(formattedEntry);
                    break;
                case "info":
                    console.info(formattedEntry);
                    break;
                case "warn":
                    console.warn(formattedEntry);
                    break;
                case "error":
                case "critical":
                    console.error(formattedEntry);
                    break;
            }
        }
        // File output (en producción se podría integrar con servicios como Winston, Pino, etc.)
        if (this.enableFile) {
        // TODO: Implementar escritura a archivo o servicio de logging externo
        // Por ahora solo console en producción
        }
    }
    // Métodos públicos para diferentes categorías
    payment(level, message, paymentData, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level,
            category: "payment",
            message,
            paymentData,
            environment: this.environment,
            ...metadata
        });
    }
    webhook(level, message, webhookData, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level,
            category: "webhook",
            message,
            webhookData,
            environment: this.environment,
            ...metadata
        });
    }
    security(level, message, securityData, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level,
            category: "security",
            message,
            securityData,
            environment: this.environment,
            ...metadata
        });
    }
    performance(level, message, performanceData, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level,
            category: "performance",
            message,
            performanceData,
            environment: this.environment,
            ...metadata
        });
    }
    // Método log genérico para compatibilidad
    log(level, category, message, data, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level,
            category,
            message,
            environment: this.environment,
            data,
            ...metadata
        });
    }
    // Métodos de conveniencia
    debug(level, message, data, category, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level: level,
            category: category || "api",
            message,
            environment: this.environment,
            data,
            ...metadata
        });
    }
    info(category, message, data, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level: "info",
            category,
            message,
            environment: this.environment,
            data,
            ...metadata
        });
    }
    warn(category, message, data, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level: "warn",
            category,
            message,
            environment: this.environment,
            data,
            ...metadata
        });
    }
    error(category, message, error, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level: "error",
            category,
            message,
            environment: this.environment,
            error: error ? {
                name: error.name,
                message: error.message,
                stack: error.stack
            } : undefined,
            ...metadata
        });
    }
    critical(category, message, error, metadata) {
        this.writeLog({
            timestamp: new Date().toISOString(),
            level: "critical",
            category,
            message,
            environment: this.environment,
            error: error ? {
                name: error.name,
                message: error.message,
                stack: error.stack
            } : undefined,
            ...metadata
        });
    }
    // Método para medir performance
    measurePerformance(operation, fn, metadata) {
        const start = Date.now();
        try {
            const result = fn();
            if (result instanceof Promise) {
                return result.then((value)=>{
                    const duration = Date.now() - start;
                    this.performance("info", `Operation completed: ${operation}`, {
                        operation,
                        duration
                    }, metadata);
                    return value;
                }).catch((error)=>{
                    const duration = Date.now() - start;
                    this.performance("error", `Operation failed: ${operation}`, {
                        operation,
                        duration
                    }, metadata);
                    throw error;
                });
            } else {
                const duration = Date.now() - start;
                this.performance("info", `Operation completed: ${operation}`, {
                    operation,
                    duration
                }, metadata);
                return result;
            }
        } catch (error) {
            const duration = Date.now() - start;
            this.performance("error", `Operation failed: ${operation}`, {
                operation,
                duration
            }, metadata);
            throw error;
        }
    }
}
const logger = new StructuredLogger();
const logPayment = (level, message, paymentData, metadata)=>{
    logger.payment(level, message, paymentData, metadata);
};
const logWebhook = (level, message, webhookData, metadata)=>{
    logger.webhook(level, message, webhookData, metadata);
};
const logSecurity = (level, message, securityData, metadata)=>{
    logger.security(level, message, securityData, metadata);
};
const logPerformance = (level, message, performanceData, metadata)=>{
    logger.performance(level, message, performanceData, metadata);
};
const _default = logger;

//# sourceMappingURL=data:application/json;base64,