{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\logger\\index.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - STRUCTURED LOGGING SYSTEM\r\n// ===================================\r\n\r\nexport enum LogLevel {\r\n  DEBUG = 'debug',\r\n  INFO = 'info',\r\n  WARN = 'warn',\r\n  ERROR = 'error',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\nexport enum LogCategory {\r\n  PAYMENT = 'payment',\r\n  WEBHOOK = 'webhook',\r\n  ORDER = 'order',\r\n  AUTH = 'auth',\r\n  API = 'api',\r\n  SECURITY = 'security',\r\n  PERFORMANCE = 'performance',\r\n  USER = 'user'\r\n}\r\n\r\ninterface BaseLogEntry {\r\n  timestamp: string;\r\n  level: LogLevel;\r\n  category: LogCategory;\r\n  message: string;\r\n  requestId?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  clientIP?: string;\r\n  userAgent?: string;\r\n  environment: string;\r\n}\r\n\r\ninterface PaymentLogEntry extends BaseLogEntry {\r\n  category: LogCategory.PAYMENT;\r\n  paymentData: {\r\n    orderId?: string;\r\n    paymentId?: string;\r\n    amount?: number;\r\n    currency?: string;\r\n    status?: string;\r\n    method?: string;\r\n    preferenceId?: string;\r\n  };\r\n}\r\n\r\ninterface WebhookLogEntry extends BaseLogEntry {\r\n  category: LogCategory.WEBHOOK;\r\n  webhookData: {\r\n    type?: string;\r\n    action?: string;\r\n    dataId?: string;\r\n    signature?: string;\r\n    isValid?: boolean;\r\n    processingTime?: number;\r\n  };\r\n}\r\n\r\ninterface SecurityLogEntry extends BaseLogEntry {\r\n  category: LogCategory.SECURITY;\r\n  securityData: {\r\n    threat?: string;\r\n    blocked?: boolean;\r\n    reason?: string;\r\n    riskScore?: number;\r\n  };\r\n}\r\n\r\ninterface PerformanceLogEntry extends BaseLogEntry {\r\n  category: LogCategory.PERFORMANCE;\r\n  performanceData: {\r\n    operation?: string;\r\n    duration?: number;\r\n    endpoint?: string;\r\n    statusCode?: number;\r\n    responseSize?: number;\r\n  };\r\n}\r\n\r\ntype LogEntry = PaymentLogEntry | WebhookLogEntry | SecurityLogEntry | PerformanceLogEntry | BaseLogEntry;\r\n\r\nclass StructuredLogger {\r\n  private environment: string;\r\n  private enableConsole: boolean;\r\n  private enableFile: boolean;\r\n  private minLevel: LogLevel;\r\n\r\n  constructor() {\r\n    this.environment = process.env.NODE_ENV || 'development';\r\n    this.enableConsole = true;\r\n    this.enableFile = process.env.NODE_ENV === 'production';\r\n    this.minLevel = process.env.NODE_ENV === 'production' ? LogLevel.INFO : LogLevel.DEBUG;\r\n  }\r\n\r\n  private shouldLog(level: LogLevel): boolean {\r\n    const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.CRITICAL];\r\n    return levels.indexOf(level) >= levels.indexOf(this.minLevel);\r\n  }\r\n\r\n  private formatLogEntry(entry: LogEntry): string {\r\n    return JSON.stringify({\r\n      ...entry,\r\n      timestamp: new Date().toISOString(),\r\n      environment: this.environment,\r\n    }, null, this.environment === 'development' ? 2 : 0);\r\n  }\r\n\r\n  private writeLog(entry: LogEntry): void {\r\n    if (!this.shouldLog(entry.level)) {return;}\r\n\r\n    const formattedEntry = this.formatLogEntry(entry);\r\n\r\n    // Console output\r\n    if (this.enableConsole) {\r\n      switch (entry.level) {\r\n        case LogLevel.DEBUG:\r\n          console.debug(formattedEntry);\r\n          break;\r\n        case LogLevel.INFO:\r\n          console.info(formattedEntry);\r\n          break;\r\n        case LogLevel.WARN:\r\n          console.warn(formattedEntry);\r\n          break;\r\n        case LogLevel.ERROR:\r\n        case LogLevel.CRITICAL:\r\n          console.error(formattedEntry);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // File output (en producción se podría integrar con servicios como Winston, Pino, etc.)\r\n    if (this.enableFile) {\r\n      // TODO: Implementar escritura a archivo o servicio de logging externo\r\n      // Por ahora solo console en producción\r\n    }\r\n  }\r\n\r\n  // Métodos públicos para diferentes categorías\r\n  payment(level: LogLevel, message: string, paymentData: PaymentLogEntry['paymentData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.PAYMENT,\r\n      message,\r\n      paymentData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as PaymentLogEntry);\r\n  }\r\n\r\n  webhook(level: LogLevel, message: string, webhookData: WebhookLogEntry['webhookData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.WEBHOOK,\r\n      message,\r\n      webhookData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as WebhookLogEntry);\r\n  }\r\n\r\n  security(level: LogLevel, message: string, securityData: SecurityLogEntry['securityData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.SECURITY,\r\n      message,\r\n      securityData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as SecurityLogEntry);\r\n  }\r\n\r\n  performance(level: LogLevel, message: string, performanceData: PerformanceLogEntry['performanceData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.PERFORMANCE,\r\n      message,\r\n      performanceData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as PerformanceLogEntry);\r\n  }\r\n\r\n  // Método log genérico para compatibilidad\r\n  log(level: LogLevel, category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  // Métodos de conveniencia\r\n  debug(level: LogLevel, message: string, data?: any, category?: LogCategory, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: level,\r\n      category: category || LogCategory.API,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  info(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.INFO,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  warn(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.WARN,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  error(category: LogCategory, message: string, error?: Error, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.ERROR,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      error: error ? {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack,\r\n      } : undefined,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  critical(category: LogCategory, message: string, error?: Error, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.CRITICAL,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      error: error ? {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack,\r\n      } : undefined,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  // Método para medir performance\r\n  measurePerformance<T>(operation: string, fn: () => T | Promise<T>, metadata?: Partial<BaseLogEntry>): T | Promise<T> {\r\n    const start = Date.now();\r\n    \r\n    try {\r\n      const result = fn();\r\n      \r\n      if (result instanceof Promise) {\r\n        return result.then((value) => {\r\n          const duration = Date.now() - start;\r\n          this.performance(LogLevel.INFO, `Operation completed: ${operation}`, {\r\n            operation,\r\n            duration,\r\n          }, metadata);\r\n          return value;\r\n        }).catch((error) => {\r\n          const duration = Date.now() - start;\r\n          this.performance(LogLevel.ERROR, `Operation failed: ${operation}`, {\r\n            operation,\r\n            duration,\r\n          }, metadata);\r\n          throw error;\r\n        });\r\n      } else {\r\n        const duration = Date.now() - start;\r\n        this.performance(LogLevel.INFO, `Operation completed: ${operation}`, {\r\n          operation,\r\n          duration,\r\n        }, metadata);\r\n        return result;\r\n      }\r\n    } catch (error) {\r\n      const duration = Date.now() - start;\r\n      this.performance(LogLevel.ERROR, `Operation failed: ${operation}`, {\r\n        operation,\r\n        duration,\r\n      }, metadata);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del logger\r\nexport const logger = new StructuredLogger();\r\n\r\n// Funciones de conveniencia para uso directo\r\nexport const logPayment = (level: LogLevel, message: string, paymentData: PaymentLogEntry['paymentData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.payment(level, message, paymentData, metadata);\r\n};\r\n\r\nexport const logWebhook = (level: LogLevel, message: string, webhookData: WebhookLogEntry['webhookData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.webhook(level, message, webhookData, metadata);\r\n};\r\n\r\nexport const logSecurity = (level: LogLevel, message: string, securityData: SecurityLogEntry['securityData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.security(level, message, securityData, metadata);\r\n};\r\n\r\nexport const logPerformance = (level: LogLevel, message: string, performanceData: PerformanceLogEntry['performanceData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.performance(level, message, performanceData, metadata);\r\n};\r\n\r\nexport default logger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["LogCategory","LogLevel","logPayment","logPerformance","logSecurity","logWebhook","logger","StructuredLogger","environment","process","env","NODE_ENV","enableConsole","enableFile","minLevel","shouldLog","level","levels","indexOf","formatLogEntry","entry","JSON","stringify","timestamp","Date","toISOString","writeLog","formattedEntry","console","debug","info","warn","error","payment","message","paymentData","metadata","category","webhook","webhookData","security","securityData","performance","performanceData","log","data","name","stack","undefined","critical","measurePerformance","operation","fn","start","now","result","Promise","then","value","duration","catch"],"mappings":"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"}