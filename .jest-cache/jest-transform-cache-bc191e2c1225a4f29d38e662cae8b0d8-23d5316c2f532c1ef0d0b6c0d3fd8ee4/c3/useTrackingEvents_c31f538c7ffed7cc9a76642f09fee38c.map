{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useTrackingEvents.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: TRACKING EVENTS ENTERPRISE\r\n// Descripción: Hook para gestión de eventos de tracking tiempo real\r\n// Basado en: Patrones TanStack Query + WebSocket simulation\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  TrackingEvent,\r\n  CreateTrackingEventRequest,\r\n  Shipment,\r\n  UseTrackingEventsReturn \r\n} from '@/types/logistics';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN DE QUERIES\r\n// =====================================================\r\n\r\nconst TRACKING_QUERY_KEY = ['admin', 'logistics', 'tracking'];\r\nconst REAL_TIME_REFETCH_INTERVAL = 30000; // 30 segundos\r\n\r\n// =====================================================\r\n// FUNCIONES DE API\r\n// =====================================================\r\n\r\nasync function fetchTrackingEvents(shipmentId: number): Promise<{\r\n  shipment: Shipment;\r\n  tracking_events: TrackingEvent[];\r\n}> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    }\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function createTrackingEvent(\r\n  shipmentId: number, \r\n  data: Omit<CreateTrackingEventRequest, 'shipment_id'>\r\n): Promise<TrackingEvent> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data)\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\nasync function bulkCreateTrackingEvents(\r\n  shipmentId: number,\r\n  events: Omit<CreateTrackingEventRequest, 'shipment_id'>[]\r\n): Promise<TrackingEvent[]> {\r\n  const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ events })\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n  }\r\n  \r\n  const result = await response.json();\r\n  return result.data;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL: useTrackingEvents\r\n// =====================================================\r\n\r\nexport function useTrackingEvents(\r\n  shipmentId: number,\r\n  options?: {\r\n    enabled?: boolean;\r\n    refetchInterval?: number;\r\n    realTime?: boolean;\r\n  }\r\n): UseTrackingEventsReturn {\r\n  const queryClient = useQueryClient();\r\n  \r\n  const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n  \r\n  const {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey,\r\n    queryFn: () => fetchTrackingEvents(shipmentId),\r\n    enabled: options?.enabled ?? true,\r\n    refetchInterval: options?.realTime \r\n      ? (options?.refetchInterval ?? REAL_TIME_REFETCH_INTERVAL)\r\n      : false,\r\n    staleTime: options?.realTime ? 10000 : 60000,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\r\n  });\r\n  \r\n  return {\r\n    data: data?.tracking_events,\r\n    shipment: data?.shipment,\r\n    isLoading,\r\n    error: error as Error | null,\r\n    refetch\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useCreateTrackingEvent\r\n// =====================================================\r\n\r\nexport function useCreateTrackingEvent(shipmentId: number) {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (data: Omit<CreateTrackingEventRequest, 'shipment_id'>) => \r\n      createTrackingEvent(shipmentId, data),\r\n    onSuccess: (newEvent) => {\r\n      // Actualizar cache de tracking events\r\n      const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n      \r\n      queryClient.setQueryData(queryKey, (oldData: any) => {\r\n        if (!oldData) {return oldData;}\r\n        \r\n        return {\r\n          ...oldData,\r\n          tracking_events: [newEvent, ...oldData.tracking_events]\r\n        };\r\n      });\r\n      \r\n      // Invalidar cache relacionado\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'shipments'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success('Evento de tracking agregado', {\r\n        description: newEvent.description\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al agregar evento', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useBulkTrackingEvents\r\n// =====================================================\r\n\r\nexport function useBulkTrackingEvents(shipmentId: number) {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: (events: Omit<CreateTrackingEventRequest, 'shipment_id'>[]) => \r\n      bulkCreateTrackingEvents(shipmentId, events),\r\n    onSuccess: (newEvents) => {\r\n      // Actualizar cache\r\n      const queryKey = [...TRACKING_QUERY_KEY, shipmentId];\r\n      \r\n      queryClient.setQueryData(queryKey, (oldData: any) => {\r\n        if (!oldData) {return oldData;}\r\n        \r\n        return {\r\n          ...oldData,\r\n          tracking_events: [...newEvents, ...oldData.tracking_events]\r\n        };\r\n      });\r\n      \r\n      // Invalidar cache relacionado\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'shipments'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin', 'logistics', 'dashboard'] });\r\n      \r\n      toast.success(`${newEvents.length} eventos agregados exitosamente`);\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error('Error al agregar eventos', {\r\n        description: error.message\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useTrackingTimeline\r\n// =====================================================\r\n\r\nexport function useTrackingTimeline(shipmentId: number) {\r\n  const { data: events, shipment, isLoading, error } = useTrackingEvents(shipmentId, {\r\n    realTime: true\r\n  });\r\n  \r\n  // Procesar eventos para timeline\r\n  const timelineEvents = events?.map(event => ({\r\n    ...event,\r\n    isCompleted: true,\r\n    isCurrent: false,\r\n    isPending: false\r\n  })).sort((a, b) => \r\n    new Date(a.occurred_at).getTime() - new Date(b.occurred_at).getTime()\r\n  ) || [];\r\n  \r\n  // Determinar estado actual\r\n  const currentStatus = shipment?.status;\r\n  const lastEvent = timelineEvents[timelineEvents.length - 1];\r\n  \r\n  // Estados esperados del timeline\r\n  const expectedStates = [\r\n    { status: 'pending', label: 'Pendiente', description: 'Envío creado' },\r\n    { status: 'confirmed', label: 'Confirmado', description: 'Envío confirmado' },\r\n    { status: 'picked_up', label: 'Recolectado', description: 'Recolectado por courier' },\r\n    { status: 'in_transit', label: 'En tránsito', description: 'En camino' },\r\n    { status: 'out_for_delivery', label: 'En reparto', description: 'Salió para entrega' },\r\n    { status: 'delivered', label: 'Entregado', description: 'Entregado exitosamente' }\r\n  ];\r\n  \r\n  const timelineStates = expectedStates.map(state => {\r\n    const hasEvent = timelineEvents.some(event => event.status === state.status);\r\n    const isCurrent = currentStatus === state.status;\r\n    const isCompleted = hasEvent && !isCurrent;\r\n    const isPending = !hasEvent && !isCurrent;\r\n    \r\n    return {\r\n      ...state,\r\n      hasEvent,\r\n      isCurrent,\r\n      isCompleted,\r\n      isPending,\r\n      event: timelineEvents.find(event => event.status === state.status)\r\n    };\r\n  });\r\n  \r\n  return {\r\n    events: timelineEvents,\r\n    timelineStates,\r\n    shipment,\r\n    currentStatus,\r\n    lastEvent,\r\n    isLoading,\r\n    error,\r\n    progress: {\r\n      completed: timelineStates.filter(state => state.isCompleted).length,\r\n      total: timelineStates.length,\r\n      percentage: (timelineStates.filter(state => state.isCompleted).length / timelineStates.length) * 100\r\n    }\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useRealTimeTracking\r\n// =====================================================\r\n\r\nexport function useRealTimeTracking(shipmentId: number) {\r\n  const [isRealTimeEnabled, setIsRealTimeEnabled] = useState(false);\r\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\r\n  \r\n  const { data: events, refetch } = useTrackingEvents(shipmentId, {\r\n    realTime: isRealTimeEnabled,\r\n    refetchInterval: 15000 // 15 segundos para tiempo real\r\n  });\r\n  \r\n  // Simular notificaciones de nuevos eventos\r\n  useEffect(() => {\r\n    if (events && events.length > 0) {\r\n      setLastUpdate(new Date());\r\n    }\r\n  }, [events]);\r\n  \r\n  const enableRealTime = useCallback(() => {\r\n    setIsRealTimeEnabled(true);\r\n    toast.info('Tracking en tiempo real activado');\r\n  }, []);\r\n  \r\n  const disableRealTime = useCallback(() => {\r\n    setIsRealTimeEnabled(false);\r\n    toast.info('Tracking en tiempo real desactivado');\r\n  }, []);\r\n  \r\n  const forceRefresh = useCallback(async () => {\r\n    await refetch();\r\n    setLastUpdate(new Date());\r\n    toast.success('Tracking actualizado');\r\n  }, [refetch]);\r\n  \r\n  return {\r\n    events,\r\n    isRealTimeEnabled,\r\n    lastUpdate,\r\n    enableRealTime,\r\n    disableRealTime,\r\n    forceRefresh\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK: useTrackingAnalytics\r\n// =====================================================\r\n\r\nexport function useTrackingAnalytics(shipmentId: number) {\r\n  const { data: events, shipment } = useTrackingEvents(shipmentId);\r\n  \r\n  if (!events || !shipment) {\r\n    return null;\r\n  }\r\n  \r\n  // Calcular métricas\r\n  const totalEvents = events.length;\r\n  const uniqueLocations = [...new Set(events.map(e => e.location).filter(Boolean))].length;\r\n  \r\n  // Tiempo entre eventos\r\n  const eventTimes = events\r\n    .map(e => new Date(e.occurred_at).getTime())\r\n    .sort((a, b) => a - b);\r\n  \r\n  const averageTimeBetweenEvents = eventTimes.length > 1\r\n    ? eventTimes.slice(1).reduce((acc, time, index) => {\r\n        return acc + (time - eventTimes[index]);\r\n      }, 0) / (eventTimes.length - 1)\r\n    : 0;\r\n  \r\n  // Tiempo total de tránsito\r\n  const firstEvent = events[events.length - 1]; // Más antiguo\r\n  const lastEvent = events[0]; // Más reciente\r\n  \r\n  const totalTransitTime = firstEvent && lastEvent\r\n    ? new Date(lastEvent.occurred_at).getTime() - new Date(firstEvent.occurred_at).getTime()\r\n    : 0;\r\n  \r\n  // Velocidad promedio (si hay ubicaciones)\r\n  const eventsWithLocation = events.filter(e => e.latitude && e.longitude);\r\n  let averageSpeed = 0;\r\n  \r\n  if (eventsWithLocation.length > 1) {\r\n    // Calcular distancia total aproximada entre puntos\r\n    // (implementación simplificada)\r\n    averageSpeed = uniqueLocations / (totalTransitTime / (1000 * 60 * 60)); // km/h aproximado\r\n  }\r\n  \r\n  return {\r\n    totalEvents,\r\n    uniqueLocations,\r\n    averageTimeBetweenEvents: averageTimeBetweenEvents / (1000 * 60), // minutos\r\n    totalTransitTime: totalTransitTime / (1000 * 60 * 60), // horas\r\n    averageSpeed: Math.round(averageSpeed * 10) / 10,\r\n    eventsWithLocation: eventsWithLocation.length,\r\n    locationCoverage: eventsWithLocation.length / totalEvents * 100\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// TIPOS EXTENDIDOS\r\n// =====================================================\r\n\r\nexport interface UseTrackingEventsExtendedReturn extends UseTrackingEventsReturn {\r\n  shipment?: Shipment;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useBulkTrackingEvents","useCreateTrackingEvent","useRealTimeTracking","useTrackingAnalytics","useTrackingEvents","useTrackingTimeline","TRACKING_QUERY_KEY","REAL_TIME_REFETCH_INTERVAL","fetchTrackingEvents","shipmentId","response","fetch","method","headers","ok","errorData","json","catch","Error","error","status","statusText","result","data","createTrackingEvent","body","JSON","stringify","bulkCreateTrackingEvents","events","options","queryClient","useQueryClient","queryKey","isLoading","refetch","useQuery","queryFn","enabled","refetchInterval","realTime","staleTime","retry","retryDelay","attemptIndex","Math","min","tracking_events","shipment","useMutation","mutationFn","onSuccess","newEvent","setQueryData","oldData","invalidateQueries","toast","success","description","onError","message","newEvents","length","timelineEvents","map","event","isCompleted","isCurrent","isPending","sort","a","b","Date","occurred_at","getTime","currentStatus","lastEvent","expectedStates","label","timelineStates","state","hasEvent","some","find","progress","completed","filter","total","percentage","isRealTimeEnabled","setIsRealTimeEnabled","useState","lastUpdate","setLastUpdate","useEffect","enableRealTime","useCallback","info","disableRealTime","forceRefresh","totalEvents","uniqueLocations","Set","e","location","Boolean","eventTimes","averageTimeBetweenEvents","slice","reduce","acc","time","index","firstEvent","totalTransitTime","eventsWithLocation","latitude","longitude","averageSpeed","round","locationCoverage"],"mappings":"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"}