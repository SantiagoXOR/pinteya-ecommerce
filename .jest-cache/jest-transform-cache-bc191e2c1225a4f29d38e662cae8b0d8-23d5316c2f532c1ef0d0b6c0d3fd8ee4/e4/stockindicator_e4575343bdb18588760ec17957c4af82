6751eda3372c24609a0fcff80d718a1e
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get StockIndicator () {
        return StockIndicator;
    },
    get stockIndicatorVariants () {
        return stockIndicatorVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
const _lucidereact = require("lucide-react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const stockIndicatorVariants = (0, _classvarianceauthority.cva)('flex items-center gap-2 text-sm font-medium', {
    variants: {
        variant: {
            default: 'flex-row',
            compact: 'flex-row gap-1',
            badge: 'inline-flex px-2 py-1 rounded-full text-xs',
            minimal: 'flex-row gap-1 text-xs'
        },
        status: {
            inStock: 'text-green-600',
            lowStock: 'text-yellow-600',
            outOfStock: 'text-red-600',
            preOrder: 'text-blue-600'
        }
    },
    defaultVariants: {
        variant: 'default',
        status: 'inStock'
    }
});
/**
 * Determina el estado del stock basado en la cantidad
 */ const getStockStatus = (quantity, lowStockThreshold = 5, allowPreOrder = false)=>{
    if (quantity === 0) {
        return allowPreOrder ? 'preOrder' : 'outOfStock';
    }
    if (quantity <= lowStockThreshold) {
        return 'lowStock';
    }
    return 'inStock';
};
/**
 * Obtiene el ícono apropiado para cada estado
 */ const getStatusIcon = (status)=>{
    switch(status){
        case 'inStock':
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                className: "w-4 h-4"
            });
        case 'lowStock':
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertTriangle, {
                className: "w-4 h-4"
            });
        case 'outOfStock':
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.XCircle, {
                className: "w-4 h-4"
            });
        case 'preOrder':
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Package, {
                className: "w-4 h-4"
            });
        default:
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                className: "w-4 h-4"
            });
    }
};
/**
 * Obtiene el texto por defecto para cada estado
 */ const getDefaultText = (status, quantity, showExactQuantity, unit = 'unidades')=>{
    switch(status){
        case 'inStock':
            return showExactQuantity ? `${quantity} ${unit} disponibles` : 'En stock';
        case 'lowStock':
            return showExactQuantity ? `¡Solo ${quantity} ${unit} disponibles!` : 'Pocas unidades';
        case 'outOfStock':
            return 'Sin stock';
        case 'preOrder':
            return 'Disponible por encargo';
        default:
            return 'En stock';
    }
};
/**
 * Formatea la fecha de reposición
 */ const formatRestockDate = (date)=>{
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays <= 0) {
        return 'Disponible pronto';
    } else if (diffDays === 1) {
        return 'Disponible mañana';
    } else if (diffDays <= 7) {
        return `Disponible en ${diffDays} días`;
    } else {
        return `Disponible el ${date.toLocaleDateString('es-AR')}`;
    }
};
const StockIndicator = /*#__PURE__*/ _react.forwardRef(({ className, variant, quantity, lowStockThreshold = 5, showExactQuantity = false, customTexts = {}, showIcon = true, allowPreOrder = false, restockDate, unit = 'unidades', ...props }, ref)=>{
    const status = getStockStatus(quantity, lowStockThreshold, allowPreOrder);
    const statusText = customTexts[status] || getDefaultText(status, quantity, showExactQuantity, unit);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: ref,
        className: (0, _utils.cn)(stockIndicatorVariants({
            variant,
            status,
            className
        })),
        ...props,
        children: [
            showIcon && getStatusIcon(status),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                children: statusText
            }),
            status === 'outOfStock' && restockDate && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                className: "text-xs text-muted-foreground ml-1",
                children: [
                    "(",
                    formatRestockDate(restockDate),
                    ")"
                ]
            }),
            variant === 'badge' && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: (0, _utils.cn)('absolute -top-1 -right-1 w-3 h-3 rounded-full', {
                    'bg-green-500': status === 'inStock',
                    'bg-yellow-500': status === 'lowStock',
                    'bg-red-500': status === 'outOfStock',
                    'bg-blue-500': status === 'preOrder'
                })
            })
        ]
    });
});
StockIndicator.displayName = 'StockIndicator';

//# sourceMappingURL=data:application/json;base64,