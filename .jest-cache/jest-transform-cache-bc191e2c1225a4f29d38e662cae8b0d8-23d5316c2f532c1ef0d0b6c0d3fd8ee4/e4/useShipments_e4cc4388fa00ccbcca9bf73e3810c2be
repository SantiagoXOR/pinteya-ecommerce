ba28c00bd88bfdca51aa8f98c7f8e18e
// =====================================================
// HOOK: SHIPMENTS MANAGEMENT ENTERPRISE
// Descripción: Hook para gestión completa de envíos
// Basado en: Patrones TanStack Query + React Hook Form
// =====================================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useBulkShipmentOperations () {
        return useBulkShipmentOperations;
    },
    get useCreateShipment () {
        return useCreateShipment;
    },
    get useDeleteShipment () {
        return useDeleteShipment;
    },
    get useShipmentFilters () {
        return useShipmentFilters;
    },
    get useShipmentStats () {
        return useShipmentStats;
    },
    get useShipments () {
        return useShipments;
    },
    get useUpdateShipment () {
        return useUpdateShipment;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _sonner = require("sonner");
// =====================================================
// CONFIGURACIÓN DE QUERIES
// =====================================================
const SHIPMENTS_QUERY_KEY = [
    'admin',
    'logistics',
    'shipments'
];
const STALE_TIME = 30000; // 30 segundos
// =====================================================
// FUNCIONES DE API
// =====================================================
async function fetchShipments(params) {
    const searchParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value])=>{
        if (value !== undefined && value !== null) {
            searchParams.append(key, value.toString());
        }
    });
    const response = await fetch(`/api/admin/logistics/shipments?${searchParams}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
}
async function createShipment(data) {
    const response = await fetch('/api/admin/logistics/shipments', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data;
}
async function updateShipment(id, data) {
    const response = await fetch(`/api/admin/logistics/shipments/${id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data;
}
async function deleteShipment(id) {
    const response = await fetch(`/api/admin/logistics/shipments/${id}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
}
function useShipments(params = {}) {
    const queryClient = (0, _reactquery.useQueryClient)();
    const queryKey = [
        ...SHIPMENTS_QUERY_KEY,
        params
    ];
    const { data, isLoading, error, refetch } = (0, _reactquery.useQuery)({
        queryKey,
        queryFn: ()=>fetchShipments(params),
        staleTime: STALE_TIME,
        retry: 3,
        retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)
    });
    return {
        data,
        isLoading,
        error: error,
        refetch
    };
}
function useCreateShipment() {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: createShipment,
        onSuccess: (newShipment)=>{
            // Invalidar cache de shipments
            queryClient.invalidateQueries({
                queryKey: SHIPMENTS_QUERY_KEY
            });
            // Invalidar dashboard de logística
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success('Envío creado exitosamente', {
                description: `Número de envío: ${newShipment.shipment_number}`
            });
        },
        onError: (error)=>{
            _sonner.toast.error('Error al crear envío', {
                description: error.message
            });
        }
    });
}
function useUpdateShipment() {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: ({ id, data })=>updateShipment(id, data),
        onSuccess: (updatedShipment)=>{
            // Actualizar cache específico del shipment
            queryClient.setQueryData([
                'admin',
                'logistics',
                'shipment',
                updatedShipment.id
            ], updatedShipment);
            // Invalidar listas de shipments
            queryClient.invalidateQueries({
                queryKey: SHIPMENTS_QUERY_KEY
            });
            // Invalidar dashboard si cambió el estado
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success('Envío actualizado exitosamente');
        },
        onError: (error)=>{
            _sonner.toast.error('Error al actualizar envío', {
                description: error.message
            });
        }
    });
}
function useDeleteShipment() {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: deleteShipment,
        onSuccess: (_, deletedId)=>{
            // Remover del cache
            queryClient.removeQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'shipment',
                    deletedId
                ]
            });
            // Invalidar listas
            queryClient.invalidateQueries({
                queryKey: SHIPMENTS_QUERY_KEY
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success('Envío eliminado exitosamente');
        },
        onError: (error)=>{
            _sonner.toast.error('Error al eliminar envío', {
                description: error.message
            });
        }
    });
}
function useShipmentFilters() {
    const [filters, setFilters] = (0, _react.useState)({
        page: 1,
        limit: 20,
        order_by: 'created_at',
        order_direction: 'desc'
    });
    const updateFilter = (0, _react.useCallback)((key, value)=>{
        setFilters((prev)=>({
                ...prev,
                [key]: value,
                page: key !== 'page' ? 1 : value // Reset page when other filters change
            }));
    }, []);
    const resetFilters = (0, _react.useCallback)(()=>{
        setFilters({
            page: 1,
            limit: 20,
            order_by: 'created_at',
            order_direction: 'desc'
        });
    }, []);
    const setPage = (0, _react.useCallback)((page)=>{
        updateFilter('page', page);
    }, [
        updateFilter
    ]);
    const setStatus = (0, _react.useCallback)((status)=>{
        updateFilter('status', status);
    }, [
        updateFilter
    ]);
    const setSearch = (0, _react.useCallback)((search)=>{
        updateFilter('search', search || undefined);
    }, [
        updateFilter
    ]);
    const setDateRange = (0, _react.useCallback)((dateFrom, dateTo)=>{
        setFilters((prev)=>({
                ...prev,
                date_from: dateFrom,
                date_to: dateTo,
                page: 1
            }));
    }, []);
    return {
        filters,
        updateFilter,
        resetFilters,
        setPage,
        setStatus,
        setSearch,
        setDateRange
    };
}
function useShipmentStats(shipments) {
    return {
        total: shipments?.length || 0,
        byStatus: shipments?.reduce((acc, shipment)=>{
            acc[shipment.status] = (acc[shipment.status] || 0) + 1;
            return acc;
        }, {}) || {},
        totalCost: shipments?.reduce((acc, shipment)=>acc + shipment.total_cost, 0) || 0,
        averageCost: shipments?.length ? shipments.reduce((acc, shipment)=>acc + shipment.total_cost, 0) / shipments.length : 0
    };
}
function useBulkShipmentOperations() {
    const queryClient = (0, _reactquery.useQueryClient)();
    const [selectedShipments, setSelectedShipments] = (0, _react.useState)([]);
    const bulkUpdateStatus = (0, _reactquery.useMutation)({
        mutationFn: async ({ shipmentIds, status })=>{
            const promises = shipmentIds.map((id)=>updateShipment(id, {
                    status
                }));
            return Promise.all(promises);
        },
        onSuccess: (_, { shipmentIds, status })=>{
            queryClient.invalidateQueries({
                queryKey: SHIPMENTS_QUERY_KEY
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success(`${shipmentIds.length} envíos actualizados a ${status}`);
            setSelectedShipments([]);
        },
        onError: (error)=>{
            _sonner.toast.error('Error en operación masiva', {
                description: error.message
            });
        }
    });
    const bulkDelete = (0, _reactquery.useMutation)({
        mutationFn: async (shipmentIds)=>{
            const promises = shipmentIds.map((id)=>deleteShipment(id));
            return Promise.all(promises);
        },
        onSuccess: (_, shipmentIds)=>{
            queryClient.invalidateQueries({
                queryKey: SHIPMENTS_QUERY_KEY
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success(`${shipmentIds.length} envíos eliminados`);
            setSelectedShipments([]);
        },
        onError: (error)=>{
            _sonner.toast.error('Error al eliminar envíos', {
                description: error.message
            });
        }
    });
    const toggleSelection = (0, _react.useCallback)((shipmentId)=>{
        setSelectedShipments((prev)=>prev.includes(shipmentId) ? prev.filter((id)=>id !== shipmentId) : [
                ...prev,
                shipmentId
            ]);
    }, []);
    const selectAll = (0, _react.useCallback)((shipmentIds)=>{
        setSelectedShipments(shipmentIds);
    }, []);
    const clearSelection = (0, _react.useCallback)(()=>{
        setSelectedShipments([]);
    }, []);
    return {
        selectedShipments,
        toggleSelection,
        selectAll,
        clearSelection,
        bulkUpdateStatus,
        bulkDelete,
        isLoading: bulkUpdateStatus.isPending || bulkDelete.isPending
    };
}

//# sourceMappingURL=data:application/json;base64,