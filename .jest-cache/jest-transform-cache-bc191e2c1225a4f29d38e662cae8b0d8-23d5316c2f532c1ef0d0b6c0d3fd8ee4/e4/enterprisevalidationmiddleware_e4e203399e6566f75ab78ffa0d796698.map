{"version":3,"names":["cov_160xu3zi6w","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","sanitizeData","validateData","withBasicValidation","withCriticalValidation","withEnterpriseValidation","withEnterpriseValidationAPI","withHighValidation","withStandardValidation","options","handler","request","args","skipValidation","config","customConfig","configName","_enterprisevalidationsystem","ENTERPRISE_VALIDATION_CONFIGS","STANDARD_PUBLIC","validator","EnterpriseValidator","enterpriseContext","enableContextValidation","authResult","_enterpriseauthutils","getEnterpriseAuthContext","securityLevel","success","context","error","console","warn","validatedRequest","validationResults","allErrors","bodySchema","includes","method","body","json","bodyValidation","validateAndSanitize","validatedBody","data","metadata","push","errors","field","message","code","severity","querySchema","url","URL","queryParams","Object","fromEntries","searchParams","entries","queryValidation","validatedQuery","query","paramsSchema","params","paramsValidation","validatedParams","length","onValidationError","_server","NextResponse","details","map","err","enterprise","timestamp","Date","toISOString","status","validationMetadata","req","res","schemas","strictMode","schema","sanitizeObject"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\validation\\enterprise-validation-middleware.ts"],"sourcesContent":["/**\r\n * Middleware Enterprise de Validación\r\n * Integra validación y sanitización con APIs de forma transparente\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport { z } from 'zod';\r\nimport {\r\n  EnterpriseValidator,\r\n  ENTERPRISE_VALIDATION_CONFIGS,\r\n  type EnterpriseValidationConfig,\r\n  type ValidationResult\r\n} from './enterprise-validation-system';\r\nimport { getEnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES\r\n// =====================================================\r\n\r\nexport interface ValidationMiddlewareOptions {\r\n  bodySchema?: z.ZodSchema;\r\n  querySchema?: z.ZodSchema;\r\n  paramsSchema?: z.ZodSchema;\r\n  configName?: keyof typeof ENTERPRISE_VALIDATION_CONFIGS;\r\n  customConfig?: EnterpriseValidationConfig;\r\n  skipValidation?: (request: NextRequest | NextApiRequest) => boolean;\r\n  onValidationError?: (errors: any[], request: NextRequest | NextApiRequest) => void;\r\n  enableContextValidation?: boolean;\r\n  strictMode?: boolean;\r\n}\r\n\r\nexport interface ValidatedRequest extends NextRequest {\r\n  validatedBody?: any;\r\n  validatedQuery?: any;\r\n  validatedParams?: any;\r\n  validationMetadata?: any;\r\n  enterpriseContext?: EnterpriseAuthContext;\r\n}\r\n\r\nexport interface ValidatedApiRequest extends NextApiRequest {\r\n  validatedBody?: any;\r\n  validatedQuery?: any;\r\n  validatedParams?: any;\r\n  validationMetadata?: any;\r\n  enterpriseContext?: EnterpriseAuthContext;\r\n}\r\n\r\n// =====================================================\r\n// MIDDLEWARE PARA NEXT.JS APP ROUTER\r\n// =====================================================\r\n\r\n/**\r\n * Middleware de validación para Next.js App Router\r\n */\r\nexport function withEnterpriseValidation(options: ValidationMiddlewareOptions) {\r\n  return function <T extends any[]>(\r\n    handler: (request: ValidatedRequest, ...args: T) => Promise<NextResponse> | NextResponse\r\n  ) {\r\n    return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\r\n      try {\r\n        // Verificar si debe saltarse la validación\r\n        if (options.skipValidation && options.skipValidation(request)) {\r\n          return await handler(request as ValidatedRequest, ...args);\r\n        }\r\n\r\n        // Obtener configuración de validación\r\n        const config = options.customConfig || \r\n                      (options.configName ? ENTERPRISE_VALIDATION_CONFIGS[options.configName] : \r\n                       ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\r\n\r\n        const validator = new EnterpriseValidator(config);\r\n\r\n        // Obtener contexto enterprise si está habilitado\r\n        let enterpriseContext: EnterpriseAuthContext | undefined;\r\n        if (options.enableContextValidation) {\r\n          try {\r\n            const authResult = await getEnterpriseAuthContext(request, {\r\n              securityLevel: config.securityLevel || 'standard'\r\n            });\r\n            if (authResult.success) {\r\n              enterpriseContext = authResult.context;\r\n            }\r\n          } catch (error) {\r\n            console.warn('[VALIDATION_MIDDLEWARE] No se pudo obtener contexto enterprise:', error);\r\n          }\r\n        }\r\n\r\n        const validatedRequest = request as ValidatedRequest;\r\n        const validationResults: any = {};\r\n        const allErrors: any[] = [];\r\n\r\n        // 1. Validar body si hay schema\r\n        if (options.bodySchema && ['POST', 'PUT', 'PATCH'].includes(request.method)) {\r\n          try {\r\n            const body = await request.json();\r\n            const bodyValidation = await validator.validateAndSanitize(\r\n              options.bodySchema,\r\n              body,\r\n              enterpriseContext,\r\n              request\r\n            );\r\n\r\n            if (bodyValidation.success) {\r\n              validatedRequest.validatedBody = bodyValidation.data;\r\n              validationResults.body = bodyValidation.metadata;\r\n            } else {\r\n              allErrors.push(...(bodyValidation.errors || []));\r\n            }\r\n          } catch (error) {\r\n            allErrors.push({\r\n              field: 'body',\r\n              message: 'Error parsing JSON body',\r\n              code: 'INVALID_JSON',\r\n              severity: 'high'\r\n            });\r\n          }\r\n        }\r\n\r\n        // 2. Validar query parameters si hay schema\r\n        if (options.querySchema) {\r\n          const url = new URL(request.url);\r\n          const queryParams = Object.fromEntries(url.searchParams.entries());\r\n          \r\n          const queryValidation = await validator.validateAndSanitize(\r\n            options.querySchema,\r\n            queryParams,\r\n            enterpriseContext,\r\n            request\r\n          );\r\n\r\n          if (queryValidation.success) {\r\n            validatedRequest.validatedQuery = queryValidation.data;\r\n            validationResults.query = queryValidation.metadata;\r\n          } else {\r\n            allErrors.push(...(queryValidation.errors || []));\r\n          }\r\n        }\r\n\r\n        // 3. Validar params si hay schema\r\n        if (options.paramsSchema) {\r\n          // Extraer params de la URL (esto requeriría configuración adicional)\r\n          // Por ahora, asumimos que los params están disponibles en el contexto\r\n          const params = (request as any).params || {};\r\n          \r\n          const paramsValidation = await validator.validateAndSanitize(\r\n            options.paramsSchema,\r\n            params,\r\n            enterpriseContext,\r\n            request\r\n          );\r\n\r\n          if (paramsValidation.success) {\r\n            validatedRequest.validatedParams = paramsValidation.data;\r\n            validationResults.params = paramsValidation.metadata;\r\n          } else {\r\n            allErrors.push(...(paramsValidation.errors || []));\r\n          }\r\n        }\r\n\r\n        // 4. Verificar errores de validación\r\n        if (allErrors.length > 0) {\r\n          // Callback personalizado para errores\r\n          if (options.onValidationError) {\r\n            options.onValidationError(allErrors, request);\r\n          }\r\n\r\n          // Logging de errores\r\n          console.warn('[VALIDATION_MIDDLEWARE] Errores de validación:', allErrors);\r\n\r\n          // Respuesta de error\r\n          return NextResponse.json(\r\n            {\r\n              error: 'Errores de validación',\r\n              code: 'VALIDATION_FAILED',\r\n              details: allErrors.map(err => ({\r\n                field: err.field,\r\n                message: err.message,\r\n                code: err.code\r\n              })),\r\n              enterprise: true,\r\n              timestamp: new Date().toISOString()\r\n            },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // 5. Añadir metadatos de validación\r\n        validatedRequest.validationMetadata = validationResults;\r\n        validatedRequest.enterpriseContext = enterpriseContext;\r\n\r\n        // 6. Ejecutar handler original\r\n        return await handler(validatedRequest, ...args);\r\n\r\n      } catch (error) {\r\n        console.error('[VALIDATION_MIDDLEWARE] Error:', error);\r\n        \r\n        return NextResponse.json(\r\n          {\r\n            error: 'Error interno en validación',\r\n            code: 'VALIDATION_ERROR',\r\n            enterprise: true,\r\n            timestamp: new Date().toISOString()\r\n          },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// MIDDLEWARE PARA PAGES API\r\n// =====================================================\r\n\r\n/**\r\n * Middleware de validación para Pages API\r\n */\r\nexport function withEnterpriseValidationAPI(options: ValidationMiddlewareOptions) {\r\n  return function (\r\n    handler: (req: ValidatedApiRequest, res: NextApiResponse) => Promise<void> | void\r\n  ) {\r\n    return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\r\n      try {\r\n        // Verificar si debe saltarse la validación\r\n        if (options.skipValidation && options.skipValidation(req)) {\r\n          return await handler(req as ValidatedApiRequest, res);\r\n        }\r\n\r\n        // Obtener configuración de validación\r\n        const config = options.customConfig || \r\n                      (options.configName ? ENTERPRISE_VALIDATION_CONFIGS[options.configName] : \r\n                       ENTERPRISE_VALIDATION_CONFIGS.STANDARD_PUBLIC);\r\n\r\n        const validator = new EnterpriseValidator(config);\r\n\r\n        // Obtener contexto enterprise si está habilitado\r\n        let enterpriseContext: EnterpriseAuthContext | undefined;\r\n        if (options.enableContextValidation) {\r\n          try {\r\n            // Para Pages API, necesitaríamos adaptar getEnterpriseAuthContext\r\n            // Por ahora, lo omitimos\r\n          } catch (error) {\r\n            console.warn('[VALIDATION_API] No se pudo obtener contexto enterprise:', error);\r\n          }\r\n        }\r\n\r\n        const validatedRequest = req as ValidatedApiRequest;\r\n        const validationResults: any = {};\r\n        const allErrors: any[] = [];\r\n\r\n        // 1. Validar body si hay schema\r\n        if (options.bodySchema && ['POST', 'PUT', 'PATCH'].includes(req.method || '')) {\r\n          const bodyValidation = await validator.validateAndSanitize(\r\n            options.bodySchema,\r\n            req.body,\r\n            enterpriseContext,\r\n            req\r\n          );\r\n\r\n          if (bodyValidation.success) {\r\n            validatedRequest.validatedBody = bodyValidation.data;\r\n            validationResults.body = bodyValidation.metadata;\r\n          } else {\r\n            allErrors.push(...(bodyValidation.errors || []));\r\n          }\r\n        }\r\n\r\n        // 2. Validar query parameters si hay schema\r\n        if (options.querySchema) {\r\n          const queryValidation = await validator.validateAndSanitize(\r\n            options.querySchema,\r\n            req.query,\r\n            enterpriseContext,\r\n            req\r\n          );\r\n\r\n          if (queryValidation.success) {\r\n            validatedRequest.validatedQuery = queryValidation.data;\r\n            validationResults.query = queryValidation.metadata;\r\n          } else {\r\n            allErrors.push(...(queryValidation.errors || []));\r\n          }\r\n        }\r\n\r\n        // 3. Verificar errores de validación\r\n        if (allErrors.length > 0) {\r\n          // Callback personalizado para errores\r\n          if (options.onValidationError) {\r\n            options.onValidationError(allErrors, req);\r\n          }\r\n\r\n          // Respuesta de error\r\n          res.status(400).json({\r\n            error: 'Errores de validación',\r\n            code: 'VALIDATION_FAILED',\r\n            details: allErrors.map(err => ({\r\n              field: err.field,\r\n              message: err.message,\r\n              code: err.code\r\n            })),\r\n            enterprise: true,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n          return;\r\n        }\r\n\r\n        // 4. Añadir metadatos de validación\r\n        validatedRequest.validationMetadata = validationResults;\r\n        validatedRequest.enterpriseContext = enterpriseContext;\r\n\r\n        // 5. Ejecutar handler original\r\n        return await handler(validatedRequest, res);\r\n\r\n      } catch (error) {\r\n        console.error('[VALIDATION_API] Error:', error);\r\n        \r\n        res.status(500).json({\r\n          error: 'Error interno en validación',\r\n          code: 'VALIDATION_ERROR',\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE CONVENIENCIA\r\n// =====================================================\r\n\r\n/**\r\n * Validación crítica para operaciones admin\r\n */\r\nexport const withCriticalValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\r\n  withEnterpriseValidation({\r\n    ...schemas,\r\n    configName: 'CRITICAL_ADMIN',\r\n    enableContextValidation: true,\r\n    strictMode: true\r\n  });\r\n\r\n/**\r\n * Validación alta para APIs de pagos\r\n */\r\nexport const withHighValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\r\n  withEnterpriseValidation({\r\n    ...schemas,\r\n    configName: 'HIGH_PAYMENT',\r\n    enableContextValidation: true,\r\n    strictMode: true\r\n  });\r\n\r\n/**\r\n * Validación estándar para APIs públicas\r\n */\r\nexport const withStandardValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\r\n  withEnterpriseValidation({\r\n    ...schemas,\r\n    configName: 'STANDARD_PUBLIC',\r\n    enableContextValidation: false,\r\n    strictMode: false\r\n  });\r\n\r\n/**\r\n * Validación básica para contenido de usuario\r\n */\r\nexport const withBasicValidation = (schemas: Partial<Pick<ValidationMiddlewareOptions, 'bodySchema' | 'querySchema' | 'paramsSchema'>>) =>\r\n  withEnterpriseValidation({\r\n    ...schemas,\r\n    configName: 'BASIC_USER',\r\n    enableContextValidation: false,\r\n    strictMode: false\r\n  });\r\n\r\n/**\r\n * Función auxiliar para validar datos manualmente\r\n */\r\nexport async function validateData<T>(\r\n  schema: z.ZodSchema<T>,\r\n  data: unknown,\r\n  securityLevel: keyof typeof ENTERPRISE_VALIDATION_CONFIGS = 'STANDARD_PUBLIC',\r\n  context?: EnterpriseAuthContext\r\n): Promise<ValidationResult<T>> {\r\n  const config = ENTERPRISE_VALIDATION_CONFIGS[securityLevel];\r\n  const validator = new EnterpriseValidator(config);\r\n  \r\n  return await validator.validateAndSanitize(schema, data, context);\r\n}\r\n\r\n/**\r\n * Función auxiliar para sanitizar datos manualmente\r\n */\r\nexport function sanitizeData(\r\n  data: any,\r\n  securityLevel: keyof typeof ENTERPRISE_VALIDATION_CONFIGS = 'STANDARD_PUBLIC'\r\n): any {\r\n  const config = ENTERPRISE_VALIDATION_CONFIGS[securityLevel];\r\n  const validator = new EnterpriseValidator(config);\r\n  \r\n  return validator['sanitizer'].sanitizeObject(data);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}