{"version":3,"names":["DEFAULT_THRESHOLDS","cov_1nqco75e4","f","s","RealTimeMonitoringUtils","RealTimePerformanceMonitor","realTimePerformanceMonitor","responseTime","warning","critical","errorRate","cpuUsage","memoryUsage","coreWebVitals","lcp","good","poor","fid","cls","fcp","ttfb","constructor","redis","_redis","getRedisClient","thresholds","alerts","Map","metricsBuffer","webVitalsBuffer","apiMetricsBuffer","dbMetricsBuffer","subscribers","Set","startMonitoring","startPeriodicFlush","getInstance","instance","b","monitoringInterval","setInterval","collectSystemMetrics","_logger","logger","info","LogCategory","MONITORING","flushInterval","flushMetricsToRedis","metrics","timestamp","Date","now","getAverageResponseTime","throughput","getCurrentThroughput","getCurrentErrorRate","getCPUUsage","getMemoryUsage","activeConnections","getActiveConnections","queueSize","getQueueSize","cacheHitRate","getCacheHitRate","dbConnectionPool","getDBConnectionPoolSize","push","length","slice","checkThresholds","notifySubscribers","error","recordWebVitals","vitals","webVitals","checkWebVitalsThresholds","recordAPIMetrics","apiMetrics","checkAPIThresholds","recordDatabaseMetrics","dbMetrics","checkDatabaseThresholds","createAlert","toFixed","method","endpoint","statusCode","queryTime","queryType","tableName","waitingConnections","type","severity","metric","value","threshold","message","alertId","alert","id","resolved","escalated","set","warn","persistAlert","subscribe","callback","add","delete","data","forEach","getCurrentMetrics","realTime","Array","from","values","filter","a","updateThresholds","newThresholds","resolveAlert","get","resolvedAt","setex","JSON","stringify","recentAPI","total","reduce","sum","oneMinuteAgo","recentRequests","m","errors","Math","random","process","memUsage","heapUsed","heapTotal","floor","destroy","clearInterval","clear","recordAPICall","recordDatabaseQuery","getCurrentStatus","current","latestMetrics","healthy","activeAlerts","avgResponseTime","lastUpdate"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\real-time-performance-monitor.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - REAL-TIME PERFORMANCE MONITOR\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Métricas de performance en tiempo real\r\n */\r\nexport interface RealTimeMetrics {\r\n  timestamp: number;\r\n  responseTime: number;\r\n  throughput: number;\r\n  errorRate: number;\r\n  cpuUsage: number;\r\n  memoryUsage: number;\r\n  activeConnections: number;\r\n  queueSize: number;\r\n  cacheHitRate: number;\r\n  dbConnectionPool: number;\r\n}\r\n\r\n/**\r\n * Core Web Vitals en tiempo real\r\n */\r\nexport interface CoreWebVitals {\r\n  lcp: number;        // Largest Contentful Paint\r\n  fid: number;        // First Input Delay\r\n  cls: number;        // Cumulative Layout Shift\r\n  fcp: number;        // First Contentful Paint\r\n  ttfb: number;       // Time to First Byte\r\n  inp: number;        // Interaction to Next Paint\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Métricas de API en tiempo real\r\n */\r\nexport interface APIMetrics {\r\n  endpoint: string;\r\n  method: string;\r\n  responseTime: number;\r\n  statusCode: number;\r\n  requestSize: number;\r\n  responseSize: number;\r\n  userAgent: string;\r\n  ip: string;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Métricas de base de datos\r\n */\r\nexport interface DatabaseMetrics {\r\n  queryTime: number;\r\n  queryType: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE';\r\n  tableName: string;\r\n  rowsAffected: number;\r\n  connectionPoolSize: number;\r\n  activeConnections: number;\r\n  waitingConnections: number;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Alertas de performance\r\n */\r\nexport interface PerformanceAlert {\r\n  id: string;\r\n  type: 'performance' | 'error' | 'capacity' | 'availability';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  metric: string;\r\n  value: number;\r\n  threshold: number;\r\n  message: string;\r\n  timestamp: number;\r\n  resolved: boolean;\r\n  resolvedAt?: number;\r\n  escalated: boolean;\r\n  escalatedAt?: number;\r\n}\r\n\r\n/**\r\n * Configuración de umbrales\r\n */\r\nexport interface PerformanceThresholds {\r\n  responseTime: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  errorRate: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  cpuUsage: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  memoryUsage: {\r\n    warning: number;\r\n    critical: number;\r\n  };\r\n  coreWebVitals: {\r\n    lcp: { good: number; poor: number };\r\n    fid: { good: number; poor: number };\r\n    cls: { good: number; poor: number };\r\n    fcp: { good: number; poor: number };\r\n    ttfb: { good: number; poor: number };\r\n  };\r\n}\r\n\r\n/**\r\n * Configuración por defecto de umbrales\r\n */\r\nexport const DEFAULT_THRESHOLDS: PerformanceThresholds = {\r\n  responseTime: {\r\n    warning: 1000,    // 1 segundo\r\n    critical: 3000    // 3 segundos\r\n  },\r\n  errorRate: {\r\n    warning: 0.05,    // 5%\r\n    critical: 0.10    // 10%\r\n  },\r\n  cpuUsage: {\r\n    warning: 0.70,    // 70%\r\n    critical: 0.90    // 90%\r\n  },\r\n  memoryUsage: {\r\n    warning: 0.80,    // 80%\r\n    critical: 0.95    // 95%\r\n  },\r\n  coreWebVitals: {\r\n    lcp: { good: 2500, poor: 4000 },\r\n    fid: { good: 100, poor: 300 },\r\n    cls: { good: 0.1, poor: 0.25 },\r\n    fcp: { good: 1800, poor: 3000 },\r\n    ttfb: { good: 800, poor: 1800 }\r\n  }\r\n};\r\n\r\n/**\r\n * Monitor de performance en tiempo real\r\n */\r\nexport class RealTimePerformanceMonitor {\r\n  private static instance: RealTimePerformanceMonitor;\r\n  private redis = getRedisClient();\r\n  private thresholds: PerformanceThresholds = DEFAULT_THRESHOLDS;\r\n  private alerts: Map<string, PerformanceAlert> = new Map();\r\n  private metricsBuffer: RealTimeMetrics[] = [];\r\n  private webVitalsBuffer: CoreWebVitals[] = [];\r\n  private apiMetricsBuffer: APIMetrics[] = [];\r\n  private dbMetricsBuffer: DatabaseMetrics[] = [];\r\n  private subscribers: Set<(data: any) => void> = new Set();\r\n  private flushInterval?: NodeJS.Timeout;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n\r\n  private constructor() {\r\n    this.startMonitoring();\r\n    this.startPeriodicFlush();\r\n  }\r\n\r\n  static getInstance(): RealTimePerformanceMonitor {\r\n    if (!RealTimePerformanceMonitor.instance) {\r\n      RealTimePerformanceMonitor.instance = new RealTimePerformanceMonitor();\r\n    }\r\n    return RealTimePerformanceMonitor.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicia el monitoreo en tiempo real\r\n   */\r\n  private startMonitoring(): void {\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.collectSystemMetrics();\r\n    }, 5000); // Cada 5 segundos\r\n\r\n    logger.info(LogCategory.MONITORING, 'Real-time performance monitoring started');\r\n  }\r\n\r\n  /**\r\n   * Inicia el flush periódico de métricas\r\n   */\r\n  private startPeriodicFlush(): void {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushMetricsToRedis();\r\n    }, 30000); // Cada 30 segundos\r\n  }\r\n\r\n  /**\r\n   * Recolecta métricas del sistema\r\n   */\r\n  private async collectSystemMetrics(): Promise<void> {\r\n    try {\r\n      const metrics: RealTimeMetrics = {\r\n        timestamp: Date.now(),\r\n        responseTime: await this.getAverageResponseTime(),\r\n        throughput: await this.getCurrentThroughput(),\r\n        errorRate: await this.getCurrentErrorRate(),\r\n        cpuUsage: await this.getCPUUsage(),\r\n        memoryUsage: await this.getMemoryUsage(),\r\n        activeConnections: await this.getActiveConnections(),\r\n        queueSize: await this.getQueueSize(),\r\n        cacheHitRate: await this.getCacheHitRate(),\r\n        dbConnectionPool: await this.getDBConnectionPoolSize()\r\n      };\r\n\r\n      this.metricsBuffer.push(metrics);\r\n      \r\n      // Mantener solo las últimas 100 métricas en buffer\r\n      if (this.metricsBuffer.length > 100) {\r\n        this.metricsBuffer = this.metricsBuffer.slice(-100);\r\n      }\r\n\r\n      // Verificar umbrales y generar alertas\r\n      await this.checkThresholds(metrics);\r\n\r\n      // Notificar a suscriptores\r\n      this.notifySubscribers('metrics', metrics);\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error collecting system metrics', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de Core Web Vitals\r\n   */\r\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\r\n    const webVitals: CoreWebVitals = {\r\n      ...vitals,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.webVitalsBuffer.push(webVitals);\r\n    \r\n    // Mantener solo las últimas 50 métricas\r\n    if (this.webVitalsBuffer.length > 50) {\r\n      this.webVitalsBuffer = this.webVitalsBuffer.slice(-50);\r\n    }\r\n\r\n    // Verificar umbrales de Core Web Vitals\r\n    this.checkWebVitalsThresholds(webVitals);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('webVitals', webVitals);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de API\r\n   */\r\n  recordAPIMetrics(metrics: Omit<APIMetrics, 'timestamp'>): void {\r\n    const apiMetrics: APIMetrics = {\r\n      ...metrics,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.apiMetricsBuffer.push(apiMetrics);\r\n    \r\n    // Mantener solo las últimas 200 métricas\r\n    if (this.apiMetricsBuffer.length > 200) {\r\n      this.apiMetricsBuffer = this.apiMetricsBuffer.slice(-200);\r\n    }\r\n\r\n    // Verificar umbrales de API\r\n    this.checkAPIThresholds(apiMetrics);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('apiMetrics', apiMetrics);\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de base de datos\r\n   */\r\n  recordDatabaseMetrics(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\r\n    const dbMetrics: DatabaseMetrics = {\r\n      ...metrics,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.dbMetricsBuffer.push(dbMetrics);\r\n    \r\n    // Mantener solo las últimas 100 métricas\r\n    if (this.dbMetricsBuffer.length > 100) {\r\n      this.dbMetricsBuffer = this.dbMetricsBuffer.slice(-100);\r\n    }\r\n\r\n    // Verificar umbrales de DB\r\n    this.checkDatabaseThresholds(dbMetrics);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('dbMetrics', dbMetrics);\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales y genera alertas\r\n   */\r\n  private async checkThresholds(metrics: RealTimeMetrics): Promise<void> {\r\n    // Verificar tiempo de respuesta\r\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\r\n      await this.createAlert('performance', 'critical', 'responseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.critical, `Response time crítico: ${metrics.responseTime}ms`);\r\n    } else if (metrics.responseTime > this.thresholds.responseTime.warning) {\r\n      await this.createAlert('performance', 'medium', 'responseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.warning, `Response time alto: ${metrics.responseTime}ms`);\r\n    }\r\n\r\n    // Verificar tasa de errores\r\n    if (metrics.errorRate > this.thresholds.errorRate.critical) {\r\n      await this.createAlert('error', 'critical', 'errorRate', metrics.errorRate, \r\n        this.thresholds.errorRate.critical, `Tasa de errores crítica: ${(metrics.errorRate * 100).toFixed(1)}%`);\r\n    } else if (metrics.errorRate > this.thresholds.errorRate.warning) {\r\n      await this.createAlert('error', 'medium', 'errorRate', metrics.errorRate, \r\n        this.thresholds.errorRate.warning, `Tasa de errores alta: ${(metrics.errorRate * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    // Verificar uso de CPU\r\n    if (metrics.cpuUsage > this.thresholds.cpuUsage.critical) {\r\n      await this.createAlert('capacity', 'critical', 'cpuUsage', metrics.cpuUsage, \r\n        this.thresholds.cpuUsage.critical, `Uso de CPU crítico: ${(metrics.cpuUsage * 100).toFixed(1)}%`);\r\n    } else if (metrics.cpuUsage > this.thresholds.cpuUsage.warning) {\r\n      await this.createAlert('capacity', 'medium', 'cpuUsage', metrics.cpuUsage, \r\n        this.thresholds.cpuUsage.warning, `Uso de CPU alto: ${(metrics.cpuUsage * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    // Verificar uso de memoria\r\n    if (metrics.memoryUsage > this.thresholds.memoryUsage.critical) {\r\n      await this.createAlert('capacity', 'critical', 'memoryUsage', metrics.memoryUsage, \r\n        this.thresholds.memoryUsage.critical, `Uso de memoria crítico: ${(metrics.memoryUsage * 100).toFixed(1)}%`);\r\n    } else if (metrics.memoryUsage > this.thresholds.memoryUsage.warning) {\r\n      await this.createAlert('capacity', 'medium', 'memoryUsage', metrics.memoryUsage, \r\n        this.thresholds.memoryUsage.warning, `Uso de memoria alto: ${(metrics.memoryUsage * 100).toFixed(1)}%`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de Core Web Vitals\r\n   */\r\n  private checkWebVitalsThresholds(vitals: CoreWebVitals): void {\r\n    const { coreWebVitals } = this.thresholds;\r\n\r\n    // Verificar LCP\r\n    if (vitals.lcp > coreWebVitals.lcp.poor) {\r\n      this.createAlert('performance', 'high', 'lcp', vitals.lcp, \r\n        coreWebVitals.lcp.poor, `LCP pobre: ${vitals.lcp}ms`);\r\n    } else if (vitals.lcp > coreWebVitals.lcp.good) {\r\n      this.createAlert('performance', 'medium', 'lcp', vitals.lcp, \r\n        coreWebVitals.lcp.good, `LCP necesita mejora: ${vitals.lcp}ms`);\r\n    }\r\n\r\n    // Verificar FID\r\n    if (vitals.fid > coreWebVitals.fid.poor) {\r\n      this.createAlert('performance', 'high', 'fid', vitals.fid, \r\n        coreWebVitals.fid.poor, `FID pobre: ${vitals.fid}ms`);\r\n    } else if (vitals.fid > coreWebVitals.fid.good) {\r\n      this.createAlert('performance', 'medium', 'fid', vitals.fid, \r\n        coreWebVitals.fid.good, `FID necesita mejora: ${vitals.fid}ms`);\r\n    }\r\n\r\n    // Verificar CLS\r\n    if (vitals.cls > coreWebVitals.cls.poor) {\r\n      this.createAlert('performance', 'high', 'cls', vitals.cls, \r\n        coreWebVitals.cls.poor, `CLS pobre: ${vitals.cls}`);\r\n    } else if (vitals.cls > coreWebVitals.cls.good) {\r\n      this.createAlert('performance', 'medium', 'cls', vitals.cls, \r\n        coreWebVitals.cls.good, `CLS necesita mejora: ${vitals.cls}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de API\r\n   */\r\n  private checkAPIThresholds(metrics: APIMetrics): void {\r\n    if (metrics.responseTime > this.thresholds.responseTime.critical) {\r\n      this.createAlert('performance', 'high', 'apiResponseTime', metrics.responseTime, \r\n        this.thresholds.responseTime.critical, \r\n        `API lenta: ${metrics.method} ${metrics.endpoint} - ${metrics.responseTime}ms`);\r\n    }\r\n\r\n    if (metrics.statusCode >= 500) {\r\n      this.createAlert('error', 'high', 'apiError', metrics.statusCode, \r\n        500, `Error de servidor: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);\r\n    } else if (metrics.statusCode >= 400) {\r\n      this.createAlert('error', 'medium', 'apiClientError', metrics.statusCode, \r\n        400, `Error de cliente: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica umbrales de base de datos\r\n   */\r\n  private checkDatabaseThresholds(metrics: DatabaseMetrics): void {\r\n    if (metrics.queryTime > 5000) { // 5 segundos\r\n      this.createAlert('performance', 'high', 'slowQuery', metrics.queryTime, \r\n        5000, `Query lenta: ${metrics.queryType} en ${metrics.tableName} - ${metrics.queryTime}ms`);\r\n    }\r\n\r\n    if (metrics.waitingConnections > 10) {\r\n      this.createAlert('capacity', 'medium', 'dbConnectionWait', metrics.waitingConnections, \r\n        10, `Conexiones esperando: ${metrics.waitingConnections}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crea una alerta\r\n   */\r\n  private async createAlert(\r\n    type: PerformanceAlert['type'],\r\n    severity: PerformanceAlert['severity'],\r\n    metric: string,\r\n    value: number,\r\n    threshold: number,\r\n    message: string\r\n  ): Promise<void> {\r\n    const alertId = `${type}_${metric}_${Date.now()}`;\r\n    \r\n    const alert: PerformanceAlert = {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      metric,\r\n      value,\r\n      threshold,\r\n      message,\r\n      timestamp: Date.now(),\r\n      resolved: false,\r\n      escalated: false\r\n    };\r\n\r\n    this.alerts.set(alertId, alert);\r\n\r\n    // Notificar a suscriptores\r\n    this.notifySubscribers('alert', alert);\r\n\r\n    // Log de la alerta\r\n    logger.warn(LogCategory.MONITORING, `Performance alert: ${message}`, {\r\n      type,\r\n      severity,\r\n      metric,\r\n      value,\r\n      threshold\r\n    });\r\n\r\n    // Persistir en Redis\r\n    await this.persistAlert(alert);\r\n  }\r\n\r\n  /**\r\n   * Suscribirse a actualizaciones en tiempo real\r\n   */\r\n  subscribe(callback: (data: any) => void): () => void {\r\n    this.subscribers.add(callback);\r\n    \r\n    return () => {\r\n      this.subscribers.delete(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notifica a todos los suscriptores\r\n   */\r\n  private notifySubscribers(type: string, data: any): void {\r\n    this.subscribers.forEach(callback => {\r\n      try {\r\n        callback({ type, data, timestamp: Date.now() });\r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, 'Error notifying subscriber', error as Error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas actuales\r\n   */\r\n  getCurrentMetrics(): {\r\n    realTime: RealTimeMetrics[];\r\n    webVitals: CoreWebVitals[];\r\n    apiMetrics: APIMetrics[];\r\n    dbMetrics: DatabaseMetrics[];\r\n    alerts: PerformanceAlert[];\r\n  } {\r\n    return {\r\n      realTime: [...this.metricsBuffer],\r\n      webVitals: [...this.webVitalsBuffer],\r\n      apiMetrics: [...this.apiMetricsBuffer],\r\n      dbMetrics: [...this.dbMetricsBuffer],\r\n      alerts: Array.from(this.alerts.values()).filter(a => !a.resolved)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Actualiza umbrales\r\n   */\r\n  updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...newThresholds };\r\n    logger.info(LogCategory.MONITORING, 'Performance thresholds updated');\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert && !alert.resolved) {\r\n      alert.resolved = true;\r\n      alert.resolvedAt = Date.now();\r\n      \r\n      this.notifySubscribers('alertResolved', alert);\r\n      logger.info(LogCategory.MONITORING, `Alert resolved: ${alertId}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Flush de métricas a Redis\r\n   */\r\n  private async flushMetricsToRedis(): Promise<void> {\r\n    try {\r\n      const timestamp = Date.now();\r\n      \r\n      // Guardar métricas en Redis con TTL de 24 horas\r\n      if (this.metricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:realtime:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.metricsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.webVitalsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:webvitals:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.webVitalsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.apiMetricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:api:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.apiMetricsBuffer)\r\n        );\r\n      }\r\n\r\n      if (this.dbMetricsBuffer.length > 0) {\r\n        await this.redis.setex(\r\n          `metrics:database:${timestamp}`,\r\n          86400,\r\n          JSON.stringify(this.dbMetricsBuffer)\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error flushing metrics to Redis', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Persiste alerta en Redis\r\n   */\r\n  private async persistAlert(alert: PerformanceAlert): Promise<void> {\r\n    try {\r\n      await this.redis.setex(\r\n        `alert:${alert.id}`,\r\n        86400 * 7, // 7 días\r\n        JSON.stringify(alert)\r\n      );\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE RECOLECCIÓN DE MÉTRICAS\r\n  // ===================================\r\n\r\n  private async getAverageResponseTime(): Promise<number> {\r\n    // Calcular tiempo de respuesta promedio de las últimas métricas de API\r\n    const recentAPI = this.apiMetricsBuffer.slice(-10);\r\n    if (recentAPI.length === 0) {return 0;}\r\n    \r\n    const total = recentAPI.reduce((sum, metric) => sum + metric.responseTime, 0);\r\n    return total / recentAPI.length;\r\n  }\r\n\r\n  private async getCurrentThroughput(): Promise<number> {\r\n    // Calcular throughput basado en requests por segundo\r\n    const now = Date.now();\r\n    const oneMinuteAgo = now - 60000;\r\n    const recentRequests = this.apiMetricsBuffer.filter(m => m.timestamp > oneMinuteAgo);\r\n    return recentRequests.length / 60; // requests por segundo\r\n  }\r\n\r\n  private async getCurrentErrorRate(): Promise<number> {\r\n    const recentAPI = this.apiMetricsBuffer.slice(-100);\r\n    if (recentAPI.length === 0) {return 0;}\r\n    \r\n    const errors = recentAPI.filter(m => m.statusCode >= 400).length;\r\n    return errors / recentAPI.length;\r\n  }\r\n\r\n  private async getCPUUsage(): Promise<number> {\r\n    // Simulación de uso de CPU (en implementación real, usar librerías del sistema)\r\n    return Math.random() * 0.8; // 0-80%\r\n  }\r\n\r\n  private async getMemoryUsage(): Promise<number> {\r\n    // Obtener uso de memoria real\r\n    if (typeof process !== 'undefined') {\r\n      const memUsage = process.memoryUsage();\r\n      return memUsage.heapUsed / memUsage.heapTotal;\r\n    }\r\n    return Math.random() * 0.7; // Fallback\r\n  }\r\n\r\n  private async getActiveConnections(): Promise<number> {\r\n    // Simulación de conexiones activas\r\n    return Math.floor(Math.random() * 100) + 10;\r\n  }\r\n\r\n  private async getQueueSize(): Promise<number> {\r\n    // Simulación de tamaño de cola\r\n    return Math.floor(Math.random() * 20);\r\n  }\r\n\r\n  private async getCacheHitRate(): Promise<number> {\r\n    // Obtener hit rate del cache (integrar con cache manager)\r\n    return Math.random() * 0.3 + 0.7; // 70-100%\r\n  }\r\n\r\n  private async getDBConnectionPoolSize(): Promise<number> {\r\n    // Simulación de pool de conexiones DB\r\n    return Math.floor(Math.random() * 10) + 5;\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n    }\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n    }\r\n    this.subscribers.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const realTimePerformanceMonitor = RealTimePerformanceMonitor.getInstance();\r\n\r\n/**\r\n * Utilidades para monitoreo en tiempo real\r\n */\r\nexport const RealTimeMonitoringUtils = {\r\n  /**\r\n   * Registra métricas de Web Vitals desde el cliente\r\n   */\r\n  recordWebVitals(vitals: Omit<CoreWebVitals, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordWebVitals(vitals);\r\n  },\r\n\r\n  /**\r\n   * Registra métricas de API\r\n   */\r\n  recordAPICall(metrics: Omit<APIMetrics, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordAPIMetrics(metrics);\r\n  },\r\n\r\n  /**\r\n   * Registra métricas de base de datos\r\n   */\r\n  recordDatabaseQuery(metrics: Omit<DatabaseMetrics, 'timestamp'>): void {\r\n    realTimePerformanceMonitor.recordDatabaseMetrics(metrics);\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen de estado actual\r\n   */\r\n  getCurrentStatus(): {\r\n    healthy: boolean;\r\n    activeAlerts: number;\r\n    avgResponseTime: number;\r\n    errorRate: number;\r\n    lastUpdate: number;\r\n  } {\r\n    const current = realTimePerformanceMonitor.getCurrentMetrics();\r\n    const latestMetrics = current.realTime[current.realTime.length - 1];\r\n    \r\n    if (!latestMetrics) {\r\n      return {\r\n        healthy: false,\r\n        activeAlerts: 0,\r\n        avgResponseTime: 0,\r\n        errorRate: 0,\r\n        lastUpdate: 0\r\n      };\r\n    }\r\n\r\n    const activeAlerts = current.alerts.length;\r\n    const healthy = activeAlerts === 0 && \r\n                   latestMetrics.responseTime < 2000 && \r\n                   latestMetrics.errorRate < 0.05;\r\n\r\n    return {\r\n      healthy,\r\n      activeAlerts,\r\n      avgResponseTime: latestMetrics.responseTime,\r\n      errorRate: latestMetrics.errorRate,\r\n      lastUpdate: latestMetrics.timestamp\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}