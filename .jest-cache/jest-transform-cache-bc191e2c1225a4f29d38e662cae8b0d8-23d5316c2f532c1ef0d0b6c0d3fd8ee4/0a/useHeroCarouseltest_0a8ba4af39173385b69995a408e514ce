9c5f9cde24c00978266296850e050185
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useHeroCarousel = require("../../hooks/useHeroCarousel");
// Mock de timers para controlar el autoplay
jest.useFakeTimers();
describe('useHeroCarousel', ()=>{
    const mockImages = [
        '/images/hero/hero-01.png',
        '/images/hero/hero-02.png',
        '/images/hero/hero-03.png'
    ];
    beforeEach(()=>{
        jest.clearAllTimers();
    });
    afterEach(()=>{
        jest.runOnlyPendingTimers();
        jest.useRealTimers();
        jest.useFakeTimers();
    });
    it('should initialize with correct default values', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        expect(result.current.currentIndex).toBe(0);
        expect(result.current.isPlaying).toBe(true);
        expect(result.current.isPaused).toBe(false);
    });
    it('should go to next slide', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        (0, _react.act)(()=>{
            result.current.goToNext();
        });
        expect(result.current.currentIndex).toBe(1);
    });
    it('should go to previous slide', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        // Ir al último slide primero
        (0, _react.act)(()=>{
            result.current.goToSlide(2);
        });
        expect(result.current.currentIndex).toBe(2);
        (0, _react.act)(()=>{
            result.current.goToPrevious();
        });
        expect(result.current.currentIndex).toBe(1);
    });
    it('should wrap around when going next from last slide', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        // Ir al último slide
        (0, _react.act)(()=>{
            result.current.goToSlide(2);
        });
        expect(result.current.currentIndex).toBe(2);
        // Ir al siguiente debería volver al primero
        (0, _react.act)(()=>{
            result.current.goToNext();
        });
        expect(result.current.currentIndex).toBe(0);
    });
    it('should wrap around when going previous from first slide', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        expect(result.current.currentIndex).toBe(0);
        (0, _react.act)(()=>{
            result.current.goToPrevious();
        });
        expect(result.current.currentIndex).toBe(2);
    });
    it('should go to specific slide', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        (0, _react.act)(()=>{
            result.current.goToSlide(1);
        });
        expect(result.current.currentIndex).toBe(1);
    });
    it('should not go to invalid slide index', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        const initialIndex = result.current.currentIndex;
        (0, _react.act)(()=>{
            result.current.goToSlide(-1);
        });
        expect(result.current.currentIndex).toBe(initialIndex);
        (0, _react.act)(()=>{
            result.current.goToSlide(10);
        });
        expect(result.current.currentIndex).toBe(initialIndex);
    });
    it('should pause and resume correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        expect(result.current.isPlaying).toBe(true);
        expect(result.current.isPaused).toBe(false);
        (0, _react.act)(()=>{
            result.current.pause();
        });
        expect(result.current.isPlaying).toBe(false);
        expect(result.current.isPaused).toBe(true);
        (0, _react.act)(()=>{
            result.current.resume();
        });
        expect(result.current.isPlaying).toBe(true);
        expect(result.current.isPaused).toBe(false);
    });
    it('should handle hover events when pauseOnHover is true', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: true
            }));
        expect(result.current.isPlaying).toBe(true);
        (0, _react.act)(()=>{
            result.current.setHover(true);
        });
        expect(result.current.isPlaying).toBe(false);
        expect(result.current.isPaused).toBe(true);
        (0, _react.act)(()=>{
            result.current.setHover(false);
        });
        expect(result.current.isPlaying).toBe(true);
        expect(result.current.isPaused).toBe(false);
    });
    it('should not pause on hover when pauseOnHover is false', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 5000,
                pauseOnHover: false
            }));
        expect(result.current.isPlaying).toBe(true);
        (0, _react.act)(()=>{
            result.current.setHover(true);
        });
        expect(result.current.isPlaying).toBe(true);
        expect(result.current.isPaused).toBe(false);
    });
    it('should auto-advance slides when playing', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 1000,
                pauseOnHover: true
            }));
        expect(result.current.currentIndex).toBe(0);
        // Avanzar el tiempo para que se ejecute el autoplay
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(result.current.currentIndex).toBe(1);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(result.current.currentIndex).toBe(2);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(result.current.currentIndex).toBe(0); // Debería volver al inicio
    });
    it('should not auto-advance when paused', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 1000,
                pauseOnHover: true
            }));
        (0, _react.act)(()=>{
            result.current.pause();
        });
        expect(result.current.currentIndex).toBe(0);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(2000);
        });
        expect(result.current.currentIndex).toBe(0); // No debería haber cambiado
    });
    it('should not auto-advance when hovering', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 1000,
                pauseOnHover: true
            }));
        (0, _react.act)(()=>{
            result.current.setHover(true);
        });
        expect(result.current.currentIndex).toBe(0);
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(2000);
        });
        expect(result.current.currentIndex).toBe(0); // No debería haber cambiado
    });
    it('should handle single image gracefully', ()=>{
        const singleImage = [
            '/images/hero/hero-01.png'
        ];
        const { result } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: singleImage,
                autoPlayInterval: 1000,
                pauseOnHover: true
            }));
        expect(result.current.currentIndex).toBe(0);
        (0, _react.act)(()=>{
            result.current.goToNext();
        });
        expect(result.current.currentIndex).toBe(0); // Debería permanecer en 0
        (0, _react.act)(()=>{
            result.current.goToPrevious();
        });
        expect(result.current.currentIndex).toBe(0); // Debería permanecer en 0
    });
    it('should clean up timers on unmount', ()=>{
        const { unmount } = (0, _react.renderHook)(()=>(0, _useHeroCarousel.useHeroCarousel)({
                images: mockImages,
                autoPlayInterval: 1000,
                pauseOnHover: true
            }));
        // Verificar que hay un timer activo
        expect(jest.getTimerCount()).toBeGreaterThan(0);
        unmount();
        // Después del unmount, no debería haber timers pendientes
        expect(jest.getTimerCount()).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;base64,