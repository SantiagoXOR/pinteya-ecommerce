{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\performance-budget-monitor.ts"],"sourcesContent":["// ===================================\r\n// PERFORMANCE BUDGET MONITOR\r\n// ===================================\r\n// Sistema de monitoreo de presupuestos de rendimiento\r\n\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface PerformanceBudget {\r\n  name: string;\r\n  type: 'size' | 'count' | 'time';\r\n  threshold: number;\r\n  warning: number;\r\n  unit: 'bytes' | 'kb' | 'mb' | 'ms' | 'count';\r\n  category: 'critical' | 'important' | 'optional';\r\n  description: string;\r\n}\r\n\r\nexport interface BudgetViolation {\r\n  budget: PerformanceBudget;\r\n  actual: number;\r\n  expected: number;\r\n  severity: 'warning' | 'error';\r\n  impact: 'low' | 'medium' | 'high' | 'critical';\r\n  recommendation: string;\r\n}\r\n\r\nexport interface PerformanceReport {\r\n  timestamp: string;\r\n  buildId: string;\r\n  violations: BudgetViolation[];\r\n  metrics: PerformanceMetrics;\r\n  score: number;\r\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n  trends: PerformanceTrend[];\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  bundleSize: number;\r\n  firstLoadJS: number;\r\n  totalJS: number;\r\n  css: number;\r\n  images: number;\r\n  fonts: number;\r\n  chunkCount: number;\r\n  duplicateModules: number;\r\n  unusedCode: number;\r\n}\r\n\r\nexport interface PerformanceTrend {\r\n  metric: string;\r\n  current: number;\r\n  previous: number;\r\n  change: number;\r\n  changePercent: number;\r\n  trend: 'improving' | 'degrading' | 'stable';\r\n}\r\n\r\n// ===================================\r\n// PERFORMANCE BUDGET MONITOR\r\n// ===================================\r\n\r\nexport class PerformanceBudgetMonitor {\r\n  private static instance: PerformanceBudgetMonitor;\r\n  private budgets: PerformanceBudget[] = [];\r\n  private history: PerformanceReport[] = [];\r\n  private maxHistorySize = 50;\r\n\r\n  private constructor() {\r\n    this.initializeDefaultBudgets();\r\n  }\r\n\r\n  public static getInstance(): PerformanceBudgetMonitor {\r\n    if (!PerformanceBudgetMonitor.instance) {\r\n      PerformanceBudgetMonitor.instance = new PerformanceBudgetMonitor();\r\n    }\r\n    return PerformanceBudgetMonitor.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACIÓN DE BUDGETS\r\n  // ===================================\r\n\r\n  private initializeDefaultBudgets(): void {\r\n    this.budgets = [\r\n      // Budgets de tamaño críticos\r\n      {\r\n        name: 'First Load JS',\r\n        type: 'size',\r\n        threshold: 128 * 1024, // 128KB\r\n        warning: 100 * 1024, // 100KB\r\n        unit: 'bytes',\r\n        category: 'critical',\r\n        description: 'JavaScript crítico que se carga inicialmente'\r\n      },\r\n      {\r\n        name: 'Total Bundle Size',\r\n        type: 'size',\r\n        threshold: 500 * 1024, // 500KB\r\n        warning: 400 * 1024, // 400KB\r\n        unit: 'bytes',\r\n        category: 'critical',\r\n        description: 'Tamaño total de todos los bundles JavaScript'\r\n      },\r\n      {\r\n        name: 'CSS Bundle Size',\r\n        type: 'size',\r\n        threshold: 50 * 1024, // 50KB\r\n        warning: 40 * 1024, // 40KB\r\n        unit: 'bytes',\r\n        category: 'important',\r\n        description: 'Tamaño total de archivos CSS'\r\n      },\r\n      {\r\n        name: 'Image Assets',\r\n        type: 'size',\r\n        threshold: 200 * 1024, // 200KB\r\n        warning: 150 * 1024, // 150KB\r\n        unit: 'bytes',\r\n        category: 'important',\r\n        description: 'Tamaño total de imágenes optimizadas'\r\n      },\r\n      {\r\n        name: 'Font Assets',\r\n        type: 'size',\r\n        threshold: 100 * 1024, // 100KB\r\n        warning: 80 * 1024, // 80KB\r\n        unit: 'bytes',\r\n        category: 'optional',\r\n        description: 'Tamaño total de archivos de fuentes'\r\n      },\r\n\r\n      // Budgets de conteo\r\n      {\r\n        name: 'Chunk Count',\r\n        type: 'count',\r\n        threshold: 20,\r\n        warning: 15,\r\n        unit: 'count',\r\n        category: 'important',\r\n        description: 'Número total de chunks generados'\r\n      },\r\n      {\r\n        name: 'Duplicate Modules',\r\n        type: 'count',\r\n        threshold: 5,\r\n        warning: 3,\r\n        unit: 'count',\r\n        category: 'important',\r\n        description: 'Módulos duplicados entre chunks'\r\n      },\r\n\r\n      // Budgets de tiempo (para futuras implementaciones)\r\n      {\r\n        name: 'Build Time',\r\n        type: 'time',\r\n        threshold: 60000, // 60 segundos\r\n        warning: 45000, // 45 segundos\r\n        unit: 'ms',\r\n        category: 'optional',\r\n        description: 'Tiempo total de build'\r\n      }\r\n    ];\r\n  }\r\n\r\n  public addBudget(budget: PerformanceBudget): void {\r\n    this.budgets.push(budget);\r\n  }\r\n\r\n  public updateBudget(name: string, updates: Partial<PerformanceBudget>): void {\r\n    const index = this.budgets.findIndex(b => b.name === name);\r\n    if (index !== -1) {\r\n      this.budgets[index] = { ...this.budgets[index], ...updates };\r\n    }\r\n  }\r\n\r\n  public removeBudget(name: string): void {\r\n    this.budgets = this.budgets.filter(b => b.name !== name);\r\n  }\r\n\r\n  public getBudgets(): PerformanceBudget[] {\r\n    return [...this.budgets];\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE PERFORMANCE\r\n  // ===================================\r\n\r\n  public async analyzePerformance(buildPath: string = '.next'): Promise<PerformanceReport> {\r\n    const metrics = await this.collectMetrics(buildPath);\r\n    const violations = this.checkBudgetViolations(metrics);\r\n    const score = this.calculatePerformanceScore(violations, metrics);\r\n    const grade = this.getPerformanceGrade(score);\r\n    const trends = this.calculateTrends(metrics);\r\n\r\n    const report: PerformanceReport = {\r\n      timestamp: new Date().toISOString(),\r\n      buildId: this.generateBuildId(),\r\n      violations,\r\n      metrics,\r\n      score,\r\n      grade,\r\n      trends\r\n    };\r\n\r\n    this.addToHistory(report);\r\n    return report;\r\n  }\r\n\r\n  private async collectMetrics(buildPath: string): Promise<PerformanceMetrics> {\r\n    try {\r\n      // En una implementación real, esto analizaría los archivos del build\r\n      // Por ahora, simulamos métricas realistas\r\n      const staticPath = path.join(buildPath, 'static');\r\n      \r\n      return {\r\n        bundleSize: 450 * 1024, // 450KB\r\n        firstLoadJS: 95 * 1024, // 95KB\r\n        totalJS: 380 * 1024, // 380KB\r\n        css: 35 * 1024, // 35KB\r\n        images: 120 * 1024, // 120KB\r\n        fonts: 45 * 1024, // 45KB\r\n        chunkCount: 12,\r\n        duplicateModules: 2,\r\n        unusedCode: 25 * 1024 // 25KB\r\n      };\r\n    } catch (error) {\r\n      console.warn('Could not collect real metrics, using mock data');\r\n      return this.getMockMetrics();\r\n    }\r\n  }\r\n\r\n  private getMockMetrics(): PerformanceMetrics {\r\n    return {\r\n      bundleSize: 420 * 1024,\r\n      firstLoadJS: 88 * 1024,\r\n      totalJS: 350 * 1024,\r\n      css: 32 * 1024,\r\n      images: 110 * 1024,\r\n      fonts: 40 * 1024,\r\n      chunkCount: 10,\r\n      duplicateModules: 1,\r\n      unusedCode: 20 * 1024\r\n    };\r\n  }\r\n\r\n  private checkBudgetViolations(metrics: PerformanceMetrics): BudgetViolation[] {\r\n    const violations: BudgetViolation[] = [];\r\n\r\n    for (const budget of this.budgets) {\r\n      const actual = this.getMetricValue(metrics, budget.name);\r\n      if (actual === null) {continue;}\r\n\r\n      let violation: BudgetViolation | null = null;\r\n\r\n      if (actual > budget.threshold) {\r\n        violation = {\r\n          budget,\r\n          actual,\r\n          expected: budget.threshold,\r\n          severity: 'error',\r\n          impact: this.calculateImpact(budget, actual),\r\n          recommendation: this.generateRecommendation(budget, actual)\r\n        };\r\n      } else if (actual > budget.warning) {\r\n        violation = {\r\n          budget,\r\n          actual,\r\n          expected: budget.warning,\r\n          severity: 'warning',\r\n          impact: this.calculateImpact(budget, actual),\r\n          recommendation: this.generateRecommendation(budget, actual)\r\n        };\r\n      }\r\n\r\n      if (violation) {\r\n        violations.push(violation);\r\n      }\r\n    }\r\n\r\n    return violations.sort((a, b) => {\r\n      const impactOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n      return impactOrder[b.impact] - impactOrder[a.impact];\r\n    });\r\n  }\r\n\r\n  private getMetricValue(metrics: PerformanceMetrics, budgetName: string): number | null {\r\n    const metricMap: Record<string, keyof PerformanceMetrics> = {\r\n      'First Load JS': 'firstLoadJS',\r\n      'Total Bundle Size': 'bundleSize',\r\n      'CSS Bundle Size': 'css',\r\n      'Image Assets': 'images',\r\n      'Font Assets': 'fonts',\r\n      'Chunk Count': 'chunkCount',\r\n      'Duplicate Modules': 'duplicateModules'\r\n    };\r\n\r\n    const metricKey = metricMap[budgetName];\r\n    return metricKey ? metrics[metricKey] : null;\r\n  }\r\n\r\n  private calculateImpact(budget: PerformanceBudget, actual: number): 'low' | 'medium' | 'high' | 'critical' {\r\n    const excess = actual - budget.threshold;\r\n    const excessPercent = (excess / budget.threshold) * 100;\r\n\r\n    if (budget.category === 'critical') {\r\n      if (excessPercent > 50) {return 'critical';}\r\n      if (excessPercent > 25) {return 'high';}\r\n      if (excessPercent > 10) {return 'medium';}\r\n      return 'low';\r\n    }\r\n\r\n    if (budget.category === 'important') {\r\n      if (excessPercent > 75) {return 'high';}\r\n      if (excessPercent > 50) {return 'medium';}\r\n      return 'low';\r\n    }\r\n\r\n    return excessPercent > 100 ? 'medium' : 'low';\r\n  }\r\n\r\n  private generateRecommendation(budget: PerformanceBudget, actual: number): string {\r\n    const excess = actual - budget.threshold;\r\n    const excessKB = Math.round(excess / 1024);\r\n\r\n    const recommendations: Record<string, string> = {\r\n      'First Load JS': `Reducir ${excessKB}KB implementando lazy loading para componentes no críticos`,\r\n      'Total Bundle Size': `Optimizar bundles dividiendo en chunks más pequeños (${excessKB}KB de exceso)`,\r\n      'CSS Bundle Size': `Eliminar CSS no utilizado y optimizar imports (${excessKB}KB de exceso)`,\r\n      'Image Assets': `Optimizar imágenes con formatos modernos (WebP/AVIF) y compresión`,\r\n      'Font Assets': `Usar font-display: swap y preload para fuentes críticas`,\r\n      'Chunk Count': `Consolidar chunks pequeños para reducir overhead HTTP`,\r\n      'Duplicate Modules': `Configurar splitChunks para evitar duplicación de módulos`\r\n    };\r\n\r\n    return recommendations[budget.name] || `Optimizar ${budget.name} para cumplir con el presupuesto`;\r\n  }\r\n\r\n  private calculatePerformanceScore(violations: BudgetViolation[], metrics: PerformanceMetrics): number {\r\n    let score = 100;\r\n\r\n    for (const violation of violations) {\r\n      const penalty = this.calculatePenalty(violation);\r\n      score -= penalty;\r\n    }\r\n\r\n    // Bonus por métricas especialmente buenas\r\n    if (metrics.firstLoadJS < 80 * 1024) {score += 5;} // Bonus por First Load JS < 80KB\r\n    if (metrics.duplicateModules === 0) {score += 3;} // Bonus por no duplicados\r\n    if (metrics.chunkCount <= 8) {score += 2;} // Bonus por chunks optimizados\r\n\r\n    return Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  private calculatePenalty(violation: BudgetViolation): number {\r\n    const basePenalty = violation.severity === 'error' ? 15 : 8;\r\n    const impactMultiplier = {\r\n      critical: 2.0,\r\n      high: 1.5,\r\n      medium: 1.2,\r\n      low: 1.0\r\n    };\r\n\r\n    return basePenalty * impactMultiplier[violation.impact];\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) {return 'A';}\r\n    if (score >= 80) {return 'B';}\r\n    if (score >= 70) {return 'C';}\r\n    if (score >= 60) {return 'D';}\r\n    return 'F';\r\n  }\r\n\r\n  private calculateTrends(currentMetrics: PerformanceMetrics): PerformanceTrend[] {\r\n    if (this.history.length === 0) {return [];}\r\n\r\n    const previousReport = this.history[this.history.length - 1];\r\n    const trends: PerformanceTrend[] = [];\r\n\r\n    const metricKeys: (keyof PerformanceMetrics)[] = [\r\n      'bundleSize', 'firstLoadJS', 'totalJS', 'css', 'chunkCount'\r\n    ];\r\n\r\n    for (const key of metricKeys) {\r\n      const current = currentMetrics[key];\r\n      const previous = previousReport.metrics[key];\r\n      const change = current - previous;\r\n      const changePercent = previous > 0 ? (change / previous) * 100 : 0;\r\n\r\n      let trend: 'improving' | 'degrading' | 'stable' = 'stable';\r\n      if (Math.abs(changePercent) > 5) {\r\n        trend = change < 0 ? 'improving' : 'degrading';\r\n      }\r\n\r\n      trends.push({\r\n        metric: key,\r\n        current,\r\n        previous,\r\n        change,\r\n        changePercent,\r\n        trend\r\n      });\r\n    }\r\n\r\n    return trends;\r\n  }\r\n\r\n  // ===================================\r\n  // GESTIÓN DE HISTORIAL\r\n  // ===================================\r\n\r\n  private addToHistory(report: PerformanceReport): void {\r\n    this.history.push(report);\r\n    \r\n    if (this.history.length > this.maxHistorySize) {\r\n      this.history = this.history.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  public getHistory(): PerformanceReport[] {\r\n    return [...this.history];\r\n  }\r\n\r\n  public getLatestReport(): PerformanceReport | null {\r\n    return this.history.length > 0 ? this.history[this.history.length - 1] : null;\r\n  }\r\n\r\n  // ===================================\r\n  // UTILIDADES\r\n  // ===================================\r\n\r\n  private generateBuildId(): string {\r\n    return `build-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  public async saveReport(report: PerformanceReport, outputPath?: string): Promise<void> {\r\n    const reportPath = outputPath || path.join(process.cwd(), 'performance-reports');\r\n    \r\n    try {\r\n      await fs.mkdir(reportPath, { recursive: true });\r\n      const filename = `performance-report-${report.buildId}.json`;\r\n      const filepath = path.join(reportPath, filename);\r\n      \r\n      await fs.writeFile(filepath, JSON.stringify(report, null, 2));\r\n      console.log(`Performance report saved to: ${filepath}`);\r\n    } catch (error) {\r\n      console.error('Failed to save performance report:', error);\r\n    }\r\n  }\r\n\r\n  public generateTextReport(report: PerformanceReport): string {\r\n    const { violations, metrics, score, grade, trends } = report;\r\n\r\n    let textReport = `\r\n# Performance Budget Report\r\n**Build ID**: ${report.buildId}\r\n**Timestamp**: ${new Date(report.timestamp).toLocaleString()}\r\n**Score**: ${score}/100 (Grade: ${grade})\r\n\r\n## Metrics Summary\r\n- **Bundle Size**: ${Math.round(metrics.bundleSize / 1024)}KB\r\n- **First Load JS**: ${Math.round(metrics.firstLoadJS / 1024)}KB\r\n- **Total JS**: ${Math.round(metrics.totalJS / 1024)}KB\r\n- **CSS**: ${Math.round(metrics.css / 1024)}KB\r\n- **Chunks**: ${metrics.chunkCount}\r\n- **Duplicate Modules**: ${metrics.duplicateModules}\r\n\r\n## Budget Violations (${violations.length})\r\n`;\r\n\r\n    if (violations.length === 0) {\r\n      textReport += '✅ All performance budgets are within limits!\\n';\r\n    } else {\r\n      violations.forEach((violation, i) => {\r\n        const actualFormatted = violation.budget.unit === 'bytes' \r\n          ? `${Math.round(violation.actual / 1024)}KB`\r\n          : `${violation.actual}${violation.budget.unit}`;\r\n        \r\n        const expectedFormatted = violation.budget.unit === 'bytes'\r\n          ? `${Math.round(violation.expected / 1024)}KB`\r\n          : `${violation.expected}${violation.budget.unit}`;\r\n\r\n        textReport += `\r\n${i + 1}. **${violation.budget.name}** (${violation.severity.toUpperCase()})\r\n   - Actual: ${actualFormatted}\r\n   - Expected: ≤ ${expectedFormatted}\r\n   - Impact: ${violation.impact}\r\n   - Recommendation: ${violation.recommendation}\r\n`;\r\n      });\r\n    }\r\n\r\n    if (trends.length > 0) {\r\n      textReport += '\\n## Trends\\n';\r\n      trends.forEach(trend => {\r\n        const icon = trend.trend === 'improving' ? '📈' : trend.trend === 'degrading' ? '📉' : '➡️';\r\n        const changeText = trend.changePercent > 0 ? `+${trend.changePercent.toFixed(1)}%` : `${trend.changePercent.toFixed(1)}%`;\r\n        textReport += `- ${icon} **${trend.metric}**: ${changeText}\\n`;\r\n      });\r\n    }\r\n\r\n    return textReport;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["PerformanceBudgetMonitor","budgets","history","maxHistorySize","initializeDefaultBudgets","getInstance","instance","name","type","threshold","warning","unit","category","description","addBudget","budget","push","updateBudget","updates","index","findIndex","b","removeBudget","filter","getBudgets","analyzePerformance","buildPath","metrics","collectMetrics","violations","checkBudgetViolations","score","calculatePerformanceScore","grade","getPerformanceGrade","trends","calculateTrends","report","timestamp","Date","toISOString","buildId","generateBuildId","addToHistory","staticPath","path","join","bundleSize","firstLoadJS","totalJS","css","images","fonts","chunkCount","duplicateModules","unusedCode","error","console","warn","getMockMetrics","actual","getMetricValue","violation","expected","severity","impact","calculateImpact","recommendation","generateRecommendation","sort","a","impactOrder","critical","high","medium","low","budgetName","metricMap","metricKey","excess","excessPercent","excessKB","Math","round","recommendations","penalty","calculatePenalty","max","min","basePenalty","impactMultiplier","currentMetrics","length","previousReport","metricKeys","key","current","previous","change","changePercent","trend","abs","metric","slice","getHistory","getLatestReport","now","random","toString","substr","saveReport","outputPath","reportPath","process","cwd","fs","mkdir","recursive","filename","filepath","writeFile","JSON","stringify","log","generateTextReport","textReport","toLocaleString","forEach","i","actualFormatted","expectedFormatted","toUpperCase","icon","changeText","toFixed"],"mappings":"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"}