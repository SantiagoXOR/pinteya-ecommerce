{"version":3,"names":["cov_hfgtdlis0","actualCoverage","s","GET","f","PATCH","POST","runtime","request","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","url","URL","searchParams","get","severity","assignedTo","limit","parseInt","offset","query","_supabase","supabaseAdmin","from","select","order","ascending","range","eq","data","incidents","count","Error","message","stats","not","statistics","total","by_status","open","filter","length","investigating","resolved","by_severity","low","medium","high","critical","response","pagination","hasMore","requester","userId","role","permissions","console","timestamp","Date","toISOString","body","title","description","events","anomalies","priority","validSeverities","includes","join","incidentId","generateIncidentId","now","incident","id","assigned_to","created_at","updated_at","impact_assessment","affected_users","affected_systems","data_compromised","estimated_cost","initialTimelineEntry","action","actor","metadata","createdBy","savedIncident","insert","timeline","response_actions","single","automaticActions","generateAutomaticActions","notifySecurityTeam","notificationSent","security","level","securityLevel","audit","resolution","impactAssessment","addTimelineEntry","currentIncident","fetchError","updates","timelineEntries","push","oldStatus","newStatus","resolved_at","undefined","oldAssignee","newAssignee","updatedIncident","updateError","update","changesApplied","Object","keys","timelineEntriesAdded","Math","random","toString","substr","actions","type","escalationLevel","reviewRequired","warn"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\incidents\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Gestión de Incidentes de Seguridad\r\n * Permite crear, actualizar y gestionar incidentes de seguridad\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  type SecurityIncident,\r\n  type IncidentTimelineEntry,\r\n  type ResponseAction,\r\n  type SecuritySeverity\r\n} from '@/lib/security/enterprise-audit-system';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// =====================================================\r\n// GET /api/admin/security/incidents\r\n// Obtiene lista de incidentes de seguridad\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_read', 'incident_management']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const status = url.searchParams.get('status');\r\n    const severity = url.searchParams.get('severity');\r\n    const assignedTo = url.searchParams.get('assignedTo');\r\n    const limit = parseInt(url.searchParams.get('limit') || '50');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n\r\n    // Construir consulta\r\n    let query = supabaseAdmin\r\n      .from('security_incidents')\r\n      .select(`\r\n        *,\r\n        assigned_user:assigned_to(id, email, first_name, last_name)\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n    if (severity) {\r\n      query = query.eq('severity', severity);\r\n    }\r\n    if (assignedTo) {\r\n      query = query.eq('assigned_to', assignedTo);\r\n    }\r\n\r\n    const { data: incidents, error, count } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo incidentes: ${error.message}`);\r\n    }\r\n\r\n    // Obtener estadísticas\r\n    const { data: stats } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .select('status, severity')\r\n      .not('status', 'eq', 'closed');\r\n\r\n    const statistics = {\r\n      total: count || 0,\r\n      by_status: {\r\n        open: stats?.filter(s => s.status === 'open').length || 0,\r\n        investigating: stats?.filter(s => s.status === 'investigating').length || 0,\r\n        resolved: stats?.filter(s => s.status === 'resolved').length || 0\r\n      },\r\n      by_severity: {\r\n        low: stats?.filter(s => s.severity === 'low').length || 0,\r\n        medium: stats?.filter(s => s.severity === 'medium').length || 0,\r\n        high: stats?.filter(s => s.severity === 'high').length || 0,\r\n        critical: stats?.filter(s => s.severity === 'critical').length || 0\r\n      }\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incidents: incidents || [],\r\n        statistics,\r\n        pagination: {\r\n          limit,\r\n          offset,\r\n          total: count || 0,\r\n          hasMore: (count || 0) > offset + limit\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        }\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener incidentes',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/security/incidents\r\n// Crea un nuevo incidente de seguridad\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin con permisos de escritura\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'incident_create']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const {\r\n      title,\r\n      description,\r\n      severity,\r\n      events = [],\r\n      anomalies = [],\r\n      assignedTo,\r\n      priority = 'medium'\r\n    } = body;\r\n\r\n    if (!title || !description || !severity) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Campos requeridos: title, description, severity',\r\n          code: 'MISSING_REQUIRED_FIELDS',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar severidad\r\n    const validSeverities: SecuritySeverity[] = ['low', 'medium', 'high', 'critical'];\r\n    if (!validSeverities.includes(severity)) {\r\n      return NextResponse.json(\r\n        {\r\n          error: `Severidad inválida. Valores válidos: ${validSeverities.join(', ')}`,\r\n          code: 'INVALID_SEVERITY',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear incidente\r\n    const incidentId = generateIncidentId();\r\n    const now = new Date().toISOString();\r\n\r\n    const incident: Omit<SecurityIncident, 'timeline' | 'response_actions'> = {\r\n      id: incidentId,\r\n      title,\r\n      description,\r\n      severity,\r\n      status: 'open',\r\n      assigned_to: assignedTo,\r\n      created_at: now,\r\n      updated_at: now,\r\n      events,\r\n      anomalies,\r\n      impact_assessment: {\r\n        affected_users: 0,\r\n        affected_systems: [],\r\n        data_compromised: false,\r\n        estimated_cost: 0\r\n      }\r\n    };\r\n\r\n    // Crear entrada inicial en timeline\r\n    const initialTimelineEntry: IncidentTimelineEntry = {\r\n      timestamp: now,\r\n      action: 'incident_created',\r\n      actor: context.userId,\r\n      description: `Incidente creado por ${context.userId}`,\r\n      metadata: {\r\n        severity,\r\n        assignedTo,\r\n        createdBy: context.userId\r\n      }\r\n    };\r\n\r\n    // Guardar en base de datos\r\n    const { data: savedIncident, error } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .insert({\r\n        ...incident,\r\n        timeline: [initialTimelineEntry],\r\n        response_actions: []\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(`Error creando incidente: ${error.message}`);\r\n    }\r\n\r\n    // Crear acciones automáticas basadas en severidad\r\n    const automaticActions = generateAutomaticActions(severity, incidentId);\r\n    \r\n    if (automaticActions.length > 0) {\r\n      await supabaseAdmin\r\n        .from('incident_response_actions')\r\n        .insert(automaticActions);\r\n    }\r\n\r\n    // Notificar si es crítico\r\n    if (severity === 'critical') {\r\n      await notifySecurityTeam(savedIncident, context.userId);\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incident: savedIncident,\r\n        automaticActions: automaticActions.length,\r\n        notificationSent: severity === 'critical'\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Incidente de seguridad creado correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS_CREATE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al crear incidente',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH /api/admin/security/incidents\r\n// Actualiza un incidente existente\r\n// =====================================================\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'incident_update']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      incidentId,\r\n      status,\r\n      assignedTo,\r\n      resolution,\r\n      impactAssessment,\r\n      addTimelineEntry\r\n    } = body;\r\n\r\n    if (!incidentId) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'incidentId es requerido',\r\n          code: 'MISSING_INCIDENT_ID',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener incidente actual\r\n    const { data: currentIncident, error: fetchError } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .select('*')\r\n      .eq('id', incidentId)\r\n      .single();\r\n\r\n    if (fetchError || !currentIncident) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Incidente no encontrado',\r\n          code: 'INCIDENT_NOT_FOUND',\r\n          enterprise: true\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Preparar actualizaciones\r\n    const updates: any = {\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const timelineEntries = [...(currentIncident.timeline || [])];\r\n\r\n    // Actualizar status\r\n    if (status && status !== currentIncident.status) {\r\n      updates.status = status;\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'status_changed',\r\n        actor: context.userId,\r\n        description: `Estado cambiado de ${currentIncident.status} a ${status}`,\r\n        metadata: { oldStatus: currentIncident.status, newStatus: status }\r\n      });\r\n\r\n      // Si se resuelve, añadir timestamp\r\n      if (status === 'resolved') {\r\n        updates.resolved_at = new Date().toISOString();\r\n      }\r\n    }\r\n\r\n    // Actualizar asignación\r\n    if (assignedTo !== undefined && assignedTo !== currentIncident.assigned_to) {\r\n      updates.assigned_to = assignedTo;\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'assignment_changed',\r\n        actor: context.userId,\r\n        description: assignedTo \r\n          ? `Incidente asignado a ${assignedTo}` \r\n          : 'Asignación removida',\r\n        metadata: { oldAssignee: currentIncident.assigned_to, newAssignee: assignedTo }\r\n      });\r\n    }\r\n\r\n    // Actualizar evaluación de impacto\r\n    if (impactAssessment) {\r\n      updates.impact_assessment = {\r\n        ...currentIncident.impact_assessment,\r\n        ...impactAssessment\r\n      };\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'impact_updated',\r\n        actor: context.userId,\r\n        description: 'Evaluación de impacto actualizada',\r\n        metadata: { impactAssessment }\r\n      });\r\n    }\r\n\r\n    // Añadir entrada manual al timeline\r\n    if (addTimelineEntry) {\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'manual_entry',\r\n        actor: context.userId,\r\n        description: addTimelineEntry.description,\r\n        metadata: addTimelineEntry.metadata || {}\r\n      });\r\n    }\r\n\r\n    // Actualizar timeline\r\n    updates.timeline = timelineEntries;\r\n\r\n    // Guardar cambios\r\n    const { data: updatedIncident, error: updateError } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .update(updates)\r\n      .eq('id', incidentId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      throw new Error(`Error actualizando incidente: ${updateError.message}`);\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incident: updatedIncident,\r\n        changesApplied: Object.keys(updates).length,\r\n        timelineEntriesAdded: timelineEntries.length - (currentIncident.timeline?.length || 0)\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Incidente actualizado correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS_UPDATE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al actualizar incidente',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction generateIncidentId(): string {\r\n  return `inc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction generateAutomaticActions(severity: SecuritySeverity, incidentId: string): ResponseAction[] {\r\n  const actions: ResponseAction[] = [];\r\n  const now = new Date().toISOString();\r\n\r\n  // Acciones automáticas basadas en severidad\r\n  switch (severity) {\r\n    case 'critical':\r\n      actions.push(\r\n        {\r\n          id: `action_${Date.now()}_1`,\r\n          type: 'automated',\r\n          action: 'notify_security_team',\r\n          status: 'pending',\r\n          metadata: { incidentId, severity, priority: 'immediate' }\r\n        },\r\n        {\r\n          id: `action_${Date.now()}_2`,\r\n          type: 'automated',\r\n          action: 'escalate_to_management',\r\n          status: 'pending',\r\n          metadata: { incidentId, severity, escalationLevel: 1 }\r\n        }\r\n      );\r\n      break;\r\n\r\n    case 'high':\r\n      actions.push({\r\n        id: `action_${Date.now()}_1`,\r\n        type: 'automated',\r\n        action: 'notify_security_team',\r\n        status: 'pending',\r\n        metadata: { incidentId, severity, priority: 'high' }\r\n      });\r\n      break;\r\n\r\n    case 'medium':\r\n      actions.push({\r\n        id: `action_${Date.now()}_1`,\r\n        type: 'automated',\r\n        action: 'log_for_review',\r\n        status: 'pending',\r\n        metadata: { incidentId, severity, reviewRequired: true }\r\n      });\r\n      break;\r\n  }\r\n\r\n  return actions;\r\n}\r\n\r\nasync function notifySecurityTeam(incident: any, createdBy: string): Promise<void> {\r\n  try {\r\n    console.warn(`[SECURITY_CRITICAL] Incidente crítico creado: ${incident.id}`);\r\n    console.warn(`[SECURITY_CRITICAL] Título: ${incident.title}`);\r\n    console.warn(`[SECURITY_CRITICAL] Creado por: ${createdBy}`);\r\n    \r\n    // En producción, aquí se enviarían notificaciones reales\r\n    // - Email al equipo de seguridad\r\n    // - Slack/Teams notification\r\n    // - SMS para incidentes críticos\r\n    // - Webhook a sistemas externos\r\n  } catch (error) {\r\n    console.error('[SECURITY_NOTIFICATION] Error enviando notificación:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}