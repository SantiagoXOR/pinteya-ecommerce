{"version":3,"names":["cov_10g70c23u","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","body","origin","destination","waypoints","travelMode","process","env","GOOGLE_MAPS_API_KEY","baseUrl","params","URLSearchParams","lat","lng","mode","toLowerCase","key","language","region","units","alternatives","avoid","length","waypointsStr","map","wp","join","append","response","fetch","data","console","route","routes","instructions","totalDistance","totalDuration","leg","legs","distance","value","duration","step","steps","push","instruction","html_instructions","replace","text","maneuver","coordinates","start_location","end_coordinates","end_location","navigationData","overview_polyline","points","bounds","start_address","end_address","summary","total_distance","toFixed","total_duration","formatDuration","waypoints_order","waypoint_order","metadata","generated_at","Date","toISOString","travel_mode","seconds","hours","Math","floor","minutes","searchParams","URL","url","get","originLat","originLng","split","Number","destLat","destLng","postRequest","NextRequest","method","headers","JSON","stringify"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\navigation\\directions\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para obtener direcciones de navegación usando Google Maps Directions API\r\n * POST /api/driver/navigation/directions\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { origin, destination, waypoints = [], travelMode = 'DRIVING' } = body;\r\n\r\n    // Validar parámetros\r\n    if (!origin || !destination) {\r\n      return NextResponse.json(\r\n        { error: 'Origen y destino son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!process.env.GOOGLE_MAPS_API_KEY) {\r\n      return NextResponse.json(\r\n        { error: 'Google Maps API key no configurada' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Construir URL para Google Directions API\r\n    const baseUrl = 'https://maps.googleapis.com/maps/api/directions/json';\r\n    const params = new URLSearchParams({\r\n      origin: `${origin.lat},${origin.lng}`,\r\n      destination: `${destination.lat},${destination.lng}`,\r\n      mode: travelMode.toLowerCase(),\r\n      key: process.env.GOOGLE_MAPS_API_KEY,\r\n      language: 'es',\r\n      region: 'AR',\r\n      units: 'metric',\r\n      alternatives: 'false',\r\n      avoid: 'tolls'\r\n    });\r\n\r\n    // Agregar waypoints si existen\r\n    if (waypoints.length > 0) {\r\n      const waypointsStr = waypoints\r\n        .map((wp: any) => `${wp.lat},${wp.lng}`)\r\n        .join('|');\r\n      params.append('waypoints', `optimize:true|${waypointsStr}`);\r\n    }\r\n\r\n    // Hacer petición a Google Directions API\r\n    const response = await fetch(`${baseUrl}?${params}`);\r\n    const data = await response.json();\r\n\r\n    if (data.status !== 'OK') {\r\n      console.error('Google Directions API error:', data);\r\n      return NextResponse.json(\r\n        { error: `Error de Google Maps: ${data.status}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const route = data.routes[0];\r\n    if (!route) {\r\n      return NextResponse.json(\r\n        { error: 'No se encontró ruta' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Procesar instrucciones de navegación\r\n    const instructions = [];\r\n    let totalDistance = 0;\r\n    let totalDuration = 0;\r\n\r\n    for (const leg of route.legs) {\r\n      totalDistance += leg.distance.value;\r\n      totalDuration += leg.duration.value;\r\n\r\n      for (const step of leg.steps) {\r\n        instructions.push({\r\n          instruction: step.html_instructions.replace(/<[^>]*>/g, ''), // Remover HTML\r\n          distance: step.distance.text,\r\n          duration: step.duration.text,\r\n          maneuver: step.maneuver || 'straight',\r\n          coordinates: {\r\n            lat: step.start_location.lat,\r\n            lng: step.start_location.lng\r\n          },\r\n          end_coordinates: {\r\n            lat: step.end_location.lat,\r\n            lng: step.end_location.lng\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Respuesta estructurada\r\n    const navigationData = {\r\n      route: {\r\n        overview_polyline: route.overview_polyline.points,\r\n        bounds: route.bounds,\r\n        legs: route.legs.map(leg => ({\r\n          distance: leg.distance,\r\n          duration: leg.duration,\r\n          start_address: leg.start_address,\r\n          end_address: leg.end_address,\r\n          start_location: leg.start_location,\r\n          end_location: leg.end_location\r\n        }))\r\n      },\r\n      instructions,\r\n      summary: {\r\n        total_distance: {\r\n          value: totalDistance,\r\n          text: `${(totalDistance / 1000).toFixed(1)} km`\r\n        },\r\n        total_duration: {\r\n          value: totalDuration,\r\n          text: formatDuration(totalDuration)\r\n        },\r\n        waypoints_order: route.waypoint_order || []\r\n      },\r\n      metadata: {\r\n        generated_at: new Date().toISOString(),\r\n        travel_mode: travelMode,\r\n        language: 'es',\r\n        region: 'AR'\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(navigationData);\r\n\r\n  } catch (error) {\r\n    console.error('Error in navigation directions API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Formatear duración en segundos a formato legible\r\n */\r\nfunction formatDuration(seconds: number): string {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes}m`;\r\n  } else {\r\n    return `${minutes}m`;\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de la URL\r\n    const { searchParams } = new URL(request.url);\r\n    const origin = searchParams.get('origin');\r\n    const destination = searchParams.get('destination');\r\n\r\n    if (!origin || !destination) {\r\n      return NextResponse.json(\r\n        { error: 'Parámetros origin y destination requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Redirigir a POST con los parámetros\r\n    const [originLat, originLng] = origin.split(',').map(Number);\r\n    const [destLat, destLng] = destination.split(',').map(Number);\r\n\r\n    const body = {\r\n      origin: { lat: originLat, lng: originLng },\r\n      destination: { lat: destLat, lng: destLng }\r\n    };\r\n\r\n    // Simular POST request\r\n    const postRequest = new NextRequest(request.url, {\r\n      method: 'POST',\r\n      headers: request.headers,\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    return await POST(postRequest);\r\n\r\n  } catch (error) {\r\n    console.error('Error in navigation directions GET:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}