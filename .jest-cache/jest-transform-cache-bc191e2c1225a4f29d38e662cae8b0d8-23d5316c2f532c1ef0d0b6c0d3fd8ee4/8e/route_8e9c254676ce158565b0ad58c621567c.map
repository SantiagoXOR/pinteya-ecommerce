{"version":3,"names":["cov_1eczzh1aj3","actualCoverage","s","GET","f","runtime","request","supabase","_supabase","getSupabaseClient","data","mainCategories","error","categoriesError","from","select","is","order","b","console","_server","NextResponse","json","success","status","subCategories","subCategoriesError","not","brandsData","brandsError","uniqueBrands","Set","map","item","brand","filter","Boolean","priceData","priceError","prices","price","minPrice","Math","min","maxPrice","max","categoriesWithSubs","category","subcategories","sub","parent_id","id","productNames","productNamesError","limit","paintTypes","finishes","typeKeywords","finishKeywords","type","some","product","name","toLowerCase","includes","finish","metadata","categories","brands","sort","priceRange","stats","totalCategories","length","totalSubcategories","totalBrands","totalProducts","log"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\filters\\metadata\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API FILTERS METADATA\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\n/**\r\n * GET /api/filters/metadata\r\n * \r\n * Obtiene metadatos para filtros dinámicos:\r\n * - Categorías principales y subcategorías\r\n * - Marcas disponibles\r\n * - Rangos de precios\r\n * \r\n * @returns {Object} Metadatos de filtros\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const supabase = getSupabaseClient();\r\n\r\n    // Obtener categorías principales (parent_id = null)\r\n    const { data: mainCategories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id, name, slug, image_url')\r\n      .is('parent_id', null)\r\n      .order('name');\r\n\r\n    if (categoriesError) {\r\n      console.error('❌ Error fetching main categories:', categoriesError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching categories' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener subcategorías agrupadas por categoría principal\r\n    const { data: subCategories, error: subCategoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id, name, slug, parent_id, image_url')\r\n      .not('parent_id', 'is', null)\r\n      .order('name');\r\n\r\n    if (subCategoriesError) {\r\n      console.error('❌ Error fetching subcategories:', subCategoriesError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching subcategories' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener marcas únicas\r\n    const { data: brandsData, error: brandsError } = await supabase\r\n      .from('products')\r\n      .select('brand')\r\n      .not('brand', 'is', null)\r\n      .order('brand');\r\n\r\n    if (brandsError) {\r\n      console.error('❌ Error fetching brands:', brandsError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching brands' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Extraer marcas únicas\r\n    const uniqueBrands = [...new Set(brandsData.map(item => item.brand))].filter(Boolean);\r\n\r\n    // Obtener rangos de precios\r\n    const { data: priceData, error: priceError } = await supabase\r\n      .from('products')\r\n      .select('price')\r\n      .not('price', 'is', null);\r\n\r\n    if (priceError) {\r\n      console.error('❌ Error fetching price data:', priceError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching price data' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const prices = priceData.map(item => item.price).filter(Boolean);\r\n    const minPrice = Math.min(...prices);\r\n    const maxPrice = Math.max(...prices);\r\n\r\n    // Agrupar subcategorías por categoría principal\r\n    const categoriesWithSubs = mainCategories.map(category => ({\r\n      ...category,\r\n      subcategories: subCategories.filter(sub => sub.parent_id === category.id)\r\n    }));\r\n\r\n    // Detectar tipos de pintura desde nombres de productos (análisis básico)\r\n    const { data: productNames, error: productNamesError } = await supabase\r\n      .from('products')\r\n      .select('name')\r\n      .limit(1000);\r\n\r\n    let paintTypes: string[] = [];\r\n    let finishes: string[] = [];\r\n\r\n    if (!productNamesError && productNames) {\r\n      const typeKeywords = ['Látex', 'Sintético', 'Esmalte', 'Antióxido', 'Impermeabilizante', 'Barniz'];\r\n      const finishKeywords = ['Mate', 'Satinado', 'Brillante', 'Semi-mate', 'Semi-brillante'];\r\n      \r\n      paintTypes = typeKeywords.filter(type => \r\n        productNames.some(product => \r\n          product.name.toLowerCase().includes(type.toLowerCase())\r\n        )\r\n      );\r\n\r\n      finishes = finishKeywords.filter(finish => \r\n        productNames.some(product => \r\n          product.name.toLowerCase().includes(finish.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n\r\n    const metadata = {\r\n      categories: categoriesWithSubs,\r\n      brands: uniqueBrands.sort(),\r\n      paintTypes: paintTypes.sort(),\r\n      finishes: finishes.sort(),\r\n      priceRange: {\r\n        min: minPrice,\r\n        max: maxPrice\r\n      },\r\n      stats: {\r\n        totalCategories: mainCategories.length,\r\n        totalSubcategories: subCategories.length,\r\n        totalBrands: uniqueBrands.length,\r\n        totalProducts: priceData.length\r\n      }\r\n    };\r\n\r\n    console.log('✅ Filter metadata fetched successfully:', {\r\n      categories: metadata.categories.length,\r\n      brands: metadata.brands.length,\r\n      paintTypes: metadata.paintTypes.length,\r\n      finishes: metadata.finishes.length\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: metadata\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Unexpected error in filters metadata API:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}