debadd093e98b62dde58388735b2b2aa
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_hfgtdlis0() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\incidents\\route.ts";
  var hash = "e0df58a2b6b02d55b5646f5040e9b1289a374cc4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\incidents\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 21
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 85
        }
      },
      "10": {
        start: {
          line: 28,
          column: 18
        },
        end: {
          line: 28,
          column: 69
        }
      },
      "11": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "13": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "16": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 47,
          column: 42
        }
      },
      "17": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "18": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 53
        }
      },
      "19": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 51,
          column: 57
        }
      },
      "20": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 61
        }
      },
      "21": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "22": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 70
        }
      },
      "23": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 61,
          column: 44
        }
      },
      "24": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "27": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 51
        }
      },
      "28": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "29": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 56
        }
      },
      "30": {
        start: {
          line: 72,
          column: 50
        },
        end: {
          line: 72,
          column: 61
        }
      },
      "31": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 77
        }
      },
      "33": {
        start: {
          line: 77,
          column: 32
        },
        end: {
          line: 77,
          column: 145
        }
      },
      "34": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "35": {
        start: {
          line: 81,
          column: 41
        },
        end: {
          line: 81,
          column: 60
        }
      },
      "36": {
        start: {
          line: 82,
          column: 50
        },
        end: {
          line: 82,
          column: 78
        }
      },
      "37": {
        start: {
          line: 83,
          column: 45
        },
        end: {
          line: 83,
          column: 68
        }
      },
      "38": {
        start: {
          line: 86,
          column: 40
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "39": {
        start: {
          line: 87,
          column: 43
        },
        end: {
          line: 87,
          column: 66
        }
      },
      "40": {
        start: {
          line: 88,
          column: 41
        },
        end: {
          line: 88,
          column: 62
        }
      },
      "41": {
        start: {
          line: 89,
          column: 45
        },
        end: {
          line: 89,
          column: 70
        }
      },
      "42": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 51
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 60
        }
      },
      "45": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "46": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 256,
          column: 5
        }
      },
      "47": {
        start: {
          line: 128,
          column: 27
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "48": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "49": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "50": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "51": {
        start: {
          line: 143,
          column: 21
        },
        end: {
          line: 143,
          column: 41
        }
      },
      "52": {
        start: {
          line: 145,
          column: 111
        },
        end: {
          line: 145,
          column: 115
        }
      },
      "53": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 153,
          column: 15
        }
      },
      "55": {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "56": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "57": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "58": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 47
        }
      },
      "59": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 44
        }
      },
      "60": {
        start: {
          line: 174,
          column: 25
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "61": {
        start: {
          line: 193,
          column: 37
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "62": {
        start: {
          line: 205,
          column: 47
        },
        end: {
          line: 211,
          column: 28
        }
      },
      "63": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "64": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 73
        }
      },
      "65": {
        start: {
          line: 216,
          column: 33
        },
        end: {
          line: 216,
          column: 79
        }
      },
      "66": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "67": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 101
        }
      },
      "68": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "69": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 68
        }
      },
      "70": {
        start: {
          line: 224,
          column: 25
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "71": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "72": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 67
        }
      },
      "73": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 255,
          column: 11
        }
      },
      "74": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 399,
          column: 5
        }
      },
      "75": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 265,
          column: 10
        }
      },
      "76": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "77": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "78": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 42
        }
      },
      "79": {
        start: {
          line: 276,
          column: 21
        },
        end: {
          line: 276,
          column: 41
        }
      },
      "80": {
        start: {
          line: 277,
          column: 99
        },
        end: {
          line: 277,
          column: 103
        }
      },
      "81": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "82": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 285,
          column: 15
        }
      },
      "83": {
        start: {
          line: 288,
          column: 61
        },
        end: {
          line: 288,
          column: 159
        }
      },
      "84": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "85": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "86": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "87": {
        start: {
          line: 302,
          column: 32
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "88": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "89": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 36
        }
      },
      "90": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 317,
          column: 15
        }
      },
      "91": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "92": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 63
        }
      },
      "93": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "94": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 45
        }
      },
      "95": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 335,
          column: 15
        }
      },
      "96": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "97": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 342,
          column: 14
        }
      },
      "98": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 351,
          column: 15
        }
      },
      "99": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "100": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 361,
          column: 15
        }
      },
      "101": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 43
        }
      },
      "102": {
        start: {
          line: 366,
          column: 62
        },
        end: {
          line: 366,
          column: 173
        }
      },
      "103": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "104": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 84
        }
      },
      "105": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "106": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 51
        }
      },
      "107": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 67
        }
      },
      "108": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      },
      "109": {
        start: {
          line: 405,
          column: 4
        },
        end: {
          line: 405,
          column: 74
        }
      },
      "110": {
        start: {
          line: 408,
          column: 20
        },
        end: {
          line: 408,
          column: 22
        }
      },
      "111": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 40
        }
      },
      "112": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 461,
          column: 5
        }
      },
      "113": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 433,
          column: 15
        }
      },
      "114": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 18
        }
      },
      "115": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 446,
          column: 15
        }
      },
      "116": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 18
        }
      },
      "117": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 459,
          column: 15
        }
      },
      "118": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 18
        }
      },
      "119": {
        start: {
          line: 462,
          column: 4
        },
        end: {
          line: 462,
          column: 19
        }
      },
      "120": {
        start: {
          line: 465,
          column: 4
        },
        end: {
          line: 476,
          column: 5
        }
      },
      "121": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 85
        }
      },
      "122": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 70
        }
      },
      "123": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 69
        }
      },
      "124": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 85
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 81,
            column: 37
          }
        },
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 60
          }
        },
        line: 81
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 45
          },
          end: {
            line: 82,
            column: 46
          }
        },
        loc: {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 82,
            column: 78
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 40
          },
          end: {
            line: 83,
            column: 41
          }
        },
        loc: {
          start: {
            line: 83,
            column: 45
          },
          end: {
            line: 83,
            column: 68
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 36
          }
        },
        loc: {
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 86,
            column: 60
          }
        },
        line: 86
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 87,
            column: 38
          },
          end: {
            line: 87,
            column: 39
          }
        },
        loc: {
          start: {
            line: 87,
            column: 43
          },
          end: {
            line: 87,
            column: 66
          }
        },
        line: 87
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 88,
            column: 36
          },
          end: {
            line: 88,
            column: 37
          }
        },
        loc: {
          start: {
            line: 88,
            column: 41
          },
          end: {
            line: 88,
            column: 62
          }
        },
        line: 88
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 89,
            column: 40
          },
          end: {
            line: 89,
            column: 41
          }
        },
        loc: {
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 89,
            column: 70
          }
        },
        line: 89
      },
      "13": {
        name: "POST",
        decl: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 19
          }
        },
        loc: {
          start: {
            line: 125,
            column: 29
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 125
      },
      "14": {
        name: "PATCH",
        decl: {
          start: {
            line: 258,
            column: 15
          },
          end: {
            line: 258,
            column: 20
          }
        },
        loc: {
          start: {
            line: 258,
            column: 30
          },
          end: {
            line: 400,
            column: 1
          }
        },
        line: 258
      },
      "15": {
        name: "generateIncidentId",
        decl: {
          start: {
            line: 404,
            column: 9
          },
          end: {
            line: 404,
            column: 27
          }
        },
        loc: {
          start: {
            line: 404,
            column: 30
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 404
      },
      "16": {
        name: "generateAutomaticActions",
        decl: {
          start: {
            line: 407,
            column: 9
          },
          end: {
            line: 407,
            column: 33
          }
        },
        loc: {
          start: {
            line: 407,
            column: 56
          },
          end: {
            line: 463,
            column: 1
          }
        },
        line: 407
      },
      "17": {
        name: "notifySecurityTeam",
        decl: {
          start: {
            line: 464,
            column: 15
          },
          end: {
            line: 464,
            column: 33
          }
        },
        loc: {
          start: {
            line: 464,
            column: 55
          },
          end: {
            line: 477,
            column: 1
          }
        },
        line: 464
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 41
          }
        }, {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 48
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 53,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 31
          },
          end: {
            line: 53,
            column: 60
          }
        }, {
          start: {
            line: 53,
            column: 64
          },
          end: {
            line: 53,
            column: 68
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 62
          }
        }, {
          start: {
            line: 54,
            column: 66
          },
          end: {
            line: 54,
            column: 69
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 19
          },
          end: {
            line: 79,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 19
          },
          end: {
            line: 79,
            column: 24
          }
        }, {
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 29
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 81,
            column: 22
          },
          end: {
            line: 81,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 22
          },
          end: {
            line: 81,
            column: 68
          }
        }, {
          start: {
            line: 81,
            column: 72
          },
          end: {
            line: 81,
            column: 73
          }
        }],
        line: 81
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 86
          }
        }, {
          start: {
            line: 82,
            column: 90
          },
          end: {
            line: 82,
            column: 91
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 26
          },
          end: {
            line: 83,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 26
          },
          end: {
            line: 83,
            column: 76
          }
        }, {
          start: {
            line: 83,
            column: 80
          },
          end: {
            line: 83,
            column: 81
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 21
          },
          end: {
            line: 86,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 21
          },
          end: {
            line: 86,
            column: 68
          }
        }, {
          start: {
            line: 86,
            column: 72
          },
          end: {
            line: 86,
            column: 73
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 87,
            column: 24
          },
          end: {
            line: 87,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 24
          },
          end: {
            line: 87,
            column: 74
          }
        }, {
          start: {
            line: 87,
            column: 78
          },
          end: {
            line: 87,
            column: 79
          }
        }],
        line: 87
      },
      "14": {
        loc: {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 70
          }
        }, {
          start: {
            line: 88,
            column: 74
          },
          end: {
            line: 88,
            column: 75
          }
        }],
        line: 88
      },
      "15": {
        loc: {
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 89,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 89,
            column: 78
          }
        }, {
          start: {
            line: 89,
            column: 82
          },
          end: {
            line: 89,
            column: 83
          }
        }],
        line: 89
      },
      "16": {
        loc: {
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 36
          }
        }, {
          start: {
            line: 95,
            column: 40
          },
          end: {
            line: 95,
            column: 42
          }
        }],
        line: 95
      },
      "17": {
        loc: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 32
          }
        }, {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 100,
            column: 37
          }
        }],
        line: 100
      },
      "18": {
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 35
          }
        }, {
          start: {
            line: 101,
            column: 39
          },
          end: {
            line: 101,
            column: 40
          }
        }],
        line: 101
      },
      "19": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "20": {
        loc: {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 41
          }
        }, {
          start: {
            line: 139,
            column: 45
          },
          end: {
            line: 139,
            column: 48
          }
        }],
        line: 139
      },
      "21": {
        loc: {
          start: {
            line: 145,
            column: 46
          },
          end: {
            line: 145,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 55
          },
          end: {
            line: 145,
            column: 57
          }
        }],
        line: 145
      },
      "22": {
        loc: {
          start: {
            line: 145,
            column: 59
          },
          end: {
            line: 145,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 71
          },
          end: {
            line: 145,
            column: 73
          }
        }],
        line: 145
      },
      "23": {
        loc: {
          start: {
            line: 145,
            column: 87
          },
          end: {
            line: 145,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 98
          },
          end: {
            line: 145,
            column: 106
          }
        }],
        line: 145
      },
      "24": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "25": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 18
          }
        }, {
          start: {
            line: 146,
            column: 22
          },
          end: {
            line: 146,
            column: 34
          }
        }, {
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 146,
            column: 47
          }
        }],
        line: 146
      },
      "26": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "27": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "28": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "29": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "30": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "31": {
        loc: {
          start: {
            line: 272,
            column: 24
          },
          end: {
            line: 272,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 24
          },
          end: {
            line: 272,
            column: 41
          }
        }, {
          start: {
            line: 272,
            column: 45
          },
          end: {
            line: 272,
            column: 48
          }
        }],
        line: 272
      },
      "32": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 286,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "33": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "34": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 22
          }
        }, {
          start: {
            line: 289,
            column: 26
          },
          end: {
            line: 289,
            column: 42
          }
        }],
        line: 289
      },
      "35": {
        loc: {
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 303,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 303,
            column: 39
          }
        }, {
          start: {
            line: 303,
            column: 43
          },
          end: {
            line: 303,
            column: 45
          }
        }],
        line: 303
      },
      "36": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "37": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 18
          }
        }, {
          start: {
            line: 306,
            column: 22
          },
          end: {
            line: 306,
            column: 55
          }
        }],
        line: 306
      },
      "38": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "39": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "40": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 324,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 324,
            column: 36
          }
        }, {
          start: {
            line: 324,
            column: 40
          },
          end: {
            line: 324,
            column: 82
          }
        }],
        line: 324
      },
      "41": {
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 42
          },
          end: {
            line: 330,
            column: 78
          }
        }, {
          start: {
            line: 330,
            column: 81
          },
          end: {
            line: 330,
            column: 102
          }
        }],
        line: 330
      },
      "42": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "43": {
        loc: {
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "44": {
        loc: {
          start: {
            line: 360,
            column: 26
          },
          end: {
            line: 360,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 26
          },
          end: {
            line: 360,
            column: 51
          }
        }, {
          start: {
            line: 360,
            column: 55
          },
          end: {
            line: 360,
            column: 57
          }
        }],
        line: 360
      },
      "45": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "46": {
        loc: {
          start: {
            line: 375,
            column: 64
          },
          end: {
            line: 375,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 64
          },
          end: {
            line: 375,
            column: 96
          }
        }, {
          start: {
            line: 375,
            column: 100
          },
          end: {
            line: 375,
            column: 101
          }
        }],
        line: 375
      },
      "47": {
        loc: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 434,
            column: 18
          }
        }, {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 447,
            column: 18
          }
        }, {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 460,
            column: 18
          }
        }],
        line: 411
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\incidents\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Gesti\xF3n de Incidentes de Seguridad\r\n * Permite crear, actualizar y gestionar incidentes de seguridad\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  type SecurityIncident,\r\n  type IncidentTimelineEntry,\r\n  type ResponseAction,\r\n  type SecuritySeverity\r\n} from '@/lib/security/enterprise-audit-system';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// =====================================================\r\n// GET /api/admin/security/incidents\r\n// Obtiene lista de incidentes de seguridad\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_read', 'incident_management']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener par\xE1metros de consulta\r\n    const url = new URL(request.url);\r\n    const status = url.searchParams.get('status');\r\n    const severity = url.searchParams.get('severity');\r\n    const assignedTo = url.searchParams.get('assignedTo');\r\n    const limit = parseInt(url.searchParams.get('limit') || '50');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n\r\n    // Construir consulta\r\n    let query = supabaseAdmin\r\n      .from('security_incidents')\r\n      .select(`\r\n        *,\r\n        assigned_user:assigned_to(id, email, first_name, last_name)\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n    if (severity) {\r\n      query = query.eq('severity', severity);\r\n    }\r\n    if (assignedTo) {\r\n      query = query.eq('assigned_to', assignedTo);\r\n    }\r\n\r\n    const { data: incidents, error, count } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error obteniendo incidentes: ${error.message}`);\r\n    }\r\n\r\n    // Obtener estad\xEDsticas\r\n    const { data: stats } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .select('status, severity')\r\n      .not('status', 'eq', 'closed');\r\n\r\n    const statistics = {\r\n      total: count || 0,\r\n      by_status: {\r\n        open: stats?.filter(s => s.status === 'open').length || 0,\r\n        investigating: stats?.filter(s => s.status === 'investigating').length || 0,\r\n        resolved: stats?.filter(s => s.status === 'resolved').length || 0\r\n      },\r\n      by_severity: {\r\n        low: stats?.filter(s => s.severity === 'low').length || 0,\r\n        medium: stats?.filter(s => s.severity === 'medium').length || 0,\r\n        high: stats?.filter(s => s.severity === 'high').length || 0,\r\n        critical: stats?.filter(s => s.severity === 'critical').length || 0\r\n      }\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incidents: incidents || [],\r\n        statistics,\r\n        pagination: {\r\n          limit,\r\n          offset,\r\n          total: count || 0,\r\n          hasMore: (count || 0) > offset + limit\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        }\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener incidentes',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/security/incidents\r\n// Crea un nuevo incidente de seguridad\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin con permisos de escritura\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'incident_create']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const {\r\n      title,\r\n      description,\r\n      severity,\r\n      events = [],\r\n      anomalies = [],\r\n      assignedTo,\r\n      priority = 'medium'\r\n    } = body;\r\n\r\n    if (!title || !description || !severity) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Campos requeridos: title, description, severity',\r\n          code: 'MISSING_REQUIRED_FIELDS',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar severidad\r\n    const validSeverities: SecuritySeverity[] = ['low', 'medium', 'high', 'critical'];\r\n    if (!validSeverities.includes(severity)) {\r\n      return NextResponse.json(\r\n        {\r\n          error: `Severidad inv\xE1lida. Valores v\xE1lidos: ${validSeverities.join(', ')}`,\r\n          code: 'INVALID_SEVERITY',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear incidente\r\n    const incidentId = generateIncidentId();\r\n    const now = new Date().toISOString();\r\n\r\n    const incident: Omit<SecurityIncident, 'timeline' | 'response_actions'> = {\r\n      id: incidentId,\r\n      title,\r\n      description,\r\n      severity,\r\n      status: 'open',\r\n      assigned_to: assignedTo,\r\n      created_at: now,\r\n      updated_at: now,\r\n      events,\r\n      anomalies,\r\n      impact_assessment: {\r\n        affected_users: 0,\r\n        affected_systems: [],\r\n        data_compromised: false,\r\n        estimated_cost: 0\r\n      }\r\n    };\r\n\r\n    // Crear entrada inicial en timeline\r\n    const initialTimelineEntry: IncidentTimelineEntry = {\r\n      timestamp: now,\r\n      action: 'incident_created',\r\n      actor: context.userId,\r\n      description: `Incidente creado por ${context.userId}`,\r\n      metadata: {\r\n        severity,\r\n        assignedTo,\r\n        createdBy: context.userId\r\n      }\r\n    };\r\n\r\n    // Guardar en base de datos\r\n    const { data: savedIncident, error } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .insert({\r\n        ...incident,\r\n        timeline: [initialTimelineEntry],\r\n        response_actions: []\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(`Error creando incidente: ${error.message}`);\r\n    }\r\n\r\n    // Crear acciones autom\xE1ticas basadas en severidad\r\n    const automaticActions = generateAutomaticActions(severity, incidentId);\r\n    \r\n    if (automaticActions.length > 0) {\r\n      await supabaseAdmin\r\n        .from('incident_response_actions')\r\n        .insert(automaticActions);\r\n    }\r\n\r\n    // Notificar si es cr\xEDtico\r\n    if (severity === 'critical') {\r\n      await notifySecurityTeam(savedIncident, context.userId);\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incident: savedIncident,\r\n        automaticActions: automaticActions.length,\r\n        notificationSent: severity === 'critical'\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Incidente de seguridad creado correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS_CREATE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al crear incidente',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH /api/admin/security/incidents\r\n// Actualiza un incidente existente\r\n// =====================================================\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'incident_update']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      incidentId,\r\n      status,\r\n      assignedTo,\r\n      resolution,\r\n      impactAssessment,\r\n      addTimelineEntry\r\n    } = body;\r\n\r\n    if (!incidentId) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'incidentId es requerido',\r\n          code: 'MISSING_INCIDENT_ID',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener incidente actual\r\n    const { data: currentIncident, error: fetchError } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .select('*')\r\n      .eq('id', incidentId)\r\n      .single();\r\n\r\n    if (fetchError || !currentIncident) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Incidente no encontrado',\r\n          code: 'INCIDENT_NOT_FOUND',\r\n          enterprise: true\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Preparar actualizaciones\r\n    const updates: any = {\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const timelineEntries = [...(currentIncident.timeline || [])];\r\n\r\n    // Actualizar status\r\n    if (status && status !== currentIncident.status) {\r\n      updates.status = status;\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'status_changed',\r\n        actor: context.userId,\r\n        description: `Estado cambiado de ${currentIncident.status} a ${status}`,\r\n        metadata: { oldStatus: currentIncident.status, newStatus: status }\r\n      });\r\n\r\n      // Si se resuelve, a\xF1adir timestamp\r\n      if (status === 'resolved') {\r\n        updates.resolved_at = new Date().toISOString();\r\n      }\r\n    }\r\n\r\n    // Actualizar asignaci\xF3n\r\n    if (assignedTo !== undefined && assignedTo !== currentIncident.assigned_to) {\r\n      updates.assigned_to = assignedTo;\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'assignment_changed',\r\n        actor: context.userId,\r\n        description: assignedTo \r\n          ? `Incidente asignado a ${assignedTo}` \r\n          : 'Asignaci\xF3n removida',\r\n        metadata: { oldAssignee: currentIncident.assigned_to, newAssignee: assignedTo }\r\n      });\r\n    }\r\n\r\n    // Actualizar evaluaci\xF3n de impacto\r\n    if (impactAssessment) {\r\n      updates.impact_assessment = {\r\n        ...currentIncident.impact_assessment,\r\n        ...impactAssessment\r\n      };\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'impact_updated',\r\n        actor: context.userId,\r\n        description: 'Evaluaci\xF3n de impacto actualizada',\r\n        metadata: { impactAssessment }\r\n      });\r\n    }\r\n\r\n    // A\xF1adir entrada manual al timeline\r\n    if (addTimelineEntry) {\r\n      timelineEntries.push({\r\n        timestamp: new Date().toISOString(),\r\n        action: 'manual_entry',\r\n        actor: context.userId,\r\n        description: addTimelineEntry.description,\r\n        metadata: addTimelineEntry.metadata || {}\r\n      });\r\n    }\r\n\r\n    // Actualizar timeline\r\n    updates.timeline = timelineEntries;\r\n\r\n    // Guardar cambios\r\n    const { data: updatedIncident, error: updateError } = await supabaseAdmin\r\n      .from('security_incidents')\r\n      .update(updates)\r\n      .eq('id', incidentId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      throw new Error(`Error actualizando incidente: ${updateError.message}`);\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        incident: updatedIncident,\r\n        changesApplied: Object.keys(updates).length,\r\n        timelineEntriesAdded: timelineEntries.length - (currentIncident.timeline?.length || 0)\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Incidente actualizado correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_INCIDENTS_UPDATE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al actualizar incidente',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction generateIncidentId(): string {\r\n  return `inc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction generateAutomaticActions(severity: SecuritySeverity, incidentId: string): ResponseAction[] {\r\n  const actions: ResponseAction[] = [];\r\n  const now = new Date().toISOString();\r\n\r\n  // Acciones autom\xE1ticas basadas en severidad\r\n  switch (severity) {\r\n    case 'critical':\r\n      actions.push(\r\n        {\r\n          id: `action_${Date.now()}_1`,\r\n          type: 'automated',\r\n          action: 'notify_security_team',\r\n          status: 'pending',\r\n          metadata: { incidentId, severity, priority: 'immediate' }\r\n        },\r\n        {\r\n          id: `action_${Date.now()}_2`,\r\n          type: 'automated',\r\n          action: 'escalate_to_management',\r\n          status: 'pending',\r\n          metadata: { incidentId, severity, escalationLevel: 1 }\r\n        }\r\n      );\r\n      break;\r\n\r\n    case 'high':\r\n      actions.push({\r\n        id: `action_${Date.now()}_1`,\r\n        type: 'automated',\r\n        action: 'notify_security_team',\r\n        status: 'pending',\r\n        metadata: { incidentId, severity, priority: 'high' }\r\n      });\r\n      break;\r\n\r\n    case 'medium':\r\n      actions.push({\r\n        id: `action_${Date.now()}_1`,\r\n        type: 'automated',\r\n        action: 'log_for_review',\r\n        status: 'pending',\r\n        metadata: { incidentId, severity, reviewRequired: true }\r\n      });\r\n      break;\r\n  }\r\n\r\n  return actions;\r\n}\r\n\r\nasync function notifySecurityTeam(incident: any, createdBy: string): Promise<void> {\r\n  try {\r\n    console.warn(`[SECURITY_CRITICAL] Incidente cr\xEDtico creado: ${incident.id}`);\r\n    console.warn(`[SECURITY_CRITICAL] T\xEDtulo: ${incident.title}`);\r\n    console.warn(`[SECURITY_CRITICAL] Creado por: ${createdBy}`);\r\n    \r\n    // En producci\xF3n, aqu\xED se enviar\xEDan notificaciones reales\r\n    // - Email al equipo de seguridad\r\n    // - Slack/Teams notification\r\n    // - SMS para incidentes cr\xEDticos\r\n    // - Webhook a sistemas externos\r\n  } catch (error) {\r\n    console.error('[SECURITY_NOTIFICATION] Error enviando notificaci\xF3n:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "PATCH", "POST", "runtime", "request", "authResult", "requireAdminAuth", "success", "NextResponse", "json", "error", "code", "enterprise", "status", "context", "url", "URL", "searchParams", "get", "severity", "assignedTo", "limit", "parseInt", "offset", "query", "supabaseAdmin", "from", "select", "order", "ascending", "range", "eq", "data", "incidents", "count", "Error", "message", "stats", "not", "statistics", "total", "by_status", "open", "filter", "s", "length", "investigating", "resolved", "by_severity", "low", "medium", "high", "critical", "response", "pagination", "hasMore", "requester", "userId", "role", "permissions", "console", "timestamp", "Date", "toISOString", "body", "title", "description", "events", "anomalies", "priority", "validSeverities", "includes", "join", "incidentId", "generateIncidentId", "now", "incident", "id", "assigned_to", "created_at", "updated_at", "impact_assessment", "affected_users", "affected_systems", "data_compromised", "estimated_cost", "initialTimelineEntry", "action", "actor", "metadata", "createdBy", "savedIncident", "insert", "timeline", "response_actions", "single", "automaticActions", "generateAutomaticActions", "notifySecurityTeam", "notificationSent", "security", "level", "securityLevel", "audit", "resolution", "impactAssessment", "addTimelineEntry", "currentIncident", "fetchError", "updates", "timelineEntries", "push", "oldStatus", "newStatus", "resolved_at", "undefined", "oldAssignee", "newAssignee", "updatedIncident", "updateError", "update", "changesApplied", "Object", "keys", "timelineEntriesAdded", "Math", "random", "toString", "substr", "actions", "type", "escalationLevel", "reviewRequired", "warn"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e0df58a2b6b02d55b5646f5040e9b1289a374cc4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hfgtdlis0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hfgtdlis0();
cov_hfgtdlis0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[0]++;
  cov_hfgtdlis0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_hfgtdlis0().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_hfgtdlis0().f[1]++;
    cov_hfgtdlis0().s[4]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_hfgtdlis0().f[2]++;
    cov_hfgtdlis0().s[5]++;
    return PATCH;
  },
  get POST() {
    /* istanbul ignore next */
    cov_hfgtdlis0().f[3]++;
    cov_hfgtdlis0().s[6]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_hfgtdlis0().f[4]++;
    cov_hfgtdlis0().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_hfgtdlis0().s[8]++, require("next/server"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_hfgtdlis0().s[9]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _supabase =
/* istanbul ignore next */
(cov_hfgtdlis0().s[10]++, require("../../../../../lib/integrations/supabase"));
const runtime =
/* istanbul ignore next */
(cov_hfgtdlis0().s[11]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[5]++;
  cov_hfgtdlis0().s[12]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[13]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_read', 'incident_management']));
    /* istanbul ignore next */
    cov_hfgtdlis0().s[14]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[0][0]++;
      cov_hfgtdlis0().s[15]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[1][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[1][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[0][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[16]++, authResult.context);
    // Obtener parÃ¡metros de consulta
    const url =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[17]++, new URL(request.url));
    const status =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[18]++, url.searchParams.get('status'));
    const severity =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[19]++, url.searchParams.get('severity'));
    const assignedTo =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[20]++, url.searchParams.get('assignedTo'));
    const limit =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[21]++, parseInt(
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[2][0]++, url.searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[2][1]++, '50')));
    const offset =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[22]++, parseInt(
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[3][0]++, url.searchParams.get('offset')) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[3][1]++, '0')));
    // Construir consulta
    let query =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[23]++, _supabase.supabaseAdmin.from('security_incidents').select(`
        *,
        assigned_user:assigned_to(id, email, first_name, last_name)
      `).order('created_at', {
      ascending: false
    }).range(offset, offset + limit - 1));
    // Aplicar filtros
    /* istanbul ignore next */
    cov_hfgtdlis0().s[24]++;
    if (status) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[4][0]++;
      cov_hfgtdlis0().s[25]++;
      query = query.eq('status', status);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[4][1]++;
    }
    cov_hfgtdlis0().s[26]++;
    if (severity) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[5][0]++;
      cov_hfgtdlis0().s[27]++;
      query = query.eq('severity', severity);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[5][1]++;
    }
    cov_hfgtdlis0().s[28]++;
    if (assignedTo) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[6][0]++;
      cov_hfgtdlis0().s[29]++;
      query = query.eq('assigned_to', assignedTo);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[6][1]++;
    }
    const {
      data: incidents,
      error,
      count
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[30]++, await query);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[31]++;
    if (error) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[7][0]++;
      cov_hfgtdlis0().s[32]++;
      throw new Error(`Error obteniendo incidentes: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[7][1]++;
    }
    // Obtener estadÃ­sticas
    const {
      data: stats
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[33]++, await _supabase.supabaseAdmin.from('security_incidents').select('status, severity').not('status', 'eq', 'closed'));
    const statistics =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[34]++, {
      total:
      /* istanbul ignore next */
      (cov_hfgtdlis0().b[8][0]++, count) ||
      /* istanbul ignore next */
      (cov_hfgtdlis0().b[8][1]++, 0),
      by_status: {
        open:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[9][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[6]++;
          cov_hfgtdlis0().s[35]++;
          return s.status === 'open';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[9][1]++, 0),
        investigating:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[10][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[7]++;
          cov_hfgtdlis0().s[36]++;
          return s.status === 'investigating';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[10][1]++, 0),
        resolved:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[11][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[8]++;
          cov_hfgtdlis0().s[37]++;
          return s.status === 'resolved';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[11][1]++, 0)
      },
      by_severity: {
        low:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[12][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[9]++;
          cov_hfgtdlis0().s[38]++;
          return s.severity === 'low';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[12][1]++, 0),
        medium:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[13][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[10]++;
          cov_hfgtdlis0().s[39]++;
          return s.severity === 'medium';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[13][1]++, 0),
        high:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[14][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[11]++;
          cov_hfgtdlis0().s[40]++;
          return s.severity === 'high';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[14][1]++, 0),
        critical:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[15][0]++, stats?.filter(s => {
          /* istanbul ignore next */
          cov_hfgtdlis0().f[12]++;
          cov_hfgtdlis0().s[41]++;
          return s.severity === 'critical';
        }).length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[15][1]++, 0)
      }
    });
    const response =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[42]++, {
      success: true,
      data: {
        incidents:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[16][0]++, incidents) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[16][1]++, []),
        statistics,
        pagination: {
          limit,
          offset,
          total:
          /* istanbul ignore next */
          (cov_hfgtdlis0().b[17][0]++, count) ||
          /* istanbul ignore next */
          (cov_hfgtdlis0().b[17][1]++, 0),
          hasMore: (
          /* istanbul ignore next */
          (cov_hfgtdlis0().b[18][0]++, count) ||
          /* istanbul ignore next */
          (cov_hfgtdlis0().b[18][1]++, 0)) > offset + limit
        }
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        }
      }
    });
    /* istanbul ignore next */
    cov_hfgtdlis0().s[43]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[44]++;
    console.error('[SECURITY_INCIDENTS] Error:', error);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[45]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener incidentes',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[13]++;
  cov_hfgtdlis0().s[46]++;
  try {
    // Verificar autenticaciÃ³n admin con permisos de escritura
    const authResult =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[47]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_write', 'incident_create']));
    /* istanbul ignore next */
    cov_hfgtdlis0().s[48]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[19][0]++;
      cov_hfgtdlis0().s[49]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[20][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[20][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[19][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[50]++, authResult.context);
    const body =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[51]++, await request.json());
    // Validar datos requeridos
    const {
      title,
      description,
      severity,
      events =
      /* istanbul ignore next */
      (cov_hfgtdlis0().b[21][0]++, []),
      anomalies =
      /* istanbul ignore next */
      (cov_hfgtdlis0().b[22][0]++, []),
      assignedTo,
      priority =
      /* istanbul ignore next */
      (cov_hfgtdlis0().b[23][0]++, 'medium')
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[52]++, body);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[25][0]++, !title) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[25][1]++, !description) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[25][2]++, !severity)) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[24][0]++;
      cov_hfgtdlis0().s[54]++;
      return _server.NextResponse.json({
        error: 'Campos requeridos: title, description, severity',
        code: 'MISSING_REQUIRED_FIELDS',
        enterprise: true
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[24][1]++;
    }
    // Validar severidad
    const validSeverities =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[55]++, ['low', 'medium', 'high', 'critical']);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[56]++;
    if (!validSeverities.includes(severity)) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[26][0]++;
      cov_hfgtdlis0().s[57]++;
      return _server.NextResponse.json({
        error: `Severidad invÃ¡lida. Valores vÃ¡lidos: ${validSeverities.join(', ')}`,
        code: 'INVALID_SEVERITY',
        enterprise: true
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[26][1]++;
    }
    // Crear incidente
    const incidentId =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[58]++, generateIncidentId());
    const now =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[59]++, new Date().toISOString());
    const incident =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[60]++, {
      id: incidentId,
      title,
      description,
      severity,
      status: 'open',
      assigned_to: assignedTo,
      created_at: now,
      updated_at: now,
      events,
      anomalies,
      impact_assessment: {
        affected_users: 0,
        affected_systems: [],
        data_compromised: false,
        estimated_cost: 0
      }
    });
    // Crear entrada inicial en timeline
    const initialTimelineEntry =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[61]++, {
      timestamp: now,
      action: 'incident_created',
      actor: context.userId,
      description: `Incidente creado por ${context.userId}`,
      metadata: {
        severity,
        assignedTo,
        createdBy: context.userId
      }
    });
    // Guardar en base de datos
    const {
      data: savedIncident,
      error
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[62]++, await _supabase.supabaseAdmin.from('security_incidents').insert({
      ...incident,
      timeline: [initialTimelineEntry],
      response_actions: []
    }).select().single());
    /* istanbul ignore next */
    cov_hfgtdlis0().s[63]++;
    if (error) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[27][0]++;
      cov_hfgtdlis0().s[64]++;
      throw new Error(`Error creando incidente: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[27][1]++;
    }
    // Crear acciones automÃ¡ticas basadas en severidad
    const automaticActions =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[65]++, generateAutomaticActions(severity, incidentId));
    /* istanbul ignore next */
    cov_hfgtdlis0().s[66]++;
    if (automaticActions.length > 0) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[28][0]++;
      cov_hfgtdlis0().s[67]++;
      await _supabase.supabaseAdmin.from('incident_response_actions').insert(automaticActions);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[28][1]++;
    }
    // Notificar si es crÃ­tico
    cov_hfgtdlis0().s[68]++;
    if (severity === 'critical') {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[29][0]++;
      cov_hfgtdlis0().s[69]++;
      await notifySecurityTeam(savedIncident, context.userId);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[29][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[70]++, {
      success: true,
      data: {
        incident: savedIncident,
        automaticActions: automaticActions.length,
        notificationSent: severity === 'critical'
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role
        },
        security: {
          level: context.securityLevel,
          audit: true
        }
      },
      message: 'Incidente de seguridad creado correctamente'
    });
    /* istanbul ignore next */
    cov_hfgtdlis0().s[71]++;
    return _server.NextResponse.json(response, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[72]++;
    console.error('[SECURITY_INCIDENTS_CREATE] Error:', error);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[73]++;
    return _server.NextResponse.json({
      error: 'Error interno al crear incidente',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[14]++;
  cov_hfgtdlis0().s[74]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[75]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_write', 'incident_update']));
    /* istanbul ignore next */
    cov_hfgtdlis0().s[76]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[30][0]++;
      cov_hfgtdlis0().s[77]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[31][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[31][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[30][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[78]++, authResult.context);
    const body =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[79]++, await request.json());
    const {
      incidentId,
      status,
      assignedTo,
      resolution,
      impactAssessment,
      addTimelineEntry
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[80]++, body);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[81]++;
    if (!incidentId) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[32][0]++;
      cov_hfgtdlis0().s[82]++;
      return _server.NextResponse.json({
        error: 'incidentId es requerido',
        code: 'MISSING_INCIDENT_ID',
        enterprise: true
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[32][1]++;
    }
    // Obtener incidente actual
    const {
      data: currentIncident,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[83]++, await _supabase.supabaseAdmin.from('security_incidents').select('*').eq('id', incidentId).single());
    /* istanbul ignore next */
    cov_hfgtdlis0().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[34][0]++, fetchError) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[34][1]++, !currentIncident)) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[33][0]++;
      cov_hfgtdlis0().s[85]++;
      return _server.NextResponse.json({
        error: 'Incidente no encontrado',
        code: 'INCIDENT_NOT_FOUND',
        enterprise: true
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[33][1]++;
    }
    // Preparar actualizaciones
    const updates =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[86]++, {
      updated_at: new Date().toISOString()
    });
    const timelineEntries =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[87]++, [...(
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[35][0]++, currentIncident.timeline) ||
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[35][1]++, []))]);
    // Actualizar status
    /* istanbul ignore next */
    cov_hfgtdlis0().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[37][0]++, status) &&
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[37][1]++, status !== currentIncident.status)) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[36][0]++;
      cov_hfgtdlis0().s[89]++;
      updates.status = status;
      /* istanbul ignore next */
      cov_hfgtdlis0().s[90]++;
      timelineEntries.push({
        timestamp: new Date().toISOString(),
        action: 'status_changed',
        actor: context.userId,
        description: `Estado cambiado de ${currentIncident.status} a ${status}`,
        metadata: {
          oldStatus: currentIncident.status,
          newStatus: status
        }
      });
      // Si se resuelve, aÃ±adir timestamp
      /* istanbul ignore next */
      cov_hfgtdlis0().s[91]++;
      if (status === 'resolved') {
        /* istanbul ignore next */
        cov_hfgtdlis0().b[38][0]++;
        cov_hfgtdlis0().s[92]++;
        updates.resolved_at = new Date().toISOString();
      } else
      /* istanbul ignore next */
      {
        cov_hfgtdlis0().b[38][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[36][1]++;
    }
    // Actualizar asignaciÃ³n
    cov_hfgtdlis0().s[93]++;
    if (
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[40][0]++, assignedTo !== undefined) &&
    /* istanbul ignore next */
    (cov_hfgtdlis0().b[40][1]++, assignedTo !== currentIncident.assigned_to)) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[39][0]++;
      cov_hfgtdlis0().s[94]++;
      updates.assigned_to = assignedTo;
      /* istanbul ignore next */
      cov_hfgtdlis0().s[95]++;
      timelineEntries.push({
        timestamp: new Date().toISOString(),
        action: 'assignment_changed',
        actor: context.userId,
        description: assignedTo ?
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[41][0]++, `Incidente asignado a ${assignedTo}`) :
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[41][1]++, 'AsignaciÃ³n removida'),
        metadata: {
          oldAssignee: currentIncident.assigned_to,
          newAssignee: assignedTo
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[39][1]++;
    }
    // Actualizar evaluaciÃ³n de impacto
    cov_hfgtdlis0().s[96]++;
    if (impactAssessment) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[42][0]++;
      cov_hfgtdlis0().s[97]++;
      updates.impact_assessment = {
        ...currentIncident.impact_assessment,
        ...impactAssessment
      };
      /* istanbul ignore next */
      cov_hfgtdlis0().s[98]++;
      timelineEntries.push({
        timestamp: new Date().toISOString(),
        action: 'impact_updated',
        actor: context.userId,
        description: 'EvaluaciÃ³n de impacto actualizada',
        metadata: {
          impactAssessment
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[42][1]++;
    }
    // AÃ±adir entrada manual al timeline
    cov_hfgtdlis0().s[99]++;
    if (addTimelineEntry) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[43][0]++;
      cov_hfgtdlis0().s[100]++;
      timelineEntries.push({
        timestamp: new Date().toISOString(),
        action: 'manual_entry',
        actor: context.userId,
        description: addTimelineEntry.description,
        metadata:
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[44][0]++, addTimelineEntry.metadata) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[44][1]++, {})
      });
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[43][1]++;
    }
    // Actualizar timeline
    cov_hfgtdlis0().s[101]++;
    updates.timeline = timelineEntries;
    // Guardar cambios
    const {
      data: updatedIncident,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[102]++, await _supabase.supabaseAdmin.from('security_incidents').update(updates).eq('id', incidentId).select().single());
    /* istanbul ignore next */
    cov_hfgtdlis0().s[103]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_hfgtdlis0().b[45][0]++;
      cov_hfgtdlis0().s[104]++;
      throw new Error(`Error actualizando incidente: ${updateError.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_hfgtdlis0().b[45][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_hfgtdlis0().s[105]++, {
      success: true,
      data: {
        incident: updatedIncident,
        changesApplied: Object.keys(updates).length,
        timelineEntriesAdded: timelineEntries.length - (
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[46][0]++, currentIncident.timeline?.length) ||
        /* istanbul ignore next */
        (cov_hfgtdlis0().b[46][1]++, 0))
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role
        },
        security: {
          audit: true
        }
      },
      message: 'Incidente actualizado correctamente'
    });
    /* istanbul ignore next */
    cov_hfgtdlis0().s[106]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[107]++;
    console.error('[SECURITY_INCIDENTS_UPDATE] Error:', error);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[108]++;
    return _server.NextResponse.json({
      error: 'Error interno al actualizar incidente',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
// =====================================================
// FUNCIONES AUXILIARES
// =====================================================
function generateIncidentId() {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[15]++;
  cov_hfgtdlis0().s[109]++;
  return `inc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
function generateAutomaticActions(severity, incidentId) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[16]++;
  const actions =
  /* istanbul ignore next */
  (cov_hfgtdlis0().s[110]++, []);
  const now =
  /* istanbul ignore next */
  (cov_hfgtdlis0().s[111]++, new Date().toISOString());
  // Acciones automÃ¡ticas basadas en severidad
  /* istanbul ignore next */
  cov_hfgtdlis0().s[112]++;
  switch (severity) {
    case 'critical':
      /* istanbul ignore next */
      cov_hfgtdlis0().b[47][0]++;
      cov_hfgtdlis0().s[113]++;
      actions.push({
        id: `action_${Date.now()}_1`,
        type: 'automated',
        action: 'notify_security_team',
        status: 'pending',
        metadata: {
          incidentId,
          severity,
          priority: 'immediate'
        }
      }, {
        id: `action_${Date.now()}_2`,
        type: 'automated',
        action: 'escalate_to_management',
        status: 'pending',
        metadata: {
          incidentId,
          severity,
          escalationLevel: 1
        }
      });
      /* istanbul ignore next */
      cov_hfgtdlis0().s[114]++;
      break;
    case 'high':
      /* istanbul ignore next */
      cov_hfgtdlis0().b[47][1]++;
      cov_hfgtdlis0().s[115]++;
      actions.push({
        id: `action_${Date.now()}_1`,
        type: 'automated',
        action: 'notify_security_team',
        status: 'pending',
        metadata: {
          incidentId,
          severity,
          priority: 'high'
        }
      });
      /* istanbul ignore next */
      cov_hfgtdlis0().s[116]++;
      break;
    case 'medium':
      /* istanbul ignore next */
      cov_hfgtdlis0().b[47][2]++;
      cov_hfgtdlis0().s[117]++;
      actions.push({
        id: `action_${Date.now()}_1`,
        type: 'automated',
        action: 'log_for_review',
        status: 'pending',
        metadata: {
          incidentId,
          severity,
          reviewRequired: true
        }
      });
      /* istanbul ignore next */
      cov_hfgtdlis0().s[118]++;
      break;
  }
  /* istanbul ignore next */
  cov_hfgtdlis0().s[119]++;
  return actions;
}
async function notifySecurityTeam(incident, createdBy) {
  /* istanbul ignore next */
  cov_hfgtdlis0().f[17]++;
  cov_hfgtdlis0().s[120]++;
  try {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[121]++;
    console.warn(`[SECURITY_CRITICAL] Incidente crÃ­tico creado: ${incident.id}`);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[122]++;
    console.warn(`[SECURITY_CRITICAL] TÃ­tulo: ${incident.title}`);
    /* istanbul ignore next */
    cov_hfgtdlis0().s[123]++;
    console.warn(`[SECURITY_CRITICAL] Creado por: ${createdBy}`);
    // En producciÃ³n, aquÃ­ se enviarÃ­an notificaciones reales
    // - Email al equipo de seguridad
    // - Slack/Teams notification
    // - SMS para incidentes crÃ­ticos
    // - Webhook a sistemas externos
  } catch (error) {
    /* istanbul ignore next */
    cov_hfgtdlis0().s[124]++;
    console.error('[SECURITY_NOTIFICATION] Error enviando notificaciÃ³n:', error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,