{"version":3,"names":["cov_2ncq6243qo","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","request","body","json","securityKey","email","password","b","_server","NextResponse","error","status","data","existingAuthUser","admin","listUsers","userExists","users","find","u","authUser","newAuthUser","authError","createUser","email_confirm","user_metadata","first_name","last_name","role","console","message","user","existingProfile","from","select","eq","single","updatedProfile","updateError","update","supabase_user_id","id","updated_at","Date","toISOString","success","auth_id","profile","adminRole","newProfile","profileError","insert","role_id","is_active","metadata","created_by","is_super_admin","instructions"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para crear el usuario administrador en Supabase Auth\r\n * Solo debe ejecutarse una vez para configurar el sistema\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar que se proporcione una clave de seguridad\r\n    const body = await request.json();\r\n    const { securityKey, email, password } = body;\r\n\r\n    // Clave de seguridad simple para evitar ejecución accidental\r\n    if (securityKey !== 'CREATE_ADMIN_PINTEYA_2025') {\r\n      return NextResponse.json(\r\n        { error: 'Clave de seguridad incorrecta' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email y contraseña son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar si el usuario ya existe en auth.users\r\n    const { data: existingAuthUser } = await supabase.auth.admin.listUsers();\r\n    const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n    let authUser;\r\n\r\n    if (userExists) {\r\n      authUser = userExists;\r\n    } else {\r\n      // Crear usuario en Supabase Auth\r\n      const { data: newAuthUser, error: authError } = await supabase.auth.admin.createUser({\r\n        email,\r\n        password,\r\n        email_confirm: true, // Confirmar email automáticamente\r\n        user_metadata: {\r\n          first_name: 'Santiago',\r\n          last_name: 'Admin',\r\n          role: 'admin'\r\n        }\r\n      });\r\n\r\n      if (authError) {\r\n        console.error('Error creating auth user:', authError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear usuario en Auth: ' + authError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      authUser = newAuthUser.user;\r\n    }\r\n\r\n    // Verificar si el perfil ya existe\r\n    const { data: existingProfile } = await supabase\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('email', email)\r\n      .single();\r\n\r\n    if (existingProfile) {\r\n      // Actualizar el perfil existente con el supabase_user_id\r\n      const { data: updatedProfile, error: updateError } = await supabase\r\n        .from('user_profiles')\r\n        .update({\r\n          supabase_user_id: authUser.id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('email', email)\r\n        .select(`\r\n          *,\r\n          user_roles (\r\n            role_name,\r\n            permissions\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error updating profile:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al actualizar perfil: ' + updateError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Usuario administrador actualizado correctamente',\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: updatedProfile\r\n        }\r\n      });\r\n    } else {\r\n      // Crear nuevo perfil (esto no debería pasar si ya ejecutamos el script anterior)\r\n      const { data: adminRole } = await supabase\r\n        .from('user_roles')\r\n        .select('id')\r\n        .eq('role_name', 'admin')\r\n        .single();\r\n\r\n      if (!adminRole) {\r\n        return NextResponse.json(\r\n          { error: 'Rol de admin no encontrado' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      const { data: newProfile, error: profileError } = await supabase\r\n        .from('user_profiles')\r\n        .insert({\r\n          supabase_user_id: authUser.id,\r\n          email,\r\n          first_name: 'Santiago',\r\n          last_name: 'Admin',\r\n          role_id: adminRole.id,\r\n          is_active: true,\r\n          metadata: { created_by: 'admin_setup', is_super_admin: true }\r\n        })\r\n        .select(`\r\n          *,\r\n          user_roles (\r\n            role_name,\r\n            permissions\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (profileError) {\r\n        console.error('Error creating profile:', profileError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil: ' + profileError.message },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Usuario administrador creado correctamente',\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: newProfile\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in create-admin-user:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    message: 'Endpoint para crear usuario administrador',\r\n    instructions: 'Usar POST con securityKey, email y password'\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}