84b665908b5a9174ec85f92df428f510
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1eczzh1aj3() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\filters\\metadata\\route.ts";
  var hash = "1a7a7cb24f482247d02c4fab5af7ca49086f8bf9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\filters\\metadata\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 66
        }
      },
      "8": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "10": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "11": {
        start: {
          line: 27,
          column: 65
        },
        end: {
          line: 27,
          column: 170
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 80
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "15": {
        start: {
          line: 38,
          column: 67
        },
        end: {
          line: 38,
          column: 190
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 81
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "19": {
        start: {
          line: 49,
          column: 57
        },
        end: {
          line: 49,
          column: 144
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "21": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 67
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "23": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "24": {
        start: {
          line: 61,
          column: 46
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "25": {
        start: {
          line: 64,
          column: 55
        },
        end: {
          line: 64,
          column: 127
        }
      },
      "26": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "27": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "29": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 72
        }
      },
      "30": {
        start: {
          line: 74,
          column: 45
        },
        end: {
          line: 74,
          column: 55
        }
      },
      "31": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 44
        }
      },
      "32": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "33": {
        start: {
          line: 78,
          column: 35
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "34": {
        start: {
          line: 78,
          column: 67
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "35": {
        start: {
          line: 80,
          column: 59
        },
        end: {
          line: 80,
          column: 88
        }
      },
      "36": {
        start: {
          line: 83,
          column: 65
        },
        end: {
          line: 83,
          column: 123
        }
      },
      "37": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 27
        }
      },
      "38": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 25
        }
      },
      "39": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "40": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "41": {
        start: {
          line: 95,
          column: 35
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "42": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 140
        }
      },
      "43": {
        start: {
          line: 102,
          column: 53
        },
        end: {
          line: 102,
          column: 138
        }
      },
      "44": {
        start: {
          line: 102,
          column: 82
        },
        end: {
          line: 102,
          column: 137
        }
      },
      "45": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 144
        }
      },
      "46": {
        start: {
          line: 103,
          column: 55
        },
        end: {
          line: 103,
          column: 142
        }
      },
      "47": {
        start: {
          line: 103,
          column: 84
        },
        end: {
          line: 103,
          column: 141
        }
      },
      "48": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "49": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "50": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "51": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 76
        }
      },
      "52": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 18
          }
        },
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 38
          },
          end: {
            line: 61,
            column: 39
          }
        },
        loc: {
          start: {
            line: 61,
            column: 46
          },
          end: {
            line: 61,
            column: 56
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 37
          },
          end: {
            line: 74,
            column: 38
          }
        },
        loc: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 74,
            column: 55
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 78,
            column: 54
          },
          end: {
            line: 78,
            column: 55
          }
        },
        loc: {
          start: {
            line: 78,
            column: 67
          },
          end: {
            line: 81,
            column: 13
          }
        },
        line: 78
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 52
          },
          end: {
            line: 80,
            column: 53
          }
        },
        loc: {
          start: {
            line: 80,
            column: 59
          },
          end: {
            line: 80,
            column: 88
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 102,
            column: 45
          },
          end: {
            line: 102,
            column: 46
          }
        },
        loc: {
          start: {
            line: 102,
            column: 53
          },
          end: {
            line: 102,
            column: 138
          }
        },
        line: 102
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 102,
            column: 71
          },
          end: {
            line: 102,
            column: 72
          }
        },
        loc: {
          start: {
            line: 102,
            column: 82
          },
          end: {
            line: 102,
            column: 137
          }
        },
        line: 102
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 45
          },
          end: {
            line: 103,
            column: 46
          }
        },
        loc: {
          start: {
            line: 103,
            column: 55
          },
          end: {
            line: 103,
            column: 142
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 103,
            column: 73
          },
          end: {
            line: 103,
            column: 74
          }
        },
        loc: {
          start: {
            line: 103,
            column: 84
          },
          end: {
            line: 103,
            column: 141
          }
        },
        line: 103
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 30
          }
        }, {
          start: {
            line: 86,
            column: 34
          },
          end: {
            line: 86,
            column: 46
          }
        }],
        line: 86
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\filters\\metadata\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API FILTERS METADATA\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\n/**\r\n * GET /api/filters/metadata\r\n * \r\n * Obtiene metadatos para filtros din\xE1micos:\r\n * - Categor\xEDas principales y subcategor\xEDas\r\n * - Marcas disponibles\r\n * - Rangos de precios\r\n * \r\n * @returns {Object} Metadatos de filtros\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const supabase = getSupabaseClient();\r\n\r\n    // Obtener categor\xEDas principales (parent_id = null)\r\n    const { data: mainCategories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id, name, slug, image_url')\r\n      .is('parent_id', null)\r\n      .order('name');\r\n\r\n    if (categoriesError) {\r\n      console.error('\u274C Error fetching main categories:', categoriesError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching categories' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener subcategor\xEDas agrupadas por categor\xEDa principal\r\n    const { data: subCategories, error: subCategoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id, name, slug, parent_id, image_url')\r\n      .not('parent_id', 'is', null)\r\n      .order('name');\r\n\r\n    if (subCategoriesError) {\r\n      console.error('\u274C Error fetching subcategories:', subCategoriesError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching subcategories' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener marcas \xFAnicas\r\n    const { data: brandsData, error: brandsError } = await supabase\r\n      .from('products')\r\n      .select('brand')\r\n      .not('brand', 'is', null)\r\n      .order('brand');\r\n\r\n    if (brandsError) {\r\n      console.error('\u274C Error fetching brands:', brandsError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching brands' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Extraer marcas \xFAnicas\r\n    const uniqueBrands = [...new Set(brandsData.map(item => item.brand))].filter(Boolean);\r\n\r\n    // Obtener rangos de precios\r\n    const { data: priceData, error: priceError } = await supabase\r\n      .from('products')\r\n      .select('price')\r\n      .not('price', 'is', null);\r\n\r\n    if (priceError) {\r\n      console.error('\u274C Error fetching price data:', priceError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error fetching price data' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const prices = priceData.map(item => item.price).filter(Boolean);\r\n    const minPrice = Math.min(...prices);\r\n    const maxPrice = Math.max(...prices);\r\n\r\n    // Agrupar subcategor\xEDas por categor\xEDa principal\r\n    const categoriesWithSubs = mainCategories.map(category => ({\r\n      ...category,\r\n      subcategories: subCategories.filter(sub => sub.parent_id === category.id)\r\n    }));\r\n\r\n    // Detectar tipos de pintura desde nombres de productos (an\xE1lisis b\xE1sico)\r\n    const { data: productNames, error: productNamesError } = await supabase\r\n      .from('products')\r\n      .select('name')\r\n      .limit(1000);\r\n\r\n    let paintTypes: string[] = [];\r\n    let finishes: string[] = [];\r\n\r\n    if (!productNamesError && productNames) {\r\n      const typeKeywords = ['L\xE1tex', 'Sint\xE9tico', 'Esmalte', 'Anti\xF3xido', 'Impermeabilizante', 'Barniz'];\r\n      const finishKeywords = ['Mate', 'Satinado', 'Brillante', 'Semi-mate', 'Semi-brillante'];\r\n      \r\n      paintTypes = typeKeywords.filter(type => \r\n        productNames.some(product => \r\n          product.name.toLowerCase().includes(type.toLowerCase())\r\n        )\r\n      );\r\n\r\n      finishes = finishKeywords.filter(finish => \r\n        productNames.some(product => \r\n          product.name.toLowerCase().includes(finish.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n\r\n    const metadata = {\r\n      categories: categoriesWithSubs,\r\n      brands: uniqueBrands.sort(),\r\n      paintTypes: paintTypes.sort(),\r\n      finishes: finishes.sort(),\r\n      priceRange: {\r\n        min: minPrice,\r\n        max: maxPrice\r\n      },\r\n      stats: {\r\n        totalCategories: mainCategories.length,\r\n        totalSubcategories: subCategories.length,\r\n        totalBrands: uniqueBrands.length,\r\n        totalProducts: priceData.length\r\n      }\r\n    };\r\n\r\n    console.log('\u2705 Filter metadata fetched successfully:', {\r\n      categories: metadata.categories.length,\r\n      brands: metadata.brands.length,\r\n      paintTypes: metadata.paintTypes.length,\r\n      finishes: metadata.finishes.length\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: metadata\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Unexpected error in filters metadata API:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "runtime", "request", "supabase", "getSupabaseClient", "data", "mainCategories", "error", "categoriesError", "from", "select", "is", "order", "console", "NextResponse", "json", "success", "status", "subCategories", "subCategoriesError", "not", "brandsData", "brandsError", "uniqueBrands", "Set", "map", "item", "brand", "filter", "Boolean", "priceData", "priceError", "prices", "price", "minPrice", "Math", "min", "maxPrice", "max", "categoriesWithSubs", "category", "subcategories", "sub", "parent_id", "id", "productNames", "productNamesError", "limit", "paintTypes", "finishes", "typeKeywords", "finishKeywords", "type", "some", "product", "name", "toLowerCase", "includes", "finish", "metadata", "categories", "brands", "sort", "priceRange", "stats", "totalCategories", "length", "totalSubcategories", "totalBrands", "totalProducts", "log"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1a7a7cb24f482247d02c4fab5af7ca49086f8bf9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1eczzh1aj3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1eczzh1aj3();
cov_1eczzh1aj3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1eczzh1aj3().f[0]++;
  cov_1eczzh1aj3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1eczzh1aj3().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1eczzh1aj3().f[1]++;
    cov_1eczzh1aj3().s[4]++;
    return GET;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1eczzh1aj3().f[2]++;
    cov_1eczzh1aj3().s[5]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1eczzh1aj3().s[6]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_1eczzh1aj3().s[7]++, require("../../../../lib/integrations/supabase"));
const runtime =
/* istanbul ignore next */
(cov_1eczzh1aj3().s[8]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1eczzh1aj3().f[3]++;
  cov_1eczzh1aj3().s[9]++;
  try {
    const supabase =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[10]++, (0, _supabase.getSupabaseClient)());
    // Obtener categorÃ­as principales (parent_id = null)
    const {
      data: mainCategories,
      error: categoriesError
    } =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[11]++, await supabase.from('categories').select('id, name, slug, image_url').is('parent_id', null).order('name'));
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[12]++;
    if (categoriesError) {
      /* istanbul ignore next */
      cov_1eczzh1aj3().b[0][0]++;
      cov_1eczzh1aj3().s[13]++;
      console.error('â Error fetching main categories:', categoriesError);
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[14]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error fetching categories'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1eczzh1aj3().b[0][1]++;
    }
    // Obtener subcategorÃ­as agrupadas por categorÃ­a principal
    const {
      data: subCategories,
      error: subCategoriesError
    } =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[15]++, await supabase.from('categories').select('id, name, slug, parent_id, image_url').not('parent_id', 'is', null).order('name'));
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[16]++;
    if (subCategoriesError) {
      /* istanbul ignore next */
      cov_1eczzh1aj3().b[1][0]++;
      cov_1eczzh1aj3().s[17]++;
      console.error('â Error fetching subcategories:', subCategoriesError);
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[18]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error fetching subcategories'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1eczzh1aj3().b[1][1]++;
    }
    // Obtener marcas Ãºnicas
    const {
      data: brandsData,
      error: brandsError
    } =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[19]++, await supabase.from('products').select('brand').not('brand', 'is', null).order('brand'));
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[20]++;
    if (brandsError) {
      /* istanbul ignore next */
      cov_1eczzh1aj3().b[2][0]++;
      cov_1eczzh1aj3().s[21]++;
      console.error('â Error fetching brands:', brandsError);
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[22]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error fetching brands'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1eczzh1aj3().b[2][1]++;
    }
    // Extraer marcas Ãºnicas
    const uniqueBrands =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[23]++, [...new Set(brandsData.map(item => {
      /* istanbul ignore next */
      cov_1eczzh1aj3().f[4]++;
      cov_1eczzh1aj3().s[24]++;
      return item.brand;
    }))].filter(Boolean));
    // Obtener rangos de precios
    const {
      data: priceData,
      error: priceError
    } =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[25]++, await supabase.from('products').select('price').not('price', 'is', null));
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[26]++;
    if (priceError) {
      /* istanbul ignore next */
      cov_1eczzh1aj3().b[3][0]++;
      cov_1eczzh1aj3().s[27]++;
      console.error('â Error fetching price data:', priceError);
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[28]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error fetching price data'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1eczzh1aj3().b[3][1]++;
    }
    const prices =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[29]++, priceData.map(item => {
      /* istanbul ignore next */
      cov_1eczzh1aj3().f[5]++;
      cov_1eczzh1aj3().s[30]++;
      return item.price;
    }).filter(Boolean));
    const minPrice =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[31]++, Math.min(...prices));
    const maxPrice =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[32]++, Math.max(...prices));
    // Agrupar subcategorÃ­as por categorÃ­a principal
    const categoriesWithSubs =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[33]++, mainCategories.map(category => {
      /* istanbul ignore next */
      cov_1eczzh1aj3().f[6]++;
      cov_1eczzh1aj3().s[34]++;
      return {
        ...category,
        subcategories: subCategories.filter(sub => {
          /* istanbul ignore next */
          cov_1eczzh1aj3().f[7]++;
          cov_1eczzh1aj3().s[35]++;
          return sub.parent_id === category.id;
        })
      };
    }));
    // Detectar tipos de pintura desde nombres de productos (anÃ¡lisis bÃ¡sico)
    const {
      data: productNames,
      error: productNamesError
    } =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[36]++, await supabase.from('products').select('name').limit(1000));
    let paintTypes =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[37]++, []);
    let finishes =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[38]++, []);
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1eczzh1aj3().b[5][0]++, !productNamesError) &&
    /* istanbul ignore next */
    (cov_1eczzh1aj3().b[5][1]++, productNames)) {
      /* istanbul ignore next */
      cov_1eczzh1aj3().b[4][0]++;
      const typeKeywords =
      /* istanbul ignore next */
      (cov_1eczzh1aj3().s[40]++, ['LÃ¡tex', 'SintÃ©tico', 'Esmalte', 'AntiÃ³xido', 'Impermeabilizante', 'Barniz']);
      const finishKeywords =
      /* istanbul ignore next */
      (cov_1eczzh1aj3().s[41]++, ['Mate', 'Satinado', 'Brillante', 'Semi-mate', 'Semi-brillante']);
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[42]++;
      paintTypes = typeKeywords.filter(type => {
        /* istanbul ignore next */
        cov_1eczzh1aj3().f[8]++;
        cov_1eczzh1aj3().s[43]++;
        return productNames.some(product => {
          /* istanbul ignore next */
          cov_1eczzh1aj3().f[9]++;
          cov_1eczzh1aj3().s[44]++;
          return product.name.toLowerCase().includes(type.toLowerCase());
        });
      });
      /* istanbul ignore next */
      cov_1eczzh1aj3().s[45]++;
      finishes = finishKeywords.filter(finish => {
        /* istanbul ignore next */
        cov_1eczzh1aj3().f[10]++;
        cov_1eczzh1aj3().s[46]++;
        return productNames.some(product => {
          /* istanbul ignore next */
          cov_1eczzh1aj3().f[11]++;
          cov_1eczzh1aj3().s[47]++;
          return product.name.toLowerCase().includes(finish.toLowerCase());
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_1eczzh1aj3().b[4][1]++;
    }
    const metadata =
    /* istanbul ignore next */
    (cov_1eczzh1aj3().s[48]++, {
      categories: categoriesWithSubs,
      brands: uniqueBrands.sort(),
      paintTypes: paintTypes.sort(),
      finishes: finishes.sort(),
      priceRange: {
        min: minPrice,
        max: maxPrice
      },
      stats: {
        totalCategories: mainCategories.length,
        totalSubcategories: subCategories.length,
        totalBrands: uniqueBrands.length,
        totalProducts: priceData.length
      }
    });
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[49]++;
    console.log('â Filter metadata fetched successfully:', {
      categories: metadata.categories.length,
      brands: metadata.brands.length,
      paintTypes: metadata.paintTypes.length,
      finishes: metadata.finishes.length
    });
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[50]++;
    return _server.NextResponse.json({
      success: true,
      data: metadata
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[51]++;
    console.error('â Unexpected error in filters metadata API:', error);
    /* istanbul ignore next */
    cov_1eczzh1aj3().s[52]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,