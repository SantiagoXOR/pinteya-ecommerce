323780da351d03e3d391304907cdf2d3
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useCheckoutTransition () {
        return useCheckoutTransition;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
function useCheckoutTransition(options = {}) {
    const { onTransitionStart, onTransitionComplete, onTransitionError, enableAnimation = true, enablePerformanceTracking = true, customDuration, skipAnimationThreshold = 100 } = options;
    const router = (0, _navigation.useRouter)();
    const [isTransitioning, setIsTransitioning] = (0, _react.useState)(false);
    const [skipAnimation, setSkipAnimation] = (0, _react.useState)(false);
    const [transitionProgress, setTransitionProgress] = (0, _react.useState)(0);
    // Refs para cleanup y performance tracking
    const timeoutRef = (0, _react.useRef)(null);
    const progressIntervalRef = (0, _react.useRef)(null);
    const performanceRef = (0, _react.useRef)({
        startTime: null,
        endTime: null,
        duration: null
    });
    // Memoizar duración para evitar recálculos
    const animationDuration = (0, _react.useMemo)(()=>{
        if (customDuration) {
            return customDuration;
        }
        return skipAnimation ? 200 : 2800;
    }, [
        skipAnimation,
        customDuration
    ]);
    // Detectar preferencia de movimiento reducido con mejor manejo de errores
    (0, _react.useEffect)(()=>{
        try {
            const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
            const handleChange = (e)=>{
                const shouldSkip = e.matches || !enableAnimation;
                setSkipAnimation(shouldSkip);
                // Performance tracking para preferencias de accesibilidad
                if (enablePerformanceTracking && shouldSkip) {
                    console.debug('[useCheckoutTransition] Animation skipped due to accessibility preferences');
                }
            };
            // Configuración inicial
            setSkipAnimation(mediaQuery.matches || !enableAnimation);
            // Escuchar cambios con soporte para navegadores antiguos
            if (mediaQuery.addEventListener) {
                mediaQuery.addEventListener('change', handleChange);
            } else {
                // Fallback para navegadores antiguos
                mediaQuery.addListener(handleChange);
            }
            return ()=>{
                if (mediaQuery.removeEventListener) {
                    mediaQuery.removeEventListener('change', handleChange);
                } else {
                    mediaQuery.removeListener(handleChange);
                }
            };
        } catch (error) {
            console.warn('[useCheckoutTransition] Error setting up media query listener:', error);
            setSkipAnimation(!enableAnimation);
        }
    }, [
        enableAnimation,
        enablePerformanceTracking
    ]);
    // Cleanup en unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
            if (progressIntervalRef.current) {
                clearInterval(progressIntervalRef.current);
            }
        };
    }, []);
    // Función optimizada para iniciar la transición
    const startTransition = (0, _react.useCallback)(()=>{
        if (isTransitioning) {
            console.warn('[useCheckoutTransition] Transition already in progress, ignoring duplicate call');
            return;
        }
        try {
            // Performance tracking
            const startTime = enablePerformanceTracking ? performance.now() : 0;
            performanceRef.current.startTime = startTime;
            setIsTransitioning(true);
            setTransitionProgress(0);
            // Callback de inicio con error handling
            try {
                onTransitionStart?.();
            } catch (error) {
                console.error('[useCheckoutTransition] Error in onTransitionStart callback:', error);
                onTransitionError?.(error);
            }
            // Progress tracking para animaciones largas
            if (!skipAnimation && animationDuration > skipAnimationThreshold) {
                const progressInterval = setInterval(()=>{
                    setTransitionProgress((prev)=>{
                        const elapsed = performance.now() - startTime;
                        const progress = Math.min(elapsed / animationDuration * 100, 100);
                        return progress;
                    });
                }, 16) // 60fps updates
                ;
                progressIntervalRef.current = progressInterval;
            }
            // Auto-reset con cleanup mejorado
            const timeout = setTimeout(()=>{
                try {
                    const endTime = enablePerformanceTracking ? performance.now() : 0;
                    performanceRef.current.endTime = endTime;
                    performanceRef.current.duration = endTime - startTime;
                    setIsTransitioning(false);
                    setTransitionProgress(100);
                    // Cleanup progress interval
                    if (progressIntervalRef.current) {
                        clearInterval(progressIntervalRef.current);
                        progressIntervalRef.current = null;
                    }
                    // Performance logging
                    if (enablePerformanceTracking) {
                        console.debug('[useCheckoutTransition] Transition completed', {
                            duration: performanceRef.current.duration,
                            skipAnimation,
                            animationDuration
                        });
                    }
                    // Callback de finalización con error handling
                    try {
                        onTransitionComplete?.();
                    } catch (error) {
                        console.error('[useCheckoutTransition] Error in onTransitionComplete callback:', error);
                        onTransitionError?.(error);
                    }
                    // Navegación con error handling
                    try {
                        router.push('/checkout');
                    } catch (error) {
                        console.error('[useCheckoutTransition] Error during navigation:', error);
                        onTransitionError?.(error);
                    }
                } catch (error) {
                    console.error('[useCheckoutTransition] Error during transition completion:', error);
                    onTransitionError?.(error);
                    setIsTransitioning(false);
                }
            }, animationDuration);
            timeoutRef.current = timeout;
        } catch (error) {
            console.error('[useCheckoutTransition] Error starting transition:', error);
            onTransitionError?.(error);
            setIsTransitioning(false);
        }
    }, [
        isTransitioning,
        skipAnimation,
        animationDuration,
        skipAnimationThreshold,
        enablePerformanceTracking,
        onTransitionStart,
        onTransitionComplete,
        onTransitionError,
        router
    ]);
    return {
        isTransitioning,
        startTransition,
        skipAnimation,
        isButtonDisabled: isTransitioning,
        transitionProgress,
        performanceMetrics: performanceRef.current
    };
}
const _default = useCheckoutTransition;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZUNoZWNrb3V0VHJhbnNpdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJ1xuXG5pbnRlcmZhY2UgVXNlQ2hlY2tvdXRUcmFuc2l0aW9uT3B0aW9ucyB7XG4gIG9uVHJhbnNpdGlvblN0YXJ0PzogKCkgPT4gdm9pZFxuICBvblRyYW5zaXRpb25Db21wbGV0ZT86ICgpID0+IHZvaWRcbiAgb25UcmFuc2l0aW9uRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkXG4gIGVuYWJsZUFuaW1hdGlvbj86IGJvb2xlYW5cbiAgZW5hYmxlUGVyZm9ybWFuY2VUcmFja2luZz86IGJvb2xlYW5cbiAgY3VzdG9tRHVyYXRpb24/OiBudW1iZXJcbiAgc2tpcEFuaW1hdGlvblRocmVzaG9sZD86IG51bWJlclxufVxuXG5pbnRlcmZhY2UgVXNlQ2hlY2tvdXRUcmFuc2l0aW9uUmV0dXJuIHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBib29sZWFuXG4gIHN0YXJ0VHJhbnNpdGlvbjogKCkgPT4gdm9pZFxuICBza2lwQW5pbWF0aW9uOiBib29sZWFuXG4gIGlzQnV0dG9uRGlzYWJsZWQ6IGJvb2xlYW5cbiAgdHJhbnNpdGlvblByb2dyZXNzOiBudW1iZXJcbiAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsXG4gICAgZW5kVGltZTogbnVtYmVyIHwgbnVsbFxuICAgIGR1cmF0aW9uOiBudW1iZXIgfCBudWxsXG4gIH1cbn1cblxuaW50ZXJmYWNlIFBlcmZvcm1hbmNlTWV0cmljcyB7XG4gIHN0YXJ0VGltZTogbnVtYmVyIHwgbnVsbFxuICBlbmRUaW1lOiBudW1iZXIgfCBudWxsXG4gIGR1cmF0aW9uOiBudW1iZXIgfCBudWxsXG59XG5cbi8qKlxuICogSG9vayBvcHRpbWl6YWRvIHBhcmEgbWFuZWphciBhbmltYWNpb25lcyBkZSB0cmFuc2ljacOzbiBhbCBjaGVja291dFxuICpcbiAqIENhcmFjdGVyw61zdGljYXMgRW50ZXJwcmlzZTpcbiAqIC0gUGVyZm9ybWFuY2UgdHJhY2tpbmcgY29uIG3DqXRyaWNhcyBkZXRhbGxhZGFzXG4gKiAtIE1hbmVqbyByb2J1c3RvIGRlIGVycm9yZXMgeSBjbGVhbnVwXG4gKiAtIFJlc3BldGEgcHJlZmVyZW5jaWFzIGRlIGFjY2VzaWJpbGlkYWQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pXG4gKiAtIENvbnRyb2wgZ3JhbnVsYXIgc29icmUgZWwgZXN0YWRvIGRlbCBib3TDs25cbiAqIC0gQ2FsbGJhY2tzIHBhcmEgZXZlbnRvcyBkZSB0cmFuc2ljacOzbiBjb24gZXJyb3IgaGFuZGxpbmdcbiAqIC0gT3B0aW1pemFjacOzbiBkZSBtZW1vcmlhIHkgcHJldmVuY2nDs24gZGUgbWVtb3J5IGxlYWtzXG4gKiAtIFNvcG9ydGUgcGFyYSB0ZXN0aW5nIGNvbiBtb2Nrc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2hlY2tvdXRUcmFuc2l0aW9uKFxuICBvcHRpb25zOiBVc2VDaGVja291dFRyYW5zaXRpb25PcHRpb25zID0ge31cbik6IFVzZUNoZWNrb3V0VHJhbnNpdGlvblJldHVybiB7XG4gIGNvbnN0IHtcbiAgICBvblRyYW5zaXRpb25TdGFydCxcbiAgICBvblRyYW5zaXRpb25Db21wbGV0ZSxcbiAgICBvblRyYW5zaXRpb25FcnJvcixcbiAgICBlbmFibGVBbmltYXRpb24gPSB0cnVlLFxuICAgIGVuYWJsZVBlcmZvcm1hbmNlVHJhY2tpbmcgPSB0cnVlLFxuICAgIGN1c3RvbUR1cmF0aW9uLFxuICAgIHNraXBBbmltYXRpb25UaHJlc2hvbGQgPSAxMDAsXG4gIH0gPSBvcHRpb25zXG5cbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgY29uc3QgW2lzVHJhbnNpdGlvbmluZywgc2V0SXNUcmFuc2l0aW9uaW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbc2tpcEFuaW1hdGlvbiwgc2V0U2tpcEFuaW1hdGlvbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW3RyYW5zaXRpb25Qcm9ncmVzcywgc2V0VHJhbnNpdGlvblByb2dyZXNzXSA9IHVzZVN0YXRlKDApXG5cbiAgLy8gUmVmcyBwYXJhIGNsZWFudXAgeSBwZXJmb3JtYW5jZSB0cmFja2luZ1xuICBjb25zdCB0aW1lb3V0UmVmID0gdXNlUmVmPE5vZGVKUy5UaW1lb3V0IHwgbnVsbD4obnVsbClcbiAgY29uc3QgcHJvZ3Jlc3NJbnRlcnZhbFJlZiA9IHVzZVJlZjxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpXG4gIGNvbnN0IHBlcmZvcm1hbmNlUmVmID0gdXNlUmVmPFBlcmZvcm1hbmNlTWV0cmljcz4oe1xuICAgIHN0YXJ0VGltZTogbnVsbCxcbiAgICBlbmRUaW1lOiBudWxsLFxuICAgIGR1cmF0aW9uOiBudWxsLFxuICB9KVxuXG4gIC8vIE1lbW9pemFyIGR1cmFjacOzbiBwYXJhIGV2aXRhciByZWPDoWxjdWxvc1xuICBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjdXN0b21EdXJhdGlvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbUR1cmF0aW9uXG4gICAgfVxuICAgIHJldHVybiBza2lwQW5pbWF0aW9uID8gMjAwIDogMjgwMFxuICB9LCBbc2tpcEFuaW1hdGlvbiwgY3VzdG9tRHVyYXRpb25dKVxuXG4gIC8vIERldGVjdGFyIHByZWZlcmVuY2lhIGRlIG1vdmltaWVudG8gcmVkdWNpZG8gY29uIG1lam9yIG1hbmVqbyBkZSBlcnJvcmVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSknKVxuXG4gICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoZTogTWVkaWFRdWVyeUxpc3RFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBzaG91bGRTa2lwID0gZS5tYXRjaGVzIHx8ICFlbmFibGVBbmltYXRpb25cbiAgICAgICAgc2V0U2tpcEFuaW1hdGlvbihzaG91bGRTa2lwKVxuXG4gICAgICAgIC8vIFBlcmZvcm1hbmNlIHRyYWNraW5nIHBhcmEgcHJlZmVyZW5jaWFzIGRlIGFjY2VzaWJpbGlkYWRcbiAgICAgICAgaWYgKGVuYWJsZVBlcmZvcm1hbmNlVHJhY2tpbmcgJiYgc2hvdWxkU2tpcCkge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgICAnW3VzZUNoZWNrb3V0VHJhbnNpdGlvbl0gQW5pbWF0aW9uIHNraXBwZWQgZHVlIHRvIGFjY2Vzc2liaWxpdHkgcHJlZmVyZW5jZXMnXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmZpZ3VyYWNpw7NuIGluaWNpYWxcbiAgICAgIHNldFNraXBBbmltYXRpb24obWVkaWFRdWVyeS5tYXRjaGVzIHx8ICFlbmFibGVBbmltYXRpb24pXG5cbiAgICAgIC8vIEVzY3VjaGFyIGNhbWJpb3MgY29uIHNvcG9ydGUgcGFyYSBuYXZlZ2Fkb3JlcyBhbnRpZ3Vvc1xuICAgICAgaWYgKG1lZGlhUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBtZWRpYVF1ZXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUNoYW5nZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIHBhcmEgbmF2ZWdhZG9yZXMgYW50aWd1b3NcbiAgICAgICAgbWVkaWFRdWVyeS5hZGRMaXN0ZW5lcihoYW5kbGVDaGFuZ2UpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICBtZWRpYVF1ZXJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUNoYW5nZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZWRpYVF1ZXJ5LnJlbW92ZUxpc3RlbmVyKGhhbmRsZUNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1t1c2VDaGVja291dFRyYW5zaXRpb25dIEVycm9yIHNldHRpbmcgdXAgbWVkaWEgcXVlcnkgbGlzdGVuZXI6JywgZXJyb3IpXG4gICAgICBzZXRTa2lwQW5pbWF0aW9uKCFlbmFibGVBbmltYXRpb24pXG4gICAgfVxuICB9LCBbZW5hYmxlQW5pbWF0aW9uLCBlbmFibGVQZXJmb3JtYW5jZVRyYWNraW5nXSlcblxuICAvLyBDbGVhbnVwIGVuIHVubW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFJlZi5jdXJyZW50KVxuICAgICAgfVxuICAgICAgaWYgKHByb2dyZXNzSW50ZXJ2YWxSZWYuY3VycmVudCkge1xuICAgICAgICBjbGVhckludGVydmFsKHByb2dyZXNzSW50ZXJ2YWxSZWYuY3VycmVudClcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKVxuXG4gIC8vIEZ1bmNpw7NuIG9wdGltaXphZGEgcGFyYSBpbmljaWFyIGxhIHRyYW5zaWNpw7NuXG4gIGNvbnN0IHN0YXJ0VHJhbnNpdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdbdXNlQ2hlY2tvdXRUcmFuc2l0aW9uXSBUcmFuc2l0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIGlnbm9yaW5nIGR1cGxpY2F0ZSBjYWxsJ1xuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFBlcmZvcm1hbmNlIHRyYWNraW5nXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBlbmFibGVQZXJmb3JtYW5jZVRyYWNraW5nID8gcGVyZm9ybWFuY2Uubm93KCkgOiAwXG4gICAgICBwZXJmb3JtYW5jZVJlZi5jdXJyZW50LnN0YXJ0VGltZSA9IHN0YXJ0VGltZVxuXG4gICAgICBzZXRJc1RyYW5zaXRpb25pbmcodHJ1ZSlcbiAgICAgIHNldFRyYW5zaXRpb25Qcm9ncmVzcygwKVxuXG4gICAgICAvLyBDYWxsYmFjayBkZSBpbmljaW8gY29uIGVycm9yIGhhbmRsaW5nXG4gICAgICB0cnkge1xuICAgICAgICBvblRyYW5zaXRpb25TdGFydD8uKClcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1t1c2VDaGVja291dFRyYW5zaXRpb25dIEVycm9yIGluIG9uVHJhbnNpdGlvblN0YXJ0IGNhbGxiYWNrOicsIGVycm9yKVxuICAgICAgICBvblRyYW5zaXRpb25FcnJvcj8uKGVycm9yIGFzIEVycm9yKVxuICAgICAgfVxuXG4gICAgICAvLyBQcm9ncmVzcyB0cmFja2luZyBwYXJhIGFuaW1hY2lvbmVzIGxhcmdhc1xuICAgICAgaWYgKCFza2lwQW5pbWF0aW9uICYmIGFuaW1hdGlvbkR1cmF0aW9uID4gc2tpcEFuaW1hdGlvblRocmVzaG9sZCkge1xuICAgICAgICBjb25zdCBwcm9ncmVzc0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIHNldFRyYW5zaXRpb25Qcm9ncmVzcyhwcmV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbigoZWxhcHNlZCAvIGFuaW1hdGlvbkR1cmF0aW9uKSAqIDEwMCwgMTAwKVxuICAgICAgICAgICAgcmV0dXJuIHByb2dyZXNzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgMTYpIC8vIDYwZnBzIHVwZGF0ZXNcblxuICAgICAgICBwcm9ncmVzc0ludGVydmFsUmVmLmN1cnJlbnQgPSBwcm9ncmVzc0ludGVydmFsXG4gICAgICB9XG5cbiAgICAgIC8vIEF1dG8tcmVzZXQgY29uIGNsZWFudXAgbWVqb3JhZG9cbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlbmRUaW1lID0gZW5hYmxlUGVyZm9ybWFuY2VUcmFja2luZyA/IHBlcmZvcm1hbmNlLm5vdygpIDogMFxuICAgICAgICAgIHBlcmZvcm1hbmNlUmVmLmN1cnJlbnQuZW5kVGltZSA9IGVuZFRpbWVcbiAgICAgICAgICBwZXJmb3JtYW5jZVJlZi5jdXJyZW50LmR1cmF0aW9uID0gZW5kVGltZSAtIHN0YXJ0VGltZVxuXG4gICAgICAgICAgc2V0SXNUcmFuc2l0aW9uaW5nKGZhbHNlKVxuICAgICAgICAgIHNldFRyYW5zaXRpb25Qcm9ncmVzcygxMDApXG5cbiAgICAgICAgICAvLyBDbGVhbnVwIHByb2dyZXNzIGludGVydmFsXG4gICAgICAgICAgaWYgKHByb2dyZXNzSW50ZXJ2YWxSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9ncmVzc0ludGVydmFsUmVmLmN1cnJlbnQpXG4gICAgICAgICAgICBwcm9ncmVzc0ludGVydmFsUmVmLmN1cnJlbnQgPSBudWxsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUGVyZm9ybWFuY2UgbG9nZ2luZ1xuICAgICAgICAgIGlmIChlbmFibGVQZXJmb3JtYW5jZVRyYWNraW5nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdbdXNlQ2hlY2tvdXRUcmFuc2l0aW9uXSBUcmFuc2l0aW9uIGNvbXBsZXRlZCcsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHBlcmZvcm1hbmNlUmVmLmN1cnJlbnQuZHVyYXRpb24sXG4gICAgICAgICAgICAgIHNraXBBbmltYXRpb24sXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYWxsYmFjayBkZSBmaW5hbGl6YWNpw7NuIGNvbiBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvblRyYW5zaXRpb25Db21wbGV0ZT8uKClcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3VzZUNoZWNrb3V0VHJhbnNpdGlvbl0gRXJyb3IgaW4gb25UcmFuc2l0aW9uQ29tcGxldGUgY2FsbGJhY2s6JywgZXJyb3IpXG4gICAgICAgICAgICBvblRyYW5zaXRpb25FcnJvcj8uKGVycm9yIGFzIEVycm9yKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE5hdmVnYWNpw7NuIGNvbiBlcnJvciBoYW5kbGluZ1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByb3V0ZXIucHVzaCgnL2NoZWNrb3V0JylcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3VzZUNoZWNrb3V0VHJhbnNpdGlvbl0gRXJyb3IgZHVyaW5nIG5hdmlnYXRpb246JywgZXJyb3IpXG4gICAgICAgICAgICBvblRyYW5zaXRpb25FcnJvcj8uKGVycm9yIGFzIEVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbdXNlQ2hlY2tvdXRUcmFuc2l0aW9uXSBFcnJvciBkdXJpbmcgdHJhbnNpdGlvbiBjb21wbGV0aW9uOicsIGVycm9yKVxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVycm9yPy4oZXJyb3IgYXMgRXJyb3IpXG4gICAgICAgICAgc2V0SXNUcmFuc2l0aW9uaW5nKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9LCBhbmltYXRpb25EdXJhdGlvbilcblxuICAgICAgdGltZW91dFJlZi5jdXJyZW50ID0gdGltZW91dFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbdXNlQ2hlY2tvdXRUcmFuc2l0aW9uXSBFcnJvciBzdGFydGluZyB0cmFuc2l0aW9uOicsIGVycm9yKVxuICAgICAgb25UcmFuc2l0aW9uRXJyb3I/LihlcnJvciBhcyBFcnJvcilcbiAgICAgIHNldElzVHJhbnNpdGlvbmluZyhmYWxzZSlcbiAgICB9XG4gIH0sIFtcbiAgICBpc1RyYW5zaXRpb25pbmcsXG4gICAgc2tpcEFuaW1hdGlvbixcbiAgICBhbmltYXRpb25EdXJhdGlvbixcbiAgICBza2lwQW5pbWF0aW9uVGhyZXNob2xkLFxuICAgIGVuYWJsZVBlcmZvcm1hbmNlVHJhY2tpbmcsXG4gICAgb25UcmFuc2l0aW9uU3RhcnQsXG4gICAgb25UcmFuc2l0aW9uQ29tcGxldGUsXG4gICAgb25UcmFuc2l0aW9uRXJyb3IsXG4gICAgcm91dGVyLFxuICBdKVxuXG4gIHJldHVybiB7XG4gICAgaXNUcmFuc2l0aW9uaW5nLFxuICAgIHN0YXJ0VHJhbnNpdGlvbixcbiAgICBza2lwQW5pbWF0aW9uLFxuICAgIGlzQnV0dG9uRGlzYWJsZWQ6IGlzVHJhbnNpdGlvbmluZyxcbiAgICB0cmFuc2l0aW9uUHJvZ3Jlc3MsXG4gICAgcGVyZm9ybWFuY2VNZXRyaWNzOiBwZXJmb3JtYW5jZVJlZi5jdXJyZW50LFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUNoZWNrb3V0VHJhbnNpdGlvblxuIl0sIm5hbWVzIjpbInVzZUNoZWNrb3V0VHJhbnNpdGlvbiIsIm9wdGlvbnMiLCJvblRyYW5zaXRpb25TdGFydCIsIm9uVHJhbnNpdGlvbkNvbXBsZXRlIiwib25UcmFuc2l0aW9uRXJyb3IiLCJlbmFibGVBbmltYXRpb24iLCJlbmFibGVQZXJmb3JtYW5jZVRyYWNraW5nIiwiY3VzdG9tRHVyYXRpb24iLCJza2lwQW5pbWF0aW9uVGhyZXNob2xkIiwicm91dGVyIiwidXNlUm91dGVyIiwiaXNUcmFuc2l0aW9uaW5nIiwic2V0SXNUcmFuc2l0aW9uaW5nIiwidXNlU3RhdGUiLCJza2lwQW5pbWF0aW9uIiwic2V0U2tpcEFuaW1hdGlvbiIsInRyYW5zaXRpb25Qcm9ncmVzcyIsInNldFRyYW5zaXRpb25Qcm9ncmVzcyIsInRpbWVvdXRSZWYiLCJ1c2VSZWYiLCJwcm9ncmVzc0ludGVydmFsUmVmIiwicGVyZm9ybWFuY2VSZWYiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsInVzZU1lbW8iLCJ1c2VFZmZlY3QiLCJtZWRpYVF1ZXJ5Iiwid2luZG93IiwibWF0Y2hNZWRpYSIsImhhbmRsZUNoYW5nZSIsImUiLCJzaG91bGRTa2lwIiwibWF0Y2hlcyIsImNvbnNvbGUiLCJkZWJ1ZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImVycm9yIiwid2FybiIsImN1cnJlbnQiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic3RhcnRUcmFuc2l0aW9uIiwidXNlQ2FsbGJhY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsInByb2dyZXNzSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInByZXYiLCJlbGFwc2VkIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWluIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJwdXNoIiwiaXNCdXR0b25EaXNhYmxlZCIsInBlcmZvcm1hbmNlTWV0cmljcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztRQXVQQTtlQUFBOztRQXpNZ0JBO2VBQUFBOzs7dUJBNUNrRDs0QkFD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