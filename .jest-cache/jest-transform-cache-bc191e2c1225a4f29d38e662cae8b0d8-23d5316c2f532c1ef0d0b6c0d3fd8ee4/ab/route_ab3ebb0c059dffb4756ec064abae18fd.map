{"version":3,"names":["cov_jl0u269z3","actualCoverage","s","GET","f","OPTIONS","POST","runtime","request","searchParams","URL","url","clientId","b","get","Date","now","Math","random","toString","substr","subscriptionsParam","filtersParam","subscriptions","_realtimemetricsstreaming","StreamEventType","METRICS_UPDATE","ALERT_CREATED","JSON","parse","error","_logger","logger","warn","LogCategory","API","filters","clientConfig","rateLimit","maxEventsPerSecond","burstLimit","info","stream","ReadableStream","start","controller","sendEvent","event","data","stringify","enqueue","TextEncoder","encode","client","realTimeMetricsStreaming","registerClient","type","timestamp","message","id","signal","addEventListener","disconnect","close","cancel","headers","Headers","Response","success","details","Error","status","body","json","Object","values","includes","validTypes","createAlertEvent","ALERT_RESOLVED","createAlertResolvedEvent","alertId","BUDGET_VIOLATION","createBudgetViolationEvent","SYSTEM_STATUS","createSystemStatusEvent","eventId"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\stream\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - STREAMING API ENDPOINT\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { logger, LogCategory } from '@/lib/enterprise/logger';\r\nimport { realTimeMetricsStreaming, StreamingUtils, StreamEventType } from '@/lib/monitoring/real-time-metrics-streaming';\r\n\r\n/**\r\n * GET - Establece conexión de Server-Sent Events\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const clientId = searchParams.get('clientId') || `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const subscriptionsParam = searchParams.get('subscriptions');\r\n    const filtersParam = searchParams.get('filters');\r\n\r\n    // Parsear suscripciones\r\n    let subscriptions: StreamEventType[] = [StreamEventType.METRICS_UPDATE, StreamEventType.ALERT_CREATED];\r\n    if (subscriptionsParam) {\r\n      try {\r\n        subscriptions = JSON.parse(subscriptionsParam);\r\n      } catch (error) {\r\n        logger.warn(LogCategory.API, 'Invalid subscriptions parameter', { subscriptionsParam });\r\n      }\r\n    }\r\n\r\n    // Parsear filtros\r\n    let filters;\r\n    if (filtersParam) {\r\n      try {\r\n        filters = JSON.parse(filtersParam);\r\n      } catch (error) {\r\n        logger.warn(LogCategory.API, 'Invalid filters parameter', { filtersParam });\r\n      }\r\n    }\r\n\r\n    // Crear configuración del cliente\r\n    const clientConfig = {\r\n      clientId,\r\n      subscriptions,\r\n      filters,\r\n      rateLimit: {\r\n        maxEventsPerSecond: 15,\r\n        burstLimit: 50\r\n      }\r\n    };\r\n\r\n    logger.info(LogCategory.API, 'SSE connection requested', {\r\n      clientId,\r\n      subscriptions,\r\n      filters\r\n    });\r\n\r\n    // Crear stream de respuesta\r\n    const stream = new ReadableStream({\r\n      start(controller) {\r\n        // Función para enviar eventos al cliente\r\n        const sendEvent = async (event: any) => {\r\n          try {\r\n            const data = `data: ${JSON.stringify(event)}\\n\\n`;\r\n            controller.enqueue(new TextEncoder().encode(data));\r\n            return true;\r\n          } catch (error) {\r\n            logger.error(LogCategory.API, 'Error sending SSE event', error as Error);\r\n            return false;\r\n          }\r\n        };\r\n\r\n        // Registrar cliente en el sistema de streaming\r\n        const client = realTimeMetricsStreaming.registerClient(clientConfig, sendEvent);\r\n\r\n        // Enviar evento de conexión establecida\r\n        sendEvent({\r\n          type: 'connection_established',\r\n          data: {\r\n            clientId,\r\n            timestamp: Date.now(),\r\n            subscriptions,\r\n            message: 'Conexión de streaming establecida exitosamente'\r\n          },\r\n          timestamp: Date.now(),\r\n          id: `connection_${clientId}`\r\n        });\r\n\r\n        // Manejar cierre de conexión\r\n        request.signal.addEventListener('abort', () => {\r\n          client.disconnect();\r\n          controller.close();\r\n          logger.info(LogCategory.API, 'SSE connection closed', { clientId });\r\n        });\r\n      },\r\n\r\n      cancel() {\r\n        logger.info(LogCategory.API, 'SSE stream cancelled', { clientId });\r\n      }\r\n    });\r\n\r\n    // Configurar headers para SSE\r\n    const headers = new Headers({\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache',\r\n      'Connection': 'keep-alive',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Cache-Control',\r\n      'X-Accel-Buffering': 'no' // Para nginx\r\n    });\r\n\r\n    return new Response(stream, { headers });\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error establishing SSE connection', error as Error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Error establishing streaming connection',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST - Envía evento personalizado al stream\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { type, data, clientId } = body;\r\n\r\n    if (!type || !data) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Missing required fields: type, data'\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Validar tipo de evento\r\n    if (!Object.values(StreamEventType).includes(type)) {\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid event type',\r\n          validTypes: Object.values(StreamEventType)\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Crear evento personalizado\r\n    const event = {\r\n      type,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n    };\r\n\r\n    // Enviar evento según el tipo\r\n    switch (type) {\r\n      case StreamEventType.ALERT_CREATED:\r\n        realTimeMetricsStreaming.createAlertEvent(data);\r\n        break;\r\n      \r\n      case StreamEventType.ALERT_RESOLVED:\r\n        realTimeMetricsStreaming.createAlertResolvedEvent(data.alertId);\r\n        break;\r\n      \r\n      case StreamEventType.BUDGET_VIOLATION:\r\n        realTimeMetricsStreaming.createBudgetViolationEvent(data);\r\n        break;\r\n      \r\n      case StreamEventType.SYSTEM_STATUS:\r\n        realTimeMetricsStreaming.createSystemStatusEvent(data);\r\n        break;\r\n      \r\n      default:\r\n        // Para otros tipos, usar broadcast genérico\r\n        // realTimeMetricsStreaming.broadcastEvent(event);\r\n        break;\r\n    }\r\n\r\n    logger.info(LogCategory.API, 'Custom streaming event sent', {\r\n      type,\r\n      clientId,\r\n      eventId: event.id\r\n    });\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        eventId: event.id,\r\n        timestamp: event.timestamp,\r\n        message: 'Event sent successfully'\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error sending custom streaming event', error as Error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: 'Error sending custom event',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * OPTIONS - Maneja preflight CORS\r\n */\r\nexport async function OPTIONS() {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n      'Access-Control-Max-Age': '86400'\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}