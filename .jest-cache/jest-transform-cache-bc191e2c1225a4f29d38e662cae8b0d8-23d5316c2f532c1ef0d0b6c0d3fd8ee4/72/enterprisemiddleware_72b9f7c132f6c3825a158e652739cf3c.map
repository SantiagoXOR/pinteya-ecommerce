{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\rate-limiting\\enterprise-middleware.ts"],"sourcesContent":["/**\r\n * Middleware Enterprise de Rate Limiting\r\n * Integra rate limiting con utilidades enterprise y sistema de autenticación\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport type { NextApiRequest, NextApiResponse } from 'next';\r\nimport {\r\n  checkEnterpriseRateLimit,\r\n  ENTERPRISE_RATE_LIMIT_CONFIGS,\r\n  type EnterpriseRateLimitConfig,\r\n  type EnterpriseRateLimitResult,\r\n  metricsCollector\r\n} from './enterprise-rate-limiter';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES\r\n// =====================================================\r\n\r\nexport interface RateLimitMiddlewareOptions {\r\n  configName: keyof typeof ENTERPRISE_RATE_LIMIT_CONFIGS;\r\n  customConfig?: Partial<EnterpriseRateLimitConfig>;\r\n  skipIf?: (request: NextRequest | NextApiRequest) => boolean;\r\n  onLimitExceeded?: (result: EnterpriseRateLimitResult, request: NextRequest | NextApiRequest) => void;\r\n  enableEnterpriseIntegration?: boolean;\r\n  enableMetrics?: boolean;\r\n  enableLogging?: boolean;\r\n}\r\n\r\nexport interface RateLimitResponse {\r\n  success: boolean;\r\n  result?: EnterpriseRateLimitResult;\r\n  response?: NextResponse;\r\n  error?: string;\r\n  code?: string;\r\n}\r\n\r\n// =====================================================\r\n// MIDDLEWARE PARA NEXT.JS APP ROUTER\r\n// =====================================================\r\n\r\n/**\r\n * Middleware de rate limiting para Next.js App Router\r\n */\r\nexport function withEnterpriseRateLimit(options: RateLimitMiddlewareOptions) {\r\n  return function <T extends any[]>(\r\n    handler: (request: NextRequest, ...args: T) => Promise<NextResponse> | NextResponse\r\n  ) {\r\n    return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\r\n      try {\r\n        // Verificar si debe saltarse el rate limiting\r\n        if (options.skipIf && options.skipIf(request)) {\r\n          return await handler(request, ...args);\r\n        }\r\n\r\n        // Verificar rate limit\r\n        const rateLimitResult = await checkEnterpriseRateLimit(\r\n          request,\r\n          options.configName,\r\n          options.customConfig\r\n        );\r\n\r\n        // Si el límite fue excedido\r\n        if (!rateLimitResult.allowed) {\r\n          // ENTERPRISE: Registrar evento de seguridad\r\n          try {\r\n            await enterpriseAuditSystem.logEnterpriseEvent({\r\n              user_id: request.headers.get('x-clerk-user-id') || 'anonymous',\r\n              event_type: 'SECURITY_VIOLATION',\r\n              event_category: 'suspicious_behavior',\r\n              severity: 'medium',\r\n              description: `Rate limit excedido en ${request.nextUrl.pathname}`,\r\n              metadata: {\r\n                endpoint: request.nextUrl.pathname,\r\n                method: request.method,\r\n                config: options.configName,\r\n                limit: rateLimitResult.limit,\r\n                remaining: rateLimitResult.remaining,\r\n                source: rateLimitResult.source\r\n              },\r\n              ip_address: request.headers.get('x-forwarded-for') || 'unknown',\r\n              user_agent: request.headers.get('user-agent') || 'unknown'\r\n            }, undefined, request);\r\n          } catch (auditError) {\r\n            console.error('[RATE_LIMIT_AUDIT] Error registrando evento:', auditError);\r\n          }\r\n\r\n          // Callback personalizado\r\n          if (options.onLimitExceeded) {\r\n            options.onLimitExceeded(rateLimitResult, request);\r\n          }\r\n\r\n          // Logging si está habilitado\r\n          if (options.enableLogging !== false) {\r\n            console.warn(`[RATE_LIMIT_MIDDLEWARE] Límite excedido para ${request.nextUrl.pathname}`, {\r\n              ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n              userAgent: request.headers.get('user-agent'),\r\n              limit: rateLimitResult.limit,\r\n              remaining: rateLimitResult.remaining,\r\n              resetTime: new Date(rateLimitResult.resetTime).toISOString()\r\n            });\r\n          }\r\n\r\n          // Crear respuesta de error con headers de rate limiting\r\n          const response = NextResponse.json(\r\n            {\r\n              error: ENTERPRISE_RATE_LIMIT_CONFIGS[options.configName].message || 'Rate limit exceeded',\r\n              code: 'RATE_LIMIT_EXCEEDED',\r\n              details: {\r\n                limit: rateLimitResult.limit,\r\n                remaining: rateLimitResult.remaining,\r\n                resetTime: rateLimitResult.resetTime,\r\n                retryAfter: rateLimitResult.retryAfter\r\n              },\r\n              enterprise: true,\r\n              timestamp: new Date().toISOString()\r\n            },\r\n            { status: 429 }\r\n          );\r\n\r\n          // Añadir headers de rate limiting\r\n          addRateLimitHeaders(response, rateLimitResult);\r\n\r\n          return response;\r\n        }\r\n\r\n        // Ejecutar handler original\r\n        const response = await handler(request, ...args);\r\n\r\n        // Añadir headers de rate limiting a respuesta exitosa\r\n        if (response) {\r\n          addRateLimitHeaders(response, rateLimitResult);\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        console.error('[RATE_LIMIT_MIDDLEWARE] Error:', error);\r\n        \r\n        // En caso de error, ejecutar handler sin rate limiting\r\n        return await handler(request, ...args);\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// MIDDLEWARE PARA PAGES API\r\n// =====================================================\r\n\r\n/**\r\n * Middleware de rate limiting para Pages API\r\n */\r\nexport function withEnterpriseRateLimitAPI(options: RateLimitMiddlewareOptions) {\r\n  return function (\r\n    handler: (req: NextApiRequest, res: NextApiResponse) => Promise<void> | void\r\n  ) {\r\n    return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\r\n      try {\r\n        // Verificar si debe saltarse el rate limiting\r\n        if (options.skipIf && options.skipIf(req)) {\r\n          return await handler(req, res);\r\n        }\r\n\r\n        // Verificar rate limit\r\n        const rateLimitResult = await checkEnterpriseRateLimit(\r\n          req,\r\n          options.configName,\r\n          options.customConfig\r\n        );\r\n\r\n        // Añadir headers de rate limiting\r\n        addRateLimitHeadersAPI(res, rateLimitResult);\r\n\r\n        // Si el límite fue excedido\r\n        if (!rateLimitResult.allowed) {\r\n          // Callback personalizado\r\n          if (options.onLimitExceeded) {\r\n            options.onLimitExceeded(rateLimitResult, req);\r\n          }\r\n\r\n          // Logging si está habilitado\r\n          if (options.enableLogging !== false) {\r\n            console.warn(`[RATE_LIMIT_API] Límite excedido para ${req.url}`, {\r\n              ip: req.headers['x-forwarded-for'] || req.connection?.remoteAddress || 'unknown',\r\n              userAgent: req.headers['user-agent'],\r\n              limit: rateLimitResult.limit,\r\n              remaining: rateLimitResult.remaining\r\n            });\r\n          }\r\n\r\n          // Responder con error 429\r\n          res.status(429).json({\r\n            error: ENTERPRISE_RATE_LIMIT_CONFIGS[options.configName].message || 'Rate limit exceeded',\r\n            code: 'RATE_LIMIT_EXCEEDED',\r\n            details: {\r\n              limit: rateLimitResult.limit,\r\n              remaining: rateLimitResult.remaining,\r\n              resetTime: rateLimitResult.resetTime,\r\n              retryAfter: rateLimitResult.retryAfter\r\n            },\r\n            enterprise: true,\r\n            timestamp: new Date().toISOString()\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        // Ejecutar handler original\r\n        return await handler(req, res);\r\n      } catch (error) {\r\n        console.error('[RATE_LIMIT_API] Error:', error);\r\n        \r\n        // En caso de error, ejecutar handler sin rate limiting\r\n        return await handler(req, res);\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// INTEGRACIÓN CON ENTERPRISE AUTH\r\n// =====================================================\r\n\r\n/**\r\n * Rate limiting integrado con autenticación enterprise\r\n */\r\nexport async function checkRateLimitWithAuth(\r\n  request: NextRequest | NextApiRequest,\r\n  enterpriseContext?: EnterpriseAuthContext,\r\n  configName?: keyof typeof ENTERPRISE_RATE_LIMIT_CONFIGS\r\n): Promise<RateLimitResponse> {\r\n  try {\r\n    // Determinar configuración basada en contexto de autenticación\r\n    let finalConfigName = configName;\r\n    const customConfig: Partial<EnterpriseRateLimitConfig> = {};\r\n\r\n    if (enterpriseContext && !finalConfigName) {\r\n      // Seleccionar configuración basada en rol y permisos\r\n      if (enterpriseContext.role === 'admin') {\r\n        finalConfigName = 'ADMIN_API';\r\n      } else if (enterpriseContext.permissions.includes('payment_access')) {\r\n        finalConfigName = 'PAYMENT_API';\r\n      } else {\r\n        finalConfigName = 'PUBLIC_API';\r\n      }\r\n\r\n      // Ajustar límites basado en nivel de seguridad\r\n      if (enterpriseContext.securityLevel === 'critical') {\r\n        customConfig.maxRequests = Math.floor((ENTERPRISE_RATE_LIMIT_CONFIGS[finalConfigName].maxRequests || 50) * 0.5);\r\n      } else if (enterpriseContext.securityLevel === 'high') {\r\n        customConfig.maxRequests = Math.floor((ENTERPRISE_RATE_LIMIT_CONFIGS[finalConfigName].maxRequests || 50) * 0.75);\r\n      }\r\n\r\n      // Usar generador de clave por usuario si está autenticado\r\n      customConfig.keyGenerator = (req) => `user:${enterpriseContext.userId}:${getEndpoint(req)}`;\r\n    }\r\n\r\n    if (!finalConfigName) {\r\n      finalConfigName = 'PUBLIC_API';\r\n    }\r\n\r\n    // Verificar rate limit\r\n    const result = await checkEnterpriseRateLimit(request, finalConfigName, customConfig);\r\n\r\n    return {\r\n      success: result.allowed,\r\n      result,\r\n      error: result.allowed ? undefined : 'Rate limit exceeded',\r\n      code: result.allowed ? undefined : 'RATE_LIMIT_EXCEEDED'\r\n    };\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_AUTH] Error:', error);\r\n    \r\n    return {\r\n      success: true, // Permitir en caso de error\r\n      error: 'Error interno en rate limiting',\r\n      code: 'INTERNAL_ERROR'\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// UTILIDADES\r\n// =====================================================\r\n\r\n/**\r\n * Añade headers de rate limiting a NextResponse\r\n */\r\nfunction addRateLimitHeaders(response: NextResponse, result: EnterpriseRateLimitResult): void {\r\n  response.headers.set('X-RateLimit-Limit', result.limit.toString());\r\n  response.headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n  response.headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n  \r\n  if (result.retryAfter) {\r\n    response.headers.set('Retry-After', result.retryAfter.toString());\r\n  }\r\n\r\n  // Headers adicionales enterprise\r\n  response.headers.set('X-RateLimit-Source', result.source);\r\n  \r\n  if (result.metrics) {\r\n    response.headers.set('X-RateLimit-Response-Time', result.metrics.responseTime.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * Añade headers de rate limiting a NextApiResponse\r\n */\r\nfunction addRateLimitHeadersAPI(res: NextApiResponse, result: EnterpriseRateLimitResult): void {\r\n  res.setHeader('X-RateLimit-Limit', result.limit.toString());\r\n  res.setHeader('X-RateLimit-Remaining', result.remaining.toString());\r\n  res.setHeader('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n  \r\n  if (result.retryAfter) {\r\n    res.setHeader('Retry-After', result.retryAfter.toString());\r\n  }\r\n\r\n  // Headers adicionales enterprise\r\n  res.setHeader('X-RateLimit-Source', result.source);\r\n  \r\n  if (result.metrics) {\r\n    res.setHeader('X-RateLimit-Response-Time', result.metrics.responseTime.toString());\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el endpoint de la request\r\n */\r\nfunction getEndpoint(request: NextRequest | NextApiRequest): string {\r\n  if ('nextUrl' in request) {\r\n    return (request as NextRequest).nextUrl.pathname;\r\n  } else if ('url' in request) {\r\n    try {\r\n      const url = new URL((request as NextApiRequest).url || '', 'http://localhost');\r\n      return url.pathname;\r\n    } catch {\r\n      return '/unknown';\r\n    }\r\n  }\r\n  \r\n  return '/unknown';\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE CONVENIENCIA\r\n// =====================================================\r\n\r\n/**\r\n * Rate limiting para APIs críticas de autenticación\r\n */\r\nexport const withCriticalAuthRateLimit = () => \r\n  withEnterpriseRateLimit({ configName: 'CRITICAL_AUTH' });\r\n\r\n/**\r\n * Rate limiting para APIs administrativas\r\n */\r\nexport const withAdminRateLimit = () => \r\n  withEnterpriseRateLimit({ configName: 'ADMIN_API' });\r\n\r\n/**\r\n * Rate limiting para APIs de pagos\r\n */\r\nexport const withPaymentRateLimit = () => \r\n  withEnterpriseRateLimit({ configName: 'PAYMENT_API' });\r\n\r\n/**\r\n * Rate limiting para APIs públicas\r\n */\r\nexport const withPublicRateLimit = () => \r\n  withEnterpriseRateLimit({ configName: 'PUBLIC_API' });\r\n\r\n/**\r\n * Rate limiting para webhooks\r\n */\r\nexport const withWebhookRateLimit = () => \r\n  withEnterpriseRateLimit({ configName: 'WEBHOOK_API' });\r\n\r\n/**\r\n * Obtener métricas de rate limiting\r\n */\r\nexport function getRateLimitMetrics() {\r\n  return metricsCollector.getMetrics();\r\n}\r\n\r\n/**\r\n * Resetear métricas de rate limiting\r\n */\r\nexport function resetRateLimitMetrics() {\r\n  metricsCollector.reset();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["checkRateLimitWithAuth","getRateLimitMetrics","resetRateLimitMetrics","withAdminRateLimit","withCriticalAuthRateLimit","withEnterpriseRateLimit","withEnterpriseRateLimitAPI","withPaymentRateLimit","withPublicRateLimit","withWebhookRateLimit","options","handler","request","args","skipIf","rateLimitResult","checkEnterpriseRateLimit","configName","customConfig","allowed","enterpriseAuditSystem","logEnterpriseEvent","user_id","headers","get","event_type","event_category","severity","description","nextUrl","pathname","metadata","endpoint","method","config","limit","remaining","source","ip_address","user_agent","undefined","auditError","console","error","onLimitExceeded","enableLogging","warn","ip","userAgent","resetTime","Date","toISOString","response","NextResponse","json","ENTERPRISE_RATE_LIMIT_CONFIGS","message","code","details","retryAfter","enterprise","timestamp","status","addRateLimitHeaders","req","res","addRateLimitHeadersAPI","url","connection","remoteAddress","enterpriseContext","finalConfigName","role","permissions","includes","securityLevel","maxRequests","Math","floor","keyGenerator","userId","getEndpoint","result","success","set","toString","ceil","metrics","responseTime","setHeader","URL","metricsCollector","getMetrics","reset"],"mappings":"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"}