{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\orders\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - API DE ÓRDENES DE USUARIO\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { supabaseAdmin } from '@/lib/integrations/supabase'\nimport { auth } from '@/lib/auth/config'\nimport { ApiResponse } from '@/types/api'\n\n// ===================================\n// GET - Obtener órdenes del usuario\n// ===================================\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar que el cliente administrativo esté disponible\n    if (!supabaseAdmin) {\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/orders')\n      return NextResponse.json(\n        { error: 'Servicio de base de datos no disponible' },\n        { status: 503 }\n      )\n    }\n\n    // Obtener usuario autenticado usando NextAuth.js\n    const session = await auth()\n\n    if (!session?.user?.id) {\n      console.error('Usuario no autenticado en GET /api/user/orders')\n      return NextResponse.json({ error: 'Usuario no autenticado' }, { status: 401 })\n    }\n\n    // Obtener parámetros de consulta\n    const { searchParams } = new URL(request.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const status = searchParams.get('status')\n\n    console.log(`[API] Obteniendo órdenes para usuario: ${session.user.id}`)\n\n    // Construir query base usando directamente el ID del usuario de NextAuth.js\n    let query = supabaseAdmin\n      .from('orders')\n      .select(\n        `\n        *,\n        order_items (\n          id,\n          quantity,\n          price,\n          products (\n            id,\n            name,\n            images\n          )\n        )\n      `\n      )\n      .eq('user_id', session.user.id)\n\n    // Filtrar por status si se especifica\n    if (status && status !== 'all') {\n      query = query.eq('status', status)\n    }\n\n    // Aplicar paginación y ordenamiento\n    const from = (page - 1) * limit\n    const to = from + limit - 1\n\n    const {\n      data: orders,\n      error,\n      count,\n    } = await query.order('created_at', { ascending: false }).range(from, to)\n\n    if (error) {\n      console.error('Error al obtener órdenes:', error)\n      return NextResponse.json({ error: 'Error al obtener órdenes' }, { status: 500 })\n    }\n\n    // Calcular estadísticas\n    const { data: stats } = await supabaseAdmin\n      .from('orders')\n      .select('status, total')\n      .eq('user_id', session.user.id)\n\n    const statistics = {\n      total_orders: stats?.length || 0,\n      total_spent: stats?.reduce((sum, order) => sum + parseFloat(order.total), 0) || 0,\n      pending_orders: stats?.filter(order => order.status === 'pending').length || 0,\n      completed_orders: stats?.filter(order => order.status === 'delivered').length || 0,\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: orders || [],\n      pagination: {\n        page,\n        limit,\n        total: count || 0,\n        pages: Math.ceil((count || 0) / limit),\n      },\n      statistics,\n    })\n  } catch (error) {\n    console.error('Error en GET /api/user/orders:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n"],"names":["GET","runtime","request","supabaseAdmin","console","error","NextResponse","json","status","session","auth","user","id","searchParams","URL","url","page","parseInt","get","limit","log","query","from","select","eq","to","data","orders","count","order","ascending","range","stats","statistics","total_orders","length","total_spent","reduce","sum","parseFloat","total","pending_orders","filter","completed_orders","success","pagination","pages","Math","ceil"],"mappings":"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"}