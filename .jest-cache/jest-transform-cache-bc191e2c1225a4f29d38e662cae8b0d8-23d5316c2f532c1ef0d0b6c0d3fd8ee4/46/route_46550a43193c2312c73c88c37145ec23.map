{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\auth\\security\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API Enterprise de Auditor√≠a de Seguridad Mejorada\r\n * Refactorizada con utilidades enterprise + RLS + validaciones robustas\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\r\nimport {\r\n  requireAdminAuth\r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  withCache,\r\n  getCacheStats\r\n} from '@/lib/auth/enterprise-cache';\r\nimport {\r\n  analyzeSecurityPatterns,\r\n  getSecurityMetrics,\r\n  generateSecurityReport,\r\n  getActiveSecurityAlerts,\r\n  updateSecurityAlert,\r\n  resolveSecurityAlert,\r\n  markAlertAsFalsePositive,\r\n  runSecurityHealthCheck,\r\n  cleanupOldSecurityEvents,\r\n  exportSecurityEvents\r\n} from '@/lib/auth/security-audit-enhanced';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\nimport { withTimeout, ENDPOINT_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\n// =====================================================\r\n// GET /api/auth/security\r\n// Obtiene m√©tricas, alertas o ejecuta an√°lisis\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci√≥n\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'read');\r\n\r\n        const url = new URL(request.url);\r\n        const action = url.searchParams.get('action') || 'metrics';\r\n        const userId = url.searchParams.get('userId');\r\n        const severity = url.searchParams.get('severity') as any;\r\n\r\n        // ENTERPRISE: Autenticaci√≥n enterprise con permisos espec√≠ficos de seguridad\r\n        const enterpriseResult = await withTimeout(\r\n          () => requireAdminAuth(request, ['security_read', 'admin_access']),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Autenticaci√≥n enterprise'\r\n        );\r\n\r\n        if (!enterpriseResult.success) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'read');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: enterpriseResult.error || 'Permisos de administrador requeridos',\r\n            enterprise: true,\r\n            code: enterpriseResult.code\r\n          };\r\n          return NextResponse.json(errorResponse, { status: enterpriseResult.status || 403 });\r\n        }\r\n\r\n    const context = enterpriseResult.context!;\r\n\r\n    // LEGACY: Mantener compatibilidad con m√©todo anterior\r\n    const legacyResult = await getAuthenticatedUser(request);\r\n    console.log('üîç Security API: Enterprise vs Legacy auth comparison:', {\r\n      enterprise: enterpriseResult.success,\r\n      legacy: legacyResult.isAdmin,\r\n      agree: enterpriseResult.success === legacyResult.isAdmin\r\n    });\r\n\r\n    switch (action) {\r\n      case 'metrics':\r\n        // ENTERPRISE: Obtener m√©tricas de seguridad con cache\r\n        const metrics = await withCache(\r\n          `security_metrics_${context.userId}`,\r\n          () => getSecurityMetrics(),\r\n          2 * 60 * 1000 // 2 minutos de cache\r\n        );\r\n\r\n        const metricsResponse: ApiResponse<any> = {\r\n          data: {\r\n            metrics,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              user: context.userId,\r\n              role: context.role,\r\n              permissions: context.permissions\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'M√©tricas de seguridad obtenidas (enterprise)',\r\n          enterprise: true\r\n        };\r\n        return NextResponse.json(metricsResponse);\r\n\r\n      case 'alerts':\r\n        // ENTERPRISE: Obtener alertas activas con cache\r\n        const alerts = await withCache(\r\n          `security_alerts_${userId || 'all'}_${severity || 'all'}`,\r\n          () => getActiveSecurityAlerts(userId || undefined, severity),\r\n          1 * 60 * 1000 // 1 minuto de cache\r\n        );\r\n\r\n        const alertsResponse: ApiResponse<any> = {\r\n          data: {\r\n            alerts,\r\n            count: alerts.length,\r\n            cache: getCacheStats(),\r\n            enterprise: {\r\n              filtered_by_user: userId,\r\n              filtered_by_severity: severity,\r\n              requester: context.userId\r\n            }\r\n          },\r\n          success: true,\r\n          message: 'Alertas de seguridad obtenidas'\r\n        };\r\n        return NextResponse.json(alertsResponse);\r\n\r\n      case 'analyze':\r\n        // Ejecutar an√°lisis de patrones\r\n        const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');\r\n        const analysisAlerts = await analyzeSecurityPatterns(userId || undefined, timeWindow);\r\n        const analysisResponse: ApiResponse<any> = {\r\n          data: { alerts: analysisAlerts, count: analysisAlerts.length },\r\n          success: true,\r\n          message: `An√°lisis completado: ${analysisAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(analysisResponse);\r\n\r\n      case 'health':\r\n        // Ejecutar verificaci√≥n de salud de seguridad\r\n        const healthCheck = await runSecurityHealthCheck();\r\n        const healthResponse: ApiResponse<any> = {\r\n          data: healthCheck,\r\n          success: true,\r\n          message: `Estado de seguridad: ${healthCheck.status}`\r\n        };\r\n        return NextResponse.json(healthResponse);\r\n\r\n      case 'report':\r\n        // Generar reporte de seguridad\r\n        const startDateStr = url.searchParams.get('startDate');\r\n        const endDateStr = url.searchParams.get('endDate');\r\n        \r\n        if (!startDateStr || !endDateStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para generar reporte'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const startDate = new Date(startDateStr);\r\n        const endDate = new Date(endDateStr);\r\n        \r\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Fechas inv√°lidas'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const report = await generateSecurityReport(startDate, endDate);\r\n        const reportResponse: ApiResponse<any> = {\r\n          data: { report },\r\n          success: true,\r\n          message: 'Reporte de seguridad generado'\r\n        };\r\n        return NextResponse.json(reportResponse);\r\n\r\n      case 'export':\r\n        // Exportar eventos de seguridad\r\n        const exportStartStr = url.searchParams.get('startDate');\r\n        const exportEndStr = url.searchParams.get('endDate');\r\n        const format = url.searchParams.get('format') as 'json' | 'csv' || 'json';\r\n        \r\n        if (!exportStartStr || !exportEndStr) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'startDate y endDate son requeridos para exportar'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const exportStart = new Date(exportStartStr);\r\n        const exportEnd = new Date(exportEndStr);\r\n        \r\n        const exportData = await exportSecurityEvents(exportStart, exportEnd, format);\r\n        \r\n        // Retornar como archivo descargable\r\n        const headers = new Headers();\r\n        headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');\r\n        headers.set('Content-Disposition', `attachment; filename=\"security-events-${exportStartStr}-${exportEndStr}.${format}\"`);\r\n        \r\n        return new Response(exportData, { headers });\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci√≥n no v√°lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'GET',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// =====================================================\r\n// POST /api/auth/security\r\n// Acciones sobre alertas y mantenimiento\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  // Aplicar rate limiting para APIs de autenticaci√≥n (acciones administrativas)\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.admin,\r\n    async () => {\r\n      // Crear logger de seguridad\r\n      const securityLogger = createSecurityLogger(request);\r\n\r\n      try {\r\n        // Log del acceso al API de seguridad (POST)\r\n        securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'write');\r\n\r\n        const body = await withTimeout(\r\n          () => request.json(),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Lectura del body de la request'\r\n        );\r\n\r\n        const { action, alertId, status, notes, assignedTo } = body;\r\n\r\n        if (!action) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Acci√≥n es requerida'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        // Verificar autenticaci√≥n y permisos de admin\r\n        const authResult = await withTimeout(\r\n          () => getAuthenticatedUser(request),\r\n          ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000,\r\n          'Verificaci√≥n de autenticaci√≥n'\r\n        );\r\n\r\n        if (!authResult.userId || !authResult.isAdmin) {\r\n          // Log del intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'write');\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Permisos de administrador requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 403 });\r\n        }\r\n\r\n    switch (action) {\r\n      case 'update_alert':\r\n        // Actualizar estado de alerta\r\n        if (!alertId) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId es requerido'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const updateResult = await updateSecurityAlert(alertId, {\r\n          status,\r\n          assigned_to: assignedTo,\r\n          resolution_notes: notes\r\n        });\r\n\r\n        const updateResponse: ApiResponse<any> = {\r\n          data: { success: updateResult },\r\n          success: updateResult,\r\n          message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'\r\n        };\r\n        return NextResponse.json(updateResponse, { \r\n          status: updateResult ? 200 : 500 \r\n        });\r\n\r\n      case 'resolve_alert':\r\n        // Resolver alerta\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const resolveResult = await resolveSecurityAlert(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const resolveResponse: ApiResponse<any> = {\r\n          data: { success: resolveResult },\r\n          success: resolveResult,\r\n          message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'\r\n        };\r\n        return NextResponse.json(resolveResponse, { \r\n          status: resolveResult ? 200 : 500 \r\n        });\r\n\r\n      case 'false_positive':\r\n        // Marcar como falso positivo\r\n        if (!alertId || !notes) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'alertId y notes son requeridos'\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const fpResult = await markAlertAsFalsePositive(\r\n          alertId, \r\n          notes, \r\n          authResult.userId\r\n        );\r\n\r\n        const fpResponse: ApiResponse<any> = {\r\n          data: { success: fpResult },\r\n          success: fpResult,\r\n          message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'\r\n        };\r\n        return NextResponse.json(fpResponse, { \r\n          status: fpResult ? 200 : 500 \r\n        });\r\n\r\n      case 'cleanup':\r\n        // Limpiar eventos antiguos\r\n        const daysToKeep = body.daysToKeep || 90;\r\n        const cleanupCount = await cleanupOldSecurityEvents(daysToKeep);\r\n\r\n        const cleanupResponse: ApiResponse<any> = {\r\n          data: { deletedCount: cleanupCount },\r\n          success: true,\r\n          message: `Limpieza completada: ${cleanupCount} eventos eliminados`\r\n        };\r\n        return NextResponse.json(cleanupResponse);\r\n\r\n      case 'force_analysis':\r\n        // Forzar an√°lisis de seguridad\r\n        const forceUserId = body.userId;\r\n        const forceTimeWindow = body.timeWindow || 24;\r\n        \r\n        const forceAlerts = await analyzeSecurityPatterns(forceUserId, forceTimeWindow);\r\n        \r\n        const forceResponse: ApiResponse<any> = {\r\n          data: { alerts: forceAlerts, count: forceAlerts.length },\r\n          success: true,\r\n          message: `An√°lisis forzado completado: ${forceAlerts.length} alertas generadas`\r\n        };\r\n        return NextResponse.json(forceResponse);\r\n\r\n        default:\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Acci√≥n no v√°lida: ${action}`\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n      }\r\n      } catch (error) {\r\n        // Log del error de seguridad\r\n        securityLogger.logApiError(securityLogger.context, error as Error, {\r\n          endpoint: '/api/auth/security',\r\n          method: 'POST',\r\n          action: request.url\r\n        });\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Error interno del servidor'\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","auth","securityLogger","createSecurityLogger","logApiAccess","context","url","URL","action","searchParams","get","userId","severity","enterpriseResult","withTimeout","requireAdminAuth","ENDPOINT_TIMEOUTS","success","logPermissionDenied","errorResponse","data","error","enterprise","code","NextResponse","json","status","legacyResult","getAuthenticatedUser","console","log","legacy","isAdmin","agree","metrics","withCache","getSecurityMetrics","metricsResponse","cache","getCacheStats","user","role","permissions","message","alerts","getActiveSecurityAlerts","undefined","alertsResponse","count","length","filtered_by_user","filtered_by_severity","requester","timeWindow","parseInt","analysisAlerts","analyzeSecurityPatterns","analysisResponse","healthCheck","runSecurityHealthCheck","healthResponse","startDateStr","endDateStr","startDate","Date","endDate","isNaN","getTime","report","generateSecurityReport","reportResponse","exportStartStr","exportEndStr","format","exportStart","exportEnd","exportData","exportSecurityEvents","headers","Headers","set","Response","logApiError","endpoint","method","admin","body","alertId","notes","assignedTo","authResult","updateResult","updateSecurityAlert","assigned_to","resolution_notes","updateResponse","resolveResult","resolveSecurityAlert","resolveResponse","fpResult","markAlertAsFalsePositive","fpResponse","daysToKeep","cleanupCount","cleanupOldSecurityEvents","cleanupResponse","deletedCount","forceUserId","forceTimeWindow","forceAlerts","forceResponse"],"mappings":"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"}