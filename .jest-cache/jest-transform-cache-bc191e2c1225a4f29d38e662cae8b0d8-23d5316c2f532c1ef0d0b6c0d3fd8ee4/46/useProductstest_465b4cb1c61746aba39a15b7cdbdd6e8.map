{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useProducts.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TEST useProducts HOOK\r\n// ===================================\r\n\r\nimport { renderHook, waitFor, act } from '@testing-library/react'\r\nimport { useProducts } from '@/hooks/useProducts'\r\n\r\n// Mock data\r\nconst mockProductsResponse = {\r\n  success: true,\r\n  data: [\r\n    {\r\n      id: 1,\r\n      name: 'Test Product 1',\r\n      slug: 'test-product-1',\r\n      description: 'Test description',\r\n      price: 1000,\r\n      discounted_price: 900,\r\n      stock: 10,\r\n      category_id: 1,\r\n      images: { previews: ['/test1.jpg'] },\r\n      category: { id: 1, name: 'Test Category', slug: 'test-category' },\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Test Product 2',\r\n      slug: 'test-product-2',\r\n      description: 'Test description 2',\r\n      price: 2000,\r\n      discounted_price: null,\r\n      stock: 5,\r\n      category_id: 2,\r\n      images: { previews: ['/test2.jpg'] },\r\n      category: { id: 2, name: 'Test Category 2', slug: 'test-category-2' },\r\n    },\r\n  ],\r\n  pagination: {\r\n    page: 1,\r\n    limit: 12,\r\n    total: 2,\r\n    totalPages: 1,\r\n  },\r\n}\r\n\r\nconst mockCategoriesResponse = {\r\n  success: true,\r\n  data: [\r\n    { id: 1, name: 'Test Category', slug: 'test-category' },\r\n    { id: 2, name: 'Test Category 2', slug: 'test-category-2' },\r\n  ],\r\n}\r\n\r\n// Mock fetch\r\nconst mockFetch = jest.fn()\r\nglobal.fetch = mockFetch\r\n\r\n// Helper function to create complete mock response\r\nconst createMockResponse = (data: any, options: { ok?: boolean; status?: number; statusText?: string } = {}) => ({\r\n  ok: options.ok ?? true,\r\n  status: options.status ?? 200,\r\n  statusText: options.statusText ?? 'OK',\r\n  json: async () => data,\r\n  text: async () => JSON.stringify(data),\r\n  headers: new Headers(),\r\n  url: 'http://localhost:3000/api/products',\r\n  clone: jest.fn(),\r\n})\r\n\r\ndescribe('useProducts Hook', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    mockFetch.mockResolvedValue(createMockResponse(mockProductsResponse))\r\n  })\r\n\r\n  it('fetches products on mount', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    // Initially loading should be true\r\n    expect(result.current.loading).toBe(true)\r\n    expect(result.current.products).toEqual([])\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Should have fetched products - the hook may not include default parameters\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringContaining('/api/products'),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n    expect(result.current.products).toHaveLength(2)\r\n    // Products are adapted, so we check the adapted structure\r\n    expect(result.current.products[0]).toBeDefined()\r\n  })\r\n\r\n  it('fetches products successfully', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Should have fetched products\r\n    expect(mockFetch).toHaveBeenCalled()\r\n    expect(result.current.products).toHaveLength(2)\r\n    expect(result.current.hasError).toBe(false)\r\n  })\r\n\r\n  it('handles search functionality', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock search response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse({\r\n      ...mockProductsResponse,\r\n      data: [mockProductsResponse.data[0]], // Only first product\r\n    }))\r\n\r\n    // Perform search\r\n    await act(async () => {\r\n      await result.current.searchProducts('Test Product 1')\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringContaining('/api/products'),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n  })\r\n\r\n  it('handles category filtering', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock category filter response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse({\r\n      ...mockProductsResponse,\r\n      data: [mockProductsResponse.data[0]], // Only first product\r\n    }))\r\n\r\n    // Filter by category\r\n    await act(async () => {\r\n      await result.current.filterByCategory('1')\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringMatching(/\\/api\\/products\\?.*category=1/),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n  })\r\n\r\n  it('handles pagination', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock page 2 response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse({\r\n      ...mockProductsResponse,\r\n      pagination: { ...mockProductsResponse.pagination, page: 2 },\r\n    }))\r\n\r\n    // Go to page 2\r\n    await act(async () => {\r\n      await result.current.fetchProducts({ page: 2 })\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringMatching(/\\/api\\/products\\?.*page=2/),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n    expect(result.current.pagination.page).toBe(2)\r\n  })\r\n\r\n  it('handles price range filtering', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock price filter response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse(mockProductsResponse))\r\n\r\n    // Filter by price range\r\n    await act(async () => {\r\n      await result.current.fetchProducts({ priceMin: 500, priceMax: 1500 })\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringMatching(/\\/api\\/products\\?.*priceMin=500.*priceMax=1500/),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n  })\r\n\r\n  it('handles sorting', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock sort response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse(mockProductsResponse))\r\n\r\n    // Sort by price ascending\r\n    await act(async () => {\r\n      await result.current.fetchProducts({ sortBy: 'price', sortOrder: 'asc' })\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringMatching(/\\/api\\/products\\?.*sortBy=price.*sortOrder=asc/),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n  })\r\n\r\n  it('handles API errors gracefully', async () => {\r\n    mockFetch.mockRejectedValueOnce(new Error('API Error'))\r\n\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // getProducts() captura el error y devuelve un objeto con success: false\r\n    // El hook useProducts entonces establece el mensaje genérico\r\n    expect(result.current.error).toBe('Error obteniendo productos')\r\n    expect(result.current.products).toEqual([])\r\n  })\r\n\r\n  it('handles HTTP error responses', async () => {\r\n    mockFetch.mockResolvedValueOnce(createMockResponse(\r\n      { error: 'Server Error' },\r\n      { ok: false, status: 500, statusText: 'Internal Server Error' }\r\n    ))\r\n\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // getProducts() usa safeApiResponseJson() que detecta !response.ok\r\n    // y devuelve un objeto con success: false y message con detalles del error\r\n    // El hook useProducts entonces establece el mensaje genérico\r\n    expect(result.current.error).toBe('Error obteniendo productos')\r\n    expect(result.current.products).toEqual([])\r\n  })\r\n\r\n  it('clears filters correctly', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Apply some filters first\r\n    await act(async () => {\r\n      await result.current.searchProducts('test')\r\n    })\r\n\r\n    await act(async () => {\r\n      await result.current.filterByCategory('1')\r\n    })\r\n\r\n    // Clear previous calls\r\n    mockFetch.mockClear()\r\n\r\n    // Mock reset response\r\n    mockFetch.mockResolvedValueOnce(createMockResponse(mockProductsResponse))\r\n\r\n    // Clear filters\r\n    await act(async () => {\r\n      await result.current.clearFilters()\r\n    })\r\n\r\n    expect(mockFetch).toHaveBeenCalledWith(\r\n      expect.stringMatching(/\\/api\\/products\\?.*page=1/),\r\n      expect.objectContaining({\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      })\r\n    )\r\n  })\r\n\r\n  it('maintains loading state during requests', async () => {\r\n    const { result } = renderHook(() => useProducts())\r\n\r\n    // Initial loading\r\n    expect(result.current.loading).toBe(true)\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n\r\n    // Mock slow response\r\n    let resolvePromise: (value: any) => void\r\n    const slowPromise = new Promise(resolve => {\r\n      resolvePromise = resolve\r\n    })\r\n\r\n    mockFetch.mockReturnValueOnce(slowPromise)\r\n\r\n    // Start new request\r\n    act(() => {\r\n      result.current.searchProducts('test')\r\n    })\r\n\r\n    // Should be loading again\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(true)\r\n    })\r\n\r\n    // Resolve the promise\r\n    resolvePromise!({\r\n      ok: true,\r\n      json: async () => mockProductsResponse,\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockProductsResponse","success","data","id","name","slug","description","price","discounted_price","stock","category_id","images","previews","category","pagination","page","limit","total","totalPages","mockCategoriesResponse","mockFetch","jest","fn","global","fetch","createMockResponse","options","ok","status","statusText","json","text","JSON","stringify","headers","Headers","url","clone","describe","beforeEach","clearAllMocks","mockResolvedValue","it","result","renderHook","useProducts","expect","current","loading","toBe","products","toEqual","waitFor","toHaveBeenCalledWith","stringContaining","objectContaining","method","toHaveLength","toBeDefined","toHaveBeenCalled","hasError","mockClear","mockResolvedValueOnce","act","searchProducts","filterByCategory","stringMatching","fetchProducts","priceMin","priceMax","sortBy","sortOrder","mockRejectedValueOnce","Error","error","clearFilters","resolvePromise","slowPromise","Promise","resolve","mockReturnValueOnce"],"mappings":"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"}