{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\OrderListEnterprise-circular-deps.test.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CIRCULAR DEPENDENCIES TEST\r\n// Pruebas específicas para verificar que no hay dependencias circulares\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\nconst mockFetch = jest.fn();\r\nglobal.fetch = mockFetch;\r\n\r\nconst mockToast = jest.fn();\r\njest.mock('@/hooks/use-toast', () => ({\r\n  useToast: () => ({ toast: mockToast })\r\n}));\r\n\r\n// Mock de performance para monitoreo\r\nconst mockPerformanceNow = jest.fn();\r\nObject.defineProperty(global, 'performance', {\r\n  value: { now: mockPerformanceNow },\r\n  writable: true\r\n});\r\n\r\n// Mock de console para capturar renders excesivos\r\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\n// Datos de prueba\r\nconst mockOrder = {\r\n  id: 'order-123',\r\n  order_number: 'ORD-2024-001',\r\n  status: 'pending',\r\n  payment_status: 'pending',\r\n  fulfillment_status: 'pending',\r\n  total_amount: 15000,\r\n  created_at: '2024-01-01T10:00:00Z',\r\n  updated_at: '2024-01-01T10:00:00Z',\r\n  customer_id: 'customer-123',\r\n  customer_name: 'Juan Pérez',\r\n  customer_email: 'juan@example.com'\r\n};\r\n\r\nconst mockApiResponse = {\r\n  success: true,\r\n  data: {\r\n    orders: [mockOrder],\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: 1,\r\n      totalPages: 1,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false\r\n    },\r\n    analytics: {\r\n      total_orders: 1,\r\n      total_revenue: 15000,\r\n      pending_orders: 1,\r\n      completed_orders: 0\r\n    }\r\n  },\r\n  message: 'Orders retrieved successfully',\r\n  timestamp: new Date().toISOString()\r\n};\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockPerformanceNow.mockReturnValue(1000);\r\n  \r\n  mockFetch.mockResolvedValue({\r\n    ok: true,\r\n    status: 200,\r\n    json: async () => mockApiResponse\r\n  });\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS DE DEPENDENCIAS CIRCULARES\r\n// ===================================\r\n\r\ndescribe('OrderListEnterprise - Circular Dependencies', () => {\r\n  it('no debe tener renders infinitos al cambiar filtros', async () => {\r\n    jest.useFakeTimers();\r\n    \r\n    // Contador de renders\r\n    let renderCount = 0;\r\n    const TestWrapper = () => {\r\n      renderCount++;\r\n      return <OrderListEnterprise />;\r\n    };\r\n\r\n    render(<TestWrapper />);\r\n\r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n    });\r\n\r\n    const initialRenderCount = renderCount;\r\n\r\n    // Cambiar filtro de estado\r\n    const statusFilter = screen.getByDisplayValue('all');\r\n    \r\n    act(() => {\r\n      fireEvent.change(statusFilter, { target: { value: 'pending' } });\r\n    });\r\n\r\n    // Avanzar timers para que se ejecute el debouncing\r\n    act(() => {\r\n      jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    // Esperar que se complete la petición\r\n    await waitFor(() => {\r\n      expect(mockFetch).toHaveBeenCalledTimes(2); // Initial + filter change\r\n    });\r\n\r\n    // Verificar que no hay renders excesivos\r\n    const finalRenderCount = renderCount;\r\n    const renderDifference = finalRenderCount - initialRenderCount;\r\n    \r\n    // Permitir algunos renders normales (cambio de filtro + loading + resultado)\r\n    // pero no más de 10 renders por cambio de filtro\r\n    expect(renderDifference).toBeLessThan(10);\r\n\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('no debe hacer peticiones duplicadas al cambiar filtros rápidamente', async () => {\r\n    jest.useFakeTimers();\r\n\r\n    render(<OrderListEnterprise />);\r\n\r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n    });\r\n\r\n    const initialCallCount = mockFetch.mock.calls.length;\r\n\r\n    // Cambiar filtros múltiples veces rápidamente\r\n    const statusFilter = screen.getByDisplayValue('all');\r\n    \r\n    act(() => {\r\n      fireEvent.change(statusFilter, { target: { value: 'pending' } });\r\n      fireEvent.change(statusFilter, { target: { value: 'confirmed' } });\r\n      fireEvent.change(statusFilter, { target: { value: 'shipped' } });\r\n    });\r\n\r\n    // Avanzar timers para que se ejecute el debouncing\r\n    act(() => {\r\n      jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    // Esperar que se complete la petición\r\n    await waitFor(() => {\r\n      expect(mockFetch.mock.calls.length).toBeGreaterThan(initialCallCount);\r\n    });\r\n\r\n    // Verificar que solo se hizo una petición adicional (debouncing funcionando)\r\n    const finalCallCount = mockFetch.mock.calls.length;\r\n    const callDifference = finalCallCount - initialCallCount;\r\n    \r\n    // Debería ser solo 1 petición adicional debido al debouncing\r\n    expect(callDifference).toBeLessThanOrEqual(2);\r\n\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('no debe tener memory leaks en cambios de filtros', async () => {\r\n    jest.useFakeTimers();\r\n\r\n    const { unmount } = render(<OrderListEnterprise />);\r\n\r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n    });\r\n\r\n    // Cambiar filtros varias veces\r\n    const statusFilter = screen.getByDisplayValue('all');\r\n    \r\n    for (let i = 0; i < 5; i++) {\r\n      act(() => {\r\n        fireEvent.change(statusFilter, { target: { value: i % 2 === 0 ? 'pending' : 'confirmed' } });\r\n      });\r\n      \r\n      act(() => {\r\n        jest.advanceTimersByTime(100);\r\n      });\r\n    }\r\n\r\n    // Avanzar timers finales\r\n    act(() => {\r\n      jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    // Desmontar componente\r\n    unmount();\r\n\r\n    // Verificar que no hay warnings de memory leaks\r\n    expect(mockConsoleWarn).not.toHaveBeenCalledWith(\r\n      expect.stringContaining('memory leak')\r\n    );\r\n\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('debe manejar correctamente el cleanup de timers', async () => {\r\n    jest.useFakeTimers();\r\n\r\n    const { unmount } = render(<OrderListEnterprise />);\r\n\r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n    });\r\n\r\n    // Cambiar filtro para activar debouncing\r\n    const statusFilter = screen.getByDisplayValue('all');\r\n    \r\n    act(() => {\r\n      fireEvent.change(statusFilter, { target: { value: 'pending' } });\r\n    });\r\n\r\n    // Desmontar antes de que se complete el debouncing\r\n    unmount();\r\n\r\n    // Avanzar timers después del desmontaje\r\n    act(() => {\r\n      jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    // No debería haber errores o warnings sobre timers no limpiados\r\n    expect(mockConsoleWarn).not.toHaveBeenCalledWith(\r\n      expect.stringContaining('timer')\r\n    );\r\n\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('debe mantener performance estable con múltiples cambios de filtros', async () => {\r\n    jest.useFakeTimers();\r\n\r\n    render(<OrderListEnterprise />);\r\n\r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n    });\r\n\r\n    const startTime = performance.now();\r\n\r\n    // Simular múltiples cambios de filtros\r\n    const statusFilter = screen.getByDisplayValue('all');\r\n    \r\n    for (let i = 0; i < 10; i++) {\r\n      act(() => {\r\n        fireEvent.change(statusFilter, { \r\n          target: { value: ['pending', 'confirmed', 'shipped'][i % 3] } \r\n        });\r\n      });\r\n      \r\n      act(() => {\r\n        jest.advanceTimersByTime(50);\r\n      });\r\n    }\r\n\r\n    // Avanzar timers finales\r\n    act(() => {\r\n      jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    const endTime = performance.now();\r\n    const duration = endTime - startTime;\r\n\r\n    // La operación no debería tomar más de 1 segundo (muy generoso)\r\n    expect(duration).toBeLessThan(1000);\r\n\r\n    jest.useRealTimers();\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockFetch","jest","fn","global","fetch","mockToast","mock","useToast","toast","mockPerformanceNow","Object","defineProperty","value","now","writable","mockConsoleWarn","spyOn","console","mockImplementation","mockConsoleLog","mockOrder","id","order_number","status","payment_status","fulfillment_status","total_amount","created_at","updated_at","customer_id","customer_name","customer_email","mockApiResponse","success","data","orders","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","analytics","total_orders","total_revenue","pending_orders","completed_orders","message","timestamp","Date","toISOString","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","json","afterEach","clearAllTimers","describe","it","useFakeTimers","renderCount","TestWrapper","OrderListEnterprise","render","waitFor","expect","screen","getByText","toBeInTheDocument","initialRenderCount","statusFilter","getByDisplayValue","act","fireEvent","change","target","advanceTimersByTime","toHaveBeenCalledTimes","finalRenderCount","renderDifference","toBeLessThan","useRealTimers","initialCallCount","calls","length","toBeGreaterThan","finalCallCount","callDifference","toBeLessThanOrEqual","unmount","i","not","toHaveBeenCalledWith","stringContaining","startTime","performance","endTime","duration"],"mappings":"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"}