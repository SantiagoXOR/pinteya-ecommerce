{"version":3,"names":["EnhancedSEOTestingSuite","cov_2858gpquh0","f","s","SEOTestingSuite","enhancedSEOTestingSuite","DEFAULT_SEO_TESTING_CONFIG","enableMetadataTests","enableStructuredDataTests","enableRobotsTxtTests","enableInternalLinksTests","enableComplianceTests","enablePerformanceTests","testTimeout","maxConcurrentTests","retryAttempts","thresholds","titleMinLength","titleMaxLength","descriptionMinLength","descriptionMaxLength","maxInternalLinksPerPage","minInternalLinksPerPage","maxPageLoadTime","minSEOScore","testUrls","excludePatterns","cacheEnabled","cacheTTL","enableDetailedReports","enableScreenshots","reportFormat","constructor","config","cache","Map","activeTestSuites","testHistory","initializeRedis","_logger","logger","info","LogLevel","INFO","enabledTests","metadata","structuredData","robotsTxt","internalLinks","compliance","performance","length","maxConcurrent","LogCategory","SEO","getInstance","instance","b","redis","_redis","getRedisClient","error","warn","WARN","runFullTestSuite","urls","suiteId","Date","now","Math","random","toString","substr","urlsCount","testSuite","suiteName","description","tests","summary","totalTests","passed","failed","warnings","skipped","overallScore","executionTime","coverage","metadataTests","structuredDataTests","robotsTxtTests","internalLinksTests","complianceTests","performanceTests","startTime","endTime","status","set","testPromises","map","url","runTestsForUrl","urlResults","executeWithConcurrencyLimit","flat","calculateSummary","calculateCoverage","getTime","push","delete","setCachedData","_seoanalyticsmanager","enhancedSEOAnalyticsManager","trackSEOMetrics","testingSuite","timestamp","ERROR","failedSuite","get","results","runMetadataTests","runStructuredDataTests","robotsTests","runRobotsTxtTests","linksTests","runInternalLinksTests","runComplianceTests","runPerformanceTests","testId","testName","testType","score","details","actualValue","Error","message","impact","category","suggestions","_dynamicseomanager","dynamicSEOManager","generateSEOMetadata","analysis","analyzeSEO","validateTitle","title","calculateTitleScore","expectedValue","getTitleSuggestions","validateDescription","calculateDescriptionScore","getDescriptionSuggestions","validateKeywords","keywords","calculateKeywordsScore","getKeywordsSuggestions","validateOpenGraph","calculateOpenGraphScore","getOpenGraphStatus","getOpenGraphSuggestions","hasValidSchema","schemaTypes","detectedSchemas","filter","includes","hasProductSchema","robotsTxtExists","hasValidSyntax","hasSitemapReference","blocksImportantPages","totalLinks","floor","externalLinks","brokenLinks","noFollowLinks","linksInRange","max","descriptiveAnchors","genericAnchors","round","hasProperHierarchy","hasHttps","startsWith","isMobileFriendly","accessibilityScore","loadTime","isLoadTimeFast","lcp","fid","cls","toFixed","seoScore","optimal","deviation","abs","count","hasOgTitle","ogTitle","hasOgDescription","ogDescription","hasOgImage","ogImage","ogUrl","tags","join","promises","limit","executing","promise","execute","then","result","Promise","race","splice","findIndex","p","all","t","totalScore","reduce","sum","test","totalExecutionTime","getCachedData","key","cached","JSON","parse","data","setex","stringify","runTestsByType","testsRun","getTestHistory","history","reverse","slice","getActiveTestSuites","Array","from","values","getTestingStats","allTests","flatMap","suite","totalTestsRun","averageScore","testsByType","acc","mostCommonIssues","cacheHitRate","size","configure","updatedKeys","Object","keys","clearCache","del","clear","destroy"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-testing-suite.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENHANCED SEO TESTING SUITE\r\n// Suite comprehensiva de tests automatizados para SEO con validación de metadata,\r\n// structured data, robots.txt, enlaces internos y compliance general\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { getRedisClient } from '@/lib/integrations/redis';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { enhancedSEOAnalyticsManager } from '@/lib/seo/seo-analytics-manager';\r\nimport { dynamicSEOManager } from '@/lib/seo/dynamic-seo-manager';\r\nimport { advancedSchemaMarkup } from '@/lib/seo/advanced-schema-markup';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS PRINCIPALES\r\n// ===================================\r\n\r\nexport interface SEOTestingConfig {\r\n  enableMetadataTests: boolean;\r\n  enableStructuredDataTests: boolean;\r\n  enableRobotsTxtTests: boolean;\r\n  enableInternalLinksTests: boolean;\r\n  enableComplianceTests: boolean;\r\n  enablePerformanceTests: boolean;\r\n  \r\n  // Configuración de tests\r\n  testTimeout: number; // segundos\r\n  maxConcurrentTests: number;\r\n  retryAttempts: number;\r\n  \r\n  // Umbrales de validación\r\n  thresholds: {\r\n    titleMinLength: number;\r\n    titleMaxLength: number;\r\n    descriptionMinLength: number;\r\n    descriptionMaxLength: number;\r\n    maxInternalLinksPerPage: number;\r\n    minInternalLinksPerPage: number;\r\n    maxPageLoadTime: number;\r\n    minSEOScore: number;\r\n  };\r\n  \r\n  // URLs a testear\r\n  testUrls: string[];\r\n  excludePatterns: string[];\r\n  \r\n  // Configuración de cache\r\n  cacheEnabled: boolean;\r\n  cacheTTL: number;\r\n  \r\n  // Configuración de reportes\r\n  enableDetailedReports: boolean;\r\n  enableScreenshots: boolean;\r\n  reportFormat: 'json' | 'html' | 'pdf';\r\n}\r\n\r\nexport interface SEOTestResult {\r\n  testId: string;\r\n  testName: string;\r\n  testType: 'metadata' | 'structured_data' | 'robots_txt' | 'internal_links' | 'compliance' | 'performance';\r\n  url: string;\r\n  status: 'passed' | 'failed' | 'warning' | 'skipped';\r\n  score: number;\r\n  \r\n  details: {\r\n    description: string;\r\n    expectedValue?: any;\r\n    actualValue?: any;\r\n    impact: 'critical' | 'high' | 'medium' | 'low';\r\n    category: string;\r\n  };\r\n  \r\n  suggestions: string[];\r\n  executionTime: number;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface SEOTestSuite {\r\n  suiteId: string;\r\n  suiteName: string;\r\n  description: string;\r\n  tests: SEOTestResult[];\r\n  \r\n  summary: {\r\n    totalTests: number;\r\n    passed: number;\r\n    failed: number;\r\n    warnings: number;\r\n    skipped: number;\r\n    overallScore: number;\r\n    executionTime: number;\r\n  };\r\n  \r\n  coverage: {\r\n    metadataTests: number;\r\n    structuredDataTests: number;\r\n    robotsTxtTests: number;\r\n    internalLinksTests: number;\r\n    complianceTests: number;\r\n    performanceTests: number;\r\n  };\r\n  \r\n  startTime: Date;\r\n  endTime: Date;\r\n  status: 'running' | 'completed' | 'failed' | 'cancelled';\r\n}\r\n\r\nexport interface MetadataTestResult {\r\n  url: string;\r\n  title: {\r\n    exists: boolean;\r\n    length: number;\r\n    isUnique: boolean;\r\n    containsKeywords: boolean;\r\n    issues: string[];\r\n  };\r\n  description: {\r\n    exists: boolean;\r\n    length: number;\r\n    isUnique: boolean;\r\n    containsKeywords: boolean;\r\n    issues: string[];\r\n  };\r\n  keywords: {\r\n    exists: boolean;\r\n    count: number;\r\n    density: number;\r\n    issues: string[];\r\n  };\r\n  openGraph: {\r\n    hasOgTitle: boolean;\r\n    hasOgDescription: boolean;\r\n    hasOgImage: boolean;\r\n    hasOgUrl: boolean;\r\n    issues: string[];\r\n  };\r\n  twitter: {\r\n    hasTwitterCard: boolean;\r\n    hasTwitterTitle: boolean;\r\n    hasTwitterDescription: boolean;\r\n    hasTwitterImage: boolean;\r\n    issues: string[];\r\n  };\r\n  canonical: {\r\n    exists: boolean;\r\n    isValid: boolean;\r\n    issues: string[];\r\n  };\r\n  robots: {\r\n    exists: boolean;\r\n    isValid: boolean;\r\n    allowsIndexing: boolean;\r\n    issues: string[];\r\n  };\r\n}\r\n\r\nexport interface StructuredDataTestResult {\r\n  url: string;\r\n  schemas: Array<{\r\n    type: string;\r\n    isValid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n    data: any;\r\n  }>;\r\n  \r\n  coverage: {\r\n    hasOrganization: boolean;\r\n    hasWebSite: boolean;\r\n    hasWebPage: boolean;\r\n    hasBreadcrumb: boolean;\r\n    hasProduct: boolean;\r\n    hasReview: boolean;\r\n    hasFAQ: boolean;\r\n    hasArticle: boolean;\r\n  };\r\n  \r\n  validation: {\r\n    syntaxValid: boolean;\r\n    schemaValid: boolean;\r\n    googleValid: boolean;\r\n    issues: string[];\r\n  };\r\n}\r\n\r\nexport interface RobotsTxtTestResult {\r\n  exists: boolean;\r\n  isAccessible: boolean;\r\n  syntax: {\r\n    isValid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n  };\r\n  \r\n  directives: {\r\n    userAgents: string[];\r\n    disallowRules: string[];\r\n    allowRules: string[];\r\n    crawlDelay: number | null;\r\n    sitemapUrls: string[];\r\n  };\r\n  \r\n  analysis: {\r\n    blocksImportantPages: boolean;\r\n    allowsCriticalResources: boolean;\r\n    hasSitemapReference: boolean;\r\n    issues: string[];\r\n    suggestions: string[];\r\n  };\r\n}\r\n\r\nexport interface InternalLinksTestResult {\r\n  url: string;\r\n  links: {\r\n    total: number;\r\n    internal: number;\r\n    external: number;\r\n    broken: number;\r\n    noFollow: number;\r\n  };\r\n  \r\n  structure: {\r\n    depth: number;\r\n    hasProperHierarchy: boolean;\r\n    orphanedPages: string[];\r\n    circularReferences: string[];\r\n  };\r\n  \r\n  anchors: {\r\n    descriptive: number;\r\n    generic: number;\r\n    empty: number;\r\n    overOptimized: number;\r\n  };\r\n  \r\n  analysis: {\r\n    linkEquity: number;\r\n    crawlability: number;\r\n    userExperience: number;\r\n    issues: string[];\r\n    suggestions: string[];\r\n  };\r\n}\r\n\r\nexport interface ComplianceTestResult {\r\n  url: string;\r\n  accessibility: {\r\n    score: number;\r\n    hasAltText: boolean;\r\n    hasProperHeadings: boolean;\r\n    hasSkipLinks: boolean;\r\n    colorContrast: boolean;\r\n    issues: string[];\r\n  };\r\n  \r\n  mobile: {\r\n    isMobileFriendly: boolean;\r\n    hasViewportMeta: boolean;\r\n    touchTargetsOk: boolean;\r\n    textReadable: boolean;\r\n    issues: string[];\r\n  };\r\n  \r\n  security: {\r\n    hasHttps: boolean;\r\n    hasSecurityHeaders: boolean;\r\n    noMixedContent: boolean;\r\n    issues: string[];\r\n  };\r\n  \r\n  performance: {\r\n    loadTime: number;\r\n    firstContentfulPaint: number;\r\n    largestContentfulPaint: number;\r\n    cumulativeLayoutShift: number;\r\n    issues: string[];\r\n  };\r\n}\r\n\r\n// Configuración por defecto\r\nconst DEFAULT_SEO_TESTING_CONFIG: SEOTestingConfig = {\r\n  enableMetadataTests: true,\r\n  enableStructuredDataTests: true,\r\n  enableRobotsTxtTests: true,\r\n  enableInternalLinksTests: true,\r\n  enableComplianceTests: true,\r\n  enablePerformanceTests: true,\r\n  \r\n  testTimeout: 30, // 30 segundos\r\n  maxConcurrentTests: 5,\r\n  retryAttempts: 3,\r\n  \r\n  thresholds: {\r\n    titleMinLength: 30,\r\n    titleMaxLength: 60,\r\n    descriptionMinLength: 120,\r\n    descriptionMaxLength: 160,\r\n    maxInternalLinksPerPage: 100,\r\n    minInternalLinksPerPage: 3,\r\n    maxPageLoadTime: 3000, // 3 segundos\r\n    minSEOScore: 80\r\n  },\r\n  \r\n  testUrls: [\r\n    '/',\r\n    '/shop',\r\n    '/categories/pinturas',\r\n    '/products/pintura-interior',\r\n    '/about',\r\n    '/contact'\r\n  ],\r\n  \r\n  excludePatterns: [\r\n    '/admin',\r\n    '/api',\r\n    '/auth',\r\n    '/checkout',\r\n    '/cart',\r\n    '/_next',\r\n    '/test',\r\n    '/debug'\r\n  ],\r\n  \r\n  cacheEnabled: true,\r\n  cacheTTL: 1800, // 30 minutos\r\n  \r\n  enableDetailedReports: true,\r\n  enableScreenshots: false,\r\n  reportFormat: 'json'\r\n};\r\n\r\n// ===================================\r\n// ENHANCED SEO TESTING SUITE CLASS\r\n// ===================================\r\n\r\nexport class EnhancedSEOTestingSuite {\r\n  private static instance: EnhancedSEOTestingSuite;\r\n  private config: SEOTestingConfig;\r\n  private redis: any;\r\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\r\n  private activeTestSuites: Map<string, SEOTestSuite> = new Map();\r\n  private testHistory: SEOTestSuite[] = [];\r\n\r\n  private constructor(config?: Partial<SEOTestingConfig>) {\r\n    this.config = { ...DEFAULT_SEO_TESTING_CONFIG, ...config };\r\n    this.initializeRedis();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced SEO Testing Suite initialized', {\r\n      enabledTests: {\r\n        metadata: this.config.enableMetadataTests,\r\n        structuredData: this.config.enableStructuredDataTests,\r\n        robotsTxt: this.config.enableRobotsTxtTests,\r\n        internalLinks: this.config.enableInternalLinksTests,\r\n        compliance: this.config.enableComplianceTests,\r\n        performance: this.config.enablePerformanceTests\r\n      },\r\n      testUrls: this.config.testUrls.length,\r\n      maxConcurrent: this.config.maxConcurrentTests\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  public static getInstance(config?: Partial<SEOTestingConfig>): EnhancedSEOTestingSuite {\r\n    if (!EnhancedSEOTestingSuite.instance) {\r\n      EnhancedSEOTestingSuite.instance = new EnhancedSEOTestingSuite(config);\r\n    }\r\n    return EnhancedSEOTestingSuite.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      this.redis = await getRedisClient();\r\n      logger.info(LogLevel.INFO, 'Redis initialized for SEO testing suite', {}, LogCategory.SEO);\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Redis not available for SEO testing suite', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS PRINCIPALES DE TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar suite completa de tests SEO\r\n   */\r\n  public async runFullTestSuite(urls?: string[]): Promise<SEOTestSuite> {\r\n    const suiteId = `suite_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const testUrls = urls || this.config.testUrls;\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting full SEO test suite', {\r\n        suiteId,\r\n        urlsCount: testUrls.length\r\n      }, LogCategory.SEO);\r\n\r\n      const testSuite: SEOTestSuite = {\r\n        suiteId,\r\n        suiteName: 'Full SEO Test Suite',\r\n        description: 'Comprehensive SEO testing including metadata, structured data, robots.txt, internal links, and compliance',\r\n        tests: [],\r\n        summary: {\r\n          totalTests: 0,\r\n          passed: 0,\r\n          failed: 0,\r\n          warnings: 0,\r\n          skipped: 0,\r\n          overallScore: 0,\r\n          executionTime: 0\r\n        },\r\n        coverage: {\r\n          metadataTests: 0,\r\n          structuredDataTests: 0,\r\n          robotsTxtTests: 0,\r\n          internalLinksTests: 0,\r\n          complianceTests: 0,\r\n          performanceTests: 0\r\n        },\r\n        startTime: new Date(),\r\n        endTime: new Date(),\r\n        status: 'running'\r\n      };\r\n\r\n      this.activeTestSuites.set(suiteId, testSuite);\r\n\r\n      // Ejecutar tests en paralelo con límite de concurrencia\r\n      const testPromises = testUrls.map(url => this.runTestsForUrl(url));\r\n      const urlResults = await this.executeWithConcurrencyLimit(testPromises, this.config.maxConcurrentTests);\r\n\r\n      // Consolidar resultados\r\n      testSuite.tests = urlResults.flat();\r\n      testSuite.summary = this.calculateSummary(testSuite.tests);\r\n      testSuite.coverage = this.calculateCoverage(testSuite.tests);\r\n      testSuite.endTime = new Date();\r\n      testSuite.summary.executionTime = testSuite.endTime.getTime() - testSuite.startTime.getTime();\r\n      testSuite.status = 'completed';\r\n\r\n      // Guardar en historial\r\n      this.testHistory.push(testSuite);\r\n      this.activeTestSuites.delete(suiteId);\r\n\r\n      // Cachear resultados\r\n      await this.setCachedData(`test_suite:${suiteId}`, testSuite);\r\n\r\n      // Integrar con SEO Analytics\r\n      enhancedSEOAnalyticsManager.trackSEOMetrics({\r\n        testingSuite: {\r\n          suiteId,\r\n          totalTests: testSuite.summary.totalTests,\r\n          overallScore: testSuite.summary.overallScore,\r\n          executionTime: testSuite.summary.executionTime,\r\n          timestamp: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'SEO test suite completed', {\r\n        suiteId,\r\n        totalTests: testSuite.summary.totalTests,\r\n        overallScore: testSuite.summary.overallScore,\r\n        executionTime: testSuite.summary.executionTime\r\n      }, LogCategory.SEO);\r\n\r\n      return testSuite;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run SEO test suite', error as Error, LogCategory.SEO);\r\n\r\n      const failedSuite = this.activeTestSuites.get(suiteId);\r\n      if (failedSuite) {\r\n        failedSuite.status = 'failed';\r\n        failedSuite.endTime = new Date();\r\n        this.activeTestSuites.delete(suiteId);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests para una URL específica\r\n   */\r\n  private async runTestsForUrl(url: string): Promise<SEOTestResult[]> {\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Tests de metadata\r\n      if (this.config.enableMetadataTests) {\r\n        const metadataTests = await this.runMetadataTests(url);\r\n        results.push(...metadataTests);\r\n      }\r\n\r\n      // Tests de structured data\r\n      if (this.config.enableStructuredDataTests) {\r\n        const structuredDataTests = await this.runStructuredDataTests(url);\r\n        results.push(...structuredDataTests);\r\n      }\r\n\r\n      // Tests de robots.txt (solo para la homepage)\r\n      if (this.config.enableRobotsTxtTests && (url === '/' || url === '')) {\r\n        const robotsTests = await this.runRobotsTxtTests();\r\n        results.push(...robotsTests);\r\n      }\r\n\r\n      // Tests de enlaces internos\r\n      if (this.config.enableInternalLinksTests) {\r\n        const linksTests = await this.runInternalLinksTests(url);\r\n        results.push(...linksTests);\r\n      }\r\n\r\n      // Tests de compliance\r\n      if (this.config.enableComplianceTests) {\r\n        const complianceTests = await this.runComplianceTests(url);\r\n        results.push(...complianceTests);\r\n      }\r\n\r\n      // Tests de performance\r\n      if (this.config.enablePerformanceTests) {\r\n        const performanceTests = await this.runPerformanceTests(url);\r\n        results.push(...performanceTests);\r\n      }\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run tests for URL', error as Error, LogCategory.SEO);\r\n\r\n      // Crear test de error\r\n      results.push({\r\n        testId: `error_${Date.now()}`,\r\n        testName: 'URL Test Execution',\r\n        testType: 'compliance',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to execute tests for this URL',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'execution'\r\n        },\r\n        suggestions: ['Check URL accessibility', 'Verify server response', 'Review error logs'],\r\n        executionTime: 0,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de metadata\r\n   */\r\n  private async runMetadataTests(url: string): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Obtener metadata usando Dynamic SEO Manager\r\n      const metadata = await dynamicSEOManager.generateSEOMetadata(url, 'page');\r\n      const analysis = await dynamicSEOManager.analyzeSEO(metadata);\r\n\r\n      // Test de título\r\n      results.push({\r\n        testId: `metadata_title_${Date.now()}`,\r\n        testName: 'Title Tag Validation',\r\n        testType: 'metadata',\r\n        url,\r\n        status: this.validateTitle(metadata.title),\r\n        score: this.calculateTitleScore(metadata.title),\r\n        details: {\r\n          description: 'Validates title tag length, uniqueness, and keyword optimization',\r\n          expectedValue: `${this.config.thresholds.titleMinLength}-${this.config.thresholds.titleMaxLength} characters`,\r\n          actualValue: `${metadata.title?.length || 0} characters`,\r\n          impact: 'high',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: this.getTitleSuggestions(metadata.title),\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de descripción\r\n      results.push({\r\n        testId: `metadata_description_${Date.now()}`,\r\n        testName: 'Meta Description Validation',\r\n        testType: 'metadata',\r\n        url,\r\n        status: this.validateDescription(metadata.description),\r\n        score: this.calculateDescriptionScore(metadata.description),\r\n        details: {\r\n          description: 'Validates meta description length and content quality',\r\n          expectedValue: `${this.config.thresholds.descriptionMinLength}-${this.config.thresholds.descriptionMaxLength} characters`,\r\n          actualValue: `${metadata.description?.length || 0} characters`,\r\n          impact: 'high',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: this.getDescriptionSuggestions(metadata.description),\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de keywords\r\n      results.push({\r\n        testId: `metadata_keywords_${Date.now()}`,\r\n        testName: 'Keywords Optimization',\r\n        testType: 'metadata',\r\n        url,\r\n        status: this.validateKeywords(metadata.keywords),\r\n        score: this.calculateKeywordsScore(metadata.keywords),\r\n        details: {\r\n          description: 'Validates keyword presence and optimization',\r\n          expectedValue: '3-5 relevant keywords',\r\n          actualValue: `${metadata.keywords?.length || 0} keywords`,\r\n          impact: 'medium',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: this.getKeywordsSuggestions(metadata.keywords),\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de Open Graph\r\n      results.push({\r\n        testId: `metadata_og_${Date.now()}`,\r\n        testName: 'Open Graph Validation',\r\n        testType: 'metadata',\r\n        url,\r\n        status: this.validateOpenGraph(metadata),\r\n        score: this.calculateOpenGraphScore(metadata),\r\n        details: {\r\n          description: 'Validates Open Graph meta tags for social sharing',\r\n          expectedValue: 'og:title, og:description, og:image, og:url',\r\n          actualValue: this.getOpenGraphStatus(metadata),\r\n          impact: 'medium',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: this.getOpenGraphSuggestions(metadata),\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run metadata tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `metadata_error_${Date.now()}`,\r\n        testName: 'Metadata Tests',\r\n        testType: 'metadata',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze metadata',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'metadata'\r\n        },\r\n        suggestions: ['Check URL accessibility', 'Verify metadata generation'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de structured data\r\n   */\r\n  private async runStructuredDataTests(url: string): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Simular análisis de structured data (en producción se analizaría el HTML real)\r\n      const hasValidSchema = Math.random() > 0.2; // 80% de probabilidad de tener schema válido\r\n      const schemaTypes = ['Organization', 'WebSite', 'WebPage', 'Product', 'BreadcrumbList'];\r\n      const detectedSchemas = schemaTypes.filter(() => Math.random() > 0.4);\r\n\r\n      // Test de presencia de structured data\r\n      results.push({\r\n        testId: `schema_presence_${Date.now()}`,\r\n        testName: 'Structured Data Presence',\r\n        testType: 'structured_data',\r\n        url,\r\n        status: detectedSchemas.length > 0 ? 'passed' : 'failed',\r\n        score: detectedSchemas.length > 0 ? 85 : 0,\r\n        details: {\r\n          description: 'Validates presence of structured data markup',\r\n          expectedValue: 'At least one valid schema type',\r\n          actualValue: `${detectedSchemas.length} schema types detected`,\r\n          impact: 'high',\r\n          category: 'structured_data'\r\n        },\r\n        suggestions: detectedSchemas.length === 0\r\n          ? ['Add JSON-LD structured data', 'Implement Organization schema', 'Add WebPage schema']\r\n          : ['Consider adding more specific schemas', 'Validate existing schemas'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de validación de schema\r\n      results.push({\r\n        testId: `schema_validation_${Date.now()}`,\r\n        testName: 'Schema Validation',\r\n        testType: 'structured_data',\r\n        url,\r\n        status: hasValidSchema ? 'passed' : 'failed',\r\n        score: hasValidSchema ? 90 : 30,\r\n        details: {\r\n          description: 'Validates structured data syntax and compliance',\r\n          expectedValue: 'Valid JSON-LD syntax',\r\n          actualValue: hasValidSchema ? 'Valid' : 'Syntax errors detected',\r\n          impact: 'high',\r\n          category: 'structured_data'\r\n        },\r\n        suggestions: hasValidSchema\r\n          ? ['Schema is valid', 'Consider adding more properties']\r\n          : ['Fix JSON-LD syntax errors', 'Validate against Schema.org', 'Use Google Rich Results Test'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test específico para productos (si es página de producto)\r\n      if (url.includes('/products/')) {\r\n        const hasProductSchema = detectedSchemas.includes('Product');\r\n        results.push({\r\n          testId: `product_schema_${Date.now()}`,\r\n          testName: 'Product Schema Validation',\r\n          testType: 'structured_data',\r\n          url,\r\n          status: hasProductSchema ? 'passed' : 'failed',\r\n          score: hasProductSchema ? 95 : 0,\r\n          details: {\r\n            description: 'Validates Product schema for e-commerce pages',\r\n            expectedValue: 'Valid Product schema with price, availability, reviews',\r\n            actualValue: hasProductSchema ? 'Product schema present' : 'No Product schema found',\r\n            impact: 'critical',\r\n            category: 'structured_data'\r\n          },\r\n          suggestions: hasProductSchema\r\n            ? ['Product schema is present', 'Ensure all required properties are included']\r\n            : ['Add Product schema', 'Include price and availability', 'Add review aggregation'],\r\n          executionTime: Date.now() - startTime,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run structured data tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `schema_error_${Date.now()}`,\r\n        testName: 'Structured Data Tests',\r\n        testType: 'structured_data',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze structured data',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'structured_data'\r\n        },\r\n        suggestions: ['Check page accessibility', 'Verify structured data implementation'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de robots.txt\r\n   */\r\n  private async runRobotsTxtTests(): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Simular análisis de robots.txt\r\n      const robotsTxtExists = true; // En producción se verificaría la existencia real\r\n      const hasValidSyntax = Math.random() > 0.1; // 90% de probabilidad de sintaxis válida\r\n      const hasSitemapReference = Math.random() > 0.3; // 70% de probabilidad de referencia a sitemap\r\n\r\n      // Test de existencia de robots.txt\r\n      results.push({\r\n        testId: `robots_existence_${Date.now()}`,\r\n        testName: 'Robots.txt Existence',\r\n        testType: 'robots_txt',\r\n        url: '/robots.txt',\r\n        status: robotsTxtExists ? 'passed' : 'failed',\r\n        score: robotsTxtExists ? 100 : 0,\r\n        details: {\r\n          description: 'Validates presence of robots.txt file',\r\n          expectedValue: 'robots.txt file accessible at /robots.txt',\r\n          actualValue: robotsTxtExists ? 'File exists' : 'File not found',\r\n          impact: 'high',\r\n          category: 'robots_txt'\r\n        },\r\n        suggestions: robotsTxtExists\r\n          ? ['robots.txt file is present']\r\n          : ['Create robots.txt file', 'Add basic user-agent and disallow rules'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      if (robotsTxtExists) {\r\n        // Test de sintaxis válida\r\n        results.push({\r\n          testId: `robots_syntax_${Date.now()}`,\r\n          testName: 'Robots.txt Syntax Validation',\r\n          testType: 'robots_txt',\r\n          url: '/robots.txt',\r\n          status: hasValidSyntax ? 'passed' : 'failed',\r\n          score: hasValidSyntax ? 95 : 20,\r\n          details: {\r\n            description: 'Validates robots.txt syntax and directives',\r\n            expectedValue: 'Valid robots.txt syntax',\r\n            actualValue: hasValidSyntax ? 'Valid syntax' : 'Syntax errors detected',\r\n            impact: 'medium',\r\n            category: 'robots_txt'\r\n          },\r\n          suggestions: hasValidSyntax\r\n            ? ['Syntax is valid']\r\n            : ['Fix syntax errors', 'Validate directives', 'Check user-agent declarations'],\r\n          executionTime: Date.now() - startTime,\r\n          timestamp: new Date()\r\n        });\r\n\r\n        // Test de referencia a sitemap\r\n        results.push({\r\n          testId: `robots_sitemap_${Date.now()}`,\r\n          testName: 'Sitemap Reference in Robots.txt',\r\n          testType: 'robots_txt',\r\n          url: '/robots.txt',\r\n          status: hasSitemapReference ? 'passed' : 'warning',\r\n          score: hasSitemapReference ? 90 : 60,\r\n          details: {\r\n            description: 'Validates sitemap reference in robots.txt',\r\n            expectedValue: 'Sitemap URL declared in robots.txt',\r\n            actualValue: hasSitemapReference ? 'Sitemap reference found' : 'No sitemap reference',\r\n            impact: 'medium',\r\n            category: 'robots_txt'\r\n          },\r\n          suggestions: hasSitemapReference\r\n            ? ['Sitemap reference is present']\r\n            : ['Add sitemap reference to robots.txt', 'Ensure sitemap URL is accessible'],\r\n          executionTime: Date.now() - startTime,\r\n          timestamp: new Date()\r\n        });\r\n\r\n        // Test de bloqueo de páginas importantes\r\n        const blocksImportantPages = Math.random() > 0.8; // 20% de probabilidad de bloquear páginas importantes\r\n        results.push({\r\n          testId: `robots_blocking_${Date.now()}`,\r\n          testName: 'Important Pages Accessibility',\r\n          testType: 'robots_txt',\r\n          url: '/robots.txt',\r\n          status: blocksImportantPages ? 'failed' : 'passed',\r\n          score: blocksImportantPages ? 10 : 100,\r\n          details: {\r\n            description: 'Validates that important pages are not blocked',\r\n            expectedValue: 'Important pages accessible to crawlers',\r\n            actualValue: blocksImportantPages ? 'Important pages blocked' : 'Important pages accessible',\r\n            impact: blocksImportantPages ? 'critical' : 'low',\r\n            category: 'robots_txt'\r\n          },\r\n          suggestions: blocksImportantPages\r\n            ? ['Remove disallow rules for important pages', 'Review robots.txt directives', 'Test with Google Search Console']\r\n            : ['Important pages are accessible'],\r\n          executionTime: Date.now() - startTime,\r\n          timestamp: new Date()\r\n        });\r\n      }\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run robots.txt tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `robots_error_${Date.now()}`,\r\n        testName: 'Robots.txt Tests',\r\n        testType: 'robots_txt',\r\n        url: '/robots.txt',\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze robots.txt',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'robots_txt'\r\n        },\r\n        suggestions: ['Check robots.txt accessibility', 'Verify server configuration'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de enlaces internos\r\n   */\r\n  private async runInternalLinksTests(url: string): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Simular análisis de enlaces internos\r\n      const totalLinks = Math.floor(Math.random() * 50) + 10; // 10-60 enlaces\r\n      const internalLinks = Math.floor(totalLinks * 0.7); // 70% internos\r\n      const externalLinks = totalLinks - internalLinks;\r\n      const brokenLinks = Math.floor(Math.random() * 3); // 0-3 enlaces rotos\r\n      const noFollowLinks = Math.floor(externalLinks * 0.3); // 30% de externos son nofollow\r\n\r\n      // Test de cantidad de enlaces internos\r\n      const linksInRange = internalLinks >= this.config.thresholds.minInternalLinksPerPage &&\r\n                          internalLinks <= this.config.thresholds.maxInternalLinksPerPage;\r\n\r\n      results.push({\r\n        testId: `links_count_${Date.now()}`,\r\n        testName: 'Internal Links Count',\r\n        testType: 'internal_links',\r\n        url,\r\n        status: linksInRange ? 'passed' : 'warning',\r\n        score: linksInRange ? 90 : 60,\r\n        details: {\r\n          description: 'Validates optimal number of internal links',\r\n          expectedValue: `${this.config.thresholds.minInternalLinksPerPage}-${this.config.thresholds.maxInternalLinksPerPage} internal links`,\r\n          actualValue: `${internalLinks} internal links`,\r\n          impact: 'medium',\r\n          category: 'internal_links'\r\n        },\r\n        suggestions: internalLinks < this.config.thresholds.minInternalLinksPerPage\r\n          ? ['Add more internal links', 'Link to related content', 'Improve navigation']\r\n          : internalLinks > this.config.thresholds.maxInternalLinksPerPage\r\n          ? ['Reduce number of links', 'Focus on most important links', 'Use pagination if needed']\r\n          : ['Internal links count is optimal'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de enlaces rotos\r\n      results.push({\r\n        testId: `links_broken_${Date.now()}`,\r\n        testName: 'Broken Links Detection',\r\n        testType: 'internal_links',\r\n        url,\r\n        status: brokenLinks === 0 ? 'passed' : 'failed',\r\n        score: brokenLinks === 0 ? 100 : Math.max(0, 100 - (brokenLinks * 25)),\r\n        details: {\r\n          description: 'Detects broken internal and external links',\r\n          expectedValue: '0 broken links',\r\n          actualValue: `${brokenLinks} broken links`,\r\n          impact: brokenLinks > 0 ? 'high' : 'low',\r\n          category: 'internal_links'\r\n        },\r\n        suggestions: brokenLinks === 0\r\n          ? ['No broken links detected']\r\n          : ['Fix broken links', 'Update or remove invalid URLs', 'Implement 301 redirects'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de anchor text descriptivo\r\n      const descriptiveAnchors = Math.floor(internalLinks * 0.8); // 80% descriptivos\r\n      const genericAnchors = internalLinks - descriptiveAnchors;\r\n\r\n      results.push({\r\n        testId: `links_anchors_${Date.now()}`,\r\n        testName: 'Descriptive Anchor Text',\r\n        testType: 'internal_links',\r\n        url,\r\n        status: descriptiveAnchors / internalLinks > 0.7 ? 'passed' : 'warning',\r\n        score: Math.round((descriptiveAnchors / internalLinks) * 100),\r\n        details: {\r\n          description: 'Validates use of descriptive anchor text',\r\n          expectedValue: '>70% descriptive anchor text',\r\n          actualValue: `${Math.round((descriptiveAnchors / internalLinks) * 100)}% descriptive`,\r\n          impact: 'medium',\r\n          category: 'internal_links'\r\n        },\r\n        suggestions: descriptiveAnchors / internalLinks > 0.7\r\n          ? ['Good use of descriptive anchor text']\r\n          : ['Use more descriptive anchor text', 'Avoid generic terms like \"click here\"', 'Include relevant keywords'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de estructura de enlaces\r\n      const hasProperHierarchy = Math.random() > 0.2; // 80% de probabilidad de buena jerarquía\r\n      results.push({\r\n        testId: `links_hierarchy_${Date.now()}`,\r\n        testName: 'Link Hierarchy Structure',\r\n        testType: 'internal_links',\r\n        url,\r\n        status: hasProperHierarchy ? 'passed' : 'warning',\r\n        score: hasProperHierarchy ? 85 : 55,\r\n        details: {\r\n          description: 'Validates proper internal linking hierarchy',\r\n          expectedValue: 'Clear hierarchical structure',\r\n          actualValue: hasProperHierarchy ? 'Good hierarchy' : 'Hierarchy issues detected',\r\n          impact: 'medium',\r\n          category: 'internal_links'\r\n        },\r\n        suggestions: hasProperHierarchy\r\n          ? ['Link hierarchy is well structured']\r\n          : ['Improve link hierarchy', 'Create clear navigation paths', 'Link to parent/child pages'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run internal links tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `links_error_${Date.now()}`,\r\n        testName: 'Internal Links Tests',\r\n        testType: 'internal_links',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze internal links',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'internal_links'\r\n        },\r\n        suggestions: ['Check page accessibility', 'Verify link analysis'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de compliance\r\n   */\r\n  private async runComplianceTests(url: string): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Test de HTTPS\r\n      const hasHttps = url.startsWith('https://') || !url.startsWith('http://');\r\n      results.push({\r\n        testId: `compliance_https_${Date.now()}`,\r\n        testName: 'HTTPS Security',\r\n        testType: 'compliance',\r\n        url,\r\n        status: hasHttps ? 'passed' : 'failed',\r\n        score: hasHttps ? 100 : 0,\r\n        details: {\r\n          description: 'Validates HTTPS implementation',\r\n          expectedValue: 'HTTPS protocol',\r\n          actualValue: hasHttps ? 'HTTPS enabled' : 'HTTP only',\r\n          impact: hasHttps ? 'low' : 'critical',\r\n          category: 'security'\r\n        },\r\n        suggestions: hasHttps\r\n          ? ['HTTPS is properly implemented']\r\n          : ['Implement HTTPS', 'Install SSL certificate', 'Redirect HTTP to HTTPS'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de mobile-friendly\r\n      const isMobileFriendly = Math.random() > 0.1; // 90% de probabilidad de ser mobile-friendly\r\n      results.push({\r\n        testId: `compliance_mobile_${Date.now()}`,\r\n        testName: 'Mobile Friendliness',\r\n        testType: 'compliance',\r\n        url,\r\n        status: isMobileFriendly ? 'passed' : 'failed',\r\n        score: isMobileFriendly ? 95 : 20,\r\n        details: {\r\n          description: 'Validates mobile-friendly design',\r\n          expectedValue: 'Mobile-optimized layout',\r\n          actualValue: isMobileFriendly ? 'Mobile-friendly' : 'Not mobile-optimized',\r\n          impact: isMobileFriendly ? 'low' : 'high',\r\n          category: 'mobile'\r\n        },\r\n        suggestions: isMobileFriendly\r\n          ? ['Page is mobile-friendly']\r\n          : ['Implement responsive design', 'Add viewport meta tag', 'Optimize for touch'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de accesibilidad\r\n      const accessibilityScore = Math.floor(Math.random() * 30) + 70; // 70-100\r\n      results.push({\r\n        testId: `compliance_accessibility_${Date.now()}`,\r\n        testName: 'Accessibility Compliance',\r\n        testType: 'compliance',\r\n        url,\r\n        status: accessibilityScore >= 80 ? 'passed' : accessibilityScore >= 60 ? 'warning' : 'failed',\r\n        score: accessibilityScore,\r\n        details: {\r\n          description: 'Validates accessibility standards compliance',\r\n          expectedValue: 'WCAG 2.1 AA compliance',\r\n          actualValue: `${accessibilityScore}% accessibility score`,\r\n          impact: accessibilityScore >= 80 ? 'low' : 'medium',\r\n          category: 'accessibility'\r\n        },\r\n        suggestions: accessibilityScore >= 80\r\n          ? ['Good accessibility compliance']\r\n          : ['Add alt text to images', 'Improve color contrast', 'Add ARIA labels', 'Ensure keyboard navigation'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de velocidad de carga\r\n      const loadTime = Math.floor(Math.random() * 4000) + 1000; // 1-5 segundos\r\n      const isLoadTimeFast = loadTime <= this.config.thresholds.maxPageLoadTime;\r\n\r\n      results.push({\r\n        testId: `compliance_speed_${Date.now()}`,\r\n        testName: 'Page Load Speed',\r\n        testType: 'performance',\r\n        url,\r\n        status: isLoadTimeFast ? 'passed' : loadTime <= this.config.thresholds.maxPageLoadTime * 1.5 ? 'warning' : 'failed',\r\n        score: Math.max(0, 100 - Math.floor((loadTime - 1000) / 50)),\r\n        details: {\r\n          description: 'Validates page loading performance',\r\n          expectedValue: `<${this.config.thresholds.maxPageLoadTime}ms load time`,\r\n          actualValue: `${loadTime}ms load time`,\r\n          impact: isLoadTimeFast ? 'low' : 'high',\r\n          category: 'performance'\r\n        },\r\n        suggestions: isLoadTimeFast\r\n          ? ['Page load speed is optimal']\r\n          : ['Optimize images', 'Minify CSS/JS', 'Use CDN', 'Enable compression', 'Reduce server response time'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run compliance tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `compliance_error_${Date.now()}`,\r\n        testName: 'Compliance Tests',\r\n        testType: 'compliance',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze compliance',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'compliance'\r\n        },\r\n        suggestions: ['Check page accessibility', 'Verify compliance analysis'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de performance\r\n   */\r\n  private async runPerformanceTests(url: string): Promise<SEOTestResult[]> {\r\n    const startTime = Date.now();\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      // Simular métricas de Core Web Vitals\r\n      const lcp = Math.random() * 3 + 1.5; // 1.5-4.5 segundos\r\n      const fid = Math.random() * 200 + 50; // 50-250ms\r\n      const cls = Math.random() * 0.3; // 0-0.3\r\n\r\n      // Test de Largest Contentful Paint (LCP)\r\n      results.push({\r\n        testId: `perf_lcp_${Date.now()}`,\r\n        testName: 'Largest Contentful Paint (LCP)',\r\n        testType: 'performance',\r\n        url,\r\n        status: lcp <= 2.5 ? 'passed' : lcp <= 4.0 ? 'warning' : 'failed',\r\n        score: Math.max(0, 100 - Math.floor((lcp - 2.5) * 20)),\r\n        details: {\r\n          description: 'Measures loading performance',\r\n          expectedValue: '≤2.5 seconds',\r\n          actualValue: `${lcp.toFixed(2)} seconds`,\r\n          impact: lcp <= 2.5 ? 'low' : 'high',\r\n          category: 'core_web_vitals'\r\n        },\r\n        suggestions: lcp <= 2.5\r\n          ? ['LCP is within good range']\r\n          : ['Optimize largest content element', 'Preload critical resources', 'Optimize images', 'Use CDN'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de First Input Delay (FID)\r\n      results.push({\r\n        testId: `perf_fid_${Date.now()}`,\r\n        testName: 'First Input Delay (FID)',\r\n        testType: 'performance',\r\n        url,\r\n        status: fid <= 100 ? 'passed' : fid <= 300 ? 'warning' : 'failed',\r\n        score: Math.max(0, 100 - Math.floor((fid - 100) / 5)),\r\n        details: {\r\n          description: 'Measures interactivity',\r\n          expectedValue: '≤100 milliseconds',\r\n          actualValue: `${fid.toFixed(0)} milliseconds`,\r\n          impact: fid <= 100 ? 'low' : 'high',\r\n          category: 'core_web_vitals'\r\n        },\r\n        suggestions: fid <= 100\r\n          ? ['FID is within good range']\r\n          : ['Reduce JavaScript execution time', 'Split long tasks', 'Use web workers', 'Optimize third-party scripts'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de Cumulative Layout Shift (CLS)\r\n      results.push({\r\n        testId: `perf_cls_${Date.now()}`,\r\n        testName: 'Cumulative Layout Shift (CLS)',\r\n        testType: 'performance',\r\n        url,\r\n        status: cls <= 0.1 ? 'passed' : cls <= 0.25 ? 'warning' : 'failed',\r\n        score: Math.max(0, 100 - Math.floor(cls * 200)),\r\n        details: {\r\n          description: 'Measures visual stability',\r\n          expectedValue: '≤0.1',\r\n          actualValue: cls.toFixed(3),\r\n          impact: cls <= 0.1 ? 'low' : 'medium',\r\n          category: 'core_web_vitals'\r\n        },\r\n        suggestions: cls <= 0.1\r\n          ? ['CLS is within good range']\r\n          : ['Set dimensions for images and videos', 'Reserve space for ads', 'Avoid inserting content above existing content'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      // Test de SEO Score general\r\n      const seoScore = Math.floor(Math.random() * 30) + 70; // 70-100\r\n      results.push({\r\n        testId: `perf_seo_score_${Date.now()}`,\r\n        testName: 'Overall SEO Score',\r\n        testType: 'performance',\r\n        url,\r\n        status: seoScore >= this.config.thresholds.minSEOScore ? 'passed' : seoScore >= 70 ? 'warning' : 'failed',\r\n        score: seoScore,\r\n        details: {\r\n          description: 'Overall SEO performance assessment',\r\n          expectedValue: `≥${this.config.thresholds.minSEOScore} SEO score`,\r\n          actualValue: `${seoScore} SEO score`,\r\n          impact: seoScore >= this.config.thresholds.minSEOScore ? 'low' : 'medium',\r\n          category: 'seo_performance'\r\n        },\r\n        suggestions: seoScore >= this.config.thresholds.minSEOScore\r\n          ? ['SEO score is good']\r\n          : ['Improve metadata optimization', 'Add structured data', 'Optimize content', 'Fix technical issues'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to run performance tests', error as Error, LogCategory.SEO);\r\n\r\n      results.push({\r\n        testId: `perf_error_${Date.now()}`,\r\n        testName: 'Performance Tests',\r\n        testType: 'performance',\r\n        url,\r\n        status: 'failed',\r\n        score: 0,\r\n        details: {\r\n          description: 'Failed to analyze performance',\r\n          actualValue: error instanceof Error ? error.message : 'Unknown error',\r\n          impact: 'critical',\r\n          category: 'performance'\r\n        },\r\n        suggestions: ['Check page accessibility', 'Verify performance analysis'],\r\n        executionTime: Date.now() - startTime,\r\n        timestamp: new Date()\r\n      });\r\n\r\n      return results;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE VALIDACIÓN Y SCORING\r\n  // ===================================\r\n\r\n  private validateTitle(title?: string): 'passed' | 'failed' | 'warning' {\r\n    if (!title) {return 'failed';}\r\n    const length = title.length;\r\n    if (length >= this.config.thresholds.titleMinLength && length <= this.config.thresholds.titleMaxLength) {\r\n      return 'passed';\r\n    }\r\n    return 'warning';\r\n  }\r\n\r\n  private calculateTitleScore(title?: string): number {\r\n    if (!title) {return 0;}\r\n    const length = title.length;\r\n    const optimal = (this.config.thresholds.titleMinLength + this.config.thresholds.titleMaxLength) / 2;\r\n    const deviation = Math.abs(length - optimal);\r\n    return Math.max(0, 100 - deviation * 2);\r\n  }\r\n\r\n  private getTitleSuggestions(title?: string): string[] {\r\n    if (!title) {return ['Add a title tag', 'Include primary keywords', 'Make it descriptive'];}\r\n\r\n    const suggestions = [];\r\n    const length = title.length;\r\n\r\n    if (length < this.config.thresholds.titleMinLength) {\r\n      suggestions.push('Title is too short, add more descriptive text');\r\n    }\r\n    if (length > this.config.thresholds.titleMaxLength) {\r\n      suggestions.push('Title is too long, consider shortening');\r\n    }\r\n    if (!title.includes('|') && !title.includes('-')) {\r\n      suggestions.push('Consider adding brand name separated by | or -');\r\n    }\r\n\r\n    return suggestions.length > 0 ? suggestions : ['Title looks good'];\r\n  }\r\n\r\n  private validateDescription(description?: string): 'passed' | 'failed' | 'warning' {\r\n    if (!description) {return 'failed';}\r\n    const length = description.length;\r\n    if (length >= this.config.thresholds.descriptionMinLength && length <= this.config.thresholds.descriptionMaxLength) {\r\n      return 'passed';\r\n    }\r\n    return 'warning';\r\n  }\r\n\r\n  private calculateDescriptionScore(description?: string): number {\r\n    if (!description) {return 0;}\r\n    const length = description.length;\r\n    const optimal = (this.config.thresholds.descriptionMinLength + this.config.thresholds.descriptionMaxLength) / 2;\r\n    const deviation = Math.abs(length - optimal);\r\n    return Math.max(0, 100 - deviation);\r\n  }\r\n\r\n  private getDescriptionSuggestions(description?: string): string[] {\r\n    if (!description) {return ['Add a meta description', 'Include call-to-action', 'Describe page content'];}\r\n\r\n    const suggestions = [];\r\n    const length = description.length;\r\n\r\n    if (length < this.config.thresholds.descriptionMinLength) {\r\n      suggestions.push('Description is too short, add more details');\r\n    }\r\n    if (length > this.config.thresholds.descriptionMaxLength) {\r\n      suggestions.push('Description is too long, consider shortening');\r\n    }\r\n    if (!description.includes('!') && !description.includes('?')) {\r\n      suggestions.push('Consider adding a call-to-action');\r\n    }\r\n\r\n    return suggestions.length > 0 ? suggestions : ['Description looks good'];\r\n  }\r\n\r\n  private validateKeywords(keywords?: string[]): 'passed' | 'failed' | 'warning' {\r\n    if (!keywords || keywords.length === 0) {return 'warning';}\r\n    if (keywords.length >= 3 && keywords.length <= 5) {return 'passed';}\r\n    return 'warning';\r\n  }\r\n\r\n  private calculateKeywordsScore(keywords?: string[]): number {\r\n    if (!keywords) {return 50;}\r\n    const count = keywords.length;\r\n    if (count >= 3 && count <= 5) {return 90;}\r\n    if (count >= 1 && count <= 7) {return 70;}\r\n    return 40;\r\n  }\r\n\r\n  private getKeywordsSuggestions(keywords?: string[]): string[] {\r\n    if (!keywords || keywords.length === 0) {\r\n      return ['Add relevant keywords', 'Include primary and secondary keywords'];\r\n    }\r\n\r\n    const suggestions = [];\r\n    if (keywords.length < 3) {\r\n      suggestions.push('Add more relevant keywords');\r\n    }\r\n    if (keywords.length > 5) {\r\n      suggestions.push('Consider reducing number of keywords');\r\n    }\r\n\r\n    return suggestions.length > 0 ? suggestions : ['Keywords look good'];\r\n  }\r\n\r\n  private validateOpenGraph(metadata: any): 'passed' | 'failed' | 'warning' {\r\n    const hasOgTitle = !!metadata.ogTitle;\r\n    const hasOgDescription = !!metadata.ogDescription;\r\n    const hasOgImage = !!metadata.ogImage;\r\n\r\n    if (hasOgTitle && hasOgDescription && hasOgImage) {return 'passed';}\r\n    if (hasOgTitle || hasOgDescription) {return 'warning';}\r\n    return 'failed';\r\n  }\r\n\r\n  private calculateOpenGraphScore(metadata: any): number {\r\n    let score = 0;\r\n    if (metadata.ogTitle) {score += 25;}\r\n    if (metadata.ogDescription) {score += 25;}\r\n    if (metadata.ogImage) {score += 25;}\r\n    if (metadata.ogUrl) {score += 25;}\r\n    return score;\r\n  }\r\n\r\n  private getOpenGraphStatus(metadata: any): string {\r\n    const tags = [];\r\n    if (metadata.ogTitle) {tags.push('og:title');}\r\n    if (metadata.ogDescription) {tags.push('og:description');}\r\n    if (metadata.ogImage) {tags.push('og:image');}\r\n    if (metadata.ogUrl) {tags.push('og:url');}\r\n    return tags.length > 0 ? tags.join(', ') : 'No Open Graph tags';\r\n  }\r\n\r\n  private getOpenGraphSuggestions(metadata: any): string[] {\r\n    const suggestions = [];\r\n    if (!metadata.ogTitle) {suggestions.push('Add og:title tag');}\r\n    if (!metadata.ogDescription) {suggestions.push('Add og:description tag');}\r\n    if (!metadata.ogImage) {suggestions.push('Add og:image tag');}\r\n    if (!metadata.ogUrl) {suggestions.push('Add og:url tag');}\r\n\r\n    return suggestions.length > 0 ? suggestions : ['Open Graph tags are complete'];\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE UTILIDAD\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar promesas con límite de concurrencia\r\n   */\r\n  private async executeWithConcurrencyLimit<T>(\r\n    promises: Promise<T>[],\r\n    limit: number\r\n  ): Promise<T[]> {\r\n    const results: T[] = [];\r\n    const executing: Promise<void>[] = [];\r\n\r\n    for (const promise of promises) {\r\n      const execute = promise.then(result => {\r\n        results.push(result);\r\n      });\r\n\r\n      executing.push(execute);\r\n\r\n      if (executing.length >= limit) {\r\n        await Promise.race(executing);\r\n        executing.splice(executing.findIndex(p => p === execute), 1);\r\n      }\r\n    }\r\n\r\n    await Promise.all(executing);\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Calcular resumen de resultados\r\n   */\r\n  private calculateSummary(tests: SEOTestResult[]): SEOTestSuite['summary'] {\r\n    const totalTests = tests.length;\r\n    const passed = tests.filter(t => t.status === 'passed').length;\r\n    const failed = tests.filter(t => t.status === 'failed').length;\r\n    const warnings = tests.filter(t => t.status === 'warning').length;\r\n    const skipped = tests.filter(t => t.status === 'skipped').length;\r\n\r\n    const totalScore = tests.reduce((sum, test) => sum + test.score, 0);\r\n    const overallScore = totalTests > 0 ? Math.round(totalScore / totalTests) : 0;\r\n\r\n    const totalExecutionTime = tests.reduce((sum, test) => sum + test.executionTime, 0);\r\n\r\n    return {\r\n      totalTests,\r\n      passed,\r\n      failed,\r\n      warnings,\r\n      skipped,\r\n      overallScore,\r\n      executionTime: totalExecutionTime\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcular cobertura de tests\r\n   */\r\n  private calculateCoverage(tests: SEOTestResult[]): SEOTestSuite['coverage'] {\r\n    return {\r\n      metadataTests: tests.filter(t => t.testType === 'metadata').length,\r\n      structuredDataTests: tests.filter(t => t.testType === 'structured_data').length,\r\n      robotsTxtTests: tests.filter(t => t.testType === 'robots_txt').length,\r\n      internalLinksTests: tests.filter(t => t.testType === 'internal_links').length,\r\n      complianceTests: tests.filter(t => t.testType === 'compliance').length,\r\n      performanceTests: tests.filter(t => t.testType === 'performance').length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtener datos del cache\r\n   */\r\n  private async getCachedData(key: string): Promise<any> {\r\n    if (!this.config.cacheEnabled) {return null;}\r\n\r\n    try {\r\n      // Intentar Redis primero\r\n      if (this.redis) {\r\n        const cached = await this.redis.get(`seo_testing:${key}`);\r\n        if (cached) {\r\n          return JSON.parse(cached);\r\n        }\r\n      }\r\n\r\n      // Fallback a cache en memoria\r\n      const cached = this.cache.get(key);\r\n      if (cached && Date.now() - cached.timestamp < this.config.cacheTTL * 1000) {\r\n        return cached.data;\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error accessing cache', {}, LogCategory.SEO);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guardar datos en cache\r\n   */\r\n  private async setCachedData(key: string, data: any): Promise<void> {\r\n    if (!this.config.cacheEnabled) {return;}\r\n\r\n    try {\r\n      // Cachear en Redis\r\n      if (this.redis) {\r\n        await this.redis.setex(`seo_testing:${key}`, this.config.cacheTTL, JSON.stringify(data));\r\n      }\r\n\r\n      // Cachear en memoria como fallback\r\n      this.cache.set(key, { data, timestamp: Date.now() });\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error caching data', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS PÚBLICOS DE GESTIÓN\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests específicos por tipo\r\n   */\r\n  public async runTestsByType(\r\n    testType: 'metadata' | 'structured_data' | 'robots_txt' | 'internal_links' | 'compliance' | 'performance',\r\n    urls?: string[]\r\n  ): Promise<SEOTestResult[]> {\r\n    const testUrls = urls || this.config.testUrls;\r\n    const results: SEOTestResult[] = [];\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, `Running ${testType} tests`, {\r\n        testType,\r\n        urlsCount: testUrls.length\r\n      }, LogCategory.SEO);\r\n\r\n      for (const url of testUrls) {\r\n        let urlResults: SEOTestResult[] = [];\r\n\r\n        switch (testType) {\r\n          case 'metadata':\r\n            urlResults = await this.runMetadataTests(url);\r\n            break;\r\n          case 'structured_data':\r\n            urlResults = await this.runStructuredDataTests(url);\r\n            break;\r\n          case 'robots_txt':\r\n            if (url === '/' || url === '') {\r\n              urlResults = await this.runRobotsTxtTests();\r\n            }\r\n            break;\r\n          case 'internal_links':\r\n            urlResults = await this.runInternalLinksTests(url);\r\n            break;\r\n          case 'compliance':\r\n            urlResults = await this.runComplianceTests(url);\r\n            break;\r\n          case 'performance':\r\n            urlResults = await this.runPerformanceTests(url);\r\n            break;\r\n        }\r\n\r\n        results.push(...urlResults);\r\n      }\r\n\r\n      logger.info(LogLevel.INFO, `${testType} tests completed`, {\r\n        testType,\r\n        testsRun: results.length\r\n      }, LogCategory.SEO);\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to run ${testType} tests`, error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener historial de tests\r\n   */\r\n  public getTestHistory(limit?: number): SEOTestSuite[] {\r\n    const history = [...this.testHistory].reverse(); // Más recientes primero\r\n    return limit ? history.slice(0, limit) : history;\r\n  }\r\n\r\n  /**\r\n   * Obtener tests activos\r\n   */\r\n  public getActiveTestSuites(): SEOTestSuite[] {\r\n    return Array.from(this.activeTestSuites.values());\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de testing\r\n   */\r\n  public getTestingStats(): {\r\n    totalTestsRun: number;\r\n    averageScore: number;\r\n    mostCommonIssues: string[];\r\n    testsByType: Record<string, number>;\r\n    cacheHitRate: number;\r\n  } {\r\n    const allTests = this.testHistory.flatMap(suite => suite.tests);\r\n\r\n    const totalTestsRun = allTests.length;\r\n    const averageScore = totalTestsRun > 0\r\n      ? Math.round(allTests.reduce((sum, test) => sum + test.score, 0) / totalTestsRun)\r\n      : 0;\r\n\r\n    const testsByType = allTests.reduce((acc, test) => {\r\n      acc[test.testType] = (acc[test.testType] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    // Simular issues más comunes\r\n    const mostCommonIssues = [\r\n      'Missing meta description',\r\n      'Title too long',\r\n      'No structured data',\r\n      'Slow page load',\r\n      'Missing alt text'\r\n    ];\r\n\r\n    return {\r\n      totalTestsRun,\r\n      averageScore,\r\n      mostCommonIssues,\r\n      testsByType,\r\n      cacheHitRate: this.cache.size > 0 ? 0.85 : 0 // Simular 85% hit rate\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configurar suite de testing\r\n   */\r\n  public configure(config: Partial<SEOTestingConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.info(LogLevel.INFO, 'SEO Testing Suite reconfigured', {\r\n      updatedKeys: Object.keys(config)\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  /**\r\n   * Limpiar cache\r\n   */\r\n  public async clearCache(): Promise<void> {\r\n    try {\r\n      // Limpiar Redis\r\n      if (this.redis) {\r\n        const keys = await this.redis.keys('seo_testing:*');\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n      }\r\n\r\n      // Limpiar cache en memoria\r\n      this.cache.clear();\r\n\r\n      logger.info(LogLevel.INFO, 'SEO testing cache cleared', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error clearing cache', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destruir instancia y limpiar recursos\r\n   */\r\n  public async destroy(): Promise<void> {\r\n    try {\r\n      await this.clearCache();\r\n\r\n      this.activeTestSuites.clear();\r\n      this.testHistory = [];\r\n\r\n      if (this.redis) {\r\n        this.redis = null;\r\n      }\r\n\r\n      logger.info(LogLevel.INFO, 'Enhanced SEO Testing Suite destroyed', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error destroying SEO testing suite', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTACIONES\r\n// ===================================\r\n\r\n// Instancia singleton\r\nexport const enhancedSEOTestingSuite = EnhancedSEOTestingSuite.getInstance();\r\n\r\n// Exportar clase para uso directo\r\nexport { EnhancedSEOTestingSuite as SEOTestingSuite };\r\n\r\n// Exportar todos los tipos\r\nexport type {\r\n  SEOTestingConfig,\r\n  SEOTestResult,\r\n  SEOTestSuite,\r\n  MetadataTestResult,\r\n  StructuredDataTestResult,\r\n  RobotsTxtTestResult,\r\n  InternalLinksTestResult,\r\n  ComplianceTestResult\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsaA,wBAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,uBAAA;;MAo4CuBI,gBAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAA3BH,uBAAA;;MAHIK,wBAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,uBAAA;;;;;kCA1sDiC;;;kCACf;;;kCAEa;;;mCACV;AA6QlC;AACA,MAAMC,0BAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,QAA+C;EACnDI,mBAAA,EAAqB;EACrBC,yBAAA,EAA2B;EAC3BC,oBAAA,EAAsB;EACtBC,wBAAA,EAA0B;EAC1BC,qBAAA,EAAuB;EACvBC,sBAAA,EAAwB;EAExBC,WAAA,EAAa;EACbC,kBAAA,EAAoB;EACpBC,aAAA,EAAe;EAEfC,UAAA,EAAY;IACVC,cAAA,EAAgB;IAChBC,cAAA,EAAgB;IAChBC,oBAAA,EAAsB;IACtBC,oBAAA,EAAsB;IACtBC,uBAAA,EAAyB;IACzBC,uBAAA,EAAyB;IACzBC,eAAA,EAAiB;IACjBC,WAAA,EAAa;EACf;EAEAC,QAAA,EAAU,CACR,KACA,SACA,wBACA,8BACA,UACA,WACD;EAEDC,eAAA,EAAiB,CACf,UACA,QACA,SACA,aACA,SACA,UACA,SACA,SACD;EAEDC,YAAA,EAAc;EACdC,QAAA,EAAU;EAEVC,qBAAA,EAAuB;EACvBC,iBAAA,EAAmB;EACnBC,YAAA,EAAc;AAChB;AAMO,MAAM/B,uBAAA;EAQXgC,YAAoBC,MAAkC,EAAE;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAJhD+B,KAAA,GAAuD,IAAIC,GAAA;IAAA;IAAAlC,cAAA,GAAAE,CAAA;SAC3DiC,gBAAA,GAA8C,IAAID,GAAA;IAAA;IAAAlC,cAAA,GAAAE,CAAA;SAClDkC,WAAA,GAA8B,EAAE;IAAA;IAAApC,cAAA,GAAAE,CAAA;IAGtC,IAAI,CAAC8B,MAAM,GAAG;MAAE,GAAG3B,0BAA0B;MAAE,GAAG2B;IAAO;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IACzD,IAAI,CAACmC,eAAe;IAAA;IAAArC,cAAA,GAAAE,CAAA;IAEpBoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,0CAA0C;MACnEC,YAAA,EAAc;QACZC,QAAA,EAAU,IAAI,CAACZ,MAAM,CAAC1B,mBAAmB;QACzCuC,cAAA,EAAgB,IAAI,CAACb,MAAM,CAACzB,yBAAyB;QACrDuC,SAAA,EAAW,IAAI,CAACd,MAAM,CAACxB,oBAAoB;QAC3CuC,aAAA,EAAe,IAAI,CAACf,MAAM,CAACvB,wBAAwB;QACnDuC,UAAA,EAAY,IAAI,CAAChB,MAAM,CAACtB,qBAAqB;QAC7CuC,WAAA,EAAa,IAAI,CAACjB,MAAM,CAACrB;MAC3B;MACAa,QAAA,EAAU,IAAI,CAACQ,MAAM,CAACR,QAAQ,CAAC0B,MAAM;MACrCC,aAAA,EAAe,IAAI,CAACnB,MAAM,CAACnB;IAC7B,GAAGyB,OAAA,CAAAc,WAAW,CAACC,GAAG;EACpB;EAEA,OAAcC,YAAYtB,MAAkC,EAA2B;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrF,IAAI,CAACH,uBAAA,CAAwBwD,QAAQ,EAAE;MAAA;MAAAvD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACrCH,uBAAA,CAAwBwD,QAAQ,GAAG,IAAIxD,uBAAA,CAAwBiC,MAAA;IACjE;IAAA;IAAA;MAAAhC,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,OAAOH,uBAAA,CAAwBwD,QAAQ;EACzC;EAEA,MAAclB,gBAAA,EAAiC;IAAA;IAAArC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC7C,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,IAAI,CAACuD,KAAK,GAAG,MAAM,IAAAC,MAAA,CAAAC,cAAc;MAAA;MAAA3D,cAAA,GAAAE,CAAA;MACjCoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,2CAA2C,CAAC,GAAGJ,OAAA,CAAAc,WAAW,CAACC,GAAG;IAC3F,EAAE,OAAOO,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACsB,IAAI,CAACvB,OAAA,CAAAG,QAAQ,CAACqB,IAAI,EAAE,6CAA6C,CAAC,GAAGxB,OAAA,CAAAc,WAAW,CAACC,GAAG;IAC7F;EACF;EAEA;EACA;EACA;EAEA;;;EAGA,MAAaU,iBAAiBC,IAAe,EAAyB;IAAA;IAAAhE,cAAA,GAAAC,CAAA;IACpE,MAAMgE,OAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAU,SAASgE,IAAA,CAAKC,GAAG,MAAMC,IAAA,CAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;IAChF,MAAM/C,QAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA;IAAW;IAAA,CAAAF,cAAA,GAAAwD,CAAA,UAAAQ,IAAA;IAAA;IAAA,CAAAhE,cAAA,GAAAwD,CAAA,UAAQ,IAAI,CAACxB,MAAM,CAACR,QAAQ;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAE7C,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,gCAAgC;QACzDuB,OAAA;QACAO,SAAA,EAAWhD,QAAA,CAAS0B;MACtB,GAAGZ,OAAA,CAAAc,WAAW,CAACC,GAAG;MAElB,MAAMoB,SAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAE,CAAA,QAA0B;QAC9B+D,OAAA;QACAS,SAAA,EAAW;QACXC,WAAA,EAAa;QACbC,KAAA,EAAO,EAAE;QACTC,OAAA,EAAS;UACPC,UAAA,EAAY;UACZC,MAAA,EAAQ;UACRC,MAAA,EAAQ;UACRC,QAAA,EAAU;UACVC,OAAA,EAAS;UACTC,YAAA,EAAc;UACdC,aAAA,EAAe;QACjB;QACAC,QAAA,EAAU;UACRC,aAAA,EAAe;UACfC,mBAAA,EAAqB;UACrBC,cAAA,EAAgB;UAChBC,kBAAA,EAAoB;UACpBC,eAAA,EAAiB;UACjBC,gBAAA,EAAkB;QACpB;QACAC,SAAA,EAAW,IAAI1B,IAAA;QACf2B,OAAA,EAAS,IAAI3B,IAAA;QACb4B,MAAA,EAAQ;MACV;MAAA;MAAA9F,cAAA,GAAAE,CAAA;MAEA,IAAI,CAACiC,gBAAgB,CAAC4D,GAAG,CAAC9B,OAAA,EAASQ,SAAA;MAEnC;MACA,MAAMuB,YAAA;MAAA;MAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAesB,QAAA,CAASyE,GAAG,CAACC,GAAA,IAAO;QAAA;QAAAlG,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,WAAI,CAACiG,cAAc,CAACD,GAAA;MAAA;MAC7D,MAAME,UAAA;MAAA;MAAA,CAAApG,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAI,CAACmG,2BAA2B,CAACL,YAAA,EAAc,IAAI,CAAChE,MAAM,CAACnB,kBAAkB;MAEtG;MAAA;MAAAb,cAAA,GAAAE,CAAA;MACAuE,SAAA,CAAUG,KAAK,GAAGwB,UAAA,CAAWE,IAAI;MAAA;MAAAtG,cAAA,GAAAE,CAAA;MACjCuE,SAAA,CAAUI,OAAO,GAAG,IAAI,CAAC0B,gBAAgB,CAAC9B,SAAA,CAAUG,KAAK;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MACzDuE,SAAA,CAAUY,QAAQ,GAAG,IAAI,CAACmB,iBAAiB,CAAC/B,SAAA,CAAUG,KAAK;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MAC3DuE,SAAA,CAAUoB,OAAO,GAAG,IAAI3B,IAAA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACxBuE,SAAA,CAAUI,OAAO,CAACO,aAAa,GAAGX,SAAA,CAAUoB,OAAO,CAACY,OAAO,KAAKhC,SAAA,CAAUmB,SAAS,CAACa,OAAO;MAAA;MAAAzG,cAAA,GAAAE,CAAA;MAC3FuE,SAAA,CAAUqB,MAAM,GAAG;MAEnB;MAAA;MAAA9F,cAAA,GAAAE,CAAA;MACA,IAAI,CAACkC,WAAW,CAACsE,IAAI,CAACjC,SAAA;MAAA;MAAAzE,cAAA,GAAAE,CAAA;MACtB,IAAI,CAACiC,gBAAgB,CAACwE,MAAM,CAAC1C,OAAA;MAE7B;MAAA;MAAAjE,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI,CAAC0G,aAAa,CAAC,cAAc3C,OAAA,EAAS,EAAEQ,SAAA;MAElD;MAAA;MAAAzE,cAAA,GAAAE,CAAA;MACA2G,oBAAA,CAAAC,2BAA2B,CAACC,eAAe,CAAC;QAC1CC,YAAA,EAAc;UACZ/C,OAAA;UACAa,UAAA,EAAYL,SAAA,CAAUI,OAAO,CAACC,UAAU;UACxCK,YAAA,EAAcV,SAAA,CAAUI,OAAO,CAACM,YAAY;UAC5CC,aAAA,EAAeX,SAAA,CAAUI,OAAO,CAACO,aAAa;UAC9C6B,SAAA,EAAW,IAAI/C,IAAA;QACjB;MACF;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEAoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,4BAA4B;QACrDuB,OAAA;QACAa,UAAA,EAAYL,SAAA,CAAUI,OAAO,CAACC,UAAU;QACxCK,YAAA,EAAcV,SAAA,CAAUI,OAAO,CAACM,YAAY;QAC5CC,aAAA,EAAeX,SAAA,CAAUI,OAAO,CAACO;MACnC,GAAG9C,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAElB,OAAOuE,SAAA;IAET,EAAE,OAAOb,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,gCAAgCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAE5F,MAAM8D,WAAA;MAAA;MAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAc,IAAI,CAACiC,gBAAgB,CAACiF,GAAG,CAACnD,OAAA;MAAA;MAAAjE,cAAA,GAAAE,CAAA;MAC9C,IAAIiH,WAAA,EAAa;QAAA;QAAAnH,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QACfiH,WAAA,CAAYrB,MAAM,GAAG;QAAA;QAAA9F,cAAA,GAAAE,CAAA;QACrBiH,WAAA,CAAYtB,OAAO,GAAG,IAAI3B,IAAA;QAAA;QAAAlE,cAAA,GAAAE,CAAA;QAC1B,IAAI,CAACiC,gBAAgB,CAACwE,MAAM,CAAC1C,OAAA;MAC/B;MAAA;MAAA;QAAAjE,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEA,MAAM0D,KAAA;IACR;EACF;EAEA;;;EAGA,MAAcuC,eAAeD,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IAClE,MAAMoH,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,QAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAI,IAAI,CAAC8B,MAAM,CAAC1B,mBAAmB,EAAE;QAAA;QAAAN,cAAA,GAAAwD,CAAA;QACnC,MAAM8B,aAAA;QAAA;QAAA,CAAAtF,cAAA,GAAAE,CAAA,QAAgB,MAAM,IAAI,CAACoH,gBAAgB,CAACpB,GAAA;QAAA;QAAAlG,cAAA,GAAAE,CAAA;QAClDmH,OAAA,CAAQX,IAAI,IAAIpB,aAAA;MAClB;MAAA;MAAA;QAAAtF,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAAC8B,MAAM,CAACzB,yBAAyB,EAAE;QAAA;QAAAP,cAAA,GAAAwD,CAAA;QACzC,MAAM+B,mBAAA;QAAA;QAAA,CAAAvF,cAAA,GAAAE,CAAA,QAAsB,MAAM,IAAI,CAACqH,sBAAsB,CAACrB,GAAA;QAAA;QAAAlG,cAAA,GAAAE,CAAA;QAC9DmH,OAAA,CAAQX,IAAI,IAAInB,mBAAA;MAClB;MAAA;MAAA;QAAAvF,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAwD,CAAA,cAAI,CAACxB,MAAM,CAACxB,oBAAoB;MAAK;MAAA,CAAAR,cAAA,GAAAwD,CAAA,UAAA0C,GAAA,KAAQ;MAAA;MAAA,CAAAlG,cAAA,GAAAwD,CAAA,UAAO0C,GAAA,KAAQ,EAAC,IAAI;QAAA;QAAAlG,cAAA,GAAAwD,CAAA;QACnE,MAAMgE,WAAA;QAAA;QAAA,CAAAxH,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACuH,iBAAiB;QAAA;QAAAzH,cAAA,GAAAE,CAAA;QAChDmH,OAAA,CAAQX,IAAI,IAAIc,WAAA;MAClB;MAAA;MAAA;QAAAxH,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAAC8B,MAAM,CAACvB,wBAAwB,EAAE;QAAA;QAAAT,cAAA,GAAAwD,CAAA;QACxC,MAAMkE,UAAA;QAAA;QAAA,CAAA1H,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAI,CAACyH,qBAAqB,CAACzB,GAAA;QAAA;QAAAlG,cAAA,GAAAE,CAAA;QACpDmH,OAAA,CAAQX,IAAI,IAAIgB,UAAA;MAClB;MAAA;MAAA;QAAA1H,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAAC8B,MAAM,CAACtB,qBAAqB,EAAE;QAAA;QAAAV,cAAA,GAAAwD,CAAA;QACrC,MAAMkC,eAAA;QAAA;QAAA,CAAA1F,cAAA,GAAAE,CAAA,QAAkB,MAAM,IAAI,CAAC0H,kBAAkB,CAAC1B,GAAA;QAAA;QAAAlG,cAAA,GAAAE,CAAA;QACtDmH,OAAA,CAAQX,IAAI,IAAIhB,eAAA;MAClB;MAAA;MAAA;QAAA1F,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAAC8B,MAAM,CAACrB,sBAAsB,EAAE;QAAA;QAAAX,cAAA,GAAAwD,CAAA;QACtC,MAAMmC,gBAAA;QAAA;QAAA,CAAA3F,cAAA,GAAAE,CAAA,QAAmB,MAAM,IAAI,CAAC2H,mBAAmB,CAAC3B,GAAA;QAAA;QAAAlG,cAAA,GAAAE,CAAA;QACxDmH,OAAA,CAAQX,IAAI,IAAIf,gBAAA;MAClB;MAAA;MAAA;QAAA3F,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,+BAA+BtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAE3F;MAAA;MAAArD,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,SAAS5D,IAAA,CAAKC,GAAG,IAAI;QAC7B4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,2BAA2B,0BAA0B,oBAAoB;QACvFpD,aAAA,EAAe;QACf6B,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcC,iBAAiBpB,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IACpE,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,QAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAM0C,QAAA;MAAA;MAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAW,MAAMuI,kBAAA,CAAAC,iBAAiB,CAACC,mBAAmB,CAACzC,GAAA,EAAK;MAClE,MAAM0C,QAAA;MAAA;MAAA,CAAA5I,cAAA,GAAAE,CAAA,QAAW,MAAMuI,kBAAA,CAAAC,iBAAiB,CAACG,UAAU,CAACjG,QAAA;MAEpD;MAAA;MAAA5C,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,kBAAkB5D,IAAA,CAAKC,GAAG,IAAI;QACtC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ,IAAI,CAACgD,aAAa,CAAClG,QAAA,CAASmG,KAAK;QACzCd,KAAA,EAAO,IAAI,CAACe,mBAAmB,CAACpG,QAAA,CAASmG,KAAK;QAC9Cb,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe,GAAG,IAAI,CAACjH,MAAM,CAACjB,UAAU,CAACC,cAAc,IAAI,IAAI,CAACgB,MAAM,CAACjB,UAAU,CAACE,cAAc,aAAa;UAC7GkH,WAAA,EAAa;UAAG;UAAA,CAAAnI,cAAA,GAAAwD,CAAA,WAAAZ,QAAA,CAASmG,KAAK,EAAE7F,MAAA;UAAA;UAAA,CAAAlD,cAAA,GAAAwD,CAAA,WAAU,eAAc;UACxD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,IAAI,CAACU,mBAAmB,CAACtG,QAAA,CAASmG,KAAK;QACpD3D,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,wBAAwB5D,IAAA,CAAKC,GAAG,IAAI;QAC5C4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ,IAAI,CAACqD,mBAAmB,CAACvG,QAAA,CAAS+B,WAAW;QACrDsD,KAAA,EAAO,IAAI,CAACmB,yBAAyB,CAACxG,QAAA,CAAS+B,WAAW;QAC1DuD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe,GAAG,IAAI,CAACjH,MAAM,CAACjB,UAAU,CAACG,oBAAoB,IAAI,IAAI,CAACc,MAAM,CAACjB,UAAU,CAACI,oBAAoB,aAAa;UACzHgH,WAAA,EAAa;UAAG;UAAA,CAAAnI,cAAA,GAAAwD,CAAA,WAAAZ,QAAA,CAAS+B,WAAW,EAAEzB,MAAA;UAAA;UAAA,CAAAlD,cAAA,GAAAwD,CAAA,WAAU,eAAc;UAC9D8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,IAAI,CAACa,yBAAyB,CAACzG,QAAA,CAAS+B,WAAW;QAChES,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,qBAAqB5D,IAAA,CAAKC,GAAG,IAAI;QACzC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ,IAAI,CAACwD,gBAAgB,CAAC1G,QAAA,CAAS2G,QAAQ;QAC/CtB,KAAA,EAAO,IAAI,CAACuB,sBAAsB,CAAC5G,QAAA,CAAS2G,QAAQ;QACpDrB,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa;UAAG;UAAA,CAAAnI,cAAA,GAAAwD,CAAA,WAAAZ,QAAA,CAAS2G,QAAQ,EAAErG,MAAA;UAAA;UAAA,CAAAlD,cAAA,GAAAwD,CAAA,WAAU,aAAY;UACzD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,IAAI,CAACiB,sBAAsB,CAAC7G,QAAA,CAAS2G,QAAQ;QAC1DnE,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,eAAe5D,IAAA,CAAKC,GAAG,IAAI;QACnC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ,IAAI,CAAC4D,iBAAiB,CAAC9G,QAAA;QAC/BqF,KAAA,EAAO,IAAI,CAAC0B,uBAAuB,CAAC/G,QAAA;QACpCsF,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,IAAI,CAACyB,kBAAkB,CAAChH,QAAA;UACrC0F,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,IAAI,CAACqB,uBAAuB,CAACjH,QAAA;QAC1CwC,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,gCAAgCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAE5FmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,kBAAkB5D,IAAA,CAAKC,GAAG,IAAI;QACtC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,2BAA2B,6BAA6B;QACtEpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcE,uBAAuBrB,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IAC1E,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,QAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAM4J,cAAA;MAAA;MAAA,CAAA9J,cAAA,GAAAE,CAAA,QAAiBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAC5C,MAAM0F,WAAA;MAAA;MAAA,CAAA/J,cAAA,GAAAE,CAAA,QAAc,CAAC,gBAAgB,WAAW,WAAW,WAAW,iBAAiB;MACvF,MAAM8J,eAAA;MAAA;MAAA,CAAAhK,cAAA,GAAAE,CAAA,QAAkB6J,WAAA,CAAYE,MAAM,CAAC,MAAM;QAAA;QAAAjK,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAkE,IAAA,CAAKC,MAAM,KAAK;MAAA;MAEjE;MAAA;MAAArE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,mBAAmB5D,IAAA,CAAKC,GAAG,IAAI;QACvC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQkE,eAAA,CAAgB9G,MAAM,GAAG;QAAA;QAAA,CAAAlD,cAAA,GAAAwD,CAAA,WAAI;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QAChDyE,KAAA,EAAO+B,eAAA,CAAgB9G,MAAM,GAAG;QAAA;QAAA,CAAAlD,cAAA,GAAAwD,CAAA,WAAI;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;QACzC0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAG6B,eAAA,CAAgB9G,MAAM,wBAAwB;UAC9DoF,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAawB,eAAA,CAAgB9G,MAAM,KAAK;QAAA;QAAA,CAAAlD,cAAA,GAAAwD,CAAA,WACpC,CAAC,+BAA+B,iCAAiC,qBAAqB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACtF,CAAC,yCAAyC,4BAA4B;QAC1E4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,qBAAqB5D,IAAA,CAAKC,GAAG,IAAI;QACzC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQgE,cAAA;QAAA;QAAA,CAAA9J,cAAA,GAAAwD,CAAA,WAAiB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QACpCyE,KAAA,EAAO6B,cAAA;QAAA;QAAA,CAAA9J,cAAA,GAAAwD,CAAA,WAAiB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;QAC7B0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa2B,cAAA;UAAA;UAAA,CAAA9J,cAAA,GAAAwD,CAAA,WAAiB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAU;UACxC8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAasB,cAAA;QAAA;QAAA,CAAA9J,cAAA,GAAAwD,CAAA,WACT,CAAC,mBAAmB,kCAAkC;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACtD,CAAC,6BAA6B,+BAA+B,+BAA+B;QAChG4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACA,IAAIgG,GAAA,CAAIgE,QAAQ,CAAC,eAAe;QAAA;QAAAlK,cAAA,GAAAwD,CAAA;QAC9B,MAAM2G,gBAAA;QAAA;QAAA,CAAAnK,cAAA,GAAAE,CAAA,SAAmB8J,eAAA,CAAgBE,QAAQ,CAAC;QAAA;QAAAlK,cAAA,GAAAE,CAAA;QAClDmH,OAAA,CAAQX,IAAI,CAAC;UACXoB,MAAA,EAAQ,kBAAkB5D,IAAA,CAAKC,GAAG,IAAI;UACtC4D,QAAA,EAAU;UACVC,QAAA,EAAU;UACV9B,GAAA;UACAJ,MAAA,EAAQqE,gBAAA;UAAA;UAAA,CAAAnK,cAAA,GAAAwD,CAAA,WAAmB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;UACtCyE,KAAA,EAAOkC,gBAAA;UAAA;UAAA,CAAAnK,cAAA,GAAAwD,CAAA,WAAmB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;UAC/B0E,OAAA,EAAS;YACPvD,WAAA,EAAa;YACbsE,aAAA,EAAe;YACfd,WAAA,EAAagC,gBAAA;YAAA;YAAA,CAAAnK,cAAA,GAAAwD,CAAA,WAAmB;YAAA;YAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAA2B;YAC3D8E,MAAA,EAAQ;YACRC,QAAA,EAAU;UACZ;UACAC,WAAA,EAAa2B,gBAAA;UAAA;UAAA,CAAAnK,cAAA,GAAAwD,CAAA,WACT,CAAC,6BAA6B,8CAA8C;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5E,CAAC,sBAAsB,kCAAkC,yBAAyB;UACtF4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;UAC5BqB,SAAA,EAAW,IAAI/C,IAAA;QACjB;MACF;MAAA;MAAA;QAAAlE,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,uCAAuCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAEnGmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,gBAAgB5D,IAAA,CAAKC,GAAG,IAAI;QACpC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,4BAA4B,wCAAwC;QAClFpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcI,kBAAA,EAA8C;IAAA;IAAAzH,cAAA,GAAAC,CAAA;IAC1D,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,SAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAMkK,eAAA;MAAA;MAAA,CAAApK,cAAA,GAAAE,CAAA,SAAkB,OAAM;MAC9B,MAAMmK,cAAA;MAAA;MAAA,CAAArK,cAAA,GAAAE,CAAA,SAAiBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAC5C,MAAMiG,mBAAA;MAAA;MAAA,CAAAtK,cAAA,GAAAE,CAAA,SAAsBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAEjD;MAAA;MAAArE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,oBAAoB5D,IAAA,CAAKC,GAAG,IAAI;QACxC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA,EAAK;QACLJ,MAAA,EAAQsE,eAAA;QAAA;QAAA,CAAApK,cAAA,GAAAwD,CAAA,WAAkB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QACrCyE,KAAA,EAAOmC,eAAA;QAAA;QAAA,CAAApK,cAAA,GAAAwD,CAAA,WAAkB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAM;QAC/B0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAaiC,eAAA;UAAA;UAAA,CAAApK,cAAA,GAAAwD,CAAA,WAAkB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAgB;UAC/C8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa4B,eAAA;QAAA;QAAA,CAAApK,cAAA,GAAAwD,CAAA,WACT,CAAC,6BAA6B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC9B,CAAC,0BAA0B,0CAA0C;QACzE4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,IAAIkK,eAAA,EAAiB;QAAA;QAAApK,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QACnB;QACAmH,OAAA,CAAQX,IAAI,CAAC;UACXoB,MAAA,EAAQ,iBAAiB5D,IAAA,CAAKC,GAAG,IAAI;UACrC4D,QAAA,EAAU;UACVC,QAAA,EAAU;UACV9B,GAAA,EAAK;UACLJ,MAAA,EAAQuE,cAAA;UAAA;UAAA,CAAArK,cAAA,GAAAwD,CAAA,WAAiB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;UACpCyE,KAAA,EAAOoC,cAAA;UAAA;UAAA,CAAArK,cAAA,GAAAwD,CAAA,WAAiB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;UAC7B0E,OAAA,EAAS;YACPvD,WAAA,EAAa;YACbsE,aAAA,EAAe;YACfd,WAAA,EAAakC,cAAA;YAAA;YAAA,CAAArK,cAAA,GAAAwD,CAAA,WAAiB;YAAA;YAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAiB;YAC/C8E,MAAA,EAAQ;YACRC,QAAA,EAAU;UACZ;UACAC,WAAA,EAAa6B,cAAA;UAAA;UAAA,CAAArK,cAAA,GAAAwD,CAAA,WACT,CAAC,kBAAkB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACnB,CAAC,qBAAqB,uBAAuB,gCAAgC;UACjF4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;UAC5BqB,SAAA,EAAW,IAAI/C,IAAA;QACjB;QAEA;QAAA;QAAAlE,cAAA,GAAAE,CAAA;QACAmH,OAAA,CAAQX,IAAI,CAAC;UACXoB,MAAA,EAAQ,kBAAkB5D,IAAA,CAAKC,GAAG,IAAI;UACtC4D,QAAA,EAAU;UACVC,QAAA,EAAU;UACV9B,GAAA,EAAK;UACLJ,MAAA,EAAQwE,mBAAA;UAAA;UAAA,CAAAtK,cAAA,GAAAwD,CAAA,WAAsB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;UACzCyE,KAAA,EAAOqC,mBAAA;UAAA;UAAA,CAAAtK,cAAA,GAAAwD,CAAA,WAAsB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;UAClC0E,OAAA,EAAS;YACPvD,WAAA,EAAa;YACbsE,aAAA,EAAe;YACfd,WAAA,EAAamC,mBAAA;YAAA;YAAA,CAAAtK,cAAA,GAAAwD,CAAA,WAAsB;YAAA;YAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAA4B;YAC/D8E,MAAA,EAAQ;YACRC,QAAA,EAAU;UACZ;UACAC,WAAA,EAAa8B,mBAAA;UAAA;UAAA,CAAAtK,cAAA,GAAAwD,CAAA,WACT,CAAC,+BAA+B;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAChC,CAAC,uCAAuC,mCAAmC;UAC/E4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;UAC5BqB,SAAA,EAAW,IAAI/C,IAAA;QACjB;QAEA;QACA,MAAMqG,oBAAA;QAAA;QAAA,CAAAvK,cAAA,GAAAE,CAAA,SAAuBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;QAAA;QAAArE,cAAA,GAAAE,CAAA;QAClDmH,OAAA,CAAQX,IAAI,CAAC;UACXoB,MAAA,EAAQ,mBAAmB5D,IAAA,CAAKC,GAAG,IAAI;UACvC4D,QAAA,EAAU;UACVC,QAAA,EAAU;UACV9B,GAAA,EAAK;UACLJ,MAAA,EAAQyE,oBAAA;UAAA;UAAA,CAAAvK,cAAA,GAAAwD,CAAA,WAAuB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;UAC1CyE,KAAA,EAAOsC,oBAAA;UAAA;UAAA,CAAAvK,cAAA,GAAAwD,CAAA,WAAuB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;UACnC0E,OAAA,EAAS;YACPvD,WAAA,EAAa;YACbsE,aAAA,EAAe;YACfd,WAAA,EAAaoC,oBAAA;YAAA;YAAA,CAAAvK,cAAA,GAAAwD,CAAA,WAAuB;YAAA;YAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAA4B;YAChE8E,MAAA,EAAQiC,oBAAA;YAAA;YAAA,CAAAvK,cAAA,GAAAwD,CAAA,WAAuB;YAAA;YAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAa;YAC5C+E,QAAA,EAAU;UACZ;UACAC,WAAA,EAAa+B,oBAAA;UAAA;UAAA,CAAAvK,cAAA,GAAAwD,CAAA,WACT,CAAC,6CAA6C,gCAAgC,kCAAkC;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAChH,CAAC,iCAAiC;UACtC4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;UAC5BqB,SAAA,EAAW,IAAI/C,IAAA;QACjB;MACF;MAAA;MAAA;QAAAlE,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,kCAAkCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAE9FmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,gBAAgB5D,IAAA,CAAKC,GAAG,IAAI;QACpC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA,EAAK;QACLJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,kCAAkC,8BAA8B;QAC9EpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcM,sBAAsBzB,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IACzE,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,SAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAMsK,UAAA;MAAA;MAAA,CAAAxK,cAAA,GAAAE,CAAA,SAAakE,IAAA,CAAKqG,KAAK,CAACrG,IAAA,CAAKC,MAAM,KAAK,MAAM,KAAI;MACxD,MAAMtB,aAAA;MAAA;MAAA,CAAA/C,cAAA,GAAAE,CAAA,SAAgBkE,IAAA,CAAKqG,KAAK,CAACD,UAAA,GAAa,OAAM;MACpD,MAAME,aAAA;MAAA;MAAA,CAAA1K,cAAA,GAAAE,CAAA,SAAgBsK,UAAA,GAAazH,aAAA;MACnC,MAAM4H,WAAA;MAAA;MAAA,CAAA3K,cAAA,GAAAE,CAAA,SAAckE,IAAA,CAAKqG,KAAK,CAACrG,IAAA,CAAKC,MAAM,KAAK,KAAI;MACnD,MAAMuG,aAAA;MAAA;MAAA,CAAA5K,cAAA,GAAAE,CAAA,SAAgBkE,IAAA,CAAKqG,KAAK,CAACC,aAAA,GAAgB,OAAM;MAEvD;MACA,MAAMG,YAAA;MAAA;MAAA,CAAA7K,cAAA,GAAAE,CAAA;MAAe;MAAA,CAAAF,cAAA,GAAAwD,CAAA,WAAAT,aAAA,IAAiB,IAAI,CAACf,MAAM,CAACjB,UAAU,CAACM,uBAAuB;MAAA;MAAA,CAAArB,cAAA,GAAAwD,CAAA,WAChET,aAAA,IAAiB,IAAI,CAACf,MAAM,CAACjB,UAAU,CAACK,uBAAuB;MAAA;MAAApB,cAAA,GAAAE,CAAA;MAEnFmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,eAAe5D,IAAA,CAAKC,GAAG,IAAI;QACnC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ+E,YAAA;QAAA;QAAA,CAAA7K,cAAA,GAAAwD,CAAA,WAAe;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QAClCyE,KAAA,EAAO4C,YAAA;QAAA;QAAA,CAAA7K,cAAA,GAAAwD,CAAA,WAAe;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;QAC3B0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe,GAAG,IAAI,CAACjH,MAAM,CAACjB,UAAU,CAACM,uBAAuB,IAAI,IAAI,CAACW,MAAM,CAACjB,UAAU,CAACK,uBAAuB,iBAAiB;UACnI+G,WAAA,EAAa,GAAGpF,aAAA,iBAA8B;UAC9CuF,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAazF,aAAA,GAAgB,IAAI,CAACf,MAAM,CAACjB,UAAU,CAACM,uBAAuB;QAAA;QAAA,CAAArB,cAAA,GAAAwD,CAAA,WACvE,CAAC,2BAA2B,2BAA2B,qBAAqB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5ET,aAAA,GAAgB,IAAI,CAACf,MAAM,CAACjB,UAAU,CAACK,uBAAuB;QAAA;QAAA,CAAApB,cAAA,GAAAwD,CAAA,WAC9D,CAAC,0BAA0B,iCAAiC,2BAA2B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACvF,CAAC,kCAAkC;QACvC4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,gBAAgB5D,IAAA,CAAKC,GAAG,IAAI;QACpC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ6E,WAAA,KAAgB;QAAA;QAAA,CAAA3K,cAAA,GAAAwD,CAAA,WAAI;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QACvCyE,KAAA,EAAO0C,WAAA,KAAgB;QAAA;QAAA,CAAA3K,cAAA,GAAAwD,CAAA,WAAI;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAMY,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAOH,WAAA,GAAc;QAClEzC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAGwC,WAAA,eAA0B;UAC1CrC,MAAA,EAAQqC,WAAA,GAAc;UAAA;UAAA,CAAA3K,cAAA,GAAAwD,CAAA,WAAI;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAS;UACnC+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAamC,WAAA,KAAgB;QAAA;QAAA,CAAA3K,cAAA,GAAAwD,CAAA,WACzB,CAAC,2BAA2B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5B,CAAC,oBAAoB,iCAAiC,0BAA0B;QACpF4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAM6G,kBAAA;MAAA;MAAA,CAAA/K,cAAA,GAAAE,CAAA,SAAqBkE,IAAA,CAAKqG,KAAK,CAAC1H,aAAA,GAAgB,OAAM;MAC5D,MAAMiI,cAAA;MAAA;MAAA,CAAAhL,cAAA,GAAAE,CAAA,SAAiB6C,aAAA,GAAgBgI,kBAAA;MAAA;MAAA/K,cAAA,GAAAE,CAAA;MAEvCmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,iBAAiB5D,IAAA,CAAKC,GAAG,IAAI;QACrC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQiF,kBAAA,GAAqBhI,aAAA,GAAgB;QAAA;QAAA,CAAA/C,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QAC9DyE,KAAA,EAAO7D,IAAA,CAAK6G,KAAK,CAACF,kBAAC,GAAqBhI,aAAA,GAAiB;QACzDmF,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAG/D,IAAA,CAAK6G,KAAK,CAACF,kBAAC,GAAqBhI,aAAA,GAAiB,mBAAmB;UACrFuF,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAauC,kBAAA,GAAqBhI,aAAA,GAAgB;QAAA;QAAA,CAAA/C,cAAA,GAAAwD,CAAA,WAC9C,CAAC,sCAAsC;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACvC,CAAC,oCAAoC,yCAAyC,4BAA4B;QAC9G4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAMgH,kBAAA;MAAA;MAAA,CAAAlL,cAAA,GAAAE,CAAA,SAAqBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAAA;MAAArE,cAAA,GAAAE,CAAA;MAChDmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,mBAAmB5D,IAAA,CAAKC,GAAG,IAAI;QACvC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQoF,kBAAA;QAAA;QAAA,CAAAlL,cAAA,GAAAwD,CAAA,WAAqB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QACxCyE,KAAA,EAAOiD,kBAAA;QAAA;QAAA,CAAAlL,cAAA,GAAAwD,CAAA,WAAqB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;QACjC0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa+C,kBAAA;UAAA;UAAA,CAAAlL,cAAA,GAAAwD,CAAA,WAAqB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAmB;UACrD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa0C,kBAAA;QAAA;QAAA,CAAAlL,cAAA,GAAAwD,CAAA,WACT,CAAC,oCAAoC;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACrC,CAAC,0BAA0B,iCAAiC,6BAA6B;QAC7F4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,sCAAsCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAElGmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,eAAe5D,IAAA,CAAKC,GAAG,IAAI;QACnC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,4BAA4B,uBAAuB;QACjEpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcO,mBAAmB1B,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IACtE,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,SAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAMiL,QAAA;MAAA;MAAA,CAAAnL,cAAA,GAAAE,CAAA;MAAW;MAAA,CAAAF,cAAA,GAAAwD,CAAA,WAAA0C,GAAA,CAAIkF,UAAU,CAAC;MAAA;MAAA,CAAApL,cAAA,GAAAwD,CAAA,WAAe,CAAC0C,GAAA,CAAIkF,UAAU,CAAC;MAAA;MAAApL,cAAA,GAAAE,CAAA;MAC/DmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,oBAAoB5D,IAAA,CAAKC,GAAG,IAAI;QACxC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQqF,QAAA;QAAA;QAAA,CAAAnL,cAAA,GAAAwD,CAAA,WAAW;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QAC9ByE,KAAA,EAAOkD,QAAA;QAAA;QAAA,CAAAnL,cAAA,GAAAwD,CAAA,WAAW;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAM;QACxB0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAagD,QAAA;UAAA;UAAA,CAAAnL,cAAA,GAAAwD,CAAA,WAAW;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAkB;UAC1C8E,MAAA,EAAQ6C,QAAA;UAAA;UAAA,CAAAnL,cAAA,GAAAwD,CAAA,WAAW;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UAC3B+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa2C,QAAA;QAAA;QAAA,CAAAnL,cAAA,GAAAwD,CAAA,WACT,CAAC,gCAAgC;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACjC,CAAC,mBAAmB,2BAA2B,yBAAyB;QAC5E4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAMmH,gBAAA;MAAA;MAAA,CAAArL,cAAA,GAAAE,CAAA,SAAmBkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAAA;MAAArE,cAAA,GAAAE,CAAA;MAC9CmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,qBAAqB5D,IAAA,CAAKC,GAAG,IAAI;QACzC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQuF,gBAAA;QAAA;QAAA,CAAArL,cAAA,GAAAwD,CAAA,WAAmB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW;QACtCyE,KAAA,EAAOoD,gBAAA;QAAA;QAAA,CAAArL,cAAA,GAAAwD,CAAA,WAAmB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAK;QAC/B0E,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAakD,gBAAA;UAAA;UAAA,CAAArL,cAAA,GAAAwD,CAAA,WAAmB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAoB;UACpD8E,MAAA,EAAQ+C,gBAAA;UAAA;UAAA,CAAArL,cAAA,GAAAwD,CAAA,WAAmB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UACnC+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa6C,gBAAA;QAAA;QAAA,CAAArL,cAAA,GAAAwD,CAAA,WACT,CAAC,0BAA0B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC3B,CAAC,+BAA+B,yBAAyB,qBAAqB;QAClF4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAMoH,kBAAA;MAAA;MAAA,CAAAtL,cAAA,GAAAE,CAAA,SAAqBkE,IAAA,CAAKqG,KAAK,CAACrG,IAAA,CAAKC,MAAM,KAAK,MAAM,KAAI;MAAA;MAAArE,cAAA,GAAAE,CAAA;MAChEmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,4BAA4B5D,IAAA,CAAKC,GAAG,IAAI;QAChD4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQwF,kBAAA,IAAsB;QAAA;QAAA,CAAAtL,cAAA,GAAAwD,CAAA,WAAK;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW8H,kBAAA,IAAsB;QAAA;QAAA,CAAAtL,cAAA,GAAAwD,CAAA,WAAK;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QACrFyE,KAAA,EAAOqD,kBAAA;QACPpD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAGmD,kBAAA,uBAAyC;UACzDhD,MAAA,EAAQgD,kBAAA,IAAsB;UAAA;UAAA,CAAAtL,cAAA,GAAAwD,CAAA,WAAK;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UAC3C+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa8C,kBAAA,IAAsB;QAAA;QAAA,CAAAtL,cAAA,GAAAwD,CAAA,WAC/B,CAAC,gCAAgC;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACjC,CAAC,0BAA0B,0BAA0B,mBAAmB,6BAA6B;QACzG4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAMqH,QAAA;MAAA;MAAA,CAAAvL,cAAA,GAAAE,CAAA,SAAWkE,IAAA,CAAKqG,KAAK,CAACrG,IAAA,CAAKC,MAAM,KAAK,QAAQ,OAAM;MAC1D,MAAMmH,cAAA;MAAA;MAAA,CAAAxL,cAAA,GAAAE,CAAA,SAAiBqL,QAAA,IAAY,IAAI,CAACvJ,MAAM,CAACjB,UAAU,CAACO,eAAe;MAAA;MAAAtB,cAAA,GAAAE,CAAA;MAEzEmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,oBAAoB5D,IAAA,CAAKC,GAAG,IAAI;QACxC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ0F,cAAA;QAAA;QAAA,CAAAxL,cAAA,GAAAwD,CAAA,WAAiB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAW+H,QAAA,IAAY,IAAI,CAACvJ,MAAM,CAACjB,UAAU,CAACO,eAAe,GAAG;QAAA;QAAA,CAAAtB,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QAC3GyE,KAAA,EAAO7D,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAM1G,IAAA,CAAKqG,KAAK,CAAC,CAACc,QAAA,GAAW,IAAG,IAAK;QACxDrD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe,IAAI,IAAI,CAACjH,MAAM,CAACjB,UAAU,CAACO,eAAe,cAAc;UACvE6G,WAAA,EAAa,GAAGoD,QAAA,cAAsB;UACtCjD,MAAA,EAAQkD,cAAA;UAAA;UAAA,CAAAxL,cAAA,GAAAwD,CAAA,WAAiB;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UACjC+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAagD,cAAA;QAAA;QAAA,CAAAxL,cAAA,GAAAwD,CAAA,WACT,CAAC,6BAA6B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC9B,CAAC,mBAAmB,iBAAiB,WAAW,sBAAsB,8BAA8B;QACxG4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,kCAAkCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAE9FmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,oBAAoB5D,IAAA,CAAKC,GAAG,IAAI;QACxC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,4BAA4B,6BAA6B;QACvEpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;;;EAGA,MAAcQ,oBAAoB3B,GAAW,EAA4B;IAAA;IAAAlG,cAAA,GAAAC,CAAA;IACvE,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,SAAYgE,IAAA,CAAKC,GAAG;IAC1B,MAAMkD,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MACF;MACA,MAAMuL,GAAA;MAAA;MAAA,CAAAzL,cAAA,GAAAE,CAAA,SAAMkE,IAAA,CAAKC,MAAM,KAAK,IAAI,MAAK;MACrC,MAAMqH,GAAA;MAAA;MAAA,CAAA1L,cAAA,GAAAE,CAAA,SAAMkE,IAAA,CAAKC,MAAM,KAAK,MAAM,KAAI;MACtC,MAAMsH,GAAA;MAAA;MAAA,CAAA3L,cAAA,GAAAE,CAAA,SAAMkE,IAAA,CAAKC,MAAM,KAAK,MAAK;MAEjC;MAAA;MAAArE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,YAAY5D,IAAA,CAAKC,GAAG,IAAI;QAChC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ2F,GAAA,IAAO;QAAA;QAAA,CAAAzL,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAWiI,GAAA,IAAO;QAAA;QAAA,CAAAzL,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QACzDyE,KAAA,EAAO7D,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAM1G,IAAA,CAAKqG,KAAK,CAAC,CAACgB,GAAA,GAAM,GAAE,IAAK;QAClDvD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAGsD,GAAA,CAAIG,OAAO,CAAC,YAAY;UACxCtD,MAAA,EAAQmD,GAAA,IAAO;UAAA;UAAA,CAAAzL,cAAA,GAAAwD,CAAA,WAAM;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UAC7B+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAaiD,GAAA,IAAO;QAAA;QAAA,CAAAzL,cAAA,GAAAwD,CAAA,WAChB,CAAC,2BAA2B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5B,CAAC,oCAAoC,8BAA8B,mBAAmB,UAAU;QACpG4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,YAAY5D,IAAA,CAAKC,GAAG,IAAI;QAChC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ4F,GAAA,IAAO;QAAA;QAAA,CAAA1L,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAWkI,GAAA,IAAO;QAAA;QAAA,CAAA1L,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QACzDyE,KAAA,EAAO7D,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAM1G,IAAA,CAAKqG,KAAK,CAAC,CAACiB,GAAA,GAAM,GAAE,IAAK;QAClDxD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAa,GAAGuD,GAAA,CAAIE,OAAO,CAAC,iBAAiB;UAC7CtD,MAAA,EAAQoD,GAAA,IAAO;UAAA;UAAA,CAAA1L,cAAA,GAAAwD,CAAA,WAAM;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UAC7B+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAakD,GAAA,IAAO;QAAA;QAAA,CAAA1L,cAAA,GAAAwD,CAAA,WAChB,CAAC,2BAA2B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5B,CAAC,oCAAoC,oBAAoB,mBAAmB,+BAA+B;QAC/G4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,YAAY5D,IAAA,CAAKC,GAAG,IAAI;QAChC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ6F,GAAA,IAAO;QAAA;QAAA,CAAA3L,cAAA,GAAAwD,CAAA,WAAM;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAWmI,GAAA,IAAO;QAAA;QAAA,CAAA3L,cAAA,GAAAwD,CAAA,WAAO;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QAC1DyE,KAAA,EAAO7D,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAM1G,IAAA,CAAKqG,KAAK,CAACkB,GAAA,GAAM;QAC1CzD,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe;UACfd,WAAA,EAAawD,GAAA,CAAIC,OAAO,CAAC;UACzBtD,MAAA,EAAQqD,GAAA,IAAO;UAAA;UAAA,CAAA3L,cAAA,GAAAwD,CAAA,WAAM;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UAC7B+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAamD,GAAA,IAAO;QAAA;QAAA,CAAA3L,cAAA,GAAAwD,CAAA,WAChB,CAAC,2BAA2B;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAC5B,CAAC,wCAAwC,yBAAyB,iDAAiD;QACvH4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAEA;MACA,MAAM2H,QAAA;MAAA;MAAA,CAAA7L,cAAA,GAAAE,CAAA,SAAWkE,IAAA,CAAKqG,KAAK,CAACrG,IAAA,CAAKC,MAAM,KAAK,MAAM,KAAI;MAAA;MAAArE,cAAA,GAAAE,CAAA;MACtDmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,kBAAkB5D,IAAA,CAAKC,GAAG,IAAI;QACtC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ+F,QAAA,IAAY,IAAI,CAAC7J,MAAM,CAACjB,UAAU,CAACQ,WAAW;QAAA;QAAA,CAAAvB,cAAA,GAAAwD,CAAA,WAAG;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAWqI,QAAA,IAAY;QAAA;QAAA,CAAA7L,cAAA,GAAAwD,CAAA,WAAK;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAY;QACjGyE,KAAA,EAAO4D,QAAA;QACP3D,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbsE,aAAA,EAAe,IAAI,IAAI,CAACjH,MAAM,CAACjB,UAAU,CAACQ,WAAW,YAAY;UACjE4G,WAAA,EAAa,GAAG0D,QAAA,YAAoB;UACpCvD,MAAA,EAAQuD,QAAA,IAAY,IAAI,CAAC7J,MAAM,CAACjB,UAAU,CAACQ,WAAW;UAAA;UAAA,CAAAvB,cAAA,GAAAwD,CAAA,WAAG;UAAA;UAAA,CAAAxD,cAAA,GAAAwD,CAAA,WAAQ;UACjE+E,QAAA,EAAU;QACZ;QACAC,WAAA,EAAaqD,QAAA,IAAY,IAAI,CAAC7J,MAAM,CAACjB,UAAU,CAACQ,WAAW;QAAA;QAAA,CAAAvB,cAAA,GAAAwD,CAAA,WACvD,CAAC,oBAAoB;QAAA;QAAA,CAAAxD,cAAA,GAAAwD,CAAA,WACrB,CAAC,iCAAiC,uBAAuB,oBAAoB,uBAAuB;QACxG4B,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,mCAAmCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAE/FmH,OAAA,CAAQX,IAAI,CAAC;QACXoB,MAAA,EAAQ,cAAc5D,IAAA,CAAKC,GAAG,IAAI;QAClC4D,QAAA,EAAU;QACVC,QAAA,EAAU;QACV9B,GAAA;QACAJ,MAAA,EAAQ;QACRmC,KAAA,EAAO;QACPC,OAAA,EAAS;UACPvD,WAAA,EAAa;UACbwD,WAAA,EAAavE,KAAA,YAAiBwE,KAAA;UAAA;UAAA,CAAApI,cAAA,GAAAwD,CAAA,WAAQI,KAAA,CAAMyE,OAAO;UAAA;UAAA,CAAArI,cAAA,GAAAwD,CAAA,WAAG;UACtD8E,MAAA,EAAQ;UACRC,QAAA,EAAU;QACZ;QACAC,WAAA,EAAa,CAAC,4BAA4B,8BAA8B;QACxEpD,aAAA,EAAelB,IAAA,CAAKC,GAAG,KAAKyB,SAAA;QAC5BqB,SAAA,EAAW,IAAI/C,IAAA;MACjB;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MAEA,OAAOmH,OAAA;IACT;EACF;EAEA;EACA;EACA;EAEQyB,cAAcC,KAAc,EAAmC;IAAA;IAAA/I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrE,IAAI,CAAC6I,KAAA,EAAO;MAAA;MAAA/I,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAC7B,MAAMN,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAS6I,KAAA,CAAM7F,MAAM;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAC3B;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAN,MAAA,IAAU,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACC,cAAc;IAAA;IAAA,CAAAhB,cAAA,GAAAwD,CAAA,YAAIN,MAAA,IAAU,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACE,cAAc,GAAE;MAAA;MAAAjB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACtG,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,OAAO;EACT;EAEQ8I,oBAAoBD,KAAc,EAAU;IAAA;IAAA/I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClD,IAAI,CAAC6I,KAAA,EAAO;MAAA;MAAA/I,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAE;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IACtB,MAAMN,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAS6I,KAAA,CAAM7F,MAAM;IAC3B,MAAM4I,OAAA;IAAA;IAAA,CAAA9L,cAAA,GAAAE,CAAA,SAAU,CAAC,IAAI,CAAC8B,MAAM,CAACjB,UAAU,CAACC,cAAc,GAAG,IAAI,CAACgB,MAAM,CAACjB,UAAU,CAACE,cAAc,IAAI;IAClG,MAAM8K,SAAA;IAAA;IAAA,CAAA/L,cAAA,GAAAE,CAAA,SAAYkE,IAAA,CAAK4H,GAAG,CAAC9I,MAAA,GAAS4I,OAAA;IAAA;IAAA9L,cAAA,GAAAE,CAAA;IACpC,OAAOkE,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAMiB,SAAA,GAAY;EACvC;EAEQ7C,oBAAoBH,KAAc,EAAY;IAAA;IAAA/I,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpD,IAAI,CAAC6I,KAAA,EAAO;MAAA;MAAA/I,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO,CAAC,mBAAmB,4BAA4B,sBAAsB;IAAC;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAE3F,MAAMgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAE,CAAA,SAAc,EAAE;IACtB,MAAMgD,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAAS6I,KAAA,CAAM7F,MAAM;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAE3B,IAAIgD,MAAA,GAAS,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACC,cAAc,EAAE;MAAA;MAAAhB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAClDsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,IAAIgD,MAAA,GAAS,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACE,cAAc,EAAE;MAAA;MAAAjB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAClDsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,aAACuF,KAAA,CAAMmB,QAAQ,CAAC;IAAA;IAAA,CAAAlK,cAAA,GAAAwD,CAAA,YAAQ,CAACuF,KAAA,CAAMmB,QAAQ,CAAC,OAAM;MAAA;MAAAlK,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAChDsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEA,OAAOsI,WAAA,CAAYtF,MAAM,GAAG;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAIgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAwD,CAAA,YAAc,CAAC,mBAAmB;EACpE;EAEQ2F,oBAAoBxE,WAAoB,EAAmC;IAAA;IAAA3E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjF,IAAI,CAACyE,WAAA,EAAa;MAAA;MAAA3E,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IACnC,MAAMN,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAASyE,WAAA,CAAYzB,MAAM;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IACjC;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAN,MAAA,IAAU,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACG,oBAAoB;IAAA;IAAA,CAAAlB,cAAA,GAAAwD,CAAA,YAAIN,MAAA,IAAU,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACI,oBAAoB,GAAE;MAAA;MAAAnB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAClH,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,OAAO;EACT;EAEQkJ,0BAA0BzE,WAAoB,EAAU;IAAA;IAAA3E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9D,IAAI,CAACyE,WAAA,EAAa;MAAA;MAAA3E,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAE;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAC5B,MAAMN,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAASyE,WAAA,CAAYzB,MAAM;IACjC,MAAM4I,OAAA;IAAA;IAAA,CAAA9L,cAAA,GAAAE,CAAA,SAAU,CAAC,IAAI,CAAC8B,MAAM,CAACjB,UAAU,CAACG,oBAAoB,GAAG,IAAI,CAACc,MAAM,CAACjB,UAAU,CAACI,oBAAoB,IAAI;IAC9G,MAAM4K,SAAA;IAAA;IAAA,CAAA/L,cAAA,GAAAE,CAAA,SAAYkE,IAAA,CAAK4H,GAAG,CAAC9I,MAAA,GAAS4I,OAAA;IAAA;IAAA9L,cAAA,GAAAE,CAAA;IACpC,OAAOkE,IAAA,CAAK0G,GAAG,CAAC,GAAG,MAAMiB,SAAA;EAC3B;EAEQ1C,0BAA0B1E,WAAoB,EAAY;IAAA;IAAA3E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAChE,IAAI,CAACyE,WAAA,EAAa;MAAA;MAAA3E,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO,CAAC,0BAA0B,0BAA0B,wBAAwB;IAAC;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAExG,MAAMgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAE,CAAA,SAAc,EAAE;IACtB,MAAMgD,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,SAASyE,WAAA,CAAYzB,MAAM;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAEjC,IAAIgD,MAAA,GAAS,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACG,oBAAoB,EAAE;MAAA;MAAAlB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACxDsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,IAAIgD,MAAA,GAAS,IAAI,CAAClB,MAAM,CAACjB,UAAU,CAACI,oBAAoB,EAAE;MAAA;MAAAnB,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACxDsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,aAACmB,WAAA,CAAYuF,QAAQ,CAAC;IAAA;IAAA,CAAAlK,cAAA,GAAAwD,CAAA,YAAQ,CAACmB,WAAA,CAAYuF,QAAQ,CAAC,OAAM;MAAA;MAAAlK,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAC5DsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEA,OAAOsI,WAAA,CAAYtF,MAAM,GAAG;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAIgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAwD,CAAA,YAAc,CAAC,yBAAyB;EAC1E;EAEQ8F,iBAAiBC,QAAmB,EAAmC;IAAA;IAAAvJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC7E;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,aAAC+F,QAAA;IAAA;IAAA,CAAAvJ,cAAA,GAAAwD,CAAA,YAAY+F,QAAA,CAASrG,MAAM,KAAK,IAAG;MAAA;MAAAlD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAU;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAC1D;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAA+F,QAAA,CAASrG,MAAM,IAAI;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAK+F,QAAA,CAASrG,MAAM,IAAI,IAAG;MAAA;MAAAlD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACnE,OAAO;EACT;EAEQsJ,uBAAuBD,QAAmB,EAAU;IAAA;IAAAvJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACqJ,QAAA,EAAU;MAAA;MAAAvJ,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAG;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAC1B,MAAMyI,KAAA;IAAA;IAAA,CAAAjM,cAAA,GAAAE,CAAA,SAAQqJ,QAAA,CAASrG,MAAM;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAC7B;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAyI,KAAA,IAAS;IAAA;IAAA,CAAAjM,cAAA,GAAAwD,CAAA,YAAKyI,KAAA,IAAS,IAAG;MAAA;MAAAjM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAG;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzC;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAyI,KAAA,IAAS;IAAA;IAAA,CAAAjM,cAAA,GAAAwD,CAAA,YAAKyI,KAAA,IAAS,IAAG;MAAA;MAAAjM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAG;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzC,OAAO;EACT;EAEQuJ,uBAAuBF,QAAmB,EAAY;IAAA;IAAAvJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC5D;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,aAAC+F,QAAA;IAAA;IAAA,CAAAvJ,cAAA,GAAAwD,CAAA,YAAY+F,QAAA,CAASrG,MAAM,KAAK,IAAG;MAAA;MAAAlD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACtC,OAAO,CAAC,yBAAyB,yCAAyC;IAC5E;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAEA,MAAMgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAE,CAAA,SAAc,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACtB,IAAIqJ,QAAA,CAASrG,MAAM,GAAG,GAAG;MAAA;MAAAlD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACvBsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACA,IAAIqJ,QAAA,CAASrG,MAAM,GAAG,GAAG;MAAA;MAAAlD,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MACvBsI,WAAA,CAAY9B,IAAI,CAAC;IACnB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEA,OAAOsI,WAAA,CAAYtF,MAAM,GAAG;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAIgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAwD,CAAA,YAAc,CAAC,qBAAqB;EACtE;EAEQkG,kBAAkB9G,QAAa,EAAmC;IAAA;IAAA5C,cAAA,GAAAC,CAAA;IACxE,MAAMiM,UAAA;IAAA;IAAA,CAAAlM,cAAA,GAAAE,CAAA,SAAa,CAAC,CAAC0C,QAAA,CAASuJ,OAAO;IACrC,MAAMC,gBAAA;IAAA;IAAA,CAAApM,cAAA,GAAAE,CAAA,SAAmB,CAAC,CAAC0C,QAAA,CAASyJ,aAAa;IACjD,MAAMC,UAAA;IAAA;IAAA,CAAAtM,cAAA,GAAAE,CAAA,SAAa,CAAC,CAAC0C,QAAA,CAAS2J,OAAO;IAAA;IAAAvM,cAAA,GAAAE,CAAA;IAErC;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAA0I,UAAA;IAAA;IAAA,CAAAlM,cAAA,GAAAwD,CAAA,YAAc4I,gBAAA;IAAA;IAAA,CAAApM,cAAA,GAAAwD,CAAA,YAAoB8I,UAAA,GAAY;MAAA;MAAAtM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAS;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACnE;IAAI;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAA0I,UAAA;IAAA;IAAA,CAAAlM,cAAA,GAAAwD,CAAA,YAAc4I,gBAAA,GAAkB;MAAA;MAAApM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAU;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACtD,OAAO;EACT;EAEQyJ,wBAAwB/G,QAAa,EAAU;IAAA;IAAA5C,cAAA,GAAAC,CAAA;IACrD,IAAIgI,KAAA;IAAA;IAAA,CAAAjI,cAAA,GAAAE,CAAA,SAAQ;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACZ,IAAI0C,QAAA,CAASuJ,OAAO,EAAE;MAAA;MAAAnM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC+H,KAAA,IAAS;IAAG;IAAA;IAAA;MAAAjI,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACnC,IAAI0C,QAAA,CAASyJ,aAAa,EAAE;MAAA;MAAArM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC+H,KAAA,IAAS;IAAG;IAAA;IAAA;MAAAjI,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzC,IAAI0C,QAAA,CAAS2J,OAAO,EAAE;MAAA;MAAAvM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC+H,KAAA,IAAS;IAAG;IAAA;IAAA;MAAAjI,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACnC,IAAI0C,QAAA,CAAS4J,KAAK,EAAE;MAAA;MAAAxM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC+H,KAAA,IAAS;IAAG;IAAA;IAAA;MAAAjI,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACjC,OAAO+H,KAAA;EACT;EAEQ2B,mBAAmBhH,QAAa,EAAU;IAAA;IAAA5C,cAAA,GAAAC,CAAA;IAChD,MAAMwM,IAAA;IAAA;IAAA,CAAAzM,cAAA,GAAAE,CAAA,SAAO,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACf,IAAI0C,QAAA,CAASuJ,OAAO,EAAE;MAAA;MAAAnM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACuM,IAAA,CAAK/F,IAAI,CAAC;IAAY;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAC7C,IAAI0C,QAAA,CAASyJ,aAAa,EAAE;MAAA;MAAArM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACuM,IAAA,CAAK/F,IAAI,CAAC;IAAkB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzD,IAAI0C,QAAA,CAAS2J,OAAO,EAAE;MAAA;MAAAvM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACuM,IAAA,CAAK/F,IAAI,CAAC;IAAY;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAC7C,IAAI0C,QAAA,CAAS4J,KAAK,EAAE;MAAA;MAAAxM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACuM,IAAA,CAAK/F,IAAI,CAAC;IAAU;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzC,OAAOuM,IAAA,CAAKvJ,MAAM,GAAG;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAIiJ,IAAA,CAAKC,IAAI,CAAC;IAAA;IAAA,CAAA1M,cAAA,GAAAwD,CAAA,YAAQ;EAC7C;EAEQqG,wBAAwBjH,QAAa,EAAY;IAAA;IAAA5C,cAAA,GAAAC,CAAA;IACvD,MAAMuI,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAE,CAAA,SAAc,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACtB,IAAI,CAAC0C,QAAA,CAASuJ,OAAO,EAAE;MAAA;MAAAnM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACsI,WAAA,CAAY9B,IAAI,CAAC;IAAoB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAC7D,IAAI,CAAC0C,QAAA,CAASyJ,aAAa,EAAE;MAAA;MAAArM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACsI,WAAA,CAAY9B,IAAI,CAAC;IAA0B;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IACzE,IAAI,CAAC0C,QAAA,CAAS2J,OAAO,EAAE;MAAA;MAAAvM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACsI,WAAA,CAAY9B,IAAI,CAAC;IAAoB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAC7D,IAAI,CAAC0C,QAAA,CAAS4J,KAAK,EAAE;MAAA;MAAAxM,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAACsI,WAAA,CAAY9B,IAAI,CAAC;IAAkB;IAAA;IAAA;MAAA1G,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEzD,OAAOsI,WAAA,CAAYtF,MAAM,GAAG;IAAA;IAAA,CAAAlD,cAAA,GAAAwD,CAAA,YAAIgF,WAAA;IAAA;IAAA,CAAAxI,cAAA,GAAAwD,CAAA,YAAc,CAAC,+BAA+B;EAChF;EAEA;EACA;EACA;EAEA;;;EAGA,MAAc6C,4BACZsG,QAAsB,EACtBC,KAAa,EACC;IAAA;IAAA5M,cAAA,GAAAC,CAAA;IACd,MAAMoH,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAAe,EAAE;IACvB,MAAM2M,SAAA;IAAA;IAAA,CAAA7M,cAAA,GAAAE,CAAA,SAA6B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAErC,KAAK,MAAM4M,OAAA,IAAWH,QAAA,EAAU;MAC9B,MAAMI,OAAA;MAAA;MAAA,CAAA/M,cAAA,GAAAE,CAAA,SAAU4M,OAAA,CAAQE,IAAI,CAACC,MAAA;QAAA;QAAAjN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAC3BmH,OAAA,CAAQX,IAAI,CAACuG,MAAA;MACf;MAAA;MAAAjN,cAAA,GAAAE,CAAA;MAEA2M,SAAA,CAAUnG,IAAI,CAACqG,OAAA;MAAA;MAAA/M,cAAA,GAAAE,CAAA;MAEf,IAAI2M,SAAA,CAAU3J,MAAM,IAAI0J,KAAA,EAAO;QAAA;QAAA5M,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QAC7B,MAAMgN,OAAA,CAAQC,IAAI,CAACN,SAAA;QAAA;QAAA7M,cAAA,GAAAE,CAAA;QACnB2M,SAAA,CAAUO,MAAM,CAACP,SAAA,CAAUQ,SAAS,CAACC,CAAA,IAAK;UAAA;UAAAtN,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UAAA,OAAAoN,CAAA,KAAMP,OAAA;QAAA,IAAU;MAC5D;MAAA;MAAA;QAAA/M,cAAA,GAAAwD,CAAA;MAAA;IACF;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEA,MAAMgN,OAAA,CAAQK,GAAG,CAACV,SAAA;IAAA;IAAA7M,cAAA,GAAAE,CAAA;IAClB,OAAOmH,OAAA;EACT;EAEA;;;EAGAd,gBAAQA,CAAiB3B,KAAsB,EAA2B;IAAA;IAAA5E,cAAA,GAAAC,CAAA;IACxE,MAAM6E,UAAA;IAAA;IAAA,CAAA9E,cAAA,GAAAE,CAAA,SAAa0E,KAAA,CAAM1B,MAAM;IAC/B,MAAM6B,MAAA;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,SAAS0E,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;MAAA;MAAAxN,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsN,CAAA,CAAE1H,MAAM,KAAK;IAAA,GAAU5C,MAAM;IAC9D,MAAM8B,MAAA;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,SAAS0E,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;MAAA;MAAAxN,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsN,CAAA,CAAE1H,MAAM,KAAK;IAAA,GAAU5C,MAAM;IAC9D,MAAM+B,QAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,SAAW0E,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;MAAA;MAAAxN,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsN,CAAA,CAAE1H,MAAM,KAAK;IAAA,GAAW5C,MAAM;IACjE,MAAMgC,OAAA;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,SAAU0E,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;MAAA;MAAAxN,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsN,CAAA,CAAE1H,MAAM,KAAK;IAAA,GAAW5C,MAAM;IAEhE,MAAMuK,UAAA;IAAA;IAAA,CAAAzN,cAAA,GAAAE,CAAA,SAAa0E,KAAA,CAAM8I,MAAM,CAAC,CAACC,GAAA,EAAKC,IAAA,KAAS;MAAA;MAAA5N,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyN,GAAA,GAAMC,IAAA,CAAK3F,KAAK;IAAL,CAAK,EAAE;IACjE,MAAM9C,YAAA;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,SAAe4E,UAAA,GAAa;IAAA;IAAA,CAAA9E,cAAA,GAAAwD,CAAA,YAAIY,IAAA,CAAK6G,KAAK,CAACwC,UAAA,GAAa3I,UAAA;IAAA;IAAA,CAAA9E,cAAA,GAAAwD,CAAA,YAAc;IAE5E,MAAMqK,kBAAA;IAAA;IAAA,CAAA7N,cAAA,GAAAE,CAAA,SAAqB0E,KAAA,CAAM8I,MAAM,CAAC,CAACC,GAAA,EAAKC,IAAA,KAAS;MAAA;MAAA5N,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyN,GAAA,GAAMC,IAAA,CAAKxI,aAAa;IAAb,CAAa,EAAE;IAAA;IAAApF,cAAA,GAAAE,CAAA;IAEjF,OAAO;MACL4E,UAAA;MACAC,MAAA;MACAC,MAAA;MACAC,QAAA;MACAC,OAAA;MACAC,YAAA;MACAC,aAAA,EAAeyI;IACjB;EACF;EAEA;;;EAGArH,iBAAQA,CAAkB5B,KAAsB,EAA4B;IAAA;IAAA5E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1E,OAAO;MACLoF,aAAA,EAAeV,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAY9E,MAAM;MAClEqC,mBAAA,EAAqBX,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAmB9E,MAAM;MAC/EsC,cAAA,EAAgBZ,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAc9E,MAAM;MACrEuC,kBAAA,EAAoBb,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAkB9E,MAAM;MAC7EwC,eAAA,EAAiBd,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAc9E,MAAM;MACtEyC,gBAAA,EAAkBf,KAAA,CAAMqF,MAAM,CAACuD,CAAA,IAAK;QAAA;QAAAxN,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAsN,CAAA,CAAExF,QAAQ,KAAK;MAAA,GAAe9E;IACpE;EACF;EAEA;;;EAGA,MAAc4K,cAAcC,GAAW,EAAgB;IAAA;IAAA/N,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrD,IAAI,CAAC,IAAI,CAAC8B,MAAM,CAACN,YAAY,EAAE;MAAA;MAAA1B,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC,OAAO;IAAK;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAE5C,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAI,IAAI,CAACuD,KAAK,EAAE;QAAA;QAAAzD,cAAA,GAAAwD,CAAA;QACd,MAAMwK,MAAA;QAAA;QAAA,CAAAhO,cAAA,GAAAE,CAAA,SAAS,MAAM,IAAI,CAACuD,KAAK,CAAC2D,GAAG,CAAC,eAAe2G,GAAA,EAAK;QAAA;QAAA/N,cAAA,GAAAE,CAAA;QACxD,IAAI8N,MAAA,EAAQ;UAAA;UAAAhO,cAAA,GAAAwD,CAAA;UAAAxD,cAAA,GAAAE,CAAA;UACV,OAAO+N,IAAA,CAAKC,KAAK,CAACF,MAAA;QACpB;QAAA;QAAA;UAAAhO,cAAA,GAAAwD,CAAA;QAAA;MACF;MAAA;MAAA;QAAAxD,cAAA,GAAAwD,CAAA;MAAA;MAEA;MACA,MAAMwK,MAAA;MAAA;MAAA,CAAAhO,cAAA,GAAAE,CAAA,SAAS,IAAI,CAAC+B,KAAK,CAACmF,GAAG,CAAC2G,GAAA;MAAA;MAAA/N,cAAA,GAAAE,CAAA;MAC9B;MAAI;MAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAwK,MAAA;MAAA;MAAA,CAAAhO,cAAA,GAAAwD,CAAA,YAAUU,IAAA,CAAKC,GAAG,KAAK6J,MAAA,CAAO/G,SAAS,GAAG,IAAI,CAACjF,MAAM,CAACL,QAAQ,GAAG,OAAM;QAAA;QAAA3B,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QACzE,OAAO8N,MAAA,CAAOG,IAAI;MACpB;MAAA;MAAA;QAAAnO,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEA,OAAO;IAET,EAAE,OAAO0D,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACsB,IAAI,CAACvB,OAAA,CAAAG,QAAQ,CAACqB,IAAI,EAAE,yBAAyB,CAAC,GAAGxB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MACvE,OAAO;IACT;EACF;EAEA;;;EAGA,MAAc0G,cAAcmH,GAAW,EAAEI,IAAS,EAAiB;IAAA;IAAAnO,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjE,IAAI,CAAC,IAAI,CAAC8B,MAAM,CAACN,YAAY,EAAE;MAAA;MAAA1B,cAAA,GAAAwD,CAAA;MAAAxD,cAAA,GAAAE,CAAA;MAAC;IAAO;IAAA;IAAA;MAAAF,cAAA,GAAAwD,CAAA;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAEvC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAI,IAAI,CAACuD,KAAK,EAAE;QAAA;QAAAzD,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QACd,MAAM,IAAI,CAACuD,KAAK,CAAC2K,KAAK,CAAC,eAAeL,GAAA,EAAK,EAAE,IAAI,CAAC/L,MAAM,CAACL,QAAQ,EAAEsM,IAAA,CAAKI,SAAS,CAACF,IAAA;MACpF;MAAA;MAAA;QAAAnO,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,CAAC+B,KAAK,CAAC8D,GAAG,CAACgI,GAAA,EAAK;QAAEI,IAAA;QAAMlH,SAAA,EAAW/C,IAAA,CAAKC,GAAG;MAAG;IAEpD,EAAE,OAAOP,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACsB,IAAI,CAACvB,OAAA,CAAAG,QAAQ,CAACqB,IAAI,EAAE,sBAAsB,CAAC,GAAGxB,OAAA,CAAAc,WAAW,CAACC,GAAG;IACtE;EACF;EAEA;EACA;EACA;EAEA;;;EAGA,MAAaiL,eACXtG,QAAyG,EACzGhE,IAAe,EACW;IAAA;IAAAhE,cAAA,GAAAC,CAAA;IAC1B,MAAMuB,QAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAE,CAAA;IAAW;IAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAAQ,IAAA;IAAA;IAAA,CAAAhE,cAAA,GAAAwD,CAAA,YAAQ,IAAI,CAACxB,MAAM,CAACR,QAAQ;IAC7C,MAAM6F,OAAA;IAAA;IAAA,CAAArH,cAAA,GAAAE,CAAA,SAA2B,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEnC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,WAAWsF,QAAA,QAAgB,EAAE;QACtDA,QAAA;QACAxD,SAAA,EAAWhD,QAAA,CAAS0B;MACtB,GAAGZ,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAElB,KAAK,MAAMgG,GAAA,IAAO1E,QAAA,EAAU;QAC1B,IAAI4E,UAAA;QAAA;QAAA,CAAApG,cAAA,GAAAE,CAAA,SAA8B,EAAE;QAAA;QAAAF,cAAA,GAAAE,CAAA;QAEpC,QAAQ8H,QAAA;UACN,KAAK;YAAA;YAAAhI,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACHkG,UAAA,GAAa,MAAM,IAAI,CAACkB,gBAAgB,CAACpB,GAAA;YAAA;YAAAlG,cAAA,GAAAE,CAAA;YACzC;UACF,KAAK;YAAA;YAAAF,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACHkG,UAAA,GAAa,MAAM,IAAI,CAACmB,sBAAsB,CAACrB,GAAA;YAAA;YAAAlG,cAAA,GAAAE,CAAA;YAC/C;UACF,KAAK;YAAA;YAAAF,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACH;YAAI;YAAA,CAAAF,cAAA,GAAAwD,CAAA,YAAA0C,GAAA,KAAQ;YAAA;YAAA,CAAAlG,cAAA,GAAAwD,CAAA,YAAO0C,GAAA,KAAQ,KAAI;cAAA;cAAAlG,cAAA,GAAAwD,CAAA;cAAAxD,cAAA,GAAAE,CAAA;cAC7BkG,UAAA,GAAa,MAAM,IAAI,CAACqB,iBAAiB;YAC3C;YAAA;YAAA;cAAAzH,cAAA,GAAAwD,CAAA;YAAA;YAAAxD,cAAA,GAAAE,CAAA;YACA;UACF,KAAK;YAAA;YAAAF,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACHkG,UAAA,GAAa,MAAM,IAAI,CAACuB,qBAAqB,CAACzB,GAAA;YAAA;YAAAlG,cAAA,GAAAE,CAAA;YAC9C;UACF,KAAK;YAAA;YAAAF,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACHkG,UAAA,GAAa,MAAM,IAAI,CAACwB,kBAAkB,CAAC1B,GAAA;YAAA;YAAAlG,cAAA,GAAAE,CAAA;YAC3C;UACF,KAAK;YAAA;YAAAF,cAAA,GAAAwD,CAAA;YAAAxD,cAAA,GAAAE,CAAA;YACHkG,UAAA,GAAa,MAAM,IAAI,CAACyB,mBAAmB,CAAC3B,GAAA;YAAA;YAAAlG,cAAA,GAAAE,CAAA;YAC5C;QACJ;QAAA;QAAAF,cAAA,GAAAE,CAAA;QAEAmH,OAAA,CAAQX,IAAI,IAAIN,UAAA;MAClB;MAAA;MAAApG,cAAA,GAAAE,CAAA;MAEAoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,GAAGsF,QAAA,kBAA0B,EAAE;QACxDA,QAAA;QACAuG,QAAA,EAAUlH,OAAA,CAAQnE;MACpB,GAAGZ,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAElB,OAAOmH,OAAA;IAET,EAAE,OAAOzD,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,iBAAiBc,QAAA,QAAgB,EAAEpE,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAC/F,MAAM0D,KAAA;IACR;EACF;EAEA;;;EAGA4K,cAAOA,CAAe5B,KAAc,EAAkB;IAAA;IAAA5M,cAAA,GAAAC,CAAA;IACpD,MAAMwO,OAAA;IAAA;IAAA,CAAAzO,cAAA,GAAAE,CAAA,SAAU,C,GAAI,IAAI,CAACkC,WAAW,CAAC,CAACsM,OAAO,KAAI;IAAA;IAAA1O,cAAA,GAAAE,CAAA;IACjD,OAAO0M,KAAA;IAAA;IAAA,CAAA5M,cAAA,GAAAwD,CAAA,YAAQiL,OAAA,CAAQE,KAAK,CAAC,GAAG/B,KAAA;IAAA;IAAA,CAAA5M,cAAA,GAAAwD,CAAA,YAASiL,OAAA;EAC3C;EAEA;;;EAGAG,mBAAOA,CAAA,EAAsC;IAAA;IAAA5O,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3C,OAAO2O,KAAA,CAAMC,IAAI,CAAC,IAAI,CAAC3M,gBAAgB,CAAC4M,MAAM;EAChD;EAEA;;;EAGAC,eAAOA,CAAA,EAML;IAAA;IAAAhP,cAAA,GAAAC,CAAA;IACA,MAAMgP,QAAA;IAAA;IAAA,CAAAjP,cAAA,GAAAE,CAAA,SAAW,IAAI,CAACkC,WAAW,CAAC8M,OAAO,CAACC,KAAA,IAAS;MAAA;MAAAnP,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAiP,KAAA,CAAMvK,KAAK;IAAL,CAAK;IAE9D,MAAMwK,aAAA;IAAA;IAAA,CAAApP,cAAA,GAAAE,CAAA,SAAgB+O,QAAA,CAAS/L,MAAM;IACrC,MAAMmM,YAAA;IAAA;IAAA,CAAArP,cAAA,GAAAE,CAAA,SAAekP,aAAA,GAAgB;IAAA;IAAA,CAAApP,cAAA,GAAAwD,CAAA,YACjCY,IAAA,CAAK6G,KAAK,CAACgE,QAAA,CAASvB,MAAM,CAAC,CAACC,GAAA,EAAKC,IAAA,KAAS;MAAA;MAAA5N,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAyN,GAAA,GAAMC,IAAA,CAAK3F,KAAK;IAAL,CAAK,EAAE,KAAKmH,aAAA;IAAA;IAAA,CAAApP,cAAA,GAAAwD,CAAA,YACjE;IAEJ,MAAM8L,WAAA;IAAA;IAAA,CAAAtP,cAAA,GAAAE,CAAA,SAAc+O,QAAA,CAASvB,MAAM,CAAC,CAAC6B,GAAA,EAAK3B,IAAA;MAAA;MAAA5N,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACxCqP,GAAG,CAAC3B,IAAA,CAAK5F,QAAQ,CAAC,GAAG;MAAC;MAAA,CAAAhI,cAAA,GAAAwD,CAAA,YAAA+L,GAAG,CAAC3B,IAAA,CAAK5F,QAAQ,CAAC;MAAA;MAAA,CAAAhI,cAAA,GAAAwD,CAAA,YAAI,MAAK;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MACjD,OAAOqP,GAAA;IACT,GAAG,CAAC;IAEJ;IACA,MAAMC,gBAAA;IAAA;IAAA,CAAAxP,cAAA,GAAAE,CAAA,SAAmB,CACvB,4BACA,kBACA,sBACA,kBACA,mBACD;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAED,OAAO;MACLkP,aAAA;MACAC,YAAA;MACAG,gBAAA;MACAF,WAAA;MACAG,YAAA,EAAc,IAAI,CAACxN,KAAK,CAACyN,IAAI,GAAG;MAAA;MAAA,CAAA1P,cAAA,GAAAwD,CAAA,YAAI;MAAA;MAAA,CAAAxD,cAAA,GAAAwD,CAAA,YAAO,GAAE;IAC/C;EACF;EAEA;;;EAGAmM,SAAOA,CAAU3N,MAAiC,EAAQ;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxD,IAAI,CAAC8B,MAAM,GAAG;MAAE,GAAG,IAAI,CAACA,MAAM;MAAE,GAAGA;IAAO;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IAC1CoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,kCAAkC;MAC3DkN,WAAA,EAAaC,MAAA,CAAOC,IAAI,CAAC9N,MAAA;IAC3B,GAAGM,OAAA,CAAAc,WAAW,CAACC,GAAG;EACpB;EAEA;;;EAGA,MAAa0M,WAAA,EAA4B;IAAA;IAAA/P,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA,IAAI,IAAI,CAACuD,KAAK,EAAE;QAAA;QAAAzD,cAAA,GAAAwD,CAAA;QACd,MAAMsM,IAAA;QAAA;QAAA,CAAA9P,cAAA,GAAAE,CAAA,SAAO,MAAM,IAAI,CAACuD,KAAK,CAACqM,IAAI,CAAC;QAAA;QAAA9P,cAAA,GAAAE,CAAA;QACnC,IAAI4P,IAAA,CAAK5M,MAAM,GAAG,GAAG;UAAA;UAAAlD,cAAA,GAAAwD,CAAA;UAAAxD,cAAA,GAAAE,CAAA;UACnB,MAAM,IAAI,CAACuD,KAAK,CAACuM,GAAG,IAAIF,IAAA;QAC1B;QAAA;QAAA;UAAA9P,cAAA,GAAAwD,CAAA;QAAA;MACF;MAAA;MAAA;QAAAxD,cAAA,GAAAwD,CAAA;MAAA;MAEA;MAAAxD,cAAA,GAAAE,CAAA;MACA,IAAI,CAAC+B,KAAK,CAACgO,KAAK;MAAA;MAAAjQ,cAAA,GAAAE,CAAA;MAEhBoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,6BAA6B,CAAC,GAAGJ,OAAA,CAAAc,WAAW,CAACC,GAAG;IAE7E,EAAE,OAAOO,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACsB,IAAI,CAACvB,OAAA,CAAAG,QAAQ,CAACqB,IAAI,EAAE,wBAAwB,CAAC,GAAGxB,OAAA,CAAAc,WAAW,CAACC,GAAG;IACxE;EACF;EAEA;;;EAGA,MAAa6M,QAAA,EAAyB;IAAA;IAAAlQ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,MAAM,IAAI,CAAC6P,UAAU;MAAA;MAAA/P,cAAA,GAAAE,CAAA;MAErB,IAAI,CAACiC,gBAAgB,CAAC8N,KAAK;MAAA;MAAAjQ,cAAA,GAAAE,CAAA;MAC3B,IAAI,CAACkC,WAAW,GAAG,EAAE;MAAA;MAAApC,cAAA,GAAAE,CAAA;MAErB,IAAI,IAAI,CAACuD,KAAK,EAAE;QAAA;QAAAzD,cAAA,GAAAwD,CAAA;QAAAxD,cAAA,GAAAE,CAAA;QACd,IAAI,CAACuD,KAAK,GAAG;MACf;MAAA;MAAA;QAAAzD,cAAA,GAAAwD,CAAA;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAEAoC,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,QAAQ,CAACC,IAAI,EAAE,wCAAwC,CAAC,GAAGJ,OAAA,CAAAc,WAAW,CAACC,GAAG;IAExF,EAAE,OAAOO,KAAA,EAAO;MAAA;MAAA5D,cAAA,GAAAE,CAAA;MACdoC,OAAA,CAAAC,MAAM,CAACqB,KAAK,CAACtB,OAAA,CAAAG,QAAQ,CAACyE,KAAK,EAAE,sCAAsCtD,KAAA,EAAgBtB,OAAA,CAAAc,WAAW,CAACC,GAAG;IACpG;EACF;AACF;AAOO,MAAMjD,uBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,SAA0BH,uBAAA,CAAwBuD,WAAW","ignoreList":[]}