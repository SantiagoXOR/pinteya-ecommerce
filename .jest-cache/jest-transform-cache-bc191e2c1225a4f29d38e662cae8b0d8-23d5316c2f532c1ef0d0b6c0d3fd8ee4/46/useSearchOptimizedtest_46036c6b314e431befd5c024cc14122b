7981cfa09e456d3e6dd57347b8c8a1da
// ===================================
// TESTS: useSearchOptimized Hook - Sistema de búsqueda con TanStack Query
// ===================================
"use strict";
// ===================================
// MOCKS
// ===================================
// Mock API de productos
jest.mock('@/lib/api/products', ()=>({
        searchProducts: jest.fn()
    }));
// Mock useSearchNavigation
jest.mock('@/hooks/useSearchNavigation', ()=>({
        useSearchNavigation: jest.fn()
    }));
// Mock useSearchErrorHandler
jest.mock('@/hooks/useSearchErrorHandler', ()=>({
        useSearchErrorHandler: ()=>({
                currentError: null,
                isRetrying: false,
                retryCount: 0,
                handleError: jest.fn(),
                clearError: jest.fn(),
                retryManually: jest.fn(),
                executeWithRetry: jest.fn()
            })
    }));
// Mock useSearchToast
jest.mock('@/hooks/useSearchToast', ()=>({
        useSearchToast: ()=>({
                toasts: [],
                showSuccess: jest.fn(),
                showError: jest.fn(),
                showSuccessToast: jest.fn(),
                showInfoToast: jest.fn(),
                removeToast: jest.fn(),
                clearToasts: jest.fn()
            })
    }));
jest.mock('@tanstack/react-query', ()=>({
        ...jest.requireActual('@tanstack/react-query'),
        useQuery: (...args)=>mockUseQuery(...args)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useSearchOptimized = require("../../hooks/useSearchOptimized");
const _products = require("../../lib/api/products");
const _useSearchNavigation = require("../../hooks/useSearchNavigation");
const _testutils = require("../utils/test-utils");
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Mock TanStack Query useQuery para tests específicos
const mockUseQuery = jest.fn();
// ===================================
// SETUP
// ===================================
const mockNavigateToSearch = jest.fn();
const mockNavigateToProduct = jest.fn();
const mockPrefetchSearch = jest.fn();
const mockSearchProducts = _products.searchProducts;
const mockUseSearchNavigation = _useSearchNavigation.useSearchNavigation;
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockProductResults = [
    {
        id: '1',
        name: 'Pintura Sherwin Williams',
        category: {
            id: '1',
            name: 'Pinturas'
        },
        image_url: '/test-image.jpg',
        stock: 10,
        price: 1500
    },
    {
        id: '2',
        name: 'Rodillo Profesional',
        category: {
            id: '2',
            name: 'Herramientas'
        },
        image_url: '/test-image2.jpg',
        stock: 5,
        price: 800
    }
];
// Wrapper para tests usando las utilidades centralizadas
const createWrapper = ()=>{
    const queryClient = (0, _testutils.createTestQueryClient)();
    return (0, _testutils.createHookWrapper)(queryClient);
};
beforeEach(()=>{
    jest.clearAllMocks();
    // Mock useQuery por defecto (sin datos iniciales)
    mockUseQuery.mockReturnValue({
        data: null,
        error: null,
        isLoading: false,
        isError: false,
        isSuccess: false,
        isFetching: false,
        isStale: false,
        dataUpdatedAt: Date.now(),
        refetch: jest.fn()
    });
    // Mock useSearchNavigation
    mockUseSearchNavigation.mockReturnValue({
        navigateToSearch: mockNavigateToSearch,
        navigateToProduct: mockNavigateToProduct,
        navigateToCategory: jest.fn(),
        prefetchSearch: mockPrefetchSearch,
        prefetchProduct: jest.fn(),
        getCurrentSearchQuery: jest.fn(()=>''),
        getCurrentCategory: jest.fn(()=>''),
        buildSearchUrl: jest.fn(),
        router: {}
    });
    localStorageMock.getItem.mockReturnValue(null);
});
// ===================================
// TESTS
// ===================================
describe('useSearchOptimized Hook', ()=>{
    it('should initialize with default state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)(), {
            wrapper: createWrapper()
        });
        expect(result.current.query).toBe('');
        expect(result.current.results).toEqual([]);
        expect(result.current.suggestions).toEqual([]);
        expect(result.current.isLoading).toBe(false);
        expect(result.current.error).toBe(null);
        expect(result.current.hasSearched).toBe(false);
    });
    it('should accept custom options', ()=>{
        const onSearch = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)({
                debounceMs: 200,
                maxSuggestions: 5,
                onSearch
            }), {
            wrapper: createWrapper()
        });
        expect(typeof result.current.searchWithDebounce).toBe('function');
        expect(typeof result.current.executeSearch).toBe('function');
    });
    it('should perform debounced search', async ()=>{
        // Mock para que devuelva directamente el array como espera TanStack Query
        mockSearchProducts.mockResolvedValue({
            success: true,
            data: mockProductResults,
            pagination: {
                total: 2,
                page: 1,
                limit: 10,
                totalPages: 1
            }
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)({
                debounceMs: 50
            }), {
            wrapper: createWrapper()
        });
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('pintura');
        });
        // Esperar a que se ejecute el debounce y la query (optimizado)
        await (0, _react.waitFor)(()=>{
            expect(result.current.query).toBe('pintura');
        }, {
            timeout: 1000
        });
        // Esperar a que TanStack Query procese la respuesta (optimizado)
        await (0, _react.waitFor)(()=>{
            expect(mockSearchProducts).toHaveBeenCalledWith('pintura', 6);
        }, {
            timeout: 1000
        });
        // Por ahora, solo verificamos que el hook funciona básicamente
        // TODO: Arreglar integración con TanStack Query en tests
        expect(result.current.query).toBe('pintura');
        expect(typeof result.current.searchWithDebounce).toBe('function');
    });
    it('should execute search and navigate', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)(), {
            wrapper: createWrapper()
        });
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('pintura test');
        });
        expect(mockNavigateToSearch).toHaveBeenCalledWith('pintura test');
        expect(result.current.hasSearched).toBe(true);
    });
    it('should select suggestion and navigate to product', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)(), {
            wrapper: createWrapper()
        });
        const suggestion = {
            id: '1',
            type: 'product',
            title: 'Test Product',
            href: '/products/1'
        };
        await (0, _react.act)(async ()=>{
            result.current.selectSuggestion(suggestion);
        });
        expect(mockNavigateToProduct).toHaveBeenCalledWith('1');
    });
    it('should handle search errors gracefully', async ()=>{
        // Configurar mock de useQuery para simular error
        mockUseQuery.mockReturnValue({
            data: null,
            error: new Error('Network error'),
            isLoading: false,
            isError: true,
            isSuccess: false,
            isFetching: false,
            isStale: false,
            dataUpdatedAt: Date.now(),
            refetch: jest.fn()
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)({
                debounceMs: 50
            }), {
            wrapper: createWrapper()
        });
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('error query');
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.error).toBeTruthy();
        });
    });
    it('should save recent searches to localStorage', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)({
                saveRecentSearches: true
            }), {
            wrapper: createWrapper()
        });
        await (0, _react.act)(async ()=>{
            await result.current.executeSearch('test search');
        });
        expect(localStorageMock.setItem).toHaveBeenCalledWith('pinteya-recent-searches', expect.stringContaining('"test search"'));
    });
    it('should prefetch search results when enabled', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)({
                enablePrefetch: true,
                debounceMs: 50
            }), {
            wrapper: createWrapper()
        });
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('prefetch test');
        });
        expect(mockPrefetchSearch).toHaveBeenCalledWith('prefetch test');
    });
    it('should clear search state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)(), {
            wrapper: createWrapper()
        });
        (0, _react.act)(()=>{
            result.current.searchWithDebounce('test');
        });
        (0, _react.act)(()=>{
            result.current.clearSearch();
        });
        expect(result.current.query).toBe('');
        expect(result.current.hasSearched).toBe(false);
    });
    it('should provide navigation utilities', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchOptimized.useSearchOptimized)(), {
            wrapper: createWrapper()
        });
        expect(typeof result.current.navigateToSearch).toBe('function');
        expect(typeof result.current.navigateToProduct).toBe('function');
        expect(typeof result.current.prefetchSearchPage).toBe('function');
        expect(typeof result.current.buildSearchUrl).toBe('function');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlU2VhcmNoT3B0aW1pemVkLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFRFU1RTOiB1c2VTZWFyY2hPcHRpbWl6ZWQgSG9vayAtIFNpc3RlbWEgZGUgYsO6c3F1ZWRhIGNvbiBUYW5TdGFjayBRdWVyeVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcclxuaW1wb3J0IHsgdXNlU2VhcmNoT3B0aW1pemVkIH0gZnJvbSAnQC9ob29rcy91c2VTZWFyY2hPcHRpbWl6ZWQnO1xyXG5pbXBvcnQgeyBzZWFyY2hQcm9kdWN0cyB9IGZyb20gJ0AvbGliL2FwaS9wcm9kdWN0cyc7XHJcbmltcG9ydCB7IHVzZVNlYXJjaE5hdmlnYXRpb24gfSBmcm9tICdAL2hvb2tzL3VzZVNlYXJjaE5hdmlnYXRpb24nO1xyXG5pbXBvcnQgeyBjcmVhdGVUZXN0UXVlcnlDbGllbnQsIGNyZWF0ZUhvb2tXcmFwcGVyIH0gZnJvbSAnQC9fX3Rlc3RzX18vdXRpbHMvdGVzdC11dGlscyc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBNT0NLU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8gTW9jayBBUEkgZGUgcHJvZHVjdG9zXHJcbmplc3QubW9jaygnQC9saWIvYXBpL3Byb2R1Y3RzJywgKCkgPT4gKHtcclxuICBzZWFyY2hQcm9kdWN0czogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIHVzZVNlYXJjaE5hdmlnYXRpb25cclxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZVNlYXJjaE5hdmlnYXRpb24nLCAoKSA9PiAoe1xyXG4gIHVzZVNlYXJjaE5hdmlnYXRpb246IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gTW9jayB1c2VTZWFyY2hFcnJvckhhbmRsZXJcclxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZVNlYXJjaEVycm9ySGFuZGxlcicsICgpID0+ICh7XHJcbiAgdXNlU2VhcmNoRXJyb3JIYW5kbGVyOiAoKSA9PiAoe1xyXG4gICAgY3VycmVudEVycm9yOiBudWxsLFxyXG4gICAgaXNSZXRyeWluZzogZmFsc2UsXHJcbiAgICByZXRyeUNvdW50OiAwLFxyXG4gICAgaGFuZGxlRXJyb3I6IGplc3QuZm4oKSxcclxuICAgIGNsZWFyRXJyb3I6IGplc3QuZm4oKSxcclxuICAgIHJldHJ5TWFudWFsbHk6IGplc3QuZm4oKSxcclxuICAgIGV4ZWN1dGVXaXRoUmV0cnk6IGplc3QuZm4oKSxcclxuICB9KSxcclxufSkpO1xyXG5cclxuLy8gTW9jayB1c2VTZWFyY2hUb2FzdFxyXG5qZXN0Lm1vY2soJ0AvaG9va3MvdXNlU2VhcmNoVG9hc3QnLCAoKSA9PiAoe1xyXG4gIHVzZVNlYXJjaFRvYXN0OiAoKSA9PiAoe1xyXG4gICAgdG9hc3RzOiBbXSxcclxuICAgIHNob3dTdWNjZXNzOiBqZXN0LmZuKCksXHJcbiAgICBzaG93RXJyb3I6IGplc3QuZm4oKSxcclxuICAgIHNob3dTdWNjZXNzVG9hc3Q6IGplc3QuZm4oKSxcclxuICAgIHNob3dJbmZvVG9hc3Q6IGplc3QuZm4oKSxcclxuICAgIHJlbW92ZVRvYXN0OiBqZXN0LmZuKCksXHJcbiAgICBjbGVhclRvYXN0czogamVzdC5mbigpLFxyXG4gIH0pLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIGxvY2FsU3RvcmFnZVxyXG5jb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xyXG4gIGdldEl0ZW06IGplc3QuZm4oKSxcclxuICBzZXRJdGVtOiBqZXN0LmZuKCksXHJcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxyXG4gIGNsZWFyOiBqZXN0LmZuKCksXHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XHJcbiAgdmFsdWU6IGxvY2FsU3RvcmFnZU1vY2ssXHJcbn0pO1xyXG5cclxuLy8gTW9jayBUYW5TdGFjayBRdWVyeSB1c2VRdWVyeSBwYXJhIHRlc3RzIGVzcGVjw61maWNvc1xyXG5jb25zdCBtb2NrVXNlUXVlcnkgPSBqZXN0LmZuKCk7XHJcbmplc3QubW9jaygnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JywgKCkgPT4gKHtcclxuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ0B0YW5zdGFjay9yZWFjdC1xdWVyeScpLFxyXG4gIHVzZVF1ZXJ5OiAoLi4uYXJncykgPT4gbW9ja1VzZVF1ZXJ5KC4uLmFyZ3MpLFxyXG59KSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTRVRVUFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uc3QgbW9ja05hdmlnYXRlVG9TZWFyY2ggPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tOYXZpZ2F0ZVRvUHJvZHVjdCA9IGplc3QuZm4oKTtcclxuY29uc3QgbW9ja1ByZWZldGNoU2VhcmNoID0gamVzdC5mbigpO1xyXG5jb25zdCBtb2NrU2VhcmNoUHJvZHVjdHMgPSBzZWFyY2hQcm9kdWN0cyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBzZWFyY2hQcm9kdWN0cz47XHJcbmNvbnN0IG1vY2tVc2VTZWFyY2hOYXZpZ2F0aW9uID0gdXNlU2VhcmNoTmF2aWdhdGlvbiBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiB1c2VTZWFyY2hOYXZpZ2F0aW9uPjtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIERBVE9TIERFIFBSVUVCQVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uc3QgbW9ja1Byb2R1Y3RSZXN1bHRzID0gW1xyXG4gIHtcclxuICAgIGlkOiAnMScsXHJcbiAgICBuYW1lOiAnUGludHVyYSBTaGVyd2luIFdpbGxpYW1zJyxcclxuICAgIGNhdGVnb3J5OiB7IGlkOiAnMScsIG5hbWU6ICdQaW50dXJhcycgfSxcclxuICAgIGltYWdlX3VybDogJy90ZXN0LWltYWdlLmpwZycsXHJcbiAgICBzdG9jazogMTAsXHJcbiAgICBwcmljZTogMTUwMCxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnMicsXHJcbiAgICBuYW1lOiAnUm9kaWxsbyBQcm9mZXNpb25hbCcsXHJcbiAgICBjYXRlZ29yeTogeyBpZDogJzInLCBuYW1lOiAnSGVycmFtaWVudGFzJyB9LFxyXG4gICAgaW1hZ2VfdXJsOiAnL3Rlc3QtaW1hZ2UyLmpwZycsXHJcbiAgICBzdG9jazogNSxcclxuICAgIHByaWNlOiA4MDAsXHJcbiAgfSxcclxuXTtcclxuXHJcbi8vIFdyYXBwZXIgcGFyYSB0ZXN0cyB1c2FuZG8gbGFzIHV0aWxpZGFkZXMgY2VudHJhbGl6YWRhc1xyXG5jb25zdCBjcmVhdGVXcmFwcGVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50KCk7XHJcbiAgcmV0dXJuIGNyZWF0ZUhvb2tXcmFwcGVyKHF1ZXJ5Q2xpZW50KTtcclxufTtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG5cclxuICAvLyBNb2NrIHVzZVF1ZXJ5IHBvciBkZWZlY3RvIChzaW4gZGF0b3MgaW5pY2lhbGVzKVxyXG4gIG1vY2tVc2VRdWVyeS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgZGF0YTogbnVsbCxcclxuICAgIGVycm9yOiBudWxsLFxyXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcclxuICAgIGlzRXJyb3I6IGZhbHNlLFxyXG4gICAgaXNTdWNjZXNzOiBmYWxzZSxcclxuICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxyXG4gICAgaXNTdGFsZTogZmFsc2UsXHJcbiAgICBkYXRhVXBkYXRlZEF0OiBEYXRlLm5vdygpLFxyXG4gICAgcmVmZXRjaDogamVzdC5mbigpLFxyXG4gIH0pO1xyXG5cclxuICAvLyBNb2NrIHVzZVNlYXJjaE5hdmlnYXRpb25cclxuICBtb2NrVXNlU2VhcmNoTmF2aWdhdGlvbi5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgbmF2aWdhdGVUb1NlYXJjaDogbW9ja05hdmlnYXRlVG9TZWFyY2gsXHJcbiAgICBuYXZpZ2F0ZVRvUHJvZHVjdDogbW9ja05hdmlnYXRlVG9Qcm9kdWN0LFxyXG4gICAgbmF2aWdhdGVUb0NhdGVnb3J5OiBqZXN0LmZuKCksXHJcbiAgICBwcmVmZXRjaFNlYXJjaDogbW9ja1ByZWZldGNoU2VhcmNoLFxyXG4gICAgcHJlZmV0Y2hQcm9kdWN0OiBqZXN0LmZuKCksXHJcbiAgICBnZXRDdXJyZW50U2VhcmNoUXVlcnk6IGplc3QuZm4oKCkgPT4gJycpLFxyXG4gICAgZ2V0Q3VycmVudENhdGVnb3J5OiBqZXN0LmZuKCgpID0+ICcnKSxcclxuICAgIGJ1aWxkU2VhcmNoVXJsOiBqZXN0LmZuKCksXHJcbiAgICByb3V0ZXI6IHt9IGFzIGFueSxcclxuICB9KTtcclxuXHJcbiAgbG9jYWxTdG9yYWdlTW9jay5nZXRJdGVtLm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcclxufSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBURVNUU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZGVzY3JpYmUoJ3VzZVNlYXJjaE9wdGltaXplZCBIb29rJywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgc3RhdGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hPcHRpbWl6ZWQoKSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucXVlcnkpLnRvQmUoJycpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnJlc3VsdHMpLnRvRXF1YWwoW10pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnN1Z2dlc3Rpb25zKS50b0VxdWFsKFtdKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKG51bGwpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lmhhc1NlYXJjaGVkKS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBhY2NlcHQgY3VzdG9tIG9wdGlvbnMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBvblNlYXJjaCA9IGplc3QuZm4oKTtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IFxyXG4gICAgICB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICAgIGRlYm91bmNlTXM6IDIwMCxcclxuICAgICAgICBtYXhTdWdnZXN0aW9uczogNSxcclxuICAgICAgICBvblNlYXJjaCxcclxuICAgICAgfSksIHtcclxuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5zZWFyY2hXaXRoRGVib3VuY2UpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LmV4ZWN1dGVTZWFyY2gpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcGVyZm9ybSBkZWJvdW5jZWQgc2VhcmNoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gTW9jayBwYXJhIHF1ZSBkZXZ1ZWx2YSBkaXJlY3RhbWVudGUgZWwgYXJyYXkgY29tbyBlc3BlcmEgVGFuU3RhY2sgUXVlcnlcclxuICAgIG1vY2tTZWFyY2hQcm9kdWN0cy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGRhdGE6IG1vY2tQcm9kdWN0UmVzdWx0cyxcclxuICAgICAgcGFnaW5hdGlvbjogeyB0b3RhbDogMiwgcGFnZTogMSwgbGltaXQ6IDEwLCB0b3RhbFBhZ2VzOiAxIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICBkZWJvdW5jZU1zOiA1MCwgLy8gUmVkdWNpciBwYXJhIHRlc3RzXHJcbiAgICB9KSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5zZWFyY2hXaXRoRGVib3VuY2UoJ3BpbnR1cmEnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEVzcGVyYXIgYSBxdWUgc2UgZWplY3V0ZSBlbCBkZWJvdW5jZSB5IGxhIHF1ZXJ5IChvcHRpbWl6YWRvKVxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5xdWVyeSkudG9CZSgncGludHVyYScpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiAxMDAwIH0pO1xyXG5cclxuICAgIC8vIEVzcGVyYXIgYSBxdWUgVGFuU3RhY2sgUXVlcnkgcHJvY2VzZSBsYSByZXNwdWVzdGEgKG9wdGltaXphZG8pXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KG1vY2tTZWFyY2hQcm9kdWN0cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3BpbnR1cmEnLCA2KTtcclxuICAgIH0sIHsgdGltZW91dDogMTAwMCB9KTtcclxuXHJcbiAgICAvLyBQb3IgYWhvcmEsIHNvbG8gdmVyaWZpY2Ftb3MgcXVlIGVsIGhvb2sgZnVuY2lvbmEgYsOhc2ljYW1lbnRlXHJcbiAgICAvLyBUT0RPOiBBcnJlZ2xhciBpbnRlZ3JhY2nDs24gY29uIFRhblN0YWNrIFF1ZXJ5IGVuIHRlc3RzXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQucXVlcnkpLnRvQmUoJ3BpbnR1cmEnKTtcclxuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuc2VhcmNoV2l0aERlYm91bmNlKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGV4ZWN1dGUgc2VhcmNoIGFuZCBuYXZpZ2F0ZScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE9wdGltaXplZCgpLCB7XHJcbiAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmV4ZWN1dGVTZWFyY2goJ3BpbnR1cmEgdGVzdCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tOYXZpZ2F0ZVRvU2VhcmNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncGludHVyYSB0ZXN0Jyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaGFzU2VhcmNoZWQpLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgc2VsZWN0IHN1Z2dlc3Rpb24gYW5kIG5hdmlnYXRlIHRvIHByb2R1Y3QnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hPcHRpbWl6ZWQoKSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBzdWdnZXN0aW9uID0ge1xyXG4gICAgICBpZDogJzEnLFxyXG4gICAgICB0eXBlOiAncHJvZHVjdCcgYXMgY29uc3QsXHJcbiAgICAgIHRpdGxlOiAnVGVzdCBQcm9kdWN0JyxcclxuICAgICAgaHJlZjogJy9wcm9kdWN0cy8xJyxcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2VsZWN0U3VnZ2VzdGlvbihzdWdnZXN0aW9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrTmF2aWdhdGVUb1Byb2R1Y3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcxJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGFuZGxlIHNlYXJjaCBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIENvbmZpZ3VyYXIgbW9jayBkZSB1c2VRdWVyeSBwYXJhIHNpbXVsYXIgZXJyb3JcclxuICAgIG1vY2tVc2VRdWVyeS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBkYXRhOiBudWxsLFxyXG4gICAgICBlcnJvcjogbmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJyksXHJcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGlzRXJyb3I6IHRydWUsXHJcbiAgICAgIGlzU3VjY2VzczogZmFsc2UsXHJcbiAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxyXG4gICAgICBpc1N0YWxlOiBmYWxzZSxcclxuICAgICAgZGF0YVVwZGF0ZWRBdDogRGF0ZS5ub3coKSxcclxuICAgICAgcmVmZXRjaDogamVzdC5mbigpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoT3B0aW1pemVkKHtcclxuICAgICAgZGVib3VuY2VNczogNTAsXHJcbiAgICB9KSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5zZWFyY2hXaXRoRGVib3VuY2UoJ2Vycm9yIHF1ZXJ5Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBzYXZlIHJlY2VudCBzZWFyY2hlcyB0byBsb2NhbFN0b3JhZ2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICBzYXZlUmVjZW50U2VhcmNoZXM6IHRydWUsXHJcbiAgICB9KSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5leGVjdXRlU2VhcmNoKCd0ZXN0IHNlYXJjaCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KGxvY2FsU3RvcmFnZU1vY2suc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICdwaW50ZXlhLXJlY2VudC1zZWFyY2hlcycsXHJcbiAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdcInRlc3Qgc2VhcmNoXCInKVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBwcmVmZXRjaCBzZWFyY2ggcmVzdWx0cyB3aGVuIGVuYWJsZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hPcHRpbWl6ZWQoe1xyXG4gICAgICBlbmFibGVQcmVmZXRjaDogdHJ1ZSxcclxuICAgICAgZGVib3VuY2VNczogNTAsXHJcbiAgICB9KSwge1xyXG4gICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5zZWFyY2hXaXRoRGVib3VuY2UoJ3ByZWZldGNoIHRlc3QnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUHJlZmV0Y2hTZWFyY2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdwcmVmZXRjaCB0ZXN0Jyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY2xlYXIgc2VhcmNoIHN0YXRlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoT3B0aW1pemVkKCksIHtcclxuICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2VhcmNoV2l0aERlYm91bmNlKCd0ZXN0Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5jbGVhclNlYXJjaCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnF1ZXJ5KS50b0JlKCcnKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5oYXNTZWFyY2hlZCkudG9CZShmYWxzZSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcHJvdmlkZSBuYXZpZ2F0aW9uIHV0aWxpdGllcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE9wdGltaXplZCgpLCB7XHJcbiAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQubmF2aWdhdGVUb1NlYXJjaCkudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQubmF2aWdhdGVUb1Byb2R1Y3QpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LnByZWZldGNoU2VhcmNoUGFnZSkudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuYnVpbGRTZWFyY2hVcmwpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJzZWFyY2hQcm9kdWN0cyIsImZuIiwidXNlU2VhcmNoTmF2aWdhdGlvbiIsInVzZVNlYXJjaEVycm9ySGFuZGxlciIsImN1cnJlbnRFcnJvciIsImlzUmV0cnlpbmciLCJyZXRyeUNvdW50IiwiaGFuZGxlRXJyb3IiLCJjbGVhckVycm9yIiwicmV0cnlNYW51YWxseSIsImV4ZWN1dGVXaXRoUmV0cnkiLCJ1c2VTZWFyY2hUb2FzdCIsInRvYXN0cyIsInNob3dTdWNjZXNzIiwic2hvd0Vycm9yIiwic2hvd1N1Y2Nlc3NUb2FzdCIsInNob3dJbmZvVG9hc3QiLCJyZW1vdmVUb2FzdCIsImNsZWFyVG9hc3RzIiwicmVxdWlyZUFjdHVhbCIsInVzZVF1ZXJ5IiwiYXJncyIsIm1vY2tVc2VRdWVyeSIsImxvY2FsU3RvcmFnZU1vY2siLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid2luZG93IiwidmFsdWUiLCJtb2NrTmF2aWdhdGVUb1NlYXJjaCIsIm1vY2tOYXZpZ2F0ZVRvUHJvZHVjdCIsIm1vY2tQcmVmZXRjaFNlYXJjaCIsIm1vY2tTZWFyY2hQcm9kdWN0cyIsIm1vY2tVc2VTZWFyY2hOYXZpZ2F0aW9uIiwibW9ja1Byb2R1Y3RSZXN1bHRzIiwiaWQiLCJuYW1lIiwiY2F0ZWdvcnkiLCJpbWFnZV91cmwiLCJzdG9jayIsInByaWNlIiwiY3JlYXRlV3JhcHBlciIsInF1ZXJ5Q2xpZW50IiwiY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50IiwiY3JlYXRlSG9va1dyYXBwZXIiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsImRhdGEiLCJlcnJvciIsImlzTG9hZGluZyIsImlzRXJyb3IiLCJpc1N1Y2Nlc3MiLCJpc0ZldGNoaW5nIiwiaXNTdGFsZSIsImRhdGFVcGRhdGVkQXQiLCJEYXRlIiwibm93IiwicmVmZXRjaCIsIm5hdmlnYXRlVG9TZWFyY2giLCJuYXZpZ2F0ZVRvUHJvZHVjdCIsIm5hdmlnYXRlVG9DYXRlZ29yeSIsInByZWZldGNoU2VhcmNoIiwicHJlZmV0Y2hQcm9kdWN0IiwiZ2V0Q3VycmVudFNlYXJjaFF1ZXJ5IiwiZ2V0Q3VycmVudENhdGVnb3J5IiwiYnVpbGRTZWFyY2hVcmwiLCJyb3V0ZXIiLCJkZXNjcmliZSIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZVNlYXJjaE9wdGltaXplZCIsIndyYXBwZXIiLCJleHBlY3QiLCJjdXJyZW50IiwicXVlcnkiLCJ0b0JlIiwicmVzdWx0cyIsInRvRXF1YWwiLCJzdWdnZXN0aW9ucyIsImhhc1NlYXJjaGVkIiwib25TZWFyY2giLCJkZWJvdW5jZU1zIiwibWF4U3VnZ2VzdGlvbnMiLCJzZWFyY2hXaXRoRGVib3VuY2UiLCJleGVjdXRlU2VhcmNoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzdWNjZXNzIiwicGFnaW5hdGlvbiIsInRvdGFsIiwicGFnZSIsImxpbWl0IiwidG90YWxQYWdlcyIsImFjdCIsIndhaXRGb3IiLCJ0aW1lb3V0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJzdWdnZXN0aW9uIiwidHlwZSIsInRpdGxlIiwiaHJlZiIsInNlbGVjdFN1Z2dlc3Rpb24iLCJFcnJvciIsInRvQmVUcnV0aHkiLCJzYXZlUmVjZW50U2VhcmNoZXMiLCJzdHJpbmdDb250YWluaW5nIiwiZW5hYmxlUHJlZmV0Y2giLCJjbGVhclNlYXJjaCIsInByZWZldGNoU2VhcmNoUGFnZSJdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLDBFQUEwRTtBQUMxRSxzQ0FBc0M7O0FBU3RDLHNDQUFzQztBQUN0QyxRQUFRO0FBQ1Isc0NBQXNDO0FBRXRDLHdCQUF3QjtBQUN4QkEsS0FBS0MsSUFBSSxDQUFDLHNCQUFzQixJQUFPLENBQUE7UUFDckNDLGdCQUFnQkYsS0FBS0csRUFBRTtJQUN6QixDQUFBO0FBRUEsMkJBQTJCO0FBQzNCSCxLQUFLQyxJQUFJLENBQUMsK0JBQStCLElBQU8sQ0FBQTtRQUM5Q0cscUJBQXFCSixLQUFLRyxFQUFFO0lBQzlCLENBQUE7QUFFQSw2QkFBNkI7QUFDN0JILEtBQUtDLElBQUksQ0FBQyxpQ0FBaUMsSUFBTyxDQUFBO1FBQ2hESSx1QkFBdUIsSUFBTyxDQUFBO2dCQUM1QkMsY0FBYztnQkFDZEMsWUFBWTtnQkFDWkMsWUFBWTtnQkFDWkMsYUFBYVQsS0FBS0csRUFBRTtnQkFDcEJPLFlBQVlWLEtBQUtHLEVBQUU7Z0JBQ25CUSxlQUFlWCxLQUFLRyxFQUFFO2dCQUN0QlMsa0JBQWtCWixLQUFLRyxFQUFFO1lBQzNCLENBQUE7SUFDRixDQUFBO0FBRUEsc0JBQXNCO0FBQ3RCSCxLQUFLQyxJQUFJLENBQUMsMEJBQTBCLElBQU8sQ0FBQTtRQUN6Q1ksZ0JBQWdCLElBQU8sQ0FBQTtnQkFDckJDLFFBQVEsRUFBRTtnQkFDVkMsYUFBYWYsS0FBS0csRUFBRTtnQkFDcEJhLFdBQVdoQixLQUFLRyxFQUFF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