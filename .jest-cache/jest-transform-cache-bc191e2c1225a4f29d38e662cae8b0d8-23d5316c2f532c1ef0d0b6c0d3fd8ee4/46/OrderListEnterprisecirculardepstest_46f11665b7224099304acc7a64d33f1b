f61b0b89546fd2cb463bd31defdf52ca
// ===================================
// PINTEYA E-COMMERCE - CIRCULAR DEPENDENCIES TEST
// Pruebas específicas para verificar que no hay dependencias circulares
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _OrderListEnterprise = require("../../components/admin/orders/OrderListEnterprise");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCKS
// ===================================
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
const mockToast = _globals.jest.fn();
_globals.jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
// Mock de performance para monitoreo
const mockPerformanceNow = _globals.jest.fn();
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow
    },
    writable: true
});
// Mock de console para capturar renders excesivos
const mockConsoleWarn = _globals.jest.spyOn(console, 'warn').mockImplementation(()=>{});
const mockConsoleLog = _globals.jest.spyOn(console, 'log').mockImplementation(()=>{});
// Datos de prueba
const mockOrder = {
    id: 'order-123',
    order_number: 'ORD-2024-001',
    status: 'pending',
    payment_status: 'pending',
    fulfillment_status: 'pending',
    total_amount: 15000,
    created_at: '2024-01-01T10:00:00Z',
    updated_at: '2024-01-01T10:00:00Z',
    customer_id: 'customer-123',
    customer_name: 'Juan Pérez',
    customer_email: 'juan@example.com'
};
const mockApiResponse = {
    success: true,
    data: {
        orders: [
            mockOrder
        ],
        pagination: {
            page: 1,
            limit: 20,
            total: 1,
            totalPages: 1,
            hasNextPage: false,
            hasPreviousPage: false
        },
        analytics: {
            total_orders: 1,
            total_revenue: 15000,
            pending_orders: 1,
            completed_orders: 0
        }
    },
    message: 'Orders retrieved successfully',
    timestamp: new Date().toISOString()
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockPerformanceNow.mockReturnValue(1000);
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: async ()=>mockApiResponse
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS DE DEPENDENCIAS CIRCULARES
// ===================================
(0, _globals.describe)('OrderListEnterprise - Circular Dependencies', ()=>{
    (0, _globals.it)('no debe tener renders infinitos al cambiar filtros', async ()=>{
        _globals.jest.useFakeTimers();
        // Contador de renders
        let renderCount = 0;
        const TestWrapper = ()=>{
            renderCount++;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {});
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
        });
        const initialRenderCount = renderCount;
        // Cambiar filtro de estado
        const statusFilter = _react1.screen.getByDisplayValue('all');
        (0, _react1.act)(()=>{
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'pending'
                }
            });
        });
        // Avanzar timers para que se ejecute el debouncing
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(500);
        });
        // Esperar que se complete la petición
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(2); // Initial + filter change
        });
        // Verificar que no hay renders excesivos
        const finalRenderCount = renderCount;
        const renderDifference = finalRenderCount - initialRenderCount;
        // Permitir algunos renders normales (cambio de filtro + loading + resultado)
        // pero no más de 10 renders por cambio de filtro
        (0, _globals.expect)(renderDifference).toBeLessThan(10);
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('no debe hacer peticiones duplicadas al cambiar filtros rápidamente', async ()=>{
        _globals.jest.useFakeTimers();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
        });
        const initialCallCount = mockFetch.mock.calls.length;
        // Cambiar filtros múltiples veces rápidamente
        const statusFilter = _react1.screen.getByDisplayValue('all');
        (0, _react1.act)(()=>{
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'pending'
                }
            });
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'confirmed'
                }
            });
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'shipped'
                }
            });
        });
        // Avanzar timers para que se ejecute el debouncing
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(500);
        });
        // Esperar que se complete la petición
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(mockFetch.mock.calls.length).toBeGreaterThan(initialCallCount);
        });
        // Verificar que solo se hizo una petición adicional (debouncing funcionando)
        const finalCallCount = mockFetch.mock.calls.length;
        const callDifference = finalCallCount - initialCallCount;
        // Debería ser solo 1 petición adicional debido al debouncing
        (0, _globals.expect)(callDifference).toBeLessThanOrEqual(2);
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('no debe tener memory leaks en cambios de filtros', async ()=>{
        _globals.jest.useFakeTimers();
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
        });
        // Cambiar filtros varias veces
        const statusFilter = _react1.screen.getByDisplayValue('all');
        for(let i = 0; i < 5; i++){
            (0, _react1.act)(()=>{
                _react1.fireEvent.change(statusFilter, {
                    target: {
                        value: i % 2 === 0 ? 'pending' : 'confirmed'
                    }
                });
            });
            (0, _react1.act)(()=>{
                _globals.jest.advanceTimersByTime(100);
            });
        }
        // Avanzar timers finales
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(500);
        });
        // Desmontar componente
        unmount();
        // Verificar que no hay warnings de memory leaks
        (0, _globals.expect)(mockConsoleWarn).not.toHaveBeenCalledWith(_globals.expect.stringContaining('memory leak'));
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('debe manejar correctamente el cleanup de timers', async ()=>{
        _globals.jest.useFakeTimers();
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
        });
        // Cambiar filtro para activar debouncing
        const statusFilter = _react1.screen.getByDisplayValue('all');
        (0, _react1.act)(()=>{
            _react1.fireEvent.change(statusFilter, {
                target: {
                    value: 'pending'
                }
            });
        });
        // Desmontar antes de que se complete el debouncing
        unmount();
        // Avanzar timers después del desmontaje
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(500);
        });
        // No debería haber errores o warnings sobre timers no limpiados
        (0, _globals.expect)(mockConsoleWarn).not.toHaveBeenCalledWith(_globals.expect.stringContaining('timer'));
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('debe mantener performance estable con múltiples cambios de filtros', async ()=>{
        _globals.jest.useFakeTimers();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('ORD-2024-001')).toBeInTheDocument();
        });
        const startTime = performance.now();
        // Simular múltiples cambios de filtros
        const statusFilter = _react1.screen.getByDisplayValue('all');
        for(let i = 0; i < 10; i++){
            (0, _react1.act)(()=>{
                _react1.fireEvent.change(statusFilter, {
                    target: {
                        value: [
                            'pending',
                            'confirmed',
                            'shipped'
                        ][i % 3]
                    }
                });
            });
            (0, _react1.act)(()=>{
                _globals.jest.advanceTimersByTime(50);
            });
        }
        // Avanzar timers finales
        (0, _react1.act)(()=>{
            _globals.jest.advanceTimersByTime(500);
        });
        const endTime = performance.now();
        const duration = endTime - startTime;
        // La operación no debería tomar más de 1 segundo (muy generoso)
        (0, _globals.expect)(duration).toBeLessThan(1000);
        _globals.jest.useRealTimers();
    });
});

//# sourceMappingURL=data:application/json;base64,