{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\adapters\\product-adapter.test.ts"],"sourcesContent":["import {\n  getValidImageUrl,\n  getThumbnailImage,\n  getPreviewImage,\n} from '@/lib/adapters/product-adapter'\n\ndescribe('Product Image Validation Functions', () => {\n  describe('getValidImageUrl', () => {\n    it('should return the image URL when it is valid', () => {\n      const validUrl = 'https://example.com/image.jpg'\n      expect(getValidImageUrl(validUrl)).toBe(validUrl)\n    })\n\n    it('should return placeholder when image URL is empty string', () => {\n      const emptyUrl = ''\n      const result = getValidImageUrl(emptyUrl)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when image URL is only whitespace', () => {\n      const whitespaceUrl = '   '\n      const result = getValidImageUrl(whitespaceUrl)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when image URL is undefined', () => {\n      const result = getValidImageUrl(undefined)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when image URL is null', () => {\n      const result = getValidImageUrl(null)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should trim whitespace from valid URLs', () => {\n      const urlWithWhitespace = '  https://example.com/image.jpg  '\n      const result = getValidImageUrl(urlWithWhitespace)\n      expect(result).toBe('https://example.com/image.jpg')\n    })\n\n    it('should use custom fallback when provided', () => {\n      const customFallback = '/custom/placeholder.png'\n      const result = getValidImageUrl('', customFallback)\n      expect(result).toBe(customFallback)\n    })\n  })\n\n  describe('getThumbnailImage', () => {\n    it('should return valid thumbnail from imgs property', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: ['https://example.com/thumb.jpg'],\n          previews: ['https://example.com/preview.jpg'],\n        },\n      }\n\n      const result = getThumbnailImage(product)\n      expect(result).toBe('https://example.com/thumb.jpg')\n    })\n\n    it('should return placeholder when thumbnail is empty string', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: [''],\n          previews: ['https://example.com/preview.jpg'],\n        },\n      }\n\n      const result = getThumbnailImage(product)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when no thumbnails exist', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: [],\n          previews: ['https://example.com/preview.jpg'],\n        },\n      }\n\n      const result = getThumbnailImage(product)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when imgs is undefined', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n      }\n\n      const result = getThumbnailImage(product)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n  })\n\n  describe('getPreviewImage', () => {\n    it('should return valid preview from imgs property', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: ['https://example.com/thumb.jpg'],\n          previews: ['https://example.com/preview.jpg'],\n        },\n      }\n\n      const result = getPreviewImage(product)\n      expect(result).toBe('https://example.com/preview.jpg')\n    })\n\n    it('should return placeholder when preview is empty string', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: ['https://example.com/thumb.jpg'],\n          previews: [''],\n        },\n      }\n\n      const result = getPreviewImage(product)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n\n    it('should return placeholder when no previews exist', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: ['https://example.com/thumb.jpg'],\n          previews: [],\n        },\n      }\n\n      const result = getPreviewImage(product)\n      expect(result).toBe('/images/products/placeholder.svg')\n    })\n  })\n\n  describe('Edge Cases', () => {\n    it('should handle products with images property instead of imgs', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        images: {\n          thumbnails: ['https://example.com/thumb.jpg'],\n          previews: ['https://example.com/preview.jpg'],\n        },\n      }\n\n      const thumbnailResult = getThumbnailImage(product as any)\n      const previewResult = getPreviewImage(product as any)\n\n      expect(thumbnailResult).toBe('https://example.com/thumb.jpg')\n      expect(previewResult).toBe('https://example.com/preview.jpg')\n    })\n\n    it('should handle mixed empty and valid URLs in arrays', () => {\n      const product = {\n        id: 1,\n        title: 'Test Product',\n        price: 100,\n        discountedPrice: 90,\n        reviews: 5,\n        imgs: {\n          thumbnails: ['', '  ', 'https://example.com/thumb.jpg'],\n          previews: ['', 'https://example.com/preview.jpg'],\n        },\n      }\n\n      // Should still return placeholder because first element is empty\n      const thumbnailResult = getThumbnailImage(product)\n      const previewResult = getPreviewImage(product)\n\n      expect(thumbnailResult).toBe('/images/products/placeholder.svg')\n      expect(previewResult).toBe('/images/products/placeholder.svg')\n    })\n  })\n})\n"],"names":["describe","it","validUrl","expect","getValidImageUrl","toBe","emptyUrl","result","whitespaceUrl","undefined","urlWithWhitespace","customFallback","product","id","title","price","discountedPrice","reviews","imgs","thumbnails","previews","getThumbnailImage","getPreviewImage","images","thumbnailResult","previewResult"],"mappings":"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"}