17baf618c1aac921b484dc0d6b0e251f
/**
 * Sistema Enterprise de Testing Automatizado
 * Ejecuta tests continuos de todos los sistemas enterprise
 */"use strict";

/* istanbul ignore next */
function cov_2nnuikch0f() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\enterprise-automated-testing.ts";
  var hash = "e93a271520d89adc7fd6247fc3b2d5835aecd1d5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\enterprise-automated-testing.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 42
        }
      },
      "7": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 77
        }
      },
      "8": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 79
        }
      },
      "9": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 82
        }
      },
      "10": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 81
        }
      },
      "11": {
        start: {
          line: 29,
          column: 30
        },
        end: {
          line: 370,
          column: 1
        }
      },
      "12": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 54
        }
      },
      "13": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "14": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "15": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 46,
          column: 84
        }
      },
      "16": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "17": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 75
        }
      },
      "18": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 54,
          column: 17
        }
      },
      "19": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 96
        }
      },
      "20": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 72,
          column: 18
        }
      },
      "21": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "22": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "23": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 113,
          column: 46
        }
      },
      "24": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "25": {
        start: {
          line: 116,
          column: 36
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "26": {
        start: {
          line: 136,
          column: 38
        },
        end: {
          line: 148,
          column: 31
        }
      },
      "27": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "28": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 88
        }
      },
      "29": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 168,
          column: 18
        }
      },
      "30": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 184,
          column: 18
        }
      },
      "31": {
        start: {
          line: 209,
          column: 30
        },
        end: {
          line: 209,
          column: 54
        }
      },
      "32": {
        start: {
          line: 210,
          column: 26
        },
        end: {
          line: 210,
          column: 46
        }
      },
      "33": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "34": {
        start: {
          line: 212,
          column: 37
        },
        end: {
          line: 212,
          column: 94
        }
      },
      "35": {
        start: {
          line: 213,
          column: 34
        },
        end: {
          line: 213,
          column: 59
        }
      },
      "36": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 234,
          column: 17
        }
      },
      "37": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 233,
          column: 22
        }
      },
      "38": {
        start: {
          line: 236,
          column: 34
        },
        end: {
          line: 236,
          column: 95
        }
      },
      "39": {
        start: {
          line: 236,
          column: 63
        },
        end: {
          line: 236,
          column: 91
        }
      },
      "40": {
        start: {
          line: 237,
          column: 36
        },
        end: {
          line: 237,
          column: 99
        }
      },
      "41": {
        start: {
          line: 237,
          column: 65
        },
        end: {
          line: 237,
          column: 95
        }
      },
      "42": {
        start: {
          line: 238,
          column: 38
        },
        end: {
          line: 238,
          column: 61
        }
      },
      "43": {
        start: {
          line: 239,
          column: 32
        },
        end: {
          line: 239,
          column: 81
        }
      },
      "44": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 243,
          column: 17
        }
      },
      "45": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 242,
          column: 111
        }
      },
      "46": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 264,
          column: 18
        }
      },
      "47": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 280,
          column: 18
        }
      },
      "48": {
        start: {
          line: 305,
          column: 30
        },
        end: {
          line: 305,
          column: 54
        }
      },
      "49": {
        start: {
          line: 306,
          column: 26
        },
        end: {
          line: 306,
          column: 46
        }
      },
      "50": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "51": {
        start: {
          line: 309,
          column: 37
        },
        end: {
          line: 309,
          column: 99
        }
      },
      "52": {
        start: {
          line: 310,
          column: 37
        },
        end: {
          line: 310,
          column: 99
        }
      },
      "53": {
        start: {
          line: 312,
          column: 36
        },
        end: {
          line: 312,
          column: 182
        }
      },
      "54": {
        start: {
          line: 314,
          column: 37
        },
        end: {
          line: 314,
          column: 139
        }
      },
      "55": {
        start: {
          line: 314,
          column: 114
        },
        end: {
          line: 314,
          column: 138
        }
      },
      "56": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "57": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 79
        }
      },
      "58": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 127
        }
      },
      "59": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 322,
          column: 17
        }
      },
      "60": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 72
        }
      },
      "61": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 341,
          column: 18
        }
      },
      "62": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 357,
          column: 18
        }
      },
      "63": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 35
        }
      },
      "64": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 37
        }
      },
      "65": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 38
        }
      },
      "66": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 36
        }
      },
      "67": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 35
        }
      },
      "68": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "69": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 83
        }
      },
      "70": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 51
        }
      },
      "71": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "72": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 19
        }
      },
      "73": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "74": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 395,
          column: 15
        }
      },
      "75": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 58
        }
      },
      "76": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 39
        }
      },
      "77": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 38
        }
      },
      "78": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 103
        }
      },
      "79": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 86
        }
      },
      "80": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 24
        }
      },
      "81": {
        start: {
          line: 408,
          column: 25
        },
        end: {
          line: 408,
          column: 51
        }
      },
      "82": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "83": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 62
        }
      },
      "84": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "85": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 426,
          column: 14
        }
      },
      "86": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "87": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 66
        }
      },
      "88": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 38
        }
      },
      "89": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "90": {
        start: {
          line: 434,
          column: 27
        },
        end: {
          line: 437,
          column: 14
        }
      },
      "91": {
        start: {
          line: 436,
          column: 41
        },
        end: {
          line: 436,
          column: 108
        }
      },
      "92": {
        start: {
          line: 436,
          column: 56
        },
        end: {
          line: 436,
          column: 89
        }
      },
      "93": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "94": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 49
        }
      },
      "95": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 54
        }
      },
      "96": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "97": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 65
        }
      },
      "98": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 26
        }
      },
      "99": {
        start: {
          line: 449,
          column: 33
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "100": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 467,
          column: 13
        }
      },
      "101": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 49
        }
      },
      "102": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 60
        }
      },
      "103": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "104": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 471,
          column: 71
        }
      },
      "105": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 32
        }
      },
      "106": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 45
        }
      },
      "107": {
        start: {
          line: 481,
          column: 29
        },
        end: {
          line: 481,
          column: 93
        }
      },
      "108": {
        start: {
          line: 481,
          column: 80
        },
        end: {
          line: 481,
          column: 92
        }
      },
      "109": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 482,
          column: 26
        }
      },
      "110": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "111": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 489,
          column: 13
        }
      },
      "112": {
        start: {
          line: 485,
          column: 31
        },
        end: {
          line: 485,
          column: 62
        }
      },
      "113": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 37
        }
      },
      "114": {
        start: {
          line: 488,
          column: 16
        },
        end: {
          line: 488,
          column: 96
        }
      },
      "115": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 491,
          column: 23
        }
      },
      "116": {
        start: {
          line: 496,
          column: 27
        },
        end: {
          line: 496,
          column: 71
        }
      },
      "117": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "118": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 507,
          column: 14
        }
      },
      "119": {
        start: {
          line: 509,
          column: 28
        },
        end: {
          line: 509,
          column: 67
        }
      },
      "120": {
        start: {
          line: 509,
          column: 51
        },
        end: {
          line: 509,
          column: 59
        }
      },
      "121": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 510,
          column: 94
        }
      },
      "122": {
        start: {
          line: 510,
          column: 51
        },
        end: {
          line: 510,
          column: 86
        }
      },
      "123": {
        start: {
          line: 511,
          column: 29
        },
        end: {
          line: 511,
          column: 82
        }
      },
      "124": {
        start: {
          line: 511,
          column: 52
        },
        end: {
          line: 511,
          column: 74
        }
      },
      "125": {
        start: {
          line: 512,
          column: 30
        },
        end: {
          line: 512,
          column: 78
        }
      },
      "126": {
        start: {
          line: 512,
          column: 58
        },
        end: {
          line: 512,
          column: 74
        }
      },
      "127": {
        start: {
          line: 513,
          column: 32
        },
        end: {
          line: 513,
          column: 65
        }
      },
      "128": {
        start: {
          line: 514,
          column: 28
        },
        end: {
          line: 514,
          column: 87
        }
      },
      "129": {
        start: {
          line: 515,
          column: 24
        },
        end: {
          line: 515,
          column: 118
        }
      },
      "130": {
        start: {
          line: 515,
          column: 55
        },
        end: {
          line: 515,
          column: 94
        }
      },
      "131": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 525,
          column: 10
        }
      },
      "132": {
        start: {
          line: 530,
          column: 24
        },
        end: {
          line: 530,
          column: 58
        }
      },
      "133": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 531,
          column: 47
        }
      },
      "134": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 536,
          column: 51
        }
      },
      "135": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 542,
          column: 94
        }
      },
      "136": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 96
        }
      },
      "137": {
        start: {
          line: 558,
          column: 30
        },
        end: {
          line: 558,
          column: 87
        }
      },
      "138": {
        start: {
          line: 559,
          column: 31
        },
        end: {
          line: 559,
          column: 74
        }
      },
      "139": {
        start: {
          line: 559,
          column: 57
        },
        end: {
          line: 559,
          column: 66
        }
      },
      "140": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 563,
          column: 9
        }
      },
      "141": {
        start: {
          line: 562,
          column: 12
        },
        end: {
          line: 562,
          column: 352
        }
      },
      "142": {
        start: {
          line: 566,
          column: 35
        },
        end: {
          line: 566,
          column: 75
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 38
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 41,
            column: 23
          }
        },
        loc: {
          start: {
            line: 41,
            column: 32
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 41
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 22
          },
          end: {
            line: 111,
            column: 23
          }
        },
        loc: {
          start: {
            line: 111,
            column: 32
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 208,
            column: 22
          },
          end: {
            line: 208,
            column: 23
          }
        },
        loc: {
          start: {
            line: 208,
            column: 32
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 208
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 236,
            column: 51
          },
          end: {
            line: 236,
            column: 52
          }
        },
        loc: {
          start: {
            line: 236,
            column: 63
          },
          end: {
            line: 236,
            column: 91
          }
        },
        line: 236
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 237,
            column: 53
          },
          end: {
            line: 237,
            column: 54
          }
        },
        loc: {
          start: {
            line: 237,
            column: 65
          },
          end: {
            line: 237,
            column: 95
          }
        },
        line: 237
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 304,
            column: 22
          },
          end: {
            line: 304,
            column: 23
          }
        },
        loc: {
          start: {
            line: 304,
            column: 32
          },
          end: {
            line: 359,
            column: 9
          }
        },
        line: 304
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 314,
            column: 105
          },
          end: {
            line: 314,
            column: 106
          }
        },
        loc: {
          start: {
            line: 314,
            column: 114
          },
          end: {
            line: 314,
            column: 138
          }
        },
        line: 314
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 17
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 372
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 25
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 379
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 387,
            column: 6
          },
          end: {
            line: 387,
            column: 7
          }
        },
        loc: {
          start: {
            line: 387,
            column: 25
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 387
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 393,
            column: 42
          },
          end: {
            line: 393,
            column: 43
          }
        },
        loc: {
          start: {
            line: 393,
            column: 54
          },
          end: {
            line: 395,
            column: 13
          }
        },
        line: 393
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 407,
            column: 6
          },
          end: {
            line: 407,
            column: 7
          }
        },
        loc: {
          start: {
            line: 407,
            column: 28
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 407
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 436,
            column: 28
          },
          end: {
            line: 436,
            column: 29
          }
        },
        loc: {
          start: {
            line: 436,
            column: 41
          },
          end: {
            line: 436,
            column: 108
          }
        },
        line: 436
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 436,
            column: 52
          },
          end: {
            line: 436,
            column: 53
          }
        },
        loc: {
          start: {
            line: 436,
            column: 56
          },
          end: {
            line: 436,
            column: 89
          }
        },
        line: 436
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 480,
            column: 6
          },
          end: {
            line: 480,
            column: 7
          }
        },
        loc: {
          start: {
            line: 480,
            column: 26
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 480
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 481,
            column: 72
          },
          end: {
            line: 481,
            column: 73
          }
        },
        loc: {
          start: {
            line: 481,
            column: 80
          },
          end: {
            line: 481,
            column: 92
          }
        },
        line: 481
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 495,
            column: 6
          },
          end: {
            line: 495,
            column: 7
          }
        },
        loc: {
          start: {
            line: 495,
            column: 23
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 495
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 509,
            column: 46
          },
          end: {
            line: 509,
            column: 47
          }
        },
        loc: {
          start: {
            line: 509,
            column: 51
          },
          end: {
            line: 509,
            column: 59
          }
        },
        line: 509
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 510,
            column: 46
          },
          end: {
            line: 510,
            column: 47
          }
        },
        loc: {
          start: {
            line: 510,
            column: 51
          },
          end: {
            line: 510,
            column: 86
          }
        },
        line: 510
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 511,
            column: 47
          },
          end: {
            line: 511,
            column: 48
          }
        },
        loc: {
          start: {
            line: 511,
            column: 52
          },
          end: {
            line: 511,
            column: 74
          }
        },
        line: 511
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 512,
            column: 48
          },
          end: {
            line: 512,
            column: 49
          }
        },
        loc: {
          start: {
            line: 512,
            column: 58
          },
          end: {
            line: 512,
            column: 74
          }
        },
        line: 512
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 515,
            column: 42
          },
          end: {
            line: 515,
            column: 43
          }
        },
        loc: {
          start: {
            line: 515,
            column: 55
          },
          end: {
            line: 515,
            column: 94
          }
        },
        line: 515
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 529,
            column: 6
          },
          end: {
            line: 529,
            column: 7
          }
        },
        loc: {
          start: {
            line: 529,
            column: 41
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 529
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 535,
            column: 6
          },
          end: {
            line: 535,
            column: 7
          }
        },
        loc: {
          start: {
            line: 535,
            column: 20
          },
          end: {
            line: 537,
            column: 5
          }
        },
        line: 535
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 541,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        loc: {
          start: {
            line: 541,
            column: 26
          },
          end: {
            line: 556,
            column: 5
          }
        },
        line: 541
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 557,
            column: 4
          },
          end: {
            line: 557,
            column: 5
          }
        },
        loc: {
          start: {
            line: 557,
            column: 48
          },
          end: {
            line: 564,
            column: 5
          }
        },
        line: 557
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 559,
            column: 52
          },
          end: {
            line: 559,
            column: 53
          }
        },
        loc: {
          start: {
            line: 559,
            column: 57
          },
          end: {
            line: 559,
            column: 66
          }
        },
        line: 559
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 54,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 54,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "3": {
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 149,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 149,
            column: 34
          }
        }, {
          start: {
            line: 149,
            column: 38
          },
          end: {
            line: 149,
            column: 72
          }
        }],
        line: 149
      },
      "4": {
        loc: {
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "5": {
        loc: {
          start: {
            line: 239,
            column: 32
          },
          end: {
            line: 239,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 52
          },
          end: {
            line: 239,
            column: 77
          }
        }, {
          start: {
            line: 239,
            column: 80
          },
          end: {
            line: 239,
            column: 81
          }
        }],
        line: 239
      },
      "6": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "7": {
        loc: {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 317,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "8": {
        loc: {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "9": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 382,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "10": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "11": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "12": {
        loc: {
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      },
      "13": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "14": {
        loc: {
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 12
          },
          end: {
            line: 441,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "15": {
        loc: {
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "16": {
        loc: {
          start: {
            line: 444,
            column: 16
          },
          end: {
            line: 444,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 16
          },
          end: {
            line: 444,
            column: 30
          }
        }, {
          start: {
            line: 444,
            column: 34
          },
          end: {
            line: 444,
            column: 57
          }
        }],
        line: 444
      },
      "17": {
        loc: {
          start: {
            line: 451,
            column: 24
          },
          end: {
            line: 451,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 451,
            column: 59
          },
          end: {
            line: 451,
            column: 68
          }
        }, {
          start: {
            line: 451,
            column: 71
          },
          end: {
            line: 451,
            column: 79
          }
        }],
        line: 451
      },
      "18": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "19": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "20": {
        loc: {
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 497
      },
      "21": {
        loc: {
          start: {
            line: 510,
            column: 51
          },
          end: {
            line: 510,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 51
          },
          end: {
            line: 510,
            column: 60
          }
        }, {
          start: {
            line: 510,
            column: 64
          },
          end: {
            line: 510,
            column: 86
          }
        }],
        line: 510
      },
      "22": {
        loc: {
          start: {
            line: 514,
            column: 28
          },
          end: {
            line: 514,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 514,
            column: 52
          },
          end: {
            line: 514,
            column: 83
          }
        }, {
          start: {
            line: 514,
            column: 86
          },
          end: {
            line: 514,
            column: 87
          }
        }],
        line: 514
      },
      "23": {
        loc: {
          start: {
            line: 515,
            column: 55
          },
          end: {
            line: 515,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 515,
            column: 76
          },
          end: {
            line: 515,
            column: 85
          }
        }, {
          start: {
            line: 515,
            column: 88
          },
          end: {
            line: 515,
            column: 94
          }
        }],
        line: 515
      },
      "24": {
        loc: {
          start: {
            line: 529,
            column: 29
          },
          end: {
            line: 529,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 529,
            column: 37
          },
          end: {
            line: 529,
            column: 39
          }
        }],
        line: 529
      },
      "25": {
        loc: {
          start: {
            line: 530,
            column: 24
          },
          end: {
            line: 530,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 530,
            column: 24
          },
          end: {
            line: 530,
            column: 52
          }
        }, {
          start: {
            line: 530,
            column: 56
          },
          end: {
            line: 530,
            column: 58
          }
        }],
        line: 530
      },
      "26": {
        loc: {
          start: {
            line: 560,
            column: 8
          },
          end: {
            line: 563,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 560,
            column: 8
          },
          end: {
            line: 563,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 560
      },
      "27": {
        loc: {
          start: {
            line: 562,
            column: 217
          },
          end: {
            line: 562,
            column: 313
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 562,
            column: 252
          },
          end: {
            line: 562,
            column: 262
          }
        }, {
          start: {
            line: 562,
            column: 265
          },
          end: {
            line: 562,
            column: 313
          }
        }],
        line: 562
      },
      "28": {
        loc: {
          start: {
            line: 562,
            column: 265
          },
          end: {
            line: 562,
            column: 313
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 562,
            column: 296
          },
          end: {
            line: 562,
            column: 302
          }
        }, {
          start: {
            line: 562,
            column: 305
          },
          end: {
            line: 562,
            column: 313
          }
        }],
        line: 562
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\enterprise-automated-testing.ts"],
      sourcesContent: ["/**\r\n * Sistema Enterprise de Testing Automatizado\r\n * Ejecuta tests continuos de todos los sistemas enterprise\r\n */\r\n\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { enterpriseAlertSystem, EnterpriseAlertUtils } from '@/lib/monitoring/enterprise-alert-system';\r\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\nexport type TestType = 'unit' | 'integration' | 'e2e' | 'security' | 'performance' | 'smoke';\r\nexport type TestStatus = 'pending' | 'running' | 'passed' | 'failed' | 'skipped' | 'timeout';\r\nexport type TestSeverity = 'low' | 'medium' | 'high' | 'critical';\r\n\r\nexport interface TestCase {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: TestType;\r\n  severity: TestSeverity;\r\n  enabled: boolean;\r\n  \r\n  // Configuraci\xF3n de ejecuci\xF3n\r\n  timeout: number; // milisegundos\r\n  retries: number;\r\n  interval: number; // segundos para tests continuos\r\n  \r\n  // Funci\xF3n de test\r\n  testFunction: () => Promise<TestResult>;\r\n  \r\n  // Configuraci\xF3n de alertas\r\n  alertOnFailure: boolean;\r\n  alertThreshold: number; // n\xFAmero de fallos consecutivos\r\n  \r\n  // Metadatos\r\n  tags: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface TestResult {\r\n  testId: string;\r\n  status: TestStatus;\r\n  startTime: string;\r\n  endTime: string;\r\n  duration: number; // milisegundos\r\n  \r\n  // Resultados\r\n  passed: boolean;\r\n  error?: string;\r\n  details?: any;\r\n  \r\n  // M\xE9tricas\r\n  assertions: number;\r\n  assertionsPassed: number;\r\n  assertionsFailed: number;\r\n  \r\n  // Metadatos\r\n  environment: string;\r\n  version: string;\r\n  runId: string;\r\n}\r\n\r\nexport interface TestSuite {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  tests: TestCase[];\r\n  enabled: boolean;\r\n  \r\n  // Configuraci\xF3n de ejecuci\xF3n\r\n  parallel: boolean;\r\n  maxConcurrency: number;\r\n  \r\n  // Configuraci\xF3n de programaci\xF3n\r\n  schedule?: {\r\n    enabled: boolean;\r\n    cron: string;\r\n    timezone: string;\r\n  };\r\n  \r\n  // Metadatos\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface TestMetrics {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  successRate: number;\r\n  averageDuration: number;\r\n  totalDuration: number;\r\n  lastRun: string;\r\n}\r\n\r\n// =====================================================\r\n// TESTS PREDEFINIDOS\r\n// =====================================================\r\n\r\nexport const ENTERPRISE_TEST_CASES: TestCase[] = [\r\n  // Tests de seguridad\r\n  {\r\n    id: 'security_rate_limiting_basic',\r\n    name: 'Rate Limiting - Funcionalidad B\xE1sica',\r\n    description: 'Verifica que el rate limiting funcione correctamente',\r\n    type: 'security',\r\n    severity: 'critical',\r\n    enabled: true,\r\n    timeout: 30000,\r\n    retries: 2,\r\n    interval: 300, // 5 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Simular requests para probar rate limiting\r\n        const metrics = metricsCollector.getMetrics();\r\n        \r\n        // Verificar que las m\xE9tricas existen\r\n        if (typeof metrics.totalRequests !== 'number') {\r\n          throw new Error('Rate limiting metrics not available');\r\n        }\r\n        \r\n        // Verificar que el sistema est\xE1 respondiendo\r\n        if (metrics.averageResponseTime > 5000) {\r\n          throw new Error(`Response time too high: ${metrics.averageResponseTime}ms`);\r\n        }\r\n        \r\n        return {\r\n          testId: 'security_rate_limiting_basic',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 2,\r\n          assertionsPassed: 2,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            totalRequests: metrics.totalRequests,\r\n            averageResponseTime: metrics.averageResponseTime\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'security_rate_limiting_basic',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 2,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 2,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 2,\r\n    tags: ['security', 'rate-limiting', 'critical'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  {\r\n    id: 'security_audit_logging',\r\n    name: 'Auditor\xEDa - Sistema de Logging',\r\n    description: 'Verifica que el sistema de auditor\xEDa est\xE9 funcionando',\r\n    type: 'security',\r\n    severity: 'high',\r\n    enabled: true,\r\n    timeout: 20000,\r\n    retries: 1,\r\n    interval: 600, // 10 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Crear evento de prueba\r\n        const testContext: EnterpriseAuthContext = {\r\n          userId: 'test_user',\r\n          sessionId: 'test_session',\r\n          email: 'test@pinteya.com',\r\n          role: 'admin',\r\n          permissions: ['test_access'],\r\n          sessionValid: true,\r\n          securityLevel: 'high',\r\n          ipAddress: '127.0.0.1',\r\n          userAgent: 'AutomatedTest/1.0',\r\n          supabase: {} as any,\r\n          validations: {\r\n            jwtValid: true,\r\n            csrfValid: true,\r\n            rateLimitPassed: true,\r\n            originValid: true\r\n          }\r\n        };\r\n\r\n        const correlationId = await enterpriseAuditSystem.logEnterpriseEvent({\r\n          user_id: 'test_user',\r\n          event_type: 'TEST_EVENT' as any,\r\n          event_category: 'automated_testing',\r\n          severity: 'low' as any,\r\n          description: 'Automated test event',\r\n          metadata: { test: true, runId },\r\n          ip_address: '127.0.0.1',\r\n          user_agent: 'AutomatedTest/1.0'\r\n        }, testContext);\r\n\r\n        if (!correlationId || !correlationId.startsWith('corr_')) {\r\n          throw new Error('Audit system did not return valid correlation ID');\r\n        }\r\n\r\n        return {\r\n          testId: 'security_audit_logging',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 1,\r\n          assertionsPassed: 1,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            correlationId\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'security_audit_logging',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 1,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 1,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 1,\r\n    tags: ['security', 'audit', 'logging'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  // Tests de performance\r\n  {\r\n    id: 'performance_cache_hit_rate',\r\n    name: 'Performance - Cache Hit Rate',\r\n    description: 'Verifica que la tasa de hit del cache sea \xF3ptima',\r\n    type: 'performance',\r\n    severity: 'medium',\r\n    enabled: true,\r\n    timeout: 15000,\r\n    retries: 1,\r\n    interval: 300, // 5 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n        const cacheKeys = Object.keys(cacheMetrics);\r\n        \r\n        if (cacheKeys.length === 0) {\r\n          // Si no hay m\xE9tricas de cache, el test pasa pero con advertencia\r\n          return {\r\n            testId: 'performance_cache_hit_rate',\r\n            status: 'passed' as TestStatus,\r\n            startTime,\r\n            endTime: new Date().toISOString(),\r\n            duration: Date.now() - new Date(startTime).getTime(),\r\n            passed: true,\r\n            assertions: 1,\r\n            assertionsPassed: 1,\r\n            assertionsFailed: 0,\r\n            environment: 'production',\r\n            version: '1.0.0',\r\n            runId,\r\n            details: {\r\n              warning: 'No cache metrics available',\r\n              cacheKeysCount: 0\r\n            }\r\n          };\r\n        }\r\n\r\n        // Calcular hit rate promedio\r\n        const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0);\r\n        const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0);\r\n        const totalRequests = totalHits + totalMisses;\r\n        const hitRate = totalRequests > 0 ? totalHits / totalRequests : 0;\r\n\r\n        // Verificar que el hit rate sea aceptable (> 70%)\r\n        if (hitRate < 0.7) {\r\n          throw new Error(`Cache hit rate too low: ${(hitRate * 100).toFixed(2)}% (expected > 70%)`);\r\n        }\r\n\r\n        return {\r\n          testId: 'performance_cache_hit_rate',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 1,\r\n          assertionsPassed: 1,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            hitRate: hitRate,\r\n            hitRatePercent: (hitRate * 100).toFixed(2),\r\n            totalHits,\r\n            totalMisses,\r\n            cacheKeysCount: cacheKeys.length\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'performance_cache_hit_rate',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 1,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 1,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 3,\r\n    tags: ['performance', 'cache', 'optimization'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n\r\n  // Tests de integraci\xF3n\r\n  {\r\n    id: 'integration_alert_system',\r\n    name: 'Integraci\xF3n - Sistema de Alertas',\r\n    description: 'Verifica que el sistema de alertas est\xE9 funcionando',\r\n    type: 'integration',\r\n    severity: 'high',\r\n    enabled: true,\r\n    timeout: 25000,\r\n    retries: 1,\r\n    interval: 900, // 15 minutos\r\n    testFunction: async () => {\r\n      const startTime = new Date().toISOString();\r\n      const runId = `test_${Date.now()}`;\r\n      \r\n      try {\r\n        // Verificar que el sistema de alertas est\xE9 inicializado\r\n        const activeAlerts = enterpriseAlertSystem.getActiveAlerts();\r\n        const alertMetrics = enterpriseAlertSystem.getAlertMetrics();\r\n        \r\n        // Crear una alerta de prueba\r\n        const testAlertId = await EnterpriseAlertUtils.createManualAlert(\r\n          'Test Alert',\r\n          'Automated test alert',\r\n          'low',\r\n          'availability',\r\n          'automated_test'\r\n        );\r\n\r\n        // Verificar que la alerta se cre\xF3\r\n        const createdAlert = enterpriseAlertSystem.getActiveAlerts()\r\n          .find(alert => alert.id === testAlertId);\r\n\r\n        if (!createdAlert) {\r\n          throw new Error('Test alert was not created successfully');\r\n        }\r\n\r\n        // Resolver la alerta de prueba\r\n        const resolved = await enterpriseAlertSystem.resolveAlert(testAlertId, 'automated_test');\r\n        \r\n        if (!resolved) {\r\n          throw new Error('Test alert could not be resolved');\r\n        }\r\n\r\n        return {\r\n          testId: 'integration_alert_system',\r\n          status: 'passed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: true,\r\n          assertions: 3,\r\n          assertionsPassed: 3,\r\n          assertionsFailed: 0,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId,\r\n          details: {\r\n            testAlertId,\r\n            activeAlertsCount: activeAlerts.length,\r\n            totalAlerts: alertMetrics.totalAlerts\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          testId: 'integration_alert_system',\r\n          status: 'failed' as TestStatus,\r\n          startTime,\r\n          endTime: new Date().toISOString(),\r\n          duration: Date.now() - new Date(startTime).getTime(),\r\n          passed: false,\r\n          error: error.message,\r\n          assertions: 3,\r\n          assertionsPassed: 0,\r\n          assertionsFailed: 3,\r\n          environment: 'production',\r\n          version: '1.0.0',\r\n          runId\r\n        };\r\n      }\r\n    },\r\n    alertOnFailure: true,\r\n    alertThreshold: 1,\r\n    tags: ['integration', 'alerts', 'monitoring'],\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// =====================================================\r\n// SISTEMA ENTERPRISE DE TESTING AUTOMATIZADO\r\n// =====================================================\r\n\r\nexport class EnterpriseAutomatedTesting {\r\n  private static instance: EnterpriseAutomatedTesting;\r\n  private testCases: Map<string, TestCase> = new Map();\r\n  private testResults: Map<string, TestResult[]> = new Map();\r\n  private runningTests: Set<string> = new Set();\r\n  private testTimers: Map<string, NodeJS.Timeout> = new Map();\r\n  private isInitialized = false;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): EnterpriseAutomatedTesting {\r\n    if (!EnterpriseAutomatedTesting.instance) {\r\n      EnterpriseAutomatedTesting.instance = new EnterpriseAutomatedTesting();\r\n    }\r\n    return EnterpriseAutomatedTesting.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el sistema de testing automatizado\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {return;}\r\n\r\n    try {\r\n      // Cargar tests predefinidos\r\n      ENTERPRISE_TEST_CASES.forEach(testCase => {\r\n        this.testCases.set(testCase.id, testCase);\r\n      });\r\n\r\n      // Iniciar ejecuci\xF3n programada de tests\r\n      this.startScheduledTests();\r\n\r\n      this.isInitialized = true;\r\n      console.log('[ENTERPRISE_TESTING] Sistema inicializado con', this.testCases.size, 'tests');\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_TESTING] Error inicializando sistema:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test espec\xEDfico\r\n   */\r\n  async runTest(testId: string): Promise<TestResult> {\r\n    const testCase = this.testCases.get(testId);\r\n    if (!testCase) {\r\n      throw new Error(`Test case not found: ${testId}`);\r\n    }\r\n\r\n    if (!testCase.enabled) {\r\n      return {\r\n        testId,\r\n        status: 'skipped',\r\n        startTime: new Date().toISOString(),\r\n        endTime: new Date().toISOString(),\r\n        duration: 0,\r\n        passed: false,\r\n        assertions: 0,\r\n        assertionsPassed: 0,\r\n        assertionsFailed: 0,\r\n        environment: 'production',\r\n        version: '1.0.0',\r\n        runId: `skip_${Date.now()}`\r\n      };\r\n    }\r\n\r\n    if (this.runningTests.has(testId)) {\r\n      throw new Error(`Test is already running: ${testId}`);\r\n    }\r\n\r\n    this.runningTests.add(testId);\r\n\r\n    try {\r\n      // Ejecutar test con timeout\r\n      const result = await Promise.race([\r\n        testCase.testFunction(),\r\n        new Promise<TestResult>((_, reject) => \r\n          setTimeout(() => reject(new Error('Test timeout')), testCase.timeout)\r\n        )\r\n      ]);\r\n\r\n      // Guardar resultado\r\n      if (!this.testResults.has(testId)) {\r\n        this.testResults.set(testId, []);\r\n      }\r\n      this.testResults.get(testId)!.push(result);\r\n\r\n      // Verificar si necesita alerta\r\n      if (!result.passed && testCase.alertOnFailure) {\r\n        await this.checkAlertThreshold(testCase, result);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const failedResult: TestResult = {\r\n        testId,\r\n        status: error.message === 'Test timeout' ? 'timeout' : 'failed',\r\n        startTime: new Date().toISOString(),\r\n        endTime: new Date().toISOString(),\r\n        duration: testCase.timeout,\r\n        passed: false,\r\n        error: error.message,\r\n        assertions: 0,\r\n        assertionsPassed: 0,\r\n        assertionsFailed: 1,\r\n        environment: 'production',\r\n        version: '1.0.0',\r\n        runId: `error_${Date.now()}`\r\n      };\r\n\r\n      // Guardar resultado fallido\r\n      if (!this.testResults.has(testId)) {\r\n        this.testResults.set(testId, []);\r\n      }\r\n      this.testResults.get(testId)!.push(failedResult);\r\n\r\n      // Verificar si necesita alerta\r\n      if (testCase.alertOnFailure) {\r\n        await this.checkAlertThreshold(testCase, failedResult);\r\n      }\r\n\r\n      return failedResult;\r\n    } finally {\r\n      this.runningTests.delete(testId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los tests habilitados\r\n   */\r\n  async runAllTests(): Promise<TestResult[]> {\r\n    const enabledTests = Array.from(this.testCases.values()).filter(test => test.enabled);\r\n    const results: TestResult[] = [];\r\n\r\n    for (const testCase of enabledTests) {\r\n      try {\r\n        const result = await this.runTest(testCase.id);\r\n        results.push(result);\r\n      } catch (error) {\r\n        console.error(`[ENTERPRISE_TESTING] Error running test ${testCase.id}:`, error);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas de testing\r\n   */\r\n  getTestMetrics(): TestMetrics {\r\n    const allResults = Array.from(this.testResults.values()).flat();\r\n    \r\n    if (allResults.length === 0) {\r\n      return {\r\n        totalTests: 0,\r\n        passedTests: 0,\r\n        failedTests: 0,\r\n        skippedTests: 0,\r\n        successRate: 0,\r\n        averageDuration: 0,\r\n        totalDuration: 0,\r\n        lastRun: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    const passedTests = allResults.filter(r => r.passed).length;\r\n    const failedTests = allResults.filter(r => !r.passed && r.status !== 'skipped').length;\r\n    const skippedTests = allResults.filter(r => r.status === 'skipped').length;\r\n    const totalDuration = allResults.reduce((sum, r) => sum + r.duration, 0);\r\n    const averageDuration = totalDuration / allResults.length;\r\n    const successRate = allResults.length > 0 ? passedTests / allResults.length : 0;\r\n    const lastRun = allResults.reduce((latest, r) => \r\n      r.endTime > latest ? r.endTime : latest, allResults[0].endTime);\r\n\r\n    return {\r\n      totalTests: allResults.length,\r\n      passedTests,\r\n      failedTests,\r\n      skippedTests,\r\n      successRate,\r\n      averageDuration,\r\n      totalDuration,\r\n      lastRun\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene resultados de un test espec\xEDfico\r\n   */\r\n  getTestResults(testId: string, limit: number = 10): TestResult[] {\r\n    const results = this.testResults.get(testId) || [];\r\n    return results.slice(-limit).reverse(); // \xDAltimos N resultados, m\xE1s reciente primero\r\n  }\r\n\r\n  /**\r\n   * Obtiene todos los tests\r\n   */\r\n  getAllTests(): TestCase[] {\r\n    return Array.from(this.testCases.values());\r\n  }\r\n\r\n  // =====================================================\r\n  // M\xC9TODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  private startScheduledTests(): void {\r\n    console.log('[ENTERPRISE_TESTING] \uD83D\uDEAB TESTS PROGRAMADOS TEMPORALMENTE DESHABILITADOS');\r\n    console.log('[ENTERPRISE_TESTING] \uD83D\uDCCB Raz\xF3n: Evitar llamadas recursivas a APIs de auth');\r\n\r\n    // C\xD3DIGO COMENTADO TEMPORALMENTE PARA EVITAR RECURSI\xD3N\r\n    // for (const [testId, testCase] of this.testCases.entries()) {\r\n    //   if (!testCase.enabled || testCase.interval <= 0) continue;\r\n\r\n    //   const timer = setInterval(async () => {\r\n    //     try {\r\n    //       await this.runTest(testId);\r\n    //     } catch (error) {\r\n    //       console.error(`[ENTERPRISE_TESTING] Error in scheduled test ${testId}:`, error);\r\n    //     }\r\n    //   }, testCase.interval * 1000);\r\n\r\n    //   this.testTimers.set(testId, timer);\r\n    // }\r\n  }\r\n\r\n  private async checkAlertThreshold(testCase: TestCase, result: TestResult): Promise<void> {\r\n    const recentResults = this.getTestResults(testCase.id, testCase.alertThreshold);\r\n    const recentFailures = recentResults.filter(r => !r.passed).length;\r\n\r\n    if (recentFailures >= testCase.alertThreshold) {\r\n      // Crear alerta\r\n      await EnterpriseAlertUtils.createManualAlert(\r\n        `Test Failure: ${testCase.name}`,\r\n        `Test ${testCase.name} has failed ${recentFailures} times consecutively. Last error: ${result.error}`,\r\n        testCase.severity === 'critical' ? 'critical' : \r\n        testCase.severity === 'high' ? 'high' : 'medium',\r\n        'availability',\r\n        'automated_testing'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON\r\n// =====================================================\r\n\r\nexport const enterpriseAutomatedTesting = EnterpriseAutomatedTesting.getInstance();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["ENTERPRISE_TEST_CASES", "EnterpriseAutomatedTesting", "enterpriseAutomatedTesting", "id", "name", "description", "type", "severity", "enabled", "timeout", "retries", "interval", "testFunction", "startTime", "Date", "toISOString", "runId", "now", "metrics", "metricsCollector", "getMetrics", "totalRequests", "Error", "averageResponseTime", "testId", "status", "endTime", "duration", "getTime", "passed", "assertions", "assertionsPassed", "assertionsFailed", "environment", "version", "details", "error", "message", "alertOnFailure", "alertThreshold", "tags", "createdAt", "updatedAt", "testContext", "userId", "sessionId", "email", "role", "permissions", "sessionValid", "securityLevel", "ipAddress", "userAgent", "supabase", "validations", "jwtValid", "csrfValid", "rateLimitPassed", "originValid", "correlationId", "enterpriseAuditSystem", "logEnterpriseEvent", "user_id", "event_type", "event_category", "metadata", "test", "ip_address", "user_agent", "startsWith", "cacheMetrics", "enterpriseCacheSystem", "cacheKeys", "Object", "keys", "length", "warning", "cacheKeysCount", "totalHits", "reduce", "sum", "key", "hits", "totalMisses", "misses", "hitRate", "toFixed", "hitRatePercent", "activeAlerts", "enterpriseAlertSystem", "getActiveAlerts", "alertMetrics", "getAlertMetrics", "testAlertId", "EnterpriseAlertUtils", "createManualAlert", "createdAlert", "find", "alert", "resolved", "resolveAlert", "activeAlertsCount", "totalAlerts", "testCases", "Map", "testResults", "runningTests", "Set", "testTimers", "isInitialized", "getInstance", "instance", "initialize", "forEach", "testCase", "set", "startScheduledTests", "console", "log", "size", "runTest", "get", "has", "add", "result", "Promise", "race", "_", "reject", "setTimeout", "push", "checkAlertThreshold", "failedResult", "delete", "runAllTests", "enabledTests", "Array", "from", "values", "filter", "results", "getTestMetrics", "allResults", "flat", "totalTests", "passedTests", "failedTests", "skippedTests", "successRate", "averageDuration", "totalDuration", "lastRun", "r", "latest", "getTestResults", "limit", "slice", "reverse", "getAllTests", "recentResults", "recentFailures"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e93a271520d89adc7fd6247fc3b2d5835aecd1d5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nnuikch0f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nnuikch0f();
cov_2nnuikch0f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2nnuikch0f().f[0]++;
  cov_2nnuikch0f().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2nnuikch0f().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2nnuikch0f().s[3]++;
_export(exports, {
  get ENTERPRISE_TEST_CASES() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[1]++;
    cov_2nnuikch0f().s[4]++;
    return ENTERPRISE_TEST_CASES;
  },
  get EnterpriseAutomatedTesting() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[2]++;
    cov_2nnuikch0f().s[5]++;
    return EnterpriseAutomatedTesting;
  },
  get enterpriseAutomatedTesting() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[3]++;
    cov_2nnuikch0f().s[6]++;
    return enterpriseAutomatedTesting;
  }
});
const _enterpriseauditsystem =
/* istanbul ignore next */
(cov_2nnuikch0f().s[7]++, require("../security/enterprise-audit-system"));
const _enterprisealertsystem =
/* istanbul ignore next */
(cov_2nnuikch0f().s[8]++, require("../monitoring/enterprise-alert-system"));
const _enterpriseratelimiter =
/* istanbul ignore next */
(cov_2nnuikch0f().s[9]++, require("../rate-limiting/enterprise-rate-limiter"));
const _enterprisecachesystem =
/* istanbul ignore next */
(cov_2nnuikch0f().s[10]++, require("../optimization/enterprise-cache-system"));
const ENTERPRISE_TEST_CASES =
/* istanbul ignore next */
(cov_2nnuikch0f().s[11]++, [
// Tests de seguridad
{
  id: 'security_rate_limiting_basic',
  name: 'Rate Limiting - Funcionalidad Básica',
  description: 'Verifica que el rate limiting funcione correctamente',
  type: 'security',
  severity: 'critical',
  enabled: true,
  timeout: 30000,
  retries: 2,
  interval: 300,
  testFunction: async () => {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[12]++, new Date().toISOString());
    const runId =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[13]++, `test_${Date.now()}`);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[14]++;
    try {
      // Simular requests para probar rate limiting
      const metrics =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[15]++, _enterpriseratelimiter.metricsCollector.getMetrics());
      // Verificar que las métricas existen
      /* istanbul ignore next */
      cov_2nnuikch0f().s[16]++;
      if (typeof metrics.totalRequests !== 'number') {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[0][0]++;
        cov_2nnuikch0f().s[17]++;
        throw new Error('Rate limiting metrics not available');
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[0][1]++;
      }
      // Verificar que el sistema está respondiendo
      cov_2nnuikch0f().s[18]++;
      if (metrics.averageResponseTime > 5000) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[1][0]++;
        cov_2nnuikch0f().s[19]++;
        throw new Error(`Response time too high: ${metrics.averageResponseTime}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[1][1]++;
      }
      cov_2nnuikch0f().s[20]++;
      return {
        testId: 'security_rate_limiting_basic',
        status: 'passed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: true,
        assertions: 2,
        assertionsPassed: 2,
        assertionsFailed: 0,
        environment: 'production',
        version: '1.0.0',
        runId,
        details: {
          totalRequests: metrics.totalRequests,
          averageResponseTime: metrics.averageResponseTime
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[21]++;
      return {
        testId: 'security_rate_limiting_basic',
        status: 'failed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: false,
        error: error.message,
        assertions: 2,
        assertionsPassed: 0,
        assertionsFailed: 2,
        environment: 'production',
        version: '1.0.0',
        runId
      };
    }
  },
  alertOnFailure: true,
  alertThreshold: 2,
  tags: ['security', 'rate-limiting', 'critical'],
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
}, {
  id: 'security_audit_logging',
  name: 'Auditoría - Sistema de Logging',
  description: 'Verifica que el sistema de auditoría esté funcionando',
  type: 'security',
  severity: 'high',
  enabled: true,
  timeout: 20000,
  retries: 1,
  interval: 600,
  testFunction: async () => {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[22]++, new Date().toISOString());
    const runId =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[23]++, `test_${Date.now()}`);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[24]++;
    try {
      // Crear evento de prueba
      const testContext =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[25]++, {
        userId: 'test_user',
        sessionId: 'test_session',
        email: 'test@pinteya.com',
        role: 'admin',
        permissions: ['test_access'],
        sessionValid: true,
        securityLevel: 'high',
        ipAddress: '127.0.0.1',
        userAgent: 'AutomatedTest/1.0',
        supabase: {},
        validations: {
          jwtValid: true,
          csrfValid: true,
          rateLimitPassed: true,
          originValid: true
        }
      });
      const correlationId =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[26]++, await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
        user_id: 'test_user',
        event_type: 'TEST_EVENT',
        event_category: 'automated_testing',
        severity: 'low',
        description: 'Automated test event',
        metadata: {
          test: true,
          runId
        },
        ip_address: '127.0.0.1',
        user_agent: 'AutomatedTest/1.0'
      }, testContext));
      /* istanbul ignore next */
      cov_2nnuikch0f().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[3][0]++, !correlationId) ||
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[3][1]++, !correlationId.startsWith('corr_'))) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[2][0]++;
        cov_2nnuikch0f().s[28]++;
        throw new Error('Audit system did not return valid correlation ID');
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[2][1]++;
      }
      cov_2nnuikch0f().s[29]++;
      return {
        testId: 'security_audit_logging',
        status: 'passed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: true,
        assertions: 1,
        assertionsPassed: 1,
        assertionsFailed: 0,
        environment: 'production',
        version: '1.0.0',
        runId,
        details: {
          correlationId
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[30]++;
      return {
        testId: 'security_audit_logging',
        status: 'failed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: false,
        error: error.message,
        assertions: 1,
        assertionsPassed: 0,
        assertionsFailed: 1,
        environment: 'production',
        version: '1.0.0',
        runId
      };
    }
  },
  alertOnFailure: true,
  alertThreshold: 1,
  tags: ['security', 'audit', 'logging'],
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
},
// Tests de performance
{
  id: 'performance_cache_hit_rate',
  name: 'Performance - Cache Hit Rate',
  description: 'Verifica que la tasa de hit del cache sea óptima',
  type: 'performance',
  severity: 'medium',
  enabled: true,
  timeout: 15000,
  retries: 1,
  interval: 300,
  testFunction: async () => {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[6]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[31]++, new Date().toISOString());
    const runId =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[32]++, `test_${Date.now()}`);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[33]++;
    try {
      const cacheMetrics =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[34]++, _enterprisecachesystem.enterpriseCacheSystem.getMetrics());
      const cacheKeys =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[35]++, Object.keys(cacheMetrics));
      /* istanbul ignore next */
      cov_2nnuikch0f().s[36]++;
      if (cacheKeys.length === 0) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[4][0]++;
        cov_2nnuikch0f().s[37]++;
        // Si no hay métricas de cache, el test pasa pero con advertencia
        return {
          testId: 'performance_cache_hit_rate',
          status: 'passed',
          startTime,
          endTime: new Date().toISOString(),
          duration: Date.now() - new Date(startTime).getTime(),
          passed: true,
          assertions: 1,
          assertionsPassed: 1,
          assertionsFailed: 0,
          environment: 'production',
          version: '1.0.0',
          runId,
          details: {
            warning: 'No cache metrics available',
            cacheKeysCount: 0
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[4][1]++;
      }
      // Calcular hit rate promedio
      const totalHits =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[38]++, cacheKeys.reduce((sum, key) => {
        /* istanbul ignore next */
        cov_2nnuikch0f().f[7]++;
        cov_2nnuikch0f().s[39]++;
        return sum + cacheMetrics[key].hits;
      }, 0));
      const totalMisses =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[40]++, cacheKeys.reduce((sum, key) => {
        /* istanbul ignore next */
        cov_2nnuikch0f().f[8]++;
        cov_2nnuikch0f().s[41]++;
        return sum + cacheMetrics[key].misses;
      }, 0));
      const totalRequests =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[42]++, totalHits + totalMisses);
      const hitRate =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[43]++, totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[5][0]++, totalHits / totalRequests) :
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[5][1]++, 0));
      // Verificar que el hit rate sea aceptable (> 70%)
      /* istanbul ignore next */
      cov_2nnuikch0f().s[44]++;
      if (hitRate < 0.7) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[6][0]++;
        cov_2nnuikch0f().s[45]++;
        throw new Error(`Cache hit rate too low: ${(hitRate * 100).toFixed(2)}% (expected > 70%)`);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[6][1]++;
      }
      cov_2nnuikch0f().s[46]++;
      return {
        testId: 'performance_cache_hit_rate',
        status: 'passed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: true,
        assertions: 1,
        assertionsPassed: 1,
        assertionsFailed: 0,
        environment: 'production',
        version: '1.0.0',
        runId,
        details: {
          hitRate: hitRate,
          hitRatePercent: (hitRate * 100).toFixed(2),
          totalHits,
          totalMisses,
          cacheKeysCount: cacheKeys.length
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[47]++;
      return {
        testId: 'performance_cache_hit_rate',
        status: 'failed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: false,
        error: error.message,
        assertions: 1,
        assertionsPassed: 0,
        assertionsFailed: 1,
        environment: 'production',
        version: '1.0.0',
        runId
      };
    }
  },
  alertOnFailure: true,
  alertThreshold: 3,
  tags: ['performance', 'cache', 'optimization'],
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
},
// Tests de integración
{
  id: 'integration_alert_system',
  name: 'Integración - Sistema de Alertas',
  description: 'Verifica que el sistema de alertas esté funcionando',
  type: 'integration',
  severity: 'high',
  enabled: true,
  timeout: 25000,
  retries: 1,
  interval: 900,
  testFunction: async () => {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[9]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[48]++, new Date().toISOString());
    const runId =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[49]++, `test_${Date.now()}`);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[50]++;
    try {
      // Verificar que el sistema de alertas esté inicializado
      const activeAlerts =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[51]++, _enterprisealertsystem.enterpriseAlertSystem.getActiveAlerts());
      const alertMetrics =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[52]++, _enterprisealertsystem.enterpriseAlertSystem.getAlertMetrics());
      // Crear una alerta de prueba
      const testAlertId =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[53]++, await _enterprisealertsystem.EnterpriseAlertUtils.createManualAlert('Test Alert', 'Automated test alert', 'low', 'availability', 'automated_test'));
      // Verificar que la alerta se creó
      const createdAlert =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[54]++, _enterprisealertsystem.enterpriseAlertSystem.getActiveAlerts().find(alert => {
        /* istanbul ignore next */
        cov_2nnuikch0f().f[10]++;
        cov_2nnuikch0f().s[55]++;
        return alert.id === testAlertId;
      }));
      /* istanbul ignore next */
      cov_2nnuikch0f().s[56]++;
      if (!createdAlert) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[7][0]++;
        cov_2nnuikch0f().s[57]++;
        throw new Error('Test alert was not created successfully');
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[7][1]++;
      }
      // Resolver la alerta de prueba
      const resolved =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[58]++, await _enterprisealertsystem.enterpriseAlertSystem.resolveAlert(testAlertId, 'automated_test'));
      /* istanbul ignore next */
      cov_2nnuikch0f().s[59]++;
      if (!resolved) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[8][0]++;
        cov_2nnuikch0f().s[60]++;
        throw new Error('Test alert could not be resolved');
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[8][1]++;
      }
      cov_2nnuikch0f().s[61]++;
      return {
        testId: 'integration_alert_system',
        status: 'passed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: true,
        assertions: 3,
        assertionsPassed: 3,
        assertionsFailed: 0,
        environment: 'production',
        version: '1.0.0',
        runId,
        details: {
          testAlertId,
          activeAlertsCount: activeAlerts.length,
          totalAlerts: alertMetrics.totalAlerts
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[62]++;
      return {
        testId: 'integration_alert_system',
        status: 'failed',
        startTime,
        endTime: new Date().toISOString(),
        duration: Date.now() - new Date(startTime).getTime(),
        passed: false,
        error: error.message,
        assertions: 3,
        assertionsPassed: 0,
        assertionsFailed: 3,
        environment: 'production',
        version: '1.0.0',
        runId
      };
    }
  },
  alertOnFailure: true,
  alertThreshold: 1,
  tags: ['integration', 'alerts', 'monitoring'],
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
}]);
class EnterpriseAutomatedTesting {
  constructor() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[11]++;
    cov_2nnuikch0f().s[63]++;
    this.testCases = new Map();
    /* istanbul ignore next */
    cov_2nnuikch0f().s[64]++;
    this.testResults = new Map();
    /* istanbul ignore next */
    cov_2nnuikch0f().s[65]++;
    this.runningTests = new Set();
    /* istanbul ignore next */
    cov_2nnuikch0f().s[66]++;
    this.testTimers = new Map();
    /* istanbul ignore next */
    cov_2nnuikch0f().s[67]++;
    this.isInitialized = false;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[12]++;
    cov_2nnuikch0f().s[68]++;
    if (!EnterpriseAutomatedTesting.instance) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[9][0]++;
      cov_2nnuikch0f().s[69]++;
      EnterpriseAutomatedTesting.instance = new EnterpriseAutomatedTesting();
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[9][1]++;
    }
    cov_2nnuikch0f().s[70]++;
    return EnterpriseAutomatedTesting.instance;
  }
  /**
  * Inicializa el sistema de testing automatizado
  */
  async initialize() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[13]++;
    cov_2nnuikch0f().s[71]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[10][0]++;
      cov_2nnuikch0f().s[72]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[10][1]++;
    }
    cov_2nnuikch0f().s[73]++;
    try {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[74]++;
      // Cargar tests predefinidos
      ENTERPRISE_TEST_CASES.forEach(testCase => {
        /* istanbul ignore next */
        cov_2nnuikch0f().f[14]++;
        cov_2nnuikch0f().s[75]++;
        this.testCases.set(testCase.id, testCase);
      });
      // Iniciar ejecución programada de tests
      /* istanbul ignore next */
      cov_2nnuikch0f().s[76]++;
      this.startScheduledTests();
      /* istanbul ignore next */
      cov_2nnuikch0f().s[77]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_2nnuikch0f().s[78]++;
      console.log('[ENTERPRISE_TESTING] Sistema inicializado con', this.testCases.size, 'tests');
    } catch (error) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[79]++;
      console.error('[ENTERPRISE_TESTING] Error inicializando sistema:', error);
      /* istanbul ignore next */
      cov_2nnuikch0f().s[80]++;
      throw error;
    }
  }
  /**
  * Ejecuta un test específico
  */
  async runTest(testId) {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[15]++;
    const testCase =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[81]++, this.testCases.get(testId));
    /* istanbul ignore next */
    cov_2nnuikch0f().s[82]++;
    if (!testCase) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[11][0]++;
      cov_2nnuikch0f().s[83]++;
      throw new Error(`Test case not found: ${testId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[11][1]++;
    }
    cov_2nnuikch0f().s[84]++;
    if (!testCase.enabled) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[12][0]++;
      cov_2nnuikch0f().s[85]++;
      return {
        testId,
        status: 'skipped',
        startTime: new Date().toISOString(),
        endTime: new Date().toISOString(),
        duration: 0,
        passed: false,
        assertions: 0,
        assertionsPassed: 0,
        assertionsFailed: 0,
        environment: 'production',
        version: '1.0.0',
        runId: `skip_${Date.now()}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[12][1]++;
    }
    cov_2nnuikch0f().s[86]++;
    if (this.runningTests.has(testId)) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[13][0]++;
      cov_2nnuikch0f().s[87]++;
      throw new Error(`Test is already running: ${testId}`);
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[13][1]++;
    }
    cov_2nnuikch0f().s[88]++;
    this.runningTests.add(testId);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[89]++;
    try {
      // Ejecutar test con timeout
      const result =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[90]++, await Promise.race([testCase.testFunction(), new Promise((_, reject) => {
        /* istanbul ignore next */
        cov_2nnuikch0f().f[16]++;
        cov_2nnuikch0f().s[91]++;
        return setTimeout(() => {
          /* istanbul ignore next */
          cov_2nnuikch0f().f[17]++;
          cov_2nnuikch0f().s[92]++;
          return reject(new Error('Test timeout'));
        }, testCase.timeout);
      })]));
      // Guardar resultado
      /* istanbul ignore next */
      cov_2nnuikch0f().s[93]++;
      if (!this.testResults.has(testId)) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[14][0]++;
        cov_2nnuikch0f().s[94]++;
        this.testResults.set(testId, []);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[14][1]++;
      }
      cov_2nnuikch0f().s[95]++;
      this.testResults.get(testId).push(result);
      // Verificar si necesita alerta
      /* istanbul ignore next */
      cov_2nnuikch0f().s[96]++;
      if (
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[16][0]++, !result.passed) &&
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[16][1]++, testCase.alertOnFailure)) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[15][0]++;
        cov_2nnuikch0f().s[97]++;
        await this.checkAlertThreshold(testCase, result);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[15][1]++;
      }
      cov_2nnuikch0f().s[98]++;
      return result;
    } catch (error) {
      const failedResult =
      /* istanbul ignore next */
      (cov_2nnuikch0f().s[99]++, {
        testId,
        status: error.message === 'Test timeout' ?
        /* istanbul ignore next */
        (cov_2nnuikch0f().b[17][0]++, 'timeout') :
        /* istanbul ignore next */
        (cov_2nnuikch0f().b[17][1]++, 'failed'),
        startTime: new Date().toISOString(),
        endTime: new Date().toISOString(),
        duration: testCase.timeout,
        passed: false,
        error: error.message,
        assertions: 0,
        assertionsPassed: 0,
        assertionsFailed: 1,
        environment: 'production',
        version: '1.0.0',
        runId: `error_${Date.now()}`
      });
      // Guardar resultado fallido
      /* istanbul ignore next */
      cov_2nnuikch0f().s[100]++;
      if (!this.testResults.has(testId)) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[18][0]++;
        cov_2nnuikch0f().s[101]++;
        this.testResults.set(testId, []);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[18][1]++;
      }
      cov_2nnuikch0f().s[102]++;
      this.testResults.get(testId).push(failedResult);
      // Verificar si necesita alerta
      /* istanbul ignore next */
      cov_2nnuikch0f().s[103]++;
      if (testCase.alertOnFailure) {
        /* istanbul ignore next */
        cov_2nnuikch0f().b[19][0]++;
        cov_2nnuikch0f().s[104]++;
        await this.checkAlertThreshold(testCase, failedResult);
      } else
      /* istanbul ignore next */
      {
        cov_2nnuikch0f().b[19][1]++;
      }
      cov_2nnuikch0f().s[105]++;
      return failedResult;
    } finally {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[106]++;
      this.runningTests.delete(testId);
    }
  }
  /**
  * Ejecuta todos los tests habilitados
  */
  async runAllTests() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[18]++;
    const enabledTests =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[107]++, Array.from(this.testCases.values()).filter(test => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[19]++;
      cov_2nnuikch0f().s[108]++;
      return test.enabled;
    }));
    const results =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[109]++, []);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[110]++;
    for (const testCase of enabledTests) {
      /* istanbul ignore next */
      cov_2nnuikch0f().s[111]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_2nnuikch0f().s[112]++, await this.runTest(testCase.id));
        /* istanbul ignore next */
        cov_2nnuikch0f().s[113]++;
        results.push(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_2nnuikch0f().s[114]++;
        console.error(`[ENTERPRISE_TESTING] Error running test ${testCase.id}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2nnuikch0f().s[115]++;
    return results;
  }
  /**
  * Obtiene métricas de testing
  */
  getTestMetrics() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[20]++;
    const allResults =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[116]++, Array.from(this.testResults.values()).flat());
    /* istanbul ignore next */
    cov_2nnuikch0f().s[117]++;
    if (allResults.length === 0) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[20][0]++;
      cov_2nnuikch0f().s[118]++;
      return {
        totalTests: 0,
        passedTests: 0,
        failedTests: 0,
        skippedTests: 0,
        successRate: 0,
        averageDuration: 0,
        totalDuration: 0,
        lastRun: new Date().toISOString()
      };
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[20][1]++;
    }
    const passedTests =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[119]++, allResults.filter(r => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[21]++;
      cov_2nnuikch0f().s[120]++;
      return r.passed;
    }).length);
    const failedTests =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[121]++, allResults.filter(r => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[22]++;
      cov_2nnuikch0f().s[122]++;
      return /* istanbul ignore next */(cov_2nnuikch0f().b[21][0]++, !r.passed) &&
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[21][1]++, r.status !== 'skipped');
    }).length);
    const skippedTests =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[123]++, allResults.filter(r => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[23]++;
      cov_2nnuikch0f().s[124]++;
      return r.status === 'skipped';
    }).length);
    const totalDuration =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[125]++, allResults.reduce((sum, r) => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[24]++;
      cov_2nnuikch0f().s[126]++;
      return sum + r.duration;
    }, 0));
    const averageDuration =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[127]++, totalDuration / allResults.length);
    const successRate =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[128]++, allResults.length > 0 ?
    /* istanbul ignore next */
    (cov_2nnuikch0f().b[22][0]++, passedTests / allResults.length) :
    /* istanbul ignore next */
    (cov_2nnuikch0f().b[22][1]++, 0));
    const lastRun =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[129]++, allResults.reduce((latest, r) => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[25]++;
      cov_2nnuikch0f().s[130]++;
      return r.endTime > latest ?
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[23][0]++, r.endTime) :
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[23][1]++, latest);
    }, allResults[0].endTime));
    /* istanbul ignore next */
    cov_2nnuikch0f().s[131]++;
    return {
      totalTests: allResults.length,
      passedTests,
      failedTests,
      skippedTests,
      successRate,
      averageDuration,
      totalDuration,
      lastRun
    };
  }
  /**
  * Obtiene resultados de un test específico
  */
  getTestResults(testId, limit =
  /* istanbul ignore next */
  (cov_2nnuikch0f().b[24][0]++, 10)) {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[26]++;
    const results =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[132]++,
    /* istanbul ignore next */
    (cov_2nnuikch0f().b[25][0]++, this.testResults.get(testId)) ||
    /* istanbul ignore next */
    (cov_2nnuikch0f().b[25][1]++, []));
    /* istanbul ignore next */
    cov_2nnuikch0f().s[133]++;
    return results.slice(-limit).reverse(); // Últimos N resultados, más reciente primero
  }
  /**
  * Obtiene todos los tests
  */
  getAllTests() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[27]++;
    cov_2nnuikch0f().s[134]++;
    return Array.from(this.testCases.values());
  }
  // =====================================================
  // MÉTODOS PRIVADOS
  // =====================================================
  startScheduledTests() {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[28]++;
    cov_2nnuikch0f().s[135]++;
    console.log('[ENTERPRISE_TESTING] 🚫 TESTS PROGRAMADOS TEMPORALMENTE DESHABILITADOS');
    /* istanbul ignore next */
    cov_2nnuikch0f().s[136]++;
    console.log('[ENTERPRISE_TESTING] 📋 Razón: Evitar llamadas recursivas a APIs de auth');
    // CÓDIGO COMENTADO TEMPORALMENTE PARA EVITAR RECURSIÓN
    // for (const [testId, testCase] of this.testCases.entries()) {
    //   if (!testCase.enabled || testCase.interval <= 0) continue;
    //   const timer = setInterval(async () => {
    //     try {
    //       await this.runTest(testId);
    //     } catch (error) {
    //       console.error(`[ENTERPRISE_TESTING] Error in scheduled test ${testId}:`, error);
    //     }
    //   }, testCase.interval * 1000);
    //   this.testTimers.set(testId, timer);
    // }
  }
  async checkAlertThreshold(testCase, result) {
    /* istanbul ignore next */
    cov_2nnuikch0f().f[29]++;
    const recentResults =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[137]++, this.getTestResults(testCase.id, testCase.alertThreshold));
    const recentFailures =
    /* istanbul ignore next */
    (cov_2nnuikch0f().s[138]++, recentResults.filter(r => {
      /* istanbul ignore next */
      cov_2nnuikch0f().f[30]++;
      cov_2nnuikch0f().s[139]++;
      return !r.passed;
    }).length);
    /* istanbul ignore next */
    cov_2nnuikch0f().s[140]++;
    if (recentFailures >= testCase.alertThreshold) {
      /* istanbul ignore next */
      cov_2nnuikch0f().b[26][0]++;
      cov_2nnuikch0f().s[141]++;
      // Crear alerta
      await _enterprisealertsystem.EnterpriseAlertUtils.createManualAlert(`Test Failure: ${testCase.name}`, `Test ${testCase.name} has failed ${recentFailures} times consecutively. Last error: ${result.error}`, testCase.severity === 'critical' ?
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[27][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[27][1]++, testCase.severity === 'high' ?
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[28][0]++, 'high') :
      /* istanbul ignore next */
      (cov_2nnuikch0f().b[28][1]++, 'medium')), 'availability', 'automated_testing');
    } else
    /* istanbul ignore next */
    {
      cov_2nnuikch0f().b[26][1]++;
    }
  }
}
const enterpriseAutomatedTesting =
/* istanbul ignore next */
(cov_2nnuikch0f().s[142]++, EnterpriseAutomatedTesting.getInstance());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,