{"version":3,"names":["PerformanceBudgetMonitor","constructor","cov_1jw0nw4uk3","f","s","budgets","history","maxHistorySize","initializeDefaultBudgets","getInstance","instance","b","name","type","threshold","warning","unit","category","description","addBudget","budget","push","updateBudget","updates","index","findIndex","removeBudget","filter","getBudgets","analyzePerformance","buildPath","metrics","collectMetrics","violations","checkBudgetViolations","score","calculatePerformanceScore","grade","getPerformanceGrade","trends","calculateTrends","report","timestamp","Date","toISOString","buildId","generateBuildId","addToHistory","staticPath","_path","default","join","bundleSize","firstLoadJS","totalJS","css","images","fonts","chunkCount","duplicateModules","unusedCode","error","console","warn","getMockMetrics","actual","getMetricValue","violation","expected","severity","impact","calculateImpact","recommendation","generateRecommendation","sort","a","impactOrder","critical","high","medium","low","budgetName","metricMap","metricKey","excess","excessPercent","excessKB","Math","round","recommendations","penalty","calculatePenalty","max","min","basePenalty","impactMultiplier","currentMetrics","length","previousReport","metricKeys","key","current","previous","change","changePercent","trend","abs","metric","slice","getHistory","getLatestReport","now","random","toString","substr","saveReport","outputPath","reportPath","process","cwd","_fs","promises","mkdir","recursive","filename","filepath","writeFile","JSON","stringify","log","generateTextReport","textReport","toLocaleString","forEach","i","actualFormatted","expectedFormatted","toUpperCase","icon","changeText","toFixed"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\performance-budget-monitor.ts"],"sourcesContent":["// ===================================\r\n// PERFORMANCE BUDGET MONITOR\r\n// ===================================\r\n// Sistema de monitoreo de presupuestos de rendimiento\r\n\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface PerformanceBudget {\r\n  name: string;\r\n  type: 'size' | 'count' | 'time';\r\n  threshold: number;\r\n  warning: number;\r\n  unit: 'bytes' | 'kb' | 'mb' | 'ms' | 'count';\r\n  category: 'critical' | 'important' | 'optional';\r\n  description: string;\r\n}\r\n\r\nexport interface BudgetViolation {\r\n  budget: PerformanceBudget;\r\n  actual: number;\r\n  expected: number;\r\n  severity: 'warning' | 'error';\r\n  impact: 'low' | 'medium' | 'high' | 'critical';\r\n  recommendation: string;\r\n}\r\n\r\nexport interface PerformanceReport {\r\n  timestamp: string;\r\n  buildId: string;\r\n  violations: BudgetViolation[];\r\n  metrics: PerformanceMetrics;\r\n  score: number;\r\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n  trends: PerformanceTrend[];\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  bundleSize: number;\r\n  firstLoadJS: number;\r\n  totalJS: number;\r\n  css: number;\r\n  images: number;\r\n  fonts: number;\r\n  chunkCount: number;\r\n  duplicateModules: number;\r\n  unusedCode: number;\r\n}\r\n\r\nexport interface PerformanceTrend {\r\n  metric: string;\r\n  current: number;\r\n  previous: number;\r\n  change: number;\r\n  changePercent: number;\r\n  trend: 'improving' | 'degrading' | 'stable';\r\n}\r\n\r\n// ===================================\r\n// PERFORMANCE BUDGET MONITOR\r\n// ===================================\r\n\r\nexport class PerformanceBudgetMonitor {\r\n  private static instance: PerformanceBudgetMonitor;\r\n  private budgets: PerformanceBudget[] = [];\r\n  private history: PerformanceReport[] = [];\r\n  private maxHistorySize = 50;\r\n\r\n  private constructor() {\r\n    this.initializeDefaultBudgets();\r\n  }\r\n\r\n  public static getInstance(): PerformanceBudgetMonitor {\r\n    if (!PerformanceBudgetMonitor.instance) {\r\n      PerformanceBudgetMonitor.instance = new PerformanceBudgetMonitor();\r\n    }\r\n    return PerformanceBudgetMonitor.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACIÓN DE BUDGETS\r\n  // ===================================\r\n\r\n  private initializeDefaultBudgets(): void {\r\n    this.budgets = [\r\n      // Budgets de tamaño críticos\r\n      {\r\n        name: 'First Load JS',\r\n        type: 'size',\r\n        threshold: 128 * 1024, // 128KB\r\n        warning: 100 * 1024, // 100KB\r\n        unit: 'bytes',\r\n        category: 'critical',\r\n        description: 'JavaScript crítico que se carga inicialmente'\r\n      },\r\n      {\r\n        name: 'Total Bundle Size',\r\n        type: 'size',\r\n        threshold: 500 * 1024, // 500KB\r\n        warning: 400 * 1024, // 400KB\r\n        unit: 'bytes',\r\n        category: 'critical',\r\n        description: 'Tamaño total de todos los bundles JavaScript'\r\n      },\r\n      {\r\n        name: 'CSS Bundle Size',\r\n        type: 'size',\r\n        threshold: 50 * 1024, // 50KB\r\n        warning: 40 * 1024, // 40KB\r\n        unit: 'bytes',\r\n        category: 'important',\r\n        description: 'Tamaño total de archivos CSS'\r\n      },\r\n      {\r\n        name: 'Image Assets',\r\n        type: 'size',\r\n        threshold: 200 * 1024, // 200KB\r\n        warning: 150 * 1024, // 150KB\r\n        unit: 'bytes',\r\n        category: 'important',\r\n        description: 'Tamaño total de imágenes optimizadas'\r\n      },\r\n      {\r\n        name: 'Font Assets',\r\n        type: 'size',\r\n        threshold: 100 * 1024, // 100KB\r\n        warning: 80 * 1024, // 80KB\r\n        unit: 'bytes',\r\n        category: 'optional',\r\n        description: 'Tamaño total de archivos de fuentes'\r\n      },\r\n\r\n      // Budgets de conteo\r\n      {\r\n        name: 'Chunk Count',\r\n        type: 'count',\r\n        threshold: 20,\r\n        warning: 15,\r\n        unit: 'count',\r\n        category: 'important',\r\n        description: 'Número total de chunks generados'\r\n      },\r\n      {\r\n        name: 'Duplicate Modules',\r\n        type: 'count',\r\n        threshold: 5,\r\n        warning: 3,\r\n        unit: 'count',\r\n        category: 'important',\r\n        description: 'Módulos duplicados entre chunks'\r\n      },\r\n\r\n      // Budgets de tiempo (para futuras implementaciones)\r\n      {\r\n        name: 'Build Time',\r\n        type: 'time',\r\n        threshold: 60000, // 60 segundos\r\n        warning: 45000, // 45 segundos\r\n        unit: 'ms',\r\n        category: 'optional',\r\n        description: 'Tiempo total de build'\r\n      }\r\n    ];\r\n  }\r\n\r\n  public addBudget(budget: PerformanceBudget): void {\r\n    this.budgets.push(budget);\r\n  }\r\n\r\n  public updateBudget(name: string, updates: Partial<PerformanceBudget>): void {\r\n    const index = this.budgets.findIndex(b => b.name === name);\r\n    if (index !== -1) {\r\n      this.budgets[index] = { ...this.budgets[index], ...updates };\r\n    }\r\n  }\r\n\r\n  public removeBudget(name: string): void {\r\n    this.budgets = this.budgets.filter(b => b.name !== name);\r\n  }\r\n\r\n  public getBudgets(): PerformanceBudget[] {\r\n    return [...this.budgets];\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE PERFORMANCE\r\n  // ===================================\r\n\r\n  public async analyzePerformance(buildPath: string = '.next'): Promise<PerformanceReport> {\r\n    const metrics = await this.collectMetrics(buildPath);\r\n    const violations = this.checkBudgetViolations(metrics);\r\n    const score = this.calculatePerformanceScore(violations, metrics);\r\n    const grade = this.getPerformanceGrade(score);\r\n    const trends = this.calculateTrends(metrics);\r\n\r\n    const report: PerformanceReport = {\r\n      timestamp: new Date().toISOString(),\r\n      buildId: this.generateBuildId(),\r\n      violations,\r\n      metrics,\r\n      score,\r\n      grade,\r\n      trends\r\n    };\r\n\r\n    this.addToHistory(report);\r\n    return report;\r\n  }\r\n\r\n  private async collectMetrics(buildPath: string): Promise<PerformanceMetrics> {\r\n    try {\r\n      // En una implementación real, esto analizaría los archivos del build\r\n      // Por ahora, simulamos métricas realistas\r\n      const staticPath = path.join(buildPath, 'static');\r\n      \r\n      return {\r\n        bundleSize: 450 * 1024, // 450KB\r\n        firstLoadJS: 95 * 1024, // 95KB\r\n        totalJS: 380 * 1024, // 380KB\r\n        css: 35 * 1024, // 35KB\r\n        images: 120 * 1024, // 120KB\r\n        fonts: 45 * 1024, // 45KB\r\n        chunkCount: 12,\r\n        duplicateModules: 2,\r\n        unusedCode: 25 * 1024 // 25KB\r\n      };\r\n    } catch (error) {\r\n      console.warn('Could not collect real metrics, using mock data');\r\n      return this.getMockMetrics();\r\n    }\r\n  }\r\n\r\n  private getMockMetrics(): PerformanceMetrics {\r\n    return {\r\n      bundleSize: 420 * 1024,\r\n      firstLoadJS: 88 * 1024,\r\n      totalJS: 350 * 1024,\r\n      css: 32 * 1024,\r\n      images: 110 * 1024,\r\n      fonts: 40 * 1024,\r\n      chunkCount: 10,\r\n      duplicateModules: 1,\r\n      unusedCode: 20 * 1024\r\n    };\r\n  }\r\n\r\n  private checkBudgetViolations(metrics: PerformanceMetrics): BudgetViolation[] {\r\n    const violations: BudgetViolation[] = [];\r\n\r\n    for (const budget of this.budgets) {\r\n      const actual = this.getMetricValue(metrics, budget.name);\r\n      if (actual === null) {continue;}\r\n\r\n      let violation: BudgetViolation | null = null;\r\n\r\n      if (actual > budget.threshold) {\r\n        violation = {\r\n          budget,\r\n          actual,\r\n          expected: budget.threshold,\r\n          severity: 'error',\r\n          impact: this.calculateImpact(budget, actual),\r\n          recommendation: this.generateRecommendation(budget, actual)\r\n        };\r\n      } else if (actual > budget.warning) {\r\n        violation = {\r\n          budget,\r\n          actual,\r\n          expected: budget.warning,\r\n          severity: 'warning',\r\n          impact: this.calculateImpact(budget, actual),\r\n          recommendation: this.generateRecommendation(budget, actual)\r\n        };\r\n      }\r\n\r\n      if (violation) {\r\n        violations.push(violation);\r\n      }\r\n    }\r\n\r\n    return violations.sort((a, b) => {\r\n      const impactOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n      return impactOrder[b.impact] - impactOrder[a.impact];\r\n    });\r\n  }\r\n\r\n  private getMetricValue(metrics: PerformanceMetrics, budgetName: string): number | null {\r\n    const metricMap: Record<string, keyof PerformanceMetrics> = {\r\n      'First Load JS': 'firstLoadJS',\r\n      'Total Bundle Size': 'bundleSize',\r\n      'CSS Bundle Size': 'css',\r\n      'Image Assets': 'images',\r\n      'Font Assets': 'fonts',\r\n      'Chunk Count': 'chunkCount',\r\n      'Duplicate Modules': 'duplicateModules'\r\n    };\r\n\r\n    const metricKey = metricMap[budgetName];\r\n    return metricKey ? metrics[metricKey] : null;\r\n  }\r\n\r\n  private calculateImpact(budget: PerformanceBudget, actual: number): 'low' | 'medium' | 'high' | 'critical' {\r\n    const excess = actual - budget.threshold;\r\n    const excessPercent = (excess / budget.threshold) * 100;\r\n\r\n    if (budget.category === 'critical') {\r\n      if (excessPercent > 50) {return 'critical';}\r\n      if (excessPercent > 25) {return 'high';}\r\n      if (excessPercent > 10) {return 'medium';}\r\n      return 'low';\r\n    }\r\n\r\n    if (budget.category === 'important') {\r\n      if (excessPercent > 75) {return 'high';}\r\n      if (excessPercent > 50) {return 'medium';}\r\n      return 'low';\r\n    }\r\n\r\n    return excessPercent > 100 ? 'medium' : 'low';\r\n  }\r\n\r\n  private generateRecommendation(budget: PerformanceBudget, actual: number): string {\r\n    const excess = actual - budget.threshold;\r\n    const excessKB = Math.round(excess / 1024);\r\n\r\n    const recommendations: Record<string, string> = {\r\n      'First Load JS': `Reducir ${excessKB}KB implementando lazy loading para componentes no críticos`,\r\n      'Total Bundle Size': `Optimizar bundles dividiendo en chunks más pequeños (${excessKB}KB de exceso)`,\r\n      'CSS Bundle Size': `Eliminar CSS no utilizado y optimizar imports (${excessKB}KB de exceso)`,\r\n      'Image Assets': `Optimizar imágenes con formatos modernos (WebP/AVIF) y compresión`,\r\n      'Font Assets': `Usar font-display: swap y preload para fuentes críticas`,\r\n      'Chunk Count': `Consolidar chunks pequeños para reducir overhead HTTP`,\r\n      'Duplicate Modules': `Configurar splitChunks para evitar duplicación de módulos`\r\n    };\r\n\r\n    return recommendations[budget.name] || `Optimizar ${budget.name} para cumplir con el presupuesto`;\r\n  }\r\n\r\n  private calculatePerformanceScore(violations: BudgetViolation[], metrics: PerformanceMetrics): number {\r\n    let score = 100;\r\n\r\n    for (const violation of violations) {\r\n      const penalty = this.calculatePenalty(violation);\r\n      score -= penalty;\r\n    }\r\n\r\n    // Bonus por métricas especialmente buenas\r\n    if (metrics.firstLoadJS < 80 * 1024) {score += 5;} // Bonus por First Load JS < 80KB\r\n    if (metrics.duplicateModules === 0) {score += 3;} // Bonus por no duplicados\r\n    if (metrics.chunkCount <= 8) {score += 2;} // Bonus por chunks optimizados\r\n\r\n    return Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  private calculatePenalty(violation: BudgetViolation): number {\r\n    const basePenalty = violation.severity === 'error' ? 15 : 8;\r\n    const impactMultiplier = {\r\n      critical: 2.0,\r\n      high: 1.5,\r\n      medium: 1.2,\r\n      low: 1.0\r\n    };\r\n\r\n    return basePenalty * impactMultiplier[violation.impact];\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) {return 'A';}\r\n    if (score >= 80) {return 'B';}\r\n    if (score >= 70) {return 'C';}\r\n    if (score >= 60) {return 'D';}\r\n    return 'F';\r\n  }\r\n\r\n  private calculateTrends(currentMetrics: PerformanceMetrics): PerformanceTrend[] {\r\n    if (this.history.length === 0) {return [];}\r\n\r\n    const previousReport = this.history[this.history.length - 1];\r\n    const trends: PerformanceTrend[] = [];\r\n\r\n    const metricKeys: (keyof PerformanceMetrics)[] = [\r\n      'bundleSize', 'firstLoadJS', 'totalJS', 'css', 'chunkCount'\r\n    ];\r\n\r\n    for (const key of metricKeys) {\r\n      const current = currentMetrics[key];\r\n      const previous = previousReport.metrics[key];\r\n      const change = current - previous;\r\n      const changePercent = previous > 0 ? (change / previous) * 100 : 0;\r\n\r\n      let trend: 'improving' | 'degrading' | 'stable' = 'stable';\r\n      if (Math.abs(changePercent) > 5) {\r\n        trend = change < 0 ? 'improving' : 'degrading';\r\n      }\r\n\r\n      trends.push({\r\n        metric: key,\r\n        current,\r\n        previous,\r\n        change,\r\n        changePercent,\r\n        trend\r\n      });\r\n    }\r\n\r\n    return trends;\r\n  }\r\n\r\n  // ===================================\r\n  // GESTIÓN DE HISTORIAL\r\n  // ===================================\r\n\r\n  private addToHistory(report: PerformanceReport): void {\r\n    this.history.push(report);\r\n    \r\n    if (this.history.length > this.maxHistorySize) {\r\n      this.history = this.history.slice(-this.maxHistorySize);\r\n    }\r\n  }\r\n\r\n  public getHistory(): PerformanceReport[] {\r\n    return [...this.history];\r\n  }\r\n\r\n  public getLatestReport(): PerformanceReport | null {\r\n    return this.history.length > 0 ? this.history[this.history.length - 1] : null;\r\n  }\r\n\r\n  // ===================================\r\n  // UTILIDADES\r\n  // ===================================\r\n\r\n  private generateBuildId(): string {\r\n    return `build-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  public async saveReport(report: PerformanceReport, outputPath?: string): Promise<void> {\r\n    const reportPath = outputPath || path.join(process.cwd(), 'performance-reports');\r\n    \r\n    try {\r\n      await fs.mkdir(reportPath, { recursive: true });\r\n      const filename = `performance-report-${report.buildId}.json`;\r\n      const filepath = path.join(reportPath, filename);\r\n      \r\n      await fs.writeFile(filepath, JSON.stringify(report, null, 2));\r\n      console.log(`Performance report saved to: ${filepath}`);\r\n    } catch (error) {\r\n      console.error('Failed to save performance report:', error);\r\n    }\r\n  }\r\n\r\n  public generateTextReport(report: PerformanceReport): string {\r\n    const { violations, metrics, score, grade, trends } = report;\r\n\r\n    let textReport = `\r\n# Performance Budget Report\r\n**Build ID**: ${report.buildId}\r\n**Timestamp**: ${new Date(report.timestamp).toLocaleString()}\r\n**Score**: ${score}/100 (Grade: ${grade})\r\n\r\n## Metrics Summary\r\n- **Bundle Size**: ${Math.round(metrics.bundleSize / 1024)}KB\r\n- **First Load JS**: ${Math.round(metrics.firstLoadJS / 1024)}KB\r\n- **Total JS**: ${Math.round(metrics.totalJS / 1024)}KB\r\n- **CSS**: ${Math.round(metrics.css / 1024)}KB\r\n- **Chunks**: ${metrics.chunkCount}\r\n- **Duplicate Modules**: ${metrics.duplicateModules}\r\n\r\n## Budget Violations (${violations.length})\r\n`;\r\n\r\n    if (violations.length === 0) {\r\n      textReport += '✅ All performance budgets are within limits!\\n';\r\n    } else {\r\n      violations.forEach((violation, i) => {\r\n        const actualFormatted = violation.budget.unit === 'bytes' \r\n          ? `${Math.round(violation.actual / 1024)}KB`\r\n          : `${violation.actual}${violation.budget.unit}`;\r\n        \r\n        const expectedFormatted = violation.budget.unit === 'bytes'\r\n          ? `${Math.round(violation.expected / 1024)}KB`\r\n          : `${violation.expected}${violation.budget.unit}`;\r\n\r\n        textReport += `\r\n${i + 1}. **${violation.budget.name}** (${violation.severity.toUpperCase()})\r\n   - Actual: ${actualFormatted}\r\n   - Expected: ≤ ${expectedFormatted}\r\n   - Impact: ${violation.impact}\r\n   - Recommendation: ${violation.recommendation}\r\n`;\r\n      });\r\n    }\r\n\r\n    if (trends.length > 0) {\r\n      textReport += '\\n## Trends\\n';\r\n      trends.forEach(trend => {\r\n        const icon = trend.trend === 'improving' ? '📈' : trend.trend === 'degrading' ? '📉' : '➡️';\r\n        const changeText = trend.changePercent > 0 ? `+${trend.changePercent.toFixed(1)}%` : `${trend.changePercent.toFixed(1)}%`;\r\n        textReport += `- ${icon} **${trend.metric}**: ${changeText}\\n`;\r\n      });\r\n    }\r\n\r\n    return textReport;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}