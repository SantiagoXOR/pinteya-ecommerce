{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\performance\\lazy-loading.test.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - LAZY LOADING PERFORMANCE TEST\r\n// Tests para verificar que el lazy loading funciona correctamente\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, waitFor } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock de performance para medir tiempos de carga\r\nconst mockPerformanceNow = jest.fn();\r\nObject.defineProperty(global, 'performance', {\r\n  value: { now: mockPerformanceNow },\r\n  writable: true\r\n});\r\n\r\n// Mock de console para capturar logs de lazy loading\r\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\n// Mock de dynamic imports\r\nconst mockDynamicImport = jest.fn();\r\njest.mock('next/dynamic', () => {\r\n  return (importFn: () => Promise<any>, options?: any) => {\r\n    const LazyComponent = React.lazy(() => {\r\n      mockDynamicImport();\r\n      return importFn();\r\n    });\r\n    \r\n    return React.forwardRef((props: any, ref: any) => (\r\n      <React.Suspense fallback={options?.loading?.() || <div>Loading...</div>}>\r\n        <LazyComponent {...props} ref={ref} />\r\n      </React.Suspense>\r\n    ));\r\n  };\r\n});\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockPerformanceNow.mockReturnValue(1000);\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS DE LAZY LOADING\r\n// ===================================\r\n\r\ndescribe('Lazy Loading Performance Tests', () => {\r\n  it('debe cargar componentes admin bajo demanda', async () => {\r\n    jest.useFakeTimers();\r\n    \r\n    // Simular tiempo de carga inicial\r\n    mockPerformanceNow.mockReturnValueOnce(1000);\r\n    \r\n    // Importar componente lazy\r\n    const { LazyAdminDashboard } = await import('@/components/admin/LazyAdminDashboard');\r\n    \r\n    // Renderizar componente\r\n    render(<LazyAdminDashboard />);\r\n    \r\n    // Verificar que muestra skeleton inicialmente\r\n    expect(screen.getByText(/cargando/i) || screen.getAllByRole('generic').length > 0).toBeTruthy();\r\n    \r\n    // Simular tiempo después de la carga\r\n    mockPerformanceNow.mockReturnValueOnce(1200);\r\n    \r\n    // Avanzar timers para que se complete la carga\r\n    jest.advanceTimersByTime(1000);\r\n    \r\n    // Verificar que el componente se carga\r\n    await waitFor(() => {\r\n      // El componente debería estar cargado o mostrar contenido\r\n      expect(screen.queryByText(/cargando/i)).toBeFalsy();\r\n    }, { timeout: 3000 });\r\n    \r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('debe mostrar skeletons apropiados durante la carga', async () => {\r\n    const { LazyProductList } = await import('@/components/admin/products/LazyProductComponents');\r\n    \r\n    render(<LazyProductList />);\r\n    \r\n    // Verificar que muestra skeleton de productos\r\n    const skeletonElements = screen.getAllByRole('generic');\r\n    expect(skeletonElements.length).toBeGreaterThan(0);\r\n    \r\n    // Verificar estructura del skeleton\r\n    expect(screen.getByText(/filtros/i) || skeletonElements.length > 4).toBeTruthy();\r\n  });\r\n\r\n  it('debe manejar errores de carga gracefully', async () => {\r\n    // Mock de error en import dinámico\r\n    const originalImport = jest.requireActual('next/dynamic');\r\n    jest.doMock('next/dynamic', () => {\r\n      return () => {\r\n        throw new Error('Failed to load component');\r\n      };\r\n    });\r\n\r\n    try {\r\n      const { LazyLogisticsMap } = await import('@/components/admin/logistics/LazyLogisticsComponents');\r\n      \r\n      render(<LazyLogisticsMap />);\r\n      \r\n      // Verificar que muestra error boundary\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/error de carga/i) || screen.getByText(/error/i)).toBeInTheDocument();\r\n      });\r\n    } catch (error) {\r\n      // Error esperado durante el test\r\n      expect(error).toBeDefined();\r\n    }\r\n  });\r\n\r\n  it('debe precargar componentes cuando se solicita', async () => {\r\n    const { usePreloadAdminComponents } = await import('@/components/admin/LazyAdminDashboard');\r\n    \r\n    // Crear componente de prueba que usa el hook\r\n    function TestComponent() {\r\n      const { preloadAdmin, preloadMonitoring } = usePreloadAdminComponents();\r\n      \r\n      React.useEffect(() => {\r\n        preloadAdmin();\r\n        preloadMonitoring();\r\n      }, [preloadAdmin, preloadMonitoring]);\r\n      \r\n      return <div>Test Component</div>;\r\n    }\r\n    \r\n    render(<TestComponent />);\r\n    \r\n    // Verificar que el componente se renderiza\r\n    expect(screen.getByText('Test Component')).toBeInTheDocument();\r\n    \r\n    // Los imports dinámicos deberían haberse llamado\r\n    await waitFor(() => {\r\n      // Verificar que se intentó precargar (esto es difícil de testear directamente)\r\n      expect(true).toBe(true); // Placeholder - en un entorno real verificaríamos network requests\r\n    });\r\n  });\r\n\r\n  it('debe tener performance aceptable en carga de componentes', async () => {\r\n    const startTime = 1000;\r\n    const endTime = 1200;\r\n    \r\n    mockPerformanceNow\r\n      .mockReturnValueOnce(startTime)\r\n      .mockReturnValueOnce(endTime);\r\n    \r\n    const { LazyCarrierPerformanceTable } = await import('@/components/admin/logistics/LazyLogisticsComponents');\r\n    \r\n    const start = performance.now();\r\n    render(<LazyCarrierPerformanceTable />);\r\n    const end = performance.now();\r\n    \r\n    // Verificar que el tiempo de render inicial es rápido (< 200ms)\r\n    const renderTime = end - start;\r\n    expect(renderTime).toBeLessThan(200);\r\n  });\r\n\r\n  it('debe limpiar recursos correctamente al desmontar', async () => {\r\n    const { LazyRealTimeDashboard } = await import('@/components/admin/logistics/LazyLogisticsComponents');\r\n    \r\n    const { unmount } = render(<LazyRealTimeDashboard />);\r\n    \r\n    // Desmontar componente\r\n    unmount();\r\n    \r\n    // Verificar que no hay memory leaks (esto es más conceptual en el test)\r\n    expect(mockConsoleLog).not.toHaveBeenCalledWith(\r\n      expect.stringContaining('memory leak')\r\n    );\r\n  });\r\n\r\n  it('debe manejar múltiples componentes lazy simultáneamente', async () => {\r\n    const components = await Promise.all([\r\n      import('@/components/admin/LazyAdminDashboard'),\r\n      import('@/components/admin/products/LazyProductComponents'),\r\n      import('@/components/admin/logistics/LazyLogisticsComponents')\r\n    ]);\r\n    \r\n    const [\r\n      { LazyAdminDashboard },\r\n      { LazyProductList },\r\n      { LazyLogisticsMap }\r\n    ] = components;\r\n    \r\n    // Renderizar múltiples componentes lazy\r\n    render(\r\n      <div>\r\n        <LazyAdminDashboard />\r\n        <LazyProductList />\r\n        <LazyLogisticsMap />\r\n      </div>\r\n    );\r\n    \r\n    // Verificar que todos muestran skeletons inicialmente\r\n    const loadingElements = screen.getAllByText(/cargando/i);\r\n    expect(loadingElements.length).toBeGreaterThanOrEqual(0); // Pueden ser skeletons sin texto \"cargando\"\r\n    \r\n    // Verificar que no hay conflictos entre componentes\r\n    expect(screen.getByRole('main') || document.body).toBeInTheDocument();\r\n  });\r\n\r\n  it('debe optimizar bundle size con lazy loading', async () => {\r\n    // Este test es más conceptual - verificamos que los imports son dinámicos\r\n    const modulePromises = [\r\n      import('@/components/admin/LazyAdminDashboard'),\r\n      import('@/components/admin/products/LazyProductComponents'),\r\n      import('@/components/admin/logistics/LazyLogisticsComponents')\r\n    ];\r\n    \r\n    // Verificar que los imports son promesas (lazy)\r\n    modulePromises.forEach(modulePromise => {\r\n      expect(modulePromise).toBeInstanceOf(Promise);\r\n    });\r\n    \r\n    // Verificar que se resuelven correctamente\r\n    const modules = await Promise.all(modulePromises);\r\n    modules.forEach(module => {\r\n      expect(module).toBeDefined();\r\n      expect(typeof module).toBe('object');\r\n    });\r\n  });\r\n\r\n  it('debe funcionar correctamente con Suspense boundaries', async () => {\r\n    const { LazyProductForm } = await import('@/components/admin/products/LazyProductComponents');\r\n    \r\n    // Renderizar con Suspense personalizado\r\n    render(\r\n      <React.Suspense fallback={<div>Custom Loading...</div>}>\r\n        <LazyProductForm />\r\n      </React.Suspense>\r\n    );\r\n    \r\n    // Verificar que muestra el fallback personalizado o el del componente\r\n    expect(\r\n      screen.getByText(/custom loading/i) || \r\n      screen.getByText(/loading/i) ||\r\n      screen.getAllByRole('generic').length > 0\r\n    ).toBeTruthy();\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockPerformanceNow","jest","fn","Object","defineProperty","global","value","now","writable","mockConsoleLog","spyOn","console","mockImplementation","mockDynamicImport","mock","importFn","options","LazyComponent","React","lazy","forwardRef","props","ref","Suspense","fallback","loading","div","beforeEach","clearAllMocks","mockReturnValue","afterEach","clearAllTimers","describe","it","useFakeTimers","mockReturnValueOnce","LazyAdminDashboard","render","expect","screen","getByText","getAllByRole","length","toBeTruthy","advanceTimersByTime","waitFor","queryByText","toBeFalsy","timeout","useRealTimers","LazyProductList","skeletonElements","toBeGreaterThan","originalImport","requireActual","doMock","Error","LazyLogisticsMap","toBeInTheDocument","error","toBeDefined","usePreloadAdminComponents","TestComponent","preloadAdmin","preloadMonitoring","useEffect","toBe","startTime","endTime","LazyCarrierPerformanceTable","start","performance","end","renderTime","toBeLessThan","LazyRealTimeDashboard","unmount","not","toHaveBeenCalledWith","stringContaining","components","Promise","all","loadingElements","getAllByText","toBeGreaterThanOrEqual","getByRole","document","body","modulePromises","forEach","modulePromise","toBeInstanceOf","modules","module","LazyProductForm"],"mappings":"AAAA,sCAAsC;AACtC,qDAAqD;AACrD,kEAAkE;AAClE,sCAAsC;;;;;;8DAEpB;wBACsB;yBACoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAG5D,sCAAsC;AACtC,QAAQ;AACR,sCAAsC;AAEtC,kDAAkD;AAClD,MAAMA,qBAAqBC,aAAI,CAACC,EAAE;AAClCC,OAAOC,cAAc,CAACC,QAAQ,eAAe;IAC3CC,OAAO;QAAEC,KAAKP;IAAmB;IACjCQ,UAAU;AACZ;AAEA,qDAAqD;AACrD,MAAMC,iBAAiBR,aAAI,CAACS,KAAK,CAACC,SAAS,OAAOC,kBAAkB,CAAC,KAAO;AAE5E,0BAA0B;AAC1B,MAAMC,oBAAoBZ,aAAI,CAACC,EAAE;AACjCD,aAAI,CAACa,IAAI,CAAC,gBAAgB;IACxB,OAAO,CAACC,UAA8BC;QACpC,MAAMC,8BAAgBC,cAAK,CAACC,IAAI,CAAC;YAC/BN;YACA,OAAOE;QACT;QAEA,qBAAOG,cAAK,CAACE,UAAU,CAAC,CAACC,OAAYC,oBACnC,qBAACJ,cAAK,CAACK,QAAQ;gBAACC,UAAUR,SAASS,6BAAe,qBAACC;8BAAI;;0BACrD,cAAA,qBAACT;oBAAe,GAAGI,KAAK;oBAAEC,KAAKA;;;IAGrC;AACF;AAEA,sCAAsC;AACtC,kBAAkB;AAClB,sCAAsC;AAEtCK,IAAAA,mBAAU,EAAC;IACT1B,aAAI,CAAC2B,aAAa;IAClB5B,mBAAmB6B,eAAe,CAAC;AACrC;AAEAC,IAAAA,kBAAS,EAAC;IACR7B,aAAI,CAAC8B,cAAc;AACrB;AAEA,sCAAsC;AACtC,wBAAwB;AACxB,sCAAsC;AAEtCC,IAAAA,iBAAQ,EAAC,kCAAkC;IACzCC,IAAAA,WAAE,EAAC,8CAA8C;QAC/ChC,aAAI,CAACiC,aAAa;QAElB,kCAAkC;QAClClC,mBAAmBmC,mBAAmB,CAAC;QAEvC,2BAA2B;QAC3B,MAAM,EAAEC,kBAAkB,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE5C,wBAAwB;QACxBC,IAAAA,cAAM,gBAAC,qBAACD;QAER,8CAA8C;QAC9CE,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,gBAAgBD,cAAM,CAACE,YAAY,CAAC,WAAWC,MAAM,GAAG,GAAGC,UAAU;QAE7F,qCAAqC;QACrC3C,mBAAmBmC,mBAAmB,CAAC;QAEvC,+CAA+C;QAC/ClC,aAAI,CAAC2C,mBAAmB,CAAC;QAEzB,uCAAuC;QACvC,MAAMC,IAAAA,eAAO,EAAC;YACZ,0DAA0D;YAC1DP,IAAAA,eAAM,EAACC,cAAM,CAACO,WAAW,CAAC,cAAcC,SAAS;QACnD,GAAG;YAAEC,SAAS;QAAK;QAEnB/C,aAAI,CAACgD,aAAa;IACpB;IAEAhB,IAAAA,WAAE,EAAC,sDAAsD;QACvD,MAAM,EAAEiB,eAAe,EAAE,GAAG,MAAM,mEAAA,QAAO;QAEzCb,IAAAA,cAAM,gBAAC,qBAACa;QAER,8CAA8C;QAC9C,MAAMC,mBAAmBZ,cAAM,CAACE,YAAY,CAAC;QAC7CH,IAAAA,eAAM,EAACa,iBAAiBT,MAAM,EAAEU,eAAe,CAAC;QAEhD,oCAAoC;QACpCd,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,eAAeW,iBAAiBT,MAAM,GAAG,GAAGC,UAAU;IAChF;IAEAV,IAAAA,WAAE,EAAC,4CAA4C;QAC7C,mCAAmC;QACnC,MAAMoB,iBAAiBpD,aAAI,CAACqD,aAAa,CAAC;QAC1CrD,aAAI,CAACsD,MAAM,CAAC,gBAAgB;YAC1B,OAAO;gBACL,MAAM,IAAIC,MAAM;YAClB;QACF;QAEA,IAAI;YACF,MAAM,EAAEC,gBAAgB,EAAE,GAAG,MAAM,mEAAA,QAAO;YAE1CpB,IAAAA,cAAM,gBAAC,qBAACoB;YAER,uCAAuC;YACvC,MAAMZ,IAAAA,eAAO,EAAC;gBACZP,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,sBAAsBD,cAAM,CAACC,SAAS,CAAC,WAAWkB,iBAAiB;YAC7F;QACF,EAAE,OAAOC,OAAO;YACd,iCAAiC;YACjCrB,IAAAA,eAAM,EAACqB,OAAOC,WAAW;QAC3B;IACF;IAEA3B,IAAAA,WAAE,EAAC,iDAAiD;QAClD,MAAM,EAAE4B,yBAAyB,EAAE,GAAG,MAAM,mEAAA,QAAO;QAEnD,6CAA6C;QAC7C,SAASC;YACP,MAAM,EAAEC,YAAY,EAAEC,iBAAiB,EAAE,GAAGH;YAE5C3C,cAAK,CAAC+C,SAAS,CAAC;gBACdF;gBACAC;YACF,GAAG;gBAACD;gBAAcC;aAAkB;YAEpC,qBAAO,qBAACtC;0BAAI;;QACd;QAEAW,IAAAA,cAAM,gBAAC,qBAACyB;QAER,2CAA2C;QAC3CxB,IAAAA,eAAM,EAACC,cAAM,CAACC,SAAS,CAAC,mBAAmBkB,iBAAiB;QAE5D,iDAAiD;QACjD,MAAMb,IAAAA,eAAO,EAAC;YACZ,+EAA+E;YAC/EP,IAAAA,eAAM,EAAC,MAAM4B,IAAI,CAAC,OAAO,mEAAmE;QAC9F;IACF;IAEAjC,IAAAA,WAAE,EAAC,4DAA4D;QAC7D,MAAMkC,YAAY;QAClB,MAAMC,UAAU;QAEhBpE,mBACGmC,mBAAmB,CAACgC,WACpBhC,mBAAmB,CAACiC;QAEvB,MAAM,EAAEC,2BAA2B,EAAE,GAAG,MAAM,mEAAA,QAAO;QAErD,MAAMC,QAAQC,YAAYhE,GAAG;QAC7B8B,IAAAA,cAAM,gBAAC,qBAACgC;QACR,MAAMG,MAAMD,YAAYhE,GAAG;QAE3B,gEAAgE;QAChE,MAAMkE,aAAaD,MAAMF;QACzBhC,IAAAA,eAAM,EAACmC,YAAYC,YAAY,CAAC;IAClC;IAEAzC,IAAAA,WAAE,EAAC,oDAAoD;QACrD,MAAM,EAAE0C,qBAAqB,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE/C,MAAM,EAAEC,OAAO,EAAE,GAAGvC,IAAAA,cAAM,gBAAC,qBAACsC;QAE5B,uBAAuB;QACvBC;QAEA,wEAAwE;QACxEtC,IAAAA,eAAM,EAAC7B,gBAAgBoE,GAAG,CAACC,oBAAoB,CAC7CxC,eAAM,CAACyC,gBAAgB,CAAC;IAE5B;IAEA9C,IAAAA,WAAE,EAAC,2DAA2D;QAC5D,MAAM+C,aAAa,MAAMC,QAAQC,GAAG,CAAC;YACnC,mEAAA,QAAO;YACP,mEAAA,QAAO;YACP,mEAAA,QAAO;SACR;QAED,MAAM,CACJ,EAAE9C,kBAAkB,EAAE,EACtB,EAAEc,eAAe,EAAE,EACnB,EAAEO,gBAAgB,EAAE,CACrB,GAAGuB;QAEJ,wCAAwC;QACxC3C,IAAAA,cAAM,gBACJ,sBAACX;;8BACC,qBAACU;8BACD,qBAACc;8BACD,qBAACO;;;QAIL,sDAAsD;QACtD,MAAM0B,kBAAkB5C,cAAM,CAAC6C,YAAY,CAAC;QAC5C9C,IAAAA,eAAM,EAAC6C,gBAAgBzC,MAAM,EAAE2C,sBAAsB,CAAC,IAAI,4CAA4C;QAEtG,oDAAoD;QACpD/C,IAAAA,eAAM,EAACC,cAAM,CAAC+C,SAAS,CAAC,WAAWC,SAASC,IAAI,EAAE9B,iBAAiB;IACrE;IAEAzB,IAAAA,WAAE,EAAC,+CAA+C;QAChD,0EAA0E;QAC1E,MAAMwD,iBAAiB;YACrB,mEAAA,QAAO;YACP,mEAAA,QAAO;YACP,mEAAA,QAAO;SACR;QAED,gDAAgD;QAChDA,eAAeC,OAAO,CAACC,CAAAA;YACrBrD,IAAAA,eAAM,EAACqD,eAAeC,cAAc,CAACX;QACvC;QAEA,2CAA2C;QAC3C,MAAMY,UAAU,MAAMZ,QAAQC,GAAG,CAACO;QAClCI,QAAQH,OAAO,CAACI,CAAAA;YACdxD,IAAAA,eAAM,EAACwD,QAAQlC,WAAW;YAC1BtB,IAAAA,eAAM,EAAC,OAAOwD,QAAQ5B,IAAI,CAAC;QAC7B;IACF;IAEAjC,IAAAA,WAAE,EAAC,wDAAwD;QACzD,MAAM,EAAE8D,eAAe,EAAE,GAAG,MAAM,mEAAA,QAAO;QAEzC,wCAAwC;QACxC1D,IAAAA,cAAM,gBACJ,qBAACnB,cAAK,CAACK,QAAQ;YAACC,wBAAU,qBAACE;0BAAI;;sBAC7B,cAAA,qBAACqE;;QAIL,sEAAsE;QACtEzD,IAAAA,eAAM,EACJC,cAAM,CAACC,SAAS,CAAC,sBACjBD,cAAM,CAACC,SAAS,CAAC,eACjBD,cAAM,CAACE,YAAY,CAAC,WAAWC,MAAM,GAAG,GACxCC,UAAU;IACd;AACF"}