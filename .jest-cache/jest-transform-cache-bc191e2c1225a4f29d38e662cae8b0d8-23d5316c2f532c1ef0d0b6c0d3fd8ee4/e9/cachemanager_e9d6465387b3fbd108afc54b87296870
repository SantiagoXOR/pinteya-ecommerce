0099304e71f6608ebdc6d1b799b447a9
// ===================================
// PINTEYA E-COMMERCE - CACHE MANAGER
// ===================================
"use strict";

/* istanbul ignore next */
function cov_7leq7z489() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts";
  var hash = "5ee6883b4b95149786881afa0490a525dae63be8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 28
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 22
        }
      },
      "9": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "10": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 46
        }
      },
      "11": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "12": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "13": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 55
        }
      },
      "14": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 37
        }
      },
      "15": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 47
        }
      },
      "16": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "17": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 87,
          column: 86
        }
      },
      "18": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "19": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 61
        }
      },
      "20": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 30
        }
      },
      "21": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 88
        }
      },
      "22": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "23": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "24": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 102,
          column: 35
        }
      },
      "25": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "26": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 59
        }
      },
      "27": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 78
        }
      },
      "28": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 90
        }
      },
      "29": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 24
        }
      },
      "30": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 36
        }
      },
      "31": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 47
        }
      },
      "32": {
        start: {
          line: 126,
          column: 26
        },
        end: {
          line: 126,
          column: 36
        }
      },
      "33": {
        start: {
          line: 127,
          column: 25
        },
        end: {
          line: 127,
          column: 54
        }
      },
      "34": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "35": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 64
        }
      },
      "36": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "37": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 75
        }
      },
      "38": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "39": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 59
        }
      },
      "40": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "41": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 26
        }
      },
      "42": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 84
        }
      },
      "43": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 24
        }
      },
      "44": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 36
        }
      },
      "45": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 54
        }
      },
      "46": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "47": {
        start: {
          line: 148,
          column: 31
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "48": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 89
        }
      },
      "49": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 70
        }
      },
      "50": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 27
        }
      },
      "51": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 84
        }
      },
      "52": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "53": {
        start: {
          line: 160,
          column: 25
        },
        end: {
          line: 160,
          column: 54
        }
      },
      "54": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "55": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 65
        }
      },
      "56": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 73
        }
      },
      "57": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 27
        }
      },
      "58": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 87
        }
      },
      "59": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 25
        }
      },
      "60": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 50
        }
      },
      "61": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "62": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 26
        }
      },
      "63": {
        start: {
          line: 179,
          column: 26
        },
        end: {
          line: 179,
          column: 36
        }
      },
      "64": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "65": {
        start: {
          line: 181,
          column: 26
        },
        end: {
          line: 181,
          column: 41
        }
      },
      "66": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "67": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 92
        }
      },
      "68": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 93
        }
      },
      "69": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 25
        }
      },
      "70": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 94
        }
      },
      "71": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 24
        }
      },
      "72": {
        start: {
          line: 196,
          column: 28
        },
        end: {
          line: 196,
          column: 61
        }
      },
      "73": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "74": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 89
        }
      },
      "75": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 21
        }
      },
      "76": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 93
        }
      },
      "77": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "78": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "79": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "80": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 86
        }
      },
      "81": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "82": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "83": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 82
        }
      },
      "84": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 24
        }
      },
      "85": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 86
        }
      },
      "86": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 25
        }
      },
      "87": {
        start: {
          line: 242,
          column: 21
        },
        end: {
          line: 242,
          column: 47
        }
      },
      "88": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 251,
          column: 6
        }
      },
      "89": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "90": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 10
        }
      },
      "91": {
        start: {
          line: 247,
          column: 24
        },
        end: {
          line: 247,
          column: 104
        }
      },
      "92": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 84
        }
      },
      "93": {
        start: {
          line: 248,
          column: 50
        },
        end: {
          line: 248,
          column: 74
        }
      },
      "94": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 26
        }
      },
      "95": {
        start: {
          line: 253,
          column: 19
        },
        end: {
          line: 279,
          column: 1
        }
      },
      "96": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 87
        }
      },
      "97": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 98
        }
      },
      "98": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 98
        }
      },
      "99": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 87
        }
      },
      "100": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 87
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 17
          },
          end: {
            line: 71,
            column: 19
          }
        },
        line: 71
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 72
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 80,
            column: 7
          }
        },
        loc: {
          start: {
            line: 80,
            column: 31
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        loc: {
          start: {
            line: 85,
            column: 30
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 85
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 100,
            column: 7
          }
        },
        loc: {
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 100
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 114,
            column: 6
          },
          end: {
            line: 114,
            column: 7
          }
        },
        loc: {
          start: {
            line: 114,
            column: 27
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 114
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 6
          },
          end: {
            line: 120,
            column: 7
          }
        },
        loc: {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 125,
            column: 6
          },
          end: {
            line: 125,
            column: 7
          }
        },
        loc: {
          start: {
            line: 125,
            column: 29
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 125
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 144,
            column: 6
          },
          end: {
            line: 144,
            column: 7
          }
        },
        loc: {
          start: {
            line: 144,
            column: 36
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 144
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 159,
            column: 6
          },
          end: {
            line: 159,
            column: 7
          }
        },
        loc: {
          start: {
            line: 159,
            column: 32
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 159
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 172,
            column: 6
          },
          end: {
            line: 172,
            column: 7
          }
        },
        loc: {
          start: {
            line: 172,
            column: 43
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 172
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 183,
            column: 47
          },
          end: {
            line: 183,
            column: 48
          }
        },
        loc: {
          start: {
            line: 183,
            column: 56
          },
          end: {
            line: 185,
            column: 13
          }
        },
        line: 183
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 195,
            column: 6
          },
          end: {
            line: 195,
            column: 7
          }
        },
        loc: {
          start: {
            line: 195,
            column: 47
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 195
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 210,
            column: 6
          },
          end: {
            line: 210,
            column: 7
          }
        },
        loc: {
          start: {
            line: 210,
            column: 23
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 210
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 231,
            column: 6
          },
          end: {
            line: 231,
            column: 7
          }
        },
        loc: {
          start: {
            line: 231,
            column: 26
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 231
      },
      "21": {
        name: "cached",
        decl: {
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 243,
            column: 15
          }
        },
        loc: {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 252,
            column: 1
          }
        },
        line: 243
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 244,
            column: 11
          },
          end: {
            line: 244,
            column: 12
          }
        },
        loc: {
          start: {
            line: 244,
            column: 54
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 244
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 246,
            column: 27
          },
          end: {
            line: 246,
            column: 28
          }
        },
        loc: {
          start: {
            line: 246,
            column: 51
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 246
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 248,
            column: 47
          }
        },
        loc: {
          start: {
            line: 248,
            column: 50
          },
          end: {
            line: 248,
            column: 74
          }
        },
        line: 248
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 256,
            column: 6
          },
          end: {
            line: 256,
            column: 7
          }
        },
        loc: {
          start: {
            line: 256,
            column: 52
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 256
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 261,
            column: 6
          },
          end: {
            line: 261,
            column: 7
          }
        },
        loc: {
          start: {
            line: 261,
            column: 50
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 261
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 266,
            column: 6
          },
          end: {
            line: 266,
            column: 7
          }
        },
        loc: {
          start: {
            line: 266,
            column: 50
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 266
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 271,
            column: 6
          },
          end: {
            line: 271,
            column: 7
          }
        },
        loc: {
          start: {
            line: 271,
            column: 42
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 271
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 276,
            column: 6
          },
          end: {
            line: 276,
            column: 7
          }
        },
        loc: {
          start: {
            line: 276,
            column: 42
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 276
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "1": {
        loc: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 87,
            column: 68
          }
        }, {
          start: {
            line: 87,
            column: 71
          },
          end: {
            line: 87,
            column: 86
          }
        }],
        line: 87
      },
      "2": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 31
          }
        }, {
          start: {
            line: 88,
            column: 35
          },
          end: {
            line: 88,
            column: 59
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 31
          }
        }, {
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 65
          }
        }],
        line: 103
      },
      "6": {
        loc: {
          start: {
            line: 106,
            column: 19
          },
          end: {
            line: 106,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 106,
            column: 62
          }
        }, {
          start: {
            line: 106,
            column: 65
          },
          end: {
            line: 106,
            column: 77
          }
        }],
        line: 106
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "9": {
        loc: {
          start: {
            line: 247,
            column: 24
          },
          end: {
            line: 247,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 39
          },
          end: {
            line: 247,
            column: 60
          }
        }, {
          start: {
            line: 247,
            column: 63
          },
          end: {
            line: 247,
            column: 104
          }
        }],
        line: 247
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE MANAGER\r\n// ===================================\r\n\r\nimport { redisCache } from './integrations/redis';\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\n\r\n// Configuraci\xF3n de cache\r\nexport interface CacheConfig {\r\n  ttl: number;           // Time to live en segundos\r\n  prefix: string;        // Prefijo para las claves\r\n  compress?: boolean;    // Comprimir datos grandes\r\n  serialize?: boolean;   // Serializar objetos complejos\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const CACHE_CONFIGS = {\r\n  // Para respuestas de MercadoPago (corta duraci\xF3n)\r\n  MERCADOPAGO_RESPONSE: {\r\n    ttl: 300,              // 5 minutos\r\n    prefix: 'mp_response',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para informaci\xF3n de pagos (duraci\xF3n media)\r\n  PAYMENT_INFO: {\r\n    ttl: 1800,             // 30 minutos\r\n    prefix: 'payment_info',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para configuraciones del sistema (larga duraci\xF3n)\r\n  SYSTEM_CONFIG: {\r\n    ttl: 3600,             // 1 hora\r\n    prefix: 'sys_config',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para datos de productos (duraci\xF3n media)\r\n  PRODUCT_DATA: {\r\n    ttl: 900,              // 15 minutos\r\n    prefix: 'product',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para sesiones de usuario (corta duraci\xF3n)\r\n  USER_SESSION: {\r\n    ttl: 600,              // 10 minutos\r\n    prefix: 'user_session',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para manejo de cache\r\n */\r\nexport class CacheManager {\r\n  private static instance: CacheManager;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): CacheManager {\r\n    if (!CacheManager.instance) {\r\n      CacheManager.instance = new CacheManager();\r\n    }\r\n    return CacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Genera clave de cache\r\n   */\r\n  private generateKey(config: CacheConfig, key: string): string {\r\n    return `cache:${config.prefix}:${key}`;\r\n  }\r\n\r\n  /**\r\n   * Serializa datos para almacenamiento\r\n   */\r\n  private serialize<T>(data: T, config: CacheConfig): string {\r\n    try {\r\n      let serialized = config.serialize ? JSON.stringify(data) : data.toString();\r\n      \r\n      if (config.compress && serialized.length > 1000) {\r\n        // Implementaci\xF3n b\xE1sica de compresi\xF3n (en producci\xF3n usar zlib)\r\n        serialized = this.simpleCompress(serialized);\r\n      }\r\n      \r\n      return serialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Serialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deserializa datos del cache\r\n   */\r\n  private deserialize<T>(data: string, config: CacheConfig): T {\r\n    try {\r\n      let deserialized = data;\r\n      \r\n      if (config.compress && data.startsWith('COMPRESSED:')) {\r\n        deserialized = this.simpleDecompress(data);\r\n      }\r\n      \r\n      return config.serialize ? JSON.parse(deserialized) : deserialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Deserialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compresi\xF3n simple (placeholder para implementaci\xF3n real)\r\n   */\r\n  private simpleCompress(data: string): string {\r\n    // En producci\xF3n, usar zlib o similar\r\n    return `COMPRESSED:${data}`;\r\n  }\r\n\r\n  /**\r\n   * Descompresi\xF3n simple (placeholder para implementaci\xF3n real)\r\n   */\r\n  private simpleDecompress(data: string): string {\r\n    return data.replace('COMPRESSED:', '');\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cache\r\n   */\r\n  async get<T>(key: string, config: CacheConfig): Promise<T | null> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const cached = await redisCache.get(cacheKey);\r\n      \r\n      if (cached === null) {\r\n        logger.info(LogCategory.API, 'Cache miss');\r\n        return null;\r\n      }\r\n\r\n      const result = this.deserialize<T>(cached, config);\r\n      \r\n      logger.info(LogCategory.API, 'Cache hit');\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache get error', error as Error);\r\n      return null; // Fallar silenciosamente para no afectar la aplicaci\xF3n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cache\r\n   */\r\n  async set<T>(key: string, value: T, config: CacheConfig): Promise<boolean> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const serialized = this.serialize<T>(value, config);\r\n      const success = await redisCache.set(cacheKey, serialized, config.ttl);\r\n      \r\n      logger.info(LogCategory.API, 'Cache set');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache set error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un valor del cache\r\n   */\r\n  async delete(key: string, config: CacheConfig): Promise<boolean> {\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const success = await redisCache.del(cacheKey);\r\n      \r\n      logger.info(LogCategory.API, 'Cache delete');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache delete error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene o establece un valor (patr\xF3n cache-aside)\r\n   */\r\n  async getOrSet<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheConfig\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache primero\r\n    const cached = await this.get<T>(key, config);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n\r\n    // Si no est\xE1 en cache, obtener del origen\r\n    const startTime = Date.now();\r\n    try {\r\n      const value = await fetcher();\r\n      \r\n      // Almacenar en cache de forma as\xEDncrona\r\n      this.set(key, value, config).catch(error => {\r\n        logger.warn(LogCategory.API, 'Background cache set failed');\r\n      });\r\n\r\n      logger.info(LogCategory.API, 'Cache miss - fetched from source');\r\n\r\n      return value;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Fetcher error in getOrSet', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por patr\xF3n\r\n   */\r\n  async invalidatePattern(pattern: string, config: CacheConfig): Promise<number> {\r\n    const fullPattern = this.generateKey(config, pattern);\r\n    \r\n    try {\r\n      // En Redis real, usar\xEDamos SCAN + DEL para patrones\r\n      // Por simplicidad, aqu\xED solo registramos la operaci\xF3n\r\n      logger.info(LogCategory.API, 'Cache invalidation requested');\r\n\r\n      // TODO: Implementar invalidaci\xF3n real por patr\xF3n\r\n      return 0;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache invalidation error', error as Error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas del cache\r\n   */\r\n  async getStats(): Promise<{\r\n    hits: number;\r\n    misses: number;\r\n    hitRate: number;\r\n    totalKeys: number;\r\n  }> {\r\n    try {\r\n      // En implementaci\xF3n real, obtendr\xEDamos estas m\xE9tricas de Redis\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache stats error', error as Error);\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia todo el cache de un prefijo\r\n   */\r\n  async clear(config: CacheConfig): Promise<boolean> {\r\n    try {\r\n      logger.info(LogCategory.API, 'Cache clear requested');\r\n\r\n      // TODO: Implementar limpieza real por prefijo\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache clear error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheManager = CacheManager.getInstance();\r\n\r\n/**\r\n * Decorador para cachear resultados de funciones\r\n */\r\nexport function cached(config: CacheConfig, keyGenerator?: (...args: any[]) => string) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;\r\n      \r\n      return cacheManager.getOrSet(\r\n        key,\r\n        () => method.apply(this, args),\r\n        config\r\n      );\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * Funciones de utilidad para casos comunes\r\n */\r\nexport const CacheUtils = {\r\n  /**\r\n   * Cache para respuestas de MercadoPago\r\n   */\r\n  async cacheMercadoPagoResponse<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE);\r\n  },\r\n\r\n  /**\r\n   * Cache para informaci\xF3n de pagos\r\n   */\r\n  async cachePaymentInfo<T>(paymentId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Cache para datos de productos\r\n   */\r\n  async cacheProductData<T>(productId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un pago espec\xEDfico\r\n   */\r\n  async invalidatePayment(paymentId: string): Promise<boolean> {\r\n    return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un producto espec\xEDfico\r\n   */\r\n  async invalidateProduct(productId: string): Promise<boolean> {\r\n    return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["CACHE_CONFIGS", "CacheManager", "CacheUtils", "cacheManager", "cached", "MERCADOPAGO_RESPONSE", "ttl", "prefix", "compress", "serialize", "PAYMENT_INFO", "SYSTEM_CONFIG", "PRODUCT_DATA", "USER_SESSION", "getInstance", "instance", "generateKey", "config", "key", "data", "serialized", "JSON", "stringify", "toString", "length", "simpleCompress", "error", "logger", "LogCategory", "API", "deserialize", "deserialized", "startsWith", "simpleDecompress", "parse", "replace", "get", "startTime", "Date", "now", "cacheKey", "redisCache", "info", "result", "set", "value", "success", "delete", "del", "getOrSet", "fetcher", "catch", "warn", "invalidatePattern", "pattern", "fullPattern", "getStats", "hits", "misses", "hitRate", "totalKeys", "clear", "keyGenerator", "target", "propertyName", "descriptor", "method", "args", "apply", "cacheMercadoPagoResponse", "cachePaymentInfo", "paymentId", "cacheProductData", "productId", "invalidatePayment", "invalidateProduct"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5ee6883b4b95149786881afa0490a525dae63be8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7leq7z489 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7leq7z489();
cov_7leq7z489().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_7leq7z489().f[0]++;
  cov_7leq7z489().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_7leq7z489().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_7leq7z489().s[3]++;
_export(exports, {
  get CACHE_CONFIGS() {
    /* istanbul ignore next */
    cov_7leq7z489().f[1]++;
    cov_7leq7z489().s[4]++;
    return CACHE_CONFIGS;
  },
  get CacheManager() {
    /* istanbul ignore next */
    cov_7leq7z489().f[2]++;
    cov_7leq7z489().s[5]++;
    return CacheManager;
  },
  get CacheUtils() {
    /* istanbul ignore next */
    cov_7leq7z489().f[3]++;
    cov_7leq7z489().s[6]++;
    return CacheUtils;
  },
  get cacheManager() {
    /* istanbul ignore next */
    cov_7leq7z489().f[4]++;
    cov_7leq7z489().s[7]++;
    return cacheManager;
  },
  get cached() {
    /* istanbul ignore next */
    cov_7leq7z489().f[5]++;
    cov_7leq7z489().s[8]++;
    return cached;
  }
});
const _redis =
/* istanbul ignore next */
(cov_7leq7z489().s[9]++, require("./integrations/redis"));
const _logger =
/* istanbul ignore next */
(cov_7leq7z489().s[10]++, require("./enterprise/logger"));
const CACHE_CONFIGS =
/* istanbul ignore next */
(cov_7leq7z489().s[11]++, {
  // Para respuestas de MercadoPago (corta duración)
  MERCADOPAGO_RESPONSE: {
    ttl: 300,
    prefix: 'mp_response',
    compress: true,
    serialize: true
  },
  // Para información de pagos (duración media)
  PAYMENT_INFO: {
    ttl: 1800,
    prefix: 'payment_info',
    compress: false,
    serialize: true
  },
  // Para configuraciones del sistema (larga duración)
  SYSTEM_CONFIG: {
    ttl: 3600,
    prefix: 'sys_config',
    compress: false,
    serialize: true
  },
  // Para datos de productos (duración media)
  PRODUCT_DATA: {
    ttl: 900,
    prefix: 'product',
    compress: true,
    serialize: true
  },
  // Para sesiones de usuario (corta duración)
  USER_SESSION: {
    ttl: 600,
    prefix: 'user_session',
    compress: false,
    serialize: true
  }
});
class CacheManager {
  constructor() {
    /* istanbul ignore next */
    cov_7leq7z489().f[6]++;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_7leq7z489().f[7]++;
    cov_7leq7z489().s[12]++;
    if (!CacheManager.instance) {
      /* istanbul ignore next */
      cov_7leq7z489().b[0][0]++;
      cov_7leq7z489().s[13]++;
      CacheManager.instance = new CacheManager();
    } else
    /* istanbul ignore next */
    {
      cov_7leq7z489().b[0][1]++;
    }
    cov_7leq7z489().s[14]++;
    return CacheManager.instance;
  }
  /**
  * Genera clave de cache
  */
  generateKey(config, key) {
    /* istanbul ignore next */
    cov_7leq7z489().f[8]++;
    cov_7leq7z489().s[15]++;
    return `cache:${config.prefix}:${key}`;
  }
  /**
  * Serializa datos para almacenamiento
  */
  serialize(data, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[9]++;
    cov_7leq7z489().s[16]++;
    try {
      let serialized =
      /* istanbul ignore next */
      (cov_7leq7z489().s[17]++, config.serialize ?
      /* istanbul ignore next */
      (cov_7leq7z489().b[1][0]++, JSON.stringify(data)) :
      /* istanbul ignore next */
      (cov_7leq7z489().b[1][1]++, data.toString()));
      /* istanbul ignore next */
      cov_7leq7z489().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_7leq7z489().b[3][0]++, config.compress) &&
      /* istanbul ignore next */
      (cov_7leq7z489().b[3][1]++, serialized.length > 1000)) {
        /* istanbul ignore next */
        cov_7leq7z489().b[2][0]++;
        cov_7leq7z489().s[19]++;
        // Implementación básica de compresión (en producción usar zlib)
        serialized = this.simpleCompress(serialized);
      } else
      /* istanbul ignore next */
      {
        cov_7leq7z489().b[2][1]++;
      }
      cov_7leq7z489().s[20]++;
      return serialized;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[21]++;
      _logger.logger.error(_logger.LogCategory.API, 'Serialization error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[22]++;
      throw error;
    }
  }
  /**
  * Deserializa datos del cache
  */
  deserialize(data, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[10]++;
    cov_7leq7z489().s[23]++;
    try {
      let deserialized =
      /* istanbul ignore next */
      (cov_7leq7z489().s[24]++, data);
      /* istanbul ignore next */
      cov_7leq7z489().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_7leq7z489().b[5][0]++, config.compress) &&
      /* istanbul ignore next */
      (cov_7leq7z489().b[5][1]++, data.startsWith('COMPRESSED:'))) {
        /* istanbul ignore next */
        cov_7leq7z489().b[4][0]++;
        cov_7leq7z489().s[26]++;
        deserialized = this.simpleDecompress(data);
      } else
      /* istanbul ignore next */
      {
        cov_7leq7z489().b[4][1]++;
      }
      cov_7leq7z489().s[27]++;
      return config.serialize ?
      /* istanbul ignore next */
      (cov_7leq7z489().b[6][0]++, JSON.parse(deserialized)) :
      /* istanbul ignore next */
      (cov_7leq7z489().b[6][1]++, deserialized);
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[28]++;
      _logger.logger.error(_logger.LogCategory.API, 'Deserialization error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[29]++;
      throw error;
    }
  }
  /**
  * Compresión simple (placeholder para implementación real)
  */
  simpleCompress(data) {
    /* istanbul ignore next */
    cov_7leq7z489().f[11]++;
    cov_7leq7z489().s[30]++;
    // En producción, usar zlib o similar
    return `COMPRESSED:${data}`;
  }
  /**
  * Descompresión simple (placeholder para implementación real)
  */
  simpleDecompress(data) {
    /* istanbul ignore next */
    cov_7leq7z489().f[12]++;
    cov_7leq7z489().s[31]++;
    return data.replace('COMPRESSED:', '');
  }
  /**
  * Obtiene un valor del cache
  */
  async get(key, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_7leq7z489().s[32]++, Date.now());
    const cacheKey =
    /* istanbul ignore next */
    (cov_7leq7z489().s[33]++, this.generateKey(config, key));
    /* istanbul ignore next */
    cov_7leq7z489().s[34]++;
    try {
      const cached =
      /* istanbul ignore next */
      (cov_7leq7z489().s[35]++, await _redis.redisCache.get(cacheKey));
      /* istanbul ignore next */
      cov_7leq7z489().s[36]++;
      if (cached === null) {
        /* istanbul ignore next */
        cov_7leq7z489().b[7][0]++;
        cov_7leq7z489().s[37]++;
        _logger.logger.info(_logger.LogCategory.API, 'Cache miss');
        /* istanbul ignore next */
        cov_7leq7z489().s[38]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_7leq7z489().b[7][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_7leq7z489().s[39]++, this.deserialize(cached, config));
      /* istanbul ignore next */
      cov_7leq7z489().s[40]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache hit');
      /* istanbul ignore next */
      cov_7leq7z489().s[41]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[42]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache get error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[43]++;
      return null; // Fallar silenciosamente para no afectar la aplicación
    }
  }
  /**
  * Establece un valor en el cache
  */
  async set(key, value, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[14]++;
    const startTime =
    /* istanbul ignore next */
    (cov_7leq7z489().s[44]++, Date.now());
    const cacheKey =
    /* istanbul ignore next */
    (cov_7leq7z489().s[45]++, this.generateKey(config, key));
    /* istanbul ignore next */
    cov_7leq7z489().s[46]++;
    try {
      const serialized =
      /* istanbul ignore next */
      (cov_7leq7z489().s[47]++, this.serialize(value, config));
      const success =
      /* istanbul ignore next */
      (cov_7leq7z489().s[48]++, await _redis.redisCache.set(cacheKey, serialized, config.ttl));
      /* istanbul ignore next */
      cov_7leq7z489().s[49]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache set');
      /* istanbul ignore next */
      cov_7leq7z489().s[50]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[51]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache set error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[52]++;
      return false;
    }
  }
  /**
  * Elimina un valor del cache
  */
  async delete(key, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[15]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_7leq7z489().s[53]++, this.generateKey(config, key));
    /* istanbul ignore next */
    cov_7leq7z489().s[54]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_7leq7z489().s[55]++, await _redis.redisCache.del(cacheKey));
      /* istanbul ignore next */
      cov_7leq7z489().s[56]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache delete');
      /* istanbul ignore next */
      cov_7leq7z489().s[57]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[58]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache delete error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[59]++;
      return false;
    }
  }
  /**
  * Obtiene o establece un valor (patrón cache-aside)
  */
  async getOrSet(key, fetcher, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[16]++;
    // Intentar obtener del cache primero
    const cached =
    /* istanbul ignore next */
    (cov_7leq7z489().s[60]++, await this.get(key, config));
    /* istanbul ignore next */
    cov_7leq7z489().s[61]++;
    if (cached !== null) {
      /* istanbul ignore next */
      cov_7leq7z489().b[8][0]++;
      cov_7leq7z489().s[62]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_7leq7z489().b[8][1]++;
    }
    // Si no está en cache, obtener del origen
    const startTime =
    /* istanbul ignore next */
    (cov_7leq7z489().s[63]++, Date.now());
    /* istanbul ignore next */
    cov_7leq7z489().s[64]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_7leq7z489().s[65]++, await fetcher());
      // Almacenar en cache de forma asíncrona
      /* istanbul ignore next */
      cov_7leq7z489().s[66]++;
      this.set(key, value, config).catch(error => {
        /* istanbul ignore next */
        cov_7leq7z489().f[17]++;
        cov_7leq7z489().s[67]++;
        _logger.logger.warn(_logger.LogCategory.API, 'Background cache set failed');
      });
      /* istanbul ignore next */
      cov_7leq7z489().s[68]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache miss - fetched from source');
      /* istanbul ignore next */
      cov_7leq7z489().s[69]++;
      return value;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[70]++;
      _logger.logger.error(_logger.LogCategory.API, 'Fetcher error in getOrSet', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[71]++;
      throw error;
    }
  }
  /**
  * Invalida cache por patrón
  */
  async invalidatePattern(pattern, config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[18]++;
    const fullPattern =
    /* istanbul ignore next */
    (cov_7leq7z489().s[72]++, this.generateKey(config, pattern));
    /* istanbul ignore next */
    cov_7leq7z489().s[73]++;
    try {
      /* istanbul ignore next */
      cov_7leq7z489().s[74]++;
      // En Redis real, usaríamos SCAN + DEL para patrones
      // Por simplicidad, aquí solo registramos la operación
      _logger.logger.info(_logger.LogCategory.API, 'Cache invalidation requested');
      // TODO: Implementar invalidación real por patrón
      /* istanbul ignore next */
      cov_7leq7z489().s[75]++;
      return 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[76]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache invalidation error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[77]++;
      return 0;
    }
  }
  /**
  * Obtiene estadísticas del cache
  */
  async getStats() {
    /* istanbul ignore next */
    cov_7leq7z489().f[19]++;
    cov_7leq7z489().s[78]++;
    try {
      /* istanbul ignore next */
      cov_7leq7z489().s[79]++;
      // En implementación real, obtendríamos estas métricas de Redis
      return {
        hits: 0,
        misses: 0,
        hitRate: 0,
        totalKeys: 0
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[80]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache stats error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[81]++;
      return {
        hits: 0,
        misses: 0,
        hitRate: 0,
        totalKeys: 0
      };
    }
  }
  /**
  * Limpia todo el cache de un prefijo
  */
  async clear(config) {
    /* istanbul ignore next */
    cov_7leq7z489().f[20]++;
    cov_7leq7z489().s[82]++;
    try {
      /* istanbul ignore next */
      cov_7leq7z489().s[83]++;
      _logger.logger.info(_logger.LogCategory.API, 'Cache clear requested');
      // TODO: Implementar limpieza real por prefijo
      /* istanbul ignore next */
      cov_7leq7z489().s[84]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_7leq7z489().s[85]++;
      _logger.logger.error(_logger.LogCategory.API, 'Cache clear error', error);
      /* istanbul ignore next */
      cov_7leq7z489().s[86]++;
      return false;
    }
  }
}
const cacheManager =
/* istanbul ignore next */
(cov_7leq7z489().s[87]++, CacheManager.getInstance());
function cached(config, keyGenerator) {
  /* istanbul ignore next */
  cov_7leq7z489().f[21]++;
  cov_7leq7z489().s[88]++;
  return function (target, propertyName, descriptor) {
    /* istanbul ignore next */
    cov_7leq7z489().f[22]++;
    const method =
    /* istanbul ignore next */
    (cov_7leq7z489().s[89]++, descriptor.value);
    /* istanbul ignore next */
    cov_7leq7z489().s[90]++;
    descriptor.value = async function (...args) {
      /* istanbul ignore next */
      cov_7leq7z489().f[23]++;
      const key =
      /* istanbul ignore next */
      (cov_7leq7z489().s[91]++, keyGenerator ?
      /* istanbul ignore next */
      (cov_7leq7z489().b[9][0]++, keyGenerator(...args)) :
      /* istanbul ignore next */
      (cov_7leq7z489().b[9][1]++, `${propertyName}:${JSON.stringify(args)}`));
      /* istanbul ignore next */
      cov_7leq7z489().s[92]++;
      return cacheManager.getOrSet(key, () => {
        /* istanbul ignore next */
        cov_7leq7z489().f[24]++;
        cov_7leq7z489().s[93]++;
        return method.apply(this, args);
      }, config);
    };
    /* istanbul ignore next */
    cov_7leq7z489().s[94]++;
    return descriptor;
  };
}
const CacheUtils =
/* istanbul ignore next */
(cov_7leq7z489().s[95]++, {
  /**
  * Cache para respuestas de MercadoPago
  */
  async cacheMercadoPagoResponse(key, fetcher) {
    /* istanbul ignore next */
    cov_7leq7z489().f[25]++;
    cov_7leq7z489().s[96]++;
    return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE);
  },
  /**
  * Cache para información de pagos
  */
  async cachePaymentInfo(paymentId, fetcher) {
    /* istanbul ignore next */
    cov_7leq7z489().f[26]++;
    cov_7leq7z489().s[97]++;
    return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO);
  },
  /**
  * Cache para datos de productos
  */
  async cacheProductData(productId, fetcher) {
    /* istanbul ignore next */
    cov_7leq7z489().f[27]++;
    cov_7leq7z489().s[98]++;
    return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA);
  },
  /**
  * Invalida cache de un pago específico
  */
  async invalidatePayment(paymentId) {
    /* istanbul ignore next */
    cov_7leq7z489().f[28]++;
    cov_7leq7z489().s[99]++;
    return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO);
  },
  /**
  * Invalida cache de un producto específico
  */
  async invalidateProduct(productId) {
    /* istanbul ignore next */
    cov_7leq7z489().f[29]++;
    cov_7leq7z489().s[100]++;
    return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,