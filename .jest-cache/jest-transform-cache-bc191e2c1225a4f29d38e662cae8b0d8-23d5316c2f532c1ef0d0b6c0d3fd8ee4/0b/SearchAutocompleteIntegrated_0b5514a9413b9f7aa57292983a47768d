1b1848c3fdb73e0f8b11dcd1300db599
// ===================================
// COMPONENTE: SearchAutocompleteIntegrated - Integraci칩n completa con useSearch
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get SearchAutocompleteIntegrated () {
        return SearchAutocompleteIntegrated;
    },
    get default () {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _searchautocomplete = require("./search-autocomplete");
const _useSearchOptimized = require("../../hooks/useSearchOptimized");
const _useTrendingSearches = require("../../hooks/useTrendingSearches");
const _useRecentSearches = require("../../hooks/useRecentSearches");
const _shop = require("../../constants/shop");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const SearchAutocompleteIntegrated = /*#__PURE__*/ _react.default.memo(/*#__PURE__*/ _react.default.forwardRef(({ debounceMs = 100, maxSuggestions = 6, searchLimit = 12, saveRecentSearches = true, showTrendingSearches = true, showRecentSearches = true, onSearchExecuted, onSuggestionSelected, onSearch, onSuggestionSelect, ...props }, ref)=>{
    // Estado de hidrataci칩n del cliente y contexto
    const [isClient, setIsClient] = (0, _react.useState)(false);
    const [isContextReady, setIsContextReady] = (0, _react.useState)(false);
    // Hook de b칰squeda optimizado con TanStack Query - SIEMPRE llamado
    const searchHookResult = (0, _useSearchOptimized.useSearchOptimized)({
        debounceMs,
        maxSuggestions,
        searchLimit,
        saveRecentSearches,
        onSearch: (query, results)=>{
            onSearchExecuted?.(query, results);
            onSearch?.(query);
        },
        onSuggestionSelect: (suggestion)=>{
            onSuggestionSelected?.(suggestion);
            onSuggestionSelect?.(suggestion);
        }
    });
    // Verificar que estamos en el cliente y el contexto est치 listo
    (0, _react.useEffect)(()=>{
        setIsClient(true);
        // Peque침o delay para asegurar que el contexto de React Query est칠 completamente inicializado
        const timer = setTimeout(()=>{
            setIsContextReady(true);
        }, 100);
        return ()=>clearTimeout(timer);
    }, []);
    // Hooks adicionales para trending y recent searches - SIEMPRE llamados
    const trendingHookResult = (0, _useTrendingSearches.useTrendingSearches)({
        limit: 4,
        enabled: showTrendingSearches && isClient && isContextReady
    });
    const recentHookResult = (0, _useRecentSearches.useRecentSearches)({
        maxSearches: _shop.SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,
        enablePersistence: showRecentSearches && isClient && isContextReady,
        expirationDays: _shop.SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS
    });
    // Valores por defecto para SSR
    const defaultValues = {
        query: '',
        results: [],
        suggestions: [],
        isLoading: false,
        error: null,
        searchWithDebounce: ()=>{},
        executeSearch: ()=>{},
        selectSuggestion: ()=>{},
        clearSearch: ()=>{},
        trendingSearches: [],
        recentSearches: [],
        getRecentSearches: ()=>[]
    };
    // Usar valores del hook solo si estamos en el cliente
    const { query, results, suggestions: searchSuggestions, isLoading, error, searchWithDebounce, executeSearch, selectSuggestion, clearSearch } = isClient ? searchHookResult : defaultValues;
    const { trendingSearches } = isClient ? trendingHookResult : {
        trendingSearches: []
    };
    const { recentSearches, getRecentSearches } = isClient ? recentHookResult : {
        recentSearches: [],
        getRecentSearches: ()=>[]
    };
    // Generar sugerencias combinadas
    const suggestions = _react.default.useMemo(()=>{
        if (!isClient) return [];
        console.log('游댌 SearchAutocompleteIntegrated - Generando sugerencias:', {
            query: query?.trim(),
            hasQuery: !!query?.trim(),
            searchSuggestions: searchSuggestions && Array.isArray(searchSuggestions) ? searchSuggestions.length : 0,
            trendingSearches: trendingSearches && Array.isArray(trendingSearches) ? trendingSearches.length : 0,
            recentSearches: recentSearches && Array.isArray(recentSearches) ? recentSearches.length : 0,
            showTrendingSearches,
            showRecentSearches
        });
        // Si hay query, usar las sugerencias del hook optimizado
        if (query?.trim()) {
            console.log('游댌 Usando searchSuggestions porque hay query:', searchSuggestions);
            return searchSuggestions || [];
        }
        // Si no hay query, mostrar trending y recent searches como el componente original
        const defaultSuggestions = [];
        console.log('游댌 Generando sugerencias por defecto (sin query)');
        // Agregar b칰squedas recientes
        if (showRecentSearches && recentSearches && Array.isArray(recentSearches) && recentSearches.length > 0) {
            const recentSuggestions = getRecentSearches(3).map((search, index)=>({
                    id: `recent-${index}`,
                    type: 'recent',
                    title: search,
                    href: `/search?q=${encodeURIComponent(search)}`
                }));
            console.log('游댌 Agregando b칰squedas recientes:', recentSuggestions);
            defaultSuggestions.push(...recentSuggestions);
        }
        // Agregar b칰squedas trending reales
        if (showTrendingSearches && trendingSearches && Array.isArray(trendingSearches) && trendingSearches.length > 0) {
            const trendingSuggestions = trendingSearches.map((trending)=>({
                    id: trending.id,
                    type: 'trending',
                    title: trending.query,
                    href: trending.href,
                    badge: trending.count ? `${trending.count}` : undefined
                }));
            console.log('游댌 Agregando b칰squedas trending:', trendingSuggestions);
            defaultSuggestions.push(...trendingSuggestions.slice(0, 4));
        }
        const finalSuggestions = defaultSuggestions.slice(0, maxSuggestions);
        console.log('游댌 Sugerencias finales generadas:', finalSuggestions);
        return finalSuggestions;
    }, [
        isClient,
        query,
        searchSuggestions,
        showRecentSearches,
        showTrendingSearches,
        recentSearches,
        trendingSearches,
        getRecentSearches,
        maxSuggestions
    ]);
    // Debugging del estado del hook
    if (isClient && process.env.NODE_ENV === 'development') {
        console.log('游댌 SearchAutocompleteIntegrated: Hook state:', {
            query,
            suggestions: suggestions?.length || 0,
            suggestionsDetailed: suggestions?.map((s)=>({
                    type: s.type,
                    title: s.title
                })) || [],
            isLoading,
            error,
            results: results?.length || 0,
            trendingSearches: trendingSearches?.length || 0,
            recentSearches: recentSearches?.length || 0
        });
    }
    // Manejar env칤o de b칰squeda
    const handleSearch = (query)=>{
        if (isClient) {
            executeSearch(query);
        }
    };
    // Manejar selecci칩n de sugerencia
    const handleSuggestionSelect = (suggestion)=>{
        if (isClient) {
            selectSuggestion(suggestion);
        }
    };
    // Manejar limpieza
    const handleClear = ()=>{
        if (isClient) {
            clearSearch();
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautocomplete.SearchAutocomplete, {
        ref: ref,
        ...props,
        // Estado del hook optimizado
        query: query,
        suggestions: suggestions,
        isLoading: isLoading,
        error: error,
        showTrendingSearches: showTrendingSearches,
        showRecentSearches: showRecentSearches,
        // Callbacks integrados
        onSearch: handleSearch,
        onSuggestionSelect: handleSuggestionSelect,
        searchWithDebounce: searchWithDebounce,
        onClear: handleClear
    });
}));
SearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';
const _default = SearchAutocompleteIntegrated;

//# sourceMappingURL=data:application/json;base64,