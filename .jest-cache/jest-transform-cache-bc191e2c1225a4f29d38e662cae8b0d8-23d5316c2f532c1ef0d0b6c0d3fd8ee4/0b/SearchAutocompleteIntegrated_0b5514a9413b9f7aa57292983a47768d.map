{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\SearchAutocompleteIntegrated.tsx"],"sourcesContent":["// ===================================\r\n// COMPONENTE: SearchAutocompleteIntegrated - Integraci칩n completa con useSearch\r\n// ===================================\r\n\r\nimport React, { useCallback, useState, useEffect } from 'react';\r\nimport { SearchAutocomplete, SearchAutocompleteProps, SearchSuggestion } from './search-autocomplete';\r\nimport { useSearchOptimized } from '@/hooks/useSearchOptimized';\r\nimport { useTrendingSearches } from '@/hooks/useTrendingSearches';\r\nimport { useRecentSearches } from '@/hooks/useRecentSearches';\r\nimport { SEARCH_CONSTANTS } from '@/constants/shop';\r\n\r\nexport interface SearchAutocompleteIntegratedProps \r\n  extends Omit<SearchAutocompleteProps, 'query' | 'suggestions' | 'isLoading' | 'error' | 'searchWithDebounce' | 'onClear'> {\r\n  // Configuraci칩n del hook useSearch\r\n  debounceMs?: number;\r\n  maxSuggestions?: number;\r\n  searchLimit?: number;\r\n  saveRecentSearches?: boolean;\r\n  \r\n  // Callbacks adicionales\r\n  onSearchExecuted?: (query: string, results: any[]) => void;\r\n  onSuggestionSelected?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n/**\r\n * SearchAutocompleteIntegrated - Componente que integra SearchAutocomplete con useSearch\r\n * \r\n * Este componente proporciona una experiencia de b칰squeda completa sin necesidad\r\n * de manejar manualmente el estado del hook useSearch.\r\n */\r\nexport const SearchAutocompleteIntegrated = React.memo(React.forwardRef<HTMLInputElement, SearchAutocompleteIntegratedProps>(\r\n  ({\r\n    debounceMs = 100,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    showTrendingSearches = true,\r\n    showRecentSearches = true,\r\n    onSearchExecuted,\r\n    onSuggestionSelected,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n    ...props\r\n  }, ref) => {\r\n    \r\n    // Estado de hidrataci칩n del cliente y contexto\r\n    const [isClient, setIsClient] = useState(false);\r\n    const [isContextReady, setIsContextReady] = useState(false);\r\n    \r\n    // Hook de b칰squeda optimizado con TanStack Query - SIEMPRE llamado\r\n    const searchHookResult = useSearchOptimized({\r\n      debounceMs,\r\n      maxSuggestions,\r\n      searchLimit,\r\n      saveRecentSearches,\r\n      onSearch: (query, results) => {\r\n        onSearchExecuted?.(query, results);\r\n        onSearch?.(query);\r\n      },\r\n      onSuggestionSelect: (suggestion) => {\r\n        onSuggestionSelected?.(suggestion);\r\n        onSuggestionSelect?.(suggestion);\r\n      }\r\n    });\r\n\r\n    // Verificar que estamos en el cliente y el contexto est치 listo\r\n    useEffect(() => {\r\n      setIsClient(true);\r\n      // Peque침o delay para asegurar que el contexto de React Query est칠 completamente inicializado\r\n      const timer = setTimeout(() => {\r\n        setIsContextReady(true);\r\n      }, 100);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    // Hooks adicionales para trending y recent searches - SIEMPRE llamados\r\n    const trendingHookResult = useTrendingSearches({\r\n      limit: 4,\r\n      enabled: showTrendingSearches && isClient && isContextReady\r\n    });\r\n\r\n    const recentHookResult = useRecentSearches({\r\n      maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\r\n      enablePersistence: showRecentSearches && isClient && isContextReady,\r\n      expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS\r\n    });\r\n\r\n    // Valores por defecto para SSR\r\n    const defaultValues = {\r\n      query: '',\r\n      results: [],\r\n      suggestions: [],\r\n      isLoading: false,\r\n      error: null,\r\n      searchWithDebounce: () => {},\r\n      executeSearch: () => {},\r\n      selectSuggestion: () => {},\r\n      clearSearch: () => {},\r\n      trendingSearches: [],\r\n      recentSearches: [],\r\n      getRecentSearches: () => []\r\n    };\r\n\r\n    // Usar valores del hook solo si estamos en el cliente\r\n    const {\r\n      query,\r\n      results,\r\n      suggestions: searchSuggestions,\r\n      isLoading,\r\n      error,\r\n      searchWithDebounce,\r\n      executeSearch,\r\n      selectSuggestion,\r\n      clearSearch,\r\n    } = isClient ? searchHookResult : defaultValues;\r\n\r\n    const { trendingSearches } = isClient ? trendingHookResult : { trendingSearches: [] };\r\n\r\n    const {\r\n      recentSearches,\r\n      getRecentSearches\r\n    } = isClient ? recentHookResult : { recentSearches: [], getRecentSearches: () => [] };\r\n\r\n    // Generar sugerencias combinadas\r\n    const suggestions = React.useMemo(() => {\r\n      if (!isClient) return [];\r\n      \r\n      console.log('游댌 SearchAutocompleteIntegrated - Generando sugerencias:', {\r\n        query: query?.trim(),\r\n        hasQuery: !!query?.trim(),\r\n        searchSuggestions: (searchSuggestions && Array.isArray(searchSuggestions)) ? searchSuggestions.length : 0,\r\n        trendingSearches: (trendingSearches && Array.isArray(trendingSearches)) ? trendingSearches.length : 0,\r\n        recentSearches: (recentSearches && Array.isArray(recentSearches)) ? recentSearches.length : 0,\r\n        showTrendingSearches,\r\n        showRecentSearches\r\n      });\r\n\r\n      // Si hay query, usar las sugerencias del hook optimizado\r\n      if (query?.trim()) {\r\n        console.log('游댌 Usando searchSuggestions porque hay query:', searchSuggestions);\r\n        return searchSuggestions || [];\r\n      }\r\n\r\n      // Si no hay query, mostrar trending y recent searches como el componente original\r\n      const defaultSuggestions: SearchSuggestion[] = [];\r\n\r\n      console.log('游댌 Generando sugerencias por defecto (sin query)');\r\n\r\n      // Agregar b칰squedas recientes\r\n      if (showRecentSearches && recentSearches && Array.isArray(recentSearches) && recentSearches.length > 0) {\r\n        const recentSuggestions = getRecentSearches(3).map((search, index) => ({\r\n          id: `recent-${index}`,\r\n          type: 'recent' as const,\r\n          title: search,\r\n          href: `/search?q=${encodeURIComponent(search)}`,\r\n        }));\r\n        console.log('游댌 Agregando b칰squedas recientes:', recentSuggestions);\r\n        defaultSuggestions.push(...recentSuggestions);\r\n      }\r\n\r\n      // Agregar b칰squedas trending reales\r\n      if (showTrendingSearches && trendingSearches && Array.isArray(trendingSearches) && trendingSearches.length > 0) {\r\n        const trendingSuggestions = trendingSearches.map(trending => ({\r\n          id: trending.id,\r\n          type: 'trending' as const,\r\n          title: trending.query,\r\n          href: trending.href,\r\n          badge: trending.count ? `${trending.count}` : undefined\r\n        }));\r\n        console.log('游댌 Agregando b칰squedas trending:', trendingSuggestions);\r\n        defaultSuggestions.push(...trendingSuggestions.slice(0, 4));\r\n      }\r\n\r\n      const finalSuggestions = defaultSuggestions.slice(0, maxSuggestions);\r\n      console.log('游댌 Sugerencias finales generadas:', finalSuggestions);\r\n      \r\n      return finalSuggestions;\r\n    }, [isClient, query, searchSuggestions, showRecentSearches, showTrendingSearches, recentSearches, trendingSearches, getRecentSearches, maxSuggestions]);\r\n\r\n    // Debugging del estado del hook\r\n    if (isClient && process.env.NODE_ENV === 'development') {\r\n      console.log('游댌 SearchAutocompleteIntegrated: Hook state:', {\r\n        query,\r\n        suggestions: suggestions?.length || 0,\r\n        suggestionsDetailed: suggestions?.map(s => ({ type: s.type, title: s.title })) || [],\r\n        isLoading,\r\n        error,\r\n        results: results?.length || 0,\r\n        trendingSearches: trendingSearches?.length || 0,\r\n        recentSearches: recentSearches?.length || 0\r\n      });\r\n    }\r\n\r\n    // Manejar env칤o de b칰squeda\r\n    const handleSearch = (query: string) => {\r\n      if (isClient) {\r\n        executeSearch(query);\r\n      }\r\n    };\r\n\r\n    // Manejar selecci칩n de sugerencia\r\n    const handleSuggestionSelect = (suggestion: SearchSuggestion) => {\r\n      if (isClient) {\r\n        selectSuggestion(suggestion);\r\n      }\r\n    };\r\n\r\n    // Manejar limpieza\r\n    const handleClear = () => {\r\n      if (isClient) {\r\n        clearSearch();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <SearchAutocomplete\r\n        ref={ref}\r\n        {...props}\r\n        // Estado del hook optimizado\r\n        query={query}\r\n        suggestions={suggestions}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        showTrendingSearches={showTrendingSearches}\r\n        showRecentSearches={showRecentSearches}\r\n        // Callbacks integrados\r\n        onSearch={handleSearch}\r\n        onSuggestionSelect={handleSuggestionSelect}\r\n        searchWithDebounce={searchWithDebounce}\r\n        onClear={handleClear}\r\n      />\r\n    );\r\n  }\r\n));\r\n\r\nSearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';\r\n\r\nexport default SearchAutocompleteIntegrated;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["SearchAutocompleteIntegrated","React","memo","forwardRef","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","showTrendingSearches","showRecentSearches","onSearchExecuted","onSuggestionSelected","onSearch","onSuggestionSelect","props","ref","isClient","setIsClient","useState","isContextReady","setIsContextReady","searchHookResult","useSearchOptimized","query","results","suggestion","useEffect","timer","setTimeout","clearTimeout","trendingHookResult","useTrendingSearches","limit","enabled","recentHookResult","useRecentSearches","maxSearches","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","defaultValues","suggestions","isLoading","error","searchWithDebounce","executeSearch","selectSuggestion","clearSearch","trendingSearches","recentSearches","getRecentSearches","searchSuggestions","useMemo","console","log","trim","hasQuery","Array","isArray","length","defaultSuggestions","recentSuggestions","map","search","index","id","type","title","href","encodeURIComponent","push","trendingSuggestions","trending","badge","count","undefined","slice","finalSuggestions","process","env","NODE_ENV","suggestionsDetailed","s","handleSearch","handleSuggestionSelect","handleClear","SearchAutocomplete","onClear","displayName"],"mappings":"AAAA,sCAAsC;AACtC,gFAAgF;AAChF,sCAAsC;;;;;;;;;;;;QA4BzBA;eAAAA;;QAgNb;eAAA;;;;+DA1OwD;oCACsB;oCAC3C;qCACC;mCACF;sBACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqB1B,MAAMA,6CAA+BC,cAAK,CAACC,IAAI,eAACD,cAAK,CAACE,UAAU,CACrE,CAAC,EACCC,aAAa,GAAG,EAChBC,iBAAiB,CAAC,EAClBC,cAAc,EAAE,EAChBC,qBAAqB,IAAI,EACzBC,uBAAuB,IAAI,EAC3BC,qBAAqB,IAAI,EACzBC,gBAAgB,EAChBC,oBAAoB,EACpBC,QAAQ,EACRC,kBAAkB,EAClB,GAAGC,OACJ,EAAEC;IAED,+CAA+C;IAC/C,MAAM,CAACC,UAAUC,YAAY,GAAGC,IAAAA,eAAQ,EAAC;IACzC,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGF,IAAAA,eAAQ,EAAC;IAErD,mEAAmE;IACnE,MAAMG,mBAAmBC,IAAAA,sCAAkB,EAAC;QAC1ClB;QACAC;QACAC;QACAC;QACAK,UAAU,CAACW,OAAOC;YAChBd,mBAAmBa,OAAOC;YAC1BZ,WAAWW;QACb;QACAV,oBAAoB,CAACY;YACnBd,uBAAuBc;YACvBZ,qBAAqBY;QACvB;IACF;IAEA,+DAA+D;IAC/DC,IAAAA,gBAAS,EAAC;QACRT,YAAY;QACZ,6FAA6F;QAC7F,MAAMU,QAAQC,WAAW;YACvBR,kBAAkB;QACpB,GAAG;QAEH,OAAO,IAAMS,aAAaF;IAC5B,GAAG,EAAE;IAEL,uEAAuE;IACvE,MAAMG,qBAAqBC,IAAAA,wCAAmB,EAAC;QAC7CC,OAAO;QACPC,SAASzB,wBAAwBQ,YAAYG;IAC/C;IAEA,MAAMe,mBAAmBC,IAAAA,oCAAiB,EAAC;QACzCC,aAAaC,sBAAgB,CAACC,mBAAmB;QACjDC,mBAAmB9B,sBAAsBO,YAAYG;QACrDqB,gBAAgBH,sBAAgB,CAACI,+BAA+B;IAClE;IAEA,+BAA+B;IAC/B,MAAMC,gBAAgB;QACpBnB,OAAO;QACPC,SAAS,EAAE;QACXmB,aAAa,EAAE;QACfC,WAAW;QACXC,OAAO;QACPC,oBAAoB,KAAO;QAC3BC,eAAe,KAAO;QACtBC,kBAAkB,KAAO;QACzBC,aAAa,KAAO;QACpBC,kBAAkB,EAAE;QACpBC,gBAAgB,EAAE;QAClBC,mBAAmB,IAAM,EAAE;IAC7B;IAEA,sDAAsD;IACtD,MAAM,EACJ7B,KAAK,EACLC,OAAO,EACPmB,aAAaU,iBAAiB,EAC9BT,SAAS,EACTC,KAAK,EACLC,kBAAkB,EAClBC,aAAa,EACbC,gBAAgB,EAChBC,WAAW,EACZ,GAAGjC,WAAWK,mBAAmBqB;IAElC,MAAM,EAAEQ,gBAAgB,EAAE,GAAGlC,WAAWc,qBAAqB;QAAEoB,kBAAkB,EAAE;IAAC;IAEpF,MAAM,EACJC,cAAc,EACdC,iBAAiB,EAClB,GAAGpC,WAAWkB,mBAAmB;QAAEiB,gBAAgB,EAAE;QAAEC,mBAAmB,IAAM,EAAE;IAAC;IAEpF,iCAAiC;IACjC,MAAMT,cAAc1C,cAAK,CAACqD,OAAO,CAAC;QAChC,IAAI,CAACtC,UAAU,OAAO,EAAE;QAExBuC,QAAQC,GAAG,CAAC,4DAA4D;YACtEjC,OAAOA,OAAOkC;YACdC,UAAU,CAAC,CAACnC,OAAOkC;YACnBJ,mBAAmB,AAACA,qBAAqBM,MAAMC,OAAO,CAACP,qBAAsBA,kBAAkBQ,MAAM,GAAG;YACxGX,kBAAkB,AAACA,oBAAoBS,MAAMC,OAAO,CAACV,oBAAqBA,iBAAiBW,MAAM,GAAG;YACpGV,gBAAgB,AAACA,kBAAkBQ,MAAMC,OAAO,CAACT,kBAAmBA,eAAeU,MAAM,GAAG;YAC5FrD;YACAC;QACF;QAEA,yDAAyD;QACzD,IAAIc,OAAOkC,QAAQ;YACjBF,QAAQC,GAAG,CAAC,iDAAiDH;YAC7D,OAAOA,qBAAqB,EAAE;QAChC;QAEA,kFAAkF;QAClF,MAAMS,qBAAyC,EAAE;QAEjDP,QAAQC,GAAG,CAAC;QAEZ,8BAA8B;QAC9B,IAAI/C,sBAAsB0C,kBAAkBQ,MAAMC,OAAO,CAACT,mBAAmBA,eAAeU,MAAM,GAAG,GAAG;YACtG,MAAME,oBAAoBX,kBAAkB,GAAGY,GAAG,CAAC,CAACC,QAAQC,QAAW,CAAA;oBACrEC,IAAI,CAAC,OAAO,EAAED,OAAO;oBACrBE,MAAM;oBACNC,OAAOJ;oBACPK,MAAM,CAAC,UAAU,EAAEC,mBAAmBN,SAAS;gBACjD,CAAA;YACAV,QAAQC,GAAG,CAAC,qCAAqCO;YACjDD,mBAAmBU,IAAI,IAAIT;QAC7B;QAEA,oCAAoC;QACpC,IAAIvD,wBAAwB0C,oBAAoBS,MAAMC,OAAO,CAACV,qBAAqBA,iBAAiBW,MAAM,GAAG,GAAG;YAC9G,MAAMY,sBAAsBvB,iBAAiBc,GAAG,CAACU,CAAAA,WAAa,CAAA;oBAC5DP,IAAIO,SAASP,EAAE;oBACfC,MAAM;oBACNC,OAAOK,SAASnD,KAAK;oBACrB+C,MAAMI,SAASJ,IAAI;oBACnBK,OAAOD,SAASE,KAAK,GAAG,GAAGF,SAASE,KAAK,EAAE,GAAGC;gBAChD,CAAA;YACAtB,QAAQC,GAAG,CAAC,oCAAoCiB;YAChDX,mBAAmBU,IAAI,IAAIC,oBAAoBK,KAAK,CAAC,GAAG;QAC1D;QAEA,MAAMC,mBAAmBjB,mBAAmBgB,KAAK,CAAC,GAAGzE;QACrDkD,QAAQC,GAAG,CAAC,qCAAqCuB;QAEjD,OAAOA;IACT,GAAG;QAAC/D;QAAUO;QAAO8B;QAAmB5C;QAAoBD;QAAsB2C;QAAgBD;QAAkBE;QAAmB/C;KAAe;IAEtJ,gCAAgC;IAChC,IAAIW,YAAYgE,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QACtD3B,QAAQC,GAAG,CAAC,gDAAgD;YAC1DjC;YACAoB,aAAaA,aAAakB,UAAU;YACpCsB,qBAAqBxC,aAAaqB,IAAIoB,CAAAA,IAAM,CAAA;oBAAEhB,MAAMgB,EAAEhB,IAAI;oBAAEC,OAAOe,EAAEf,KAAK;gBAAC,CAAA,MAAO,EAAE;YACpFzB;YACAC;YACArB,SAASA,SAASqC,UAAU;YAC5BX,kBAAkBA,kBAAkBW,UAAU;YAC9CV,gBAAgBA,gBAAgBU,UAAU;QAC5C;IACF;IAEA,4BAA4B;IAC5B,MAAMwB,eAAe,CAAC9D;QACpB,IAAIP,UAAU;YACZ+B,cAAcxB;QAChB;IACF;IAEA,kCAAkC;IAClC,MAAM+D,yBAAyB,CAAC7D;QAC9B,IAAIT,UAAU;YACZgC,iBAAiBvB;QACnB;IACF;IAEA,mBAAmB;IACnB,MAAM8D,cAAc;QAClB,IAAIvE,UAAU;YACZiC;QACF;IACF;IAEA,qBACE,qBAACuC,sCAAkB;QACjBzE,KAAKA;QACJ,GAAGD,KAAK;QACT,6BAA6B;QAC7BS,OAAOA;QACPoB,aAAaA;QACbC,WAAWA;QACXC,OAAOA;QACPrC,sBAAsBA;QACtBC,oBAAoBA;QACpB,uBAAuB;QACvBG,UAAUyE;QACVxE,oBAAoByE;QACpBxC,oBAAoBA;QACpB2C,SAASF;;AAGf;AAGFvF,6BAA6B0F,WAAW,GAAG;MAE3C,WAAe1F"}