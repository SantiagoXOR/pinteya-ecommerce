57a78bf37032abb4f79f7e010aa7e546
// ===================================
// HOOK: useSearchToast - Toast notifications para bÃºsquedas
// ===================================
"use strict";

/* istanbul ignore next */
function cov_268thsp1ut() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts";
  var hash = "01894dbf0f3710cc17e89729fa9b47c309d7a529";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "6": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "7": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "8": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "9": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 76
        }
      },
      "10": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "11": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "12": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 14
        }
      },
      "13": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "14": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "15": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "16": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "17": {
        start: {
          line: 65,
          column: 75
        },
        end: {
          line: 65,
          column: 82
        }
      },
      "18": {
        start: {
          line: 66,
          column: 32
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "19": {
        start: {
          line: 69,
          column: 26
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "20": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "21": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 63
        }
      },
      "22": {
        start: {
          line: 70,
          column: 47
        },
        end: {
          line: 70,
          column: 62
        }
      },
      "23": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 100,
          column: 6
        }
      },
      "24": {
        start: {
          line: 75,
          column: 19
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "25": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "27": {
        start: {
          line: 82,
          column: 28
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "28": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 47
        }
      },
      "29": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "30": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 34
        }
      },
      "31": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 32
        }
      },
      "32": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 18
        }
      },
      "33": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "34": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 22
        }
      },
      "35": {
        start: {
          line: 108,
          column: 31
        },
        end: {
          line: 117,
          column: 6
        }
      },
      "36": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "37": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 134,
          column: 6
        }
      },
      "38": {
        start: {
          line: 121,
          column: 39
        },
        end: {
          line: 121,
          column: 78
        }
      },
      "39": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "40": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 146,
          column: 6
        }
      },
      "41": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "42": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 158,
          column: 6
        }
      },
      "43": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "44": {
        start: {
          line: 161,
          column: 33
        },
        end: {
          line: 170,
          column: 6
        }
      },
      "45": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "46": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 182,
          column: 6
        }
      },
      "47": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "48": {
        start: {
          line: 185,
          column: 36
        },
        end: {
          line: 194,
          column: 6
        }
      },
      "49": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "50": {
        start: {
          line: 197,
          column: 35
        },
        end: {
          line: 206,
          column: 6
        }
      },
      "51": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 203,
          column: 11
        }
      },
      "52": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "53": {
        start: {
          line: 226,
          column: 17
        },
        end: {
          line: 226,
          column: 31
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "generateToastId",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 24
          }
        },
        loc: {
          start: {
            line: 31,
            column: 27
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 31
      },
      "4": {
        name: "getErrorToastContent",
        decl: {
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 29
          }
        },
        loc: {
          start: {
            line: 34,
            column: 53
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 34
      },
      "5": {
        name: "useSearchToast",
        decl: {
          start: {
            line: 64,
            column: 9
          },
          end: {
            line: 64,
            column: 23
          }
        },
        loc: {
          start: {
            line: 64,
            column: 38
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 69,
            column: 50
          },
          end: {
            line: 69,
            column: 51
          }
        },
        loc: {
          start: {
            line: 69,
            column: 56
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 18
          },
          end: {
            line: 70,
            column: 19
          }
        },
        loc: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 63
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 70,
            column: 39
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 62
          }
        },
        line: 70
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 74,
            column: 47
          },
          end: {
            line: 74,
            column: 48
          }
        },
        loc: {
          start: {
            line: 74,
            column: 56
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 74
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 81,
            column: 18
          },
          end: {
            line: 81,
            column: 19
          }
        },
        loc: {
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 88,
            column: 9
          }
        },
        line: 81
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 91,
            column: 24
          }
        },
        loc: {
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 93,
            column: 13
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 103,
            column: 50
          },
          end: {
            line: 103,
            column: 51
          }
        },
        loc: {
          start: {
            line: 103,
            column: 54
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 103
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 108,
            column: 55
          },
          end: {
            line: 108,
            column: 56
          }
        },
        loc: {
          start: {
            line: 108,
            column: 77
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 108
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 120,
            column: 53
          },
          end: {
            line: 120,
            column: 54
          }
        },
        loc: {
          start: {
            line: 120,
            column: 87
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 120
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 137,
            column: 55
          },
          end: {
            line: 137,
            column: 56
          }
        },
        loc: {
          start: {
            line: 137,
            column: 79
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 137
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 149,
            column: 53
          }
        },
        loc: {
          start: {
            line: 149,
            column: 76
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 149
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 161,
            column: 57
          },
          end: {
            line: 161,
            column: 58
          }
        },
        loc: {
          start: {
            line: 161,
            column: 66
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 161
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 173,
            column: 53
          },
          end: {
            line: 173,
            column: 54
          }
        },
        loc: {
          start: {
            line: 173,
            column: 77
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 173
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 185,
            column: 60
          },
          end: {
            line: 185,
            column: 61
          }
        },
        loc: {
          start: {
            line: 185,
            column: 64
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 185
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 197,
            column: 59
          },
          end: {
            line: 197,
            column: 60
          }
        },
        loc: {
          start: {
            line: 197,
            column: 71
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 197
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 37
          },
          end: {
            line: 34,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 34,
            column: 50
          },
          end: {
            line: 34,
            column: 51
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 41,
            column: 14
          }
        }, {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 46,
            column: 14
          }
        }, {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 51,
            column: 14
          }
        }, {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 56,
            column: 14
          }
        }, {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 61,
            column: 14
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 29
          },
          end: {
            line: 40,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 40,
            column: 81
          }
        }, {
          start: {
            line: 40,
            column: 84
          },
          end: {
            line: 40,
            column: 117
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 45,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 45,
            column: 90
          }
        }, {
          start: {
            line: 45,
            column: 93
          },
          end: {
            line: 45,
            column: 122
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 29
          },
          end: {
            line: 50,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 90
          }
        }, {
          start: {
            line: 50,
            column: 93
          },
          end: {
            line: 50,
            column: 125
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 60,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 46
          },
          end: {
            line: 60,
            column: 81
          }
        }, {
          start: {
            line: 60,
            column: 84
          },
          end: {
            line: 60,
            column: 102
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 64,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 36
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 65,
            column: 30
          },
          end: {
            line: 65,
            column: 46
          }
        }],
        line: 65
      },
      "8": {
        loc: {
          start: {
            line: 65,
            column: 48
          },
          end: {
            line: 65,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 65,
            column: 70
          }
        }],
        line: 65
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 22
          },
          end: {
            line: 79,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 22
          },
          end: {
            line: 79,
            column: 36
          }
        }, {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 55
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "11": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 29
          }
        }, {
          start: {
            line: 90,
            column: 33
          },
          end: {
            line: 90,
            column: 54
          }
        }],
        line: 90
      },
      "12": {
        loc: {
          start: {
            line: 120,
            column: 61
          },
          end: {
            line: 120,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 120,
            column: 74
          },
          end: {
            line: 120,
            column: 75
          }
        }],
        line: 120
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 126,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 40
          },
          end: {
            line: 126,
            column: 44
          }
        }, {
          start: {
            line: 126,
            column: 47
          },
          end: {
            line: 126,
            column: 51
          }
        }],
        line: 126
      },
      "14": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 130,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 49
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 25
          }
        }],
        line: 127
      },
      "15": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 35
          }
        }, {
          start: {
            line: 127,
            column: 39
          },
          end: {
            line: 127,
            column: 46
          }
        }],
        line: 127
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts"],
      sourcesContent: ["// ===================================\r\n// HOOK: useSearchToast - Toast notifications para b\xFAsquedas\r\n// ===================================\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport type { SearchError } from './useSearchErrorHandler';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface ToastNotification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  description?: string;\r\n  duration?: number;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\nexport interface UseSearchToastOptions {\r\n  defaultDuration?: number;\r\n  maxToasts?: number;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACI\xD3N\r\n// ===================================\r\n\r\nconst DEFAULT_DURATION = 5000;\r\nconst MAX_TOASTS = 3;\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nfunction generateToastId(): string {\r\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction getErrorToastContent(error: SearchError, retryCount: number = 0) {\r\n  const baseTitle = 'Error en la b\xFAsqueda';\r\n  \r\n  switch (error.type) {\r\n    case 'network':\r\n      return {\r\n        title: 'Sin conexi\xF3n',\r\n        description: retryCount > 0 \r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Verifica tu conexi\xF3n a internet',\r\n      };\r\n      \r\n    case 'timeout':\r\n      return {\r\n        title: 'B\xFAsqueda lenta',\r\n        description: retryCount > 0\r\n          ? `Reintentando b\xFAsqueda... (${retryCount}/3)`\r\n          : 'La b\xFAsqueda tard\xF3 demasiado',\r\n      };\r\n      \r\n    case 'server':\r\n      return {\r\n        title: 'Error del servidor',\r\n        description: retryCount > 0\r\n          ? `Reintentando conexi\xF3n... (${retryCount}/3)`\r\n          : 'Problema temporal del servidor',\r\n      };\r\n      \r\n    case 'validation':\r\n      return {\r\n        title: 'B\xFAsqueda inv\xE1lida',\r\n        description: 'Verifica los t\xE9rminos de b\xFAsqueda',\r\n      };\r\n      \r\n    default:\r\n      return {\r\n        title: baseTitle,\r\n        description: retryCount > 0\r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Error inesperado',\r\n      };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchToast(options: UseSearchToastOptions = {}) {\r\n  const {\r\n    defaultDuration = DEFAULT_DURATION,\r\n    maxToasts = MAX_TOASTS,\r\n  } = options;\r\n\r\n  const [toasts, setToasts] = useState<ToastNotification[]>([]);\r\n\r\n  /**\r\n   * Remueve un toast espec\xEDfico\r\n   */\r\n  const removeToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  }, []);\r\n\r\n  /**\r\n   * Agrega un nuevo toast\r\n   */\r\n  const addToast = useCallback((toast: Omit<ToastNotification, 'id'>): string => {\r\n    const id = generateToastId();\r\n    const newToast: ToastNotification = {\r\n      ...toast,\r\n      id,\r\n      duration: toast.duration ?? defaultDuration,\r\n    };\r\n\r\n    setToasts(prev => {\r\n      const updated = [newToast, ...prev];\r\n      // Limitar n\xFAmero m\xE1ximo de toasts\r\n      return updated.slice(0, maxToasts);\r\n    });\r\n\r\n    // Auto-remove despu\xE9s del duration\r\n    if (newToast.duration && newToast.duration > 0) {\r\n      setTimeout(() => {\r\n        removeToast(id);\r\n      }, newToast.duration);\r\n    }\r\n\r\n    return id;\r\n  }, [defaultDuration, maxToasts, removeToast]);\r\n\r\n  /**\r\n   * Limpia todos los toasts\r\n   */\r\n  const clearToasts = useCallback(() => {\r\n    setToasts([]);\r\n  }, []);\r\n\r\n  /**\r\n   * Toast de \xE9xito para b\xFAsquedas\r\n   */\r\n  const showSuccessToast = useCallback((query: string, resultCount: number) => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '\xA1B\xFAsqueda exitosa!',\r\n      description: `Se encontraron ${resultCount} productos para \"${query}\"`,\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de error para b\xFAsquedas\r\n   */\r\n  const showErrorToast = useCallback((\r\n    error: SearchError, \r\n    retryCount: number = 0,\r\n    onRetry?: () => void\r\n  ) => {\r\n    const { title, description } = getErrorToastContent(error, retryCount);\r\n    \r\n    return addToast({\r\n      type: 'error',\r\n      title,\r\n      description,\r\n      duration: error.retryable ? 4000 : 6000,\r\n      action: error.retryable && onRetry ? {\r\n        label: 'Reintentar',\r\n        onClick: onRetry,\r\n      } : undefined,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de advertencia para b\xFAsquedas\r\n   */\r\n  const showWarningToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast informativo\r\n   */\r\n  const showInfoToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para cuando no hay resultados\r\n   */\r\n  const showNoResultsToast = useCallback((query: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: 'Sin resultados',\r\n      description: `No se encontraron productos para \"${query}\"`,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry en progreso\r\n   */\r\n  const showRetryToast = useCallback((attempt: number, maxAttempts: number) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: 'Reintentando b\xFAsqueda...',\r\n      description: `Intento ${attempt} de ${maxAttempts}`,\r\n      duration: 2000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry exitoso\r\n   */\r\n  const showRetrySuccessToast = useCallback(() => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '\xA1Conexi\xF3n restaurada!',\r\n      description: 'La b\xFAsqueda se complet\xF3 exitosamente',\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry fallido\r\n   */\r\n  const showRetryFailedToast = useCallback((attempts: number) => {\r\n    return addToast({\r\n      type: 'error',\r\n      title: 'B\xFAsqueda fallida',\r\n      description: `No se pudo completar despu\xE9s de ${attempts} intentos`,\r\n      duration: 6000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  return {\r\n    // Estado\r\n    toasts,\r\n    hasToasts: toasts.length > 0,\r\n    \r\n    // Funciones generales\r\n    addToast,\r\n    removeToast,\r\n    clearToasts,\r\n    \r\n    // Funciones espec\xEDficas para b\xFAsquedas\r\n    showSuccessToast,\r\n    showErrorToast,\r\n    showWarningToast,\r\n    showInfoToast,\r\n    showNoResultsToast,\r\n    showRetryToast,\r\n    showRetrySuccessToast,\r\n    showRetryFailedToast,\r\n  };\r\n}\r\n\r\nexport default useSearchToast;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["useSearchToast", "DEFAULT_DURATION", "MAX_TOASTS", "generateToastId", "Date", "now", "Math", "random", "toString", "substr", "getErrorToastContent", "error", "retryCount", "baseTitle", "type", "title", "description", "options", "defaultDuration", "maxToasts", "toasts", "setToasts", "useState", "removeToast", "useCallback", "id", "prev", "filter", "toast", "addToast", "newToast", "duration", "updated", "slice", "setTimeout", "clearToasts", "showSuccessToast", "query", "resultCount", "showErrorToast", "onRetry", "retryable", "action", "label", "onClick", "undefined", "showWarningToast", "message", "showInfoToast", "showNoResultsToast", "showRetryToast", "attempt", "maxAttempts", "showRetrySuccessToast", "showRetryFailedToast", "attempts", "hasToasts", "length"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "01894dbf0f3710cc17e89729fa9b47c309d7a529"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_268thsp1ut = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_268thsp1ut();
cov_268thsp1ut().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_268thsp1ut().f[0]++;
  cov_268thsp1ut().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_268thsp1ut().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_268thsp1ut().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_268thsp1ut().f[1]++;
    cov_268thsp1ut().s[4]++;
    return _default;
  },
  get useSearchToast() {
    /* istanbul ignore next */
    cov_268thsp1ut().f[2]++;
    cov_268thsp1ut().s[5]++;
    return useSearchToast;
  }
});
const _react =
/* istanbul ignore next */
(cov_268thsp1ut().s[6]++, require("react"));
// ===================================
// CONFIGURACIÃN
// ===================================
const DEFAULT_DURATION =
/* istanbul ignore next */
(cov_268thsp1ut().s[7]++, 5000);
const MAX_TOASTS =
/* istanbul ignore next */
(cov_268thsp1ut().s[8]++, 3);
// ===================================
// UTILIDADES
// ===================================
function generateToastId() {
  /* istanbul ignore next */
  cov_268thsp1ut().f[3]++;
  cov_268thsp1ut().s[9]++;
  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
function getErrorToastContent(error, retryCount =
/* istanbul ignore next */
(cov_268thsp1ut().b[0][0]++, 0)) {
  /* istanbul ignore next */
  cov_268thsp1ut().f[4]++;
  const baseTitle =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[10]++, 'Error en la bÃºsqueda');
  /* istanbul ignore next */
  cov_268thsp1ut().s[11]++;
  switch (error.type) {
    case 'network':
      /* istanbul ignore next */
      cov_268thsp1ut().b[1][0]++;
      cov_268thsp1ut().s[12]++;
      return {
        title: 'Sin conexiÃ³n',
        description: retryCount > 0 ?
        /* istanbul ignore next */
        (cov_268thsp1ut().b[2][0]++, `Reintentando... (${retryCount}/3)`) :
        /* istanbul ignore next */
        (cov_268thsp1ut().b[2][1]++, 'Verifica tu conexiÃ³n a internet')
      };
    case 'timeout':
      /* istanbul ignore next */
      cov_268thsp1ut().b[1][1]++;
      cov_268thsp1ut().s[13]++;
      return {
        title: 'BÃºsqueda lenta',
        description: retryCount > 0 ?
        /* istanbul ignore next */
        (cov_268thsp1ut().b[3][0]++, `Reintentando bÃºsqueda... (${retryCount}/3)`) :
        /* istanbul ignore next */
        (cov_268thsp1ut().b[3][1]++, 'La bÃºsqueda tardÃ³ demasiado')
      };
    case 'server':
      /* istanbul ignore next */
      cov_268thsp1ut().b[1][2]++;
      cov_268thsp1ut().s[14]++;
      return {
        title: 'Error del servidor',
        description: retryCount > 0 ?
        /* istanbul ignore next */
        (cov_268thsp1ut().b[4][0]++, `Reintentando conexiÃ³n... (${retryCount}/3)`) :
        /* istanbul ignore next */
        (cov_268thsp1ut().b[4][1]++, 'Problema temporal del servidor')
      };
    case 'validation':
      /* istanbul ignore next */
      cov_268thsp1ut().b[1][3]++;
      cov_268thsp1ut().s[15]++;
      return {
        title: 'BÃºsqueda invÃ¡lida',
        description: 'Verifica los tÃ©rminos de bÃºsqueda'
      };
    default:
      /* istanbul ignore next */
      cov_268thsp1ut().b[1][4]++;
      cov_268thsp1ut().s[16]++;
      return {
        title: baseTitle,
        description: retryCount > 0 ?
        /* istanbul ignore next */
        (cov_268thsp1ut().b[5][0]++, `Reintentando... (${retryCount}/3)`) :
        /* istanbul ignore next */
        (cov_268thsp1ut().b[5][1]++, 'Error inesperado')
      };
  }
}
function useSearchToast(options =
/* istanbul ignore next */
(cov_268thsp1ut().b[6][0]++, {})) {
  /* istanbul ignore next */
  cov_268thsp1ut().f[5]++;
  const {
    defaultDuration =
    /* istanbul ignore next */
    (cov_268thsp1ut().b[7][0]++, DEFAULT_DURATION),
    maxToasts =
    /* istanbul ignore next */
    (cov_268thsp1ut().b[8][0]++, MAX_TOASTS)
  } =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[17]++, options);
  const [toasts, setToasts] =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[18]++, (0, _react.useState)([]));
  /**
  * Remueve un toast especÃ­fico
  */
  const removeToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[19]++, (0, _react.useCallback)(id => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[6]++;
    cov_268thsp1ut().s[20]++;
    setToasts(prev => {
      /* istanbul ignore next */
      cov_268thsp1ut().f[7]++;
      cov_268thsp1ut().s[21]++;
      return prev.filter(toast => {
        /* istanbul ignore next */
        cov_268thsp1ut().f[8]++;
        cov_268thsp1ut().s[22]++;
        return toast.id !== id;
      });
    });
  }, []));
  /**
  * Agrega un nuevo toast
  */
  const addToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[23]++, (0, _react.useCallback)(toast => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[9]++;
    const id =
    /* istanbul ignore next */
    (cov_268thsp1ut().s[24]++, generateToastId());
    const newToast =
    /* istanbul ignore next */
    (cov_268thsp1ut().s[25]++, {
      ...toast,
      id,
      duration:
      /* istanbul ignore next */
      (cov_268thsp1ut().b[9][0]++, toast.duration) ??
      /* istanbul ignore next */
      (cov_268thsp1ut().b[9][1]++, defaultDuration)
    });
    /* istanbul ignore next */
    cov_268thsp1ut().s[26]++;
    setToasts(prev => {
      /* istanbul ignore next */
      cov_268thsp1ut().f[10]++;
      const updated =
      /* istanbul ignore next */
      (cov_268thsp1ut().s[27]++, [newToast, ...prev]);
      // Limitar nÃºmero mÃ¡ximo de toasts
      /* istanbul ignore next */
      cov_268thsp1ut().s[28]++;
      return updated.slice(0, maxToasts);
    });
    // Auto-remove despuÃ©s del duration
    /* istanbul ignore next */
    cov_268thsp1ut().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_268thsp1ut().b[11][0]++, newToast.duration) &&
    /* istanbul ignore next */
    (cov_268thsp1ut().b[11][1]++, newToast.duration > 0)) {
      /* istanbul ignore next */
      cov_268thsp1ut().b[10][0]++;
      cov_268thsp1ut().s[30]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_268thsp1ut().f[11]++;
        cov_268thsp1ut().s[31]++;
        removeToast(id);
      }, newToast.duration);
    } else
    /* istanbul ignore next */
    {
      cov_268thsp1ut().b[10][1]++;
    }
    cov_268thsp1ut().s[32]++;
    return id;
  }, [defaultDuration, maxToasts, removeToast]));
  /**
  * Limpia todos los toasts
  */
  const clearToasts =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[33]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[12]++;
    cov_268thsp1ut().s[34]++;
    setToasts([]);
  }, []));
  /**
  * Toast de Ã©xito para bÃºsquedas
  */
  const showSuccessToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[35]++, (0, _react.useCallback)((query, resultCount) => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[13]++;
    cov_268thsp1ut().s[36]++;
    return addToast({
      type: 'success',
      title: 'Â¡BÃºsqueda exitosa!',
      description: `Se encontraron ${resultCount} productos para "${query}"`,
      duration: 3000
    });
  }, [addToast]));
  /**
  * Toast de error para bÃºsquedas
  */
  const showErrorToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[37]++, (0, _react.useCallback)((error, retryCount =
  /* istanbul ignore next */
  (cov_268thsp1ut().b[12][0]++, 0), onRetry) => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[14]++;
    const {
      title,
      description
    } =
    /* istanbul ignore next */
    (cov_268thsp1ut().s[38]++, getErrorToastContent(error, retryCount));
    /* istanbul ignore next */
    cov_268thsp1ut().s[39]++;
    return addToast({
      type: 'error',
      title,
      description,
      duration: error.retryable ?
      /* istanbul ignore next */
      (cov_268thsp1ut().b[13][0]++, 4000) :
      /* istanbul ignore next */
      (cov_268thsp1ut().b[13][1]++, 6000),
      action:
      /* istanbul ignore next */
      (cov_268thsp1ut().b[15][0]++, error.retryable) &&
      /* istanbul ignore next */
      (cov_268thsp1ut().b[15][1]++, onRetry) ?
      /* istanbul ignore next */
      (cov_268thsp1ut().b[14][0]++, {
        label: 'Reintentar',
        onClick: onRetry
      }) :
      /* istanbul ignore next */
      (cov_268thsp1ut().b[14][1]++, undefined)
    });
  }, [addToast]));
  /**
  * Toast de advertencia para bÃºsquedas
  */
  const showWarningToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[40]++, (0, _react.useCallback)((message, description) => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[15]++;
    cov_268thsp1ut().s[41]++;
    return addToast({
      type: 'warning',
      title: message,
      description,
      duration: 4000
    });
  }, [addToast]));
  /**
  * Toast informativo
  */
  const showInfoToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[42]++, (0, _react.useCallback)((message, description) => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[16]++;
    cov_268thsp1ut().s[43]++;
    return addToast({
      type: 'info',
      title: message,
      description,
      duration: 4000
    });
  }, [addToast]));
  /**
  * Toast para cuando no hay resultados
  */
  const showNoResultsToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[44]++, (0, _react.useCallback)(query => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[17]++;
    cov_268thsp1ut().s[45]++;
    return addToast({
      type: 'warning',
      title: 'Sin resultados',
      description: `No se encontraron productos para "${query}"`,
      duration: 4000
    });
  }, [addToast]));
  /**
  * Toast para retry en progreso
  */
  const showRetryToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[46]++, (0, _react.useCallback)((attempt, maxAttempts) => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[18]++;
    cov_268thsp1ut().s[47]++;
    return addToast({
      type: 'info',
      title: 'Reintentando bÃºsqueda...',
      description: `Intento ${attempt} de ${maxAttempts}`,
      duration: 2000
    });
  }, [addToast]));
  /**
  * Toast para retry exitoso
  */
  const showRetrySuccessToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[48]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[19]++;
    cov_268thsp1ut().s[49]++;
    return addToast({
      type: 'success',
      title: 'Â¡ConexiÃ³n restaurada!',
      description: 'La bÃºsqueda se completÃ³ exitosamente',
      duration: 3000
    });
  }, [addToast]));
  /**
  * Toast para retry fallido
  */
  const showRetryFailedToast =
  /* istanbul ignore next */
  (cov_268thsp1ut().s[50]++, (0, _react.useCallback)(attempts => {
    /* istanbul ignore next */
    cov_268thsp1ut().f[20]++;
    cov_268thsp1ut().s[51]++;
    return addToast({
      type: 'error',
      title: 'BÃºsqueda fallida',
      description: `No se pudo completar despuÃ©s de ${attempts} intentos`,
      duration: 6000
    });
  }, [addToast]));
  /* istanbul ignore next */
  cov_268thsp1ut().s[52]++;
  return {
    // Estado
    toasts,
    hasToasts: toasts.length > 0,
    // Funciones generales
    addToast,
    removeToast,
    clearToasts,
    // Funciones especÃ­ficas para bÃºsquedas
    showSuccessToast,
    showErrorToast,
    showWarningToast,
    showInfoToast,
    showNoResultsToast,
    showRetryToast,
    showRetrySuccessToast,
    showRetryFailedToast
  };
}
const _default =
/* istanbul ignore next */
(cov_268thsp1ut().s[53]++, useSearchToast);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,