{"version":3,"names":["config","cov_2i8gt1vyg","f","s","monitoringMiddleware","request","startTime","Date","now","pathname","searchParams","nextUrl","response","_server","NextResponse","next","responseTime","b","_proactivemonitoring","proactiveMonitoring","reportError","path","method","userAgent","headers","get","Object","fromEntries","entries","set","toString","error","errorMessage","Error","message","timestamp","toISOString","_logger","logger","LogLevel","ERROR","LogCategory","SYSTEM","matcher"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\monitoring.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { proactiveMonitoring } from '../lib/monitoring/proactive-monitoring'\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger'\r\n\r\n/**\r\n * Middleware para capturar errores y métricas automáticamente\r\n */\r\nexport async function monitoringMiddleware(request: NextRequest) {\r\n  const startTime = Date.now()\r\n  const { pathname, searchParams } = request.nextUrl\r\n  \r\n  try {\r\n    // Continuar con la request\r\n    const response = NextResponse.next()\r\n    \r\n    // Medir tiempo de respuesta\r\n    const responseTime = Date.now() - startTime\r\n    \r\n    // Reportar métricas de rendimiento\r\n    if (responseTime > 2000) { // Más de 2 segundos\r\n      await proactiveMonitoring.reportError(\r\n        `Slow response detected: ${responseTime}ms for ${pathname}`,\r\n        {\r\n          path: pathname,\r\n          responseTime,\r\n          method: request.method,\r\n          userAgent: request.headers.get('user-agent'),\r\n          searchParams: Object.fromEntries(searchParams.entries())\r\n        }\r\n      )\r\n    }\r\n    \r\n    // Agregar headers de monitoreo\r\n    response.headers.set('X-Response-Time', responseTime.toString())\r\n    response.headers.set('X-Monitoring-Enabled', 'true')\r\n    \r\n    return response\r\n    \r\n  } catch (error) {\r\n    // Capturar errores del middleware\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown middleware error'\r\n    \r\n    await proactiveMonitoring.reportError(error, {\r\n      path: pathname,\r\n      method: request.method,\r\n      userAgent: request.headers.get('user-agent'),\r\n      searchParams: Object.fromEntries(searchParams.entries()),\r\n      timestamp: new Date().toISOString()\r\n    })\r\n    \r\n    logger.error(LogLevel.ERROR, 'Middleware error', {\r\n      error: errorMessage,\r\n      path: pathname,\r\n      method: request.method\r\n    }, LogCategory.SYSTEM)\r\n    \r\n    // Continuar con la request a pesar del error\r\n    return NextResponse.next()\r\n  }\r\n}\r\n\r\n/**\r\n * Configuración del matcher para el middleware\r\n */\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - api (API routes)\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     */\r\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\r\n  ],\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}