61adf1317036ce4b33ca631fe2624143
// ===================================
// PINTEYA E-COMMERCE - FUNCIONES DE API PARA VARIANTES DE PRODUCTOS
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get findCheapestVariant () {
        return findCheapestVariant;
    },
    get findMostExpensiveVariant () {
        return findMostExpensiveVariant;
    },
    get findVariantByCapacity () {
        return findVariantByCapacity;
    },
    get getAvailableCapacities () {
        return getAvailableCapacities;
    },
    get getDiscountPercentage () {
        return getDiscountPercentage;
    },
    get getEffectivePrice () {
        return getEffectivePrice;
    },
    get getProductVariants () {
        return getProductVariants;
    },
    get hasDiscount () {
        return hasDiscount;
    }
});
const _jsonutils = require("../json-utils");
async function getProductVariants(productId) {
    try {
        const response = await fetch(`/api/products/${productId}/variants`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        // Usar parsing seguro de JSON
        const result = await (0, _jsonutils.safeApiResponseJson)(response);
        if (!result || !result.success || !result.data) {
            throw new Error(result?.error || 'Error parsing API response');
        }
        return result.data;
    } catch (error) {
        console.error(`Error obteniendo variantes del producto ${productId}:`, error);
        throw error;
    }
}
function findCheapestVariant(variants) {
    if (!variants || variants.length === 0) return null;
    return variants.reduce((cheapest, current)=>{
        const cheapestPrice = parseFloat(cheapest.discounted_price || cheapest.price);
        const currentPrice = parseFloat(current.discounted_price || current.price);
        return currentPrice < cheapestPrice ? current : cheapest;
    });
}
function findMostExpensiveVariant(variants) {
    if (!variants || variants.length === 0) return null;
    return variants.reduce((expensive, current)=>{
        const expensivePrice = parseFloat(expensive.discounted_price || expensive.price);
        const currentPrice = parseFloat(current.discounted_price || current.price);
        return currentPrice > expensivePrice ? current : expensive;
    });
}
function findVariantByCapacity(variants, capacity) {
    if (!variants || variants.length === 0) return null;
    return variants.find((variant)=>variant.capacity.toLowerCase() === capacity.toLowerCase()) || null;
}
function getAvailableCapacities(variants) {
    if (!variants || variants.length === 0) return [];
    return variants.map((variant)=>variant.capacity).filter((capacity, index, array)=>array.indexOf(capacity) === index).sort((a, b)=>{
        // Ordenar por capacidad num√©rica
        const aNum = parseInt(a.replace(/[^\d]/g, '')) || 0;
        const bNum = parseInt(b.replace(/[^\d]/g, '')) || 0;
        return aNum - bNum;
    });
}
function getEffectivePrice(variant) {
    return parseFloat(variant.discounted_price || variant.price);
}
function hasDiscount(variant) {
    return variant.discounted_price !== null && parseFloat(variant.discounted_price) < parseFloat(variant.price);
}
function getDiscountPercentage(variant) {
    if (!hasDiscount(variant)) return 0;
    const originalPrice = parseFloat(variant.price);
    const discountedPrice = parseFloat(variant.discounted_price);
    return Math.round((originalPrice - discountedPrice) / originalPrice * 100);
}

//# sourceMappingURL=data:application/json;base64,