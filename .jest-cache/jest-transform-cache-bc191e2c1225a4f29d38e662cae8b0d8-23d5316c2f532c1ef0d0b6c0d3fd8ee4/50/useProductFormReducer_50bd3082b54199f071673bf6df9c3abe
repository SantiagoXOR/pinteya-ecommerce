f0c913952bee9e25275832c8e202b043
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useProductFormReducer () {
        return useProductFormReducer;
    },
    get useProductFormValidation () {
        return useProductFormValidation;
    }
});
const _react = require("react");
// Estado inicial
const initialState = {
    // Información básica
    name: '',
    description: '',
    shortDescription: '',
    categoryId: '',
    status: 'draft',
    // Detalles del producto
    brand: '',
    model: '',
    sku: '',
    barcode: '',
    // Precios
    price: 0,
    comparePrice: 0,
    costPrice: 0,
    taxRate: 0,
    // Inventario
    trackInventory: true,
    stock: 0,
    lowStockThreshold: 5,
    allowBackorder: false,
    // Envío
    requiresShipping: true,
    weight: 0,
    dimensions: {
        length: 0,
        width: 0,
        height: 0
    },
    // SEO
    seoTitle: '',
    seoDescription: '',
    seoKeywords: [],
    // Imágenes y variantes
    images: [],
    variants: [],
    // Estado del formulario
    isLoading: false,
    isSaving: false,
    errors: {},
    isDirty: false,
    currentStep: 0,
    validationErrors: {}
};
// Reducer function
function productFormReducer(state, action) {
    switch(action.type){
        case 'SET_FIELD':
            return {
                ...state,
                [action.field]: action.value,
                isDirty: true,
                // Limpiar error del campo si existe
                errors: {
                    ...state.errors,
                    [action.field]: undefined
                }
            };
        case 'SET_MULTIPLE_FIELDS':
            return {
                ...state,
                ...action.fields,
                isDirty: true
            };
        case 'SET_LOADING':
            return {
                ...state,
                isLoading: action.payload
            };
        case 'SET_SAVING':
            return {
                ...state,
                isSaving: action.payload
            };
        case 'SET_ERROR':
            return {
                ...state,
                errors: {
                    ...state.errors,
                    [action.field]: action.error
                }
            };
        case 'CLEAR_ERROR':
            const { [action.field]: _, ...restErrors } = state.errors;
            return {
                ...state,
                errors: restErrors
            };
        case 'CLEAR_ALL_ERRORS':
            return {
                ...state,
                errors: {},
                validationErrors: {}
            };
        case 'SET_VALIDATION_ERRORS':
            return {
                ...state,
                validationErrors: action.errors
            };
        case 'SET_DIRTY':
            return {
                ...state,
                isDirty: action.payload
            };
        case 'SET_STEP':
            return {
                ...state,
                currentStep: Math.max(0, Math.min(4, action.step))
            };
        case 'NEXT_STEP':
            return {
                ...state,
                currentStep: Math.min(4, state.currentStep + 1)
            };
        case 'PREV_STEP':
            return {
                ...state,
                currentStep: Math.max(0, state.currentStep - 1)
            };
        case 'ADD_IMAGE':
            return {
                ...state,
                images: [
                    ...state.images,
                    action.image
                ],
                isDirty: true
            };
        case 'REMOVE_IMAGE':
            return {
                ...state,
                images: state.images.filter((_, index)=>index !== action.index),
                isDirty: true
            };
        case 'ADD_VARIANT':
            return {
                ...state,
                variants: [
                    ...state.variants,
                    action.variant
                ],
                isDirty: true
            };
        case 'REMOVE_VARIANT':
            return {
                ...state,
                variants: state.variants.filter((_, index)=>index !== action.index),
                isDirty: true
            };
        case 'UPDATE_VARIANT':
            return {
                ...state,
                variants: state.variants.map((variant, index)=>index === action.index ? action.variant : variant),
                isDirty: true
            };
        case 'ADD_SEO_KEYWORD':
            if (!state.seoKeywords.includes(action.keyword)) {
                return {
                    ...state,
                    seoKeywords: [
                        ...state.seoKeywords,
                        action.keyword
                    ],
                    isDirty: true
                };
            }
            return state;
        case 'REMOVE_SEO_KEYWORD':
            return {
                ...state,
                seoKeywords: state.seoKeywords.filter((_, index)=>index !== action.index),
                isDirty: true
            };
        case 'RESET_FORM':
            return initialState;
        case 'LOAD_PRODUCT':
            return {
                ...state,
                ...action.product,
                isDirty: false
            };
        default:
            return state;
    }
}
function useProductFormReducer() {
    const [state, dispatch] = (0, _react.useReducer)(productFormReducer, initialState);
    // Acciones memoizadas
    const actions = (0, _react.useMemo)(()=>({
            setField: (field, value)=>dispatch({
                    type: 'SET_FIELD',
                    field,
                    value
                }),
            setMultipleFields: (fields)=>dispatch({
                    type: 'SET_MULTIPLE_FIELDS',
                    fields
                }),
            setLoading: (loading)=>dispatch({
                    type: 'SET_LOADING',
                    payload: loading
                }),
            setSaving: (saving)=>dispatch({
                    type: 'SET_SAVING',
                    payload: saving
                }),
            setError: (field, error)=>dispatch({
                    type: 'SET_ERROR',
                    field,
                    error
                }),
            clearError: (field)=>dispatch({
                    type: 'CLEAR_ERROR',
                    field
                }),
            clearAllErrors: ()=>dispatch({
                    type: 'CLEAR_ALL_ERRORS'
                }),
            setValidationErrors: (errors)=>dispatch({
                    type: 'SET_VALIDATION_ERRORS',
                    errors
                }),
            setDirty: (dirty)=>dispatch({
                    type: 'SET_DIRTY',
                    payload: dirty
                }),
            setStep: (step)=>dispatch({
                    type: 'SET_STEP',
                    step
                }),
            nextStep: ()=>dispatch({
                    type: 'NEXT_STEP'
                }),
            prevStep: ()=>dispatch({
                    type: 'PREV_STEP'
                }),
            addImage: (image)=>dispatch({
                    type: 'ADD_IMAGE',
                    image
                }),
            removeImage: (index)=>dispatch({
                    type: 'REMOVE_IMAGE',
                    index
                }),
            addVariant: (variant)=>dispatch({
                    type: 'ADD_VARIANT',
                    variant
                }),
            removeVariant: (index)=>dispatch({
                    type: 'REMOVE_VARIANT',
                    index
                }),
            updateVariant: (index, variant)=>dispatch({
                    type: 'UPDATE_VARIANT',
                    index,
                    variant
                }),
            addSeoKeyword: (keyword)=>dispatch({
                    type: 'ADD_SEO_KEYWORD',
                    keyword
                }),
            removeSeoKeyword: (index)=>dispatch({
                    type: 'REMOVE_SEO_KEYWORD',
                    index
                }),
            resetForm: ()=>dispatch({
                    type: 'RESET_FORM'
                }),
            loadProduct: (product)=>dispatch({
                    type: 'LOAD_PRODUCT',
                    product
                })
        }), []);
    // Selectores memoizados
    const selectors = (0, _react.useMemo)(()=>({
            // Verificaciones de estado
            hasErrors: Object.keys(state.errors).length > 0,
            hasValidationErrors: Object.keys(state.validationErrors).length > 0,
            isFormValid: Object.keys(state.errors).length === 0 && state.name.trim() !== '',
            // Información de pasos
            isFirstStep: state.currentStep === 0,
            isLastStep: state.currentStep === 4,
            stepProgress: (state.currentStep + 1) / 5 * 100,
            // Cálculos de precios
            profitMargin: state.price > 0 && state.costPrice > 0 ? (state.price - state.costPrice) / state.price * 100 : 0,
            discountPercentage: state.comparePrice > 0 && state.price > 0 ? (state.comparePrice - state.price) / state.comparePrice * 100 : 0,
            // Estado de inventario
            isLowStock: state.stock <= state.lowStockThreshold,
            isOutOfStock: state.stock === 0,
            // Validaciones específicas
            isPriceValid: state.price > 0,
            isSkuValid: state.sku.length > 0,
            areDimensionsValid: state.dimensions.length > 0 && state.dimensions.width > 0 && state.dimensions.height > 0,
            // Contadores
            imageCount: state.images.length,
            variantCount: state.variants.length,
            keywordCount: state.seoKeywords.length,
            // Obtener errores por paso
            getStepErrors: (step)=>{
                const stepFields = {
                    0: [
                        'name',
                        'description',
                        'categoryId'
                    ],
                    1: [
                        'price',
                        'comparePrice',
                        'costPrice'
                    ],
                    2: [
                        'stock',
                        'lowStockThreshold'
                    ],
                    3: [
                        'images'
                    ],
                    4: [
                        'seoTitle',
                        'seoDescription'
                    ]
                };
                const fields = stepFields[step] || [];
                return fields.filter((field)=>state.errors[field]);
            }
        }), [
        state
    ]);
    return {
        state,
        actions,
        selectors
    };
}
function useProductFormValidation() {
    const { state, actions, selectors } = useProductFormReducer();
    const validateField = (0, _react.useCallback)((field, value)=>{
        let error = '';
        switch(field){
            case 'name':
                if (!value || value.trim().length === 0) {
                    error = 'El nombre es requerido';
                } else if (value.length > 255) {
                    error = 'Máximo 255 caracteres';
                }
                break;
            case 'price':
                if (value <= 0) {
                    error = 'El precio debe ser mayor a 0';
                } else if (value > 999999.99) {
                    error = 'Precio máximo excedido';
                }
                break;
            case 'comparePrice':
                if (value > 0 && value < state.price) {
                    error = 'El precio de comparación debe ser mayor al precio base';
                }
                break;
            case 'costPrice':
                if (value > 0 && value > state.price) {
                    error = 'El precio de costo debe ser menor al precio de venta';
                }
                break;
            case 'stock':
                if (value < 0) {
                    error = 'El stock debe ser mayor o igual a 0';
                } else if (value > 999999) {
                    error = 'Stock máximo excedido';
                }
                break;
            case 'sku':
                if (value && !/^[A-Z0-9\-_]+$/.test(value)) {
                    error = 'SKU debe contener solo letras mayúsculas, números, guiones y guiones bajos';
                }
                break;
        }
        if (error) {
            actions.setError(field, error);
        } else {
            actions.clearError(field);
        }
        return error === '';
    }, [
        state.price,
        actions
    ]);
    const validateForm = (0, _react.useCallback)(()=>{
        const fields = [
            'name',
            'price',
            'stock',
            'categoryId'
        ];
        let isValid = true;
        fields.forEach((field)=>{
            const fieldValid = validateField(field, state[field]);
            if (!fieldValid) {
                isValid = false;
            }
        });
        return isValid;
    }, [
        state,
        validateField
    ]);
    return {
        state,
        actions,
        selectors,
        validateField,
        validateForm
    };
}

//# sourceMappingURL=data:application/json;base64,