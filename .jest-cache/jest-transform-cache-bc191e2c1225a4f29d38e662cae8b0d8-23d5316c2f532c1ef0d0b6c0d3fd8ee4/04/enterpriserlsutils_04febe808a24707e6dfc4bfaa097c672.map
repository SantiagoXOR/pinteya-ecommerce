{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-rls-utils.ts"],"sourcesContent":["/**\r\n * Utilidades RLS Enterprise\r\n * Integración entre Row Level Security de Supabase y autenticación enterprise\r\n */\r\n\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport type { EnterpriseAuthContext } from './enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES\r\n// =====================================================\r\n\r\nexport interface RLSContext {\r\n  userId: string;\r\n  supabaseUserId?: string;\r\n  role: 'admin' | 'user' | 'moderator';\r\n  permissions: string[];\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface RLSValidationResult {\r\n  valid: boolean;\r\n  context?: RLSContext;\r\n  error?: string;\r\n  code?: string;\r\n}\r\n\r\nexport interface RLSQueryOptions {\r\n  enforceRLS?: boolean;\r\n  bypassRLS?: boolean;\r\n  adminOverride?: boolean;\r\n  auditLog?: boolean;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE VALIDACIÓN RLS\r\n// =====================================================\r\n\r\n/**\r\n * Valida el contexto RLS para un usuario\r\n */\r\nexport async function validateRLSContext(\r\n  enterpriseContext: EnterpriseAuthContext\r\n): Promise<RLSValidationResult> {\r\n  try {\r\n    if (!supabaseAdmin) {\r\n      return {\r\n        valid: false,\r\n        error: 'Supabase admin client no disponible',\r\n        code: 'SUPABASE_UNAVAILABLE'\r\n      };\r\n    }\r\n\r\n    // Obtener información del usuario desde Supabase\r\n    const { data: userProfile, error: profileError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id, supabase_user_id, role_id, permissions, is_active, user_roles(role_name)')\r\n      .eq('clerk_user_id', enterpriseContext.userId)\r\n      .single();\r\n\r\n    if (profileError) {\r\n      console.error('[RLS] Error obteniendo perfil de usuario:', profileError);\r\n      return {\r\n        valid: false,\r\n        error: 'Error obteniendo perfil de usuario',\r\n        code: 'PROFILE_ERROR'\r\n      };\r\n    }\r\n\r\n    if (!userProfile || !userProfile.is_active) {\r\n      return {\r\n        valid: false,\r\n        error: 'Usuario inactivo o no encontrado',\r\n        code: 'USER_INACTIVE'\r\n      };\r\n    }\r\n\r\n    // Crear contexto RLS\r\n    const rlsContext: RLSContext = {\r\n      userId: enterpriseContext.userId,\r\n      supabaseUserId: userProfile.supabase_user_id,\r\n      role: (userProfile.user_roles as any)?.role_name || 'user',\r\n      permissions: userProfile.permissions || [],\r\n      isActive: userProfile.is_active\r\n    };\r\n\r\n    return {\r\n      valid: true,\r\n      context: rlsContext\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('[RLS] Error validando contexto RLS:', error);\r\n    return {\r\n      valid: false,\r\n      error: 'Error interno validando RLS',\r\n      code: 'INTERNAL_ERROR'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Crea un cliente Supabase con contexto de usuario para RLS\r\n */\r\nexport function createUserSupabaseClient(\r\n  supabaseUserId: string,\r\n  accessToken?: string\r\n): ReturnType<typeof createClient> | null {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\n    if (!supabaseUrl || !supabaseAnonKey) {\r\n      console.error('[RLS] Configuración de Supabase no disponible');\r\n      return null;\r\n    }\r\n\r\n    // Crear cliente con contexto de usuario\r\n    const client = createClient(supabaseUrl, supabaseAnonKey, {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      },\r\n      global: {\r\n        headers: {\r\n          'X-User-ID': supabaseUserId,\r\n          ...(accessToken && { 'Authorization': `Bearer ${accessToken}` })\r\n        }\r\n      }\r\n    });\r\n\r\n    return client;\r\n\r\n  } catch (error) {\r\n    console.error('[RLS] Error creando cliente Supabase de usuario:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Ejecuta una consulta con contexto RLS\r\n */\r\nexport async function executeWithRLS<T>(\r\n  enterpriseContext: EnterpriseAuthContext,\r\n  queryFunction: (client: any, rlsContext: RLSContext) => Promise<T>,\r\n  options: RLSQueryOptions = {}\r\n): Promise<{ success: boolean; data?: T; error?: string; code?: string }> {\r\n  try {\r\n    // Validar contexto RLS\r\n    const rlsValidation = await validateRLSContext(enterpriseContext);\r\n    if (!rlsValidation.valid) {\r\n      return {\r\n        success: false,\r\n        error: rlsValidation.error,\r\n        code: rlsValidation.code\r\n      };\r\n    }\r\n\r\n    const rlsContext = rlsValidation.context!;\r\n\r\n    // Determinar qué cliente usar\r\n    let client;\r\n    if (options.bypassRLS && enterpriseContext.role === 'admin') {\r\n      // Admin puede usar cliente administrativo para bypass RLS\r\n      client = supabaseAdmin;\r\n      console.log('[RLS] Usando cliente admin para bypass RLS');\r\n    } else if (rlsContext.supabaseUserId) {\r\n      // Usar cliente con contexto de usuario para RLS\r\n      client = createUserSupabaseClient(rlsContext.supabaseUserId);\r\n      if (!client) {\r\n        return {\r\n          success: false,\r\n          error: 'Error creando cliente de usuario',\r\n          code: 'CLIENT_ERROR'\r\n        };\r\n      }\r\n      console.log('[RLS] Usando cliente de usuario con RLS');\r\n    } else {\r\n      // Fallback a cliente admin\r\n      client = supabaseAdmin;\r\n      console.log('[RLS] Usando cliente admin como fallback');\r\n    }\r\n\r\n    // Ejecutar consulta\r\n    const result = await queryFunction(client, rlsContext);\r\n\r\n    // Log de auditoría si está habilitado\r\n    if (options.auditLog) {\r\n      await logRLSOperation(enterpriseContext, 'query_executed', {\r\n        bypassRLS: options.bypassRLS,\r\n        adminOverride: options.adminOverride,\r\n        success: true\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: result\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('[RLS] Error ejecutando consulta con RLS:', error);\r\n\r\n    // Log de auditoría para errores\r\n    if (options.auditLog) {\r\n      await logRLSOperation(enterpriseContext, 'query_error', {\r\n        error: error.message,\r\n        bypassRLS: options.bypassRLS,\r\n        adminOverride: options.adminOverride\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: 'Error ejecutando consulta',\r\n      code: 'QUERY_ERROR'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica permisos específicos para operaciones RLS\r\n */\r\nexport function checkRLSPermission(\r\n  rlsContext: RLSContext,\r\n  requiredPermission: string,\r\n  resourceOwner?: string\r\n): boolean {\r\n  // Admin siempre tiene acceso\r\n  if (rlsContext.role === 'admin') {\r\n    return true;\r\n  }\r\n\r\n  // Verificar permiso específico\r\n  if (rlsContext.permissions.includes(requiredPermission)) {\r\n    return true;\r\n  }\r\n\r\n  // Verificar si es el propietario del recurso\r\n  if (resourceOwner && resourceOwner === rlsContext.userId) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Crea filtros RLS para consultas\r\n */\r\nexport function createRLSFilters(\r\n  rlsContext: RLSContext,\r\n  tableName: string\r\n): Record<string, any> {\r\n  const filters: Record<string, any> = {};\r\n\r\n  switch (tableName) {\r\n    case 'user_profiles':\r\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\r\n        // Los usuarios solo pueden ver su propio perfil\r\n        filters.clerk_user_id = rlsContext.userId;\r\n      }\r\n      break;\r\n\r\n    case 'orders':\r\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\r\n        // Los usuarios solo pueden ver sus propias órdenes\r\n        filters.user_id = rlsContext.userId;\r\n      }\r\n      break;\r\n\r\n    case 'products':\r\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\r\n        // Los usuarios solo pueden ver productos activos\r\n        filters.is_active = true;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      // Sin filtros adicionales para otras tablas\r\n      break;\r\n  }\r\n\r\n  return filters;\r\n}\r\n\r\n/**\r\n * Middleware RLS para APIs\r\n */\r\nexport function withRLS(options: RLSQueryOptions = {}) {\r\n  return function (handler: Function) {\r\n    return async (request: any, ...args: any[]) => {\r\n      try {\r\n        // Obtener contexto enterprise del request\r\n        const enterpriseContext = (request as any).enterpriseAuth;\r\n        \r\n        if (!enterpriseContext) {\r\n          const errorResponse = {\r\n            success: false,\r\n            error: 'Contexto enterprise no disponible',\r\n            code: 'NO_ENTERPRISE_CONTEXT',\r\n            timestamp: new Date().toISOString()\r\n          };\r\n\r\n          if ('query' in request) {\r\n            // Pages Router\r\n            const res = args[0] as any;\r\n            return res.status(401).json(errorResponse);\r\n          } else {\r\n            // App Router\r\n            return new Response(JSON.stringify(errorResponse), {\r\n              status: 401,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n        }\r\n\r\n        // Validar contexto RLS\r\n        const rlsValidation = await validateRLSContext(enterpriseContext);\r\n        if (!rlsValidation.valid) {\r\n          const errorResponse = {\r\n            success: false,\r\n            error: rlsValidation.error,\r\n            code: rlsValidation.code,\r\n            rls: true,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n\r\n          if ('query' in request) {\r\n            // Pages Router\r\n            const res = args[0] as any;\r\n            return res.status(403).json(errorResponse);\r\n          } else {\r\n            // App Router\r\n            return new Response(JSON.stringify(errorResponse), {\r\n              status: 403,\r\n              headers: { 'Content-Type': 'application/json' }\r\n            });\r\n          }\r\n        }\r\n\r\n        // Añadir contexto RLS al request\r\n        (request as any).rlsContext = rlsValidation.context;\r\n\r\n        return handler(request, ...args);\r\n\r\n      } catch (error) {\r\n        console.error('[RLS] Error en middleware RLS:', error);\r\n        \r\n        const errorResponse = {\r\n          success: false,\r\n          error: 'Error interno en middleware RLS',\r\n          code: 'RLS_MIDDLEWARE_ERROR',\r\n          timestamp: new Date().toISOString()\r\n        };\r\n\r\n        if ('query' in request) {\r\n          // Pages Router\r\n          const res = args[0] as any;\r\n          return res.status(500).json(errorResponse);\r\n        } else {\r\n          // App Router\r\n          return new Response(JSON.stringify(errorResponse), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n      }\r\n    };\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE AUDITORÍA\r\n// =====================================================\r\n\r\n/**\r\n * Log de operaciones RLS para auditoría\r\n */\r\nasync function logRLSOperation(\r\n  enterpriseContext: EnterpriseAuthContext,\r\n  operation: string,\r\n  metadata: any\r\n): Promise<void> {\r\n  try {\r\n    if (!supabaseAdmin) {return;}\r\n\r\n    await supabaseAdmin\r\n      .from('security_audit_logs')\r\n      .insert({\r\n        user_id: enterpriseContext.userId,\r\n        event_type: 'RLS_OPERATION',\r\n        event_category: 'database_access',\r\n        severity: 'info',\r\n        description: `RLS operation: ${operation}`,\r\n        metadata: {\r\n          operation,\r\n          role: enterpriseContext.role,\r\n          permissions: enterpriseContext.permissions,\r\n          security_level: enterpriseContext.securityLevel,\r\n          ...metadata\r\n        },\r\n        ip_address: enterpriseContext.ipAddress,\r\n        user_agent: enterpriseContext.userAgent,\r\n        created_at: new Date().toISOString()\r\n      });\r\n\r\n  } catch (error) {\r\n    console.error('[RLS] Error logging RLS operation:', error);\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// UTILIDADES DE TESTING\r\n// =====================================================\r\n\r\n/**\r\n * Función para testing de políticas RLS\r\n */\r\nexport async function testRLSPolicies(\r\n  tableName: string,\r\n  testCases: Array<{\r\n    name: string;\r\n    userRole: 'admin' | 'user' | 'moderator';\r\n    operation: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE';\r\n    expectedResult: 'allow' | 'deny';\r\n    testData?: any;\r\n  }>\r\n): Promise<Array<{ name: string; passed: boolean; error?: string }>> {\r\n  const results = [];\r\n\r\n  for (const testCase of testCases) {\r\n    try {\r\n      // Implementar lógica de testing específica\r\n      // Esta función se puede expandir para testing automatizado\r\n      results.push({\r\n        name: testCase.name,\r\n        passed: true // Placeholder\r\n      });\r\n    } catch (error) {\r\n      results.push({\r\n        name: testCase.name,\r\n        passed: false,\r\n        error: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["checkRLSPermission","createRLSFilters","createUserSupabaseClient","executeWithRLS","testRLSPolicies","validateRLSContext","withRLS","enterpriseContext","supabaseAdmin","valid","error","code","data","userProfile","profileError","from","select","eq","userId","single","console","is_active","rlsContext","supabaseUserId","supabase_user_id","role","user_roles","role_name","permissions","isActive","context","accessToken","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseAnonKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","client","createClient","auth","autoRefreshToken","persistSession","global","headers","queryFunction","options","rlsValidation","success","bypassRLS","log","result","auditLog","logRLSOperation","adminOverride","message","requiredPermission","resourceOwner","includes","tableName","filters","clerk_user_id","user_id","handler","request","args","enterpriseAuth","errorResponse","timestamp","Date","toISOString","res","status","json","Response","JSON","stringify","rls","operation","metadata","insert","event_type","event_category","severity","description","security_level","securityLevel","ip_address","ipAddress","user_agent","userAgent","created_at","testCases","results","testCase","push","name","passed"],"mappings":"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"}