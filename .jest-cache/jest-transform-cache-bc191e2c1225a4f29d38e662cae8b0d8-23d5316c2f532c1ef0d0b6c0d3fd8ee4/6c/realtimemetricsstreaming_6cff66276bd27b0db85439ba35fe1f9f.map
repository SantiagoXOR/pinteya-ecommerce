{"version":3,"names":["RealTimeMetricsStreaming","cov_ne5j69el1","f","s","StreamEventType","StreamingUtils","realTimeMetricsStreaming","DEFAULT_CONFIG","maxClients","heartbeatInterval","clientTimeout","maxQueueSize","defaultRateLimit","maxEventsPerSecond","burstLimit","constructor","clients","Map","eventHistory","stats","totalClients","activeClients","totalEventsSent","eventsPerSecond","averageLatency","errorRate","clientsByType","topEvents","initializeStreaming","getInstance","instance","b","_realtimeperformancemonitor","realTimePerformanceMonitor","subscribe","data","broadcastEvent","type","timestamp","Date","now","id","generateEventId","startHeartbeat","startCleanup","startStatsCalculation","_logger","logger","info","LogCategory","MONITORING","registerClient","config","sendFunction","size","Error","client","clientId","lastActivity","eventQueue","rateLimitCounter","count","resetTime","send","disconnect","disconnectClient","set","subscriptions","sendRecentEvents","get","delete","remainingClients","event","push","length","slice","eligibleClients","Array","from","values","filter","isClientEligible","sendPromises","map","checkRateLimit","success","updateRateLimit","error","Promise","allSettled","includes","filters","severities","severity","sources","source","tags","hasMatchingTag","some","tag","rateLimit","recentEvents","processClientQueue","shift","setInterval","heartbeatEvent","serverStatus","cleanupInterval","timeout","lastEventCount","lastTimestamp","statsInterval","timeDiff","eventDiff","eventCounts","forEach","entries","sort","a","createAlertEvent","alert","createAlertResolvedEvent","alertId","resolvedAt","createBudgetViolationEvent","violation","createSystemStatusEvent","status","getStats","getActiveClients","queueSize","getRecentEvents","limit","Math","random","toString","substr","destroy","clearInterval","clear","createBasicClientConfig","createDashboardClientConfig","createCriticalAlertsClientConfig","getStreamingSummary","isActive","clientCount","lastEventTime"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\real-time-metrics-streaming.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - REAL-TIME METRICS STREAMING\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { realTimePerformanceMonitor } from './real-time-performance-monitor';\r\nimport { advancedAlertingEngine } from './advanced-alerting-engine';\r\nimport { performanceBudgetsMonitor } from './performance-budgets-monitor';\r\n\r\n/**\r\n * Tipos de eventos de streaming\r\n */\r\nexport enum StreamEventType {\r\n  METRICS_UPDATE = 'metrics_update',\r\n  ALERT_CREATED = 'alert_created',\r\n  ALERT_RESOLVED = 'alert_resolved',\r\n  BUDGET_VIOLATION = 'budget_violation',\r\n  SYSTEM_STATUS = 'system_status',\r\n  HEARTBEAT = 'heartbeat'\r\n}\r\n\r\n/**\r\n * Evento de streaming\r\n */\r\nexport interface StreamEvent {\r\n  type: StreamEventType;\r\n  data: any;\r\n  timestamp: number;\r\n  id: string;\r\n}\r\n\r\n/**\r\n * Configuración de cliente de streaming\r\n */\r\nexport interface StreamClientConfig {\r\n  clientId: string;\r\n  subscriptions: StreamEventType[];\r\n  filters?: {\r\n    severities?: string[];\r\n    sources?: string[];\r\n    tags?: string[];\r\n  };\r\n  rateLimit?: {\r\n    maxEventsPerSecond: number;\r\n    burstLimit: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Cliente de streaming\r\n */\r\nexport interface StreamClient {\r\n  id: string;\r\n  config: StreamClientConfig;\r\n  lastActivity: number;\r\n  eventQueue: StreamEvent[];\r\n  rateLimitCounter: {\r\n    count: number;\r\n    resetTime: number;\r\n  };\r\n  send: (event: StreamEvent) => Promise<boolean>;\r\n  disconnect: () => void;\r\n}\r\n\r\n/**\r\n * Estadísticas de streaming\r\n */\r\nexport interface StreamingStats {\r\n  totalClients: number;\r\n  activeClients: number;\r\n  totalEventsSent: number;\r\n  eventsPerSecond: number;\r\n  averageLatency: number;\r\n  errorRate: number;\r\n  clientsByType: Record<string, number>;\r\n  topEvents: Array<{\r\n    type: StreamEventType;\r\n    count: number;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Configuración por defecto\r\n */\r\nconst DEFAULT_CONFIG = {\r\n  maxClients: 1000,\r\n  heartbeatInterval: 30000, // 30 segundos\r\n  clientTimeout: 300000, // 5 minutos\r\n  maxQueueSize: 100,\r\n  defaultRateLimit: {\r\n    maxEventsPerSecond: 10,\r\n    burstLimit: 50\r\n  }\r\n};\r\n\r\n/**\r\n * Sistema de streaming de métricas en tiempo real\r\n */\r\nexport class RealTimeMetricsStreaming {\r\n  private static instance: RealTimeMetricsStreaming;\r\n  private clients: Map<string, StreamClient> = new Map();\r\n  private eventHistory: StreamEvent[] = [];\r\n  private stats: StreamingStats = {\r\n    totalClients: 0,\r\n    activeClients: 0,\r\n    totalEventsSent: 0,\r\n    eventsPerSecond: 0,\r\n    averageLatency: 0,\r\n    errorRate: 0,\r\n    clientsByType: {},\r\n    topEvents: []\r\n  };\r\n  private heartbeatInterval?: NodeJS.Timeout;\r\n  private cleanupInterval?: NodeJS.Timeout;\r\n  private statsInterval?: NodeJS.Timeout;\r\n\r\n  private constructor() {\r\n    this.initializeStreaming();\r\n  }\r\n\r\n  static getInstance(): RealTimeMetricsStreaming {\r\n    if (!RealTimeMetricsStreaming.instance) {\r\n      RealTimeMetricsStreaming.instance = new RealTimeMetricsStreaming();\r\n    }\r\n    return RealTimeMetricsStreaming.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el sistema de streaming\r\n   */\r\n  private initializeStreaming(): void {\r\n    // Suscribirse a eventos del monitor de performance\r\n    realTimePerformanceMonitor.subscribe((data) => {\r\n      this.broadcastEvent({\r\n        type: StreamEventType.METRICS_UPDATE,\r\n        data,\r\n        timestamp: Date.now(),\r\n        id: this.generateEventId()\r\n      });\r\n    });\r\n\r\n    // Iniciar heartbeat\r\n    this.startHeartbeat();\r\n    \r\n    // Iniciar limpieza periódica\r\n    this.startCleanup();\r\n    \r\n    // Iniciar cálculo de estadísticas\r\n    this.startStatsCalculation();\r\n\r\n    logger.info(LogCategory.MONITORING, 'Real-time metrics streaming initialized');\r\n  }\r\n\r\n  /**\r\n   * Registra un nuevo cliente de streaming\r\n   */\r\n  registerClient(config: StreamClientConfig, sendFunction: (event: StreamEvent) => Promise<boolean>): StreamClient {\r\n    if (this.clients.size >= DEFAULT_CONFIG.maxClients) {\r\n      throw new Error('Maximum number of streaming clients reached');\r\n    }\r\n\r\n    const client: StreamClient = {\r\n      id: config.clientId,\r\n      config,\r\n      lastActivity: Date.now(),\r\n      eventQueue: [],\r\n      rateLimitCounter: {\r\n        count: 0,\r\n        resetTime: Date.now() + 1000\r\n      },\r\n      send: sendFunction,\r\n      disconnect: () => this.disconnectClient(config.clientId)\r\n    };\r\n\r\n    this.clients.set(config.clientId, client);\r\n    this.stats.totalClients++;\r\n    this.stats.activeClients = this.clients.size;\r\n\r\n    logger.info(LogCategory.MONITORING, `Streaming client registered: ${config.clientId}`, {\r\n      subscriptions: config.subscriptions,\r\n      totalClients: this.clients.size\r\n    });\r\n\r\n    // Enviar eventos recientes al nuevo cliente\r\n    this.sendRecentEvents(client);\r\n\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Desconecta un cliente\r\n   */\r\n  disconnectClient(clientId: string): void {\r\n    const client = this.clients.get(clientId);\r\n    if (client) {\r\n      this.clients.delete(clientId);\r\n      this.stats.activeClients = this.clients.size;\r\n      \r\n      logger.info(LogCategory.MONITORING, `Streaming client disconnected: ${clientId}`, {\r\n        remainingClients: this.clients.size\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Difunde un evento a todos los clientes suscritos\r\n   */\r\n  private async broadcastEvent(event: StreamEvent): Promise<void> {\r\n    // Agregar a historial\r\n    this.eventHistory.push(event);\r\n    \r\n    // Mantener solo los últimos 1000 eventos\r\n    if (this.eventHistory.length > 1000) {\r\n      this.eventHistory = this.eventHistory.slice(-1000);\r\n    }\r\n\r\n    const eligibleClients = Array.from(this.clients.values()).filter(client => \r\n      this.isClientEligible(client, event)\r\n    );\r\n\r\n    const sendPromises = eligibleClients.map(async (client) => {\r\n      try {\r\n        // Verificar rate limiting\r\n        if (!this.checkRateLimit(client)) {\r\n          // Agregar a cola si está dentro del límite\r\n          if (client.eventQueue.length < DEFAULT_CONFIG.maxQueueSize) {\r\n            client.eventQueue.push(event);\r\n          }\r\n          return false;\r\n        }\r\n\r\n        const success = await client.send(event);\r\n        \r\n        if (success) {\r\n          this.updateRateLimit(client);\r\n          this.stats.totalEventsSent++;\r\n          client.lastActivity = Date.now();\r\n        }\r\n        \r\n        return success;\r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, `Error sending event to client ${client.id}`, error as Error);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(sendPromises);\r\n  }\r\n\r\n  /**\r\n   * Verifica si un cliente es elegible para recibir un evento\r\n   */\r\n  private isClientEligible(client: StreamClient, event: StreamEvent): boolean {\r\n    // Verificar suscripciones\r\n    if (!client.config.subscriptions.includes(event.type)) {\r\n      return false;\r\n    }\r\n\r\n    // Aplicar filtros si existen\r\n    const { filters } = client.config;\r\n    if (filters) {\r\n      // Filtrar por severidad (para alertas)\r\n      if (filters.severities && event.data.severity) {\r\n        if (!filters.severities.includes(event.data.severity)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Filtrar por fuente\r\n      if (filters.sources && event.data.source) {\r\n        if (!filters.sources.includes(event.data.source)) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Filtrar por tags\r\n      if (filters.tags && event.data.tags) {\r\n        const hasMatchingTag = filters.tags.some(tag => \r\n          event.data.tags.includes(tag)\r\n        );\r\n        if (!hasMatchingTag) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Verifica rate limiting para un cliente\r\n   */\r\n  private checkRateLimit(client: StreamClient): boolean {\r\n    const now = Date.now();\r\n    const rateLimit = client.config.rateLimit || DEFAULT_CONFIG.defaultRateLimit;\r\n    \r\n    // Reset counter si ha pasado un segundo\r\n    if (now >= client.rateLimitCounter.resetTime) {\r\n      client.rateLimitCounter.count = 0;\r\n      client.rateLimitCounter.resetTime = now + 1000;\r\n    }\r\n\r\n    return client.rateLimitCounter.count < rateLimit.maxEventsPerSecond;\r\n  }\r\n\r\n  /**\r\n   * Actualiza contador de rate limiting\r\n   */\r\n  private updateRateLimit(client: StreamClient): void {\r\n    client.rateLimitCounter.count++;\r\n  }\r\n\r\n  /**\r\n   * Envía eventos recientes a un cliente nuevo\r\n   */\r\n  private async sendRecentEvents(client: StreamClient): Promise<void> {\r\n    const recentEvents = this.eventHistory\r\n      .filter(event => this.isClientEligible(client, event))\r\n      .slice(-10); // Últimos 10 eventos relevantes\r\n\r\n    for (const event of recentEvents) {\r\n      try {\r\n        await client.send(event);\r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, `Error sending recent event to client ${client.id}`, error as Error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Procesa cola de eventos de un cliente\r\n   */\r\n  private async processClientQueue(client: StreamClient): Promise<void> {\r\n    while (client.eventQueue.length > 0 && this.checkRateLimit(client)) {\r\n      const event = client.eventQueue.shift();\r\n      if (event) {\r\n        try {\r\n          const success = await client.send(event);\r\n          if (success) {\r\n            this.updateRateLimit(client);\r\n            this.stats.totalEventsSent++;\r\n            client.lastActivity = Date.now();\r\n          }\r\n        } catch (error) {\r\n          logger.error(LogCategory.MONITORING, `Error processing queued event for client ${client.id}`, error as Error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicia heartbeat periódico\r\n   */\r\n  private startHeartbeat(): void {\r\n    this.heartbeatInterval = setInterval(() => {\r\n      const heartbeatEvent: StreamEvent = {\r\n        type: StreamEventType.HEARTBEAT,\r\n        data: {\r\n          timestamp: Date.now(),\r\n          activeClients: this.clients.size,\r\n          serverStatus: 'healthy'\r\n        },\r\n        timestamp: Date.now(),\r\n        id: this.generateEventId()\r\n      };\r\n\r\n      this.broadcastEvent(heartbeatEvent);\r\n    }, DEFAULT_CONFIG.heartbeatInterval);\r\n  }\r\n\r\n  /**\r\n   * Inicia limpieza periódica\r\n   */\r\n  private startCleanup(): void {\r\n    this.cleanupInterval = setInterval(() => {\r\n      const now = Date.now();\r\n      const timeout = DEFAULT_CONFIG.clientTimeout;\r\n\r\n      // Remover clientes inactivos\r\n      for (const [clientId, client] of this.clients) {\r\n        if (now - client.lastActivity > timeout) {\r\n          this.disconnectClient(clientId);\r\n          logger.info(LogCategory.MONITORING, `Removed inactive streaming client: ${clientId}`);\r\n        } else {\r\n          // Procesar cola de eventos pendientes\r\n          this.processClientQueue(client);\r\n        }\r\n      }\r\n    }, 60000); // Cada minuto\r\n  }\r\n\r\n  /**\r\n   * Inicia cálculo de estadísticas\r\n   */\r\n  private startStatsCalculation(): void {\r\n    let lastEventCount = 0;\r\n    let lastTimestamp = Date.now();\r\n\r\n    this.statsInterval = setInterval(() => {\r\n      const now = Date.now();\r\n      const timeDiff = (now - lastTimestamp) / 1000; // segundos\r\n      const eventDiff = this.stats.totalEventsSent - lastEventCount;\r\n\r\n      this.stats.eventsPerSecond = eventDiff / timeDiff;\r\n      this.stats.activeClients = this.clients.size;\r\n\r\n      // Calcular eventos más frecuentes\r\n      const eventCounts = new Map<StreamEventType, number>();\r\n      this.eventHistory.slice(-100).forEach(event => {\r\n        eventCounts.set(event.type, (eventCounts.get(event.type) || 0) + 1);\r\n      });\r\n\r\n      this.stats.topEvents = Array.from(eventCounts.entries())\r\n        .map(([type, count]) => ({ type, count }))\r\n        .sort((a, b) => b.count - a.count)\r\n        .slice(0, 5);\r\n\r\n      lastEventCount = this.stats.totalEventsSent;\r\n      lastTimestamp = now;\r\n    }, 10000); // Cada 10 segundos\r\n  }\r\n\r\n  /**\r\n   * Crea evento de alerta\r\n   */\r\n  createAlertEvent(alert: any): void {\r\n    const event: StreamEvent = {\r\n      type: StreamEventType.ALERT_CREATED,\r\n      data: alert,\r\n      timestamp: Date.now(),\r\n      id: this.generateEventId()\r\n    };\r\n\r\n    this.broadcastEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Crea evento de resolución de alerta\r\n   */\r\n  createAlertResolvedEvent(alertId: string): void {\r\n    const event: StreamEvent = {\r\n      type: StreamEventType.ALERT_RESOLVED,\r\n      data: { alertId, resolvedAt: Date.now() },\r\n      timestamp: Date.now(),\r\n      id: this.generateEventId()\r\n    };\r\n\r\n    this.broadcastEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Crea evento de violación de presupuesto\r\n   */\r\n  createBudgetViolationEvent(violation: any): void {\r\n    const event: StreamEvent = {\r\n      type: StreamEventType.BUDGET_VIOLATION,\r\n      data: violation,\r\n      timestamp: Date.now(),\r\n      id: this.generateEventId()\r\n    };\r\n\r\n    this.broadcastEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Crea evento de estado del sistema\r\n   */\r\n  createSystemStatusEvent(status: any): void {\r\n    const event: StreamEvent = {\r\n      type: StreamEventType.SYSTEM_STATUS,\r\n      data: status,\r\n      timestamp: Date.now(),\r\n      id: this.generateEventId()\r\n    };\r\n\r\n    this.broadcastEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de streaming\r\n   */\r\n  getStats(): StreamingStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Obtiene clientes activos\r\n   */\r\n  getActiveClients(): Array<{\r\n    id: string;\r\n    subscriptions: StreamEventType[];\r\n    lastActivity: number;\r\n    queueSize: number;\r\n  }> {\r\n    return Array.from(this.clients.values()).map(client => ({\r\n      id: client.id,\r\n      subscriptions: client.config.subscriptions,\r\n      lastActivity: client.lastActivity,\r\n      queueSize: client.eventQueue.length\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Obtiene eventos recientes\r\n   */\r\n  getRecentEvents(limit: number = 50): StreamEvent[] {\r\n    return this.eventHistory.slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * Genera ID único para evento\r\n   */\r\n  private generateEventId(): string {\r\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n    }\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval);\r\n    }\r\n    if (this.statsInterval) {\r\n      clearInterval(this.statsInterval);\r\n    }\r\n    \r\n    // Desconectar todos los clientes\r\n    this.clients.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const realTimeMetricsStreaming = RealTimeMetricsStreaming.getInstance();\r\n\r\n/**\r\n * Utilidades para streaming de métricas\r\n */\r\nexport const StreamingUtils = {\r\n  /**\r\n   * Crea configuración de cliente básica\r\n   */\r\n  createBasicClientConfig(\r\n    clientId: string,\r\n    subscriptions: StreamEventType[] = [StreamEventType.METRICS_UPDATE, StreamEventType.ALERT_CREATED]\r\n  ): StreamClientConfig {\r\n    return {\r\n      clientId,\r\n      subscriptions,\r\n      rateLimit: DEFAULT_CONFIG.defaultRateLimit\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Crea configuración de cliente para dashboard\r\n   */\r\n  createDashboardClientConfig(clientId: string): StreamClientConfig {\r\n    return {\r\n      clientId,\r\n      subscriptions: [\r\n        StreamEventType.METRICS_UPDATE,\r\n        StreamEventType.ALERT_CREATED,\r\n        StreamEventType.ALERT_RESOLVED,\r\n        StreamEventType.BUDGET_VIOLATION,\r\n        StreamEventType.SYSTEM_STATUS\r\n      ],\r\n      rateLimit: {\r\n        maxEventsPerSecond: 20,\r\n        burstLimit: 100\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Crea configuración de cliente para alertas críticas\r\n   */\r\n  createCriticalAlertsClientConfig(clientId: string): StreamClientConfig {\r\n    return {\r\n      clientId,\r\n      subscriptions: [\r\n        StreamEventType.ALERT_CREATED,\r\n        StreamEventType.BUDGET_VIOLATION\r\n      ],\r\n      filters: {\r\n        severities: ['high', 'critical']\r\n      },\r\n      rateLimit: {\r\n        maxEventsPerSecond: 5,\r\n        burstLimit: 20\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen de streaming\r\n   */\r\n  getStreamingSummary(): {\r\n    isActive: boolean;\r\n    clientCount: number;\r\n    eventsPerSecond: number;\r\n    lastEventTime: number;\r\n  } {\r\n    const stats = realTimeMetricsStreaming.getStats();\r\n    const recentEvents = realTimeMetricsStreaming.getRecentEvents(1);\r\n    \r\n    return {\r\n      isActive: stats.activeClients > 0,\r\n      clientCount: stats.activeClients,\r\n      eventsPerSecond: stats.eventsPerSecond,\r\n      lastEventTime: recentEvents.length > 0 ? recentEvents[0].timestamp : 0\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}