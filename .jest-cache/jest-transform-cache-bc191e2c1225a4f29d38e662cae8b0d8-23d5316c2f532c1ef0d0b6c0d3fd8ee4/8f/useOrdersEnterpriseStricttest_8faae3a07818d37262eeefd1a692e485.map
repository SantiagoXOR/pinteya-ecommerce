{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useOrdersEnterpriseStrict.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - UNIT TESTS\n// Pruebas unitarias para useOrdersEnterpriseStrict\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals'\nimport { jest } from '@jest/globals'\nimport { useOrdersEnterpriseStrict } from '@/hooks/admin/useOrdersEnterpriseStrict'\nimport { OrderEnterprise, OrderStatus } from '@/types/orders-enterprise'\nimport { ApiResponse } from '@/types/api-strict'\n\n// ===================================\n// MOCKS\n// ===================================\n\n// Mock del fetch global\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock de console para capturar logs\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {})\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {})\n\n// Datos de prueba\nconst mockOrder: OrderEnterprise = {\n  id: 'order-123',\n  orderNumber: 'ORD-2024-001',\n  status: 'pending',\n  previousStatus: null,\n  statusHistory: [\n    {\n      status: 'pending',\n      timestamp: new Date().toISOString(),\n      reason: 'Order created',\n      userId: 'user-123',\n    },\n  ],\n  customerId: 'customer-123',\n  customerEmail: 'test@example.com',\n  customerPhone: '+1234567890',\n  items: [\n    {\n      id: 'item-1',\n      productId: 'product-1',\n      productName: 'Test Product',\n      quantity: 2,\n      unitPrice: 29.99,\n      totalPrice: 59.98,\n      sku: 'TEST-SKU-001',\n    },\n  ],\n  subtotal: 59.98,\n  taxAmount: 4.8,\n  shippingAmount: 9.99,\n  discountAmount: 0,\n  totalAmount: 74.77,\n  currency: 'USD',\n  shippingAddress: {\n    street: '123 Test St',\n    city: 'Test City',\n    state: 'TS',\n    zipCode: '12345',\n    country: 'US',\n  },\n  billingAddress: {\n    street: '123 Test St',\n    city: 'Test City',\n    state: 'TS',\n    zipCode: '12345',\n    country: 'US',\n  },\n  paymentMethod: 'credit_card',\n  paymentStatus: 'pending',\n  shippingMethod: 'standard',\n  estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: 'Test order notes',\n  tags: ['test', 'automated'],\n  metadata: {\n    source: 'web',\n    campaign: 'test-campaign',\n  },\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n}\n\nconst mockApiResponse: ApiResponse<OrderEnterprise[]> = {\n  success: true,\n  data: [mockOrder],\n  message: 'Orders retrieved successfully',\n  timestamp: new Date().toISOString(),\n  requestId: 'req-123',\n  pagination: {\n    page: 1,\n    limit: 10,\n    total: 1,\n    totalPages: 1,\n  },\n}\n\n// ===================================\n// SETUP Y CLEANUP\n// ===================================\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  mockFetch.mockClear()\n})\n\nafterEach(() => {\n  jest.clearAllTimers()\n})\n\n// ===================================\n// TESTS PRINCIPALES\n// ===================================\n\ndescribe('useOrdersEnterpriseStrict', () => {\n  describe('Inicialización', () => {\n    it('debe inicializar con estado por defecto', () => {\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n        })\n      )\n\n      expect(result.current.orders).toEqual([])\n      expect(result.current.loading).toBe(false)\n      expect(result.current.error).toBeNull()\n      expect(result.current.pagination).toEqual({\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0,\n      })\n    })\n\n    it('debe aplicar filtros iniciales', () => {\n      const initialFilters = {\n        status: 'pending' as OrderStatus,\n        customerId: 'customer-123',\n      }\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters,\n          enableCache: false,\n        })\n      )\n\n      expect(result.current.filters).toEqual(initialFilters)\n    })\n  })\n\n  describe('Carga de datos exitosa', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => mockApiResponse,\n      })\n    })\n\n    it('debe cargar órdenes correctamente', async () => {\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          autoFetch: true,\n        })\n      )\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      expect(result.current.orders).toEqual([mockOrder])\n      expect(result.current.error).toBeNull()\n      expect(result.current.pagination).toEqual(mockApiResponse.pagination)\n    })\n\n    it('debe manejar filtros correctamente', async () => {\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n        })\n      )\n\n      await act(async () => {\n        result.current.setFilters({\n          status: 'pending' as OrderStatus,\n        })\n      })\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith(\n          expect.stringContaining('status=pending'),\n          expect.any(Object)\n        )\n      })\n    })\n\n    it('debe manejar paginación correctamente', async () => {\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n        })\n      )\n\n      await act(async () => {\n        result.current.setPage(2)\n      })\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith(\n          expect.stringContaining('page=2'),\n          expect.any(Object)\n        )\n      })\n    })\n  })\n\n  describe('Manejo de errores', () => {\n    it('debe manejar errores de red', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'))\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          autoFetch: true,\n        })\n      )\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      expect(result.current.error).toBeTruthy()\n      expect(result.current.orders).toEqual([])\n    })\n\n    it('debe manejar respuestas HTTP de error', async () => {\n      mockFetch.mockResolvedValue({\n        ok: false,\n        status: 500,\n        json: async () => ({\n          success: false,\n          message: 'Internal server error',\n        }),\n      })\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          autoFetch: true,\n        })\n      )\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      expect(result.current.error).toBeTruthy()\n      expect(result.current.orders).toEqual([])\n    })\n\n    it('debe manejar datos inválidos', async () => {\n      const invalidResponse = {\n        success: true,\n        data: [{ id: 'invalid' }], // Datos incompletos\n        message: 'Success',\n      }\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => invalidResponse,\n      })\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          autoFetch: true,\n          enableValidation: true,\n        })\n      )\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      expect(mockConsoleWarn).toHaveBeenCalled()\n      expect(result.current.orders).toEqual([])\n    })\n  })\n\n  describe('Sistema de caché', () => {\n    beforeEach(() => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => mockApiResponse,\n      })\n    })\n\n    it('debe usar caché cuando está habilitado', async () => {\n      const { result, rerender } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: true,\n          cacheTime: 5000,\n        })\n      )\n\n      // Primera carga\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      const firstCallCount = mockFetch.mock.calls.length\n\n      // Segunda carga (debería usar caché)\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      expect(mockFetch.mock.calls.length).toBe(firstCallCount)\n    })\n\n    it('debe invalidar caché después del tiempo especificado', async () => {\n      jest.useFakeTimers()\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: true,\n          cacheTime: 1000, // 1 segundo\n        })\n      )\n\n      // Primera carga\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      const firstCallCount = mockFetch.mock.calls.length\n\n      // Avanzar tiempo más allá del cache time\n      act(() => {\n        jest.advanceTimersByTime(1500)\n      })\n\n      // Segunda carga (debería hacer nueva petición)\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      expect(mockFetch.mock.calls.length).toBeGreaterThan(firstCallCount)\n\n      jest.useRealTimers()\n    })\n  })\n\n  describe('Sistema de reintentos', () => {\n    it('debe reintentar en caso de error', async () => {\n      mockFetch\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockApiResponse,\n        })\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          retryAttempts: 3,\n          retryDelay: 100,\n        })\n      )\n\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(\n        () => {\n          expect(result.current.loading).toBe(false)\n        },\n        { timeout: 5000 }\n      )\n\n      expect(mockFetch).toHaveBeenCalledTimes(3)\n      expect(result.current.orders).toEqual([mockOrder])\n      expect(result.current.error).toBeNull()\n    })\n\n    it('debe fallar después de agotar reintentos', async () => {\n      mockFetch.mockRejectedValue(new Error('Persistent network error'))\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          retryAttempts: 2,\n          retryDelay: 50,\n        })\n      )\n\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(\n        () => {\n          expect(result.current.loading).toBe(false)\n        },\n        { timeout: 3000 }\n      )\n\n      expect(mockFetch).toHaveBeenCalledTimes(3) // 1 inicial + 2 reintentos\n      expect(result.current.error).toBeTruthy()\n      expect(result.current.orders).toEqual([])\n    })\n  })\n\n  describe('Transformación de datos', () => {\n    it('debe aplicar transformaciones personalizadas', async () => {\n      const transformedOrder = { ...mockOrder, customField: 'transformed' }\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => mockApiResponse,\n      })\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          transform: orders =>\n            orders.map(order => ({\n              ...order,\n              customField: 'transformed',\n            })),\n        })\n      )\n\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(() => {\n        expect(result.current.loading).toBe(false)\n      })\n\n      expect(result.current.orders[0]).toEqual(transformedOrder)\n    })\n  })\n\n  describe('Callbacks', () => {\n    it('debe ejecutar callback onSuccess', async () => {\n      const onSuccess = jest.fn()\n\n      mockFetch.mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => mockApiResponse,\n      })\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          onSuccess,\n        })\n      )\n\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(() => {\n        expect(onSuccess).toHaveBeenCalledWith([mockOrder])\n      })\n    })\n\n    it('debe ejecutar callback onError', async () => {\n      const onError = jest.fn()\n      const error = new Error('Test error')\n\n      mockFetch.mockRejectedValue(error)\n\n      const { result } = renderHook(() =>\n        useOrdersEnterpriseStrict({\n          initialFilters: {},\n          enableCache: false,\n          onError,\n        })\n      )\n\n      await act(async () => {\n        result.current.refetch()\n      })\n\n      await waitFor(() => {\n        expect(onError).toHaveBeenCalledWith(error)\n      })\n    })\n  })\n})\n"],"names":["mockFetch","jest","fn","global","fetch","mockConsoleError","spyOn","console","mockImplementation","mockConsoleWarn","mockOrder","id","orderNumber","status","previousStatus","statusHistory","timestamp","Date","toISOString","reason","userId","customerId","customerEmail","customerPhone","items","productId","productName","quantity","unitPrice","totalPrice","sku","subtotal","taxAmount","shippingAmount","discountAmount","totalAmount","currency","shippingAddress","street","city","state","zipCode","country","billingAddress","paymentMethod","paymentStatus","shippingMethod","estimatedDelivery","now","notes","tags","metadata","source","campaign","createdAt","updatedAt","mockApiResponse","success","data","message","requestId","pagination","page","limit","total","totalPages","beforeEach","clearAllMocks","mockClear","afterEach","clearAllTimers","describe","it","result","renderHook","useOrdersEnterpriseStrict","initialFilters","enableCache","expect","current","orders","toEqual","loading","toBe","error","toBeNull","filters","mockResolvedValue","ok","json","autoFetch","waitFor","act","setFilters","toHaveBeenCalledWith","stringContaining","any","Object","setPage","mockRejectedValue","Error","toBeTruthy","invalidResponse","enableValidation","toHaveBeenCalled","rerender","cacheTime","refetch","firstCallCount","mock","calls","length","useFakeTimers","advanceTimersByTime","toBeGreaterThan","useRealTimers","mockRejectedValueOnce","mockResolvedValueOnce","retryAttempts","retryDelay","timeout","toHaveBeenCalledTimes","transformedOrder","customField","transform","map","order","onSuccess","onError"],"mappings":"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"}