{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\PendingOrdersList.tsx"],"sourcesContent":["/**\n * Componente para mostrar lista de órdenes pendientes de entrega\n */\n\n'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Package,\n  MapPin,\n  Clock,\n  DollarSign,\n  Navigation,\n  CheckCircle,\n  AlertCircle,\n  Truck,\n  Route,\n} from 'lucide-react'\nimport { toast } from 'sonner'\n\ninterface OrderItem {\n  id: number\n  productName: string\n  quantity: number\n  price: number\n  weight: number\n}\n\ninterface ShippingAddress {\n  streetName: string\n  streetNumber: string\n  floor?: string\n  apartment?: string\n  cityName: string\n  stateName: string\n  zipCode: string\n  fullAddress: string\n}\n\ninterface PendingOrder {\n  id: number\n  orderNumber: string\n  total: number\n  status: string\n  paymentStatus: string\n  fulfillmentStatus: string\n  createdAt: string\n  estimatedDelivery?: string\n  shippingAddress: ShippingAddress\n  items: OrderItem[]\n  totalItems: number\n  totalWeight: number\n  notes?: string\n}\n\ninterface PendingOrdersData {\n  orders: PendingOrder[]\n  stats: {\n    totalOrders: number\n    totalValue: number\n    totalItems: number\n    totalWeight: number\n    averageOrderValue: number\n  }\n  driver: {\n    id: string\n    name: string\n    status: string\n  }\n}\n\ninterface PendingOrdersListProps {\n  onStartRoute?: (orders: PendingOrder[]) => void\n  onSelectOrder?: (order: PendingOrder) => void\n}\n\nexport default function PendingOrdersList({ onStartRoute, onSelectOrder }: PendingOrdersListProps) {\n  const [orders, setOrders] = useState<PendingOrder[]>([])\n  const [stats, setStats] = useState<PendingOrdersData['stats'] | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [selectedOrders, setSelectedOrders] = useState<Set<number>>(new Set())\n  const [optimizing, setOptimizing] = useState(false)\n\n  useEffect(() => {\n    fetchPendingOrders()\n  }, [])\n\n  const fetchPendingOrders = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch('/api/driver/pending-orders')\n\n      if (!response.ok) {\n        throw new Error('Error al cargar órdenes pendientes')\n      }\n\n      const result = await response.json()\n\n      if (result.success) {\n        setOrders(result.data.orders)\n        setStats(result.data.stats)\n\n        // Seleccionar todas las órdenes por defecto\n        const allOrderIds = new Set(result.data.orders.map((order: PendingOrder) => order.id))\n        setSelectedOrders(allOrderIds)\n      } else {\n        throw new Error(result.error || 'Error desconocido')\n      }\n    } catch (error) {\n      console.error('Error fetching pending orders:', error)\n      toast.error('Error al cargar órdenes pendientes')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const toggleOrderSelection = (orderId: number) => {\n    const newSelection = new Set(selectedOrders)\n    if (newSelection.has(orderId)) {\n      newSelection.delete(orderId)\n    } else {\n      newSelection.add(orderId)\n    }\n    setSelectedOrders(newSelection)\n  }\n\n  const handleStartOptimizedRoute = async () => {\n    const selectedOrdersList = orders.filter(order => selectedOrders.has(order.id))\n\n    if (selectedOrdersList.length === 0) {\n      toast.error('Selecciona al menos una orden para iniciar la ruta')\n      return\n    }\n\n    setOptimizing(true)\n\n    try {\n      // Preparar datos para optimización\n      const stops = selectedOrdersList.map(order => ({\n        orderId: order.id,\n        address: order.shippingAddress.fullAddress,\n        priority: order.status === 'confirmed' ? 1 : 0,\n      }))\n\n      const response = await fetch('/api/driver/optimize-route', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ stops }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al optimizar la ruta')\n      }\n\n      const result = await response.json()\n\n      if (result.success) {\n        toast.success(\n          `Ruta optimizada: ${result.data.summary.totalStops} paradas, ${Math.round(result.data.summary.totalDistance)}km`\n        )\n\n        if (onStartRoute) {\n          onStartRoute(selectedOrdersList)\n        }\n      } else {\n        throw new Error(result.error || 'Error en optimización')\n      }\n    } catch (error) {\n      console.error('Error optimizing route:', error)\n      toast.error('Error al optimizar la ruta')\n    } finally {\n      setOptimizing(false)\n    }\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-AR', {\n      style: 'currency',\n      currency: 'ARS',\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-AR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    })\n  }\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className='p-6'>\n          <div className='flex items-center justify-center'>\n            <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n            <span className='ml-2'>Cargando órdenes...</span>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className='space-y-4'>\n      {/* Estadísticas del día */}\n      {stats && (\n        <Card>\n          <CardHeader>\n            <CardTitle className='flex items-center gap-2'>\n              <Package className='h-5 w-5' />\n              Resumen del Día\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className='grid grid-cols-2 md:grid-cols-4 gap-4'>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-blue-600'>{stats.totalOrders}</div>\n                <div className='text-sm text-gray-600'>Órdenes</div>\n              </div>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-green-600'>\n                  {formatCurrency(stats.totalValue)}\n                </div>\n                <div className='text-sm text-gray-600'>Valor Total</div>\n              </div>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-orange-600'>{stats.totalItems}</div>\n                <div className='text-sm text-gray-600'>Productos</div>\n              </div>\n              <div className='text-center'>\n                <div className='text-2xl font-bold text-purple-600'>\n                  {Math.round(stats.totalWeight)}kg\n                </div>\n                <div className='text-sm text-gray-600'>Peso Total</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Controles de ruta */}\n      <Card>\n        <CardContent className='p-4'>\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center gap-2'>\n              <Navigation className='h-5 w-5' />\n              <span className='font-medium'>\n                {selectedOrders.size} de {orders.length} órdenes seleccionadas\n              </span>\n            </div>\n            <Button\n              onClick={handleStartOptimizedRoute}\n              disabled={selectedOrders.size === 0 || optimizing}\n              className='flex items-center gap-2'\n            >\n              {optimizing ? (\n                <>\n                  <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white'></div>\n                  Optimizando...\n                </>\n              ) : (\n                <>\n                  <Navigation className='h-4 w-4' />\n                  Iniciar Recorrido\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de órdenes */}\n      <div className='space-y-3'>\n        {orders.length === 0 ? (\n          <Card>\n            <CardContent className='p-6 text-center'>\n              <CheckCircle className='h-12 w-12 text-green-500 mx-auto mb-4' />\n              <h3 className='text-lg font-semibold mb-2'>¡No hay entregas pendientes!</h3>\n              <p className='text-gray-600'>Todas las órdenes del día han sido completadas.</p>\n            </CardContent>\n          </Card>\n        ) : (\n          orders.map(order => (\n            <Card\n              key={order.id}\n              className={`cursor-pointer transition-all ${\n                selectedOrders.has(order.id) ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:shadow-md'\n              }`}\n              onClick={() => toggleOrderSelection(order.id)}\n            >\n              <CardContent className='p-4'>\n                <div className='flex items-start justify-between mb-3'>\n                  <div className='flex items-center gap-2'>\n                    <div\n                      className={`w-4 h-4 rounded border-2 flex items-center justify-center ${\n                        selectedOrders.has(order.id)\n                          ? 'bg-blue-500 border-blue-500'\n                          : 'border-gray-300'\n                      }`}\n                    >\n                      {selectedOrders.has(order.id) && (\n                        <CheckCircle className='h-3 w-3 text-white' />\n                      )}\n                    </div>\n                    <h3 className='font-semibold'>{order.orderNumber}</h3>\n                    <Badge variant={order.status === 'paid' ? 'default' : 'secondary'}>\n                      {order.status === 'paid' ? 'Pagado' : 'Confirmado'}\n                    </Badge>\n                  </div>\n                  <div className='text-right'>\n                    <div className='font-bold text-green-600'>{formatCurrency(order.total)}</div>\n                    <div className='text-sm text-gray-500'>{order.totalItems} productos</div>\n                  </div>\n                </div>\n\n                <div className='space-y-2'>\n                  <div className='flex items-start gap-2'>\n                    <MapPin className='h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0' />\n                    <span className='text-sm'>{order.shippingAddress.fullAddress}</span>\n                  </div>\n\n                  <div className='flex items-center gap-2'>\n                    <Clock className='h-4 w-4 text-gray-500' />\n                    <span className='text-sm'>Creado: {formatDate(order.createdAt)}</span>\n                  </div>\n\n                  <div className='flex items-center gap-4 text-sm text-gray-600'>\n                    <span>{order.totalWeight}kg</span>\n                    <span>•</span>\n                    <span>{order.items.length} tipos de productos</span>\n                  </div>\n                </div>\n\n                {order.notes && (\n                  <div className='mt-3 p-2 bg-yellow-50 rounded border-l-4 border-yellow-400'>\n                    <div className='flex items-start gap-2'>\n                      <AlertCircle className='h-4 w-4 text-yellow-600 mt-0.5' />\n                      <span className='text-sm text-yellow-800'>{order.notes}</span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":["PendingOrdersList","onStartRoute","onSelectOrder","orders","setOrders","useState","stats","setStats","loading","setLoading","selectedOrders","setSelectedOrders","Set","optimizing","setOptimizing","useEffect","fetchPendingOrders","response","fetch","ok","Error","result","json","success","data","allOrderIds","map","order","id","error","console","toast","toggleOrderSelection","orderId","newSelection","has","delete","add","handleStartOptimizedRoute","selectedOrdersList","filter","length","stops","address","shippingAddress","fullAddress","priority","status","method","headers","body","JSON","stringify","summary","totalStops","Math","round","totalDistance","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","dateString","Date","toLocaleDateString","day","month","year","hour","minute","Card","CardContent","className","div","span","CardHeader","CardTitle","Package","totalOrders","totalValue","totalItems","totalWeight","Navigation","size","Button","onClick","disabled","CheckCircle","h3","p","orderNumber","Badge","variant","total","MapPin","Clock","createdAt","items","notes","AlertCircle"],"mappings":"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"}