{"version":3,"names":["cov_rzrzidkvj","actualCoverage","s","GET","f","runtime","request","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","b","Error","supabase","_supabasejs","createClient","data","products","error","productsError","from","select","limit","categories","categoriesError","results","connection","adminConnection","crud","tables","allPassed","Object","values","every","Boolean","_server","NextResponse","json","success","message","timestamp","Date","toISOString","status","console"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE TESTING\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// ===================================\r\n// GET /api/test - Ejecutar tests de conexión\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n\r\n    // Test básico de conexión a Supabase\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\n    if (!supabaseUrl || !supabaseKey) {\r\n      throw new Error('Variables de entorno de Supabase no configuradas');\r\n    }\r\n\r\n    const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n    // Test de conexión básica\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const { data: categories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const results = {\r\n      connection: !productsError,\r\n      adminConnection: !categoriesError,\r\n      crud: !productsError && !categoriesError,\r\n      tables: {\r\n        products: !productsError,\r\n        categories: !categoriesError,\r\n      }\r\n    };\r\n\r\n    const allPassed = results.connection &&\r\n                     results.adminConnection &&\r\n                     results.crud &&\r\n                     Object.values(results.tables).every(Boolean);\r\n\r\n    return NextResponse.json({\r\n      success: allPassed,\r\n      message: allPassed ? 'Todos los tests pasaron exitosamente' : 'Algunos tests fallaron',\r\n      results,\r\n      timestamp: new Date().toISOString(),\r\n    }, {\r\n      status: allPassed ? 200 : 500\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('❌ Error ejecutando tests:', error);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      message: 'Error ejecutando tests',\r\n      error: error.message,\r\n      timestamp: new Date().toISOString(),\r\n    }, {\r\n      status: 500\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}