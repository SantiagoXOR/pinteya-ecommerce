{"version":3,"names":["convertLegacyUser","cov_2bx7weg577","f","s","createUserFromNextAuth","formatUserCreatedDate","getFullName","getMigrationInfo","getUserAvatarUrl","getUserInitials","getUserRole","isMigratedFromClerk","isUserActive","isUserAdmin","isValidEmail","sanitizeName","user","b","first_name","last_name","email","split","toUpperCase","metadata","role","role_id","user_roles","role_name","is_active","Date","created_at","toLocaleDateString","year","month","day","legacyUser","id","name","slice","join","migrated_from","migration_date","toISOString","original_data","updated_at","authUser","created_via","provider","emailRegex","test","trim","replace","avatar_url","image","clerk_migration_completed","isMigrated","source","date"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\user-helpers.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - HELPERS DE USUARIO\r\n// ===================================\r\n\r\nimport { UserProfile } from '@/types/database';\r\n\r\n/**\r\n * Obtiene el nombre completo del usuario\r\n */\r\nexport function getFullName(user: UserProfile): string {\r\n  if (user.first_name && user.last_name) {\r\n    return `${user.first_name} ${user.last_name}`;\r\n  }\r\n  if (user.first_name) {\r\n    return user.first_name;\r\n  }\r\n  // Fallback al email\r\n  return user.email.split('@')[0];\r\n}\r\n\r\n/**\r\n * Obtiene las iniciales del usuario\r\n */\r\nexport function getUserInitials(user: UserProfile): string {\r\n  if (user.first_name && user.last_name) {\r\n    return `${user.first_name[0]}${user.last_name[0]}`.toUpperCase();\r\n  }\r\n  if (user.first_name) {\r\n    return user.first_name[0].toUpperCase();\r\n  }\r\n  return user.email[0].toUpperCase();\r\n}\r\n\r\n/**\r\n * Verifica si el usuario es administrador\r\n */\r\nexport function isUserAdmin(user: UserProfile): boolean {\r\n  return user.metadata?.role === 'admin' || \r\n         user.role_id === 'admin' ||\r\n         (user as any).user_roles?.role_name === 'admin';\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está activo\r\n */\r\nexport function isUserActive(user: UserProfile): boolean {\r\n  return user.is_active === true;\r\n}\r\n\r\n/**\r\n * Obtiene el rol del usuario\r\n */\r\nexport function getUserRole(user: UserProfile): string {\r\n  if ((user as any).user_roles?.role_name) {\r\n    return (user as any).user_roles.role_name;\r\n  }\r\n  if (user.metadata?.role) {\r\n    return user.metadata.role;\r\n  }\r\n  return 'customer';\r\n}\r\n\r\n/**\r\n * Formatea la fecha de creación del usuario\r\n */\r\nexport function formatUserCreatedDate(user: UserProfile): string {\r\n  return new Date(user.created_at).toLocaleDateString('es-ES', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n}\r\n\r\n/**\r\n * Convierte un usuario legacy a UserProfile (para migración)\r\n */\r\nexport function convertLegacyUser(legacyUser: any): Partial<UserProfile> {\r\n  return {\r\n    id: legacyUser.id,\r\n    email: legacyUser.email,\r\n    first_name: legacyUser.name?.split(' ')[0] || null,\r\n    last_name: legacyUser.name?.split(' ').slice(1).join(' ') || null,\r\n    role_id: legacyUser.role || null,\r\n    is_active: legacyUser.is_active ?? true,\r\n    metadata: {\r\n      migrated_from: 'legacy_user',\r\n      migration_date: new Date().toISOString(),\r\n      original_data: legacyUser\r\n    },\r\n    created_at: legacyUser.created_at || new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Crea un nuevo usuario desde NextAuth\r\n */\r\nexport function createUserFromNextAuth(authUser: any): Partial<UserProfile> {\r\n  return {\r\n    id: authUser.id,\r\n    email: authUser.email,\r\n    first_name: authUser.name?.split(' ')[0] || null,\r\n    last_name: authUser.name?.split(' ').slice(1).join(' ') || null,\r\n    role_id: null,\r\n    is_active: true,\r\n    metadata: {\r\n      created_via: 'nextauth',\r\n      provider: authUser.provider || 'unknown',\r\n      created_at: new Date().toISOString()\r\n    },\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Valida si un email es válido\r\n */\r\nexport function isValidEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\n/**\r\n * Sanitiza el nombre del usuario\r\n */\r\nexport function sanitizeName(name: string): string {\r\n  return name.trim().replace(/[<>]/g, '');\r\n}\r\n\r\n/**\r\n * Obtiene el avatar URL del usuario\r\n */\r\nexport function getUserAvatarUrl(user: UserProfile): string | null {\r\n  if (user.metadata?.avatar_url) {\r\n    return user.metadata.avatar_url;\r\n  }\r\n  if (user.metadata?.image) {\r\n    return user.metadata.image;\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario fue migrado de Clerk\r\n */\r\nexport function isMigratedFromClerk(user: UserProfile): boolean {\r\n  return user.metadata?.migrated_from === 'users_table' ||\r\n         user.metadata?.clerk_migration_completed === true;\r\n}\r\n\r\n/**\r\n * Obtiene información de migración\r\n */\r\nexport function getMigrationInfo(user: UserProfile): {\r\n  isMigrated: boolean;\r\n  source: string;\r\n  date: string | null;\r\n} {\r\n  return {\r\n    isMigrated: isMigratedFromClerk(user),\r\n    source: user.metadata?.migrated_from || 'unknown',\r\n    date: user.metadata?.migration_date || null\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}