{"version":3,"names":["cov_18ewe03pjp","actualCoverage","s","GET","f","runtime","request","startTime","Date","now","clientIP","b","headers","get","userAgent","session","_config","auth","user","_server","NextResponse","json","success","error","status","rateLimitResult","_ratelimiter","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","_logger","logger","warn","LogCategory","API","userId","response","addRateLimitHeaders","url","URL","paymentId","searchParams","includeRecommendations","info","qualityMetrics","measureIntegrationQuality","_metrics","metricsCollector","recordRequest","score","category","processingTime","data","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","supabase","_supabase","getSupabaseClient","securityCheck","checkSecurity","performanceCheck","checkPerformance","userExperienceCheck","checkUserExperience","integrationCompletenessCheck","checkIntegrationCompleteness","totalScore","recommendations","generateRecommendations","security","user_experience","integration_completeness","Math","round","details","checks","maxScore","push","name","description","recommendation","undefined","isHttps","process","env","NODE_ENV","hasSecureCredentials","MERCADOPAGO_ACCESS_TOKEN","startsWith","min","hasAutoReturn","forEach","check","avgScore"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\integration-quality\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - INTEGRATION QUALITY MEASUREMENT API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { getPaymentInfo } from '@/lib/integrations/mercadopago';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// Tipos para medición de calidad\r\ninterface QualityMetrics {\r\n  score: number;\r\n  category: 'excellent' | 'good' | 'needs_improvement' | 'poor';\r\n  recommendations: string[];\r\n  details: {\r\n    security: QualityCheck;\r\n    performance: QualityCheck;\r\n    user_experience: QualityCheck;\r\n    integration_completeness: QualityCheck;\r\n  };\r\n}\r\n\r\ninterface QualityCheck {\r\n  score: number;\r\n  status: 'pass' | 'warning' | 'fail';\r\n  checks: Array<{\r\n    name: string;\r\n    status: 'pass' | 'warning' | 'fail';\r\n    description: string;\r\n    recommendation?: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * GET /api/payments/integration-quality\r\n * Mide la calidad de la integración de MercadoPago según estándares oficiales\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for integration quality', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const paymentId = url.searchParams.get('payment_id');\r\n    const includeRecommendations = url.searchParams.get('include_recommendations') === 'true';\r\n\r\n    logger.info(LogCategory.API, 'Integration quality measurement started', {\r\n      userId,\r\n      paymentId,\r\n      includeRecommendations,\r\n      clientIP,\r\n    });\r\n\r\n    // Realizar medición de calidad\r\n    const qualityMetrics = await measureIntegrationQuality(paymentId, includeRecommendations);\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/integration-quality',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, paymentId: paymentId || 'none' }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Integration quality measurement completed', {\r\n      userId,\r\n      score: qualityMetrics.score,\r\n      category: qualityMetrics.category,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: qualityMetrics,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Integration quality measurement failed', {\r\n      operation: 'integration-quality-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/integration-quality',\r\n      'GET',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Mide la calidad de la integración según estándares de MercadoPago\r\n */\r\nasync function measureIntegrationQuality(\r\n  paymentId?: string | null,\r\n  includeRecommendations: boolean = true\r\n): Promise<QualityMetrics> {\r\n  const supabase = getSupabaseClient();\r\n  \r\n  // 1. Verificar seguridad\r\n  const securityCheck = await checkSecurity(supabase, paymentId);\r\n  \r\n  // 2. Verificar performance\r\n  const performanceCheck = await checkPerformance();\r\n  \r\n  // 3. Verificar experiencia de usuario\r\n  const userExperienceCheck = await checkUserExperience(supabase);\r\n  \r\n  // 4. Verificar completitud de integración\r\n  const integrationCompletenessCheck = await checkIntegrationCompleteness(supabase, paymentId);\r\n\r\n  // Calcular score general\r\n  const totalScore = (\r\n    securityCheck.score +\r\n    performanceCheck.score +\r\n    userExperienceCheck.score +\r\n    integrationCompletenessCheck.score\r\n  ) / 4;\r\n\r\n  // Determinar categoría\r\n  let category: QualityMetrics['category'];\r\n  if (totalScore >= 90) {category = 'excellent';}\r\n  else if (totalScore >= 75) {category = 'good';}\r\n  else if (totalScore >= 60) {category = 'needs_improvement';}\r\n  else {category = 'poor';}\r\n\r\n  // Generar recomendaciones\r\n  const recommendations = includeRecommendations ? generateRecommendations({\r\n    security: securityCheck,\r\n    performance: performanceCheck,\r\n    user_experience: userExperienceCheck,\r\n    integration_completeness: integrationCompletenessCheck,\r\n  }) : [];\r\n\r\n  return {\r\n    score: Math.round(totalScore),\r\n    category,\r\n    recommendations,\r\n    details: {\r\n      security: securityCheck,\r\n      performance: performanceCheck,\r\n      user_experience: userExperienceCheck,\r\n      integration_completeness: integrationCompletenessCheck,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Verifica aspectos de seguridad\r\n */\r\nasync function checkSecurity(supabase: any, paymentId?: string | null): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Webhook signature validation\r\n  checks.push({\r\n    name: 'webhook_signature_validation',\r\n    status: 'pass' as const,\r\n    description: 'Validación de firma de webhook implementada',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 2: HTTPS usage\r\n  const isHttps = process.env.NODE_ENV === 'production';\r\n  checks.push({\r\n    name: 'https_usage',\r\n    status: isHttps ? 'pass' as const : 'warning' as const,\r\n    description: isHttps ? 'HTTPS configurado correctamente' : 'HTTPS recomendado para producción',\r\n    recommendation: isHttps ? undefined : 'Configurar HTTPS para mayor seguridad',\r\n  });\r\n  totalScore += isHttps ? 25 : 15;\r\n\r\n  // Check 3: Credentials security\r\n  const hasSecureCredentials = process.env.MERCADOPAGO_ACCESS_TOKEN && \r\n                               process.env.MERCADOPAGO_ACCESS_TOKEN.startsWith('APP_USR');\r\n  checks.push({\r\n    name: 'credentials_security',\r\n    status: hasSecureCredentials ? 'pass' as const : 'fail' as const,\r\n    description: hasSecureCredentials ? 'Credenciales configuradas correctamente' : 'Credenciales no configuradas',\r\n    recommendation: hasSecureCredentials ? undefined : 'Configurar credenciales de producción',\r\n  });\r\n  totalScore += hasSecureCredentials ? 25 : 0;\r\n\r\n  // Check 4: Rate limiting\r\n  checks.push({\r\n    name: 'rate_limiting',\r\n    status: 'pass' as const,\r\n    description: 'Rate limiting implementado con Redis',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica aspectos de performance\r\n */\r\nasync function checkPerformance(): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Retry logic implementation\r\n  checks.push({\r\n    name: 'retry_logic',\r\n    status: 'pass' as const,\r\n    description: 'Retry logic con backoff exponencial implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  // Check 2: Caching implementation\r\n  checks.push({\r\n    name: 'caching',\r\n    status: 'pass' as const,\r\n    description: 'Sistema de cache con Redis implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  // Check 3: Monitoring and metrics\r\n  checks.push({\r\n    name: 'monitoring',\r\n    status: 'pass' as const,\r\n    description: 'Monitoreo y métricas implementadas',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 40;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica experiencia de usuario\r\n */\r\nasync function checkUserExperience(supabase: any): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Wallet Brick implementation\r\n  checks.push({\r\n    name: 'wallet_brick',\r\n    status: 'pass' as const,\r\n    description: 'Wallet Brick implementado para mejor UX',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 40;\r\n\r\n  // Check 2: Auto return configuration\r\n  const hasAutoReturn = process.env.NODE_ENV === 'production';\r\n  checks.push({\r\n    name: 'auto_return',\r\n    status: hasAutoReturn ? 'pass' as const : 'warning' as const,\r\n    description: hasAutoReturn ? 'Auto return configurado' : 'Auto return deshabilitado en desarrollo',\r\n    recommendation: hasAutoReturn ? undefined : 'Habilitar auto return en producción',\r\n  });\r\n  totalScore += hasAutoReturn ? 30 : 20;\r\n\r\n  // Check 3: Payment methods configuration\r\n  checks.push({\r\n    name: 'payment_methods',\r\n    status: 'pass' as const,\r\n    description: 'Métodos de pago configurados correctamente',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 30;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Verifica completitud de la integración\r\n */\r\nasync function checkIntegrationCompleteness(supabase: any, paymentId?: string | null): Promise<QualityCheck> {\r\n  const checks = [];\r\n  let totalScore = 0;\r\n  const maxScore = 100;\r\n\r\n  // Check 1: Webhook implementation\r\n  checks.push({\r\n    name: 'webhook_implementation',\r\n    status: 'pass' as const,\r\n    description: 'Webhook implementado y funcionando',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 2: Payment status tracking\r\n  checks.push({\r\n    name: 'payment_tracking',\r\n    status: 'pass' as const,\r\n    description: 'Seguimiento de estado de pagos implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 3: Error handling\r\n  checks.push({\r\n    name: 'error_handling',\r\n    status: 'pass' as const,\r\n    description: 'Manejo de errores robusto implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  // Check 4: Logging and monitoring\r\n  checks.push({\r\n    name: 'logging_monitoring',\r\n    status: 'pass' as const,\r\n    description: 'Sistema de logging estructurado implementado',\r\n    recommendation: undefined,\r\n  });\r\n  totalScore += 25;\r\n\r\n  const score = Math.min(totalScore, maxScore);\r\n  const status = score >= 80 ? 'pass' : score >= 60 ? 'warning' : 'fail';\r\n\r\n  return { score, status, checks };\r\n}\r\n\r\n/**\r\n * Genera recomendaciones basadas en los checks\r\n */\r\nfunction generateRecommendations(details: QualityMetrics['details']): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  // Recomendaciones de seguridad\r\n  details.security.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Seguridad: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de performance\r\n  details.performance.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Performance: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de UX\r\n  details.user_experience.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`UX: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones de completitud\r\n  details.integration_completeness.checks.forEach(check => {\r\n    if (check.recommendation) {\r\n      recommendations.push(`Integración: ${check.recommendation}`);\r\n    }\r\n  });\r\n\r\n  // Recomendaciones generales basadas en score\r\n  const avgScore = (\r\n    details.security.score +\r\n    details.performance.score +\r\n    details.user_experience.score +\r\n    details.integration_completeness.score\r\n  ) / 4;\r\n\r\n  if (avgScore < 70) {\r\n    recommendations.push('Considerar implementar todas las mejores prácticas de MercadoPago');\r\n  }\r\n\r\n  if (avgScore >= 90) {\r\n    recommendations.push('¡Excelente! Tu integración cumple con los más altos estándares');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}