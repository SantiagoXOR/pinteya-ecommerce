27687c284ea5743cb43521e3877a05f6
"use strict";

/* istanbul ignore next */
function cov_1ef4jj0v7m() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\supabase\\supabase-adapter.ts";
  var hash = "d9848d7b17fa39239f7e7d997a320ffe4793aebd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\supabase\\supabase-adapter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 52
        }
      },
      "4": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "5": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 21,
          column: 6
        }
      },
      "6": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 320,
          column: 6
        }
      },
      "7": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "8": {
        start: {
          line: 25,
          column: 36
        },
        end: {
          line: 31,
          column: 32
        }
      },
      "9": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "10": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 75
        }
      },
      "11": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 73
        }
      },
      "12": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 70
        }
      },
      "13": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "14": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 57
        }
      },
      "15": {
        start: {
          line: 47,
          column: 36
        },
        end: {
          line: 47,
          column: 98
        }
      },
      "16": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "17": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 72
        }
      },
      "18": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 28
        }
      },
      "19": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 67
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "21": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 67
        }
      },
      "22": {
        start: {
          line: 63,
          column: 36
        },
        end: {
          line: 63,
          column: 104
        }
      },
      "23": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "24": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 79
        }
      },
      "25": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 28
        }
      },
      "26": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 74
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "29": {
        start: {
          line: 82,
          column: 36
        },
        end: {
          line: 90,
          column: 87
        }
      },
      "30": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "31": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 81
        }
      },
      "32": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "33": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "34": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "35": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "36": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 79
        }
      },
      "37": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 76
        }
      },
      "38": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "39": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 62
        }
      },
      "40": {
        start: {
          line: 111,
          column: 36
        },
        end: {
          line: 116,
          column: 50
        }
      },
      "41": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "42": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 75
        }
      },
      "43": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 73
        }
      },
      "44": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 70
        }
      },
      "45": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "46": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 64
        }
      },
      "47": {
        start: {
          line: 132,
          column: 30
        },
        end: {
          line: 132,
          column: 84
        }
      },
      "48": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "49": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 75
        }
      },
      "50": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 73
        }
      },
      "51": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 63
        }
      },
      "52": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 66
        }
      },
      "53": {
        start: {
          line: 141,
          column: 36
        },
        end: {
          line: 154,
          column: 32
        }
      },
      "54": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "55": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 76
        }
      },
      "56": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 75
        }
      },
      "57": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 71
        }
      },
      "58": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "59": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "60": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 180,
          column: 138
        }
      },
      "61": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "62": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 78
        }
      },
      "63": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 77
        }
      },
      "64": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 66
        }
      },
      "65": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 15
        }
      },
      "66": {
        start: {
          line: 193,
          column: 36
        },
        end: {
          line: 198,
          column: 32
        }
      },
      "67": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "68": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 78
        }
      },
      "69": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 76
        }
      },
      "70": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 73
        }
      },
      "71": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "72": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 77
        }
      },
      "73": {
        start: {
          line: 213,
          column: 36
        },
        end: {
          line: 222,
          column: 52
        }
      },
      "74": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 226,
          column: 13
        }
      },
      "75": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 82
        }
      },
      "76": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 28
        }
      },
      "77": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "78": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 81
        }
      },
      "79": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 28
        }
      },
      "80": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 79
        }
      },
      "81": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "82": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "83": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 256,
          column: 15
        }
      },
      "84": {
        start: {
          line: 257,
          column: 36
        },
        end: {
          line: 259,
          column: 65
        }
      },
      "85": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "86": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 78
        }
      },
      "87": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 76
        }
      },
      "88": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 73
        }
      },
      "89": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 270,
          column: 14
        }
      },
      "90": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 73
        }
      },
      "91": {
        start: {
          line: 274,
          column: 30
        },
        end: {
          line: 274,
          column: 103
        }
      },
      "92": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "93": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 78
        }
      },
      "94": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 76
        }
      },
      "95": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 66
        }
      },
      "96": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "97": {
        start: {
          line: 287,
          column: 36
        },
        end: {
          line: 291,
          column: 32
        }
      },
      "98": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "99": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 88
        }
      },
      "100": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 87
        }
      },
      "101": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 83
        }
      },
      "102": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 301,
          column: 14
        }
      },
      "103": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "104": {
        start: {
          line: 308,
          column: 36
        },
        end: {
          line: 308,
          column: 153
        }
      },
      "105": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "106": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 85
        }
      },
      "107": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 28
        }
      },
      "108": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 80
        }
      },
      "109": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 318,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "SupabaseAdapter",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 321,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        loc: {
          start: {
            line: 23,
            column: 32
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        loc: {
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 60,
            column: 9
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        loc: {
          start: {
            line: 61,
            column: 37
          },
          end: {
            line: 76,
            column: 9
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        loc: {
          start: {
            line: 77,
            column: 65
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        loc: {
          start: {
            line: 109,
            column: 32
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 109
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        loc: {
          start: {
            line: 130,
            column: 34
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 130
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        loc: {
          start: {
            line: 139,
            column: 36
          },
          end: {
            line: 174,
            column: 9
          }
        },
        line: 139
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        loc: {
          start: {
            line: 175,
            column: 62
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 175
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        loc: {
          start: {
            line: 187,
            column: 64
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 187
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        loc: {
          start: {
            line: 211,
            column: 47
          },
          end: {
            line: 251,
            column: 9
          }
        },
        line: 211
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        loc: {
          start: {
            line: 252,
            column: 59
          },
          end: {
            line: 271,
            column: 9
          }
        },
        line: 252
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        loc: {
          start: {
            line: 272,
            column: 43
          },
          end: {
            line: 280,
            column: 9
          }
        },
        line: 272
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        loc: {
          start: {
            line: 281,
            column: 71
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 281
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 303,
            column: 9
          }
        },
        loc: {
          start: {
            line: 303,
            column: 59
          },
          end: {
            line: 319,
            column: 9
          }
        },
        line: 303
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 52
          },
          end: {
            line: 41,
            column: 80
          }
        }, {
          start: {
            line: 41,
            column: 83
          },
          end: {
            line: 41,
            column: 87
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 52
          },
          end: {
            line: 57,
            column: 80
          }
        }, {
          start: {
            line: 57,
            column: 83
          },
          end: {
            line: 57,
            column: 87
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 31
          },
          end: {
            line: 73,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 52
          },
          end: {
            line: 73,
            column: 80
          }
        }, {
          start: {
            line: 73,
            column: 83
          },
          end: {
            line: 73,
            column: 87
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 99,
            column: 66
          }
        }, {
          start: {
            line: 99,
            column: 69
          },
          end: {
            line: 99,
            column: 79
          }
        }],
        line: 99
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 105,
            column: 80
          }
        }, {
          start: {
            line: 105,
            column: 83
          },
          end: {
            line: 105,
            column: 87
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 126,
            column: 31
          },
          end: {
            line: 126,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 52
          },
          end: {
            line: 126,
            column: 80
          }
        }, {
          start: {
            line: 126,
            column: 83
          },
          end: {
            line: 126,
            column: 87
          }
        }],
        line: 126
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "15": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "16": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 226,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 230,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "18": {
        loc: {
          start: {
            line: 231,
            column: 25
          },
          end: {
            line: 231,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 53
          },
          end: {
            line: 231,
            column: 66
          }
        }, {
          start: {
            line: 231,
            column: 69
          },
          end: {
            line: 231,
            column: 79
          }
        }],
        line: 231
      },
      "19": {
        loc: {
          start: {
            line: 247,
            column: 35
          },
          end: {
            line: 247,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 56
          },
          end: {
            line: 247,
            column: 84
          }
        }, {
          start: {
            line: 247,
            column: 87
          },
          end: {
            line: 247,
            column: 91
          }
        }],
        line: 247
      },
      "20": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "21": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "22": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "23": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\supabase\\supabase-adapter.ts"],
      sourcesContent: ["import { createClient } from '@supabase/supabase-js'\r\nimport type { Adapter, AdapterUser, AdapterAccount, AdapterSession, VerificationToken } from '@auth/core/adapters'\r\n\r\nexport interface SupabaseAdapterClientOptions {\r\n  url: string\r\n  secret: string\r\n}\r\n\r\nexport function SupabaseAdapter(options: SupabaseAdapterClientOptions): Adapter {\r\n  const { url, secret } = options\r\n  const supabase = createClient(url, secret, {\r\n    db: { schema: 'public' },\r\n    auth: { persistSession: false }\r\n  })\r\n\r\n  return {\r\n    async createUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] createUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createUser error:', error)\r\n        throw new Error(`Error creating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUser(id) {\r\n      console.log('[CUSTOM_ADAPTER] getUser:', id)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUser error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByEmail(email) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail:', email)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByEmail error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount:', { providerAccountId, provider })\r\n      \r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .select(`\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByAccount error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getUserByAccount: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount success:', user)\r\n      \r\n      return {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n        image: user.image,\r\n      }\r\n    },\r\n\r\n    async updateUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] updateUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .update({\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateUser error:', error)\r\n        throw new Error(`Error updating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async deleteUser(userId) {\r\n      console.log('[CUSTOM_ADAPTER] deleteUser:', userId)\r\n      const { error } = await supabase\r\n        .from('users')\r\n        .delete()\r\n        .eq('id', userId)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteUser error:', error)\r\n        throw new Error(`Error deleting user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteUser success')\r\n    },\r\n\r\n    async linkAccount(account) {\r\n      console.log('[CUSTOM_ADAPTER] linkAccount:', account)\r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          userId: account.userId,\r\n          type: account.type,\r\n          provider: account.provider,\r\n          providerAccountId: account.providerAccountId,\r\n          refresh_token: account.refresh_token,\r\n          access_token: account.access_token,\r\n          expires_at: account.expires_at,\r\n          token_type: account.token_type,\r\n          scope: account.scope,\r\n          id_token: account.id_token,\r\n          session_state: account.session_state,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] linkAccount error:', error)\r\n        throw new Error(`Error linking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] linkAccount success:', data)\r\n      return {\r\n        id: data.id,\r\n        userId: data.userId,\r\n        type: data.type,\r\n        provider: data.provider,\r\n        providerAccountId: data.providerAccountId,\r\n        refresh_token: data.refresh_token,\r\n        access_token: data.access_token,\r\n        expires_at: data.expires_at,\r\n        token_type: data.token_type,\r\n        scope: data.scope,\r\n        id_token: data.id_token,\r\n        session_state: data.session_state,\r\n      }\r\n    },\r\n\r\n    async unlinkAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount:', { providerAccountId, provider })\r\n      const { error } = await supabase\r\n        .from('accounts')\r\n        .delete()\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] unlinkAccount error:', error)\r\n        throw new Error(`Error unlinking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount success')\r\n    },\r\n\r\n    async createSession({ sessionToken, userId, expires }) {\r\n      console.log('[CUSTOM_ADAPTER] createSession:', { sessionToken, userId, expires })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          sessionToken,\r\n          userId,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createSession error:', error)\r\n        throw new Error(`Error creating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async getSessionAndUser(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser:', sessionToken)\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .select(`\r\n          *,\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('sessionToken', sessionToken)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getSessionAndUser error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getSessionAndUser: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser success:', { session: data, user })\r\n      \r\n      return {\r\n        session: {\r\n          id: data.id,\r\n          sessionToken: data.sessionToken,\r\n          userId: data.userId,\r\n          expires: new Date(data.expires),\r\n        },\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n          image: user.image,\r\n        },\r\n      }\r\n    },\r\n\r\n    async updateSession({ sessionToken, ...session }) {\r\n      console.log('[CUSTOM_ADAPTER] updateSession:', { sessionToken, session })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update({\r\n          expires: session.expires?.toISOString(),\r\n        })\r\n        .eq('sessionToken', sessionToken)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateSession error:', error)\r\n        throw new Error(`Error updating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async deleteSession(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] deleteSession:', sessionToken)\r\n      const { error } = await supabase\r\n        .from('sessions')\r\n        .delete()\r\n        .eq('sessionToken', sessionToken)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteSession error:', error)\r\n        throw new Error(`Error deleting session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteSession success')\r\n    },\r\n\r\n    async createVerificationToken({ identifier, expires, token }) {\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken:', { identifier, expires, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .insert({\r\n          identifier,\r\n          token,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createVerificationToken error:', error)\r\n        throw new Error(`Error creating verification token: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async useVerificationToken({ identifier, token }) {\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken:', { identifier, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .delete()\r\n        .eq('identifier', identifier)\r\n        .eq('token', token)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] useVerificationToken error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["SupabaseAdapter", "options", "url", "secret", "supabase", "createClient", "db", "schema", "auth", "persistSession", "createUser", "user", "console", "log", "data", "error", "from", "insert", "id", "crypto", "randomUUID", "name", "email", "emailVerified", "toISOString", "image", "select", "single", "Error", "message", "Date", "getUser", "eq", "getUserByEmail", "getUserByAccount", "providerAccountId", "provider", "users", "Array", "isArray", "updateUser", "update", "deleteUser", "userId", "delete", "linkAccount", "account", "type", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "unlinkAccount", "createSession", "sessionToken", "expires", "getSessionAndUser", "session", "updateSession", "deleteSession", "createVerificationToken", "identifier", "token", "useVerificationToken"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d9848d7b17fa39239f7e7d997a320ffe4793aebd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ef4jj0v7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ef4jj0v7m();
cov_1ef4jj0v7m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ef4jj0v7m().s[1]++;
Object.defineProperty(exports, "SupabaseAdapter", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ef4jj0v7m().f[0]++;
    cov_1ef4jj0v7m().s[2]++;
    return SupabaseAdapter;
  }
});
const _supabasejs =
/* istanbul ignore next */
(cov_1ef4jj0v7m().s[3]++, require("@supabase/supabase-js"));
function SupabaseAdapter(options) {
  /* istanbul ignore next */
  cov_1ef4jj0v7m().f[1]++;
  const {
    url,
    secret
  } =
  /* istanbul ignore next */
  (cov_1ef4jj0v7m().s[4]++, options);
  const supabase =
  /* istanbul ignore next */
  (cov_1ef4jj0v7m().s[5]++, (0, _supabasejs.createClient)(url, secret, {
    db: {
      schema: 'public'
    },
    auth: {
      persistSession: false
    }
  }));
  /* istanbul ignore next */
  cov_1ef4jj0v7m().s[6]++;
  return {
    async createUser(user) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[2]++;
      cov_1ef4jj0v7m().s[7]++;
      console.log('[CUSTOM_ADAPTER] createUser:', user);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[8]++, await supabase.from('users').insert({
        id: crypto.randomUUID(),
        name: user.name,
        email: user.email,
        emailVerified: user.emailVerified?.toISOString(),
        image: user.image
      }).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[9]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[0][0]++;
        cov_1ef4jj0v7m().s[10]++;
        console.error('[CUSTOM_ADAPTER] createUser error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[11]++;
        throw new Error(`Error creating user: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[0][1]++;
      }
      cov_1ef4jj0v7m().s[12]++;
      console.log('[CUSTOM_ADAPTER] createUser success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[13]++;
      return {
        id: data.id,
        name: data.name,
        email: data.email,
        emailVerified: data.emailVerified ?
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[1][0]++, new Date(data.emailVerified)) :
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[1][1]++, null),
        image: data.image
      };
    },
    async getUser(id) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[3]++;
      cov_1ef4jj0v7m().s[14]++;
      console.log('[CUSTOM_ADAPTER] getUser:', id);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[15]++, await supabase.from('users').select('*').eq('id', id).single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[16]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[2][0]++;
        cov_1ef4jj0v7m().s[17]++;
        console.error('[CUSTOM_ADAPTER] getUser error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[18]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[2][1]++;
      }
      cov_1ef4jj0v7m().s[19]++;
      console.log('[CUSTOM_ADAPTER] getUser success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[20]++;
      return {
        id: data.id,
        name: data.name,
        email: data.email,
        emailVerified: data.emailVerified ?
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[3][0]++, new Date(data.emailVerified)) :
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[3][1]++, null),
        image: data.image
      };
    },
    async getUserByEmail(email) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[4]++;
      cov_1ef4jj0v7m().s[21]++;
      console.log('[CUSTOM_ADAPTER] getUserByEmail:', email);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[22]++, await supabase.from('users').select('*').eq('email', email).single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[23]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[4][0]++;
        cov_1ef4jj0v7m().s[24]++;
        console.error('[CUSTOM_ADAPTER] getUserByEmail error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[25]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[4][1]++;
      }
      cov_1ef4jj0v7m().s[26]++;
      console.log('[CUSTOM_ADAPTER] getUserByEmail success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[27]++;
      return {
        id: data.id,
        name: data.name,
        email: data.email,
        emailVerified: data.emailVerified ?
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[5][0]++, new Date(data.emailVerified)) :
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[5][1]++, null),
        image: data.image
      };
    },
    async getUserByAccount({
      providerAccountId,
      provider
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[5]++;
      cov_1ef4jj0v7m().s[28]++;
      console.log('[CUSTOM_ADAPTER] getUserByAccount:', {
        providerAccountId,
        provider
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[29]++, await supabase.from('accounts').select(`
          users (
            id,
            name,
            email,
            emailVerified,
            image
          )
        `).eq('providerAccountId', providerAccountId).eq('provider', provider).single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[30]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[6][0]++;
        cov_1ef4jj0v7m().s[31]++;
        console.error('[CUSTOM_ADAPTER] getUserByAccount error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[32]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[6][1]++;
      }
      cov_1ef4jj0v7m().s[33]++;
      if (!data?.users) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[7][0]++;
        cov_1ef4jj0v7m().s[34]++;
        console.log('[CUSTOM_ADAPTER] getUserByAccount: no user found');
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[35]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[7][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[36]++, Array.isArray(data.users) ?
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().b[8][0]++, data.users[0]) :
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().b[8][1]++, data.users));
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[37]++;
      console.log('[CUSTOM_ADAPTER] getUserByAccount success:', user);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[38]++;
      return {
        id: user.id,
        name: user.name,
        email: user.email,
        emailVerified: user.emailVerified ?
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[9][0]++, new Date(user.emailVerified)) :
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[9][1]++, null),
        image: user.image
      };
    },
    async updateUser(user) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[6]++;
      cov_1ef4jj0v7m().s[39]++;
      console.log('[CUSTOM_ADAPTER] updateUser:', user);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[40]++, await supabase.from('users').update({
        name: user.name,
        email: user.email,
        emailVerified: user.emailVerified?.toISOString(),
        image: user.image
      }).eq('id', user.id).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[41]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[10][0]++;
        cov_1ef4jj0v7m().s[42]++;
        console.error('[CUSTOM_ADAPTER] updateUser error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[43]++;
        throw new Error(`Error updating user: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[10][1]++;
      }
      cov_1ef4jj0v7m().s[44]++;
      console.log('[CUSTOM_ADAPTER] updateUser success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[45]++;
      return {
        id: data.id,
        name: data.name,
        email: data.email,
        emailVerified: data.emailVerified ?
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[11][0]++, new Date(data.emailVerified)) :
        /* istanbul ignore next */
        (cov_1ef4jj0v7m().b[11][1]++, null),
        image: data.image
      };
    },
    async deleteUser(userId) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[7]++;
      cov_1ef4jj0v7m().s[46]++;
      console.log('[CUSTOM_ADAPTER] deleteUser:', userId);
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[47]++, await supabase.from('users').delete().eq('id', userId));
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[48]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[12][0]++;
        cov_1ef4jj0v7m().s[49]++;
        console.error('[CUSTOM_ADAPTER] deleteUser error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[50]++;
        throw new Error(`Error deleting user: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[12][1]++;
      }
      cov_1ef4jj0v7m().s[51]++;
      console.log('[CUSTOM_ADAPTER] deleteUser success');
    },
    async linkAccount(account) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[8]++;
      cov_1ef4jj0v7m().s[52]++;
      console.log('[CUSTOM_ADAPTER] linkAccount:', account);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[53]++, await supabase.from('accounts').insert({
        id: crypto.randomUUID(),
        userId: account.userId,
        type: account.type,
        provider: account.provider,
        providerAccountId: account.providerAccountId,
        refresh_token: account.refresh_token,
        access_token: account.access_token,
        expires_at: account.expires_at,
        token_type: account.token_type,
        scope: account.scope,
        id_token: account.id_token,
        session_state: account.session_state
      }).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[54]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[13][0]++;
        cov_1ef4jj0v7m().s[55]++;
        console.error('[CUSTOM_ADAPTER] linkAccount error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[56]++;
        throw new Error(`Error linking account: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[13][1]++;
      }
      cov_1ef4jj0v7m().s[57]++;
      console.log('[CUSTOM_ADAPTER] linkAccount success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[58]++;
      return {
        id: data.id,
        userId: data.userId,
        type: data.type,
        provider: data.provider,
        providerAccountId: data.providerAccountId,
        refresh_token: data.refresh_token,
        access_token: data.access_token,
        expires_at: data.expires_at,
        token_type: data.token_type,
        scope: data.scope,
        id_token: data.id_token,
        session_state: data.session_state
      };
    },
    async unlinkAccount({
      providerAccountId,
      provider
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[9]++;
      cov_1ef4jj0v7m().s[59]++;
      console.log('[CUSTOM_ADAPTER] unlinkAccount:', {
        providerAccountId,
        provider
      });
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[60]++, await supabase.from('accounts').delete().eq('providerAccountId', providerAccountId).eq('provider', provider));
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[61]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[14][0]++;
        cov_1ef4jj0v7m().s[62]++;
        console.error('[CUSTOM_ADAPTER] unlinkAccount error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[63]++;
        throw new Error(`Error unlinking account: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[14][1]++;
      }
      cov_1ef4jj0v7m().s[64]++;
      console.log('[CUSTOM_ADAPTER] unlinkAccount success');
    },
    async createSession({
      sessionToken,
      userId,
      expires
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[10]++;
      cov_1ef4jj0v7m().s[65]++;
      console.log('[CUSTOM_ADAPTER] createSession:', {
        sessionToken,
        userId,
        expires
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[66]++, await supabase.from('sessions').insert({
        id: crypto.randomUUID(),
        sessionToken,
        userId,
        expires: expires.toISOString()
      }).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[67]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[15][0]++;
        cov_1ef4jj0v7m().s[68]++;
        console.error('[CUSTOM_ADAPTER] createSession error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[69]++;
        throw new Error(`Error creating session: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[15][1]++;
      }
      cov_1ef4jj0v7m().s[70]++;
      console.log('[CUSTOM_ADAPTER] createSession success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[71]++;
      return {
        id: data.id,
        sessionToken: data.sessionToken,
        userId: data.userId,
        expires: new Date(data.expires)
      };
    },
    async getSessionAndUser(sessionToken) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[11]++;
      cov_1ef4jj0v7m().s[72]++;
      console.log('[CUSTOM_ADAPTER] getSessionAndUser:', sessionToken);
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[73]++, await supabase.from('sessions').select(`
          *,
          users (
            id,
            name,
            email,
            emailVerified,
            image
          )
        `).eq('sessionToken', sessionToken).single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[74]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[16][0]++;
        cov_1ef4jj0v7m().s[75]++;
        console.error('[CUSTOM_ADAPTER] getSessionAndUser error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[76]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[16][1]++;
      }
      cov_1ef4jj0v7m().s[77]++;
      if (!data?.users) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[17][0]++;
        cov_1ef4jj0v7m().s[78]++;
        console.log('[CUSTOM_ADAPTER] getSessionAndUser: no user found');
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[79]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[17][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[80]++, Array.isArray(data.users) ?
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().b[18][0]++, data.users[0]) :
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().b[18][1]++, data.users));
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[81]++;
      console.log('[CUSTOM_ADAPTER] getSessionAndUser success:', {
        session: data,
        user
      });
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[82]++;
      return {
        session: {
          id: data.id,
          sessionToken: data.sessionToken,
          userId: data.userId,
          expires: new Date(data.expires)
        },
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          emailVerified: user.emailVerified ?
          /* istanbul ignore next */
          (cov_1ef4jj0v7m().b[19][0]++, new Date(user.emailVerified)) :
          /* istanbul ignore next */
          (cov_1ef4jj0v7m().b[19][1]++, null),
          image: user.image
        }
      };
    },
    async updateSession({
      sessionToken,
      ...session
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[12]++;
      cov_1ef4jj0v7m().s[83]++;
      console.log('[CUSTOM_ADAPTER] updateSession:', {
        sessionToken,
        session
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[84]++, await supabase.from('sessions').update({
        expires: session.expires?.toISOString()
      }).eq('sessionToken', sessionToken).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[85]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[20][0]++;
        cov_1ef4jj0v7m().s[86]++;
        console.error('[CUSTOM_ADAPTER] updateSession error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[87]++;
        throw new Error(`Error updating session: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[20][1]++;
      }
      cov_1ef4jj0v7m().s[88]++;
      console.log('[CUSTOM_ADAPTER] updateSession success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[89]++;
      return {
        id: data.id,
        sessionToken: data.sessionToken,
        userId: data.userId,
        expires: new Date(data.expires)
      };
    },
    async deleteSession(sessionToken) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[13]++;
      cov_1ef4jj0v7m().s[90]++;
      console.log('[CUSTOM_ADAPTER] deleteSession:', sessionToken);
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[91]++, await supabase.from('sessions').delete().eq('sessionToken', sessionToken));
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[92]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[21][0]++;
        cov_1ef4jj0v7m().s[93]++;
        console.error('[CUSTOM_ADAPTER] deleteSession error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[94]++;
        throw new Error(`Error deleting session: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[21][1]++;
      }
      cov_1ef4jj0v7m().s[95]++;
      console.log('[CUSTOM_ADAPTER] deleteSession success');
    },
    async createVerificationToken({
      identifier,
      expires,
      token
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[14]++;
      cov_1ef4jj0v7m().s[96]++;
      console.log('[CUSTOM_ADAPTER] createVerificationToken:', {
        identifier,
        expires,
        token
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[97]++, await supabase.from('verification_tokens').insert({
        identifier,
        token,
        expires: expires.toISOString()
      }).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[98]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[22][0]++;
        cov_1ef4jj0v7m().s[99]++;
        console.error('[CUSTOM_ADAPTER] createVerificationToken error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[100]++;
        throw new Error(`Error creating verification token: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[22][1]++;
      }
      cov_1ef4jj0v7m().s[101]++;
      console.log('[CUSTOM_ADAPTER] createVerificationToken success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[102]++;
      return {
        identifier: data.identifier,
        token: data.token,
        expires: new Date(data.expires)
      };
    },
    async useVerificationToken({
      identifier,
      token
    }) {
      /* istanbul ignore next */
      cov_1ef4jj0v7m().f[15]++;
      cov_1ef4jj0v7m().s[103]++;
      console.log('[CUSTOM_ADAPTER] useVerificationToken:', {
        identifier,
        token
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1ef4jj0v7m().s[104]++, await supabase.from('verification_tokens').delete().eq('identifier', identifier).eq('token', token).select().single());
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[105]++;
      if (error) {
        /* istanbul ignore next */
        cov_1ef4jj0v7m().b[23][0]++;
        cov_1ef4jj0v7m().s[106]++;
        console.error('[CUSTOM_ADAPTER] useVerificationToken error:', error);
        /* istanbul ignore next */
        cov_1ef4jj0v7m().s[107]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1ef4jj0v7m().b[23][1]++;
      }
      cov_1ef4jj0v7m().s[108]++;
      console.log('[CUSTOM_ADAPTER] useVerificationToken success:', data);
      /* istanbul ignore next */
      cov_1ef4jj0v7m().s[109]++;
      return {
        identifier: data.identifier,
        token: data.token,
        expires: new Date(data.expires)
      };
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,