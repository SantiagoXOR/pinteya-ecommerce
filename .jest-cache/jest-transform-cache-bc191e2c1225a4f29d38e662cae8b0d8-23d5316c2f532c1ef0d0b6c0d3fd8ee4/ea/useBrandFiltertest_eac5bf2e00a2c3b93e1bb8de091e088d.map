{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useBrandFilter.test.ts"],"sourcesContent":["// ===================================\n// TESTS: Hook useBrandFilter\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { useBrandFilter, useSimpleBrandFilter } from '@/hooks/useBrandFilter'\n\n// Mock de la API de marcas\njest.mock('@/lib/api/brands', () => ({\n  getBrands: jest.fn(() =>\n    Promise.resolve({\n      success: true,\n      data: [\n        { name: 'El Galgo', products_count: 5 },\n        { name: 'Plavicon', products_count: 8 },\n        { name: 'Akapol', products_count: 3 },\n        { name: 'Sinteplast', products_count: 2 },\n      ],\n    })\n  ),\n}))\n\n// Mock de Next.js router\nconst mockPush = jest.fn()\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n  }),\n  useSearchParams: () => ({\n    get: jest.fn(() => null),\n    toString: jest.fn(() => ''),\n  }),\n}))\n\ndescribe('useBrandFilter Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Funcionalidad básica', () => {\n    it('debería cargar marcas automáticamente', async () => {\n      const { result } = renderHook(() => useBrandFilter())\n\n      expect(result.current.isLoading).toBe(true)\n      expect(result.current.brands).toEqual([])\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      expect(result.current.brands).toHaveLength(4)\n      expect(result.current.brands[0]).toEqual({\n        name: 'El Galgo',\n        products_count: 5,\n      })\n    })\n\n    it('debería permitir deshabilitar carga automática', () => {\n      const { result } = renderHook(() => useBrandFilter({ autoLoad: false }))\n\n      expect(result.current.isLoading).toBe(false)\n      expect(result.current.brands).toEqual([])\n    })\n\n    it('debería manejar selección de marcas', async () => {\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      act(() => {\n        result.current.setSelectedBrands(['El Galgo', 'Plavicon'])\n      })\n\n      expect(result.current.selectedBrands).toEqual(['El Galgo', 'Plavicon'])\n    })\n\n    it('debería alternar marcas correctamente', async () => {\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      // Agregar marca\n      act(() => {\n        result.current.toggleBrand('El Galgo')\n      })\n\n      expect(result.current.selectedBrands).toEqual(['El Galgo'])\n\n      // Quitar marca\n      act(() => {\n        result.current.toggleBrand('El Galgo')\n      })\n\n      expect(result.current.selectedBrands).toEqual([])\n\n      // Agregar múltiples marcas\n      act(() => {\n        result.current.toggleBrand('El Galgo')\n      })\n      act(() => {\n        result.current.toggleBrand('Plavicon')\n      })\n\n      expect(result.current.selectedBrands).toEqual(['El Galgo', 'Plavicon'])\n    })\n\n    it('debería limpiar todas las marcas', async () => {\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      act(() => {\n        result.current.setSelectedBrands(['El Galgo', 'Plavicon', 'Akapol'])\n      })\n\n      expect(result.current.selectedBrands).toHaveLength(3)\n\n      act(() => {\n        result.current.clearBrands()\n      })\n\n      expect(result.current.selectedBrands).toEqual([])\n    })\n  })\n\n  describe('Manejo de errores', () => {\n    it('debería manejar errores de API', async () => {\n      const mockGetBrands = require('@/lib/api/brands').getBrands\n      mockGetBrands.mockRejectedValueOnce(new Error('Error de red'))\n\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      expect(result.current.error).toBe('Error de red')\n      expect(result.current.brands).toEqual([])\n    })\n\n    it('debería manejar respuesta de API sin éxito', async () => {\n      const mockGetBrands = require('@/lib/api/brands').getBrands\n      mockGetBrands.mockResolvedValueOnce({\n        success: false,\n        error: 'Error del servidor',\n      })\n\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      expect(result.current.error).toBe('Error del servidor')\n      expect(result.current.brands).toEqual([])\n    })\n  })\n\n  describe('Búsqueda de marcas', () => {\n    it('debería buscar marcas', async () => {\n      const mockGetBrands = require('@/lib/api/brands').getBrands\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      // Mock respuesta de búsqueda\n      mockGetBrands.mockResolvedValueOnce({\n        success: true,\n        data: [{ name: 'El Galgo', products_count: 5 }],\n      })\n\n      act(() => {\n        result.current.searchBrands('galgo')\n      })\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      expect(mockGetBrands).toHaveBeenCalledWith({\n        search: 'galgo',\n        minProducts: 1,\n      })\n    })\n  })\n\n  describe('Refetch', () => {\n    it('debería recargar marcas', async () => {\n      const mockGetBrands = require('@/lib/api/brands').getBrands\n      const { result } = renderHook(() => useBrandFilter())\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      // Limpiar llamadas anteriores\n      mockGetBrands.mockClear()\n\n      act(() => {\n        result.current.refetch()\n      })\n\n      expect(result.current.isLoading).toBe(true)\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      expect(mockGetBrands).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe('Callback onBrandsChange', () => {\n    it('debería llamar callback cuando cambian las marcas', async () => {\n      const onBrandsChange = jest.fn()\n      const { result } = renderHook(() => useBrandFilter({ onBrandsChange }))\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false)\n      })\n\n      act(() => {\n        result.current.setSelectedBrands(['El Galgo'])\n      })\n\n      expect(onBrandsChange).toHaveBeenCalledWith(['El Galgo'])\n\n      act(() => {\n        result.current.toggleBrand('Plavicon')\n      })\n\n      expect(onBrandsChange).toHaveBeenCalledWith(['El Galgo', 'Plavicon'])\n    })\n  })\n\n  describe('Configuración de minProducts', () => {\n    it('debería usar minProducts en las consultas', async () => {\n      const mockGetBrands = require('@/lib/api/brands').getBrands\n\n      renderHook(() => useBrandFilter({ minProducts: 5 }))\n\n      await waitFor(() => {\n        expect(mockGetBrands).toHaveBeenCalledWith({ minProducts: 5 })\n      })\n    })\n  })\n})\n\ndescribe('useSimpleBrandFilter Hook', () => {\n  it('debería manejar selección simple de marcas', () => {\n    const { result } = renderHook(() => useSimpleBrandFilter())\n\n    expect(result.current.selectedBrands).toEqual([])\n\n    act(() => {\n      result.current.setSelectedBrands(['El Galgo'])\n    })\n\n    expect(result.current.selectedBrands).toEqual(['El Galgo'])\n  })\n\n  it('debería alternar marcas', () => {\n    const { result } = renderHook(() => useSimpleBrandFilter())\n\n    act(() => {\n      result.current.toggleBrand('El Galgo')\n    })\n\n    expect(result.current.selectedBrands).toEqual(['El Galgo'])\n\n    act(() => {\n      result.current.toggleBrand('El Galgo')\n    })\n\n    expect(result.current.selectedBrands).toEqual([])\n  })\n\n  it('debería limpiar marcas', () => {\n    const { result } = renderHook(() => useSimpleBrandFilter())\n\n    act(() => {\n      result.current.setSelectedBrands(['El Galgo', 'Plavicon'])\n    })\n\n    expect(result.current.selectedBrands).toHaveLength(2)\n\n    act(() => {\n      result.current.clearBrands()\n    })\n\n    expect(result.current.selectedBrands).toEqual([])\n  })\n})\n"],"names":["jest","mock","getBrands","fn","Promise","resolve","success","data","name","products_count","useRouter","push","mockPush","useSearchParams","get","toString","describe","beforeEach","clearAllMocks","it","result","renderHook","useBrandFilter","expect","current","isLoading","toBe","brands","toEqual","waitFor","toHaveLength","autoLoad","act","setSelectedBrands","selectedBrands","toggleBrand","clearBrands","mockGetBrands","require","mockRejectedValueOnce","Error","error","mockResolvedValueOnce","searchBrands","toHaveBeenCalledWith","search","minProducts","mockClear","refetch","toHaveBeenCalledTimes","onBrandsChange","useSimpleBrandFilter"],"mappings":"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"}