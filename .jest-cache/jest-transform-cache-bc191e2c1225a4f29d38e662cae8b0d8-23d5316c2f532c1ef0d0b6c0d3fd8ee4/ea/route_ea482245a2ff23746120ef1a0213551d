49827266dc52eb5e7344dc389d117f48
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_235stvaxnt() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts";
  var hash = "061e1fcf976530500005d64f431b29dec574e4c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "9": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 74
        }
      },
      "10": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 67
        }
      },
      "11": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 74
        }
      },
      "12": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "13": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "14": {
        start: {
          line: 33,
          column: 57
        },
        end: {
          line: 33,
          column: 173
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 85
        }
      },
      "17": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "18": {
        start: {
          line: 39,
          column: 33
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "19": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 37
        }
      },
      "20": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "21": {
        start: {
          line: 43,
          column: 41
        },
        end: {
          line: 43,
          column: 48
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "23": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "25": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 53
        }
      },
      "26": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "27": {
        start: {
          line: 60,
          column: 41
        },
        end: {
          line: 60,
          column: 59
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "29": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "30": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "31": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "32": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 76,
          column: 52
        }
      },
      "33": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "34": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 44
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "36": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "37": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 59
        }
      },
      "38": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 80
        }
      },
      "39": {
        start: {
          line: 92,
          column: 45
        },
        end: {
          line: 92,
          column: 62
        }
      },
      "40": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 77
        }
      },
      "41": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "42": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "43": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 133,
          column: 12
        }
      },
      "44": {
        start: {
          line: 126,
          column: 66
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "45": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 77
        }
      },
      "46": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 278,
          column: 6
        }
      },
      "47": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "48": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "49": {
        start: {
          line: 153,
          column: 37
        },
        end: {
          line: 153,
          column: 57
        }
      },
      "50": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 68
        }
      },
      "51": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 155,
          column: 66
        }
      },
      "52": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 156,
          column: 57
        }
      },
      "53": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "54": {
        start: {
          line: 162,
          column: 29
        },
        end: {
          line: 162,
          column: 63
        }
      },
      "55": {
        start: {
          line: 163,
          column: 35
        },
        end: {
          line: 163,
          column: 37
        }
      },
      "56": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "57": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 204,
          column: 17
        }
      },
      "58": {
        start: {
          line: 167,
          column: 38
        },
        end: {
          line: 167,
          column: 48
        }
      },
      "59": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "60": {
        start: {
          line: 170,
          column: 32
        },
        end: {
          line: 170,
          column: 213
        }
      },
      "61": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "62": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 74
        }
      },
      "63": {
        start: {
          line: 174,
          column: 59
        },
        end: {
          line: 174,
          column: 167
        }
      },
      "64": {
        start: {
          line: 174,
          column: 119
        },
        end: {
          line: 174,
          column: 130
        }
      },
      "65": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 201,
          column: 21
        }
      },
      "66": {
        start: {
          line: 177,
          column: 45
        },
        end: {
          line: 177,
          column: 54
        }
      },
      "67": {
        start: {
          line: 178,
          column: 49
        },
        end: {
          line: 178,
          column: 58
        }
      },
      "68": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 190,
          column: 27
        }
      },
      "69": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 189,
          column: 29
        }
      },
      "70": {
        start: {
          line: 181,
          column: 46
        },
        end: {
          line: 181,
          column: 78
        }
      },
      "71": {
        start: {
          line: 182,
          column: 32
        },
        end: {
          line: 188,
          column: 33
        }
      },
      "72": {
        start: {
          line: 183,
          column: 36
        },
        end: {
          line: 183,
          column: 96
        }
      },
      "73": {
        start: {
          line: 185,
          column: 36
        },
        end: {
          line: 187,
          column: 37
        }
      },
      "74": {
        start: {
          line: 186,
          column: 40
        },
        end: {
          line: 186,
          column: 93
        }
      },
      "75": {
        start: {
          line: 192,
          column: 47
        },
        end: {
          line: 192,
          column: 123
        }
      },
      "76": {
        start: {
          line: 192,
          column: 95
        },
        end: {
          line: 192,
          column: 106
        }
      },
      "77": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 200,
          column: 32
        }
      },
      "78": {
        start: {
          line: 193,
          column: 88
        },
        end: {
          line: 200,
          column: 29
        }
      },
      "79": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 112
        }
      },
      "80": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "81": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 89
        }
      },
      "82": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "83": {
        start: {
          line: 210,
          column: 44
        },
        end: {
          line: 210,
          column: 98
        }
      },
      "84": {
        start: {
          line: 212,
          column: 43
        },
        end: {
          line: 212,
          column: 58
        }
      },
      "85": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 215,
          column: 21
        }
      },
      "86": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 106
        }
      },
      "87": {
        start: {
          line: 214,
          column: 76
        },
        end: {
          line: 214,
          column: 104
        }
      },
      "88": {
        start: {
          line: 217,
          column: 35
        },
        end: {
          line: 217,
          column: 66
        }
      },
      "89": {
        start: {
          line: 218,
          column: 47
        },
        end: {
          line: 218,
          column: 80
        }
      },
      "90": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 222,
          column: 22
        }
      },
      "91": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 224,
          column: 97
        }
      },
      "92": {
        start: {
          line: 225,
          column: 45
        },
        end: {
          line: 225,
          column: 105
        }
      },
      "93": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 229,
          column: 22
        }
      },
      "94": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 64
        }
      },
      "95": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "96": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "97": {
        start: {
          line: 243,
          column: 56
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "98": {
        start: {
          line: 245,
          column: 57
        },
        end: {
          line: 245,
          column: 67
        }
      },
      "99": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 260,
          column: 15
        }
      },
      "100": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 55
        }
      },
      "101": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 69
        }
      },
      "102": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "103": {
        start: {
          line: 269,
          column: 37
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "104": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 63
        }
      },
      "105": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "106": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 284,
          column: 11
        }
      },
      "107": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 31
        }
      },
      "108": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 27
        }
      },
      "109": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 356,
          column: 5
        }
      },
      "110": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "111": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "112": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "113": {
        start: {
          line: 301,
          column: 25
        },
        end: {
          line: 301,
          column: 45
        }
      },
      "114": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "115": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "116": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "117": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 47
        }
      },
      "118": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 90
        }
      },
      "119": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "120": {
        start: {
          line: 321,
          column: 55
        },
        end: {
          line: 321,
          column: 66
        }
      },
      "121": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "122": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 327,
          column: 15
        }
      },
      "123": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 329,
          column: 59
        }
      },
      "124": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "125": {
        start: {
          line: 332,
          column: 30
        },
        end: {
          line: 341,
          column: 14
        }
      },
      "126": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 344,
          column: 21
        }
      },
      "127": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 81
        }
      },
      "128": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "129": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 62
        }
      },
      "130": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 355,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "generateDynamicTrendingSearches",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 46
          }
        },
        loc: {
          start: {
            line: 30,
            column: 68
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 36
          },
          end: {
            line: 43,
            column: 37
          }
        },
        loc: {
          start: {
            line: 43,
            column: 41
          },
          end: {
            line: 43,
            column: 48
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 35
          },
          end: {
            line: 45,
            column: 36
          }
        },
        loc: {
          start: {
            line: 45,
            column: 51
          },
          end: {
            line: 57,
            column: 9
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 36
          },
          end: {
            line: 60,
            column: 37
          }
        },
        loc: {
          start: {
            line: 60,
            column: 41
          },
          end: {
            line: 60,
            column: 59
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 62,
            column: 40
          }
        },
        loc: {
          start: {
            line: 62,
            column: 58
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 62
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 77,
            column: 32
          },
          end: {
            line: 77,
            column: 33
          }
        },
        loc: {
          start: {
            line: 77,
            column: 50
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 77
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 92,
            column: 37
          },
          end: {
            line: 92,
            column: 38
          }
        },
        loc: {
          start: {
            line: 92,
            column: 45
          },
          end: {
            line: 92,
            column: 62
          }
        },
        line: 92
      },
      "11": {
        name: "getFallbackTrendingSearches",
        decl: {
          start: {
            line: 99,
            column: 9
          },
          end: {
            line: 99,
            column: 36
          }
        },
        loc: {
          start: {
            line: 99,
            column: 48
          },
          end: {
            line: 134,
            column: 1
          }
        },
        line: 99
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 126,
            column: 48
          },
          end: {
            line: 126,
            column: 49
          }
        },
        loc: {
          start: {
            line: 126,
            column: 66
          },
          end: {
            line: 133,
            column: 9
          }
        },
        line: 126
      },
      "13": {
        name: "GET",
        decl: {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 135,
            column: 18
          }
        },
        loc: {
          start: {
            line: 135,
            column: 28
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 135
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 115
          },
          end: {
            line: 139,
            column: 116
          }
        },
        loc: {
          start: {
            line: 139,
            column: 125
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 174,
            column: 103
          },
          end: {
            line: 174,
            column: 104
          }
        },
        loc: {
          start: {
            line: 174,
            column: 119
          },
          end: {
            line: 174,
            column: 130
          }
        },
        line: 174
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 179,
            column: 46
          },
          end: {
            line: 179,
            column: 47
          }
        },
        loc: {
          start: {
            line: 179,
            column: 55
          },
          end: {
            line: 190,
            column: 25
          }
        },
        line: 179
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 192,
            column: 87
          },
          end: {
            line: 192,
            column: 88
          }
        },
        loc: {
          start: {
            line: 192,
            column: 95
          },
          end: {
            line: 192,
            column: 106
          }
        },
        line: 192
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 193,
            column: 62
          },
          end: {
            line: 193,
            column: 63
          }
        },
        loc: {
          start: {
            line: 193,
            column: 88
          },
          end: {
            line: 200,
            column: 29
          }
        },
        line: 193
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 214,
            column: 66
          },
          end: {
            line: 214,
            column: 67
          }
        },
        loc: {
          start: {
            line: 214,
            column: 76
          },
          end: {
            line: 214,
            column: 104
          }
        },
        line: 214
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 243,
            column: 51
          },
          end: {
            line: 243,
            column: 52
          }
        },
        loc: {
          start: {
            line: 243,
            column: 56
          },
          end: {
            line: 243,
            column: 77
          }
        },
        line: 243
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 245,
            column: 52
          },
          end: {
            line: 245,
            column: 53
          }
        },
        loc: {
          start: {
            line: 245,
            column: 57
          },
          end: {
            line: 245,
            column: 67
          }
        },
        line: 245
      },
      "22": {
        name: "POST",
        decl: {
          start: {
            line: 289,
            column: 15
          },
          end: {
            line: 289,
            column: 19
          }
        },
        loc: {
          start: {
            line: 289,
            column: 29
          },
          end: {
            line: 357,
            column: 1
          }
        },
        line: 289
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 57
          },
          end: {
            line: 30,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 30,
            column: 65
          },
          end: {
            line: 30,
            column: 66
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 25
          }
        }, {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 38
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 21
          }
        }, {
          start: {
            line: 46,
            column: 25
          },
          end: {
            line: 46,
            column: 62
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 24
          }
        }, {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 68
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 27
          }
        }, {
          start: {
            line: 79,
            column: 31
          },
          end: {
            line: 79,
            column: 74
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 99,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 45
          },
          end: {
            line: 99,
            column: 46
          }
        }],
        line: 99
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 60
          }
        }, {
          start: {
            line: 154,
            column: 64
          },
          end: {
            line: 154,
            column: 67
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 155,
            column: 58
          }
        }, {
          start: {
            line: 155,
            column: 62
          },
          end: {
            line: 155,
            column: 65
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 201,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 201,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "15": {
        loc: {
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 30
          }
        }, {
          start: {
            line: 175,
            column: 34
          },
          end: {
            line: 175,
            column: 47
          }
        }, {
          start: {
            line: 175,
            column: 51
          },
          end: {
            line: 175,
            column: 75
          }
        }],
        line: 175
      },
      "16": {
        loc: {
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 189,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 189,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 188,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 188,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 61
          },
          end: {
            line: 183,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 61
          },
          end: {
            line: 183,
            column: 84
          }
        }, {
          start: {
            line: 183,
            column: 88
          },
          end: {
            line: 183,
            column: 89
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 185,
            column: 36
          },
          end: {
            line: 187,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 36
          },
          end: {
            line: 187,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "20": {
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 185,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 185,
            column: 54
          }
        }, {
          start: {
            line: 185,
            column: 58
          },
          end: {
            line: 185,
            column: 81
          }
        }],
        line: 185
      },
      "21": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "22": {
        loc: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 215,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 215,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "23": {
        loc: {
          start: {
            line: 265,
            column: 63
          },
          end: {
            line: 265,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 88
          },
          end: {
            line: 265,
            column: 93
          }
        }, {
          start: {
            line: 265,
            column: 96
          },
          end: {
            line: 265,
            column: 122
          }
        }],
        line: 265
      },
      "24": {
        loc: {
          start: {
            line: 271,
            column: 72
          },
          end: {
            line: 271,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 72
          },
          end: {
            line: 271,
            column: 113
          }
        }, {
          start: {
            line: 271,
            column: 117
          },
          end: {
            line: 271,
            column: 120
          }
        }],
        line: 271
      },
      "25": {
        loc: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "26": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "27": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 24
          }
        }, {
          start: {
            line: 293,
            column: 28
          },
          end: {
            line: 293,
            column: 69
          }
        }],
        line: 293
      },
      "28": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "29": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 21
          }
        }, {
          start: {
            line: 302,
            column: 25
          },
          end: {
            line: 302,
            column: 47
          }
        }, {
          start: {
            line: 302,
            column: 51
          },
          end: {
            line: 302,
            column: 68
          }
        }, {
          start: {
            line: 302,
            column: 72
          },
          end: {
            line: 302,
            column: 89
          }
        }],
        line: 302
      },
      "30": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "31": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 322,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 322,
            column: 18
          }
        }, {
          start: {
            line: 322,
            column: 22
          },
          end: {
            line: 322,
            column: 47
          }
        }],
        line: 322
      },
      "32": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "33": {
        loc: {
          start: {
            line: 338,
            column: 30
          },
          end: {
            line: 338,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 30
          },
          end: {
            line: 338,
            column: 39
          }
        }, {
          start: {
            line: 338,
            column: 43
          },
          end: {
            line: 338,
            column: 54
          }
        }],
        line: 338
      },
      "34": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 21
          }
        }, {
          start: {
            line: 344,
            column: 19
          },
          end: {
            line: 344,
            column: 21
          }
        }],
        line: 342
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0, 0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: /api/search/trending - B\xFAsquedas populares/trending\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\nexport interface TrendingSearch {\r\n  id: string;\r\n  query: string;\r\n  count: number;\r\n  category?: string;\r\n  href: string;\r\n  type: 'trending';\r\n}\r\n\r\nexport interface TrendingSearchesResponse {\r\n  trending: TrendingSearch[];\r\n  lastUpdated: string;\r\n}\r\n\r\n// B\xFAsquedas trending generadas din\xE1micamente basadas en productos reales\r\nasync function generateDynamicTrendingSearches(supabase: any, limit: number = 6): Promise<TrendingSearch[]> {\r\n  try {\r\n    // Obtener productos m\xE1s populares y marcas para generar b\xFAsquedas trending realistas\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('name, brand, category_id, categories(name)')\r\n      .eq('is_active', true)\r\n      .limit(20);\r\n\r\n    if (productsError || !products) {\r\n      console.warn('Error obteniendo productos para trending:', productsError);\r\n      return getFallbackTrendingSearches(limit);\r\n    }\r\n\r\n    // Generar b\xFAsquedas trending basadas en productos reales\r\n    const trendingSearches: TrendingSearch[] = [];\r\n    const usedQueries = new Set<string>();\r\n\r\n    // Agregar b\xFAsquedas por marca\r\n    const brands = [...new Set(products.map(p => p.brand).filter(Boolean))];\r\n    brands.slice(0, 2).forEach((brand, index) => {\r\n      if (brand && !usedQueries.has(brand.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-brand-${index + 1}`,\r\n          query: brand,\r\n          count: Math.floor(Math.random() * 50) + 20, // Rango realista 20-70\r\n          category: \"marcas\",\r\n          href: `/search?q=${encodeURIComponent(brand)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(brand.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar b\xFAsquedas por categor\xEDa\r\n    const categories = [...new Set(products.map(p => p.categories?.name).filter(Boolean))];\r\n    categories.slice(0, 2).forEach((category, index) => {\r\n      if (category && !usedQueries.has(category.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-category-${index + 1}`,\r\n          query: category,\r\n          count: Math.floor(Math.random() * 40) + 15, // Rango realista 15-55\r\n          category: \"pinturas\",\r\n          href: `/search?q=${encodeURIComponent(category)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(category.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar b\xFAsquedas por productos espec\xEDficos\r\n    const popularProducts = products.slice(0, 2);\r\n    popularProducts.forEach((product, index) => {\r\n      const productName = product.name;\r\n      if (productName && !usedQueries.has(productName.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-product-${index + 1}`,\r\n          query: productName,\r\n          count: Math.floor(Math.random() * 30) + 10, // Rango realista 10-40\r\n          category: \"productos\",\r\n          href: `/search?q=${encodeURIComponent(productName)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(productName.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Ordenar por count descendente y limitar\r\n    return trendingSearches\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, limit);\r\n\r\n  } catch (error) {\r\n    console.error('Error generando trending searches din\xE1micas:', error);\r\n    return getFallbackTrendingSearches(limit);\r\n  }\r\n}\r\n\r\n// Fallback con datos m\xEDnimos (solo si falla todo lo dem\xE1s)\r\nfunction getFallbackTrendingSearches(limit: number = 6): TrendingSearch[] {\r\n  const fallbackSearches = [\r\n    { query: \"Pintura\", category: \"pinturas\" },\r\n    { query: \"Esmalte\", category: \"pinturas\" },\r\n    { query: \"L\xE1tex\", category: \"pinturas\" },\r\n    { query: \"Barniz\", category: \"pinturas\" },\r\n    { query: \"Imprimaci\xF3n\", category: \"pinturas\" },\r\n    { query: \"Rodillos\", category: \"herramientas\" }\r\n  ];\r\n\r\n  return fallbackSearches.slice(0, limit).map((search, index) => ({\r\n    id: `fallback-${index + 1}`,\r\n    query: search.query,\r\n    count: Math.floor(Math.random() * 20) + 5, // Rango m\xEDnimo 5-25\r\n    category: search.category,\r\n    href: `/search?q=${encodeURIComponent(search.query.toLowerCase())}`,\r\n    type: \"trending\" as const\r\n  }));\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de b\xFAsqueda\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.search,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Trending search API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/search/trending',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '6');\r\n    const days = parseInt(searchParams.get('days') || '7');\r\n    const category = searchParams.get('category');\r\n\r\n    console.log('\uD83D\uDD25 API /api/search/trending: Obteniendo b\xFAsquedas trending', {\r\n      limit,\r\n      days,\r\n      category\r\n    });\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    let trendingSearches: TrendingSearch[] = [];\r\n\r\n    // Intentar obtener b\xFAsquedas trending reales del sistema de analytics\r\n    if (supabase) {\r\n      try {\r\n        const startDate = new Date();\r\n        startDate.setDate(startDate.getDate() - days);\r\n\r\n        // Query para obtener b\xFAsquedas m\xE1s populares de analytics_events\r\n        let query = supabase\r\n          .from('analytics_events')\r\n          .select('label, metadata')\r\n          .eq('category', 'search')\r\n          .eq('action', 'search_query')\r\n          .gte('created_at', startDate.toISOString())\r\n          .not('label', 'is', null);\r\n\r\n        if (category) {\r\n          query = query.eq('metadata->>category', category);\r\n        }\r\n\r\n        const { data: analyticsData, error } = await withDatabaseTimeout(\r\n          async (signal) => await query,\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (!error && analyticsData && analyticsData.length > 0) {\r\n          // Procesar datos de analytics para obtener trending\r\n          const searchCounts = new Map<string, number>();\r\n          const searchCategories = new Map<string, string>();\r\n\r\n          analyticsData.forEach((event) => {\r\n            if (event.label) {\r\n              const query = event.label.toLowerCase().trim();\r\n              if (query.length > 2) { // Solo queries de m\xE1s de 2 caracteres\r\n                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);\r\n                \r\n                // Extraer categor\xEDa del metadata si existe\r\n                if (event.metadata && event.metadata.category) {\r\n                  searchCategories.set(query, event.metadata.category);\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          // Convertir a array y ordenar por popularidad\r\n          const sortedSearches = Array.from(searchCounts.entries())\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, limit);\r\n\r\n          trendingSearches = sortedSearches.map(([query, count], index) => ({\r\n            id: `trending-real-${index + 1}`,\r\n            query: query.charAt(0).toUpperCase() + query.slice(1),\r\n            count,\r\n            category: searchCategories.get(query),\r\n            href: `/search?q=${encodeURIComponent(query)}`,\r\n            type: 'trending' as const\r\n          }));\r\n\r\n        }\r\n      } catch (analyticsError) {\r\n        console.warn('\u26A0\uFE0F Error obteniendo trending de analytics, usando fallback:', analyticsError);\r\n      }\r\n    }\r\n\r\n    // Si no hay datos reales o hay pocos, generar din\xE1micamente\r\n    if (trendingSearches.length < 3) {\r\n      console.log('\uD83D\uDD04 Generando b\xFAsquedas trending din\xE1micas desde productos');\r\n\r\n      try {\r\n        const dynamicSearches = await generateDynamicTrendingSearches(supabase, limit);\r\n\r\n        // Filtrar por categor\xEDa si se especifica\r\n        let filteredSearches = dynamicSearches;\r\n        if (category) {\r\n          filteredSearches = dynamicSearches.filter(\r\n            search => search.category === category\r\n          );\r\n        }\r\n\r\n        // Combinar datos reales con din\xE1micos si es necesario\r\n        const needed = limit - trendingSearches.length;\r\n        const additionalSearches = filteredSearches.slice(0, needed);\r\n\r\n        trendingSearches = [...trendingSearches, ...additionalSearches];\r\n      } catch (error) {\r\n        console.error('Error generando trending din\xE1micas, usando fallback:', error);\r\n        const fallbackSearches = getFallbackTrendingSearches(limit - trendingSearches.length);\r\n        trendingSearches = [...trendingSearches, ...fallbackSearches];\r\n      }\r\n    }\r\n\r\n    // Limitar al n\xFAmero solicitado\r\n    trendingSearches = trendingSearches.slice(0, limit);\r\n\r\n    const response: ApiResponse<TrendingSearchesResponse> = {\r\n      data: {\r\n        trending: trendingSearches,\r\n        lastUpdated: new Date().toISOString()\r\n      },\r\n      success: true\r\n    };\r\n\r\n        console.log('\uD83D\uDD25 Trending searches response:', {\r\n          count: trendingSearches.length,\r\n          hasRealData: trendingSearches.some(s => s.id.includes('real')),\r\n          categories: [...new Set(trendingSearches.map(s => s.category).filter(Boolean))]\r\n        });\r\n\r\n        // Log de operaci\xF3n exitosa\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Trending searches retrieved successfully',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            searchesCount: trendingSearches.length,\r\n            limit: limit,\r\n            days: days,\r\n            category: category\r\n          }\r\n        });\r\n\r\n        return NextResponse.json(response);\r\n\r\n      } catch (error) {\r\n        console.error('\u274C Error en /api/search/trending:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error instanceof Error ? error : new Error('Unknown error'),\r\n          {\r\n            endpoint: '/api/search/trending'\r\n          }\r\n        );\r\n\r\n        // En caso de error, devolver b\xFAsquedas por defecto\r\n        const fallbackResponse: ApiResponse<TrendingSearchesResponse> = {\r\n          data: {\r\n            trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),\r\n            lastUpdated: new Date().toISOString()\r\n          },\r\n          success: true\r\n        };\r\n\r\n        return NextResponse.json(fallbackResponse);\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/search/trending', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// M\xE9todo POST para registrar una b\xFAsqueda (para analytics)\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar que el request tenga contenido\r\n    const contentType = request.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      return NextResponse.json(\r\n        { error: 'Content-Type debe ser application/json' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener el texto del body primero para validar\r\n    const bodyText = await request.text();\r\n    if (!bodyText || bodyText.trim() === '' || bodyText === '\"\"' || bodyText === \"''\") {\r\n      return NextResponse.json(\r\n        { error: 'Body de la request no puede estar vac\xEDo' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Parsear JSON de forma segura\r\n    let requestData;\r\n    try {\r\n      requestData = JSON.parse(bodyText);\r\n    } catch (parseError) {\r\n      console.error('Error parsing JSON in POST /api/search/trending:', parseError);\r\n      return NextResponse.json(\r\n        { error: 'JSON inv\xE1lido en el body de la request' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { query, category, userId, sessionId } = requestData;\r\n\r\n    if (!query || typeof query !== 'string') {\r\n      return NextResponse.json(\r\n        { error: 'Query de b\xFAsqueda requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    if (supabase) {\r\n      // Registrar la b\xFAsqueda en analytics usando funci\xF3n optimizada\r\n      const { error } = await supabase.rpc('insert_analytics_event_optimized', {\r\n        p_event_name: 'search',\r\n        p_category: 'search',\r\n        p_action: 'search',\r\n        p_label: query.toLowerCase().trim().substring(0, 50),\r\n        p_user_id: userId,\r\n        p_session_id: sessionId || 'anonymous',\r\n        p_page: '/search',\r\n        p_user_agent: null\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error registrando b\xFAsqueda en analytics:', error);\r\n      } else {\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error registrando b\xFAsqueda:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "generateDynamicTrendingSearches", "supabase", "limit", "data", "products", "error", "productsError", "from", "select", "eq", "console", "warn", "getFallbackTrendingSearches", "trendingSearches", "usedQueries", "Set", "brands", "map", "p", "brand", "filter", "Boolean", "slice", "forEach", "index", "has", "toLowerCase", "push", "id", "query", "count", "Math", "floor", "random", "category", "href", "encodeURIComponent", "type", "add", "categories", "name", "popularProducts", "product", "productName", "sort", "a", "b", "fallbackSearches", "search", "request", "securityLogger", "createSecurityLogger", "rateLimitResult", "withRateLimit", "RATE_LIMIT_CONFIGS", "log", "severity", "message", "context", "metadata", "endpoint", "method", "userAgent", "headers", "get", "searchParams", "URL", "url", "parseInt", "days", "getSupabaseClient", "startDate", "Date", "setDate", "getDate", "gte", "toISOString", "not", "analyticsData", "withDatabaseTimeout", "signal", "API_TIMEOUTS", "database", "length", "searchCounts", "Map", "searchCategories", "event", "label", "trim", "set", "sortedSearches", "Array", "entries", "charAt", "toUpperCase", "analyticsError", "dynamicSearches", "filteredSearches", "needed", "additionalSearches", "response", "trending", "lastUpdated", "success", "hasRealData", "some", "s", "includes", "searchesCount", "NextResponse", "json", "logApiError", "Error", "fallbackResponse", "defaultTrendingSearches", "nextUrl", "logRateLimitExceeded", "contentType", "status", "bodyText", "text", "requestData", "JSON", "parse", "parseError", "userId", "sessionId", "rpc", "p_event_name", "p_category", "p_action", "p_label", "substring", "p_user_id", "p_session_id", "p_page", "p_user_agent"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "061e1fcf976530500005d64f431b29dec574e4c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_235stvaxnt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_235stvaxnt();
cov_235stvaxnt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_235stvaxnt().f[0]++;
  cov_235stvaxnt().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_235stvaxnt().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_235stvaxnt().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_235stvaxnt().f[1]++;
    cov_235stvaxnt().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_235stvaxnt().f[2]++;
    cov_235stvaxnt().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_235stvaxnt().f[3]++;
    cov_235stvaxnt().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_235stvaxnt().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_235stvaxnt().s[8]++, require("../../../../lib/integrations/supabase"));
const _ratelimiter =
/* istanbul ignore next */
(cov_235stvaxnt().s[9]++, require("../../../../lib/rate-limiting/rate-limiter"));
const _apitimeouts =
/* istanbul ignore next */
(cov_235stvaxnt().s[10]++, require("../../../../lib/config/api-timeouts"));
const _securitylogger =
/* istanbul ignore next */
(cov_235stvaxnt().s[11]++, require("../../../../lib/logging/security-logger"));
const runtime =
/* istanbul ignore next */
(cov_235stvaxnt().s[12]++, 'nodejs');
// BÃºsquedas trending generadas dinÃ¡micamente basadas en productos reales
async function generateDynamicTrendingSearches(supabase, limit =
/* istanbul ignore next */
(cov_235stvaxnt().b[0][0]++, 6)) {
  /* istanbul ignore next */
  cov_235stvaxnt().f[4]++;
  cov_235stvaxnt().s[13]++;
  try {
    // Obtener productos mÃ¡s populares y marcas para generar bÃºsquedas trending realistas
    const {
      data: products,
      error: productsError
    } =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[14]++, await supabase.from('products').select('name, brand, category_id, categories(name)').eq('is_active', true).limit(20));
    /* istanbul ignore next */
    cov_235stvaxnt().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_235stvaxnt().b[2][0]++, productsError) ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[2][1]++, !products)) {
      /* istanbul ignore next */
      cov_235stvaxnt().b[1][0]++;
      cov_235stvaxnt().s[16]++;
      console.warn('Error obteniendo productos para trending:', productsError);
      /* istanbul ignore next */
      cov_235stvaxnt().s[17]++;
      return getFallbackTrendingSearches(limit);
    } else
    /* istanbul ignore next */
    {
      cov_235stvaxnt().b[1][1]++;
    }
    // Generar bÃºsquedas trending basadas en productos reales
    const trendingSearches =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[18]++, []);
    const usedQueries =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[19]++, new Set());
    // Agregar bÃºsquedas por marca
    const brands =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[20]++, [...new Set(products.map(p => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[5]++;
      cov_235stvaxnt().s[21]++;
      return p.brand;
    }).filter(Boolean))]);
    /* istanbul ignore next */
    cov_235stvaxnt().s[22]++;
    brands.slice(0, 2).forEach((brand, index) => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[6]++;
      cov_235stvaxnt().s[23]++;
      if (
      /* istanbul ignore next */
      (cov_235stvaxnt().b[4][0]++, brand) &&
      /* istanbul ignore next */
      (cov_235stvaxnt().b[4][1]++, !usedQueries.has(brand.toLowerCase()))) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[3][0]++;
        cov_235stvaxnt().s[24]++;
        trendingSearches.push({
          id: `trending-brand-${index + 1}`,
          query: brand,
          count: Math.floor(Math.random() * 50) + 20,
          category: "marcas",
          href: `/search?q=${encodeURIComponent(brand)}`,
          type: "trending"
        });
        /* istanbul ignore next */
        cov_235stvaxnt().s[25]++;
        usedQueries.add(brand.toLowerCase());
      } else
      /* istanbul ignore next */
      {
        cov_235stvaxnt().b[3][1]++;
      }
    });
    // Agregar bÃºsquedas por categorÃ­a
    const categories =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[26]++, [...new Set(products.map(p => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[7]++;
      cov_235stvaxnt().s[27]++;
      return p.categories?.name;
    }).filter(Boolean))]);
    /* istanbul ignore next */
    cov_235stvaxnt().s[28]++;
    categories.slice(0, 2).forEach((category, index) => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[8]++;
      cov_235stvaxnt().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_235stvaxnt().b[6][0]++, category) &&
      /* istanbul ignore next */
      (cov_235stvaxnt().b[6][1]++, !usedQueries.has(category.toLowerCase()))) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[5][0]++;
        cov_235stvaxnt().s[30]++;
        trendingSearches.push({
          id: `trending-category-${index + 1}`,
          query: category,
          count: Math.floor(Math.random() * 40) + 15,
          category: "pinturas",
          href: `/search?q=${encodeURIComponent(category)}`,
          type: "trending"
        });
        /* istanbul ignore next */
        cov_235stvaxnt().s[31]++;
        usedQueries.add(category.toLowerCase());
      } else
      /* istanbul ignore next */
      {
        cov_235stvaxnt().b[5][1]++;
      }
    });
    // Agregar bÃºsquedas por productos especÃ­ficos
    const popularProducts =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[32]++, products.slice(0, 2));
    /* istanbul ignore next */
    cov_235stvaxnt().s[33]++;
    popularProducts.forEach((product, index) => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[9]++;
      const productName =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[34]++, product.name);
      /* istanbul ignore next */
      cov_235stvaxnt().s[35]++;
      if (
      /* istanbul ignore next */
      (cov_235stvaxnt().b[8][0]++, productName) &&
      /* istanbul ignore next */
      (cov_235stvaxnt().b[8][1]++, !usedQueries.has(productName.toLowerCase()))) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[7][0]++;
        cov_235stvaxnt().s[36]++;
        trendingSearches.push({
          id: `trending-product-${index + 1}`,
          query: productName,
          count: Math.floor(Math.random() * 30) + 10,
          category: "productos",
          href: `/search?q=${encodeURIComponent(productName)}`,
          type: "trending"
        });
        /* istanbul ignore next */
        cov_235stvaxnt().s[37]++;
        usedQueries.add(productName.toLowerCase());
      } else
      /* istanbul ignore next */
      {
        cov_235stvaxnt().b[7][1]++;
      }
    });
    // Ordenar por count descendente y limitar
    /* istanbul ignore next */
    cov_235stvaxnt().s[38]++;
    return trendingSearches.sort((a, b) => {
      /* istanbul ignore next */
      cov_235stvaxnt().f[10]++;
      cov_235stvaxnt().s[39]++;
      return b.count - a.count;
    }).slice(0, limit);
  } catch (error) {
    /* istanbul ignore next */
    cov_235stvaxnt().s[40]++;
    console.error('Error generando trending searches dinÃ¡micas:', error);
    /* istanbul ignore next */
    cov_235stvaxnt().s[41]++;
    return getFallbackTrendingSearches(limit);
  }
}
// Fallback con datos mÃ­nimos (solo si falla todo lo demÃ¡s)
function getFallbackTrendingSearches(limit =
/* istanbul ignore next */
(cov_235stvaxnt().b[9][0]++, 6)) {
  /* istanbul ignore next */
  cov_235stvaxnt().f[11]++;
  const fallbackSearches =
  /* istanbul ignore next */
  (cov_235stvaxnt().s[42]++, [{
    query: "Pintura",
    category: "pinturas"
  }, {
    query: "Esmalte",
    category: "pinturas"
  }, {
    query: "LÃ¡tex",
    category: "pinturas"
  }, {
    query: "Barniz",
    category: "pinturas"
  }, {
    query: "ImprimaciÃ³n",
    category: "pinturas"
  }, {
    query: "Rodillos",
    category: "herramientas"
  }]);
  /* istanbul ignore next */
  cov_235stvaxnt().s[43]++;
  return fallbackSearches.slice(0, limit).map((search, index) => {
    /* istanbul ignore next */
    cov_235stvaxnt().f[12]++;
    cov_235stvaxnt().s[44]++;
    return {
      id: `fallback-${index + 1}`,
      query: search.query,
      count: Math.floor(Math.random() * 20) + 5,
      category: search.category,
      href: `/search?q=${encodeURIComponent(search.query.toLowerCase())}`,
      type: "trending"
    };
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_235stvaxnt().f[13]++;
  // Crear logger de seguridad con contexto
  const securityLogger =
  /* istanbul ignore next */
  (cov_235stvaxnt().s[45]++, (0, _securitylogger.createSecurityLogger)(request));
  // Aplicar rate limiting para APIs de bÃºsqueda
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_235stvaxnt().s[46]++, await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.search, async () => {
    /* istanbul ignore next */
    cov_235stvaxnt().f[14]++;
    cov_235stvaxnt().s[47]++;
    // Log de acceso a la API
    securityLogger.log({
      type: 'data_access',
      severity: 'low',
      message: 'Trending search API accessed',
      context: securityLogger.context,
      metadata: {
        endpoint: '/api/search/trending',
        method: 'GET',
        userAgent: request.headers.get('user-agent')
      }
    });
    /* istanbul ignore next */
    cov_235stvaxnt().s[48]++;
    try {
      const {
        searchParams
      } =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[49]++, new URL(request.url));
      const limit =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[50]++, parseInt(
      /* istanbul ignore next */
      (cov_235stvaxnt().b[10][0]++, searchParams.get('limit')) ||
      /* istanbul ignore next */
      (cov_235stvaxnt().b[10][1]++, '6')));
      const days =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[51]++, parseInt(
      /* istanbul ignore next */
      (cov_235stvaxnt().b[11][0]++, searchParams.get('days')) ||
      /* istanbul ignore next */
      (cov_235stvaxnt().b[11][1]++, '7')));
      const category =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[52]++, searchParams.get('category'));
      /* istanbul ignore next */
      cov_235stvaxnt().s[53]++;
      console.log('ğ¥ API /api/search/trending: Obteniendo bÃºsquedas trending', {
        limit,
        days,
        category
      });
      const supabase =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[54]++, (0, _supabase.getSupabaseClient)());
      let trendingSearches =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[55]++, []);
      // Intentar obtener bÃºsquedas trending reales del sistema de analytics
      /* istanbul ignore next */
      cov_235stvaxnt().s[56]++;
      if (supabase) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[12][0]++;
        cov_235stvaxnt().s[57]++;
        try {
          const startDate =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[58]++, new Date());
          /* istanbul ignore next */
          cov_235stvaxnt().s[59]++;
          startDate.setDate(startDate.getDate() - days);
          // Query para obtener bÃºsquedas mÃ¡s populares de analytics_events
          let query =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[60]++, supabase.from('analytics_events').select('label, metadata').eq('category', 'search').eq('action', 'search_query').gte('created_at', startDate.toISOString()).not('label', 'is', null));
          /* istanbul ignore next */
          cov_235stvaxnt().s[61]++;
          if (category) {
            /* istanbul ignore next */
            cov_235stvaxnt().b[13][0]++;
            cov_235stvaxnt().s[62]++;
            query = query.eq('metadata->>category', category);
          } else
          /* istanbul ignore next */
          {
            cov_235stvaxnt().b[13][1]++;
          }
          const {
            data: analyticsData,
            error
          } =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[63]++, await (0, _apitimeouts.withDatabaseTimeout)(async signal => {
            /* istanbul ignore next */
            cov_235stvaxnt().f[15]++;
            cov_235stvaxnt().s[64]++;
            return await query;
          }, _apitimeouts.API_TIMEOUTS.database));
          /* istanbul ignore next */
          cov_235stvaxnt().s[65]++;
          if (
          /* istanbul ignore next */
          (cov_235stvaxnt().b[15][0]++, !error) &&
          /* istanbul ignore next */
          (cov_235stvaxnt().b[15][1]++, analyticsData) &&
          /* istanbul ignore next */
          (cov_235stvaxnt().b[15][2]++, analyticsData.length > 0)) {
            /* istanbul ignore next */
            cov_235stvaxnt().b[14][0]++;
            // Procesar datos de analytics para obtener trending
            const searchCounts =
            /* istanbul ignore next */
            (cov_235stvaxnt().s[66]++, new Map());
            const searchCategories =
            /* istanbul ignore next */
            (cov_235stvaxnt().s[67]++, new Map());
            /* istanbul ignore next */
            cov_235stvaxnt().s[68]++;
            analyticsData.forEach(event => {
              /* istanbul ignore next */
              cov_235stvaxnt().f[16]++;
              cov_235stvaxnt().s[69]++;
              if (event.label) {
                /* istanbul ignore next */
                cov_235stvaxnt().b[16][0]++;
                const query =
                /* istanbul ignore next */
                (cov_235stvaxnt().s[70]++, event.label.toLowerCase().trim());
                /* istanbul ignore next */
                cov_235stvaxnt().s[71]++;
                if (query.length > 2) {
                  /* istanbul ignore next */
                  cov_235stvaxnt().b[17][0]++;
                  cov_235stvaxnt().s[72]++;
                  searchCounts.set(query, (
                  /* istanbul ignore next */
                  (cov_235stvaxnt().b[18][0]++, searchCounts.get(query)) ||
                  /* istanbul ignore next */
                  (cov_235stvaxnt().b[18][1]++, 0)) + 1);
                  // Extraer categorÃ­a del metadata si existe
                  /* istanbul ignore next */
                  cov_235stvaxnt().s[73]++;
                  if (
                  /* istanbul ignore next */
                  (cov_235stvaxnt().b[20][0]++, event.metadata) &&
                  /* istanbul ignore next */
                  (cov_235stvaxnt().b[20][1]++, event.metadata.category)) {
                    /* istanbul ignore next */
                    cov_235stvaxnt().b[19][0]++;
                    cov_235stvaxnt().s[74]++;
                    searchCategories.set(query, event.metadata.category);
                  } else
                  /* istanbul ignore next */
                  {
                    cov_235stvaxnt().b[19][1]++;
                  }
                } else
                /* istanbul ignore next */
                {
                  cov_235stvaxnt().b[17][1]++;
                }
              } else
              /* istanbul ignore next */
              {
                cov_235stvaxnt().b[16][1]++;
              }
            });
            // Convertir a array y ordenar por popularidad
            const sortedSearches =
            /* istanbul ignore next */
            (cov_235stvaxnt().s[75]++, Array.from(searchCounts.entries()).sort((a, b) => {
              /* istanbul ignore next */
              cov_235stvaxnt().f[17]++;
              cov_235stvaxnt().s[76]++;
              return b[1] - a[1];
            }).slice(0, limit));
            /* istanbul ignore next */
            cov_235stvaxnt().s[77]++;
            trendingSearches = sortedSearches.map(([query, count], index) => {
              /* istanbul ignore next */
              cov_235stvaxnt().f[18]++;
              cov_235stvaxnt().s[78]++;
              return {
                id: `trending-real-${index + 1}`,
                query: query.charAt(0).toUpperCase() + query.slice(1),
                count,
                category: searchCategories.get(query),
                href: `/search?q=${encodeURIComponent(query)}`,
                type: 'trending'
              };
            });
          } else
          /* istanbul ignore next */
          {
            cov_235stvaxnt().b[14][1]++;
          }
        } catch (analyticsError) {
          /* istanbul ignore next */
          cov_235stvaxnt().s[79]++;
          console.warn('â ï¸ Error obteniendo trending de analytics, usando fallback:', analyticsError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_235stvaxnt().b[12][1]++;
      }
      // Si no hay datos reales o hay pocos, generar dinÃ¡micamente
      cov_235stvaxnt().s[80]++;
      if (trendingSearches.length < 3) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[21][0]++;
        cov_235stvaxnt().s[81]++;
        console.log('ğ Generando bÃºsquedas trending dinÃ¡micas desde productos');
        /* istanbul ignore next */
        cov_235stvaxnt().s[82]++;
        try {
          const dynamicSearches =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[83]++, await generateDynamicTrendingSearches(supabase, limit));
          // Filtrar por categorÃ­a si se especifica
          let filteredSearches =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[84]++, dynamicSearches);
          /* istanbul ignore next */
          cov_235stvaxnt().s[85]++;
          if (category) {
            /* istanbul ignore next */
            cov_235stvaxnt().b[22][0]++;
            cov_235stvaxnt().s[86]++;
            filteredSearches = dynamicSearches.filter(search => {
              /* istanbul ignore next */
              cov_235stvaxnt().f[19]++;
              cov_235stvaxnt().s[87]++;
              return search.category === category;
            });
          } else
          /* istanbul ignore next */
          {
            cov_235stvaxnt().b[22][1]++;
          }
          // Combinar datos reales con dinÃ¡micos si es necesario
          const needed =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[88]++, limit - trendingSearches.length);
          const additionalSearches =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[89]++, filteredSearches.slice(0, needed));
          /* istanbul ignore next */
          cov_235stvaxnt().s[90]++;
          trendingSearches = [...trendingSearches, ...additionalSearches];
        } catch (error) {
          /* istanbul ignore next */
          cov_235stvaxnt().s[91]++;
          console.error('Error generando trending dinÃ¡micas, usando fallback:', error);
          const fallbackSearches =
          /* istanbul ignore next */
          (cov_235stvaxnt().s[92]++, getFallbackTrendingSearches(limit - trendingSearches.length));
          /* istanbul ignore next */
          cov_235stvaxnt().s[93]++;
          trendingSearches = [...trendingSearches, ...fallbackSearches];
        }
      } else
      /* istanbul ignore next */
      {
        cov_235stvaxnt().b[21][1]++;
      }
      // Limitar al nÃºmero solicitado
      cov_235stvaxnt().s[94]++;
      trendingSearches = trendingSearches.slice(0, limit);
      const response =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[95]++, {
        data: {
          trending: trendingSearches,
          lastUpdated: new Date().toISOString()
        },
        success: true
      });
      /* istanbul ignore next */
      cov_235stvaxnt().s[96]++;
      console.log('ğ¥ Trending searches response:', {
        count: trendingSearches.length,
        hasRealData: trendingSearches.some(s => {
          /* istanbul ignore next */
          cov_235stvaxnt().f[20]++;
          cov_235stvaxnt().s[97]++;
          return s.id.includes('real');
        }),
        categories: [...new Set(trendingSearches.map(s => {
          /* istanbul ignore next */
          cov_235stvaxnt().f[21]++;
          cov_235stvaxnt().s[98]++;
          return s.category;
        }).filter(Boolean))]
      });
      // Log de operaciÃ³n exitosa
      /* istanbul ignore next */
      cov_235stvaxnt().s[99]++;
      securityLogger.log({
        type: 'data_access',
        severity: 'low',
        message: 'Trending searches retrieved successfully',
        context: securityLogger.context,
        metadata: {
          searchesCount: trendingSearches.length,
          limit: limit,
          days: days,
          category: category
        }
      });
      /* istanbul ignore next */
      cov_235stvaxnt().s[100]++;
      return _server.NextResponse.json(response);
    } catch (error) {
      /* istanbul ignore next */
      cov_235stvaxnt().s[101]++;
      console.error('â Error en /api/search/trending:', error);
      // Log de error de seguridad
      /* istanbul ignore next */
      cov_235stvaxnt().s[102]++;
      securityLogger.logApiError(securityLogger.context, error instanceof Error ?
      /* istanbul ignore next */
      (cov_235stvaxnt().b[23][0]++, error) :
      /* istanbul ignore next */
      (cov_235stvaxnt().b[23][1]++, new Error('Unknown error')), {
        endpoint: '/api/search/trending'
      });
      // En caso de error, devolver bÃºsquedas por defecto
      const fallbackResponse =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[103]++, {
        data: {
          trending: defaultTrendingSearches.slice(0, parseInt(
          /* istanbul ignore next */
          (cov_235stvaxnt().b[24][0]++, request.nextUrl.searchParams.get('limit')) ||
          /* istanbul ignore next */
          (cov_235stvaxnt().b[24][1]++, '6'))),
          lastUpdated: new Date().toISOString()
        },
        success: true
      });
      /* istanbul ignore next */
      cov_235stvaxnt().s[104]++;
      return _server.NextResponse.json(fallbackResponse);
    }
  }));
  // Manejar rate limit excedido
  /* istanbul ignore next */
  cov_235stvaxnt().s[105]++;
  if (rateLimitResult instanceof _server.NextResponse) {
    /* istanbul ignore next */
    cov_235stvaxnt().b[25][0]++;
    cov_235stvaxnt().s[106]++;
    securityLogger.logRateLimitExceeded(securityLogger.context, {
      endpoint: '/api/search/trending',
      method: 'GET'
    });
    /* istanbul ignore next */
    cov_235stvaxnt().s[107]++;
    return rateLimitResult;
  } else
  /* istanbul ignore next */
  {
    cov_235stvaxnt().b[25][1]++;
  }
  cov_235stvaxnt().s[108]++;
  return rateLimitResult;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_235stvaxnt().f[22]++;
  cov_235stvaxnt().s[109]++;
  try {
    // Validar que el request tenga contenido
    const contentType =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[110]++, request.headers.get('content-type'));
    /* istanbul ignore next */
    cov_235stvaxnt().s[111]++;
    if (
    /* istanbul ignore next */
    (cov_235stvaxnt().b[27][0]++, !contentType) ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[27][1]++, !contentType.includes('application/json'))) {
      /* istanbul ignore next */
      cov_235stvaxnt().b[26][0]++;
      cov_235stvaxnt().s[112]++;
      return _server.NextResponse.json({
        error: 'Content-Type debe ser application/json'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_235stvaxnt().b[26][1]++;
    }
    // Obtener el texto del body primero para validar
    const bodyText =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[113]++, await request.text());
    /* istanbul ignore next */
    cov_235stvaxnt().s[114]++;
    if (
    /* istanbul ignore next */
    (cov_235stvaxnt().b[29][0]++, !bodyText) ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[29][1]++, bodyText.trim() === '') ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[29][2]++, bodyText === '""') ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[29][3]++, bodyText === "''")) {
      /* istanbul ignore next */
      cov_235stvaxnt().b[28][0]++;
      cov_235stvaxnt().s[115]++;
      return _server.NextResponse.json({
        error: 'Body de la request no puede estar vacÃ­o'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_235stvaxnt().b[28][1]++;
    }
    // Parsear JSON de forma segura
    let requestData;
    /* istanbul ignore next */
    cov_235stvaxnt().s[116]++;
    try {
      /* istanbul ignore next */
      cov_235stvaxnt().s[117]++;
      requestData = JSON.parse(bodyText);
    } catch (parseError) {
      /* istanbul ignore next */
      cov_235stvaxnt().s[118]++;
      console.error('Error parsing JSON in POST /api/search/trending:', parseError);
      /* istanbul ignore next */
      cov_235stvaxnt().s[119]++;
      return _server.NextResponse.json({
        error: 'JSON invÃ¡lido en el body de la request'
      }, {
        status: 400
      });
    }
    const {
      query,
      category,
      userId,
      sessionId
    } =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[120]++, requestData);
    /* istanbul ignore next */
    cov_235stvaxnt().s[121]++;
    if (
    /* istanbul ignore next */
    (cov_235stvaxnt().b[31][0]++, !query) ||
    /* istanbul ignore next */
    (cov_235stvaxnt().b[31][1]++, typeof query !== 'string')) {
      /* istanbul ignore next */
      cov_235stvaxnt().b[30][0]++;
      cov_235stvaxnt().s[122]++;
      return _server.NextResponse.json({
        error: 'Query de bÃºsqueda requerida'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_235stvaxnt().b[30][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_235stvaxnt().s[123]++, (0, _supabase.getSupabaseClient)());
    /* istanbul ignore next */
    cov_235stvaxnt().s[124]++;
    if (supabase) {
      /* istanbul ignore next */
      cov_235stvaxnt().b[32][0]++;
      // Registrar la bÃºsqueda en analytics usando funciÃ³n optimizada
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_235stvaxnt().s[125]++, await supabase.rpc('insert_analytics_event_optimized', {
        p_event_name: 'search',
        p_category: 'search',
        p_action: 'search',
        p_label: query.toLowerCase().trim().substring(0, 50),
        p_user_id: userId,
        p_session_id:
        /* istanbul ignore next */
        (cov_235stvaxnt().b[33][0]++, sessionId) ||
        /* istanbul ignore next */
        (cov_235stvaxnt().b[33][1]++, 'anonymous'),
        p_page: '/search',
        p_user_agent: null
      }));
      /* istanbul ignore next */
      cov_235stvaxnt().s[126]++;
      if (error) {
        /* istanbul ignore next */
        cov_235stvaxnt().b[34][0]++;
        cov_235stvaxnt().s[127]++;
        console.error('Error registrando bÃºsqueda en analytics:', error);
      } else {
        /* istanbul ignore next */
        cov_235stvaxnt().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_235stvaxnt().b[32][1]++;
    }
    cov_235stvaxnt().s[128]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_235stvaxnt().s[129]++;
    console.error('â Error registrando bÃºsqueda:', error);
    /* istanbul ignore next */
    cov_235stvaxnt().s[130]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,