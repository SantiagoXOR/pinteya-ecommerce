{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\OrderListEnterprise-simple.test.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SIMPLE CIRCULAR DEPENDENCIES TEST\r\n// Prueba simple para verificar que no hay dependencias circulares\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\r\n\r\n// ===================================\r\n// MOCKS SIMPLES\r\n// ===================================\r\n\r\nconst mockFetch = jest.fn();\r\nglobal.fetch = mockFetch;\r\n\r\nconst mockToast = jest.fn();\r\njest.mock('@/hooks/use-toast', () => ({\r\n  useToast: () => ({ toast: mockToast })\r\n}));\r\n\r\n// Mock de performance\r\nconst mockPerformanceNow = jest.fn();\r\nObject.defineProperty(global, 'performance', {\r\n  value: { now: mockPerformanceNow },\r\n  writable: true\r\n});\r\n\r\n// Datos de prueba simples\r\nconst mockApiResponse = {\r\n  success: true,\r\n  data: {\r\n    orders: [],\r\n    pagination: {\r\n      page: 1,\r\n      limit: 20,\r\n      total: 0,\r\n      totalPages: 0,\r\n      hasNextPage: false,\r\n      hasPreviousPage: false\r\n    },\r\n    analytics: {\r\n      total_orders: 0,\r\n      total_revenue: 0,\r\n      pending_orders: 0,\r\n      completed_orders: 0\r\n    }\r\n  },\r\n  message: 'Orders retrieved successfully',\r\n  timestamp: new Date().toISOString()\r\n};\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockPerformanceNow.mockReturnValue(1000);\r\n  \r\n  mockFetch.mockResolvedValue({\r\n    ok: true,\r\n    status: 200,\r\n    json: async () => mockApiResponse\r\n  });\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS SIMPLES\r\n// ===================================\r\n\r\ndescribe('OrderListEnterprise - Simple Tests', () => {\r\n  it('debe renderizarse sin errores', async () => {\r\n    render(<OrderListEnterprise />);\r\n    \r\n    // Verificar que el componente se renderiza\r\n    expect(screen.getByText('Gestión de Órdenes')).toBeInTheDocument();\r\n    \r\n    // Esperar a que termine la carga\r\n    await waitFor(() => {\r\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('debe manejar cambios de filtros sin renders infinitos', async () => {\r\n    const { container } = render(<OrderListEnterprise />);\r\n    \r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\r\n    });\r\n\r\n    // Cambiar filtro de búsqueda\r\n    const searchInput = screen.getByPlaceholderText('Buscar órdenes...');\r\n    fireEvent.change(searchInput, { target: { value: 'test' } });\r\n\r\n    // Verificar que el componente sigue funcionando\r\n    expect(searchInput).toHaveValue('test');\r\n    \r\n    // No debería haber errores en console\r\n    expect(mockToast).not.toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        variant: 'destructive'\r\n      })\r\n    );\r\n  });\r\n\r\n  it('debe hacer solo una petición inicial', async () => {\r\n    render(<OrderListEnterprise />);\r\n    \r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\r\n    });\r\n\r\n    // Verificar que solo se hizo una petición\r\n    expect(mockFetch).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('debe limpiar recursos al desmontarse', async () => {\r\n    const { unmount } = render(<OrderListEnterprise />);\r\n    \r\n    // Esperar carga inicial\r\n    await waitFor(() => {\r\n      expect(screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();\r\n    });\r\n\r\n    // Desmontar componente\r\n    unmount();\r\n\r\n    // No debería haber errores después del desmontaje\r\n    expect(mockToast).not.toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        variant: 'destructive'\r\n      })\r\n    );\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockFetch","jest","fn","global","fetch","mockToast","mock","useToast","toast","mockPerformanceNow","Object","defineProperty","value","now","writable","mockApiResponse","success","data","orders","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","analytics","total_orders","total_revenue","pending_orders","completed_orders","message","timestamp","Date","toISOString","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","status","json","afterEach","clearAllTimers","describe","it","render","OrderListEnterprise","expect","screen","getByText","toBeInTheDocument","waitFor","container","searchInput","getByPlaceholderText","fireEvent","change","target","toHaveValue","not","toHaveBeenCalledWith","objectContaining","variant","toHaveBeenCalledTimes","unmount"],"mappings":"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"}