e0d31313ad6400c394f1fda048ba28ab
// ===================================
// TESTS: Hook useBrandFilter
// ===================================
"use strict";
// Mock de la API de marcas
jest.mock('@/lib/api/brands', ()=>({
        getBrands: jest.fn(()=>Promise.resolve({
                success: true,
                data: [
                    {
                        name: 'El Galgo',
                        products_count: 5
                    },
                    {
                        name: 'Plavicon',
                        products_count: 8
                    },
                    {
                        name: 'Akapol',
                        products_count: 3
                    },
                    {
                        name: 'Sinteplast',
                        products_count: 2
                    }
                ]
            }))
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush
            }),
        useSearchParams: ()=>({
                get: jest.fn(()=>null),
                toString: jest.fn(()=>'')
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useBrandFilter = require("../../hooks/useBrandFilter");
// Mock de Next.js router
const mockPush = jest.fn();
describe('useBrandFilter Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Funcionalidad básica', ()=>{
        it('debería cargar marcas automáticamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            expect(result.current.isLoading).toBe(true);
            expect(result.current.brands).toEqual([]);
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.brands).toHaveLength(4);
            expect(result.current.brands[0]).toEqual({
                name: 'El Galgo',
                products_count: 5
            });
        });
        it('debería permitir deshabilitar carga automática', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    autoLoad: false
                }));
            expect(result.current.isLoading).toBe(false);
            expect(result.current.brands).toEqual([]);
        });
        it('debería manejar selección de marcas', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo',
                    'Plavicon'
                ]);
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo',
                'Plavicon'
            ]);
        });
        it('debería alternar marcas correctamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Agregar marca
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo'
            ]);
            // Quitar marca
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            expect(result.current.selectedBrands).toEqual([]);
            // Agregar múltiples marcas
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            (0, _react.act)(()=>{
                result.current.toggleBrand('Plavicon');
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo',
                'Plavicon'
            ]);
        });
        it('debería limpiar todas las marcas', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo',
                    'Plavicon',
                    'Akapol'
                ]);
            });
            expect(result.current.selectedBrands).toHaveLength(3);
            (0, _react.act)(()=>{
                result.current.clearBrands();
            });
            expect(result.current.selectedBrands).toEqual([]);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debería manejar errores de API', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            mockGetBrands.mockRejectedValueOnce(new Error('Error de red'));
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.error).toBe('Error de red');
            expect(result.current.brands).toEqual([]);
        });
        it('debería manejar respuesta de API sin éxito', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            mockGetBrands.mockResolvedValueOnce({
                success: false,
                error: 'Error del servidor'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.error).toBe('Error del servidor');
            expect(result.current.brands).toEqual([]);
        });
    });
    describe('Búsqueda de marcas', ()=>{
        it('debería buscar marcas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Mock respuesta de búsqueda
            mockGetBrands.mockResolvedValueOnce({
                success: true,
                data: [
                    {
                        name: 'El Galgo',
                        products_count: 5
                    }
                ]
            });
            (0, _react.act)(()=>{
                result.current.searchBrands('galgo');
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(mockGetBrands).toHaveBeenCalledWith({
                search: 'galgo',
                minProducts: 1
            });
        });
    });
    describe('Refetch', ()=>{
        it('debería recargar marcas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Limpiar llamadas anteriores
            mockGetBrands.mockClear();
            (0, _react.act)(()=>{
                result.current.refetch();
            });
            expect(result.current.isLoading).toBe(true);
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(mockGetBrands).toHaveBeenCalledTimes(1);
        });
    });
    describe('Callback onBrandsChange', ()=>{
        it('debería llamar callback cuando cambian las marcas', async ()=>{
            const onBrandsChange = jest.fn();
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    onBrandsChange
                }));
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo'
                ]);
            });
            expect(onBrandsChange).toHaveBeenCalledWith([
                'El Galgo'
            ]);
            (0, _react.act)(()=>{
                result.current.toggleBrand('Plavicon');
            });
            expect(onBrandsChange).toHaveBeenCalledWith([
                'El Galgo',
                'Plavicon'
            ]);
        });
    });
    describe('Configuración de minProducts', ()=>{
        it('debería usar minProducts en las consultas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    minProducts: 5
                }));
            await (0, _react.waitFor)(()=>{
                expect(mockGetBrands).toHaveBeenCalledWith({
                    minProducts: 5
                });
            });
        });
    });
});
describe('useSimpleBrandFilter Hook', ()=>{
    it('debería manejar selección simple de marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        expect(result.current.selectedBrands).toEqual([]);
        (0, _react.act)(()=>{
            result.current.setSelectedBrands([
                'El Galgo'
            ]);
        });
        expect(result.current.selectedBrands).toEqual([
            'El Galgo'
        ]);
    });
    it('debería alternar marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        (0, _react.act)(()=>{
            result.current.toggleBrand('El Galgo');
        });
        expect(result.current.selectedBrands).toEqual([
            'El Galgo'
        ]);
        (0, _react.act)(()=>{
            result.current.toggleBrand('El Galgo');
        });
        expect(result.current.selectedBrands).toEqual([]);
    });
    it('debería limpiar marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        (0, _react.act)(()=>{
            result.current.setSelectedBrands([
                'El Galgo',
                'Plavicon'
            ]);
        });
        expect(result.current.selectedBrands).toHaveLength(2);
        (0, _react.act)(()=>{
            result.current.clearBrands();
        });
        expect(result.current.selectedBrands).toEqual([]);
    });
});

//# sourceMappingURL=data:application/json;base64,