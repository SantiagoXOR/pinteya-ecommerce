{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\lib\\security-logger.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS: Security Logger\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport {\r\n  createSecurityLogger,\r\n  extractSecurityContext,\r\n  securityLog,\r\n  SecurityEvent,\r\n  SecurityEventType,\r\n  SecuritySeverity\r\n} from '@/lib/logging/security-logger';\r\n\r\n// Mock console methods\r\nconst originalConsoleLog = console.log;\r\nconst mockConsoleLog = jest.fn();\r\n\r\nbeforeAll(() => {\r\n  console.log = mockConsoleLog;\r\n});\r\n\r\nafterAll(() => {\r\n  console.log = originalConsoleLog;\r\n});\r\n\r\nbeforeEach(() => {\r\n  mockConsoleLog.mockClear();\r\n  // Reset environment variables\r\n  delete process.env.SECURITY_LOG_LEVEL;\r\n  // Set to production mode for consistent JSON output\r\n  process.env.NODE_ENV = 'production';\r\n});\r\n\r\n// Helper para crear mock request\r\nfunction createMockRequest(overrides: Partial<NextRequest> = {}): NextRequest {\r\n  return {\r\n    url: 'http://localhost:3000/api/test',\r\n    method: 'GET',\r\n    headers: new Map([\r\n      ['x-forwarded-for', '192.168.1.1'],\r\n      ['user-agent', 'Mozilla/5.0 Test Browser'],\r\n      ['x-request-id', 'test-request-123']\r\n    ]),\r\n    ...overrides\r\n  } as NextRequest;\r\n}\r\n\r\ndescribe('Security Logger', () => {\r\n  describe('extractSecurityContext', () => {\r\n    it('should extract basic context from request', () => {\r\n      const request = createMockRequest();\r\n      const context = extractSecurityContext(request);\r\n\r\n      expect(context.ip).toBe('192.168.1.1');\r\n      expect(context.userAgent).toBe('Mozilla/5.0 Test Browser');\r\n      expect(context.endpoint).toBe('/api/test');\r\n      expect(context.method).toBe('GET');\r\n      expect(context.requestId).toBe('test-request-123');\r\n      expect(context.timestamp).toBeDefined();\r\n    });\r\n\r\n    it('should handle missing headers gracefully', () => {\r\n      const request = createMockRequest({\r\n        headers: new Map()\r\n      });\r\n      const context = extractSecurityContext(request);\r\n\r\n      expect(context.ip).toBe('unknown');\r\n      expect(context.userAgent).toBe('unknown');\r\n      expect(context.requestId).toMatch(/^req_\\d+_[a-z0-9]+$/);\r\n    });\r\n\r\n    it('should extract IP from x-forwarded-for correctly', () => {\r\n      const request = createMockRequest({\r\n        headers: new Map([\r\n          ['x-forwarded-for', '203.0.113.1, 198.51.100.1, 192.168.1.1']\r\n        ])\r\n      });\r\n      const context = extractSecurityContext(request);\r\n\r\n      expect(context.ip).toBe('203.0.113.1');\r\n    });\r\n\r\n    it('should fallback to x-real-ip when x-forwarded-for is not available', () => {\r\n      const request = createMockRequest({\r\n        headers: new Map([\r\n          ['x-real-ip', '203.0.113.2']\r\n        ])\r\n      });\r\n      const context = extractSecurityContext(request);\r\n\r\n      expect(context.ip).toBe('203.0.113.2');\r\n    });\r\n\r\n    it('should merge additional context', () => {\r\n      const request = createMockRequest();\r\n      const additionalContext = {\r\n        userId: 'user-123',\r\n        sessionId: 'session-456'\r\n      };\r\n      const context = extractSecurityContext(request, additionalContext);\r\n\r\n      expect(context.userId).toBe('user-123');\r\n      expect(context.sessionId).toBe('session-456');\r\n      expect(context.ip).toBe('192.168.1.1');\r\n    });\r\n  });\r\n\r\n  describe('createSecurityLogger', () => {\r\n    it('should create logger with request context', () => {\r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n\r\n      expect(logger.context).toBeDefined();\r\n      expect(logger.context.ip).toBe('192.168.1.1');\r\n      expect(logger.context.endpoint).toBe('/api/test');\r\n      expect(typeof logger.log).toBe('function');\r\n      expect(typeof logger.logAuthAttempt).toBe('function');\r\n    });\r\n\r\n    it('should create logger without request', () => {\r\n      const logger = createSecurityLogger(undefined, {\r\n        userId: 'test-user',\r\n        endpoint: '/api/manual'\r\n      });\r\n\r\n      expect(logger.context).toBeDefined();\r\n      expect(logger.context.userId).toBe('test-user');\r\n      expect(logger.context.endpoint).toBe('/api/manual');\r\n    });\r\n  });\r\n\r\n  describe('Security Event Logging', () => {\r\n    it('should log security events with proper format', () => {\r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n\r\n      const event: SecurityEvent = {\r\n        type: 'auth_attempt',\r\n        severity: 'medium',\r\n        message: 'Test authentication attempt',\r\n        context: logger.context,\r\n        metadata: { testData: 'value' }\r\n      };\r\n\r\n      logger.log(event);\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(1);\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      \r\n      expect(loggedData.event_type).toBe('auth_attempt');\r\n      expect(loggedData.severity).toBe('medium');\r\n      expect(loggedData.message).toBe('Test authentication attempt');\r\n      expect(loggedData.metadata.testData).toBe('value');\r\n    });\r\n\r\n    it('should respect log level configuration', () => {\r\n      process.env.SECURITY_LOG_LEVEL = 'high';\r\n      \r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n\r\n      // Low severity event should not be logged\r\n      logger.log({\r\n        type: 'security_scan',\r\n        severity: 'low',\r\n        message: 'Low severity event',\r\n        context: logger.context\r\n      });\r\n\r\n      expect(mockConsoleLog).not.toHaveBeenCalled();\r\n\r\n      // High severity event should be logged\r\n      logger.log({\r\n        type: 'permission_denied',\r\n        severity: 'high',\r\n        message: 'High severity event',\r\n        context: logger.context\r\n      });\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should format error information correctly', () => {\r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n      const testError = new Error('Test error message');\r\n      testError.stack = 'Error stack trace';\r\n\r\n      logger.log({\r\n        type: 'api_error',\r\n        severity: 'high',\r\n        message: 'API error occurred',\r\n        context: logger.context,\r\n        error: testError\r\n      });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.error.name).toBe('Error');\r\n      expect(loggedData.error.message).toBe('Test error message');\r\n      expect(loggedData.error.stack).toBe('Error stack trace');\r\n    });\r\n  });\r\n\r\n  describe('Specialized Logging Methods', () => {\r\n    let logger: ReturnType<typeof createSecurityLogger>;\r\n\r\n    beforeEach(() => {\r\n      // Set log level to low to ensure all logs are captured\r\n      process.env.SECURITY_LOG_LEVEL = 'low';\r\n      const request = createMockRequest();\r\n      logger = createSecurityLogger(request);\r\n    });\r\n\r\n    it('should log authentication attempts correctly', () => {\r\n      logger.logAuthAttempt(logger.context, true, { provider: 'google' });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('auth_success');\r\n      expect(loggedData.severity).toBe('low');\r\n      expect(loggedData.metadata.success).toBe(true);\r\n      expect(loggedData.metadata.provider).toBe('google');\r\n    });\r\n\r\n    it('should log failed authentication attempts', () => {\r\n      logger.logAuthAttempt(logger.context, false, { reason: 'invalid_password' });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('auth_failure');\r\n      expect(loggedData.severity).toBe('medium');\r\n      expect(loggedData.metadata.success).toBe(false);\r\n      expect(loggedData.metadata.reason).toBe('invalid_password');\r\n    });\r\n\r\n    it('should log rate limit exceeded events', () => {\r\n      logger.logRateLimitExceeded(logger.context, { limit: 100, window: '5m' });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('rate_limit_exceeded');\r\n      expect(loggedData.severity).toBe('medium');\r\n      expect(loggedData.metadata.limit).toBe(100);\r\n      expect(loggedData.metadata.window).toBe('5m');\r\n    });\r\n\r\n    it('should log permission denied events', () => {\r\n      logger.logPermissionDenied(logger.context, 'products', 'create');\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('permission_denied');\r\n      expect(loggedData.severity).toBe('high');\r\n      expect(loggedData.metadata.resource).toBe('products');\r\n      expect(loggedData.metadata.action).toBe('create');\r\n    });\r\n\r\n    it('should log suspicious activity', () => {\r\n      logger.logSuspiciousActivity(logger.context, 'Multiple failed login attempts', {\r\n        attempts: 5,\r\n        timeframe: '1m'\r\n      });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('suspicious_activity');\r\n      expect(loggedData.severity).toBe('high');\r\n      expect(loggedData.metadata.reason).toBe('Multiple failed login attempts');\r\n      expect(loggedData.metadata.attempts).toBe(5);\r\n    });\r\n\r\n    it('should log admin actions', () => {\r\n      logger.logAdminAction(logger.context, 'delete_user', { targetUserId: 'user-456' });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('admin_action');\r\n      expect(loggedData.severity).toBe('medium');\r\n      expect(loggedData.metadata.action).toBe('delete_user');\r\n      expect(loggedData.metadata.targetUserId).toBe('user-456');\r\n    });\r\n\r\n    it('should log API errors', () => {\r\n      const error = new Error('Database connection failed');\r\n      logger.logApiError(logger.context, error, { database: 'postgres' });\r\n\r\n      const loggedData = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      expect(loggedData.event_type).toBe('api_error');\r\n      expect(loggedData.severity).toBe('medium');\r\n      expect(loggedData.error.message).toBe('Database connection failed');\r\n      expect(loggedData.metadata.database).toBe('postgres');\r\n    });\r\n  });\r\n\r\n  describe('Development vs Production Logging', () => {\r\n    it('should use colored output in development', () => {\r\n      process.env.NODE_ENV = 'development';\r\n      \r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n\r\n      logger.log({\r\n        type: 'auth_attempt',\r\n        severity: 'medium',\r\n        message: 'Test message',\r\n        context: logger.context\r\n      });\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(1);\r\n      const call = mockConsoleLog.mock.calls[0];\r\n      expect(call[0]).toContain('\\x1b[33m'); // Yellow color for medium severity\r\n      expect(call[0]).toContain('[SECURITY:AUTH_ATTEMPT]');\r\n    });\r\n\r\n    it('should use plain JSON in production', () => {\r\n      process.env.NODE_ENV = 'production';\r\n      \r\n      const request = createMockRequest();\r\n      const logger = createSecurityLogger(request);\r\n\r\n      logger.log({\r\n        type: 'auth_attempt',\r\n        severity: 'medium',\r\n        message: 'Test message',\r\n        context: logger.context\r\n      });\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(1);\r\n      const call = mockConsoleLog.mock.calls[0];\r\n      expect(call[0]).not.toContain('\\x1b['); // No color codes\r\n      expect(typeof call[0]).toBe('string');\r\n      expect(() => JSON.parse(call[0])).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('securityLog helper', () => {\r\n    it('should provide quick logging methods', () => {\r\n      // Set log level to low to capture all logs\r\n      process.env.SECURITY_LOG_LEVEL = 'low';\r\n\r\n      securityLog.info('Info message', { component: 'test' });\r\n      securityLog.warn('Warning message', { component: 'test' });\r\n      securityLog.error('Error message', new Error('Test error'), { component: 'test' });\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalledTimes(3);\r\n\r\n      const infoLog = JSON.parse(mockConsoleLog.mock.calls[0][0]);\r\n      const warnLog = JSON.parse(mockConsoleLog.mock.calls[1][0]);\r\n      const errorLog = JSON.parse(mockConsoleLog.mock.calls[2][0]);\r\n\r\n      expect(infoLog.severity).toBe('low');\r\n      expect(warnLog.severity).toBe('medium');\r\n      expect(errorLog.severity).toBe('high');\r\n      expect(errorLog.error).toBeDefined();\r\n    });\r\n  });\r\n});\r\n"],"names":["originalConsoleLog","console","log","mockConsoleLog","jest","fn","beforeAll","afterAll","beforeEach","mockClear","process","env","SECURITY_LOG_LEVEL","NODE_ENV","createMockRequest","overrides","url","method","headers","Map","describe","it","request","context","extractSecurityContext","expect","ip","toBe","userAgent","endpoint","requestId","timestamp","toBeDefined","toMatch","additionalContext","userId","sessionId","logger","createSecurityLogger","logAuthAttempt","undefined","event","type","severity","message","metadata","testData","toHaveBeenCalledTimes","loggedData","JSON","parse","mock","calls","event_type","not","toHaveBeenCalled","testError","Error","stack","error","name","provider","success","reason","logRateLimitExceeded","limit","window","logPermissionDenied","resource","action","logSuspiciousActivity","attempts","timeframe","logAdminAction","targetUserId","logApiError","database","call","toContain","toThrow","securityLog","info","component","warn","infoLog","warnLog","errorLog"],"mappings":"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"}