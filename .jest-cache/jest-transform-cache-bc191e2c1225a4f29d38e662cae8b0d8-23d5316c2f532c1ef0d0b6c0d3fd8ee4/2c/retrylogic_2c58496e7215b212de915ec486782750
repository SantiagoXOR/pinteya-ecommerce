2c062b30fd804bca31242a9cc74a1e26
// ===================================
// PINTEYA E-COMMERCE - RETRY LOGIC WITH EXPONENTIAL BACKOFF
// ===================================
"use strict";

/* istanbul ignore next */
function cov_2bxgtlpwaz() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\retry-logic.ts";
  var hash = "841fdff1f5ffe056bd18f4d10792781424cad66f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\retry-logic.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "9": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "10": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "11": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 111,
          column: 1
        }
      },
      "12": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 93
        }
      },
      "13": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 118,
          column: 69
        }
      },
      "14": {
        start: {
          line: 120,
          column: 19
        },
        end: {
          line: 120,
          column: 50
        }
      },
      "15": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 44
        }
      },
      "16": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 60
        }
      },
      "17": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 127,
          column: 54
        }
      },
      "18": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "19": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "20": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 25
        }
      },
      "21": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "22": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "23": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 24
        }
      },
      "24": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "25": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "26": {
        start: {
          line: 147,
          column: 17
        },
        end: {
          line: 147,
          column: 49
        }
      },
      "27": {
        start: {
          line: 149,
          column: 26
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "28": {
        start: {
          line: 155,
          column: 22
        },
        end: {
          line: 155,
          column: 107
        }
      },
      "29": {
        start: {
          line: 155,
          column: 53
        },
        end: {
          line: 155,
          column: 106
        }
      },
      "30": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 48
        }
      },
      "31": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "32": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 164,
          column: 6
        }
      },
      "33": {
        start: {
          line: 167,
          column: 22
        },
        end: {
          line: 167,
          column: 32
        }
      },
      "34": {
        start: {
          line: 169,
          column: 19
        },
        end: {
          line: 169,
          column: 20
        }
      },
      "35": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 95
        }
      },
      "36": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "37": {
        start: {
          line: 171,
          column: 22
        },
        end: {
          line: 171,
          column: 23
        }
      },
      "38": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 31
        }
      },
      "39": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 173,
          column: 39
        }
      },
      "40": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "41": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 132
        }
      },
      "42": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 44
        }
      },
      "43": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 177,
          column: 61
        }
      },
      "44": {
        start: {
          line: 178,
          column: 34
        },
        end: {
          line: 178,
          column: 56
        }
      },
      "45": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 104
        }
      },
      "46": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 102
        }
      },
      "47": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 188,
          column: 14
        }
      },
      "48": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 30
        }
      },
      "49": {
        start: {
          line: 191,
          column: 36
        },
        end: {
          line: 191,
          column: 61
        }
      },
      "50": {
        start: {
          line: 192,
          column: 30
        },
        end: {
          line: 192,
          column: 57
        }
      },
      "51": {
        start: {
          line: 193,
          column: 32
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "52": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 114
        }
      },
      "53": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "54": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 22
        }
      },
      "55": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "56": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 117
        }
      },
      "57": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 22
        }
      },
      "58": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 212,
          column: 57
        }
      },
      "59": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 38
        }
      },
      "60": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 100
        }
      },
      "61": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 69
        }
      },
      "62": {
        start: {
          line: 216,
          column: 41
        },
        end: {
          line: 216,
          column: 67
        }
      },
      "63": {
        start: {
          line: 220,
          column: 26
        },
        end: {
          line: 220,
          column: 48
        }
      },
      "64": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 111
        }
      },
      "65": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 223,
          column: 95
        }
      },
      "66": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 230,
          column: 6
        }
      },
      "67": {
        start: {
          line: 233,
          column: 19
        },
        end: {
          line: 233,
          column: 100
        }
      },
      "68": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 79
        }
      },
      "69": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 237,
          column: 101
        }
      },
      "70": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 242,
          column: 6
        }
      },
      "71": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "calculateDelay",
        decl: {
          start: {
            line: 114,
            column: 13
          },
          end: {
            line: 114,
            column: 27
          }
        },
        loc: {
          start: {
            line: 114,
            column: 45
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 114
      },
      "7": {
        name: "isRetryableError",
        decl: {
          start: {
            line: 125,
            column: 13
          },
          end: {
            line: 125,
            column: 29
          }
        },
        loc: {
          start: {
            line: 125,
            column: 45
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 125
      },
      "8": {
        name: "extractErrorInfo",
        decl: {
          start: {
            line: 145,
            column: 13
          },
          end: {
            line: 145,
            column: 29
          }
        },
        loc: {
          start: {
            line: 145,
            column: 37
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 145
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 155,
            column: 41
          },
          end: {
            line: 155,
            column: 42
          }
        },
        loc: {
          start: {
            line: 155,
            column: 53
          },
          end: {
            line: 155,
            column: 106
          }
        },
        line: 155
      },
      "10": {
        name: "retryWithBackoff",
        decl: {
          start: {
            line: 166,
            column: 15
          },
          end: {
            line: 166,
            column: 31
          }
        },
        loc: {
          start: {
            line: 166,
            column: 78
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 166
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 216,
            column: 30
          },
          end: {
            line: 216,
            column: 31
          }
        },
        loc: {
          start: {
            line: 216,
            column: 41
          },
          end: {
            line: 216,
            column: 67
          }
        },
        line: 216
      },
      "12": {
        name: "retryMercadoPagoOperation",
        decl: {
          start: {
            line: 232,
            column: 15
          },
          end: {
            line: 232,
            column: 40
          }
        },
        loc: {
          start: {
            line: 232,
            column: 86
          },
          end: {
            line: 235,
            column: 1
          }
        },
        line: 232
      },
      "13": {
        name: "retryWebhookOperation",
        decl: {
          start: {
            line: 236,
            column: 15
          },
          end: {
            line: 236,
            column: 36
          }
        },
        loc: {
          start: {
            line: 236,
            column: 63
          },
          end: {
            line: 238,
            column: 1
          }
        },
        line: 236
      },
      "14": {
        name: "createRetryFunction",
        decl: {
          start: {
            line: 239,
            column: 9
          },
          end: {
            line: 239,
            column: 28
          }
        },
        loc: {
          start: {
            line: 239,
            column: 52
          },
          end: {
            line: 243,
            column: 1
          }
        },
        line: 239
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 240,
            column: 11
          },
          end: {
            line: 240,
            column: 12
          }
        },
        loc: {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 240
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 126,
            column: 26
          },
          end: {
            line: 126,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 26
          },
          end: {
            line: 126,
            column: 39
          }
        }, {
          start: {
            line: 126,
            column: 43
          },
          end: {
            line: 126,
            column: 45
          }
        }],
        line: 126
      },
      "1": {
        loc: {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 127,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 127,
            column: 33
          }
        }, {
          start: {
            line: 127,
            column: 37
          },
          end: {
            line: 127,
            column: 39
          }
        }],
        line: 127
      },
      "2": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "3": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 66
          }
        }, {
          start: {
            line: 130,
            column: 70
          },
          end: {
            line: 130,
            column: 121
          }
        }],
        line: 130
      },
      "4": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "5": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 63
          }
        }, {
          start: {
            line: 136,
            column: 67
          },
          end: {
            line: 136,
            column: 115
          }
        }],
        line: 136
      },
      "6": {
        loc: {
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 34
          }
        }, {
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 146,
            column: 40
          }
        }],
        line: 146
      },
      "7": {
        loc: {
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 28
          }
        }, {
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 34
          }
        }],
        line: 147
      },
      "8": {
        loc: {
          start: {
            line: 155,
            column: 53
          },
          end: {
            line: 155,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 53
          },
          end: {
            line: 155,
            column: 79
          }
        }, {
          start: {
            line: 155,
            column: 83
          },
          end: {
            line: 155,
            column: 106
          }
        }],
        line: 155
      },
      "9": {
        loc: {
          start: {
            line: 158,
            column: 23
          },
          end: {
            line: 158,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 37
          },
          end: {
            line: 158,
            column: 61
          }
        }, {
          start: {
            line: 158,
            column: 64
          },
          end: {
            line: 158,
            column: 73
          }
        }],
        line: 158
      },
      "10": {
        loc: {
          start: {
            line: 160,
            column: 14
          },
          end: {
            line: 160,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 14
          },
          end: {
            line: 160,
            column: 18
          }
        }, {
          start: {
            line: 160,
            column: 22
          },
          end: {
            line: 160,
            column: 31
          }
        }],
        line: 160
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 51
          },
          end: {
            line: 166,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 166,
            column: 67
          },
          end: {
            line: 166,
            column: 76
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "14": {
        loc: {
          start: {
            line: 232,
            column: 67
          },
          end: {
            line: 232,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 232,
            column: 80
          },
          end: {
            line: 232,
            column: 84
          }
        }],
        line: 232
      },
      "15": {
        loc: {
          start: {
            line: 233,
            column: 19
          },
          end: {
            line: 233,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 66
          }
        }, {
          start: {
            line: 233,
            column: 69
          },
          end: {
            line: 233,
            column: 100
          }
        }],
        line: 233
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\retry-logic.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - RETRY LOGIC WITH EXPONENTIAL BACKOFF\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\nimport { metricsCollector } from './enterprise/metrics';\r\n\r\n// Configuraci\xF3n de retry\r\nexport interface RetryConfig {\r\n  maxRetries: number;           // M\xE1ximo n\xFAmero de reintentos\r\n  baseDelayMs: number;          // Delay base en milisegundos\r\n  maxDelayMs: number;           // Delay m\xE1ximo en milisegundos\r\n  backoffMultiplier: number;    // Multiplicador para backoff exponencial\r\n  jitterMs: number;             // Jitter m\xE1ximo en milisegundos\r\n  retryableErrors: string[];    // C\xF3digos de error que permiten retry\r\n  nonRetryableErrors: string[]; // C\xF3digos de error que NO permiten retry\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const RETRY_CONFIGS: Record<string, RetryConfig> = {\r\n  // Para llamadas cr\xEDticas a MercadoPago\r\n  MERCADOPAGO_CRITICAL: {\r\n    maxRetries: 3,\r\n    baseDelayMs: 1000,        // 1 segundo\r\n    maxDelayMs: 30000,        // 30 segundos\r\n    backoffMultiplier: 2,\r\n    jitterMs: 500,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ENOTFOUND',\r\n      'ECONNREFUSED',\r\n      'ETIMEDOUT',\r\n      'NETWORK_ERROR',\r\n      'TIMEOUT',\r\n      '500',\r\n      '502',\r\n      '503',\r\n      '504',\r\n      '429'  // Rate limit - retry despu\xE9s de delay\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',  // Bad Request\r\n      '401',  // Unauthorized\r\n      '403',  // Forbidden\r\n      '404',  // Not Found\r\n      '422',  // Unprocessable Entity\r\n      'INVALID_CREDENTIALS',\r\n      'INVALID_REQUEST',\r\n      'PAYMENT_REJECTED'\r\n    ]\r\n  },\r\n\r\n  // Para operaciones de consulta menos cr\xEDticas\r\n  MERCADOPAGO_QUERY: {\r\n    maxRetries: 2,\r\n    baseDelayMs: 500,         // 0.5 segundos\r\n    maxDelayMs: 10000,        // 10 segundos\r\n    backoffMultiplier: 2,\r\n    jitterMs: 250,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ENOTFOUND',\r\n      'ETIMEDOUT',\r\n      '500',\r\n      '502',\r\n      '503',\r\n      '504'\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',\r\n      '401',\r\n      '403',\r\n      '404',\r\n      '422'\r\n    ]\r\n  },\r\n\r\n  // Para webhooks (menos agresivo)\r\n  WEBHOOK_PROCESSING: {\r\n    maxRetries: 1,\r\n    baseDelayMs: 2000,        // 2 segundos\r\n    maxDelayMs: 5000,         // 5 segundos\r\n    backoffMultiplier: 1.5,\r\n    jitterMs: 1000,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ETIMEDOUT',\r\n      '500',\r\n      '503'\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',\r\n      '401',\r\n      '403',\r\n      '404',\r\n      '422',\r\n      'DUPLICATE_WEBHOOK'\r\n    ]\r\n  }\r\n} as const;\r\n\r\n// Resultado del retry\r\nexport interface RetryResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: Error;\r\n  attempts: number;\r\n  totalDuration: number;\r\n  lastAttemptDuration: number;\r\n}\r\n\r\n// Informaci\xF3n del intento\r\nexport interface AttemptInfo {\r\n  attempt: number;\r\n  maxRetries: number;\r\n  delay: number;\r\n  error?: Error;\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Calcula el delay para el siguiente intento usando backoff exponencial con jitter\r\n */\r\nfunction calculateDelay(\r\n  attempt: number, \r\n  config: RetryConfig\r\n): number {\r\n  // Backoff exponencial: baseDelay * (multiplier ^ attempt)\r\n  const exponentialDelay = config.baseDelayMs * Math.pow(config.backoffMultiplier, attempt);\r\n  \r\n  // Aplicar l\xEDmite m\xE1ximo\r\n  const cappedDelay = Math.min(exponentialDelay, config.maxDelayMs);\r\n  \r\n  // Agregar jitter aleatorio para evitar thundering herd\r\n  const jitter = Math.random() * config.jitterMs;\r\n  \r\n  return Math.floor(cappedDelay + jitter);\r\n}\r\n\r\n/**\r\n * Determina si un error es reintentable\r\n */\r\nfunction isRetryableError(error: Error, config: RetryConfig): boolean {\r\n  const errorMessage = (error.message || '').toLowerCase();\r\n  const errorName = (error.name || '').toLowerCase();\r\n  \r\n  // Verificar errores no reintenables primero (tienen prioridad)\r\n  for (const nonRetryableError of config.nonRetryableErrors) {\r\n    if (errorMessage.includes(nonRetryableError.toLowerCase()) ||\r\n        errorName.includes(nonRetryableError.toLowerCase())) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Verificar errores reintenables\r\n  for (const retryableError of config.retryableErrors) {\r\n    if (errorMessage.includes(retryableError.toLowerCase()) ||\r\n        errorName.includes(retryableError.toLowerCase())) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // Por defecto, no reintentar errores desconocidos\r\n  return false;\r\n}\r\n\r\n/**\r\n * Extrae informaci\xF3n del error para logging\r\n */\r\nfunction extractErrorInfo(error: Error): {\r\n  type: string;\r\n  code?: string;\r\n  statusCode?: number;\r\n  isNetwork: boolean;\r\n} {\r\n  const message = (error.message || '').toLowerCase();\r\n  const name = (error.name || '').toLowerCase();\r\n  \r\n  // Detectar errores de red\r\n  const networkErrors = ['econnreset', 'enotfound', 'econnrefused', 'etimedout'];\r\n  const isNetwork = networkErrors.some(netError => \r\n    message.includes(netError) || name.includes(netError)\r\n  );\r\n  \r\n  // Extraer c\xF3digo de estado HTTP si existe\r\n  const statusMatch = message.match(/(\\d{3})/);\r\n  const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\r\n  \r\n  return {\r\n    type: name || 'unknown',\r\n    code: statusCode?.toString(),\r\n    statusCode,\r\n    isNetwork\r\n  };\r\n}\r\n\r\n/**\r\n * Funci\xF3n principal de retry con backoff exponencial\r\n */\r\nexport async function retryWithBackoff<T>(\r\n  operation: () => Promise<T>,\r\n  config: RetryConfig,\r\n  operationName: string = 'unknown'\r\n): Promise<RetryResult<T>> {\r\n  const startTime = Date.now();\r\n  let lastError: Error | undefined;\r\n  let attempts = 0;\r\n\r\n  logger.info(LogCategory.API, `Starting retry operation: ${operationName}`);\r\n\r\n  for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\r\n    attempts = attempt + 1;\r\n    const attemptStart = Date.now();\r\n\r\n    try {\r\n      logger.info(LogCategory.API, `Retry attempt ${attempts}/${config.maxRetries + 1} for ${operationName}`);\r\n      \r\n      const result = await operation();\r\n      const attemptDuration = Date.now() - attemptStart;\r\n      const totalDuration = Date.now() - startTime;\r\n\r\n      logger.info(LogCategory.API, `Retry operation succeeded: ${operationName}`);\r\n\r\n      // \u2705 NUEVO: Registrar m\xE9tricas de retry exitoso\r\n      await metricsCollector.recordRetry(operationName, attempts, true, totalDuration);\r\n\r\n      return {\r\n        success: true,\r\n        data: result,\r\n        attempts,\r\n        totalDuration,\r\n        lastAttemptDuration: attemptDuration,\r\n      };\r\n\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      const attemptDuration = Date.now() - attemptStart;\r\n      const errorInfo = extractErrorInfo(lastError);\r\n\r\n      const attemptInfo: AttemptInfo = {\r\n        attempt: attempts,\r\n        maxRetries: config.maxRetries + 1,\r\n        delay: 0,\r\n        error: lastError,\r\n        duration: attemptDuration,\r\n      };\r\n\r\n      // Log del intento fallido\r\n      logger.warn(LogCategory.API, `Retry attempt ${attempts} failed for ${operationName}`);\r\n\r\n      // Si es el \xFAltimo intento, no calcular delay\r\n      if (attempt === config.maxRetries) {\r\n        break;\r\n      }\r\n\r\n      // Verificar si el error es reintentable\r\n      if (!isRetryableError(lastError, config)) {\r\n        logger.error(LogCategory.API, `Non-retryable error for ${operationName}`, lastError);\r\n        break;\r\n      }\r\n\r\n      // Calcular delay para el siguiente intento\r\n      const delay = calculateDelay(attempt, config);\r\n      attemptInfo.delay = delay;\r\n\r\n      logger.info(LogCategory.API, `Retrying ${operationName} in ${delay}ms`);\r\n\r\n      // Esperar antes del siguiente intento\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  // Todos los intentos fallaron\r\n  const totalDuration = Date.now() - startTime;\r\n  \r\n  logger.error(LogCategory.API, `All retry attempts failed for ${operationName}`, lastError!);\r\n\r\n  // \u2705 NUEVO: Registrar m\xE9tricas de retry fallido\r\n  await metricsCollector.recordRetry(operationName, attempts, false, totalDuration);\r\n\r\n  return {\r\n    success: false,\r\n    error: lastError,\r\n    attempts,\r\n    totalDuration,\r\n    lastAttemptDuration: 0,\r\n  };\r\n}\r\n\r\n/**\r\n * Wrapper espec\xEDfico para operaciones de MercadoPago\r\n */\r\nexport async function retryMercadoPagoOperation<T>(\r\n  operation: () => Promise<T>,\r\n  operationName: string,\r\n  isCritical: boolean = true\r\n): Promise<RetryResult<T>> {\r\n  const config = isCritical ? RETRY_CONFIGS.MERCADOPAGO_CRITICAL : RETRY_CONFIGS.MERCADOPAGO_QUERY;\r\n  \r\n  return retryWithBackoff(operation, config, `MercadoPago:${operationName}`);\r\n}\r\n\r\n/**\r\n * Wrapper para operaciones de webhook\r\n */\r\nexport async function retryWebhookOperation<T>(\r\n  operation: () => Promise<T>,\r\n  operationName: string\r\n): Promise<RetryResult<T>> {\r\n  return retryWithBackoff(operation, RETRY_CONFIGS.WEBHOOK_PROCESSING, `Webhook:${operationName}`);\r\n}\r\n\r\n/**\r\n * Funci\xF3n de utilidad para crear un retry personalizado\r\n */\r\nexport function createRetryFunction<T>(\r\n  config: RetryConfig,\r\n  operationName: string\r\n) {\r\n  return (operation: () => Promise<T>): Promise<RetryResult<T>> => {\r\n    return retryWithBackoff(operation, config, operationName);\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["RETRY_CONFIGS", "createRetryFunction", "retryMercadoPagoOperation", "retryWebhookOperation", "retryWithBackoff", "MERCADOPAGO_CRITICAL", "maxRetries", "baseDelayMs", "maxDelayMs", "backoffMultiplier", "jitterMs", "retryableErrors", "nonRetryableErrors", "MERCADOPAGO_QUERY", "WEBHOOK_PROCESSING", "calculateDelay", "attempt", "config", "exponentialDelay", "Math", "pow", "cappedDelay", "min", "jitter", "random", "floor", "isRetryableError", "error", "errorMessage", "message", "toLowerCase", "errorName", "name", "nonRetryableError", "includes", "retryableError", "extractErrorInfo", "networkErrors", "isNetwork", "some", "netError", "statusMatch", "match", "statusCode", "parseInt", "undefined", "type", "code", "toString", "operation", "operationName", "startTime", "Date", "now", "lastError", "attempts", "logger", "info", "LogCategory", "API", "attemptStart", "result", "attemptDuration", "totalDuration", "metricsCollector", "recordRetry", "success", "data", "lastAttemptDuration", "errorInfo", "attemptInfo", "delay", "duration", "warn", "Promise", "resolve", "setTimeout", "isCritical"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "841fdff1f5ffe056bd18f4d10792781424cad66f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bxgtlpwaz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bxgtlpwaz();
cov_2bxgtlpwaz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[0]++;
  cov_2bxgtlpwaz().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2bxgtlpwaz().s[3]++;
_export(exports, {
  get RETRY_CONFIGS() {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[1]++;
    cov_2bxgtlpwaz().s[4]++;
    return RETRY_CONFIGS;
  },
  get createRetryFunction() {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[2]++;
    cov_2bxgtlpwaz().s[5]++;
    return createRetryFunction;
  },
  get retryMercadoPagoOperation() {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[3]++;
    cov_2bxgtlpwaz().s[6]++;
    return retryMercadoPagoOperation;
  },
  get retryWebhookOperation() {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[4]++;
    cov_2bxgtlpwaz().s[7]++;
    return retryWebhookOperation;
  },
  get retryWithBackoff() {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[5]++;
    cov_2bxgtlpwaz().s[8]++;
    return retryWithBackoff;
  }
});
const _logger =
/* istanbul ignore next */
(cov_2bxgtlpwaz().s[9]++, require("./enterprise/logger"));
const _metrics =
/* istanbul ignore next */
(cov_2bxgtlpwaz().s[10]++, require("./enterprise/metrics"));
const RETRY_CONFIGS =
/* istanbul ignore next */
(cov_2bxgtlpwaz().s[11]++, {
  // Para llamadas críticas a MercadoPago
  MERCADOPAGO_CRITICAL: {
    maxRetries: 3,
    baseDelayMs: 1000,
    maxDelayMs: 30000,
    backoffMultiplier: 2,
    jitterMs: 500,
    retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ECONNREFUSED', 'ETIMEDOUT', 'NETWORK_ERROR', 'TIMEOUT', '500', '502', '503', '504', '429' // Rate limit - retry después de delay
    ],
    nonRetryableErrors: ['400', '401', '403', '404', '422', 'INVALID_CREDENTIALS', 'INVALID_REQUEST', 'PAYMENT_REJECTED']
  },
  // Para operaciones de consulta menos críticas
  MERCADOPAGO_QUERY: {
    maxRetries: 2,
    baseDelayMs: 500,
    maxDelayMs: 10000,
    backoffMultiplier: 2,
    jitterMs: 250,
    retryableErrors: ['ECONNRESET', 'ENOTFOUND', 'ETIMEDOUT', '500', '502', '503', '504'],
    nonRetryableErrors: ['400', '401', '403', '404', '422']
  },
  // Para webhooks (menos agresivo)
  WEBHOOK_PROCESSING: {
    maxRetries: 1,
    baseDelayMs: 2000,
    maxDelayMs: 5000,
    backoffMultiplier: 1.5,
    jitterMs: 1000,
    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', '500', '503'],
    nonRetryableErrors: ['400', '401', '403', '404', '422', 'DUPLICATE_WEBHOOK']
  }
});
/**
 * Calcula el delay para el siguiente intento usando backoff exponencial con jitter
 */
function calculateDelay(attempt, config) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[6]++;
  // Backoff exponencial: baseDelay * (multiplier ^ attempt)
  const exponentialDelay =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[12]++, config.baseDelayMs * Math.pow(config.backoffMultiplier, attempt));
  // Aplicar límite máximo
  const cappedDelay =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[13]++, Math.min(exponentialDelay, config.maxDelayMs));
  // Agregar jitter aleatorio para evitar thundering herd
  const jitter =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[14]++, Math.random() * config.jitterMs);
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[15]++;
  return Math.floor(cappedDelay + jitter);
}
/**
 * Determina si un error es reintentable
 */
function isRetryableError(error, config) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[7]++;
  const errorMessage =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[16]++, (
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[0][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[0][1]++, '')).toLowerCase());
  const errorName =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[17]++, (
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[1][0]++, error.name) ||
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[1][1]++, '')).toLowerCase());
  // Verificar errores no reintenables primero (tienen prioridad)
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[18]++;
  for (const nonRetryableError of config.nonRetryableErrors) {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[3][0]++, errorMessage.includes(nonRetryableError.toLowerCase())) ||
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[3][1]++, errorName.includes(nonRetryableError.toLowerCase()))) {
      /* istanbul ignore next */
      cov_2bxgtlpwaz().b[2][0]++;
      cov_2bxgtlpwaz().s[20]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2bxgtlpwaz().b[2][1]++;
    }
  }
  // Verificar errores reintenables
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[21]++;
  for (const retryableError of config.retryableErrors) {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[5][0]++, errorMessage.includes(retryableError.toLowerCase())) ||
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[5][1]++, errorName.includes(retryableError.toLowerCase()))) {
      /* istanbul ignore next */
      cov_2bxgtlpwaz().b[4][0]++;
      cov_2bxgtlpwaz().s[23]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2bxgtlpwaz().b[4][1]++;
    }
  }
  // Por defecto, no reintentar errores desconocidos
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[24]++;
  return false;
}
/**
 * Extrae información del error para logging
 */
function extractErrorInfo(error) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[8]++;
  const message =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[25]++, (
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[6][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[6][1]++, '')).toLowerCase());
  const name =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[26]++, (
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[7][0]++, error.name) ||
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[7][1]++, '')).toLowerCase());
  // Detectar errores de red
  const networkErrors =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[27]++, ['econnreset', 'enotfound', 'econnrefused', 'etimedout']);
  const isNetwork =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[28]++, networkErrors.some(netError => {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[9]++;
    cov_2bxgtlpwaz().s[29]++;
    return /* istanbul ignore next */(cov_2bxgtlpwaz().b[8][0]++, message.includes(netError)) ||
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[8][1]++, name.includes(netError));
  }));
  // Extraer código de estado HTTP si existe
  const statusMatch =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[30]++, message.match(/(\d{3})/));
  const statusCode =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[31]++, statusMatch ?
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[9][0]++, parseInt(statusMatch[1])) :
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[9][1]++, undefined));
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[32]++;
  return {
    type:
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[10][0]++, name) ||
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().b[10][1]++, 'unknown'),
    code: statusCode?.toString(),
    statusCode,
    isNetwork
  };
}
async function retryWithBackoff(operation, config, operationName =
/* istanbul ignore next */
(cov_2bxgtlpwaz().b[11][0]++, 'unknown')) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[10]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[33]++, Date.now());
  let lastError;
  let attempts =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[34]++, 0);
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[35]++;
  _logger.logger.info(_logger.LogCategory.API, `Starting retry operation: ${operationName}`);
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[36]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[37]++, 0); attempt <= config.maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().s[38]++;
    attempts = attempt + 1;
    const attemptStart =
    /* istanbul ignore next */
    (cov_2bxgtlpwaz().s[39]++, Date.now());
    /* istanbul ignore next */
    cov_2bxgtlpwaz().s[40]++;
    try {
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[41]++;
      _logger.logger.info(_logger.LogCategory.API, `Retry attempt ${attempts}/${config.maxRetries + 1} for ${operationName}`);
      const result =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[42]++, await operation());
      const attemptDuration =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[43]++, Date.now() - attemptStart);
      const totalDuration =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[44]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[45]++;
      _logger.logger.info(_logger.LogCategory.API, `Retry operation succeeded: ${operationName}`);
      // ✅ NUEVO: Registrar métricas de retry exitoso
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[46]++;
      await _metrics.metricsCollector.recordRetry(operationName, attempts, true, totalDuration);
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[47]++;
      return {
        success: true,
        data: result,
        attempts,
        totalDuration,
        lastAttemptDuration: attemptDuration
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[48]++;
      lastError = error;
      const attemptDuration =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[49]++, Date.now() - attemptStart);
      const errorInfo =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[50]++, extractErrorInfo(lastError));
      const attemptInfo =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[51]++, {
        attempt: attempts,
        maxRetries: config.maxRetries + 1,
        delay: 0,
        error: lastError,
        duration: attemptDuration
      });
      // Log del intento fallido
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[52]++;
      _logger.logger.warn(_logger.LogCategory.API, `Retry attempt ${attempts} failed for ${operationName}`);
      // Si es el último intento, no calcular delay
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[53]++;
      if (attempt === config.maxRetries) {
        /* istanbul ignore next */
        cov_2bxgtlpwaz().b[12][0]++;
        cov_2bxgtlpwaz().s[54]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_2bxgtlpwaz().b[12][1]++;
      }
      // Verificar si el error es reintentable
      cov_2bxgtlpwaz().s[55]++;
      if (!isRetryableError(lastError, config)) {
        /* istanbul ignore next */
        cov_2bxgtlpwaz().b[13][0]++;
        cov_2bxgtlpwaz().s[56]++;
        _logger.logger.error(_logger.LogCategory.API, `Non-retryable error for ${operationName}`, lastError);
        /* istanbul ignore next */
        cov_2bxgtlpwaz().s[57]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_2bxgtlpwaz().b[13][1]++;
      }
      // Calcular delay para el siguiente intento
      const delay =
      /* istanbul ignore next */
      (cov_2bxgtlpwaz().s[58]++, calculateDelay(attempt, config));
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[59]++;
      attemptInfo.delay = delay;
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[60]++;
      _logger.logger.info(_logger.LogCategory.API, `Retrying ${operationName} in ${delay}ms`);
      // Esperar antes del siguiente intento
      /* istanbul ignore next */
      cov_2bxgtlpwaz().s[61]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2bxgtlpwaz().f[11]++;
        cov_2bxgtlpwaz().s[62]++;
        return setTimeout(resolve, delay);
      });
    }
  }
  // Todos los intentos fallaron
  const totalDuration =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[63]++, Date.now() - startTime);
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[64]++;
  _logger.logger.error(_logger.LogCategory.API, `All retry attempts failed for ${operationName}`, lastError);
  // ✅ NUEVO: Registrar métricas de retry fallido
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[65]++;
  await _metrics.metricsCollector.recordRetry(operationName, attempts, false, totalDuration);
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[66]++;
  return {
    success: false,
    error: lastError,
    attempts,
    totalDuration,
    lastAttemptDuration: 0
  };
}
async function retryMercadoPagoOperation(operation, operationName, isCritical =
/* istanbul ignore next */
(cov_2bxgtlpwaz().b[14][0]++, true)) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[12]++;
  const config =
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().s[67]++, isCritical ?
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[15][0]++, RETRY_CONFIGS.MERCADOPAGO_CRITICAL) :
  /* istanbul ignore next */
  (cov_2bxgtlpwaz().b[15][1]++, RETRY_CONFIGS.MERCADOPAGO_QUERY));
  /* istanbul ignore next */
  cov_2bxgtlpwaz().s[68]++;
  return retryWithBackoff(operation, config, `MercadoPago:${operationName}`);
}
async function retryWebhookOperation(operation, operationName) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[13]++;
  cov_2bxgtlpwaz().s[69]++;
  return retryWithBackoff(operation, RETRY_CONFIGS.WEBHOOK_PROCESSING, `Webhook:${operationName}`);
}
function createRetryFunction(config, operationName) {
  /* istanbul ignore next */
  cov_2bxgtlpwaz().f[14]++;
  cov_2bxgtlpwaz().s[70]++;
  return operation => {
    /* istanbul ignore next */
    cov_2bxgtlpwaz().f[15]++;
    cov_2bxgtlpwaz().s[71]++;
    return retryWithBackoff(operation, config, operationName);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,