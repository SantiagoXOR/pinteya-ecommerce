{"version":3,"names":["cov_2k4gxa9uwy","actualCoverage","s","DELETE","f","GET","POST","runtime","execAsync","_util","promisify","_child_process","exec","request","body","json","flow","b","_server","NextResponse","success","error","status","console","log","startTime","Date","now","scriptPath","scriptArgs","_path","default","join","process","cwd","healthCheck","fetch","method","timeout","ok","Error","healthError","stdout","stderr","env","NODE_ENV","includes","warn","lines","split","screenshotLines","filter","line","screenshotCount","length","screenshots","map","match","Boolean","duration","count","execError","message","details","searchParams","URL","url","get","fs","require","screenshotsDir","files","readdir","flowScreenshots","file","endsWith","exists","dirError","olderThan","deletedCount","filepath","stats","stat","hoursOld","mtime","getTime","parseInt","unlink"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\generate-screenshots\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API ENDPOINT PARA GENERAR SCREENSHOTS AUTOM√ÅTICAMENTE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport path from 'path'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\ninterface GenerateScreenshotsRequest {\r\n  flow: 'checkout' | 'admin' | 'shop'\r\n  force?: boolean\r\n}\r\n\r\ninterface GenerateScreenshotsResponse {\r\n  success: boolean\r\n  count?: number\r\n  screenshots?: string[]\r\n  error?: string\r\n  duration?: number\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: GenerateScreenshotsRequest = await request.json()\r\n    \r\n    if (!body.flow) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Par√°metro \"flow\" es requerido'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    console.log(`üöÄ Iniciando generaci√≥n de screenshots para flujo: ${body.flow}`)\r\n    \r\n    const startTime = Date.now()\r\n    \r\n    // Determinar qu√© script ejecutar\r\n    let scriptPath: string\r\n    const scriptArgs: string[] = []\r\n    \r\n    switch (body.flow) {\r\n      case 'checkout':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'generate-checkout-screenshots.js')\r\n        break\r\n      case 'admin':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'admin-panel-audit.js')\r\n        break\r\n      case 'shop':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'generate-shop-screenshots.js')\r\n        break\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: `Flujo no soportado: ${body.flow}`\r\n        }, { status: 400 })\r\n    }\r\n\r\n    // Verificar que el servidor est√© corriendo\r\n    try {\r\n      const healthCheck = await fetch('http://localhost:3000/api/health', {\r\n        method: 'GET',\r\n        timeout: 5000\r\n      })\r\n      \r\n      if (!healthCheck.ok) {\r\n        throw new Error('Servidor no disponible')\r\n      }\r\n    } catch (healthError) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'El servidor debe estar corriendo en localhost:3000 para generar screenshots'\r\n      }, { status: 503 })\r\n    }\r\n\r\n    // Ejecutar script de generaci√≥n\r\n    try {\r\n      console.log(`üì∏ Ejecutando script: ${scriptPath}`)\r\n      \r\n      const { stdout, stderr } = await execAsync(`node \"${scriptPath}\"`, {\r\n        cwd: process.cwd(),\r\n        timeout: 120000, // 2 minutos timeout\r\n        env: {\r\n          ...process.env,\r\n          NODE_ENV: 'development'\r\n        }\r\n      })\r\n\r\n      if (stderr && !stderr.includes('Warning')) {\r\n        console.warn('Advertencias del script:', stderr)\r\n      }\r\n\r\n      console.log('Salida del script:', stdout)\r\n\r\n      // Parsear resultados del script\r\n      const lines = stdout.split('\\n')\r\n      const screenshotLines = lines.filter(line => line.includes('Screenshot guardado:'))\r\n      const screenshotCount = screenshotLines.length\r\n\r\n      const screenshots = screenshotLines.map(line => {\r\n        const match = line.match(/Screenshot guardado: (.+)/)\r\n        return match ? match[1] : ''\r\n      }).filter(Boolean)\r\n\r\n      const duration = Date.now() - startTime\r\n\r\n      console.log(`‚úÖ Generaci√≥n completada: ${screenshotCount} screenshots en ${duration}ms`)\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        count: screenshotCount,\r\n        screenshots,\r\n        duration\r\n      })\r\n\r\n    } catch (execError: any) {\r\n      console.error('Error ejecutando script:', execError)\r\n      \r\n      return NextResponse.json({\r\n        success: false,\r\n        error: `Error ejecutando script: ${execError.message}`,\r\n        details: execError.stderr || execError.stdout\r\n      }, { status: 500 })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error general:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint GET para verificar estado\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const flow = searchParams.get('flow')\r\n\r\n    if (!flow) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Par√°metro \"flow\" es requerido'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // Verificar si existen screenshots para el flujo\r\n    const fs = require('fs/promises')\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      const flowScreenshots = files.filter((file: string) => \r\n        file.includes(flow) && file.endsWith('.png')\r\n      )\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        flow,\r\n        exists: flowScreenshots.length > 0,\r\n        count: flowScreenshots.length,\r\n        screenshots: flowScreenshots\r\n      })\r\n\r\n    } catch (dirError) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        flow,\r\n        exists: false,\r\n        count: 0,\r\n        screenshots: []\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error verificando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint DELETE para limpiar screenshots\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const flow = searchParams.get('flow')\r\n    const olderThan = searchParams.get('olderThan') // en horas\r\n\r\n    const fs = require('fs/promises')\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      let deletedCount = 0\r\n\r\n      for (const file of files) {\r\n        if (!file.endsWith('.png')) {continue}\r\n\r\n        // Filtrar por flujo si se especifica\r\n        if (flow && !file.includes(flow)) {continue}\r\n\r\n        // Filtrar por antig√ºedad si se especifica\r\n        if (olderThan) {\r\n          const filepath = path.join(screenshotsDir, file)\r\n          const stats = await fs.stat(filepath)\r\n          const hoursOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60)\r\n          \r\n          if (hoursOld <= parseInt(olderThan)) {continue}\r\n        }\r\n\r\n        // Eliminar archivo\r\n        const filepath = path.join(screenshotsDir, file)\r\n        await fs.unlink(filepath)\r\n        deletedCount++\r\n        console.log(`üóëÔ∏è Screenshot eliminado: ${file}`)\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount,\r\n        message: `${deletedCount} screenshots eliminados`\r\n      })\r\n\r\n    } catch (dirError) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount: 0,\r\n        message: 'Directorio de screenshots no existe'\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error eliminando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}