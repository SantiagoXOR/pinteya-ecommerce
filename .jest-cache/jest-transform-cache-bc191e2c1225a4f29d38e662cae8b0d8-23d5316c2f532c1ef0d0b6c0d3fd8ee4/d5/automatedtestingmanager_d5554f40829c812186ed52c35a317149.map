{"version":3,"names":["automatedTestingManager","cov_1q24k08i8t","f","s","default","_default","perfHooks","window","b","require","getPerformanceNow","performance","Date","now","AutomatedTestingManager","getInstance","instance","runRegressionTests","config","startTime","tests","console","log","component","components","testResult","testComponentRegression","threshold","push","api","apis","testApiRegression","duration","suite","name","totalTests","length","passedTests","filter","t","status","failedTests","skippedTests","testResults","set","currentMetrics","measureComponentPerformance","baseline","performanceBaselines","get","details","performanceDelta","renderTime","error","toFixed","current","Error","message","response","testApiEndpoint","responseTime","runPerformanceTests","testComponentPerformance","bundleTest","testBundleSize","memoryTest","testMemoryLeaks","loadTime","Math","random","memoryUsage","bundleSize","metrics","issues","join","undefined","memoryGrowth","runAccessibilityTests","pages","page","testPageAccessibility","result","runAccessibilityAudit","score","violations","floor","max","Array","from","_","i","id","impact","description","nodes","passes","incomplete","endpoint","getTestResults","getTestSummary","suites","values","reduce","sum","totalDuration","totalSuites","successRate","clearResults","clear","Map"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-testing-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - AUTOMATED TESTING MANAGER\r\n// Sistema de testing automatizado con regression, performance y accessibility\r\n// ===================================\r\n\r\n// Importar performance hooks solo en servidor\r\nconst perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null;\r\n\r\n// Helper para obtener timestamp de performance\r\nconst getPerformanceNow = (): number => {\r\n  if (typeof window !== 'undefined' && window.performance) {\r\n    return window.getPerformanceNow();\r\n  }\r\n  if (perfHooks && perfHooks.performance) {\r\n    return perfHooks.getPerformanceNow();\r\n  }\r\n  return Date.now();\r\n};\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\ninterface TestResult {\r\n  name: string;\r\n  status: 'passed' | 'failed' | 'skipped';\r\n  duration: number;\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\ninterface TestSuite {\r\n  name: string;\r\n  tests: TestResult[];\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  duration: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  loadTime: number;\r\n  renderTime: number;\r\n  memoryUsage: number;\r\n  bundleSize: number;\r\n  lighthouse?: {\r\n    performance: number;\r\n    accessibility: number;\r\n    bestPractices: number;\r\n    seo: number;\r\n  };\r\n}\r\n\r\ninterface AccessibilityResult {\r\n  violations: Array<{\r\n    id: string;\r\n    impact: 'minor' | 'moderate' | 'serious' | 'critical';\r\n    description: string;\r\n    nodes: number;\r\n  }>;\r\n  passes: number;\r\n  incomplete: number;\r\n  score: number;\r\n}\r\n\r\ninterface RegressionTestConfig {\r\n  baselineUrl?: string;\r\n  threshold: number;\r\n  components: string[];\r\n  apis: string[];\r\n}\r\n\r\n// ===================================\r\n// AUTOMATED TESTING MANAGER\r\n// ===================================\r\n\r\nclass AutomatedTestingManager {\r\n  private static instance: AutomatedTestingManager;\r\n  private testResults: Map<string, TestSuite> = new Map();\r\n  private performanceBaselines: Map<string, PerformanceMetrics> = new Map();\r\n\r\n  static getInstance(): AutomatedTestingManager {\r\n    if (!AutomatedTestingManager.instance) {\r\n      AutomatedTestingManager.instance = new AutomatedTestingManager();\r\n    }\r\n    return AutomatedTestingManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // REGRESSION TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de regresión\r\n   */\r\n  async runRegressionTests(config: RegressionTestConfig): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de regresión...');\r\n\r\n    // Test de componentes\r\n    for (const component of config.components) {\r\n      const testResult = await this.testComponentRegression(component, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de APIs\r\n    for (const api of config.apis) {\r\n      const testResult = await this.testApiRegression(api, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Regression Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('regression', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de regresión de componente\r\n   */\r\n  private async testComponentRegression(component: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de componente\r\n      const currentMetrics = await this.measureComponentPerformance(component);\r\n      const baseline = this.performanceBaselines.get(component);\r\n\r\n      if (!baseline) {\r\n        // Establecer baseline si no existe\r\n        this.performanceBaselines.set(component, currentMetrics);\r\n        return {\r\n          name: `${component} - Baseline Set`,\r\n          status: 'passed',\r\n          duration: getPerformanceNow() - startTime,\r\n          details: currentMetrics\r\n        };\r\n      }\r\n\r\n      // Comparar con baseline\r\n      const performanceDelta = (currentMetrics.renderTime - baseline.renderTime) / baseline.renderTime;\r\n      \r\n      if (performanceDelta > threshold) {\r\n        return {\r\n          name: `${component} - Performance Regression`,\r\n          status: 'failed',\r\n          duration: getPerformanceNow() - startTime,\r\n          error: `Performance degraded by ${(performanceDelta * 100).toFixed(2)}%`,\r\n          details: { current: currentMetrics, baseline }\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${component} - Performance Check`,\r\n        status: 'passed',\r\n        duration: getPerformanceNow() - startTime,\r\n        details: { current: currentMetrics, baseline }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de regresión de API\r\n   */\r\n  private async testApiRegression(api: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de API\r\n      const response = await this.testApiEndpoint(api);\r\n      const responseTime = getPerformanceNow() - startTime;\r\n\r\n      if (responseTime > threshold) {\r\n        return {\r\n          name: `${api} - Response Time`,\r\n          status: 'failed',\r\n          duration: responseTime,\r\n          error: `Response time ${responseTime.toFixed(2)}ms exceeds threshold ${threshold}ms`\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${api} - Response Time`,\r\n        status: 'passed',\r\n        duration: responseTime,\r\n        details: { responseTime, status: response.status }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${api} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // PERFORMANCE TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de performance\r\n   */\r\n  async runPerformanceTests(components: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de performance...');\r\n\r\n    for (const component of components) {\r\n      const testResult = await this.testComponentPerformance(component);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de bundle size\r\n    const bundleTest = await this.testBundleSize();\r\n    tests.push(bundleTest);\r\n\r\n    // Test de memory leaks\r\n    const memoryTest = await this.testMemoryLeaks();\r\n    tests.push(memoryTest);\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Performance Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('performance', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Medir performance de componente\r\n   */\r\n  private async measureComponentPerformance(component: string): Promise<PerformanceMetrics> {\r\n    // Simular medición de performance\r\n    return {\r\n      loadTime: Math.random() * 100 + 50, // 50-150ms\r\n      renderTime: Math.random() * 20 + 5, // 5-25ms\r\n      memoryUsage: Math.random() * 10 + 5, // 5-15MB\r\n      bundleSize: Math.random() * 50 + 20 // 20-70KB\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test de performance de componente\r\n   */\r\n  private async testComponentPerformance(component: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      const metrics = await this.measureComponentPerformance(component);\r\n      \r\n      // Verificar thresholds\r\n      const issues: string[] = [];\r\n      if (metrics.renderTime > 16) {issues.push('Render time > 16ms');}\r\n      if (metrics.memoryUsage > 50) {issues.push('Memory usage > 50MB');}\r\n      if (metrics.bundleSize > 100) {issues.push('Bundle size > 100KB');}\r\n\r\n      return {\r\n        name: `${component} - Performance`,\r\n        status: issues.length === 0 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: issues.length > 0 ? issues.join(', ') : undefined,\r\n        details: metrics\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Performance Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de bundle size\r\n   */\r\n  private async testBundleSize(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular análisis de bundle\r\n      const bundleSize = Math.random() * 1000 + 500; // 500-1500KB\r\n      const threshold = 1000; // 1MB\r\n\r\n      return {\r\n        name: 'Bundle Size Check',\r\n        status: bundleSize <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: bundleSize > threshold ? `Bundle size ${bundleSize.toFixed(2)}KB exceeds ${threshold}KB` : undefined,\r\n        details: { bundleSize, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Bundle Size Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de memory leaks\r\n   */\r\n  private async testMemoryLeaks(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de memory leaks\r\n      const memoryGrowth = Math.random() * 20; // 0-20MB growth\r\n      const threshold = 10; // 10MB threshold\r\n\r\n      return {\r\n        name: 'Memory Leak Check',\r\n        status: memoryGrowth <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: memoryGrowth > threshold ? `Memory growth ${memoryGrowth.toFixed(2)}MB exceeds ${threshold}MB` : undefined,\r\n        details: { memoryGrowth, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Memory Leak Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ACCESSIBILITY TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de accesibilidad\r\n   */\r\n  async runAccessibilityTests(pages: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de accesibilidad...');\r\n\r\n    for (const page of pages) {\r\n      const testResult = await this.testPageAccessibility(page);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Accessibility Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('accessibility', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de accesibilidad de página\r\n   */\r\n  private async testPageAccessibility(page: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de accesibilidad\r\n      const result = await this.runAccessibilityAudit(page);\r\n      \r\n      return {\r\n        name: `${page} - Accessibility`,\r\n        status: result.score >= 80 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: result.score < 80 ? `Accessibility score ${result.score}% below 80%` : undefined,\r\n        details: result\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${page} - Accessibility Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar auditoría de accesibilidad\r\n   */\r\n  private async runAccessibilityAudit(page: string): Promise<AccessibilityResult> {\r\n    // Simular auditoría de accesibilidad\r\n    const violations = Math.floor(Math.random() * 5); // 0-4 violations\r\n    const score = Math.max(60, 100 - (violations * 10)); // 60-100% score\r\n\r\n    return {\r\n      violations: Array.from({ length: violations }, (_, i) => ({\r\n        id: `violation-${i}`,\r\n        impact: ['minor', 'moderate', 'serious', 'critical'][Math.floor(Math.random() * 4)] as any,\r\n        description: `Accessibility violation ${i + 1}`,\r\n        nodes: Math.floor(Math.random() * 5) + 1\r\n      })),\r\n      passes: Math.floor(Math.random() * 20) + 10,\r\n      incomplete: Math.floor(Math.random() * 3),\r\n      score\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // UTILITY METHODS\r\n  // ===================================\r\n\r\n  /**\r\n   * Test de endpoint de API\r\n   */\r\n  private async testApiEndpoint(endpoint: string): Promise<{ status: number; responseTime: number }> {\r\n    // Simular llamada a API\r\n    const responseTime = Math.random() * 200 + 50; // 50-250ms\r\n    const status = Math.random() > 0.1 ? 200 : 500; // 90% success rate\r\n\r\n    return { status, responseTime };\r\n  }\r\n\r\n  /**\r\n   * Obtener resultados de tests\r\n   */\r\n  getTestResults(): Map<string, TestSuite> {\r\n    return this.testResults;\r\n  }\r\n\r\n  /**\r\n   * Obtener resumen de tests\r\n   */\r\n  getTestSummary() {\r\n    const suites = Array.from(this.testResults.values());\r\n    const totalTests = suites.reduce((sum, suite) => sum + suite.totalTests, 0);\r\n    const passedTests = suites.reduce((sum, suite) => sum + suite.passedTests, 0);\r\n    const failedTests = suites.reduce((sum, suite) => sum + suite.failedTests, 0);\r\n    const totalDuration = suites.reduce((sum, suite) => sum + suite.duration, 0);\r\n\r\n    return {\r\n      totalSuites: suites.length,\r\n      totalTests,\r\n      passedTests,\r\n      failedTests,\r\n      successRate: totalTests > 0 ? (passedTests / totalTests) * 100 : 0,\r\n      totalDuration\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Limpiar resultados\r\n   */\r\n  clearResults(): void {\r\n    this.testResults.clear();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport const automatedTestingManager = AutomatedTestingManager.getInstance();\r\n\r\nexport default {\r\n  automatedTestingManager,\r\n  AutomatedTestingManager\r\n};\r\n\r\nexport type {\r\n  TestResult,\r\n  TestSuite,\r\n  PerformanceMetrics,\r\n  AccessibilityResult,\r\n  RegressionTestConfig\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}