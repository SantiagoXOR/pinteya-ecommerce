34942cc0f6c2a3eeb58edd32a52df19b
/**
 * Componente de navegación GPS en tiempo real para drivers
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return LiveNavigationMap;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _api = require("@react-google-maps/api");
const _card = require("../ui/card");
const _button = require("../ui/button");
const _badge = require("../ui/badge");
const _lucidereact = require("lucide-react");
const _sonner = require("sonner");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mapContainerStyle = {
    width: '100%',
    height: '400px'
};
const defaultCenter = {
    lat: -31.4201,
    lng: -64.1888
};
function LiveNavigationMap({ stops, onCompleteDelivery, onNavigationUpdate }) {
    const [currentLocation, setCurrentLocation] = (0, _react.useState)(null);
    const [directions, setDirections] = (0, _react.useState)(null);
    const [currentStopIndex, setCurrentStopIndex] = (0, _react.useState)(0);
    const [selectedStop, setSelectedStop] = (0, _react.useState)(null);
    const [isNavigating, setIsNavigating] = (0, _react.useState)(false);
    const [watchId, setWatchId] = (0, _react.useState)(null);
    const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = (0, _react.useState)(false);
    const mapRef = (0, _react.useRef)(null);
    (0, _react.useEffect)(()=>{
        // Verificar si Google Maps está cargado
        const checkGoogleMaps = ()=>{
            if (window.google && window.google.maps) {
                setIsGoogleMapsLoaded(true);
            } else {
                setTimeout(checkGoogleMaps, 100);
            }
        };
        checkGoogleMaps();
    }, []);
    (0, _react.useEffect)(()=>{
        // Solicitar ubicación actual
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position)=>{
                const location = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                setCurrentLocation(location);
                if (onNavigationUpdate) {
                    onNavigationUpdate(location);
                }
            }, (error)=>{
                console.error('Error getting location:', error);
                _sonner.toast.error('No se pudo obtener la ubicación actual');
                // Usar ubicación por defecto (Córdoba)
                setCurrentLocation(defaultCenter);
            });
        }
    }, [
        onNavigationUpdate
    ]);
    (0, _react.useEffect)(()=>{
        if (currentLocation && stops.length > 0) {
            calculateRoute();
        }
    }, [
        currentLocation,
        stops,
        currentStopIndex
    ]);
    const calculateRoute = async ()=>{
        if (!currentLocation || !window.google || !window.google.maps) return;
        const directionsService = new google.maps.DirectionsService();
        const currentStop = stops.find((stop)=>stop.status === 'current');
        if (!currentStop || !currentStop.coordinates) {
            setDirections(null);
            return;
        }
        console.log('🗺️ Calculando ruta GPS desde:', currentLocation, 'hacia:', currentStop.coordinates);
        try {
            const result = await directionsService.route({
                origin: currentLocation,
                destination: currentStop.coordinates,
                travelMode: google.maps.TravelMode.DRIVING,
                optimizeWaypoints: false,
                avoidHighways: false,
                avoidTolls: false,
                unitSystem: google.maps.UnitSystem.METRIC,
                language: 'es',
                region: 'AR'
            });
            console.log('✅ Ruta GPS calculada exitosamente:', result);
            setDirections(result);
            // Extraer información de navegación
            const route = result.routes[0];
            const leg = route.legs[0];
            console.log('📊 Información de ruta:', {
                distance: leg.distance?.text,
                duration: leg.duration?.text,
                steps: leg.steps.length
            });
        } catch (error) {
            console.error('❌ Error calculating route:', error);
            _sonner.toast.error('Error al calcular la ruta GPS');
        }
    };
    const startNavigation = ()=>{
        if (!navigator.geolocation) {
            _sonner.toast.error('Geolocalización no disponible');
            return;
        }
        setIsNavigating(true);
        const id = navigator.geolocation.watchPosition((position)=>{
            const location = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            setCurrentLocation(location);
            if (onNavigationUpdate) {
                onNavigationUpdate(location);
            }
            // Verificar si llegamos cerca del destino actual
            const currentStop = stops.find((stop)=>stop.status === 'current' || stop.status === 'pending' && stop.sequence === currentStopIndex + 1);
            if (currentStop && currentStop.coordinates) {
                const distance = calculateDistance(location, currentStop.coordinates);
                if (distance < 0.1) {
                    // 100 metros
                    _sonner.toast.success(`Has llegado a ${currentStop.address}`);
                }
            }
        }, (error)=>{
            console.error('Error watching location:', error);
            _sonner.toast.error('Error al seguir la ubicación');
        }, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 60000
        });
        setWatchId(id);
        _sonner.toast.success('Navegación iniciada');
    };
    const stopNavigation = ()=>{
        if (watchId) {
            navigator.geolocation.clearWatch(watchId);
            setWatchId(null);
        }
        setIsNavigating(false);
        _sonner.toast.info('Navegación detenida');
    };
    const handleCompleteDelivery = async (stop)=>{
        try {
            const response = await fetch('/api/driver/complete-delivery', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: stop.orderId,
                    deliveryLocation: currentLocation,
                    deliveryTime: new Date().toISOString(),
                    deliveryNotes: `Entregado en ${stop.address}`
                })
            });
            if (!response.ok) {
                throw new Error('Error al completar la entrega');
            }
            const result = await response.json();
            if (result.success) {
                _sonner.toast.success(`Entrega completada: ${stop.orderNumber}`);
                onCompleteDelivery(stop.orderId);
                setCurrentStopIndex((prev)=>prev + 1);
                setSelectedStop(null);
            } else {
                throw new Error(result.error || 'Error desconocido');
            }
        } catch (error) {
            console.error('Error completing delivery:', error);
            _sonner.toast.error('Error al completar la entrega');
        }
    };
    const calculateDistance = (pos1, pos2)=>{
        const R = 6371 // Radio de la Tierra en km
        ;
        const dLat = (pos2.lat - pos1.lat) * Math.PI / 180;
        const dLon = (pos2.lng - pos1.lng) * Math.PI / 180;
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(pos1.lat * Math.PI / 180) * Math.cos(pos2.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    };
    const formatCurrency = (amount)=>{
        return new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS'
        }).format(amount);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "space-y-4",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center justify-between",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center gap-2",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Navigation, {
                                            className: "h-5 w-5"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                            className: "font-medium",
                                            children: [
                                                selectedOrders.size,
                                                " de ",
                                                orders.length,
                                                " \xf3rdenes seleccionadas"
                                            ]
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "flex gap-2",
                                    children: !isNavigating ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        onClick: startNavigation,
                                        size: "sm",
                                        children: "Iniciar Navegaci\xf3n"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        onClick: stopNavigation,
                                        variant: "outline",
                                        size: "sm",
                                        children: "Detener"
                                    })
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between text-sm",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Paradas restantes: ",
                                        stops.filter((s)=>s.status === 'pending').length
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    children: [
                                        "Completadas: ",
                                        stops.filter((s)=>s.status === 'completed').length
                                    ]
                                })
                            ]
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.Card, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                    className: "p-0",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_api.GoogleMap, {
                        mapContainerStyle: mapContainerStyle,
                        center: currentLocation || defaultCenter,
                        zoom: 13,
                        onLoad: (map)=>{
                            mapRef.current = map;
                        },
                        children: [
                            directions && /*#__PURE__*/ (0, _jsxruntime.jsx)(_api.DirectionsRenderer, {
                                directions: directions,
                                options: {
                                    suppressMarkers: false,
                                    polylineOptions: {
                                        strokeColor: '#2563eb',
                                        strokeWeight: 4
                                    }
                                }
                            }),
                            currentLocation && window.google && window.google.maps && /*#__PURE__*/ (0, _jsxruntime.jsx)(_api.Marker, {
                                position: currentLocation,
                                icon: {
                                    url: '/icons/current-location.png',
                                    scaledSize: new google.maps.Size(30, 30)
                                },
                                title: "Tu ubicaci\xf3n"
                            }),
                            window.google && window.google.maps && stops.map((stop)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_api.Marker, {
                                    position: stop.coordinates || {
                                        lat: 0,
                                        lng: 0
                                    },
                                    onClick: ()=>setSelectedStop(stop),
                                    icon: {
                                        url: stop.status === 'completed' ? '/icons/marker-green.png' : stop.status === 'current' ? '/icons/marker-blue.png' : '/icons/marker-red.png',
                                        scaledSize: new google.maps.Size(25, 25)
                                    },
                                    title: `${stop.orderNumber} - ${stop.address}`
                                }, stop.orderId)),
                            selectedStop && selectedStop.coordinates && /*#__PURE__*/ (0, _jsxruntime.jsx)(_api.InfoWindow, {
                                position: selectedStop.coordinates,
                                onCloseClick: ()=>setSelectedStop(null),
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "p-2 max-w-xs",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                            className: "font-semibold",
                                            children: selectedStop.orderNumber
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-sm text-gray-600",
                                            children: selectedStop.address
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                            className: "text-sm",
                                            children: [
                                                "Total: ",
                                                formatCurrency(selectedStop.total)
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                            className: "text-sm",
                                            children: [
                                                "Items: ",
                                                selectedStop.items
                                            ]
                                        }),
                                        selectedStop.status === 'pending' && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_button.Button, {
                                            size: "sm",
                                            className: "mt-2 w-full",
                                            onClick: ()=>handleCompleteDelivery(selectedStop),
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                                    className: "h-4 w-4 mr-1"
                                                }),
                                                "Completar Entrega"
                                            ]
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.Card, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardHeader, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_card.CardTitle, {
                            className: "flex items-center gap-2",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Navigation, {
                                    className: "h-5 w-5"
                                }),
                                "Paradas del Recorrido"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_card.CardContent, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "space-y-3",
                            children: stops.map((stop, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: `p-3 rounded-lg border ${stop.status === 'completed' ? 'bg-green-50 border-green-200' : stop.status === 'current' ? 'bg-blue-50 border-blue-200' : 'bg-gray-50 border-gray-200'}`,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center justify-between",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-3",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: `w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${stop.status === 'completed' ? 'bg-green-500 text-white' : stop.status === 'current' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-700'}`,
                                                        children: stop.sequence
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                                className: "font-medium",
                                                                children: stop.orderNumber
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                                className: "text-sm text-gray-600",
                                                                children: stop.address
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                                                className: "text-sm",
                                                                children: [
                                                                    formatCurrency(stop.total),
                                                                    " • ",
                                                                    stop.items,
                                                                    " items"
                                                                ]
                                                            })
                                                        ]
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center gap-2",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                        variant: stop.status === 'completed' ? 'default' : stop.status === 'current' ? 'secondary' : 'outline',
                                                        children: stop.status === 'completed' ? 'Completada' : stop.status === 'current' ? 'Actual' : 'Pendiente'
                                                    }),
                                                    stop.status === 'pending' && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                                        size: "sm",
                                                        variant: "outline",
                                                        onClick: ()=>handleCompleteDelivery(stop),
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                                            className: "h-4 w-4"
                                                        })
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }, stop.orderId))
                        })
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,