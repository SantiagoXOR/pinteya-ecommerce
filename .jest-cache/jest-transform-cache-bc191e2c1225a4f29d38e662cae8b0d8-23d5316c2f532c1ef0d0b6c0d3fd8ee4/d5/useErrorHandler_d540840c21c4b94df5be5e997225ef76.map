{"version":3,"names":["default","cov_hznh5utj7","f","s","_default","useApiErrorHandler","useCriticalErrorHandler","useErrorHandler","useSilentErrorHandler","options","b","maxRetries","enableAutoRetry","retryDelay","showToasts","onError","onRecover","onRetry","errorState","setErrorState","_react","useState","error","isLoading","hasError","retryCount","lastAttempt","lastOperationRef","useRef","retryTimeoutRef","contextRef","executeWithErrorHandling","useCallback","operation","context","current","prev","result","_ApiErrorHandler","withErrorHandling","endpoint","method","enableToasts","enableRetry","apiError","Date","now","isRetryable","scheduleAutoRetry","retry","newRetryCount","clearError","clearTimeout","setLoading","loading","delay","Math","pow","setTimeout","retryable","undefined","status","getErrorMessage","errorMessages","code","message","isRetryableError","useEffect","canRetry"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\error-handling\\useErrorHandler.ts"],"sourcesContent":["// ===================================\r\n// HOOK DE MANEJO DE ERRORES\r\n// ===================================\r\n// Hook React para manejo consistente de errores en componentes\r\n// con retry logic, estados de loading y user feedback\r\n\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\n// import { toast } from 'react-hot-toast';\r\nimport { ApiError, withErrorHandling } from '@/lib/error-handling/ApiErrorHandler';\r\n\r\n// ===================================\r\n// TIPOS E INTERFACES\r\n// ===================================\r\n\r\nexport interface ErrorState {\r\n  error: ApiError | null;\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  retryCount: number;\r\n  lastAttempt: number;\r\n}\r\n\r\nexport interface UseErrorHandlerOptions {\r\n  /** Máximo número de reintentos automáticos */\r\n  maxRetries?: number;\r\n  /** Habilitar reintentos automáticos */\r\n  enableAutoRetry?: boolean;\r\n  /** Delay entre reintentos (ms) */\r\n  retryDelay?: number;\r\n  /** Mostrar toasts de error */\r\n  showToasts?: boolean;\r\n  /** Callback cuando ocurre un error */\r\n  onError?: (error: ApiError) => void;\r\n  /** Callback cuando se recupera del error */\r\n  onRecover?: () => void;\r\n  /** Callback antes de reintentar */\r\n  onRetry?: (retryCount: number) => void;\r\n}\r\n\r\nexport interface UseErrorHandlerReturn {\r\n  // Estado\r\n  error: ApiError | null;\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  retryCount: number;\r\n  canRetry: boolean;\r\n  \r\n  // Funciones\r\n  executeWithErrorHandling: <T>(\r\n    operation: () => Promise<T>,\r\n    context?: string\r\n  ) => Promise<T | null>;\r\n  retry: () => Promise<void>;\r\n  clearError: () => void;\r\n  setLoading: (loading: boolean) => void;\r\n  \r\n  // Utilidades\r\n  getErrorMessage: () => string;\r\n  isRetryableError: () => boolean;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useErrorHandler(\r\n  options: UseErrorHandlerOptions = {}\r\n): UseErrorHandlerReturn {\r\n  \r\n  const {\r\n    maxRetries = 3,\r\n    enableAutoRetry = false,\r\n    retryDelay = 1000,\r\n    showToasts = true,\r\n    onError,\r\n    onRecover,\r\n    onRetry,\r\n  } = options;\r\n\r\n  // Estado del error\r\n  const [errorState, setErrorState] = useState<ErrorState>({\r\n    error: null,\r\n    isLoading: false,\r\n    hasError: false,\r\n    retryCount: 0,\r\n    lastAttempt: 0,\r\n  });\r\n\r\n  // Referencias para operaciones asíncronas\r\n  const lastOperationRef = useRef<(() => Promise<any>) | null>(null);\r\n  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const contextRef = useRef<string>('');\r\n\r\n  // ===================================\r\n  // FUNCIONES PRINCIPALES\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecuta una operación con manejo de errores\r\n   */\r\n  const executeWithErrorHandling = useCallback(async <T>(\r\n    operation: () => Promise<T>,\r\n    context: string = 'operation'\r\n  ): Promise<T | null> => {\r\n    // Guardar referencia para posibles reintentos\r\n    lastOperationRef.current = operation;\r\n    contextRef.current = context;\r\n\r\n    // Limpiar error anterior\r\n    setErrorState(prev => ({\r\n      ...prev,\r\n      error: null,\r\n      hasError: false,\r\n      isLoading: true,\r\n    }));\r\n\r\n    try {\r\n      const result = await withErrorHandling(\r\n        operation,\r\n        {\r\n          endpoint: context,\r\n          method: 'GET', // Por defecto, se puede personalizar\r\n        },\r\n        {\r\n          enableToasts: showToasts,\r\n          enableRetry: false, // Manejamos retry manualmente\r\n        }\r\n      );\r\n\r\n      // Operación exitosa\r\n      setErrorState(prev => ({\r\n        ...prev,\r\n        error: null,\r\n        hasError: false,\r\n        isLoading: false,\r\n        retryCount: 0,\r\n      }));\r\n\r\n      // Callback de recuperación si había error previo\r\n      if (errorState.hasError && onRecover) {\r\n        onRecover();\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const apiError = error as ApiError;\r\n      \r\n      // Actualizar estado de error\r\n      setErrorState(prev => ({\r\n        ...prev,\r\n        error: apiError,\r\n        hasError: true,\r\n        isLoading: false,\r\n        lastAttempt: Date.now(),\r\n      }));\r\n\r\n      // Callback de error\r\n      if (onError) {\r\n        onError(apiError);\r\n      }\r\n\r\n      // Retry automático si está habilitado\r\n      if (enableAutoRetry && isRetryable(apiError) && errorState.retryCount < maxRetries) {\r\n        scheduleAutoRetry();\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, [\r\n    showToasts, \r\n    onError, \r\n    onRecover, \r\n    enableAutoRetry, \r\n    maxRetries, \r\n    errorState.hasError, \r\n    errorState.retryCount\r\n  ]);\r\n\r\n  /**\r\n   * Reintenta la última operación\r\n   */\r\n  const retry = useCallback(async (): Promise<void> => {\r\n    if (!lastOperationRef.current || errorState.retryCount >= maxRetries) {\r\n      return;\r\n    }\r\n\r\n    const newRetryCount = errorState.retryCount + 1;\r\n    \r\n    // Callback antes de reintentar\r\n    if (onRetry) {\r\n      onRetry(newRetryCount);\r\n    }\r\n\r\n    // Actualizar contador de reintentos\r\n    setErrorState(prev => ({\r\n      ...prev,\r\n      retryCount: newRetryCount,\r\n      isLoading: true,\r\n    }));\r\n\r\n    // Ejecutar operación nuevamente\r\n    await executeWithErrorHandling(lastOperationRef.current, contextRef.current);\r\n  }, [errorState.retryCount, maxRetries, onRetry, executeWithErrorHandling]);\r\n\r\n  /**\r\n   * Limpia el estado de error\r\n   */\r\n  const clearError = useCallback(() => {\r\n    setErrorState({\r\n      error: null,\r\n      isLoading: false,\r\n      hasError: false,\r\n      retryCount: 0,\r\n      lastAttempt: 0,\r\n    });\r\n\r\n    // Limpiar timeout de retry\r\n    if (retryTimeoutRef.current) {\r\n      clearTimeout(retryTimeoutRef.current);\r\n      retryTimeoutRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Establece estado de loading manualmente\r\n   */\r\n  const setLoading = useCallback((loading: boolean) => {\r\n    setErrorState(prev => ({\r\n      ...prev,\r\n      isLoading: loading,\r\n    }));\r\n  }, []);\r\n\r\n  // ===================================\r\n  // FUNCIONES AUXILIARES\r\n  // ===================================\r\n\r\n  /**\r\n   * Programa un retry automático\r\n   */\r\n  const scheduleAutoRetry = useCallback(() => {\r\n    if (retryTimeoutRef.current) {\r\n      clearTimeout(retryTimeoutRef.current);\r\n    }\r\n\r\n    const delay = retryDelay * Math.pow(2, errorState.retryCount); // Exponential backoff\r\n    \r\n    retryTimeoutRef.current = setTimeout(() => {\r\n      retry();\r\n    }, delay);\r\n  }, [retryDelay, errorState.retryCount, retry]);\r\n\r\n  /**\r\n   * Determina si un error es reintentable\r\n   */\r\n  const isRetryable = useCallback((error: ApiError): boolean => {\r\n    if (error.retryable !== undefined) {\r\n      return error.retryable;\r\n    }\r\n\r\n    // Errores de red son reintentables\r\n    if (!error.status || error.status >= 500) {\r\n      return true;\r\n    }\r\n\r\n    // Rate limiting es reintentable\r\n    if (error.status === 429) {\r\n      return true;\r\n    }\r\n\r\n    // Timeouts son reintentables\r\n    if (error.status === 408) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }, []);\r\n\r\n  /**\r\n   * Obtiene mensaje de error user-friendly\r\n   */\r\n  const getErrorMessage = useCallback((): string => {\r\n    if (!errorState.error) {\r\n      return '';\r\n    }\r\n\r\n    const error = errorState.error;\r\n\r\n    // Mensajes específicos por código de error\r\n    const errorMessages: Record<string, string> = {\r\n      'NETWORK_ERROR': 'Error de conexión. Verifica tu internet.',\r\n      'TIMEOUT': 'La operación tardó demasiado. Intenta de nuevo.',\r\n      'UNAUTHORIZED': 'Sesión expirada. Inicia sesión nuevamente.',\r\n      'FORBIDDEN': 'No tienes permisos para esta acción.',\r\n      'NOT_FOUND': 'El recurso solicitado no existe.',\r\n      'RATE_LIMITED': 'Demasiadas solicitudes. Espera un momento.',\r\n      'SERVER_ERROR': 'Error del servidor. Intenta más tarde.',\r\n    };\r\n\r\n    if (error.code && errorMessages[error.code]) {\r\n      return errorMessages[error.code];\r\n    }\r\n\r\n    // Mensajes por status HTTP\r\n    if (error.status) {\r\n      if (error.status >= 500) {\r\n        return 'Error del servidor. Intenta más tarde.';\r\n      }\r\n      if (error.status === 404) {\r\n        return 'Recurso no encontrado.';\r\n      }\r\n      if (error.status === 401) {\r\n        return 'Sesión expirada. Inicia sesión nuevamente.';\r\n      }\r\n      if (error.status === 403) {\r\n        return 'No tienes permisos para esta acción.';\r\n      }\r\n    }\r\n\r\n    // Mensaje genérico\r\n    return error.message || 'Ocurrió un error inesperado.';\r\n  }, [errorState.error]);\r\n\r\n  /**\r\n   * Verifica si el error actual es reintentable\r\n   */\r\n  const isRetryableError = useCallback((): boolean => {\r\n    if (!errorState.error) {\r\n      return false;\r\n    }\r\n    return isRetryable(errorState.error);\r\n  }, [errorState.error, isRetryable]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // Cleanup al desmontar\r\n  useEffect(() => {\r\n    return () => {\r\n      if (retryTimeoutRef.current) {\r\n        clearTimeout(retryTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    error: errorState.error,\r\n    isLoading: errorState.isLoading,\r\n    hasError: errorState.hasError,\r\n    retryCount: errorState.retryCount,\r\n    canRetry: errorState.retryCount < maxRetries && isRetryableError(),\r\n    \r\n    // Funciones\r\n    executeWithErrorHandling,\r\n    retry,\r\n    clearError,\r\n    setLoading,\r\n    \r\n    // Utilidades\r\n    getErrorMessage,\r\n    isRetryableError,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOKS ESPECIALIZADOS\r\n// ===================================\r\n\r\n/**\r\n * Hook para operaciones de API con manejo de errores\r\n */\r\nexport function useApiErrorHandler(options?: UseErrorHandlerOptions) {\r\n  return useErrorHandler({\r\n    maxRetries: 3,\r\n    enableAutoRetry: false,\r\n    showToasts: true,\r\n    ...options,\r\n  });\r\n}\r\n\r\n/**\r\n * Hook para operaciones críticas con retry automático\r\n */\r\nexport function useCriticalErrorHandler(options?: UseErrorHandlerOptions) {\r\n  return useErrorHandler({\r\n    maxRetries: 5,\r\n    enableAutoRetry: true,\r\n    retryDelay: 2000,\r\n    showToasts: true,\r\n    ...options,\r\n  });\r\n}\r\n\r\n/**\r\n * Hook para operaciones silenciosas (sin toasts)\r\n */\r\nexport function useSilentErrorHandler(options?: UseErrorHandlerOptions) {\r\n  return useErrorHandler({\r\n    maxRetries: 2,\r\n    enableAutoRetry: false,\r\n    showToasts: false,\r\n    ...options,\r\n  });\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport type { ErrorState, UseErrorHandlerOptions, UseErrorHandlerReturn };\r\nexport default useErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}