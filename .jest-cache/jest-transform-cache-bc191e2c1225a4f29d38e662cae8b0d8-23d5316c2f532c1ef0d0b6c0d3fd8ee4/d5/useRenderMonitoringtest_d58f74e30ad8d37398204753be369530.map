{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useRenderMonitoring.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - UNIT TESTS\r\n// Pruebas unitarias para useRenderMonitoring\r\n// ===================================\r\n\r\nimport { renderHook, act } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\nimport { useRenderMonitoring, withRenderMonitoring } from '@/hooks/monitoring/useRenderMonitoring';\r\nimport React from 'react';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock de performance.now()\r\nconst mockPerformanceNow = jest.fn();\r\nObject.defineProperty(global, 'performance', {\r\n  value: {\r\n    now: mockPerformanceNow,\r\n    memory: {\r\n      usedJSHeapSize: 50 * 1024 * 1024 // 50MB\r\n    }\r\n  },\r\n  writable: true\r\n});\r\n\r\n// Mock de console\r\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});\r\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n// Mock de localStorage\r\nconst mockLocalStorage = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn()\r\n};\r\nObject.defineProperty(global, 'localStorage', {\r\n  value: mockLocalStorage,\r\n  writable: true\r\n});\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockPerformanceNow.mockReturnValue(1000);\r\n  mockLocalStorage.getItem.mockReturnValue(null);\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS PRINCIPALES\r\n// ===================================\r\n\r\ndescribe('useRenderMonitoring', () => {\r\n  describe('Inicialización', () => {\r\n    it('debe inicializar con configuración por defecto', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent'\r\n        })\r\n      );\r\n\r\n      expect(result.current.isEnabled).toBe(true);\r\n      expect(result.current.metrics).toBeDefined();\r\n      expect(result.current.alerts).toEqual([]);\r\n      expect(typeof result.current.trackError).toBe('function');\r\n    });\r\n\r\n    it('debe respetar la configuración personalizada', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enabled: false,\r\n          enableConsoleLogging: false,\r\n          enableToasts: false\r\n        })\r\n      );\r\n\r\n      expect(result.current.isEnabled).toBe(false);\r\n    });\r\n\r\n    it('debe aplicar thresholds personalizados', () => {\r\n      const customThresholds = {\r\n        slowRenderThreshold: 20,\r\n        maxRenderCount: 50,\r\n        memoryThreshold: 100,\r\n        errorThreshold: 5\r\n      };\r\n\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: customThresholds\r\n        })\r\n      );\r\n\r\n      expect(result.current.isEnabled).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Tracking de renders', () => {\r\n    it('debe trackear renders correctamente', () => {\r\n      let renderCount = 0;\r\n      mockPerformanceNow\r\n        .mockReturnValueOnce(1000) // Inicio del render\r\n        .mockReturnValueOnce(1010); // Fin del render (10ms)\r\n\r\n      const { result, rerender } = renderHook(() => {\r\n        renderCount++;\r\n        return useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enableConsoleLogging: true\r\n        });\r\n      });\r\n\r\n      // Forzar re-render\r\n      rerender();\r\n\r\n      expect(result.current.metrics?.renderCount).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe detectar renders lentos', () => {\r\n      mockPerformanceNow\r\n        .mockReturnValueOnce(1000) // Inicio\r\n        .mockReturnValueOnce(1100); // Fin (100ms - lento)\r\n\r\n      const { result, rerender } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            slowRenderThreshold: 50 // 50ms threshold\r\n          }\r\n        })\r\n      );\r\n\r\n      rerender();\r\n\r\n      expect(result.current.metrics?.slowRenders).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('debe calcular tiempo promedio de render', () => {\r\n      // Simular múltiples renders con diferentes tiempos\r\n      mockPerformanceNow\r\n        .mockReturnValueOnce(1000).mockReturnValueOnce(1010) // 10ms\r\n        .mockReturnValueOnce(2000).mockReturnValueOnce(2020) // 20ms\r\n        .mockReturnValueOnce(3000).mockReturnValueOnce(3030); // 30ms\r\n\r\n      const { result, rerender } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent'\r\n        })\r\n      );\r\n\r\n      rerender();\r\n      rerender();\r\n      rerender();\r\n\r\n      // Promedio debería ser (10 + 20 + 30) / 3 = 20ms\r\n      expect(result.current.metrics?.averageRenderTime).toBeCloseTo(20, 1);\r\n    });\r\n  });\r\n\r\n  describe('Tracking de errores', () => {\r\n    it('debe trackear errores correctamente', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent'\r\n        })\r\n      );\r\n\r\n      const testError = new Error('Test error');\r\n      \r\n      act(() => {\r\n        result.current.trackError(testError, {\r\n          action: 'test_action',\r\n          context: 'test_context'\r\n        });\r\n      });\r\n\r\n      expect(result.current.metrics?.errorCount).toBe(1);\r\n    });\r\n\r\n    it('debe generar alertas por errores frecuentes', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            errorThreshold: 2 // 2 errores por minuto\r\n          }\r\n        })\r\n      );\r\n\r\n      const testError = new Error('Test error');\r\n      \r\n      act(() => {\r\n        // Generar múltiples errores\r\n        result.current.trackError(testError);\r\n        result.current.trackError(testError);\r\n        result.current.trackError(testError);\r\n      });\r\n\r\n      expect(result.current.alerts.length).toBeGreaterThan(0);\r\n      expect(result.current.alerts[0].type).toBe('high_error_rate');\r\n    });\r\n  });\r\n\r\n  describe('Monitoreo de memoria', () => {\r\n    it('debe trackear uso de memoria', () => {\r\n      // Mock de performance.memory con alto uso\r\n      Object.defineProperty(global.performance, 'memory', {\r\n        value: {\r\n          usedJSHeapSize: 150 * 1024 * 1024 // 150MB\r\n        },\r\n        configurable: true\r\n      });\r\n\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            memoryThreshold: 100 // 100MB threshold\r\n          }\r\n        })\r\n      );\r\n\r\n      expect(result.current.metrics?.memoryUsage).toBeGreaterThan(100);\r\n    });\r\n\r\n    it('debe generar alertas por alto uso de memoria', () => {\r\n      Object.defineProperty(global.performance, 'memory', {\r\n        value: {\r\n          usedJSHeapSize: 200 * 1024 * 1024 // 200MB\r\n        },\r\n        configurable: true\r\n      });\r\n\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            memoryThreshold: 100 // 100MB threshold\r\n          }\r\n        })\r\n      );\r\n\r\n      expect(result.current.alerts.some(alert => \r\n        alert.type === 'high_memory_usage'\r\n      )).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Sistema de alertas', () => {\r\n    it('debe generar alertas con severidad correcta', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            errorThreshold: 1\r\n          }\r\n        })\r\n      );\r\n\r\n      act(() => {\r\n        result.current.trackError(new Error('Critical error'));\r\n      });\r\n\r\n      const alert = result.current.alerts[0];\r\n      expect(alert).toBeDefined();\r\n      expect(['low', 'medium', 'high', 'critical']).toContain(alert.severity);\r\n    });\r\n\r\n    it('debe limpiar alertas resueltas', () => {\r\n      jest.useFakeTimers();\r\n\r\n      const { result } = renderHook(() =>\r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            errorThreshold: 1\r\n          }\r\n        })\r\n      );\r\n\r\n      act(() => {\r\n        result.current.trackError(new Error('Test error'));\r\n      });\r\n\r\n      expect(result.current.alerts.length).toBeGreaterThan(0);\r\n\r\n      // Avanzar tiempo para que las alertas se resuelvan automáticamente\r\n      act(() => {\r\n        jest.advanceTimersByTime(5 * 60 * 1000); // 5 minutos\r\n      });\r\n\r\n      // Las alertas deberían estar marcadas como resueltas o eliminadas\r\n      const unresolvedAlerts = result.current.alerts.filter(a => !a.resolved);\r\n      expect(unresolvedAlerts.length).toBeLessThanOrEqual(result.current.alerts.length);\r\n\r\n      jest.useRealTimers();\r\n    });\r\n  });\r\n\r\n  describe('Persistencia de datos', () => {\r\n    it('debe guardar métricas en localStorage', () => {\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enablePersistence: true\r\n        })\r\n      );\r\n\r\n      act(() => {\r\n        result.current.trackError(new Error('Test error'));\r\n      });\r\n\r\n      expect(mockLocalStorage.setItem).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debe cargar métricas desde localStorage', () => {\r\n      const savedMetrics = {\r\n        renderCount: 10,\r\n        errorCount: 2,\r\n        slowRenders: 1,\r\n        averageRenderTime: 15.5,\r\n        memoryUsage: 75.2\r\n      };\r\n\r\n      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(savedMetrics));\r\n\r\n      const { result } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enablePersistence: true\r\n        })\r\n      );\r\n\r\n      expect(result.current.metrics?.renderCount).toBe(10);\r\n      expect(result.current.metrics?.errorCount).toBe(2);\r\n    });\r\n  });\r\n\r\n  describe('Configuración dinámica', () => {\r\n    it('debe permitir habilitar/deshabilitar monitoreo', () => {\r\n      const { result, rerender } = renderHook(\r\n        ({ enabled }) => useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enabled\r\n        }),\r\n        { initialProps: { enabled: true } }\r\n      );\r\n\r\n      expect(result.current.isEnabled).toBe(true);\r\n\r\n      rerender({ enabled: false });\r\n      expect(result.current.isEnabled).toBe(false);\r\n    });\r\n\r\n    it('debe actualizar thresholds dinámicamente', () => {\r\n      const { result, rerender } = renderHook(\r\n        ({ threshold }) => useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          thresholds: {\r\n            slowRenderThreshold: threshold\r\n          }\r\n        }),\r\n        { initialProps: { threshold: 16 } }\r\n      );\r\n\r\n      // Cambiar threshold\r\n      rerender({ threshold: 50 });\r\n\r\n      // El hook debería usar el nuevo threshold\r\n      expect(result.current.isEnabled).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Logging y debugging', () => {\r\n    it('debe loggear información cuando está habilitado', () => {\r\n      const { result, rerender } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enableConsoleLogging: true\r\n        })\r\n      );\r\n\r\n      rerender(); // Forzar re-render\r\n\r\n      expect(mockConsoleLog).toHaveBeenCalled();\r\n    });\r\n\r\n    it('no debe loggear cuando está deshabilitado', () => {\r\n      mockConsoleLog.mockClear();\r\n\r\n      const { result, rerender } = renderHook(() => \r\n        useRenderMonitoring({\r\n          componentName: 'TestComponent',\r\n          enableConsoleLogging: false\r\n        })\r\n      );\r\n\r\n      rerender();\r\n\r\n      expect(mockConsoleLog).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS PARA HOC\r\n// ===================================\r\n\r\ndescribe('withRenderMonitoring HOC', () => {\r\n  it('debe envolver componente correctamente', () => {\r\n    const TestComponent: React.FC<{ title: string }> = ({ title }) => {\r\n      return React.createElement('div', null, title);\r\n    };\r\n\r\n    const WrappedComponent = withRenderMonitoring(TestComponent, {\r\n      enabled: true,\r\n      enableConsoleLogging: true\r\n    });\r\n\r\n    expect(WrappedComponent).toBeDefined();\r\n    expect(typeof WrappedComponent).toBe('function');\r\n  });\r\n\r\n  it('debe pasar props correctamente al componente envuelto', () => {\r\n    const TestComponent: React.FC<{ title: string; count: number }> = ({ title, count }) => {\r\n      return React.createElement('div', null, `${title}: ${count}`);\r\n    };\r\n\r\n    const WrappedComponent = withRenderMonitoring(TestComponent, {\r\n      enabled: true\r\n    });\r\n\r\n    const { container } = render(\r\n      React.createElement(WrappedComponent, { title: 'Test', count: 42 })\r\n    );\r\n\r\n    expect(container.textContent).toBe('Test: 42');\r\n  });\r\n});\r\n\r\n// Helper para render (simplificado para el test)\r\nfunction render(element: React.ReactElement) {\r\n  const container = document.createElement('div');\r\n  // Simulación básica de render para el test\r\n  return { container };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockPerformanceNow","jest","fn","Object","defineProperty","global","value","now","memory","usedJSHeapSize","writable","mockConsoleLog","spyOn","console","mockImplementation","mockConsoleWarn","mockConsoleError","mockLocalStorage","getItem","setItem","removeItem","clear","beforeEach","clearAllMocks","mockReturnValue","afterEach","clearAllTimers","describe","it","result","renderHook","useRenderMonitoring","componentName","expect","current","isEnabled","toBe","metrics","toBeDefined","alerts","toEqual","trackError","enabled","enableConsoleLogging","enableToasts","customThresholds","slowRenderThreshold","maxRenderCount","memoryThreshold","errorThreshold","thresholds","renderCount","mockReturnValueOnce","rerender","toBeGreaterThan","slowRenders","averageRenderTime","toBeCloseTo","testError","Error","act","action","context","errorCount","length","type","performance","configurable","memoryUsage","some","alert","toContain","severity","useFakeTimers","advanceTimersByTime","unresolvedAlerts","filter","a","resolved","toBeLessThanOrEqual","useRealTimers","enablePersistence","toHaveBeenCalled","savedMetrics","JSON","stringify","initialProps","threshold","mockClear","not","TestComponent","title","React","createElement","WrappedComponent","withRenderMonitoring","count","container","render","textContent","element","document"],"mappings":"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"}