{"version":3,"names":["cov_107lepzjbt","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","ExportFiltersSchema","_zod","z","object","category_id","string","optional","brand","status","enum","stock_status","price_min","price_max","created_from","created_to","format","escapeCSVField","field","b","undefined","str","String","includes","replace","generateCSV","products","headers","rows","map","product","id","name","description","price","discounted_price","stock","sku","category_name","is_active","is_featured","Date","created_at","toLocaleDateString","updated_at","allRows","row","join","request","session","_config","auth","user","_server","NextResponse","json","error","searchParams","URL","url","filters","Object","fromEntries","entries","validationResult","safeParse","success","details","errors","validatedFilters","data","query","from","select","eq","parseInt","ilike","gt","lte","gte","parseFloat","order","ascending","limit","console","length","transformedProducts","categories","csvContent","timestamp","toISOString","split","filename","log","products_count","user_id","Error","message","body","countQuery","count","head","estimated_products","max_products","estimated_file_size","Math","round","supported_formats","filters_applied"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\export\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: EXPORTACIÓN DE PRODUCTOS CSV\r\n// Ruta: /api/admin/products/export\r\n// Descripción: Exportación masiva de productos a CSV\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nconst ExportFiltersSchema = z.object({\r\n  category_id: z.string().optional(),\r\n  brand: z.string().optional(),\r\n  status: z.enum(['active', 'inactive', 'all']).optional(),\r\n  stock_status: z.enum(['in_stock', 'low_stock', 'out_of_stock', 'all']).optional(),\r\n  price_min: z.string().optional(),\r\n  price_max: z.string().optional(),\r\n  created_from: z.string().optional(),\r\n  created_to: z.string().optional(),\r\n  format: z.enum(['csv', 'xlsx']).optional()\r\n});\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction escapeCSVField(field: any): string {\r\n  if (field === null || field === undefined) {\r\n    return '';\r\n  }\r\n  \r\n  const str = String(field);\r\n  \r\n  // Si contiene comas, comillas o saltos de línea, envolver en comillas\r\n  if (str.includes(',') || str.includes('\"') || str.includes('\\n') || str.includes('\\r')) {\r\n    // Escapar comillas duplicándolas\r\n    return `\"${str.replace(/\"/g, '\"\"')}\"`;\r\n  }\r\n  \r\n  return str;\r\n}\r\n\r\nfunction generateCSV(products: any[]): string {\r\n  // Headers del CSV\r\n  const headers = [\r\n    'ID',\r\n    'Nombre',\r\n    'Descripción',\r\n    'Precio',\r\n    'Precio Descuento',\r\n    'Stock',\r\n    'SKU',\r\n    'Categoría',\r\n    'Marca',\r\n    'Estado',\r\n    'Destacado',\r\n    'Fecha Creación',\r\n    'Última Actualización'\r\n  ];\r\n\r\n  // Crear filas\r\n  const rows = products.map(product => [\r\n    product.id,\r\n    product.name,\r\n    product.description || '',\r\n    product.price,\r\n    product.discounted_price || '',\r\n    product.stock,\r\n    product.sku || '',\r\n    product.category_name || '',\r\n    product.brand || '',\r\n    product.is_active ? 'Activo' : 'Inactivo',\r\n    product.is_featured ? 'Sí' : 'No',\r\n    new Date(product.created_at).toLocaleDateString('es-AR'),\r\n    new Date(product.updated_at).toLocaleDateString('es-AR')\r\n  ]);\r\n\r\n  // Combinar headers y filas\r\n  const allRows = [headers, ...rows];\r\n  \r\n  // Convertir a CSV\r\n  return allRows\r\n    .map(row => row.map(field => escapeCSVField(field)).join(','))\r\n    .join('\\n');\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - EXPORTAR PRODUCTOS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const filters = Object.fromEntries(searchParams.entries());\r\n\r\n    // Validar filtros\r\n    const validationResult = ExportFiltersSchema.safeParse(filters);\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Filtros inválidos', \r\n          details: validationResult.error.errors \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const validatedFilters = validationResult.data;\r\n\r\n    // Construir query base\r\n    let query = supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        slug,\r\n        description,\r\n        price,\r\n        discounted_price,\r\n        stock,\r\n        sku,\r\n        brand,\r\n        is_active,\r\n        is_featured,\r\n        created_at,\r\n        updated_at,\r\n        categories (\r\n          id,\r\n          name\r\n        )\r\n      `);\r\n\r\n    // Aplicar filtros\r\n    if (validatedFilters.category_id) {\r\n      query = query.eq('category_id', parseInt(validatedFilters.category_id));\r\n    }\r\n\r\n    if (validatedFilters.brand) {\r\n      query = query.ilike('brand', `%${validatedFilters.brand}%`);\r\n    }\r\n\r\n    if (validatedFilters.status && validatedFilters.status !== 'all') {\r\n      query = query.eq('is_active', validatedFilters.status === 'active');\r\n    }\r\n\r\n    if (validatedFilters.stock_status && validatedFilters.stock_status !== 'all') {\r\n      switch (validatedFilters.stock_status) {\r\n        case 'out_of_stock':\r\n          query = query.eq('stock', 0);\r\n          break;\r\n        case 'low_stock':\r\n          query = query.gt('stock', 0).lte('stock', 10);\r\n          break;\r\n        case 'in_stock':\r\n          query = query.gt('stock', 10);\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (validatedFilters.price_min) {\r\n      query = query.gte('price', parseFloat(validatedFilters.price_min));\r\n    }\r\n\r\n    if (validatedFilters.price_max) {\r\n      query = query.lte('price', parseFloat(validatedFilters.price_max));\r\n    }\r\n\r\n    if (validatedFilters.created_from) {\r\n      query = query.gte('created_at', validatedFilters.created_from);\r\n    }\r\n\r\n    if (validatedFilters.created_to) {\r\n      query = query.lte('created_at', validatedFilters.created_to);\r\n    }\r\n\r\n    // Ordenar por fecha de creación (más recientes primero)\r\n    query = query.order('created_at', { ascending: false });\r\n\r\n    // Limitar a 10,000 productos para evitar problemas de memoria\r\n    query = query.limit(10000);\r\n\r\n    // Ejecutar consulta\r\n    const { data: products, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error obteniendo productos para exportación:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener productos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No se encontraron productos para exportar' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Transformar datos para incluir nombre de categoría\r\n    const transformedProducts = products.map(product => ({\r\n      ...product,\r\n      category_name: product.categories?.name || 'Sin categoría'\r\n    }));\r\n\r\n    // Generar CSV\r\n    const csvContent = generateCSV(transformedProducts);\r\n\r\n    // Crear nombre de archivo con timestamp\r\n    const timestamp = new Date().toISOString().split('T')[0];\r\n    const filename = `productos-pinteya-${timestamp}.csv`;\r\n\r\n    // Log de la exportación\r\n    console.log('✅ Exportación completada:', {\r\n      products_count: products.length,\r\n      filters: validatedFilters,\r\n      user_id: session.user.id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    // Retornar archivo CSV\r\n    return new NextResponse(csvContent, {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'text/csv; charset=utf-8',\r\n        'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n        'Pragma': 'no-cache',\r\n        'Expires': '0'\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error en exportación de productos:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER POST - INFORMACIÓN DE EXPORTACIÓN\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener filtros del body\r\n    const body = await request.json();\r\n    const validationResult = ExportFiltersSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Filtros inválidos', \r\n          details: validationResult.error.errors \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const filters = validationResult.data;\r\n\r\n    // Contar productos que coinciden con los filtros\r\n    let countQuery = supabase\r\n      .from('products')\r\n      .select('id', { count: 'exact', head: true });\r\n\r\n    // Aplicar los mismos filtros que en GET\r\n    if (filters.category_id) {\r\n      countQuery = countQuery.eq('category_id', parseInt(filters.category_id));\r\n    }\r\n\r\n    if (filters.brand) {\r\n      countQuery = countQuery.ilike('brand', `%${filters.brand}%`);\r\n    }\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      countQuery = countQuery.eq('is_active', filters.status === 'active');\r\n    }\r\n\r\n    if (filters.stock_status && filters.stock_status !== 'all') {\r\n      switch (filters.stock_status) {\r\n        case 'out_of_stock':\r\n          countQuery = countQuery.eq('stock', 0);\r\n          break;\r\n        case 'low_stock':\r\n          countQuery = countQuery.gt('stock', 0).lte('stock', 10);\r\n          break;\r\n        case 'in_stock':\r\n          countQuery = countQuery.gt('stock', 10);\r\n          break;\r\n      }\r\n    }\r\n\r\n    const { count, error } = await countQuery;\r\n\r\n    if (error) {\r\n      console.error('Error contando productos:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al contar productos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        estimated_products: count || 0,\r\n        max_products: 10000,\r\n        estimated_file_size: `${Math.round((count || 0) * 0.5)}KB`, // Estimación aproximada\r\n        supported_formats: ['CSV'],\r\n        filters_applied: filters\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error obteniendo información de exportación:', error);\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}