e307e89ee552191c47067df82bd9fd67
// ===================================
// PINTEYA E-COMMERCE - ALERT SYSTEM TESTS
// ===================================
"use strict";
// Mock logger
jest.mock('@/lib/enterprise/logger', ()=>({
        logger: {
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            log: jest.fn()
        },
        LogLevel: {
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error'
        },
        LogCategory: {
            SYSTEM: 'system'
        }
    }));
jest.mock('@/lib/supabase', ()=>({
        getSupabaseClient: jest.fn(()=>({
                from: mockSupabaseFrom
            }))
    }));
// Mock cache
jest.mock('@/lib/cache-manager', ()=>({
        CacheUtils: {
            get: jest.fn(),
            set: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _alertsystem = require("../../lib/monitoring/alert-system");
// Mock Supabase
const mockSupabaseInsert = jest.fn();
const mockSupabaseUpdate = jest.fn();
const mockSupabaseFrom = jest.fn(()=>({
        insert: mockSupabaseInsert,
        update: mockSupabaseUpdate
    }));
// Mock fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe('Enterprise Alert System', ()=>{
    let alertSystem;
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.useFakeTimers();
        alertSystem = new _alertsystem.EnterpriseAlertSystem();
        // Mock successful database operations
        mockSupabaseInsert.mockResolvedValue({
            error: null
        });
        mockSupabaseUpdate.mockResolvedValue({
            error: null
        });
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            statusText: 'OK'
        });
    });
    afterEach(()=>{
        jest.useRealTimers();
        alertSystem.destroy();
    });
    describe('Configuración de canales', ()=>{
        test('debe configurar canal de notificación', ()=>{
            const channel = {
                id: 'test_email',
                type: _alertsystem.NotificationType.EMAIL,
                name: 'Test Email Channel',
                config: {
                    to: 'admin@pinteya.com'
                },
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.CRITICAL,
                    _alertsystem.AlertLevel.EMERGENCY
                ]
            };
            alertSystem.setNotificationChannel(channel);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe configurar regla de escalamiento', ()=>{
            const rule = {
                id: 'test_escalation',
                name: 'Test Escalation',
                enabled: true,
                conditions: {
                    level: _alertsystem.AlertLevel.CRITICAL,
                    duration: 10
                },
                actions: {
                    escalateToLevel: _alertsystem.AlertLevel.EMERGENCY,
                    notifyChannels: [
                        'test_email'
                    ]
                }
            };
            alertSystem.setEscalationRule(rule);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
        test('debe configurar regla de alerta', ()=>{
            const rule = {
                id: 'test_alert',
                name: 'Test Alert',
                description: 'Test alert rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {
                    environment: 'test'
                }
            };
            alertSystem.setAlertRule(rule);
            // Verificar que no hay errores
            expect(true).toBe(true);
        });
    });
    describe('Disparar alertas', ()=>{
        beforeEach(()=>{
            // Configurar regla de alerta para tests
            alertSystem.setAlertRule({
                id: 'test_rule',
                name: 'Test Rule',
                description: 'Test alert rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
        });
        test('debe disparar alerta cuando se cumple condición', async ()=>{
            const alert = await alertSystem.triggerAlert('test_rule', 'test.metric', 150, 'Test alert message');
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe(_alertsystem.AlertLevel.WARNING);
            expect(alert?.value).toBe(150);
            expect(alert?.threshold).toBe(100);
            expect(alert?.status).toBe(_alertsystem.AlertStatus.ACTIVE);
        });
        test('no debe disparar alerta si la regla está deshabilitada', async ()=>{
            // Deshabilitar regla
            alertSystem.setAlertRule({
                id: 'disabled_rule',
                name: 'Disabled Rule',
                description: 'Disabled rule',
                enabled: false,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('disabled_rule', 'test.metric', 150);
            expect(alert).toBeNull();
        });
        test('no debe disparar alerta si está en cooldown', async ()=>{
            // Disparar primera alerta
            const alert1 = await alertSystem.triggerAlert('test_rule', 'test.metric', 150);
            expect(alert1).toBeTruthy();
            // Intentar disparar segunda alerta inmediatamente
            const alert2 = await alertSystem.triggerAlert('test_rule', 'test.metric', 160);
            expect(alert2).toBeNull();
        });
    });
    describe('Gestión de alertas', ()=>{
        let testAlert;
        beforeEach(async ()=>{
            // Configurar y disparar alerta para tests
            alertSystem.setAlertRule({
                id: 'test_rule',
                name: 'Test Rule',
                description: 'Test rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [],
                tags: {}
            });
            testAlert = await alertSystem.triggerAlert('test_rule', 'test.metric', 150);
        });
        test('debe reconocer alerta', async ()=>{
            const success = await alertSystem.acknowledgeAlert(testAlert.id, 'admin-user');
            expect(success).toBe(true);
        });
        test('debe resolver alerta', async ()=>{
            const success = await alertSystem.resolveAlert(testAlert.id, 'admin-user');
            expect(success).toBe(true);
        });
        test('no debe reconocer alerta inexistente', async ()=>{
            const success = await alertSystem.acknowledgeAlert('nonexistent', 'admin-user');
            expect(success).toBe(false);
        });
        test('no debe resolver alerta inexistente', async ()=>{
            const success = await alertSystem.resolveAlert('nonexistent', 'admin-user');
            expect(success).toBe(false);
        });
    });
    describe('Notificaciones', ()=>{
        test('debe enviar notificación por log', async ()=>{
            // Configurar canal de log
            alertSystem.setNotificationChannel({
                id: 'test_log',
                type: _alertsystem.NotificationType.LOG,
                name: 'Test Log',
                config: {},
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.WARNING
                ]
            });
            // Configurar regla con canal de log
            alertSystem.setAlertRule({
                id: 'log_rule',
                name: 'Log Rule',
                description: 'Log rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'test_log'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('log_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.notificationsSent.length).toBeGreaterThan(0);
        });
        test('debe enviar notificación por webhook', async ()=>{
            // Configurar canal de webhook
            alertSystem.setNotificationChannel({
                id: 'test_webhook',
                type: _alertsystem.NotificationType.WEBHOOK,
                name: 'Test Webhook',
                config: {
                    url: 'https://example.com/webhook'
                },
                enabled: true,
                levels: [
                    _alertsystem.AlertLevel.CRITICAL
                ]
            });
            // Configurar regla con canal de webhook
            alertSystem.setAlertRule({
                id: 'webhook_rule',
                name: 'Webhook Rule',
                description: 'Webhook rule',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.CRITICAL,
                cooldownMinutes: 5,
                channels: [
                    'test_webhook'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('webhook_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(mockFetch).toHaveBeenCalledWith('https://example.com/webhook', expect.objectContaining({
                method: 'POST',
                headers: expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: expect.stringContaining('"source":"pinteya-ecommerce"')
            }));
        });
        test('no debe enviar notificación si el canal está deshabilitado', async ()=>{
            // Configurar canal deshabilitado
            alertSystem.setNotificationChannel({
                id: 'disabled_channel',
                type: _alertsystem.NotificationType.EMAIL,
                name: 'Disabled Channel',
                config: {
                    to: 'test@example.com'
                },
                enabled: false,
                levels: [
                    _alertsystem.AlertLevel.WARNING
                ]
            });
            // Configurar regla con canal deshabilitado
            alertSystem.setAlertRule({
                id: 'disabled_rule',
                name: 'Disabled Rule',
                description: 'Rule with disabled channel',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'disabled_channel'
                ],
                escalationRules: [],
                tags: {}
            });
            const alert = await alertSystem.triggerAlert('disabled_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.notificationsSent.length).toBe(0);
        });
    });
    describe('Escalamiento', ()=>{
        test('debe escalar alerta después del tiempo configurado', async ()=>{
            // Configurar regla de escalamiento
            alertSystem.setEscalationRule({
                id: 'test_escalation',
                name: 'Test Escalation',
                enabled: true,
                conditions: {
                    level: _alertsystem.AlertLevel.WARNING,
                    duration: 1 // 1 minuto
                },
                actions: {
                    escalateToLevel: _alertsystem.AlertLevel.CRITICAL,
                    notifyChannels: [
                        'default_log'
                    ]
                }
            });
            // Configurar regla de alerta con escalamiento
            alertSystem.setAlertRule({
                id: 'escalation_rule',
                name: 'Escalation Rule',
                description: 'Rule with escalation',
                enabled: true,
                metricName: 'test.metric',
                condition: 'gt',
                threshold: 100,
                level: _alertsystem.AlertLevel.WARNING,
                cooldownMinutes: 5,
                channels: [
                    'default_log'
                ],
                escalationRules: [
                    'test_escalation'
                ],
                tags: {}
            });
            // Disparar alerta
            const alert = await alertSystem.triggerAlert('escalation_rule', 'test.metric', 150);
            expect(alert).toBeTruthy();
            expect(alert?.level).toBe(_alertsystem.AlertLevel.WARNING);
            // Avanzar tiempo para activar escalamiento
            jest.advanceTimersByTime(2 * 60 * 1000); // 2 minutos
            // El escalamiento se verifica automáticamente
            expect(true).toBe(true);
        });
    });
    describe('Instancia singleton', ()=>{
        test('debe retornar la misma instancia', ()=>{
            const instance1 = _alertsystem.EnterpriseAlertSystem.getInstance();
            const instance2 = _alertsystem.EnterpriseAlertSystem.getInstance();
            expect(instance1).toBe(instance2);
        });
        test('debe usar la instancia global', ()=>{
            expect(_alertsystem.enterpriseAlertSystem).toBeInstanceOf(_alertsystem.EnterpriseAlertSystem);
        });
    });
    describe('Limpieza de recursos', ()=>{
        test('debe limpiar recursos correctamente', ()=>{
            const system = new _alertsystem.EnterpriseAlertSystem();
            expect(()=>system.destroy()).not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxsaWJcXGFsZXJ0LXN5c3RlbS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFBJTlRFWUEgRS1DT01NRVJDRSAtIEFMRVJUIFNZU1RFTSBURVNUU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHtcclxuICBFbnRlcnByaXNlQWxlcnRTeXN0ZW0sXHJcbiAgQWxlcnRMZXZlbCxcclxuICBOb3RpZmljYXRpb25UeXBlLFxyXG4gIEFsZXJ0U3RhdHVzLFxyXG4gIGVudGVycHJpc2VBbGVydFN5c3RlbVxyXG59IGZyb20gJ0AvbGliL21vbml0b3JpbmcvYWxlcnQtc3lzdGVtJztcclxuXHJcbi8vIE1vY2sgbG9nZ2VyXHJcbmplc3QubW9jaygnQC9saWIvZW50ZXJwcmlzZS9sb2dnZXInLCAoKSA9PiAoe1xyXG4gIGxvZ2dlcjoge1xyXG4gICAgaW5mbzogamVzdC5mbigpLFxyXG4gICAgd2FybjogamVzdC5mbigpLFxyXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcclxuICAgIGxvZzogamVzdC5mbigpLFxyXG4gIH0sXHJcbiAgTG9nTGV2ZWw6IHtcclxuICAgIElORk86ICdpbmZvJyxcclxuICAgIFdBUk46ICd3YXJuJyxcclxuICAgIEVSUk9SOiAnZXJyb3InLFxyXG4gIH0sXHJcbiAgTG9nQ2F0ZWdvcnk6IHtcclxuICAgIFNZU1RFTTogJ3N5c3RlbScsXHJcbiAgfSxcclxufSkpO1xyXG5cclxuLy8gTW9jayBTdXBhYmFzZVxyXG5jb25zdCBtb2NrU3VwYWJhc2VJbnNlcnQgPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tTdXBhYmFzZVVwZGF0ZSA9IGplc3QuZm4oKTtcclxuY29uc3QgbW9ja1N1cGFiYXNlRnJvbSA9IGplc3QuZm4oKCkgPT4gKHtcclxuICBpbnNlcnQ6IG1vY2tTdXBhYmFzZUluc2VydCxcclxuICB1cGRhdGU6IG1vY2tTdXBhYmFzZVVwZGF0ZSxcclxufSkpO1xyXG5cclxuamVzdC5tb2NrKCdAL2xpYi9zdXBhYmFzZScsICgpID0+ICh7XHJcbiAgZ2V0U3VwYWJhc2VDbGllbnQ6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGZyb206IG1vY2tTdXBhYmFzZUZyb20sXHJcbiAgfSkpLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIGNhY2hlXHJcbmplc3QubW9jaygnQC9saWIvY2FjaGUtbWFuYWdlcicsICgpID0+ICh7XHJcbiAgQ2FjaGVVdGlsczoge1xyXG4gICAgZ2V0OiBqZXN0LmZuKCksXHJcbiAgICBzZXQ6IGplc3QuZm4oKSxcclxuICB9LFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIGZldGNoIGdsb2JhbFxyXG5jb25zdCBtb2NrRmV0Y2ggPSBqZXN0LmZuKCk7XHJcbmdsb2JhbC5mZXRjaCA9IG1vY2tGZXRjaDtcclxuXHJcbmRlc2NyaWJlKCdFbnRlcnByaXNlIEFsZXJ0IFN5c3RlbScsICgpID0+IHtcclxuICBsZXQgYWxlcnRTeXN0ZW06IEVudGVycHJpc2VBbGVydFN5c3RlbTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xyXG4gICAgYWxlcnRTeXN0ZW0gPSBuZXcgRW50ZXJwcmlzZUFsZXJ0U3lzdGVtKCk7XHJcbiAgICBcclxuICAgIC8vIE1vY2sgc3VjY2Vzc2Z1bCBkYXRhYmFzZSBvcGVyYXRpb25zXHJcbiAgICBtb2NrU3VwYWJhc2VJbnNlcnQubW9ja1Jlc29sdmVkVmFsdWUoeyBlcnJvcjogbnVsbCB9KTtcclxuICAgIG1vY2tTdXBhYmFzZVVwZGF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGVycm9yOiBudWxsIH0pO1xyXG4gICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgb2s6IHRydWUsXHJcbiAgICAgIHN0YXR1czogMjAwLFxyXG4gICAgICBzdGF0dXNUZXh0OiAnT0snXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xyXG4gICAgYWxlcnRTeXN0ZW0uZGVzdHJveSgpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQ29uZmlndXJhY2nDs24gZGUgY2FuYWxlcycsICgpID0+IHtcclxuICAgIHRlc3QoJ2RlYmUgY29uZmlndXJhciBjYW5hbCBkZSBub3RpZmljYWNpw7NuJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjaGFubmVsID0ge1xyXG4gICAgICAgIGlkOiAndGVzdF9lbWFpbCcsXHJcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5FTUFJTCxcclxuICAgICAgICBuYW1lOiAnVGVzdCBFbWFpbCBDaGFubmVsJyxcclxuICAgICAgICBjb25maWc6IHsgdG86ICdhZG1pbkBwaW50ZXlhLmNvbScgfSxcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGxldmVsczogW0FsZXJ0TGV2ZWwuQ1JJVElDQUwsIEFsZXJ0TGV2ZWwuRU1FUkdFTkNZXVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0Tm90aWZpY2F0aW9uQ2hhbm5lbChjaGFubmVsKTtcclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgbm8gaGF5IGVycm9yZXNcclxuICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdkZWJlIGNvbmZpZ3VyYXIgcmVnbGEgZGUgZXNjYWxhbWllbnRvJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBydWxlID0ge1xyXG4gICAgICAgIGlkOiAndGVzdF9lc2NhbGF0aW9uJyxcclxuICAgICAgICBuYW1lOiAnVGVzdCBFc2NhbGF0aW9uJyxcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGNvbmRpdGlvbnM6IHtcclxuICAgICAgICAgIGxldmVsOiBBbGVydExldmVsLkNSSVRJQ0FMLFxyXG4gICAgICAgICAgZHVyYXRpb246IDEwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY3Rpb25zOiB7XHJcbiAgICAgICAgICBlc2NhbGF0ZVRvTGV2ZWw6IEFsZXJ0TGV2ZWwuRU1FUkdFTkNZLFxyXG4gICAgICAgICAgbm90aWZ5Q2hhbm5lbHM6IFsndGVzdF9lbWFpbCddXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0RXNjYWxhdGlvblJ1bGUocnVsZSk7XHJcblxyXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIG5vIGhheSBlcnJvcmVzXHJcbiAgICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnZGViZSBjb25maWd1cmFyIHJlZ2xhIGRlIGFsZXJ0YScsICgpID0+IHtcclxuICAgICAgY29uc3QgcnVsZSA9IHtcclxuICAgICAgICBpZDogJ3Rlc3RfYWxlcnQnLFxyXG4gICAgICAgIG5hbWU6ICdUZXN0IEFsZXJ0JyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgYWxlcnQgcnVsZScsXHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBtZXRyaWNOYW1lOiAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ2d0JyBhcyBjb25zdCxcclxuICAgICAgICB0aHJlc2hvbGQ6IDEwMCxcclxuICAgICAgICBsZXZlbDogQWxlcnRMZXZlbC5XQVJOSU5HLFxyXG4gICAgICAgIGNvb2xkb3duTWludXRlczogNSxcclxuICAgICAgICBjaGFubmVsczogWydkZWZhdWx0X2xvZyddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogW10sXHJcbiAgICAgICAgdGFnczogeyBlbnZpcm9ubWVudDogJ3Rlc3QnIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGFsZXJ0U3lzdGVtLnNldEFsZXJ0UnVsZShydWxlKTtcclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBxdWUgbm8gaGF5IGVycm9yZXNcclxuICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0Rpc3BhcmFyIGFsZXJ0YXMnLCAoKSA9PiB7XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgLy8gQ29uZmlndXJhciByZWdsYSBkZSBhbGVydGEgcGFyYSB0ZXN0c1xyXG4gICAgICBhbGVydFN5c3RlbS5zZXRBbGVydFJ1bGUoe1xyXG4gICAgICAgIGlkOiAndGVzdF9ydWxlJyxcclxuICAgICAgICBuYW1lOiAnVGVzdCBSdWxlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgYWxlcnQgcnVsZScsXHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBtZXRyaWNOYW1lOiAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ2d0JyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDEwMCxcclxuICAgICAgICBsZXZlbDogQWxlcnRMZXZlbC5XQVJOSU5HLFxyXG4gICAgICAgIGNvb2xkb3duTWludXRlczogNSxcclxuICAgICAgICBjaGFubmVsczogWydkZWZhdWx0X2xvZyddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogW10sXHJcbiAgICAgICAgdGFnczoge31cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdkZWJlIGRpc3BhcmFyIGFsZXJ0YSBjdWFuZG8gc2UgY3VtcGxlIGNvbmRpY2nDs24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFsZXJ0ID0gYXdhaXQgYWxlcnRTeXN0ZW0udHJpZ2dlckFsZXJ0KFxyXG4gICAgICAgICd0ZXN0X3J1bGUnLFxyXG4gICAgICAgICd0ZXN0Lm1ldHJpYycsXHJcbiAgICAgICAgMTUwLFxyXG4gICAgICAgICdUZXN0IGFsZXJ0IG1lc3NhZ2UnXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBleHBlY3QoYWxlcnQpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgZXhwZWN0KGFsZXJ0Py5sZXZlbCkudG9CZShBbGVydExldmVsLldBUk5JTkcpO1xyXG4gICAgICBleHBlY3QoYWxlcnQ/LnZhbHVlKS50b0JlKDE1MCk7XHJcbiAgICAgIGV4cGVjdChhbGVydD8udGhyZXNob2xkKS50b0JlKDEwMCk7XHJcbiAgICAgIGV4cGVjdChhbGVydD8uc3RhdHVzKS50b0JlKEFsZXJ0U3RhdHVzLkFDVElWRSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdubyBkZWJlIGRpc3BhcmFyIGFsZXJ0YSBzaSBsYSByZWdsYSBlc3TDoSBkZXNoYWJpbGl0YWRhJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBEZXNoYWJpbGl0YXIgcmVnbGFcclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0QWxlcnRSdWxlKHtcclxuICAgICAgICBpZDogJ2Rpc2FibGVkX3J1bGUnLFxyXG4gICAgICAgIG5hbWU6ICdEaXNhYmxlZCBSdWxlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Rpc2FibGVkIHJ1bGUnLFxyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIG1ldHJpY05hbWU6ICd0ZXN0Lm1ldHJpYycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAnZ3QnLFxyXG4gICAgICAgIHRocmVzaG9sZDogMTAwLFxyXG4gICAgICAgIGxldmVsOiBBbGVydExldmVsLldBUk5JTkcsXHJcbiAgICAgICAgY29vbGRvd25NaW51dGVzOiA1LFxyXG4gICAgICAgIGNoYW5uZWxzOiBbJ2RlZmF1bHRfbG9nJ10sXHJcbiAgICAgICAgZXNjYWxhdGlvblJ1bGVzOiBbXSxcclxuICAgICAgICB0YWdzOiB7fVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IGFsZXJ0ID0gYXdhaXQgYWxlcnRTeXN0ZW0udHJpZ2dlckFsZXJ0KFxyXG4gICAgICAgICdkaXNhYmxlZF9ydWxlJyxcclxuICAgICAgICAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIDE1MFxyXG4gICAgICApO1xyXG5cclxuICAgICAgZXhwZWN0KGFsZXJ0KS50b0JlTnVsbCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnbm8gZGViZSBkaXNwYXJhciBhbGVydGEgc2kgZXN0w6EgZW4gY29vbGRvd24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIERpc3BhcmFyIHByaW1lcmEgYWxlcnRhXHJcbiAgICAgIGNvbnN0IGFsZXJ0MSA9IGF3YWl0IGFsZXJ0U3lzdGVtLnRyaWdnZXJBbGVydChcclxuICAgICAgICAndGVzdF9ydWxlJyxcclxuICAgICAgICAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIDE1MFxyXG4gICAgICApO1xyXG5cclxuICAgICAgZXhwZWN0KGFsZXJ0MSkudG9CZVRydXRoeSgpO1xyXG5cclxuICAgICAgLy8gSW50ZW50YXIgZGlzcGFyYXIgc2VndW5kYSBhbGVydGEgaW5tZWRpYXRhbWVudGVcclxuICAgICAgY29uc3QgYWxlcnQyID0gYXdhaXQgYWxlcnRTeXN0ZW0udHJpZ2dlckFsZXJ0KFxyXG4gICAgICAgICd0ZXN0X3J1bGUnLFxyXG4gICAgICAgICd0ZXN0Lm1ldHJpYycsXHJcbiAgICAgICAgMTYwXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBleHBlY3QoYWxlcnQyKS50b0JlTnVsbCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdHZXN0acOzbiBkZSBhbGVydGFzJywgKCkgPT4ge1xyXG4gICAgbGV0IHRlc3RBbGVydDogYW55O1xyXG5cclxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBDb25maWd1cmFyIHkgZGlzcGFyYXIgYWxlcnRhIHBhcmEgdGVzdHNcclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0QWxlcnRSdWxlKHtcclxuICAgICAgICBpZDogJ3Rlc3RfcnVsZScsXHJcbiAgICAgICAgbmFtZTogJ1Rlc3QgUnVsZScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdUZXN0IHJ1bGUnLFxyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgbWV0cmljTmFtZTogJ3Rlc3QubWV0cmljJyxcclxuICAgICAgICBjb25kaXRpb246ICdndCcsXHJcbiAgICAgICAgdGhyZXNob2xkOiAxMDAsXHJcbiAgICAgICAgbGV2ZWw6IEFsZXJ0TGV2ZWwuV0FSTklORyxcclxuICAgICAgICBjb29sZG93bk1pbnV0ZXM6IDUsXHJcbiAgICAgICAgY2hhbm5lbHM6IFsnZGVmYXVsdF9sb2cnXSxcclxuICAgICAgICBlc2NhbGF0aW9uUnVsZXM6IFtdLFxyXG4gICAgICAgIHRhZ3M6IHt9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGVzdEFsZXJ0ID0gYXdhaXQgYWxlcnRTeXN0ZW0udHJpZ2dlckFsZXJ0KFxyXG4gICAgICAgICd0ZXN0X3J1bGUnLFxyXG4gICAgICAgICd0ZXN0Lm1ldHJpYycsXHJcbiAgICAgICAgMTUwXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdkZWJlIHJlY29ub2NlciBhbGVydGEnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBhbGVydFN5c3RlbS5hY2tub3dsZWRnZUFsZXJ0KHRlc3RBbGVydC5pZCwgJ2FkbWluLXVzZXInKTtcclxuXHJcbiAgICAgIGV4cGVjdChzdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnZGViZSByZXNvbHZlciBhbGVydGEnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBhbGVydFN5c3RlbS5yZXNvbHZlQWxlcnQodGVzdEFsZXJ0LmlkLCAnYWRtaW4tdXNlcicpO1xyXG5cclxuICAgICAgZXhwZWN0KHN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdubyBkZWJlIHJlY29ub2NlciBhbGVydGEgaW5leGlzdGVudGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBhbGVydFN5c3RlbS5hY2tub3dsZWRnZUFsZXJ0KCdub25leGlzdGVudCcsICdhZG1pbi11c2VyJyk7XHJcblxyXG4gICAgICBleHBlY3Qoc3VjY2VzcykudG9CZShmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdubyBkZWJlIHJlc29sdmVyIGFsZXJ0YSBpbmV4aXN0ZW50ZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGFsZXJ0U3lzdGVtLnJlc29sdmVBbGVydCgnbm9uZXhpc3RlbnQnLCAnYWRtaW4tdXNlcicpO1xyXG5cclxuICAgICAgZXhwZWN0KHN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdOb3RpZmljYWNpb25lcycsICgpID0+IHtcclxuICAgIHRlc3QoJ2RlYmUgZW52aWFyIG5vdGlmaWNhY2nDs24gcG9yIGxvZycsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8gQ29uZmlndXJhciBjYW5hbCBkZSBsb2dcclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0Tm90aWZpY2F0aW9uQ2hhbm5lbCh7XHJcbiAgICAgICAgaWQ6ICd0ZXN0X2xvZycsXHJcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5MT0csXHJcbiAgICAgICAgbmFtZTogJ1Rlc3QgTG9nJyxcclxuICAgICAgICBjb25maWc6IHt9LFxyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgbGV2ZWxzOiBbQWxlcnRMZXZlbC5XQVJOSU5HXVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbmZpZ3VyYXIgcmVnbGEgY29uIGNhbmFsIGRlIGxvZ1xyXG4gICAgICBhbGVydFN5c3RlbS5zZXRBbGVydFJ1bGUoe1xyXG4gICAgICAgIGlkOiAnbG9nX3J1bGUnLFxyXG4gICAgICAgIG5hbWU6ICdMb2cgUnVsZScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdMb2cgcnVsZScsXHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBtZXRyaWNOYW1lOiAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ2d0JyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDEwMCxcclxuICAgICAgICBsZXZlbDogQWxlcnRMZXZlbC5XQVJOSU5HLFxyXG4gICAgICAgIGNvb2xkb3duTWludXRlczogNSxcclxuICAgICAgICBjaGFubmVsczogWyd0ZXN0X2xvZyddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogW10sXHJcbiAgICAgICAgdGFnczoge31cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBhbGVydCA9IGF3YWl0IGFsZXJ0U3lzdGVtLnRyaWdnZXJBbGVydChcclxuICAgICAgICAnbG9nX3J1bGUnLFxyXG4gICAgICAgICd0ZXN0Lm1ldHJpYycsXHJcbiAgICAgICAgMTUwXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBleHBlY3QoYWxlcnQpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgZXhwZWN0KGFsZXJ0Py5ub3RpZmljYXRpb25zU2VudC5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2RlYmUgZW52aWFyIG5vdGlmaWNhY2nDs24gcG9yIHdlYmhvb2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIENvbmZpZ3VyYXIgY2FuYWwgZGUgd2ViaG9va1xyXG4gICAgICBhbGVydFN5c3RlbS5zZXROb3RpZmljYXRpb25DaGFubmVsKHtcclxuICAgICAgICBpZDogJ3Rlc3Rfd2ViaG9vaycsXHJcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5XRUJIT09LLFxyXG4gICAgICAgIG5hbWU6ICdUZXN0IFdlYmhvb2snLFxyXG4gICAgICAgIGNvbmZpZzogeyB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tL3dlYmhvb2snIH0sXHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBsZXZlbHM6IFtBbGVydExldmVsLkNSSVRJQ0FMXVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbmZpZ3VyYXIgcmVnbGEgY29uIGNhbmFsIGRlIHdlYmhvb2tcclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0QWxlcnRSdWxlKHtcclxuICAgICAgICBpZDogJ3dlYmhvb2tfcnVsZScsXHJcbiAgICAgICAgbmFtZTogJ1dlYmhvb2sgUnVsZScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdXZWJob29rIHJ1bGUnLFxyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgbWV0cmljTmFtZTogJ3Rlc3QubWV0cmljJyxcclxuICAgICAgICBjb25kaXRpb246ICdndCcsXHJcbiAgICAgICAgdGhyZXNob2xkOiAxMDAsXHJcbiAgICAgICAgbGV2ZWw6IEFsZXJ0TGV2ZWwuQ1JJVElDQUwsXHJcbiAgICAgICAgY29vbGRvd25NaW51dGVzOiA1LFxyXG4gICAgICAgIGNoYW5uZWxzOiBbJ3Rlc3Rfd2ViaG9vayddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogW10sXHJcbiAgICAgICAgdGFnczoge31cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBhbGVydCA9IGF3YWl0IGFsZXJ0U3lzdGVtLnRyaWdnZXJBbGVydChcclxuICAgICAgICAnd2ViaG9va19ydWxlJyxcclxuICAgICAgICAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIDE1MFxyXG4gICAgICApO1xyXG5cclxuICAgICAgZXhwZWN0KGFsZXJ0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAgICdodHRwczovL2V4YW1wbGUuY29tL3dlYmhvb2snLFxyXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgaGVhZGVyczogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGJvZHk6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdcInNvdXJjZVwiOlwicGludGV5YS1lY29tbWVyY2VcIicpXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ25vIGRlYmUgZW52aWFyIG5vdGlmaWNhY2nDs24gc2kgZWwgY2FuYWwgZXN0w6EgZGVzaGFiaWxpdGFkbycsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8gQ29uZmlndXJhciBjYW5hbCBkZXNoYWJpbGl0YWRvXHJcbiAgICAgIGFsZXJ0U3lzdGVtLnNldE5vdGlmaWNhdGlvbkNoYW5uZWwoe1xyXG4gICAgICAgIGlkOiAnZGlzYWJsZWRfY2hhbm5lbCcsXHJcbiAgICAgICAgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5FTUFJTCxcclxuICAgICAgICBuYW1lOiAnRGlzYWJsZWQgQ2hhbm5lbCcsXHJcbiAgICAgICAgY29uZmlnOiB7IHRvOiAndGVzdEBleGFtcGxlLmNvbScgfSxcclxuICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBsZXZlbHM6IFtBbGVydExldmVsLldBUk5JTkddXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ29uZmlndXJhciByZWdsYSBjb24gY2FuYWwgZGVzaGFiaWxpdGFkb1xyXG4gICAgICBhbGVydFN5c3RlbS5zZXRBbGVydFJ1bGUoe1xyXG4gICAgICAgIGlkOiAnZGlzYWJsZWRfcnVsZScsXHJcbiAgICAgICAgbmFtZTogJ0Rpc2FibGVkIFJ1bGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUnVsZSB3aXRoIGRpc2FibGVkIGNoYW5uZWwnLFxyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgbWV0cmljTmFtZTogJ3Rlc3QubWV0cmljJyxcclxuICAgICAgICBjb25kaXRpb246ICdndCcsXHJcbiAgICAgICAgdGhyZXNob2xkOiAxMDAsXHJcbiAgICAgICAgbGV2ZWw6IEFsZXJ0TGV2ZWwuV0FSTklORyxcclxuICAgICAgICBjb29sZG93bk1pbnV0ZXM6IDUsXHJcbiAgICAgICAgY2hhbm5lbHM6IFsnZGlzYWJsZWRfY2hhbm5lbCddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogW10sXHJcbiAgICAgICAgdGFnczoge31cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBhbGVydCA9IGF3YWl0IGFsZXJ0U3lzdGVtLnRyaWdnZXJBbGVydChcclxuICAgICAgICAnZGlzYWJsZWRfcnVsZScsXHJcbiAgICAgICAgJ3Rlc3QubWV0cmljJyxcclxuICAgICAgICAxNTBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGV4cGVjdChhbGVydCkudG9CZVRydXRoeSgpO1xyXG4gICAgICBleHBlY3QoYWxlcnQ/Lm5vdGlmaWNhdGlvbnNTZW50Lmxlbmd0aCkudG9CZSgwKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnRXNjYWxhbWllbnRvJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnZGViZSBlc2NhbGFyIGFsZXJ0YSBkZXNwdcOpcyBkZWwgdGllbXBvIGNvbmZpZ3VyYWRvJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBDb25maWd1cmFyIHJlZ2xhIGRlIGVzY2FsYW1pZW50b1xyXG4gICAgICBhbGVydFN5c3RlbS5zZXRFc2NhbGF0aW9uUnVsZSh7XHJcbiAgICAgICAgaWQ6ICd0ZXN0X2VzY2FsYXRpb24nLFxyXG4gICAgICAgIG5hbWU6ICdUZXN0IEVzY2FsYXRpb24nLFxyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgY29uZGl0aW9uczoge1xyXG4gICAgICAgICAgbGV2ZWw6IEFsZXJ0TGV2ZWwuV0FSTklORyxcclxuICAgICAgICAgIGR1cmF0aW9uOiAxIC8vIDEgbWludXRvXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY3Rpb25zOiB7XHJcbiAgICAgICAgICBlc2NhbGF0ZVRvTGV2ZWw6IEFsZXJ0TGV2ZWwuQ1JJVElDQUwsXHJcbiAgICAgICAgICBub3RpZnlDaGFubmVsczogWydkZWZhdWx0X2xvZyddXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbmZpZ3VyYXIgcmVnbGEgZGUgYWxlcnRhIGNvbiBlc2NhbGFtaWVudG9cclxuICAgICAgYWxlcnRTeXN0ZW0uc2V0QWxlcnRSdWxlKHtcclxuICAgICAgICBpZDogJ2VzY2FsYXRpb25fcnVsZScsXHJcbiAgICAgICAgbmFtZTogJ0VzY2FsYXRpb24gUnVsZScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdSdWxlIHdpdGggZXNjYWxhdGlvbicsXHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBtZXRyaWNOYW1lOiAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ2d0JyxcclxuICAgICAgICB0aHJlc2hvbGQ6IDEwMCxcclxuICAgICAgICBsZXZlbDogQWxlcnRMZXZlbC5XQVJOSU5HLFxyXG4gICAgICAgIGNvb2xkb3duTWludXRlczogNSxcclxuICAgICAgICBjaGFubmVsczogWydkZWZhdWx0X2xvZyddLFxyXG4gICAgICAgIGVzY2FsYXRpb25SdWxlczogWyd0ZXN0X2VzY2FsYXRpb24nXSxcclxuICAgICAgICB0YWdzOiB7fVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIERpc3BhcmFyIGFsZXJ0YVxyXG4gICAgICBjb25zdCBhbGVydCA9IGF3YWl0IGFsZXJ0U3lzdGVtLnRyaWdnZXJBbGVydChcclxuICAgICAgICAnZXNjYWxhdGlvbl9ydWxlJyxcclxuICAgICAgICAndGVzdC5tZXRyaWMnLFxyXG4gICAgICAgIDE1MFxyXG4gICAgICApO1xyXG5cclxuICAgICAgZXhwZWN0KGFsZXJ0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGV4cGVjdChhbGVydD8ubGV2ZWwpLnRvQmUoQWxlcnRMZXZlbC5XQVJOSU5HKTtcclxuXHJcbiAgICAgIC8vIEF2YW56YXIgdGllbXBvIHBhcmEgYWN0aXZhciBlc2NhbGFtaWVudG9cclxuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDIgKiA2MCAqIDEwMDApOyAvLyAyIG1pbnV0b3NcclxuXHJcbiAgICAgIC8vIEVsIGVzY2FsYW1pZW50byBzZSB2ZXJpZmljYSBhdXRvbcOhdGljYW1lbnRlXHJcbiAgICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdJbnN0YW5jaWEgc2luZ2xldG9uJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnZGViZSByZXRvcm5hciBsYSBtaXNtYSBpbnN0YW5jaWEnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluc3RhbmNlMSA9IEVudGVycHJpc2VBbGVydFN5c3RlbS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICBjb25zdCBpbnN0YW5jZTIgPSBFbnRlcnByaXNlQWxlcnRTeXN0ZW0uZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgIGV4cGVjdChpbnN0YW5jZTEpLnRvQmUoaW5zdGFuY2UyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2RlYmUgdXNhciBsYSBpbnN0YW5jaWEgZ2xvYmFsJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW50ZXJwcmlzZUFsZXJ0U3lzdGVtKS50b0JlSW5zdGFuY2VPZihFbnRlcnByaXNlQWxlcnRTeXN0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdMaW1waWV6YSBkZSByZWN1cnNvcycsICgpID0+IHtcclxuICAgIHRlc3QoJ2RlYmUgbGltcGlhciByZWN1cnNvcyBjb3JyZWN0YW1lbnRlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzeXN0ZW0gPSBuZXcgRW50ZXJwcmlzZUFsZXJ0U3lzdGVtKCk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QoKCkgPT4gc3lzdGVtLmRlc3Ryb3koKSkubm90LnRvVGhyb3coKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibG9nZ2VyIiwiaW5mbyIsImZuIiwid2FybiIsImVycm9yIiwibG9nIiwiTG9nTGV2ZWwiLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiTG9nQ2F0ZWdvcnkiLCJTWVNURU0iLCJnZXRTdXBhYmFzZUNsaWVudCIsImZyb20iLCJtb2NrU3VwYWJhc2VGcm9tIiwiQ2FjaGVVdGlscyIsImdldCIsInNldCIsIm1vY2tTdXBhYmFzZUluc2VydCIsIm1vY2tTdXBhYmFzZVVwZGF0ZSIsImluc2VydCIsInVwZGF0ZSIsIm1vY2tGZXRjaCIsImdsb2JhbCIsImZldGNoIiwiZGVzY3JpYmUiLCJhbGVydFN5c3RlbSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidXNlRmFrZVRpbWVycyIsIkVudGVycHJpc2VBbGVydFN5c3RlbSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsImRlc3Ryb3kiLCJ0ZXN0IiwiY2hhbm5lbCIsImlkIiwidHlwZSIsIk5vdGlmaWNhdGlvblR5cGUiLCJFTUFJTCIsIm5hbWUiLCJjb25maWciLCJ0byIsImVuYWJsZWQiLCJsZXZlbHMiLCJBbGVydExldmVsIiwiQ1JJVElDQUwiLCJFTUVSR0VOQ1kiLCJzZXROb3RpZmljYXRpb25DaGFubmVsIiwiZXhwZWN0IiwidG9CZSIsInJ1bGUiLCJjb25kaXRpb25zIiwibGV2ZWwiLCJkdXJhdGlvbiIsImFjdGlvbnMiLCJlc2NhbGF0ZVRvTGV2ZWwiLCJub3RpZnlDaGFubmVscyIsInNldEVzY2FsYXRpb25SdWxlIiwiZGVzY3JpcHRpb24iLCJtZXRyaWNOYW1lIiwiY29uZGl0aW9uIiwidGhyZXNob2xkIiwiV0FSTklORyIsImNvb2xkb3duTWludXRlcyIsImNoYW5uZWxzIiwiZXNjYWxhdGlvblJ1bGVzIiwidGFncyIsImVudmlyb25tZW50Iiwic2V0QWxlcnRSdWxlIiwiYWxlcnQiLCJ0cmlnZ2VyQWxlcnQiLCJ0b0JlVHJ1dGh5IiwidmFsdWUiLCJBbGVydFN0YXR1cyIsIkFDVElWRSIsInRvQmVOdWxsIiwiYWxlcnQxIiwiYWxlcnQyIiwidGVzdEFsZXJ0Iiwic3VjY2VzcyIsImFja25vd2xlZGdlQWxlcnQiLCJyZXNvbHZlQWxlcnQiLCJMT0ciLCJub3RpZmljYXRpb25zU2VudCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsIldFQkhPT0siLCJ1cmwiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInN0cmluZ0NvbnRhaW5pbmciLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwiaW5zdGFuY2UxIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZTIiLCJlbnRlcnByaXNlQWxlcnRTeXN0ZW0iLCJ0b0JlSW5zdGFuY2VPZiIsInN5c3RlbSIsIm5vdCIsInRvVGhyb3ciXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QywwQ0FBMEM7QUFDMUMsc0NBQXNDOztBQVV0QyxjQUFjO0FBQ2RBLEtBQUtDLElBQUksQ0FBQywyQkFBMkIsSUFBTyxDQUFBO1FBQzFDQyxRQUFRO1lBQ05DLE1BQU1ILEtBQUtJLEVBQUU7WUFDYkMsTUFBTUwsS0FBS0ksRUFBRTtZQUNiRSxPQUFPTixLQUFLSSxFQUFFO1lBQ2RHLEtBQUtQLEtBQUtJLEVBQUU7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