{"version":3,"names":["cov_psips0h00","actualCoverage","s","GET","f","POST","runtime","request","console","log","session","_config","auth","user","id","b","_server","NextResponse","json","error","status","data","_supabase","supabaseAdmin","from","select","eq","single","allAddresses","order","ascending","length","success","message","totalAddresses","defaultAddresses","correctionsMade","filter","addr","is_default","defaultCount","actions","mostRecentAddress","update","push","name","keepDefault","toUpdate","slice","map","idsToUpdate","in","forEach","finalCheck","finalDefaultCount","defaultAddressesBefore","defaultAddressesAfter","currentDefaultAddress","needsCorrection","defaultAddressList","created_at"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\validate-defaults\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - VALIDACI√ìN DE DIRECCIONES PREDETERMINADAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n/**\r\n * POST - Validar y corregir direcciones predeterminadas duplicadas\r\n * Este endpoint puede ser llamado para limpiar cualquier inconsistencia\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üîß POST /api/user/addresses/validate-defaults - Iniciando validaci√≥n');\r\n\r\n    // Autenticaci√≥n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log('üîç Validando direcciones predeterminadas para usuario:', user.id);\r\n\r\n    // Obtener todas las direcciones del usuario\r\n    const { data: allAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default, created_at')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (!allAddresses || allAddresses.length === 0) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'No hay direcciones para validar',\r\n        data: {\r\n          totalAddresses: 0,\r\n          defaultAddresses: 0,\r\n          correctionsMade: 0\r\n        }\r\n      });\r\n    }\r\n\r\n    // Filtrar direcciones predeterminadas\r\n    const defaultAddresses = allAddresses.filter(addr => addr.is_default);\r\n    const defaultCount = defaultAddresses.length;\r\n    \r\n    console.log(`üîç Total direcciones: ${allAddresses.length}`);\r\n    console.log(`üîç Direcciones predeterminadas: ${defaultCount}`);\r\n\r\n    let correctionsMade = 0;\r\n    let actions: string[] = [];\r\n\r\n    if (defaultCount === 0) {\r\n      // No hay direcciones predeterminadas, marcar la m√°s reciente\r\n      const mostRecentAddress = allAddresses[0];\r\n      \r\n      console.log('üîÑ No hay direcciones predeterminadas, marcando la m√°s reciente:', mostRecentAddress.id);\r\n      \r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: true })\r\n        .eq('id', mostRecentAddress.id);\r\n      \r\n      correctionsMade = 1;\r\n      actions.push(`Marcada direcci√≥n \"${mostRecentAddress.name}\" como predeterminada`);\r\n      \r\n    } else if (defaultCount > 1) {\r\n      // Hay m√∫ltiples direcciones predeterminadas, mantener solo la m√°s reciente\r\n      const keepDefault = defaultAddresses[0]; // Ya est√°n ordenadas por created_at desc\r\n      const toUpdate = defaultAddresses.slice(1);\r\n      \r\n      console.log(`üîÑ M√∫ltiples direcciones predeterminadas encontradas (${defaultCount})`);\r\n      console.log('üîÑ Manteniendo como predeterminada:', keepDefault.id, keepDefault.name);\r\n      console.log('üîÑ Desmarcando:', toUpdate.map(addr => `${addr.id} (${addr.name})`));\r\n      \r\n      // Desmarcar las direcciones duplicadas\r\n      const idsToUpdate = toUpdate.map(addr => addr.id);\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .in('id', idsToUpdate);\r\n      \r\n      correctionsMade = toUpdate.length;\r\n      actions.push(`Mantenida \"${keepDefault.name}\" como predeterminada`);\r\n      toUpdate.forEach(addr => {\r\n        actions.push(`Desmarcada \"${addr.name}\" como predeterminada`);\r\n      });\r\n      \r\n    } else {\r\n      console.log('‚úÖ Configuraci√≥n correcta: exactamente una direcci√≥n predeterminada');\r\n      actions.push('Configuraci√≥n correcta: exactamente una direcci√≥n predeterminada');\r\n    }\r\n\r\n    // Verificaci√≥n final\r\n    const { data: finalCheck } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default')\r\n      .eq('user_id', user.id)\r\n      .eq('is_default', true);\r\n\r\n    const finalDefaultCount = finalCheck?.length || 0;\r\n    \r\n    console.log(`‚úÖ Validaci√≥n completada. Direcciones predeterminadas finales: ${finalDefaultCount}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Validaci√≥n de direcciones predeterminadas completada',\r\n      data: {\r\n        totalAddresses: allAddresses.length,\r\n        defaultAddressesBefore: defaultCount,\r\n        defaultAddressesAfter: finalDefaultCount,\r\n        correctionsMade,\r\n        actions,\r\n        currentDefaultAddress: finalCheck?.[0] || null\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error en POST /api/user/addresses/validate-defaults:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET - Obtener estado actual de direcciones predeterminadas\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('üîç GET /api/user/addresses/validate-defaults - Consultando estado');\r\n\r\n    // Autenticaci√≥n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener todas las direcciones del usuario\r\n    const { data: allAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default, created_at')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    const defaultAddresses = allAddresses?.filter(addr => addr.is_default) || [];\r\n    const defaultCount = defaultAddresses.length;\r\n    \r\n    let status: 'correct' | 'no_default' | 'multiple_defaults' = 'correct';\r\n    let needsCorrection = false;\r\n    \r\n    if (defaultCount === 0) {\r\n      status = 'no_default';\r\n      needsCorrection = true;\r\n    } else if (defaultCount > 1) {\r\n      status = 'multiple_defaults';\r\n      needsCorrection = true;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        totalAddresses: allAddresses?.length || 0,\r\n        defaultAddresses: defaultCount,\r\n        status,\r\n        needsCorrection,\r\n        defaultAddressList: defaultAddresses.map(addr => ({\r\n          id: addr.id,\r\n          name: addr.name,\r\n          created_at: addr.created_at\r\n        }))\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error en GET /api/user/addresses/validate-defaults:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}