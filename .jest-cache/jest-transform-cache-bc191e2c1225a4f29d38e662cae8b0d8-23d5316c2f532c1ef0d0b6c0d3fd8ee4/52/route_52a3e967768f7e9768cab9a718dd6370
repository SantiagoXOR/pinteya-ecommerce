f4c9ed146716c3e6aa1c81b96c9ede53
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_psips0h00() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\validate-defaults\\route.ts";
  var hash = "aef2ce349d69c56be750748af6e14da2b73852ce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\validate-defaults\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 69
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 57
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 92
        }
      },
      "13": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "16": {
        start: {
          line: 40,
          column: 31
        },
        end: {
          line: 40,
          column: 130
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 87
        }
      },
      "20": {
        start: {
          line: 50,
          column: 39
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "21": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "22": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "23": {
        start: {
          line: 65,
          column: 33
        },
        end: {
          line: 65,
          column: 77
        }
      },
      "24": {
        start: {
          line: 65,
          column: 61
        },
        end: {
          line: 65,
          column: 76
        }
      },
      "25": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "26": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 68
        }
      },
      "27": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 71
        }
      },
      "28": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 69,
          column: 31
        }
      },
      "29": {
        start: {
          line: 70,
          column: 22
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "30": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "31": {
        start: {
          line: 73,
          column: 38
        },
        end: {
          line: 73,
          column: 53
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 114
        }
      },
      "33": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 77,
          column: 46
        }
      },
      "34": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 32
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 94
        }
      },
      "36": {
        start: {
          line: 80,
          column: 15
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "37": {
        start: {
          line: 82,
          column: 32
        },
        end: {
          line: 82,
          column: 51
        }
      },
      "38": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 98
        }
      },
      "40": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 97
        }
      },
      "41": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 94
        }
      },
      "42": {
        start: {
          line: 86,
          column: 64
        },
        end: {
          line: 86,
          column: 91
        }
      },
      "43": {
        start: {
          line: 88,
          column: 32
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "44": {
        start: {
          line: 88,
          column: 53
        },
        end: {
          line: 88,
          column: 60
        }
      },
      "45": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 37
        }
      },
      "46": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 46
        }
      },
      "47": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 80
        }
      },
      "48": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "49": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 78
        }
      },
      "50": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 94
        }
      },
      "51": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 93
        }
      },
      "52": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 102,
          column: 166
        }
      },
      "53": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 103,
          column: 57
        }
      },
      "54": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 106
        }
      },
      "55": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "56": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 87
        }
      },
      "57": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "58": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "59": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 89
        }
      },
      "60": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 49
        }
      },
      "61": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "62": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "63": {
        start: {
          line: 139,
          column: 31
        },
        end: {
          line: 139,
          column: 130
        }
      },
      "64": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "65": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "66": {
        start: {
          line: 148,
          column: 39
        },
        end: {
          line: 150,
          column: 10
        }
      },
      "67": {
        start: {
          line: 151,
          column: 33
        },
        end: {
          line: 151,
          column: 84
        }
      },
      "68": {
        start: {
          line: 151,
          column: 62
        },
        end: {
          line: 151,
          column: 77
        }
      },
      "69": {
        start: {
          line: 152,
          column: 29
        },
        end: {
          line: 152,
          column: 52
        }
      },
      "70": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 30
        }
      },
      "71": {
        start: {
          line: 154,
          column: 30
        },
        end: {
          line: 154,
          column: 35
        }
      },
      "72": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "73": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 34
        }
      },
      "74": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 35
        }
      },
      "75": {
        start: {
          line: 158,
          column: 15
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "76": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 41
        }
      },
      "77": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 35
        }
      },
      "78": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "79": {
        start: {
          line: 169,
          column: 66
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "80": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 86
        }
      },
      "81": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 19
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 53
          },
          end: {
            line: 65,
            column: 54
          }
        },
        loc: {
          start: {
            line: 65,
            column: 61
          },
          end: {
            line: 65,
            column: 76
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 86,
            column: 56
          },
          end: {
            line: 86,
            column: 57
          }
        },
        loc: {
          start: {
            line: 86,
            column: 64
          },
          end: {
            line: 86,
            column: 91
          }
        },
        line: 86
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 45
          },
          end: {
            line: 88,
            column: 46
          }
        },
        loc: {
          start: {
            line: 88,
            column: 53
          },
          end: {
            line: 88,
            column: 60
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 29
          },
          end: {
            line: 94,
            column: 30
          }
        },
        loc: {
          start: {
            line: 94,
            column: 37
          },
          end: {
            line: 96,
            column: 13
          }
        },
        line: 94
      },
      "9": {
        name: "GET",
        decl: {
          start: {
            line: 126,
            column: 15
          },
          end: {
            line: 126,
            column: 18
          }
        },
        loc: {
          start: {
            line: 126,
            column: 28
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 126
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 151,
            column: 54
          },
          end: {
            line: 151,
            column: 55
          }
        },
        loc: {
          start: {
            line: 151,
            column: 62
          },
          end: {
            line: 151,
            column: 77
          }
        },
        line: 151
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 169,
            column: 57
          },
          end: {
            line: 169,
            column: 58
          }
        },
        loc: {
          start: {
            line: 169,
            column: 66
          },
          end: {
            line: 173,
            column: 21
          }
        },
        line: 169
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 25
          }
        }, {
          start: {
            line: 53,
            column: 29
          },
          end: {
            line: 53,
            column: 54
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 52
          }
        }, {
          start: {
            line: 103,
            column: 56
          },
          end: {
            line: 103,
            column: 57
          }
        }],
        line: 103
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 54
          }
        }, {
          start: {
            line: 114,
            column: 58
          },
          end: {
            line: 114,
            column: 62
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "9": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "10": {
        loc: {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 151,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 151,
            column: 78
          }
        }, {
          start: {
            line: 151,
            column: 82
          },
          end: {
            line: 151,
            column: 84
          }
        }],
        line: 151
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "13": {
        loc: {
          start: {
            line: 165,
            column: 32
          },
          end: {
            line: 165,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 32
          },
          end: {
            line: 165,
            column: 52
          }
        }, {
          start: {
            line: 165,
            column: 56
          },
          end: {
            line: 165,
            column: 57
          }
        }],
        line: 165
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\validate-defaults\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - VALIDACI\xD3N DE DIRECCIONES PREDETERMINADAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n/**\r\n * POST - Validar y corregir direcciones predeterminadas duplicadas\r\n * Este endpoint puede ser llamado para limpiar cualquier inconsistencia\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDD27 POST /api/user/addresses/validate-defaults - Iniciando validaci\xF3n');\r\n\r\n    // Autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log('\uD83D\uDD0D Validando direcciones predeterminadas para usuario:', user.id);\r\n\r\n    // Obtener todas las direcciones del usuario\r\n    const { data: allAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default, created_at')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (!allAddresses || allAddresses.length === 0) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'No hay direcciones para validar',\r\n        data: {\r\n          totalAddresses: 0,\r\n          defaultAddresses: 0,\r\n          correctionsMade: 0\r\n        }\r\n      });\r\n    }\r\n\r\n    // Filtrar direcciones predeterminadas\r\n    const defaultAddresses = allAddresses.filter(addr => addr.is_default);\r\n    const defaultCount = defaultAddresses.length;\r\n    \r\n    console.log(`\uD83D\uDD0D Total direcciones: ${allAddresses.length}`);\r\n    console.log(`\uD83D\uDD0D Direcciones predeterminadas: ${defaultCount}`);\r\n\r\n    let correctionsMade = 0;\r\n    let actions: string[] = [];\r\n\r\n    if (defaultCount === 0) {\r\n      // No hay direcciones predeterminadas, marcar la m\xE1s reciente\r\n      const mostRecentAddress = allAddresses[0];\r\n      \r\n      console.log('\uD83D\uDD04 No hay direcciones predeterminadas, marcando la m\xE1s reciente:', mostRecentAddress.id);\r\n      \r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: true })\r\n        .eq('id', mostRecentAddress.id);\r\n      \r\n      correctionsMade = 1;\r\n      actions.push(`Marcada direcci\xF3n \"${mostRecentAddress.name}\" como predeterminada`);\r\n      \r\n    } else if (defaultCount > 1) {\r\n      // Hay m\xFAltiples direcciones predeterminadas, mantener solo la m\xE1s reciente\r\n      const keepDefault = defaultAddresses[0]; // Ya est\xE1n ordenadas por created_at desc\r\n      const toUpdate = defaultAddresses.slice(1);\r\n      \r\n      console.log(`\uD83D\uDD04 M\xFAltiples direcciones predeterminadas encontradas (${defaultCount})`);\r\n      console.log('\uD83D\uDD04 Manteniendo como predeterminada:', keepDefault.id, keepDefault.name);\r\n      console.log('\uD83D\uDD04 Desmarcando:', toUpdate.map(addr => `${addr.id} (${addr.name})`));\r\n      \r\n      // Desmarcar las direcciones duplicadas\r\n      const idsToUpdate = toUpdate.map(addr => addr.id);\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .in('id', idsToUpdate);\r\n      \r\n      correctionsMade = toUpdate.length;\r\n      actions.push(`Mantenida \"${keepDefault.name}\" como predeterminada`);\r\n      toUpdate.forEach(addr => {\r\n        actions.push(`Desmarcada \"${addr.name}\" como predeterminada`);\r\n      });\r\n      \r\n    } else {\r\n      console.log('\u2705 Configuraci\xF3n correcta: exactamente una direcci\xF3n predeterminada');\r\n      actions.push('Configuraci\xF3n correcta: exactamente una direcci\xF3n predeterminada');\r\n    }\r\n\r\n    // Verificaci\xF3n final\r\n    const { data: finalCheck } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default')\r\n      .eq('user_id', user.id)\r\n      .eq('is_default', true);\r\n\r\n    const finalDefaultCount = finalCheck?.length || 0;\r\n    \r\n    console.log(`\u2705 Validaci\xF3n completada. Direcciones predeterminadas finales: ${finalDefaultCount}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Validaci\xF3n de direcciones predeterminadas completada',\r\n      data: {\r\n        totalAddresses: allAddresses.length,\r\n        defaultAddressesBefore: defaultCount,\r\n        defaultAddressesAfter: finalDefaultCount,\r\n        correctionsMade,\r\n        actions,\r\n        currentDefaultAddress: finalCheck?.[0] || null\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error en POST /api/user/addresses/validate-defaults:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET - Obtener estado actual de direcciones predeterminadas\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDD0D GET /api/user/addresses/validate-defaults - Consultando estado');\r\n\r\n    // Autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener todas las direcciones del usuario\r\n    const { data: allAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, name, is_default, created_at')\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false });\r\n\r\n    const defaultAddresses = allAddresses?.filter(addr => addr.is_default) || [];\r\n    const defaultCount = defaultAddresses.length;\r\n    \r\n    let status: 'correct' | 'no_default' | 'multiple_defaults' = 'correct';\r\n    let needsCorrection = false;\r\n    \r\n    if (defaultCount === 0) {\r\n      status = 'no_default';\r\n      needsCorrection = true;\r\n    } else if (defaultCount > 1) {\r\n      status = 'multiple_defaults';\r\n      needsCorrection = true;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        totalAddresses: allAddresses?.length || 0,\r\n        defaultAddresses: defaultCount,\r\n        status,\r\n        needsCorrection,\r\n        defaultAddressList: defaultAddresses.map(addr => ({\r\n          id: addr.id,\r\n          name: addr.name,\r\n          created_at: addr.created_at\r\n        }))\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error en GET /api/user/addresses/validate-defaults:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "console", "log", "session", "auth", "user", "id", "NextResponse", "json", "error", "status", "data", "supabaseAdmin", "from", "select", "eq", "single", "allAddresses", "order", "ascending", "length", "success", "message", "totalAddresses", "defaultAddresses", "correctionsMade", "filter", "addr", "is_default", "defaultCount", "actions", "mostRecentAddress", "update", "push", "name", "keepDefault", "toUpdate", "slice", "map", "idsToUpdate", "in", "forEach", "finalCheck", "finalDefaultCount", "defaultAddressesBefore", "defaultAddressesAfter", "currentDefaultAddress", "needsCorrection", "defaultAddressList", "created_at"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aef2ce349d69c56be750748af6e14da2b73852ce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_psips0h00 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_psips0h00();
cov_psips0h00().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_psips0h00().f[0]++;
  cov_psips0h00().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_psips0h00().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_psips0h00().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_psips0h00().f[1]++;
    cov_psips0h00().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_psips0h00().f[2]++;
    cov_psips0h00().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_psips0h00().f[3]++;
    cov_psips0h00().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_psips0h00().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_psips0h00().s[8]++, require("../../../../../lib/integrations/supabase"));
const _config =
/* istanbul ignore next */
(cov_psips0h00().s[9]++, require("../../../../../lib/auth/config"));
const runtime =
/* istanbul ignore next */
(cov_psips0h00().s[10]++, 'nodejs');
async function POST(request) {
  /* istanbul ignore next */
  cov_psips0h00().f[4]++;
  cov_psips0h00().s[11]++;
  try {
    /* istanbul ignore next */
    cov_psips0h00().s[12]++;
    console.log('ğ§ POST /api/user/addresses/validate-defaults - Iniciando validaciÃ³n');
    // AutenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_psips0h00().s[13]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_psips0h00().s[14]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_psips0h00().b[0][0]++;
      cov_psips0h00().s[15]++;
      return _server.NextResponse.json({
        error: 'No autenticado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_psips0h00().b[0][1]++;
    }
    // Obtener usuario
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_psips0h00().s[16]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    /* istanbul ignore next */
    cov_psips0h00().s[17]++;
    if (!user) {
      /* istanbul ignore next */
      cov_psips0h00().b[1][0]++;
      cov_psips0h00().s[18]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_psips0h00().b[1][1]++;
    }
    cov_psips0h00().s[19]++;
    console.log('ğ Validando direcciones predeterminadas para usuario:', user.id);
    // Obtener todas las direcciones del usuario
    const {
      data: allAddresses
    } =
    /* istanbul ignore next */
    (cov_psips0h00().s[20]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, name, is_default, created_at').eq('user_id', user.id).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_psips0h00().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_psips0h00().b[3][0]++, !allAddresses) ||
    /* istanbul ignore next */
    (cov_psips0h00().b[3][1]++, allAddresses.length === 0)) {
      /* istanbul ignore next */
      cov_psips0h00().b[2][0]++;
      cov_psips0h00().s[22]++;
      return _server.NextResponse.json({
        success: true,
        message: 'No hay direcciones para validar',
        data: {
          totalAddresses: 0,
          defaultAddresses: 0,
          correctionsMade: 0
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_psips0h00().b[2][1]++;
    }
    // Filtrar direcciones predeterminadas
    const defaultAddresses =
    /* istanbul ignore next */
    (cov_psips0h00().s[23]++, allAddresses.filter(addr => {
      /* istanbul ignore next */
      cov_psips0h00().f[5]++;
      cov_psips0h00().s[24]++;
      return addr.is_default;
    }));
    const defaultCount =
    /* istanbul ignore next */
    (cov_psips0h00().s[25]++, defaultAddresses.length);
    /* istanbul ignore next */
    cov_psips0h00().s[26]++;
    console.log(`ğ Total direcciones: ${allAddresses.length}`);
    /* istanbul ignore next */
    cov_psips0h00().s[27]++;
    console.log(`ğ Direcciones predeterminadas: ${defaultCount}`);
    let correctionsMade =
    /* istanbul ignore next */
    (cov_psips0h00().s[28]++, 0);
    let actions =
    /* istanbul ignore next */
    (cov_psips0h00().s[29]++, []);
    /* istanbul ignore next */
    cov_psips0h00().s[30]++;
    if (defaultCount === 0) {
      /* istanbul ignore next */
      cov_psips0h00().b[4][0]++;
      // No hay direcciones predeterminadas, marcar la mÃ¡s reciente
      const mostRecentAddress =
      /* istanbul ignore next */
      (cov_psips0h00().s[31]++, allAddresses[0]);
      /* istanbul ignore next */
      cov_psips0h00().s[32]++;
      console.log('ğ No hay direcciones predeterminadas, marcando la mÃ¡s reciente:', mostRecentAddress.id);
      /* istanbul ignore next */
      cov_psips0h00().s[33]++;
      await _supabase.supabaseAdmin.from('user_addresses').update({
        is_default: true
      }).eq('id', mostRecentAddress.id);
      /* istanbul ignore next */
      cov_psips0h00().s[34]++;
      correctionsMade = 1;
      /* istanbul ignore next */
      cov_psips0h00().s[35]++;
      actions.push(`Marcada direcciÃ³n "${mostRecentAddress.name}" como predeterminada`);
    } else {
      /* istanbul ignore next */
      cov_psips0h00().b[4][1]++;
      cov_psips0h00().s[36]++;
      if (defaultCount > 1) {
        /* istanbul ignore next */
        cov_psips0h00().b[5][0]++;
        // Hay mÃºltiples direcciones predeterminadas, mantener solo la mÃ¡s reciente
        const keepDefault =
        /* istanbul ignore next */
        (cov_psips0h00().s[37]++, defaultAddresses[0]); // Ya estÃ¡n ordenadas por created_at desc
        const toUpdate =
        /* istanbul ignore next */
        (cov_psips0h00().s[38]++, defaultAddresses.slice(1));
        /* istanbul ignore next */
        cov_psips0h00().s[39]++;
        console.log(`ğ MÃºltiples direcciones predeterminadas encontradas (${defaultCount})`);
        /* istanbul ignore next */
        cov_psips0h00().s[40]++;
        console.log('ğ Manteniendo como predeterminada:', keepDefault.id, keepDefault.name);
        /* istanbul ignore next */
        cov_psips0h00().s[41]++;
        console.log('ğ Desmarcando:', toUpdate.map(addr => {
          /* istanbul ignore next */
          cov_psips0h00().f[6]++;
          cov_psips0h00().s[42]++;
          return `${addr.id} (${addr.name})`;
        }));
        // Desmarcar las direcciones duplicadas
        const idsToUpdate =
        /* istanbul ignore next */
        (cov_psips0h00().s[43]++, toUpdate.map(addr => {
          /* istanbul ignore next */
          cov_psips0h00().f[7]++;
          cov_psips0h00().s[44]++;
          return addr.id;
        }));
        /* istanbul ignore next */
        cov_psips0h00().s[45]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: false
        }).in('id', idsToUpdate);
        /* istanbul ignore next */
        cov_psips0h00().s[46]++;
        correctionsMade = toUpdate.length;
        /* istanbul ignore next */
        cov_psips0h00().s[47]++;
        actions.push(`Mantenida "${keepDefault.name}" como predeterminada`);
        /* istanbul ignore next */
        cov_psips0h00().s[48]++;
        toUpdate.forEach(addr => {
          /* istanbul ignore next */
          cov_psips0h00().f[8]++;
          cov_psips0h00().s[49]++;
          actions.push(`Desmarcada "${addr.name}" como predeterminada`);
        });
      } else {
        /* istanbul ignore next */
        cov_psips0h00().b[5][1]++;
        cov_psips0h00().s[50]++;
        console.log('â ConfiguraciÃ³n correcta: exactamente una direcciÃ³n predeterminada');
        /* istanbul ignore next */
        cov_psips0h00().s[51]++;
        actions.push('ConfiguraciÃ³n correcta: exactamente una direcciÃ³n predeterminada');
      }
    }
    // VerificaciÃ³n final
    const {
      data: finalCheck
    } =
    /* istanbul ignore next */
    (cov_psips0h00().s[52]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, name, is_default').eq('user_id', user.id).eq('is_default', true));
    const finalDefaultCount =
    /* istanbul ignore next */
    (cov_psips0h00().s[53]++,
    /* istanbul ignore next */
    (cov_psips0h00().b[6][0]++, finalCheck?.length) ||
    /* istanbul ignore next */
    (cov_psips0h00().b[6][1]++, 0));
    /* istanbul ignore next */
    cov_psips0h00().s[54]++;
    console.log(`â ValidaciÃ³n completada. Direcciones predeterminadas finales: ${finalDefaultCount}`);
    /* istanbul ignore next */
    cov_psips0h00().s[55]++;
    return _server.NextResponse.json({
      success: true,
      message: 'ValidaciÃ³n de direcciones predeterminadas completada',
      data: {
        totalAddresses: allAddresses.length,
        defaultAddressesBefore: defaultCount,
        defaultAddressesAfter: finalDefaultCount,
        correctionsMade,
        actions,
        currentDefaultAddress:
        /* istanbul ignore next */
        (cov_psips0h00().b[7][0]++, finalCheck?.[0]) ||
        /* istanbul ignore next */
        (cov_psips0h00().b[7][1]++, null)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_psips0h00().s[56]++;
    console.error('â Error en POST /api/user/addresses/validate-defaults:', error);
    /* istanbul ignore next */
    cov_psips0h00().s[57]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_psips0h00().f[9]++;
  cov_psips0h00().s[58]++;
  try {
    /* istanbul ignore next */
    cov_psips0h00().s[59]++;
    console.log('ğ GET /api/user/addresses/validate-defaults - Consultando estado');
    // AutenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_psips0h00().s[60]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_psips0h00().s[61]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_psips0h00().b[8][0]++;
      cov_psips0h00().s[62]++;
      return _server.NextResponse.json({
        error: 'No autenticado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_psips0h00().b[8][1]++;
    }
    // Obtener usuario
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_psips0h00().s[63]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    /* istanbul ignore next */
    cov_psips0h00().s[64]++;
    if (!user) {
      /* istanbul ignore next */
      cov_psips0h00().b[9][0]++;
      cov_psips0h00().s[65]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_psips0h00().b[9][1]++;
    }
    // Obtener todas las direcciones del usuario
    const {
      data: allAddresses
    } =
    /* istanbul ignore next */
    (cov_psips0h00().s[66]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, name, is_default, created_at').eq('user_id', user.id).order('created_at', {
      ascending: false
    }));
    const defaultAddresses =
    /* istanbul ignore next */
    (cov_psips0h00().s[67]++,
    /* istanbul ignore next */
    (cov_psips0h00().b[10][0]++, allAddresses?.filter(addr => {
      /* istanbul ignore next */
      cov_psips0h00().f[10]++;
      cov_psips0h00().s[68]++;
      return addr.is_default;
    })) ||
    /* istanbul ignore next */
    (cov_psips0h00().b[10][1]++, []));
    const defaultCount =
    /* istanbul ignore next */
    (cov_psips0h00().s[69]++, defaultAddresses.length);
    let status =
    /* istanbul ignore next */
    (cov_psips0h00().s[70]++, 'correct');
    let needsCorrection =
    /* istanbul ignore next */
    (cov_psips0h00().s[71]++, false);
    /* istanbul ignore next */
    cov_psips0h00().s[72]++;
    if (defaultCount === 0) {
      /* istanbul ignore next */
      cov_psips0h00().b[11][0]++;
      cov_psips0h00().s[73]++;
      status = 'no_default';
      /* istanbul ignore next */
      cov_psips0h00().s[74]++;
      needsCorrection = true;
    } else {
      /* istanbul ignore next */
      cov_psips0h00().b[11][1]++;
      cov_psips0h00().s[75]++;
      if (defaultCount > 1) {
        /* istanbul ignore next */
        cov_psips0h00().b[12][0]++;
        cov_psips0h00().s[76]++;
        status = 'multiple_defaults';
        /* istanbul ignore next */
        cov_psips0h00().s[77]++;
        needsCorrection = true;
      } else
      /* istanbul ignore next */
      {
        cov_psips0h00().b[12][1]++;
      }
    }
    /* istanbul ignore next */
    cov_psips0h00().s[78]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        totalAddresses:
        /* istanbul ignore next */
        (cov_psips0h00().b[13][0]++, allAddresses?.length) ||
        /* istanbul ignore next */
        (cov_psips0h00().b[13][1]++, 0),
        defaultAddresses: defaultCount,
        status,
        needsCorrection,
        defaultAddressList: defaultAddresses.map(addr => {
          /* istanbul ignore next */
          cov_psips0h00().f[11]++;
          cov_psips0h00().s[79]++;
          return {
            id: addr.id,
            name: addr.name,
            created_at: addr.created_at
          };
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_psips0h00().s[80]++;
    console.error('â Error en GET /api/user/addresses/validate-defaults:', error);
    /* istanbul ignore next */
    cov_psips0h00().s[81]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,