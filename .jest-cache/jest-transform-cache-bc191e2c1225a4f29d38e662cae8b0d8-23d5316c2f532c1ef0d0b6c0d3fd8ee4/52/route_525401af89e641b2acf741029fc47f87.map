{"version":3,"names":["cov_1jvmvmyhn8","actualCoverage","s","GET","f","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","request","searchParams","URL","url","startDate","b","get","Date","now","toISOString","endDate","userId","sessionId","baseQuery","from","select","gte","lte","eq","data","events","error","console","_server","NextResponse","json","status","metrics","calculateMetrics","additionalMetrics","getAdditionalMetrics","undefined","period","totalEvents","length","ecommerceEvents","filter","e","category","navigationEvents","cartAdditions","action","cartRemovals","checkoutStarts","checkoutCompletions","productViews","page","includes","categoryViews","searchQueries","conversionRate","cartAbandonmentRate","productToCartRate","purchaseEvents","totalValue","reduce","sum","event","value","averageOrderValue","uniqueSessions","Set","map","session_id","size","uniqueUsers","user_id","averageEventsPerSession","pageViews","pageViewCounts","acc","topPages","Object","entries","sort","a","slice","views","productViewEvents","productViewCounts","productId","metadata","item_id","productName","item_name","key","topProducts","split","sessionDurations","calculateSessionDurations","averageSessionDuration","duration","ecommerce","Math","round","totalRevenue","engagement","trends","dailyEvents","getDailyEventTrends","hourlyEvents","getHourlyEventTrends","sessionEvents","push","created_at","getTime","values","timestamps","sorted","dailyCounts","date","localeCompare","count","hourlyCounts","hour","getHours","Array","_","ordersQuery","orders","totalOrders","order","total"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\analytics\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API Route para métricas de analytics\r\n * Calcula y devuelve métricas de conversión y comportamiento\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\ninterface MetricsQuery {\r\n  startDate?: string;\r\n  endDate?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const startDate = searchParams.get('startDate') || new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();\r\n    const endDate = searchParams.get('endDate') || new Date().toISOString();\r\n    const userId = searchParams.get('userId');\r\n    const sessionId = searchParams.get('sessionId');\r\n\r\n    // Construir query base\r\n    let baseQuery = supabase\r\n      .from('analytics_events')\r\n      .select('*')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    if (userId) {\r\n      baseQuery = baseQuery.eq('user_id', userId);\r\n    }\r\n\r\n    if (sessionId) {\r\n      baseQuery = baseQuery.eq('session_id', sessionId);\r\n    }\r\n\r\n    const { data: events, error } = await baseQuery;\r\n\r\n    if (error) {\r\n      console.error('Error obteniendo eventos:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error obteniendo eventos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Calcular métricas\r\n    const metrics = calculateMetrics(events || []);\r\n    \r\n    // Obtener métricas adicionales\r\n    const additionalMetrics = await getAdditionalMetrics(startDate, endDate, userId || undefined);\r\n\r\n    return NextResponse.json({\r\n      ...metrics,\r\n      ...additionalMetrics,\r\n      period: {\r\n        startDate,\r\n        endDate,\r\n      },\r\n      totalEvents: events?.length || 0,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error calculando métricas:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateMetrics(events: any[]) {\r\n  const ecommerceEvents = events.filter(e => e.category === 'shop');\r\n  const navigationEvents = events.filter(e => e.category === 'navigation');\r\n  \r\n  // Métricas básicas de e-commerce\r\n  const cartAdditions = ecommerceEvents.filter(e => e.action === 'add_to_cart').length;\r\n  const cartRemovals = ecommerceEvents.filter(e => e.action === 'remove_from_cart').length;\r\n  const checkoutStarts = ecommerceEvents.filter(e => e.action === 'begin_checkout').length;\r\n  const checkoutCompletions = ecommerceEvents.filter(e => e.action === 'purchase').length;\r\n  const productViews = navigationEvents.filter(e => e.page?.includes('/product/')).length;\r\n  const categoryViews = navigationEvents.filter(e => e.page?.includes('/category/')).length;\r\n  const searchQueries = ecommerceEvents.filter(e => e.action === 'search').length;\r\n\r\n  // Calcular tasas de conversión\r\n  const conversionRate = checkoutStarts > 0 ? (checkoutCompletions / checkoutStarts) * 100 : 0;\r\n  const cartAbandonmentRate = cartAdditions > 0 ? ((cartAdditions - checkoutCompletions) / cartAdditions) * 100 : 0;\r\n  const productToCartRate = productViews > 0 ? (cartAdditions / productViews) * 100 : 0;\r\n\r\n  // Calcular AOV (Average Order Value)\r\n  const purchaseEvents = ecommerceEvents.filter(e => e.action === 'purchase');\r\n  const totalValue = purchaseEvents.reduce((sum, event) => sum + (event.value || 0), 0);\r\n  const averageOrderValue = purchaseEvents.length > 0 ? totalValue / purchaseEvents.length : 0;\r\n\r\n  // Métricas de sesión\r\n  const uniqueSessions = new Set(events.map(e => e.session_id)).size;\r\n  const uniqueUsers = new Set(events.filter(e => e.user_id).map(e => e.user_id)).size;\r\n  const averageEventsPerSession = uniqueSessions > 0 ? events.length / uniqueSessions : 0;\r\n\r\n  // Páginas más visitadas\r\n  const pageViews = navigationEvents.filter(e => e.action === 'view');\r\n  const pageViewCounts = pageViews.reduce((acc, event) => {\r\n    const page = event.page || 'unknown';\r\n    acc[page] = (acc[page] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  const topPages = Object.entries(pageViewCounts)\r\n    .sort(([, a], [, b]) => (b as number) - (a as number))\r\n    .slice(0, 10)\r\n    .map(([page, views]) => ({ page, views: views as number }));\r\n\r\n  // Productos más vistos\r\n  const productViewEvents = ecommerceEvents.filter(e => e.action === 'view_item');\r\n  const productViewCounts = productViewEvents.reduce((acc, event) => {\r\n    const productId = event.metadata?.item_id || 'unknown';\r\n    const productName = event.metadata?.item_name || 'Unknown Product';\r\n    const key = `${productId}:${productName}`;\r\n    acc[key] = (acc[key] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  const topProducts = Object.entries(productViewCounts)\r\n    .sort(([, a], [, b]) => (b as number) - (a as number))\r\n    .slice(0, 10)\r\n    .map(([key, views]) => {\r\n      const [productId, productName] = key.split(':');\r\n      return { productId, productName, views: views as number };\r\n    });\r\n\r\n  // Métricas de tiempo\r\n  const sessionDurations = calculateSessionDurations(events);\r\n  const averageSessionDuration = sessionDurations.length > 0 \r\n    ? sessionDurations.reduce((sum, duration) => sum + duration, 0) / sessionDurations.length \r\n    : 0;\r\n\r\n  return {\r\n    ecommerce: {\r\n      cartAdditions,\r\n      cartRemovals,\r\n      checkoutStarts,\r\n      checkoutCompletions,\r\n      productViews,\r\n      categoryViews,\r\n      searchQueries,\r\n      conversionRate: Math.round(conversionRate * 100) / 100,\r\n      cartAbandonmentRate: Math.round(cartAbandonmentRate * 100) / 100,\r\n      productToCartRate: Math.round(productToCartRate * 100) / 100,\r\n      averageOrderValue: Math.round(averageOrderValue * 100) / 100,\r\n      totalRevenue: totalValue,\r\n    },\r\n    engagement: {\r\n      uniqueSessions,\r\n      uniqueUsers,\r\n      averageEventsPerSession: Math.round(averageEventsPerSession * 100) / 100,\r\n      averageSessionDuration: Math.round(averageSessionDuration / 1000), // en segundos\r\n      topPages,\r\n      topProducts,\r\n    },\r\n    trends: {\r\n      dailyEvents: getDailyEventTrends(events),\r\n      hourlyEvents: getHourlyEventTrends(events),\r\n    },\r\n  };\r\n}\r\n\r\nfunction calculateSessionDurations(events: any[]): number[] {\r\n  const sessionEvents = events.reduce((acc, event) => {\r\n    const sessionId = event.session_id;\r\n    if (!acc[sessionId]) {\r\n      acc[sessionId] = [];\r\n    }\r\n    acc[sessionId].push(new Date(event.created_at).getTime());\r\n    return acc;\r\n  }, {} as Record<string, number[]>);\r\n\r\n  return (Object.values(sessionEvents) as number[][]).map((timestamps) => {\r\n    if (timestamps.length < 2) {return 0;}\r\n    const sorted = timestamps.sort((a, b) => a - b);\r\n    return sorted[sorted.length - 1] - sorted[0];\r\n  });\r\n}\r\n\r\nfunction getDailyEventTrends(events: any[]) {\r\n  const dailyCounts = events.reduce((acc, event) => {\r\n    const date = new Date(event.created_at).toISOString().split('T')[0];\r\n    acc[date] = (acc[date] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  return Object.entries(dailyCounts)\r\n    .sort(([a], [b]) => a.localeCompare(b))\r\n    .map(([date, count]) => ({ date, count }));\r\n}\r\n\r\nfunction getHourlyEventTrends(events: any[]) {\r\n  const hourlyCounts = events.reduce((acc, event) => {\r\n    const hour = new Date(event.created_at).getHours();\r\n    acc[hour] = (acc[hour] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<number, number>);\r\n\r\n  return Array.from({ length: 24 }, (_, hour) => ({\r\n    hour,\r\n    count: hourlyCounts[hour] || 0,\r\n  }));\r\n}\r\n\r\nasync function getAdditionalMetrics(startDate: string, endDate: string, userId?: string) {\r\n  try {\r\n    // Obtener métricas de la base de datos principal\r\n    let ordersQuery = supabase\r\n      .from('orders')\r\n      .select('total, created_at, user_id')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    if (userId) {\r\n      ordersQuery = ordersQuery.eq('user_id', userId);\r\n    }\r\n\r\n    const { data: orders } = await ordersQuery;\r\n\r\n    const totalOrders = orders?.length || 0;\r\n    const totalRevenue = orders?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;\r\n\r\n    return {\r\n      orders: {\r\n        totalOrders,\r\n        totalRevenue,\r\n        averageOrderValue: totalOrders > 0 ? totalRevenue / totalOrders : 0,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error('Error obteniendo métricas adicionales:', error);\r\n    return {\r\n      orders: {\r\n        totalOrders: 0,\r\n        totalRevenue: 0,\r\n        averageOrderValue: 0,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}