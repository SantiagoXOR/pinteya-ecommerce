94b56b8223ace0b4a4cb0a4f765ad104
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA USECART HOOK
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _cartslice = /*#__PURE__*/ _interop_require_wildcard(require("../../redux/features/cart-slice"));
const _store = require("../../redux/store");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Selector personalizado para contar items del carrito
const selectCartCount = (state)=>state.cartReducer.items.length;
// Mock del hook personalizado useCart
const useCart = ()=>{
    const dispatch = (0, _store.useAppDispatch)();
    const cartItems = (0, _store.useAppSelector)(_cartslice.selectCartItems);
    const totalPrice = (0, _store.useAppSelector)(_cartslice.selectTotalPrice);
    const cartCount = (0, _store.useAppSelector)(selectCartCount);
    const addToCart = (item)=>{
        dispatch((0, _cartslice.addItemToCart)(item));
    };
    const removeFromCart = (id)=>{
        dispatch((0, _cartslice.removeItemFromCart)(id));
    };
    const updateQuantity = (id, quantity)=>{
        dispatch((0, _cartslice.updateCartItemQuantity)({
            id,
            quantity
        }));
    };
    const clearCart = ()=>{
        dispatch((0, _cartslice.removeAllItemsFromCart)());
    };
    return {
        cartItems,
        totalPrice,
        cartCount,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart
    };
};
// Producto de prueba
const mockProduct = {
    id: 1,
    title: 'Pintura Latex Interior Blanco 4L',
    price: 18000,
    discountedPrice: 15000,
    quantity: 1,
    imgs: {
        thumbnails: [
            '/images/products/pintura-latex-blanco-sm.jpg'
        ],
        previews: [
            '/images/products/pintura-latex-blanco.jpg'
        ]
    }
};
// Función helper para renderizar hook con Redux store
const renderHookWithStore = (initialState = {})=>{
    const store = (0, _toolkit.configureStore)({
        reducer: {
            cartReducer: _cartslice.default
        },
        preloadedState: initialState
    });
    const wrapper = ({ children })=>_react.default.createElement(_reactredux.Provider, {
            store
        }, children);
    return {
        ...(0, _react1.renderHook)(()=>useCart(), {
            wrapper
        }),
        store
    };
};
describe('useCart Hook', ()=>{
    it('should initialize with empty cart', ()=>{
        const { result } = renderHookWithStore();
        expect(result.current.cartItems).toEqual([]);
        expect(result.current.totalPrice).toBe(0);
        expect(result.current.cartCount).toBe(0);
    });
    it('should add item to cart', ()=>{
        const { result } = renderHookWithStore();
        (0, _react1.act)(()=>{
            result.current.addToCart(mockProduct);
        });
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].id).toBe(mockProduct.id);
        expect(result.current.cartItems[0].quantity).toBe(1);
        expect(result.current.cartCount).toBe(1);
    });
    it('should increase quantity when adding existing item', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.addToCart(mockProduct);
        });
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].quantity).toBe(2);
        expect(result.current.cartCount).toBe(1); // Número de productos únicos
    });
    it('should remove item from cart', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.removeFromCart(mockProduct.id);
        });
        expect(result.current.cartItems).toHaveLength(0);
        expect(result.current.cartCount).toBe(0);
        expect(result.current.totalPrice).toBe(0);
    });
    it('should update item quantity', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.updateQuantity(mockProduct.id, 3);
        });
        expect(result.current.cartItems[0].quantity).toBe(3);
    });
    it('should set item quantity to 0 (but not remove from cart)', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.updateQuantity(mockProduct.id, 0);
        });
        // El reducer actual no elimina automáticamente items con cantidad 0
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].quantity).toBe(0);
    });
    it('should clear entire cart', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct,
                    {
                        ...mockProduct,
                        id: 2,
                        title: 'Otro producto'
                    }
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.clearCart();
        });
        expect(result.current.cartItems).toHaveLength(0);
        expect(result.current.cartCount).toBe(0);
        expect(result.current.totalPrice).toBe(0);
    });
    it('should calculate total price correctly', ()=>{
        const product1 = {
            ...mockProduct,
            quantity: 2
        }; // 15000 * 2 = 30000
        const product2 = {
            ...mockProduct,
            id: 2,
            discountedPrice: 10000,
            quantity: 1
        }; // 10000 * 1 = 10000
        const initialState = {
            cartReducer: {
                items: [
                    product1,
                    product2
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        expect(result.current.totalPrice).toBe(40000); // 30000 + 10000
    });
    it('should handle multiple different products', ()=>{
        const { result } = renderHookWithStore();
        const product1 = mockProduct;
        const product2 = {
            ...mockProduct,
            id: 2,
            title: 'Esmalte Azul'
        };
        const product3 = {
            ...mockProduct,
            id: 3,
            title: 'Barniz Transparente'
        };
        (0, _react1.act)(()=>{
            result.current.addToCart(product1);
            result.current.addToCart(product2);
            result.current.addToCart(product3);
        });
        expect(result.current.cartItems).toHaveLength(3);
        expect(result.current.cartCount).toBe(3);
    });
    it('should handle edge cases with invalid quantities', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        // Intentar establecer cantidad negativa
        (0, _react1.act)(()=>{
            result.current.updateQuantity(mockProduct.id, -1);
        });
        // El reducer actual permite cantidades negativas
        expect(result.current.cartItems[0].quantity).toBe(-1);
        // Verificar que el item sigue en el carrito
        expect(result.current.cartItems).toHaveLength(1);
    });
    it('should handle removing non-existent item', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.removeFromCart(999); // ID que no existe
        });
        // El carrito debería permanecer sin cambios
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].id).toBe(mockProduct.id);
    });
    it('should handle updating quantity of non-existent item', ()=>{
        const initialState = {
            cartReducer: {
                items: [
                    mockProduct
                ]
            }
        };
        const { result } = renderHookWithStore(initialState);
        (0, _react1.act)(()=>{
            result.current.updateQuantity(999, 5); // ID que no existe
        });
        // El carrito debería permanecer sin cambios
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].quantity).toBe(mockProduct.quantity);
    });
    it('should maintain cart state consistency', ()=>{
        const { result } = renderHookWithStore();
        // Agregar varios productos y realizar operaciones
        (0, _react1.act)(()=>{
            result.current.addToCart(mockProduct);
            result.current.addToCart({
                ...mockProduct,
                id: 2
            });
            result.current.updateQuantity(1, 3);
            result.current.removeFromCart(2);
        });
        expect(result.current.cartItems).toHaveLength(1);
        expect(result.current.cartItems[0].id).toBe(1);
        expect(result.current.cartItems[0].quantity).toBe(3);
        expect(result.current.cartCount).toBe(1);
    });
    it('should handle products with different price structures', ()=>{
        const productWithoutDiscount = {
            ...mockProduct,
            id: 2,
            price: 20000,
            discountedPrice: 20000
        };
        const { result } = renderHookWithStore();
        (0, _react1.act)(()=>{
            result.current.addToCart(mockProduct); // Con descuento
            result.current.addToCart(productWithoutDiscount); // Sin descuento
        });
        expect(result.current.cartItems).toHaveLength(2);
        expect(result.current.totalPrice).toBe(35000); // 15000 + 20000
    });
});

//# sourceMappingURL=data:application/json;base64,