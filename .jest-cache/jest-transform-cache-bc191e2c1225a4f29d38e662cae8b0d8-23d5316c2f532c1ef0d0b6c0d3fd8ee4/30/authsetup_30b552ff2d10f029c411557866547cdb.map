{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\setup\\auth-setup.js"],"sourcesContent":["/**\r\n * Setup específico para autenticación en tests\r\n * Resuelve problemas de importación de NextAuth y Google Provider\r\n */\r\n\r\n// Mock NextAuth antes de cualquier importación\r\njest.mock('next-auth', () => {\r\n  const mockAuth = jest.fn(() => Promise.resolve(null));\r\n  const mockSignIn = jest.fn();\r\n  const mockSignOut = jest.fn();\r\n  const mockHandlers = {\r\n    GET: jest.fn(),\r\n    POST: jest.fn(),\r\n  };\r\n\r\n  const mockNextAuth = jest.fn(() => ({\r\n    handlers: mockHandlers,\r\n    auth: mockAuth,\r\n    signIn: mockSignIn,\r\n    signOut: mockSignOut,\r\n  }));\r\n\r\n  return {\r\n    __esModule: true,\r\n    default: mockNextAuth,\r\n    auth: mockAuth,\r\n    signIn: mockSignIn,\r\n    signOut: mockSignOut,\r\n    handlers: mockHandlers,\r\n  };\r\n});\r\n\r\n// Mock Google Provider antes de cualquier importación\r\njest.mock('next-auth/providers/google', () => {\r\n  const mockGoogleProvider = jest.fn((config) => ({\r\n    id: 'google',\r\n    name: 'Google',\r\n    type: 'oauth',\r\n    clientId: config?.clientId || 'mock-google-client-id',\r\n    clientSecret: config?.clientSecret || 'mock-google-client-secret',\r\n    authorization: {\r\n      url: 'https://accounts.google.com/oauth/authorize',\r\n      params: {\r\n        scope: 'openid email profile',\r\n        response_type: 'code',\r\n      },\r\n    },\r\n    token: 'https://oauth2.googleapis.com/token',\r\n    userinfo: 'https://www.googleapis.com/oauth2/v2/userinfo',\r\n    profile: jest.fn((profile) => ({\r\n      id: profile.id,\r\n      name: profile.name,\r\n      email: profile.email,\r\n      image: profile.picture,\r\n    })),\r\n  }));\r\n\r\n  return {\r\n    __esModule: true,\r\n    default: mockGoogleProvider,\r\n  };\r\n});\r\n\r\n// Mock del archivo auth.ts completo\r\njest.mock('@/auth', () => {\r\n  const mockAuth = jest.fn(() => Promise.resolve(null));\r\n  const mockSignIn = jest.fn();\r\n  const mockSignOut = jest.fn();\r\n  const mockHandlers = {\r\n    GET: jest.fn(),\r\n    POST: jest.fn(),\r\n  };\r\n\r\n  return {\r\n    __esModule: true,\r\n    auth: mockAuth,\r\n    signIn: mockSignIn,\r\n    signOut: mockSignOut,\r\n    handlers: mockHandlers,\r\n    default: {\r\n      auth: mockAuth,\r\n      signIn: mockSignIn,\r\n      signOut: mockSignOut,\r\n      handlers: mockHandlers,\r\n    },\r\n  };\r\n});\r\n"],"names":["jest","mock","mockAuth","fn","Promise","resolve","mockSignIn","mockSignOut","mockHandlers","GET","POST","mockNextAuth","handlers","auth","signIn","signOut","__esModule","default","mockGoogleProvider","config","id","name","type","clientId","clientSecret","authorization","url","params","scope","response_type","token","userinfo","profile","email","image","picture"],"mappings":"AAAA;;;CAGC,GAED,+CAA+C;;AAC/CA,KAAKC,IAAI,CAAC,aAAa;IACrB,MAAMC,WAAWF,KAAKG,EAAE,CAAC,IAAMC,QAAQC,OAAO,CAAC;IAC/C,MAAMC,aAAaN,KAAKG,EAAE;IAC1B,MAAMI,cAAcP,KAAKG,EAAE;IAC3B,MAAMK,eAAe;QACnBC,KAAKT,KAAKG,EAAE;QACZO,MAAMV,KAAKG,EAAE;IACf;IAEA,MAAMQ,eAAeX,KAAKG,EAAE,CAAC,IAAO,CAAA;YAClCS,UAAUJ;YACVK,MAAMX;YACNY,QAAQR;YACRS,SAASR;QACX,CAAA;IAEA,OAAO;QACLS,YAAY;QACZC,SAASN;QACTE,MAAMX;QACNY,QAAQR;QACRS,SAASR;QACTK,UAAUJ;IACZ;AACF;AAEA,sDAAsD;AACtDR,KAAKC,IAAI,CAAC,8BAA8B;IACtC,MAAMiB,qBAAqBlB,KAAKG,EAAE,CAAC,CAACgB,SAAY,CAAA;YAC9CC,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,UAAUJ,QAAQI,YAAY;YAC9BC,cAAcL,QAAQK,gBAAgB;YACtCC,eAAe;gBACbC,KAAK;gBACLC,QAAQ;oBACNC,OAAO;oBACPC,eAAe;gBACjB;YACF;YACAC,OAAO;YACPC,UAAU;YACVC,SAAShC,KAAKG,EAAE,CAAC,CAAC6B,UAAa,CAAA;oBAC7BZ,IAAIY,QAAQZ,EAAE;oBACdC,MAAMW,QAAQX,IAAI;oBAClBY,OAAOD,QAAQC,KAAK;oBACpBC,OAAOF,QAAQG,OAAO;gBACxB,CAAA;QACF,CAAA;IAEA,OAAO;QACLnB,YAAY;QACZC,SAASC;IACX;AACF;AAEA,oCAAoC;AACpClB,KAAKC,IAAI,CAAC,UAAU;IAClB,MAAMC,WAAWF,KAAKG,EAAE,CAAC,IAAMC,QAAQC,OAAO,CAAC;IAC/C,MAAMC,aAAaN,KAAKG,EAAE;IAC1B,MAAMI,cAAcP,KAAKG,EAAE;IAC3B,MAAMK,eAAe;QACnBC,KAAKT,KAAKG,EAAE;QACZO,MAAMV,KAAKG,EAAE;IACf;IAEA,OAAO;QACLa,YAAY;QACZH,MAAMX;QACNY,QAAQR;QACRS,SAASR;QACTK,UAAUJ;QACVS,SAAS;YACPJ,MAAMX;YACNY,QAAQR;YACRS,SAASR;YACTK,UAAUJ;QACZ;IACF;AACF"}