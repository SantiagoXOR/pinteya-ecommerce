{"version":3,"names":["cov_2kyb51ouax","actualCoverage","s","getActiveFiltersCount","f","hasActiveFilters","useCategoryProductCounts","useFilteredProducts","useProductCount","filters","b","_reactquery","useQuery","queryKey","queryFn","searchParams","URLSearchParams","category","set","brand","search","priceMin","undefined","toString","priceMax","categories","length","join","brands","paintTypes","hasDiscount","page","limit","sortBy","sortOrder","url","response","fetch","ok","Error","status","statusText","result","_jsonutils","safeApiResponseJson","success","error","data","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","enabled","countFilters","count","pagination","total","categoryIds","baseFilters","counts","promises","map","categoryId","results","Promise","all","forEach"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useFilteredProducts.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { ProductWithCategory, PaginatedResponse } from '@/types/api';\r\nimport { safeApiResponseJson } from '@/lib/json-utils';\r\n\r\n// ===================================\r\n// TIPOS PARA FILTROS DE PRODUCTOS\r\n// ===================================\r\n\r\nexport interface ProductFilters {\r\n  // Filtros básicos\r\n  category?: string;\r\n  brand?: string;\r\n  search?: string;\r\n  priceMin?: number;\r\n  priceMax?: number;\r\n  hasDiscount?: boolean;\r\n  \r\n  // Filtros avanzados (múltiples valores)\r\n  categories?: string[];\r\n  brands?: string[];\r\n  paintTypes?: string[];\r\n  \r\n  // Paginación y ordenamiento\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'price' | 'name' | 'created_at' | 'brand';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA PRODUCTOS FILTRADOS\r\n// ===================================\r\n\r\nexport const useFilteredProducts = (filters: ProductFilters = {}) => {\r\n  return useQuery({\r\n    queryKey: ['filtered-products', filters],\r\n    queryFn: async (): Promise<PaginatedResponse<ProductWithCategory>> => {\r\n      \r\n      // Construir URL con parámetros\r\n      const searchParams = new URLSearchParams();\r\n      \r\n      // Filtros básicos\r\n      if (filters.category) {searchParams.set('category', filters.category);}\r\n      if (filters.brand) {searchParams.set('brand', filters.brand);}\r\n      if (filters.search) {searchParams.set('search', filters.search);}\r\n      if (filters.priceMin !== undefined) {searchParams.set('priceMin', filters.priceMin.toString());}\r\n      if (filters.priceMax !== undefined) {searchParams.set('priceMax', filters.priceMax.toString());}\r\n      \r\n      // Filtros avanzados (arrays)\r\n      if (filters.categories && filters.categories.length > 0) {\r\n        searchParams.set('categories', filters.categories.join(','));\r\n      }\r\n      if (filters.brands && filters.brands.length > 0) {\r\n        searchParams.set('brands', filters.brands.join(','));\r\n      }\r\n      if (filters.paintTypes && filters.paintTypes.length > 0) {\r\n        searchParams.set('paintTypes', filters.paintTypes.join(','));\r\n      }\r\n      \r\n      // Filtro de descuento\r\n      if (filters.hasDiscount !== undefined) {\r\n        searchParams.set('hasDiscount', filters.hasDiscount.toString());\r\n      }\r\n      \r\n      // Paginación y ordenamiento\r\n      if (filters.page) {searchParams.set('page', filters.page.toString());}\r\n      if (filters.limit) {searchParams.set('limit', filters.limit.toString());}\r\n      if (filters.sortBy) {searchParams.set('sortBy', filters.sortBy);}\r\n      if (filters.sortOrder) {searchParams.set('sortOrder', filters.sortOrder);}\r\n      \r\n      const url = `/api/products?${searchParams.toString()}`;\r\n      \r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\r\n      \r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Error parsing response');\r\n      }\r\n\r\n      return result.data!;\r\n    },\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    gcTime: 10 * 60 * 1000, // 10 minutos\r\n    retry: 2,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n    enabled: true, // Siempre habilitado, incluso sin filtros\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA CONTEO DE PRODUCTOS\r\n// ===================================\r\n\r\nexport const useProductCount = (filters: Omit<ProductFilters, 'page' | 'limit'> = {}) => {\r\n  return useQuery({\r\n    queryKey: ['product-count', filters],\r\n    queryFn: async (): Promise<number> => {\r\n\r\n      // Usar los mismos filtros pero con limit=1 para obtener solo el count\r\n      const countFilters = { ...filters, page: 1, limit: 1 };\r\n      const searchParams = new URLSearchParams();\r\n\r\n      // Aplicar los mismos filtros que useFilteredProducts\r\n      if (countFilters.category) {searchParams.set('category', countFilters.category);}\r\n      if (countFilters.brand) {searchParams.set('brand', countFilters.brand);}\r\n      if (countFilters.search) {searchParams.set('search', countFilters.search);}\r\n      if (countFilters.priceMin !== undefined) {searchParams.set('priceMin', countFilters.priceMin.toString());}\r\n      if (countFilters.priceMax !== undefined) {searchParams.set('priceMax', countFilters.priceMax.toString());}\r\n\r\n      if (countFilters.categories && countFilters.categories.length > 0) {\r\n        searchParams.set('categories', countFilters.categories.join(','));\r\n      }\r\n      if (countFilters.brands && countFilters.brands.length > 0) {\r\n        searchParams.set('brands', countFilters.brands.join(','));\r\n      }\r\n      if (countFilters.paintTypes && countFilters.paintTypes.length > 0) {\r\n        searchParams.set('paintTypes', countFilters.paintTypes.join(','));\r\n      }\r\n\r\n      // Filtro de descuento\r\n      if (countFilters.hasDiscount !== undefined) {\r\n        searchParams.set('hasDiscount', countFilters.hasDiscount.toString());\r\n      }\r\n\r\n      searchParams.set('page', '1');\r\n      searchParams.set('limit', '1');\r\n\r\n      const url = `/api/products?${searchParams.toString()}`;\r\n      const response = await fetch(url);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\r\n\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Error parsing response');\r\n      }\r\n\r\n      const count = result.data?.pagination?.total || 0;\r\n\r\n      return count;\r\n    },\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    gcTime: 10 * 60 * 1000, // 10 minutos\r\n    retry: 2,\r\n    enabled: true,\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA CONTEO DINÁMICO POR CATEGORÍA\r\n// ===================================\r\n\r\nexport const useCategoryProductCounts = (\r\n  categoryIds: string[],\r\n  baseFilters: Omit<ProductFilters, 'categories' | 'category'> = {}\r\n) => {\r\n  return useQuery({\r\n    queryKey: ['category-product-counts', categoryIds, baseFilters],\r\n    queryFn: async (): Promise<Record<string, number>> => {\r\n      const counts: Record<string, number> = {};\r\n\r\n      // Obtener conteo para cada categoría individualmente\r\n      const promises = categoryIds.map(async (categoryId) => {\r\n        const filters = { ...baseFilters, categories: [categoryId] };\r\n        const searchParams = new URLSearchParams();\r\n\r\n        // IMPORTANTE: Aplicar filtro de categoría PRIMERO para evitar conflictos de parámetros\r\n        searchParams.set('categories', categoryId);\r\n\r\n        // Aplicar filtros base\r\n        if (filters.brand) {searchParams.set('brand', filters.brand);}\r\n        if (filters.search) {searchParams.set('search', filters.search);}\r\n        if (filters.priceMin !== undefined) {searchParams.set('priceMin', filters.priceMin.toString());}\r\n        if (filters.priceMax !== undefined) {searchParams.set('priceMax', filters.priceMax.toString());}\r\n        if (filters.brands && filters.brands.length > 0) {\r\n          searchParams.set('brands', filters.brands.join(','));\r\n        }\r\n        if (filters.paintTypes && filters.paintTypes.length > 0) {\r\n          searchParams.set('paintTypes', filters.paintTypes.join(','));\r\n        }\r\n\r\n        // Filtro de descuento\r\n        if (filters.hasDiscount !== undefined) {\r\n          searchParams.set('hasDiscount', filters.hasDiscount.toString());\r\n        }\r\n\r\n        // Aplicar paginación al final\r\n        searchParams.set('limit', '1');\r\n        searchParams.set('page', '1');\r\n\r\n        const url = `/api/products?${searchParams.toString()}`;\r\n\r\n        const response = await fetch(url);\r\n\r\n        if (!response.ok) {\r\n          return { categoryId, count: 0 };\r\n        }\r\n\r\n        const result = await safeApiResponseJson<PaginatedResponse<ProductWithCategory>>(response);\r\n\r\n        if (!result.success) {\r\n          return { categoryId, count: 0 };\r\n        }\r\n\r\n        const count = result.data?.pagination?.total || 0;\r\n        return { categoryId, count };\r\n      });\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      results.forEach(({ categoryId, count }) => {\r\n        counts[categoryId] = count;\r\n      });\r\n\r\n      return counts;\r\n    },\r\n    staleTime: 2 * 60 * 1000, // 2 minutos (más frecuente para conteos dinámicos)\r\n    gcTime: 5 * 60 * 1000, // 5 minutos\r\n    retry: 1,\r\n    enabled: categoryIds.length > 0,\r\n  });\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nexport const getActiveFiltersCount = (filters: ProductFilters): number => {\r\n  let count = 0;\r\n  \r\n  if (filters.categories && filters.categories.length > 0) {count += filters.categories.length;}\r\n  if (filters.brands && filters.brands.length > 0) {count += filters.brands.length;}\r\n  if (filters.paintTypes && filters.paintTypes.length > 0) {count += filters.paintTypes.length;}\r\n  if (filters.priceMin !== undefined || filters.priceMax !== undefined) {count += 1;}\r\n  if (filters.search) {count += 1;}\r\n  \r\n  return count;\r\n};\r\n\r\nexport const hasActiveFilters = (filters: ProductFilters): boolean => {\r\n  return getActiveFiltersCount(filters) > 0;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}