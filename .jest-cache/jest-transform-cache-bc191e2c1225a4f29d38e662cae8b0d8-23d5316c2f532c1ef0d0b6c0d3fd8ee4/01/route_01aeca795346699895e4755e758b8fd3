ec0b7942fd394b231bcdaa3ba8edb095
// üñºÔ∏è Enterprise Product Images API
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _middlewarecomposer = require("../../../../../../lib/api/middleware-composer");
const _errorhandler = require("../../../../../../lib/api/error-handler");
const _apilogger = require("../../../../../../lib/api/api-logger");
const _apiauthmiddleware = require("../../../../../../lib/auth/api-auth-middleware");
const _supabasejs = require("@supabase/supabase-js");
// Validation schemas
const ImageUploadSchema = _zod.z.object({
    file: _zod.z.any(),
    alt_text: _zod.z.string().optional(),
    is_primary: _zod.z.boolean().default(false)
});
const ImageUpdateSchema = _zod.z.object({
    alt_text: _zod.z.string().optional(),
    is_primary: _zod.z.boolean().optional(),
    display_order: _zod.z.number().int().min(0).optional()
});
const ProductParamsSchema = _zod.z.object({
    id: _zod.z.string().uuid('ID de producto inv√°lido')
});
const ImageParamsSchema = _zod.z.object({
    id: _zod.z.string().uuid('ID de producto inv√°lido'),
    imageId: _zod.z.string().uuid('ID de imagen inv√°lido')
});
// Helper function to get Supabase Storage client
function getStorageClient() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    return (0, _supabasejs.createClient)(supabaseUrl, supabaseServiceKey);
}
// Helper function to validate file
function validateImageFile(file) {
    const allowedTypes = [
        'image/jpeg',
        'image/jpg',
        'image/png',
        'image/webp'
    ];
    const maxSize = 5 * 1024 * 1024 // 5MB
    ;
    if (!allowedTypes.includes(file.type)) {
        throw new _errorhandler.ValidationError('Tipo de archivo no permitido. Use JPG, PNG o WebP');
    }
    if (file.size > maxSize) {
        throw new _errorhandler.ValidationError('El archivo es demasiado grande. M√°ximo 5MB');
    }
}
// Helper function to generate unique filename
function generateImageFilename(originalName, productId) {
    const timestamp = Date.now();
    const extension = originalName.split('.').pop();
    const cleanName = originalName.replace(/[^a-zA-Z0-9.-]/g, '_');
    return `products/${productId}/${timestamp}_${cleanName}`;
}
// Helper function to upload image to Supabase Storage
async function uploadImageToStorage(file, filename) {
    const supabase = getStorageClient();
    const { data, error } = await supabase.storage.from('product-images').upload(filename, file, {
        cacheControl: '3600',
        upsert: false
    });
    if (error) {
        throw new _errorhandler.ApiError('Error al subir imagen', 500, 'STORAGE_ERROR', error);
    }
    // Get public URL
    const { data: urlData } = supabase.storage.from('product-images').getPublicUrl(filename);
    return {
        path: data.path,
        url: urlData.publicUrl
    };
}
// Helper function to delete image from storage
async function deleteImageFromStorage(path) {
    const supabase = getStorageClient();
    const { error } = await supabase.storage.from('product-images').remove([
        path
    ]);
    if (error) {
        console.warn('Error deleting image from storage:', error);
    // Don't throw error, just log warning
    }
}
/**
 * POST /api/admin/products/[id]/images
 * Upload new image for product
 */ const postHandler = async (request, { params })=>{
    const { supabase, user } = request;
    const productId = params.id;
    // Validate params
    const paramsValidation = ProductParamsSchema.safeParse({
        id: productId
    });
    if (!paramsValidation.success) {
        throw new _errorhandler.ValidationError('ID de producto inv√°lido', paramsValidation.error.errors);
    }
    // Check if product exists
    const { data: product, error: productError } = await supabase.from('products').select('id, name').eq('id', productId).single();
    if (productError || !product) {
        throw new _errorhandler.NotFoundError('Producto');
    }
    // Parse form data
    const formData = await request.formData();
    const file = formData.get('file');
    const altText = formData.get('alt_text');
    const isPrimary = formData.get('is_primary') === 'true';
    if (!file) {
        throw new _errorhandler.ValidationError('No se proporcion√≥ archivo');
    }
    // Validate file
    validateImageFile(file);
    // Generate filename and upload
    const filename = generateImageFilename(file.name, productId);
    const uploadResult = await uploadImageToStorage(file, filename);
    // Save image record to database
    const { data: imageRecord, error: dbError } = await supabase.from('product_images').insert({
        product_id: productId,
        url: uploadResult.url,
        storage_path: uploadResult.path,
        alt_text: altText || null,
        is_primary: isPrimary,
        file_size: file.size,
        file_type: file.type,
        original_filename: file.name,
        created_at: new Date().toISOString()
    }).select().single();
    if (dbError) {
        // Clean up uploaded file if database insert fails
        await deleteImageFromStorage(uploadResult.path);
        throw new _errorhandler.ApiError('Error al guardar imagen en base de datos', 500, 'DATABASE_ERROR', dbError);
    }
    // If this is set as primary, update other images
    if (isPrimary) {
        await supabase.from('product_images').update({
            is_primary: false
        }).eq('product_id', productId).neq('id', imageRecord.id);
    }
    // Log action
    await (0, _apilogger.logAdminAction)(user.id, 'CREATE', 'product_image', imageRecord.id, null, imageRecord);
    return _server.NextResponse.json({
        data: imageRecord,
        success: true,
        message: 'Imagen subida exitosamente'
    }, {
        status: 201
    });
};
/**
 * GET /api/admin/products/[id]/images
 * Get all images for product
 */ const getHandler = async (request, { params })=>{
    const { supabase } = request;
    const productId = params.id;
    // Validate params
    const paramsValidation = ProductParamsSchema.safeParse({
        id: productId
    });
    if (!paramsValidation.success) {
        throw new _errorhandler.ValidationError('ID de producto inv√°lido', paramsValidation.error.errors);
    }
    // Get images
    const { data: images, error } = await supabase.from('product_images').select('*').eq('product_id', productId).order('display_order', {
        ascending: true
    }).order('created_at', {
        ascending: true
    });
    if (error) {
        throw new _errorhandler.ApiError('Error al obtener im√°genes', 500, 'DATABASE_ERROR', error);
    }
    return _server.NextResponse.json({
        data: images,
        success: true,
        message: 'Im√°genes obtenidas exitosamente'
    });
};
const GET = (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)([
    'products_read'
]))(getHandler);
const POST = (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)([
    'products_update'
]))(postHandler);

//# sourceMappingURL=data:application/json;base64,