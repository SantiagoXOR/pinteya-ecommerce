71fe4e45f7995f9bfd8a22a67c354cfb
// ===================================
// PINTEYA E-COMMERCE - REAL-TIME PERFORMANCE MONITOR
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DEFAULT_THRESHOLDS () {
        return DEFAULT_THRESHOLDS;
    },
    get RealTimeMonitoringUtils () {
        return RealTimeMonitoringUtils;
    },
    get RealTimePerformanceMonitor () {
        return RealTimePerformanceMonitor;
    },
    get realTimePerformanceMonitor () {
        return realTimePerformanceMonitor;
    }
});
const _logger = require("../enterprise/logger");
const _redis = require("../integrations/redis");
const DEFAULT_THRESHOLDS = {
    responseTime: {
        warning: 1000,
        critical: 3000
    },
    errorRate: {
        warning: 0.05,
        critical: 0.1
    },
    cpuUsage: {
        warning: 0.7,
        critical: 0.9
    },
    memoryUsage: {
        warning: 0.8,
        critical: 0.95
    },
    coreWebVitals: {
        lcp: {
            good: 2500,
            poor: 4000
        },
        fid: {
            good: 100,
            poor: 300
        },
        cls: {
            good: 0.1,
            poor: 0.25
        },
        fcp: {
            good: 1800,
            poor: 3000
        },
        ttfb: {
            good: 800,
            poor: 1800
        }
    }
};
class RealTimePerformanceMonitor {
    constructor(){
        this.redis = (0, _redis.getRedisClient)();
        this.thresholds = DEFAULT_THRESHOLDS;
        this.alerts = new Map();
        this.metricsBuffer = [];
        this.webVitalsBuffer = [];
        this.apiMetricsBuffer = [];
        this.dbMetricsBuffer = [];
        this.subscribers = new Set();
        this.startMonitoring();
        this.startPeriodicFlush();
    }
    static getInstance() {
        if (!RealTimePerformanceMonitor.instance) {
            RealTimePerformanceMonitor.instance = new RealTimePerformanceMonitor();
        }
        return RealTimePerformanceMonitor.instance;
    }
    /**
   * Inicia el monitoreo en tiempo real
   */ startMonitoring() {
        this.monitoringInterval = setInterval(()=>{
            this.collectSystemMetrics();
        }, 5000); // Cada 5 segundos
        _logger.logger.info(_logger.LogCategory.MONITORING, 'Real-time performance monitoring started');
    }
    /**
   * Inicia el flush periódico de métricas
   */ startPeriodicFlush() {
        this.flushInterval = setInterval(()=>{
            this.flushMetricsToRedis();
        }, 30000); // Cada 30 segundos
    }
    /**
   * Recolecta métricas del sistema
   */ async collectSystemMetrics() {
        try {
            const metrics = {
                timestamp: Date.now(),
                responseTime: await this.getAverageResponseTime(),
                throughput: await this.getCurrentThroughput(),
                errorRate: await this.getCurrentErrorRate(),
                cpuUsage: await this.getCPUUsage(),
                memoryUsage: await this.getMemoryUsage(),
                activeConnections: await this.getActiveConnections(),
                queueSize: await this.getQueueSize(),
                cacheHitRate: await this.getCacheHitRate(),
                dbConnectionPool: await this.getDBConnectionPoolSize()
            };
            this.metricsBuffer.push(metrics);
            // Mantener solo las últimas 100 métricas en buffer
            if (this.metricsBuffer.length > 100) {
                this.metricsBuffer = this.metricsBuffer.slice(-100);
            }
            // Verificar umbrales y generar alertas
            await this.checkThresholds(metrics);
            // Notificar a suscriptores
            this.notifySubscribers('metrics', metrics);
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error collecting system metrics', error);
        }
    }
    /**
   * Registra métricas de Core Web Vitals
   */ recordWebVitals(vitals) {
        const webVitals = {
            ...vitals,
            timestamp: Date.now()
        };
        this.webVitalsBuffer.push(webVitals);
        // Mantener solo las últimas 50 métricas
        if (this.webVitalsBuffer.length > 50) {
            this.webVitalsBuffer = this.webVitalsBuffer.slice(-50);
        }
        // Verificar umbrales de Core Web Vitals
        this.checkWebVitalsThresholds(webVitals);
        // Notificar a suscriptores
        this.notifySubscribers('webVitals', webVitals);
    }
    /**
   * Registra métricas de API
   */ recordAPIMetrics(metrics) {
        const apiMetrics = {
            ...metrics,
            timestamp: Date.now()
        };
        this.apiMetricsBuffer.push(apiMetrics);
        // Mantener solo las últimas 200 métricas
        if (this.apiMetricsBuffer.length > 200) {
            this.apiMetricsBuffer = this.apiMetricsBuffer.slice(-200);
        }
        // Verificar umbrales de API
        this.checkAPIThresholds(apiMetrics);
        // Notificar a suscriptores
        this.notifySubscribers('apiMetrics', apiMetrics);
    }
    /**
   * Registra métricas de base de datos
   */ recordDatabaseMetrics(metrics) {
        const dbMetrics = {
            ...metrics,
            timestamp: Date.now()
        };
        this.dbMetricsBuffer.push(dbMetrics);
        // Mantener solo las últimas 100 métricas
        if (this.dbMetricsBuffer.length > 100) {
            this.dbMetricsBuffer = this.dbMetricsBuffer.slice(-100);
        }
        // Verificar umbrales de DB
        this.checkDatabaseThresholds(dbMetrics);
        // Notificar a suscriptores
        this.notifySubscribers('dbMetrics', dbMetrics);
    }
    /**
   * Verifica umbrales y genera alertas
   */ async checkThresholds(metrics) {
        // Verificar tiempo de respuesta
        if (metrics.responseTime > this.thresholds.responseTime.critical) {
            await this.createAlert('performance', 'critical', 'responseTime', metrics.responseTime, this.thresholds.responseTime.critical, `Response time crítico: ${metrics.responseTime}ms`);
        } else if (metrics.responseTime > this.thresholds.responseTime.warning) {
            await this.createAlert('performance', 'medium', 'responseTime', metrics.responseTime, this.thresholds.responseTime.warning, `Response time alto: ${metrics.responseTime}ms`);
        }
        // Verificar tasa de errores
        if (metrics.errorRate > this.thresholds.errorRate.critical) {
            await this.createAlert('error', 'critical', 'errorRate', metrics.errorRate, this.thresholds.errorRate.critical, `Tasa de errores crítica: ${(metrics.errorRate * 100).toFixed(1)}%`);
        } else if (metrics.errorRate > this.thresholds.errorRate.warning) {
            await this.createAlert('error', 'medium', 'errorRate', metrics.errorRate, this.thresholds.errorRate.warning, `Tasa de errores alta: ${(metrics.errorRate * 100).toFixed(1)}%`);
        }
        // Verificar uso de CPU
        if (metrics.cpuUsage > this.thresholds.cpuUsage.critical) {
            await this.createAlert('capacity', 'critical', 'cpuUsage', metrics.cpuUsage, this.thresholds.cpuUsage.critical, `Uso de CPU crítico: ${(metrics.cpuUsage * 100).toFixed(1)}%`);
        } else if (metrics.cpuUsage > this.thresholds.cpuUsage.warning) {
            await this.createAlert('capacity', 'medium', 'cpuUsage', metrics.cpuUsage, this.thresholds.cpuUsage.warning, `Uso de CPU alto: ${(metrics.cpuUsage * 100).toFixed(1)}%`);
        }
        // Verificar uso de memoria
        if (metrics.memoryUsage > this.thresholds.memoryUsage.critical) {
            await this.createAlert('capacity', 'critical', 'memoryUsage', metrics.memoryUsage, this.thresholds.memoryUsage.critical, `Uso de memoria crítico: ${(metrics.memoryUsage * 100).toFixed(1)}%`);
        } else if (metrics.memoryUsage > this.thresholds.memoryUsage.warning) {
            await this.createAlert('capacity', 'medium', 'memoryUsage', metrics.memoryUsage, this.thresholds.memoryUsage.warning, `Uso de memoria alto: ${(metrics.memoryUsage * 100).toFixed(1)}%`);
        }
    }
    /**
   * Verifica umbrales de Core Web Vitals
   */ checkWebVitalsThresholds(vitals) {
        const { coreWebVitals } = this.thresholds;
        // Verificar LCP
        if (vitals.lcp > coreWebVitals.lcp.poor) {
            this.createAlert('performance', 'high', 'lcp', vitals.lcp, coreWebVitals.lcp.poor, `LCP pobre: ${vitals.lcp}ms`);
        } else if (vitals.lcp > coreWebVitals.lcp.good) {
            this.createAlert('performance', 'medium', 'lcp', vitals.lcp, coreWebVitals.lcp.good, `LCP necesita mejora: ${vitals.lcp}ms`);
        }
        // Verificar FID
        if (vitals.fid > coreWebVitals.fid.poor) {
            this.createAlert('performance', 'high', 'fid', vitals.fid, coreWebVitals.fid.poor, `FID pobre: ${vitals.fid}ms`);
        } else if (vitals.fid > coreWebVitals.fid.good) {
            this.createAlert('performance', 'medium', 'fid', vitals.fid, coreWebVitals.fid.good, `FID necesita mejora: ${vitals.fid}ms`);
        }
        // Verificar CLS
        if (vitals.cls > coreWebVitals.cls.poor) {
            this.createAlert('performance', 'high', 'cls', vitals.cls, coreWebVitals.cls.poor, `CLS pobre: ${vitals.cls}`);
        } else if (vitals.cls > coreWebVitals.cls.good) {
            this.createAlert('performance', 'medium', 'cls', vitals.cls, coreWebVitals.cls.good, `CLS necesita mejora: ${vitals.cls}`);
        }
    }
    /**
   * Verifica umbrales de API
   */ checkAPIThresholds(metrics) {
        if (metrics.responseTime > this.thresholds.responseTime.critical) {
            this.createAlert('performance', 'high', 'apiResponseTime', metrics.responseTime, this.thresholds.responseTime.critical, `API lenta: ${metrics.method} ${metrics.endpoint} - ${metrics.responseTime}ms`);
        }
        if (metrics.statusCode >= 500) {
            this.createAlert('error', 'high', 'apiError', metrics.statusCode, 500, `Error de servidor: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);
        } else if (metrics.statusCode >= 400) {
            this.createAlert('error', 'medium', 'apiClientError', metrics.statusCode, 400, `Error de cliente: ${metrics.method} ${metrics.endpoint} - ${metrics.statusCode}`);
        }
    }
    /**
   * Verifica umbrales de base de datos
   */ checkDatabaseThresholds(metrics) {
        if (metrics.queryTime > 5000) {
            // 5 segundos
            this.createAlert('performance', 'high', 'slowQuery', metrics.queryTime, 5000, `Query lenta: ${metrics.queryType} en ${metrics.tableName} - ${metrics.queryTime}ms`);
        }
        if (metrics.waitingConnections > 10) {
            this.createAlert('capacity', 'medium', 'dbConnectionWait', metrics.waitingConnections, 10, `Conexiones esperando: ${metrics.waitingConnections}`);
        }
    }
    /**
   * Crea una alerta
   */ async createAlert(type, severity, metric, value, threshold, message) {
        const alertId = `${type}_${metric}_${Date.now()}`;
        const alert = {
            id: alertId,
            type,
            severity,
            metric,
            value,
            threshold,
            message,
            timestamp: Date.now(),
            resolved: false,
            escalated: false
        };
        this.alerts.set(alertId, alert);
        // Notificar a suscriptores
        this.notifySubscribers('alert', alert);
        // Log de la alerta
        _logger.logger.warn(_logger.LogCategory.MONITORING, `Performance alert: ${message}`, {
            type,
            severity,
            metric,
            value,
            threshold
        });
        // Persistir en Redis
        await this.persistAlert(alert);
    }
    /**
   * Suscribirse a actualizaciones en tiempo real
   */ subscribe(callback) {
        this.subscribers.add(callback);
        return ()=>{
            this.subscribers.delete(callback);
        };
    }
    /**
   * Notifica a todos los suscriptores
   */ notifySubscribers(type, data) {
        this.subscribers.forEach((callback)=>{
            try {
                callback({
                    type,
                    data,
                    timestamp: Date.now()
                });
            } catch (error) {
                _logger.logger.error(_logger.LogCategory.MONITORING, 'Error notifying subscriber', error);
            }
        });
    }
    /**
   * Obtiene métricas actuales
   */ getCurrentMetrics() {
        return {
            realTime: [
                ...this.metricsBuffer
            ],
            webVitals: [
                ...this.webVitalsBuffer
            ],
            apiMetrics: [
                ...this.apiMetricsBuffer
            ],
            dbMetrics: [
                ...this.dbMetricsBuffer
            ],
            alerts: Array.from(this.alerts.values()).filter((a)=>!a.resolved)
        };
    }
    /**
   * Actualiza umbrales
   */ updateThresholds(newThresholds) {
        this.thresholds = {
            ...this.thresholds,
            ...newThresholds
        };
        _logger.logger.info(_logger.LogCategory.MONITORING, 'Performance thresholds updated');
    }
    /**
   * Resuelve una alerta
   */ resolveAlert(alertId) {
        const alert = this.alerts.get(alertId);
        if (alert && !alert.resolved) {
            alert.resolved = true;
            alert.resolvedAt = Date.now();
            this.notifySubscribers('alertResolved', alert);
            _logger.logger.info(_logger.LogCategory.MONITORING, `Alert resolved: ${alertId}`);
            return true;
        }
        return false;
    }
    /**
   * Flush de métricas a Redis
   */ async flushMetricsToRedis() {
        try {
            const timestamp = Date.now();
            // Guardar métricas en Redis con TTL de 24 horas
            if (this.metricsBuffer.length > 0) {
                await this.redis.setex(`metrics:realtime:${timestamp}`, 86400, JSON.stringify(this.metricsBuffer));
            }
            if (this.webVitalsBuffer.length > 0) {
                await this.redis.setex(`metrics:webvitals:${timestamp}`, 86400, JSON.stringify(this.webVitalsBuffer));
            }
            if (this.apiMetricsBuffer.length > 0) {
                await this.redis.setex(`metrics:api:${timestamp}`, 86400, JSON.stringify(this.apiMetricsBuffer));
            }
            if (this.dbMetricsBuffer.length > 0) {
                await this.redis.setex(`metrics:database:${timestamp}`, 86400, JSON.stringify(this.dbMetricsBuffer));
            }
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error flushing metrics to Redis', error);
        }
    }
    /**
   * Persiste alerta en Redis
   */ async persistAlert(alert) {
        try {
            await this.redis.setex(`alert:${alert.id}`, 86400 * 7, JSON.stringify(alert));
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.MONITORING, 'Error persisting alert', error);
        }
    }
    // ===================================
    // MÉTODOS DE RECOLECCIÓN DE MÉTRICAS
    // ===================================
    async getAverageResponseTime() {
        // Calcular tiempo de respuesta promedio de las últimas métricas de API
        const recentAPI = this.apiMetricsBuffer.slice(-10);
        if (recentAPI.length === 0) {
            return 0;
        }
        const total = recentAPI.reduce((sum, metric)=>sum + metric.responseTime, 0);
        return total / recentAPI.length;
    }
    async getCurrentThroughput() {
        // Calcular throughput basado en requests por segundo
        const now = Date.now();
        const oneMinuteAgo = now - 60000;
        const recentRequests = this.apiMetricsBuffer.filter((m)=>m.timestamp > oneMinuteAgo);
        return recentRequests.length / 60 // requests por segundo
        ;
    }
    async getCurrentErrorRate() {
        const recentAPI = this.apiMetricsBuffer.slice(-100);
        if (recentAPI.length === 0) {
            return 0;
        }
        const errors = recentAPI.filter((m)=>m.statusCode >= 400).length;
        return errors / recentAPI.length;
    }
    async getCPUUsage() {
        // Simulación de uso de CPU (en implementación real, usar librerías del sistema)
        return Math.random() * 0.8 // 0-80%
        ;
    }
    async getMemoryUsage() {
        // Obtener uso de memoria real
        if (typeof process !== 'undefined') {
            const memUsage = process.memoryUsage();
            return memUsage.heapUsed / memUsage.heapTotal;
        }
        return Math.random() * 0.7 // Fallback
        ;
    }
    async getActiveConnections() {
        // Simulación de conexiones activas
        return Math.floor(Math.random() * 100) + 10;
    }
    async getQueueSize() {
        // Simulación de tamaño de cola
        return Math.floor(Math.random() * 20);
    }
    async getCacheHitRate() {
        // Obtener hit rate del cache (integrar con cache manager)
        return Math.random() * 0.3 + 0.7 // 70-100%
        ;
    }
    async getDBConnectionPoolSize() {
        // Simulación de pool de conexiones DB
        return Math.floor(Math.random() * 10) + 5;
    }
    /**
   * Destructor
   */ destroy() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }
        if (this.flushInterval) {
            clearInterval(this.flushInterval);
        }
        this.subscribers.clear();
    }
}
const realTimePerformanceMonitor = RealTimePerformanceMonitor.getInstance();
const RealTimeMonitoringUtils = {
    /**
   * Registra métricas de Web Vitals desde el cliente
   */ recordWebVitals (vitals) {
        realTimePerformanceMonitor.recordWebVitals(vitals);
    },
    /**
   * Registra métricas de API
   */ recordAPICall (metrics) {
        realTimePerformanceMonitor.recordAPIMetrics(metrics);
    },
    /**
   * Registra métricas de base de datos
   */ recordDatabaseQuery (metrics) {
        realTimePerformanceMonitor.recordDatabaseMetrics(metrics);
    },
    /**
   * Obtiene resumen de estado actual
   */ getCurrentStatus () {
        const current = realTimePerformanceMonitor.getCurrentMetrics();
        const latestMetrics = current.realTime[current.realTime.length - 1];
        if (!latestMetrics) {
            return {
                healthy: false,
                activeAlerts: 0,
                avgResponseTime: 0,
                errorRate: 0,
                lastUpdate: 0
            };
        }
        const activeAlerts = current.alerts.length;
        const healthy = activeAlerts === 0 && latestMetrics.responseTime < 2000 && latestMetrics.errorRate < 0.05;
        return {
            healthy,
            activeAlerts,
            avgResponseTime: latestMetrics.responseTime,
            errorRate: latestMetrics.errorRate,
            lastUpdate: latestMetrics.timestamp
        };
    }
};

//# sourceMappingURL=data:application/json;base64,