{"version":3,"names":["default","cov_23g4pzs8qr","f","s","_default","useRecentSearches","useRecentSearchesSimple","DEFAULT_OPTIONS","maxSearches","storageKey","enablePersistence","filterDuplicates","expirationDays","options","b","config","recentSearches","setRecentSearches","_react","useState","sanitizeSearch","useCallback","search","trim","toLowerCase","isExpired","timestamp","maxAge","Date","now","loadFromStorage","result","_jsonutils","safeLocalStorageGet","success","data","Array","isArray","searches","persistedData","safeLocalStorageSet","version","slice","saveToStorage","window","length","localStorage","removeItem","dataToStore","setItem","JSON","stringify","error","console","warn","useEffect","loaded","addSearch","sanitized","prev","updated","filter","unshift","removeSearch","clearSearches","hasSearch","some","getRecentSearches","limit","actualLimit","moveToTop","filtered","existing","find"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useRecentSearches.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useRecentSearches - Gestión de búsquedas recientes con localStorage\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { safeLocalStorageGet, safeLocalStorageSet, STORAGE_KEYS } from '@/lib/json-utils';\r\n\r\nexport interface RecentSearchesOptions {\r\n  /** Número máximo de búsquedas recientes a mantener */\r\n  maxSearches?: number;\r\n  /** Clave de localStorage para persistir las búsquedas */\r\n  storageKey?: string;\r\n  /** Habilitar/deshabilitar persistencia en localStorage */\r\n  enablePersistence?: boolean;\r\n  /** Filtrar búsquedas duplicadas */\r\n  filterDuplicates?: boolean;\r\n  /** Tiempo de expiración en días (0 = sin expiración) */\r\n  expirationDays?: number;\r\n}\r\n\r\nexport interface RecentSearchesReturn {\r\n  /** Array de búsquedas recientes */\r\n  recentSearches: string[];\r\n  /** Agregar una nueva búsqueda */\r\n  addSearch: (search: string) => void;\r\n  /** Remover una búsqueda específica */\r\n  removeSearch: (search: string) => void;\r\n  /** Limpiar todas las búsquedas */\r\n  clearSearches: () => void;\r\n  /** Verificar si una búsqueda existe */\r\n  hasSearch: (search: string) => boolean;\r\n  /** Obtener las N búsquedas más recientes */\r\n  getRecentSearches: (limit?: number) => string[];\r\n  /** Reordenar búsquedas (mover al principio) */\r\n  moveToTop: (search: string) => void;\r\n}\r\n\r\ninterface PersistedSearchData {\r\n  searches: string[];\r\n  timestamp: number;\r\n  version: string;\r\n}\r\n\r\nconst DEFAULT_OPTIONS: Required<RecentSearchesOptions> = {\r\n  maxSearches: 5,\r\n  storageKey: 'pinteya-recent-searches',\r\n  enablePersistence: true,\r\n  filterDuplicates: true,\r\n  expirationDays: 30, // 30 días de expiración\r\n};\r\n\r\n/**\r\n * Hook para gestionar búsquedas recientes con persistencia en localStorage\r\n * \r\n * Características:\r\n * - Persistencia automática en localStorage\r\n * - Límite configurable de búsquedas\r\n * - Filtrado de duplicados\r\n * - Expiración automática\r\n * - Manejo de errores robusto\r\n */\r\nexport function useRecentSearches(options: RecentSearchesOptions = {}): RecentSearchesReturn {\r\n  const config = { ...DEFAULT_OPTIONS, ...options };\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n\r\n  // Función para validar y limpiar una búsqueda\r\n  const sanitizeSearch = useCallback((search: string): string => {\r\n    return search.trim().toLowerCase();\r\n  }, []);\r\n\r\n  // Función para verificar si los datos han expirado\r\n  const isExpired = useCallback((timestamp: number): boolean => {\r\n    if (config.expirationDays === 0) {return false;}\r\n    const maxAge = config.expirationDays * 24 * 60 * 60 * 1000;\r\n    return Date.now() - timestamp > maxAge;\r\n  }, [config.expirationDays]);\r\n\r\n  // Cargar búsquedas desde localStorage\r\n  const loadFromStorage = useCallback((): string[] => {\r\n    if (!config.enablePersistence) {\r\n      return [];\r\n    }\r\n\r\n    // Usar utilidad segura para cargar desde localStorage\r\n    const result = safeLocalStorageGet<PersistedSearchData | string[]>(config.storageKey);\r\n\r\n    if (!result.success) {\r\n      return [];\r\n    }\r\n\r\n    const data = result.data;\r\n\r\n    // Verificar si es formato nuevo (con metadata)\r\n    if (data && typeof data === 'object' && 'searches' in data && Array.isArray(data.searches)) {\r\n      const persistedData = data as PersistedSearchData;\r\n\r\n      // Verificar expiración\r\n      if (persistedData.timestamp && isExpired(persistedData.timestamp)) {\r\n        // Limpiar datos expirados usando utilidad segura\r\n        safeLocalStorageSet(config.storageKey, {\r\n          searches: [],\r\n          timestamp: Date.now(),\r\n          version: '1.0'\r\n        });\r\n        return [];\r\n      }\r\n\r\n      return persistedData.searches.slice(0, config.maxSearches);\r\n    }\r\n\r\n    // Formato antiguo (array simple)\r\n    if (Array.isArray(data)) {\r\n      return data.slice(0, config.maxSearches);\r\n    }\r\n\r\n    return [];\r\n  }, [config.enablePersistence, config.storageKey, config.maxSearches, isExpired]);\r\n\r\n  // Guardar búsquedas en localStorage\r\n  const saveToStorage = useCallback((searches: string[]): void => {\r\n    if (!config.enablePersistence || typeof window === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (searches.length === 0) {\r\n        localStorage.removeItem(config.storageKey);\r\n        return;\r\n      }\r\n\r\n      const dataToStore: PersistedSearchData = {\r\n        searches: searches.slice(0, config.maxSearches),\r\n        timestamp: Date.now(),\r\n        version: '1.0.0'\r\n      };\r\n\r\n      localStorage.setItem(config.storageKey, JSON.stringify(dataToStore));\r\n    } catch (error) {\r\n      console.warn('Error saving recent searches to localStorage:', error);\r\n    }\r\n  }, [config.enablePersistence, config.storageKey, config.maxSearches]);\r\n\r\n  // Cargar búsquedas al inicializar\r\n  useEffect(() => {\r\n    const loaded = loadFromStorage();\r\n    setRecentSearches(loaded);\r\n  }, [loadFromStorage]);\r\n\r\n  // Agregar una nueva búsqueda\r\n  const addSearch = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    if (!sanitized || sanitized.length < 2) {return;}\r\n\r\n    setRecentSearches(prev => {\r\n      let updated = [...prev];\r\n\r\n      // Remover duplicados si está habilitado\r\n      if (config.filterDuplicates) {\r\n        updated = updated.filter(s => sanitizeSearch(s) !== sanitized);\r\n      }\r\n\r\n      // Agregar al principio\r\n      updated.unshift(search.trim());\r\n\r\n      // Limitar al máximo configurado\r\n      updated = updated.slice(0, config.maxSearches);\r\n\r\n      // Guardar en localStorage\r\n      saveToStorage(updated);\r\n\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, config.filterDuplicates, config.maxSearches, saveToStorage]);\r\n\r\n  // Remover una búsqueda específica\r\n  const removeSearch = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    \r\n    setRecentSearches(prev => {\r\n      const updated = prev.filter(s => sanitizeSearch(s) !== sanitized);\r\n      saveToStorage(updated);\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, saveToStorage]);\r\n\r\n  // Limpiar todas las búsquedas\r\n  const clearSearches = useCallback((): void => {\r\n    setRecentSearches([]);\r\n    saveToStorage([]);\r\n  }, [saveToStorage]);\r\n\r\n  // Verificar si una búsqueda existe\r\n  const hasSearch = useCallback((search: string): boolean => {\r\n    const sanitized = sanitizeSearch(search);\r\n    return recentSearches.some(s => sanitizeSearch(s) === sanitized);\r\n  }, [recentSearches, sanitizeSearch]);\r\n\r\n  // Obtener las N búsquedas más recientes\r\n  const getRecentSearches = useCallback((limit?: number): string[] => {\r\n    const actualLimit = limit ?? config.maxSearches;\r\n    return recentSearches.slice(0, actualLimit);\r\n  }, [recentSearches, config.maxSearches]);\r\n\r\n  // Mover una búsqueda al principio (reordenar)\r\n  const moveToTop = useCallback((search: string): void => {\r\n    const sanitized = sanitizeSearch(search);\r\n    \r\n    setRecentSearches(prev => {\r\n      const filtered = prev.filter(s => sanitizeSearch(s) !== sanitized);\r\n      const existing = prev.find(s => sanitizeSearch(s) === sanitized);\r\n      \r\n      if (!existing) {return prev;}\r\n      \r\n      const updated = [existing, ...filtered];\r\n      saveToStorage(updated);\r\n      return updated;\r\n    });\r\n  }, [sanitizeSearch, saveToStorage]);\r\n\r\n  return {\r\n    recentSearches,\r\n    addSearch,\r\n    removeSearch,\r\n    clearSearches,\r\n    hasSearch,\r\n    getRecentSearches,\r\n    moveToTop,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook simplificado para solo obtener búsquedas recientes\r\n */\r\nexport function useRecentSearchesSimple(limit: number = 5): string[] {\r\n  const { getRecentSearches } = useRecentSearches({ maxSearches: limit });\r\n  return getRecentSearches();\r\n}\r\n\r\nexport default useRecentSearches;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}