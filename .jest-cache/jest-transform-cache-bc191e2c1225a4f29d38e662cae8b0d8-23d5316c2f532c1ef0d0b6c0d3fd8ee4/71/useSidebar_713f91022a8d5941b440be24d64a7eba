80c5493fc11db423d8be73717f4d88dc
/**
 * Hook para manejar el estado y comportamiento de sidebars
 * Incluye manejo de eventos para cerrar con click fuera y tecla Escape
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useSidebar () {
        return useSidebar;
    }
});
const _react = require("react");
const useSidebar = (initialState = false)=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(initialState);
    const sidebarRef = (0, _react.useRef)(null);
    // Funciones estables con useCallback para evitar re-renders innecesarios
    const open = (0, _react.useCallback)(()=>{
        setIsOpen(true);
    }, []);
    const close = (0, _react.useCallback)(()=>{
        setIsOpen(false);
    }, []);
    const toggle = (0, _react.useCallback)(()=>{
        setIsOpen((prev)=>!prev);
    }, []);
    // Manejar click fuera del sidebar
    const handleClickOutside = (0, _react.useCallback)((event)=>{
        if (sidebarRef.current && !sidebarRef.current.contains(event.target)) {
            close();
        }
    }, [
        close
    ]);
    // Manejar tecla Escape
    const handleKeyDown = (0, _react.useCallback)((event)=>{
        if (event.key === 'Escape') {
            close();
        }
    }, [
        close
    ]);
    // Agregar/remover event listeners cuando el sidebar estÃ¡ abierto
    (0, _react.useEffect)(()=>{
        if (isOpen) {
            // Agregar event listeners
            document.addEventListener('mousedown', handleClickOutside);
            document.addEventListener('keydown', handleKeyDown);
            // Cleanup function
            return ()=>{
                document.removeEventListener('mousedown', handleClickOutside);
                document.removeEventListener('keydown', handleKeyDown);
            };
        }
    }, [
        isOpen,
        handleClickOutside,
        handleKeyDown
    ]);
    return {
        isOpen,
        toggle,
        open,
        close
    };
};
const _default = useSidebar;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXHVzZVNpZGViYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIb29rIHBhcmEgbWFuZWphciBlbCBlc3RhZG8geSBjb21wb3J0YW1pZW50byBkZSBzaWRlYmFyc1xuICogSW5jbHV5ZSBtYW5lam8gZGUgZXZlbnRvcyBwYXJhIGNlcnJhciBjb24gY2xpY2sgZnVlcmEgeSB0ZWNsYSBFc2NhcGVcbiAqL1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbmludGVyZmFjZSBVc2VTaWRlYmFyUmV0dXJuIHtcbiAgaXNPcGVuOiBib29sZWFuXG4gIHRvZ2dsZTogKCkgPT4gdm9pZFxuICBvcGVuOiAoKSA9PiB2b2lkXG4gIGNsb3NlOiAoKSA9PiB2b2lkXG59XG5cbi8qKlxuICogSG9vayBxdWUgbWFuZWphIGVsIGVzdGFkbyBkZSB1biBzaWRlYmFyIGNvbiBmdW5jaW9uYWxpZGFkZXMgZGUgYXBlcnR1cmEvY2llcnJlXG4gKiBJbmNsdXllIGV2ZW50IGxpc3RlbmVycyBwYXJhIGNlcnJhciBjb24gY2xpY2sgZnVlcmEgeSB0ZWNsYSBFc2NhcGVcbiAqIEBwYXJhbSBpbml0aWFsU3RhdGUgLSBFc3RhZG8gaW5pY2lhbCBkZWwgc2lkZWJhciAoZGVmYXVsdDogZmFsc2UpXG4gKiBAcmV0dXJucyBvYmpldG8gY29uIGlzT3BlbiwgdG9nZ2xlLCBvcGVuLCBjbG9zZVxuICovXG5leHBvcnQgY29uc3QgdXNlU2lkZWJhciA9IChpbml0aWFsU3RhdGU6IGJvb2xlYW4gPSBmYWxzZSk6IFVzZVNpZGViYXJSZXR1cm4gPT4ge1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKVxuICBjb25zdCBzaWRlYmFyUmVmID0gdXNlUmVmPEhUTUxFbGVtZW50IHwgbnVsbD4obnVsbClcblxuICAvLyBGdW5jaW9uZXMgZXN0YWJsZXMgY29uIHVzZUNhbGxiYWNrIHBhcmEgZXZpdGFyIHJlLXJlbmRlcnMgaW5uZWNlc2FyaW9zXG4gIGNvbnN0IG9wZW4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNPcGVuKHRydWUpXG4gIH0sIFtdKVxuXG4gIGNvbnN0IGNsb3NlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzT3BlbihmYWxzZSlcbiAgfSwgW10pXG5cbiAgY29uc3QgdG9nZ2xlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldElzT3BlbihwcmV2ID0+ICFwcmV2KVxuICB9LCBbXSlcblxuICAvLyBNYW5lamFyIGNsaWNrIGZ1ZXJhIGRlbCBzaWRlYmFyXG4gIGNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgaWYgKHNpZGViYXJSZWYuY3VycmVudCAmJiAhc2lkZWJhclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgICBjbG9zZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2xvc2VdXG4gIClcblxuICAvLyBNYW5lamFyIHRlY2xhIEVzY2FwZVxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICBjbG9zZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2xvc2VdXG4gIClcblxuICAvLyBBZ3JlZ2FyL3JlbW92ZXIgZXZlbnQgbGlzdGVuZXJzIGN1YW5kbyBlbCBzaWRlYmFyIGVzdMOhIGFiaWVydG9cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAvLyBBZ3JlZ2FyIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlQ2xpY2tPdXRzaWRlKVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pXG5cbiAgICAgIC8vIENsZWFudXAgZnVuY3Rpb25cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZUNsaWNrT3V0c2lkZSlcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pXG4gICAgICB9XG4gICAgfVxuICB9LCBbaXNPcGVuLCBoYW5kbGVDbGlja091dHNpZGUsIGhhbmRsZUtleURvd25dKVxuXG4gIHJldHVybiB7XG4gICAgaXNPcGVuLFxuICAgIHRvZ2dsZSxcbiAgICBvcGVuLFxuICAgIGNsb3NlLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVNpZGViYXJcbiJdLCJuYW1lcyI6WyJ1c2VTaWRlYmFyIiwiaW5pdGlhbFN0YXRlIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwidXNlU3RhdGUiLCJzaWRlYmFyUmVmIiwidXNlUmVmIiwib3BlbiIsInVzZUNhbGxiYWNrIiwiY2xvc2UiLCJ0b2dnbGUiLCJwcmV2IiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwiZXZlbnQiLCJjdXJyZW50IiwiY29udGFpbnMiLCJ0YXJnZXQiLCJoYW5kbGVLZXlEb3duIiwia2V5IiwidXNlRWZmZWN0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7Ozs7Ozs7OztRQTZFRDtlQUFBOztRQTVEYUE7ZUFBQUE7Ozt1QkFmNEM7QUFlbEQsTUFBTUEsYUFBYSxDQUFDQyxlQUF3QixLQUFLO0lBQ3RELE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHQyxJQUFBQSxlQUFRLEVBQUNIO0lBQ3JDLE1BQU1JLGFBQWFDLElBQUFBLGFBQU0sRUFBcUI7SUFFOUMseUVBQXlFO0lBQ3pFLE1BQU1DLE9BQU9DLElBQUFBLGtCQUFXLEVBQUM7UUFDdkJMLFVBQVU7SUFDWixHQUFHLEVBQUU7SUFFTCxNQUFNTSxRQUFRRCxJQUFBQSxrQkFBVyxFQUFDO1FBQ3hCTCxVQUFVO0lBQ1osR0FBRyxFQUFFO0lBRUwsTUFBTU8sU0FBU0YsSUFBQUEsa0JBQVcsRUFBQztRQUN6QkwsVUFBVVEsQ0FBQUEsT0FBUSxDQUFDQTtJQUNyQixHQUFHLEVBQUU7SUFFTCxrQ0FBa0M7SUFDbEMsTUFBTUMscUJBQXFCSixJQUFBQSxrQkFBVyxFQUNwQyxDQUFDSztRQUNDLElBQUlSLFdBQVdTLE9BQU8sSUFBSSxDQUFDVCxXQUFXUyxPQUFPLENBQUNDLFFBQVEsQ0FBQ0YsTUFBTUcsTUFBTSxHQUFXO1lBQzVFUDtRQUNGO0lBQ0YsR0FDQTtRQUFDQTtLQUFNO0lBR1QsdUJBQXVCO0lBQ3ZCLE1BQU1RLGdCQUFnQlQsSUFBQUEsa0JBQVcsRUFDL0IsQ0FBQ0s7UUFDQyxJQUFJQSxNQUFNSyxHQUFHLEtBQUssVUFBVTtZQUMxQlQ7UUFDRjtJQUNGLEdBQ0E7UUFBQ0E7S0FBTTtJQUdULGlFQUFpRTtJQUNqRVUsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUlqQixRQUFRO1lBQ1YsMEJBQTBCO1lBQzFCa0IsU0FBU0MsZ0JBQWdCLENBQUMsYUFBYVQ7WUFDdkNRLFNBQVNDLGdCQUFnQixDQUFDLFdBQVdKO1lBRXJDLG1CQUFtQjtZQUNuQixPQUFPO2dCQUNMRyxTQUFTRSxtQkFBbUIsQ0FBQyxhQUFhVjtnQkFDMUNRLFNBQVNFLG1CQUFtQixDQUFDLFdBQVdMO1lBQzFDO1FBQ0Y7SUFDRixHQUFHO1FBQUNmO1FBQVFVO1FBQW9CSztLQUFjO0lBRTlDLE9BQU87UUFDTGY7UUFDQVE7UUFDQUg7UUFDQUU7SUFDRjtBQUNGO01BRUEsV0FBZVQifQ==