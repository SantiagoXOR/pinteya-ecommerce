{"version":3,"names":["default","cov_14etdrr6y3","f","s","_default","useRealTimeValidation","ValidationFeedback","field","value","error","isValid","showValidation","b","validationRules","required","minLength","pattern","customValidator","getValidationState","trim","undefined","length","test","validationState","getIcon","_jsxruntime","jsx","_lucidereact","CheckCircle","className","AlertCircle","XCircle","getMessage","getValidMessage","getWarningMessage","getErrorMessage","messages","email","phone","streetAddress","firstName","lastName","getTextColor","jsxs","setIsValid","_react","useState","setShowValidation","useEffect","validateField","emailRegex","phoneRegex","replace"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Checkout\\ValidationFeedback.tsx"],"sourcesContent":["import React from 'react';\r\nimport { CheckCircle, XCircle, AlertCircle } from 'lucide-react';\r\n\r\ninterface ValidationFeedbackProps {\r\n  field: string;\r\n  value: string;\r\n  error?: string;\r\n  isValid?: boolean;\r\n  showValidation?: boolean;\r\n  validationRules?: {\r\n    required?: boolean;\r\n    minLength?: number;\r\n    pattern?: RegExp;\r\n    customValidator?: (value: string) => boolean;\r\n  };\r\n}\r\n\r\nconst ValidationFeedback: React.FC<ValidationFeedbackProps> = ({\r\n  field,\r\n  value,\r\n  error,\r\n  isValid,\r\n  showValidation = true,\r\n  validationRules = {}\r\n}) => {\r\n  const { required = true, minLength, pattern, customValidator } = validationRules;\r\n\r\n  // Determinar el estado de validación\r\n  const getValidationState = () => {\r\n    if (!showValidation || !value.trim()) {return null;}\r\n    \r\n    if (error) {return 'error';}\r\n    if (isValid !== undefined) {return isValid ? 'valid' : 'error';}\r\n    \r\n    // Validación automática basada en reglas\r\n    if (required && !value.trim()) {return 'error';}\r\n    if (minLength && value.length < minLength) {return 'warning';}\r\n    if (pattern && !pattern.test(value)) {return 'error';}\r\n    if (customValidator && !customValidator(value)) {return 'error';}\r\n    \r\n    return 'valid';\r\n  };\r\n\r\n  const validationState = getValidationState();\r\n\r\n  if (!showValidation || !validationState) {return null;}\r\n\r\n  const getIcon = () => {\r\n    switch (validationState) {\r\n      case 'valid':\r\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n      case 'warning':\r\n        return <AlertCircle className=\"w-4 h-4 text-yellow-500\" />;\r\n      case 'error':\r\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getMessage = () => {\r\n    if (error) {return error;}\r\n    \r\n    switch (validationState) {\r\n      case 'valid':\r\n        return getValidMessage(field);\r\n      case 'warning':\r\n        return getWarningMessage(field, minLength);\r\n      case 'error':\r\n        return getErrorMessage(field);\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  const getValidMessage = (field: string) => {\r\n    const messages: Record<string, string> = {\r\n      email: '✓ Email válido',\r\n      phone: '✓ Teléfono válido',\r\n      streetAddress: '✓ Dirección válida',\r\n      firstName: '✓ Nombre válido',\r\n      lastName: '✓ Apellido válido'\r\n    };\r\n    return messages[field] || '✓ Campo válido';\r\n  };\r\n\r\n  const getWarningMessage = (field: string, minLength?: number) => {\r\n    if (field === 'streetAddress' && minLength) {\r\n      return `⚠ Dirección muy corta (mínimo ${minLength} caracteres)`;\r\n    }\r\n    return '⚠ Campo incompleto';\r\n  };\r\n\r\n  const getErrorMessage = (field: string) => {\r\n    const messages: Record<string, string> = {\r\n      email: '✗ Email inválido',\r\n      phone: '✗ Teléfono inválido',\r\n      streetAddress: '✗ Dirección requerida',\r\n      firstName: '✗ Nombre requerido',\r\n      lastName: '✗ Apellido requerido'\r\n    };\r\n    return messages[field] || '✗ Campo inválido';\r\n  };\r\n\r\n  const getTextColor = () => {\r\n    switch (validationState) {\r\n      case 'valid':\r\n        return 'text-green-600';\r\n      case 'warning':\r\n        return 'text-yellow-600';\r\n      case 'error':\r\n        return 'text-red-600';\r\n      default:\r\n        return 'text-gray-500';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`flex items-center gap-2 mt-1 text-sm ${getTextColor()}`}>\r\n      {getIcon()}\r\n      <span>{getMessage()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ValidationFeedback;\r\n\r\n// Hook personalizado para validación en tiempo real\r\nexport const useRealTimeValidation = (field: string, value: string) => {\r\n  const [isValid, setIsValid] = React.useState<boolean | undefined>(undefined);\r\n  const [showValidation, setShowValidation] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Mostrar validación después de que el usuario empiece a escribir\r\n    if (value.length > 0) {\r\n      setShowValidation(true);\r\n    }\r\n\r\n    // Validar según el campo\r\n    const validateField = () => {\r\n      switch (field) {\r\n        case 'email':\r\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n          setIsValid(emailRegex.test(value));\r\n          break;\r\n        case 'phone':\r\n          const phoneRegex = /^(\\+54\\s?)?[0-9]{2,4}\\s?[0-9]{3}\\s?[0-9]{4}$/;\r\n          setIsValid(phoneRegex.test(value.replace(/\\s/g, '')));\r\n          break;\r\n        case 'streetAddress':\r\n          setIsValid(value.length >= 10);\r\n          break;\r\n        default:\r\n          setIsValid(value.trim().length > 0);\r\n      }\r\n    };\r\n\r\n    if (showValidation) {\r\n      validateField();\r\n    }\r\n  }, [field, value, showValidation]);\r\n\r\n  return { isValid, showValidation };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}