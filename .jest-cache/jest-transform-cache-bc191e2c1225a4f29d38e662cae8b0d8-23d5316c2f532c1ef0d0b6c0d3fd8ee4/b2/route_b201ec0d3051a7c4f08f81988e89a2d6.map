{"version":3,"names":["cov_1wk6l9glgj","actualCoverage","s","DELETE","f","GET","PUT","ImageUpdateSchema","_zod","z","object","alt_text","string","optional","is_primary","boolean","display_order","number","int","min","ImageParamsSchema","id","uuid","imageId","getStorageClient","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","_supabasejs","createClient","deleteImageFromStorage","path","supabase","error","storage","from","remove","b","console","warn","getImageById","productId","data","image","select","eq","single","_errorhandler","NotFoundError","getHandler","request","params","paramsValidation","safeParse","success","ValidationError","errors","_server","NextResponse","json","message","putHandler","user","validatedData","existingImage","update","neq","updatedImage","updated_at","Date","toISOString","ApiError","_apilogger","logAdminAction","deleteHandler","dbError","delete","storage_path","catch","otherImages","limit","length","_middlewarecomposer","composeMiddlewares","withErrorHandler","withApiLogging","_apiauthmiddleware","withAdminAuth","_adminschemas","withValidation"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\[imageId]\\route.ts"],"sourcesContent":["// üñºÔ∏è Enterprise Individual Product Image API\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { composeMiddlewares } from '@/lib/api/middleware-composer';\r\nimport { withErrorHandler, ApiError, ValidationError, NotFoundError } from '@/lib/api/error-handler';\r\nimport { withApiLogging, logAdminAction } from '@/lib/api/api-logger';\r\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware';\r\nimport { withValidation } from '@/lib/validation/admin-schemas';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { Database } from '@/types/database';\r\n\r\n// Validation schemas\r\nconst ImageUpdateSchema = z.object({\r\n  alt_text: z.string().optional(),\r\n  is_primary: z.boolean().optional(),\r\n  display_order: z.number().int().min(0).optional()\r\n});\r\n\r\nconst ImageParamsSchema = z.object({\r\n  id: z.string().uuid('ID de producto inv√°lido'),\r\n  imageId: z.string().uuid('ID de imagen inv√°lido')\r\n});\r\n\r\n// Helper function to get Supabase Storage client\r\nfunction getStorageClient() {\r\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n  \r\n  return createClient(supabaseUrl, supabaseServiceKey);\r\n}\r\n\r\n// Helper function to delete image from storage\r\nasync function deleteImageFromStorage(path: string) {\r\n  const supabase = getStorageClient();\r\n  \r\n  const { error } = await supabase.storage\r\n    .from('product-images')\r\n    .remove([path]);\r\n\r\n  if (error) {\r\n    console.warn('Error deleting image from storage:', error);\r\n    // Don't throw error, just log warning\r\n  }\r\n}\r\n\r\n// Helper function to get image by ID\r\nasync function getImageById(supabase: ReturnType<typeof createClient<Database>>, productId: string, imageId: string) {\r\n  const { data: image, error } = await supabase\r\n    .from('product_images')\r\n    .select('*')\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId)\r\n    .single();\r\n\r\n  if (error || !image) {\r\n    throw new NotFoundError('Imagen');\r\n  }\r\n\r\n  return image;\r\n}\r\n\r\n/**\r\n * GET /api/admin/products/[id]/images/[imageId]\r\n * Get specific image\r\n */\r\nconst getHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par√°metros inv√°lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  const image = await getImageById(supabase, productId, imageId);\r\n\r\n  return NextResponse.json({\r\n    data: image,\r\n    success: true,\r\n    message: 'Imagen obtenida exitosamente'\r\n  });\r\n};\r\n\r\n/**\r\n * PUT /api/admin/products/[id]/images/[imageId]\r\n * Update image metadata\r\n */\r\nconst putHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase, user, validatedData } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par√°metros inv√°lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  // Check if image exists\r\n  const existingImage = await getImageById(supabase, productId, imageId);\r\n\r\n  // If setting as primary, update other images first\r\n  if (validatedData.is_primary === true) {\r\n    await supabase\r\n      .from('product_images')\r\n      .update({ is_primary: false })\r\n      .eq('product_id', productId)\r\n      .neq('id', imageId);\r\n  }\r\n\r\n  // Update image\r\n  const { data: updatedImage, error } = await supabase\r\n    .from('product_images')\r\n    .update({\r\n      ...validatedData,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al actualizar imagen', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Log action\r\n  await logAdminAction(user.id, 'UPDATE', 'product_image', imageId, existingImage, updatedImage);\r\n\r\n  return NextResponse.json({\r\n    data: updatedImage,\r\n    success: true,\r\n    message: 'Imagen actualizada exitosamente'\r\n  });\r\n};\r\n\r\n/**\r\n * DELETE /api/admin/products/[id]/images/[imageId]\r\n * Delete image\r\n */\r\nconst deleteHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase, user } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par√°metros inv√°lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  // Check if image exists\r\n  const existingImage = await getImageById(supabase, productId, imageId);\r\n\r\n  // Delete from database first\r\n  const { error: dbError } = await supabase\r\n    .from('product_images')\r\n    .delete()\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId);\r\n\r\n  if (dbError) {\r\n    throw new ApiError('Error al eliminar imagen de base de datos', 500, 'DATABASE_ERROR', dbError);\r\n  }\r\n\r\n  // Delete from storage (non-blocking)\r\n  if (existingImage.storage_path) {\r\n    deleteImageFromStorage(existingImage.storage_path).catch(error => {\r\n      console.error('Failed to delete image from storage:', error);\r\n    });\r\n  }\r\n\r\n  // If this was the primary image, set another image as primary\r\n  if (existingImage.is_primary) {\r\n    const { data: otherImages } = await supabase\r\n      .from('product_images')\r\n      .select('id')\r\n      .eq('product_id', productId)\r\n      .limit(1);\r\n\r\n    if (otherImages && otherImages.length > 0) {\r\n      await supabase\r\n        .from('product_images')\r\n        .update({ is_primary: true })\r\n        .eq('id', otherImages[0].id);\r\n    }\r\n  }\r\n\r\n  // Log action\r\n  await logAdminAction(user.id, 'DELETE', 'product_image', imageId, existingImage, null);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Imagen eliminada exitosamente'\r\n  });\r\n};\r\n\r\n// Apply enterprise middlewares and export handlers\r\nexport const GET = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_read'])\r\n)(getHandler);\r\n\r\nexport const PUT = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_update']),\r\n  withValidation(ImageUpdateSchema)\r\n)(putHandler);\r\n\r\nexport const DELETE = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_delete'])\r\n)(deleteHandler);\r\n"],"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","ignoreList":[]}