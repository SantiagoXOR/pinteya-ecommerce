031a188cab235d8ac23e89c707d2dc43
// 🖼️ Enterprise Individual Product Image API
"use strict";

/* istanbul ignore next */
function cov_1wk6l9glgj() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\[imageId]\\route.ts";
  var hash = "30a23b06514f8c398e499468df2d0b8c052fcf11";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\[imageId]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 19
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "9": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 25,
          column: 87
        }
      },
      "10": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 75
        }
      },
      "11": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "12": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 87
        }
      },
      "13": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 82
        }
      },
      "14": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 52
        }
      },
      "15": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "16": {
        start: {
          line: 37,
          column: 26
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "17": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 60
        }
      },
      "18": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "19": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 74
        }
      },
      "20": {
        start: {
          line: 49,
          column: 21
        },
        end: {
          line: 49,
          column: 39
        }
      },
      "21": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 52,
          column: 6
        }
      },
      "22": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "24": {
        start: {
          line: 60,
          column: 35
        },
        end: {
          line: 60,
          column: 139
        }
      },
      "25": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "27": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "28": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 86,
          column: 1
        }
      },
      "29": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "30": {
        start: {
          line: 71,
          column: 39
        },
        end: {
          line: 71,
          column: 45
        }
      },
      "31": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "32": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "33": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 103
        }
      },
      "34": {
        start: {
          line: 80,
          column: 18
        },
        end: {
          line: 80,
          column: 66
        }
      },
      "35": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "36": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 124,
          column: 1
        }
      },
      "37": {
        start: {
          line: 91,
          column: 46
        },
        end: {
          line: 91,
          column: 53
        }
      },
      "38": {
        start: {
          line: 92,
          column: 39
        },
        end: {
          line: 92,
          column: 45
        }
      },
      "39": {
        start: {
          line: 94,
          column: 29
        },
        end: {
          line: 97,
          column: 6
        }
      },
      "40": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "41": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 103
        }
      },
      "42": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 74
        }
      },
      "43": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "44": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 58
        }
      },
      "45": {
        start: {
          line: 110,
          column: 42
        },
        end: {
          line: 113,
          column: 70
        }
      },
      "46": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "47": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 101
        }
      },
      "48": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 115
        }
      },
      "49": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "50": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 167,
          column: 1
        }
      },
      "51": {
        start: {
          line: 129,
          column: 31
        },
        end: {
          line: 129,
          column: 38
        }
      },
      "52": {
        start: {
          line: 130,
          column: 39
        },
        end: {
          line: 130,
          column: 45
        }
      },
      "53": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 135,
          column: 6
        }
      },
      "54": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "55": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 103
        }
      },
      "56": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 74
        }
      },
      "57": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 142,
          column: 123
        }
      },
      "58": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "59": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 118
        }
      },
      "60": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "61": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "62": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 73
        }
      },
      "63": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 160,
          column: 5
        }
      },
      "64": {
        start: {
          line: 154,
          column: 38
        },
        end: {
          line: 154,
          column: 125
        }
      },
      "65": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "66": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 43
        }
      },
      "67": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 162,
          column: 107
        }
      },
      "68": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 166,
          column: 7
        }
      },
      "69": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "70": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 69
        }
      },
      "71": {
        start: {
          line: 174,
          column: 15
        },
        end: {
          line: 176,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "getStorageClient",
        decl: {
          start: {
            line: 42,
            column: 9
          },
          end: {
            line: 42,
            column: 25
          }
        },
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 42
      },
      "5": {
        name: "deleteImageFromStorage",
        decl: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 37
          }
        },
        loc: {
          start: {
            line: 48,
            column: 44
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 48
      },
      "6": {
        name: "getImageById",
        decl: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 27
          }
        },
        loc: {
          start: {
            line: 59,
            column: 58
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 59
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 24
          }
        },
        loc: {
          start: {
            line: 69,
            column: 52
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 90,
            column: 23
          },
          end: {
            line: 90,
            column: 24
          }
        },
        loc: {
          start: {
            line: 90,
            column: 52
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 90
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 27
          }
        },
        loc: {
          start: {
            line: 128,
            column: 55
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 128
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 148,
            column: 65
          },
          end: {
            line: 148,
            column: 66
          }
        },
        loc: {
          start: {
            line: 148,
            column: 74
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 148
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 17
          },
          end: {
            line: 61,
            column: 23
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 23
          }
        }, {
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 49
          }
        }],
        line: 155
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\[imageId]\\route.ts"],
      sourcesContent: ["// \uD83D\uDDBC\uFE0F Enterprise Individual Product Image API\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { composeMiddlewares } from '@/lib/api/middleware-composer';\r\nimport { withErrorHandler, ApiError, ValidationError, NotFoundError } from '@/lib/api/error-handler';\r\nimport { withApiLogging, logAdminAction } from '@/lib/api/api-logger';\r\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware';\r\nimport { withValidation } from '@/lib/validation/admin-schemas';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { Database } from '@/types/database';\r\n\r\n// Validation schemas\r\nconst ImageUpdateSchema = z.object({\r\n  alt_text: z.string().optional(),\r\n  is_primary: z.boolean().optional(),\r\n  display_order: z.number().int().min(0).optional()\r\n});\r\n\r\nconst ImageParamsSchema = z.object({\r\n  id: z.string().uuid('ID de producto inv\xE1lido'),\r\n  imageId: z.string().uuid('ID de imagen inv\xE1lido')\r\n});\r\n\r\n// Helper function to get Supabase Storage client\r\nfunction getStorageClient() {\r\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n  \r\n  return createClient(supabaseUrl, supabaseServiceKey);\r\n}\r\n\r\n// Helper function to delete image from storage\r\nasync function deleteImageFromStorage(path: string) {\r\n  const supabase = getStorageClient();\r\n  \r\n  const { error } = await supabase.storage\r\n    .from('product-images')\r\n    .remove([path]);\r\n\r\n  if (error) {\r\n    console.warn('Error deleting image from storage:', error);\r\n    // Don't throw error, just log warning\r\n  }\r\n}\r\n\r\n// Helper function to get image by ID\r\nasync function getImageById(supabase: ReturnType<typeof createClient<Database>>, productId: string, imageId: string) {\r\n  const { data: image, error } = await supabase\r\n    .from('product_images')\r\n    .select('*')\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId)\r\n    .single();\r\n\r\n  if (error || !image) {\r\n    throw new NotFoundError('Imagen');\r\n  }\r\n\r\n  return image;\r\n}\r\n\r\n/**\r\n * GET /api/admin/products/[id]/images/[imageId]\r\n * Get specific image\r\n */\r\nconst getHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par\xE1metros inv\xE1lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  const image = await getImageById(supabase, productId, imageId);\r\n\r\n  return NextResponse.json({\r\n    data: image,\r\n    success: true,\r\n    message: 'Imagen obtenida exitosamente'\r\n  });\r\n};\r\n\r\n/**\r\n * PUT /api/admin/products/[id]/images/[imageId]\r\n * Update image metadata\r\n */\r\nconst putHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase, user, validatedData } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par\xE1metros inv\xE1lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  // Check if image exists\r\n  const existingImage = await getImageById(supabase, productId, imageId);\r\n\r\n  // If setting as primary, update other images first\r\n  if (validatedData.is_primary === true) {\r\n    await supabase\r\n      .from('product_images')\r\n      .update({ is_primary: false })\r\n      .eq('product_id', productId)\r\n      .neq('id', imageId);\r\n  }\r\n\r\n  // Update image\r\n  const { data: updatedImage, error } = await supabase\r\n    .from('product_images')\r\n    .update({\r\n      ...validatedData,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new ApiError('Error al actualizar imagen', 500, 'DATABASE_ERROR', error);\r\n  }\r\n\r\n  // Log action\r\n  await logAdminAction(user.id, 'UPDATE', 'product_image', imageId, existingImage, updatedImage);\r\n\r\n  return NextResponse.json({\r\n    data: updatedImage,\r\n    success: true,\r\n    message: 'Imagen actualizada exitosamente'\r\n  });\r\n};\r\n\r\n/**\r\n * DELETE /api/admin/products/[id]/images/[imageId]\r\n * Delete image\r\n */\r\nconst deleteHandler = async (request: NextRequest, { params }: { params: { id: string, imageId: string } }) => {\r\n  const { supabase, user } = request as any;\r\n  const { id: productId, imageId } = params;\r\n\r\n  // Validate params\r\n  const paramsValidation = ImageParamsSchema.safeParse({ id: productId, imageId });\r\n  if (!paramsValidation.success) {\r\n    throw new ValidationError('Par\xE1metros inv\xE1lidos', paramsValidation.error.errors);\r\n  }\r\n\r\n  // Check if image exists\r\n  const existingImage = await getImageById(supabase, productId, imageId);\r\n\r\n  // Delete from database first\r\n  const { error: dbError } = await supabase\r\n    .from('product_images')\r\n    .delete()\r\n    .eq('id', imageId)\r\n    .eq('product_id', productId);\r\n\r\n  if (dbError) {\r\n    throw new ApiError('Error al eliminar imagen de base de datos', 500, 'DATABASE_ERROR', dbError);\r\n  }\r\n\r\n  // Delete from storage (non-blocking)\r\n  if (existingImage.storage_path) {\r\n    deleteImageFromStorage(existingImage.storage_path).catch(error => {\r\n      console.error('Failed to delete image from storage:', error);\r\n    });\r\n  }\r\n\r\n  // If this was the primary image, set another image as primary\r\n  if (existingImage.is_primary) {\r\n    const { data: otherImages } = await supabase\r\n      .from('product_images')\r\n      .select('id')\r\n      .eq('product_id', productId)\r\n      .limit(1);\r\n\r\n    if (otherImages && otherImages.length > 0) {\r\n      await supabase\r\n        .from('product_images')\r\n        .update({ is_primary: true })\r\n        .eq('id', otherImages[0].id);\r\n    }\r\n  }\r\n\r\n  // Log action\r\n  await logAdminAction(user.id, 'DELETE', 'product_image', imageId, existingImage, null);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Imagen eliminada exitosamente'\r\n  });\r\n};\r\n\r\n// Apply enterprise middlewares and export handlers\r\nexport const GET = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_read'])\r\n)(getHandler);\r\n\r\nexport const PUT = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_update']),\r\n  withValidation(ImageUpdateSchema)\r\n)(putHandler);\r\n\r\nexport const DELETE = composeMiddlewares(\r\n  withErrorHandler,\r\n  withApiLogging,\r\n  withAdminAuth(['products_delete'])\r\n)(deleteHandler);\r\n"],
      names: ["DELETE", "GET", "PUT", "ImageUpdateSchema", "z", "object", "alt_text", "string", "optional", "is_primary", "boolean", "display_order", "number", "int", "min", "ImageParamsSchema", "id", "uuid", "imageId", "getStorageClient", "supabaseUrl", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "supabaseServiceKey", "SUPABASE_SERVICE_ROLE_KEY", "createClient", "deleteImageFromStorage", "path", "supabase", "error", "storage", "from", "remove", "console", "warn", "getImageById", "productId", "data", "image", "select", "eq", "single", "NotFoundError", "getHandler", "request", "params", "paramsValidation", "safeParse", "success", "ValidationError", "errors", "NextResponse", "json", "message", "putHandler", "user", "validatedData", "existingImage", "update", "neq", "updatedImage", "updated_at", "Date", "toISOString", "ApiError", "logAdminAction", "deleteHandler", "dbError", "delete", "storage_path", "catch", "otherImages", "limit", "length", "composeMiddlewares", "withErrorHandler", "withApiLogging", "withAdminAuth", "withValidation"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "30a23b06514f8c398e499468df2d0b8c052fcf11"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wk6l9glgj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wk6l9glgj();
cov_1wk6l9glgj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[0]++;
  cov_1wk6l9glgj().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1wk6l9glgj().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1wk6l9glgj().f[1]++;
    cov_1wk6l9glgj().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1wk6l9glgj().f[2]++;
    cov_1wk6l9glgj().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1wk6l9glgj().f[3]++;
    cov_1wk6l9glgj().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[7]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[8]++, require("zod"));
const _middlewarecomposer =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[9]++, require("../../../../../../../lib/api/middleware-composer"));
const _errorhandler =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[10]++, require("../../../../../../../lib/api/error-handler"));
const _apilogger =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[11]++, require("../../../../../../../lib/api/api-logger"));
const _apiauthmiddleware =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[12]++, require("../../../../../../../lib/auth/api-auth-middleware"));
const _adminschemas =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[13]++, require("../../../../../../../lib/validation/admin-schemas"));
const _supabasejs =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[14]++, require("@supabase/supabase-js"));
// Validation schemas
const ImageUpdateSchema =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[15]++, _zod.z.object({
  alt_text: _zod.z.string().optional(),
  is_primary: _zod.z.boolean().optional(),
  display_order: _zod.z.number().int().min(0).optional()
}));
const ImageParamsSchema =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[16]++, _zod.z.object({
  id: _zod.z.string().uuid('ID de producto inválido'),
  imageId: _zod.z.string().uuid('ID de imagen inválido')
}));
// Helper function to get Supabase Storage client
function getStorageClient() {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[4]++;
  const supabaseUrl =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[17]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
  const supabaseServiceKey =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[18]++, process.env.SUPABASE_SERVICE_ROLE_KEY);
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[19]++;
  return (0, _supabasejs.createClient)(supabaseUrl, supabaseServiceKey);
}
// Helper function to delete image from storage
async function deleteImageFromStorage(path) {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[5]++;
  const supabase =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[20]++, getStorageClient());
  const {
    error
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[21]++, await supabase.storage.from('product-images').remove([path]));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[22]++;
  if (error) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[0][0]++;
    cov_1wk6l9glgj().s[23]++;
    console.warn('Error deleting image from storage:', error);
    // Don't throw error, just log warning
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[0][1]++;
  }
}
// Helper function to get image by ID
async function getImageById(supabase, productId, imageId) {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[6]++;
  const {
    data: image,
    error
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[24]++, await supabase.from('product_images').select('*').eq('id', imageId).eq('product_id', productId).single());
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[25]++;
  if (
  /* istanbul ignore next */
  (cov_1wk6l9glgj().b[2][0]++, error) ||
  /* istanbul ignore next */
  (cov_1wk6l9glgj().b[2][1]++, !image)) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[1][0]++;
    cov_1wk6l9glgj().s[26]++;
    throw new _errorhandler.NotFoundError('Imagen');
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[1][1]++;
  }
  cov_1wk6l9glgj().s[27]++;
  return image;
}
/**
 * GET /api/admin/products/[id]/images/[imageId]
 * Get specific image
 */
/* istanbul ignore next */
cov_1wk6l9glgj().s[28]++;
const getHandler = async (request, {
  params
}) => {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[7]++;
  const {
    supabase
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[29]++, request);
  const {
    id: productId,
    imageId
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[30]++, params);
  // Validate params
  const paramsValidation =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[31]++, ImageParamsSchema.safeParse({
    id: productId,
    imageId
  }));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[32]++;
  if (!paramsValidation.success) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[3][0]++;
    cov_1wk6l9glgj().s[33]++;
    throw new _errorhandler.ValidationError('Parámetros inválidos', paramsValidation.error.errors);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[3][1]++;
  }
  const image =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[34]++, await getImageById(supabase, productId, imageId));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[35]++;
  return _server.NextResponse.json({
    data: image,
    success: true,
    message: 'Imagen obtenida exitosamente'
  });
};
/**
 * PUT /api/admin/products/[id]/images/[imageId]
 * Update image metadata
 */
/* istanbul ignore next */
cov_1wk6l9glgj().s[36]++;
const putHandler = async (request, {
  params
}) => {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[8]++;
  const {
    supabase,
    user,
    validatedData
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[37]++, request);
  const {
    id: productId,
    imageId
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[38]++, params);
  // Validate params
  const paramsValidation =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[39]++, ImageParamsSchema.safeParse({
    id: productId,
    imageId
  }));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[40]++;
  if (!paramsValidation.success) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[4][0]++;
    cov_1wk6l9glgj().s[41]++;
    throw new _errorhandler.ValidationError('Parámetros inválidos', paramsValidation.error.errors);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[4][1]++;
  }
  // Check if image exists
  const existingImage =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[42]++, await getImageById(supabase, productId, imageId));
  // If setting as primary, update other images first
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[43]++;
  if (validatedData.is_primary === true) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[5][0]++;
    cov_1wk6l9glgj().s[44]++;
    await supabase.from('product_images').update({
      is_primary: false
    }).eq('product_id', productId).neq('id', imageId);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[5][1]++;
  }
  // Update image
  const {
    data: updatedImage,
    error
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[45]++, await supabase.from('product_images').update({
    ...validatedData,
    updated_at: new Date().toISOString()
  }).eq('id', imageId).eq('product_id', productId).select().single());
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[46]++;
  if (error) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[6][0]++;
    cov_1wk6l9glgj().s[47]++;
    throw new _errorhandler.ApiError('Error al actualizar imagen', 500, 'DATABASE_ERROR', error);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[6][1]++;
  }
  // Log action
  cov_1wk6l9glgj().s[48]++;
  await (0, _apilogger.logAdminAction)(user.id, 'UPDATE', 'product_image', imageId, existingImage, updatedImage);
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[49]++;
  return _server.NextResponse.json({
    data: updatedImage,
    success: true,
    message: 'Imagen actualizada exitosamente'
  });
};
/**
 * DELETE /api/admin/products/[id]/images/[imageId]
 * Delete image
 */
/* istanbul ignore next */
cov_1wk6l9glgj().s[50]++;
const deleteHandler = async (request, {
  params
}) => {
  /* istanbul ignore next */
  cov_1wk6l9glgj().f[9]++;
  const {
    supabase,
    user
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[51]++, request);
  const {
    id: productId,
    imageId
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[52]++, params);
  // Validate params
  const paramsValidation =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[53]++, ImageParamsSchema.safeParse({
    id: productId,
    imageId
  }));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[54]++;
  if (!paramsValidation.success) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[7][0]++;
    cov_1wk6l9glgj().s[55]++;
    throw new _errorhandler.ValidationError('Parámetros inválidos', paramsValidation.error.errors);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[7][1]++;
  }
  // Check if image exists
  const existingImage =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[56]++, await getImageById(supabase, productId, imageId));
  // Delete from database first
  const {
    error: dbError
  } =
  /* istanbul ignore next */
  (cov_1wk6l9glgj().s[57]++, await supabase.from('product_images').delete().eq('id', imageId).eq('product_id', productId));
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[58]++;
  if (dbError) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[8][0]++;
    cov_1wk6l9glgj().s[59]++;
    throw new _errorhandler.ApiError('Error al eliminar imagen de base de datos', 500, 'DATABASE_ERROR', dbError);
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[8][1]++;
  }
  // Delete from storage (non-blocking)
  cov_1wk6l9glgj().s[60]++;
  if (existingImage.storage_path) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[9][0]++;
    cov_1wk6l9glgj().s[61]++;
    deleteImageFromStorage(existingImage.storage_path).catch(error => {
      /* istanbul ignore next */
      cov_1wk6l9glgj().f[10]++;
      cov_1wk6l9glgj().s[62]++;
      console.error('Failed to delete image from storage:', error);
    });
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[9][1]++;
  }
  // If this was the primary image, set another image as primary
  cov_1wk6l9glgj().s[63]++;
  if (existingImage.is_primary) {
    /* istanbul ignore next */
    cov_1wk6l9glgj().b[10][0]++;
    const {
      data: otherImages
    } =
    /* istanbul ignore next */
    (cov_1wk6l9glgj().s[64]++, await supabase.from('product_images').select('id').eq('product_id', productId).limit(1));
    /* istanbul ignore next */
    cov_1wk6l9glgj().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_1wk6l9glgj().b[12][0]++, otherImages) &&
    /* istanbul ignore next */
    (cov_1wk6l9glgj().b[12][1]++, otherImages.length > 0)) {
      /* istanbul ignore next */
      cov_1wk6l9glgj().b[11][0]++;
      cov_1wk6l9glgj().s[66]++;
      await supabase.from('product_images').update({
        is_primary: true
      }).eq('id', otherImages[0].id);
    } else
    /* istanbul ignore next */
    {
      cov_1wk6l9glgj().b[11][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1wk6l9glgj().b[10][1]++;
  }
  // Log action
  cov_1wk6l9glgj().s[67]++;
  await (0, _apilogger.logAdminAction)(user.id, 'DELETE', 'product_image', imageId, existingImage, null);
  /* istanbul ignore next */
  cov_1wk6l9glgj().s[68]++;
  return _server.NextResponse.json({
    success: true,
    message: 'Imagen eliminada exitosamente'
  });
};
const GET =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[69]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)(['products_read']))(getHandler));
const PUT =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[70]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)(['products_update']), (0, _adminschemas.withValidation)(ImageUpdateSchema))(putHandler));
const DELETE =
/* istanbul ignore next */
(cov_1wk6l9glgj().s[71]++, (0, _middlewarecomposer.composeMiddlewares)(_errorhandler.withErrorHandler, _apilogger.withApiLogging, (0, _apiauthmiddleware.withAdminAuth)(['products_delete']))(deleteHandler));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,