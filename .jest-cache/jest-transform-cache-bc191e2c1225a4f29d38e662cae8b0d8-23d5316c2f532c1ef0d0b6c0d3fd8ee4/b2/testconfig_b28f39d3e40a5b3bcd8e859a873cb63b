8c7e9fec4fcc7269e71e22e21340aa41
// =====================================================
// CONFIGURACIÓN: TESTING SUITE LOGISTICS ENTERPRISE
// Descripción: Configuración optimizada para testing del módulo de logística
// Basado en: Jest + RTL + MSW + Testing Library
// =====================================================
"use strict";
// =====================================================
// MOCKS GLOBALES
// =====================================================
// Mock de MapLibre GL JS
jest.mock('maplibre-gl', ()=>({
        Map: jest.fn(()=>({
                on: jest.fn(),
                off: jest.fn(),
                addSource: jest.fn(),
                addLayer: jest.fn(),
                getSource: jest.fn(()=>({
                        setData: jest.fn()
                    })),
                setStyle: jest.fn(),
                fitBounds: jest.fn(),
                remove: jest.fn(),
                getCanvas: jest.fn(()=>({
                        style: {}
                    })),
                readyState: 1
            })),
        LngLatBounds: jest.fn(()=>({
                extend: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockWebSocket () {
        return createMockWebSocket;
    },
    get mockCourier () {
        return mockCourier;
    },
    get mockGeofenceZone () {
        return mockGeofenceZone;
    },
    get mockIntersectionObserver () {
        return mockIntersectionObserver;
    },
    get mockLogisticsStats () {
        return mockLogisticsStats;
    },
    get mockResizeObserver () {
        return mockResizeObserver;
    },
    get mockShipment () {
        return mockShipment;
    },
    get mockTrackingEvent () {
        return mockTrackingEvent;
    },
    get waitForLoadingToFinish () {
        return waitForLoadingToFinish;
    }
});
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
// =====================================================
// CONFIGURACIÓN DE TESTING LIBRARY
// =====================================================
(0, _react.configure)({
    testIdAttribute: 'data-testid',
    asyncUtilTimeout: 5000,
    computedStyleSupportsPseudoElements: true
});
// =====================================================
// CONFIGURACIÓN DE MOCKS SIMPLES (SIN MSW)
// =====================================================
// Mock global fetch para APIs
global.fetch = jest.fn();
// Configurar mocks antes de todos los tests
beforeAll(()=>{
    // Mock básico para APIs de logistics
    global.fetch.mockImplementation((url)=>{
        if (url.includes('/api/admin/logistics')) {
            return Promise.resolve({
                ok: true,
                json: ()=>Promise.resolve({
                        data: [],
                        success: true,
                        message: 'Mock response'
                    })
            });
        }
        return Promise.resolve({
            ok: true,
            json: ()=>Promise.resolve({})
        });
    });
});
// Resetear mocks después de cada test
afterEach(()=>{
    jest.clearAllMocks();
});
// Limpiar después de todos los tests
afterAll(()=>{
    jest.restoreAllMocks();
});
// Mock de WebSocket
global.WebSocket = jest.fn(()=>({
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        send: jest.fn(),
        close: jest.fn(),
        readyState: 1,
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3
    }));
// Mock de Notification API
Object.defineProperty(window, 'Notification', {
    writable: true,
    value: jest.fn(()=>({
            close: jest.fn()
        }))
});
Object.defineProperty(Notification, 'permission', {
    writable: true,
    value: 'granted'
});
// Mock de geolocation
Object.defineProperty(navigator, 'geolocation', {
    writable: true,
    value: {
        getCurrentPosition: jest.fn((success)=>success({
                coords: {
                    latitude: -34.6037,
                    longitude: -58.3816,
                    accuracy: 10
                }
            })),
        watchPosition: jest.fn(),
        clearWatch: jest.fn()
    }
});
// Mock de IntersectionObserver
global.IntersectionObserver = jest.fn(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock de ResizeObserver
global.ResizeObserver = jest.fn(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
const mockShipment = {
    id: 1,
    shipment_number: 'SHP-001',
    order_id: 1,
    status: 'in_transit',
    carrier_id: 1,
    shipping_service: 'standard',
    tracking_number: 'TRK-123456',
    delivery_address: {
        street: 'Av. Corrientes',
        number: '1234',
        apartment: '',
        neighborhood: 'San Nicolás',
        city: 'Buenos Aires',
        state: 'Buenos Aires',
        postal_code: '1043',
        country: 'Argentina'
    },
    pickup_address: {
        street: 'Av. Santa Fe',
        number: '5678',
        apartment: '',
        neighborhood: 'Palermo',
        city: 'Buenos Aires',
        state: 'Buenos Aires',
        postal_code: '1425',
        country: 'Argentina'
    },
    weight_kg: 2.5,
    dimensions_cm: '30x20x15',
    total_cost: 1500,
    estimated_delivery_date: '2024-02-15',
    special_instructions: 'Llamar antes de entregar',
    notes: 'Producto frágil',
    created_at: '2024-02-10T10:00:00Z',
    updated_at: '2024-02-10T10:00:00Z',
    carrier: {
        id: 1,
        name: 'OCA',
        code: 'OCA',
        logo_url: '/logos/oca.png',
        is_active: true
    },
    items: [
        {
            id: 1,
            product_id: 1,
            quantity: 1,
            weight_kg: 2.5
        }
    ]
};
const mockTrackingEvent = {
    id: 1,
    shipment_id: 1,
    status: 'in_transit',
    description: 'Paquete en tránsito hacia destino',
    location: 'Buenos Aires, Argentina',
    latitude: -34.6037,
    longitude: -58.3816,
    occurred_at: '2024-02-10T12:00:00Z',
    created_at: '2024-02-10T12:00:00Z'
};
const mockCourier = {
    id: 1,
    name: 'OCA',
    code: 'OCA',
    logo_url: '/logos/oca.png',
    website_url: 'https://oca.com.ar',
    contact_phone: '+54 11 4000-0000',
    contact_email: 'info@oca.com.ar',
    is_active: true,
    supported_services: [
        'standard',
        'express'
    ],
    coverage_areas: [
        'Buenos Aires',
        'Córdoba',
        'Santa Fe'
    ],
    base_cost: 500,
    cost_per_kg: 100,
    api_config: {
        base_url: 'https://api.oca.com.ar',
        api_key: 'test-key',
        environment: 'sandbox'
    },
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-01T00:00:00Z'
};
const mockLogisticsStats = {
    total_shipments: 150,
    pending_shipments: 25,
    confirmed_shipments: 30,
    in_transit_shipments: 45,
    delivered_shipments: 40,
    exception_shipments: 5,
    cancelled_shipments: 5,
    average_delivery_time: 3.5,
    on_time_delivery_rate: 92.5,
    total_shipping_cost: 225000,
    active_couriers: 4
};
const mockGeofenceZone = {
    id: 'test-zone',
    name: 'Zona de Prueba',
    type: 'delivery_zone',
    coordinates: [
        [
            -58.5,
            -34.5
        ],
        [
            -58.4,
            -34.5
        ],
        [
            -58.4,
            -34.6
        ],
        [
            -58.5,
            -34.6
        ],
        [
            -58.5,
            -34.5
        ]
    ],
    center: [
        -58.45,
        -34.55
    ],
    active: true,
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-01T00:00:00Z',
    rules: [
        {
            id: 'rule-1',
            event_type: 'enter',
            action: 'notification',
            conditions: {
                shipment_status: [
                    'in_transit'
                ]
            },
            active: true
        }
    ],
    stats: {
        total_events: 50,
        enter_events: 25,
        exit_events: 25,
        unique_shipments: 30,
        avg_dwell_time: 45,
        last_event: '2024-02-10T10:00:00Z'
    }
};
const waitForLoadingToFinish = ()=>{
    return new Promise((resolve)=>setTimeout(resolve, 100));
};
const mockIntersectionObserver = ()=>{
    const mockIntersectionObserver = jest.fn();
    mockIntersectionObserver.mockReturnValue({
        observe: ()=>null,
        unobserve: ()=>null,
        disconnect: ()=>null
    });
    window.IntersectionObserver = mockIntersectionObserver;
};
const mockResizeObserver = ()=>{
    const mockResizeObserver = jest.fn();
    mockResizeObserver.mockReturnValue({
        observe: ()=>null,
        unobserve: ()=>null,
        disconnect: ()=>null
    });
    window.ResizeObserver = mockResizeObserver;
};
const createMockWebSocket = ()=>{
    const mockWebSocket = {
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        send: jest.fn(),
        close: jest.fn(),
        readyState: 1,
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3,
        onopen: null,
        onclose: null,
        onmessage: null,
        onerror: null
    };
    global.WebSocket = jest.fn(()=>mockWebSocket);
    return mockWebSocket;
};
// =====================================================
// CUSTOM MATCHERS
// =====================================================
expect.extend({
    toBeWithinRange (received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
            return {
                message: ()=>`expected ${received} not to be within range ${floor} - ${ceiling}`,
                pass: true
            };
        } else {
            return {
                message: ()=>`expected ${received} to be within range ${floor} - ${ceiling}`,
                pass: false
            };
        }
    },
    toHaveValidCoordinates (received) {
        const isValid = Array.isArray(received) && received.length === 2 && typeof received[0] === 'number' && typeof received[1] === 'number' && received[0] >= -180 && received[0] <= 180 && received[1] >= -90 && received[1] <= 90;
        if (isValid) {
            return {
                message: ()=>`expected ${received} not to be valid coordinates`,
                pass: true
            };
        } else {
            return {
                message: ()=>`expected ${received} to be valid coordinates [lng, lat]`,
                pass: false
            };
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXF9fdGVzdHNfX1xcbG9naXN0aWNzXFxzZXR1cFxcdGVzdC1jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ09ORklHVVJBQ0nDk046IFRFU1RJTkcgU1VJVEUgTE9HSVNUSUNTIEVOVEVSUFJJU0VcclxuLy8gRGVzY3JpcGNpw7NuOiBDb25maWd1cmFjacOzbiBvcHRpbWl6YWRhIHBhcmEgdGVzdGluZyBkZWwgbcOzZHVsbyBkZSBsb2fDrXN0aWNhXHJcbi8vIEJhc2FkbyBlbjogSmVzdCArIFJUTCArIE1TVyArIFRlc3RpbmcgTGlicmFyeVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcclxuaW1wb3J0IHsgY29uZmlndXJlIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcblxyXG4vLyBJbnRlcmZhY2VzIHBhcmEgdGlwYWRvXHJcbmludGVyZmFjZSBNb2NrV2ViU29ja2V0SW5zdGFuY2Uge1xyXG4gIHNlbmQ6IGplc3QuTW9jaztcclxuICBjbG9zZTogamVzdC5Nb2NrO1xyXG4gIHJlYWR5U3RhdGU6IG51bWJlcjtcclxuICBDT05ORUNUSU5HOiBudW1iZXI7XHJcbiAgT1BFTjogbnVtYmVyO1xyXG4gIENMT1NJTkc6IG51bWJlcjtcclxuICBDTE9TRUQ6IG51bWJlcjtcclxuICBhZGRFdmVudExpc3RlbmVyOiBqZXN0Lk1vY2s7XHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5Nb2NrO1xyXG4gIG9ub3BlbjogKCgpID0+IHZvaWQpIHwgbnVsbDtcclxuICBvbmNsb3NlOiAoKCkgPT4gdm9pZCkgfCBudWxsO1xyXG4gIG9ubWVzc2FnZTogKCgpID0+IHZvaWQpIHwgbnVsbDtcclxuICBvbmVycm9yOiAoKCkgPT4gdm9pZCkgfCBudWxsO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29vcmRpbmF0ZXMge1xyXG4gIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgYWNjdXJhY3k6IG51bWJlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEdlb2xvY2F0aW9uUG9zaXRpb24ge1xyXG4gIGNvb3JkczogQ29vcmRpbmF0ZXM7XHJcbn1cclxuXHJcbnR5cGUgQ29vcmRpbmF0ZXNQYWlyID0gW251bWJlciwgbnVtYmVyXTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENPTkZJR1VSQUNJw5NOIERFIFRFU1RJTkcgTElCUkFSWVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uZmlndXJlKHtcclxuICB0ZXN0SWRBdHRyaWJ1dGU6ICdkYXRhLXRlc3RpZCcsXHJcbiAgYXN5bmNVdGlsVGltZW91dDogNTAwMCxcclxuICBjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50czogdHJ1ZVxyXG59KTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENPTkZJR1VSQUNJw5NOIERFIE1PQ0tTIFNJTVBMRVMgKFNJTiBNU1cpXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBNb2NrIGdsb2JhbCBmZXRjaCBwYXJhIEFQSXNcclxuZ2xvYmFsLmZldGNoID0gamVzdC5mbigpO1xyXG5cclxuLy8gQ29uZmlndXJhciBtb2NrcyBhbnRlcyBkZSB0b2RvcyBsb3MgdGVzdHNcclxuYmVmb3JlQWxsKCgpID0+IHtcclxuICAvLyBNb2NrIGLDoXNpY28gcGFyYSBBUElzIGRlIGxvZ2lzdGljc1xyXG4gIChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICBpZiAodXJsLmluY2x1ZGVzKCcvYXBpL2FkbWluL2xvZ2lzdGljcycpKSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgIG9rOiB0cnVlLFxyXG4gICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICAgICAgICBkYXRhOiBbXSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICBtZXNzYWdlOiAnTW9jayByZXNwb25zZSdcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICBvazogdHJ1ZSxcclxuICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy8gUmVzZXRlYXIgbW9ja3MgZGVzcHXDqXMgZGUgY2FkYSB0ZXN0XHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbn0pO1xyXG5cclxuLy8gTGltcGlhciBkZXNwdcOpcyBkZSB0b2RvcyBsb3MgdGVzdHNcclxuYWZ0ZXJBbGwoKCkgPT4ge1xyXG4gIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XHJcbn0pO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gTU9DS1MgR0xPQkFMRVNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8vIE1vY2sgZGUgTWFwTGlicmUgR0wgSlNcclxuamVzdC5tb2NrKCdtYXBsaWJyZS1nbCcsICgpID0+ICh7XHJcbiAgTWFwOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBvbjogamVzdC5mbigpLFxyXG4gICAgb2ZmOiBqZXN0LmZuKCksXHJcbiAgICBhZGRTb3VyY2U6IGplc3QuZm4oKSxcclxuICAgIGFkZExheWVyOiBqZXN0LmZuKCksXHJcbiAgICBnZXRTb3VyY2U6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgc2V0RGF0YTogamVzdC5mbigpXHJcbiAgICB9KSksXHJcbiAgICBzZXRTdHlsZTogamVzdC5mbigpLFxyXG4gICAgZml0Qm91bmRzOiBqZXN0LmZuKCksXHJcbiAgICByZW1vdmU6IGplc3QuZm4oKSxcclxuICAgIGdldENhbnZhczogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICBzdHlsZToge31cclxuICAgIH0pKSxcclxuICAgIHJlYWR5U3RhdGU6IDFcclxuICB9KSksXHJcbiAgTG5nTGF0Qm91bmRzOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBleHRlbmQ6IGplc3QuZm4oKVxyXG4gIH0pKVxyXG59KSk7XHJcblxyXG4vLyBNb2NrIGRlIFdlYlNvY2tldFxyXG5nbG9iYWwuV2ViU29ja2V0ID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgc2VuZDogamVzdC5mbigpLFxyXG4gIGNsb3NlOiBqZXN0LmZuKCksXHJcbiAgcmVhZHlTdGF0ZTogMSxcclxuICBDT05ORUNUSU5HOiAwLFxyXG4gIE9QRU46IDEsXHJcbiAgQ0xPU0lORzogMixcclxuICBDTE9TRUQ6IDNcclxufSkpIGFzIE1vY2tXZWJTb2NrZXRJbnN0YW5jZTtcclxuXHJcbi8vIE1vY2sgZGUgTm90aWZpY2F0aW9uIEFQSVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnTm90aWZpY2F0aW9uJywge1xyXG4gIHdyaXRhYmxlOiB0cnVlLFxyXG4gIHZhbHVlOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBjbG9zZTogamVzdC5mbigpXHJcbiAgfSkpXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vdGlmaWNhdGlvbiwgJ3Blcm1pc3Npb24nLCB7XHJcbiAgd3JpdGFibGU6IHRydWUsXHJcbiAgdmFsdWU6ICdncmFudGVkJ1xyXG59KTtcclxuXHJcbi8vIE1vY2sgZGUgZ2VvbG9jYXRpb25cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG5hdmlnYXRvciwgJ2dlb2xvY2F0aW9uJywge1xyXG4gIHdyaXRhYmxlOiB0cnVlLFxyXG4gIHZhbHVlOiB7XHJcbiAgICBnZXRDdXJyZW50UG9zaXRpb246IGplc3QuZm4oKHN1Y2Nlc3MpID0+IFxyXG4gICAgICBzdWNjZXNzKHtcclxuICAgICAgICBjb29yZHM6IHtcclxuICAgICAgICAgIGxhdGl0dWRlOiAtMzQuNjAzNyxcclxuICAgICAgICAgIGxvbmdpdHVkZTogLTU4LjM4MTYsXHJcbiAgICAgICAgICBhY2N1cmFjeTogMTBcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApLFxyXG4gICAgd2F0Y2hQb3NpdGlvbjogamVzdC5mbigpLFxyXG4gICAgY2xlYXJXYXRjaDogamVzdC5mbigpXHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIE1vY2sgZGUgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIG9ic2VydmU6IGplc3QuZm4oKSxcclxuICB1bm9ic2VydmU6IGplc3QuZm4oKSxcclxuICBkaXNjb25uZWN0OiBqZXN0LmZuKClcclxufSkpIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyPjtcclxuXHJcbi8vIE1vY2sgZGUgUmVzaXplT2JzZXJ2ZXJcclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gamVzdC5mbigoKSA9PiAoe1xyXG4gIG9ic2VydmU6IGplc3QuZm4oKSxcclxuICB1bm9ic2VydmU6IGplc3QuZm4oKSxcclxuICBkaXNjb25uZWN0OiBqZXN0LmZuKClcclxufSkpIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIFJlc2l6ZU9ic2VydmVyPjtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFVUSUxJREFERVMgREUgVEVTVElOR1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IG1vY2tTaGlwbWVudCA9IHtcclxuICBpZDogMSxcclxuICBzaGlwbWVudF9udW1iZXI6ICdTSFAtMDAxJyxcclxuICBvcmRlcl9pZDogMSxcclxuICBzdGF0dXM6ICdpbl90cmFuc2l0JyxcclxuICBjYXJyaWVyX2lkOiAxLFxyXG4gIHNoaXBwaW5nX3NlcnZpY2U6ICdzdGFuZGFyZCcsXHJcbiAgdHJhY2tpbmdfbnVtYmVyOiAnVFJLLTEyMzQ1NicsXHJcbiAgZGVsaXZlcnlfYWRkcmVzczoge1xyXG4gICAgc3RyZWV0OiAnQXYuIENvcnJpZW50ZXMnLFxyXG4gICAgbnVtYmVyOiAnMTIzNCcsXHJcbiAgICBhcGFydG1lbnQ6ICcnLFxyXG4gICAgbmVpZ2hib3Job29kOiAnU2FuIE5pY29sw6FzJyxcclxuICAgIGNpdHk6ICdCdWVub3MgQWlyZXMnLFxyXG4gICAgc3RhdGU6ICdCdWVub3MgQWlyZXMnLFxyXG4gICAgcG9zdGFsX2NvZGU6ICcxMDQzJyxcclxuICAgIGNvdW50cnk6ICdBcmdlbnRpbmEnXHJcbiAgfSxcclxuICBwaWNrdXBfYWRkcmVzczoge1xyXG4gICAgc3RyZWV0OiAnQXYuIFNhbnRhIEZlJyxcclxuICAgIG51bWJlcjogJzU2NzgnLFxyXG4gICAgYXBhcnRtZW50OiAnJyxcclxuICAgIG5laWdoYm9yaG9vZDogJ1BhbGVybW8nLFxyXG4gICAgY2l0eTogJ0J1ZW5vcyBBaXJlcycsXHJcbiAgICBzdGF0ZTogJ0J1ZW5vcyBBaXJlcycsXHJcbiAgICBwb3N0YWxfY29kZTogJzE0MjUnLFxyXG4gICAgY291bnRyeTogJ0FyZ2VudGluYSdcclxuICB9LFxyXG4gIHdlaWdodF9rZzogMi41LFxyXG4gIGRpbWVuc2lvbnNfY206ICczMHgyMHgxNScsXHJcbiAgdG90YWxfY29zdDogMTUwMCxcclxuICBlc3RpbWF0ZWRfZGVsaXZlcnlfZGF0ZTogJzIwMjQtMDItMTUnLFxyXG4gIHNwZWNpYWxfaW5zdHJ1Y3Rpb25zOiAnTGxhbWFyIGFudGVzIGRlIGVudHJlZ2FyJyxcclxuICBub3RlczogJ1Byb2R1Y3RvIGZyw6FnaWwnLFxyXG4gIGNyZWF0ZWRfYXQ6ICcyMDI0LTAyLTEwVDEwOjAwOjAwWicsXHJcbiAgdXBkYXRlZF9hdDogJzIwMjQtMDItMTBUMTA6MDA6MDBaJyxcclxuICBjYXJyaWVyOiB7XHJcbiAgICBpZDogMSxcclxuICAgIG5hbWU6ICdPQ0EnLFxyXG4gICAgY29kZTogJ09DQScsXHJcbiAgICBsb2dvX3VybDogJy9sb2dvcy9vY2EucG5nJyxcclxuICAgIGlzX2FjdGl2ZTogdHJ1ZVxyXG4gIH0sXHJcbiAgaXRlbXM6IFt7XHJcbiAgICBpZDogMSxcclxuICAgIHByb2R1Y3RfaWQ6IDEsXHJcbiAgICBxdWFudGl0eTogMSxcclxuICAgIHdlaWdodF9rZzogMi41XHJcbiAgfV1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrVHJhY2tpbmdFdmVudCA9IHtcclxuICBpZDogMSxcclxuICBzaGlwbWVudF9pZDogMSxcclxuICBzdGF0dXM6ICdpbl90cmFuc2l0JyxcclxuICBkZXNjcmlwdGlvbjogJ1BhcXVldGUgZW4gdHLDoW5zaXRvIGhhY2lhIGRlc3Rpbm8nLFxyXG4gIGxvY2F0aW9uOiAnQnVlbm9zIEFpcmVzLCBBcmdlbnRpbmEnLFxyXG4gIGxhdGl0dWRlOiAtMzQuNjAzNyxcclxuICBsb25naXR1ZGU6IC01OC4zODE2LFxyXG4gIG9jY3VycmVkX2F0OiAnMjAyNC0wMi0xMFQxMjowMDowMFonLFxyXG4gIGNyZWF0ZWRfYXQ6ICcyMDI0LTAyLTEwVDEyOjAwOjAwWidcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrQ291cmllciA9IHtcclxuICBpZDogMSxcclxuICBuYW1lOiAnT0NBJyxcclxuICBjb2RlOiAnT0NBJyxcclxuICBsb2dvX3VybDogJy9sb2dvcy9vY2EucG5nJyxcclxuICB3ZWJzaXRlX3VybDogJ2h0dHBzOi8vb2NhLmNvbS5hcicsXHJcbiAgY29udGFjdF9waG9uZTogJys1NCAxMSA0MDAwLTAwMDAnLFxyXG4gIGNvbnRhY3RfZW1haWw6ICdpbmZvQG9jYS5jb20uYXInLFxyXG4gIGlzX2FjdGl2ZTogdHJ1ZSxcclxuICBzdXBwb3J0ZWRfc2VydmljZXM6IFsnc3RhbmRhcmQnLCAnZXhwcmVzcyddLFxyXG4gIGNvdmVyYWdlX2FyZWFzOiBbJ0J1ZW5vcyBBaXJlcycsICdDw7NyZG9iYScsICdTYW50YSBGZSddLFxyXG4gIGJhc2VfY29zdDogNTAwLFxyXG4gIGNvc3RfcGVyX2tnOiAxMDAsXHJcbiAgYXBpX2NvbmZpZzoge1xyXG4gICAgYmFzZV91cmw6ICdodHRwczovL2FwaS5vY2EuY29tLmFyJyxcclxuICAgIGFwaV9rZXk6ICd0ZXN0LWtleScsXHJcbiAgICBlbnZpcm9ubWVudDogJ3NhbmRib3gnXHJcbiAgfSxcclxuICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxyXG4gIHVwZGF0ZWRfYXQ6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWidcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrTG9naXN0aWNzU3RhdHMgPSB7XHJcbiAgdG90YWxfc2hpcG1lbnRzOiAxNTAsXHJcbiAgcGVuZGluZ19zaGlwbWVudHM6IDI1LFxyXG4gIGNvbmZpcm1lZF9zaGlwbWVudHM6IDMwLFxyXG4gIGluX3RyYW5zaXRfc2hpcG1lbnRzOiA0NSxcclxuICBkZWxpdmVyZWRfc2hpcG1lbnRzOiA0MCxcclxuICBleGNlcHRpb25fc2hpcG1lbnRzOiA1LFxyXG4gIGNhbmNlbGxlZF9zaGlwbWVudHM6IDUsXHJcbiAgYXZlcmFnZV9kZWxpdmVyeV90aW1lOiAzLjUsXHJcbiAgb25fdGltZV9kZWxpdmVyeV9yYXRlOiA5Mi41LFxyXG4gIHRvdGFsX3NoaXBwaW5nX2Nvc3Q6IDIyNTAwMCxcclxuICBhY3RpdmVfY291cmllcnM6IDRcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrR2VvZmVuY2Vab25lID0ge1xyXG4gIGlkOiAndGVzdC16b25lJyxcclxuICBuYW1lOiAnWm9uYSBkZSBQcnVlYmEnLFxyXG4gIHR5cGU6ICdkZWxpdmVyeV96b25lJyBhcyBjb25zdCxcclxuICBjb29yZGluYXRlczogW1xyXG4gICAgWy01OC41LCAtMzQuNV0sXHJcbiAgICBbLTU4LjQsIC0zNC41XSxcclxuICAgIFstNTguNCwgLTM0LjZdLFxyXG4gICAgWy01OC41LCAtMzQuNl0sXHJcbiAgICBbLTU4LjUsIC0zNC41XVxyXG4gIF0gYXMgW251bWJlciwgbnVtYmVyXVtdLFxyXG4gIGNlbnRlcjogWy01OC40NSwgLTM0LjU1XSBhcyBbbnVtYmVyLCBudW1iZXJdLFxyXG4gIGFjdGl2ZTogdHJ1ZSxcclxuICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxyXG4gIHVwZGF0ZWRfYXQ6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWicsXHJcbiAgcnVsZXM6IFt7XHJcbiAgICBpZDogJ3J1bGUtMScsXHJcbiAgICBldmVudF90eXBlOiAnZW50ZXInIGFzIGNvbnN0LFxyXG4gICAgYWN0aW9uOiAnbm90aWZpY2F0aW9uJyBhcyBjb25zdCxcclxuICAgIGNvbmRpdGlvbnM6IHtcclxuICAgICAgc2hpcG1lbnRfc3RhdHVzOiBbJ2luX3RyYW5zaXQnXVxyXG4gICAgfSxcclxuICAgIGFjdGl2ZTogdHJ1ZVxyXG4gIH1dLFxyXG4gIHN0YXRzOiB7XHJcbiAgICB0b3RhbF9ldmVudHM6IDUwLFxyXG4gICAgZW50ZXJfZXZlbnRzOiAyNSxcclxuICAgIGV4aXRfZXZlbnRzOiAyNSxcclxuICAgIHVuaXF1ZV9zaGlwbWVudHM6IDMwLFxyXG4gICAgYXZnX2R3ZWxsX3RpbWU6IDQ1LFxyXG4gICAgbGFzdF9ldmVudDogJzIwMjQtMDItMTBUMTA6MDA6MDBaJ1xyXG4gIH1cclxufTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEhFTFBFUlMgREUgVEVTVElOR1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2ggPSAoKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja0ludGVyc2VjdGlvbk9ic2VydmVyID0gamVzdC5mbigpO1xyXG4gIG1vY2tJbnRlcnNlY3Rpb25PYnNlcnZlci5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgb2JzZXJ2ZTogKCkgPT4gbnVsbCxcclxuICAgIHVub2JzZXJ2ZTogKCkgPT4gbnVsbCxcclxuICAgIGRpc2Nvbm5lY3Q6ICgpID0+IG51bGxcclxuICB9KTtcclxuICB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBtb2NrSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbW9ja1Jlc2l6ZU9ic2VydmVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tSZXNpemVPYnNlcnZlciA9IGplc3QuZm4oKTtcclxuICBtb2NrUmVzaXplT2JzZXJ2ZXIubW9ja1JldHVyblZhbHVlKHtcclxuICAgIG9ic2VydmU6ICgpID0+IG51bGwsXHJcbiAgICB1bm9ic2VydmU6ICgpID0+IG51bGwsXHJcbiAgICBkaXNjb25uZWN0OiAoKSA9PiBudWxsXHJcbiAgfSk7XHJcbiAgd2luZG93LlJlc2l6ZU9ic2VydmVyID0gbW9ja1Jlc2l6ZU9ic2VydmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tXZWJTb2NrZXQgPSAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja1dlYlNvY2tldCA9IHtcclxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIHNlbmQ6IGplc3QuZm4oKSxcclxuICAgIGNsb3NlOiBqZXN0LmZuKCksXHJcbiAgICByZWFkeVN0YXRlOiAxLFxyXG4gICAgQ09OTkVDVElORzogMCxcclxuICAgIE9QRU46IDEsXHJcbiAgICBDTE9TSU5HOiAyLFxyXG4gICAgQ0xPU0VEOiAzLFxyXG4gICAgb25vcGVuOiBudWxsLFxyXG4gICAgb25jbG9zZTogbnVsbCxcclxuICAgIG9ubWVzc2FnZTogbnVsbCxcclxuICAgIG9uZXJyb3I6IG51bGxcclxuICB9O1xyXG4gIFxyXG4gIGdsb2JhbC5XZWJTb2NrZXQgPSBqZXN0LmZuKCgpID0+IG1vY2tXZWJTb2NrZXQpIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIFdlYlNvY2tldD47XHJcbiAgcmV0dXJuIG1vY2tXZWJTb2NrZXQ7XHJcbn07XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDVVNUT00gTUFUQ0hFUlNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cGVjdC5leHRlbmQoe1xyXG4gIHRvQmVXaXRoaW5SYW5nZShyZWNlaXZlZDogbnVtYmVyLCBmbG9vcjogbnVtYmVyLCBjZWlsaW5nOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHBhc3MgPSByZWNlaXZlZCA+PSBmbG9vciAmJiByZWNlaXZlZCA8PSBjZWlsaW5nO1xyXG4gICAgaWYgKHBhc3MpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PlxyXG4gICAgICAgICAgYGV4cGVjdGVkICR7cmVjZWl2ZWR9IG5vdCB0byBiZSB3aXRoaW4gcmFuZ2UgJHtmbG9vcn0gLSAke2NlaWxpbmd9YCxcclxuICAgICAgICBwYXNzOiB0cnVlLFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PlxyXG4gICAgICAgICAgYGV4cGVjdGVkICR7cmVjZWl2ZWR9IHRvIGJlIHdpdGhpbiByYW5nZSAke2Zsb29yfSAtICR7Y2VpbGluZ31gLFxyXG4gICAgICAgIHBhc3M6IGZhbHNlLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgdG9IYXZlVmFsaWRDb29yZGluYXRlcyhyZWNlaXZlZDogQ29vcmRpbmF0ZXNQYWlyKSB7XHJcbiAgICBjb25zdCBpc1ZhbGlkID0gQXJyYXkuaXNBcnJheShyZWNlaXZlZCkgJiYgXHJcbiAgICAgICAgICAgICAgICAgICByZWNlaXZlZC5sZW5ndGggPT09IDIgJiYgXHJcbiAgICAgICAgICAgICAgICAgICB0eXBlb2YgcmVjZWl2ZWRbMF0gPT09ICdudW1iZXInICYmIFxyXG4gICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlY2VpdmVkWzFdID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgcmVjZWl2ZWRbMF0gPj0gLTE4MCAmJiByZWNlaXZlZFswXSA8PSAxODAgJiZcclxuICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkWzFdID49IC05MCAmJiByZWNlaXZlZFsxXSA8PSA5MDtcclxuICAgIFxyXG4gICAgaWYgKGlzVmFsaWQpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGJlIHZhbGlkIGNvb3JkaW5hdGVzYCxcclxuICAgICAgICBwYXNzOiB0cnVlLFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gdG8gYmUgdmFsaWQgY29vcmRpbmF0ZXMgW2xuZywgbGF0XWAsXHJcbiAgICAgICAgcGFzczogZmFsc2UsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFRJUE9TIFBBUkEgQ1VTVE9NIE1BVENIRVJTXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgbmFtZXNwYWNlIGplc3Qge1xyXG4gICAgaW50ZXJmYWNlIE1hdGNoZXJzPFI+IHtcclxuICAgICAgdG9CZVdpdGhpblJhbmdlKGZsb29yOiBudW1iZXIsIGNlaWxpbmc6IG51bWJlcik6IFI7XHJcbiAgICAgIHRvSGF2ZVZhbGlkQ29vcmRpbmF0ZXMoKTogUjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiTWFwIiwiZm4iLCJvbiIsIm9mZiIsImFkZFNvdXJjZSIsImFkZExheWVyIiwiZ2V0U291cmNlIiwic2V0RGF0YSIsInNldFN0eWxlIiwiZml0Qm91bmRzIiwicmVtb3ZlIiwiZ2V0Q2FudmFzIiwic3R5bGUiLCJyZWFkeVN0YXRlIiwiTG5nTGF0Qm91bmRzIiwiZXh0ZW5kIiwiY3JlYXRlTW9ja1dlYlNvY2tldCIsIm1vY2tDb3VyaWVyIiwibW9ja0dlb2ZlbmNlWm9uZSIsIm1vY2tJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm1vY2tMb2dpc3RpY3NTdGF0cyIsIm1vY2tSZXNpemVPYnNlcnZlciIsIm1vY2tTaGlwbWVudCIsIm1vY2tUcmFja2luZ0V2ZW50Iiwid2FpdEZvckxvYWRpbmdUb0ZpbmlzaCIsImNvbmZpZ3VyZSIsInRlc3RJZEF0dHJpYnV0ZSIsImFzeW5jVXRpbFRpbWVvdXQiLCJjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50cyIsImdsb2JhbCIsImZldGNoIiwiYmVmb3JlQWxsIiwibW9ja0ltcGxlbWVudGF0aW9uIiwidXJsIiwiaW5jbHVkZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9rIiwianNvbiIsImRhdGEiLCJzdWNjZXNzIiwibWVzc2FnZSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJhZnRlckFsbCIsInJlc3RvcmVBbGxNb2NrcyIsIldlYlNvY2tldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsImNsb3NlIiwiQ09OTkVDVElORyIsIk9QRU4iLCJDTE9TSU5HIiwiQ0xPU0VEIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwiTm90aWZpY2F0aW9uIiwibmF2aWdhdG9yIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhY2N1cmFjeSIsIndhdGNoUG9zaXRpb24iLCJjbGVhcldhdGNoIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsIlJlc2l6ZU9ic2VydmVyIiwiaWQiLCJzaGlwbWVudF9udW1iZXIiLCJvcmRlcl9pZCIsInN0YXR1cyIsImNhcnJpZXJfaWQiLCJzaGlwcGluZ19zZXJ2aWNlIiwidHJhY2tpbmdfbnVtYmVyIiwiZGVsaXZlcnlfYWRkcmVzcyIsInN0cmVldCIsIm51bWJlciIsImFwYXJ0bWVudCIsIm5laWdoYm9yaG9vZCIsImNpdHkiLCJzdGF0ZSIsInBvc3RhbF9jb2RlIiwiY291bnRyeSIsInBpY2t1cF9hZGRyZXNzIiwid2VpZ2h0X2tnIiwiZGltZW5zaW9uc19jbSIsInRvdGFsX2Nvc3QiLCJlc3RpbWF0ZWRfZGVsaXZlcnlfZGF0ZSIsInNwZWNpYWxfaW5zdHJ1Y3Rpb25zIiwibm90ZXMiLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsImNhcnJpZXIiLCJuYW1lIiwiY29kZSIsImxvZ29fdXJsIiwiaXNfYWN0aXZlIiwiaXRlbXMiLCJwcm9kdWN0X2lkIiwicXVhbnRpdHkiLCJzaGlwbWVudF9pZCIsImRlc2NyaXB0aW9uIiwibG9jYXRpb24iLCJvY2N1cnJlZF9hdCIsIndlYnNpdGVfdXJsIiwiY29udGFjdF9waG9uZSIsImNvbnRhY3RfZW1haWwiLCJzdXBwb3J0ZWRfc2VydmljZXMiLCJjb3ZlcmFnZV9hcmVhcyIsImJhc2VfY29zdCIsImNvc3RfcGVyX2tnIiwiYXBpX2NvbmZpZyIsImJhc2VfdXJsIiwiYXBpX2tleSIsImVudmlyb25tZW50IiwidG90YWxfc2hpcG1lbnRzIiwicGVuZGluZ19zaGlwbWVudHMiLCJjb25maXJtZWRfc2hpcG1lbnRzIiwiaW5fdHJhbnNpdF9zaGlwbWVudHMiLCJkZWxpdmVyZWRfc2hpcG1lbnRzIiwiZXhjZXB0aW9uX3NoaXBtZW50cyIsImNhbmNlbGxlZF9zaGlwbWVudHMiLCJhdmVyYWdlX2RlbGl2ZXJ5X3RpbWUiLCJvbl90aW1lX2RlbGl2ZXJ5X3JhdGUiLCJ0b3RhbF9zaGlwcGluZ19jb3N0IiwiYWN0aXZlX2NvdXJpZXJzIiwidHlwZSIsImNvb3JkaW5hdGVzIiwiY2VudGVyIiwiYWN0aXZlIiwicnVsZXMiLCJldmVudF90eXBlIiwiYWN0aW9uIiwiY29uZGl0aW9ucyIsInNoaXBtZW50X3N0YXR1cyIsInN0YXRzIiwidG90YWxfZXZlbnRzIiwiZW50ZXJfZXZlbnRzIiwiZXhpdF9ldmVudHMiLCJ1bmlxdWVfc2hpcG1lbnRzIiwiYXZnX2R3ZWxsX3RpbWUiLCJsYXN0X2V2ZW50Iiwic2V0VGltZW91dCIsIm1vY2tSZXR1cm5WYWx1ZSIsIm1vY2tXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbmNsb3NlIiwib25tZXNzYWdlIiwib25lcnJvciIsImV4cGVjdCIsInRvQmVXaXRoaW5SYW5nZSIsInJlY2VpdmVkIiwiZmxvb3IiLCJjZWlsaW5nIiwicGFzcyIsInRvSGF2ZVZhbGlkQ29vcmRpbmF0ZXMiLCJpc1ZhbGlkIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSx3REFBd0Q7QUFDeEQsb0RBQW9EO0FBQ3BELDZFQUE2RTtBQUM3RSxnREFBZ0Q7QUFDaEQsd0RBQXdEOztBQWtGeEQsd0RBQXdEO0FBQ3hELGlCQUFpQjtBQUNqQix3REFBd0Q7QUFFeEQseUJBQXlCO0FBQ3pCQSxLQUFLQyxJQUFJLENBQUMsZUFBZSxJQUFPLENBQUE7UUFDOUJDLEtBQUtGLEtBQUtHLEVBQUUsQ0FBQyxJQUFPLENBQUE7Z0JBQ2xCQyxJQUFJSixLQUFLRyxFQUFFO2dCQUNYRSxLQUFLTCxLQUFLRyxFQUFFO2dCQUNaRyxXQUFXTixLQUFLRyxFQUFFO2dCQUNsQkksVUFBVVAsS0FBS0csRUFBRTtnQkFDakJLLFdBQVdSLEtBQUtHLEVBQUUsQ0FBQyxJQUFPLENBQUE7d0JBQ3hCTSxTQUFTVCxLQUFLRyxFQUFFO29CQUNsQixDQUFBO2dCQUNBTyxVQUFVVixLQUFLRyxFQUFFO2dCQUNqQlEsV0FBV1gsS0FBS0csRUFBRTtnQkFDbEJTLFFBQVFaLEtBQUtHLEVBQUU7Z0JBQ2ZVLFdBQVdiLEtBQUtHLEVBQUUsQ0FBQyxJQUFPLENBQUE7d0JBQ3hCVyxPQUFPLENBQUM7b0JBQ1YsQ0FBQTtnQkFDQUMsWUFBWTtZQUNkLENBQUE7UUFDQUMsY0FBY2hCLEtBQUtHLEVBQUUsQ0FBQyxJQUFPLENBQUE7Z0JBQzNCYyxRQUFRakIsS0FBS0csRUFBRTtZQUNqQixDQUFBO0lBQ0YsQ0FBQTs7Ozs7Ozs7Ozs7UUFpT2FlO2VBQUFBOztRQWxHQUM7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