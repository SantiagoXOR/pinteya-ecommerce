{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts"],"sourcesContent":["// ===================================\n// HOOK: useSearchErrorHandler - Manejo robusto de errores de búsqueda\n// ===================================\n\nimport { useState, useCallback, useMemo } from 'react'\n\n// ===================================\n// TIPOS\n// ===================================\n\nexport interface SearchError {\n  type: 'network' | 'server' | 'validation' | 'timeout' | 'unknown'\n  message: string\n  code?: string\n  retryable: boolean\n  timestamp: number\n}\n\nexport interface RetryConfig {\n  maxRetries: number\n  baseDelay: number\n  maxDelay: number\n  backoffFactor: number\n}\n\nexport interface UseSearchErrorHandlerOptions {\n  retryConfig?: Partial<RetryConfig>\n  onError?: (error: SearchError) => void\n  onRetrySuccess?: () => void\n  onRetryFailed?: (error: SearchError, attempts: number) => void\n}\n\n// ===================================\n// CONFIGURACIÓN POR DEFECTO\n// ===================================\n\nconst DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000,\n  maxDelay: 10000,\n  backoffFactor: 2,\n}\n\n// ===================================\n// UTILIDADES\n// ===================================\n\n/**\n * Clasifica el tipo de error basado en el error original\n */\nfunction classifyError(error: any): SearchError {\n  const timestamp = Date.now()\n\n  // Error de red\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\n    return {\n      type: 'network',\n      message: 'Error de conexión. Verifica tu conexión a internet.',\n      retryable: true,\n      timestamp,\n    }\n  }\n\n  // Error de timeout\n  if (error.name === 'AbortError' || error.message.includes('timeout')) {\n    return {\n      type: 'timeout',\n      message: 'La búsqueda tardó demasiado. Intenta nuevamente.',\n      retryable: true,\n      timestamp,\n    }\n  }\n\n  // Error del servidor\n  if (error.status >= 500) {\n    return {\n      type: 'server',\n      message: 'Error del servidor. Intenta nuevamente en unos momentos.',\n      code: error.status?.toString(),\n      retryable: true,\n      timestamp,\n    }\n  }\n\n  // Error de validación\n  if (error.status >= 400 && error.status < 500) {\n    return {\n      type: 'validation',\n      message: error.message || 'Parámetros de búsqueda inválidos.',\n      code: error.status?.toString(),\n      retryable: false,\n      timestamp,\n    }\n  }\n\n  // Error desconocido\n  return {\n    type: 'unknown',\n    message: error.message || 'Error inesperado durante la búsqueda.',\n    retryable: true,\n    timestamp,\n  }\n}\n\n/**\n * Calcula el delay para el siguiente retry con backoff exponencial\n */\nfunction calculateDelay(attempt: number, config: RetryConfig): number {\n  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1)\n  return Math.min(delay, config.maxDelay)\n}\n\n// ===================================\n// HOOK PRINCIPAL\n// ===================================\n\nexport function useSearchErrorHandler(options: UseSearchErrorHandlerOptions = {}) {\n  const { retryConfig: userRetryConfig = {}, onError, onRetrySuccess, onRetryFailed } = options\n\n  const retryConfig = useMemo(\n    () => ({\n      ...DEFAULT_RETRY_CONFIG,\n      ...userRetryConfig,\n    }),\n    [userRetryConfig]\n  )\n\n  const [currentError, setCurrentError] = useState<SearchError | null>(null)\n  const [retryCount, setRetryCount] = useState(0)\n  const [isRetrying, setIsRetrying] = useState(false)\n\n  /**\n   * Maneja un error de búsqueda\n   */\n  const handleError = useCallback(\n    (error: any): SearchError => {\n      const searchError = classifyError(error)\n      setCurrentError(searchError)\n      setRetryCount(0)\n\n      // Callback personalizado\n      onError?.(searchError)\n\n      return searchError\n    },\n    [onError]\n  )\n\n  /**\n   * Ejecuta una operación con retry automático\n   */\n  const executeWithRetry = useCallback(\n    async <T>(operation: () => Promise<T>, operationName: string = 'búsqueda'): Promise<T> => {\n      let lastError: any\n\n      for (let attempt = 1; attempt <= retryConfig.maxRetries + 1; attempt++) {\n        try {\n          setIsRetrying(attempt > 1)\n          setRetryCount(attempt > 1 ? attempt - 1 : 0)\n\n          const result = await operation()\n\n          // Éxito\n          if (attempt > 1) {\n            setCurrentError(null)\n            setRetryCount(0)\n            setIsRetrying(false)\n            onRetrySuccess?.()\n          }\n\n          return result\n        } catch (error) {\n          lastError = error\n          const searchError = classifyError(error)\n\n          // Si no es retryable, fallar inmediatamente\n          if (!searchError.retryable) {\n            setCurrentError(searchError)\n            setRetryCount(0)\n            setIsRetrying(false)\n            onError?.(searchError)\n            throw error\n          }\n\n          // Si hemos agotado los intentos\n          if (attempt > retryConfig.maxRetries) {\n            setCurrentError(searchError)\n            setRetryCount(attempt - 1)\n            setIsRetrying(false)\n            onRetryFailed?.(searchError, attempt - 1)\n            throw error\n          }\n\n          // Preparar para retry\n          const delay = calculateDelay(attempt, retryConfig)\n\n          console.warn(\n            `${operationName} falló (intento ${attempt}/${retryConfig.maxRetries}). Reintentando en ${delay}ms...`,\n            error\n          )\n\n          await new Promise(resolve => setTimeout(resolve, delay))\n        }\n      }\n\n      throw lastError\n    },\n    [retryConfig, onError, onRetrySuccess, onRetryFailed]\n  )\n\n  /**\n   * Limpia el estado de error\n   */\n  const clearError = useCallback(() => {\n    setCurrentError(null)\n    setRetryCount(0)\n    setIsRetrying(false)\n  }, [])\n\n  /**\n   * Retry manual\n   */\n  const retryManually = useCallback(\n    async <T>(operation: () => Promise<T>): Promise<T> => {\n      clearError()\n      return executeWithRetry(operation, 'retry manual')\n    },\n    [executeWithRetry, clearError]\n  )\n\n  return {\n    // Estado\n    currentError,\n    retryCount,\n    isRetrying,\n    hasError: currentError !== null,\n\n    // Funciones\n    handleError,\n    executeWithRetry,\n    clearError,\n    retryManually,\n\n    // Configuración\n    retryConfig,\n  }\n}\n\nexport default useSearchErrorHandler\n"],"names":["useSearchErrorHandler","DEFAULT_RETRY_CONFIG","maxRetries","baseDelay","maxDelay","backoffFactor","classifyError","error","timestamp","Date","now","name","message","includes","type","retryable","status","code","toString","calculateDelay","attempt","config","delay","Math","pow","min","options","retryConfig","userRetryConfig","onError","onRetrySuccess","onRetryFailed","useMemo","currentError","setCurrentError","useState","retryCount","setRetryCount","isRetrying","setIsRetrying","handleError","useCallback","searchError","executeWithRetry","operation","operationName","lastError","result","console","warn","Promise","resolve","setTimeout","clearError","retryManually","hasError"],"mappings":"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"}