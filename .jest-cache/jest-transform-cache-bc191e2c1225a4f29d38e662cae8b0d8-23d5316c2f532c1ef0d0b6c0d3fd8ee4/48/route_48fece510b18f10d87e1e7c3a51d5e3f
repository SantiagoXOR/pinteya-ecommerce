b2aef68312c1f5a6610c12a94abc3494
// ===================================
// PINTEYA E-COMMERCE - ADMIN ORDER STATUS API ENTERPRISE
// ===================================
"use strict";

/* istanbul ignore next */
function cov_6rdeds0b9() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\status\\route.ts";
  var hash = "67fe016b3775ce067e3f5a157fc6284393c8c9cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\status\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 20
        }
      },
      "6": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "7": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 72
        }
      },
      "8": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "9": {
        start: {
          line: 25,
          column: 13
        },
        end: {
          line: 25,
          column: 27
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "11": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 73
        }
      },
      "12": {
        start: {
          line: 28,
          column: 21
        },
        end: {
          line: 28,
          column: 77
        }
      },
      "13": {
        start: {
          line: 29,
          column: 17
        },
        end: {
          line: 29,
          column: 68
        }
      },
      "14": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 49,
          column: 2
        }
      },
      "15": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 78,
          column: 1
        }
      },
      "16": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 88,
          column: 1
        }
      },
      "17": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "18": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 94,
          column: 10
        }
      },
      "19": {
        start: {
          line: 96,
          column: 31
        },
        end: {
          line: 96,
          column: 62
        }
      },
      "20": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "21": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "22": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "23": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "24": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 47
        }
      },
      "25": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "26": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 117,
          column: 14
        }
      },
      "27": {
        start: {
          line: 119,
          column: 21
        },
        end: {
          line: 119,
          column: 34
        }
      },
      "28": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "29": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 14
        }
      },
      "30": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 68
        }
      },
      "31": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 132,
          column: 14
        }
      },
      "33": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "34": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "35": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "36": {
        start: {
          line: 149,
          column: 22
        },
        end: {
          line: 149,
          column: 32
        }
      },
      "37": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "38": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 196
        }
      },
      "39": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "40": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "41": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 77
        }
      },
      "42": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 28
        }
      },
      "43": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 52
        }
      },
      "44": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "45": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "46": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 33
        }
      },
      "47": {
        start: {
          line: 173,
          column: 21
        },
        end: {
          line: 173,
          column: 41
        }
      },
      "48": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 174,
          column: 67
        }
      },
      "49": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "50": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "51": {
        start: {
          line: 183,
          column: 109
        },
        end: {
          line: 183,
          column: 130
        }
      },
      "52": {
        start: {
          line: 185,
          column: 58
        },
        end: {
          line: 195,
          column: 35
        }
      },
      "53": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "54": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "55": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "56": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "57": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "58": {
        start: {
          line: 215,
          column: 37
        },
        end: {
          line: 215,
          column: 92
        }
      },
      "59": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "60": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "61": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "62": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "63": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 57
        }
      },
      "64": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "65": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 41
        }
      },
      "66": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "67": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 63
        }
      },
      "68": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "69": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 47
        }
      },
      "70": {
        start: {
          line: 241,
          column: 15
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "71": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 51
        }
      },
      "72": {
        start: {
          line: 245,
          column: 59
        },
        end: {
          line: 245,
          column: 158
        }
      },
      "73": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "74": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 250,
          column: 15
        }
      },
      "75": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 255,
          column: 15
        }
      },
      "76": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "77": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 271,
          column: 15
        }
      },
      "78": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 276,
          column: 15
        }
      },
      "79": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "80": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 286,
          column: 15
        }
      },
      "81": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 291,
          column: 15
        }
      },
      "82": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "83": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 300,
          column: 15
        }
      },
      "84": {
        start: {
          line: 303,
          column: 29
        },
        end: {
          line: 303,
          column: 51
        }
      },
      "85": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 110
        }
      },
      "86": {
        start: {
          line: 305,
          column: 25
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "87": {
        start: {
          line: 315,
          column: 29
        },
        end: {
          line: 315,
          column: 64
        }
      },
      "88": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 77
        }
      },
      "89": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "90": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 28
        }
      },
      "91": {
        start: {
          line: 327,
          column: 29
        },
        end: {
          line: 327,
          column: 51
        }
      },
      "92": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 110
        }
      },
      "93": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 332,
          column: 11
        }
      },
      "94": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "95": {
        start: {
          line: 341,
          column: 22
        },
        end: {
          line: 341,
          column: 32
        }
      },
      "96": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 399,
          column: 5
        }
      },
      "97": {
        start: {
          line: 344,
          column: 27
        },
        end: {
          line: 344,
          column: 52
        }
      },
      "98": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "99": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "100": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 352,
          column: 33
        }
      },
      "101": {
        start: {
          line: 354,
          column: 39
        },
        end: {
          line: 354,
          column: 127
        }
      },
      "102": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "103": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 362,
          column: 13
        }
      },
      "104": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 361,
          column: 19
        }
      },
      "105": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 367,
          column: 15
        }
      },
      "106": {
        start: {
          line: 369,
          column: 30
        },
        end: {
          line: 369,
          column: 42
        }
      },
      "107": {
        start: {
          line: 370,
          column: 37
        },
        end: {
          line: 370,
          column: 74
        }
      },
      "108": {
        start: {
          line: 371,
          column: 25
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "109": {
        start: {
          line: 375,
          column: 74
        },
        end: {
          line: 378,
          column: 21
        }
      },
      "110": {
        start: {
          line: 384,
          column: 29
        },
        end: {
          line: 384,
          column: 51
        }
      },
      "111": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 97
        }
      },
      "112": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 51
        }
      },
      "113": {
        start: {
          line: 388,
          column: 29
        },
        end: {
          line: 388,
          column: 51
        }
      },
      "114": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 97
        }
      },
      "115": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 393,
          column: 11
        }
      },
      "116": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "validateStateTransition",
        decl: {
          start: {
            line: 89,
            column: 9
          },
          end: {
            line: 89,
            column: 32
          }
        },
        loc: {
          start: {
            line: 89,
            column: 59
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 89
      },
      "4": {
        name: "validateAdminAuth",
        decl: {
          start: {
            line: 110,
            column: 15
          },
          end: {
            line: 110,
            column: 32
          }
        },
        loc: {
          start: {
            line: 110,
            column: 35
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 110
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 148,
            column: 15
          },
          end: {
            line: 148,
            column: 19
          }
        },
        loc: {
          start: {
            line: 148,
            column: 41
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 148
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 340,
            column: 15
          },
          end: {
            line: 340,
            column: 18
          }
        },
        loc: {
          start: {
            line: 340,
            column: 40
          },
          end: {
            line: 400,
            column: 1
          }
        },
        line: 340
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 375,
            column: 63
          },
          end: {
            line: 375,
            column: 64
          }
        },
        loc: {
          start: {
            line: 375,
            column: 74
          },
          end: {
            line: 378,
            column: 21
          }
        },
        line: 375
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "1": {
        loc: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "2": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 27
          }
        }, {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 97,
            column: 70
          }
        }],
        line: 97
      },
      "3": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "4": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "5": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "6": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "7": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "8": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "9": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "10": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "11": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "12": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "13": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 243,
            column: 9
          }
        }],
        line: 239
      },
      "16": {
        loc: {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "17": {
        loc: {
          start: {
            line: 241,
            column: 19
          },
          end: {
            line: 241,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 19
          },
          end: {
            line: 241,
            column: 44
          }
        }, {
          start: {
            line: 241,
            column: 48
          },
          end: {
            line: 241,
            column: 72
          }
        }],
        line: 241
      },
      "18": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "19": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "20": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "21": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "22": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 362,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "23": {
        loc: {
          start: {
            line: 370,
            column: 37
          },
          end: {
            line: 370,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 37
          },
          end: {
            line: 370,
            column: 68
          }
        }, {
          start: {
            line: 370,
            column: 72
          },
          end: {
            line: 370,
            column: 74
          }
        }],
        line: 370
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\status\\route.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN ORDER STATUS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nconst StatusUpdateSchema = z.object({\r\n  status: z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded', 'returned']),\r\n  reason: z.string().min(1, 'Raz\xF3n del cambio es requerida').max(500, 'Raz\xF3n muy larga'),\r\n  notify_customer: z.boolean().default(true),\r\n  tracking_number: z.string().optional(),\r\n  carrier: z.string().optional(),\r\n  estimated_delivery: z.string().optional(),\r\n});\r\n\r\n// ===================================\r\n// VALIDACIONES DE TRANSICI\xD3N DE ESTADOS\r\n// ===================================\r\n\r\nconst stateTransitions: Record<string, string[]> = {\r\n  pending: ['confirmed', 'cancelled'],\r\n  confirmed: ['processing', 'cancelled'],\r\n  processing: ['shipped', 'cancelled'],\r\n  shipped: ['delivered', 'returned'],\r\n  delivered: ['returned'],\r\n  cancelled: [],\r\n  refunded: [],\r\n  returned: ['refunded']\r\n};\r\n\r\nconst statusDescriptions: Record<string, string> = {\r\n  pending: 'Pendiente de confirmaci\xF3n',\r\n  confirmed: 'Confirmada, preparando pedido',\r\n  processing: 'En proceso de preparaci\xF3n',\r\n  shipped: 'Enviada',\r\n  delivered: 'Entregada',\r\n  cancelled: 'Cancelada',\r\n  refunded: 'Reembolsada',\r\n  returned: 'Devuelta'\r\n};\r\n\r\nfunction validateStateTransition(currentStatus: string, newStatus: string): { valid: boolean; message?: string } {\r\n  if (currentStatus === newStatus) {\r\n    return { valid: false, message: 'El estado ya es el mismo' };\r\n  }\r\n  \r\n  const allowedTransitions = stateTransitions[currentStatus];\r\n  if (!allowedTransitions || !allowedTransitions.includes(newStatus)) {\r\n    return { \r\n      valid: false, \r\n      message: `Transici\xF3n no permitida: ${statusDescriptions[currentStatus]} \u2192 ${statusDescriptions[newStatus]}` \r\n    };\r\n  }\r\n  \r\n  return { valid: true };\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACI\xD3N ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no encontrado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validaci\xF3n admin', { error });\r\n    return { error: 'Error de autenticaci\xF3n', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Cambiar estado de orden\r\n// ===================================\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-status'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = StatusUpdateSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de cambio de estado inv\xE1lidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { status: newStatus, reason, notify_customer, tracking_number, carrier, estimated_delivery } = validationResult.data;\r\n\r\n    // Obtener orden actual\r\n    const { data: currentOrder, error: fetchError } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        status,\r\n        payment_status,\r\n        order_number,\r\n        user_profiles!orders_user_id_fkey (\r\n          id,\r\n          name,\r\n          email\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      if (fetchError.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden', { fetchError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Validar transici\xF3n de estado\r\n    const transitionValidation = validateStateTransition(currentOrder.status, newStatus);\r\n    if (!transitionValidation.valid) {\r\n      return NextResponse.json(\r\n        { error: transitionValidation.message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de actualizaci\xF3n\r\n    const updateData: any = {\r\n      status: newStatus,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Agregar campos adicionales seg\xFAn el estado\r\n    if (tracking_number) {updateData.tracking_number = tracking_number;}\r\n    if (carrier) {updateData.carrier = carrier;}\r\n    if (estimated_delivery) {updateData.estimated_delivery = estimated_delivery;}\r\n\r\n    // Actualizar estado de pago autom\xE1ticamente en ciertos casos\r\n    if (newStatus === 'delivered') {\r\n      updateData.payment_status = 'paid';\r\n    } else if (newStatus === 'cancelled' || newStatus === 'refunded') {\r\n      updateData.payment_status = 'refunded';\r\n    }\r\n\r\n    // Actualizar orden\r\n    const { data: updatedOrder, error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al actualizar estado de orden', { updateError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar estado de orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar en historial de estados\r\n    try {\r\n      await supabaseAdmin\r\n        .from('order_status_history')\r\n        .insert({\r\n          order_id: orderId,\r\n          previous_status: currentOrder.status,\r\n          new_status: newStatus,\r\n          changed_by: authResult.user.id,\r\n          reason: reason,\r\n          metadata: JSON.stringify({\r\n            tracking_number,\r\n            carrier,\r\n            estimated_delivery,\r\n            notify_customer,\r\n          }),\r\n        });\r\n    } catch (historyError) {\r\n      // Si la tabla no existe, continuar sin registrar historial\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo registrar historial de estado', { historyError });\r\n    }\r\n\r\n    // Agregar nota interna sobre el cambio\r\n    try {\r\n      await supabaseAdmin\r\n        .from('order_notes')\r\n        .insert({\r\n          order_id: orderId,\r\n          admin_id: authResult.user.id,\r\n          note_type: 'internal',\r\n          content: `Estado cambiado de \"${statusDescriptions[currentOrder.status]}\" a \"${statusDescriptions[newStatus]}\". Raz\xF3n: ${reason}`,\r\n          is_visible_to_customer: false,\r\n        });\r\n    } catch (noteError) {\r\n      // Si la tabla no existe, continuar sin agregar nota\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo agregar nota de cambio de estado', { noteError });\r\n    }\r\n\r\n    // TODO: Enviar notificaci\xF3n al cliente si notify_customer es true\r\n    if (notify_customer) {\r\n      logger.log(LogLevel.INFO, LogCategory.NOTIFICATION, 'Notificaci\xF3n de cambio de estado pendiente', {\r\n        orderId,\r\n        customerEmail: currentOrder.user_profiles?.email,\r\n        newStatus,\r\n        orderNumber: currentOrder.order_number,\r\n      });\r\n    }\r\n\r\n    // M\xE9tricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await metricsCollector.recordRequest('admin-order-status-change', 'POST', 200, responseTime);\r\n\r\n    const response: ApiResponse<{\r\n      order: typeof updatedOrder;\r\n      previousStatus: string;\r\n      newStatus: string;\r\n      statusDescription: string;\r\n    }> = {\r\n      data: {\r\n        order: updatedOrder,\r\n        previousStatus: currentOrder.status,\r\n        newStatus,\r\n        statusDescription: statusDescriptions[newStatus],\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Estado de orden cambiado exitosamente', {\r\n      orderId,\r\n      previousStatus: currentOrder.status,\r\n      newStatus,\r\n      reason,\r\n      adminId: authResult.user.id,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await metricsCollector.recordRequest('admin-order-status-change', 'POST', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/orders/[id]/status', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener estados disponibles\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Validar autenticaci\xF3n admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Obtener estado actual de la orden\r\n    const { data: order, error } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('status')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const currentStatus = order.status;\r\n    const availableTransitions = stateTransitions[currentStatus] || [];\r\n\r\n    const response: ApiResponse<{\r\n      currentStatus: string;\r\n      currentStatusDescription: string;\r\n      availableTransitions: Array<{\r\n        status: string;\r\n        description: string;\r\n      }>;\r\n    }> = {\r\n      data: {\r\n        currentStatus,\r\n        currentStatusDescription: statusDescriptions[currentStatus],\r\n        availableTransitions: availableTransitions.map(status => ({\r\n          status,\r\n          description: statusDescriptions[status],\r\n        })),\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    // M\xE9tricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-order-status-options', responseTime, 200);\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-order-status-options', responseTime, 500);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/orders/[id]/status', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["GET", "POST", "StatusUpdateSchema", "z", "object", "status", "enum", "reason", "string", "min", "max", "notify_customer", "boolean", "default", "tracking_number", "optional", "carrier", "estimated_delivery", "stateTransitions", "pending", "confirmed", "processing", "shipped", "delivered", "cancelled", "refunded", "returned", "statusDescriptions", "validateStateTransition", "currentStatus", "newStatus", "valid", "message", "allowedTransitions", "includes", "validateAdminAuth", "session", "auth", "user", "error", "isAdmin", "email", "userId", "id", "logger", "log", "LogLevel", "ERROR", "LogCategory", "AUTH", "request", "params", "startTime", "Date", "now", "rateLimitResult", "checkRateLimit", "RATE_LIMIT_CONFIGS", "admin", "requests", "window", "success", "response", "NextResponse", "json", "addRateLimitHeaders", "authResult", "orderId", "body", "validationResult", "safeParse", "details", "errors", "data", "currentOrder", "fetchError", "supabaseAdmin", "from", "select", "eq", "single", "code", "DATABASE", "transitionValidation", "updateData", "updated_at", "toISOString", "payment_status", "updatedOrder", "updateError", "update", "insert", "order_id", "previous_status", "new_status", "changed_by", "metadata", "JSON", "stringify", "historyError", "WARN", "admin_id", "note_type", "content", "is_visible_to_customer", "noteError", "INFO", "NOTIFICATION", "customerEmail", "user_profiles", "orderNumber", "order_number", "responseTime", "metricsCollector", "recordRequest", "order", "previousStatus", "statusDescription", "nextResponse", "API", "adminId", "availableTransitions", "currentStatusDescription", "map", "description", "recordApiCall"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "67fe016b3775ce067e3f5a157fc6284393c8c9cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6rdeds0b9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6rdeds0b9();
cov_6rdeds0b9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_6rdeds0b9().f[0]++;
  cov_6rdeds0b9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_6rdeds0b9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_6rdeds0b9().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_6rdeds0b9().f[1]++;
    cov_6rdeds0b9().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_6rdeds0b9().f[2]++;
    cov_6rdeds0b9().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_6rdeds0b9().s[6]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_6rdeds0b9().s[7]++, require("../../../../../../lib/integrations/supabase"));
const _auth =
/* istanbul ignore next */
(cov_6rdeds0b9().s[8]++, require("../../../../../../auth"));
const _zod =
/* istanbul ignore next */
(cov_6rdeds0b9().s[9]++, require("zod"));
const _logger =
/* istanbul ignore next */
(cov_6rdeds0b9().s[10]++, require("../../../../../../lib/enterprise/logger"));
const _ratelimiting =
/* istanbul ignore next */
(cov_6rdeds0b9().s[11]++, require("../../../../../../lib/auth/rate-limiting"));
const _ratelimiter =
/* istanbul ignore next */
(cov_6rdeds0b9().s[12]++, require("../../../../../../lib/enterprise/rate-limiter"));
const _metrics =
/* istanbul ignore next */
(cov_6rdeds0b9().s[13]++, require("../../../../../../lib/enterprise/metrics"));
// ===================================
// SCHEMAS DE VALIDACIÓN
// ===================================
const StatusUpdateSchema =
/* istanbul ignore next */
(cov_6rdeds0b9().s[14]++, _zod.z.object({
  status: _zod.z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded', 'returned']),
  reason: _zod.z.string().min(1, 'Razón del cambio es requerida').max(500, 'Razón muy larga'),
  notify_customer: _zod.z.boolean().default(true),
  tracking_number: _zod.z.string().optional(),
  carrier: _zod.z.string().optional(),
  estimated_delivery: _zod.z.string().optional()
}));
// ===================================
// VALIDACIONES DE TRANSICIÓN DE ESTADOS
// ===================================
const stateTransitions =
/* istanbul ignore next */
(cov_6rdeds0b9().s[15]++, {
  pending: ['confirmed', 'cancelled'],
  confirmed: ['processing', 'cancelled'],
  processing: ['shipped', 'cancelled'],
  shipped: ['delivered', 'returned'],
  delivered: ['returned'],
  cancelled: [],
  refunded: [],
  returned: ['refunded']
});
const statusDescriptions =
/* istanbul ignore next */
(cov_6rdeds0b9().s[16]++, {
  pending: 'Pendiente de confirmación',
  confirmed: 'Confirmada, preparando pedido',
  processing: 'En proceso de preparación',
  shipped: 'Enviada',
  delivered: 'Entregada',
  cancelled: 'Cancelada',
  refunded: 'Reembolsada',
  returned: 'Devuelta'
});
function validateStateTransition(currentStatus, newStatus) {
  /* istanbul ignore next */
  cov_6rdeds0b9().f[3]++;
  cov_6rdeds0b9().s[17]++;
  if (currentStatus === newStatus) {
    /* istanbul ignore next */
    cov_6rdeds0b9().b[0][0]++;
    cov_6rdeds0b9().s[18]++;
    return {
      valid: false,
      message: 'El estado ya es el mismo'
    };
  } else
  /* istanbul ignore next */
  {
    cov_6rdeds0b9().b[0][1]++;
  }
  const allowedTransitions =
  /* istanbul ignore next */
  (cov_6rdeds0b9().s[19]++, stateTransitions[currentStatus]);
  /* istanbul ignore next */
  cov_6rdeds0b9().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_6rdeds0b9().b[2][0]++, !allowedTransitions) ||
  /* istanbul ignore next */
  (cov_6rdeds0b9().b[2][1]++, !allowedTransitions.includes(newStatus))) {
    /* istanbul ignore next */
    cov_6rdeds0b9().b[1][0]++;
    cov_6rdeds0b9().s[21]++;
    return {
      valid: false,
      message: `Transición no permitida: ${statusDescriptions[currentStatus]} → ${statusDescriptions[newStatus]}`
    };
  } else
  /* istanbul ignore next */
  {
    cov_6rdeds0b9().b[1][1]++;
  }
  cov_6rdeds0b9().s[22]++;
  return {
    valid: true
  };
}
// ===================================
// MIDDLEWARE DE AUTENTICACIÓN ADMIN
// ===================================
async function validateAdminAuth() {
  /* istanbul ignore next */
  cov_6rdeds0b9().f[4]++;
  cov_6rdeds0b9().s[23]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[24]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[25]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[3][0]++;
      cov_6rdeds0b9().s[26]++;
      return {
        error: 'Usuario no autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[3][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[27]++, session?.user);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[28]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[4][0]++;
      cov_6rdeds0b9().s[29]++;
      return {
        error: 'Usuario no encontrado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[4][1]++;
    }
    // Verificar si es admin
    const isAdmin =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[30]++, session.user.email === 'santiago@xor.com.ar');
    /* istanbul ignore next */
    cov_6rdeds0b9().s[31]++;
    if (!isAdmin) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[5][0]++;
      cov_6rdeds0b9().s[32]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[5][1]++;
    }
    cov_6rdeds0b9().s[33]++;
    return {
      user: session.user,
      userId: session.user.id
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_6rdeds0b9().s[34]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.AUTH, 'Error en validación admin', {
      error
    });
    /* istanbul ignore next */
    cov_6rdeds0b9().s[35]++;
    return {
      error: 'Error de autenticación',
      status: 500
    };
  }
}
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6rdeds0b9().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_6rdeds0b9().s[36]++, Date.now());
  /* istanbul ignore next */
  cov_6rdeds0b9().s[37]++;
  try {
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[38]++, await (0, _ratelimiting.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.admin.requests, _ratelimiter.RATE_LIMIT_CONFIGS.admin.window, 'admin-order-status'));
    /* istanbul ignore next */
    cov_6rdeds0b9().s[39]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[6][0]++;
      const response =
      /* istanbul ignore next */
      (cov_6rdeds0b9().s[40]++, _server.NextResponse.json({
        error: 'Demasiadas solicitudes'
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_6rdeds0b9().s[41]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult);
      /* istanbul ignore next */
      cov_6rdeds0b9().s[42]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[6][1]++;
    }
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[43]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[44]++;
    if ('error' in authResult) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[7][0]++;
      cov_6rdeds0b9().s[45]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[7][1]++;
    }
    const orderId =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[46]++, params.id);
    // Validar datos de entrada
    const body =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[47]++, await request.json());
    const validationResult =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[48]++, StatusUpdateSchema.safeParse(body));
    /* istanbul ignore next */
    cov_6rdeds0b9().s[49]++;
    if (!validationResult.success) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[8][0]++;
      cov_6rdeds0b9().s[50]++;
      return _server.NextResponse.json({
        error: 'Datos de cambio de estado inválidos',
        details: validationResult.error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[8][1]++;
    }
    const {
      status: newStatus,
      reason,
      notify_customer,
      tracking_number,
      carrier,
      estimated_delivery
    } =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[51]++, validationResult.data);
    // Obtener orden actual
    const {
      data: currentOrder,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[52]++, await _supabase.supabaseAdmin.from('orders').select(`
        id,
        status,
        payment_status,
        order_number,
        user_profiles!orders_user_id_fkey (
          id,
          name,
          email
        )
      `).eq('id', orderId).single());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[53]++;
    if (fetchError) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[9][0]++;
      cov_6rdeds0b9().s[54]++;
      if (fetchError.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_6rdeds0b9().b[10][0]++;
        cov_6rdeds0b9().s[55]++;
        return _server.NextResponse.json({
          error: 'Orden no encontrada'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_6rdeds0b9().b[10][1]++;
      }
      cov_6rdeds0b9().s[56]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error al obtener orden', {
        fetchError,
        orderId
      });
      /* istanbul ignore next */
      cov_6rdeds0b9().s[57]++;
      return _server.NextResponse.json({
        error: 'Error al obtener orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[9][1]++;
    }
    // Validar transición de estado
    const transitionValidation =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[58]++, validateStateTransition(currentOrder.status, newStatus));
    /* istanbul ignore next */
    cov_6rdeds0b9().s[59]++;
    if (!transitionValidation.valid) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[11][0]++;
      cov_6rdeds0b9().s[60]++;
      return _server.NextResponse.json({
        error: transitionValidation.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[11][1]++;
    }
    // Preparar datos de actualización
    const updateData =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[61]++, {
      status: newStatus,
      updated_at: new Date().toISOString()
    });
    // Agregar campos adicionales según el estado
    /* istanbul ignore next */
    cov_6rdeds0b9().s[62]++;
    if (tracking_number) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[12][0]++;
      cov_6rdeds0b9().s[63]++;
      updateData.tracking_number = tracking_number;
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[12][1]++;
    }
    cov_6rdeds0b9().s[64]++;
    if (carrier) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[13][0]++;
      cov_6rdeds0b9().s[65]++;
      updateData.carrier = carrier;
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[13][1]++;
    }
    cov_6rdeds0b9().s[66]++;
    if (estimated_delivery) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[14][0]++;
      cov_6rdeds0b9().s[67]++;
      updateData.estimated_delivery = estimated_delivery;
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[14][1]++;
    }
    // Actualizar estado de pago automáticamente en ciertos casos
    cov_6rdeds0b9().s[68]++;
    if (newStatus === 'delivered') {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[15][0]++;
      cov_6rdeds0b9().s[69]++;
      updateData.payment_status = 'paid';
    } else {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[15][1]++;
      cov_6rdeds0b9().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_6rdeds0b9().b[17][0]++, newStatus === 'cancelled') ||
      /* istanbul ignore next */
      (cov_6rdeds0b9().b[17][1]++, newStatus === 'refunded')) {
        /* istanbul ignore next */
        cov_6rdeds0b9().b[16][0]++;
        cov_6rdeds0b9().s[71]++;
        updateData.payment_status = 'refunded';
      } else
      /* istanbul ignore next */
      {
        cov_6rdeds0b9().b[16][1]++;
      }
    }
    // Actualizar orden
    const {
      data: updatedOrder,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[72]++, await _supabase.supabaseAdmin.from('orders').update(updateData).eq('id', orderId).select().single());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[73]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[18][0]++;
      cov_6rdeds0b9().s[74]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error al actualizar estado de orden', {
        updateError,
        orderId
      });
      /* istanbul ignore next */
      cov_6rdeds0b9().s[75]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar estado de orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[18][1]++;
    }
    // Registrar en historial de estados
    cov_6rdeds0b9().s[76]++;
    try {
      /* istanbul ignore next */
      cov_6rdeds0b9().s[77]++;
      await _supabase.supabaseAdmin.from('order_status_history').insert({
        order_id: orderId,
        previous_status: currentOrder.status,
        new_status: newStatus,
        changed_by: authResult.user.id,
        reason: reason,
        metadata: JSON.stringify({
          tracking_number,
          carrier,
          estimated_delivery,
          notify_customer
        })
      });
    } catch (historyError) {
      /* istanbul ignore next */
      cov_6rdeds0b9().s[78]++;
      // Si la tabla no existe, continuar sin registrar historial
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'No se pudo registrar historial de estado', {
        historyError
      });
    }
    // Agregar nota interna sobre el cambio
    /* istanbul ignore next */
    cov_6rdeds0b9().s[79]++;
    try {
      /* istanbul ignore next */
      cov_6rdeds0b9().s[80]++;
      await _supabase.supabaseAdmin.from('order_notes').insert({
        order_id: orderId,
        admin_id: authResult.user.id,
        note_type: 'internal',
        content: `Estado cambiado de "${statusDescriptions[currentOrder.status]}" a "${statusDescriptions[newStatus]}". Razón: ${reason}`,
        is_visible_to_customer: false
      });
    } catch (noteError) {
      /* istanbul ignore next */
      cov_6rdeds0b9().s[81]++;
      // Si la tabla no existe, continuar sin agregar nota
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'No se pudo agregar nota de cambio de estado', {
        noteError
      });
    }
    // TODO: Enviar notificación al cliente si notify_customer es true
    /* istanbul ignore next */
    cov_6rdeds0b9().s[82]++;
    if (notify_customer) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[19][0]++;
      cov_6rdeds0b9().s[83]++;
      _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.NOTIFICATION, 'Notificación de cambio de estado pendiente', {
        orderId,
        customerEmail: currentOrder.user_profiles?.email,
        newStatus,
        orderNumber: currentOrder.order_number
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[19][1]++;
    }
    // Métricas de performance
    const responseTime =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[84]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[85]++;
    await _metrics.metricsCollector.recordRequest('admin-order-status-change', 'POST', 200, responseTime);
    const response =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[86]++, {
      data: {
        order: updatedOrder,
        previousStatus: currentOrder.status,
        newStatus,
        statusDescription: statusDescriptions[newStatus]
      },
      success: true,
      error: null
    });
    const nextResponse =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[87]++, _server.NextResponse.json(response));
    /* istanbul ignore next */
    cov_6rdeds0b9().s[88]++;
    (0, _ratelimiter.addRateLimitHeaders)(nextResponse, rateLimitResult);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[89]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Estado de orden cambiado exitosamente', {
      orderId,
      previousStatus: currentOrder.status,
      newStatus,
      reason,
      adminId: authResult.user.id,
      responseTime
    });
    /* istanbul ignore next */
    cov_6rdeds0b9().s[90]++;
    return nextResponse;
  } catch (error) {
    const responseTime =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[91]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[92]++;
    await _metrics.metricsCollector.recordRequest('admin-order-status-change', 'POST', 500, responseTime);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[93]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en POST /api/admin/orders/[id]/status', {
      error,
      orderId: params.id
    });
    /* istanbul ignore next */
    cov_6rdeds0b9().s[94]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6rdeds0b9().f[6]++;
  const startTime =
  /* istanbul ignore next */
  (cov_6rdeds0b9().s[95]++, Date.now());
  /* istanbul ignore next */
  cov_6rdeds0b9().s[96]++;
  try {
    // Validar autenticación admin
    const authResult =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[97]++, await validateAdminAuth());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[98]++;
    if ('error' in authResult) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[20][0]++;
      cov_6rdeds0b9().s[99]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status: authResult.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[20][1]++;
    }
    const orderId =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[100]++, params.id);
    // Obtener estado actual de la orden
    const {
      data: order,
      error
    } =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[101]++, await _supabase.supabaseAdmin.from('orders').select('status').eq('id', orderId).single());
    /* istanbul ignore next */
    cov_6rdeds0b9().s[102]++;
    if (error) {
      /* istanbul ignore next */
      cov_6rdeds0b9().b[21][0]++;
      cov_6rdeds0b9().s[103]++;
      if (error.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_6rdeds0b9().b[22][0]++;
        cov_6rdeds0b9().s[104]++;
        return _server.NextResponse.json({
          error: 'Orden no encontrada'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_6rdeds0b9().b[22][1]++;
      }
      cov_6rdeds0b9().s[105]++;
      return _server.NextResponse.json({
        error: 'Error al obtener orden'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_6rdeds0b9().b[21][1]++;
    }
    const currentStatus =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[106]++, order.status);
    const availableTransitions =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[107]++,
    /* istanbul ignore next */
    (cov_6rdeds0b9().b[23][0]++, stateTransitions[currentStatus]) ||
    /* istanbul ignore next */
    (cov_6rdeds0b9().b[23][1]++, []));
    const response =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[108]++, {
      data: {
        currentStatus,
        currentStatusDescription: statusDescriptions[currentStatus],
        availableTransitions: availableTransitions.map(status => {
          /* istanbul ignore next */
          cov_6rdeds0b9().f[7]++;
          cov_6rdeds0b9().s[109]++;
          return {
            status,
            description: statusDescriptions[status]
          };
        })
      },
      success: true,
      error: null
    });
    // Métricas de performance
    const responseTime =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[110]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[111]++;
    _metrics.metricsCollector.recordApiCall('admin-order-status-options', responseTime, 200);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[112]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    const responseTime =
    /* istanbul ignore next */
    (cov_6rdeds0b9().s[113]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[114]++;
    _metrics.metricsCollector.recordApiCall('admin-order-status-options', responseTime, 500);
    /* istanbul ignore next */
    cov_6rdeds0b9().s[115]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Error en GET /api/admin/orders/[id]/status', {
      error,
      orderId: params.id
    });
    /* istanbul ignore next */
    cov_6rdeds0b9().s[116]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,