{"version":3,"names":["cov_262mwjmmmz","actualCoverage","s","useGeolocation","DELIVERY_ZONES","id","name","available","coordinates","lat","lng","radius","calculateDistance","lat1","lng1","lat2","lng2","f","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","detectNearestZone","userLat","userLng","nearestZone","minDistance","Infinity","zone","b","distance","console","log","toFixed","fallbackZone","find","result","state","setState","_react","useState","location","isLoading","error","permissionStatus","detectedZone","requestLocation","useCallback","navigator","geolocation","prev","newState","getCurrentPositionPromise","Promise","resolve","reject","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","then","position","latitude","longitude","accuracy","coords","setTimeout","catch","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","useEffect","permissions","query","getAvailableZones","selectZone","zoneId","z","testLocation","deliveryZones"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useGeolocation.ts"],"sourcesContent":["/**\r\n * Hook para geolocalizaci√≥n autom√°tica y detecci√≥n de zona de entrega\r\n * Detecta la ubicaci√≥n del usuario y determina la zona de entrega m√°s cercana\r\n */\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nexport interface DeliveryZone {\r\n  id: string;\r\n  name: string;\r\n  available: boolean;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  radius?: number; // Radio en km\r\n}\r\n\r\nexport interface GeolocationState {\r\n  location: {\r\n    lat: number;\r\n    lng: number;\r\n  } | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  permissionStatus: 'granted' | 'denied' | 'prompt' | 'unknown';\r\n  detectedZone: DeliveryZone | null;\r\n}\r\n\r\n// Zonas de entrega con coordenadas aproximadas\r\nconst DELIVERY_ZONES: DeliveryZone[] = [\r\n  {\r\n    id: \"cordoba-capital\",\r\n    name: \"C√≥rdoba Capital\",\r\n    available: true,\r\n    coordinates: { lat: -31.4201, lng: -64.1888 },\r\n    radius: 15\r\n  },\r\n  {\r\n    id: \"cordoba-interior\",\r\n    name: \"Interior de C√≥rdoba\",\r\n    available: true,\r\n    coordinates: { lat: -31.4201, lng: -64.1888 },\r\n    radius: 100\r\n  },\r\n  {\r\n    id: \"buenos-aires\",\r\n    name: \"Buenos Aires\",\r\n    available: false,\r\n    coordinates: { lat: -34.6118, lng: -58.3960 },\r\n    radius: 50\r\n  },\r\n  {\r\n    id: \"rosario\",\r\n    name: \"Rosario\",\r\n    available: false,\r\n    coordinates: { lat: -32.9442, lng: -60.6505 },\r\n    radius: 30\r\n  },\r\n];\r\n\r\n// Funci√≥n para calcular distancia entre dos puntos (f√≥rmula de Haversine)\r\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n  const R = 6371; // Radio de la Tierra en km\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\n// Funci√≥n para detectar la zona m√°s cercana\r\nfunction detectNearestZone(userLat: number, userLng: number): DeliveryZone | null {\r\n\r\n  let nearestZone: DeliveryZone | null = null;\r\n  let minDistance = Infinity;\r\n\r\n  for (const zone of DELIVERY_ZONES) {\r\n\r\n    if (zone.coordinates) {\r\n      const distance = calculateDistance(\r\n        userLat,\r\n        userLng,\r\n        zone.coordinates.lat,\r\n        zone.coordinates.lng\r\n      );\r\n\r\n      console.log(`üó∫Ô∏è Distance to ${zone.name}: ${distance.toFixed(2)}km (radius: ${zone.radius}km)`);\r\n\r\n      // Verificar si est√° dentro del radio de la zona\r\n      if (zone.radius && distance <= zone.radius && distance < minDistance) {\r\n        nearestZone = zone;\r\n        minDistance = distance;\r\n      } else {\r\n      }\r\n    } else {\r\n    }\r\n  }\r\n\r\n  // Si no encuentra una zona espec√≠fica, usar C√≥rdoba Interior como fallback\r\n  const fallbackZone = DELIVERY_ZONES.find(zone => zone.id === \"cordoba-interior\");\r\n  const result = nearestZone || fallbackZone || null;\r\n\r\n\r\n  return result;\r\n}\r\n\r\nexport const useGeolocation = () => {\r\n  const [state, setState] = useState<GeolocationState>({\r\n    location: null,\r\n    isLoading: false,\r\n    error: null,\r\n    permissionStatus: 'unknown',\r\n    detectedZone: null\r\n  });\r\n\r\n  // Funci√≥n para solicitar geolocalizaci√≥n\r\n  const requestLocation = useCallback(() => {\r\n\r\n    if (!navigator.geolocation) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        error: 'Geolocalizaci√≥n no soportada por este navegador',\r\n        permissionStatus: 'denied'\r\n      }));\r\n      return;\r\n    }\r\n\r\n\r\n    setState(prev => {\r\n      const newState = { ...prev, isLoading: true, error: null };\r\n      return newState;\r\n    });\r\n\r\n    // Usar Promise para mejor manejo de errores\r\n    const getCurrentPositionPromise = () => {\r\n      return new Promise<GeolocationPosition>((resolve, reject) => {\r\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\r\n          enableHighAccuracy: false,\r\n          timeout: 30000,\r\n          maximumAge: 0\r\n        });\r\n      });\r\n    };\r\n\r\n    // Ejecutar con async/await para mejor control\r\n    getCurrentPositionPromise()\r\n      .then((position) => {\r\n\r\n        const { latitude, longitude, accuracy } = position.coords;\r\n\r\n        const detectedZone = detectNearestZone(latitude, longitude);\r\n\r\n\r\n        // Usar setTimeout para asegurar que el setState se ejecute en el pr√≥ximo tick\r\n        setTimeout(() => {\r\n          setState(prev => {\r\n            const newState = {\r\n              ...prev,\r\n              location: { lat: latitude, lng: longitude },\r\n              detectedZone,\r\n              isLoading: false,\r\n              permissionStatus: 'granted' as const,\r\n              error: null\r\n            };\r\n            return newState;\r\n          });\r\n        }, 0);\r\n      })\r\n      .catch((error) => {\r\n        let errorMessage = 'Error al obtener ubicaci√≥n';\r\n        let permissionStatus: 'denied' | 'unknown' = 'unknown';\r\n\r\n        switch (error.code) {\r\n          case error.PERMISSION_DENIED:\r\n            errorMessage = 'Permisos de ubicaci√≥n denegados';\r\n            permissionStatus = 'denied';\r\n            break;\r\n          case error.POSITION_UNAVAILABLE:\r\n            errorMessage = 'Ubicaci√≥n no disponible';\r\n            break;\r\n          case error.TIMEOUT:\r\n            errorMessage = 'Tiempo de espera agotado';\r\n            break;\r\n        }\r\n\r\n        // Tambi√©n usar setTimeout para el manejo de errores\r\n        setTimeout(() => {\r\n          setState(prev => ({\r\n            ...prev,\r\n            error: errorMessage,\r\n            isLoading: false,\r\n            permissionStatus\r\n          }));\r\n        }, 0);\r\n      });\r\n  }, []);\r\n\r\n  // Verificar permisos al montar el componente\r\n  useEffect(() => {\r\n\r\n    if ('permissions' in navigator) {\r\n      navigator.permissions.query({ name: 'geolocation' }).then((result) => {\r\n        setState(prev => ({ ...prev, permissionStatus: result.state as any }));\r\n\r\n        // Si ya tiene permisos, solicitar ubicaci√≥n autom√°ticamente\r\n        if (result.state === 'granted') {\r\n          // No solicitar autom√°ticamente para evitar bucles infinitos\r\n        } else if (result.state === 'prompt') {\r\n          // No solicitar autom√°ticamente si es 'prompt' para evitar popup inesperado\r\n        } else {\r\n        }\r\n      }).catch((error) => {\r\n        setState(prev => ({ ...prev, permissionStatus: 'unknown' }));\r\n      });\r\n    } else {\r\n      setState(prev => ({ ...prev, permissionStatus: 'unknown' }));\r\n    }\r\n  }, []); // Sin dependencias para evitar bucles\r\n\r\n  // Funci√≥n para obtener todas las zonas disponibles\r\n  const getAvailableZones = useCallback(() => {\r\n    return DELIVERY_ZONES;\r\n  }, []);\r\n\r\n  // Funci√≥n para seleccionar zona manualmente\r\n  const selectZone = useCallback((zoneId: string) => {\r\n    const zone = DELIVERY_ZONES.find(z => z.id === zoneId);\r\n    if (zone) {\r\n      setState(prev => ({ ...prev, detectedZone: zone }));\r\n    }\r\n  }, []);\r\n\r\n  // Funci√≥n de test para simular geolocalizaci√≥n exitosa\r\n  const testLocation = useCallback((lat: number = -31.4201, lng: number = -64.1888) => {\r\n\r\n    const detectedZone = detectNearestZone(lat, lng);\r\n\r\n    setState(prev => {\r\n      const newState = {\r\n        ...prev,\r\n        location: { lat, lng },\r\n        detectedZone,\r\n        isLoading: false,\r\n        permissionStatus: 'granted' as const,\r\n        error: null\r\n      };\r\n      return newState;\r\n    });\r\n\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    requestLocation,\r\n    getAvailableZones,\r\n    selectZone,\r\n    deliveryZones: DELIVERY_ZONES,\r\n    testLocation // Funci√≥n de test para debugging\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}