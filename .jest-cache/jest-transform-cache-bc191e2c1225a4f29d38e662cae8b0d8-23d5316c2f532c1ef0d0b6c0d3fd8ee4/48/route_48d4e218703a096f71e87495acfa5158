2889fb8c047d29025ab2265e3526a001
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_64yuspxp6() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test\\unified\\route.ts";
  var hash = "5b85fae89b5ecd2266b362df58ea234b9ab4c082";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test\\unified\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "9": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 47
        }
      },
      "10": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "11": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "12": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "13": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "14": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 52
        }
      },
      "15": {
        start: {
          line: 31,
          column: 18
        },
        end: {
          line: 31,
          column: 66
        }
      },
      "16": {
        start: {
          line: 32,
          column: 19
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "17": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 81
        }
      },
      "18": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 67
        }
      },
      "19": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "20": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 24
        }
      },
      "21": {
        start: {
          line: 47,
          column: 18
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "22": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "23": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 68,
          column: 2
        }
      },
      "24": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 97,
          column: 2
        }
      },
      "25": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 132,
          column: 1
        }
      },
      "26": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "27": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 138,
          column: 64
        }
      },
      "28": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 139,
          column: 69
        }
      },
      "29": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "30": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 80
        }
      },
      "31": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 143,
          column: 80
        }
      },
      "32": {
        start: {
          line: 145,
          column: 57
        },
        end: {
          line: 145,
          column: 110
        }
      },
      "33": {
        start: {
          line: 146,
          column: 61
        },
        end: {
          line: 146,
          column: 116
        }
      },
      "34": {
        start: {
          line: 147,
          column: 51
        },
        end: {
          line: 147,
          column: 109
        }
      },
      "35": {
        start: {
          line: 148,
          column: 24
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "36": {
        start: {
          line: 159,
          column: 26
        },
        end: {
          line: 159,
          column: 70
        }
      },
      "37": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "38": {
        start: {
          line: 167,
          column: 70
        },
        end: {
          line: 167,
          column: 72
        }
      },
      "39": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "40": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "41": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "42": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "43": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "44": {
        start: {
          line: 197,
          column: 42
        },
        end: {
          line: 197,
          column: 196
        }
      },
      "45": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 202,
          column: 14
        }
      },
      "46": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "47": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "48": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 280,
          column: 5
        }
      },
      "49": {
        start: {
          line: 219,
          column: 123
        },
        end: {
          line: 219,
          column: 129
        }
      },
      "50": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "51": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 78
        }
      },
      "52": {
        start: {
          line: 223,
          column: 31
        },
        end: {
          line: 223,
          column: 94
        }
      },
      "53": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "54": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "55": {
        start: {
          line: 230,
          column: 21
        },
        end: {
          line: 235,
          column: 10
        }
      },
      "56": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "57": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 239,
          column: 72
        }
      },
      "58": {
        start: {
          line: 240,
          column: 25
        },
        end: {
          line: 240,
          column: 55
        }
      },
      "59": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 241,
          column: 69
        }
      },
      "60": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "61": {
        start: {
          line: 243,
          column: 28
        },
        end: {
          line: 243,
          column: 56
        }
      },
      "62": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "63": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 251,
          column: 15
        }
      },
      "64": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 30
        }
      },
      "65": {
        start: {
          line: 254,
          column: 22
        },
        end: {
          line: 254,
          column: 60
        }
      },
      "66": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 273,
          column: 10
        }
      },
      "67": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "68": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 357,
          column: 5
        }
      },
      "69": {
        start: {
          line: 286,
          column: 54
        },
        end: {
          line: 286,
          column: 60
        }
      },
      "70": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 73
        }
      },
      "71": {
        start: {
          line: 287,
          column: 53
        },
        end: {
          line: 287,
          column: 72
        }
      },
      "72": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "73": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 130
        }
      },
      "74": {
        start: {
          line: 291,
          column: 24
        },
        end: {
          line: 291,
          column: 26
        }
      },
      "75": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 292,
          column: 36
        }
      },
      "76": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "77": {
        start: {
          line: 294,
          column: 26
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "78": {
        start: {
          line: 295,
          column: 35
        },
        end: {
          line: 295,
          column: 45
        }
      },
      "79": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "80": {
        start: {
          line: 297,
          column: 43
        },
        end: {
          line: 305,
          column: 18
        }
      },
      "81": {
        start: {
          line: 306,
          column: 38
        },
        end: {
          line: 306,
          column: 65
        }
      },
      "82": {
        start: {
          line: 307,
          column: 31
        },
        end: {
          line: 307,
          column: 62
        }
      },
      "83": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 314,
          column: 19
        }
      },
      "84": {
        start: {
          line: 316,
          column: 38
        },
        end: {
          line: 316,
          column: 65
        }
      },
      "85": {
        start: {
          line: 317,
          column: 31
        },
        end: {
          line: 317,
          column: 94
        }
      },
      "86": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 325,
          column: 19
        }
      },
      "87": {
        start: {
          line: 328,
          column: 30
        },
        end: {
          line: 328,
          column: 52
        }
      },
      "88": {
        start: {
          line: 329,
          column: 24
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "89": {
        start: {
          line: 331,
          column: 47
        },
        end: {
          line: 331,
          column: 69
        }
      },
      "90": {
        start: {
          line: 332,
          column: 47
        },
        end: {
          line: 332,
          column: 68
        }
      },
      "91": {
        start: {
          line: 333,
          column: 50
        },
        end: {
          line: 333,
          column: 70
        }
      },
      "92": {
        start: {
          line: 334,
          column: 51
        },
        end: {
          line: 334,
          column: 72
        }
      },
      "93": {
        start: {
          line: 335,
          column: 51
        },
        end: {
          line: 335,
          column: 72
        }
      },
      "94": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "95": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 342,
          column: 15
        }
      },
      "96": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 350,
          column: 10
        }
      },
      "97": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 356,
          column: 10
        }
      },
      "98": {
        start: {
          line: 360,
          column: 4
        },
        end: {
          line: 414,
          column: 5
        }
      },
      "99": {
        start: {
          line: 361,
          column: 40
        },
        end: {
          line: 361,
          column: 46
        }
      },
      "100": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "101": {
        start: {
          line: 364,
          column: 30
        },
        end: {
          line: 364,
          column: 90
        }
      },
      "102": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "103": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 74
        }
      },
      "104": {
        start: {
          line: 368,
          column: 36
        },
        end: {
          line: 368,
          column: 102
        }
      },
      "105": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 377,
          column: 14
        }
      },
      "106": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "107": {
        start: {
          line: 381,
          column: 31
        },
        end: {
          line: 381,
          column: 87
        }
      },
      "108": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 391,
          column: 14
        }
      },
      "109": {
        start: {
          line: 386,
          column: 56
        },
        end: {
          line: 389,
          column: 25
        }
      },
      "110": {
        start: {
          line: 388,
          column: 112
        },
        end: {
          line: 388,
          column: 151
        }
      },
      "111": {
        start: {
          line: 394,
          column: 22
        },
        end: {
          line: 394,
          column: 76
        }
      },
      "112": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 80
        }
      },
      "113": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 407,
          column: 10
        }
      },
      "114": {
        start: {
          line: 404,
          column: 52
        },
        end: {
          line: 404,
          column: 61
        }
      },
      "115": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 413,
          column: 10
        }
      },
      "116": {
        start: {
          line: 417,
          column: 4
        },
        end: {
          line: 487,
          column: 5
        }
      },
      "117": {
        start: {
          line: 418,
          column: 59
        },
        end: {
          line: 418,
          column: 65
        }
      },
      "118": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "119": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 63
        }
      },
      "120": {
        start: {
          line: 423,
          column: 28
        },
        end: {
          line: 423,
          column: 51
        }
      },
      "121": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "122": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 434,
          column: 14
        }
      },
      "123": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "124": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 442,
          column: 19
        }
      },
      "125": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 443,
          column: 22
        }
      },
      "126": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 457,
          column: 19
        }
      },
      "127": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 22
        }
      },
      "128": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 464,
          column: 19
        }
      },
      "129": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 22
        }
      },
      "130": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 72
        }
      },
      "131": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "132": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 486,
          column: 10
        }
      },
      "133": {
        start: {
          line: 492,
          column: 4
        },
        end: {
          line: 500,
          column: 6
        }
      },
      "134": {
        start: {
          line: 503,
          column: 4
        },
        end: {
          line: 564,
          column: 5
        }
      },
      "135": {
        start: {
          line: 504,
          column: 33
        },
        end: {
          line: 504,
          column: 92
        }
      },
      "136": {
        start: {
          line: 505,
          column: 31
        },
        end: {
          line: 505,
          column: 80
        }
      },
      "137": {
        start: {
          line: 506,
          column: 22
        },
        end: {
          line: 506,
          column: 24
        }
      },
      "138": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 520,
          column: 9
        }
      },
      "139": {
        start: {
          line: 509,
          column: 32
        },
        end: {
          line: 509,
          column: 81
        }
      },
      "140": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 517,
          column: 15
        }
      },
      "141": {
        start: {
          line: 510,
          column: 49
        },
        end: {
          line: 510,
          column: 71
        }
      },
      "142": {
        start: {
          line: 511,
          column: 35
        },
        end: {
          line: 511,
          column: 49
        }
      },
      "143": {
        start: {
          line: 512,
          column: 35
        },
        end: {
          line: 512,
          column: 49
        }
      },
      "144": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 515,
          column: 17
        }
      },
      "145": {
        start: {
          line: 514,
          column: 20
        },
        end: {
          line: 514,
          column: 77
        }
      },
      "146": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 42
        }
      },
      "147": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "148": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 541,
          column: 13
        }
      },
      "149": {
        start: {
          line: 524,
          column: 34
        },
        end: {
          line: 524,
          column: 81
        }
      },
      "150": {
        start: {
          line: 525,
          column: 34
        },
        end: {
          line: 525,
          column: 82
        }
      },
      "151": {
        start: {
          line: 525,
          column: 59
        },
        end: {
          line: 525,
          column: 81
        }
      },
      "152": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 538,
          column: 17
        }
      },
      "153": {
        start: {
          line: 528,
          column: 20
        },
        end: {
          line: 530,
          column: 23
        }
      },
      "154": {
        start: {
          line: 532,
          column: 20
        },
        end: {
          line: 536,
          column: 21
        }
      },
      "155": {
        start: {
          line: 533,
          column: 43
        },
        end: {
          line: 533,
          column: 83
        }
      },
      "156": {
        start: {
          line: 534,
          column: 41
        },
        end: {
          line: 534,
          column: 83
        }
      },
      "157": {
        start: {
          line: 535,
          column: 24
        },
        end: {
          line: 535,
          column: 79
        }
      },
      "158": {
        start: {
          line: 537,
          column: 20
        },
        end: {
          line: 537,
          column: 40
        }
      },
      "159": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 557,
          column: 10
        }
      },
      "160": {
        start: {
          line: 546,
          column: 50
        },
        end: {
          line: 550,
          column: 21
        }
      },
      "161": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 563,
          column: 10
        }
      },
      "162": {
        start: {
          line: 567,
          column: 4
        },
        end: {
          line: 595,
          column: 5
        }
      },
      "163": {
        start: {
          line: 568,
          column: 27
        },
        end: {
          line: 568,
          column: 33
        }
      },
      "164": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "165": {
        start: {
          line: 570,
          column: 31
        },
        end: {
          line: 570,
          column: 82
        }
      },
      "166": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 573,
          column: 13
        }
      },
      "167": {
        start: {
          line: 572,
          column: 16
        },
        end: {
          line: 572,
          column: 86
        }
      },
      "168": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 45
        }
      },
      "169": {
        start: {
          line: 577,
          column: 38
        },
        end: {
          line: 577,
          column: 187
        }
      },
      "170": {
        start: {
          line: 578,
          column: 8
        },
        end: {
          line: 588,
          column: 10
        }
      },
      "171": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 594,
          column: 10
        }
      },
      "172": {
        start: {
          line: 601,
          column: 19
        },
        end: {
          line: 607,
          column: 5
        }
      },
      "173": {
        start: {
          line: 608,
          column: 4
        },
        end: {
          line: 629,
          column: 5
        }
      },
      "174": {
        start: {
          line: 610,
          column: 26
        },
        end: {
          line: 610,
          column: 94
        }
      },
      "175": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 616,
          column: 9
        }
      },
      "176": {
        start: {
          line: 612,
          column: 12
        },
        end: {
          line: 612,
          column: 51
        }
      },
      "177": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 613,
          column: 51
        }
      },
      "178": {
        start: {
          line: 614,
          column: 12
        },
        end: {
          line: 614,
          column: 50
        }
      },
      "179": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 615,
          column: 26
        }
      },
      "180": {
        start: {
          line: 618,
          column: 28
        },
        end: {
          line: 618,
          column: 57
        }
      },
      "181": {
        start: {
          line: 619,
          column: 28
        },
        end: {
          line: 619,
          column: 57
        }
      },
      "182": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 622,
          column: 9
        }
      },
      "183": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 621,
          column: 53
        }
      },
      "184": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 625,
          column: 9
        }
      },
      "185": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 624,
          column: 53
        }
      },
      "186": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 626,
          column: 53
        }
      },
      "187": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 69
        }
      },
      "188": {
        start: {
          line: 630,
          column: 4
        },
        end: {
          line: 630,
          column: 18
        }
      },
      "189": {
        start: {
          line: 633,
          column: 4
        },
        end: {
          line: 671,
          column: 5
        }
      },
      "190": {
        start: {
          line: 634,
          column: 27
        },
        end: {
          line: 634,
          column: 86
        }
      },
      "191": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 637,
          column: 11
        }
      },
      "192": {
        start: {
          line: 638,
          column: 23
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "193": {
        start: {
          line: 643,
          column: 49
        },
        end: {
          line: 652,
          column: 17
        }
      },
      "194": {
        start: {
          line: 660,
          column: 25
        },
        end: {
          line: 660,
          column: 68
        }
      },
      "195": {
        start: {
          line: 661,
          column: 25
        },
        end: {
          line: 661,
          column: 65
        }
      },
      "196": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 662,
          column: 85
        }
      },
      "197": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 667,
          column: 10
        }
      },
      "198": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 669,
          column: 57
        }
      },
      "199": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 670,
          column: 20
        }
      },
      "200": {
        start: {
          line: 674,
          column: 4
        },
        end: {
          line: 785,
          column: 5
        }
      },
      "201": {
        start: {
          line: 675,
          column: 33
        },
        end: {
          line: 675,
          column: 53
        }
      },
      "202": {
        start: {
          line: 676,
          column: 26
        },
        end: {
          line: 681,
          column: 9
        }
      },
      "203": {
        start: {
          line: 682,
          column: 23
        },
        end: {
          line: 682,
          column: 63
        }
      },
      "204": {
        start: {
          line: 683,
          column: 26
        },
        end: {
          line: 683,
          column: 50
        }
      },
      "205": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 684,
          column: 68
        }
      },
      "206": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 752,
          column: 9
        }
      },
      "207": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 688,
          column: 63
        }
      },
      "208": {
        start: {
          line: 689,
          column: 16
        },
        end: {
          line: 689,
          column: 22
        }
      },
      "209": {
        start: {
          line: 691,
          column: 16
        },
        end: {
          line: 691,
          column: 66
        }
      },
      "210": {
        start: {
          line: 692,
          column: 16
        },
        end: {
          line: 692,
          column: 22
        }
      },
      "211": {
        start: {
          line: 694,
          column: 16
        },
        end: {
          line: 694,
          column: 48
        }
      },
      "212": {
        start: {
          line: 695,
          column: 16
        },
        end: {
          line: 695,
          column: 22
        }
      },
      "213": {
        start: {
          line: 697,
          column: 16
        },
        end: {
          line: 697,
          column: 45
        }
      },
      "214": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 22
        }
      },
      "215": {
        start: {
          line: 700,
          column: 16
        },
        end: {
          line: 700,
          column: 72
        }
      },
      "216": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 22
        }
      },
      "217": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 703,
          column: 45
        }
      },
      "218": {
        start: {
          line: 704,
          column: 16
        },
        end: {
          line: 704,
          column: 22
        }
      },
      "219": {
        start: {
          line: 707,
          column: 32
        },
        end: {
          line: 712,
          column: 17
        }
      },
      "220": {
        start: {
          line: 713,
          column: 32
        },
        end: {
          line: 713,
          column: 34
        }
      },
      "221": {
        start: {
          line: 714,
          column: 16
        },
        end: {
          line: 737,
          column: 17
        }
      },
      "222": {
        start: {
          line: 715,
          column: 20
        },
        end: {
          line: 736,
          column: 21
        }
      },
      "223": {
        start: {
          line: 716,
          column: 24
        },
        end: {
          line: 729,
          column: 25
        }
      },
      "224": {
        start: {
          line: 718,
          column: 32
        },
        end: {
          line: 718,
          column: 88
        }
      },
      "225": {
        start: {
          line: 719,
          column: 32
        },
        end: {
          line: 719,
          column: 38
        }
      },
      "226": {
        start: {
          line: 721,
          column: 32
        },
        end: {
          line: 721,
          column: 91
        }
      },
      "227": {
        start: {
          line: 722,
          column: 32
        },
        end: {
          line: 722,
          column: 38
        }
      },
      "228": {
        start: {
          line: 724,
          column: 32
        },
        end: {
          line: 724,
          column: 73
        }
      },
      "229": {
        start: {
          line: 725,
          column: 32
        },
        end: {
          line: 725,
          column: 38
        }
      },
      "230": {
        start: {
          line: 727,
          column: 32
        },
        end: {
          line: 727,
          column: 70
        }
      },
      "231": {
        start: {
          line: 728,
          column: 32
        },
        end: {
          line: 728,
          column: 38
        }
      },
      "232": {
        start: {
          line: 731,
          column: 24
        },
        end: {
          line: 735,
          column: 26
        }
      },
      "233": {
        start: {
          line: 738,
          column: 32
        },
        end: {
          line: 743,
          column: 17
        }
      },
      "234": {
        start: {
          line: 740,
          column: 70
        },
        end: {
          line: 740,
          column: 92
        }
      },
      "235": {
        start: {
          line: 741,
          column: 70
        },
        end: {
          line: 741,
          column: 92
        }
      },
      "236": {
        start: {
          line: 742,
          column: 69
        },
        end: {
          line: 742,
          column: 90
        }
      },
      "237": {
        start: {
          line: 744,
          column: 16
        },
        end: {
          line: 748,
          column: 18
        }
      },
      "238": {
        start: {
          line: 749,
          column: 16
        },
        end: {
          line: 749,
          column: 22
        }
      },
      "239": {
        start: {
          line: 751,
          column: 16
        },
        end: {
          line: 751,
          column: 73
        }
      },
      "240": {
        start: {
          line: 753,
          column: 8
        },
        end: {
          line: 768,
          column: 11
        }
      },
      "241": {
        start: {
          line: 770,
          column: 8
        },
        end: {
          line: 770,
          column: 61
        }
      },
      "242": {
        start: {
          line: 771,
          column: 8
        },
        end: {
          line: 784,
          column: 11
        }
      },
      "243": {
        start: {
          line: 788,
          column: 4
        },
        end: {
          line: 845,
          column: 5
        }
      },
      "244": {
        start: {
          line: 789,
          column: 21
        },
        end: {
          line: 789,
          column: 41
        }
      },
      "245": {
        start: {
          line: 790,
          column: 40
        },
        end: {
          line: 790,
          column: 73
        }
      },
      "246": {
        start: {
          line: 791,
          column: 26
        },
        end: {
          line: 791,
          column: 50
        }
      },
      "247": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 792,
          column: 62
        }
      },
      "248": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 815,
          column: 9
        }
      },
      "249": {
        start: {
          line: 796,
          column: 16
        },
        end: {
          line: 796,
          column: 55
        }
      },
      "250": {
        start: {
          line: 797,
          column: 16
        },
        end: {
          line: 797,
          column: 22
        }
      },
      "251": {
        start: {
          line: 799,
          column: 16
        },
        end: {
          line: 799,
          column: 53
        }
      },
      "252": {
        start: {
          line: 800,
          column: 16
        },
        end: {
          line: 800,
          column: 22
        }
      },
      "253": {
        start: {
          line: 802,
          column: 16
        },
        end: {
          line: 802,
          column: 49
        }
      },
      "254": {
        start: {
          line: 803,
          column: 16
        },
        end: {
          line: 803,
          column: 22
        }
      },
      "255": {
        start: {
          line: 805,
          column: 16
        },
        end: {
          line: 805,
          column: 49
        }
      },
      "256": {
        start: {
          line: 806,
          column: 16
        },
        end: {
          line: 806,
          column: 22
        }
      },
      "257": {
        start: {
          line: 808,
          column: 16
        },
        end: {
          line: 808,
          column: 55
        }
      },
      "258": {
        start: {
          line: 809,
          column: 16
        },
        end: {
          line: 809,
          column: 22
        }
      },
      "259": {
        start: {
          line: 811,
          column: 16
        },
        end: {
          line: 811,
          column: 52
        }
      },
      "260": {
        start: {
          line: 812,
          column: 16
        },
        end: {
          line: 812,
          column: 22
        }
      },
      "261": {
        start: {
          line: 814,
          column: 16
        },
        end: {
          line: 814,
          column: 71
        }
      },
      "262": {
        start: {
          line: 816,
          column: 8
        },
        end: {
          line: 828,
          column: 11
        }
      },
      "263": {
        start: {
          line: 830,
          column: 8
        },
        end: {
          line: 830,
          column: 66
        }
      },
      "264": {
        start: {
          line: 831,
          column: 8
        },
        end: {
          line: 844,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 33
          }
        },
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 35
      },
      "5": {
        name: "testConnection",
        decl: {
          start: {
            line: 136,
            column: 15
          },
          end: {
            line: 136,
            column: 29
          }
        },
        loc: {
          start: {
            line: 136,
            column: 48
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 167,
            column: 65
          },
          end: {
            line: 167,
            column: 66
          }
        },
        loc: {
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 72
          }
        },
        line: 167
      },
      "7": {
        name: "testAuth",
        decl: {
          start: {
            line: 186,
            column: 15
          },
          end: {
            line: 186,
            column: 23
          }
        },
        loc: {
          start: {
            line: 186,
            column: 51
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 186
      },
      "8": {
        name: "testScreenshots",
        decl: {
          start: {
            line: 217,
            column: 15
          },
          end: {
            line: 217,
            column: 30
          }
        },
        loc: {
          start: {
            line: 217,
            column: 39
          },
          end: {
            line: 281,
            column: 1
          }
        },
        line: 217
      },
      "9": {
        name: "testExecution",
        decl: {
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 28
          }
        },
        loc: {
          start: {
            line: 282,
            column: 37
          },
          end: {
            line: 358,
            column: 1
          }
        },
        line: 282
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 287,
            column: 44
          },
          end: {
            line: 287,
            column: 45
          }
        },
        loc: {
          start: {
            line: 287,
            column: 53
          },
          end: {
            line: 287,
            column: 72
          }
        },
        line: 287
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 331,
            column: 42
          },
          end: {
            line: 331,
            column: 43
          }
        },
        loc: {
          start: {
            line: 331,
            column: 47
          },
          end: {
            line: 331,
            column: 69
          }
        },
        line: 331
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 332,
            column: 42
          },
          end: {
            line: 332,
            column: 43
          }
        },
        loc: {
          start: {
            line: 332,
            column: 47
          },
          end: {
            line: 332,
            column: 68
          }
        },
        line: 332
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 333,
            column: 40
          },
          end: {
            line: 333,
            column: 41
          }
        },
        loc: {
          start: {
            line: 333,
            column: 50
          },
          end: {
            line: 333,
            column: 70
          }
        },
        line: 333
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 334,
            column: 41
          },
          end: {
            line: 334,
            column: 42
          }
        },
        loc: {
          start: {
            line: 334,
            column: 51
          },
          end: {
            line: 334,
            column: 72
          }
        },
        line: 334
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 335,
            column: 41
          },
          end: {
            line: 335,
            column: 42
          }
        },
        loc: {
          start: {
            line: 335,
            column: 51
          },
          end: {
            line: 335,
            column: 72
          }
        },
        line: 335
      },
      "16": {
        name: "testFlows",
        decl: {
          start: {
            line: 359,
            column: 15
          },
          end: {
            line: 359,
            column: 24
          }
        },
        loc: {
          start: {
            line: 359,
            column: 33
          },
          end: {
            line: 415,
            column: 1
          }
        },
        line: 359
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 386,
            column: 47
          },
          end: {
            line: 386,
            column: 48
          }
        },
        loc: {
          start: {
            line: 386,
            column: 56
          },
          end: {
            line: 389,
            column: 25
          }
        },
        line: 386
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 388,
            column: 97
          },
          end: {
            line: 388,
            column: 98
          }
        },
        loc: {
          start: {
            line: 388,
            column: 112
          },
          end: {
            line: 388,
            column: 151
          }
        },
        line: 388
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 404,
            column: 47
          },
          end: {
            line: 404,
            column: 48
          }
        },
        loc: {
          start: {
            line: 404,
            column: 52
          },
          end: {
            line: 404,
            column: 61
          }
        },
        line: 404
      },
      "20": {
        name: "testEmail",
        decl: {
          start: {
            line: 416,
            column: 15
          },
          end: {
            line: 416,
            column: 24
          }
        },
        loc: {
          start: {
            line: 416,
            column: 33
          },
          end: {
            line: 488,
            column: 1
          }
        },
        line: 416
      },
      "21": {
        name: "testMiddleware",
        decl: {
          start: {
            line: 489,
            column: 15
          },
          end: {
            line: 489,
            column: 29
          }
        },
        loc: {
          start: {
            line: 489,
            column: 32
          },
          end: {
            line: 501,
            column: 1
          }
        },
        line: 489
      },
      "22": {
        name: "testReports",
        decl: {
          start: {
            line: 502,
            column: 15
          },
          end: {
            line: 502,
            column: 26
          }
        },
        loc: {
          start: {
            line: 502,
            column: 29
          },
          end: {
            line: 565,
            column: 1
          }
        },
        line: 502
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 510,
            column: 41
          },
          end: {
            line: 510,
            column: 42
          }
        },
        loc: {
          start: {
            line: 510,
            column: 49
          },
          end: {
            line: 510,
            column: 71
          }
        },
        line: 510
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 510,
            column: 78
          },
          end: {
            line: 510,
            column: 79
          }
        },
        loc: {
          start: {
            line: 510,
            column: 86
          },
          end: {
            line: 517,
            column: 13
          }
        },
        line: 510
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 525,
            column: 51
          },
          end: {
            line: 525,
            column: 52
          }
        },
        loc: {
          start: {
            line: 525,
            column: 59
          },
          end: {
            line: 525,
            column: 81
          }
        },
        line: 525
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 546,
            column: 37
          },
          end: {
            line: 546,
            column: 38
          }
        },
        loc: {
          start: {
            line: 546,
            column: 50
          },
          end: {
            line: 550,
            column: 21
          }
        },
        line: 546
      },
      "27": {
        name: "testUserProfile",
        decl: {
          start: {
            line: 566,
            column: 15
          },
          end: {
            line: 566,
            column: 30
          }
        },
        loc: {
          start: {
            line: 566,
            column: 48
          },
          end: {
            line: 596,
            column: 1
          }
        },
        line: 566
      },
      "28": {
        name: "parseTestOutput",
        decl: {
          start: {
            line: 600,
            column: 9
          },
          end: {
            line: 600,
            column: 24
          }
        },
        loc: {
          start: {
            line: 600,
            column: 41
          },
          end: {
            line: 631,
            column: 1
          }
        },
        line: 600
      },
      "29": {
        name: "generateTestReport",
        decl: {
          start: {
            line: 632,
            column: 15
          },
          end: {
            line: 632,
            column: 33
          }
        },
        loc: {
          start: {
            line: 632,
            column: 40
          },
          end: {
            line: 672,
            column: 1
          }
        },
        line: 632
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 643,
            column: 38
          },
          end: {
            line: 643,
            column: 39
          }
        },
        loc: {
          start: {
            line: 643,
            column: 49
          },
          end: {
            line: 652,
            column: 17
          }
        },
        line: 643
      },
      "31": {
        name: "GET",
        decl: {
          start: {
            line: 673,
            column: 15
          },
          end: {
            line: 673,
            column: 18
          }
        },
        loc: {
          start: {
            line: 673,
            column: 28
          },
          end: {
            line: 786,
            column: 1
          }
        },
        line: 673
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 740,
            column: 65
          },
          end: {
            line: 740,
            column: 66
          }
        },
        loc: {
          start: {
            line: 740,
            column: 70
          },
          end: {
            line: 740,
            column: 92
          }
        },
        line: 740
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 741,
            column: 65
          },
          end: {
            line: 741,
            column: 66
          }
        },
        loc: {
          start: {
            line: 741,
            column: 70
          },
          end: {
            line: 741,
            column: 92
          }
        },
        line: 741
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 742,
            column: 64
          },
          end: {
            line: 742,
            column: 65
          }
        },
        loc: {
          start: {
            line: 742,
            column: 69
          },
          end: {
            line: 742,
            column: 90
          }
        },
        line: 742
      },
      "35": {
        name: "POST",
        decl: {
          start: {
            line: 787,
            column: 15
          },
          end: {
            line: 787,
            column: 19
          }
        },
        loc: {
          start: {
            line: 787,
            column: 29
          },
          end: {
            line: 846,
            column: 1
          }
        },
        line: 787
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 35
          },
          end: {
            line: 36,
            column: 38
          }
        }, {
          start: {
            line: 36,
            column: 41
          },
          end: {
            line: 38,
            column: 5
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 14
          }
        }, {
          start: {
            line: 36,
            column: 18
          },
          end: {
            line: 36,
            column: 32
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 136,
            column: 30
          },
          end: {
            line: 136,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 136,
            column: 41
          },
          end: {
            line: 136,
            column: 46
          }
        }],
        line: 136
      },
      "3": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "4": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 24
          }
        }, {
          start: {
            line: 140,
            column: 28
          },
          end: {
            line: 140,
            column: 40
          }
        }],
        line: 140
      },
      "5": {
        loc: {
          start: {
            line: 152,
            column: 18
          },
          end: {
            line: 152,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 18
          },
          end: {
            line: 152,
            column: 32
          }
        }, {
          start: {
            line: 152,
            column: 36
          },
          end: {
            line: 152,
            column: 52
          }
        }],
        line: 152
      },
      "6": {
        loc: {
          start: {
            line: 161,
            column: 20
          },
          end: {
            line: 161,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 32
          },
          end: {
            line: 161,
            column: 41
          }
        }, {
          start: {
            line: 161,
            column: 44
          },
          end: {
            line: 161,
            column: 53
          }
        }],
        line: 161
      },
      "7": {
        loc: {
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 19
          },
          end: {
            line: 169,
            column: 27
          }
        }, {
          start: {
            line: 169,
            column: 31
          },
          end: {
            line: 175,
            column: 17
          }
        }],
        line: 169
      },
      "8": {
        loc: {
          start: {
            line: 186,
            column: 33
          },
          end: {
            line: 186,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 186,
            column: 44
          },
          end: {
            line: 186,
            column: 49
          }
        }],
        line: 186
      },
      "9": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "10": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 195,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 195,
            column: 20
          }
        }, {
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 195,
            column: 41
          }
        }],
        line: 195
      },
      "11": {
        loc: {
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 205,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 44
          },
          end: {
            line: 205,
            column: 53
          }
        }, {
          start: {
            line: 205,
            column: 56
          },
          end: {
            line: 205,
            column: 64
          }
        }],
        line: 205
      },
      "12": {
        loc: {
          start: {
            line: 219,
            column: 31
          },
          end: {
            line: 219,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 219,
            column: 62
          }
        }],
        line: 219
      },
      "13": {
        loc: {
          start: {
            line: 219,
            column: 74
          },
          end: {
            line: 219,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 85
          },
          end: {
            line: 219,
            column: 90
          }
        }],
        line: 219
      },
      "14": {
        loc: {
          start: {
            line: 219,
            column: 92
          },
          end: {
            line: 219,
            column: 104
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 100
          },
          end: {
            line: 219,
            column: 104
          }
        }],
        line: 219
      },
      "15": {
        loc: {
          start: {
            line: 219,
            column: 106
          },
          end: {
            line: 219,
            column: 118
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 219,
            column: 115
          },
          end: {
            line: 219,
            column: 118
          }
        }],
        line: 219
      },
      "16": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "17": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 220,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 220,
            column: 16
          }
        }, {
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 220,
            column: 29
          }
        }],
        line: 220
      },
      "18": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: 247,
            column: 15
          },
          end: {
            line: 252,
            column: 9
          }
        }],
        line: 242
      },
      "19": {
        loc: {
          start: {
            line: 268,
            column: 34
          },
          end: {
            line: 268,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 34
          },
          end: {
            line: 268,
            column: 42
          }
        }, {
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 57
          }
        }],
        line: 268
      },
      "20": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 286,
            column: 9
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 284,
            column: 25
          },
          end: {
            line: 286,
            column: 9
          }
        }],
        line: 284
      },
      "21": {
        loc: {
          start: {
            line: 286,
            column: 11
          },
          end: {
            line: 286,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 286,
            column: 21
          },
          end: {
            line: 286,
            column: 26
          }
        }],
        line: 286
      },
      "22": {
        loc: {
          start: {
            line: 286,
            column: 28
          },
          end: {
            line: 286,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 286,
            column: 45
          },
          end: {
            line: 286,
            column: 49
          }
        }],
        line: 286
      },
      "23": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "24": {
        loc: {
          start: {
            line: 317,
            column: 47
          },
          end: {
            line: 317,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 47
          },
          end: {
            line: 317,
            column: 63
          }
        }, {
          start: {
            line: 317,
            column: 67
          },
          end: {
            line: 317,
            column: 69
          }
        }],
        line: 317
      },
      "25": {
        loc: {
          start: {
            line: 317,
            column: 71
          },
          end: {
            line: 317,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 71
          },
          end: {
            line: 317,
            column: 87
          }
        }, {
          start: {
            line: 317,
            column: 91
          },
          end: {
            line: 317,
            column: 93
          }
        }],
        line: 317
      },
      "26": {
        loc: {
          start: {
            line: 333,
            column: 57
          },
          end: {
            line: 333,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 57
          },
          end: {
            line: 333,
            column: 64
          }
        }, {
          start: {
            line: 333,
            column: 68
          },
          end: {
            line: 333,
            column: 69
          }
        }],
        line: 333
      },
      "27": {
        loc: {
          start: {
            line: 334,
            column: 58
          },
          end: {
            line: 334,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 58
          },
          end: {
            line: 334,
            column: 66
          }
        }, {
          start: {
            line: 334,
            column: 70
          },
          end: {
            line: 334,
            column: 71
          }
        }],
        line: 334
      },
      "28": {
        loc: {
          start: {
            line: 335,
            column: 58
          },
          end: {
            line: 335,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 58
          },
          end: {
            line: 335,
            column: 66
          }
        }, {
          start: {
            line: 335,
            column: 70
          },
          end: {
            line: 335,
            column: 71
          }
        }],
        line: 335
      },
      "29": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "30": {
        loc: {
          start: {
            line: 345,
            column: 20
          },
          end: {
            line: 345,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 50
          },
          end: {
            line: 345,
            column: 59
          }
        }, {
          start: {
            line: 345,
            column: 62
          },
          end: {
            line: 345,
            column: 71
          }
        }],
        line: 345
      },
      "31": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "32": {
        loc: {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "33": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "34": {
        loc: {
          start: {
            line: 388,
            column: 46
          },
          end: {
            line: 388,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 46
          },
          end: {
            line: 388,
            column: 62
          }
        }, {
          start: {
            line: 388,
            column: 66
          },
          end: {
            line: 388,
            column: 68
          }
        }],
        line: 388
      },
      "35": {
        loc: {
          start: {
            line: 388,
            column: 121
          },
          end: {
            line: 388,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 121
          },
          end: {
            line: 388,
            column: 137
          }
        }, {
          start: {
            line: 388,
            column: 141
          },
          end: {
            line: 388,
            column: 143
          }
        }],
        line: 388
      },
      "36": {
        loc: {
          start: {
            line: 418,
            column: 33
          },
          end: {
            line: 418,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 418,
            column: 45
          },
          end: {
            line: 418,
            column: 54
          }
        }],
        line: 418
      },
      "37": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "38": {
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 18
          }
        }, {
          start: {
            line: 419,
            column: 22
          },
          end: {
            line: 419,
            column: 31
          }
        }],
        line: 419
      },
      "39": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "40": {
        loc: {
          start: {
            line: 437,
            column: 8
          },
          end: {
            line: 468,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 443,
            column: 22
          }
        }, {
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 458,
            column: 22
          }
        }, {
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 465,
            column: 22
          }
        }, {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 467,
            column: 72
          }
        }],
        line: 437
      },
      "41": {
        loc: {
          start: {
            line: 470,
            column: 20
          },
          end: {
            line: 470,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 470,
            column: 37
          },
          end: {
            line: 470,
            column: 46
          }
        }, {
          start: {
            line: 470,
            column: 49
          },
          end: {
            line: 470,
            column: 57
          }
        }],
        line: 470
      },
      "42": {
        loc: {
          start: {
            line: 479,
            column: 19
          },
          end: {
            line: 479,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 36
          },
          end: {
            line: 479,
            column: 45
          }
        }, {
          start: {
            line: 479,
            column: 48
          },
          end: {
            line: 479,
            column: 60
          }
        }],
        line: 479
      },
      "43": {
        loc: {
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 515,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 515,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "44": {
        loc: {
          start: {
            line: 513,
            column: 20
          },
          end: {
            line: 513,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 20
          },
          end: {
            line: 513,
            column: 30
          }
        }, {
          start: {
            line: 513,
            column: 34
          },
          end: {
            line: 513,
            column: 44
          }
        }],
        line: 513
      },
      "45": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "46": {
        loc: {
          start: {
            line: 526,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 526,
            column: 16
          },
          end: {
            line: 538,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 526
      },
      "47": {
        loc: {
          start: {
            line: 549,
            column: 35
          },
          end: {
            line: 549,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 35
          },
          end: {
            line: 549,
            column: 61
          }
        }, {
          start: {
            line: 549,
            column: 65
          },
          end: {
            line: 549,
            column: 74
          }
        }],
        line: 549
      },
      "48": {
        loc: {
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      },
      "49": {
        loc: {
          start: {
            line: 571,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 571,
            column: 12
          },
          end: {
            line: 573,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 571
      },
      "50": {
        loc: {
          start: {
            line: 579,
            column: 20
          },
          end: {
            line: 579,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 28
          },
          end: {
            line: 579,
            column: 36
          }
        }, {
          start: {
            line: 579,
            column: 39
          },
          end: {
            line: 579,
            column: 48
          }
        }],
        line: 579
      },
      "51": {
        loc: {
          start: {
            line: 611,
            column: 8
          },
          end: {
            line: 616,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 611,
            column: 8
          },
          end: {
            line: 616,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 611
      },
      "52": {
        loc: {
          start: {
            line: 620,
            column: 8
          },
          end: {
            line: 622,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 620,
            column: 8
          },
          end: {
            line: 622,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 620
      },
      "53": {
        loc: {
          start: {
            line: 623,
            column: 8
          },
          end: {
            line: 625,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 623,
            column: 8
          },
          end: {
            line: 625,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 623
      },
      "54": {
        loc: {
          start: {
            line: 648,
            column: 27
          },
          end: {
            line: 648,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 648,
            column: 27
          },
          end: {
            line: 648,
            column: 39
          }
        }, {
          start: {
            line: 648,
            column: 43
          },
          end: {
            line: 648,
            column: 44
          }
        }],
        line: 648
      },
      "55": {
        loc: {
          start: {
            line: 649,
            column: 28
          },
          end: {
            line: 649,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 649,
            column: 28
          },
          end: {
            line: 649,
            column: 41
          }
        }, {
          start: {
            line: 649,
            column: 45
          },
          end: {
            line: 649,
            column: 46
          }
        }],
        line: 649
      },
      "56": {
        loc: {
          start: {
            line: 650,
            column: 28
          },
          end: {
            line: 650,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 650,
            column: 28
          },
          end: {
            line: 650,
            column: 41
          }
        }, {
          start: {
            line: 650,
            column: 45
          },
          end: {
            line: 650,
            column: 46
          }
        }],
        line: 650
      },
      "57": {
        loc: {
          start: {
            line: 651,
            column: 27
          },
          end: {
            line: 651,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 651,
            column: 27
          },
          end: {
            line: 651,
            column: 39
          }
        }, {
          start: {
            line: 651,
            column: 43
          },
          end: {
            line: 651,
            column: 47
          }
        }],
        line: 651
      },
      "58": {
        loc: {
          start: {
            line: 677,
            column: 20
          },
          end: {
            line: 677,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 677,
            column: 20
          },
          end: {
            line: 677,
            column: 46
          }
        }, {
          start: {
            line: 677,
            column: 50
          },
          end: {
            line: 677,
            column: 62
          }
        }],
        line: 677
      },
      "59": {
        loc: {
          start: {
            line: 679,
            column: 21
          },
          end: {
            line: 679,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 679,
            column: 21
          },
          end: {
            line: 679,
            column: 48
          }
        }, {
          start: {
            line: 679,
            column: 52
          },
          end: {
            line: 679,
            column: 61
          }
        }],
        line: 679
      },
      "60": {
        loc: {
          start: {
            line: 686,
            column: 8
          },
          end: {
            line: 752,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 687,
            column: 12
          },
          end: {
            line: 689,
            column: 22
          }
        }, {
          start: {
            line: 690,
            column: 12
          },
          end: {
            line: 692,
            column: 22
          }
        }, {
          start: {
            line: 693,
            column: 12
          },
          end: {
            line: 695,
            column: 22
          }
        }, {
          start: {
            line: 696,
            column: 12
          },
          end: {
            line: 698,
            column: 22
          }
        }, {
          start: {
            line: 699,
            column: 12
          },
          end: {
            line: 701,
            column: 22
          }
        }, {
          start: {
            line: 702,
            column: 12
          },
          end: {
            line: 704,
            column: 22
          }
        }, {
          start: {
            line: 705,
            column: 12
          },
          end: {
            line: 749,
            column: 22
          }
        }, {
          start: {
            line: 750,
            column: 12
          },
          end: {
            line: 751,
            column: 73
          }
        }],
        line: 686
      },
      "61": {
        loc: {
          start: {
            line: 716,
            column: 24
          },
          end: {
            line: 729,
            column: 25
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 717,
            column: 28
          },
          end: {
            line: 719,
            column: 38
          }
        }, {
          start: {
            line: 720,
            column: 28
          },
          end: {
            line: 722,
            column: 38
          }
        }, {
          start: {
            line: 723,
            column: 28
          },
          end: {
            line: 725,
            column: 38
          }
        }, {
          start: {
            line: 726,
            column: 28
          },
          end: {
            line: 728,
            column: 38
          }
        }],
        line: 716
      },
      "62": {
        loc: {
          start: {
            line: 745,
            column: 28
          },
          end: {
            line: 745,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 745,
            column: 57
          },
          end: {
            line: 745,
            column: 66
          }
        }, {
          start: {
            line: 745,
            column: 69
          },
          end: {
            line: 745,
            column: 78
          }
        }],
        line: 745
      },
      "63": {
        loc: {
          start: {
            line: 790,
            column: 24
          },
          end: {
            line: 790,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 790,
            column: 33
          },
          end: {
            line: 790,
            column: 35
          }
        }],
        line: 790
      },
      "64": {
        loc: {
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 815,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 795,
            column: 12
          },
          end: {
            line: 797,
            column: 22
          }
        }, {
          start: {
            line: 798,
            column: 12
          },
          end: {
            line: 800,
            column: 22
          }
        }, {
          start: {
            line: 801,
            column: 12
          },
          end: {
            line: 803,
            column: 22
          }
        }, {
          start: {
            line: 804,
            column: 12
          },
          end: {
            line: 806,
            column: 22
          }
        }, {
          start: {
            line: 807,
            column: 12
          },
          end: {
            line: 809,
            column: 22
          }
        }, {
          start: {
            line: 810,
            column: 12
          },
          end: {
            line: 812,
            column: 22
          }
        }, {
          start: {
            line: 813,
            column: 12
          },
          end: {
            line: 814,
            column: 71
          }
        }],
        line: 794
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0, 0, 0, 0, 0, 0],
      "61": [0, 0, 0, 0],
      "62": [0, 0],
      "63": [0],
      "64": [0, 0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test\\unified\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API Unificada de Testing\r\n// Consolida todas las funcionalidades de testing en un solo endpoint\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport { chromium } from 'playwright';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { screenshotManager } from '@/lib/testing/screenshot-manager';\r\nimport { API_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n// import {\r\n//   sendWelcomeEmail,\r\n//   sendOrderConfirmationEmail,\r\n//   sendPasswordResetEmail,\r\n//   getEmailServiceConfig\r\n// } from '@/lib/email';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nconst TestModuleSchema = z.enum([\r\n  'connection',      // Test de conexiones b\xE1sicas\r\n  'auth',           // Test de autenticaci\xF3n\r\n  'screenshots',    // Generaci\xF3n de screenshots\r\n  'execution',      // Ejecuci\xF3n de test suites\r\n  'flows',          // Flujos de testing automatizados\r\n  'email',          // Testing de emails\r\n  'middleware',     // Testing de middleware\r\n  'reports',        // Generaci\xF3n de reportes\r\n  'user-profile',   // Testing de perfiles de usuario\r\n  'all'             // Ejecutar todos los tests\r\n]);\r\n\r\nconst UnifiedTestParamsSchema = z.object({\r\n  module: TestModuleSchema.default('connection'),\r\n  detailed: z.boolean().default(false),\r\n  user_id: z.string().optional(),\r\n  include_sensitive: z.boolean().default(false)\r\n});\r\n\r\nconst UnifiedTestPostSchema = z.object({\r\n  module: TestModuleSchema,\r\n  config: z.object({\r\n    // Screenshot config\r\n    url: z.string().url().optional(),\r\n    stepName: z.string().optional(),\r\n    selector: z.string().optional(),\r\n    fullPage: z.boolean().default(false),\r\n    width: z.number().default(1280),\r\n    height: z.number().default(720),\r\n    \r\n    // Test execution config\r\n    suites: z.array(z.string()).optional(),\r\n    timeout: z.number().default(60000),\r\n    generateReport: z.boolean().default(true),\r\n    \r\n    // Email test config\r\n    email: z.string().email().optional(),\r\n    userName: z.string().optional(),\r\n    emailType: z.enum(['welcome', 'order', 'reset']).optional(),\r\n    \r\n    // Flow test config\r\n    flowId: z.string().optional(),\r\n    executionId: z.string().optional(),\r\n    \r\n    // General config\r\n    test_data: z.any().optional()\r\n  }).optional()\r\n});\r\n\r\ntype TestModule = z.infer<typeof TestModuleSchema>;\r\ntype UnifiedTestParams = z.infer<typeof UnifiedTestParamsSchema>;\r\ntype UnifiedTestPost = z.infer<typeof UnifiedTestPostSchema>;\r\n\r\n// ===================================\r\n// CONFIGURACI\xD3N DE TEST SUITES\r\n// ===================================\r\n\r\nconst TEST_SUITES: Record<string, {\r\n  name: string;\r\n  command: string;\r\n  timeout: number;\r\n  description: string;\r\n}> = {\r\n  unit: {\r\n    name: 'Tests Unitarios',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(hooks|utils|lib)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests unitarios de hooks, utilities y librer\xEDas'\r\n  },\r\n  components: {\r\n    name: 'Tests de Componentes',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(components|optimization)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default + 30000, // 30s adicionales para componentes\r\n    description: 'Tests de componentes React y optimizaciones'\r\n  },\r\n  e2e: {\r\n    name: 'Tests E2E',\r\n    command: 'npx playwright test --project=ui-admin --reporter=json',\r\n    timeout: API_TIMEOUTS.upload * 2.5, // Timeout extendido para E2E\r\n    description: 'Tests end-to-end con Playwright'\r\n  },\r\n  performance: {\r\n    name: 'Tests de Performance',\r\n    command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n    timeout: 120000,\r\n    description: 'Tests de performance y Core Web Vitals'\r\n  },\r\n  api: {\r\n    name: 'Tests de API',\r\n    command: 'npm test -- --testPathPattern=\"api\" --passWithNoTests',\r\n    timeout: 90000,\r\n    description: 'Tests de endpoints y APIs'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// M\xD3DULOS DE TESTING\r\n// ===================================\r\n\r\nasync function testConnection(detailed: boolean = false) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\n    if (!supabaseUrl || !supabaseKey) {\r\n      throw new Error('Variables de entorno de Supabase no configuradas');\r\n    }\r\n\r\n    const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n    // Test de conexi\xF3n b\xE1sica\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const { data: categories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const { data: users, error: usersError } = await supabase\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const results = {\r\n      connection: !productsError,\r\n      adminConnection: !categoriesError,\r\n      userConnection: !usersError,\r\n      crud: !productsError && !categoriesError,\r\n      tables: {\r\n        products: !productsError,\r\n        categories: !categoriesError,\r\n        user_profiles: !usersError\r\n      }\r\n    };\r\n\r\n    const allPassed = Object.values(results.tables).every(Boolean);\r\n\r\n    return {\r\n      status: allPassed ? 'success' : 'partial',\r\n      data: {\r\n        ...results,\r\n        summary: {\r\n          total_tests: Object.keys(results.tables).length,\r\n          passed: Object.values(results.tables).filter(Boolean).length,\r\n          failed: Object.values(results.tables).filter(v => !v).length\r\n        },\r\n        ...(detailed && {\r\n          errors: {\r\n            products: productsError?.message,\r\n            categories: categoriesError?.message,\r\n            users: usersError?.message\r\n          }\r\n        })\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testAuth(request: NextRequest, detailed: boolean = false) {\r\n  try {\r\n    const authResult = await getAuthenticatedUser(request);\r\n    \r\n    const results = {\r\n      authenticated: !!authResult.userId,\r\n      userId: authResult.userId,\r\n      hasError: !!authResult.error,\r\n      method: 'getAuthenticatedUser()'\r\n    };\r\n\r\n    if (detailed && authResult.userId) {\r\n      // Test user profile lookup\r\n      const { data: user, error } = await supabaseAdmin\r\n        .from('user_profiles')\r\n        .select('id, clerk_user_id, email, role_id, is_active')\r\n        .eq('clerk_user_id', authResult.userId)\r\n        .single();\r\n\r\n      results['profile_lookup'] = {\r\n        success: !error,\r\n        user_found: !!user,\r\n        error: error?.message\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: results.authenticated ? 'success' : 'failed' as const,\r\n      data: results,\r\n      error: authResult.error\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testScreenshots(config: any) {\r\n  try {\r\n    const { url, stepName, description = 'Test screenshot', selector, fullPage = false, width = 1280, height = 720 } = config;\r\n\r\n    if (!url || !stepName) {\r\n      throw new Error('URL y stepName son requeridos para screenshots');\r\n    }\r\n\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots');\r\n    await fs.mkdir(screenshotsDir, { recursive: true });\r\n\r\n    const browser = await chromium.launch({ headless: true });\r\n    const page = await browser.newPage({\r\n      viewport: { width, height }\r\n    });\r\n\r\n    await page.goto(url, { waitUntil: 'networkidle' });\r\n    \r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const filename = `${stepName}-${timestamp}.png`;\r\n    const filepath = path.join(screenshotsDir, filename);\r\n\r\n    if (selector) {\r\n      const element = await page.locator(selector);\r\n      await element.screenshot({ path: filepath });\r\n    } else {\r\n      await page.screenshot({ \r\n        path: filepath, \r\n        fullPage \r\n      });\r\n    }\r\n\r\n    await browser.close();\r\n\r\n    const stats = await fs.stat(filepath);\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        screenshot: {\r\n          id: `screenshot-${Date.now()}`,\r\n          filename,\r\n          path: filepath,\r\n          url: `/test-screenshots/${filename}`,\r\n          metadata: {\r\n            width,\r\n            height,\r\n            size: stats.size,\r\n            timestamp: new Date().toISOString(),\r\n            selector: selector || 'full-page',\r\n            fullPage\r\n          }\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testExecution(config: any) {\r\n  try {\r\n    const { suites = ['unit'], timeout = 60000, generateReport = true } = config;\r\n    \r\n    const invalidSuites = suites.filter((suite: string) => !TEST_SUITES[suite]);\r\n    if (invalidSuites.length > 0) {\r\n      throw new Error(`Suites inv\xE1lidas: ${invalidSuites.join(', ')}. Disponibles: ${Object.keys(TEST_SUITES).join(', ')}`);\r\n    }\r\n\r\n    const results = [];\r\n    const startTime = Date.now();\r\n\r\n    for (const suiteKey of suites) {\r\n      const suite = TEST_SUITES[suiteKey];\r\n      const suiteStartTime = Date.now();\r\n\r\n      try {\r\n        const { stdout, stderr } = await execAsync(suite.command, {\r\n          timeout: suite.timeout,\r\n          cwd: process.cwd(),\r\n          env: {\r\n            ...process.env,\r\n            NODE_ENV: 'test',\r\n            CI: 'true'\r\n          }\r\n        });\r\n\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        const parsed = parseTestOutput(stdout, stderr);\r\n\r\n        results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'success',\r\n          duration: suiteDuration,\r\n          ...parsed\r\n        });\r\n      } catch (execError: any) {\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        const parsed = parseTestOutput(execError.stdout || '', execError.stderr || '');\r\n\r\n        results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'failed',\r\n          duration: suiteDuration,\r\n          error: execError.message,\r\n          ...parsed\r\n        });\r\n      }\r\n    }\r\n\r\n    const totalDuration = Date.now() - startTime;\r\n    const summary = {\r\n      total_suites: results.length,\r\n      passed_suites: results.filter(r => r.status === 'success').length,\r\n      failed_suites: results.filter(r => r.status === 'failed').length,\r\n      total_tests: results.reduce((sum, r) => sum + (r.tests || 0), 0),\r\n      total_passed: results.reduce((sum, r) => sum + (r.passed || 0), 0),\r\n      total_failed: results.reduce((sum, r) => sum + (r.failed || 0), 0),\r\n      duration: totalDuration\r\n    };\r\n\r\n    if (generateReport) {\r\n      await generateTestReport({ results, summary });\r\n    }\r\n\r\n    return {\r\n      status: summary.failed_suites === 0 ? 'success' : 'partial' as const,\r\n      data: {\r\n        results,\r\n        summary\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testFlows(config: any) {\r\n  try {\r\n    const { flowId, executionId } = config;\r\n\r\n    if (executionId) {\r\n      // Obtener ejecuci\xF3n espec\xEDfica\r\n      const execution = testFlowManager.getExecution(executionId);\r\n      if (!execution) {\r\n        throw new Error(`Ejecuci\xF3n ${executionId} no encontrada`);\r\n      }\r\n\r\n      const screenshotStats = testFlowManager.getScreenshotStats(executionId);\r\n\r\n      return {\r\n        status: 'success' as const,\r\n        data: {\r\n          execution: {\r\n            ...execution,\r\n            screenshotStats\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    if (flowId) {\r\n      // Obtener ejecuciones de un flujo espec\xEDfico\r\n      const executions = testFlowManager.getExecutions(flowId);\r\n      return {\r\n        status: 'success' as const,\r\n        data: {\r\n          flowId,\r\n          executions: executions.map(exec => ({\r\n            ...exec,\r\n            screenshotCount: (exec.screenshots || []).length + \r\n              exec.steps.reduce((total, step) => total + (step.screenshots || []).length, 0)\r\n          }))\r\n        }\r\n      };\r\n    }\r\n\r\n    // Obtener todos los flujos disponibles\r\n    const flows = testFlowManager.getAvailableFlows();\r\n    const allExecutions = testFlowManager.getExecutions();\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        flows,\r\n        executions: allExecutions,\r\n        summary: {\r\n          total_flows: flows.length,\r\n          total_executions: allExecutions.length,\r\n          active_flows: flows.filter(f => f.enabled).length\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testEmail(config: any) {\r\n  try {\r\n    const { email, userName, emailType = 'welcome' } = config;\r\n\r\n    if (!email || !userName) {\r\n      throw new Error('Email y userName son requeridos');\r\n    }\r\n\r\n    // Verificar configuraci\xF3n\r\n    const emailConfig = getEmailServiceConfig();\r\n    if (!emailConfig.isReady) {\r\n      return {\r\n        status: 'failed' as const,\r\n        error: 'Servicio de email no configurado',\r\n        data: {\r\n          config: {\r\n            hasApiKey: emailConfig.hasApiKey,\r\n            fromEmail: emailConfig.fromEmail\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    let result;\r\n\r\n    switch (emailType) {\r\n      case 'welcome':\r\n        result = await sendWelcomeEmail({\r\n          email,\r\n          userName\r\n        });\r\n        break;\r\n      case 'order':\r\n        result = await sendOrderConfirmationEmail({\r\n          email,\r\n          userName,\r\n          orderNumber: 'TEST-001',\r\n          orderTotal: 99.99,\r\n          items: [\r\n            { name: 'Producto Test', quantity: 1, price: 99.99 }\r\n          ]\r\n        });\r\n        break;\r\n      case 'reset':\r\n        result = await sendPasswordResetEmail({\r\n          email,\r\n          userName,\r\n          resetLink: 'https://www.pinteya.com/reset-password?token=test-token-123'\r\n        });\r\n        break;\r\n      default:\r\n        throw new Error(`Tipo de email inv\xE1lido: ${emailType}`);\r\n    }\r\n\r\n    return {\r\n      status: result.success ? 'success' : 'failed' as const,\r\n      data: {\r\n        emailType,\r\n        result,\r\n        config: {\r\n          service: 'configured',\r\n          fromEmail: emailConfig.fromEmail\r\n        }\r\n      },\r\n      error: result.success ? undefined : result.error\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testMiddleware() {\r\n  // Este test simplemente verifica que el endpoint sea accesible\r\n  // Si llegamos aqu\xED, significa que el middleware permiti\xF3 el acceso\r\n  return {\r\n    status: 'success' as const,\r\n    data: {\r\n      middleware_test: 'passed',\r\n      timestamp: new Date().toISOString(),\r\n      endpoint: '/api/test/unified',\r\n      note: 'Si este endpoint responde, el middleware est\xE1 funcionando'\r\n    }\r\n  };\r\n}\r\n\r\nasync function testReports() {\r\n  try {\r\n    const publicReportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    const rootReportsDir = path.join(process.cwd(), 'test-reports');\r\n    \r\n    let reports: string[] = [];\r\n    \r\n    // Verificar carpeta public/test-reports\r\n    try {\r\n      const publicFiles = await fs.readdir(publicReportsDir);\r\n      reports = publicFiles\r\n        .filter(file => file.endsWith('.json'))\r\n        .sort((a, b) => {\r\n          const timestampA = a.match(/\\d+/);\r\n          const timestampB = b.match(/\\d+/);\r\n          if (timestampA && timestampB) {\r\n            return parseInt(timestampB[0]) - parseInt(timestampA[0]);\r\n          }\r\n          return b.localeCompare(a);\r\n        });\r\n    } catch {\r\n      // Carpeta no existe, continuar\r\n    }\r\n    \r\n    // Si no hay reportes en public, verificar carpeta ra\xEDz\r\n    if (reports.length === 0) {\r\n      try {\r\n        const rootFiles = await fs.readdir(rootReportsDir);\r\n        const jsonFiles = rootFiles.filter(file => file.endsWith('.json'));\r\n        \r\n        if (jsonFiles.length > 0) {\r\n          // Crear carpeta public si no existe\r\n          await fs.mkdir(publicReportsDir, { recursive: true });\r\n          \r\n          // Copiar archivos a public\r\n          for (const file of jsonFiles) {\r\n            const sourcePath = path.join(rootReportsDir, file);\r\n            const destPath = path.join(publicReportsDir, file);\r\n            await fs.copyFile(sourcePath, destPath);\r\n          }\r\n          \r\n          reports = jsonFiles;\r\n        }\r\n      } catch {\r\n        // Carpeta ra\xEDz no existe, continuar\r\n      }\r\n    }\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        reports: reports.map(filename => ({\r\n          filename,\r\n          url: `/test-reports/${filename}`,\r\n          timestamp: filename.match(/\\d+/)?.[0] || 'unknown'\r\n        })),\r\n        total: reports.length,\r\n        directories: {\r\n          public: publicReportsDir,\r\n          root: rootReportsDir\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testUserProfile(request: NextRequest, userId?: string) {\r\n  try {\r\n    let targetUserId = userId;\r\n    \r\n    if (!targetUserId) {\r\n      const authResult = await getAuthenticatedUser(request);\r\n      if (!authResult.userId) {\r\n        throw new Error('Usuario no autenticado y no se proporcion\xF3 user_id');\r\n      }\r\n      targetUserId = authResult.userId;\r\n    }\r\n\r\n    // Consulta simple sin joins\r\n    const { data: user, error } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id, clerk_user_id, email, role_id, is_active')\r\n      .eq('clerk_user_id', targetUserId)\r\n      .single();\r\n\r\n    return {\r\n      status: error ? 'failed' : 'success' as const,\r\n      data: {\r\n        user_found: !!user,\r\n        user_data: user,\r\n        query_params: {\r\n          clerk_user_id: targetUserId\r\n        }\r\n      },\r\n      error: error?.message\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nfunction parseTestOutput(stdout: string, stderr: string) {\r\n  const result = {\r\n    passed: 0,\r\n    failed: 0,\r\n    tests: 0,\r\n    output: stdout,\r\n    errors: stderr\r\n  };\r\n\r\n  try {\r\n    // Intentar parsear diferentes formatos de output\r\n    const testMatch = stdout.match(/Tests:\\s+(\\d+) failed,\\s+(\\d+) passed,\\s+(\\d+) total/);\r\n    if (testMatch) {\r\n      result.failed = parseInt(testMatch[1]);\r\n      result.passed = parseInt(testMatch[2]);\r\n      result.tests = parseInt(testMatch[3]);\r\n      return result;\r\n    }\r\n\r\n    // Formato alternativo\r\n    const passedMatch = stdout.match(/(\\d+) passing/);\r\n    const failedMatch = stdout.match(/(\\d+) failing/);\r\n    \r\n    if (passedMatch) {result.passed = parseInt(passedMatch[1]);}\r\n    if (failedMatch) {result.failed = parseInt(failedMatch[1]);}\r\n    result.tests = result.passed + result.failed;\r\n  } catch (parseError) {\r\n    console.warn('Error parseando output de tests:', parseError);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function generateTestReport(data: any) {\r\n  try {\r\n    const reportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    await fs.mkdir(reportsDir, { recursive: true });\r\n\r\n    const report = {\r\n      timestamp: new Date().toISOString(),\r\n      type: 'unified-test-execution',\r\n      version: '1.0.0',\r\n      summary: data.summary,\r\n      results: data.results.map((result: any) => ({\r\n        suite: result.suite,\r\n        name: result.name,\r\n        status: result.status,\r\n        duration: result.duration,\r\n        tests: result.tests || 0,\r\n        passed: result.passed || 0,\r\n        failed: result.failed || 0,\r\n        error: result.error || null\r\n      })),\r\n      metadata: {\r\n        node_version: process.version,\r\n        platform: process.platform,\r\n        environment: 'test',\r\n        generated_by: 'unified-test-api'\r\n      }\r\n    };\r\n\r\n    const filename = `unified-test-execution-${Date.now()}.json`;\r\n    const filepath = path.join(reportsDir, filename);\r\n    \r\n    await fs.writeFile(filepath, JSON.stringify(report, null, 2));\r\n    \r\n    return {\r\n      filename,\r\n      path: filepath,\r\n      url: `/test-reports/${filename}`\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// ENDPOINTS\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const rawParams = {\r\n      module: searchParams.get('module') || 'connection',\r\n      detailed: searchParams.get('detailed') === 'true',\r\n      user_id: searchParams.get('user_id') || undefined,\r\n      include_sensitive: searchParams.get('include_sensitive') === 'true'\r\n    };\r\n\r\n    const params = UnifiedTestParamsSchema.parse(rawParams);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`\uD83E\uDDEA Unified Test GET: Module ${params.module}`);\r\n\r\n    let result;\r\n\r\n    switch (params.module) {\r\n      case 'connection':\r\n        result = await testConnection(params.detailed);\r\n        break;\r\n      case 'auth':\r\n        result = await testAuth(request, params.detailed);\r\n        break;\r\n      case 'middleware':\r\n        result = await testMiddleware();\r\n        break;\r\n      case 'reports':\r\n        result = await testReports();\r\n        break;\r\n      case 'user-profile':\r\n        result = await testUserProfile(request, params.user_id);\r\n        break;\r\n      case 'flows':\r\n        result = await testFlows({});\r\n        break;\r\n      case 'all':\r\n        // Ejecutar todos los m\xF3dulos b\xE1sicos\r\n        const modules = ['connection', 'auth', 'middleware', 'reports'];\r\n        const results = {};\r\n        \r\n        for (const module of modules) {\r\n          try {\r\n            switch (module) {\r\n              case 'connection':\r\n                results[module] = await testConnection(params.detailed);\r\n                break;\r\n              case 'auth':\r\n                results[module] = await testAuth(request, params.detailed);\r\n                break;\r\n              case 'middleware':\r\n                results[module] = await testMiddleware();\r\n                break;\r\n              case 'reports':\r\n                results[module] = await testReports();\r\n                break;\r\n            }\r\n          } catch (error: any) {\r\n            results[module] = {\r\n              status: 'failed',\r\n              error: error.message,\r\n              data: null\r\n            };\r\n          }\r\n        }\r\n\r\n        const summary = {\r\n          total_modules: modules.length,\r\n          success_count: Object.values(results).filter((r: any) => r.status === 'success').length,\r\n          partial_count: Object.values(results).filter((r: any) => r.status === 'partial').length,\r\n          failed_count: Object.values(results).filter((r: any) => r.status === 'failed').length\r\n        };\r\n\r\n        result = {\r\n          status: summary.failed_count === 0 ? 'success' : 'partial' as const,\r\n          data: results,\r\n          summary\r\n        };\r\n        break;\r\n      default:\r\n        throw new Error(`M\xF3dulo no soportado: ${params.module}`);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      timestamp,\r\n      module: params.module,\r\n      status: result.status,\r\n      data: result.data,\r\n      error: result.error,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        parameters: {\r\n          module: params.module,\r\n          detailed: params.detailed,\r\n          include_sensitive: params.include_sensitive\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('\u274C Error en Unified Test API:', error);\r\n    \r\n    return NextResponse.json({\r\n      timestamp: new Date().toISOString(),\r\n      module: 'unknown',\r\n      status: 'failed',\r\n      data: null,\r\n      error: error.message,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        parameters: null\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { module, config = {} } = UnifiedTestPostSchema.parse(body);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`\uD83E\uDDEA Unified Test POST: Module ${module}`);\r\n\r\n    let result;\r\n\r\n    switch (module) {\r\n      case 'screenshots':\r\n        result = await testScreenshots(config);\r\n        break;\r\n      case 'execution':\r\n        result = await testExecution(config);\r\n        break;\r\n      case 'flows':\r\n        result = await testFlows(config);\r\n        break;\r\n      case 'email':\r\n        result = await testEmail(config);\r\n        break;\r\n      case 'auth':\r\n        result = await testAuth(request, true);\r\n        break;\r\n      case 'connection':\r\n        result = await testConnection(true);\r\n        break;\r\n      default:\r\n        throw new Error(`M\xF3dulo POST no soportado: ${module}`);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      timestamp,\r\n      module,\r\n      status: result.status,\r\n      data: result.data,\r\n      error: result.error,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        method: 'POST',\r\n        config: config\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('\u274C Error en Unified Test API POST:', error);\r\n    \r\n    return NextResponse.json({\r\n      timestamp: new Date().toISOString(),\r\n      module: 'unknown',\r\n      status: 'failed',\r\n      data: null,\r\n      error: error.message,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        method: 'POST'\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "execAsync", "promisify", "exec", "TestModuleSchema", "z", "enum", "UnifiedTestParamsSchema", "object", "module", "default", "detailed", "boolean", "user_id", "string", "optional", "include_sensitive", "UnifiedTestPostSchema", "config", "url", "stepName", "selector", "fullPage", "width", "number", "height", "suites", "array", "timeout", "generateReport", "email", "userName", "emailType", "flowId", "executionId", "test_data", "any", "TEST_SUITES", "unit", "name", "command", "API_TIMEOUTS", "description", "components", "e2e", "upload", "performance", "api", "testConnection", "supabaseUrl", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "supabaseKey", "NEXT_PUBLIC_SUPABASE_ANON_KEY", "Error", "supabase", "createClient", "data", "products", "error", "productsError", "from", "select", "limit", "categories", "categoriesError", "users", "usersError", "results", "connection", "adminConnection", "userConnection", "crud", "tables", "user_profiles", "allPassed", "Object", "values", "every", "Boolean", "status", "summary", "total_tests", "keys", "length", "passed", "filter", "failed", "v", "errors", "message", "testAuth", "request", "authResult", "getAuthenticatedUser", "authenticated", "userId", "hasError", "method", "user", "supabaseAdmin", "eq", "single", "success", "user_found", "testScreenshots", "screenshotsDir", "path", "join", "cwd", "fs", "mkdir", "recursive", "browser", "chromium", "launch", "headless", "page", "newPage", "viewport", "goto", "waitUntil", "timestamp", "Date", "toISOString", "replace", "filename", "filepath", "element", "locator", "screenshot", "close", "stats", "stat", "id", "now", "metadata", "size", "testExecution", "invalidSuites", "suite", "startTime", "suiteKey", "suiteStartTime", "stdout", "stderr", "NODE_ENV", "CI", "suiteDuration", "parsed", "parseTestOutput", "push", "duration", "execError", "totalDuration", "total_suites", "passed_suites", "r", "failed_suites", "reduce", "sum", "tests", "total_passed", "total_failed", "generateTestReport", "testFlows", "execution", "testFlowManager", "getExecution", "screenshotStats", "getScreenshotStats", "executions", "getExecutions", "map", "screenshotCount", "screenshots", "steps", "total", "step", "flows", "getAvailableFlows", "allExecutions", "total_flows", "total_executions", "active_flows", "f", "enabled", "testEmail", "emailConfig", "getEmailServiceConfig", "isReady", "hasApiKey", "fromEmail", "result", "sendWelcomeEmail", "sendOrderConfirmationEmail", "orderNumber", "orderTotal", "items", "quantity", "price", "sendPasswordResetEmail", "resetLink", "service", "undefined", "testMiddleware", "middleware_test", "endpoint", "note", "testReports", "publicReportsDir", "rootReportsDir", "reports", "publicFiles", "readdir", "file", "endsWith", "sort", "a", "b", "timestampA", "match", "timestampB", "parseInt", "localeCompare", "rootFiles", "jsonFiles", "sourcePath", "destPath", "copyFile", "directories", "public", "root", "testUserProfile", "targetUserId", "user_data", "query_params", "clerk_user_id", "output", "testMatch", "passedMatch", "failedMatch", "parseError", "console", "warn", "reportsDir", "report", "type", "version", "node_version", "platform", "environment", "generated_by", "writeFile", "JSON", "stringify", "searchParams", "URL", "rawParams", "get", "params", "parse", "log", "modules", "total_modules", "success_count", "partial_count", "failed_count", "NextResponse", "json", "meta", "api_version", "unified", "parameters", "body"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5b85fae89b5ecd2266b362df58ea234b9ab4c082"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_64yuspxp6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_64yuspxp6();
cov_64yuspxp6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[0]++;
  cov_64yuspxp6().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_64yuspxp6().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_64yuspxp6().f[1]++;
    cov_64yuspxp6().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_64yuspxp6().f[2]++;
    cov_64yuspxp6().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_64yuspxp6().f[3]++;
    cov_64yuspxp6().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_64yuspxp6().s[7]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_64yuspxp6().s[8]++, require("zod"));
const _child_process =
/* istanbul ignore next */
(cov_64yuspxp6().s[9]++, require("child_process"));
const _util =
/* istanbul ignore next */
(cov_64yuspxp6().s[10]++, require("util"));
const _playwright =
/* istanbul ignore next */
(cov_64yuspxp6().s[11]++, require("playwright"));
const _promises =
/* istanbul ignore next */
(/*#__PURE__*/cov_64yuspxp6().s[12]++, _interop_require_default(require("node:fs/promises")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_64yuspxp6().s[13]++, _interop_require_default(require("path")));
const _supabasejs =
/* istanbul ignore next */
(cov_64yuspxp6().s[14]++, require("@supabase/supabase-js"));
const _supabase =
/* istanbul ignore next */
(cov_64yuspxp6().s[15]++, require("../../../../lib/integrations/supabase"));
const _adminauth =
/* istanbul ignore next */
(cov_64yuspxp6().s[16]++, require("../../../../lib/auth/admin-auth"));
const _advancedtestflows =
/* istanbul ignore next */
(cov_64yuspxp6().s[17]++, require("../../../../lib/testing/advanced-test-flows"));
const _apitimeouts =
/* istanbul ignore next */
(cov_64yuspxp6().s[18]++, require("../../../../lib/config/api-timeouts"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[4]++;
  cov_64yuspxp6().s[19]++;
  return /* istanbul ignore next */(cov_64yuspxp6().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_64yuspxp6().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_64yuspxp6().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_64yuspxp6().b[0][1]++, {
    default: obj
  });
}
const runtime =
/* istanbul ignore next */
(cov_64yuspxp6().s[20]++, 'nodejs');
// import {
//   sendWelcomeEmail,
//   sendOrderConfirmationEmail,
//   sendPasswordResetEmail,
//   getEmailServiceConfig
// } from '@/lib/email';
const execAsync =
/* istanbul ignore next */
(cov_64yuspxp6().s[21]++, (0, _util.promisify)(_child_process.exec));
// ===================================
// SCHEMAS DE VALIDACIÃN
// ===================================
const TestModuleSchema =
/* istanbul ignore next */
(cov_64yuspxp6().s[22]++, _zod.z.enum(['connection', 'auth', 'screenshots', 'execution', 'flows', 'email', 'middleware', 'reports', 'user-profile', 'all' // Ejecutar todos los tests
]));
const UnifiedTestParamsSchema =
/* istanbul ignore next */
(cov_64yuspxp6().s[23]++, _zod.z.object({
  module: TestModuleSchema.default('connection'),
  detailed: _zod.z.boolean().default(false),
  user_id: _zod.z.string().optional(),
  include_sensitive: _zod.z.boolean().default(false)
}));
const UnifiedTestPostSchema =
/* istanbul ignore next */
(cov_64yuspxp6().s[24]++, _zod.z.object({
  module: TestModuleSchema,
  config: _zod.z.object({
    // Screenshot config
    url: _zod.z.string().url().optional(),
    stepName: _zod.z.string().optional(),
    selector: _zod.z.string().optional(),
    fullPage: _zod.z.boolean().default(false),
    width: _zod.z.number().default(1280),
    height: _zod.z.number().default(720),
    // Test execution config
    suites: _zod.z.array(_zod.z.string()).optional(),
    timeout: _zod.z.number().default(60000),
    generateReport: _zod.z.boolean().default(true),
    // Email test config
    email: _zod.z.string().email().optional(),
    userName: _zod.z.string().optional(),
    emailType: _zod.z.enum(['welcome', 'order', 'reset']).optional(),
    // Flow test config
    flowId: _zod.z.string().optional(),
    executionId: _zod.z.string().optional(),
    // General config
    test_data: _zod.z.any().optional()
  }).optional()
}));
// ===================================
// CONFIGURACIÃN DE TEST SUITES
// ===================================
const TEST_SUITES =
/* istanbul ignore next */
(cov_64yuspxp6().s[25]++, {
  unit: {
    name: 'Tests Unitarios',
    command: 'npm test -- --testPathPattern="__tests__/(hooks|utils|lib)" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.default,
    description: 'Tests unitarios de hooks, utilities y librerÃ­as'
  },
  components: {
    name: 'Tests de Componentes',
    command: 'npm test -- --testPathPattern="__tests__/(components|optimization)" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.default + 30000,
    description: 'Tests de componentes React y optimizaciones'
  },
  e2e: {
    name: 'Tests E2E',
    command: 'npx playwright test --project=ui-admin --reporter=json',
    timeout: _apitimeouts.API_TIMEOUTS.upload * 2.5,
    description: 'Tests end-to-end con Playwright'
  },
  performance: {
    name: 'Tests de Performance',
    command: 'npm test -- --testPathPattern="performance" --passWithNoTests',
    timeout: 120000,
    description: 'Tests de performance y Core Web Vitals'
  },
  api: {
    name: 'Tests de API',
    command: 'npm test -- --testPathPattern="api" --passWithNoTests',
    timeout: 90000,
    description: 'Tests de endpoints y APIs'
  }
});
// ===================================
// MÃDULOS DE TESTING
// ===================================
async function testConnection(detailed =
/* istanbul ignore next */
(cov_64yuspxp6().b[2][0]++, false)) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[5]++;
  cov_64yuspxp6().s[26]++;
  try {
    const supabaseUrl =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[27]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
    const supabaseKey =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[28]++, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
    /* istanbul ignore next */
    cov_64yuspxp6().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_64yuspxp6().b[4][0]++, !supabaseUrl) ||
    /* istanbul ignore next */
    (cov_64yuspxp6().b[4][1]++, !supabaseKey)) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[3][0]++;
      cov_64yuspxp6().s[30]++;
      throw new Error('Variables de entorno de Supabase no configuradas');
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[3][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[31]++, (0, _supabasejs.createClient)(supabaseUrl, supabaseKey));
    // Test de conexiÃ³n bÃ¡sica
    const {
      data: products,
      error: productsError
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[32]++, await supabase.from('products').select('id').limit(1));
    const {
      data: categories,
      error: categoriesError
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[33]++, await supabase.from('categories').select('id').limit(1));
    const {
      data: users,
      error: usersError
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[34]++, await supabase.from('user_profiles').select('id').limit(1));
    const results =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[35]++, {
      connection: !productsError,
      adminConnection: !categoriesError,
      userConnection: !usersError,
      crud:
      /* istanbul ignore next */
      (cov_64yuspxp6().b[5][0]++, !productsError) &&
      /* istanbul ignore next */
      (cov_64yuspxp6().b[5][1]++, !categoriesError),
      tables: {
        products: !productsError,
        categories: !categoriesError,
        user_profiles: !usersError
      }
    });
    const allPassed =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[36]++, Object.values(results.tables).every(Boolean));
    /* istanbul ignore next */
    cov_64yuspxp6().s[37]++;
    return {
      status: allPassed ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[6][0]++, 'success') :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[6][1]++, 'partial'),
      data: {
        ...results,
        summary: {
          total_tests: Object.keys(results.tables).length,
          passed: Object.values(results.tables).filter(Boolean).length,
          failed: Object.values(results.tables).filter(v => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[6]++;
            cov_64yuspxp6().s[38]++;
            return !v;
          }).length
        },
        ...(
        /* istanbul ignore next */
        (cov_64yuspxp6().b[7][0]++, detailed) &&
        /* istanbul ignore next */
        (cov_64yuspxp6().b[7][1]++, {
          errors: {
            products: productsError?.message,
            categories: categoriesError?.message,
            users: usersError?.message
          }
        }))
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[39]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testAuth(request, detailed =
/* istanbul ignore next */
(cov_64yuspxp6().b[8][0]++, false)) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[7]++;
  cov_64yuspxp6().s[40]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[41]++, await (0, _adminauth.getAuthenticatedUser)(request));
    const results =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[42]++, {
      authenticated: !!authResult.userId,
      userId: authResult.userId,
      hasError: !!authResult.error,
      method: 'getAuthenticatedUser()'
    });
    /* istanbul ignore next */
    cov_64yuspxp6().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_64yuspxp6().b[10][0]++, detailed) &&
    /* istanbul ignore next */
    (cov_64yuspxp6().b[10][1]++, authResult.userId)) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[9][0]++;
      // Test user profile lookup
      const {
        data: user,
        error
      } =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[44]++, await _supabase.supabaseAdmin.from('user_profiles').select('id, clerk_user_id, email, role_id, is_active').eq('clerk_user_id', authResult.userId).single());
      /* istanbul ignore next */
      cov_64yuspxp6().s[45]++;
      results['profile_lookup'] = {
        success: !error,
        user_found: !!user,
        error: error?.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[9][1]++;
    }
    cov_64yuspxp6().s[46]++;
    return {
      status: results.authenticated ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[11][0]++, 'success') :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[11][1]++, 'failed'),
      data: results,
      error: authResult.error
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[47]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testScreenshots(config) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[8]++;
  cov_64yuspxp6().s[48]++;
  try {
    const {
      url,
      stepName,
      description =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[12][0]++, 'Test screenshot'),
      selector,
      fullPage =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[13][0]++, false),
      width =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[14][0]++, 1280),
      height =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[15][0]++, 720)
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[49]++, config);
    /* istanbul ignore next */
    cov_64yuspxp6().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_64yuspxp6().b[17][0]++, !url) ||
    /* istanbul ignore next */
    (cov_64yuspxp6().b[17][1]++, !stepName)) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[16][0]++;
      cov_64yuspxp6().s[51]++;
      throw new Error('URL y stepName son requeridos para screenshots');
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[16][1]++;
    }
    const screenshotsDir =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[52]++, _path.default.join(process.cwd(), 'public', 'test-screenshots'));
    /* istanbul ignore next */
    cov_64yuspxp6().s[53]++;
    await _promises.default.mkdir(screenshotsDir, {
      recursive: true
    });
    const browser =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[54]++, await _playwright.chromium.launch({
      headless: true
    }));
    const page =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[55]++, await browser.newPage({
      viewport: {
        width,
        height
      }
    }));
    /* istanbul ignore next */
    cov_64yuspxp6().s[56]++;
    await page.goto(url, {
      waitUntil: 'networkidle'
    });
    const timestamp =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[57]++, new Date().toISOString().replace(/[:.]/g, '-'));
    const filename =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[58]++, `${stepName}-${timestamp}.png`);
    const filepath =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[59]++, _path.default.join(screenshotsDir, filename));
    /* istanbul ignore next */
    cov_64yuspxp6().s[60]++;
    if (selector) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[18][0]++;
      const element =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[61]++, await page.locator(selector));
      /* istanbul ignore next */
      cov_64yuspxp6().s[62]++;
      await element.screenshot({
        path: filepath
      });
    } else {
      /* istanbul ignore next */
      cov_64yuspxp6().b[18][1]++;
      cov_64yuspxp6().s[63]++;
      await page.screenshot({
        path: filepath,
        fullPage
      });
    }
    /* istanbul ignore next */
    cov_64yuspxp6().s[64]++;
    await browser.close();
    const stats =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[65]++, await _promises.default.stat(filepath));
    /* istanbul ignore next */
    cov_64yuspxp6().s[66]++;
    return {
      status: 'success',
      data: {
        screenshot: {
          id: `screenshot-${Date.now()}`,
          filename,
          path: filepath,
          url: `/test-screenshots/${filename}`,
          metadata: {
            width,
            height,
            size: stats.size,
            timestamp: new Date().toISOString(),
            selector:
            /* istanbul ignore next */
            (cov_64yuspxp6().b[19][0]++, selector) ||
            /* istanbul ignore next */
            (cov_64yuspxp6().b[19][1]++, 'full-page'),
            fullPage
          }
        }
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[67]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testExecution(config) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[9]++;
  cov_64yuspxp6().s[68]++;
  try {
    const {
      suites =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[20][0]++, ['unit']),
      timeout =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[21][0]++, 60000),
      generateReport =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[22][0]++, true)
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[69]++, config);
    const invalidSuites =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[70]++, suites.filter(suite => {
      /* istanbul ignore next */
      cov_64yuspxp6().f[10]++;
      cov_64yuspxp6().s[71]++;
      return !TEST_SUITES[suite];
    }));
    /* istanbul ignore next */
    cov_64yuspxp6().s[72]++;
    if (invalidSuites.length > 0) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[23][0]++;
      cov_64yuspxp6().s[73]++;
      throw new Error(`Suites invÃ¡lidas: ${invalidSuites.join(', ')}. Disponibles: ${Object.keys(TEST_SUITES).join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[23][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[74]++, []);
    const startTime =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[75]++, Date.now());
    /* istanbul ignore next */
    cov_64yuspxp6().s[76]++;
    for (const suiteKey of suites) {
      const suite =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[77]++, TEST_SUITES[suiteKey]);
      const suiteStartTime =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[78]++, Date.now());
      /* istanbul ignore next */
      cov_64yuspxp6().s[79]++;
      try {
        const {
          stdout,
          stderr
        } =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[80]++, await execAsync(suite.command, {
          timeout: suite.timeout,
          cwd: process.cwd(),
          env: {
            ...process.env,
            NODE_ENV: 'test',
            CI: 'true'
          }
        }));
        const suiteDuration =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[81]++, Date.now() - suiteStartTime);
        const parsed =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[82]++, parseTestOutput(stdout, stderr));
        /* istanbul ignore next */
        cov_64yuspxp6().s[83]++;
        results.push({
          suite: suiteKey,
          name: suite.name,
          status: 'success',
          duration: suiteDuration,
          ...parsed
        });
      } catch (execError) {
        const suiteDuration =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[84]++, Date.now() - suiteStartTime);
        const parsed =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[85]++, parseTestOutput(
        /* istanbul ignore next */
        (cov_64yuspxp6().b[24][0]++, execError.stdout) ||
        /* istanbul ignore next */
        (cov_64yuspxp6().b[24][1]++, ''),
        /* istanbul ignore next */
        (cov_64yuspxp6().b[25][0]++, execError.stderr) ||
        /* istanbul ignore next */
        (cov_64yuspxp6().b[25][1]++, '')));
        /* istanbul ignore next */
        cov_64yuspxp6().s[86]++;
        results.push({
          suite: suiteKey,
          name: suite.name,
          status: 'failed',
          duration: suiteDuration,
          error: execError.message,
          ...parsed
        });
      }
    }
    const totalDuration =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[87]++, Date.now() - startTime);
    const summary =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[88]++, {
      total_suites: results.length,
      passed_suites: results.filter(r => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[11]++;
        cov_64yuspxp6().s[89]++;
        return r.status === 'success';
      }).length,
      failed_suites: results.filter(r => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[12]++;
        cov_64yuspxp6().s[90]++;
        return r.status === 'failed';
      }).length,
      total_tests: results.reduce((sum, r) => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[13]++;
        cov_64yuspxp6().s[91]++;
        return sum + (
        /* istanbul ignore next */
        (cov_64yuspxp6().b[26][0]++, r.tests) ||
        /* istanbul ignore next */
        (cov_64yuspxp6().b[26][1]++, 0));
      }, 0),
      total_passed: results.reduce((sum, r) => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[14]++;
        cov_64yuspxp6().s[92]++;
        return sum + (
        /* istanbul ignore next */
        (cov_64yuspxp6().b[27][0]++, r.passed) ||
        /* istanbul ignore next */
        (cov_64yuspxp6().b[27][1]++, 0));
      }, 0),
      total_failed: results.reduce((sum, r) => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[15]++;
        cov_64yuspxp6().s[93]++;
        return sum + (
        /* istanbul ignore next */
        (cov_64yuspxp6().b[28][0]++, r.failed) ||
        /* istanbul ignore next */
        (cov_64yuspxp6().b[28][1]++, 0));
      }, 0),
      duration: totalDuration
    });
    /* istanbul ignore next */
    cov_64yuspxp6().s[94]++;
    if (generateReport) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[29][0]++;
      cov_64yuspxp6().s[95]++;
      await generateTestReport({
        results,
        summary
      });
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[29][1]++;
    }
    cov_64yuspxp6().s[96]++;
    return {
      status: summary.failed_suites === 0 ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[30][0]++, 'success') :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[30][1]++, 'partial'),
      data: {
        results,
        summary
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[97]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testFlows(config) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[16]++;
  cov_64yuspxp6().s[98]++;
  try {
    const {
      flowId,
      executionId
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[99]++, config);
    /* istanbul ignore next */
    cov_64yuspxp6().s[100]++;
    if (executionId) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[31][0]++;
      // Obtener ejecuciÃ³n especÃ­fica
      const execution =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[101]++, _advancedtestflows.testFlowManager.getExecution(executionId));
      /* istanbul ignore next */
      cov_64yuspxp6().s[102]++;
      if (!execution) {
        /* istanbul ignore next */
        cov_64yuspxp6().b[32][0]++;
        cov_64yuspxp6().s[103]++;
        throw new Error(`EjecuciÃ³n ${executionId} no encontrada`);
      } else
      /* istanbul ignore next */
      {
        cov_64yuspxp6().b[32][1]++;
      }
      const screenshotStats =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[104]++, _advancedtestflows.testFlowManager.getScreenshotStats(executionId));
      /* istanbul ignore next */
      cov_64yuspxp6().s[105]++;
      return {
        status: 'success',
        data: {
          execution: {
            ...execution,
            screenshotStats
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[31][1]++;
    }
    cov_64yuspxp6().s[106]++;
    if (flowId) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[33][0]++;
      // Obtener ejecuciones de un flujo especÃ­fico
      const executions =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[107]++, _advancedtestflows.testFlowManager.getExecutions(flowId));
      /* istanbul ignore next */
      cov_64yuspxp6().s[108]++;
      return {
        status: 'success',
        data: {
          flowId,
          executions: executions.map(exec => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[17]++;
            cov_64yuspxp6().s[109]++;
            return {
              ...exec,
              screenshotCount: (
              /* istanbul ignore next */
              (cov_64yuspxp6().b[34][0]++, exec.screenshots) ||
              /* istanbul ignore next */
              (cov_64yuspxp6().b[34][1]++, [])).length + exec.steps.reduce((total, step) => {
                /* istanbul ignore next */
                cov_64yuspxp6().f[18]++;
                cov_64yuspxp6().s[110]++;
                return total + (
                /* istanbul ignore next */
                (cov_64yuspxp6().b[35][0]++, step.screenshots) ||
                /* istanbul ignore next */
                (cov_64yuspxp6().b[35][1]++, [])).length;
              }, 0)
            };
          })
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[33][1]++;
    }
    // Obtener todos los flujos disponibles
    const flows =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[111]++, _advancedtestflows.testFlowManager.getAvailableFlows());
    const allExecutions =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[112]++, _advancedtestflows.testFlowManager.getExecutions());
    /* istanbul ignore next */
    cov_64yuspxp6().s[113]++;
    return {
      status: 'success',
      data: {
        flows,
        executions: allExecutions,
        summary: {
          total_flows: flows.length,
          total_executions: allExecutions.length,
          active_flows: flows.filter(f => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[19]++;
            cov_64yuspxp6().s[114]++;
            return f.enabled;
          }).length
        }
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[115]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testEmail(config) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[20]++;
  cov_64yuspxp6().s[116]++;
  try {
    const {
      email,
      userName,
      emailType =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[36][0]++, 'welcome')
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[117]++, config);
    /* istanbul ignore next */
    cov_64yuspxp6().s[118]++;
    if (
    /* istanbul ignore next */
    (cov_64yuspxp6().b[38][0]++, !email) ||
    /* istanbul ignore next */
    (cov_64yuspxp6().b[38][1]++, !userName)) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[37][0]++;
      cov_64yuspxp6().s[119]++;
      throw new Error('Email y userName son requeridos');
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[37][1]++;
    }
    // Verificar configuraciÃ³n
    const emailConfig =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[120]++, getEmailServiceConfig());
    /* istanbul ignore next */
    cov_64yuspxp6().s[121]++;
    if (!emailConfig.isReady) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[39][0]++;
      cov_64yuspxp6().s[122]++;
      return {
        status: 'failed',
        error: 'Servicio de email no configurado',
        data: {
          config: {
            hasApiKey: emailConfig.hasApiKey,
            fromEmail: emailConfig.fromEmail
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[39][1]++;
    }
    let result;
    /* istanbul ignore next */
    cov_64yuspxp6().s[123]++;
    switch (emailType) {
      case 'welcome':
        /* istanbul ignore next */
        cov_64yuspxp6().b[40][0]++;
        cov_64yuspxp6().s[124]++;
        result = await sendWelcomeEmail({
          email,
          userName
        });
        /* istanbul ignore next */
        cov_64yuspxp6().s[125]++;
        break;
      case 'order':
        /* istanbul ignore next */
        cov_64yuspxp6().b[40][1]++;
        cov_64yuspxp6().s[126]++;
        result = await sendOrderConfirmationEmail({
          email,
          userName,
          orderNumber: 'TEST-001',
          orderTotal: 99.99,
          items: [{
            name: 'Producto Test',
            quantity: 1,
            price: 99.99
          }]
        });
        /* istanbul ignore next */
        cov_64yuspxp6().s[127]++;
        break;
      case 'reset':
        /* istanbul ignore next */
        cov_64yuspxp6().b[40][2]++;
        cov_64yuspxp6().s[128]++;
        result = await sendPasswordResetEmail({
          email,
          userName,
          resetLink: 'https://www.pinteya.com/reset-password?token=test-token-123'
        });
        /* istanbul ignore next */
        cov_64yuspxp6().s[129]++;
        break;
      default:
        /* istanbul ignore next */
        cov_64yuspxp6().b[40][3]++;
        cov_64yuspxp6().s[130]++;
        throw new Error(`Tipo de email invÃ¡lido: ${emailType}`);
    }
    /* istanbul ignore next */
    cov_64yuspxp6().s[131]++;
    return {
      status: result.success ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[41][0]++, 'success') :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[41][1]++, 'failed'),
      data: {
        emailType,
        result,
        config: {
          service: 'configured',
          fromEmail: emailConfig.fromEmail
        }
      },
      error: result.success ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[42][0]++, undefined) :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[42][1]++, result.error)
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[132]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testMiddleware() {
  /* istanbul ignore next */
  cov_64yuspxp6().f[21]++;
  cov_64yuspxp6().s[133]++;
  // Este test simplemente verifica que el endpoint sea accesible
  // Si llegamos aquÃ­, significa que el middleware permitiÃ³ el acceso
  return {
    status: 'success',
    data: {
      middleware_test: 'passed',
      timestamp: new Date().toISOString(),
      endpoint: '/api/test/unified',
      note: 'Si este endpoint responde, el middleware estÃ¡ funcionando'
    }
  };
}
async function testReports() {
  /* istanbul ignore next */
  cov_64yuspxp6().f[22]++;
  cov_64yuspxp6().s[134]++;
  try {
    const publicReportsDir =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[135]++, _path.default.join(process.cwd(), 'public', 'test-reports'));
    const rootReportsDir =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[136]++, _path.default.join(process.cwd(), 'test-reports'));
    let reports =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[137]++, []);
    // Verificar carpeta public/test-reports
    /* istanbul ignore next */
    cov_64yuspxp6().s[138]++;
    try {
      const publicFiles =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[139]++, await _promises.default.readdir(publicReportsDir));
      /* istanbul ignore next */
      cov_64yuspxp6().s[140]++;
      reports = publicFiles.filter(file => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[23]++;
        cov_64yuspxp6().s[141]++;
        return file.endsWith('.json');
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[24]++;
        const timestampA =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[142]++, a.match(/\d+/));
        const timestampB =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[143]++, b.match(/\d+/));
        /* istanbul ignore next */
        cov_64yuspxp6().s[144]++;
        if (
        /* istanbul ignore next */
        (cov_64yuspxp6().b[44][0]++, timestampA) &&
        /* istanbul ignore next */
        (cov_64yuspxp6().b[44][1]++, timestampB)) {
          /* istanbul ignore next */
          cov_64yuspxp6().b[43][0]++;
          cov_64yuspxp6().s[145]++;
          return parseInt(timestampB[0]) - parseInt(timestampA[0]);
        } else
        /* istanbul ignore next */
        {
          cov_64yuspxp6().b[43][1]++;
        }
        cov_64yuspxp6().s[146]++;
        return b.localeCompare(a);
      });
    } catch {
      // Carpeta no existe, continuar
    }
    // Si no hay reportes en public, verificar carpeta raÃ­z
    /* istanbul ignore next */
    cov_64yuspxp6().s[147]++;
    if (reports.length === 0) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[45][0]++;
      cov_64yuspxp6().s[148]++;
      try {
        const rootFiles =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[149]++, await _promises.default.readdir(rootReportsDir));
        const jsonFiles =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[150]++, rootFiles.filter(file => {
          /* istanbul ignore next */
          cov_64yuspxp6().f[25]++;
          cov_64yuspxp6().s[151]++;
          return file.endsWith('.json');
        }));
        /* istanbul ignore next */
        cov_64yuspxp6().s[152]++;
        if (jsonFiles.length > 0) {
          /* istanbul ignore next */
          cov_64yuspxp6().b[46][0]++;
          cov_64yuspxp6().s[153]++;
          // Crear carpeta public si no existe
          await _promises.default.mkdir(publicReportsDir, {
            recursive: true
          });
          // Copiar archivos a public
          /* istanbul ignore next */
          cov_64yuspxp6().s[154]++;
          for (const file of jsonFiles) {
            const sourcePath =
            /* istanbul ignore next */
            (cov_64yuspxp6().s[155]++, _path.default.join(rootReportsDir, file));
            const destPath =
            /* istanbul ignore next */
            (cov_64yuspxp6().s[156]++, _path.default.join(publicReportsDir, file));
            /* istanbul ignore next */
            cov_64yuspxp6().s[157]++;
            await _promises.default.copyFile(sourcePath, destPath);
          }
          /* istanbul ignore next */
          cov_64yuspxp6().s[158]++;
          reports = jsonFiles;
        } else
        /* istanbul ignore next */
        {
          cov_64yuspxp6().b[46][1]++;
        }
      } catch {
        // Carpeta raÃ­z no existe, continuar
      }
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[45][1]++;
    }
    cov_64yuspxp6().s[159]++;
    return {
      status: 'success',
      data: {
        reports: reports.map(filename => {
          /* istanbul ignore next */
          cov_64yuspxp6().f[26]++;
          cov_64yuspxp6().s[160]++;
          return {
            filename,
            url: `/test-reports/${filename}`,
            timestamp:
            /* istanbul ignore next */
            (cov_64yuspxp6().b[47][0]++, filename.match(/\d+/)?.[0]) ||
            /* istanbul ignore next */
            (cov_64yuspxp6().b[47][1]++, 'unknown')
          };
        }),
        total: reports.length,
        directories: {
          public: publicReportsDir,
          root: rootReportsDir
        }
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[161]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
async function testUserProfile(request, userId) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[27]++;
  cov_64yuspxp6().s[162]++;
  try {
    let targetUserId =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[163]++, userId);
    /* istanbul ignore next */
    cov_64yuspxp6().s[164]++;
    if (!targetUserId) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[48][0]++;
      const authResult =
      /* istanbul ignore next */
      (cov_64yuspxp6().s[165]++, await (0, _adminauth.getAuthenticatedUser)(request));
      /* istanbul ignore next */
      cov_64yuspxp6().s[166]++;
      if (!authResult.userId) {
        /* istanbul ignore next */
        cov_64yuspxp6().b[49][0]++;
        cov_64yuspxp6().s[167]++;
        throw new Error('Usuario no autenticado y no se proporcionÃ³ user_id');
      } else
      /* istanbul ignore next */
      {
        cov_64yuspxp6().b[49][1]++;
      }
      cov_64yuspxp6().s[168]++;
      targetUserId = authResult.userId;
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[48][1]++;
    }
    // Consulta simple sin joins
    const {
      data: user,
      error
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[169]++, await _supabase.supabaseAdmin.from('user_profiles').select('id, clerk_user_id, email, role_id, is_active').eq('clerk_user_id', targetUserId).single());
    /* istanbul ignore next */
    cov_64yuspxp6().s[170]++;
    return {
      status: error ?
      /* istanbul ignore next */
      (cov_64yuspxp6().b[50][0]++, 'failed') :
      /* istanbul ignore next */
      (cov_64yuspxp6().b[50][1]++, 'success'),
      data: {
        user_found: !!user,
        user_data: user,
        query_params: {
          clerk_user_id: targetUserId
        }
      },
      error: error?.message
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[171]++;
    return {
      status: 'failed',
      error: error.message,
      data: null
    };
  }
}
// ===================================
// UTILIDADES
// ===================================
function parseTestOutput(stdout, stderr) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[28]++;
  const result =
  /* istanbul ignore next */
  (cov_64yuspxp6().s[172]++, {
    passed: 0,
    failed: 0,
    tests: 0,
    output: stdout,
    errors: stderr
  });
  /* istanbul ignore next */
  cov_64yuspxp6().s[173]++;
  try {
    // Intentar parsear diferentes formatos de output
    const testMatch =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[174]++, stdout.match(/Tests:\s+(\d+) failed,\s+(\d+) passed,\s+(\d+) total/));
    /* istanbul ignore next */
    cov_64yuspxp6().s[175]++;
    if (testMatch) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[51][0]++;
      cov_64yuspxp6().s[176]++;
      result.failed = parseInt(testMatch[1]);
      /* istanbul ignore next */
      cov_64yuspxp6().s[177]++;
      result.passed = parseInt(testMatch[2]);
      /* istanbul ignore next */
      cov_64yuspxp6().s[178]++;
      result.tests = parseInt(testMatch[3]);
      /* istanbul ignore next */
      cov_64yuspxp6().s[179]++;
      return result;
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[51][1]++;
    }
    // Formato alternativo
    const passedMatch =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[180]++, stdout.match(/(\d+) passing/));
    const failedMatch =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[181]++, stdout.match(/(\d+) failing/));
    /* istanbul ignore next */
    cov_64yuspxp6().s[182]++;
    if (passedMatch) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[52][0]++;
      cov_64yuspxp6().s[183]++;
      result.passed = parseInt(passedMatch[1]);
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[52][1]++;
    }
    cov_64yuspxp6().s[184]++;
    if (failedMatch) {
      /* istanbul ignore next */
      cov_64yuspxp6().b[53][0]++;
      cov_64yuspxp6().s[185]++;
      result.failed = parseInt(failedMatch[1]);
    } else
    /* istanbul ignore next */
    {
      cov_64yuspxp6().b[53][1]++;
    }
    cov_64yuspxp6().s[186]++;
    result.tests = result.passed + result.failed;
  } catch (parseError) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[187]++;
    console.warn('Error parseando output de tests:', parseError);
  }
  /* istanbul ignore next */
  cov_64yuspxp6().s[188]++;
  return result;
}
async function generateTestReport(data) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[29]++;
  cov_64yuspxp6().s[189]++;
  try {
    const reportsDir =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[190]++, _path.default.join(process.cwd(), 'public', 'test-reports'));
    /* istanbul ignore next */
    cov_64yuspxp6().s[191]++;
    await _promises.default.mkdir(reportsDir, {
      recursive: true
    });
    const report =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[192]++, {
      timestamp: new Date().toISOString(),
      type: 'unified-test-execution',
      version: '1.0.0',
      summary: data.summary,
      results: data.results.map(result => {
        /* istanbul ignore next */
        cov_64yuspxp6().f[30]++;
        cov_64yuspxp6().s[193]++;
        return {
          suite: result.suite,
          name: result.name,
          status: result.status,
          duration: result.duration,
          tests:
          /* istanbul ignore next */
          (cov_64yuspxp6().b[54][0]++, result.tests) ||
          /* istanbul ignore next */
          (cov_64yuspxp6().b[54][1]++, 0),
          passed:
          /* istanbul ignore next */
          (cov_64yuspxp6().b[55][0]++, result.passed) ||
          /* istanbul ignore next */
          (cov_64yuspxp6().b[55][1]++, 0),
          failed:
          /* istanbul ignore next */
          (cov_64yuspxp6().b[56][0]++, result.failed) ||
          /* istanbul ignore next */
          (cov_64yuspxp6().b[56][1]++, 0),
          error:
          /* istanbul ignore next */
          (cov_64yuspxp6().b[57][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_64yuspxp6().b[57][1]++, null)
        };
      }),
      metadata: {
        node_version: process.version,
        platform: process.platform,
        environment: 'test',
        generated_by: 'unified-test-api'
      }
    });
    const filename =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[194]++, `unified-test-execution-${Date.now()}.json`);
    const filepath =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[195]++, _path.default.join(reportsDir, filename));
    /* istanbul ignore next */
    cov_64yuspxp6().s[196]++;
    await _promises.default.writeFile(filepath, JSON.stringify(report, null, 2));
    /* istanbul ignore next */
    cov_64yuspxp6().s[197]++;
    return {
      filename,
      path: filepath,
      url: `/test-reports/${filename}`
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[198]++;
    console.error('Error generando reporte:', error);
    /* istanbul ignore next */
    cov_64yuspxp6().s[199]++;
    return null;
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[31]++;
  cov_64yuspxp6().s[200]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[201]++, new URL(request.url));
    const rawParams =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[202]++, {
      module:
      /* istanbul ignore next */
      (cov_64yuspxp6().b[58][0]++, searchParams.get('module')) ||
      /* istanbul ignore next */
      (cov_64yuspxp6().b[58][1]++, 'connection'),
      detailed: searchParams.get('detailed') === 'true',
      user_id:
      /* istanbul ignore next */
      (cov_64yuspxp6().b[59][0]++, searchParams.get('user_id')) ||
      /* istanbul ignore next */
      (cov_64yuspxp6().b[59][1]++, undefined),
      include_sensitive: searchParams.get('include_sensitive') === 'true'
    });
    const params =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[203]++, UnifiedTestParamsSchema.parse(rawParams));
    const timestamp =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[204]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_64yuspxp6().s[205]++;
    console.log(`ğ§ª Unified Test GET: Module ${params.module}`);
    let result;
    /* istanbul ignore next */
    cov_64yuspxp6().s[206]++;
    switch (params.module) {
      case 'connection':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][0]++;
        cov_64yuspxp6().s[207]++;
        result = await testConnection(params.detailed);
        /* istanbul ignore next */
        cov_64yuspxp6().s[208]++;
        break;
      case 'auth':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][1]++;
        cov_64yuspxp6().s[209]++;
        result = await testAuth(request, params.detailed);
        /* istanbul ignore next */
        cov_64yuspxp6().s[210]++;
        break;
      case 'middleware':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][2]++;
        cov_64yuspxp6().s[211]++;
        result = await testMiddleware();
        /* istanbul ignore next */
        cov_64yuspxp6().s[212]++;
        break;
      case 'reports':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][3]++;
        cov_64yuspxp6().s[213]++;
        result = await testReports();
        /* istanbul ignore next */
        cov_64yuspxp6().s[214]++;
        break;
      case 'user-profile':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][4]++;
        cov_64yuspxp6().s[215]++;
        result = await testUserProfile(request, params.user_id);
        /* istanbul ignore next */
        cov_64yuspxp6().s[216]++;
        break;
      case 'flows':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][5]++;
        cov_64yuspxp6().s[217]++;
        result = await testFlows({});
        /* istanbul ignore next */
        cov_64yuspxp6().s[218]++;
        break;
      case 'all':
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][6]++;
        // Ejecutar todos los mÃ³dulos bÃ¡sicos
        const modules =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[219]++, ['connection', 'auth', 'middleware', 'reports']);
        const results =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[220]++, {});
        /* istanbul ignore next */
        cov_64yuspxp6().s[221]++;
        for (const module of modules) {
          /* istanbul ignore next */
          cov_64yuspxp6().s[222]++;
          try {
            /* istanbul ignore next */
            cov_64yuspxp6().s[223]++;
            switch (module) {
              case 'connection':
                /* istanbul ignore next */
                cov_64yuspxp6().b[61][0]++;
                cov_64yuspxp6().s[224]++;
                results[module] = await testConnection(params.detailed);
                /* istanbul ignore next */
                cov_64yuspxp6().s[225]++;
                break;
              case 'auth':
                /* istanbul ignore next */
                cov_64yuspxp6().b[61][1]++;
                cov_64yuspxp6().s[226]++;
                results[module] = await testAuth(request, params.detailed);
                /* istanbul ignore next */
                cov_64yuspxp6().s[227]++;
                break;
              case 'middleware':
                /* istanbul ignore next */
                cov_64yuspxp6().b[61][2]++;
                cov_64yuspxp6().s[228]++;
                results[module] = await testMiddleware();
                /* istanbul ignore next */
                cov_64yuspxp6().s[229]++;
                break;
              case 'reports':
                /* istanbul ignore next */
                cov_64yuspxp6().b[61][3]++;
                cov_64yuspxp6().s[230]++;
                results[module] = await testReports();
                /* istanbul ignore next */
                cov_64yuspxp6().s[231]++;
                break;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_64yuspxp6().s[232]++;
            results[module] = {
              status: 'failed',
              error: error.message,
              data: null
            };
          }
        }
        const summary =
        /* istanbul ignore next */
        (cov_64yuspxp6().s[233]++, {
          total_modules: modules.length,
          success_count: Object.values(results).filter(r => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[32]++;
            cov_64yuspxp6().s[234]++;
            return r.status === 'success';
          }).length,
          partial_count: Object.values(results).filter(r => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[33]++;
            cov_64yuspxp6().s[235]++;
            return r.status === 'partial';
          }).length,
          failed_count: Object.values(results).filter(r => {
            /* istanbul ignore next */
            cov_64yuspxp6().f[34]++;
            cov_64yuspxp6().s[236]++;
            return r.status === 'failed';
          }).length
        });
        /* istanbul ignore next */
        cov_64yuspxp6().s[237]++;
        result = {
          status: summary.failed_count === 0 ?
          /* istanbul ignore next */
          (cov_64yuspxp6().b[62][0]++, 'success') :
          /* istanbul ignore next */
          (cov_64yuspxp6().b[62][1]++, 'partial'),
          data: results,
          summary
        };
        /* istanbul ignore next */
        cov_64yuspxp6().s[238]++;
        break;
      default:
        /* istanbul ignore next */
        cov_64yuspxp6().b[60][7]++;
        cov_64yuspxp6().s[239]++;
        throw new Error(`MÃ³dulo no soportado: ${params.module}`);
    }
    /* istanbul ignore next */
    cov_64yuspxp6().s[240]++;
    return _server.NextResponse.json({
      timestamp,
      module: params.module,
      status: result.status,
      data: result.data,
      error: result.error,
      meta: {
        api_version: '1.0.0',
        unified: true,
        parameters: {
          module: params.module,
          detailed: params.detailed,
          include_sensitive: params.include_sensitive
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[241]++;
    console.error('â Error en Unified Test API:', error);
    /* istanbul ignore next */
    cov_64yuspxp6().s[242]++;
    return _server.NextResponse.json({
      timestamp: new Date().toISOString(),
      module: 'unknown',
      status: 'failed',
      data: null,
      error: error.message,
      meta: {
        api_version: '1.0.0',
        unified: true,
        parameters: null
      }
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_64yuspxp6().f[35]++;
  cov_64yuspxp6().s[243]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[244]++, await request.json());
    const {
      module,
      config =
      /* istanbul ignore next */
      (cov_64yuspxp6().b[63][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[245]++, UnifiedTestPostSchema.parse(body));
    const timestamp =
    /* istanbul ignore next */
    (cov_64yuspxp6().s[246]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_64yuspxp6().s[247]++;
    console.log(`ğ§ª Unified Test POST: Module ${module}`);
    let result;
    /* istanbul ignore next */
    cov_64yuspxp6().s[248]++;
    switch (module) {
      case 'screenshots':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][0]++;
        cov_64yuspxp6().s[249]++;
        result = await testScreenshots(config);
        /* istanbul ignore next */
        cov_64yuspxp6().s[250]++;
        break;
      case 'execution':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][1]++;
        cov_64yuspxp6().s[251]++;
        result = await testExecution(config);
        /* istanbul ignore next */
        cov_64yuspxp6().s[252]++;
        break;
      case 'flows':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][2]++;
        cov_64yuspxp6().s[253]++;
        result = await testFlows(config);
        /* istanbul ignore next */
        cov_64yuspxp6().s[254]++;
        break;
      case 'email':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][3]++;
        cov_64yuspxp6().s[255]++;
        result = await testEmail(config);
        /* istanbul ignore next */
        cov_64yuspxp6().s[256]++;
        break;
      case 'auth':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][4]++;
        cov_64yuspxp6().s[257]++;
        result = await testAuth(request, true);
        /* istanbul ignore next */
        cov_64yuspxp6().s[258]++;
        break;
      case 'connection':
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][5]++;
        cov_64yuspxp6().s[259]++;
        result = await testConnection(true);
        /* istanbul ignore next */
        cov_64yuspxp6().s[260]++;
        break;
      default:
        /* istanbul ignore next */
        cov_64yuspxp6().b[64][6]++;
        cov_64yuspxp6().s[261]++;
        throw new Error(`MÃ³dulo POST no soportado: ${module}`);
    }
    /* istanbul ignore next */
    cov_64yuspxp6().s[262]++;
    return _server.NextResponse.json({
      timestamp,
      module,
      status: result.status,
      data: result.data,
      error: result.error,
      meta: {
        api_version: '1.0.0',
        unified: true,
        method: 'POST',
        config: config
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_64yuspxp6().s[263]++;
    console.error('â Error en Unified Test API POST:', error);
    /* istanbul ignore next */
    cov_64yuspxp6().s[264]++;
    return _server.NextResponse.json({
      timestamp: new Date().toISOString(),
      module: 'unknown',
      status: 'failed',
      data: null,
      error: error.message,
      meta: {
        api_version: '1.0.0',
        unified: true,
        method: 'POST'
      }
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,