161febf2eb2a9f134acbbe055357a665
// ===================================
// TESTS DE COMPONENTES - ADMIN DASHBOARD
// Tests para el panel de administración
// ===================================
"use strict";
// Mocks
jest.mock('@/lib/supabase', ()=>({
        supabase: {
            auth: {
                getUser: jest.fn()
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    gte: jest.fn(()=>({
                                            lte: jest.fn(()=>({
                                                    order: jest.fn(()=>({
                                                            limit: jest.fn()
                                                        }))
                                                }))
                                        }))
                                })),
                            count: jest.fn(),
                            single: jest.fn()
                        }))
                }))
        }
    }));
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                refresh: jest.fn()
            })
    }));
// Mock de Chart.js
jest.mock('react-chartjs-2', ()=>({
        Line: ({ data, options })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "line-chart",
                "data-chart-data": JSON.stringify(data),
                children: [
                    "Chart: ",
                    data.datasets[0].label
                ]
            }),
        Bar: ({ data, options })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "bar-chart",
                "data-chart-data": JSON.stringify(data),
                children: [
                    "Chart: ",
                    data.datasets[0].label
                ]
            }),
        Doughnut: ({ data, options })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "doughnut-chart",
                "data-chart-data": JSON.stringify(data),
                children: [
                    "Chart: ",
                    data.datasets[0].label
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactquery = require("@tanstack/react-query");
const _AdminDashboard = require("../../../components/admin/AdminDashboard");
const _AuthContext = require("../../../contexts/AuthContext");
const _supabase = require("../../../lib/integrations/supabase");
const _sonner = require("sonner");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Datos de prueba
const mockAdminUser = {
    id: 'admin-123',
    email: 'admin@example.com',
    user_metadata: {
        full_name: 'Admin User',
        role: 'admin'
    }
};
const mockDashboardData = {
    stats: {
        totalOrders: 150,
        totalRevenue: 45000,
        totalProducts: 89,
        totalUsers: 1250,
        pendingOrders: 12,
        lowStockProducts: 5
    },
    recentOrders: [
        {
            id: 'order-1',
            user_email: 'user1@example.com',
            total: 299.99,
            status: 'pending',
            created_at: '2024-01-15T10:30:00Z',
            items: [
                {
                    product_name: 'Laptop Gaming',
                    quantity: 1,
                    price: 299.99
                }
            ]
        },
        {
            id: 'order-2',
            user_email: 'user2@example.com',
            total: 149.5,
            status: 'completed',
            created_at: '2024-01-15T09:15:00Z',
            items: [
                {
                    product_name: 'Mouse Inalámbrico',
                    quantity: 2,
                    price: 74.75
                }
            ]
        }
    ],
    salesData: {
        daily: [
            {
                date: '2024-01-10',
                sales: 1200
            },
            {
                date: '2024-01-11',
                sales: 1500
            },
            {
                date: '2024-01-12',
                sales: 1800
            },
            {
                date: '2024-01-13',
                sales: 1300
            },
            {
                date: '2024-01-14',
                sales: 2100
            },
            {
                date: '2024-01-15',
                sales: 1900
            }
        ],
        monthly: [
            {
                month: 'Dic 2023',
                sales: 35000
            },
            {
                month: 'Ene 2024',
                sales: 45000
            }
        ]
    },
    topProducts: [
        {
            id: 1,
            name: 'Laptop Gaming',
            sales: 25,
            revenue: 7499.75
        },
        {
            id: 2,
            name: 'Mouse Inalámbrico',
            sales: 45,
            revenue: 3367.5
        },
        {
            id: 3,
            name: 'Teclado Mecánico',
            sales: 32,
            revenue: 4800.0
        }
    ],
    lowStockProducts: [
        {
            id: 1,
            name: 'Laptop Gaming',
            stock: 2,
            min_stock: 5
        },
        {
            id: 2,
            name: 'Monitor 4K',
            stock: 1,
            min_stock: 3
        }
    ]
};
// Wrapper de providers
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: children
            })
        });
};
describe('AdminDashboard Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _supabase.supabase.auth.getUser.mockResolvedValue({
            data: {
                user: mockAdminUser
            },
            error: null
        });
    });
    describe('Renderizado Inicial', ()=>{
        it('debe renderizar el dashboard correctamente', async ()=>{
            // Mock de datos del dashboard
            ;
            _supabase.supabase.from.mockImplementation((table)=>{
                const mockQueries = {
                    orders: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalOrders
                                })
                            }))
                    },
                    products: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalProducts
                                })
                            }))
                    },
                    users: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalUsers
                                })
                            }))
                    }
                };
                return mockQueries[table] || {
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    order: jest.fn(()=>({
                                            limit: jest.fn().mockResolvedValue({
                                                data: []
                                            })
                                        }))
                                }))
                        }))
                };
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            // Verificar título principal
            expect(_react.screen.getByText('Panel de Administración')).toBeInTheDocument();
            // Verificar que se muestran las secciones principales
            expect(_react.screen.getByText('Estadísticas Generales')).toBeInTheDocument();
            expect(_react.screen.getByText('Órdenes Recientes')).toBeInTheDocument();
            expect(_react.screen.getByText('Análisis de Ventas')).toBeInTheDocument();
        });
        it('debe mostrar loading state inicialmente', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            expect(_react.screen.getByTestId('dashboard-loading')).toBeInTheDocument();
            expect(_react.screen.getByText('Cargando dashboard...')).toBeInTheDocument();
        });
        it('debe manejar errores de carga', async ()=>{
            ;
            _supabase.supabase.from.mockImplementation(()=>({
                    select: jest.fn(()=>({
                            count: jest.fn().mockRejectedValue(new Error('Database error'))
                        }))
                }));
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Error al cargar el dashboard')).toBeInTheDocument();
                expect(_react.screen.getByText('Reintentar')).toBeInTheDocument();
            });
        });
    });
    describe('Estadísticas Generales', ()=>{
        beforeEach(()=>{
            // Mock exitoso de estadísticas
            ;
            _supabase.supabase.from.mockImplementation((table)=>{
                const responses = {
                    orders: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalOrders
                                }),
                                eq: jest.fn(()=>({
                                        count: jest.fn().mockResolvedValue({
                                            count: mockDashboardData.stats.pendingOrders
                                        })
                                    }))
                            }))
                    },
                    products: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalProducts
                                }),
                                lt: jest.fn(()=>({
                                        count: jest.fn().mockResolvedValue({
                                            count: mockDashboardData.stats.lowStockProducts
                                        })
                                    }))
                            }))
                    },
                    users: {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: mockDashboardData.stats.totalUsers
                                })
                            }))
                    }
                };
                return responses[table];
            });
        });
        it('debe mostrar las estadísticas correctamente', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('150')).toBeInTheDocument(); // Total órdenes
                expect(_react.screen.getByText('89')).toBeInTheDocument(); // Total productos
                expect(_react.screen.getByText('1,250')).toBeInTheDocument(); // Total usuarios
                expect(_react.screen.getByText('12')).toBeInTheDocument(); // Órdenes pendientes
            });
            // Verificar etiquetas
            expect(_react.screen.getByText('Total Órdenes')).toBeInTheDocument();
            expect(_react.screen.getByText('Total Productos')).toBeInTheDocument();
            expect(_react.screen.getByText('Total Usuarios')).toBeInTheDocument();
            expect(_react.screen.getByText('Órdenes Pendientes')).toBeInTheDocument();
        });
        it('debe mostrar alertas para productos con bajo stock', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                const lowStockAlert = _react.screen.getByTestId('low-stock-alert');
                expect(lowStockAlert).toBeInTheDocument();
                expect((0, _react.within)(lowStockAlert).getByText('5 productos con bajo stock')).toBeInTheDocument();
            });
        });
        it('debe permitir navegar a secciones específicas', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Ver todas las órdenes')).toBeInTheDocument();
            });
            // Click en "Ver todas las órdenes"
            await user.click(_react.screen.getByText('Ver todas las órdenes'));
        // Verificar navegación (esto dependería de la implementación real)
        // En un test real, verificaríamos que se llama al router
        });
    });
    describe('Órdenes Recientes', ()=>{
        beforeEach(()=>{
            ;
            _supabase.supabase.from.mockImplementation((table)=>{
                if (table === 'orders') {
                    return {
                        select: jest.fn(()=>({
                                order: jest.fn(()=>({
                                        limit: jest.fn().mockResolvedValue({
                                            data: mockDashboardData.recentOrders
                                        })
                                    }))
                            }))
                    };
                }
                return {
                    select: jest.fn(()=>({
                            count: jest.fn().mockResolvedValue({
                                count: 0
                            })
                        }))
                };
            });
        });
        it('debe mostrar las órdenes recientes', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('user1@example.com')).toBeInTheDocument();
                expect(_react.screen.getByText('user2@example.com')).toBeInTheDocument();
                expect(_react.screen.getByText('$299.99')).toBeInTheDocument();
                expect(_react.screen.getByText('$149.50')).toBeInTheDocument();
            });
        });
        it('debe mostrar el estado de las órdenes con colores apropiados', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                const pendingStatus = _react.screen.getByText('pending');
                const completedStatus = _react.screen.getByText('completed');
                expect(pendingStatus).toHaveClass('status-pending');
                expect(completedStatus).toHaveClass('status-completed');
            });
        });
        it('debe permitir ver detalles de una orden', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Ver detalles')).toBeInTheDocument();
            });
            await user.click(_react.screen.getAllByText('Ver detalles')[0]);
            // Verificar que se abre el modal o navega a la página de detalles
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Detalles de la Orden')).toBeInTheDocument();
            });
        });
        it('debe permitir cambiar el estado de una orden', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.from.mockImplementation((table)=>{
                if (table === 'orders') {
                    return {
                        select: jest.fn(()=>({
                                order: jest.fn(()=>({
                                        limit: jest.fn().mockResolvedValue({
                                            data: mockDashboardData.recentOrders
                                        })
                                    }))
                            })),
                        update: jest.fn(()=>({
                                eq: jest.fn().mockResolvedValue({
                                    data: [
                                        {
                                            ...mockDashboardData.recentOrders[0],
                                            status: 'processing'
                                        }
                                    ],
                                    error: null
                                })
                            }))
                    };
                }
                return {
                    select: jest.fn(()=>({
                            count: jest.fn().mockResolvedValue({
                                count: 0
                            })
                        }))
                };
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getAllByText('Cambiar Estado')[0]).toBeInTheDocument();
            });
            await user.click(_react.screen.getAllByText('Cambiar Estado')[0]);
            // Seleccionar nuevo estado
            const statusSelect = _react.screen.getByTestId('status-select');
            await user.selectOptions(statusSelect, 'processing');
            await user.click(_react.screen.getByText('Actualizar'));
            await (0, _react.waitFor)(()=>{
                expect(_sonner.toast.success).toHaveBeenCalledWith('Estado de orden actualizado');
            });
        });
    });
    describe('Gráficos y Análisis', ()=>{
        beforeEach(()=>{
            // Mock de datos de ventas
            ;
            _supabase.supabase.from.mockImplementation((table)=>{
                if (table === 'orders') {
                    return {
                        select: jest.fn(()=>({
                                gte: jest.fn(()=>({
                                        lte: jest.fn(()=>({
                                                order: jest.fn().mockResolvedValue({
                                                    data: mockDashboardData.salesData.daily
                                                })
                                            }))
                                    }))
                            }))
                    };
                }
                return {
                    select: jest.fn(()=>({
                            count: jest.fn().mockResolvedValue({
                                count: 0
                            })
                        }))
                };
            });
        });
        it('debe mostrar gráfico de ventas diarias', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('line-chart')).toBeInTheDocument();
            });
            const chart = _react.screen.getByTestId('line-chart');
            const chartData = JSON.parse(chart.getAttribute('data-chart-data') || '{}');
            expect(chartData.datasets[0].label).toBe('Ventas Diarias');
            expect(chartData.labels).toContain('2024-01-15');
        });
        it('debe mostrar gráfico de productos más vendidos', async ()=>{
            // Mock para productos más vendidos
            ;
            _supabase.supabase.from.mockImplementation((table)=>{
                if (table === 'order_items') {
                    return {
                        select: jest.fn(()=>({
                                order: jest.fn(()=>({
                                        limit: jest.fn().mockResolvedValue({
                                            data: mockDashboardData.topProducts
                                        })
                                    }))
                            }))
                    };
                }
                return {
                    select: jest.fn(()=>({
                            count: jest.fn().mockResolvedValue({
                                count: 0
                            })
                        }))
                };
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('bar-chart')).toBeInTheDocument();
            });
            const chart = _react.screen.getByTestId('bar-chart');
            const chartData = JSON.parse(chart.getAttribute('data-chart-data') || '{}');
            expect(chartData.datasets[0].label).toBe('Productos Más Vendidos');
        });
        it('debe permitir cambiar el período de análisis', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('period-selector')).toBeInTheDocument();
            });
            // Cambiar a vista mensual
            await user.selectOptions(_react.screen.getByTestId('period-selector'), 'monthly');
            await (0, _react.waitFor)(()=>{
                // Verificar que se actualiza el gráfico
                expect(_react.screen.getByText('Ventas Mensuales')).toBeInTheDocument();
            });
        });
    });
    describe('Funcionalidades de Administración', ()=>{
        it('debe mostrar acciones rápidas', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Acciones Rápidas')).toBeInTheDocument();
                expect(_react.screen.getByText('Agregar Producto')).toBeInTheDocument();
                expect(_react.screen.getByText('Ver Inventario')).toBeInTheDocument();
                expect(_react.screen.getByText('Gestionar Usuarios')).toBeInTheDocument();
            });
        });
        it('debe permitir exportar datos', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Exportar Datos')).toBeInTheDocument();
            });
            await user.click(_react.screen.getByText('Exportar Datos'));
            // Verificar opciones de exportación
            expect(_react.screen.getByText('Exportar Órdenes')).toBeInTheDocument();
            expect(_react.screen.getByText('Exportar Productos')).toBeInTheDocument();
            expect(_react.screen.getByText('Exportar Usuarios')).toBeInTheDocument();
        });
        it('debe mostrar notificaciones importantes', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('notifications-panel')).toBeInTheDocument();
            });
            // Verificar notificaciones de stock bajo
            expect(_react.screen.getByText('Productos con stock bajo')).toBeInTheDocument();
            // Verificar notificaciones de órdenes pendientes
            expect(_react.screen.getByText('Órdenes pendientes de procesamiento')).toBeInTheDocument();
        });
        it('debe actualizar datos en tiempo real', async ()=>{
            const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            // Simular actualización de datos
            const updatedStats = {
                ...mockDashboardData.stats,
                totalOrders: 155,
                pendingOrders: 15
            };
            _supabase.supabase.from.mockImplementation((table)=>{
                if (table === 'orders') {
                    return {
                        select: jest.fn(()=>({
                                count: jest.fn().mockResolvedValue({
                                    count: updatedStats.totalOrders
                                }),
                                eq: jest.fn(()=>({
                                        count: jest.fn().mockResolvedValue({
                                            count: updatedStats.pendingOrders
                                        })
                                    }))
                            }))
                    };
                }
                return {
                    select: jest.fn(()=>({
                            count: jest.fn().mockResolvedValue({
                                count: 0
                            })
                        }))
                };
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('155')).toBeInTheDocument();
                expect(_react.screen.getByText('15')).toBeInTheDocument();
            });
        });
    });
    describe('Responsive Design', ()=>{
        it('debe adaptarse a pantallas móviles', ()=>{
            // Simular viewport móvil
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            // Verificar que se muestra la versión móvil
            expect(_react.screen.getByTestId('mobile-dashboard')).toBeInTheDocument();
            // Verificar que las estadísticas se muestran en formato de tarjetas apiladas
            expect(_react.screen.getByTestId('mobile-stats-grid')).toBeInTheDocument();
        });
        it('debe mostrar menú hamburguesa en móvil', async ()=>{
            const user = _userevent.default.setup();
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            const hamburgerMenu = _react.screen.getByTestId('mobile-menu-toggle');
            expect(hamburgerMenu).toBeInTheDocument();
            await user.click(hamburgerMenu);
            expect(_react.screen.getByTestId('mobile-navigation-menu')).toBeVisible();
        });
    });
    describe('Accesibilidad', ()=>{
        it('debe tener etiquetas ARIA apropiadas', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            expect(_react.screen.getByRole('main')).toHaveAttribute('aria-label', 'Panel de administración');
            expect(_react.screen.getByRole('region', {
                name: 'Estadísticas generales'
            })).toBeInTheDocument();
            expect(_react.screen.getByRole('region', {
                name: 'Órdenes recientes'
            })).toBeInTheDocument();
        });
        it('debe ser navegable por teclado', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            // Verificar que los elementos interactivos son focusables
            await user.tab();
            expect(_react.screen.getByText('Ver todas las órdenes')).toHaveFocus();
            await user.tab();
            expect(_react.screen.getByText('Agregar Producto')).toHaveFocus();
        });
        it('debe anunciar cambios importantes a lectores de pantalla', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminDashboard.AdminDashboard, {}), {
                wrapper: createWrapper()
            });
            // Verificar región de anuncios
            expect(_react.screen.getByRole('status')).toBeInTheDocument();
            // Simular actualización de datos
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByRole('status')).toHaveTextContent('Dashboard actualizado con nuevos datos');
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,