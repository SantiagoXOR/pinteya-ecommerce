{"version":3,"names":["cov_k9n1f2cl8","actualCoverage","s","GET","f","POST","runtime","request","console","log","session","_config","auth","user","id","b","_server","NextResponse","json","success","error","requiresAuth","status","userId","body","productId","quantity","replace","field","Number","isInteger","supabase","_supabase","getSupabaseClient","retry","data","product","productError","from","select","eq","single","stock","availableStock","requestedQuantity","productName","name","existingItem","existingError","finalQuantity","operation","currentQuantity","maxCanAdd","cartItem","cartError","upsert","user_id","product_id","onConflict","details","message","cartSummary","summaryError","totalItems","reduce","sum","item","totalProducts","length","responseMessage","added","updated","increased","price","discounted_price","addedQuantity","cart","images","brand","category","endpoint","method","description","parameters","example","authentication","responses"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\cart\\add\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API AGREGAR AL CARRITO\r\n// ===================================\r\n// Endpoint espec√≠fico para agregar productos al carrito\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n/**\r\n * POST /api/cart/add\r\n * Agregar un producto espec√≠fico al carrito\r\n * Endpoint optimizado para botones \"Agregar al carrito\"\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üõí Cart Add API: Iniciando proceso de agregar al carrito');\r\n\r\n    // Verificar autenticaci√≥n\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      console.log('‚ùå Cart Add API: Usuario no autenticado');\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Debes iniciar sesi√≥n para agregar productos al carrito',\r\n          requiresAuth: true\r\n        }, \r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Obtener datos del request\r\n    const body = await request.json();\r\n    const { productId, quantity = 1, replace = false } = body;\r\n\r\n    // Validaciones de entrada\r\n    if (!productId) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'ID del producto es requerido',\r\n          field: 'productId'\r\n        }, \r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!Number.isInteger(quantity) || quantity <= 0 || quantity > 99) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'La cantidad debe ser un n√∫mero entero entre 1 y 99',\r\n          field: 'quantity'\r\n        }, \r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(`üîç Cart Add API: Agregando producto ${productId} (cantidad: ${quantity}, replace: ${replace}) para usuario ${userId}`);\r\n\r\n    // Obtener cliente de Supabase\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      console.error('‚ùå Cart Add API: Cliente de Supabase no disponible');\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Servicio de base de datos temporalmente no disponible',\r\n          retry: true\r\n        }, \r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // 1. Verificar que el producto existe y obtener informaci√≥n\r\n    const { data: product, error: productError } = await supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        price,\r\n        discounted_price,\r\n        stock,\r\n        images,\r\n        brand,\r\n        category:categories (\r\n          id,\r\n          name\r\n        )\r\n      `)\r\n      .eq('id', productId)\r\n      .single();\r\n\r\n    if (productError || !product) {\r\n      console.log(`‚ùå Cart Add API: Producto ${productId} no encontrado`);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'El producto solicitado no existe o no est√° disponible',\r\n          productId\r\n        }, \r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // 2. Verificar stock disponible\r\n    if (product.stock < quantity) {\r\n      console.log(`‚ùå Cart Add API: Stock insuficiente para producto ${productId}. Stock: ${product.stock}, Solicitado: ${quantity}`);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: `Stock insuficiente. Solo quedan ${product.stock} unidades disponibles`,\r\n          availableStock: product.stock,\r\n          requestedQuantity: quantity,\r\n          productName: product.name\r\n        }, \r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // 3. Verificar si el producto ya est√° en el carrito\r\n    const { data: existingItem, error: existingError } = await supabase\r\n      .from('cart_items')\r\n      .select('id, quantity')\r\n      .eq('user_id', userId)\r\n      .eq('product_id', productId)\r\n      .single();\r\n\r\n    let finalQuantity = quantity;\r\n    let operation = 'added';\r\n\r\n    if (existingItem && !existingError) {\r\n      if (replace) {\r\n        // Reemplazar cantidad existente\r\n        finalQuantity = quantity;\r\n        operation = 'updated';\r\n      } else {\r\n        // Sumar a la cantidad existente\r\n        finalQuantity = existingItem.quantity + quantity;\r\n        operation = 'increased';\r\n      }\r\n\r\n      // Verificar que la cantidad final no exceda el stock\r\n      if (finalQuantity > product.stock) {\r\n        return NextResponse.json(\r\n          { \r\n            success: false, \r\n            error: `No se puede agregar. Ya tienes ${existingItem.quantity} en el carrito. Stock disponible: ${product.stock}`,\r\n            currentQuantity: existingItem.quantity,\r\n            availableStock: product.stock,\r\n            maxCanAdd: product.stock - existingItem.quantity\r\n          }, \r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // 4. Agregar o actualizar item en carrito\r\n    const { data: cartItem, error: cartError } = await supabase\r\n      .from('cart_items')\r\n      .upsert({\r\n        user_id: userId,\r\n        product_id: productId,\r\n        quantity: finalQuantity\r\n      }, {\r\n        onConflict: 'user_id,product_id'\r\n      })\r\n      .select(`\r\n        id,\r\n        user_id,\r\n        product_id,\r\n        quantity,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .single();\r\n\r\n    if (cartError) {\r\n      console.error('‚ùå Cart Add API: Error agregando al carrito:', cartError);\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: 'Error agregando producto al carrito. Intenta nuevamente.',\r\n          details: cartError.message,\r\n          retry: true\r\n        }, \r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // 5. Obtener resumen actualizado del carrito\r\n    const { data: cartSummary, error: summaryError } = await supabase\r\n      .from('cart_items')\r\n      .select('quantity')\r\n      .eq('user_id', userId);\r\n\r\n    const totalItems = cartSummary?.reduce((sum, item) => sum + item.quantity, 0) || 0;\r\n    const totalProducts = cartSummary?.length || 0;\r\n\r\n    // 6. Preparar respuesta\r\n    const responseMessage = {\r\n      added: `${product.name} agregado al carrito`,\r\n      updated: `Cantidad de ${product.name} actualizada en el carrito`,\r\n      increased: `Se agregaron ${quantity} m√°s de ${product.name} al carrito`\r\n    }[operation];\r\n\r\n    console.log(`‚úÖ Cart Add API: ${responseMessage} - Total items: ${totalItems}`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: responseMessage,\r\n      operation,\r\n      item: {\r\n        id: cartItem.id,\r\n        productId: product.id,\r\n        productName: product.name,\r\n        quantity: cartItem.quantity,\r\n        price: product.discounted_price || product.price,\r\n        addedQuantity: quantity\r\n      },\r\n      cart: {\r\n        totalItems,\r\n        totalProducts\r\n      },\r\n      product: {\r\n        id: product.id,\r\n        name: product.name,\r\n        price: product.price,\r\n        discounted_price: product.discounted_price,\r\n        images: product.images,\r\n        brand: product.brand,\r\n        category: product.category\r\n      }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('‚ùå Cart Add API: Error inesperado:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Error interno del servidor. Intenta nuevamente.',\r\n        details: error.message,\r\n        retry: true\r\n      }, \r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/cart/add\r\n * Informaci√≥n sobre c√≥mo usar este endpoint\r\n */\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    endpoint: '/api/cart/add',\r\n    method: 'POST',\r\n    description: 'Agregar productos al carrito de compras',\r\n    parameters: {\r\n      productId: 'number - ID del producto (requerido)',\r\n      quantity: 'number - Cantidad a agregar (opcional, default: 1)',\r\n      replace: 'boolean - Si true, reemplaza cantidad existente (opcional, default: false)'\r\n    },\r\n    example: {\r\n      productId: 123,\r\n      quantity: 2,\r\n      replace: false\r\n    },\r\n    authentication: 'Requerida - Usuario debe estar autenticado',\r\n    responses: {\r\n      200: 'Producto agregado exitosamente',\r\n      400: 'Datos inv√°lidos o stock insuficiente',\r\n      401: 'Usuario no autenticado',\r\n      404: 'Producto no encontrado',\r\n      500: 'Error interno del servidor'\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}