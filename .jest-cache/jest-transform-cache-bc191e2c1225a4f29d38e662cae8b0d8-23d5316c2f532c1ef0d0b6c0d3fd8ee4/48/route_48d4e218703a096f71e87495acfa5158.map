{"version":3,"names":["cov_64yuspxp6","actualCoverage","s","GET","f","POST","runtime","execAsync","_util","promisify","_child_process","exec","TestModuleSchema","_zod","z","enum","UnifiedTestParamsSchema","object","module","default","detailed","boolean","user_id","string","optional","include_sensitive","UnifiedTestPostSchema","config","url","stepName","selector","fullPage","width","number","height","suites","array","timeout","generateReport","email","userName","emailType","flowId","executionId","test_data","any","TEST_SUITES","unit","name","command","_apitimeouts","API_TIMEOUTS","description","components","e2e","upload","performance","api","testConnection","b","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","Error","supabase","_supabasejs","createClient","data","products","error","productsError","from","select","limit","categories","categoriesError","users","usersError","results","connection","adminConnection","userConnection","crud","tables","user_profiles","allPassed","Object","values","every","Boolean","status","summary","total_tests","keys","length","passed","filter","failed","v","errors","message","testAuth","request","authResult","_adminauth","getAuthenticatedUser","authenticated","userId","hasError","method","user","_supabase","supabaseAdmin","eq","single","success","user_found","testScreenshots","screenshotsDir","_path","join","cwd","_promises","mkdir","recursive","browser","_playwright","chromium","launch","headless","page","newPage","viewport","goto","waitUntil","timestamp","Date","toISOString","replace","filename","filepath","element","locator","screenshot","path","close","stats","stat","id","now","metadata","size","testExecution","invalidSuites","suite","startTime","suiteKey","suiteStartTime","stdout","stderr","NODE_ENV","CI","suiteDuration","parsed","parseTestOutput","push","duration","execError","totalDuration","total_suites","passed_suites","r","failed_suites","reduce","sum","tests","total_passed","total_failed","generateTestReport","testFlows","execution","_advancedtestflows","testFlowManager","getExecution","screenshotStats","getScreenshotStats","executions","getExecutions","map","screenshotCount","screenshots","steps","total","step","flows","getAvailableFlows","allExecutions","total_flows","total_executions","active_flows","enabled","testEmail","emailConfig","getEmailServiceConfig","isReady","hasApiKey","fromEmail","result","sendWelcomeEmail","sendOrderConfirmationEmail","orderNumber","orderTotal","items","quantity","price","sendPasswordResetEmail","resetLink","service","undefined","testMiddleware","middleware_test","endpoint","note","testReports","publicReportsDir","rootReportsDir","reports","publicFiles","readdir","file","endsWith","sort","a","timestampA","match","timestampB","parseInt","localeCompare","rootFiles","jsonFiles","sourcePath","destPath","copyFile","directories","public","root","testUserProfile","targetUserId","user_data","query_params","clerk_user_id","output","testMatch","passedMatch","failedMatch","parseError","console","warn","reportsDir","report","type","version","node_version","platform","environment","generated_by","writeFile","JSON","stringify","searchParams","URL","rawParams","get","params","parse","log","modules","total_modules","success_count","partial_count","failed_count","_server","NextResponse","json","meta","api_version","unified","parameters","body"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test\\unified\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API Unificada de Testing\r\n// Consolida todas las funcionalidades de testing en un solo endpoint\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport { chromium } from 'playwright';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { getAuthenticatedUser } from '@/lib/auth/admin-auth';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { screenshotManager } from '@/lib/testing/screenshot-manager';\r\nimport { API_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n// import {\r\n//   sendWelcomeEmail,\r\n//   sendOrderConfirmationEmail,\r\n//   sendPasswordResetEmail,\r\n//   getEmailServiceConfig\r\n// } from '@/lib/email';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst TestModuleSchema = z.enum([\r\n  'connection',      // Test de conexiones básicas\r\n  'auth',           // Test de autenticación\r\n  'screenshots',    // Generación de screenshots\r\n  'execution',      // Ejecución de test suites\r\n  'flows',          // Flujos de testing automatizados\r\n  'email',          // Testing de emails\r\n  'middleware',     // Testing de middleware\r\n  'reports',        // Generación de reportes\r\n  'user-profile',   // Testing de perfiles de usuario\r\n  'all'             // Ejecutar todos los tests\r\n]);\r\n\r\nconst UnifiedTestParamsSchema = z.object({\r\n  module: TestModuleSchema.default('connection'),\r\n  detailed: z.boolean().default(false),\r\n  user_id: z.string().optional(),\r\n  include_sensitive: z.boolean().default(false)\r\n});\r\n\r\nconst UnifiedTestPostSchema = z.object({\r\n  module: TestModuleSchema,\r\n  config: z.object({\r\n    // Screenshot config\r\n    url: z.string().url().optional(),\r\n    stepName: z.string().optional(),\r\n    selector: z.string().optional(),\r\n    fullPage: z.boolean().default(false),\r\n    width: z.number().default(1280),\r\n    height: z.number().default(720),\r\n    \r\n    // Test execution config\r\n    suites: z.array(z.string()).optional(),\r\n    timeout: z.number().default(60000),\r\n    generateReport: z.boolean().default(true),\r\n    \r\n    // Email test config\r\n    email: z.string().email().optional(),\r\n    userName: z.string().optional(),\r\n    emailType: z.enum(['welcome', 'order', 'reset']).optional(),\r\n    \r\n    // Flow test config\r\n    flowId: z.string().optional(),\r\n    executionId: z.string().optional(),\r\n    \r\n    // General config\r\n    test_data: z.any().optional()\r\n  }).optional()\r\n});\r\n\r\ntype TestModule = z.infer<typeof TestModuleSchema>;\r\ntype UnifiedTestParams = z.infer<typeof UnifiedTestParamsSchema>;\r\ntype UnifiedTestPost = z.infer<typeof UnifiedTestPostSchema>;\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DE TEST SUITES\r\n// ===================================\r\n\r\nconst TEST_SUITES: Record<string, {\r\n  name: string;\r\n  command: string;\r\n  timeout: number;\r\n  description: string;\r\n}> = {\r\n  unit: {\r\n    name: 'Tests Unitarios',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(hooks|utils|lib)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests unitarios de hooks, utilities y librerías'\r\n  },\r\n  components: {\r\n    name: 'Tests de Componentes',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(components|optimization)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default + 30000, // 30s adicionales para componentes\r\n    description: 'Tests de componentes React y optimizaciones'\r\n  },\r\n  e2e: {\r\n    name: 'Tests E2E',\r\n    command: 'npx playwright test --project=ui-admin --reporter=json',\r\n    timeout: API_TIMEOUTS.upload * 2.5, // Timeout extendido para E2E\r\n    description: 'Tests end-to-end con Playwright'\r\n  },\r\n  performance: {\r\n    name: 'Tests de Performance',\r\n    command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n    timeout: 120000,\r\n    description: 'Tests de performance y Core Web Vitals'\r\n  },\r\n  api: {\r\n    name: 'Tests de API',\r\n    command: 'npm test -- --testPathPattern=\"api\" --passWithNoTests',\r\n    timeout: 90000,\r\n    description: 'Tests de endpoints y APIs'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// MÓDULOS DE TESTING\r\n// ===================================\r\n\r\nasync function testConnection(detailed: boolean = false) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\n    if (!supabaseUrl || !supabaseKey) {\r\n      throw new Error('Variables de entorno de Supabase no configuradas');\r\n    }\r\n\r\n    const supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n    // Test de conexión básica\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const { data: categories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const { data: users, error: usersError } = await supabase\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    const results = {\r\n      connection: !productsError,\r\n      adminConnection: !categoriesError,\r\n      userConnection: !usersError,\r\n      crud: !productsError && !categoriesError,\r\n      tables: {\r\n        products: !productsError,\r\n        categories: !categoriesError,\r\n        user_profiles: !usersError\r\n      }\r\n    };\r\n\r\n    const allPassed = Object.values(results.tables).every(Boolean);\r\n\r\n    return {\r\n      status: allPassed ? 'success' : 'partial',\r\n      data: {\r\n        ...results,\r\n        summary: {\r\n          total_tests: Object.keys(results.tables).length,\r\n          passed: Object.values(results.tables).filter(Boolean).length,\r\n          failed: Object.values(results.tables).filter(v => !v).length\r\n        },\r\n        ...(detailed && {\r\n          errors: {\r\n            products: productsError?.message,\r\n            categories: categoriesError?.message,\r\n            users: usersError?.message\r\n          }\r\n        })\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testAuth(request: NextRequest, detailed: boolean = false) {\r\n  try {\r\n    const authResult = await getAuthenticatedUser(request);\r\n    \r\n    const results = {\r\n      authenticated: !!authResult.userId,\r\n      userId: authResult.userId,\r\n      hasError: !!authResult.error,\r\n      method: 'getAuthenticatedUser()'\r\n    };\r\n\r\n    if (detailed && authResult.userId) {\r\n      // Test user profile lookup\r\n      const { data: user, error } = await supabaseAdmin\r\n        .from('user_profiles')\r\n        .select('id, clerk_user_id, email, role_id, is_active')\r\n        .eq('clerk_user_id', authResult.userId)\r\n        .single();\r\n\r\n      results['profile_lookup'] = {\r\n        success: !error,\r\n        user_found: !!user,\r\n        error: error?.message\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: results.authenticated ? 'success' : 'failed' as const,\r\n      data: results,\r\n      error: authResult.error\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testScreenshots(config: any) {\r\n  try {\r\n    const { url, stepName, description = 'Test screenshot', selector, fullPage = false, width = 1280, height = 720 } = config;\r\n\r\n    if (!url || !stepName) {\r\n      throw new Error('URL y stepName son requeridos para screenshots');\r\n    }\r\n\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots');\r\n    await fs.mkdir(screenshotsDir, { recursive: true });\r\n\r\n    const browser = await chromium.launch({ headless: true });\r\n    const page = await browser.newPage({\r\n      viewport: { width, height }\r\n    });\r\n\r\n    await page.goto(url, { waitUntil: 'networkidle' });\r\n    \r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const filename = `${stepName}-${timestamp}.png`;\r\n    const filepath = path.join(screenshotsDir, filename);\r\n\r\n    if (selector) {\r\n      const element = await page.locator(selector);\r\n      await element.screenshot({ path: filepath });\r\n    } else {\r\n      await page.screenshot({ \r\n        path: filepath, \r\n        fullPage \r\n      });\r\n    }\r\n\r\n    await browser.close();\r\n\r\n    const stats = await fs.stat(filepath);\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        screenshot: {\r\n          id: `screenshot-${Date.now()}`,\r\n          filename,\r\n          path: filepath,\r\n          url: `/test-screenshots/${filename}`,\r\n          metadata: {\r\n            width,\r\n            height,\r\n            size: stats.size,\r\n            timestamp: new Date().toISOString(),\r\n            selector: selector || 'full-page',\r\n            fullPage\r\n          }\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testExecution(config: any) {\r\n  try {\r\n    const { suites = ['unit'], timeout = 60000, generateReport = true } = config;\r\n    \r\n    const invalidSuites = suites.filter((suite: string) => !TEST_SUITES[suite]);\r\n    if (invalidSuites.length > 0) {\r\n      throw new Error(`Suites inválidas: ${invalidSuites.join(', ')}. Disponibles: ${Object.keys(TEST_SUITES).join(', ')}`);\r\n    }\r\n\r\n    const results = [];\r\n    const startTime = Date.now();\r\n\r\n    for (const suiteKey of suites) {\r\n      const suite = TEST_SUITES[suiteKey];\r\n      const suiteStartTime = Date.now();\r\n\r\n      try {\r\n        const { stdout, stderr } = await execAsync(suite.command, {\r\n          timeout: suite.timeout,\r\n          cwd: process.cwd(),\r\n          env: {\r\n            ...process.env,\r\n            NODE_ENV: 'test',\r\n            CI: 'true'\r\n          }\r\n        });\r\n\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        const parsed = parseTestOutput(stdout, stderr);\r\n\r\n        results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'success',\r\n          duration: suiteDuration,\r\n          ...parsed\r\n        });\r\n      } catch (execError: any) {\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        const parsed = parseTestOutput(execError.stdout || '', execError.stderr || '');\r\n\r\n        results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'failed',\r\n          duration: suiteDuration,\r\n          error: execError.message,\r\n          ...parsed\r\n        });\r\n      }\r\n    }\r\n\r\n    const totalDuration = Date.now() - startTime;\r\n    const summary = {\r\n      total_suites: results.length,\r\n      passed_suites: results.filter(r => r.status === 'success').length,\r\n      failed_suites: results.filter(r => r.status === 'failed').length,\r\n      total_tests: results.reduce((sum, r) => sum + (r.tests || 0), 0),\r\n      total_passed: results.reduce((sum, r) => sum + (r.passed || 0), 0),\r\n      total_failed: results.reduce((sum, r) => sum + (r.failed || 0), 0),\r\n      duration: totalDuration\r\n    };\r\n\r\n    if (generateReport) {\r\n      await generateTestReport({ results, summary });\r\n    }\r\n\r\n    return {\r\n      status: summary.failed_suites === 0 ? 'success' : 'partial' as const,\r\n      data: {\r\n        results,\r\n        summary\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testFlows(config: any) {\r\n  try {\r\n    const { flowId, executionId } = config;\r\n\r\n    if (executionId) {\r\n      // Obtener ejecución específica\r\n      const execution = testFlowManager.getExecution(executionId);\r\n      if (!execution) {\r\n        throw new Error(`Ejecución ${executionId} no encontrada`);\r\n      }\r\n\r\n      const screenshotStats = testFlowManager.getScreenshotStats(executionId);\r\n\r\n      return {\r\n        status: 'success' as const,\r\n        data: {\r\n          execution: {\r\n            ...execution,\r\n            screenshotStats\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    if (flowId) {\r\n      // Obtener ejecuciones de un flujo específico\r\n      const executions = testFlowManager.getExecutions(flowId);\r\n      return {\r\n        status: 'success' as const,\r\n        data: {\r\n          flowId,\r\n          executions: executions.map(exec => ({\r\n            ...exec,\r\n            screenshotCount: (exec.screenshots || []).length + \r\n              exec.steps.reduce((total, step) => total + (step.screenshots || []).length, 0)\r\n          }))\r\n        }\r\n      };\r\n    }\r\n\r\n    // Obtener todos los flujos disponibles\r\n    const flows = testFlowManager.getAvailableFlows();\r\n    const allExecutions = testFlowManager.getExecutions();\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        flows,\r\n        executions: allExecutions,\r\n        summary: {\r\n          total_flows: flows.length,\r\n          total_executions: allExecutions.length,\r\n          active_flows: flows.filter(f => f.enabled).length\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testEmail(config: any) {\r\n  try {\r\n    const { email, userName, emailType = 'welcome' } = config;\r\n\r\n    if (!email || !userName) {\r\n      throw new Error('Email y userName son requeridos');\r\n    }\r\n\r\n    // Verificar configuración\r\n    const emailConfig = getEmailServiceConfig();\r\n    if (!emailConfig.isReady) {\r\n      return {\r\n        status: 'failed' as const,\r\n        error: 'Servicio de email no configurado',\r\n        data: {\r\n          config: {\r\n            hasApiKey: emailConfig.hasApiKey,\r\n            fromEmail: emailConfig.fromEmail\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    let result;\r\n\r\n    switch (emailType) {\r\n      case 'welcome':\r\n        result = await sendWelcomeEmail({\r\n          email,\r\n          userName\r\n        });\r\n        break;\r\n      case 'order':\r\n        result = await sendOrderConfirmationEmail({\r\n          email,\r\n          userName,\r\n          orderNumber: 'TEST-001',\r\n          orderTotal: 99.99,\r\n          items: [\r\n            { name: 'Producto Test', quantity: 1, price: 99.99 }\r\n          ]\r\n        });\r\n        break;\r\n      case 'reset':\r\n        result = await sendPasswordResetEmail({\r\n          email,\r\n          userName,\r\n          resetLink: 'https://www.pinteya.com/reset-password?token=test-token-123'\r\n        });\r\n        break;\r\n      default:\r\n        throw new Error(`Tipo de email inválido: ${emailType}`);\r\n    }\r\n\r\n    return {\r\n      status: result.success ? 'success' : 'failed' as const,\r\n      data: {\r\n        emailType,\r\n        result,\r\n        config: {\r\n          service: 'configured',\r\n          fromEmail: emailConfig.fromEmail\r\n        }\r\n      },\r\n      error: result.success ? undefined : result.error\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testMiddleware() {\r\n  // Este test simplemente verifica que el endpoint sea accesible\r\n  // Si llegamos aquí, significa que el middleware permitió el acceso\r\n  return {\r\n    status: 'success' as const,\r\n    data: {\r\n      middleware_test: 'passed',\r\n      timestamp: new Date().toISOString(),\r\n      endpoint: '/api/test/unified',\r\n      note: 'Si este endpoint responde, el middleware está funcionando'\r\n    }\r\n  };\r\n}\r\n\r\nasync function testReports() {\r\n  try {\r\n    const publicReportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    const rootReportsDir = path.join(process.cwd(), 'test-reports');\r\n    \r\n    let reports: string[] = [];\r\n    \r\n    // Verificar carpeta public/test-reports\r\n    try {\r\n      const publicFiles = await fs.readdir(publicReportsDir);\r\n      reports = publicFiles\r\n        .filter(file => file.endsWith('.json'))\r\n        .sort((a, b) => {\r\n          const timestampA = a.match(/\\d+/);\r\n          const timestampB = b.match(/\\d+/);\r\n          if (timestampA && timestampB) {\r\n            return parseInt(timestampB[0]) - parseInt(timestampA[0]);\r\n          }\r\n          return b.localeCompare(a);\r\n        });\r\n    } catch {\r\n      // Carpeta no existe, continuar\r\n    }\r\n    \r\n    // Si no hay reportes en public, verificar carpeta raíz\r\n    if (reports.length === 0) {\r\n      try {\r\n        const rootFiles = await fs.readdir(rootReportsDir);\r\n        const jsonFiles = rootFiles.filter(file => file.endsWith('.json'));\r\n        \r\n        if (jsonFiles.length > 0) {\r\n          // Crear carpeta public si no existe\r\n          await fs.mkdir(publicReportsDir, { recursive: true });\r\n          \r\n          // Copiar archivos a public\r\n          for (const file of jsonFiles) {\r\n            const sourcePath = path.join(rootReportsDir, file);\r\n            const destPath = path.join(publicReportsDir, file);\r\n            await fs.copyFile(sourcePath, destPath);\r\n          }\r\n          \r\n          reports = jsonFiles;\r\n        }\r\n      } catch {\r\n        // Carpeta raíz no existe, continuar\r\n      }\r\n    }\r\n\r\n    return {\r\n      status: 'success' as const,\r\n      data: {\r\n        reports: reports.map(filename => ({\r\n          filename,\r\n          url: `/test-reports/${filename}`,\r\n          timestamp: filename.match(/\\d+/)?.[0] || 'unknown'\r\n        })),\r\n        total: reports.length,\r\n        directories: {\r\n          public: publicReportsDir,\r\n          root: rootReportsDir\r\n        }\r\n      }\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\nasync function testUserProfile(request: NextRequest, userId?: string) {\r\n  try {\r\n    let targetUserId = userId;\r\n    \r\n    if (!targetUserId) {\r\n      const authResult = await getAuthenticatedUser(request);\r\n      if (!authResult.userId) {\r\n        throw new Error('Usuario no autenticado y no se proporcionó user_id');\r\n      }\r\n      targetUserId = authResult.userId;\r\n    }\r\n\r\n    // Consulta simple sin joins\r\n    const { data: user, error } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id, clerk_user_id, email, role_id, is_active')\r\n      .eq('clerk_user_id', targetUserId)\r\n      .single();\r\n\r\n    return {\r\n      status: error ? 'failed' : 'success' as const,\r\n      data: {\r\n        user_found: !!user,\r\n        user_data: user,\r\n        query_params: {\r\n          clerk_user_id: targetUserId\r\n        }\r\n      },\r\n      error: error?.message\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      status: 'failed' as const,\r\n      error: error.message,\r\n      data: null\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nfunction parseTestOutput(stdout: string, stderr: string) {\r\n  const result = {\r\n    passed: 0,\r\n    failed: 0,\r\n    tests: 0,\r\n    output: stdout,\r\n    errors: stderr\r\n  };\r\n\r\n  try {\r\n    // Intentar parsear diferentes formatos de output\r\n    const testMatch = stdout.match(/Tests:\\s+(\\d+) failed,\\s+(\\d+) passed,\\s+(\\d+) total/);\r\n    if (testMatch) {\r\n      result.failed = parseInt(testMatch[1]);\r\n      result.passed = parseInt(testMatch[2]);\r\n      result.tests = parseInt(testMatch[3]);\r\n      return result;\r\n    }\r\n\r\n    // Formato alternativo\r\n    const passedMatch = stdout.match(/(\\d+) passing/);\r\n    const failedMatch = stdout.match(/(\\d+) failing/);\r\n    \r\n    if (passedMatch) {result.passed = parseInt(passedMatch[1]);}\r\n    if (failedMatch) {result.failed = parseInt(failedMatch[1]);}\r\n    result.tests = result.passed + result.failed;\r\n  } catch (parseError) {\r\n    console.warn('Error parseando output de tests:', parseError);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function generateTestReport(data: any) {\r\n  try {\r\n    const reportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    await fs.mkdir(reportsDir, { recursive: true });\r\n\r\n    const report = {\r\n      timestamp: new Date().toISOString(),\r\n      type: 'unified-test-execution',\r\n      version: '1.0.0',\r\n      summary: data.summary,\r\n      results: data.results.map((result: any) => ({\r\n        suite: result.suite,\r\n        name: result.name,\r\n        status: result.status,\r\n        duration: result.duration,\r\n        tests: result.tests || 0,\r\n        passed: result.passed || 0,\r\n        failed: result.failed || 0,\r\n        error: result.error || null\r\n      })),\r\n      metadata: {\r\n        node_version: process.version,\r\n        platform: process.platform,\r\n        environment: 'test',\r\n        generated_by: 'unified-test-api'\r\n      }\r\n    };\r\n\r\n    const filename = `unified-test-execution-${Date.now()}.json`;\r\n    const filepath = path.join(reportsDir, filename);\r\n    \r\n    await fs.writeFile(filepath, JSON.stringify(report, null, 2));\r\n    \r\n    return {\r\n      filename,\r\n      path: filepath,\r\n      url: `/test-reports/${filename}`\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// ENDPOINTS\r\n// ===================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const rawParams = {\r\n      module: searchParams.get('module') || 'connection',\r\n      detailed: searchParams.get('detailed') === 'true',\r\n      user_id: searchParams.get('user_id') || undefined,\r\n      include_sensitive: searchParams.get('include_sensitive') === 'true'\r\n    };\r\n\r\n    const params = UnifiedTestParamsSchema.parse(rawParams);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`🧪 Unified Test GET: Module ${params.module}`);\r\n\r\n    let result;\r\n\r\n    switch (params.module) {\r\n      case 'connection':\r\n        result = await testConnection(params.detailed);\r\n        break;\r\n      case 'auth':\r\n        result = await testAuth(request, params.detailed);\r\n        break;\r\n      case 'middleware':\r\n        result = await testMiddleware();\r\n        break;\r\n      case 'reports':\r\n        result = await testReports();\r\n        break;\r\n      case 'user-profile':\r\n        result = await testUserProfile(request, params.user_id);\r\n        break;\r\n      case 'flows':\r\n        result = await testFlows({});\r\n        break;\r\n      case 'all':\r\n        // Ejecutar todos los módulos básicos\r\n        const modules = ['connection', 'auth', 'middleware', 'reports'];\r\n        const results = {};\r\n        \r\n        for (const module of modules) {\r\n          try {\r\n            switch (module) {\r\n              case 'connection':\r\n                results[module] = await testConnection(params.detailed);\r\n                break;\r\n              case 'auth':\r\n                results[module] = await testAuth(request, params.detailed);\r\n                break;\r\n              case 'middleware':\r\n                results[module] = await testMiddleware();\r\n                break;\r\n              case 'reports':\r\n                results[module] = await testReports();\r\n                break;\r\n            }\r\n          } catch (error: any) {\r\n            results[module] = {\r\n              status: 'failed',\r\n              error: error.message,\r\n              data: null\r\n            };\r\n          }\r\n        }\r\n\r\n        const summary = {\r\n          total_modules: modules.length,\r\n          success_count: Object.values(results).filter((r: any) => r.status === 'success').length,\r\n          partial_count: Object.values(results).filter((r: any) => r.status === 'partial').length,\r\n          failed_count: Object.values(results).filter((r: any) => r.status === 'failed').length\r\n        };\r\n\r\n        result = {\r\n          status: summary.failed_count === 0 ? 'success' : 'partial' as const,\r\n          data: results,\r\n          summary\r\n        };\r\n        break;\r\n      default:\r\n        throw new Error(`Módulo no soportado: ${params.module}`);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      timestamp,\r\n      module: params.module,\r\n      status: result.status,\r\n      data: result.data,\r\n      error: result.error,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        parameters: {\r\n          module: params.module,\r\n          detailed: params.detailed,\r\n          include_sensitive: params.include_sensitive\r\n        }\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('❌ Error en Unified Test API:', error);\r\n    \r\n    return NextResponse.json({\r\n      timestamp: new Date().toISOString(),\r\n      module: 'unknown',\r\n      status: 'failed',\r\n      data: null,\r\n      error: error.message,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        parameters: null\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { module, config = {} } = UnifiedTestPostSchema.parse(body);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`🧪 Unified Test POST: Module ${module}`);\r\n\r\n    let result;\r\n\r\n    switch (module) {\r\n      case 'screenshots':\r\n        result = await testScreenshots(config);\r\n        break;\r\n      case 'execution':\r\n        result = await testExecution(config);\r\n        break;\r\n      case 'flows':\r\n        result = await testFlows(config);\r\n        break;\r\n      case 'email':\r\n        result = await testEmail(config);\r\n        break;\r\n      case 'auth':\r\n        result = await testAuth(request, true);\r\n        break;\r\n      case 'connection':\r\n        result = await testConnection(true);\r\n        break;\r\n      default:\r\n        throw new Error(`Módulo POST no soportado: ${module}`);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      timestamp,\r\n      module,\r\n      status: result.status,\r\n      data: result.data,\r\n      error: result.error,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        method: 'POST',\r\n        config: config\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('❌ Error en Unified Test API POST:', error);\r\n    \r\n    return NextResponse.json({\r\n      timestamp: new Date().toISOString(),\r\n      module: 'unknown',\r\n      status: 'failed',\r\n      data: null,\r\n      error: error.message,\r\n      meta: {\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        method: 'POST'\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}