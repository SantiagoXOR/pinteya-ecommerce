{"version":3,"names":["GET","cov_6rdeds0b9","f","s","POST","StatusUpdateSchema","_zod","z","object","status","enum","reason","string","min","max","notify_customer","boolean","default","tracking_number","optional","carrier","estimated_delivery","stateTransitions","pending","confirmed","processing","shipped","delivered","cancelled","refunded","returned","statusDescriptions","validateStateTransition","currentStatus","newStatus","b","valid","message","allowedTransitions","includes","validateAdminAuth","session","_auth","auth","user","error","isAdmin","email","userId","id","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","request","params","startTime","Date","now","rateLimitResult","_ratelimiting","checkRateLimit","_ratelimiter","RATE_LIMIT_CONFIGS","admin","requests","window","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","orderId","body","validationResult","safeParse","details","errors","data","currentOrder","fetchError","_supabase","supabaseAdmin","from","select","eq","single","code","DATABASE","transitionValidation","updateData","updated_at","toISOString","payment_status","updatedOrder","updateError","update","insert","order_id","previous_status","new_status","changed_by","metadata","JSON","stringify","historyError","WARN","admin_id","note_type","content","is_visible_to_customer","noteError","INFO","NOTIFICATION","customerEmail","user_profiles","orderNumber","order_number","responseTime","_metrics","metricsCollector","recordRequest","order","previousStatus","statusDescription","nextResponse","API","adminId","availableTransitions","currentStatusDescription","map","description","recordApiCall"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\status\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN ORDER STATUS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst StatusUpdateSchema = z.object({\r\n  status: z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded', 'returned']),\r\n  reason: z.string().min(1, 'Razón del cambio es requerida').max(500, 'Razón muy larga'),\r\n  notify_customer: z.boolean().default(true),\r\n  tracking_number: z.string().optional(),\r\n  carrier: z.string().optional(),\r\n  estimated_delivery: z.string().optional(),\r\n});\r\n\r\n// ===================================\r\n// VALIDACIONES DE TRANSICIÓN DE ESTADOS\r\n// ===================================\r\n\r\nconst stateTransitions: Record<string, string[]> = {\r\n  pending: ['confirmed', 'cancelled'],\r\n  confirmed: ['processing', 'cancelled'],\r\n  processing: ['shipped', 'cancelled'],\r\n  shipped: ['delivered', 'returned'],\r\n  delivered: ['returned'],\r\n  cancelled: [],\r\n  refunded: [],\r\n  returned: ['refunded']\r\n};\r\n\r\nconst statusDescriptions: Record<string, string> = {\r\n  pending: 'Pendiente de confirmación',\r\n  confirmed: 'Confirmada, preparando pedido',\r\n  processing: 'En proceso de preparación',\r\n  shipped: 'Enviada',\r\n  delivered: 'Entregada',\r\n  cancelled: 'Cancelada',\r\n  refunded: 'Reembolsada',\r\n  returned: 'Devuelta'\r\n};\r\n\r\nfunction validateStateTransition(currentStatus: string, newStatus: string): { valid: boolean; message?: string } {\r\n  if (currentStatus === newStatus) {\r\n    return { valid: false, message: 'El estado ya es el mismo' };\r\n  }\r\n  \r\n  const allowedTransitions = stateTransitions[currentStatus];\r\n  if (!allowedTransitions || !allowedTransitions.includes(newStatus)) {\r\n    return { \r\n      valid: false, \r\n      message: `Transición no permitida: ${statusDescriptions[currentStatus]} → ${statusDescriptions[newStatus]}` \r\n    };\r\n  }\r\n  \r\n  return { valid: true };\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no encontrado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Cambiar estado de orden\r\n// ===================================\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin.requests,\r\n      RATE_LIMIT_CONFIGS.admin.window,\r\n      'admin-order-status'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = StatusUpdateSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de cambio de estado inválidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { status: newStatus, reason, notify_customer, tracking_number, carrier, estimated_delivery } = validationResult.data;\r\n\r\n    // Obtener orden actual\r\n    const { data: currentOrder, error: fetchError } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        status,\r\n        payment_status,\r\n        order_number,\r\n        user_profiles!orders_user_id_fkey (\r\n          id,\r\n          name,\r\n          email\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      if (fetchError.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener orden', { fetchError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Validar transición de estado\r\n    const transitionValidation = validateStateTransition(currentOrder.status, newStatus);\r\n    if (!transitionValidation.valid) {\r\n      return NextResponse.json(\r\n        { error: transitionValidation.message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de actualización\r\n    const updateData: any = {\r\n      status: newStatus,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Agregar campos adicionales según el estado\r\n    if (tracking_number) {updateData.tracking_number = tracking_number;}\r\n    if (carrier) {updateData.carrier = carrier;}\r\n    if (estimated_delivery) {updateData.estimated_delivery = estimated_delivery;}\r\n\r\n    // Actualizar estado de pago automáticamente en ciertos casos\r\n    if (newStatus === 'delivered') {\r\n      updateData.payment_status = 'paid';\r\n    } else if (newStatus === 'cancelled' || newStatus === 'refunded') {\r\n      updateData.payment_status = 'refunded';\r\n    }\r\n\r\n    // Actualizar orden\r\n    const { data: updatedOrder, error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al actualizar estado de orden', { updateError, orderId });\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar estado de orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar en historial de estados\r\n    try {\r\n      await supabaseAdmin\r\n        .from('order_status_history')\r\n        .insert({\r\n          order_id: orderId,\r\n          previous_status: currentOrder.status,\r\n          new_status: newStatus,\r\n          changed_by: authResult.user.id,\r\n          reason: reason,\r\n          metadata: JSON.stringify({\r\n            tracking_number,\r\n            carrier,\r\n            estimated_delivery,\r\n            notify_customer,\r\n          }),\r\n        });\r\n    } catch (historyError) {\r\n      // Si la tabla no existe, continuar sin registrar historial\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo registrar historial de estado', { historyError });\r\n    }\r\n\r\n    // Agregar nota interna sobre el cambio\r\n    try {\r\n      await supabaseAdmin\r\n        .from('order_notes')\r\n        .insert({\r\n          order_id: orderId,\r\n          admin_id: authResult.user.id,\r\n          note_type: 'internal',\r\n          content: `Estado cambiado de \"${statusDescriptions[currentOrder.status]}\" a \"${statusDescriptions[newStatus]}\". Razón: ${reason}`,\r\n          is_visible_to_customer: false,\r\n        });\r\n    } catch (noteError) {\r\n      // Si la tabla no existe, continuar sin agregar nota\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo agregar nota de cambio de estado', { noteError });\r\n    }\r\n\r\n    // TODO: Enviar notificación al cliente si notify_customer es true\r\n    if (notify_customer) {\r\n      logger.log(LogLevel.INFO, LogCategory.NOTIFICATION, 'Notificación de cambio de estado pendiente', {\r\n        orderId,\r\n        customerEmail: currentOrder.user_profiles?.email,\r\n        newStatus,\r\n        orderNumber: currentOrder.order_number,\r\n      });\r\n    }\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await metricsCollector.recordRequest('admin-order-status-change', 'POST', 200, responseTime);\r\n\r\n    const response: ApiResponse<{\r\n      order: typeof updatedOrder;\r\n      previousStatus: string;\r\n      newStatus: string;\r\n      statusDescription: string;\r\n    }> = {\r\n      data: {\r\n        order: updatedOrder,\r\n        previousStatus: currentOrder.status,\r\n        newStatus,\r\n        statusDescription: statusDescriptions[newStatus],\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Estado de orden cambiado exitosamente', {\r\n      orderId,\r\n      previousStatus: currentOrder.status,\r\n      newStatus,\r\n      reason,\r\n      adminId: authResult.user.id,\r\n      responseTime,\r\n    });\r\n\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    await metricsCollector.recordRequest('admin-order-status-change', 'POST', 500, responseTime);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/orders/[id]/status', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener estados disponibles\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Obtener estado actual de la orden\r\n    const { data: order, error } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('status')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (error) {\r\n      if (error.code === 'PGRST116') {\r\n        return NextResponse.json(\r\n          { error: 'Orden no encontrada' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      return NextResponse.json(\r\n        { error: 'Error al obtener orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const currentStatus = order.status;\r\n    const availableTransitions = stateTransitions[currentStatus] || [];\r\n\r\n    const response: ApiResponse<{\r\n      currentStatus: string;\r\n      currentStatusDescription: string;\r\n      availableTransitions: Array<{\r\n        status: string;\r\n        description: string;\r\n      }>;\r\n    }> = {\r\n      data: {\r\n        currentStatus,\r\n        currentStatusDescription: statusDescriptions[currentStatus],\r\n        availableTransitions: availableTransitions.map(status => ({\r\n          status,\r\n          description: statusDescriptions[status],\r\n        })),\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-order-status-options', responseTime, 200);\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-order-status-options', responseTime, 500);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/orders/[id]/status', { error, orderId: params.id });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}