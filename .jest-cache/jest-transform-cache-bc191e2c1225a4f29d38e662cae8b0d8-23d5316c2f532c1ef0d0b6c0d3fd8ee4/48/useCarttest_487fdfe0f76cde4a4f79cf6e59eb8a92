24694dbe1d3e0d532b21228a2afea2ce
// ===================================
// TESTS PARA HOOK DEL CARRITO
// Tests unitarios para useCart con Redux
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _useCart = require("../../hooks/useCart");
const _cartslice = /*#__PURE__*/ _interop_require_default(require("../../redux/features/cart-slice"));
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Wrapper para Redux
const createWrapper = ()=>{
    const store = (0, _toolkit.configureStore)({
        reducer: {
            cartReducer: _cartslice.default
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: store,
            children: children
        });
};
// Datos de prueba
const mockCartItem = {
    id: 1,
    title: 'Producto Test',
    price: 100,
    discountedPrice: 100,
    quantity: 1,
    imgs: {
        thumbnails: [
            'https://example.com/thumb.jpg'
        ],
        previews: [
            'https://example.com/preview.jpg'
        ]
    }
};
const mockCartItem2 = {
    id: 2,
    title: 'Producto Test 2',
    price: 200,
    discountedPrice: 200,
    quantity: 1,
    imgs: {
        thumbnails: [
            'https://example.com/thumb2.jpg'
        ],
        previews: [
            'https://example.com/preview2.jpg'
        ]
    }
};
describe('useCart Hook', ()=>{
    describe('Inicialización del Carrito', ()=>{
        it('debe inicializar con carrito vacío', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            expect(result.current.cartItems).toEqual([]);
            expect(result.current.cartCount).toBe(0);
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.totalQuantity).toBe(0);
        });
    });
    describe('Agregar Productos', ()=>{
        it('debe agregar un producto nuevo al carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            expect(result.current.cartItems).toHaveLength(1);
            expect(result.current.cartItems[0]).toEqual(mockCartItem);
            expect(result.current.cartCount).toBe(1);
            expect(result.current.totalPrice).toBe(100);
            expect(result.current.totalQuantity).toBe(1);
        });
        it('debe incrementar cantidad si el producto ya existe', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            expect(result.current.cartItems).toHaveLength(1);
            expect(result.current.cartItems[0].quantity).toBe(2);
            expect(result.current.cartCount).toBe(1);
            expect(result.current.totalQuantity).toBe(2);
            expect(result.current.totalPrice).toBe(200);
        });
        it('debe agregar múltiples productos diferentes', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem2);
            });
            expect(result.current.cartItems).toHaveLength(2);
            expect(result.current.cartCount).toBe(2);
            expect(result.current.totalQuantity).toBe(2);
            expect(result.current.totalPrice).toBe(300);
        });
    });
    describe('Remover Productos', ()=>{
        it('debe remover un producto del carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            // Agregar producto primero
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            // Remover producto
            (0, _react.act)(()=>{
                result.current.removeFromCart(mockCartItem.id);
            });
            expect(result.current.cartItems).toHaveLength(0);
            expect(result.current.cartCount).toBe(0);
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.totalQuantity).toBe(0);
        });
        it('debe remover solo el producto especificado', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            // Agregar dos productos
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
                result.current.addToCart(mockCartItem2);
            });
            // Remover solo el primero
            (0, _react.act)(()=>{
                result.current.removeFromCart(mockCartItem.id);
            });
            expect(result.current.cartItems).toHaveLength(1);
            expect(result.current.cartItems[0].id).toBe(mockCartItem2.id);
            expect(result.current.totalPrice).toBe(200);
        });
    });
    describe('Actualizar Cantidad', ()=>{
        it('debe actualizar la cantidad de un producto', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            // Agregar producto
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            // Actualizar cantidad
            (0, _react.act)(()=>{
                result.current.updateQuantity(mockCartItem.id, 3);
            });
            expect(result.current.cartItems[0].quantity).toBe(3);
            expect(result.current.totalQuantity).toBe(3);
            expect(result.current.totalPrice).toBe(300);
        });
        it('debe remover el producto si la cantidad es 0', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            // Agregar producto
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
            });
            // Actualizar cantidad a 0
            (0, _react.act)(()=>{
                result.current.updateQuantity(mockCartItem.id, 0);
            });
            expect(result.current.cartItems).toHaveLength(0);
            expect(result.current.totalPrice).toBe(0);
        });
    });
    describe('Limpiar Carrito', ()=>{
        it('debe limpiar todo el carrito', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            // Agregar productos
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
                result.current.addToCart(mockCartItem2);
            });
            // Limpiar carrito
            (0, _react.act)(()=>{
                result.current.clearCart();
            });
            expect(result.current.cartItems).toHaveLength(0);
            expect(result.current.cartCount).toBe(0);
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.totalQuantity).toBe(0);
        });
    });
    describe('Cálculos del Carrito', ()=>{
        it('debe calcular correctamente el precio total', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addToCart(mockCartItem);
                result.current.addToCart(mockCartItem2);
                result.current.updateQuantity(mockCartItem.id, 2);
            });
            expect(result.current.totalPrice).toBe(400); // (100 * 2) + (200 * 1)
            expect(result.current.totalQuantity).toBe(3); // 2 + 1
            expect(result.current.cartCount).toBe(2); // 2 productos únicos
        });
        it('debe manejar productos con precio 0', ()=>{
            const freeItem = {
                ...mockCartItem,
                price: 0
            };
            const { result } = (0, _react.renderHook)(()=>(0, _useCart.useCart)(), {
                wrapper: createWrapper()
            });
            (0, _react.act)(()=>{
                result.current.addToCart(freeItem);
            });
            expect(result.current.totalPrice).toBe(0);
            expect(result.current.cartItems).toHaveLength(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,