cb24109bced4431f11068b632bc60923
// =====================================================
// HOOK: TRACKING EVENTS ENTERPRISE
// Descripción: Hook para gestión de eventos de tracking tiempo real
// Basado en: Patrones TanStack Query + WebSocket simulation
// =====================================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useBulkTrackingEvents () {
        return useBulkTrackingEvents;
    },
    get useCreateTrackingEvent () {
        return useCreateTrackingEvent;
    },
    get useRealTimeTracking () {
        return useRealTimeTracking;
    },
    get useTrackingAnalytics () {
        return useTrackingAnalytics;
    },
    get useTrackingEvents () {
        return useTrackingEvents;
    },
    get useTrackingTimeline () {
        return useTrackingTimeline;
    }
});
const _reactquery = require("@tanstack/react-query");
const _react = require("react");
const _sonner = require("sonner");
// =====================================================
// CONFIGURACIÓN DE QUERIES
// =====================================================
const TRACKING_QUERY_KEY = [
    'admin',
    'logistics',
    'tracking'
];
const REAL_TIME_REFETCH_INTERVAL = 30000 // 30 segundos
;
// =====================================================
// FUNCIONES DE API
// =====================================================
async function fetchTrackingEvents(shipmentId) {
    const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data;
}
async function createTrackingEvent(shipmentId, data) {
    const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data;
}
async function bulkCreateTrackingEvents(shipmentId, events) {
    const response = await fetch(`/api/admin/logistics/tracking/${shipmentId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            events
        })
    });
    if (!response.ok) {
        const errorData = await response.json().catch(()=>({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
    }
    const result = await response.json();
    return result.data;
}
function useTrackingEvents(shipmentId, options) {
    const queryClient = (0, _reactquery.useQueryClient)();
    const queryKey = [
        ...TRACKING_QUERY_KEY,
        shipmentId
    ];
    const { data, isLoading, error, refetch } = (0, _reactquery.useQuery)({
        queryKey,
        queryFn: ()=>fetchTrackingEvents(shipmentId),
        enabled: options?.enabled ?? true,
        refetchInterval: options?.realTime ? options?.refetchInterval ?? REAL_TIME_REFETCH_INTERVAL : false,
        staleTime: options?.realTime ? 10000 : 60000,
        retry: 3,
        retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)
    });
    return {
        data: data?.tracking_events,
        shipment: data?.shipment,
        isLoading,
        error: error,
        refetch
    };
}
function useCreateTrackingEvent(shipmentId) {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: (data)=>createTrackingEvent(shipmentId, data),
        onSuccess: (newEvent)=>{
            // Actualizar cache de tracking events
            const queryKey = [
                ...TRACKING_QUERY_KEY,
                shipmentId
            ];
            queryClient.setQueryData(queryKey, (oldData)=>{
                if (!oldData) {
                    return oldData;
                }
                return {
                    ...oldData,
                    tracking_events: [
                        newEvent,
                        ...oldData.tracking_events
                    ]
                };
            });
            // Invalidar cache relacionado
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'shipments'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success('Evento de tracking agregado', {
                description: newEvent.description
            });
        },
        onError: (error)=>{
            _sonner.toast.error('Error al agregar evento', {
                description: error.message
            });
        }
    });
}
function useBulkTrackingEvents(shipmentId) {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: (events)=>bulkCreateTrackingEvents(shipmentId, events),
        onSuccess: (newEvents)=>{
            // Actualizar cache
            const queryKey = [
                ...TRACKING_QUERY_KEY,
                shipmentId
            ];
            queryClient.setQueryData(queryKey, (oldData)=>{
                if (!oldData) {
                    return oldData;
                }
                return {
                    ...oldData,
                    tracking_events: [
                        ...newEvents,
                        ...oldData.tracking_events
                    ]
                };
            });
            // Invalidar cache relacionado
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'shipments'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'admin',
                    'logistics',
                    'dashboard'
                ]
            });
            _sonner.toast.success(`${newEvents.length} eventos agregados exitosamente`);
        },
        onError: (error)=>{
            _sonner.toast.error('Error al agregar eventos', {
                description: error.message
            });
        }
    });
}
function useTrackingTimeline(shipmentId) {
    const { data: events, shipment, isLoading, error } = useTrackingEvents(shipmentId, {
        realTime: true
    });
    // Procesar eventos para timeline
    const timelineEvents = events?.map((event)=>({
            ...event,
            isCompleted: true,
            isCurrent: false,
            isPending: false
        })).sort((a, b)=>new Date(a.occurred_at).getTime() - new Date(b.occurred_at).getTime()) || [];
    // Determinar estado actual
    const currentStatus = shipment?.status;
    const lastEvent = timelineEvents[timelineEvents.length - 1];
    // Estados esperados del timeline
    const expectedStates = [
        {
            status: 'pending',
            label: 'Pendiente',
            description: 'Envío creado'
        },
        {
            status: 'confirmed',
            label: 'Confirmado',
            description: 'Envío confirmado'
        },
        {
            status: 'picked_up',
            label: 'Recolectado',
            description: 'Recolectado por courier'
        },
        {
            status: 'in_transit',
            label: 'En tránsito',
            description: 'En camino'
        },
        {
            status: 'out_for_delivery',
            label: 'En reparto',
            description: 'Salió para entrega'
        },
        {
            status: 'delivered',
            label: 'Entregado',
            description: 'Entregado exitosamente'
        }
    ];
    const timelineStates = expectedStates.map((state)=>{
        const hasEvent = timelineEvents.some((event)=>event.status === state.status);
        const isCurrent = currentStatus === state.status;
        const isCompleted = hasEvent && !isCurrent;
        const isPending = !hasEvent && !isCurrent;
        return {
            ...state,
            hasEvent,
            isCurrent,
            isCompleted,
            isPending,
            event: timelineEvents.find((event)=>event.status === state.status)
        };
    });
    return {
        events: timelineEvents,
        timelineStates,
        shipment,
        currentStatus,
        lastEvent,
        isLoading,
        error,
        progress: {
            completed: timelineStates.filter((state)=>state.isCompleted).length,
            total: timelineStates.length,
            percentage: timelineStates.filter((state)=>state.isCompleted).length / timelineStates.length * 100
        }
    };
}
function useRealTimeTracking(shipmentId) {
    const [isRealTimeEnabled, setIsRealTimeEnabled] = (0, _react.useState)(false);
    const [lastUpdate, setLastUpdate] = (0, _react.useState)(null);
    const { data: events, refetch } = useTrackingEvents(shipmentId, {
        realTime: isRealTimeEnabled,
        refetchInterval: 15000
    });
    // Simular notificaciones de nuevos eventos
    (0, _react.useEffect)(()=>{
        if (events && events.length > 0) {
            setLastUpdate(new Date());
        }
    }, [
        events
    ]);
    const enableRealTime = (0, _react.useCallback)(()=>{
        setIsRealTimeEnabled(true);
        _sonner.toast.info('Tracking en tiempo real activado');
    }, []);
    const disableRealTime = (0, _react.useCallback)(()=>{
        setIsRealTimeEnabled(false);
        _sonner.toast.info('Tracking en tiempo real desactivado');
    }, []);
    const forceRefresh = (0, _react.useCallback)(async ()=>{
        await refetch();
        setLastUpdate(new Date());
        _sonner.toast.success('Tracking actualizado');
    }, [
        refetch
    ]);
    return {
        events,
        isRealTimeEnabled,
        lastUpdate,
        enableRealTime,
        disableRealTime,
        forceRefresh
    };
}
function useTrackingAnalytics(shipmentId) {
    const { data: events, shipment } = useTrackingEvents(shipmentId);
    if (!events || !shipment) {
        return null;
    }
    // Calcular métricas
    const totalEvents = events.length;
    const uniqueLocations = [
        ...new Set(events.map((e)=>e.location).filter(Boolean))
    ].length;
    // Tiempo entre eventos
    const eventTimes = events.map((e)=>new Date(e.occurred_at).getTime()).sort((a, b)=>a - b);
    const averageTimeBetweenEvents = eventTimes.length > 1 ? eventTimes.slice(1).reduce((acc, time, index)=>{
        return acc + (time - eventTimes[index]);
    }, 0) / (eventTimes.length - 1) : 0;
    // Tiempo total de tránsito
    const firstEvent = events[events.length - 1] // Más antiguo
    ;
    const lastEvent = events[0] // Más reciente
    ;
    const totalTransitTime = firstEvent && lastEvent ? new Date(lastEvent.occurred_at).getTime() - new Date(firstEvent.occurred_at).getTime() : 0;
    // Velocidad promedio (si hay ubicaciones)
    const eventsWithLocation = events.filter((e)=>e.latitude && e.longitude);
    let averageSpeed = 0;
    if (eventsWithLocation.length > 1) {
        // Calcular distancia total aproximada entre puntos
        // (implementación simplificada)
        averageSpeed = uniqueLocations / (totalTransitTime / (1000 * 60 * 60) // km/h aproximado
        );
    }
    return {
        totalEvents,
        uniqueLocations,
        averageTimeBetweenEvents: averageTimeBetweenEvents / (1000 * 60),
        totalTransitTime: totalTransitTime / (1000 * 60 * 60),
        averageSpeed: Math.round(averageSpeed * 10) / 10,
        eventsWithLocation: eventsWithLocation.length,
        locationCoverage: eventsWithLocation.length / totalEvents * 100
    };
}

//# sourceMappingURL=data:application/json;base64,