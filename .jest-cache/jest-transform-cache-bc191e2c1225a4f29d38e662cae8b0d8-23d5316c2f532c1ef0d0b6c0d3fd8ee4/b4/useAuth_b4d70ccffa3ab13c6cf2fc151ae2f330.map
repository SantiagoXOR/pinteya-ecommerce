{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useAuth.ts"],"sourcesContent":["/**\n * Hook de Autenticación para NextAuth.js\n * Reemplaza los hooks de Clerk con NextAuth.js\n */\n\n'use client'\n\nimport { useSession, signIn, signOut } from 'next-auth/react'\nimport { useRouter } from 'next/navigation'\nimport { useEffect } from 'react'\nimport { UseAuthReturn, AuthUser } from '@/types/hooks'\n\n// ===================================\n// INTERFACES\n// ===================================\n// Interfaces movidas a @/types/hooks para reutilización\n\nexport function useAuth(): UseAuthReturn {\n  const { data: session, status } = useSession()\n  const router = useRouter()\n\n  const handleSignIn = useCallback(\n    async (provider: string = 'google', options?: { callbackUrl?: string }) => {\n      try {\n        await signIn(provider, {\n          callbackUrl: options?.callbackUrl || '/admin',\n          redirect: true,\n        })\n      } catch (error) {\n        console.error('Error al iniciar sesión:', error)\n      }\n    },\n    []\n  )\n\n  const handleSignOut = useCallback(async (options?: { callbackUrl?: string }) => {\n    try {\n      await signOut({\n        callbackUrl: options?.callbackUrl || '/',\n        redirect: true,\n      })\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error)\n    }\n  }, [])\n\n  // Mapear usuario de NextAuth a nuestro formato\n  const user: AuthUser | null = session?.user\n    ? {\n        id: session.user.id || session.user.email || '',\n        name: session.user.name,\n        email: session.user.email,\n        image: session.user.image,\n      }\n    : null\n\n  return {\n    user,\n    isLoaded: status !== 'loading',\n    isSignedIn: status === 'authenticated',\n    signIn: handleSignIn,\n    signOut: handleSignOut,\n    session,\n    status,\n  }\n}\n\n// Hook para verificar si el usuario es administrador\nexport function useIsAdmin(): boolean {\n  const { user, isSignedIn } = useAuth()\n\n  // Por ahora, todos los usuarios autenticados son admin\n  // TODO: Implementar sistema de roles más granular\n  return isSignedIn && !!user\n}\n\n// Hook para proteger rutas\nexport function useRequireAuth(redirectTo: string = '/api/auth/signin') {\n  const { isSignedIn, isLoaded } = useAuth()\n  const router = useRouter()\n\n  if (isLoaded && !isSignedIn) {\n    router.push(redirectTo)\n  }\n\n  return { isSignedIn, isLoaded }\n}\n"],"names":["useAuth","useIsAdmin","useRequireAuth","data","session","status","useSession","router","useRouter","handleSignIn","useCallback","provider","options","signIn","callbackUrl","redirect","error","console","handleSignOut","signOut","user","id","email","name","image","isLoaded","isSignedIn","redirectTo","push"],"mappings":"AAAA;;;CAGC,GAED;;;;;;;;;;;;QAYgBA;eAAAA;;QAmDAC;eAAAA;;QASAC;eAAAA;;;uBAtE4B;4BAClB;AASnB,SAASF;IACd,MAAM,EAAEG,MAAMC,OAAO,EAAEC,MAAM,EAAE,GAAGC,IAAAA,iBAAU;IAC5C,MAAMC,SAASC,IAAAA,qBAAS;IAExB,MAAMC,eAAeC,YACnB,OAAOC,WAAmB,QAAQ,EAAEC;QAClC,IAAI;YACF,MAAMC,IAAAA,aAAM,EAACF,UAAU;gBACrBG,aAAaF,SAASE,eAAe;gBACrCC,UAAU;YACZ;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,4BAA4BA;QAC5C;IACF,GACA,EAAE;IAGJ,MAAME,gBAAgBR,YAAY,OAAOE;QACvC,IAAI;YACF,MAAMO,IAAAA,cAAO,EAAC;gBACZL,aAAaF,SAASE,eAAe;gBACrCC,UAAU;YACZ;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,2BAA2BA;QAC3C;IACF,GAAG,EAAE;IAEL,+CAA+C;IAC/C,MAAMI,OAAwBhB,SAASgB,OACnC;QACEC,IAAIjB,QAAQgB,IAAI,CAACC,EAAE,IAAIjB,QAAQgB,IAAI,CAACE,KAAK,IAAI;QAC7CC,MAAMnB,QAAQgB,IAAI,CAACG,IAAI;QACvBD,OAAOlB,QAAQgB,IAAI,CAACE,KAAK;QACzBE,OAAOpB,QAAQgB,IAAI,CAACI,KAAK;IAC3B,IACA;IAEJ,OAAO;QACLJ;QACAK,UAAUpB,WAAW;QACrBqB,YAAYrB,WAAW;QACvBQ,QAAQJ;QACRU,SAASD;QACTd;QACAC;IACF;AACF;AAGO,SAASJ;IACd,MAAM,EAAEmB,IAAI,EAAEM,UAAU,EAAE,GAAG1B;IAE7B,uDAAuD;IACvD,kDAAkD;IAClD,OAAO0B,cAAc,CAAC,CAACN;AACzB;AAGO,SAASlB,eAAeyB,aAAqB,kBAAkB;IACpE,MAAM,EAAED,UAAU,EAAED,QAAQ,EAAE,GAAGzB;IACjC,MAAMO,SAASC,IAAAA,qBAAS;IAExB,IAAIiB,YAAY,CAACC,YAAY;QAC3BnB,OAAOqB,IAAI,CAACD;IACd;IAEA,OAAO;QAAED;QAAYD;IAAS;AAChC"}