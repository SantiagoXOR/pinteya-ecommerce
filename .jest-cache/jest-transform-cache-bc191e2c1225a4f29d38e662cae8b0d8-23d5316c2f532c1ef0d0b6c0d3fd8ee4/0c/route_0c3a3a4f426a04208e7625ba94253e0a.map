{"version":3,"names":["cov_1h87t3rrju","actualCoverage","s","GET","f","runtime","request","searchParams","URL","url","type","b","get","period","parseInt","_logger","logger","info","LogCategory","API","stats","getPerformanceStats","getAlertStats","getBudgetStats","getStreamingStats","getAllStats","_server","NextResponse","json","success","data","timestamp","Date","now","undefined","error","details","Error","message","status","periodHours","currentMetrics","_realtimeperformancemonitor","realTimePerformanceMonitor","getCurrentMetrics","latestMetrics","realTime","length","periodStart","periodMetrics","filter","m","periodWebVitals","webVitals","v","periodApiMetrics","apiMetrics","a","avgResponseTime","reduce","sum","responseTime","avgErrorRate","errorRate","avgThroughput","throughput","avgLCP","lcp","avgFID","fid","avgCLS","cls","current","averages","Math","round","Number","toFixed","coreWebVitals","counts","totalMetrics","webVitalsRecords","apiCalls","trends","calculateTrend","map","alertStats","_advancedalertingengine","advancedAlertingEngine","activeAlerts","getActiveAlerts","periodAlerts","alert","alertsBySeverity","acc","severity","alertsByType","recentAlerts","sort","slice","id","title","summary","total","bySeverity","byType","recent","escalation","escalatedAlerts","escalationLevel","averageEscalationLevel","budgetReport","_performancebudgetsmonitor","performanceBudgetsMonitor","generateReport","activeBudgets","getActiveBudgets","budgetsByStatus","budgetResults","result","budgetsByTrend","trend","topViolations","violations","budgetName","budget","name","averageValue","target","unit","distribution","byStatus","byTrend","recommendations","streamingStats","_realtimemetricsstreaming","realTimeMetricsStreaming","getStats","activeClients","getActiveClients","recentEvents","getRecentEvents","clientsBySubscription","client","subscriptions","forEach","sub","eventsByType","event","overview","clients","active","bySubscription","lastActivity","queueSize","events","latest","performance","alerts","budgets","streaming","Promise","all","systemScore","calculateSystemScore","healthy","budgetViolations","streamingClients","lastUpdate","values","half","floor","firstHalf","secondHalf","firstAvg","val","secondAvg","score","acknowledged","failingBudgets","warningBudgets","memoryUsage","cpuUsage","max","min"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\monitoring\\stats\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MONITORING STATS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { logger, LogCategory } from '@/lib/enterprise/logger';\r\nimport { realTimePerformanceMonitor } from '@/lib/monitoring/real-time-performance-monitor';\r\nimport { advancedAlertingEngine } from '@/lib/monitoring/advanced-alerting-engine';\r\nimport { performanceBudgetsMonitor } from '@/lib/monitoring/performance-budgets-monitor';\r\nimport { realTimeMetricsStreaming } from '@/lib/monitoring/real-time-metrics-streaming';\r\n\r\n/**\r\n * GET - Obtiene estadísticas de monitoreo\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const type = searchParams.get('type') || 'all';\r\n    const period = parseInt(searchParams.get('period') || '24'); // horas\r\n\r\n    logger.info(LogCategory.API, 'Monitoring stats requested', {\r\n      type,\r\n      period\r\n    });\r\n\r\n    let stats: any = {};\r\n\r\n    switch (type) {\r\n      case 'performance':\r\n        stats = await getPerformanceStats(period);\r\n        break;\r\n      \r\n      case 'alerts':\r\n        stats = await getAlertStats(period);\r\n        break;\r\n      \r\n      case 'budgets':\r\n        stats = await getBudgetStats(period);\r\n        break;\r\n      \r\n      case 'streaming':\r\n        stats = await getStreamingStats();\r\n        break;\r\n      \r\n      case 'all':\r\n      default:\r\n        stats = await getAllStats(period);\r\n        break;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: stats,\r\n      timestamp: Date.now(),\r\n      period: type === 'streaming' ? undefined : period\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.API, 'Error getting monitoring stats', error as Error);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error retrieving monitoring statistics',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas de performance\r\n */\r\nasync function getPerformanceStats(periodHours: number) {\r\n  const currentMetrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n  const latestMetrics = currentMetrics.realTime[currentMetrics.realTime.length - 1];\r\n\r\n  // Calcular promedios del período\r\n  const now = Date.now();\r\n  const periodStart = now - (periodHours * 60 * 60 * 1000);\r\n  \r\n  const periodMetrics = currentMetrics.realTime.filter(m => m.timestamp >= periodStart);\r\n  const periodWebVitals = currentMetrics.webVitals.filter(v => v.timestamp >= periodStart);\r\n  const periodApiMetrics = currentMetrics.apiMetrics.filter(a => a.timestamp >= periodStart);\r\n\r\n  const avgResponseTime = periodMetrics.length > 0 \r\n    ? periodMetrics.reduce((sum, m) => sum + m.responseTime, 0) / periodMetrics.length \r\n    : 0;\r\n\r\n  const avgErrorRate = periodMetrics.length > 0 \r\n    ? periodMetrics.reduce((sum, m) => sum + m.errorRate, 0) / periodMetrics.length \r\n    : 0;\r\n\r\n  const avgThroughput = periodMetrics.length > 0 \r\n    ? periodMetrics.reduce((sum, m) => sum + m.throughput, 0) / periodMetrics.length \r\n    : 0;\r\n\r\n  // Core Web Vitals promedios\r\n  const avgLCP = periodWebVitals.length > 0 \r\n    ? periodWebVitals.reduce((sum, v) => sum + v.lcp, 0) / periodWebVitals.length \r\n    : 0;\r\n\r\n  const avgFID = periodWebVitals.length > 0 \r\n    ? periodWebVitals.reduce((sum, v) => sum + v.fid, 0) / periodWebVitals.length \r\n    : 0;\r\n\r\n  const avgCLS = periodWebVitals.length > 0 \r\n    ? periodWebVitals.reduce((sum, v) => sum + v.cls, 0) / periodWebVitals.length \r\n    : 0;\r\n\r\n  return {\r\n    current: latestMetrics || null,\r\n    period: {\r\n      averages: {\r\n        responseTime: Math.round(avgResponseTime),\r\n        errorRate: Number((avgErrorRate * 100).toFixed(2)),\r\n        throughput: Number(avgThroughput.toFixed(2)),\r\n        coreWebVitals: {\r\n          lcp: Math.round(avgLCP),\r\n          fid: Math.round(avgFID),\r\n          cls: Number(avgCLS.toFixed(3))\r\n        }\r\n      },\r\n      counts: {\r\n        totalMetrics: periodMetrics.length,\r\n        webVitalsRecords: periodWebVitals.length,\r\n        apiCalls: periodApiMetrics.length\r\n      }\r\n    },\r\n    trends: {\r\n      responseTime: calculateTrend(periodMetrics.map(m => m.responseTime)),\r\n      errorRate: calculateTrend(periodMetrics.map(m => m.errorRate)),\r\n      throughput: calculateTrend(periodMetrics.map(m => m.throughput))\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas de alertas\r\n */\r\nasync function getAlertStats(periodHours: number) {\r\n  const alertStats = advancedAlertingEngine.getAlertStats();\r\n  const activeAlerts = advancedAlertingEngine.getActiveAlerts();\r\n\r\n  // Filtrar alertas del período\r\n  const now = Date.now();\r\n  const periodStart = now - (periodHours * 60 * 60 * 1000);\r\n  const periodAlerts = activeAlerts.filter(alert => alert.timestamp >= periodStart);\r\n\r\n  // Agrupar por severidad\r\n  const alertsBySeverity = periodAlerts.reduce((acc, alert) => {\r\n    acc[alert.severity] = (acc[alert.severity] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  // Agrupar por tipo\r\n  const alertsByType = periodAlerts.reduce((acc, alert) => {\r\n    acc[alert.type] = (acc[alert.type] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  // Alertas más recientes\r\n  const recentAlerts = activeAlerts\r\n    .sort((a, b) => b.timestamp - a.timestamp)\r\n    .slice(0, 10)\r\n    .map(alert => ({\r\n      id: alert.id,\r\n      type: alert.type,\r\n      severity: alert.severity,\r\n      title: alert.title,\r\n      timestamp: alert.timestamp,\r\n      status: alert.status\r\n    }));\r\n\r\n  return {\r\n    summary: alertStats,\r\n    period: {\r\n      total: periodAlerts.length,\r\n      bySeverity: alertsBySeverity,\r\n      byType: alertsByType\r\n    },\r\n    recent: recentAlerts,\r\n    escalation: {\r\n      escalatedAlerts: activeAlerts.filter(a => a.escalationLevel > 0).length,\r\n      averageEscalationLevel: activeAlerts.length > 0 \r\n        ? activeAlerts.reduce((sum, a) => sum + a.escalationLevel, 0) / activeAlerts.length \r\n        : 0\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas de presupuestos\r\n */\r\nasync function getBudgetStats(periodHours: number) {\r\n  const budgetReport = performanceBudgetsMonitor.generateReport(periodHours);\r\n  const activeBudgets = performanceBudgetsMonitor.getActiveBudgets();\r\n\r\n  // Calcular métricas adicionales\r\n  const budgetsByStatus = budgetReport.budgetResults.reduce((acc, result) => {\r\n    acc[result.status] = (acc[result.status] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  const budgetsByTrend = budgetReport.budgetResults.reduce((acc, result) => {\r\n    acc[result.trend] = (acc[result.trend] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  // Top violaciones\r\n  const topViolations = budgetReport.budgetResults\r\n    .filter(result => result.violations > 0)\r\n    .sort((a, b) => b.violations - a.violations)\r\n    .slice(0, 5)\r\n    .map(result => ({\r\n      budgetName: result.budget.name,\r\n      violations: result.violations,\r\n      averageValue: result.averageValue,\r\n      target: result.budget.target,\r\n      unit: result.budget.unit\r\n    }));\r\n\r\n  return {\r\n    summary: budgetReport.summary,\r\n    period: budgetReport.period,\r\n    distribution: {\r\n      byStatus: budgetsByStatus,\r\n      byTrend: budgetsByTrend\r\n    },\r\n    topViolations,\r\n    recommendations: budgetReport.recommendations,\r\n    activeBudgets: activeBudgets.length\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas de streaming\r\n */\r\nasync function getStreamingStats() {\r\n  const streamingStats = realTimeMetricsStreaming.getStats();\r\n  const activeClients = realTimeMetricsStreaming.getActiveClients();\r\n  const recentEvents = realTimeMetricsStreaming.getRecentEvents(20);\r\n\r\n  // Agrupar clientes por tipo de suscripción\r\n  const clientsBySubscription = activeClients.reduce((acc, client) => {\r\n    client.subscriptions.forEach(sub => {\r\n      acc[sub] = (acc[sub] || 0) + 1;\r\n    });\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  // Eventos recientes por tipo\r\n  const eventsByType = recentEvents.reduce((acc, event) => {\r\n    acc[event.type] = (acc[event.type] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  return {\r\n    overview: streamingStats,\r\n    clients: {\r\n      active: activeClients.length,\r\n      bySubscription: clientsBySubscription,\r\n      details: activeClients.map(client => ({\r\n        id: client.id,\r\n        subscriptions: client.subscriptions.length,\r\n        lastActivity: client.lastActivity,\r\n        queueSize: client.queueSize\r\n      }))\r\n    },\r\n    events: {\r\n      recent: recentEvents.length,\r\n      byType: eventsByType,\r\n      latest: recentEvents.slice(0, 5).map(event => ({\r\n        type: event.type,\r\n        timestamp: event.timestamp,\r\n        id: event.id\r\n      }))\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene todas las estadísticas\r\n */\r\nasync function getAllStats(periodHours: number) {\r\n  const [performance, alerts, budgets, streaming] = await Promise.all([\r\n    getPerformanceStats(periodHours),\r\n    getAlertStats(periodHours),\r\n    getBudgetStats(periodHours),\r\n    getStreamingStats()\r\n  ]);\r\n\r\n  // Calcular score general del sistema\r\n  const systemScore = calculateSystemScore(performance, alerts, budgets);\r\n\r\n  return {\r\n    systemScore,\r\n    performance,\r\n    alerts,\r\n    budgets,\r\n    streaming,\r\n    summary: {\r\n      healthy: systemScore >= 80,\r\n      activeAlerts: alerts.summary.active,\r\n      budgetViolations: budgets.topViolations.length,\r\n      streamingClients: streaming.clients.active,\r\n      lastUpdate: Date.now()\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Calcula tendencia de una serie de valores\r\n */\r\nfunction calculateTrend(values: number[]): number {\r\n  if (values.length < 2) {return 0;}\r\n\r\n  const half = Math.floor(values.length / 2);\r\n  const firstHalf = values.slice(0, half);\r\n  const secondHalf = values.slice(half);\r\n\r\n  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\r\n  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\r\n\r\n  return firstAvg === 0 ? 0 : ((secondAvg - firstAvg) / firstAvg) * 100;\r\n}\r\n\r\n/**\r\n * Calcula score general del sistema\r\n */\r\nfunction calculateSystemScore(performance: any, alerts: any, budgets: any): number {\r\n  let score = 100;\r\n\r\n  // Penalizar por alertas activas\r\n  score -= alerts.summary.active * 5;\r\n  score -= alerts.summary.acknowledged * 2;\r\n\r\n  // Penalizar por presupuestos fallidos\r\n  score -= budgets.summary.failingBudgets * 10;\r\n  score -= budgets.summary.warningBudgets * 5;\r\n\r\n  // Penalizar por performance pobre\r\n  if (performance.current) {\r\n    if (performance.current.errorRate > 0.05) {score -= 15;} // >5% error rate\r\n    if (performance.current.responseTime > 2000) {score -= 10;} // >2s response time\r\n    if (performance.current.memoryUsage > 0.9) {score -= 10;} // >90% memory\r\n    if (performance.current.cpuUsage > 0.8) {score -= 10;} // >80% CPU\r\n  }\r\n\r\n  return Math.max(0, Math.min(100, Math.round(score)));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}