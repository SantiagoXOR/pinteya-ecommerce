{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\enterprise-rls-utils.test.ts"],"sourcesContent":["/**\r\n * Tests para las Utilidades RLS Enterprise\r\n * Verifica que Row Level Security funciona correctamente con las utilidades enterprise\r\n */\r\n\r\n// Mock de Supabase\r\njest.mock('@/lib/supabase', () => ({\r\n  supabaseAdmin: {\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      })),\r\n      insert: jest.fn(() => ({\r\n        select: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      }))\r\n    }))\r\n  }\r\n}));\r\n\r\n// Mock de createClient de Supabase\r\njest.mock('@supabase/supabase-js', () => ({\r\n  createClient: jest.fn(() => ({\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        eq: jest.fn(() => ({\r\n          single: jest.fn()\r\n        }))\r\n      }))\r\n    }))\r\n  }))\r\n}));\r\n\r\nimport {\r\n  validateRLSContext,\r\n  createUserSupabaseClient,\r\n  executeWithRLS,\r\n  checkRLSPermission,\r\n  createRLSFilters,\r\n  withRLS\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\ndescribe('Utilidades RLS Enterprise', () => {\r\n  let mockEnterpriseContext: EnterpriseAuthContext;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n\r\n    // Mock enterprise context\r\n    mockEnterpriseContext = {\r\n      userId: 'user_123',\r\n      sessionId: 'sess_123',\r\n      email: 'admin@test.com',\r\n      role: 'admin',\r\n      permissions: ['admin_access', 'products_create', 'products_read'],\r\n      sessionValid: true,\r\n      securityLevel: 'critical',\r\n      ipAddress: '127.0.0.1',\r\n      userAgent: 'test-agent',\r\n      supabase: supabaseAdmin,\r\n      validations: {\r\n        jwtValid: true,\r\n        csrfValid: true,\r\n        rateLimitPassed: true,\r\n        originValid: true\r\n      }\r\n    };\r\n\r\n    // Mock Supabase admin response\r\n    (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n      select: jest.fn().mockReturnValue({\r\n        eq: jest.fn().mockReturnValue({\r\n          single: jest.fn().mockResolvedValue({\r\n            data: {\r\n              id: 'profile_123',\r\n              supabase_user_id: 'supabase_123',\r\n              clerk_user_id: 'user_123',\r\n              role_id: 1,\r\n              permissions: ['admin_access', 'products_create'],\r\n              is_active: true,\r\n              user_roles: { role_name: 'admin' }\r\n            },\r\n            error: null\r\n          })\r\n        })\r\n      })\r\n    });\r\n  });\r\n\r\n  describe('validateRLSContext', () => {\r\n    it('debe validar contexto RLS para usuario admin', async () => {\r\n      const result = await validateRLSContext(mockEnterpriseContext);\r\n\r\n      expect(result.valid).toBe(true);\r\n      expect(result.context).toBeDefined();\r\n      expect(result.context?.userId).toBe('user_123');\r\n      expect(result.context?.role).toBe('admin');\r\n      expect(result.context?.permissions).toContain('admin_access');\r\n      expect(result.context?.isActive).toBe(true);\r\n    });\r\n\r\n    it('debe fallar si usuario está inactivo', async () => {\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: {\r\n                id: 'profile_123',\r\n                is_active: false,\r\n                user_roles: { role_name: 'user' }\r\n              },\r\n              error: null\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const result = await validateRLSContext(mockEnterpriseContext);\r\n\r\n      expect(result.valid).toBe(false);\r\n      expect(result.error).toBe('Usuario inactivo o no encontrado');\r\n      expect(result.code).toBe('USER_INACTIVE');\r\n    });\r\n\r\n    it('debe fallar si hay error en Supabase', async () => {\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: null,\r\n              error: { message: 'Database error' }\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const result = await validateRLSContext(mockEnterpriseContext);\r\n\r\n      expect(result.valid).toBe(false);\r\n      expect(result.error).toBe('Error obteniendo perfil de usuario');\r\n      expect(result.code).toBe('PROFILE_ERROR');\r\n    });\r\n  });\r\n\r\n  describe('createUserSupabaseClient', () => {\r\n    it('debe crear cliente Supabase con contexto de usuario', () => {\r\n      // Mock environment variables\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\r\n\r\n      const client = createUserSupabaseClient('supabase_123', 'access-token');\r\n\r\n      expect(client).toBeDefined();\r\n      expect(createClient).toHaveBeenCalledWith(\r\n        'https://test.supabase.co',\r\n        'test-anon-key',\r\n        expect.objectContaining({\r\n          auth: {\r\n            autoRefreshToken: false,\r\n            persistSession: false\r\n          },\r\n          global: {\r\n            headers: {\r\n              'X-User-ID': 'supabase_123',\r\n              'Authorization': 'Bearer access-token'\r\n            }\r\n          }\r\n        })\r\n      );\r\n    });\r\n\r\n    it('debe retornar null si configuración no está disponible', () => {\r\n      delete process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n      delete process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\n      const client = createUserSupabaseClient('supabase_123');\r\n\r\n      expect(client).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('executeWithRLS', () => {\r\n    it('debe ejecutar consulta con RLS habilitado', async () => {\r\n      // Mock environment variables para createUserSupabaseClient\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\r\n\r\n      const mockQueryFunction = jest.fn().mockResolvedValue({\r\n        products: [{ id: 1, name: 'Test Product' }],\r\n        total: 1\r\n      });\r\n\r\n      const result = await executeWithRLS(\r\n        mockEnterpriseContext,\r\n        mockQueryFunction,\r\n        { enforceRLS: true, auditLog: true }\r\n      );\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.data).toBeDefined();\r\n      expect(mockQueryFunction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debe usar cliente admin para bypass RLS si es admin', async () => {\r\n      const mockQueryFunction = jest.fn().mockResolvedValue({ data: 'test' });\r\n\r\n      const result = await executeWithRLS(\r\n        mockEnterpriseContext,\r\n        mockQueryFunction,\r\n        { bypassRLS: true }\r\n      );\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(mockQueryFunction).toHaveBeenCalledWith(\r\n        supabaseAdmin,\r\n        expect.objectContaining({ role: 'admin' })\r\n      );\r\n    });\r\n\r\n    it('debe fallar si validación RLS falla', async () => {\r\n      (supabaseAdmin.from as jest.Mock).mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          eq: jest.fn().mockReturnValue({\r\n            single: jest.fn().mockResolvedValue({\r\n              data: null,\r\n              error: { message: 'User not found' }\r\n            })\r\n          })\r\n        })\r\n      });\r\n\r\n      const mockQueryFunction = jest.fn();\r\n\r\n      const result = await executeWithRLS(\r\n        mockEnterpriseContext,\r\n        mockQueryFunction\r\n      );\r\n\r\n      expect(result.success).toBe(false);\r\n      expect(result.error).toBe('Error obteniendo perfil de usuario');\r\n      expect(mockQueryFunction).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('checkRLSPermission', () => {\r\n    it('debe permitir acceso a admin siempre', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'admin' as const,\r\n        permissions: [],\r\n        isActive: true\r\n      };\r\n\r\n      const hasPermission = checkRLSPermission(rlsContext, 'any_permission');\r\n\r\n      expect(hasPermission).toBe(true);\r\n    });\r\n\r\n    it('debe permitir acceso si usuario tiene permiso específico', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: ['products_read'],\r\n        isActive: true\r\n      };\r\n\r\n      const hasPermission = checkRLSPermission(rlsContext, 'products_read');\r\n\r\n      expect(hasPermission).toBe(true);\r\n    });\r\n\r\n    it('debe permitir acceso si usuario es propietario del recurso', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: [],\r\n        isActive: true\r\n      };\r\n\r\n      const hasPermission = checkRLSPermission(rlsContext, 'edit_profile', 'user_123');\r\n\r\n      expect(hasPermission).toBe(true);\r\n    });\r\n\r\n    it('debe denegar acceso si no tiene permisos', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: ['basic_access'],\r\n        isActive: true\r\n      };\r\n\r\n      const hasPermission = checkRLSPermission(rlsContext, 'admin_access');\r\n\r\n      expect(hasPermission).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('createRLSFilters', () => {\r\n    it('debe crear filtros para user_profiles para usuario normal', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: [],\r\n        isActive: true\r\n      };\r\n\r\n      const filters = createRLSFilters(rlsContext, 'user_profiles');\r\n\r\n      expect(filters).toEqual({\r\n        clerk_user_id: 'user_123'\r\n      });\r\n    });\r\n\r\n    it('debe crear filtros para products para usuario normal', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: [],\r\n        isActive: true\r\n      };\r\n\r\n      const filters = createRLSFilters(rlsContext, 'products');\r\n\r\n      expect(filters).toEqual({\r\n        is_active: true\r\n      });\r\n    });\r\n\r\n    it('no debe crear filtros para admin', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'admin' as const,\r\n        permissions: ['admin_access'],\r\n        isActive: true\r\n      };\r\n\r\n      const filters = createRLSFilters(rlsContext, 'products');\r\n\r\n      expect(filters).toEqual({});\r\n    });\r\n\r\n    it('debe crear filtros para orders para usuario normal', () => {\r\n      const rlsContext = {\r\n        userId: 'user_123',\r\n        role: 'user' as const,\r\n        permissions: [],\r\n        isActive: true\r\n      };\r\n\r\n      const filters = createRLSFilters(rlsContext, 'orders');\r\n\r\n      expect(filters).toEqual({\r\n        user_id: 'user_123'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('withRLS middleware', () => {\r\n    it('debe ejecutar handler si contexto enterprise está disponible', async () => {\r\n      const mockRequest = {\r\n        enterpriseAuth: mockEnterpriseContext\r\n      } as any;\r\n      const mockResponse = { status: jest.fn(), json: jest.fn() };\r\n      const mockHandler = jest.fn().mockResolvedValue({ success: true });\r\n\r\n      const middleware = withRLS();\r\n      const wrappedHandler = middleware(mockHandler);\r\n\r\n      const result = await wrappedHandler(mockRequest, mockResponse);\r\n\r\n      expect(mockHandler).toHaveBeenCalledWith(mockRequest, mockResponse);\r\n      expect(mockRequest.rlsContext).toBeDefined();\r\n    });\r\n\r\n    it('debe retornar error si contexto enterprise no está disponible', async () => {\r\n      const mockRequest = {} as any;\r\n      const mockResponse = {\r\n        status: jest.fn().mockReturnThis(),\r\n        json: jest.fn()\r\n      };\r\n      const mockHandler = jest.fn();\r\n\r\n      const middleware = withRLS();\r\n      const wrappedHandler = middleware(mockHandler);\r\n\r\n      const result = await wrappedHandler(mockRequest, mockResponse);\r\n\r\n      expect(mockHandler).not.toHaveBeenCalled();\r\n\r\n      // Para App Router, verifica que retorna Response\r\n      if (result && typeof result === 'object' && 'status' in result) {\r\n        expect(result.status).toBe(401);\r\n      } else {\r\n        // Para Pages Router, verifica que llama a response methods\r\n        expect(mockResponse.status).toHaveBeenCalledWith(401);\r\n        expect(mockResponse.json).toHaveBeenCalledWith(\r\n          expect.objectContaining({\r\n            success: false,\r\n            error: 'Contexto enterprise no disponible',\r\n            code: 'NO_ENTERPRISE_CONTEXT'\r\n          })\r\n        );\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","supabaseAdmin","from","fn","select","eq","single","insert","createClient","describe","mockEnterpriseContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","mockReturnValue","mockResolvedValue","data","id","supabase_user_id","clerk_user_id","role_id","is_active","user_roles","role_name","error","it","result","validateRLSContext","expect","valid","toBe","context","toBeDefined","toContain","isActive","code","message","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","client","createUserSupabaseClient","toHaveBeenCalledWith","objectContaining","auth","autoRefreshToken","persistSession","global","headers","toBeNull","mockQueryFunction","products","name","total","executeWithRLS","enforceRLS","auditLog","success","toHaveBeenCalled","bypassRLS","not","rlsContext","hasPermission","checkRLSPermission","filters","createRLSFilters","toEqual","user_id","mockRequest","enterpriseAuth","mockResponse","status","json","mockHandler","middleware","withRLS","wrappedHandler","mockReturnThis"],"mappings":"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"}