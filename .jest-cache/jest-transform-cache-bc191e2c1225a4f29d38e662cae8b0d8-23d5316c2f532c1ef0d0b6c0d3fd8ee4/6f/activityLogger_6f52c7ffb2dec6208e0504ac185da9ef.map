{"version":3,"names":["getRequestInfo","cov_1lzxodwomw","f","s","logActivityFromClient","logAuthActivity","logBulkActivity","logOrderActivity","logPreferenceActivity","logProfileActivity","logSecurityActivity","logSessionActivity","logUserActivity","userId","activityData","options","b","skipIfError","includeTimestamp","logData","user_id","action","category","description","metadata","ip_address","user_agent","created_at","Date","toISOString","error","_supabase","supabaseAdmin","from","insert","console","request","timestamp","ip","userAgent","replace","severity","device_info","session_id","orderId","order_id","headers","get","split","trim","response","fetch","method","body","JSON","stringify","ok","statusText","data","json","success","activities","failed","result"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\activity\\activityLogger.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ACTIVITY LOGGER UTILITY\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para actividad\r\nexport interface ActivityLogData {\r\n  action: string;\r\n  category: 'auth' | 'profile' | 'order' | 'security' | 'session' | 'preference';\r\n  description?: string;\r\n  metadata?: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n}\r\n\r\nexport interface ActivityLogOptions {\r\n  skipIfError?: boolean;\r\n  includeTimestamp?: boolean;\r\n}\r\n\r\n/**\r\n * Función utilitaria centralizada para registrar actividad de usuario\r\n * Puede ser usada desde APIs del servidor o desde el cliente\r\n */\r\nexport async function logUserActivity(\r\n  userId: string,\r\n  activityData: ActivityLogData,\r\n  options: ActivityLogOptions = {}\r\n): Promise<boolean> {\r\n  try {\r\n    const { skipIfError = true, includeTimestamp = true } = options;\r\n\r\n    // Preparar datos de actividad\r\n    const logData = {\r\n      user_id: userId,\r\n      action: activityData.action,\r\n      category: activityData.category,\r\n      description: activityData.description,\r\n      metadata: activityData.metadata,\r\n      ip_address: activityData.ip_address,\r\n      user_agent: activityData.user_agent,\r\n      ...(includeTimestamp && { created_at: new Date().toISOString() })\r\n    };\r\n\r\n    // Insertar en base de datos\r\n    const { error } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .insert(logData);\r\n\r\n    if (error) {\r\n      console.error('Error al registrar actividad:', error);\r\n      if (!skipIfError) {\r\n        throw error;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error en logUserActivity:', error);\r\n    if (!options.skipIfError) {\r\n      throw error;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Función específica para logging de autenticación\r\n */\r\nexport async function logAuthActivity(\r\n  userId: string,\r\n  action: 'login' | 'logout' | 'register' | 'password_reset' | 'email_verification',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'auth',\r\n    description: `Usuario ${action}`,\r\n    metadata: {\r\n      timestamp: new Date().toISOString(),\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de perfil\r\n */\r\nexport async function logProfileActivity(\r\n  userId: string,\r\n  action: 'update_profile' | 'upload_avatar' | 'delete_avatar' | 'add_address' | 'update_address' | 'delete_address',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'profile',\r\n    description: `Perfil: ${action.replace('_', ' ')}`,\r\n    metadata,\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de seguridad\r\n */\r\nexport async function logSecurityActivity(\r\n  userId: string,\r\n  action: 'enable_2fa' | 'disable_2fa' | 'update_security_settings' | 'suspicious_activity' | 'password_change',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'security',\r\n    description: `Seguridad: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      severity: action === 'suspicious_activity' ? 'high' : 'medium',\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de sesiones\r\n */\r\nexport async function logSessionActivity(\r\n  userId: string,\r\n  action: 'session_start' | 'session_end' | 'session_timeout' | 'revoke_session' | 'trust_device',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'session',\r\n    description: `Sesión: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      device_info: metadata?.device_info,\r\n      session_id: metadata?.session_id,\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de órdenes\r\n */\r\nexport async function logOrderActivity(\r\n  userId: string,\r\n  action: 'create_order' | 'update_order' | 'cancel_order' | 'payment_completed' | 'order_shipped' | 'order_delivered',\r\n  orderId: string,\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'order',\r\n    description: `Orden ${orderId}: ${action.replace('_', ' ')}`,\r\n    metadata: {\r\n      order_id: orderId,\r\n      ...metadata\r\n    },\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función específica para logging de preferencias\r\n */\r\nexport async function logPreferenceActivity(\r\n  userId: string,\r\n  action: 'update_notifications' | 'update_display' | 'update_privacy' | 'update_theme',\r\n  metadata?: Record<string, any>,\r\n  request?: { ip?: string; userAgent?: string }\r\n): Promise<boolean> {\r\n  return logUserActivity(userId, {\r\n    action,\r\n    category: 'preference',\r\n    description: `Preferencias: ${action.replace('_', ' ')}`,\r\n    metadata,\r\n    ip_address: request?.ip,\r\n    user_agent: request?.userAgent\r\n  });\r\n}\r\n\r\n/**\r\n * Función para obtener información del request (para usar en APIs)\r\n */\r\nexport function getRequestInfo(request: Request | any): { ip?: string; userAgent?: string } {\r\n  try {\r\n    const ip = request.headers?.get?.('x-forwarded-for')?.split(',')[0]?.trim() ||\r\n              request.headers?.get?.('x-real-ip') ||\r\n              request.ip ||\r\n              'unknown';\r\n    \r\n    const userAgent = request.headers?.get?.('user-agent') || 'unknown';\r\n    \r\n    return { ip, userAgent };\r\n  } catch (error) {\r\n    console.error('Error obteniendo información del request:', error);\r\n    return { ip: 'unknown', userAgent: 'unknown' };\r\n  }\r\n}\r\n\r\n/**\r\n * Función para logging desde el cliente (usando fetch a la API)\r\n */\r\nexport async function logActivityFromClient(\r\n  action: string,\r\n  category: ActivityLogData['category'],\r\n  description?: string,\r\n  metadata?: Record<string, any>\r\n): Promise<boolean> {\r\n  try {\r\n    const response = await fetch('/api/user/activity', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        action,\r\n        category,\r\n        description,\r\n        metadata,\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error('Error al registrar actividad desde cliente:', response.statusText);\r\n      return false;\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.success || false;\r\n  } catch (error) {\r\n    console.error('Error en logActivityFromClient:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para logging masivo (útil para migraciones o importaciones)\r\n */\r\nexport async function logBulkActivity(\r\n  activities: Array<{ userId: string; activityData: ActivityLogData }>,\r\n  options: ActivityLogOptions = {}\r\n): Promise<{ success: number; failed: number }> {\r\n  let success = 0;\r\n  let failed = 0;\r\n\r\n  for (const { userId, activityData } of activities) {\r\n    const result = await logUserActivity(userId, activityData, options);\r\n    if (result) {\r\n      success++;\r\n    } else {\r\n      failed++;\r\n    }\r\n  }\r\n\r\n  return { success, failed };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}