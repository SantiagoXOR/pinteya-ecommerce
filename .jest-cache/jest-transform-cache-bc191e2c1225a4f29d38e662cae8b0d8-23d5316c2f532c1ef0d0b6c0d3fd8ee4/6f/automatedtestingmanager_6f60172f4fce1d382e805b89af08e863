7363d7e66ae3c1760a38557d4809f4f0
// ===================================
// PINTEYA E-COMMERCE - AUTOMATED TESTING MANAGER
// Sistema de testing automatizado con regression, performance y accessibility
// ===================================
// Importar performance hooks solo en servidor
"use strict";

/* istanbul ignore next */
function cov_1q24k08i8t() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-testing-manager.ts";
  var hash = "ba47362f1c3dc4ede015bc70e484fea259fd34e5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-testing-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 24
        }
      },
      "6": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 78
        }
      },
      "7": {
        start: {
          line: 26,
          column: 26
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "8": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 42
        }
      },
      "10": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "11": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 45
        }
      },
      "12": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 22
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "14": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 48
        }
      },
      "16": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 45
        }
      },
      "17": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 24
        }
      },
      "18": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 65
        }
      },
      "19": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "20": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 94
        }
      },
      "21": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 35
        }
      },
      "22": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 61,
          column: 31
        },
        end: {
          line: 61,
          column: 82
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 35
        }
      },
      "25": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 56
        }
      },
      "26": {
        start: {
          line: 65,
          column: 22
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "27": {
        start: {
          line: 69,
          column: 43
        },
        end: {
          line: 69,
          column: 64
        }
      },
      "28": {
        start: {
          line: 70,
          column: 43
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "29": {
        start: {
          line: 71,
          column: 44
        },
        end: {
          line: 71,
          column: 66
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 50
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "32": {
        start: {
          line: 80,
          column: 26
        },
        end: {
          line: 80,
          column: 45
        }
      },
      "33": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "34": {
        start: {
          line: 83,
          column: 35
        },
        end: {
          line: 83,
          column: 84
        }
      },
      "35": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 69
        }
      },
      "36": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "37": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 73
        }
      },
      "38": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 93,
          column: 18
        }
      },
      "39": {
        start: {
          line: 96,
          column: 37
        },
        end: {
          line: 96,
          column: 108
        }
      },
      "40": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "41": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 107,
          column: 18
        }
      },
      "42": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 117,
          column: 14
        }
      },
      "43": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 124,
          column: 14
        }
      },
      "44": {
        start: {
          line: 130,
          column: 26
        },
        end: {
          line: 130,
          column: 45
        }
      },
      "45": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "46": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 133,
          column: 60
        }
      },
      "47": {
        start: {
          line: 134,
          column: 33
        },
        end: {
          line: 134,
          column: 64
        }
      },
      "48": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "49": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 141,
          column: 18
        }
      },
      "50": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 151,
          column: 14
        }
      },
      "51": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "52": {
        start: {
          line: 167,
          column: 26
        },
        end: {
          line: 167,
          column: 45
        }
      },
      "53": {
        start: {
          line: 168,
          column: 22
        },
        end: {
          line: 168,
          column: 24
        }
      },
      "54": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 67
        }
      },
      "55": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "56": {
        start: {
          line: 171,
          column: 31
        },
        end: {
          line: 171,
          column: 77
        }
      },
      "57": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 35
        }
      },
      "58": {
        start: {
          line: 175,
          column: 27
        },
        end: {
          line: 175,
          column: 54
        }
      },
      "59": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 31
        }
      },
      "60": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 55
        }
      },
      "61": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 31
        }
      },
      "62": {
        start: {
          line: 180,
          column: 25
        },
        end: {
          line: 180,
          column: 56
        }
      },
      "63": {
        start: {
          line: 181,
          column: 22
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "64": {
        start: {
          line: 185,
          column: 43
        },
        end: {
          line: 185,
          column: 64
        }
      },
      "65": {
        start: {
          line: 186,
          column: 43
        },
        end: {
          line: 186,
          column: 64
        }
      },
      "66": {
        start: {
          line: 187,
          column: 44
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "67": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 51
        }
      },
      "68": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 21
        }
      },
      "69": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "70": {
        start: {
          line: 207,
          column: 26
        },
        end: {
          line: 207,
          column: 45
        }
      },
      "71": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "72": {
        start: {
          line: 209,
          column: 28
        },
        end: {
          line: 209,
          column: 77
        }
      },
      "73": {
        start: {
          line: 211,
          column: 27
        },
        end: {
          line: 211,
          column: 29
        }
      },
      "74": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "75": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 50
        }
      },
      "76": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "77": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "78": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "79": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 51
        }
      },
      "80": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "81": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "82": {
        start: {
          line: 240,
          column: 26
        },
        end: {
          line: 240,
          column: 45
        }
      },
      "83": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "84": {
        start: {
          line: 243,
          column: 31
        },
        end: {
          line: 243,
          column: 57
        }
      },
      "85": {
        start: {
          line: 244,
          column: 30
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "86": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 254,
          column: 14
        }
      },
      "87": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "88": {
        start: {
          line: 267,
          column: 26
        },
        end: {
          line: 267,
          column: 45
        }
      },
      "89": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "90": {
        start: {
          line: 270,
          column: 33
        },
        end: {
          line: 270,
          column: 51
        }
      },
      "91": {
        start: {
          line: 271,
          column: 30
        },
        end: {
          line: 271,
          column: 32
        }
      },
      "92": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 281,
          column: 14
        }
      },
      "93": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 288,
          column: 14
        }
      },
      "94": {
        start: {
          line: 297,
          column: 26
        },
        end: {
          line: 297,
          column: 45
        }
      },
      "95": {
        start: {
          line: 298,
          column: 22
        },
        end: {
          line: 298,
          column: 24
        }
      },
      "96": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 69
        }
      },
      "97": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "98": {
        start: {
          line: 301,
          column: 31
        },
        end: {
          line: 301,
          column: 69
        }
      },
      "99": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 35
        }
      },
      "100": {
        start: {
          line: 304,
          column: 25
        },
        end: {
          line: 304,
          column: 56
        }
      },
      "101": {
        start: {
          line: 305,
          column: 22
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "102": {
        start: {
          line: 309,
          column: 43
        },
        end: {
          line: 309,
          column: 64
        }
      },
      "103": {
        start: {
          line: 310,
          column: 43
        },
        end: {
          line: 310,
          column: 64
        }
      },
      "104": {
        start: {
          line: 311,
          column: 44
        },
        end: {
          line: 311,
          column: 66
        }
      },
      "105": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 53
        }
      },
      "106": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 21
        }
      },
      "107": {
        start: {
          line: 320,
          column: 26
        },
        end: {
          line: 320,
          column: 45
        }
      },
      "108": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "109": {
        start: {
          line: 323,
          column: 27
        },
        end: {
          line: 323,
          column: 65
        }
      },
      "110": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "111": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 337,
          column: 14
        }
      },
      "112": {
        start: {
          line: 344,
          column: 27
        },
        end: {
          line: 344,
          column: 56
        }
      },
      "113": {
        start: {
          line: 345,
          column: 22
        },
        end: {
          line: 345,
          column: 57
        }
      },
      "114": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 363,
          column: 10
        }
      },
      "115": {
        start: {
          line: 349,
          column: 24
        },
        end: {
          line: 359,
          column: 17
        }
      },
      "116": {
        start: {
          line: 372,
          column: 29
        },
        end: {
          line: 372,
          column: 53
        }
      },
      "117": {
        start: {
          line: 373,
          column: 23
        },
        end: {
          line: 373,
          column: 54
        }
      },
      "118": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "119": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 32
        }
      },
      "120": {
        start: {
          line: 387,
          column: 23
        },
        end: {
          line: 387,
          column: 60
        }
      },
      "121": {
        start: {
          line: 388,
          column: 27
        },
        end: {
          line: 388,
          column: 81
        }
      },
      "122": {
        start: {
          line: 388,
          column: 55
        },
        end: {
          line: 388,
          column: 77
        }
      },
      "123": {
        start: {
          line: 389,
          column: 28
        },
        end: {
          line: 389,
          column: 83
        }
      },
      "124": {
        start: {
          line: 389,
          column: 56
        },
        end: {
          line: 389,
          column: 79
        }
      },
      "125": {
        start: {
          line: 390,
          column: 28
        },
        end: {
          line: 390,
          column: 83
        }
      },
      "126": {
        start: {
          line: 390,
          column: 56
        },
        end: {
          line: 390,
          column: 79
        }
      },
      "127": {
        start: {
          line: 391,
          column: 30
        },
        end: {
          line: 391,
          column: 82
        }
      },
      "128": {
        start: {
          line: 391,
          column: 58
        },
        end: {
          line: 391,
          column: 78
        }
      },
      "129": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 399,
          column: 10
        }
      },
      "130": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 33
        }
      },
      "131": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 37
        }
      },
      "132": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 46
        }
      },
      "133": {
        start: {
          line: 411,
          column: 32
        },
        end: {
          line: 411,
          column: 69
        }
      },
      "134": {
        start: {
          line: 412,
          column: 17
        },
        end: {
          line: 415,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 26
          },
          end: {
            line: 26,
            column: 27
          }
        },
        loc: {
          start: {
            line: 26,
            column: 30
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 25
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 50,
            column: 7
          }
        },
        loc: {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 69,
            column: 38
          },
          end: {
            line: 69,
            column: 39
          }
        },
        loc: {
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 69,
            column: 64
          }
        },
        line: 69
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 70,
            column: 39
          }
        },
        loc: {
          start: {
            line: 70,
            column: 43
          },
          end: {
            line: 70,
            column: 64
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 71,
            column: 39
          },
          end: {
            line: 71,
            column: 40
          }
        },
        loc: {
          start: {
            line: 71,
            column: 44
          },
          end: {
            line: 71,
            column: 66
          }
        },
        line: 71
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 79,
            column: 6
          },
          end: {
            line: 79,
            column: 7
          }
        },
        loc: {
          start: {
            line: 79,
            column: 58
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 79
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 129,
            column: 6
          },
          end: {
            line: 129,
            column: 7
          }
        },
        loc: {
          start: {
            line: 129,
            column: 46
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 129
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 166,
            column: 6
          },
          end: {
            line: 166,
            column: 7
          }
        },
        loc: {
          start: {
            line: 166,
            column: 44
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 166
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 185,
            column: 38
          },
          end: {
            line: 185,
            column: 39
          }
        },
        loc: {
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 64
          }
        },
        line: 185
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 186,
            column: 38
          },
          end: {
            line: 186,
            column: 39
          }
        },
        loc: {
          start: {
            line: 186,
            column: 43
          },
          end: {
            line: 186,
            column: 64
          }
        },
        line: 186
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 39
          },
          end: {
            line: 187,
            column: 40
          }
        },
        loc: {
          start: {
            line: 187,
            column: 44
          },
          end: {
            line: 187,
            column: 66
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 195,
            column: 6
          },
          end: {
            line: 195,
            column: 7
          }
        },
        loc: {
          start: {
            line: 195,
            column: 51
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 195
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 206,
            column: 6
          },
          end: {
            line: 206,
            column: 7
          }
        },
        loc: {
          start: {
            line: 206,
            column: 48
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 206
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 239,
            column: 6
          },
          end: {
            line: 239,
            column: 7
          }
        },
        loc: {
          start: {
            line: 239,
            column: 29
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 239
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 266,
            column: 6
          },
          end: {
            line: 266,
            column: 7
          }
        },
        loc: {
          start: {
            line: 266,
            column: 30
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 266
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 296,
            column: 6
          },
          end: {
            line: 296,
            column: 7
          }
        },
        loc: {
          start: {
            line: 296,
            column: 41
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 296
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 309,
            column: 38
          },
          end: {
            line: 309,
            column: 39
          }
        },
        loc: {
          start: {
            line: 309,
            column: 43
          },
          end: {
            line: 309,
            column: 64
          }
        },
        line: 309
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 310,
            column: 38
          },
          end: {
            line: 310,
            column: 39
          }
        },
        loc: {
          start: {
            line: 310,
            column: 43
          },
          end: {
            line: 310,
            column: 64
          }
        },
        line: 310
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 311,
            column: 39
          },
          end: {
            line: 311,
            column: 40
          }
        },
        loc: {
          start: {
            line: 311,
            column: 44
          },
          end: {
            line: 311,
            column: 66
          }
        },
        line: 311
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 319,
            column: 6
          },
          end: {
            line: 319,
            column: 7
          }
        },
        loc: {
          start: {
            line: 319,
            column: 40
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 319
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 342,
            column: 6
          },
          end: {
            line: 342,
            column: 7
          }
        },
        loc: {
          start: {
            line: 342,
            column: 40
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 342
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 349,
            column: 15
          },
          end: {
            line: 349,
            column: 16
          }
        },
        loc: {
          start: {
            line: 349,
            column: 24
          },
          end: {
            line: 359,
            column: 17
          }
        },
        line: 349
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 370,
            column: 6
          },
          end: {
            line: 370,
            column: 7
          }
        },
        loc: {
          start: {
            line: 370,
            column: 38
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 370
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 381,
            column: 6
          },
          end: {
            line: 381,
            column: 7
          }
        },
        loc: {
          start: {
            line: 381,
            column: 23
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 381
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 386,
            column: 6
          },
          end: {
            line: 386,
            column: 7
          }
        },
        loc: {
          start: {
            line: 386,
            column: 23
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 386
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 388,
            column: 41
          },
          end: {
            line: 388,
            column: 42
          }
        },
        loc: {
          start: {
            line: 388,
            column: 55
          },
          end: {
            line: 388,
            column: 77
          }
        },
        line: 388
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 389,
            column: 42
          },
          end: {
            line: 389,
            column: 43
          }
        },
        loc: {
          start: {
            line: 389,
            column: 56
          },
          end: {
            line: 389,
            column: 79
          }
        },
        line: 389
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 390,
            column: 42
          },
          end: {
            line: 390,
            column: 43
          }
        },
        loc: {
          start: {
            line: 390,
            column: 56
          },
          end: {
            line: 390,
            column: 79
          }
        },
        line: 390
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 391,
            column: 44
          },
          end: {
            line: 391,
            column: 45
          }
        },
        loc: {
          start: {
            line: 391,
            column: 58
          },
          end: {
            line: 391,
            column: 78
          }
        },
        line: 391
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 403,
            column: 6
          },
          end: {
            line: 403,
            column: 7
          }
        },
        loc: {
          start: {
            line: 403,
            column: 21
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 403
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 17
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 406
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 50
          },
          end: {
            line: 24,
            column: 71
          }
        }, {
          start: {
            line: 24,
            column: 74
          },
          end: {
            line: 24,
            column: 78
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 37
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 27,
            column: 59
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 17
          }
        }, {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 42
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 48
          },
          end: {
            line: 123,
            column: 61
          }
        }, {
          start: {
            line: 123,
            column: 64
          },
          end: {
            line: 123,
            column: 79
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 48
          },
          end: {
            line: 157,
            column: 61
          }
        }, {
          start: {
            line: 157,
            column: 64
          },
          end: {
            line: 157,
            column: 79
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "14": {
        loc: {
          start: {
            line: 223,
            column: 24
          },
          end: {
            line: 223,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 46
          },
          end: {
            line: 223,
            column: 54
          }
        }, {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 223,
            column: 65
          }
        }],
        line: 223
      },
      "15": {
        loc: {
          start: {
            line: 225,
            column: 23
          },
          end: {
            line: 225,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 43
          },
          end: {
            line: 225,
            column: 60
          }
        }, {
          start: {
            line: 225,
            column: 63
          },
          end: {
            line: 225,
            column: 72
          }
        }],
        line: 225
      },
      "16": {
        loc: {
          start: {
            line: 233,
            column: 23
          },
          end: {
            line: 233,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 48
          },
          end: {
            line: 233,
            column: 61
          }
        }, {
          start: {
            line: 233,
            column: 64
          },
          end: {
            line: 233,
            column: 79
          }
        }],
        line: 233
      },
      "17": {
        loc: {
          start: {
            line: 247,
            column: 24
          },
          end: {
            line: 247,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 50
          },
          end: {
            line: 247,
            column: 58
          }
        }, {
          start: {
            line: 247,
            column: 61
          },
          end: {
            line: 247,
            column: 69
          }
        }],
        line: 247
      },
      "18": {
        loc: {
          start: {
            line: 249,
            column: 23
          },
          end: {
            line: 249,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 48
          },
          end: {
            line: 249,
            column: 111
          }
        }, {
          start: {
            line: 249,
            column: 114
          },
          end: {
            line: 249,
            column: 123
          }
        }],
        line: 249
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 23
          },
          end: {
            line: 260,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 48
          },
          end: {
            line: 260,
            column: 61
          }
        }, {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 79
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 274,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 274,
            column: 52
          },
          end: {
            line: 274,
            column: 60
          }
        }, {
          start: {
            line: 274,
            column: 63
          },
          end: {
            line: 274,
            column: 71
          }
        }],
        line: 274
      },
      "21": {
        loc: {
          start: {
            line: 276,
            column: 23
          },
          end: {
            line: 276,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 50
          },
          end: {
            line: 276,
            column: 117
          }
        }, {
          start: {
            line: 276,
            column: 120
          },
          end: {
            line: 276,
            column: 129
          }
        }],
        line: 276
      },
      "22": {
        loc: {
          start: {
            line: 287,
            column: 23
          },
          end: {
            line: 287,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 48
          },
          end: {
            line: 287,
            column: 61
          }
        }, {
          start: {
            line: 287,
            column: 64
          },
          end: {
            line: 287,
            column: 79
          }
        }],
        line: 287
      },
      "23": {
        loc: {
          start: {
            line: 326,
            column: 24
          },
          end: {
            line: 326,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 45
          },
          end: {
            line: 326,
            column: 53
          }
        }, {
          start: {
            line: 326,
            column: 56
          },
          end: {
            line: 326,
            column: 64
          }
        }],
        line: 326
      },
      "24": {
        loc: {
          start: {
            line: 328,
            column: 23
          },
          end: {
            line: 328,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 328,
            column: 43
          },
          end: {
            line: 328,
            column: 91
          }
        }, {
          start: {
            line: 328,
            column: 94
          },
          end: {
            line: 328,
            column: 103
          }
        }],
        line: 328
      },
      "25": {
        loc: {
          start: {
            line: 336,
            column: 23
          },
          end: {
            line: 336,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 336,
            column: 48
          },
          end: {
            line: 336,
            column: 61
          }
        }, {
          start: {
            line: 336,
            column: 64
          },
          end: {
            line: 336,
            column: 79
          }
        }],
        line: 336
      },
      "26": {
        loc: {
          start: {
            line: 373,
            column: 23
          },
          end: {
            line: 373,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 373,
            column: 45
          },
          end: {
            line: 373,
            column: 48
          }
        }, {
          start: {
            line: 373,
            column: 51
          },
          end: {
            line: 373,
            column: 54
          }
        }],
        line: 373
      },
      "27": {
        loc: {
          start: {
            line: 397,
            column: 25
          },
          end: {
            line: 397,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 42
          },
          end: {
            line: 397,
            column: 72
          }
        }, {
          start: {
            line: 397,
            column: 75
          },
          end: {
            line: 397,
            column: 76
          }
        }],
        line: 397
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-testing-manager.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - AUTOMATED TESTING MANAGER\r\n// Sistema de testing automatizado con regression, performance y accessibility\r\n// ===================================\r\n\r\n// Importar performance hooks solo en servidor\r\nconst perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null;\r\n\r\n// Helper para obtener timestamp de performance\r\nconst getPerformanceNow = (): number => {\r\n  if (typeof window !== 'undefined' && window.performance) {\r\n    return window.getPerformanceNow();\r\n  }\r\n  if (perfHooks && perfHooks.performance) {\r\n    return perfHooks.getPerformanceNow();\r\n  }\r\n  return Date.now();\r\n};\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\ninterface TestResult {\r\n  name: string;\r\n  status: 'passed' | 'failed' | 'skipped';\r\n  duration: number;\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\ninterface TestSuite {\r\n  name: string;\r\n  tests: TestResult[];\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  duration: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  loadTime: number;\r\n  renderTime: number;\r\n  memoryUsage: number;\r\n  bundleSize: number;\r\n  lighthouse?: {\r\n    performance: number;\r\n    accessibility: number;\r\n    bestPractices: number;\r\n    seo: number;\r\n  };\r\n}\r\n\r\ninterface AccessibilityResult {\r\n  violations: Array<{\r\n    id: string;\r\n    impact: 'minor' | 'moderate' | 'serious' | 'critical';\r\n    description: string;\r\n    nodes: number;\r\n  }>;\r\n  passes: number;\r\n  incomplete: number;\r\n  score: number;\r\n}\r\n\r\ninterface RegressionTestConfig {\r\n  baselineUrl?: string;\r\n  threshold: number;\r\n  components: string[];\r\n  apis: string[];\r\n}\r\n\r\n// ===================================\r\n// AUTOMATED TESTING MANAGER\r\n// ===================================\r\n\r\nclass AutomatedTestingManager {\r\n  private static instance: AutomatedTestingManager;\r\n  private testResults: Map<string, TestSuite> = new Map();\r\n  private performanceBaselines: Map<string, PerformanceMetrics> = new Map();\r\n\r\n  static getInstance(): AutomatedTestingManager {\r\n    if (!AutomatedTestingManager.instance) {\r\n      AutomatedTestingManager.instance = new AutomatedTestingManager();\r\n    }\r\n    return AutomatedTestingManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // REGRESSION TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de regresi\xF3n\r\n   */\r\n  async runRegressionTests(config: RegressionTestConfig): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de regresi\xF3n...');\r\n\r\n    // Test de componentes\r\n    for (const component of config.components) {\r\n      const testResult = await this.testComponentRegression(component, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de APIs\r\n    for (const api of config.apis) {\r\n      const testResult = await this.testApiRegression(api, config.threshold);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Regression Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('regression', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de regresi\xF3n de componente\r\n   */\r\n  private async testComponentRegression(component: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de componente\r\n      const currentMetrics = await this.measureComponentPerformance(component);\r\n      const baseline = this.performanceBaselines.get(component);\r\n\r\n      if (!baseline) {\r\n        // Establecer baseline si no existe\r\n        this.performanceBaselines.set(component, currentMetrics);\r\n        return {\r\n          name: `${component} - Baseline Set`,\r\n          status: 'passed',\r\n          duration: getPerformanceNow() - startTime,\r\n          details: currentMetrics\r\n        };\r\n      }\r\n\r\n      // Comparar con baseline\r\n      const performanceDelta = (currentMetrics.renderTime - baseline.renderTime) / baseline.renderTime;\r\n      \r\n      if (performanceDelta > threshold) {\r\n        return {\r\n          name: `${component} - Performance Regression`,\r\n          status: 'failed',\r\n          duration: getPerformanceNow() - startTime,\r\n          error: `Performance degraded by ${(performanceDelta * 100).toFixed(2)}%`,\r\n          details: { current: currentMetrics, baseline }\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${component} - Performance Check`,\r\n        status: 'passed',\r\n        duration: getPerformanceNow() - startTime,\r\n        details: { current: currentMetrics, baseline }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de regresi\xF3n de API\r\n   */\r\n  private async testApiRegression(api: string, threshold: number): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de API\r\n      const response = await this.testApiEndpoint(api);\r\n      const responseTime = getPerformanceNow() - startTime;\r\n\r\n      if (responseTime > threshold) {\r\n        return {\r\n          name: `${api} - Response Time`,\r\n          status: 'failed',\r\n          duration: responseTime,\r\n          error: `Response time ${responseTime.toFixed(2)}ms exceeds threshold ${threshold}ms`\r\n        };\r\n      }\r\n\r\n      return {\r\n        name: `${api} - Response Time`,\r\n        status: 'passed',\r\n        duration: responseTime,\r\n        details: { responseTime, status: response.status }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${api} - Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // PERFORMANCE TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de performance\r\n   */\r\n  async runPerformanceTests(components: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de performance...');\r\n\r\n    for (const component of components) {\r\n      const testResult = await this.testComponentPerformance(component);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    // Test de bundle size\r\n    const bundleTest = await this.testBundleSize();\r\n    tests.push(bundleTest);\r\n\r\n    // Test de memory leaks\r\n    const memoryTest = await this.testMemoryLeaks();\r\n    tests.push(memoryTest);\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Performance Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('performance', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Medir performance de componente\r\n   */\r\n  private async measureComponentPerformance(component: string): Promise<PerformanceMetrics> {\r\n    // Simular medici\xF3n de performance\r\n    return {\r\n      loadTime: Math.random() * 100 + 50, // 50-150ms\r\n      renderTime: Math.random() * 20 + 5, // 5-25ms\r\n      memoryUsage: Math.random() * 10 + 5, // 5-15MB\r\n      bundleSize: Math.random() * 50 + 20 // 20-70KB\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test de performance de componente\r\n   */\r\n  private async testComponentPerformance(component: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      const metrics = await this.measureComponentPerformance(component);\r\n      \r\n      // Verificar thresholds\r\n      const issues: string[] = [];\r\n      if (metrics.renderTime > 16) {issues.push('Render time > 16ms');}\r\n      if (metrics.memoryUsage > 50) {issues.push('Memory usage > 50MB');}\r\n      if (metrics.bundleSize > 100) {issues.push('Bundle size > 100KB');}\r\n\r\n      return {\r\n        name: `${component} - Performance`,\r\n        status: issues.length === 0 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: issues.length > 0 ? issues.join(', ') : undefined,\r\n        details: metrics\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${component} - Performance Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de bundle size\r\n   */\r\n  private async testBundleSize(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular an\xE1lisis de bundle\r\n      const bundleSize = Math.random() * 1000 + 500; // 500-1500KB\r\n      const threshold = 1000; // 1MB\r\n\r\n      return {\r\n        name: 'Bundle Size Check',\r\n        status: bundleSize <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: bundleSize > threshold ? `Bundle size ${bundleSize.toFixed(2)}KB exceeds ${threshold}KB` : undefined,\r\n        details: { bundleSize, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Bundle Size Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de memory leaks\r\n   */\r\n  private async testMemoryLeaks(): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de memory leaks\r\n      const memoryGrowth = Math.random() * 20; // 0-20MB growth\r\n      const threshold = 10; // 10MB threshold\r\n\r\n      return {\r\n        name: 'Memory Leak Check',\r\n        status: memoryGrowth <= threshold ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: memoryGrowth > threshold ? `Memory growth ${memoryGrowth.toFixed(2)}MB exceeds ${threshold}MB` : undefined,\r\n        details: { memoryGrowth, threshold }\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: 'Memory Leak Error',\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ACCESSIBILITY TESTING\r\n  // ===================================\r\n\r\n  /**\r\n   * Ejecutar tests de accesibilidad\r\n   */\r\n  async runAccessibilityTests(pages: string[]): Promise<TestSuite> {\r\n    const startTime = getPerformanceNow();\r\n    const tests: TestResult[] = [];\r\n\r\n    console.log('[Testing] Iniciando tests de accesibilidad...');\r\n\r\n    for (const page of pages) {\r\n      const testResult = await this.testPageAccessibility(page);\r\n      tests.push(testResult);\r\n    }\r\n\r\n    const duration = getPerformanceNow() - startTime;\r\n    const suite: TestSuite = {\r\n      name: 'Accessibility Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n\r\n    this.testResults.set('accessibility', suite);\r\n    return suite;\r\n  }\r\n\r\n  /**\r\n   * Test de accesibilidad de p\xE1gina\r\n   */\r\n  private async testPageAccessibility(page: string): Promise<TestResult> {\r\n    const startTime = getPerformanceNow();\r\n    \r\n    try {\r\n      // Simular test de accesibilidad\r\n      const result = await this.runAccessibilityAudit(page);\r\n      \r\n      return {\r\n        name: `${page} - Accessibility`,\r\n        status: result.score >= 80 ? 'passed' : 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: result.score < 80 ? `Accessibility score ${result.score}% below 80%` : undefined,\r\n        details: result\r\n      };\r\n\r\n    } catch (error) {\r\n      return {\r\n        name: `${page} - Accessibility Error`,\r\n        status: 'failed',\r\n        duration: getPerformanceNow() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar auditor\xEDa de accesibilidad\r\n   */\r\n  private async runAccessibilityAudit(page: string): Promise<AccessibilityResult> {\r\n    // Simular auditor\xEDa de accesibilidad\r\n    const violations = Math.floor(Math.random() * 5); // 0-4 violations\r\n    const score = Math.max(60, 100 - (violations * 10)); // 60-100% score\r\n\r\n    return {\r\n      violations: Array.from({ length: violations }, (_, i) => ({\r\n        id: `violation-${i}`,\r\n        impact: ['minor', 'moderate', 'serious', 'critical'][Math.floor(Math.random() * 4)] as any,\r\n        description: `Accessibility violation ${i + 1}`,\r\n        nodes: Math.floor(Math.random() * 5) + 1\r\n      })),\r\n      passes: Math.floor(Math.random() * 20) + 10,\r\n      incomplete: Math.floor(Math.random() * 3),\r\n      score\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // UTILITY METHODS\r\n  // ===================================\r\n\r\n  /**\r\n   * Test de endpoint de API\r\n   */\r\n  private async testApiEndpoint(endpoint: string): Promise<{ status: number; responseTime: number }> {\r\n    // Simular llamada a API\r\n    const responseTime = Math.random() * 200 + 50; // 50-250ms\r\n    const status = Math.random() > 0.1 ? 200 : 500; // 90% success rate\r\n\r\n    return { status, responseTime };\r\n  }\r\n\r\n  /**\r\n   * Obtener resultados de tests\r\n   */\r\n  getTestResults(): Map<string, TestSuite> {\r\n    return this.testResults;\r\n  }\r\n\r\n  /**\r\n   * Obtener resumen de tests\r\n   */\r\n  getTestSummary() {\r\n    const suites = Array.from(this.testResults.values());\r\n    const totalTests = suites.reduce((sum, suite) => sum + suite.totalTests, 0);\r\n    const passedTests = suites.reduce((sum, suite) => sum + suite.passedTests, 0);\r\n    const failedTests = suites.reduce((sum, suite) => sum + suite.failedTests, 0);\r\n    const totalDuration = suites.reduce((sum, suite) => sum + suite.duration, 0);\r\n\r\n    return {\r\n      totalSuites: suites.length,\r\n      totalTests,\r\n      passedTests,\r\n      failedTests,\r\n      successRate: totalTests > 0 ? (passedTests / totalTests) * 100 : 0,\r\n      totalDuration\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Limpiar resultados\r\n   */\r\n  clearResults(): void {\r\n    this.testResults.clear();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport const automatedTestingManager = AutomatedTestingManager.getInstance();\r\n\r\nexport default {\r\n  automatedTestingManager,\r\n  AutomatedTestingManager\r\n};\r\n\r\nexport type {\r\n  TestResult,\r\n  TestSuite,\r\n  PerformanceMetrics,\r\n  AccessibilityResult,\r\n  RegressionTestConfig\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["automatedTestingManager", "perfHooks", "window", "require", "getPerformanceNow", "performance", "Date", "now", "AutomatedTestingManager", "getInstance", "instance", "runRegressionTests", "config", "startTime", "tests", "console", "log", "component", "components", "testResult", "testComponentRegression", "threshold", "push", "api", "apis", "testApiRegression", "duration", "suite", "name", "totalTests", "length", "passedTests", "filter", "t", "status", "failedTests", "skippedTests", "testResults", "set", "currentMetrics", "measureComponentPerformance", "baseline", "performanceBaselines", "get", "details", "performanceDelta", "renderTime", "error", "toFixed", "current", "Error", "message", "response", "testApiEndpoint", "responseTime", "runPerformanceTests", "testComponentPerformance", "bundleTest", "testBundleSize", "memoryTest", "testMemoryLeaks", "loadTime", "Math", "random", "memoryUsage", "bundleSize", "metrics", "issues", "join", "undefined", "memoryGrowth", "runAccessibilityTests", "pages", "page", "testPageAccessibility", "result", "runAccessibilityAudit", "score", "violations", "floor", "max", "Array", "from", "_", "i", "id", "impact", "description", "nodes", "passes", "incomplete", "endpoint", "getTestResults", "getTestSummary", "suites", "values", "reduce", "sum", "totalDuration", "totalSuites", "successRate", "clearResults", "clear", "Map"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ba47362f1c3dc4ede015bc70e484fea259fd34e5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1q24k08i8t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q24k08i8t();
cov_1q24k08i8t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1q24k08i8t().f[0]++;
  cov_1q24k08i8t().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1q24k08i8t().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1q24k08i8t().s[3]++;
_export(exports, {
  get automatedTestingManager() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[1]++;
    cov_1q24k08i8t().s[4]++;
    return automatedTestingManager;
  },
  get default() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[2]++;
    cov_1q24k08i8t().s[5]++;
    return _default;
  }
});
const perfHooks =
/* istanbul ignore next */
(cov_1q24k08i8t().s[6]++, typeof window === 'undefined' ?
/* istanbul ignore next */
(cov_1q24k08i8t().b[0][0]++, require('perf_hooks')) :
/* istanbul ignore next */
(cov_1q24k08i8t().b[0][1]++, null));
// Helper para obtener timestamp de performance
/* istanbul ignore next */
cov_1q24k08i8t().s[7]++;
const getPerformanceNow = () => {
  /* istanbul ignore next */
  cov_1q24k08i8t().f[3]++;
  cov_1q24k08i8t().s[8]++;
  if (
  /* istanbul ignore next */
  (cov_1q24k08i8t().b[2][0]++, typeof window !== 'undefined') &&
  /* istanbul ignore next */
  (cov_1q24k08i8t().b[2][1]++, window.performance)) {
    /* istanbul ignore next */
    cov_1q24k08i8t().b[1][0]++;
    cov_1q24k08i8t().s[9]++;
    return window.getPerformanceNow();
  } else
  /* istanbul ignore next */
  {
    cov_1q24k08i8t().b[1][1]++;
  }
  cov_1q24k08i8t().s[10]++;
  if (
  /* istanbul ignore next */
  (cov_1q24k08i8t().b[4][0]++, perfHooks) &&
  /* istanbul ignore next */
  (cov_1q24k08i8t().b[4][1]++, perfHooks.performance)) {
    /* istanbul ignore next */
    cov_1q24k08i8t().b[3][0]++;
    cov_1q24k08i8t().s[11]++;
    return perfHooks.getPerformanceNow();
  } else
  /* istanbul ignore next */
  {
    cov_1q24k08i8t().b[3][1]++;
  }
  cov_1q24k08i8t().s[12]++;
  return Date.now();
};
// ===================================
// AUTOMATED TESTING MANAGER
// ===================================
class AutomatedTestingManager {
  static getInstance() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[4]++;
    cov_1q24k08i8t().s[13]++;
    if (!AutomatedTestingManager.instance) {
      /* istanbul ignore next */
      cov_1q24k08i8t().b[5][0]++;
      cov_1q24k08i8t().s[14]++;
      AutomatedTestingManager.instance = new AutomatedTestingManager();
    } else
    /* istanbul ignore next */
    {
      cov_1q24k08i8t().b[5][1]++;
    }
    cov_1q24k08i8t().s[15]++;
    return AutomatedTestingManager.instance;
  }
  // ===================================
  // REGRESSION TESTING
  // ===================================
  /**
  * Ejecutar tests de regresión
  */
  async runRegressionTests(config) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[16]++, getPerformanceNow());
    const tests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[17]++, []);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[18]++;
    console.log('[Testing] Iniciando tests de regresión...');
    // Test de componentes
    /* istanbul ignore next */
    cov_1q24k08i8t().s[19]++;
    for (const component of config.components) {
      const testResult =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[20]++, await this.testComponentRegression(component, config.threshold));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[21]++;
      tests.push(testResult);
    }
    // Test de APIs
    /* istanbul ignore next */
    cov_1q24k08i8t().s[22]++;
    for (const api of config.apis) {
      const testResult =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[23]++, await this.testApiRegression(api, config.threshold));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[24]++;
      tests.push(testResult);
    }
    const duration =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[25]++, getPerformanceNow() - startTime);
    const suite =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[26]++, {
      name: 'Regression Tests',
      tests,
      totalTests: tests.length,
      passedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[6]++;
        cov_1q24k08i8t().s[27]++;
        return t.status === 'passed';
      }).length,
      failedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[7]++;
        cov_1q24k08i8t().s[28]++;
        return t.status === 'failed';
      }).length,
      skippedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[8]++;
        cov_1q24k08i8t().s[29]++;
        return t.status === 'skipped';
      }).length,
      duration
    });
    /* istanbul ignore next */
    cov_1q24k08i8t().s[30]++;
    this.testResults.set('regression', suite);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[31]++;
    return suite;
  }
  /**
  * Test de regresión de componente
  */
  async testComponentRegression(component, threshold) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[9]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[32]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[33]++;
    try {
      // Simular test de componente
      const currentMetrics =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[34]++, await this.measureComponentPerformance(component));
      const baseline =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[35]++, this.performanceBaselines.get(component));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[36]++;
      if (!baseline) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[6][0]++;
        cov_1q24k08i8t().s[37]++;
        // Establecer baseline si no existe
        this.performanceBaselines.set(component, currentMetrics);
        /* istanbul ignore next */
        cov_1q24k08i8t().s[38]++;
        return {
          name: `${component} - Baseline Set`,
          status: 'passed',
          duration: getPerformanceNow() - startTime,
          details: currentMetrics
        };
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[6][1]++;
      }
      // Comparar con baseline
      const performanceDelta =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[39]++, (currentMetrics.renderTime - baseline.renderTime) / baseline.renderTime);
      /* istanbul ignore next */
      cov_1q24k08i8t().s[40]++;
      if (performanceDelta > threshold) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[7][0]++;
        cov_1q24k08i8t().s[41]++;
        return {
          name: `${component} - Performance Regression`,
          status: 'failed',
          duration: getPerformanceNow() - startTime,
          error: `Performance degraded by ${(performanceDelta * 100).toFixed(2)}%`,
          details: {
            current: currentMetrics,
            baseline
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[7][1]++;
      }
      cov_1q24k08i8t().s[42]++;
      return {
        name: `${component} - Performance Check`,
        status: 'passed',
        duration: getPerformanceNow() - startTime,
        details: {
          current: currentMetrics,
          baseline
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[43]++;
      return {
        name: `${component} - Error`,
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[8][1]++, 'Unknown error')
      };
    }
  }
  /**
  * Test de regresión de API
  */
  async testApiRegression(api, threshold) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[10]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[44]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[45]++;
    try {
      // Simular test de API
      const response =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[46]++, await this.testApiEndpoint(api));
      const responseTime =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[47]++, getPerformanceNow() - startTime);
      /* istanbul ignore next */
      cov_1q24k08i8t().s[48]++;
      if (responseTime > threshold) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[9][0]++;
        cov_1q24k08i8t().s[49]++;
        return {
          name: `${api} - Response Time`,
          status: 'failed',
          duration: responseTime,
          error: `Response time ${responseTime.toFixed(2)}ms exceeds threshold ${threshold}ms`
        };
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[9][1]++;
      }
      cov_1q24k08i8t().s[50]++;
      return {
        name: `${api} - Response Time`,
        status: 'passed',
        duration: responseTime,
        details: {
          responseTime,
          status: response.status
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[51]++;
      return {
        name: `${api} - Error`,
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[10][1]++, 'Unknown error')
      };
    }
  }
  // ===================================
  // PERFORMANCE TESTING
  // ===================================
  /**
  * Ejecutar tests de performance
  */
  async runPerformanceTests(components) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[11]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[52]++, getPerformanceNow());
    const tests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[53]++, []);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[54]++;
    console.log('[Testing] Iniciando tests de performance...');
    /* istanbul ignore next */
    cov_1q24k08i8t().s[55]++;
    for (const component of components) {
      const testResult =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[56]++, await this.testComponentPerformance(component));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[57]++;
      tests.push(testResult);
    }
    // Test de bundle size
    const bundleTest =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[58]++, await this.testBundleSize());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[59]++;
    tests.push(bundleTest);
    // Test de memory leaks
    const memoryTest =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[60]++, await this.testMemoryLeaks());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[61]++;
    tests.push(memoryTest);
    const duration =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[62]++, getPerformanceNow() - startTime);
    const suite =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[63]++, {
      name: 'Performance Tests',
      tests,
      totalTests: tests.length,
      passedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[12]++;
        cov_1q24k08i8t().s[64]++;
        return t.status === 'passed';
      }).length,
      failedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[13]++;
        cov_1q24k08i8t().s[65]++;
        return t.status === 'failed';
      }).length,
      skippedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[14]++;
        cov_1q24k08i8t().s[66]++;
        return t.status === 'skipped';
      }).length,
      duration
    });
    /* istanbul ignore next */
    cov_1q24k08i8t().s[67]++;
    this.testResults.set('performance', suite);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[68]++;
    return suite;
  }
  /**
  * Medir performance de componente
  */
  async measureComponentPerformance(component) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[15]++;
    cov_1q24k08i8t().s[69]++;
    // Simular medición de performance
    return {
      loadTime: Math.random() * 100 + 50,
      renderTime: Math.random() * 20 + 5,
      memoryUsage: Math.random() * 10 + 5,
      bundleSize: Math.random() * 50 + 20 // 20-70KB
    };
  }
  /**
  * Test de performance de componente
  */
  async testComponentPerformance(component) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[16]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[70]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[71]++;
    try {
      const metrics =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[72]++, await this.measureComponentPerformance(component));
      // Verificar thresholds
      const issues =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[73]++, []);
      /* istanbul ignore next */
      cov_1q24k08i8t().s[74]++;
      if (metrics.renderTime > 16) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[11][0]++;
        cov_1q24k08i8t().s[75]++;
        issues.push('Render time > 16ms');
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[11][1]++;
      }
      cov_1q24k08i8t().s[76]++;
      if (metrics.memoryUsage > 50) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[12][0]++;
        cov_1q24k08i8t().s[77]++;
        issues.push('Memory usage > 50MB');
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[12][1]++;
      }
      cov_1q24k08i8t().s[78]++;
      if (metrics.bundleSize > 100) {
        /* istanbul ignore next */
        cov_1q24k08i8t().b[13][0]++;
        cov_1q24k08i8t().s[79]++;
        issues.push('Bundle size > 100KB');
      } else
      /* istanbul ignore next */
      {
        cov_1q24k08i8t().b[13][1]++;
      }
      cov_1q24k08i8t().s[80]++;
      return {
        name: `${component} - Performance`,
        status: issues.length === 0 ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[14][0]++, 'passed') :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[14][1]++, 'failed'),
        duration: getPerformanceNow() - startTime,
        error: issues.length > 0 ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[15][0]++, issues.join(', ')) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[15][1]++, undefined),
        details: metrics
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[81]++;
      return {
        name: `${component} - Performance Error`,
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[16][1]++, 'Unknown error')
      };
    }
  }
  /**
  * Test de bundle size
  */
  async testBundleSize() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[17]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[82]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[83]++;
    try {
      // Simular análisis de bundle
      const bundleSize =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[84]++, Math.random() * 1000 + 500); // 500-1500KB
      const threshold =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[85]++, 1000); // 1MB
      /* istanbul ignore next */
      cov_1q24k08i8t().s[86]++;
      return {
        name: 'Bundle Size Check',
        status: bundleSize <= threshold ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[17][0]++, 'passed') :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[17][1]++, 'failed'),
        duration: getPerformanceNow() - startTime,
        error: bundleSize > threshold ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[18][0]++, `Bundle size ${bundleSize.toFixed(2)}KB exceeds ${threshold}KB`) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[18][1]++, undefined),
        details: {
          bundleSize,
          threshold
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[87]++;
      return {
        name: 'Bundle Size Error',
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[19][1]++, 'Unknown error')
      };
    }
  }
  /**
  * Test de memory leaks
  */
  async testMemoryLeaks() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[18]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[88]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[89]++;
    try {
      // Simular test de memory leaks
      const memoryGrowth =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[90]++, Math.random() * 20); // 0-20MB growth
      const threshold =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[91]++, 10); // 10MB threshold
      /* istanbul ignore next */
      cov_1q24k08i8t().s[92]++;
      return {
        name: 'Memory Leak Check',
        status: memoryGrowth <= threshold ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[20][0]++, 'passed') :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[20][1]++, 'failed'),
        duration: getPerformanceNow() - startTime,
        error: memoryGrowth > threshold ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[21][0]++, `Memory growth ${memoryGrowth.toFixed(2)}MB exceeds ${threshold}MB`) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[21][1]++, undefined),
        details: {
          memoryGrowth,
          threshold
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[93]++;
      return {
        name: 'Memory Leak Error',
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[22][1]++, 'Unknown error')
      };
    }
  }
  // ===================================
  // ACCESSIBILITY TESTING
  // ===================================
  /**
  * Ejecutar tests de accesibilidad
  */
  async runAccessibilityTests(pages) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[19]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[94]++, getPerformanceNow());
    const tests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[95]++, []);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[96]++;
    console.log('[Testing] Iniciando tests de accesibilidad...');
    /* istanbul ignore next */
    cov_1q24k08i8t().s[97]++;
    for (const page of pages) {
      const testResult =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[98]++, await this.testPageAccessibility(page));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[99]++;
      tests.push(testResult);
    }
    const duration =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[100]++, getPerformanceNow() - startTime);
    const suite =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[101]++, {
      name: 'Accessibility Tests',
      tests,
      totalTests: tests.length,
      passedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[20]++;
        cov_1q24k08i8t().s[102]++;
        return t.status === 'passed';
      }).length,
      failedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[21]++;
        cov_1q24k08i8t().s[103]++;
        return t.status === 'failed';
      }).length,
      skippedTests: tests.filter(t => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[22]++;
        cov_1q24k08i8t().s[104]++;
        return t.status === 'skipped';
      }).length,
      duration
    });
    /* istanbul ignore next */
    cov_1q24k08i8t().s[105]++;
    this.testResults.set('accessibility', suite);
    /* istanbul ignore next */
    cov_1q24k08i8t().s[106]++;
    return suite;
  }
  /**
  * Test de accesibilidad de página
  */
  async testPageAccessibility(page) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[23]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[107]++, getPerformanceNow());
    /* istanbul ignore next */
    cov_1q24k08i8t().s[108]++;
    try {
      // Simular test de accesibilidad
      const result =
      /* istanbul ignore next */
      (cov_1q24k08i8t().s[109]++, await this.runAccessibilityAudit(page));
      /* istanbul ignore next */
      cov_1q24k08i8t().s[110]++;
      return {
        name: `${page} - Accessibility`,
        status: result.score >= 80 ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[23][0]++, 'passed') :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[23][1]++, 'failed'),
        duration: getPerformanceNow() - startTime,
        error: result.score < 80 ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[24][0]++, `Accessibility score ${result.score}% below 80%`) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[24][1]++, undefined),
        details: result
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1q24k08i8t().s[111]++;
      return {
        name: `${page} - Accessibility Error`,
        status: 'failed',
        duration: getPerformanceNow() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1q24k08i8t().b[25][1]++, 'Unknown error')
      };
    }
  }
  /**
  * Ejecutar auditoría de accesibilidad
  */
  async runAccessibilityAudit(page) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[24]++;
    // Simular auditoría de accesibilidad
    const violations =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[112]++, Math.floor(Math.random() * 5)); // 0-4 violations
    const score =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[113]++, Math.max(60, 100 - violations * 10)); // 60-100% score
    /* istanbul ignore next */
    cov_1q24k08i8t().s[114]++;
    return {
      violations: Array.from({
        length: violations
      }, (_, i) => {
        /* istanbul ignore next */
        cov_1q24k08i8t().f[25]++;
        cov_1q24k08i8t().s[115]++;
        return {
          id: `violation-${i}`,
          impact: ['minor', 'moderate', 'serious', 'critical'][Math.floor(Math.random() * 4)],
          description: `Accessibility violation ${i + 1}`,
          nodes: Math.floor(Math.random() * 5) + 1
        };
      }),
      passes: Math.floor(Math.random() * 20) + 10,
      incomplete: Math.floor(Math.random() * 3),
      score
    };
  }
  // ===================================
  // UTILITY METHODS
  // ===================================
  /**
  * Test de endpoint de API
  */
  async testApiEndpoint(endpoint) {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[26]++;
    // Simular llamada a API
    const responseTime =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[116]++, Math.random() * 200 + 50); // 50-250ms
    const status =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[117]++, Math.random() > 0.1 ?
    /* istanbul ignore next */
    (cov_1q24k08i8t().b[26][0]++, 200) :
    /* istanbul ignore next */
    (cov_1q24k08i8t().b[26][1]++, 500)); // 90% success rate
    /* istanbul ignore next */
    cov_1q24k08i8t().s[118]++;
    return {
      status,
      responseTime
    };
  }
  /**
  * Obtener resultados de tests
  */
  getTestResults() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[27]++;
    cov_1q24k08i8t().s[119]++;
    return this.testResults;
  }
  /**
  * Obtener resumen de tests
  */
  getTestSummary() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[28]++;
    const suites =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[120]++, Array.from(this.testResults.values()));
    const totalTests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[121]++, suites.reduce((sum, suite) => {
      /* istanbul ignore next */
      cov_1q24k08i8t().f[29]++;
      cov_1q24k08i8t().s[122]++;
      return sum + suite.totalTests;
    }, 0));
    const passedTests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[123]++, suites.reduce((sum, suite) => {
      /* istanbul ignore next */
      cov_1q24k08i8t().f[30]++;
      cov_1q24k08i8t().s[124]++;
      return sum + suite.passedTests;
    }, 0));
    const failedTests =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[125]++, suites.reduce((sum, suite) => {
      /* istanbul ignore next */
      cov_1q24k08i8t().f[31]++;
      cov_1q24k08i8t().s[126]++;
      return sum + suite.failedTests;
    }, 0));
    const totalDuration =
    /* istanbul ignore next */
    (cov_1q24k08i8t().s[127]++, suites.reduce((sum, suite) => {
      /* istanbul ignore next */
      cov_1q24k08i8t().f[32]++;
      cov_1q24k08i8t().s[128]++;
      return sum + suite.duration;
    }, 0));
    /* istanbul ignore next */
    cov_1q24k08i8t().s[129]++;
    return {
      totalSuites: suites.length,
      totalTests,
      passedTests,
      failedTests,
      successRate: totalTests > 0 ?
      /* istanbul ignore next */
      (cov_1q24k08i8t().b[27][0]++, passedTests / totalTests * 100) :
      /* istanbul ignore next */
      (cov_1q24k08i8t().b[27][1]++, 0),
      totalDuration
    };
  }
  /**
  * Limpiar resultados
  */
  clearResults() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[33]++;
    cov_1q24k08i8t().s[130]++;
    this.testResults.clear();
  }
  constructor() {
    /* istanbul ignore next */
    cov_1q24k08i8t().f[34]++;
    cov_1q24k08i8t().s[131]++;
    this.testResults = new Map();
    /* istanbul ignore next */
    cov_1q24k08i8t().s[132]++;
    this.performanceBaselines = new Map();
  }
}
const automatedTestingManager =
/* istanbul ignore next */
(cov_1q24k08i8t().s[133]++, AutomatedTestingManager.getInstance());
const _default =
/* istanbul ignore next */
(cov_1q24k08i8t().s[134]++, {
  automatedTestingManager,
  AutomatedTestingManager
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,