420b0d01a00e01cedd003b23411b23e2
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_f0z4zmao0() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-order-creation\\route.ts";
  var hash = "9b3bc240ca35083f4781c6b183c5457c4b187991";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-order-creation\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 20
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "8": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "9": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "10": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 75
        }
      },
      "12": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "13": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 103
        }
      },
      "14": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 103
        }
      },
      "15": {
        start: {
          line: 69,
          column: 67
        },
        end: {
          line: 69,
          column: 99
        }
      },
      "16": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 70,
          column: 56
        }
      },
      "17": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 53
        }
      },
      "18": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 122
        }
      },
      "19": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 63
        }
      },
      "20": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "21": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 79
        }
      },
      "22": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "23": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 57
        }
      },
      "24": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "25": {
        start: {
          line: 87,
          column: 51
        },
        end: {
          line: 95,
          column: 28
        }
      },
      "26": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "27": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 89
        }
      },
      "28": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "29": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 86
        }
      },
      "30": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 63
        }
      },
      "31": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "32": {
        start: {
          line: 109,
          column: 60
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "33": {
        start: {
          line: 116,
          column: 51
        },
        end: {
          line: 116,
          column: 113
        }
      },
      "34": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "35": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 89
        }
      },
      "36": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 94
        }
      },
      "37": {
        start: {
          line: 124,
          column: 31
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "38": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 97
        }
      },
      "39": {
        start: {
          line: 133,
          column: 59
        },
        end: {
          line: 136,
          column: 47
        }
      },
      "40": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "41": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 112
        }
      },
      "42": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 74
        }
      },
      "43": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "44": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 62
        }
      },
      "45": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 56
        }
      },
      "46": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 29
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 54
          },
          end: {
            line: 69,
            column: 55
          }
        },
        loc: {
          start: {
            line: 69,
            column: 67
          },
          end: {
            line: 69,
            column: 99
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 109,
            column: 51
          },
          end: {
            line: 109,
            column: 52
          }
        },
        loc: {
          start: {
            line: 109,
            column: 60
          },
          end: {
            line: 115,
            column: 13
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "1": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "2": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: 120,
            column: 15
          },
          end: {
            line: 122,
            column: 9
          }
        }],
        line: 117
      },
      "3": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: 139,
            column: 15
          },
          end: {
            line: 141,
            column: 9
          }
        }],
        line: 137
      },
      "4": {
        loc: {
          start: {
            line: 147,
            column: 23
          },
          end: {
            line: 147,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 23
          },
          end: {
            line: 147,
            column: 35
          }
        }, {
          start: {
            line: 147,
            column: 39
          },
          end: {
            line: 147,
            column: 44
          }
        }],
        line: 147
      },
      "5": {
        loc: {
          start: {
            line: 148,
            column: 23
          },
          end: {
            line: 148,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 23
          },
          end: {
            line: 148,
            column: 28
          }
        }, {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 34
          }
        }],
        line: 148
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-order-creation\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - TEST ORDER CREATION\r\n// Endpoint para crear \xF3rdenes de prueba y validar el flujo completo\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  \r\n  try {\r\n    logs.push('[TEST_ORDER] Iniciando creaci\xF3n de orden de prueba...');\r\n\r\n    // Datos de prueba para la orden\r\n    const testOrderData = {\r\n      items: [\r\n        {\r\n          id: \"43\",\r\n          name: \"Pincel Persianero N\xB020\",\r\n          price: 1150,\r\n          quantity: 2,\r\n          image: \"/products/pincel-persianero-20.jpg\"\r\n        },\r\n        {\r\n          id: \"87\", \r\n          name: \"Lija al Agua Grano 40\",\r\n          price: 850,\r\n          quantity: 1,\r\n          image: \"/products/lija-agua-40.jpg\"\r\n        }\r\n      ],\r\n      payer: {\r\n        name: \"Juan\",\r\n        surname: \"P\xE9rez\",\r\n        email: \"juan.perez@test.com\",\r\n        phone: \"+54 11 1234-5678\",\r\n        identification: {\r\n          type: \"DNI\",\r\n          number: \"12345678\"\r\n        }\r\n      },\r\n      shipping: {\r\n        cost: 500,\r\n        address: {\r\n          street_name: \"Av. Corrientes\",\r\n          street_number: 1234,\r\n          zip_code: \"1043\",\r\n          city_name: \"Buenos Aires\",\r\n          state_name: \"CABA\"\r\n        }\r\n      },\r\n      external_reference: `test_order_${Date.now()}`\r\n    };\r\n\r\n    logs.push('[TEST_ORDER] Datos de orden preparados: ' + JSON.stringify(testOrderData, null, 2));\r\n\r\n    // Calcular totales\r\n    const itemsTotal = testOrderData.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    const shippingCost = testOrderData.shipping.cost;\r\n    const totalAmount = itemsTotal + shippingCost;\r\n\r\n    logs.push(`[TEST_ORDER] Totales calculados: items=${itemsTotal}, shipping=${shippingCost}, total=${totalAmount}`);\r\n\r\n    // Conectar a Supabase\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      logs.push('[TEST_ORDER] ERROR: Cliente de Supabase no disponible');\r\n      return NextResponse.json({ error: 'Supabase not available', logs }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[TEST_ORDER] Cliente de Supabase OK');\r\n\r\n    // Crear orden en base de datos\r\n    logs.push('[TEST_ORDER] Creando orden en base de datos...');\r\n    \r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .insert({\r\n        user_id: '00000000-0000-4000-8000-000000000000', // Usuario de prueba\r\n        status: 'pending',\r\n        payment_status: 'pending',\r\n        total: totalAmount,\r\n        shipping_address: JSON.stringify(testOrderData.shipping.address),\r\n        external_reference: testOrderData.external_reference,\r\n        payer_info: testOrderData.payer,\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (orderError) {\r\n      logs.push('[TEST_ORDER] ERROR creando orden: ' + JSON.stringify(orderError));\r\n      return NextResponse.json({ error: 'Order creation failed', logs, orderError }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[TEST_ORDER] Orden creada exitosamente: ' + JSON.stringify(order));\r\n\r\n    // Crear items de la orden\r\n    logs.push('[TEST_ORDER] Creando items de la orden...');\r\n    \r\n    const orderItems = testOrderData.items.map(item => ({\r\n      order_id: order.id,\r\n      product_id: parseInt(item.id),\r\n      quantity: item.quantity,\r\n      price: item.price,\r\n      product_name: item.name,\r\n    }));\r\n\r\n    const { data: items, error: itemsError } = await supabase\r\n      .from('order_items')\r\n      .insert(orderItems)\r\n      .select();\r\n\r\n    if (itemsError) {\r\n      logs.push('[TEST_ORDER] ERROR creando items: ' + JSON.stringify(itemsError));\r\n      // No es cr\xEDtico, continuamos\r\n    } else {\r\n      logs.push('[TEST_ORDER] Items creados exitosamente: ' + items?.length + ' items');\r\n    }\r\n\r\n    // Simular creaci\xF3n de preferencia de MercadoPago\r\n    const mockPreference = {\r\n      id: `test_preference_${Date.now()}`,\r\n      init_point: `https://sandbox.mercadopago.com.ar/checkout/v1/redirect?pref_id=test_preference_${Date.now()}`,\r\n      external_reference: testOrderData.external_reference,\r\n      items: testOrderData.items,\r\n      total_amount: totalAmount\r\n    };\r\n\r\n    logs.push('[TEST_ORDER] Preferencia simulada creada: ' + JSON.stringify(mockPreference));\r\n\r\n    // Actualizar orden con preference_id\r\n    const { data: updatedOrder, error: updateError } = await supabase\r\n      .from('orders')\r\n      .update({\r\n        payment_preference_id: mockPreference.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logs.push('[TEST_ORDER] WARNING: Error actualizando preference_id: ' + JSON.stringify(updateError));\r\n    } else {\r\n      logs.push('[TEST_ORDER] Orden actualizada con preference_id');\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Orden de prueba creada exitosamente',\r\n      logs,\r\n      data: {\r\n        order: updatedOrder || order,\r\n        items: items || [],\r\n        preference: mockPreference,\r\n        totals: {\r\n          items: itemsTotal,\r\n          shipping: shippingCost,\r\n          total: totalAmount\r\n        },\r\n        webhook_test_data: {\r\n          payment_id: \"test_payment_\" + order.id,\r\n          external_reference: testOrderData.external_reference,\r\n          webhook_url: \"https://www.pinteya.com/api/payments/webhook\",\r\n          test_payload: {\r\n            action: \"payment.updated\",\r\n            api_version: \"v1\",\r\n            data: {\r\n              id: \"test_payment_\" + order.id\r\n            },\r\n            date_created: new Date().toISOString(),\r\n            id: \"test_payment_\" + order.id,\r\n            live_mode: false,\r\n            type: \"payment\",\r\n            user_id: 452711838\r\n          }\r\n        }\r\n      }\r\n    }, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    logs.push('[TEST_ORDER] EXCEPTION: ' + error.message);\r\n    logs.push('[TEST_ORDER] STACK: ' + error.stack);\r\n\r\n    return NextResponse.json({\r\n      error: 'Test order creation failed',\r\n      message: error.message,\r\n      logs,\r\n      stack: error.stack\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["POST", "runtime", "request", "logs", "push", "testOrderData", "items", "id", "name", "price", "quantity", "image", "payer", "surname", "email", "phone", "identification", "type", "number", "shipping", "cost", "address", "street_name", "street_number", "zip_code", "city_name", "state_name", "external_reference", "Date", "now", "JSON", "stringify", "itemsTotal", "reduce", "sum", "item", "shippingCost", "totalAmount", "supabase", "getSupabaseClient", "NextResponse", "json", "error", "status", "data", "order", "orderError", "from", "insert", "user_id", "payment_status", "total", "shipping_address", "payer_info", "select", "single", "orderItems", "map", "order_id", "product_id", "parseInt", "product_name", "itemsError", "length", "mockPreference", "init_point", "total_amount", "updatedOrder", "updateError", "update", "payment_preference_id", "updated_at", "toISOString", "eq", "success", "message", "preference", "totals", "webhook_test_data", "payment_id", "webhook_url", "test_payload", "action", "api_version", "date_created", "live_mode", "stack"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9b3bc240ca35083f4781c6b183c5457c4b187991"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f0z4zmao0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f0z4zmao0();
cov_f0z4zmao0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_f0z4zmao0().f[0]++;
  cov_f0z4zmao0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_f0z4zmao0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_f0z4zmao0().s[3]++;
_export(exports, {
  get POST() {
    /* istanbul ignore next */
    cov_f0z4zmao0().f[1]++;
    cov_f0z4zmao0().s[4]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_f0z4zmao0().f[2]++;
    cov_f0z4zmao0().s[5]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_f0z4zmao0().s[6]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_f0z4zmao0().s[7]++, require("../../../lib/integrations/supabase"));
const runtime =
/* istanbul ignore next */
(cov_f0z4zmao0().s[8]++, 'nodejs');
async function POST(request) {
  /* istanbul ignore next */
  cov_f0z4zmao0().f[3]++;
  const logs =
  /* istanbul ignore next */
  (cov_f0z4zmao0().s[9]++, []);
  /* istanbul ignore next */
  cov_f0z4zmao0().s[10]++;
  try {
    /* istanbul ignore next */
    cov_f0z4zmao0().s[11]++;
    logs.push('[TEST_ORDER] Iniciando creaciÃ³n de orden de prueba...');
    // Datos de prueba para la orden
    const testOrderData =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[12]++, {
      items: [{
        id: "43",
        name: "Pincel Persianero NÂ°20",
        price: 1150,
        quantity: 2,
        image: "/products/pincel-persianero-20.jpg"
      }, {
        id: "87",
        name: "Lija al Agua Grano 40",
        price: 850,
        quantity: 1,
        image: "/products/lija-agua-40.jpg"
      }],
      payer: {
        name: "Juan",
        surname: "PÃ©rez",
        email: "juan.perez@test.com",
        phone: "+54 11 1234-5678",
        identification: {
          type: "DNI",
          number: "12345678"
        }
      },
      shipping: {
        cost: 500,
        address: {
          street_name: "Av. Corrientes",
          street_number: 1234,
          zip_code: "1043",
          city_name: "Buenos Aires",
          state_name: "CABA"
        }
      },
      external_reference: `test_order_${Date.now()}`
    });
    /* istanbul ignore next */
    cov_f0z4zmao0().s[13]++;
    logs.push('[TEST_ORDER] Datos de orden preparados: ' + JSON.stringify(testOrderData, null, 2));
    // Calcular totales
    const itemsTotal =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[14]++, testOrderData.items.reduce((sum, item) => {
      /* istanbul ignore next */
      cov_f0z4zmao0().f[4]++;
      cov_f0z4zmao0().s[15]++;
      return sum + item.price * item.quantity;
    }, 0));
    const shippingCost =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[16]++, testOrderData.shipping.cost);
    const totalAmount =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[17]++, itemsTotal + shippingCost);
    /* istanbul ignore next */
    cov_f0z4zmao0().s[18]++;
    logs.push(`[TEST_ORDER] Totales calculados: items=${itemsTotal}, shipping=${shippingCost}, total=${totalAmount}`);
    // Conectar a Supabase
    const supabase =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[19]++, (0, _supabase.getSupabaseClient)(true));
    /* istanbul ignore next */
    cov_f0z4zmao0().s[20]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[0][0]++;
      cov_f0z4zmao0().s[21]++;
      logs.push('[TEST_ORDER] ERROR: Cliente de Supabase no disponible');
      /* istanbul ignore next */
      cov_f0z4zmao0().s[22]++;
      return _server.NextResponse.json({
        error: 'Supabase not available',
        logs
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_f0z4zmao0().b[0][1]++;
    }
    cov_f0z4zmao0().s[23]++;
    logs.push('[TEST_ORDER] Cliente de Supabase OK');
    // Crear orden en base de datos
    /* istanbul ignore next */
    cov_f0z4zmao0().s[24]++;
    logs.push('[TEST_ORDER] Creando orden en base de datos...');
    const {
      data: order,
      error: orderError
    } =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[25]++, await supabase.from('orders').insert({
      user_id: '00000000-0000-4000-8000-000000000000',
      status: 'pending',
      payment_status: 'pending',
      total: totalAmount,
      shipping_address: JSON.stringify(testOrderData.shipping.address),
      external_reference: testOrderData.external_reference,
      payer_info: testOrderData.payer
    }).select().single());
    /* istanbul ignore next */
    cov_f0z4zmao0().s[26]++;
    if (orderError) {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[1][0]++;
      cov_f0z4zmao0().s[27]++;
      logs.push('[TEST_ORDER] ERROR creando orden: ' + JSON.stringify(orderError));
      /* istanbul ignore next */
      cov_f0z4zmao0().s[28]++;
      return _server.NextResponse.json({
        error: 'Order creation failed',
        logs,
        orderError
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_f0z4zmao0().b[1][1]++;
    }
    cov_f0z4zmao0().s[29]++;
    logs.push('[TEST_ORDER] Orden creada exitosamente: ' + JSON.stringify(order));
    // Crear items de la orden
    /* istanbul ignore next */
    cov_f0z4zmao0().s[30]++;
    logs.push('[TEST_ORDER] Creando items de la orden...');
    const orderItems =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[31]++, testOrderData.items.map(item => {
      /* istanbul ignore next */
      cov_f0z4zmao0().f[5]++;
      cov_f0z4zmao0().s[32]++;
      return {
        order_id: order.id,
        product_id: parseInt(item.id),
        quantity: item.quantity,
        price: item.price,
        product_name: item.name
      };
    }));
    const {
      data: items,
      error: itemsError
    } =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[33]++, await supabase.from('order_items').insert(orderItems).select());
    /* istanbul ignore next */
    cov_f0z4zmao0().s[34]++;
    if (itemsError) {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[2][0]++;
      cov_f0z4zmao0().s[35]++;
      logs.push('[TEST_ORDER] ERROR creando items: ' + JSON.stringify(itemsError));
      // No es crÃ­tico, continuamos
    } else {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[2][1]++;
      cov_f0z4zmao0().s[36]++;
      logs.push('[TEST_ORDER] Items creados exitosamente: ' + items?.length + ' items');
    }
    // Simular creaciÃ³n de preferencia de MercadoPago
    const mockPreference =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[37]++, {
      id: `test_preference_${Date.now()}`,
      init_point: `https://sandbox.mercadopago.com.ar/checkout/v1/redirect?pref_id=test_preference_${Date.now()}`,
      external_reference: testOrderData.external_reference,
      items: testOrderData.items,
      total_amount: totalAmount
    });
    /* istanbul ignore next */
    cov_f0z4zmao0().s[38]++;
    logs.push('[TEST_ORDER] Preferencia simulada creada: ' + JSON.stringify(mockPreference));
    // Actualizar orden con preference_id
    const {
      data: updatedOrder,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_f0z4zmao0().s[39]++, await supabase.from('orders').update({
      payment_preference_id: mockPreference.id,
      updated_at: new Date().toISOString()
    }).eq('id', order.id).select().single());
    /* istanbul ignore next */
    cov_f0z4zmao0().s[40]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[3][0]++;
      cov_f0z4zmao0().s[41]++;
      logs.push('[TEST_ORDER] WARNING: Error actualizando preference_id: ' + JSON.stringify(updateError));
    } else {
      /* istanbul ignore next */
      cov_f0z4zmao0().b[3][1]++;
      cov_f0z4zmao0().s[42]++;
      logs.push('[TEST_ORDER] Orden actualizada con preference_id');
    }
    /* istanbul ignore next */
    cov_f0z4zmao0().s[43]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Orden de prueba creada exitosamente',
      logs,
      data: {
        order:
        /* istanbul ignore next */
        (cov_f0z4zmao0().b[4][0]++, updatedOrder) ||
        /* istanbul ignore next */
        (cov_f0z4zmao0().b[4][1]++, order),
        items:
        /* istanbul ignore next */
        (cov_f0z4zmao0().b[5][0]++, items) ||
        /* istanbul ignore next */
        (cov_f0z4zmao0().b[5][1]++, []),
        preference: mockPreference,
        totals: {
          items: itemsTotal,
          shipping: shippingCost,
          total: totalAmount
        },
        webhook_test_data: {
          payment_id: "test_payment_" + order.id,
          external_reference: testOrderData.external_reference,
          webhook_url: "https://www.pinteya.com/api/payments/webhook",
          test_payload: {
            action: "payment.updated",
            api_version: "v1",
            data: {
              id: "test_payment_" + order.id
            },
            date_created: new Date().toISOString(),
            id: "test_payment_" + order.id,
            live_mode: false,
            type: "payment",
            user_id: 452711838
          }
        }
      }
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f0z4zmao0().s[44]++;
    logs.push('[TEST_ORDER] EXCEPTION: ' + error.message);
    /* istanbul ignore next */
    cov_f0z4zmao0().s[45]++;
    logs.push('[TEST_ORDER] STACK: ' + error.stack);
    /* istanbul ignore next */
    cov_f0z4zmao0().s[46]++;
    return _server.NextResponse.json({
      error: 'Test order creation failed',
      message: error.message,
      logs,
      stack: error.stack
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,