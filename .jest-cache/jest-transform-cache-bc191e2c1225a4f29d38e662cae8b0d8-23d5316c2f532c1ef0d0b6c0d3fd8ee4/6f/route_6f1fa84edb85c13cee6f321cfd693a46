a127f1f6f75b0491f7985b140ccc8cd3
// Configuraci√≥n para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../lib/auth/admin-auth");
const _enterpriseauthutils = require("../../../../lib/auth/enterprise-auth-utils");
const _enterpriserlsutils = require("../../../../lib/auth/enterprise-rls-utils");
const _enterprisecache = require("../../../../lib/auth/enterprise-cache");
const runtime = 'nodejs';
async function GET(request) {
    try {
        // ENTERPRISE: Usar nueva autenticaci√≥n enterprise para comparaci√≥n
        const enterpriseResult = await (0, _enterpriseauthutils.requireAdminAuth)(request, [
            'admin_access'
        ]);
        // LEGACY: Mantener m√©todo anterior para comparaci√≥n
        const adminResult = await (0, _adminauth.getAuthenticatedAdmin)(request);
        if (!adminResult.userId && !enterpriseResult.success) {
            return _server.NextResponse.json({
                success: false,
                error: 'Usuario no autenticado en ning√∫n m√©todo',
                enterprise: {
                    error: enterpriseResult.error,
                    code: enterpriseResult.code
                },
                legacy: {
                    error: adminResult.error
                },
                migration: {
                    status: 'ENTERPRISE_MIGRATED',
                    comparison: 'Both methods failed - user not authenticated'
                }
            }, {
                status: 401
            });
        }
        // ENTERPRISE: Obtener contexto completo y validaci√≥n RLS
        let enterpriseContext = null;
        let rlsValidation = null;
        if (enterpriseResult.success) {
            enterpriseContext = enterpriseResult.context;
            rlsValidation = await (0, _enterpriserlsutils.validateRLSContext)(enterpriseContext);
        }
        // LEGACY: Comparar con m√©todo legacy para verificar migraci√≥n
        const clerkUserId = adminResult.userId || (enterpriseResult.success ? enterpriseResult.context.userId : null);
        console.log('üîç Debug Enterprise vs Legacy: Testing with user:', clerkUserId);
        const legacyResult = clerkUserId ? await (0, _adminauth.checkAdminAccess)(clerkUserId) : {
            success: false,
            error: 'No user ID'
        };
        // ENTERPRISE: Obtener estad√≠sticas de cache
        const cacheStats = (0, _enterprisecache.getCacheStats)();
        return _server.NextResponse.json({
            success: enterpriseResult.success || adminResult.isAdmin,
            enterprise: {
                status: enterpriseResult.success ? 'SUCCESS' : 'FAILED',
                context: enterpriseResult.success ? {
                    userId: enterpriseContext?.userId,
                    role: enterpriseContext?.role,
                    permissions: enterpriseContext?.permissions,
                    securityLevel: enterpriseContext?.securityLevel,
                    validations: enterpriseContext?.validations
                } : null,
                rls: rlsValidation ? {
                    valid: rlsValidation.valid,
                    error: rlsValidation.error
                } : null,
                cache: cacheStats,
                error: enterpriseResult.error,
                code: enterpriseResult.code
            },
            legacy: {
                status: adminResult.isAdmin ? 'SUCCESS' : 'FAILED',
                userId: adminResult.userId,
                sessionId: adminResult.sessionId,
                isAdmin: adminResult.isAdmin,
                error: adminResult.error,
                checkAdminAccess: {
                    success: legacyResult.success,
                    error: legacyResult.error
                }
            },
            migration: {
                status: 'ENTERPRISE_COMPLETED',
                comparison: {
                    enterprise_success: enterpriseResult.success,
                    legacy_success: adminResult.isAdmin,
                    methods_agree: enterpriseResult.success === adminResult.isAdmin,
                    recommended: 'enterprise'
                },
                improvements: [
                    '‚úÖ ENTERPRISE: Autenticaci√≥n con m√∫ltiples validaciones de seguridad',
                    '‚úÖ ENTERPRISE: Row Level Security (RLS) integrado',
                    '‚úÖ ENTERPRISE: Cache inteligente con estad√≠sticas',
                    '‚úÖ ENTERPRISE: Contexto completo de seguridad',
                    '‚úÖ ENTERPRISE: Permisos granulares',
                    '‚ö†Ô∏è LEGACY: M√©todo anterior a√∫n funcional para compatibilidad'
                ]
            },
            debug: {
                clerkUserId,
                timestamp: new Date().toISOString(),
                request_info: {
                    method: request.method,
                    url: request.url,
                    user_agent: request.headers.get('user-agent')?.substring(0, 100)
                }
            }
        });
    } catch (error) {
        console.error('üîç Debug checkAdminAccess: Error:', error);
        return _server.NextResponse.json({
            success: false,
            error: 'Unexpected error',
            debug: {
                errorMessage: error instanceof Error ? error.message : 'Unknown error'
            }
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,