{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\location\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para actualizar la ubicación del driver en tiempo real\r\n * POST /api/driver/location\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { location, speed, heading, accuracy } = body;\r\n\r\n    // Validar datos de ubicación\r\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\r\n      return NextResponse.json(\r\n        { error: 'Datos de ubicación inválidos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, status')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de ubicación\r\n    const locationData = {\r\n      lat: location.lat,\r\n      lng: location.lng,\r\n      timestamp: new Date().toISOString(),\r\n      speed: speed || 0,\r\n      heading: heading || 0,\r\n      accuracy: accuracy || 0\r\n    };\r\n\r\n    // Actualizar ubicación del driver\r\n    const { data: updatedDriver, error: updateError } = await supabase\r\n      .from('drivers')\r\n      .update({\r\n        current_location: locationData,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', driver.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating driver location:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error actualizando ubicación' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Opcional: Guardar historial de ubicaciones para tracking\r\n    try {\r\n      await supabase\r\n        .from('driver_location_history')\r\n        .insert({\r\n          driver_id: driver.id,\r\n          location: locationData,\r\n          created_at: new Date().toISOString()\r\n        });\r\n    } catch (historyError) {\r\n      // No fallar si no se puede guardar el historial\r\n      console.warn('Could not save location history:', historyError);\r\n    }\r\n\r\n    // Si el driver está en una ruta activa, verificar proximidad a destinos\r\n    if (driver.status === 'busy') {\r\n      await checkProximityToDestinations(driver.id, location);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      location: locationData,\r\n      driver: {\r\n        id: updatedDriver.id,\r\n        status: updatedDriver.status,\r\n        current_location: updatedDriver.current_location\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver location API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener ubicación actual del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, current_location, status, updated_at')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      location: driver.current_location,\r\n      status: driver.status,\r\n      last_updated: driver.updated_at\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error getting driver location:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Función helper para verificar proximidad a destinos de entrega\r\n */\r\nasync function checkProximityToDestinations(\r\n  driverId: string, \r\n  currentLocation: { lat: number; lng: number }\r\n) {\r\n  try {\r\n    const supabase = await createClient();\r\n\r\n    // Obtener rutas activas del driver\r\n    const { data: activeRoutes, error } = await supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('driver_id', driverId)\r\n      .eq('status', 'active');\r\n\r\n    if (error || !activeRoutes?.length) return;\r\n\r\n    // Verificar proximidad a cada destino\r\n    for (const route of activeRoutes) {\r\n      if (!route.shipments) continue;\r\n\r\n      for (let i = 0; i < route.shipments.length; i++) {\r\n        const shipment = route.shipments[i];\r\n        \r\n        if (shipment.status === 'delivered') continue;\r\n\r\n        const destination = shipment.destination?.coordinates;\r\n        if (!destination) continue;\r\n\r\n        const distance = calculateDistance(currentLocation, destination);\r\n        \r\n        // Si está a menos de 100 metros del destino\r\n        if (distance < 100) {\r\n          // Opcional: Enviar notificación o actualizar estado\r\n          console.log(`Driver ${driverId} is near delivery destination: ${shipment.customer_name}`);\r\n          \r\n          // Aquí se podría implementar:\r\n          // - Notificación push al cliente\r\n          // - Actualización automática de estado\r\n          // - Alerta al dashboard administrativo\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking proximity:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Calcular distancia entre dos puntos en metros\r\n */\r\nfunction calculateDistance(\r\n  point1: { lat: number; lng: number },\r\n  point2: { lat: number; lng: number }\r\n): number {\r\n  const R = 6371000; // Radio de la Tierra en metros\r\n  const dLat = (point2.lat - point1.lat) * Math.PI / 180;\r\n  const dLon = (point2.lng - point1.lng) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * \r\n    Math.sin(dLon/2) * Math.sin(dLon/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","body","location","speed","heading","accuracy","lat","lng","supabase","createClient","data","driver","driverError","from","select","eq","single","locationData","timestamp","Date","toISOString","updatedDriver","updateError","update","current_location","updated_at","id","console","insert","driver_id","created_at","historyError","warn","checkProximityToDestinations","success","last_updated","driverId","currentLocation","activeRoutes","length","route","shipments","i","shipment","destination","coordinates","distance","calculateDistance","log","customer_name","point1","point2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt"],"mappings":"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"}