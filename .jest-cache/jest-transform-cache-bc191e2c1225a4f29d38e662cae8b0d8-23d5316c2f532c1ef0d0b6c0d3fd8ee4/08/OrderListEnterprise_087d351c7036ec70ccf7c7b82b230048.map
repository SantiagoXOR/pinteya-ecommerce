{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\orders\\OrderListEnterprise.tsx"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ORDER LIST ENTERPRISE COMPONENT\n// ===================================\n\n'use client'\n\nimport React, { useState, useEffect, useCallback, useRef, useMemo, memo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport {\n  Search,\n  Filter,\n  Download,\n  RefreshCw,\n  Eye,\n  Edit,\n  MoreHorizontal,\n  ChevronLeft,\n  ChevronRight,\n  Package,\n} from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu'\nimport {\n  OrderEnterprise,\n  OrderFilters,\n  OrderStatus,\n  PaymentStatus,\n} from '@/types/orders-enterprise'\nimport { formatOrderStatus, formatPaymentStatus } from '@/lib/orders-enterprise'\nimport { useToast } from '@/hooks/use-toast'\nimport { useRenderMonitoring } from '@/hooks/monitoring/useRenderMonitoring'\nimport { useOrdersEnterpriseStrict } from '@/hooks/admin/useOrdersEnterpriseStrict'\n\n// ===================================\n// INTERFACES\n// ===================================\n\ninterface OrderListEnterpriseProps {\n  className?: string\n  onOrderSelect?: (order: OrderEnterprise) => void\n  onOrderEdit?: (order: OrderEnterprise) => void\n  onBulkAction?: (action: string, orderIds: string[]) => void\n  enableBulkActions?: boolean\n  enableFilters?: boolean\n  pageSize?: number\n}\n\n// ===================================\n// COMPONENTES MEMOIZADOS\n// ===================================\n\ninterface OrderFiltersComponentProps {\n  filters: any\n  onFilterChange: (key: string, value: any) => void\n  enabled: boolean\n}\n\nconst OrderFiltersComponent = memo<OrderFiltersComponentProps>(\n  ({ filters, onFilterChange, enabled }) => {\n    if (!enabled) {\n      return null\n    }\n\n    return (\n      <Card className='mb-6'>\n        <CardHeader>\n          <CardTitle className='flex items-center gap-2'>\n            <Filter className='w-5 h-5' />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>\n            {/* B√∫squeda */}\n            <div className='relative'>\n              <Search className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4' />\n              <Input\n                placeholder='Buscar √≥rdenes...'\n                value={filters.search || ''}\n                onChange={e => onFilterChange('search', e.target.value)}\n                className='pl-10'\n              />\n            </div>\n\n            {/* Estado */}\n            <Select\n              value={filters.status || 'all'}\n              onValueChange={value => onFilterChange('status', value === 'all' ? undefined : value)}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder='Estado' />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value='all'>Todos los estados</SelectItem>\n                <SelectItem value='pending'>Pendiente</SelectItem>\n                <SelectItem value='confirmed'>Confirmada</SelectItem>\n                <SelectItem value='processing'>Procesando</SelectItem>\n                <SelectItem value='shipped'>Enviada</SelectItem>\n                <SelectItem value='delivered'>Entregada</SelectItem>\n                <SelectItem value='cancelled'>Cancelada</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Estado de Pago */}\n            <Select\n              value={filters.payment_status || 'all'}\n              onValueChange={value =>\n                onFilterChange('payment_status', value === 'all' ? undefined : value)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue placeholder='Estado de Pago' />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value='all'>Todos los pagos</SelectItem>\n                <SelectItem value='pending'>Pendiente</SelectItem>\n                <SelectItem value='paid'>Pagado</SelectItem>\n                <SelectItem value='failed'>Fall√≥</SelectItem>\n                <SelectItem value='refunded'>Reembolsado</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Ordenamiento */}\n            <Select\n              value={`${filters.sort_by}_${filters.sort_order}`}\n              onValueChange={value => {\n                const [sortBy, sortOrder] = value.split('_')\n                onFilterChange('sort_by', sortBy)\n                onFilterChange('sort_order', sortOrder)\n              }}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder='Ordenar por' />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value='created_at_desc'>M√°s recientes</SelectItem>\n                <SelectItem value='created_at_asc'>M√°s antiguos</SelectItem>\n                <SelectItem value='total_desc'>Mayor monto</SelectItem>\n                <SelectItem value='total_asc'>Menor monto</SelectItem>\n                <SelectItem value='order_number_asc'>N√∫mero de orden</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n)\n\nOrderFiltersComponent.displayName = 'OrderFiltersComponent'\n\ninterface BulkActionsProps {\n  selectedCount: number\n  onBulkAction: (action: string) => void\n  enabled: boolean\n}\n\nconst BulkActions = memo<BulkActionsProps>(({ selectedCount, onBulkAction, enabled }) => {\n  if (!enabled || selectedCount === 0) {\n    return null\n  }\n\n  return (\n    <div className='flex items-center gap-2 mb-4 p-3 bg-blue-50 rounded-lg'>\n      <span className='text-sm text-blue-700'>{selectedCount} orden(es) seleccionada(s)</span>\n      <div className='flex gap-2 ml-auto'>\n        <Button size='sm' variant='outline' onClick={() => onBulkAction('export')}>\n          <Download className='w-4 h-4 mr-1' />\n          Exportar\n        </Button>\n        <Button size='sm' variant='outline' onClick={() => onBulkAction('update_status')}>\n          Actualizar Estado\n        </Button>\n        <Button size='sm' variant='destructive' onClick={() => onBulkAction('delete')}>\n          Eliminar\n        </Button>\n      </div>\n    </div>\n  )\n})\n\nBulkActions.displayName = 'BulkActions'\n\n// Interfaces removidas - ahora se usan los tipos del hook estricto\n\n// ===================================\n// COMPONENTE PRINCIPAL\n// ===================================\n\nexport const OrderListEnterprise: React.FC<OrderListEnterpriseProps> = ({\n  className = '',\n  onOrderSelect,\n  onOrderEdit,\n  onBulkAction,\n  enableBulkActions = true,\n  enableFilters = true,\n  pageSize = 20,\n}) => {\n  console.log('üöÄ OrderListEnterprise - Componente renderiz√°ndose con props:', {\n    className,\n    enableBulkActions,\n    enableFilters,\n    pageSize,\n  })\n\n  const { toast } = useToast()\n\n  // Monitoreo de renderizado\n  const { trackError, metrics } = useRenderMonitoring({\n    componentName: 'OrderListEnterprise',\n    enabled: process.env.NODE_ENV === 'development',\n    enableToasts: false, // Evitar spam de toasts\n    enableConsoleLogging: true,\n    sampleRate: 0.1, // Monitorear solo 10% de los renders para performance\n  })\n\n  // Hook con validaci√≥n estricta de tipos\n  const {\n    orders,\n    pagination,\n    filters,\n    analytics,\n    isLoading,\n    error,\n    fetchOrders,\n    updateFilters,\n    refreshOrders,\n    clearError,\n    retryLastRequest,\n  } = useOrdersEnterpriseStrict(\n    {\n      page: 1,\n      limit: pageSize,\n      sort_by: 'created_at',\n      sort_order: 'desc',\n    },\n    {\n      autoFetch: true, // ‚úÖ REACTIVADO: Con persistencia, el auto-fetch funciona correctamente\n      maxRetries: 3,\n      timeout: 10000,\n      enableCache: true,\n    }\n  )\n\n  // DEBUG: Logs para verificar datos del hook\n  console.log('üîç OrderListEnterprise - Hook data:', {\n    orders: orders,\n    ordersLength: orders?.length,\n    pagination,\n    isLoading,\n    error,\n    filters,\n  })\n\n  // Estado local para selecciones\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([])\n\n  // ===================================\n  // FUNCIONES DE MANEJO DE FILTROS\n  // ===================================\n\n  // ===================================\n  // MANEJADORES DE EVENTOS\n  // ===================================\n\n  // Usar useRef para evitar dependencias circulares\n  const filtersRef = useRef(filters)\n  filtersRef.current = filters\n\n  const handleFilterChange = useCallback(\n    (key: keyof typeof filters, value: any) => {\n      try {\n        const currentFilters = filtersRef.current\n        const updatedFilters = { ...currentFilters, [key]: value, page: 1 }\n        updateFilters(updatedFilters)\n        // REMOVIDO: fetchOrders duplicado que causaba refresco infinito\n        // El hook ya maneja el fetch autom√°ticamente\n      } catch (error) {\n        trackError(error as Error, { action: 'filter_change', key, value })\n        toast({\n          title: 'Error al aplicar filtros',\n          description: 'No se pudieron aplicar los filtros seleccionados.',\n          variant: 'destructive',\n        })\n      }\n    },\n    [updateFilters, trackError, toast]\n  ) // Removido 'filters' de dependencias\n\n  const handlePageChange = useCallback(\n    (newPage: number) => {\n      try {\n        const currentFilters = filtersRef.current\n        const updatedFilters = { ...currentFilters, page: newPage }\n        updateFilters(updatedFilters)\n        // REMOVIDO: fetchOrders duplicado que causaba refresco infinito\n        // El hook ya maneja el fetch autom√°ticamente\n      } catch (error) {\n        trackError(error as Error, { action: 'page_change', page: newPage })\n        toast({\n          title: 'Error de paginaci√≥n',\n          description: 'No se pudo cambiar de p√°gina.',\n          variant: 'destructive',\n        })\n      }\n    },\n    [updateFilters, trackError, toast]\n  ) // Removido 'filters' de dependencias\n\n  const handleSelectOrder = useCallback((orderId: string | number, selected: boolean) => {\n    const orderIdStr = String(orderId)\n    setSelectedOrders(prev =>\n      selected ? [...prev, orderIdStr] : prev.filter(id => id !== orderIdStr)\n    )\n  }, [])\n\n  const handleSelectAll = useCallback(\n    (selected: boolean) => {\n      setSelectedOrders(selected ? orders.map(order => String(order.id)) : [])\n    },\n    [orders]\n  )\n\n  const handleBulkAction = useCallback(\n    (action: string) => {\n      if (selectedOrders.length === 0) {\n        toast({\n          title: 'Advertencia',\n          description: 'Selecciona al menos una orden',\n          variant: 'destructive',\n        })\n        return\n      }\n\n      onBulkAction?.(action, selectedOrders)\n    },\n    [selectedOrders, onBulkAction, toast]\n  )\n\n  const handleRefresh = useCallback(() => {\n    refreshOrders()\n  }, [refreshOrders])\n\n  // ===================================\n  // DATOS MEMOIZADOS\n  // ===================================\n\n  // Memoizar datos computados para evitar rec√°lculos innecesarios\n  const memoizedData = useMemo(() => {\n    const allSelected = orders.length > 0 && selectedOrders.length === orders.length\n    const someSelected = selectedOrders.length > 0\n    const hasOrders = orders.length > 0\n    const hasNextPage = pagination?.hasNextPage || false\n    const hasPreviousPage = pagination?.hasPreviousPage || false\n    const currentPage = pagination?.page || 1\n    const totalPages = pagination?.totalPages || 1\n\n    return {\n      allSelected,\n      someSelected,\n      hasOrders,\n      hasNextPage,\n      hasPreviousPage,\n      currentPage,\n      totalPages,\n    }\n  }, [orders, selectedOrders, pagination])\n\n  // Memoizar handlers que dependen de datos computados\n  const memoizedHandlers = useMemo(\n    () => ({\n      onFilterChange: handleFilterChange,\n      onPageChange: handlePageChange,\n      onSelectOrder: handleSelectOrder,\n      onSelectAll: handleSelectAll,\n      onBulkAction: handleBulkAction,\n      onRefresh: handleRefresh,\n    }),\n    [\n      handleFilterChange,\n      handlePageChange,\n      handleSelectOrder,\n      handleSelectAll,\n      handleBulkAction,\n      handleRefresh,\n    ]\n  )\n\n  // ===================================\n  // FUNCIONES DE RENDER ELIMINADAS - AHORA USAN COMPONENTES MEMOIZADOS\n  // ===================================\n\n  // Funci√≥n renderBulkActions eliminada - ahora usa componente BulkActions memoizado\n\n  // ===================================\n  // RENDER DE TABLA\n  // ===================================\n\n  const renderTable = () => {\n    if (isLoading) {\n      return (\n        <div className='flex items-center justify-center h-64'>\n          <RefreshCw className='w-8 h-8 animate-spin text-gray-400' />\n        </div>\n      )\n    }\n\n    if (error) {\n      return (\n        <div className='text-center py-8'>\n          <p className='text-red-600 mb-4'>\n            {error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}\n          </p>\n          <Button onClick={handleRefresh} variant='outline'>\n            <RefreshCw className='w-4 h-4 mr-2' />\n            Reintentar\n          </Button>\n        </div>\n      )\n    }\n\n    if (orders.length === 0) {\n      return (\n        <div className='text-center py-12 text-gray-500'>\n          <div className='mb-4'>\n            <Package className='w-16 h-16 mx-auto text-gray-300 mb-4' />\n            <p className='text-lg font-medium text-gray-900 mb-2'>\n              {isLoading ? 'Cargando √≥rdenes...' : 'No hay √≥rdenes disponibles'}\n            </p>\n            <p className='text-sm text-gray-500 mb-6'>\n              {isLoading\n                ? 'Obteniendo datos desde la API...'\n                : 'No se encontraron √≥rdenes con los filtros aplicados'}\n            </p>\n          </div>\n          {!isLoading && (\n            <Button\n              onClick={() => fetchOrders()}\n              className='bg-blaze-orange-600 hover:bg-blaze-orange-700 text-white'\n              size='lg'\n            >\n              <RefreshCw className='w-4 h-4 mr-2' />\n              Recargar √ìrdenes\n            </Button>\n          )}\n        </div>\n      )\n    }\n\n    return (\n      <Table>\n        <TableHeader>\n          <TableRow>\n            {enableBulkActions && (\n              <TableHead className='w-12'>\n                <Checkbox\n                  checked={selectedOrders.length === orders.length}\n                  onCheckedChange={handleSelectAll}\n                />\n              </TableHead>\n            )}\n            <TableHead>Orden</TableHead>\n            <TableHead>Cliente</TableHead>\n            <TableHead>Estado</TableHead>\n            <TableHead>Pago</TableHead>\n            <TableHead>Total</TableHead>\n            <TableHead>Fecha</TableHead>\n            <TableHead className='w-12'>Acciones</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {orders.map(order => {\n            const statusInfo = formatOrderStatus(order.status)\n            const paymentInfo = formatPaymentStatus(order.payment_status)\n\n            return (\n              <TableRow key={order.id}>\n                {enableBulkActions && (\n                  <TableCell>\n                    <Checkbox\n                      checked={selectedOrders.includes(String(order.id))}\n                      onCheckedChange={checked => handleSelectOrder(order.id, !!checked)}\n                    />\n                  </TableCell>\n                )}\n                <TableCell>\n                  <div>\n                    <div className='font-medium'>{order.order_number}</div>\n                    <div className='text-sm text-gray-500'>#{String(order.id).slice(0, 8)}</div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div className='font-medium'>{order.user_profiles?.name || 'N/A'}</div>\n                    <div className='text-sm text-gray-500'>{order.user_profiles?.email}</div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge\n                    variant='secondary'\n                    className={\n                      statusInfo.color === 'green'\n                        ? 'bg-green-100 text-green-800'\n                        : statusInfo.color === 'blue'\n                          ? 'bg-blue-100 text-blue-800'\n                          : statusInfo.color === 'yellow'\n                            ? 'bg-yellow-100 text-yellow-800'\n                            : statusInfo.color === 'red'\n                              ? 'bg-red-100 text-red-800'\n                              : statusInfo.color === 'purple'\n                                ? 'bg-purple-100 text-purple-800'\n                                : statusInfo.color === 'orange'\n                                  ? 'bg-orange-100 text-orange-800'\n                                  : 'bg-gray-100 text-gray-800'\n                    }\n                  >\n                    {statusInfo.label}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <Badge\n                    variant='secondary'\n                    className={\n                      paymentInfo.color === 'green'\n                        ? 'bg-green-100 text-green-800'\n                        : paymentInfo.color === 'yellow'\n                          ? 'bg-yellow-100 text-yellow-800'\n                          : paymentInfo.color === 'red'\n                            ? 'bg-red-100 text-red-800'\n                            : 'bg-gray-100 text-gray-800'\n                    }\n                  >\n                    {paymentInfo.label}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <div className='font-medium'>\n                    ${(order.total || 0).toLocaleString()} {order.currency}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className='text-sm'>{new Date(order.created_at).toLocaleDateString()}</div>\n                </TableCell>\n                <TableCell>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant='ghost' size='sm'>\n                        <MoreHorizontal className='w-4 h-4' />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align='end'>\n                      <DropdownMenuItem onClick={() => onOrderSelect?.(order)}>\n                        <Eye className='w-4 h-4 mr-2' />\n                        Ver Detalles\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onOrderEdit?.(order)}>\n                        <Edit className='w-4 h-4 mr-2' />\n                        Editar\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem\n                        onClick={() => handleBulkAction('export', [String(order.id)])}\n                      >\n                        <Download className='w-4 h-4 mr-2' />\n                        Exportar\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            )\n          })}\n        </TableBody>\n      </Table>\n    )\n  }\n\n  // ===================================\n  // RENDER DE PAGINACI√ìN\n  // ===================================\n\n  const renderPagination = () => {\n    if (!pagination || pagination.totalPages <= 1) {\n      return null\n    }\n\n    return (\n      <div className='flex items-center justify-between mt-6'>\n        <div className='text-sm text-gray-500'>\n          Mostrando {(pagination.page - 1) * pagination.limit + 1} a{' '}\n          {Math.min(pagination.page * pagination.limit, pagination.total)} de {pagination.total}{' '}\n          √≥rdenes\n        </div>\n        <div className='flex items-center gap-2'>\n          <Button\n            variant='outline'\n            size='sm'\n            onClick={() => handlePageChange(pagination.page - 1)}\n            disabled={!pagination.hasPreviousPage}\n          >\n            <ChevronLeft className='w-4 h-4' />\n            Anterior\n          </Button>\n          <span className='text-sm'>\n            P√°gina {pagination.page} de {pagination.totalPages}\n          </span>\n          <Button\n            variant='outline'\n            size='sm'\n            onClick={() => handlePageChange(pagination.page + 1)}\n            disabled={!pagination.hasNextPage}\n          >\n            Siguiente\n            <ChevronRight className='w-4 h-4' />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  // ===================================\n  // RENDER PRINCIPAL\n  // ===================================\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className='flex items-center justify-between'>\n        <div>\n          <h2 className='text-2xl font-bold'>Gesti√≥n de √ìrdenes</h2>\n          <p className='text-gray-600'>Administra y monitorea todas las √≥rdenes del sistema</p>\n        </div>\n        <Button onClick={handleRefresh} variant='outline'>\n          <RefreshCw className='w-4 h-4 mr-2' />\n          Actualizar\n        </Button>\n      </div>\n\n      {/* Filtros */}\n      <OrderFiltersComponent\n        filters={filters}\n        onFilterChange={memoizedHandlers.onFilterChange}\n        enabled={enableFilters}\n      />\n\n      {/* Acciones masivas */}\n      <BulkActions\n        selectedCount={selectedOrders.length}\n        onBulkAction={memoizedHandlers.onBulkAction}\n        enabled={enableBulkActions}\n      />\n\n      {/* Tabla */}\n      <Card>\n        <CardContent className='p-0'>{renderTable()}</CardContent>\n      </Card>\n\n      {/* Paginaci√≥n */}\n      {renderPagination()}\n    </div>\n  )\n}\n"],"names":["OrderListEnterprise","OrderFiltersComponent","memo","filters","onFilterChange","enabled","Card","className","CardHeader","CardTitle","Filter","CardContent","div","Search","Input","placeholder","value","search","onChange","e","target","Select","status","onValueChange","undefined","SelectTrigger","SelectValue","SelectContent","SelectItem","payment_status","sort_by","sort_order","sortBy","sortOrder","split","displayName","BulkActions","selectedCount","onBulkAction","span","Button","size","variant","onClick","Download","onOrderSelect","onOrderEdit","enableBulkActions","enableFilters","pageSize","console","log","toast","useToast","trackError","metrics","useRenderMonitoring","componentName","process","env","NODE_ENV","enableToasts","enableConsoleLogging","sampleRate","orders","pagination","analytics","isLoading","error","fetchOrders","updateFilters","refreshOrders","clearError","retryLastRequest","useOrdersEnterpriseStrict","page","limit","autoFetch","maxRetries","timeout","enableCache","ordersLength","length","selectedOrders","setSelectedOrders","useState","filtersRef","useRef","current","handleFilterChange","useCallback","key","currentFilters","updatedFilters","action","title","description","handlePageChange","newPage","handleSelectOrder","orderId","selected","orderIdStr","String","prev","filter","id","handleSelectAll","map","order","handleBulkAction","handleRefresh","memoizedData","useMemo","allSelected","someSelected","hasOrders","hasNextPage","hasPreviousPage","currentPage","totalPages","memoizedHandlers","onPageChange","onSelectOrder","onSelectAll","onRefresh","renderTable","RefreshCw","p","Error","message","toString","Package","Table","TableHeader","TableRow","TableHead","Checkbox","checked","onCheckedChange","TableBody","statusInfo","formatOrderStatus","paymentInfo","formatPaymentStatus","TableCell","includes","order_number","slice","user_profiles","name","email","Badge","color","label","total","toLocaleString","currency","Date","created_at","toLocaleDateString","DropdownMenu","DropdownMenuTrigger","asChild","MoreHorizontal","DropdownMenuContent","align","DropdownMenuItem","Eye","Edit","DropdownMenuSeparator","renderPagination","Math","min","disabled","ChevronLeft","ChevronRight","h2"],"mappings":"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"}