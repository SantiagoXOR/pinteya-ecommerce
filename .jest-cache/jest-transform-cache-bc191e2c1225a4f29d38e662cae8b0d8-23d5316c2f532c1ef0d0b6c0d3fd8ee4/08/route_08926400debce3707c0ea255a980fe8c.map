{"version":3,"names":["cov_2hqs18benu","actualCoverage","s","GET","f","HealthStatus","POST","runtime","request","searchParams","nextUrl","detailed","get","services","b","split","authResult","_adminauth","getAuthenticatedAdmin","isAdmin","_server","NextResponse","json","success","error","status","serviceResults","length","Promise","all","map","service","_healthchecks","enterpriseHealthSystem","runHealthCheck","severity","responseTime","message","Error","details","lastChecked","Date","toISOString","runAllHealthChecks","healthData","getSystemHealth","summary","overall","systemHealth","uptime","process","version","env","npm_package_version","timestamp","_logger","logger","info","LogLevel","INFO","servicesChecked","healthy","degraded","unhealthy","LogCategory","SYSTEM","statusCode","data","ERROR","total","userId","body","action","config","result","recoveryActionId","getRecoveryActionId","executeRecoveryAction"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\health\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - HEALTH CHECKS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\r\nimport { enterpriseHealthSystem, HealthStatus } from '@/lib/monitoring/health-checks';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Estados de salud\r\nexport enum HealthStatus {\r\n  HEALTHY = 'healthy',\r\n  DEGRADED = 'degraded',\r\n  UNHEALTHY = 'unhealthy',\r\n  UNKNOWN = 'unknown'\r\n}\r\n\r\n// Resultado de health check\r\ninterface HealthCheckResult {\r\n  service: string;\r\n  status: HealthStatus;\r\n  responseTime: number;\r\n  message?: string;\r\n  details?: Record<string, any>;\r\n  lastChecked: string;\r\n}\r\n\r\n// Resumen de salud del sistema\r\ninterface SystemHealth {\r\n  overall: HealthStatus;\r\n  services: HealthCheckResult[];\r\n  summary: {\r\n    healthy: number;\r\n    degraded: number;\r\n    unhealthy: number;\r\n    total: number;\r\n  };\r\n  uptime: number;\r\n  version: string;\r\n  timestamp: string;\r\n}\r\n\r\n/**\r\n * GET /api/admin/monitoring/health\r\n * Obtiene el estado de salud de todos los servicios\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Para health checks, permitir acceso sin autenticación completa para monitoreo externo\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const detailed = searchParams.get('detailed') === 'true';\r\n    const services = searchParams.get('services')?.split(',') || [];\r\n\r\n    // Si se solicita información detallada, verificar autenticación\r\n    if (detailed) {\r\n      const authResult = await getAuthenticatedAdmin(request);\r\n      if (!authResult.isAdmin) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Acceso no autorizado para información detallada'\r\n        }, { status: 401 });\r\n      }\r\n    }\r\n\r\n    // Usar el sistema enterprise de health checks\r\n    let serviceResults;\r\n\r\n    if (services.length > 0) {\r\n      // Ejecutar health checks específicos\r\n      serviceResults = await Promise.all(\r\n        services.map(async (service) => {\r\n          try {\r\n            return await enterpriseHealthSystem.runHealthCheck(service);\r\n          } catch (error) {\r\n            return {\r\n              service,\r\n              status: HealthStatus.UNHEALTHY,\r\n              severity: 'critical' as const,\r\n              responseTime: 0,\r\n              message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n              details: {},\r\n              lastChecked: new Date().toISOString()\r\n            };\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      // Ejecutar todos los health checks\r\n      serviceResults = await enterpriseHealthSystem.runAllHealthChecks();\r\n    }\r\n\r\n    // Obtener resumen del sistema\r\n    const healthData = enterpriseHealthSystem.getSystemHealth();\r\n    const summary = healthData.summary;\r\n    const overall = healthData.overall;\r\n\r\n    const systemHealth: SystemHealth = {\r\n      overall,\r\n      services: serviceResults,\r\n      summary,\r\n      uptime: process.uptime(),\r\n      version: process.env.npm_package_version || '3.0.0',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Log health check\r\n    logger.info(LogLevel.INFO, 'Health check performed', {\r\n      overall,\r\n      servicesChecked: serviceResults.length,\r\n      healthy: summary.healthy,\r\n      degraded: summary.degraded,\r\n      unhealthy: summary.unhealthy\r\n    }, LogCategory.SYSTEM);\r\n\r\n    // Retornar respuesta con código de estado apropiado\r\n    const statusCode = overall === HealthStatus.HEALTHY ? 200 :\r\n                      overall === HealthStatus.DEGRADED ? 200 :\r\n                      503;\r\n\r\n    return NextResponse.json({\r\n      success: overall !== HealthStatus.UNHEALTHY,\r\n      data: systemHealth\r\n    }, { status: statusCode });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Health check failed', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      data: {\r\n        overall: HealthStatus.UNHEALTHY,\r\n        services: [],\r\n        summary: { healthy: 0, degraded: 0, unhealthy: 1, total: 1 },\r\n        uptime: process.uptime(),\r\n        version: '3.0.0',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    }, { status: 503 });\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring/health\r\n * Ejecuta health checks específicos o acciones de recuperación\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, service, config } = body;\r\n\r\n    if (!action) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Falta parámetro: action'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    let result: any = {};\r\n\r\n    switch (action) {\r\n      case 'check':\r\n        if (!service) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: 'Service requerido para check'\r\n          }, { status: 400 });\r\n        }\r\n        result = await enterpriseHealthSystem.runHealthCheck(service);\r\n        break;\r\n      case 'recover':\r\n        if (!service) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: 'Service requerido para recover'\r\n          }, { status: 400 });\r\n        }\r\n        const recoveryActionId = getRecoveryActionId(service);\r\n        if (recoveryActionId) {\r\n          const success = await enterpriseHealthSystem.executeRecoveryAction(recoveryActionId, config);\r\n          result = { success, service, action: 'recover' };\r\n        } else {\r\n          result = { success: false, service, error: 'No recovery action available' };\r\n        }\r\n        break;\r\n      case 'reset':\r\n        if (service === 'circuit_breakers' || !service) {\r\n          const success = await enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers');\r\n          result = { success, service: service || 'circuit_breakers', action: 'reset' };\r\n        } else {\r\n          result = { success: false, service, error: 'Reset not supported for this service' };\r\n        }\r\n        break;\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Acción no válida'\r\n        }, { status: 400 });\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Health action performed: ${action}`, {\r\n      userId: authResult.userId,\r\n      action,\r\n      service,\r\n      success: result.success\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: result\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Health action failed', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el ID de acción de recuperación para un servicio\r\n */\r\nfunction getRecoveryActionId(service: string): string | null {\r\n  switch (service) {\r\n    case 'circuit_breakers':\r\n      return 'reset_circuit_breakers';\r\n    case 'cache':\r\n      return 'clear_cache';\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}