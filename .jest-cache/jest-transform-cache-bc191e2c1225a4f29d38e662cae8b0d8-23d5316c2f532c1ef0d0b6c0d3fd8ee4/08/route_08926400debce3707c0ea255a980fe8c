d0609b5d713a7ae62c09d3723629870e
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2hqs18benu() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\health\\route.ts";
  var hash = "94a06d06eb95a3c8b11c608036b16f2f64f74a5b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\health\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "10": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "11": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "12": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "13": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "14": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "15": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 42
        }
      },
      "16": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "17": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 40
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 24
        }
      },
      "19": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "20": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "21": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "22": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 71
        }
      },
      "23": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "24": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 83
        }
      },
      "25": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "26": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 74,
          column: 16
        }
      },
      "29": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "30": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 94
        }
      },
      "31": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 72,
          column: 22
        }
      },
      "32": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 93
        }
      },
      "33": {
        start: {
          line: 80,
          column: 27
        },
        end: {
          line: 80,
          column: 81
        }
      },
      "34": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 42
        }
      },
      "35": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 42
        }
      },
      "36": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "37": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 98,
          column: 39
        }
      },
      "38": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 91
        }
      },
      "39": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "40": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 39
        }
      },
      "41": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "42": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 235,
          column: 5
        }
      },
      "43": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 79
        }
      },
      "44": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "45": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "46": {
        start: {
          line: 143,
          column: 21
        },
        end: {
          line: 143,
          column: 41
        }
      },
      "47": {
        start: {
          line: 144,
          column: 44
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "48": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "49": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "50": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 23
        }
      },
      "51": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "52": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 163,
          column: 17
        }
      },
      "53": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 162,
          column: 23
        }
      },
      "54": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 92
        }
      },
      "55": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 22
        }
      },
      "56": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "57": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 173,
          column: 23
        }
      },
      "58": {
        start: {
          line: 175,
          column: 41
        },
        end: {
          line: 175,
          column: 69
        }
      },
      "59": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 189,
          column: 17
        }
      },
      "60": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 177,
          column: 126
        }
      },
      "61": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "62": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 188,
          column: 22
        }
      },
      "63": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 22
        }
      },
      "64": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "65": {
        start: {
          line: 193,
          column: 36
        },
        end: {
          line: 193,
          column: 126
        }
      },
      "66": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 198,
          column: 22
        }
      },
      "67": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 204,
          column: 22
        }
      },
      "68": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 22
        }
      },
      "69": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 213,
          column: 19
        }
      },
      "70": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 220,
          column: 39
        }
      },
      "71": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "72": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 39
        }
      },
      "73": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "74": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "75": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 44
        }
      },
      "76": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 33
        }
      },
      "77": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 31,
            column: 34
          }
        },
        loc: {
          start: {
            line: 31,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 18
          }
        },
        loc: {
          start: {
            line: 38,
            column: 28
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 38
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 60,
            column: 61
          }
        },
        loc: {
          start: {
            line: 60,
            column: 77
          },
          end: {
            line: 74,
            column: 13
          }
        },
        line: 60
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 131,
            column: 19
          }
        },
        loc: {
          start: {
            line: 131,
            column: 29
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 131
      },
      "9": {
        name: "getRecoveryActionId",
        decl: {
          start: {
            line: 239,
            column: 13
          },
          end: {
            line: 239,
            column: 32
          }
        },
        loc: {
          start: {
            line: 239,
            column: 42
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 239
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 65
          }
        }, {
          start: {
            line: 43,
            column: 69
          },
          end: {
            line: 43,
            column: 71
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 78,
            column: 9
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 57
          },
          end: {
            line: 69,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 82
          },
          end: {
            line: 69,
            column: 95
          }
        }, {
          start: {
            line: 69,
            column: 98
          },
          end: {
            line: 69,
            column: 113
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 52
          }
        }, {
          start: {
            line: 88,
            column: 56
          },
          end: {
            line: 88,
            column: 63
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 51
          },
          end: {
            line: 100,
            column: 54
          }
        }, {
          start: {
            line: 100,
            column: 57
          },
          end: {
            line: 100,
            column: 91
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 57
          },
          end: {
            line: 100,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 82
          },
          end: {
            line: 100,
            column: 85
          }
        }, {
          start: {
            line: 100,
            column: 88
          },
          end: {
            line: 100,
            column: 91
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 19
          },
          end: {
            line: 109,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 57
          }
        }, {
          start: {
            line: 109,
            column: 60
          },
          end: {
            line: 109,
            column: 75
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 135,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 135,
            column: 31
          }
        }, {
          start: {
            line: 135,
            column: 35
          },
          end: {
            line: 135,
            column: 53
          }
        }],
        line: 135
      },
      "11": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "12": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 165,
            column: 22
          }
        }, {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 190,
            column: 22
          }
        }, {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 206,
            column: 22
          }
        }, {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 213,
            column: 19
          }
        }],
        line: 154
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 163,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 163,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "15": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        }, {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 189,
            column: 17
          }
        }],
        line: 176
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 205,
            column: 17
          }
        }, {
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 205,
            column: 17
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 192,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 20
          },
          end: {
            line: 192,
            column: 50
          }
        }, {
          start: {
            line: 192,
            column: 54
          },
          end: {
            line: 192,
            column: 62
          }
        }],
        line: 192
      },
      "18": {
        loc: {
          start: {
            line: 196,
            column: 33
          },
          end: {
            line: 196,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 33
          },
          end: {
            line: 196,
            column: 40
          }
        }, {
          start: {
            line: 196,
            column: 44
          },
          end: {
            line: 196,
            column: 62
          }
        }],
        line: 196
      },
      "19": {
        loc: {
          start: {
            line: 227,
            column: 19
          },
          end: {
            line: 227,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 44
          },
          end: {
            line: 227,
            column: 57
          }
        }, {
          start: {
            line: 227,
            column: 60
          },
          end: {
            line: 227,
            column: 75
          }
        }],
        line: 227
      },
      "20": {
        loc: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 242,
            column: 44
          }
        }, {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 244,
            column: 33
          }
        }, {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 246,
            column: 24
          }
        }],
        line: 240
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\health\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - HEALTH CHECKS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\r\nimport { enterpriseHealthSystem, HealthStatus } from '@/lib/monitoring/health-checks';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Estados de salud\r\nexport enum HealthStatus {\r\n  HEALTHY = 'healthy',\r\n  DEGRADED = 'degraded',\r\n  UNHEALTHY = 'unhealthy',\r\n  UNKNOWN = 'unknown'\r\n}\r\n\r\n// Resultado de health check\r\ninterface HealthCheckResult {\r\n  service: string;\r\n  status: HealthStatus;\r\n  responseTime: number;\r\n  message?: string;\r\n  details?: Record<string, any>;\r\n  lastChecked: string;\r\n}\r\n\r\n// Resumen de salud del sistema\r\ninterface SystemHealth {\r\n  overall: HealthStatus;\r\n  services: HealthCheckResult[];\r\n  summary: {\r\n    healthy: number;\r\n    degraded: number;\r\n    unhealthy: number;\r\n    total: number;\r\n  };\r\n  uptime: number;\r\n  version: string;\r\n  timestamp: string;\r\n}\r\n\r\n/**\r\n * GET /api/admin/monitoring/health\r\n * Obtiene el estado de salud de todos los servicios\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Para health checks, permitir acceso sin autenticaci\xF3n completa para monitoreo externo\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const detailed = searchParams.get('detailed') === 'true';\r\n    const services = searchParams.get('services')?.split(',') || [];\r\n\r\n    // Si se solicita informaci\xF3n detallada, verificar autenticaci\xF3n\r\n    if (detailed) {\r\n      const authResult = await getAuthenticatedAdmin(request);\r\n      if (!authResult.isAdmin) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Acceso no autorizado para informaci\xF3n detallada'\r\n        }, { status: 401 });\r\n      }\r\n    }\r\n\r\n    // Usar el sistema enterprise de health checks\r\n    let serviceResults;\r\n\r\n    if (services.length > 0) {\r\n      // Ejecutar health checks espec\xEDficos\r\n      serviceResults = await Promise.all(\r\n        services.map(async (service) => {\r\n          try {\r\n            return await enterpriseHealthSystem.runHealthCheck(service);\r\n          } catch (error) {\r\n            return {\r\n              service,\r\n              status: HealthStatus.UNHEALTHY,\r\n              severity: 'critical' as const,\r\n              responseTime: 0,\r\n              message: `Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n              details: {},\r\n              lastChecked: new Date().toISOString()\r\n            };\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      // Ejecutar todos los health checks\r\n      serviceResults = await enterpriseHealthSystem.runAllHealthChecks();\r\n    }\r\n\r\n    // Obtener resumen del sistema\r\n    const healthData = enterpriseHealthSystem.getSystemHealth();\r\n    const summary = healthData.summary;\r\n    const overall = healthData.overall;\r\n\r\n    const systemHealth: SystemHealth = {\r\n      overall,\r\n      services: serviceResults,\r\n      summary,\r\n      uptime: process.uptime(),\r\n      version: process.env.npm_package_version || '3.0.0',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Log health check\r\n    logger.info(LogLevel.INFO, 'Health check performed', {\r\n      overall,\r\n      servicesChecked: serviceResults.length,\r\n      healthy: summary.healthy,\r\n      degraded: summary.degraded,\r\n      unhealthy: summary.unhealthy\r\n    }, LogCategory.SYSTEM);\r\n\r\n    // Retornar respuesta con c\xF3digo de estado apropiado\r\n    const statusCode = overall === HealthStatus.HEALTHY ? 200 :\r\n                      overall === HealthStatus.DEGRADED ? 200 :\r\n                      503;\r\n\r\n    return NextResponse.json({\r\n      success: overall !== HealthStatus.UNHEALTHY,\r\n      data: systemHealth\r\n    }, { status: statusCode });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Health check failed', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      data: {\r\n        overall: HealthStatus.UNHEALTHY,\r\n        services: [],\r\n        summary: { healthy: 0, degraded: 0, unhealthy: 1, total: 1 },\r\n        uptime: process.uptime(),\r\n        version: '3.0.0',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    }, { status: 503 });\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring/health\r\n * Ejecuta health checks espec\xEDficos o acciones de recuperaci\xF3n\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, service, config } = body;\r\n\r\n    if (!action) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Falta par\xE1metro: action'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    let result: any = {};\r\n\r\n    switch (action) {\r\n      case 'check':\r\n        if (!service) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: 'Service requerido para check'\r\n          }, { status: 400 });\r\n        }\r\n        result = await enterpriseHealthSystem.runHealthCheck(service);\r\n        break;\r\n      case 'recover':\r\n        if (!service) {\r\n          return NextResponse.json({\r\n            success: false,\r\n            error: 'Service requerido para recover'\r\n          }, { status: 400 });\r\n        }\r\n        const recoveryActionId = getRecoveryActionId(service);\r\n        if (recoveryActionId) {\r\n          const success = await enterpriseHealthSystem.executeRecoveryAction(recoveryActionId, config);\r\n          result = { success, service, action: 'recover' };\r\n        } else {\r\n          result = { success: false, service, error: 'No recovery action available' };\r\n        }\r\n        break;\r\n      case 'reset':\r\n        if (service === 'circuit_breakers' || !service) {\r\n          const success = await enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers');\r\n          result = { success, service: service || 'circuit_breakers', action: 'reset' };\r\n        } else {\r\n          result = { success: false, service, error: 'Reset not supported for this service' };\r\n        }\r\n        break;\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Acci\xF3n no v\xE1lida'\r\n        }, { status: 400 });\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Health action performed: ${action}`, {\r\n      userId: authResult.userId,\r\n      action,\r\n      service,\r\n      success: result.success\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: result\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Health action failed', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el ID de acci\xF3n de recuperaci\xF3n para un servicio\r\n */\r\nfunction getRecoveryActionId(service: string): string | null {\r\n  switch (service) {\r\n    case 'circuit_breakers':\r\n      return 'reset_circuit_breakers';\r\n    case 'cache':\r\n      return 'clear_cache';\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "HealthStatus", "POST", "runtime", "request", "searchParams", "nextUrl", "detailed", "get", "services", "split", "authResult", "getAuthenticatedAdmin", "isAdmin", "NextResponse", "json", "success", "error", "status", "serviceResults", "length", "Promise", "all", "map", "service", "enterpriseHealthSystem", "runHealthCheck", "severity", "responseTime", "message", "Error", "details", "lastChecked", "Date", "toISOString", "runAllHealthChecks", "healthData", "getSystemHealth", "summary", "overall", "systemHealth", "uptime", "process", "version", "env", "npm_package_version", "timestamp", "logger", "info", "LogLevel", "INFO", "servicesChecked", "healthy", "degraded", "unhealthy", "LogCategory", "SYSTEM", "statusCode", "data", "ERROR", "total", "userId", "body", "action", "config", "result", "recoveryActionId", "getRecoveryActionId", "executeRecoveryAction"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94a06d06eb95a3c8b11c608036b16f2f64f74a5b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hqs18benu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hqs18benu();
cov_2hqs18benu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2hqs18benu().f[0]++;
  cov_2hqs18benu().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2hqs18benu().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2hqs18benu().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2hqs18benu().f[1]++;
    cov_2hqs18benu().s[4]++;
    return GET;
  },
  get HealthStatus() {
    /* istanbul ignore next */
    cov_2hqs18benu().f[2]++;
    cov_2hqs18benu().s[5]++;
    return HealthStatus;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2hqs18benu().f[3]++;
    cov_2hqs18benu().s[6]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2hqs18benu().f[4]++;
    cov_2hqs18benu().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2hqs18benu().s[8]++, require("next/server"));
const _adminauth =
/* istanbul ignore next */
(cov_2hqs18benu().s[9]++, require("../../../../../lib/auth/admin-auth"));
const _healthchecks =
/* istanbul ignore next */
(cov_2hqs18benu().s[10]++, require("../../../../../lib/monitoring/health-checks"));
const _logger =
/* istanbul ignore next */
(cov_2hqs18benu().s[11]++, require("../../../../../lib/enterprise/logger"));
const runtime =
/* istanbul ignore next */
(cov_2hqs18benu().s[12]++, 'nodejs');
var HealthStatus =
/* istanbul ignore next */
(/*#__PURE__*/cov_2hqs18benu().s[13]++, function (HealthStatus) {
  /* istanbul ignore next */
  cov_2hqs18benu().f[5]++;
  cov_2hqs18benu().s[14]++;
  HealthStatus["HEALTHY"] = "healthy";
  /* istanbul ignore next */
  cov_2hqs18benu().s[15]++;
  HealthStatus["DEGRADED"] = "degraded";
  /* istanbul ignore next */
  cov_2hqs18benu().s[16]++;
  HealthStatus["UNHEALTHY"] = "unhealthy";
  /* istanbul ignore next */
  cov_2hqs18benu().s[17]++;
  HealthStatus["UNKNOWN"] = "unknown";
  /* istanbul ignore next */
  cov_2hqs18benu().s[18]++;
  return HealthStatus;
}({}));
async function GET(request) {
  /* istanbul ignore next */
  cov_2hqs18benu().f[6]++;
  cov_2hqs18benu().s[19]++;
  try {
    // Para health checks, permitir acceso sin autenticaciÃ³n completa para monitoreo externo
    const searchParams =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[20]++, request.nextUrl.searchParams);
    const detailed =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[21]++, searchParams.get('detailed') === 'true');
    const services =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[22]++,
    /* istanbul ignore next */
    (cov_2hqs18benu().b[0][0]++, searchParams.get('services')?.split(',')) ||
    /* istanbul ignore next */
    (cov_2hqs18benu().b[0][1]++, []));
    // Si se solicita informaciÃ³n detallada, verificar autenticaciÃ³n
    /* istanbul ignore next */
    cov_2hqs18benu().s[23]++;
    if (detailed) {
      /* istanbul ignore next */
      cov_2hqs18benu().b[1][0]++;
      const authResult =
      /* istanbul ignore next */
      (cov_2hqs18benu().s[24]++, await (0, _adminauth.getAuthenticatedAdmin)(request));
      /* istanbul ignore next */
      cov_2hqs18benu().s[25]++;
      if (!authResult.isAdmin) {
        /* istanbul ignore next */
        cov_2hqs18benu().b[2][0]++;
        cov_2hqs18benu().s[26]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Acceso no autorizado para informaciÃ³n detallada'
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_2hqs18benu().b[2][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2hqs18benu().b[1][1]++;
    }
    // Usar el sistema enterprise de health checks
    let serviceResults;
    /* istanbul ignore next */
    cov_2hqs18benu().s[27]++;
    if (services.length > 0) {
      /* istanbul ignore next */
      cov_2hqs18benu().b[3][0]++;
      cov_2hqs18benu().s[28]++;
      // Ejecutar health checks especÃ­ficos
      serviceResults = await Promise.all(services.map(async service => {
        /* istanbul ignore next */
        cov_2hqs18benu().f[7]++;
        cov_2hqs18benu().s[29]++;
        try {
          /* istanbul ignore next */
          cov_2hqs18benu().s[30]++;
          return await _healthchecks.enterpriseHealthSystem.runHealthCheck(service);
        } catch (error) {
          /* istanbul ignore next */
          cov_2hqs18benu().s[31]++;
          return {
            service,
            status: "unhealthy",
            severity: 'critical',
            responseTime: 0,
            message: `Health check failed: ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_2hqs18benu().b[4][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2hqs18benu().b[4][1]++, 'Unknown error')}`,
            details: {},
            lastChecked: new Date().toISOString()
          };
        }
      }));
    } else {
      /* istanbul ignore next */
      cov_2hqs18benu().b[3][1]++;
      cov_2hqs18benu().s[32]++;
      // Ejecutar todos los health checks
      serviceResults = await _healthchecks.enterpriseHealthSystem.runAllHealthChecks();
    }
    // Obtener resumen del sistema
    const healthData =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[33]++, _healthchecks.enterpriseHealthSystem.getSystemHealth());
    const summary =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[34]++, healthData.summary);
    const overall =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[35]++, healthData.overall);
    const systemHealth =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[36]++, {
      overall,
      services: serviceResults,
      summary,
      uptime: process.uptime(),
      version:
      /* istanbul ignore next */
      (cov_2hqs18benu().b[5][0]++, process.env.npm_package_version) ||
      /* istanbul ignore next */
      (cov_2hqs18benu().b[5][1]++, '3.0.0'),
      timestamp: new Date().toISOString()
    });
    // Log health check
    /* istanbul ignore next */
    cov_2hqs18benu().s[37]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'Health check performed', {
      overall,
      servicesChecked: serviceResults.length,
      healthy: summary.healthy,
      degraded: summary.degraded,
      unhealthy: summary.unhealthy
    }, _logger.LogCategory.SYSTEM);
    // Retornar respuesta con cÃ³digo de estado apropiado
    const statusCode =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[38]++, overall === "healthy" ?
    /* istanbul ignore next */
    (cov_2hqs18benu().b[6][0]++, 200) :
    /* istanbul ignore next */
    (cov_2hqs18benu().b[6][1]++, overall === "degraded" ?
    /* istanbul ignore next */
    (cov_2hqs18benu().b[7][0]++, 200) :
    /* istanbul ignore next */
    (cov_2hqs18benu().b[7][1]++, 503)));
    /* istanbul ignore next */
    cov_2hqs18benu().s[39]++;
    return _server.NextResponse.json({
      success: overall !== "unhealthy",
      data: systemHealth
    }, {
      status: statusCode
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2hqs18benu().s[40]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'Health check failed', {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2hqs18benu().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2hqs18benu().b[8][1]++, 'Unknown error')
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_2hqs18benu().s[41]++;
    return _server.NextResponse.json({
      success: false,
      data: {
        overall: "unhealthy",
        services: [],
        summary: {
          healthy: 0,
          degraded: 0,
          unhealthy: 1,
          total: 1
        },
        uptime: process.uptime(),
        version: '3.0.0',
        timestamp: new Date().toISOString()
      }
    }, {
      status: 503
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2hqs18benu().f[8]++;
  cov_2hqs18benu().s[42]++;
  try {
    // Verificar autenticaciÃ³n de admin
    const authResult =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[43]++, await (0, _adminauth.getAuthenticatedAdmin)(request));
    /* istanbul ignore next */
    cov_2hqs18benu().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_2hqs18benu().b[10][0]++, !authResult.isAdmin) ||
    /* istanbul ignore next */
    (cov_2hqs18benu().b[10][1]++, !authResult.userId)) {
      /* istanbul ignore next */
      cov_2hqs18benu().b[9][0]++;
      cov_2hqs18benu().s[45]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Acceso no autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqs18benu().b[9][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[46]++, await request.json());
    const {
      action,
      service,
      config
    } =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[47]++, body);
    /* istanbul ignore next */
    cov_2hqs18benu().s[48]++;
    if (!action) {
      /* istanbul ignore next */
      cov_2hqs18benu().b[11][0]++;
      cov_2hqs18benu().s[49]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Falta parÃ¡metro: action'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqs18benu().b[11][1]++;
    }
    let result =
    /* istanbul ignore next */
    (cov_2hqs18benu().s[50]++, {});
    /* istanbul ignore next */
    cov_2hqs18benu().s[51]++;
    switch (action) {
      case 'check':
        /* istanbul ignore next */
        cov_2hqs18benu().b[12][0]++;
        cov_2hqs18benu().s[52]++;
        if (!service) {
          /* istanbul ignore next */
          cov_2hqs18benu().b[13][0]++;
          cov_2hqs18benu().s[53]++;
          return _server.NextResponse.json({
            success: false,
            error: 'Service requerido para check'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2hqs18benu().b[13][1]++;
        }
        cov_2hqs18benu().s[54]++;
        result = await _healthchecks.enterpriseHealthSystem.runHealthCheck(service);
        /* istanbul ignore next */
        cov_2hqs18benu().s[55]++;
        break;
      case 'recover':
        /* istanbul ignore next */
        cov_2hqs18benu().b[12][1]++;
        cov_2hqs18benu().s[56]++;
        if (!service) {
          /* istanbul ignore next */
          cov_2hqs18benu().b[14][0]++;
          cov_2hqs18benu().s[57]++;
          return _server.NextResponse.json({
            success: false,
            error: 'Service requerido para recover'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2hqs18benu().b[14][1]++;
        }
        const recoveryActionId =
        /* istanbul ignore next */
        (cov_2hqs18benu().s[58]++, getRecoveryActionId(service));
        /* istanbul ignore next */
        cov_2hqs18benu().s[59]++;
        if (recoveryActionId) {
          /* istanbul ignore next */
          cov_2hqs18benu().b[15][0]++;
          const success =
          /* istanbul ignore next */
          (cov_2hqs18benu().s[60]++, await _healthchecks.enterpriseHealthSystem.executeRecoveryAction(recoveryActionId, config));
          /* istanbul ignore next */
          cov_2hqs18benu().s[61]++;
          result = {
            success,
            service,
            action: 'recover'
          };
        } else {
          /* istanbul ignore next */
          cov_2hqs18benu().b[15][1]++;
          cov_2hqs18benu().s[62]++;
          result = {
            success: false,
            service,
            error: 'No recovery action available'
          };
        }
        /* istanbul ignore next */
        cov_2hqs18benu().s[63]++;
        break;
      case 'reset':
        /* istanbul ignore next */
        cov_2hqs18benu().b[12][2]++;
        cov_2hqs18benu().s[64]++;
        if (
        /* istanbul ignore next */
        (cov_2hqs18benu().b[17][0]++, service === 'circuit_breakers') ||
        /* istanbul ignore next */
        (cov_2hqs18benu().b[17][1]++, !service)) {
          /* istanbul ignore next */
          cov_2hqs18benu().b[16][0]++;
          const success =
          /* istanbul ignore next */
          (cov_2hqs18benu().s[65]++, await _healthchecks.enterpriseHealthSystem.executeRecoveryAction('reset_circuit_breakers'));
          /* istanbul ignore next */
          cov_2hqs18benu().s[66]++;
          result = {
            success,
            service:
            /* istanbul ignore next */
            (cov_2hqs18benu().b[18][0]++, service) ||
            /* istanbul ignore next */
            (cov_2hqs18benu().b[18][1]++, 'circuit_breakers'),
            action: 'reset'
          };
        } else {
          /* istanbul ignore next */
          cov_2hqs18benu().b[16][1]++;
          cov_2hqs18benu().s[67]++;
          result = {
            success: false,
            service,
            error: 'Reset not supported for this service'
          };
        }
        /* istanbul ignore next */
        cov_2hqs18benu().s[68]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2hqs18benu().b[12][3]++;
        cov_2hqs18benu().s[69]++;
        return _server.NextResponse.json({
          success: false,
          error: 'AcciÃ³n no vÃ¡lida'
        }, {
          status: 400
        });
    }
    /* istanbul ignore next */
    cov_2hqs18benu().s[70]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Health action performed: ${action}`, {
      userId: authResult.userId,
      action,
      service,
      success: result.success
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_2hqs18benu().s[71]++;
    return _server.NextResponse.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2hqs18benu().s[72]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'Health action failed', {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2hqs18benu().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2hqs18benu().b[19][1]++, 'Unknown error')
    }, _logger.LogCategory.SYSTEM);
    /* istanbul ignore next */
    cov_2hqs18benu().s[73]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
/**
 * Obtiene el ID de acciÃ³n de recuperaciÃ³n para un servicio
 */
function getRecoveryActionId(service) {
  /* istanbul ignore next */
  cov_2hqs18benu().f[9]++;
  cov_2hqs18benu().s[74]++;
  switch (service) {
    case 'circuit_breakers':
      /* istanbul ignore next */
      cov_2hqs18benu().b[20][0]++;
      cov_2hqs18benu().s[75]++;
      return 'reset_circuit_breakers';
    case 'cache':
      /* istanbul ignore next */
      cov_2hqs18benu().b[20][1]++;
      cov_2hqs18benu().s[76]++;
      return 'clear_cache';
    default:
      /* istanbul ignore next */
      cov_2hqs18benu().b[20][2]++;
      cov_2hqs18benu().s[77]++;
      return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,