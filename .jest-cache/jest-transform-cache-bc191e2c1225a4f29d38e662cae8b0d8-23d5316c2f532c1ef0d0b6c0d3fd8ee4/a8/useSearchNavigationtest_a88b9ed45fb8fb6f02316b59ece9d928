bad1b6c63de5688f92f75c0e546b622f
// ===================================
// TESTS: useSearchNavigation Hook - Navegación optimizada para búsquedas
// ===================================
"use strict";
// ===================================
// MOCKS
// ===================================
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(),
        useSearchParams: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _navigation = require("next/navigation");
const _useSearchNavigation = require("../../hooks/useSearchNavigation");
// Mock window.scrollTo
Object.defineProperty(window, 'scrollTo', {
    value: jest.fn(),
    writable: true
});
// ===================================
// SETUP
// ===================================
const mockPush = jest.fn();
const mockReplace = jest.fn();
const mockPrefetch = jest.fn();
const mockUseRouter = _navigation.useRouter;
const mockUseSearchParams = _navigation.useSearchParams;
const mockSearchParams = {
    get: jest.fn(),
    forEach: jest.fn(),
    toString: jest.fn(()=>'')
};
beforeEach(()=>{
    jest.clearAllMocks();
    mockUseRouter.mockReturnValue({
        push: mockPush,
        replace: mockReplace,
        prefetch: mockPrefetch
    });
    mockUseSearchParams.mockReturnValue(mockSearchParams);
    // Reset window.scrollTo mock
    window.scrollTo.mockClear();
});
// ===================================
// TESTS
// ===================================
describe('useSearchNavigation Hook', ()=>{
    it('should navigate to search with query', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToSearch('pintura roja');
        });
        expect(mockPush).toHaveBeenCalledWith('/search?q=pintura+roja');
    });
    it('should navigate to search with query and category', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToSearch('pintura', 'pinturas');
        });
        expect(mockPush).toHaveBeenCalledWith('/search?q=pintura&category=pinturas');
    });
    it('should navigate to search with additional parameters', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToSearch('pintura', undefined, {
                sort: 'price',
                brand: 'sherwin'
            });
        });
        expect(mockPush).toHaveBeenCalledWith('/search?q=pintura&sort=price&brand=sherwin');
    });
    it('should use replace instead of push when configured', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)({
                replace: true
            }));
        (0, _react.act)(()=>{
            result.current.navigateToSearch('test query');
        });
        expect(mockReplace).toHaveBeenCalledWith('/search?q=test+query');
        expect(mockPush).not.toHaveBeenCalled();
    });
    it('should preserve existing parameters when configured', ()=>{
        mockSearchParams.get.mockImplementation((key)=>{
            if (key === 'sort') {
                return 'price';
            }
            if (key === 'brand') {
                return 'sherwin';
            }
            return null;
        });
        mockSearchParams.forEach.mockImplementation((callback)=>{
            callback('price', 'sort');
            callback('sherwin', 'brand');
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)({
                preserveParams: true
            }));
        (0, _react.act)(()=>{
            result.current.navigateToSearch('nueva busqueda');
        });
        expect(mockPush).toHaveBeenCalledWith('/search?q=nueva+busqueda&sort=price&brand=sherwin');
    });
    it('should scroll to top when configured', ()=>{
        jest.useFakeTimers();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)({
                scrollToTop: true
            }));
        (0, _react.act)(()=>{
            result.current.navigateToSearch('test');
        });
        // Fast-forward timers
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(100);
        });
        expect(window.scrollTo).toHaveBeenCalledWith({
            top: 0,
            behavior: 'smooth'
        });
        jest.useRealTimers();
    });
    it('should call navigation callbacks', ()=>{
        const onBeforeNavigate = jest.fn();
        const onAfterNavigate = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)({
                onBeforeNavigate,
                onAfterNavigate
            }));
        (0, _react.act)(()=>{
            result.current.navigateToSearch('test');
        });
        expect(onBeforeNavigate).toHaveBeenCalledWith('/search?q=test');
        expect(onAfterNavigate).toHaveBeenCalledWith('/search?q=test');
    });
    it('should navigate to product', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToProduct('123');
        });
        expect(mockPush).toHaveBeenCalledWith('/products/123');
    });
    it('should navigate to product with slug', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToProduct('123', 'pintura-sherwin-williams');
        });
        expect(mockPush).toHaveBeenCalledWith('/products/pintura-sherwin-williams');
    });
    it('should navigate to category', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToCategory('pinturas');
        });
        expect(mockPush).toHaveBeenCalledWith('/shop?category=pinturas');
    });
    it('should navigate to category with slug', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToCategory('pinturas', 'pinturas-interiores');
        });
        expect(mockPush).toHaveBeenCalledWith('/shop/pinturas-interiores');
    });
    it('should prefetch search page', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.prefetchSearch('pintura');
        });
        expect(mockPrefetch).toHaveBeenCalledWith('/search?q=pintura');
    });
    it('should prefetch product page', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.prefetchProduct('123');
        });
        expect(mockPrefetch).toHaveBeenCalledWith('/products/123');
    });
    it('should get current search query', ()=>{
        mockSearchParams.get.mockImplementation((key)=>{
            if (key === 'q') {
                return 'current search';
            }
            return null;
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        const query = result.current.getCurrentSearchQuery();
        expect(query).toBe('current search');
    });
    it('should get current category', ()=>{
        mockSearchParams.get.mockImplementation((key)=>{
            if (key === 'category') {
                return 'pinturas';
            }
            return null;
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        const category = result.current.getCurrentCategory();
        expect(category).toBe('pinturas');
    });
    it('should build search URL correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        const url = result.current.buildSearchUrl('test query', 'pinturas', {
            sort: 'price',
            brand: 'sherwin'
        });
        expect(url).toBe('/search?q=test+query&category=pinturas&sort=price&brand=sherwin');
    });
    it('should not include category "all" in URL', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        const url = result.current.buildSearchUrl('test', 'all');
        expect(url).toBe('/search?q=test');
    });
    it('should handle empty query gracefully', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToSearch('');
        });
        // Should not navigate with empty query
        expect(mockPush).not.toHaveBeenCalled();
    });
    it('should handle whitespace-only query', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchNavigation.useSearchNavigation)());
        (0, _react.act)(()=>{
            result.current.navigateToSearch('   ');
        });
        // Should not navigate with whitespace-only query
        expect(mockPush).not.toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlU2VhcmNoTmF2aWdhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBURVNUUzogdXNlU2VhcmNoTmF2aWdhdGlvbiBIb29rIC0gTmF2ZWdhY2nDs24gb3B0aW1pemFkYSBwYXJhIGLDunNxdWVkYXNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIsIHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XHJcbmltcG9ydCB7IHVzZVNlYXJjaE5hdmlnYXRpb24gfSBmcm9tICdAL2hvb2tzL3VzZVNlYXJjaE5hdmlnYXRpb24nO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gTU9DS1NcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8vIE1vY2sgTmV4dC5qcyByb3V0ZXJcclxuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xyXG4gIHVzZVJvdXRlcjogamVzdC5mbigpLFxyXG4gIHVzZVNlYXJjaFBhcmFtczogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIHdpbmRvdy5zY3JvbGxUb1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnc2Nyb2xsVG8nLCB7XHJcbiAgdmFsdWU6IGplc3QuZm4oKSxcclxuICB3cml0YWJsZTogdHJ1ZSxcclxufSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTRVRVUFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuY29uc3QgbW9ja1B1c2ggPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tSZXBsYWNlID0gamVzdC5mbigpO1xyXG5jb25zdCBtb2NrUHJlZmV0Y2ggPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tVc2VSb3V0ZXIgPSB1c2VSb3V0ZXIgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgdXNlUm91dGVyPjtcclxuY29uc3QgbW9ja1VzZVNlYXJjaFBhcmFtcyA9IHVzZVNlYXJjaFBhcmFtcyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiB1c2VTZWFyY2hQYXJhbXM+O1xyXG5cclxuY29uc3QgbW9ja1NlYXJjaFBhcmFtcyA9IHtcclxuICBnZXQ6IGplc3QuZm4oKSxcclxuICBmb3JFYWNoOiBqZXN0LmZuKCksXHJcbiAgdG9TdHJpbmc6IGplc3QuZm4oKCkgPT4gJycpLFxyXG59O1xyXG5cclxuYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgXHJcbiAgbW9ja1VzZVJvdXRlci5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgcHVzaDogbW9ja1B1c2gsXHJcbiAgICByZXBsYWNlOiBtb2NrUmVwbGFjZSxcclxuICAgIHByZWZldGNoOiBtb2NrUHJlZmV0Y2gsXHJcbiAgfSBhcyBhbnkpO1xyXG4gIFxyXG4gIG1vY2tVc2VTZWFyY2hQYXJhbXMubW9ja1JldHVyblZhbHVlKG1vY2tTZWFyY2hQYXJhbXMgYXMgYW55KTtcclxuICBcclxuICAvLyBSZXNldCB3aW5kb3cuc2Nyb2xsVG8gbW9ja1xyXG4gICh3aW5kb3cuc2Nyb2xsVG8gYXMgamVzdC5Nb2NrKS5tb2NrQ2xlYXIoKTtcclxufSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBURVNUU1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZGVzY3JpYmUoJ3VzZVNlYXJjaE5hdmlnYXRpb24gSG9vaycsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIG5hdmlnYXRlIHRvIHNlYXJjaCB3aXRoIHF1ZXJ5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5uYXZpZ2F0ZVRvU2VhcmNoKCdwaW50dXJhIHJvamEnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9zZWFyY2g/cT1waW50dXJhK3JvamEnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBuYXZpZ2F0ZSB0byBzZWFyY2ggd2l0aCBxdWVyeSBhbmQgY2F0ZWdvcnknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9TZWFyY2goJ3BpbnR1cmEnLCAncGludHVyYXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9zZWFyY2g/cT1waW50dXJhJmNhdGVnb3J5PXBpbnR1cmFzJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgbmF2aWdhdGUgdG8gc2VhcmNoIHdpdGggYWRkaXRpb25hbCBwYXJhbWV0ZXJzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5uYXZpZ2F0ZVRvU2VhcmNoKCdwaW50dXJhJywgdW5kZWZpbmVkLCB7IFxyXG4gICAgICAgIHNvcnQ6ICdwcmljZScsXHJcbiAgICAgICAgYnJhbmQ6ICdzaGVyd2luJyBcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QobW9ja1B1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvc2VhcmNoP3E9cGludHVyYSZzb3J0PXByaWNlJmJyYW5kPXNoZXJ3aW4nKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB1c2UgcmVwbGFjZSBpbnN0ZWFkIG9mIHB1c2ggd2hlbiBjb25maWd1cmVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbih7IHJlcGxhY2U6IHRydWUgfSkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9TZWFyY2goJ3Rlc3QgcXVlcnknKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUmVwbGFjZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9zZWFyY2g/cT10ZXN0K3F1ZXJ5Jyk7XHJcbiAgICBleHBlY3QobW9ja1B1c2gpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcHJlc2VydmUgZXhpc3RpbmcgcGFyYW1ldGVycyB3aGVuIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XHJcbiAgICBtb2NrU2VhcmNoUGFyYW1zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKGtleSkgPT4ge1xyXG4gICAgICBpZiAoa2V5ID09PSAnc29ydCcpIHtyZXR1cm4gJ3ByaWNlJzt9XHJcbiAgICAgIGlmIChrZXkgPT09ICdicmFuZCcpIHtyZXR1cm4gJ3NoZXJ3aW4nO31cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICBtb2NrU2VhcmNoUGFyYW1zLmZvckVhY2gubW9ja0ltcGxlbWVudGF0aW9uKChjYWxsYmFjaykgPT4ge1xyXG4gICAgICBjYWxsYmFjaygncHJpY2UnLCAnc29ydCcpO1xyXG4gICAgICBjYWxsYmFjaygnc2hlcndpbicsICdicmFuZCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbih7IFxyXG4gICAgICBwcmVzZXJ2ZVBhcmFtczogdHJ1ZSBcclxuICAgIH0pKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5uYXZpZ2F0ZVRvU2VhcmNoKCdudWV2YSBidXNxdWVkYScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tQdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3NlYXJjaD9xPW51ZXZhK2J1c3F1ZWRhJnNvcnQ9cHJpY2UmYnJhbmQ9c2hlcndpbicpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHNjcm9sbCB0byB0b3Agd2hlbiBjb25maWd1cmVkJywgKCkgPT4ge1xyXG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE5hdmlnYXRpb24oeyBcclxuICAgICAgc2Nyb2xsVG9Ub3A6IHRydWUgXHJcbiAgICB9KSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQubmF2aWdhdGVUb1NlYXJjaCgndGVzdCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRmFzdC1mb3J3YXJkIHRpbWVyc1xyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3Qod2luZG93LnNjcm9sbFRvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IFxyXG4gICAgICB0b3A6IDAsIFxyXG4gICAgICBiZWhhdmlvcjogJ3Ntb290aCcgXHJcbiAgICB9KTtcclxuXHJcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjYWxsIG5hdmlnYXRpb24gY2FsbGJhY2tzJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgb25CZWZvcmVOYXZpZ2F0ZSA9IGplc3QuZm4oKTtcclxuICAgIGNvbnN0IG9uQWZ0ZXJOYXZpZ2F0ZSA9IGplc3QuZm4oKTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKHtcclxuICAgICAgb25CZWZvcmVOYXZpZ2F0ZSxcclxuICAgICAgb25BZnRlck5hdmlnYXRlLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9TZWFyY2goJ3Rlc3QnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChvbkJlZm9yZU5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3NlYXJjaD9xPXRlc3QnKTtcclxuICAgIGV4cGVjdChvbkFmdGVyTmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvc2VhcmNoP3E9dGVzdCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIG5hdmlnYXRlIHRvIHByb2R1Y3QnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9Qcm9kdWN0KCcxMjMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9wcm9kdWN0cy8xMjMnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBuYXZpZ2F0ZSB0byBwcm9kdWN0IHdpdGggc2x1ZycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE5hdmlnYXRpb24oKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQubmF2aWdhdGVUb1Byb2R1Y3QoJzEyMycsICdwaW50dXJhLXNoZXJ3aW4td2lsbGlhbXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChtb2NrUHVzaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9wcm9kdWN0cy9waW50dXJhLXNoZXJ3aW4td2lsbGlhbXMnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBuYXZpZ2F0ZSB0byBjYXRlZ29yeScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE5hdmlnYXRpb24oKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQubmF2aWdhdGVUb0NhdGVnb3J5KCdwaW50dXJhcycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tQdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3Nob3A/Y2F0ZWdvcnk9cGludHVyYXMnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBuYXZpZ2F0ZSB0byBjYXRlZ29yeSB3aXRoIHNsdWcnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9DYXRlZ29yeSgncGludHVyYXMnLCAncGludHVyYXMtaW50ZXJpb3JlcycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tQdXNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3Nob3AvcGludHVyYXMtaW50ZXJpb3JlcycpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHByZWZldGNoIHNlYXJjaCBwYWdlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5wcmVmZXRjaFNlYXJjaCgncGludHVyYScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tQcmVmZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9zZWFyY2g/cT1waW50dXJhJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcHJlZmV0Y2ggcHJvZHVjdCBwYWdlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5wcmVmZXRjaFByb2R1Y3QoJzEyMycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KG1vY2tQcmVmZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9wcm9kdWN0cy8xMjMnKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBnZXQgY3VycmVudCBzZWFyY2ggcXVlcnknLCAoKSA9PiB7XHJcbiAgICBtb2NrU2VhcmNoUGFyYW1zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKGtleSkgPT4ge1xyXG4gICAgICBpZiAoa2V5ID09PSAncScpIHtyZXR1cm4gJ2N1cnJlbnQgc2VhcmNoJzt9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBjb25zdCBxdWVyeSA9IHJlc3VsdC5jdXJyZW50LmdldEN1cnJlbnRTZWFyY2hRdWVyeSgpO1xyXG4gICAgZXhwZWN0KHF1ZXJ5KS50b0JlKCdjdXJyZW50IHNlYXJjaCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGdldCBjdXJyZW50IGNhdGVnb3J5JywgKCkgPT4ge1xyXG4gICAgbW9ja1NlYXJjaFBhcmFtcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSA9PT0gJ2NhdGVnb3J5Jykge3JldHVybiAncGludHVyYXMnO31cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGNvbnN0IGNhdGVnb3J5ID0gcmVzdWx0LmN1cnJlbnQuZ2V0Q3VycmVudENhdGVnb3J5KCk7XHJcbiAgICBleHBlY3QoY2F0ZWdvcnkpLnRvQmUoJ3BpbnR1cmFzJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgYnVpbGQgc2VhcmNoIFVSTCBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGNvbnN0IHVybCA9IHJlc3VsdC5jdXJyZW50LmJ1aWxkU2VhcmNoVXJsKCd0ZXN0IHF1ZXJ5JywgJ3BpbnR1cmFzJywge1xyXG4gICAgICBzb3J0OiAncHJpY2UnLFxyXG4gICAgICBicmFuZDogJ3NoZXJ3aW4nXHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QodXJsKS50b0JlKCcvc2VhcmNoP3E9dGVzdCtxdWVyeSZjYXRlZ29yeT1waW50dXJhcyZzb3J0PXByaWNlJmJyYW5kPXNoZXJ3aW4nKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBub3QgaW5jbHVkZSBjYXRlZ29yeSBcImFsbFwiIGluIFVSTCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNlYXJjaE5hdmlnYXRpb24oKSk7XHJcblxyXG4gICAgY29uc3QgdXJsID0gcmVzdWx0LmN1cnJlbnQuYnVpbGRTZWFyY2hVcmwoJ3Rlc3QnLCAnYWxsJyk7XHJcbiAgICBleHBlY3QodXJsKS50b0JlKCcvc2VhcmNoP3E9dGVzdCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBxdWVyeSBncmFjZWZ1bGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2VhcmNoTmF2aWdhdGlvbigpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5uYXZpZ2F0ZVRvU2VhcmNoKCcnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNob3VsZCBub3QgbmF2aWdhdGUgd2l0aCBlbXB0eSBxdWVyeVxyXG4gICAgZXhwZWN0KG1vY2tQdXNoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhbmRsZSB3aGl0ZXNwYWNlLW9ubHkgcXVlcnknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTZWFyY2hOYXZpZ2F0aW9uKCkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50Lm5hdmlnYXRlVG9TZWFyY2goJyAgICcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2hvdWxkIG5vdCBuYXZpZ2F0ZSB3aXRoIHdoaXRlc3BhY2Utb25seSBxdWVyeVxyXG4gICAgZXhwZWN0KG1vY2tQdXNoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidXNlUm91dGVyIiwiZm4iLCJ1c2VTZWFyY2hQYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsInZhbHVlIiwid3JpdGFibGUiLCJtb2NrUHVzaCIsIm1vY2tSZXBsYWNlIiwibW9ja1ByZWZldGNoIiwibW9ja1VzZVJvdXRlciIsIm1vY2tVc2VTZWFyY2hQYXJhbXMiLCJtb2NrU2VhcmNoUGFyYW1zIiwiZ2V0IiwiZm9yRWFjaCIsInRvU3RyaW5nIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJwdXNoIiwicmVwbGFjZSIsInByZWZldGNoIiwic2Nyb2xsVG8iLCJtb2NrQ2xlYXIiLCJkZXNjcmliZSIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZVNlYXJjaE5hdmlnYXRpb24iLCJhY3QiLCJjdXJyZW50IiwibmF2aWdhdGVUb1NlYXJjaCIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidW5kZWZpbmVkIiwic29ydCIsImJyYW5kIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImtleSIsImNhbGxiYWNrIiwicHJlc2VydmVQYXJhbXMiLCJ1c2VGYWtlVGltZXJzIiwic2Nyb2xsVG9Ub3AiLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwidG9wIiwiYmVoYXZpb3IiLCJ1c2VSZWFsVGltZXJzIiwib25CZWZvcmVOYXZpZ2F0ZSIsIm9uQWZ0ZXJOYXZpZ2F0ZSIsIm5hdmlnYXRlVG9Qcm9kdWN0IiwibmF2aWdhdGVUb0NhdGVnb3J5IiwicHJlZmV0Y2hTZWFyY2giLCJwcmVmZXRjaFByb2R1Y3QiLCJxdWVyeSIsImdldEN1cnJlbnRTZWFyY2hRdWVyeSIsInRvQmUiLCJjYXRlZ29yeSIsImdldEN1cnJlbnRDYXRlZ29yeSIsInVybCIsImJ1aWxkU2VhcmNoVXJsIl0sIm1h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