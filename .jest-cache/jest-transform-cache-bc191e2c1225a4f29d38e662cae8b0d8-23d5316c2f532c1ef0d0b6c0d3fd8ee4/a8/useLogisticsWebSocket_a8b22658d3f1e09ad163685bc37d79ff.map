{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useLogisticsWebSocket.ts"],"sourcesContent":["// =====================================================\n// HOOK: LOGISTICS WEBSOCKET ENTERPRISE\n// Descripción: Hook React para WebSocket tiempo real\n// Basado en: React Hooks + WebSocket + Context\n// =====================================================\n\n'use client'\n\nimport { useEffect, useState, useCallback, useRef } from 'react'\nimport { useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'sonner'\nimport {\n  getLogisticsWebSocket,\n  LogisticsWebSocketSimulator,\n  TrackingUpdate,\n  GeofenceEvent,\n  LogisticsAlert,\n} from '@/lib/websockets/logistics-websocket'\n\n// =====================================================\n// INTERFACES\n// =====================================================\n\nexport interface UseLogisticsWebSocketOptions {\n  enabled?: boolean\n  autoConnect?: boolean\n  showNotifications?: boolean\n  simulateInDevelopment?: boolean\n}\n\nexport interface UseLogisticsWebSocketReturn {\n  isConnected: boolean\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error'\n  connect: () => Promise<void>\n  disconnect: () => void\n  subscribeToShipment: (shipmentId: number) => void\n  unsubscribeFromShipment: (shipmentId: number) => void\n  subscribeToGeofence: (zoneId: string) => void\n  subscribeToAlerts: () => void\n  lastTrackingUpdate: TrackingUpdate | null\n  lastAlert: LogisticsAlert | null\n  lastGeofenceEvent: GeofenceEvent | null\n  alerts: LogisticsAlert[]\n  clearAlerts: () => void\n}\n\n// =====================================================\n// HOOK PRINCIPAL\n// =====================================================\n\nexport function useLogisticsWebSocket(\n  options: UseLogisticsWebSocketOptions = {}\n): UseLogisticsWebSocketReturn {\n  const {\n    enabled = true,\n    autoConnect = true,\n    showNotifications = true,\n    simulateInDevelopment = true,\n  } = options\n\n  // Estados\n  const [isConnected, setIsConnected] = useState(false)\n  const [connectionState, setConnectionState] = useState<\n    'connecting' | 'connected' | 'disconnected' | 'error'\n  >('disconnected')\n  const [lastTrackingUpdate, setLastTrackingUpdate] = useState<TrackingUpdate | null>(null)\n  const [lastAlert, setLastAlert] = useState<LogisticsAlert | null>(null)\n  const [lastGeofenceEvent, setLastGeofenceEvent] = useState<GeofenceEvent | null>(null)\n  const [alerts, setAlerts] = useState<LogisticsAlert[]>([])\n\n  // Referencias\n  const wsRef = useRef(getLogisticsWebSocket())\n  const simulatorRef = useRef<LogisticsWebSocketSimulator | null>(null)\n  const queryClient = useQueryClient()\n\n  // =====================================================\n  // CONFIGURACIÓN DE EVENTOS\n  // =====================================================\n\n  useEffect(() => {\n    if (!enabled) {\n      return\n    }\n\n    const ws = wsRef.current\n\n    // Eventos de conexión\n    const handleConnected = () => {\n      setIsConnected(true)\n      setConnectionState('connected')\n      if (showNotifications) {\n        toast.success('Conectado al sistema de tracking en tiempo real')\n      }\n    }\n\n    const handleDisconnected = () => {\n      setIsConnected(false)\n      setConnectionState('disconnected')\n      if (showNotifications) {\n        toast.warning('Desconectado del sistema de tracking')\n      }\n    }\n\n    const handleError = (error: any) => {\n      setConnectionState('error')\n      console.error('WebSocket error:', error)\n      if (showNotifications) {\n        toast.error('Error en la conexión de tiempo real')\n      }\n    }\n\n    // Eventos de datos\n    const handleTrackingUpdate = (update: TrackingUpdate) => {\n      setLastTrackingUpdate(update)\n\n      // Invalidar cache de tracking para el shipment\n      queryClient.invalidateQueries({\n        queryKey: ['admin', 'logistics', 'tracking', update.shipment_id],\n      })\n\n      // Invalidar dashboard si es necesario\n      queryClient.invalidateQueries({\n        queryKey: ['admin', 'logistics', 'dashboard'],\n      })\n\n      if (showNotifications) {\n        toast.info(`Actualización de envío #${update.shipment_id}`, {\n          description: `Estado: ${update.status}`,\n        })\n      }\n    }\n\n    const handleAlert = (alert: LogisticsAlert) => {\n      setLastAlert(alert)\n      setAlerts(prev => [alert, ...prev.slice(0, 49)]) // Mantener últimas 50\n\n      if (showNotifications) {\n        const toastFn =\n          alert.severity === 'critical'\n            ? toast.error\n            : alert.severity === 'high'\n              ? toast.warning\n              : toast.info\n\n        toastFn(`Alerta: ${alert.type}`, {\n          description: alert.message,\n        })\n      }\n    }\n\n    const handleGeofenceEvent = (event: GeofenceEvent) => {\n      setLastGeofenceEvent(event)\n\n      // Invalidar cache relacionado\n      queryClient.invalidateQueries({\n        queryKey: ['admin', 'logistics', 'tracking', event.shipment_id],\n      })\n\n      if (showNotifications) {\n        toast.info(`Evento de zona: ${event.zone_name}`, {\n          description: `Envío #${event.shipment_id} ${event.event_type === 'enter' ? 'entró' : 'salió'}`,\n        })\n      }\n    }\n\n    // Registrar eventos\n    ws.on('connected', handleConnected)\n    ws.on('disconnected', handleDisconnected)\n    ws.on('error', handleError)\n    ws.on('tracking_update', handleTrackingUpdate)\n    ws.on('alert', handleAlert)\n    ws.on('geofence_event', handleGeofenceEvent)\n\n    // Cleanup\n    return () => {\n      ws.off('connected', handleConnected)\n      ws.off('disconnected', handleDisconnected)\n      ws.off('error', handleError)\n      ws.off('tracking_update', handleTrackingUpdate)\n      ws.off('alert', handleAlert)\n      ws.off('geofence_event', handleGeofenceEvent)\n    }\n  }, [enabled, showNotifications, queryClient])\n\n  // =====================================================\n  // SIMULADOR PARA DESARROLLO\n  // =====================================================\n\n  useEffect(() => {\n    if (!enabled || !simulateInDevelopment || process.env.NODE_ENV !== 'development') {\n      return\n    }\n\n    // Crear simulador si no existe\n    if (!simulatorRef.current) {\n      simulatorRef.current = new LogisticsWebSocketSimulator()\n\n      // Conectar eventos del simulador a los handlers\n      simulatorRef.current.on('tracking_update', (update: TrackingUpdate) => {\n        setLastTrackingUpdate(update)\n        queryClient.invalidateQueries({\n          queryKey: ['admin', 'logistics', 'tracking', update.shipment_id],\n        })\n      })\n\n      simulatorRef.current.on('alert', (alert: LogisticsAlert) => {\n        setLastAlert(alert)\n        setAlerts(prev => [alert, ...prev.slice(0, 49)])\n\n        if (showNotifications) {\n          toast.info(`🎭 Simulación - ${alert.type}`, {\n            description: alert.message,\n          })\n        }\n      })\n\n      simulatorRef.current.on('geofence_event', (event: GeofenceEvent) => {\n        setLastGeofenceEvent(event)\n        queryClient.invalidateQueries({\n          queryKey: ['admin', 'logistics', 'tracking', event.shipment_id],\n        })\n      })\n    }\n\n    // Iniciar simulador\n    simulatorRef.current.start()\n    setIsConnected(true)\n    setConnectionState('connected')\n\n    if (showNotifications) {\n      toast.success('🎭 Simulador de WebSocket iniciado')\n    }\n\n    return () => {\n      if (simulatorRef.current) {\n        simulatorRef.current.stop()\n      }\n    }\n  }, [enabled, simulateInDevelopment, showNotifications, queryClient])\n\n  // =====================================================\n  // AUTO-CONEXIÓN\n  // =====================================================\n\n  useEffect(() => {\n    if (enabled && autoConnect && process.env.NODE_ENV !== 'development') {\n      connect()\n    }\n  }, [enabled, autoConnect])\n\n  // =====================================================\n  // FUNCIONES PÚBLICAS\n  // =====================================================\n\n  const connect = useCallback(async () => {\n    if (process.env.NODE_ENV === 'development' && simulateInDevelopment) {\n      // En desarrollo usar simulador\n      return\n    }\n\n    try {\n      setConnectionState('connecting')\n      await wsRef.current.connect()\n    } catch (error) {\n      setConnectionState('error')\n      throw error\n    }\n  }, [simulateInDevelopment])\n\n  const disconnect = useCallback(() => {\n    if (process.env.NODE_ENV === 'development' && simulatorRef.current) {\n      simulatorRef.current.stop()\n      setIsConnected(false)\n      setConnectionState('disconnected')\n      return\n    }\n\n    wsRef.current.disconnect()\n    setIsConnected(false)\n    setConnectionState('disconnected')\n  }, [])\n\n  const subscribeToShipment = useCallback((shipmentId: number) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🎭 Simulando suscripción a envío ${shipmentId}`)\n      return\n    }\n\n    wsRef.current.subscribeToShipment(shipmentId)\n  }, [])\n\n  const unsubscribeFromShipment = useCallback((shipmentId: number) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🎭 Simulando desuscripción de envío ${shipmentId}`)\n      return\n    }\n\n    wsRef.current.unsubscribeFromShipment(shipmentId)\n  }, [])\n\n  const subscribeToGeofence = useCallback((zoneId: string) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`🎭 Simulando suscripción a zona ${zoneId}`)\n      return\n    }\n\n    wsRef.current.subscribeToGeofence(zoneId)\n  }, [])\n\n  const subscribeToAlerts = useCallback(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('🎭 Simulando suscripción a alertas')\n      return\n    }\n\n    wsRef.current.subscribeToAlerts()\n  }, [])\n\n  const clearAlerts = useCallback(() => {\n    setAlerts([])\n  }, [])\n\n  return {\n    isConnected,\n    connectionState,\n    connect,\n    disconnect,\n    subscribeToShipment,\n    unsubscribeFromShipment,\n    subscribeToGeofence,\n    subscribeToAlerts,\n    lastTrackingUpdate,\n    lastAlert,\n    lastGeofenceEvent,\n    alerts,\n    clearAlerts,\n  }\n}\n\n// =====================================================\n// HOOK PARA TRACKING ESPECÍFICO\n// =====================================================\n\nexport function useShipmentTracking(shipmentId: number) {\n  const { isConnected, subscribeToShipment, unsubscribeFromShipment, lastTrackingUpdate } =\n    useLogisticsWebSocket({\n      simulateInDevelopment: false, // Deshabilitado para evitar notificaciones persistentes\n    })\n\n  const [trackingHistory, setTrackingHistory] = useState<TrackingUpdate[]>([])\n\n  // Suscribirse al envío específico\n  useEffect(() => {\n    if (isConnected && shipmentId) {\n      subscribeToShipment(shipmentId)\n\n      return () => {\n        unsubscribeFromShipment(shipmentId)\n      }\n    }\n  }, [isConnected, shipmentId, subscribeToShipment, unsubscribeFromShipment])\n\n  // Actualizar historial cuando llegan nuevas actualizaciones\n  useEffect(() => {\n    if (lastTrackingUpdate && lastTrackingUpdate.shipment_id === shipmentId) {\n      setTrackingHistory(prev => [lastTrackingUpdate, ...prev.slice(0, 99)]) // Últimas 100\n    }\n  }, [lastTrackingUpdate, shipmentId])\n\n  return {\n    isConnected,\n    shipmentId,\n    currentLocation: lastTrackingUpdate?.shipment_id === shipmentId ? lastTrackingUpdate : null,\n    trackingHistory: trackingHistory.filter(update => update.shipment_id === shipmentId),\n  }\n}\n\n// =====================================================\n// HOOK PARA ALERTAS\n// =====================================================\n\nexport function useLogisticsAlerts() {\n  const { isConnected, subscribeToAlerts, alerts, clearAlerts, lastAlert } = useLogisticsWebSocket({\n    simulateInDevelopment: false, // Deshabilitado para evitar notificaciones persistentes\n  })\n\n  // Auto-suscribirse a alertas\n  useEffect(() => {\n    if (isConnected) {\n      subscribeToAlerts()\n    }\n  }, [isConnected, subscribeToAlerts])\n\n  // Filtrar alertas por severidad\n  const criticalAlerts = alerts.filter(alert => alert.severity === 'critical')\n  const highAlerts = alerts.filter(alert => alert.severity === 'high')\n  const unreadAlerts = alerts.filter(alert => !alert.auto_resolve)\n\n  return {\n    isConnected,\n    alerts,\n    criticalAlerts,\n    highAlerts,\n    unreadAlerts,\n    lastAlert,\n    clearAlerts,\n    totalAlerts: alerts.length,\n    criticalCount: criticalAlerts.length,\n    highCount: highAlerts.length,\n    unreadCount: unreadAlerts.length,\n  }\n}\n"],"names":["useLogisticsAlerts","useLogisticsWebSocket","useShipmentTracking","options","enabled","autoConnect","showNotifications","simulateInDevelopment","isConnected","setIsConnected","useState","connectionState","setConnectionState","lastTrackingUpdate","setLastTrackingUpdate","lastAlert","setLastAlert","lastGeofenceEvent","setLastGeofenceEvent","alerts","setAlerts","wsRef","useRef","getLogisticsWebSocket","simulatorRef","queryClient","useQueryClient","useEffect","ws","current","handleConnected","toast","success","handleDisconnected","warning","handleError","error","console","handleTrackingUpdate","update","invalidateQueries","queryKey","shipment_id","info","description","status","handleAlert","alert","prev","slice","toastFn","severity","type","message","handleGeofenceEvent","event","zone_name","event_type","on","off","process","env","NODE_ENV","LogisticsWebSocketSimulator","start","stop","connect","useCallback","disconnect","subscribeToShipment","shipmentId","log","unsubscribeFromShipment","subscribeToGeofence","zoneId","subscribeToAlerts","clearAlerts","trackingHistory","setTrackingHistory","currentLocation","filter","criticalAlerts","highAlerts","unreadAlerts","auto_resolve","totalAlerts","length","criticalCount","highCount","unreadCount"],"mappings":"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"}