964f27fd17fb0582f442f2d7d6a7ac9e
// ===================================
// PINTEYA E-COMMERCE - VALIDATION TESTS
// Pruebas específicas para validación de datos en useOrdersEnterprise
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersEnterprise = require("../../hooks/useOrdersEnterprise");
// ===================================
// MOCKS
// ===================================
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
const mockConsoleWarn = _globals.jest.spyOn(console, 'warn').mockImplementation(()=>{});
// Datos de prueba con valores problemáticos
const mockOrdersWithInvalidData = [
    {
        id: 'order-1',
        order_number: 'ORD-001',
        status: 'pending',
        total: undefined,
        created_at: '2024-01-01T10:00:00Z'
    },
    {
        id: 'order-2',
        order_number: 'ORD-002',
        status: 'confirmed',
        total: NaN,
        created_at: '2024-01-02T10:00:00Z'
    },
    {
        id: 'order-3',
        order_number: 'ORD-003',
        status: 'shipped',
        total: 'invalid',
        created_at: '2024-01-03T10:00:00Z'
    },
    {
        id: 'order-4',
        order_number: 'ORD-004',
        status: 'delivered',
        total: 15000,
        created_at: '2024-01-04T10:00:00Z'
    },
    {
        id: 'order-5',
        order_number: 'ORD-005',
        status: 'cancelled',
        total: 25000,
        created_at: '2024-01-05T10:00:00Z'
    }
];
const mockApiResponse = {
    data: {
        orders: mockOrdersWithInvalidData,
        pagination: {
            page: 1,
            limit: 20,
            total: mockOrdersWithInvalidData.length,
            totalPages: 1,
            hasNextPage: false,
            hasPreviousPage: false
        },
        filters: {}
    }
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: async ()=>mockApiResponse
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS DE VALIDACIÓN
// ===================================
(0, _globals.describe)('useOrdersEnterprise - Validación de Datos', ()=>{
    (0, _globals.it)('debe manejar valores undefined en total sin retornar NaN', async ()=>{
        // Arrange
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterprise.useOrdersEnterprise)());
        // Wait for initial fetch
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.loading).toBe(false);
        });
        // Act
        const totalRevenue = result.current.getTotalRevenue();
        const avgOrderValue = result.current.getAverageOrderValue();
        // Assert
        (0, _globals.expect)(totalRevenue).not.toBeNaN();
        (0, _globals.expect)(avgOrderValue).not.toBeNaN();
        (0, _globals.expect)(typeof totalRevenue).toBe('number');
        (0, _globals.expect)(typeof avgOrderValue).toBe('number');
        // Solo debe contar la orden válida (order-4: 15000)
        (0, _globals.expect)(totalRevenue).toBe(15000);
        (0, _globals.expect)(avgOrderValue).toBe(15000);
        // Debe mostrar warnings para valores inválidos
        (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith('[useOrdersEnterprise] Invalid order total detected:', undefined);
        (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith('[useOrdersEnterprise] Invalid order total detected:', NaN);
        (0, _globals.expect)(mockConsoleWarn).toHaveBeenCalledWith('[useOrdersEnterprise] Invalid order total detected:', 'invalid');
    });
    (0, _globals.it)('debe excluir órdenes canceladas del cálculo', async ()=>{
        // Arrange
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterprise.useOrdersEnterprise)());
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.loading).toBe(false);
        });
        // Act
        const totalRevenue = result.current.getTotalRevenue();
        const avgOrderValue = result.current.getAverageOrderValue();
        // Assert
        // No debe incluir la orden cancelada (order-5: 25000)
        (0, _globals.expect)(totalRevenue).toBe(15000); // Solo order-4
        (0, _globals.expect)(avgOrderValue).toBe(15000); // Solo order-4
    });
    (0, _globals.it)('debe retornar 0 cuando no hay órdenes válidas', async ()=>{
        // Arrange - Mock con solo órdenes inválidas
        const invalidOrdersOnly = mockOrdersWithInvalidData.filter((order)=>order.status === 'cancelled' || order.total === undefined || isNaN(order.total) || typeof order.total === 'string');
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            json: async ()=>({
                    data: {
                        orders: invalidOrdersOnly,
                        pagination: {
                            page: 1,
                            limit: 20,
                            total: invalidOrdersOnly.length,
                            totalPages: 1
                        },
                        filters: {}
                    }
                })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterprise.useOrdersEnterprise)());
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.loading).toBe(false);
        });
        // Act
        const totalRevenue = result.current.getTotalRevenue();
        const avgOrderValue = result.current.getAverageOrderValue();
        // Assert
        (0, _globals.expect)(totalRevenue).toBe(0);
        (0, _globals.expect)(avgOrderValue).toBe(0);
        (0, _globals.expect)(totalRevenue).not.toBeNaN();
        (0, _globals.expect)(avgOrderValue).not.toBeNaN();
    });
    (0, _globals.it)('debe redondear correctamente el valor promedio', async ()=>{
        // Arrange - Mock con valores que requieren redondeo
        const ordersWithDecimals = [
            {
                id: 'order-1',
                status: 'delivered',
                total: 33.33,
                created_at: '2024-01-01T10:00:00Z'
            },
            {
                id: 'order-2',
                status: 'delivered',
                total: 33.33,
                created_at: '2024-01-02T10:00:00Z'
            },
            {
                id: 'order-3',
                status: 'delivered',
                total: 33.34,
                created_at: '2024-01-03T10:00:00Z'
            }
        ];
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            json: async ()=>({
                    data: {
                        orders: ordersWithDecimals,
                        pagination: {
                            page: 1,
                            limit: 20,
                            total: ordersWithDecimals.length,
                            totalPages: 1
                        },
                        filters: {}
                    }
                })
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterprise.useOrdersEnterprise)());
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.loading).toBe(false);
        });
        // Act
        const avgOrderValue = result.current.getAverageOrderValue();
        // Assert
        // (33.33 + 33.33 + 33.34) / 3 = 33.333... -> redondeado a 33.33
        (0, _globals.expect)(avgOrderValue).toBe(33.33);
        (0, _globals.expect)(avgOrderValue).not.toBeNaN();
    });
});

//# sourceMappingURL=data:application/json;base64,