{"version":3,"names":["TestRunner","constructor","config","cov_2f9c2hg43v","b","f","s","baseUrl","outputDir","_path","default","join","process","cwd","screenshotsDir","browserType","headless","timeout","retries","parallel","runAllTests","console","log","repeat","results","totalTests","passedTests","failedTests","skippedTests","startTime","Date","endTime","duration","testResults","reportPaths","ensureDirectories","tests","name","description","testClass","_samplee2etest","SampleE2ETest","priority","length","testConfig","testResult","runSingleTest","push","success","reportPath","getTime","generateConsolidatedReport","displayFinalSummary","error","htmlReportPath","testInstance","result","runTest","err","Error","message","String","directories","dir","_promises","access","mkdir","recursive","reportData","summary","successRate","toISOString","configuration","map","test","metadata","generatedAt","framework","version","environment","env","NODE_ENV","consolidatedReportPath","replace","writeFile","JSON","stringify","toFixed","durationMinutes","Math","floor","durationSeconds","forEach","index","runWithConfig","runner","runSpecificTest","testName","toLowerCase","run","exit","require","main","module","args","argv","slice","command","TEST_BASE_URL","TEST_HEADLESS","TEST_BROWSER","undefined","then","catch"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\test-runner.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { SampleE2ETest } from './sample-e2e-test';\r\nimport { AutomatedTestFramework } from './automated-test-framework';\r\nimport { ScreenshotManager } from './screenshot-manager';\r\nimport { ReportGenerator } from './report-generator';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\n/**\r\n * Runner principal para ejecutar tests automatizados\r\n */\r\nexport class TestRunner {\r\n  private config: TestRunnerConfig;\r\n\r\n  constructor(config: Partial<TestRunnerConfig> = {}) {\r\n    this.config = {\r\n      baseUrl: 'http://localhost:3000',\r\n      outputDir: path.join(process.cwd(), 'test-reports'),\r\n      screenshotsDir: path.join(process.cwd(), 'test-screenshots'),\r\n      browserType: 'chromium',\r\n      headless: false,\r\n      timeout: 30000,\r\n      retries: 1,\r\n      parallel: false,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los tests disponibles\r\n   */\r\n  async runAllTests(): Promise<TestRunResults> {\r\n    console.log('üöÄ Iniciando ejecuci√≥n de tests automatizados');\r\n    console.log(`üìç URL Base: ${this.config.baseUrl}`);\r\n    console.log(`üìÅ Directorio de reportes: ${this.config.outputDir}`);\r\n    console.log(`üì∏ Directorio de screenshots: ${this.config.screenshotsDir}`);\r\n    console.log('\\n' + '='.repeat(60));\r\n\r\n    const results: TestRunResults = {\r\n      totalTests: 0,\r\n      passedTests: 0,\r\n      failedTests: 0,\r\n      skippedTests: 0,\r\n      startTime: new Date(),\r\n      endTime: new Date(),\r\n      duration: 0,\r\n      testResults: [],\r\n      reportPaths: []\r\n    };\r\n\r\n    try {\r\n      // Crear directorios necesarios\r\n      await this.ensureDirectories();\r\n\r\n      // Lista de tests a ejecutar\r\n      const tests = [\r\n        {\r\n          name: 'E2E Purchase Flow Test',\r\n          description: 'Test completo del flujo de compra',\r\n          testClass: SampleE2ETest,\r\n          priority: 'high'\r\n        }\r\n        // Aqu√≠ se pueden agregar m√°s tests en el futuro\r\n      ];\r\n\r\n      results.totalTests = tests.length;\r\n\r\n      // Ejecutar cada test\r\n      for (const testConfig of tests) {\r\n        console.log(`\\nüß™ Ejecutando: ${testConfig.name}`);\r\n        console.log(`üìù Descripci√≥n: ${testConfig.description}`);\r\n        console.log(`‚ö° Prioridad: ${testConfig.priority}`);\r\n        console.log('-'.repeat(40));\r\n\r\n        const testResult = await this.runSingleTest(testConfig);\r\n        results.testResults.push(testResult);\r\n\r\n        if (testResult.success) {\r\n          results.passedTests++;\r\n          console.log(`‚úÖ ${testConfig.name} - EXITOSO`);\r\n        } else {\r\n          results.failedTests++;\r\n          console.log(`‚ùå ${testConfig.name} - FALLIDO`);\r\n        }\r\n\r\n        if (testResult.reportPath) {\r\n          results.reportPaths.push(testResult.reportPath);\r\n        }\r\n      }\r\n\r\n      results.endTime = new Date();\r\n      results.duration = results.endTime.getTime() - results.startTime.getTime();\r\n\r\n      // Generar reporte consolidado\r\n      await this.generateConsolidatedReport(results);\r\n\r\n      // Mostrar resumen final\r\n      this.displayFinalSummary(results);\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      console.error('üí• Error cr√≠tico durante la ejecuci√≥n de tests:', error);\r\n      results.endTime = new Date();\r\n      results.duration = results.endTime.getTime() - results.startTime.getTime();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test individual\r\n   */\r\n  private async runSingleTest(testConfig: TestConfig): Promise<TestResult> {\r\n    const startTime = new Date();\r\n    let success = false;\r\n    let error: string | null = null;\r\n    let reportPath: string | null = null;\r\n    let htmlReportPath: string | null = null;\r\n\r\n    try {\r\n      // Crear instancia del test\r\n      const testInstance = new testConfig.testClass(this.config.baseUrl);\r\n      \r\n      // Ejecutar el test\r\n      const result = await testInstance.runTest();\r\n      \r\n      success = result.success;\r\n      reportPath = result.reportPath;\r\n      htmlReportPath = result.htmlReportPath;\r\n\r\n    } catch (err) {\r\n      success = false;\r\n      error = err instanceof Error ? err.message : String(err);\r\n      console.error(`‚ùå Error en ${testConfig.name}:`, error);\r\n    }\r\n\r\n    const endTime = new Date();\r\n    const duration = endTime.getTime() - startTime.getTime();\r\n\r\n    return {\r\n      name: testConfig.name,\r\n      description: testConfig.description,\r\n      success,\r\n      error,\r\n      startTime,\r\n      endTime,\r\n      duration,\r\n      reportPath,\r\n      htmlReportPath\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Asegura que los directorios necesarios existan\r\n   */\r\n  private async ensureDirectories(): Promise<void> {\r\n    const directories = [\r\n      this.config.outputDir,\r\n      this.config.screenshotsDir\r\n    ];\r\n\r\n    for (const dir of directories) {\r\n      try {\r\n        await fs.access(dir);\r\n      } catch {\r\n        await fs.mkdir(dir, { recursive: true });\r\n        console.log(`üìÅ Directorio creado: ${dir}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera un reporte consolidado de todos los tests\r\n   */\r\n  private async generateConsolidatedReport(results: TestRunResults): Promise<void> {\r\n    const reportData = {\r\n      summary: {\r\n        totalTests: results.totalTests,\r\n        passedTests: results.passedTests,\r\n        failedTests: results.failedTests,\r\n        skippedTests: results.skippedTests,\r\n        successRate: results.totalTests > 0 ? (results.passedTests / results.totalTests) * 100 : 0,\r\n        startTime: results.startTime.toISOString(),\r\n        endTime: results.endTime.toISOString(),\r\n        duration: results.duration\r\n      },\r\n      configuration: {\r\n        baseUrl: this.config.baseUrl,\r\n        browserType: this.config.browserType,\r\n        headless: this.config.headless,\r\n        timeout: this.config.timeout\r\n      },\r\n      testResults: results.testResults.map(test => ({\r\n        name: test.name,\r\n        description: test.description,\r\n        success: test.success,\r\n        error: test.error,\r\n        duration: test.duration,\r\n        startTime: test.startTime.toISOString(),\r\n        endTime: test.endTime.toISOString(),\r\n        reportPath: test.reportPath,\r\n        htmlReportPath: test.htmlReportPath\r\n      })),\r\n      metadata: {\r\n        generatedAt: new Date().toISOString(),\r\n        framework: 'AutomatedTestFramework',\r\n        version: '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development'\r\n      }\r\n    };\r\n\r\n    // Guardar reporte JSON consolidado\r\n    const consolidatedReportPath = path.join(\r\n      this.config.outputDir,\r\n      `consolidated-test-report-${new Date().toISOString().replace(/[:.]/g, '-')}.json`\r\n    );\r\n\r\n    await fs.writeFile(\r\n      consolidatedReportPath,\r\n      JSON.stringify(reportData, null, 2),\r\n      'utf-8'\r\n    );\r\n\r\n    console.log(`\\nüìä Reporte consolidado generado: ${consolidatedReportPath}`);\r\n    results.reportPaths.push(consolidatedReportPath);\r\n  }\r\n\r\n  /**\r\n   * Muestra el resumen final de la ejecuci√≥n\r\n   */\r\n  private displayFinalSummary(results: TestRunResults): void {\r\n    console.log('\\n' + '='.repeat(60));\r\n    console.log('üìä RESUMEN FINAL DE TESTS');\r\n    console.log('='.repeat(60));\r\n    console.log(`üìà Total de tests: ${results.totalTests}`);\r\n    console.log(`‚úÖ Tests exitosos: ${results.passedTests}`);\r\n    console.log(`‚ùå Tests fallidos: ${results.failedTests}`);\r\n    console.log(`‚è≠Ô∏è  Tests omitidos: ${results.skippedTests}`);\r\n    \r\n    const successRate = results.totalTests > 0 ? (results.passedTests / results.totalTests) * 100 : 0;\r\n    console.log(`üìä Tasa de √©xito: ${successRate.toFixed(1)}%`);\r\n    \r\n    const durationMinutes = Math.floor(results.duration / 60000);\r\n    const durationSeconds = Math.floor((results.duration % 60000) / 1000);\r\n    console.log(`‚è±Ô∏è  Duraci√≥n total: ${durationMinutes}m ${durationSeconds}s`);\r\n    \r\n    console.log('\\nüìÅ Reportes generados:');\r\n    results.reportPaths.forEach((reportPath, index) => {\r\n      console.log(`   ${index + 1}. ${reportPath}`);\r\n    });\r\n    \r\n    console.log('='.repeat(60));\r\n    \r\n    if (results.failedTests === 0) {\r\n      console.log('üéâ ¬°Todos los tests se ejecutaron exitosamente!');\r\n    } else {\r\n      console.log(`‚ö†Ô∏è  ${results.failedTests} test(s) fallaron. Revisa los reportes para m√°s detalles.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta tests con configuraci√≥n personalizada\r\n   */\r\n  static async runWithConfig(config: Partial<TestRunnerConfig>): Promise<TestRunResults> {\r\n    const runner = new TestRunner(config);\r\n    return await runner.runAllTests();\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test espec√≠fico por nombre\r\n   */\r\n  static async runSpecificTest(testName: string, config: Partial<TestRunnerConfig> = {}): Promise<void> {\r\n    console.log(`üéØ Ejecutando test espec√≠fico: ${testName}`);\r\n    \r\n    switch (testName.toLowerCase()) {\r\n      case 'e2e':\r\n      case 'purchase':\r\n      case 'sample':\r\n        await SampleE2ETest.run(config.baseUrl);\r\n        break;\r\n      default:\r\n        console.error(`‚ùå Test no encontrado: ${testName}`);\r\n        console.log('Tests disponibles: e2e, purchase, sample');\r\n        process.exit(1);\r\n    }\r\n  }\r\n}\r\n\r\n// Interfaces\r\ninterface TestRunnerConfig {\r\n  baseUrl: string;\r\n  outputDir: string;\r\n  screenshotsDir: string;\r\n  browserType: 'chromium' | 'firefox' | 'webkit';\r\n  headless: boolean;\r\n  timeout: number;\r\n  retries: number;\r\n  parallel: boolean;\r\n}\r\n\r\ninterface TestResult {\r\n  name: string;\r\n  description: string;\r\n  success: boolean;\r\n  error: string | null;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  duration: number;\r\n  reportPath: string | null;\r\n  htmlReportPath?: string | null;\r\n}\r\n\r\ninterface TestRunResults {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  duration: number;\r\n  testResults: TestResult[];\r\n  reportPaths: string[];\r\n}\r\n\r\n// Interface para configuraci√≥n de tests\r\ninterface TestConfig {\r\n  name: string;\r\n  description: string;\r\n  testClass: new (baseUrl: string) => TestInstance;\r\n  enabled: boolean;\r\n}\r\n\r\n// Interface para instancia de test\r\ninterface TestInstance {\r\n  runTest(): Promise<{\r\n    success: boolean;\r\n    reportPath: string | null;\r\n    htmlReportPath?: string | null;\r\n  }>;\r\n}\r\n\r\n// CLI Support\r\nif (require.main === module) {\r\n  const args = process.argv.slice(2);\r\n  const command = args[0];\r\n  \r\n  const config: Partial<TestRunnerConfig> = {\r\n    baseUrl: process.env.TEST_BASE_URL || 'http://localhost:3000',\r\n    headless: process.env.TEST_HEADLESS === 'true',\r\n    browserType: (process.env.TEST_BROWSER as any) || 'chromium'\r\n  };\r\n\r\n  switch (command) {\r\n    case 'all':\r\n    case undefined:\r\n      console.log('üöÄ Ejecutando todos los tests...');\r\n      TestRunner.runWithConfig(config)\r\n        .then(results => {\r\n          process.exit(results.failedTests > 0 ? 1 : 0);\r\n        })\r\n        .catch(error => {\r\n          console.error('üí• Error ejecutando tests:', error);\r\n          process.exit(1);\r\n        });\r\n      break;\r\n      \r\n    case 'e2e':\r\n    case 'sample':\r\n    case 'purchase':\r\n      TestRunner.runSpecificTest(command, config)\r\n        .then(() => {\r\n          console.log('‚úÖ Test espec√≠fico completado');\r\n          process.exit(0);\r\n        })\r\n        .catch(error => {\r\n          console.error('üí• Error ejecutando test espec√≠fico:', error);\r\n          process.exit(1);\r\n        });\r\n      break;\r\n      \r\n    case 'help':\r\n    case '--help':\r\n    case '-h':\r\n      console.log(`\r\nüß™ Test Runner - Automated Testing Framework\r\n\r\nUso:\r\n  npm run test:e2e [comando] [opciones]\r\n\r\nComandos:\r\n  all, (vac√≠o)    Ejecutar todos los tests\r\n  e2e             Ejecutar test E2E espec√≠fico\r\n  sample          Ejecutar test de ejemplo\r\n  purchase        Ejecutar test de flujo de compra\r\n  help            Mostrar esta ayuda\r\n\r\nVariables de entorno:\r\n  TEST_BASE_URL   URL base para los tests (default: http://localhost:3000)\r\n  TEST_HEADLESS   Ejecutar en modo headless (default: false)\r\n  TEST_BROWSER    Navegador a usar: chromium, firefox, webkit (default: chromium)\r\n\r\nEjemplos:\r\n  npm run test:e2e\r\n  npm run test:e2e e2e\r\n  TEST_HEADLESS=true npm run test:e2e all\r\n  TEST_BASE_URL=http://localhost:4000 npm run test:e2e sample\r\n`);\r\n      break;\r\n      \r\n    default:\r\n      console.error(`‚ùå Comando desconocido: ${command}`);\r\n      console.log('Usa \"npm run test:e2e help\" para ver los comandos disponibles.');\r\n      process.exit(1);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}