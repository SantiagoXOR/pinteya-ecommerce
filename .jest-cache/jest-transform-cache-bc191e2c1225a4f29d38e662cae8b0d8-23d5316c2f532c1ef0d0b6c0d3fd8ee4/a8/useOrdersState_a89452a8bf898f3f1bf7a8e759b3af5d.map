{"version":3,"names":["cov_ztoiplvpi","actualCoverage","s","useOrdersState","DEFAULT_FILTERS","page","limit","sort_by","sort_order","status","payment_status","fulfillment_status","DEFAULT_STATE","orders","pagination","analytics","isLoading","error","lastUpdated","initialFilters","b","f","state","setState","_react","useState","filters","lastFiltersRef","useRef","updateFilters","useCallback","newFilters","prev","updatedFilters","current","Object","keys","some","key","setLoading","loading","setError","setOrders","Date","setPagination","setAnalytics","resetState","updateOrder","orderId","updates","map","order","id","getLastFilters","hasFiltersChanged","currentFiltersString","JSON","stringify","newFiltersString"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useOrdersState.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ORDERS STATE HOOK\r\n// Hook especializado para manejo de estado de Ã³rdenes\r\n// ===================================\r\n\r\nimport { useState, useCallback, useRef } from 'react';\r\nimport { StrictOrderEnterprise, StrictPagination } from '@/types/api-strict';\r\nimport { StrictOrderFilters } from './useOrdersEnterpriseStrict';\r\n\r\n// ===================================\r\n// TIPOS DE ESTADO\r\n// ===================================\r\n\r\nexport interface StrictOrdersState {\r\n  readonly orders: StrictOrderEnterprise[];\r\n  readonly pagination: StrictPagination | null;\r\n  readonly analytics: {\r\n    readonly total_orders: number;\r\n    readonly total_revenue: number;\r\n    readonly pending_orders: number;\r\n    readonly completed_orders: number;\r\n  } | null;\r\n  readonly filters: StrictOrderFilters;\r\n  readonly isLoading: boolean;\r\n  readonly error: string | null;\r\n  readonly lastUpdated: Date | null;\r\n}\r\n\r\nexport interface StrictOrdersActions {\r\n  readonly updateFilters: (newFilters: Partial<StrictOrderFilters>) => void;\r\n  readonly setLoading: (loading: boolean) => void;\r\n  readonly setError: (error: string | null) => void;\r\n  readonly setOrders: (orders: StrictOrderEnterprise[]) => void;\r\n  readonly setPagination: (pagination: StrictPagination | null) => void;\r\n  readonly setAnalytics: (analytics: StrictOrdersState['analytics']) => void;\r\n  readonly resetState: () => void;\r\n  readonly updateOrder: (orderId: string, updates: Partial<StrictOrderEnterprise>) => void;\r\n}\r\n\r\n// ===================================\r\n// ESTADO POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_FILTERS: StrictOrderFilters = {\r\n  page: 1,\r\n  limit: 20,\r\n  sort_by: 'created_at',\r\n  sort_order: 'desc',\r\n  status: 'all',\r\n  payment_status: 'all',\r\n  fulfillment_status: 'all'\r\n};\r\n\r\nconst DEFAULT_STATE: Omit<StrictOrdersState, 'filters'> = {\r\n  orders: [],\r\n  pagination: null,\r\n  analytics: null,\r\n  isLoading: false,\r\n  error: null,\r\n  lastUpdated: null\r\n};\r\n\r\n// ===================================\r\n// HOOK DE ESTADO\r\n// ===================================\r\n\r\nexport interface UseOrdersStateReturn extends StrictOrdersState, StrictOrdersActions {\r\n  readonly getLastFilters: () => StrictOrderFilters;\r\n  readonly hasFiltersChanged: (newFilters: StrictOrderFilters) => boolean;\r\n}\r\n\r\nexport function useOrdersState(\r\n  initialFilters: Partial<StrictOrderFilters> = {}\r\n): UseOrdersStateReturn {\r\n  \r\n  // Estado principal\r\n  const [state, setState] = useState<StrictOrdersState>({\r\n    ...DEFAULT_STATE,\r\n    filters: { ...DEFAULT_FILTERS, ...initialFilters }\r\n  });\r\n  \r\n  // Referencias para comparaciones\r\n  const lastFiltersRef = useRef<StrictOrderFilters>(state.filters);\r\n  \r\n  // ===================================\r\n  // ACCIONES DE ESTADO\r\n  // ===================================\r\n  \r\n  const updateFilters = useCallback((newFilters: Partial<StrictOrderFilters>): void => {\r\n    setState(prev => {\r\n      const updatedFilters = { ...prev.filters, ...newFilters };\r\n      lastFiltersRef.current = updatedFilters;\r\n      \r\n      return {\r\n        ...prev,\r\n        filters: updatedFilters,\r\n        // Reset pagination cuando cambian filtros (excepto page)\r\n        ...(Object.keys(newFilters).some(key => key !== 'page') && {\r\n          pagination: prev.pagination ? { ...prev.pagination, page: 1 } : null\r\n        })\r\n      };\r\n    });\r\n  }, []);\r\n  \r\n  const setLoading = useCallback((loading: boolean): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isLoading: loading,\r\n      // Limpiar error cuando empieza nueva carga\r\n      ...(loading && { error: null })\r\n    }));\r\n  }, []);\r\n  \r\n  const setError = useCallback((error: string | null): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      error,\r\n      isLoading: false\r\n    }));\r\n  }, []);\r\n  \r\n  const setOrders = useCallback((orders: StrictOrderEnterprise[]): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      orders,\r\n      lastUpdated: new Date(),\r\n      isLoading: false,\r\n      error: null\r\n    }));\r\n  }, []);\r\n  \r\n  const setPagination = useCallback((pagination: StrictPagination | null): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      pagination\r\n    }));\r\n  }, []);\r\n  \r\n  const setAnalytics = useCallback((analytics: StrictOrdersState['analytics']): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      analytics\r\n    }));\r\n  }, []);\r\n  \r\n  const resetState = useCallback((): void => {\r\n    setState({\r\n      ...DEFAULT_STATE,\r\n      filters: { ...DEFAULT_FILTERS }\r\n    });\r\n    lastFiltersRef.current = { ...DEFAULT_FILTERS };\r\n  }, []);\r\n  \r\n  const updateOrder = useCallback((orderId: string, updates: Partial<StrictOrderEnterprise>): void => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      orders: prev.orders.map(order => \r\n        order.id === orderId \r\n          ? { ...order, ...updates }\r\n          : order\r\n      ),\r\n      lastUpdated: new Date()\r\n    }));\r\n  }, []);\r\n  \r\n  // ===================================\r\n  // UTILIDADES\r\n  // ===================================\r\n  \r\n  const getLastFilters = useCallback((): StrictOrderFilters => {\r\n    return lastFiltersRef.current;\r\n  }, []);\r\n  \r\n  const hasFiltersChanged = useCallback((newFilters: StrictOrderFilters): boolean => {\r\n    const currentFiltersString = JSON.stringify(state.filters);\r\n    const newFiltersString = JSON.stringify(newFilters);\r\n    return currentFiltersString !== newFiltersString;\r\n  }, [state.filters]);\r\n  \r\n  // ===================================\r\n  // RETORNO DEL HOOK\r\n  // ===================================\r\n  \r\n  return {\r\n    // Estado\r\n    orders: state.orders,\r\n    pagination: state.pagination,\r\n    analytics: state.analytics,\r\n    filters: state.filters,\r\n    isLoading: state.isLoading,\r\n    error: state.error,\r\n    lastUpdated: state.lastUpdated,\r\n    \r\n    // Acciones\r\n    updateFilters,\r\n    setLoading,\r\n    setError,\r\n    setOrders,\r\n    setPagination,\r\n    setAnalytics,\r\n    resetState,\r\n    updateOrder,\r\n    \r\n    // Utilidades\r\n    getLastFilters,\r\n    hasFiltersChanged\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}