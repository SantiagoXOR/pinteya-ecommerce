53f1fa939e022dfcce6f30645fb9e400
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _config = require("../../../../lib/auth/config");
const _server1 = require("../../../../lib/integrations/supabase/server");
const runtime = 'nodejs';
async function POST(request) {
    try {
        // Verificar autenticación
        const session = await (0, _config.auth)();
        if (!session?.user?.email) {
            return _server.NextResponse.json({
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        const body = await request.json();
        const { location, speed, heading, accuracy } = body;
        // Validar datos de ubicación
        if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {
            return _server.NextResponse.json({
                error: 'Datos de ubicación inválidos'
            }, {
                status: 400
            });
        }
        const supabase = await (0, _server1.createClient)();
        // Obtener información del driver
        const { data: driver, error: driverError } = await supabase.from('drivers').select('id, status').eq('email', session.user.email).single();
        if (driverError || !driver) {
            return _server.NextResponse.json({
                error: 'Driver no encontrado'
            }, {
                status: 404
            });
        }
        // Preparar datos de ubicación
        const locationData = {
            lat: location.lat,
            lng: location.lng,
            timestamp: new Date().toISOString(),
            speed: speed || 0,
            heading: heading || 0,
            accuracy: accuracy || 0
        };
        // Actualizar ubicación del driver
        const { data: updatedDriver, error: updateError } = await supabase.from('drivers').update({
            current_location: locationData,
            updated_at: new Date().toISOString()
        }).eq('id', driver.id).select().single();
        if (updateError) {
            console.error('Error updating driver location:', updateError);
            return _server.NextResponse.json({
                error: 'Error actualizando ubicación'
            }, {
                status: 500
            });
        }
        // Opcional: Guardar historial de ubicaciones para tracking
        try {
            await supabase.from('driver_location_history').insert({
                driver_id: driver.id,
                location: locationData,
                created_at: new Date().toISOString()
            });
        } catch (historyError) {
            // No fallar si no se puede guardar el historial
            console.warn('Could not save location history:', historyError);
        }
        // Si el driver está en una ruta activa, verificar proximidad a destinos
        if (driver.status === 'busy') {
            await checkProximityToDestinations(driver.id, location);
        }
        return _server.NextResponse.json({
            success: true,
            location: locationData,
            driver: {
                id: updatedDriver.id,
                status: updatedDriver.status,
                current_location: updatedDriver.current_location
            }
        });
    } catch (error) {
        console.error('Error in driver location API:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function GET(request) {
    try {
        // Verificar autenticación
        const session = await (0, _config.auth)();
        if (!session?.user?.email) {
            return _server.NextResponse.json({
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        const supabase = await (0, _server1.createClient)();
        // Obtener ubicación actual del driver
        const { data: driver, error: driverError } = await supabase.from('drivers').select('id, current_location, status, updated_at').eq('email', session.user.email).single();
        if (driverError || !driver) {
            return _server.NextResponse.json({
                error: 'Driver no encontrado'
            }, {
                status: 404
            });
        }
        return _server.NextResponse.json({
            location: driver.current_location,
            status: driver.status,
            last_updated: driver.updated_at
        });
    } catch (error) {
        console.error('Error getting driver location:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
/**
 * Función helper para verificar proximidad a destinos de entrega
 */ async function checkProximityToDestinations(driverId, currentLocation) {
    try {
        const supabase = await (0, _server1.createClient)();
        // Obtener rutas activas del driver
        const { data: activeRoutes, error } = await supabase.from('optimized_routes').select('*').eq('driver_id', driverId).eq('status', 'active');
        if (error || !activeRoutes?.length) return;
        // Verificar proximidad a cada destino
        for (const route of activeRoutes){
            if (!route.shipments) continue;
            for(let i = 0; i < route.shipments.length; i++){
                const shipment = route.shipments[i];
                if (shipment.status === 'delivered') continue;
                const destination = shipment.destination?.coordinates;
                if (!destination) continue;
                const distance = calculateDistance(currentLocation, destination);
                // Si está a menos de 100 metros del destino
                if (distance < 100) {
                    // Opcional: Enviar notificación o actualizar estado
                    console.log(`Driver ${driverId} is near delivery destination: ${shipment.customer_name}`);
                // Aquí se podría implementar:
                // - Notificación push al cliente
                // - Actualización automática de estado
                // - Alerta al dashboard administrativo
                }
            }
        }
    } catch (error) {
        console.error('Error checking proximity:', error);
    }
}
/**
 * Calcular distancia entre dos puntos en metros
 */ function calculateDistance(point1, point2) {
    const R = 6371000 // Radio de la Tierra en metros
    ;
    const dLat = (point2.lat - point1.lat) * Math.PI / 180;
    const dLon = (point2.lng - point1.lng) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

//# sourceMappingURL=data:application/json;base64,