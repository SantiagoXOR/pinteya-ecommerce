{"version":3,"names":["cov_1roxieln8c","actualCoverage","s","GET","f","POST","runtime","request","securityLogger","_securitylogger","createSecurityLogger","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","products","searchParams","URL","url","queryParams","category","b","get","undefined","categories","split","filter","Boolean","brand","brands","paintType","paintTypes","priceMin","Number","priceMax","search","page","limit","sortBy","sortOrder","validationResult","_validations","safeValidateData","ProductFiltersSchema","success","log","type","severity","message","context","metadata","validationError","error","errorResponse","data","_server","NextResponse","json","status","filters","hasSearch","hasFilters","supabase","_supabase","getSupabaseClient","logApiError","Error","service","result","_apitimeouts","withDatabaseTimeout","signal","query","from","select","count","categoryData","eq","single","id","length","categoriesData","in","categoryIds","map","cat","gte","lte","or","hasDiscount","not","lt","orderColumn","order","ascending","to","range","API_TIMEOUTS","database","supabaseError","operation","totalPages","Math","ceil","productsCount","totalCount","response","pagination","total","headers","stage","logRateLimitExceeded","endpoint","method","creation","requireAdminAuth","Promise","resolve","then","_interop_require_wildcard","require","authResult","logPermissionDenied","code","enterprise","timestamp","Date","toISOString","userId","body","logAdminAction","productName","name","category_id","productData","validateData","ProductSchema","slug","toLowerCase","replace","insert","admin","product","images","handleSupabaseError","productId"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\route.ts"],"sourcesContent":["\r\n// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PRODUCTOS\r\n// ===================================\r\n// API optimizada con rate limiting, timeouts centralizados y logging estructurado\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { validateData, safeValidateData, ProductFiltersSchema, ProductSchema } from '@/lib/validations';\r\nimport { ApiResponse, PaginatedResponse, ProductWithCategory } from '@/types/api';\r\nimport {\r\n  executeWithRLS,\r\n  withRLS,\r\n  createRLSFilters\r\n} from '@/lib/auth/enterprise-rls-utils';\r\n\r\n// ===================================\r\n// NUEVAS IMPORTACIONES - MEJORAS DE ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET /api/products - Obtener productos con filtros\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.products,\r\n    async () => {\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      category: searchParams.get('category') || undefined,\r\n      categories: searchParams.get('categories')?.split(',').filter(Boolean) || undefined,\r\n      brand: searchParams.get('brand') || undefined,\r\n      brands: searchParams.get('brands')?.split(',').filter(Boolean) || undefined,\r\n      paintType: searchParams.get('paintType') || undefined,\r\n      paintTypes: searchParams.get('paintTypes')?.split(',').filter(Boolean) || undefined,\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || undefined,\r\n      page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,\r\n      limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,\r\n      sortBy: searchParams.get('sortBy') as 'price' | 'name' | 'created_at' | 'brand' || 'created_at',\r\n      sortOrder: searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc',\r\n    };\r\n\r\n        // Validar parámetros de manera segura\r\n        const validationResult = safeValidateData(ProductFiltersSchema, queryParams);\r\n\r\n        if (!validationResult.success) {\r\n          // Log de error de validación con contexto de seguridad\r\n          securityLogger.log({\r\n            type: 'validation_error',\r\n            severity: 'medium',\r\n            message: 'Invalid parameters in products API',\r\n            context: securityLogger.context,\r\n            metadata: {\r\n              validationError: validationResult.error,\r\n              queryParams,\r\n            },\r\n          });\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: `Parámetros inválidos: ${validationResult.error}`,\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n\r\n        const filters = validationResult.data!;\r\n\r\n        // Log de acceso a datos con contexto\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Products API accessed',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            filters: filters,\r\n            hasSearch: !!filters.search,\r\n            hasFilters: !!(filters.category || filters.brand || filters.paintType),\r\n          },\r\n        });\r\n\r\n        const supabase = getSupabaseClient();\r\n\r\n        // Verificar que el cliente de Supabase esté disponible\r\n        if (!supabase) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error('Supabase client not available'),\r\n            { service: 'supabase' }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Servicio de base de datos no disponible',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 503 });\r\n        }\r\n\r\n        // Construir query base optimizada (solo campos necesarios)\r\n        // Usar timeout centralizado para operaciones de base de datos\r\n        const result = await withDatabaseTimeout(async (signal) => {\r\n          let query = supabase\r\n            .from('products')\r\n            .select(`\r\n              id, name, slug, price, discounted_price, brand, stock, images,\r\n              category:categories(id, name, slug)\r\n            `, { count: 'exact' });\r\n\r\n          // Aplicar filtros\r\n          if (filters.category) {\r\n            // Primero obtener el ID de la categoría por su slug\r\n            const { data: categoryData } = await supabase\r\n              .from('categories')\r\n              .select('id')\r\n              .eq('slug', filters.category)\r\n              .single();\r\n\r\n            if (categoryData) {\r\n              query = query.eq('category_id', categoryData.id);\r\n            }\r\n          }\r\n\r\n          // Filtro por múltiples categorías (nuevo)\r\n          if (filters.categories && filters.categories.length > 0) {\r\n            const { data: categoriesData } = await supabase\r\n              .from('categories')\r\n              .select('id')\r\n              .in('slug', filters.categories);\r\n\r\n            if (categoriesData && categoriesData.length > 0) {\r\n              const categoryIds = categoriesData.map(cat => cat.id);\r\n              query = query.in('category_id', categoryIds);\r\n            }\r\n          }\r\n\r\n          if (filters.brand) {\r\n            query = query.eq('brand', filters.brand);\r\n          }\r\n\r\n          // Filtro por múltiples marcas (nuevo)\r\n          if (filters.brands && filters.brands.length > 0) {\r\n            query = query.in('brand', filters.brands);\r\n          }\r\n\r\n          // Filtro por tipo de pintura (nuevo)\r\n          if (filters.paintType) {\r\n            query = query.eq('paint_type', filters.paintType);\r\n          }\r\n\r\n          // Filtro por múltiples tipos de pintura (nuevo)\r\n          if (filters.paintTypes && filters.paintTypes.length > 0) {\r\n            query = query.in('paint_type', filters.paintTypes);\r\n          }\r\n\r\n          if (filters.priceMin) {\r\n            query = query.gte('price', filters.priceMin);\r\n          }\r\n\r\n          if (filters.priceMax) {\r\n            query = query.lte('price', filters.priceMax);\r\n          }\r\n\r\n          if (filters.search) {\r\n            query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);\r\n          }\r\n\r\n          // Filtro por productos con descuento real (discounted_price < price)\r\n          if (filters.hasDiscount) {\r\n            query = query.not('discounted_price', 'is', null).lt('discounted_price', 'price');\r\n          }\r\n\r\n          // Solo productos con stock (temporalmente comentado para testing)\r\n          // query = query.gt('stock', 0);\r\n\r\n          // Ordenamiento\r\n          const orderColumn = filters.sortBy === 'created_at' ? 'created_at' :\r\n                             filters.sortBy === 'brand' ? 'brand' :\r\n                             (filters.sortBy || 'created_at');\r\n          query = query.order(orderColumn, { ascending: filters.sortOrder === 'asc' });\r\n\r\n          // Paginación\r\n          const page = filters.page || 1;\r\n          const limit = filters.limit || 10;\r\n          const from = (page - 1) * limit;\r\n          const to = from + limit - 1;\r\n          query = query.range(from, to);\r\n\r\n          // Ejecutar query con timeout\r\n          return await query;\r\n        }, API_TIMEOUTS.database);\r\n\r\n        const { data: products, error, count } = result;\r\n\r\n        if (error) {\r\n          // Log de error de base de datos con contexto de seguridad\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error(`Supabase error: ${error.message}`),\r\n            {\r\n              supabaseError: error,\r\n              filters: filters,\r\n              operation: 'products_query'\r\n            }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: error.message || 'Error obteniendo productos de la base de datos',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 500 });\r\n        }\r\n\r\n        // Calcular información de paginación\r\n        const page = filters.page || 1;\r\n        const limit = filters.limit || 10;\r\n        const totalPages = Math.ceil((count || 0) / limit);\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Products retrieved successfully',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            productsCount: products?.length || 0,\r\n            totalCount: count || 0,\r\n            page,\r\n            limit,\r\n            filters: filters,\r\n          },\r\n        });\r\n\r\n        const response: PaginatedResponse<ProductWithCategory> = {\r\n          data: products || [],\r\n          pagination: {\r\n            page,\r\n            limit,\r\n            total: count || 0,\r\n            totalPages,\r\n          },\r\n          success: true,\r\n          message: `${products?.length || 0} productos encontrados`,\r\n        };\r\n\r\n        // Agregar headers de cache para mejorar performance\r\n        return NextResponse.json(response, {\r\n          headers: {\r\n            'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n      } catch (error: any) {\r\n        // Log de error general con contexto de seguridad\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error,\r\n          {\r\n            operation: 'products_get',\r\n            stage: 'database_operation'\r\n          }\r\n        );\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: error.message || 'Error interno del servidor',\r\n        };\r\n\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    // Log de rate limit excedido\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      {\r\n        endpoint: '/api/products',\r\n        method: 'GET'\r\n      }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// POST /api/products - Crear producto (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para operaciones de creación\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.creation,\r\n    async () => {\r\n      try {\r\n        // ENTERPRISE: Usar nueva autenticación enterprise para admin\r\n        const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils');\r\n\r\n        const authResult = await requireAdminAuth(request, ['products_create']);\r\n\r\n        if (!authResult.success) {\r\n          // Log de intento de acceso no autorizado\r\n          securityLogger.logPermissionDenied(\r\n            securityLogger.context,\r\n            'products',\r\n            'create'\r\n          );\r\n\r\n          return NextResponse.json(\r\n            {\r\n              error: authResult.error,\r\n              code: authResult.code,\r\n              enterprise: true,\r\n              timestamp: new Date().toISOString()\r\n            },\r\n            { status: authResult.status || 401 }\r\n          );\r\n        }\r\n\r\n        const context = authResult.context!;\r\n\r\n        // Actualizar contexto del logger con información del usuario\r\n        securityLogger.context.userId = context.userId;\r\n\r\n        const body = await request.json();\r\n\r\n        // Log de acción administrativa\r\n        securityLogger.logAdminAction(\r\n          securityLogger.context,\r\n          'create_product',\r\n          {\r\n            productName: body.name,\r\n            category: body.category_id\r\n          }\r\n        );\r\n\r\n        // Validar datos del producto\r\n        const productData = validateData(ProductSchema, body);\r\n\r\n        const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n        // Verificar que el cliente administrativo esté disponible\r\n        if (!supabase) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error('Admin Supabase client not available'),\r\n            { service: 'supabase_admin' }\r\n          );\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Servicio administrativo no disponible',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 503 });\r\n        }\r\n\r\n        // Crear slug si no se proporciona\r\n        if (!productData.slug) {\r\n          productData.slug = productData.name\r\n            .toLowerCase()\r\n            .replace(/[^a-z0-9]+/g, '-')\r\n            .replace(/(^-|-$)/g, '');\r\n        }\r\n\r\n        // Insertar producto con timeout\r\n        const result = await withDatabaseTimeout(async (signal) => {\r\n          return await supabase\r\n            .from('products')\r\n            .insert(productData)\r\n            .select(`\r\n              *,\r\n              category:categories(id, name, slug)\r\n            `)\r\n            .single();\r\n        }, API_TIMEOUTS.admin);\r\n\r\n        const { data: product, error } = result;\r\n\r\n        if (error) {\r\n          securityLogger.logApiError(\r\n            securityLogger.context,\r\n            new Error(`Product creation failed: ${error.message}`),\r\n            {\r\n              supabaseError: error,\r\n              productData: { ...productData, images: '[REDACTED]' } // No loggear imágenes por seguridad\r\n            }\r\n          );\r\n          handleSupabaseError(error, 'POST /api/products');\r\n        }\r\n\r\n        // Log de creación exitosa\r\n        securityLogger.logAdminAction(\r\n          securityLogger.context,\r\n          'product_created_successfully',\r\n          {\r\n            productId: product?.id,\r\n            productName: product?.name,\r\n            category: product?.category?.name\r\n          }\r\n        );\r\n\r\n        const response: ApiResponse<ProductWithCategory> = {\r\n          data: product,\r\n          success: true,\r\n          message: 'Producto creado exitosamente',\r\n        };\r\n\r\n        return NextResponse.json(response, { status: 201 });\r\n\r\n      } catch (error: any) {\r\n        // Log de error general en creación de producto\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error,\r\n          {\r\n            operation: 'product_creation',\r\n            stage: 'general_error'\r\n          }\r\n        );\r\n\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: error.message || 'Error interno del servidor',\r\n        };\r\n\r\n        return NextResponse.json(errorResponse, { status: 500 });\r\n      }\r\n    }\r\n  );\r\n\r\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    // Log de rate limit excedido para creación\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      {\r\n        endpoint: '/api/products',\r\n        method: 'POST',\r\n        operation: 'product_creation'\r\n      }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}