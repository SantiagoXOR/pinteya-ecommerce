{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\location\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n/**\n * API para actualizar la ubicación del driver en tiempo real\n * POST /api/driver/location\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/lib/auth/config'\nimport { createClient } from '@/lib/integrations/supabase/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { location, speed, heading, accuracy } = body\n\n    // Validar datos de ubicación\n    if (!location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {\n      return NextResponse.json({ error: 'Datos de ubicación inválidos' }, { status: 400 })\n    }\n\n    const supabase = await createClient()\n\n    // Obtener información del driver\n    const { data: driver, error: driverError } = await supabase\n      .from('drivers')\n      .select('id, status')\n      .eq('email', session.user.email)\n      .single()\n\n    if (driverError || !driver) {\n      return NextResponse.json({ error: 'Driver no encontrado' }, { status: 404 })\n    }\n\n    // Preparar datos de ubicación\n    const locationData = {\n      lat: location.lat,\n      lng: location.lng,\n      timestamp: new Date().toISOString(),\n      speed: speed || 0,\n      heading: heading || 0,\n      accuracy: accuracy || 0,\n    }\n\n    // Actualizar ubicación del driver\n    const { data: updatedDriver, error: updateError } = await supabase\n      .from('drivers')\n      .update({\n        current_location: locationData,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', driver.id)\n      .select()\n      .single()\n\n    if (updateError) {\n      console.error('Error updating driver location:', updateError)\n      return NextResponse.json({ error: 'Error actualizando ubicación' }, { status: 500 })\n    }\n\n    // Opcional: Guardar historial de ubicaciones para tracking\n    try {\n      await supabase.from('driver_location_history').insert({\n        driver_id: driver.id,\n        location: locationData,\n        created_at: new Date().toISOString(),\n      })\n    } catch (historyError) {\n      // No fallar si no se puede guardar el historial\n      console.warn('Could not save location history:', historyError)\n    }\n\n    // Si el driver está en una ruta activa, verificar proximidad a destinos\n    if (driver.status === 'busy') {\n      await checkProximityToDestinations(driver.id, location)\n    }\n\n    return NextResponse.json({\n      success: true,\n      location: locationData,\n      driver: {\n        id: updatedDriver.id,\n        status: updatedDriver.status,\n        current_location: updatedDriver.current_location,\n      },\n    })\n  } catch (error) {\n    console.error('Error in driver location API:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticación\n    const session = await auth()\n\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })\n    }\n\n    const supabase = await createClient()\n\n    // Obtener ubicación actual del driver\n    const { data: driver, error: driverError } = await supabase\n      .from('drivers')\n      .select('id, current_location, status, updated_at')\n      .eq('email', session.user.email)\n      .single()\n\n    if (driverError || !driver) {\n      return NextResponse.json({ error: 'Driver no encontrado' }, { status: 404 })\n    }\n\n    return NextResponse.json({\n      location: driver.current_location,\n      status: driver.status,\n      last_updated: driver.updated_at,\n    })\n  } catch (error) {\n    console.error('Error getting driver location:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n\n/**\n * Función helper para verificar proximidad a destinos de entrega\n */\nasync function checkProximityToDestinations(\n  driverId: string,\n  currentLocation: { lat: number; lng: number }\n) {\n  try {\n    const supabase = await createClient()\n\n    // Obtener rutas activas del driver\n    const { data: activeRoutes, error } = await supabase\n      .from('optimized_routes')\n      .select('*')\n      .eq('driver_id', driverId)\n      .eq('status', 'active')\n\n    if (error || !activeRoutes?.length) return\n\n    // Verificar proximidad a cada destino\n    for (const route of activeRoutes) {\n      if (!route.shipments) continue\n\n      for (let i = 0; i < route.shipments.length; i++) {\n        const shipment = route.shipments[i]\n\n        if (shipment.status === 'delivered') continue\n\n        const destination = shipment.destination?.coordinates\n        if (!destination) continue\n\n        const distance = calculateDistance(currentLocation, destination)\n\n        // Si está a menos de 100 metros del destino\n        if (distance < 100) {\n          // Opcional: Enviar notificación o actualizar estado\n          console.log(`Driver ${driverId} is near delivery destination: ${shipment.customer_name}`)\n\n          // Aquí se podría implementar:\n          // - Notificación push al cliente\n          // - Actualización automática de estado\n          // - Alerta al dashboard administrativo\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking proximity:', error)\n  }\n}\n\n/**\n * Calcular distancia entre dos puntos en metros\n */\nfunction calculateDistance(\n  point1: { lat: number; lng: number },\n  point2: { lat: number; lng: number }\n): number {\n  const R = 6371000 // Radio de la Tierra en metros\n  const dLat = ((point2.lat - point1.lat) * Math.PI) / 180\n  const dLon = ((point2.lng - point1.lng) * Math.PI) / 180\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((point1.lat * Math.PI) / 180) *\n      Math.cos((point2.lat * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n  return R * c\n}\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","body","location","speed","heading","accuracy","lat","lng","supabase","createClient","data","driver","driverError","from","select","eq","single","locationData","timestamp","Date","toISOString","updatedDriver","updateError","update","current_location","updated_at","id","console","insert","driver_id","created_at","historyError","warn","checkProximityToDestinations","success","last_updated","driverId","currentLocation","activeRoutes","length","route","shipments","i","shipment","destination","coordinates","distance","calculateDistance","log","customer_name","point1","point2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt"],"mappings":"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"}