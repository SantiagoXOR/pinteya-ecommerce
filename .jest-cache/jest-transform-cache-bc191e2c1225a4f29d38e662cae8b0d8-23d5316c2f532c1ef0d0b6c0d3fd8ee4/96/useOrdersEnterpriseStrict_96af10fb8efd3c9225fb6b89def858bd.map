{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useOrdersEnterpriseStrict.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - STRICT ORDERS HOOK (REFACTORED)\r\n// Hook orquestador para gestión de órdenes con validación estricta\r\n// ===================================\r\n\r\nimport { useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  StrictOrdersListResponse,\r\n  StrictApiError,\r\n  ApiResult,\r\n  createStrictApiError,\r\n  StrictOrderEnterprise,\r\n  StrictPagination,\r\n  isStrictApiError,\r\n  isStrictApiResponse\r\n} from '@/types/api-strict';\r\nimport { OrderStatus, PaymentStatus, FulfillmentStatus } from '@/types/orders-enterprise';\r\nimport { useApiMonitoring } from '@/utils/api-monitoring';\r\nimport { useOrdersCache } from './useOrdersCache';\r\nimport { useOrdersApi } from './useOrdersApi';\r\nimport { useOrdersState, StrictOrdersState, StrictOrdersActions } from './useOrdersState';\r\nimport { useOrdersDevState } from './useOrdersDevPersistence';\r\n\r\n// Función de debounce para evitar peticiones múltiples\r\nfunction debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n// ===================================\r\n// TIPOS DE FILTROS ESTRICTOS\r\n// ===================================\r\n\r\nexport interface StrictOrderFilters {\r\n  readonly search?: string;\r\n  readonly status?: OrderStatus | 'all';\r\n  readonly payment_status?: PaymentStatus | 'all';\r\n  readonly fulfillment_status?: FulfillmentStatus | 'all';\r\n  readonly date_from?: string;\r\n  readonly date_to?: string;\r\n  readonly page?: number;\r\n  readonly limit?: number;\r\n  readonly sort_by?: 'created_at' | 'updated_at' | 'total' | 'order_number';\r\n  readonly sort_order?: 'asc' | 'desc';\r\n}\r\n\r\n// Tipos movidos a useOrdersState.ts\r\n\r\nexport interface UseOrdersEnterpriseStrictReturn extends StrictOrdersState, StrictOrdersActions {\r\n  readonly fetchOrders: (filters?: Partial<StrictOrderFilters>) => Promise<void>;\r\n  readonly refreshOrders: () => Promise<void>;\r\n  readonly retryLastRequest: () => Promise<void>;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DEL HOOK\r\n// ===================================\r\n\r\ninterface UseOrdersEnterpriseStrictOptions {\r\n  readonly autoFetch?: boolean;\r\n  readonly refetchInterval?: number;\r\n  readonly maxRetries?: number;\r\n  readonly timeout?: number;\r\n  readonly enableCache?: boolean;\r\n  readonly cacheTimeout?: number;\r\n}\r\n\r\nconst DEFAULT_OPTIONS: Required<UseOrdersEnterpriseStrictOptions> = {\r\n  autoFetch: true,\r\n  refetchInterval: 0, // 0 = disabled\r\n  maxRetries: 3,\r\n  timeout: 10000, // 10 seconds\r\n  enableCache: true,\r\n  cacheTimeout: 5 * 60 * 1000 // 5 minutes\r\n};\r\n\r\n// Constantes DEFAULT movidas a useOrdersState.ts\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DEL HOOK ORQUESTADOR\r\n// ===================================\r\n\r\n// Funciones de cache movidas a useOrdersCache.ts\r\n\r\n// Funciones de cache movidas a useOrdersCache.ts\r\n\r\n// Todas las funciones de cache movidas a useOrdersCache.ts\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useOrdersEnterpriseStrict(\r\n  initialFilters: Partial<StrictOrderFilters> = {},\r\n  options: Partial<UseOrdersEnterpriseStrictOptions> = {}\r\n): UseOrdersEnterpriseStrictReturn {\r\n  const { toast } = useToast();\r\n  const apiMonitoring = useApiMonitoring();\r\n  const opts = useMemo(() => ({ ...DEFAULT_OPTIONS, ...options }), [options]);\r\n\r\n  // Memoizar las funciones de monitoreo para evitar recreaciones\r\n  const recordDiscrepancy = useCallback(apiMonitoring.recordDiscrepancy, []);\r\n  const recordRenderingIssue = useCallback(apiMonitoring.recordRenderingIssue, []);\r\n\r\n  // ===================================\r\n  // HOOKS ESPECIALIZADOS\r\n  // ===================================\r\n\r\n  // Hook de cache\r\n  const cache = useOrdersCache({\r\n    enableCache: opts.enableCache,\r\n    cacheTimeout: opts.cacheTimeout,\r\n    maxSize: 50,\r\n    cleanupInterval: 10 * 60 * 1000,\r\n    minRequestInterval: 1000\r\n  });\r\n\r\n  // Hook de persistencia para desarrollo (Fast Refresh)\r\n  const devPersistence = useOrdersDevState('orders-enterprise-dev');\r\n\r\n  // Hook de estado\r\n  const state = useOrdersState(initialFilters);\r\n\r\n  // Hook de API\r\n  const api = useOrdersApi({\r\n    timeout: opts.timeout,\r\n    maxRetries: opts.maxRetries,\r\n    enableCache: opts.enableCache,\r\n    cache\r\n  });\r\n  \r\n  // Referencias para control de requests (simplificadas)\r\n  const retryCountRef = useRef(0);\r\n  const refetchIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE FETCH SIMPLIFICADAS\r\n  // ===================================\r\n\r\n  // Usar el hook de API directamente\r\n  const fetchOrdersInternal = api.fetchOrdersInternal;\r\n\r\n  // ===================================\r\n  // FUNCIONES DE FETCH PÚBLICAS\r\n  // ===================================\r\n\r\n  // Lógica de fetch movida a useOrdersApi.ts\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE FETCH PÚBLICA CON RETRY\r\n  // ===================================\r\n\r\n  // Función interna sin debounce para uso directo\r\n  const fetchOrdersImmediate = useCallback(async (newFilters: Partial<StrictOrderFilters> = {}): Promise<void> => {\r\n    console.log('[useOrdersEnterpriseStrict] fetchOrdersImmediate called with filters:', newFilters);\r\n    console.log('[useOrdersEnterpriseStrict] Current state filters:', state.filters);\r\n    \r\n    // Generar clave única para esta petición\r\n    const requestKey = JSON.stringify({ ...state.filters, ...newFilters });\r\n    console.log('[useOrdersEnterpriseStrict] Request key:', requestKey);\r\n\r\n    // Evitar peticiones duplicadas\r\n    if (state.hasFiltersChanged({ ...state.filters, ...newFilters }) && state.isLoading) {\r\n      console.log('[useOrdersEnterpriseStrict] Skipping duplicate request');\r\n      return;\r\n    }\r\n\r\n    // Actualizar filtros y estado de carga\r\n    console.log('[useOrdersEnterpriseStrict] Updating filters and setting loading to true');\r\n    state.updateFilters(newFilters);\r\n    state.setLoading(true);\r\n    retryCountRef.current = 0;\r\n\r\n    const attemptFetch = async (attempt: number): Promise<void> => {\r\n      const currentFilters = state.getLastFilters();\r\n      console.log('[useOrdersEnterpriseStrict] attemptFetch - attempt:', attempt, 'filters:', currentFilters);\r\n      \r\n      const result = await fetchOrdersInternal(currentFilters, attempt > 0);\r\n      console.log('[useOrdersEnterpriseStrict] API result:', result);\r\n\r\n      if (isStrictApiResponse(result)) {\r\n        console.log('[useOrdersEnterpriseStrict] Valid API response received:', result.data);\r\n        // Monitoreo automático de discrepancias\r\n        const expectedCount = result.data.pagination.total;\r\n        const actualCount = result.data.orders.length;\r\n        const endpoint = `/api/admin/orders?${new URLSearchParams({\r\n          page: currentFilters.page?.toString() || '1',\r\n          limit: currentFilters.limit?.toString() || '20',\r\n          ...(currentFilters.status && { status: currentFilters.status }),\r\n          ...(currentFilters.payment_status && { payment_status: currentFilters.payment_status }),\r\n          ...(currentFilters.fulfillment_status && { fulfillment_status: currentFilters.fulfillment_status }),\r\n          ...(currentFilters.sort_by && { sort_by: currentFilters.sort_by }),\r\n          ...(currentFilters.sort_order && { sort_order: currentFilters.sort_order })\r\n        }).toString()}`;\r\n\r\n        // Solo registrar discrepancia si hay una diferencia real (no por paginación)\r\n        const expectedPageCount = Math.min(currentFilters.limit || 20, expectedCount - ((currentFilters.page || 1) - 1) * (currentFilters.limit || 20));\r\n        if (actualCount < expectedPageCount && expectedPageCount > 0) {\r\n          recordDiscrepancy(endpoint, expectedPageCount, actualCount);\r\n        }\r\n\r\n        // Actualizar estado usando el hook especializado\r\n        state.setOrders(result.data.orders);\r\n        state.setPagination(result.data.pagination);\r\n        state.setAnalytics(result.data.analytics || null);\r\n        retryCountRef.current = 0;\r\n\r\n        // ✅ PERSISTIR ESTADO PARA DESARROLLO (Fast Refresh)\r\n        if (process.env.NODE_ENV === 'development') {\r\n          devPersistence.persistState({\r\n            orders: result.data.orders,\r\n            pagination: result.data.pagination,\r\n            analytics: result.data.analytics || null,\r\n            filters: currentFilters,\r\n            hasData: true,\r\n            lastFetchTime: Date.now()\r\n          });\r\n        }\r\n      } else {\r\n        // Es un error\r\n        if (attempt < opts.maxRetries && result.code !== 'REQUEST_CANCELLED') {\r\n          retryCountRef.current = attempt + 1;\r\n          // Esperar antes del retry (exponential backoff)\r\n          const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          return attemptFetch(attempt + 1);\r\n        }\r\n\r\n        // Máximo de reintentos alcanzado o error no recuperable\r\n        state.setError(result.error);\r\n\r\n        // Registrar problema de renderizado por error de API\r\n        recordRenderingIssue(\r\n          'useOrdersEnterpriseStrict',\r\n          0,\r\n          0,\r\n          currentFilters,\r\n          result.error\r\n        );\r\n\r\n        // Mostrar toast de error\r\n        if (result.code !== 'REQUEST_CANCELLED') {\r\n          toast({\r\n            title: 'Error al cargar órdenes',\r\n            description: result.error,\r\n            variant: 'destructive'\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    await attemptFetch(0);\r\n  }, [fetchOrdersInternal, opts.maxRetries, toast, recordDiscrepancy, recordRenderingIssue, state]);\r\n\r\n  // Función fetchOrders con debouncing para evitar peticiones múltiples\r\n  const fetchOrders = useCallback((newFilters: Partial<StrictOrderFilters> = {}): Promise<void> => {\r\n    return new Promise<void>((resolve) => {\r\n      // Limpiar timeout anterior si existe\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n      \r\n      // Configurar nuevo timeout con debounce\r\n      const debounceMs = process.env.NODE_ENV === 'development' ? 300 : 150;\r\n      debounceTimeoutRef.current = setTimeout(async () => {\r\n        try {\r\n          await fetchOrdersImmediate(newFilters);\r\n          resolve();\r\n        } catch (error) {\r\n          console.error('Error in debounced fetchOrders:', error);\r\n          resolve(); // Resolver incluso en caso de error para evitar promesas colgadas\r\n        }\r\n      }, debounceMs);\r\n    });\r\n  }, [fetchOrdersImmediate]);\r\n\r\n  // ===================================\r\n  // OTRAS ACCIONES\r\n  // ===================================\r\n\r\n  const refreshOrders = useCallback(async (): Promise<void> => {\r\n    // Limpiar cache para forzar refresh\r\n    if (opts.enableCache) {\r\n      cache.clearCache();\r\n    }\r\n    await fetchOrders();\r\n  }, [fetchOrders, opts.enableCache, cache]);\r\n\r\n  // Usar las funciones del hook de estado directamente\r\n  const updateFilters = state.updateFilters;\r\n  const clearError = state.clearError;\r\n\r\n  const retryLastRequest = useCallback(async (): Promise<void> => {\r\n    const lastFilters = state.getLastFilters();\r\n    if (lastFilters) {\r\n      await fetchOrders(lastFilters);\r\n    }\r\n  }, [fetchOrders, state]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // ===================================\r\n  // RESTAURACIÓN DE ESTADO PERSISTIDO (DESARROLLO)\r\n  // ===================================\r\n\r\n  const hasRestoredRef = useRef(false);\r\n  useEffect(() => {\r\n    if (!hasRestoredRef.current && process.env.NODE_ENV === 'development') {\r\n      hasRestoredRef.current = true;\r\n\r\n      // Intentar restaurar estado persistido\r\n      if (devPersistence.hasValidPersistedData()) {\r\n        const persistedState = devPersistence.getPersistedState();\r\n        if (persistedState) {\r\n          console.log('[useOrdersEnterpriseStrict] Restoring persisted state:', {\r\n            ordersCount: persistedState.orders.length,\r\n            hasData: persistedState.hasData\r\n          });\r\n\r\n          // Restaurar estado\r\n          state.setOrders(persistedState.orders);\r\n          state.setPagination(persistedState.pagination);\r\n          state.setAnalytics(persistedState.analytics);\r\n          state.updateFilters(persistedState.filters);\r\n\r\n          return; // No hacer auto-fetch si tenemos datos persistidos\r\n        }\r\n      }\r\n    }\r\n\r\n    // Auto-fetch inicial solo si no hay datos persistidos\r\n    if (opts.autoFetch && !hasRestoredRef.current) {\r\n      fetchOrders();\r\n    }\r\n  }, [opts.autoFetch]); // Solo ejecutar una vez al montar\r\n\r\n  // Escuchar cambios en filtros con debouncing optimizado\r\n  const filtersRef = useRef(state.filters);\r\n  const isInitialMount = useRef(true);\r\n  \r\n  useEffect(() => {\r\n    // Evitar fetch en el primer render (ya se hace en auto-fetch)\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n      filtersRef.current = state.filters;\r\n      return;\r\n    }\r\n\r\n    // Solo hacer fetch si los filtros han cambiado realmente\r\n    const hasChanged = JSON.stringify(filtersRef.current) !== JSON.stringify(state.filters);\r\n    \r\n    if (hasChanged) {\r\n      filtersRef.current = state.filters;\r\n      fetchOrders();\r\n    }\r\n  }, [state.filters, fetchOrders]); // Dependencias mínimas y estables\r\n\r\n  // Refetch interval - TEMPORALMENTE DESHABILITADO para evitar refresco infinito\r\n  useEffect(() => {\r\n    // NOTA: Refetch interval deshabilitado temporalmente para solucionar refresco infinito\r\n    // TODO: Reimplementar con useRef para fetchOrders o usar React Query\r\n    /*\r\n    if (opts.refetchInterval > 0) {\r\n      refetchIntervalRef.current = setInterval(() => {\r\n        if (!state.isLoading) {\r\n          fetchOrders();\r\n        }\r\n      }, opts.refetchInterval);\r\n\r\n      return () => {\r\n        if (refetchIntervalRef.current) {\r\n          clearInterval(refetchIntervalRef.current);\r\n        }\r\n      };\r\n    }\r\n    */\r\n  }, [opts.refetchInterval]);\r\n\r\n  // Limpieza automática de cache movida a useOrdersCache.ts\r\n\r\n  // Cleanup al desmontar - OPTIMIZADO: Sin dependencias inestables\r\n  useEffect(() => {\r\n    return () => {\r\n      // Cancelar peticiones en progreso usando el hook de API\r\n      api.abortCurrentRequest();\r\n\r\n      // Limpiar intervalos y timeouts\r\n      if (refetchIntervalRef.current) {\r\n        clearInterval(refetchIntervalRef.current);\r\n      }\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('[useOrdersEnterpriseStrict] Hook cleanup completed');\r\n      }\r\n    };\r\n  }, []); // ✅ CORREGIDO: Sin dependencias para evitar remontajes por Fast Refresh\r\n\r\n  // ===================================\r\n  // RETORNO DEL HOOK\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    orders: state.orders,\r\n    pagination: state.pagination,\r\n    filters: state.filters,\r\n    analytics: state.analytics,\r\n    isLoading: state.isLoading,\r\n    error: state.error,\r\n    lastFetch: state.lastFetch,\r\n    \r\n    // Acciones\r\n    fetchOrders,\r\n    refreshOrders,\r\n    updateFilters,\r\n    clearError,\r\n    retryLastRequest\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA ORDEN INDIVIDUAL\r\n// ===================================\r\n\r\nexport function useOrderDetailStrict(orderId: string | null) {\r\n  const { toast } = useToast();\r\n  const [order, setOrder] = useState<StrictOrderEnterprise | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchOrder = useCallback(async () => {\r\n    if (!orderId) {return;}\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(`/api/admin/orders/${orderId}`, {\r\n        credentials: 'include' // ✅ AGREGADO: Incluir cookies de sesión NextAuth.js\r\n      });\r\n      const data = await response.json();\r\n\r\n      const validatedResponse = toStrictOrdersResponse(data);\r\n      \r\n      if (isStrictApiError(validatedResponse)) {\r\n        setError(validatedResponse.error);\r\n        toast({\r\n          title: 'Error al cargar orden',\r\n          description: validatedResponse.error,\r\n          variant: 'destructive'\r\n        });\r\n      } else {\r\n        // Para orden individual, extraer la primera orden\r\n        const orderData = validatedResponse.data.orders[0] || null;\r\n        setOrder(orderData);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast({\r\n        title: 'Error al cargar orden',\r\n        description: errorMessage,\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [orderId, toast]);\r\n\r\n  useEffect(() => {\r\n    fetchOrder();\r\n  }, [fetchOrder]);\r\n\r\n  return {\r\n    order,\r\n    isLoading,\r\n    error,\r\n    refetch: fetchOrder\r\n  };\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES EXPORTADAS\r\n// ===================================\r\n\r\n/**\r\n * Utilidades de cache movidas a useOrdersCache.ts\r\n * Estas funciones están disponibles a través del hook useOrdersCache\r\n */\r\n\r\n// Las utilidades de cache ahora están disponibles a través del hook useOrdersCache:\r\n// - cache.clearCache()\r\n// - cache.getCacheStats()\r\n// - cache.getPendingRequest()\r\n// - cache.setPendingRequest()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useOrderDetailStrict","useOrdersEnterpriseStrict","debounce","func","wait","timeout","args","clearTimeout","setTimeout","DEFAULT_OPTIONS","autoFetch","refetchInterval","maxRetries","enableCache","cacheTimeout","initialFilters","options","toast","useToast","apiMonitoring","useApiMonitoring","opts","useMemo","recordDiscrepancy","useCallback","recordRenderingIssue","cache","useOrdersCache","maxSize","cleanupInterval","minRequestInterval","devPersistence","useOrdersDevState","state","useOrdersState","api","useOrdersApi","retryCountRef","useRef","refetchIntervalRef","debounceTimeoutRef","fetchOrdersInternal","fetchOrdersImmediate","newFilters","console","log","filters","requestKey","JSON","stringify","hasFiltersChanged","isLoading","updateFilters","setLoading","current","attemptFetch","attempt","currentFilters","getLastFilters","result","isStrictApiResponse","data","expectedCount","pagination","total","actualCount","orders","length","endpoint","URLSearchParams","page","toString","limit","status","payment_status","fulfillment_status","sort_by","sort_order","expectedPageCount","Math","min","setOrders","setPagination","setAnalytics","analytics","process","env","NODE_ENV","persistState","hasData","lastFetchTime","Date","now","code","delay","pow","Promise","resolve","setError","error","title","description","variant","fetchOrders","debounceMs","refreshOrders","clearCache","clearError","retryLastRequest","lastFilters","hasRestoredRef","useEffect","hasValidPersistedData","persistedState","getPersistedState","ordersCount","filtersRef","isInitialMount","hasChanged","abortCurrentRequest","clearInterval","lastFetch","orderId","order","setOrder","useState","setIsLoading","fetchOrder","response","fetch","credentials","json","validatedResponse","toStrictOrdersResponse","isStrictApiError","orderData","err","errorMessage","Error","message","refetch"],"mappings":"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"}