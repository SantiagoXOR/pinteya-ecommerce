4f89addfe307d105f8339af1ac7a502f
// ===================================
// PINTEYA E-COMMERCE - SIMPLE CIRCULAR DEPENDENCIES TEST
// Prueba simple para verificar que no hay dependencias circulares
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _OrderListEnterprise = require("../../components/admin/orders/OrderListEnterprise");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ===================================
// MOCKS SIMPLES
// ===================================
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
const mockToast = _globals.jest.fn();
_globals.jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
// Mock de performance
const mockPerformanceNow = _globals.jest.fn();
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow
    },
    writable: true
});
// Datos de prueba simples
const mockApiResponse = {
    success: true,
    data: {
        orders: [],
        pagination: {
            page: 1,
            limit: 20,
            total: 0,
            totalPages: 0,
            hasNextPage: false,
            hasPreviousPage: false
        },
        analytics: {
            total_orders: 0,
            total_revenue: 0,
            pending_orders: 0,
            completed_orders: 0
        }
    },
    message: 'Orders retrieved successfully',
    timestamp: new Date().toISOString()
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockPerformanceNow.mockReturnValue(1000);
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: async ()=>mockApiResponse
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS SIMPLES
// ===================================
(0, _globals.describe)('OrderListEnterprise - Simple Tests', ()=>{
    (0, _globals.it)('debe renderizarse sin errores', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Verificar que el componente se renderiza
        (0, _globals.expect)(_react1.screen.getByText('Gestión de Órdenes')).toBeInTheDocument();
        // Esperar a que termine la carga
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();
        });
    });
    (0, _globals.it)('debe manejar cambios de filtros sin renders infinitos', async ()=>{
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();
        });
        // Cambiar filtro de búsqueda
        const searchInput = _react1.screen.getByPlaceholderText('Buscar órdenes...');
        _react1.fireEvent.change(searchInput, {
            target: {
                value: 'test'
            }
        });
        // Verificar que el componente sigue funcionando
        (0, _globals.expect)(searchInput).toHaveValue('test');
        // No debería haber errores en console
        (0, _globals.expect)(mockToast).not.toHaveBeenCalledWith(_globals.expect.objectContaining({
            variant: 'destructive'
        }));
    });
    (0, _globals.it)('debe hacer solo una petición inicial', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();
        });
        // Verificar que solo se hizo una petición
        (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
    });
    (0, _globals.it)('debe limpiar recursos al desmontarse', async ()=>{
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_OrderListEnterprise.OrderListEnterprise, {}));
        // Esperar carga inicial
        await (0, _react1.waitFor)(()=>{
            (0, _globals.expect)(_react1.screen.getByText('No se encontraron órdenes con los filtros aplicados')).toBeInTheDocument();
        });
        // Desmontar componente
        unmount();
        // No debería haber errores después del desmontaje
        (0, _globals.expect)(mockToast).not.toHaveBeenCalledWith(_globals.expect.objectContaining({
            variant: 'destructive'
        }));
    });
});

//# sourceMappingURL=data:application/json;base64,