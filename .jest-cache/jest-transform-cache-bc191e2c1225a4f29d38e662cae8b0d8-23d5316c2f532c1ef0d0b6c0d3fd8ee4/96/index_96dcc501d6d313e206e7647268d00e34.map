{"version":3,"names":["LogCategory","cov_76dq07ys0","f","s","LogLevel","default","_default","logPayment","logPerformance","logSecurity","logWebhook","logger","StructuredLogger","constructor","environment","b","process","env","NODE_ENV","enableConsole","enableFile","minLevel","shouldLog","level","levels","indexOf","formatLogEntry","entry","JSON","stringify","timestamp","Date","toISOString","writeLog","formattedEntry","console","debug","info","warn","error","payment","message","paymentData","metadata","category","webhook","webhookData","security","securityData","performance","performanceData","log","data","name","stack","undefined","critical","measurePerformance","operation","fn","start","now","result","Promise","then","value","duration","catch"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\enterprise\\logger\\index.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - STRUCTURED LOGGING SYSTEM\r\n// ===================================\r\n\r\nexport enum LogLevel {\r\n  DEBUG = 'debug',\r\n  INFO = 'info',\r\n  WARN = 'warn',\r\n  ERROR = 'error',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\nexport enum LogCategory {\r\n  PAYMENT = 'payment',\r\n  WEBHOOK = 'webhook',\r\n  ORDER = 'order',\r\n  AUTH = 'auth',\r\n  API = 'api',\r\n  SECURITY = 'security',\r\n  PERFORMANCE = 'performance',\r\n  USER = 'user'\r\n}\r\n\r\ninterface BaseLogEntry {\r\n  timestamp: string;\r\n  level: LogLevel;\r\n  category: LogCategory;\r\n  message: string;\r\n  requestId?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  clientIP?: string;\r\n  userAgent?: string;\r\n  environment: string;\r\n}\r\n\r\ninterface PaymentLogEntry extends BaseLogEntry {\r\n  category: LogCategory.PAYMENT;\r\n  paymentData: {\r\n    orderId?: string;\r\n    paymentId?: string;\r\n    amount?: number;\r\n    currency?: string;\r\n    status?: string;\r\n    method?: string;\r\n    preferenceId?: string;\r\n  };\r\n}\r\n\r\ninterface WebhookLogEntry extends BaseLogEntry {\r\n  category: LogCategory.WEBHOOK;\r\n  webhookData: {\r\n    type?: string;\r\n    action?: string;\r\n    dataId?: string;\r\n    signature?: string;\r\n    isValid?: boolean;\r\n    processingTime?: number;\r\n  };\r\n}\r\n\r\ninterface SecurityLogEntry extends BaseLogEntry {\r\n  category: LogCategory.SECURITY;\r\n  securityData: {\r\n    threat?: string;\r\n    blocked?: boolean;\r\n    reason?: string;\r\n    riskScore?: number;\r\n  };\r\n}\r\n\r\ninterface PerformanceLogEntry extends BaseLogEntry {\r\n  category: LogCategory.PERFORMANCE;\r\n  performanceData: {\r\n    operation?: string;\r\n    duration?: number;\r\n    endpoint?: string;\r\n    statusCode?: number;\r\n    responseSize?: number;\r\n  };\r\n}\r\n\r\ntype LogEntry = PaymentLogEntry | WebhookLogEntry | SecurityLogEntry | PerformanceLogEntry | BaseLogEntry;\r\n\r\nclass StructuredLogger {\r\n  private environment: string;\r\n  private enableConsole: boolean;\r\n  private enableFile: boolean;\r\n  private minLevel: LogLevel;\r\n\r\n  constructor() {\r\n    this.environment = process.env.NODE_ENV || 'development';\r\n    this.enableConsole = true;\r\n    this.enableFile = process.env.NODE_ENV === 'production';\r\n    this.minLevel = process.env.NODE_ENV === 'production' ? LogLevel.INFO : LogLevel.DEBUG;\r\n  }\r\n\r\n  private shouldLog(level: LogLevel): boolean {\r\n    const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.CRITICAL];\r\n    return levels.indexOf(level) >= levels.indexOf(this.minLevel);\r\n  }\r\n\r\n  private formatLogEntry(entry: LogEntry): string {\r\n    return JSON.stringify({\r\n      ...entry,\r\n      timestamp: new Date().toISOString(),\r\n      environment: this.environment,\r\n    }, null, this.environment === 'development' ? 2 : 0);\r\n  }\r\n\r\n  private writeLog(entry: LogEntry): void {\r\n    if (!this.shouldLog(entry.level)) {return;}\r\n\r\n    const formattedEntry = this.formatLogEntry(entry);\r\n\r\n    // Console output\r\n    if (this.enableConsole) {\r\n      switch (entry.level) {\r\n        case LogLevel.DEBUG:\r\n          console.debug(formattedEntry);\r\n          break;\r\n        case LogLevel.INFO:\r\n          console.info(formattedEntry);\r\n          break;\r\n        case LogLevel.WARN:\r\n          console.warn(formattedEntry);\r\n          break;\r\n        case LogLevel.ERROR:\r\n        case LogLevel.CRITICAL:\r\n          console.error(formattedEntry);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // File output (en producción se podría integrar con servicios como Winston, Pino, etc.)\r\n    if (this.enableFile) {\r\n      // TODO: Implementar escritura a archivo o servicio de logging externo\r\n      // Por ahora solo console en producción\r\n    }\r\n  }\r\n\r\n  // Métodos públicos para diferentes categorías\r\n  payment(level: LogLevel, message: string, paymentData: PaymentLogEntry['paymentData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.PAYMENT,\r\n      message,\r\n      paymentData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as PaymentLogEntry);\r\n  }\r\n\r\n  webhook(level: LogLevel, message: string, webhookData: WebhookLogEntry['webhookData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.WEBHOOK,\r\n      message,\r\n      webhookData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as WebhookLogEntry);\r\n  }\r\n\r\n  security(level: LogLevel, message: string, securityData: SecurityLogEntry['securityData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.SECURITY,\r\n      message,\r\n      securityData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as SecurityLogEntry);\r\n  }\r\n\r\n  performance(level: LogLevel, message: string, performanceData: PerformanceLogEntry['performanceData'], metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category: LogCategory.PERFORMANCE,\r\n      message,\r\n      performanceData,\r\n      environment: this.environment,\r\n      ...metadata,\r\n    } as PerformanceLogEntry);\r\n  }\r\n\r\n  // Método log genérico para compatibilidad\r\n  log(level: LogLevel, category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  // Métodos de conveniencia\r\n  debug(level: LogLevel, message: string, data?: any, category?: LogCategory, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: level,\r\n      category: category || LogCategory.API,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  info(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.INFO,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  warn(category: LogCategory, message: string, data?: any, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.WARN,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      data,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  error(category: LogCategory, message: string, error?: Error, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.ERROR,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      error: error ? {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack,\r\n      } : undefined,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  critical(category: LogCategory, message: string, error?: Error, metadata?: Partial<BaseLogEntry>): void {\r\n    this.writeLog({\r\n      timestamp: new Date().toISOString(),\r\n      level: LogLevel.CRITICAL,\r\n      category,\r\n      message,\r\n      environment: this.environment,\r\n      error: error ? {\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack,\r\n      } : undefined,\r\n      ...metadata,\r\n    } as BaseLogEntry);\r\n  }\r\n\r\n  // Método para medir performance\r\n  measurePerformance<T>(operation: string, fn: () => T | Promise<T>, metadata?: Partial<BaseLogEntry>): T | Promise<T> {\r\n    const start = Date.now();\r\n    \r\n    try {\r\n      const result = fn();\r\n      \r\n      if (result instanceof Promise) {\r\n        return result.then((value) => {\r\n          const duration = Date.now() - start;\r\n          this.performance(LogLevel.INFO, `Operation completed: ${operation}`, {\r\n            operation,\r\n            duration,\r\n          }, metadata);\r\n          return value;\r\n        }).catch((error) => {\r\n          const duration = Date.now() - start;\r\n          this.performance(LogLevel.ERROR, `Operation failed: ${operation}`, {\r\n            operation,\r\n            duration,\r\n          }, metadata);\r\n          throw error;\r\n        });\r\n      } else {\r\n        const duration = Date.now() - start;\r\n        this.performance(LogLevel.INFO, `Operation completed: ${operation}`, {\r\n          operation,\r\n          duration,\r\n        }, metadata);\r\n        return result;\r\n      }\r\n    } catch (error) {\r\n      const duration = Date.now() - start;\r\n      this.performance(LogLevel.ERROR, `Operation failed: ${operation}`, {\r\n        operation,\r\n        duration,\r\n      }, metadata);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton del logger\r\nexport const logger = new StructuredLogger();\r\n\r\n// Funciones de conveniencia para uso directo\r\nexport const logPayment = (level: LogLevel, message: string, paymentData: PaymentLogEntry['paymentData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.payment(level, message, paymentData, metadata);\r\n};\r\n\r\nexport const logWebhook = (level: LogLevel, message: string, webhookData: WebhookLogEntry['webhookData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.webhook(level, message, webhookData, metadata);\r\n};\r\n\r\nexport const logSecurity = (level: LogLevel, message: string, securityData: SecurityLogEntry['securityData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.security(level, message, securityData, metadata);\r\n};\r\n\r\nexport const logPerformance = (level: LogLevel, message: string, performanceData: PerformanceLogEntry['performanceData'], metadata?: Partial<BaseLogEntry>) => {\r\n  logger.performance(level, message, performanceData, metadata);\r\n};\r\n\r\nexport default logger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}