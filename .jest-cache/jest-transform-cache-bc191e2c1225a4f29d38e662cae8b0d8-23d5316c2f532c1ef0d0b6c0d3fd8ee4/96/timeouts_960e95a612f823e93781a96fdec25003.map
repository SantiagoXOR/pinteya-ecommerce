{"version":3,"names":["cov_256j628jq0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","CACHE_TIMEOUTS","COMMON_TIMEOUTS","DATABASE_TIMEOUTS","DEFAULT_FETCH_CONFIG","ENVIRONMENT_TIMEOUTS","EXTERNAL_API_TIMEOUTS","FILE_TIMEOUTS","INTERNAL_API_TIMEOUTS","MONITORING_TIMEOUTS","RETRY_CONFIG","TEST_TIMEOUTS","TimeoutUtils","MERCADOPAGO","PAYMENT_CREATION","PAYMENT_STATUS","WEBHOOK_PROCESSING","PREFERENCE_CREATION","REFUND_PROCESSING","THIRD_PARTY","DEFAULT","SLOW_OPERATIONS","FAST_OPERATIONS","EMAIL","SEND_EMAIL","TEMPLATE_PROCESSING","NOTIFICATIONS","PUSH_NOTIFICATION","SMS","SLACK_WEBHOOK","READ","SIMPLE_QUERY","COMPLEX_QUERY","AGGREGATION","SEARCH","WRITE","INSERT","UPDATE","DELETE","BULK_OPERATIONS","TRANSACTION","SIMPLE","COMPLEX","MIGRATION","CONNECTION","ACQUIRE","IDLE_TIMEOUT","LIFETIME","REDIS","CONNECT","COMMAND","PIPELINE","MEMORY","OPERATION","CLEANUP","CDN","PURGE","UPLOAD","PRODUCTS","LIST","DETAIL","CREATE","USERS","AUTHENTICATION","PROFILE","UPDATE_PROFILE","PASSWORD_RESET","ORDERS","UPDATE_STATUS","CANCEL","CART","ADD_ITEM","REMOVE_ITEM","UPDATE_QUANTITY","CLEAR","CHECKOUT","CATEGORIES","SUGGESTIONS","TRENDING","FILTERS","SMALL_FILE","MEDIUM_FILE","LARGE_FILE","IMAGE_PROCESSING","RESIZE","OPTIMIZATION","THUMBNAIL","FILE_OPERATIONS","COPY","METRICS","COLLECTION","EXPORT","ALERTS","SEND","WEBHOOK","HEALTH_CHECK","DETAILED","EXTERNAL_SERVICES","UNIT","ASYNC_OPERATIONS","INTEGRATION","API_CALLS","DATABASE_OPERATIONS","E2E","PAGE_LOAD","USER_INTERACTION","FORM_SUBMISSION","development","multiplier","maxTimeout","staging","production","maxRetries","baseDelay","maxDelay","backoffMultiplier","CRITICAL","NON_CRITICAL","getEnvironmentTimeout","baseTimeout","env","process","NODE_ENV","config","adjustedTimeout","Math","min","round","createTimeoutController","timeout","controller","AbortController","setTimeout","abort","withTimeout","promise","errorMessage","Promise","race","_","reject","Error","withRetry","operation","lastError","attempt","error","delay","pow","resolve","getTimeout","category","timeoutMap","categoryConfig","parts","split","current","part","VERY_SHORT","SHORT","MEDIUM","LONG","VERY_LONG","retries","headers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\config\\timeouts.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TIMEOUT CONFIGURATION\r\n// ===================================\r\n\r\n/**\r\n * Configuración centralizada de timeouts para toda la aplicación\r\n * Todos los valores están en milisegundos\r\n */\r\n\r\n/**\r\n * Timeouts para APIs externas\r\n */\r\nexport const EXTERNAL_API_TIMEOUTS = {\r\n  // MercadoPago\r\n  MERCADOPAGO: {\r\n    PAYMENT_CREATION: 15000,      // 15 segundos\r\n    PAYMENT_STATUS: 10000,        // 10 segundos\r\n    WEBHOOK_PROCESSING: 5000,     // 5 segundos\r\n    PREFERENCE_CREATION: 12000,   // 12 segundos\r\n    REFUND_PROCESSING: 20000,     // 20 segundos\r\n  },\r\n  \r\n  // APIs de terceros generales\r\n  THIRD_PARTY: {\r\n    DEFAULT: 10000,               // 10 segundos\r\n    SLOW_OPERATIONS: 30000,       // 30 segundos\r\n    FAST_OPERATIONS: 5000,        // 5 segundos\r\n  },\r\n  \r\n  // Servicios de email\r\n  EMAIL: {\r\n    SEND_EMAIL: 15000,            // 15 segundos\r\n    TEMPLATE_PROCESSING: 8000,    // 8 segundos\r\n  },\r\n  \r\n  // Servicios de notificaciones\r\n  NOTIFICATIONS: {\r\n    PUSH_NOTIFICATION: 10000,     // 10 segundos\r\n    SMS: 12000,                   // 12 segundos\r\n    SLACK_WEBHOOK: 8000,          // 8 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para base de datos\r\n */\r\nexport const DATABASE_TIMEOUTS = {\r\n  // Operaciones de lectura\r\n  READ: {\r\n    SIMPLE_QUERY: 5000,           // 5 segundos\r\n    COMPLEX_QUERY: 15000,         // 15 segundos\r\n    AGGREGATION: 20000,           // 20 segundos\r\n    SEARCH: 10000,                // 10 segundos\r\n  },\r\n  \r\n  // Operaciones de escritura\r\n  WRITE: {\r\n    INSERT: 8000,                 // 8 segundos\r\n    UPDATE: 10000,                // 10 segundos\r\n    DELETE: 12000,                // 12 segundos\r\n    BULK_OPERATIONS: 30000,       // 30 segundos\r\n  },\r\n  \r\n  // Transacciones\r\n  TRANSACTION: {\r\n    SIMPLE: 15000,                // 15 segundos\r\n    COMPLEX: 30000,               // 30 segundos\r\n    MIGRATION: 60000,             // 60 segundos\r\n  },\r\n  \r\n  // Conexiones\r\n  CONNECTION: {\r\n    ACQUIRE: 5000,                // 5 segundos\r\n    IDLE_TIMEOUT: 300000,         // 5 minutos\r\n    LIFETIME: 1800000,            // 30 minutos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para cache\r\n */\r\nexport const CACHE_TIMEOUTS = {\r\n  // Redis\r\n  REDIS: {\r\n    CONNECT: 5000,                // 5 segundos\r\n    COMMAND: 3000,                // 3 segundos\r\n    PIPELINE: 10000,              // 10 segundos\r\n  },\r\n  \r\n  // Cache en memoria\r\n  MEMORY: {\r\n    OPERATION: 1000,              // 1 segundo\r\n    CLEANUP: 5000,                // 5 segundos\r\n  },\r\n  \r\n  // CDN\r\n  CDN: {\r\n    PURGE: 30000,                 // 30 segundos\r\n    UPLOAD: 60000,                // 60 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para APIs internas\r\n */\r\nexport const INTERNAL_API_TIMEOUTS = {\r\n  // APIs de productos\r\n  PRODUCTS: {\r\n    LIST: 8000,                   // 8 segundos\r\n    DETAIL: 5000,                 // 5 segundos\r\n    SEARCH: 10000,                // 10 segundos\r\n    CREATE: 12000,                // 12 segundos\r\n    UPDATE: 10000,                // 10 segundos\r\n    DELETE: 8000,                 // 8 segundos\r\n  },\r\n  \r\n  // APIs de usuarios\r\n  USERS: {\r\n    AUTHENTICATION: 8000,         // 8 segundos\r\n    PROFILE: 5000,                // 5 segundos\r\n    UPDATE_PROFILE: 10000,        // 10 segundos\r\n    PASSWORD_RESET: 15000,        // 15 segundos\r\n  },\r\n  \r\n  // APIs de órdenes\r\n  ORDERS: {\r\n    CREATE: 15000,                // 15 segundos\r\n    LIST: 8000,                   // 8 segundos\r\n    DETAIL: 5000,                 // 5 segundos\r\n    UPDATE_STATUS: 10000,         // 10 segundos\r\n    CANCEL: 12000,                // 12 segundos\r\n  },\r\n  \r\n  // APIs de carrito\r\n  CART: {\r\n    ADD_ITEM: 5000,               // 5 segundos\r\n    REMOVE_ITEM: 3000,            // 3 segundos\r\n    UPDATE_QUANTITY: 4000,        // 4 segundos\r\n    CLEAR: 3000,                  // 3 segundos\r\n    CHECKOUT: 20000,              // 20 segundos\r\n  },\r\n  \r\n  // APIs de categorías\r\n  CATEGORIES: {\r\n    LIST: 5000,                   // 5 segundos\r\n    DETAIL: 3000,                 // 3 segundos\r\n    CREATE: 8000,                 // 8 segundos\r\n    UPDATE: 6000,                 // 6 segundos\r\n  },\r\n  \r\n  // APIs de búsqueda\r\n  SEARCH: {\r\n    PRODUCTS: 10000,              // 10 segundos\r\n    SUGGESTIONS: 5000,            // 5 segundos\r\n    TRENDING: 8000,               // 8 segundos\r\n    FILTERS: 6000,                // 6 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para operaciones de archivos\r\n */\r\nexport const FILE_TIMEOUTS = {\r\n  // Upload de archivos\r\n  UPLOAD: {\r\n    SMALL_FILE: 30000,            // 30 segundos (< 1MB)\r\n    MEDIUM_FILE: 60000,           // 60 segundos (1-10MB)\r\n    LARGE_FILE: 180000,           // 3 minutos (> 10MB)\r\n  },\r\n  \r\n  // Procesamiento de imágenes\r\n  IMAGE_PROCESSING: {\r\n    RESIZE: 15000,                // 15 segundos\r\n    OPTIMIZATION: 20000,          // 20 segundos\r\n    THUMBNAIL: 10000,             // 10 segundos\r\n  },\r\n  \r\n  // Operaciones de archivos\r\n  FILE_OPERATIONS: {\r\n    READ: 10000,                  // 10 segundos\r\n    WRITE: 15000,                 // 15 segundos\r\n    DELETE: 5000,                 // 5 segundos\r\n    COPY: 20000,                  // 20 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para monitoreo y logging\r\n */\r\nexport const MONITORING_TIMEOUTS = {\r\n  // Métricas\r\n  METRICS: {\r\n    COLLECTION: 5000,             // 5 segundos\r\n    AGGREGATION: 10000,           // 10 segundos\r\n    EXPORT: 30000,                // 30 segundos\r\n  },\r\n  \r\n  // Alertas\r\n  ALERTS: {\r\n    SEND: 8000,                   // 8 segundos\r\n    WEBHOOK: 10000,               // 10 segundos\r\n    EMAIL: 15000,                 // 15 segundos\r\n  },\r\n  \r\n  // Health checks\r\n  HEALTH_CHECK: {\r\n    SIMPLE: 3000,                 // 3 segundos\r\n    DETAILED: 10000,              // 10 segundos\r\n    EXTERNAL_SERVICES: 15000,     // 15 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts para testing\r\n */\r\nexport const TEST_TIMEOUTS = {\r\n  // Tests unitarios\r\n  UNIT: {\r\n    DEFAULT: 5000,                // 5 segundos\r\n    ASYNC_OPERATIONS: 10000,      // 10 segundos\r\n  },\r\n  \r\n  // Tests de integración\r\n  INTEGRATION: {\r\n    API_CALLS: 15000,             // 15 segundos\r\n    DATABASE_OPERATIONS: 20000,   // 20 segundos\r\n    EXTERNAL_SERVICES: 30000,     // 30 segundos\r\n  },\r\n  \r\n  // Tests E2E\r\n  E2E: {\r\n    PAGE_LOAD: 30000,             // 30 segundos\r\n    USER_INTERACTION: 10000,      // 10 segundos\r\n    FORM_SUBMISSION: 20000,       // 20 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Timeouts por ambiente\r\n */\r\nexport const ENVIRONMENT_TIMEOUTS = {\r\n  development: {\r\n    multiplier: 2,                // 2x más tiempo en desarrollo\r\n    maxTimeout: 60000,            // Máximo 60 segundos\r\n  },\r\n  \r\n  staging: {\r\n    multiplier: 1.5,              // 1.5x más tiempo en staging\r\n    maxTimeout: 45000,            // Máximo 45 segundos\r\n  },\r\n  \r\n  production: {\r\n    multiplier: 1,                // Tiempo normal en producción\r\n    maxTimeout: 30000,            // Máximo 30 segundos\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Configuración de reintentos\r\n */\r\nexport const RETRY_CONFIG = {\r\n  // Configuración por defecto\r\n  DEFAULT: {\r\n    maxRetries: 3,\r\n    baseDelay: 1000,              // 1 segundo\r\n    maxDelay: 10000,              // 10 segundos\r\n    backoffMultiplier: 2,\r\n  },\r\n  \r\n  // APIs críticas\r\n  CRITICAL: {\r\n    maxRetries: 5,\r\n    baseDelay: 500,               // 0.5 segundos\r\n    maxDelay: 5000,               // 5 segundos\r\n    backoffMultiplier: 1.5,\r\n  },\r\n  \r\n  // APIs no críticas\r\n  NON_CRITICAL: {\r\n    maxRetries: 2,\r\n    baseDelay: 2000,              // 2 segundos\r\n    maxDelay: 15000,              // 15 segundos\r\n    backoffMultiplier: 3,\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Utilidades para trabajar con timeouts\r\n */\r\nexport class TimeoutUtils {\r\n  /**\r\n   * Obtiene timeout ajustado por ambiente\r\n   */\r\n  static getEnvironmentTimeout(baseTimeout: number): number {\r\n    const env = process.env.NODE_ENV as keyof typeof ENVIRONMENT_TIMEOUTS || 'development';\r\n    const config = ENVIRONMENT_TIMEOUTS[env] || ENVIRONMENT_TIMEOUTS.development;\r\n    \r\n    const adjustedTimeout = Math.min(\r\n      baseTimeout * config.multiplier,\r\n      config.maxTimeout\r\n    );\r\n    \r\n    return Math.round(adjustedTimeout);\r\n  }\r\n  \r\n  /**\r\n   * Crea AbortController con timeout\r\n   */\r\n  static createTimeoutController(timeout: number): AbortController {\r\n    const controller = new AbortController();\r\n    \r\n    setTimeout(() => {\r\n      controller.abort();\r\n    }, timeout);\r\n    \r\n    return controller;\r\n  }\r\n  \r\n  /**\r\n   * Wrapper para promesas con timeout\r\n   */\r\n  static withTimeout<T>(\r\n    promise: Promise<T>,\r\n    timeout: number,\r\n    errorMessage?: string\r\n  ): Promise<T> {\r\n    return Promise.race([\r\n      promise,\r\n      new Promise<never>((_, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error(errorMessage || `Operation timed out after ${timeout}ms`));\r\n        }, timeout);\r\n      })\r\n    ]);\r\n  }\r\n  \r\n  /**\r\n   * Implementa retry con backoff exponencial\r\n   */\r\n  static async withRetry<T>(\r\n    operation: () => Promise<T>,\r\n    config = RETRY_CONFIG.DEFAULT\r\n  ): Promise<T> {\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\r\n      try {\r\n        return await operation();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt === config.maxRetries) {\r\n          throw lastError;\r\n        }\r\n        \r\n        const delay = Math.min(\r\n          config.baseDelay * Math.pow(config.backoffMultiplier, attempt),\r\n          config.maxDelay\r\n        );\r\n        \r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  }\r\n  \r\n  /**\r\n   * Obtiene timeout para operación específica\r\n   */\r\n  static getTimeout(category: string, operation: string): number {\r\n    const timeoutMap: Record<string, any> = {\r\n      'external-api': EXTERNAL_API_TIMEOUTS,\r\n      'database': DATABASE_TIMEOUTS,\r\n      'cache': CACHE_TIMEOUTS,\r\n      'internal-api': INTERNAL_API_TIMEOUTS,\r\n      'file': FILE_TIMEOUTS,\r\n      'monitoring': MONITORING_TIMEOUTS,\r\n      'test': TEST_TIMEOUTS\r\n    };\r\n    \r\n    const categoryConfig = timeoutMap[category];\r\n    if (!categoryConfig) {\r\n      return this.getEnvironmentTimeout(10000); // 10 segundos por defecto\r\n    }\r\n    \r\n    // Navegar por la estructura anidada\r\n    const parts = operation.split('.');\r\n    let current = categoryConfig;\r\n    \r\n    for (const part of parts) {\r\n      if (current[part] !== undefined) {\r\n        current = current[part];\r\n      } else {\r\n        return this.getEnvironmentTimeout(10000); // Fallback\r\n      }\r\n    }\r\n    \r\n    return this.getEnvironmentTimeout(typeof current === 'number' ? current : 10000);\r\n  }\r\n}\r\n\r\n/**\r\n * Constantes de timeout más utilizadas\r\n */\r\nexport const COMMON_TIMEOUTS = {\r\n  VERY_SHORT: TimeoutUtils.getEnvironmentTimeout(2000),    // 2 segundos\r\n  SHORT: TimeoutUtils.getEnvironmentTimeout(5000),        // 5 segundos\r\n  MEDIUM: TimeoutUtils.getEnvironmentTimeout(10000),      // 10 segundos\r\n  LONG: TimeoutUtils.getEnvironmentTimeout(20000),        // 20 segundos\r\n  VERY_LONG: TimeoutUtils.getEnvironmentTimeout(60000),   // 60 segundos\r\n} as const;\r\n\r\n/**\r\n * Configuración por defecto para fetch\r\n */\r\nexport const DEFAULT_FETCH_CONFIG = {\r\n  timeout: COMMON_TIMEOUTS.MEDIUM,\r\n  retries: RETRY_CONFIG.DEFAULT.maxRetries,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n} as const;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AAEA;;;GAAA,CAKA;;MAEC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MA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","ignoreList":[]}