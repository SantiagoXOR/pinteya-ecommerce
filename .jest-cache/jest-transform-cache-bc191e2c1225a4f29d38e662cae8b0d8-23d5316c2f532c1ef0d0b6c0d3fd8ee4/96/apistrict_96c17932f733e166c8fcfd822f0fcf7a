c8bce31c84ae4273aa294dd51455a0f8
// ===================================
// PINTEYA E-COMMERCE - STRICT API TYPES
// Tipos TypeScript estrictos para prevenir errores de API
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createStrictApiError () {
        return createStrictApiError;
    },
    get createStrictApiResponse () {
        return createStrictApiResponse;
    },
    get isStrictApiError () {
        return isStrictApiError;
    },
    get isStrictApiResponse () {
        return isStrictApiResponse;
    },
    get isValidPagination () {
        return isValidPagination;
    },
    get isValidStrictOrder () {
        return isValidStrictOrder;
    },
    get toStrictOrdersResponse () {
        return toStrictOrdersResponse;
    }
});
function isStrictApiResponse(obj) {
    return typeof obj === 'object' && obj !== null && 'success' in obj && obj.success === true && 'data' in obj && 'timestamp' in obj && typeof obj.timestamp === 'string';
}
function isStrictApiError(obj) {
    return typeof obj === 'object' && obj !== null && 'success' in obj && obj.success === false && 'error' in obj && typeof obj.error === 'string' && 'timestamp' in obj && typeof obj.timestamp === 'string';
}
function isValidPagination(obj) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    return typeof obj.page === 'number' && typeof obj.limit === 'number' && typeof obj.total === 'number' && typeof obj.totalPages === 'number' && typeof obj.hasNextPage === 'boolean' && typeof obj.hasPreviousPage === 'boolean' && obj.page > 0 && obj.limit > 0 && obj.total >= 0 && obj.totalPages >= 0;
}
function isValidStrictOrder(obj) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    // Validaciones mínimas - solo campos absolutamente esenciales
    const hasId = obj.id && (typeof obj.id === 'string' || typeof obj.id === 'number');
    const hasTotal = typeof obj.total === 'number' && obj.total >= 0;
    const hasCreatedAt = obj.created_at && typeof obj.created_at === 'string';
    const hasStatus = obj.status && typeof obj.status === 'string';
    // Solo requerir los campos absolutamente esenciales
    return hasId && hasTotal && hasCreatedAt && hasStatus;
}
function toStrictOrdersResponse(obj) {
    try {
        if (!isStrictApiResponse(obj)) {
            return {
                success: false,
                error: 'Invalid API response format',
                code: 'INVALID_RESPONSE_FORMAT',
                timestamp: new Date().toISOString(),
                path: '/api/admin/orders'
            };
        }
        const response = obj;
        // Validar estructura de datos
        if (!response.data || typeof response.data !== 'object') {
            return {
                success: false,
                error: 'Missing or invalid data field',
                code: 'INVALID_DATA_FIELD',
                timestamp: new Date().toISOString(),
                path: '/api/admin/orders'
            };
        }
        // Validar órdenes
        const orders = response.data.orders || [];
        if (!Array.isArray(orders)) {
            return {
                success: false,
                error: 'Orders field must be an array',
                code: 'INVALID_ORDERS_FIELD',
                timestamp: new Date().toISOString(),
                path: '/api/admin/orders'
            };
        }
        // Validar paginación
        const pagination = response.data.pagination;
        if (pagination && !isValidPagination(pagination)) {
            return {
                success: false,
                error: 'Invalid pagination format',
                code: 'INVALID_PAGINATION',
                timestamp: new Date().toISOString(),
                path: '/api/admin/orders'
            };
        }
        // Transformar órdenes para asegurar compatibilidad
        // Transformar órdenes para normalizar tipos
        const transformedOrders = orders.map((order)=>({
                ...order,
                id: String(order.id),
                user_id: order.user_id ? String(order.user_id) : order.user_id,
                total: Number(order.total) || 0,
                created_at: order.created_at || new Date().toISOString(),
                status: order.status || 'pending',
                metadata: order.metadata || {}
            }));
        const validOrders = transformedOrders.filter(isValidStrictOrder);
        // Crear respuesta estricta con valores por defecto seguros
        return {
            success: true,
            data: {
                orders: validOrders,
                pagination: pagination || {
                    page: 1,
                    limit: 20,
                    total: orders.length,
                    totalPages: Math.ceil(orders.length / 20),
                    hasNextPage: false,
                    hasPreviousPage: false
                },
                filters: response.data.filters || {},
                analytics: response.data.analytics
            },
            message: response.message,
            timestamp: response.timestamp || new Date().toISOString()
        };
    } catch (error) {
        return {
            success: false,
            error: `Failed to parse API response: ${error instanceof Error ? error.message : 'Unknown error'}`,
            code: 'PARSE_ERROR',
            timestamp: new Date().toISOString(),
            path: '/api/admin/orders'
        };
    }
}
function createStrictApiError(error, code, details, path) {
    return {
        success: false,
        error,
        code,
        details,
        timestamp: new Date().toISOString(),
        path: path || '/api/unknown'
    };
}
function createStrictApiResponse(data, message) {
    return {
        success: true,
        data,
        message,
        timestamp: new Date().toISOString()
    };
}

//# sourceMappingURL=data:application/json;base64,