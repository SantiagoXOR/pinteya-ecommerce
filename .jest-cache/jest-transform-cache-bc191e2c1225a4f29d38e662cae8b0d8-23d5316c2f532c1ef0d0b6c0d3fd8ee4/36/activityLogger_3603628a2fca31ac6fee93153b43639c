37f49413630449805bddf9fb49120c25
// ===================================
// PINTEYA E-COMMERCE - ACTIVITY LOGGER UTILITY
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getRequestInfo () {
        return getRequestInfo;
    },
    get logActivityFromClient () {
        return logActivityFromClient;
    },
    get logAuthActivity () {
        return logAuthActivity;
    },
    get logBulkActivity () {
        return logBulkActivity;
    },
    get logOrderActivity () {
        return logOrderActivity;
    },
    get logPreferenceActivity () {
        return logPreferenceActivity;
    },
    get logProfileActivity () {
        return logProfileActivity;
    },
    get logSecurityActivity () {
        return logSecurityActivity;
    },
    get logSessionActivity () {
        return logSessionActivity;
    },
    get logUserActivity () {
        return logUserActivity;
    }
});
const _supabase = require("../integrations/supabase");
async function logUserActivity(userId, activityData, options = {}) {
    try {
        const { skipIfError = true, includeTimestamp = true } = options;
        // Preparar datos de actividad
        const logData = {
            user_id: userId,
            action: activityData.action,
            category: activityData.category,
            description: activityData.description,
            metadata: activityData.metadata,
            ip_address: activityData.ip_address,
            user_agent: activityData.user_agent,
            ...includeTimestamp && {
                created_at: new Date().toISOString()
            }
        };
        // Insertar en base de datos
        const { error } = await _supabase.supabaseAdmin.from('user_activity').insert(logData);
        if (error) {
            console.error('Error al registrar actividad:', error);
            if (!skipIfError) {
                throw error;
            }
            return false;
        }
        return true;
    } catch (error) {
        console.error('Error en logUserActivity:', error);
        if (!options.skipIfError) {
            throw error;
        }
        return false;
    }
}
async function logAuthActivity(userId, action, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'auth',
        description: `Usuario ${action}`,
        metadata: {
            timestamp: new Date().toISOString(),
            ...metadata
        },
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
async function logProfileActivity(userId, action, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'profile',
        description: `Perfil: ${action.replace('_', ' ')}`,
        metadata,
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
async function logSecurityActivity(userId, action, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'security',
        description: `Seguridad: ${action.replace('_', ' ')}`,
        metadata: {
            severity: action === 'suspicious_activity' ? 'high' : 'medium',
            ...metadata
        },
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
async function logSessionActivity(userId, action, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'session',
        description: `Sesión: ${action.replace('_', ' ')}`,
        metadata: {
            device_info: metadata?.device_info,
            session_id: metadata?.session_id,
            ...metadata
        },
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
async function logOrderActivity(userId, action, orderId, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'order',
        description: `Orden ${orderId}: ${action.replace('_', ' ')}`,
        metadata: {
            order_id: orderId,
            ...metadata
        },
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
async function logPreferenceActivity(userId, action, metadata, request) {
    return logUserActivity(userId, {
        action,
        category: 'preference',
        description: `Preferencias: ${action.replace('_', ' ')}`,
        metadata,
        ip_address: request?.ip,
        user_agent: request?.userAgent
    });
}
function getRequestInfo(request) {
    try {
        const ip = request.headers?.get?.('x-forwarded-for')?.split(',')[0]?.trim() || request.headers?.get?.('x-real-ip') || request.ip || 'unknown';
        const userAgent = request.headers?.get?.('user-agent') || 'unknown';
        return {
            ip,
            userAgent
        };
    } catch (error) {
        console.error('Error obteniendo información del request:', error);
        return {
            ip: 'unknown',
            userAgent: 'unknown'
        };
    }
}
async function logActivityFromClient(action, category, description, metadata) {
    try {
        const response = await fetch('/api/user/activity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                action,
                category,
                description,
                metadata
            })
        });
        if (!response.ok) {
            console.error('Error al registrar actividad desde cliente:', response.statusText);
            return false;
        }
        const data = await response.json();
        return data.success || false;
    } catch (error) {
        console.error('Error en logActivityFromClient:', error);
        return false;
    }
}
async function logBulkActivity(activities, options = {}) {
    let success = 0;
    let failed = 0;
    for (const { userId, activityData } of activities){
        const result = await logUserActivity(userId, activityData, options);
        if (result) {
            success++;
        } else {
            failed++;
        }
    }
    return {
        success,
        failed
    };
}

//# sourceMappingURL=data:application/json;base64,