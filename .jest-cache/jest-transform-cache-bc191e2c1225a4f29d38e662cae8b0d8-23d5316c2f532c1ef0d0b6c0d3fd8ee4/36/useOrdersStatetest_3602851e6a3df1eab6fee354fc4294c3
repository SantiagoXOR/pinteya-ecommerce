5836920204f0bff619ffaa25be0e2bbe
// ===================================
// PINTEYA E-COMMERCE - USEORDERSSTATE TESTS
// Tests completos para el hook de estado de órdenes
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersState = require("../../../hooks/admin/useOrdersState");
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockInitialFilters = {
    page: 1,
    limit: 20,
    sort_by: 'created_at',
    sort_order: 'desc'
};
const mockOrdersData = {
    orders: [
        {
            id: '1',
            order_number: 'ORD-001',
            status: 'pending',
            total: 100
        },
        {
            id: '2',
            order_number: 'ORD-002',
            status: 'confirmed',
            total: 200
        }
    ],
    pagination: {
        page: 1,
        totalPages: 5,
        hasNextPage: true
    },
    analytics: {
        totalOrders: 2,
        totalRevenue: 300
    }
};
const mockUpdatedFilters = {
    page: 2,
    limit: 10,
    status: 'confirmed',
    search: 'test'
};
// ===================================
// SETUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
});
// ===================================
// TESTS PRINCIPALES
// ===================================
(0, _globals.describe)('useOrdersState', ()=>{
    (0, _globals.it)('debe inicializarse con estado por defecto', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _globals.expect)(result.current.orders).toEqual([]);
        (0, _globals.expect)(result.current.pagination).toBeNull();
        (0, _globals.expect)(result.current.analytics).toBeNull();
        (0, _globals.expect)(result.current.filters).toEqual(mockInitialFilters);
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('debe proporcionar todas las funciones necesarias', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _globals.expect)(result.current.updateFilters).toBeDefined();
        (0, _globals.expect)(result.current.setLoading).toBeDefined();
        (0, _globals.expect)(result.current.setError).toBeDefined();
        (0, _globals.expect)(result.current.setOrders).toBeDefined();
        (0, _globals.expect)(result.current.setPagination).toBeDefined();
        (0, _globals.expect)(result.current.setAnalytics).toBeDefined();
        (0, _globals.expect)(result.current.clearError).toBeDefined();
        (0, _globals.expect)(result.current.resetState).toBeDefined();
        (0, _globals.expect)(result.current.areFiltersEqual).toBeDefined();
        // Verificar que son funciones
        (0, _globals.expect)(typeof result.current.updateFilters).toBe('function');
        (0, _globals.expect)(typeof result.current.setLoading).toBe('function');
        (0, _globals.expect)(typeof result.current.setError).toBe('function');
        (0, _globals.expect)(typeof result.current.setOrders).toBe('function');
        (0, _globals.expect)(typeof result.current.setPagination).toBe('function');
        (0, _globals.expect)(typeof result.current.setAnalytics).toBe('function');
        (0, _globals.expect)(typeof result.current.clearError).toBe('function');
        (0, _globals.expect)(typeof result.current.resetState).toBe('function');
        (0, _globals.expect)(typeof result.current.areFiltersEqual).toBe('function');
    });
    (0, _globals.it)('debe actualizar filtros correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.updateFilters(mockUpdatedFilters);
        });
        (0, _globals.expect)(result.current.filters).toEqual({
            ...mockInitialFilters,
            ...mockUpdatedFilters
        });
    });
    (0, _globals.it)('debe mantener inmutabilidad al actualizar filtros', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        const originalFilters = result.current.filters;
        (0, _react.act)(()=>{
            result.current.updateFilters({
                page: 2
            });
        });
        // Los filtros originales no deben haber cambiado
        (0, _globals.expect)(originalFilters).toEqual(mockInitialFilters);
        // Los nuevos filtros deben ser diferentes
        (0, _globals.expect)(result.current.filters).not.toBe(originalFilters);
        (0, _globals.expect)(result.current.filters.page).toBe(2);
    });
    (0, _globals.it)('debe establecer estado de carga correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.setLoading(true);
        });
        (0, _globals.expect)(result.current.isLoading).toBe(true);
        (0, _react.act)(()=>{
            result.current.setLoading(false);
        });
        (0, _globals.expect)(result.current.isLoading).toBe(false);
    });
    (0, _globals.it)('debe establecer y limpiar errores correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        const testError = new Error('Test error');
        (0, _react.act)(()=>{
            result.current.setError(testError);
        });
        (0, _globals.expect)(result.current.error).toBe(testError);
        (0, _react.act)(()=>{
            result.current.clearError();
        });
        (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('debe establecer órdenes correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.setOrders(mockOrdersData.orders);
        });
        (0, _globals.expect)(result.current.orders).toEqual(mockOrdersData.orders);
    });
    (0, _globals.it)('debe establecer paginación correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.setPagination(mockOrdersData.pagination);
        });
        (0, _globals.expect)(result.current.pagination).toEqual(mockOrdersData.pagination);
    });
    (0, _globals.it)('debe establecer analytics correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.setAnalytics(mockOrdersData.analytics);
        });
        (0, _globals.expect)(result.current.analytics).toEqual(mockOrdersData.analytics);
    });
    (0, _globals.it)('debe resetear estado correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        // Establecer algún estado
        (0, _react.act)(()=>{
            result.current.setOrders(mockOrdersData.orders);
            result.current.setPagination(mockOrdersData.pagination);
            result.current.setAnalytics(mockOrdersData.analytics);
            result.current.setLoading(true);
            result.current.setError(new Error('Test error'));
        });
        // Verificar que el estado se estableció
        (0, _globals.expect)(result.current.orders).toEqual(mockOrdersData.orders);
        (0, _globals.expect)(result.current.isLoading).toBe(true);
        (0, _globals.expect)(result.current.error).toBeTruthy();
        // Resetear estado
        (0, _react.act)(()=>{
            result.current.resetState();
        });
        // Verificar que el estado se reseteó
        (0, _globals.expect)(result.current.orders).toEqual([]);
        (0, _globals.expect)(result.current.pagination).toBeNull();
        (0, _globals.expect)(result.current.analytics).toBeNull();
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.error).toBeNull();
        // Los filtros deben mantenerse
        (0, _globals.expect)(result.current.filters).toEqual(mockInitialFilters);
    });
    (0, _globals.it)('debe comparar filtros correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        // Filtros idénticos
        const identicalFilters = {
            ...mockInitialFilters
        };
        (0, _globals.expect)(result.current.areFiltersEqual(mockInitialFilters, identicalFilters)).toBe(true);
        // Filtros diferentes
        const differentFilters = {
            ...mockInitialFilters,
            page: 2
        };
        (0, _globals.expect)(result.current.areFiltersEqual(mockInitialFilters, differentFilters)).toBe(false);
        // Filtros con propiedades adicionales
        const filtersWithExtra = {
            ...mockInitialFilters,
            status: 'pending'
        };
        (0, _globals.expect)(result.current.areFiltersEqual(mockInitialFilters, filtersWithExtra)).toBe(false);
        // Filtros con valores undefined vs null
        const filtersWithUndefined = {
            ...mockInitialFilters,
            status: undefined
        };
        const filtersWithNull = {
            ...mockInitialFilters,
            status: null
        };
        (0, _globals.expect)(result.current.areFiltersEqual(filtersWithUndefined, filtersWithNull)).toBe(false);
    });
    (0, _globals.it)('debe manejar valores null y undefined en filtros', ()=>{
        const filtersWithNulls = {
            page: 1,
            limit: 20,
            status: null,
            search: undefined
        };
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(filtersWithNulls));
        (0, _globals.expect)(result.current.filters).toEqual(filtersWithNulls);
        (0, _react.act)(()=>{
            result.current.updateFilters({
                status: 'pending'
            });
        });
        (0, _globals.expect)(result.current.filters.status).toBe('pending');
        (0, _globals.expect)(result.current.filters.search).toBeUndefined();
    });
    (0, _globals.it)('debe mantener referencia estable de funciones', ()=>{
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        const initialFunctions = {
            updateFilters: result.current.updateFilters,
            setLoading: result.current.setLoading,
            setError: result.current.setError,
            setOrders: result.current.setOrders,
            setPagination: result.current.setPagination,
            setAnalytics: result.current.setAnalytics,
            clearError: result.current.clearError,
            resetState: result.current.resetState,
            areFiltersEqual: result.current.areFiltersEqual
        };
        // Re-renderizar
        rerender();
        // Las funciones deben mantener la misma referencia
        (0, _globals.expect)(result.current.updateFilters).toBe(initialFunctions.updateFilters);
        (0, _globals.expect)(result.current.setLoading).toBe(initialFunctions.setLoading);
        (0, _globals.expect)(result.current.setError).toBe(initialFunctions.setError);
        (0, _globals.expect)(result.current.setOrders).toBe(initialFunctions.setOrders);
        (0, _globals.expect)(result.current.setPagination).toBe(initialFunctions.setPagination);
        (0, _globals.expect)(result.current.setAnalytics).toBe(initialFunctions.setAnalytics);
        (0, _globals.expect)(result.current.clearError).toBe(initialFunctions.clearError);
        (0, _globals.expect)(result.current.resetState).toBe(initialFunctions.resetState);
        (0, _globals.expect)(result.current.areFiltersEqual).toBe(initialFunctions.areFiltersEqual);
    });
    (0, _globals.it)('debe manejar actualizaciones de estado múltiples correctamente', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(mockInitialFilters));
        (0, _react.act)(()=>{
            result.current.setLoading(true);
            result.current.setOrders(mockOrdersData.orders);
            result.current.setPagination(mockOrdersData.pagination);
            result.current.setAnalytics(mockOrdersData.analytics);
            result.current.setLoading(false);
        });
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.orders).toEqual(mockOrdersData.orders);
        (0, _globals.expect)(result.current.pagination).toEqual(mockOrdersData.pagination);
        (0, _globals.expect)(result.current.analytics).toEqual(mockOrdersData.analytics);
    });
    (0, _globals.it)('debe manejar filtros complejos con objetos anidados', ()=>{
        const complexFilters = {
            page: 1,
            limit: 20,
            dateRange: {
                start: '2025-01-01',
                end: '2025-01-31'
            },
            statusFilter: {
                include: [
                    'pending',
                    'confirmed'
                ],
                exclude: [
                    'cancelled'
                ]
            }
        };
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersState.useOrdersState)(complexFilters));
        (0, _globals.expect)(result.current.filters).toEqual(complexFilters);
        (0, _react.act)(()=>{
            result.current.updateFilters({
                dateRange: {
                    start: '2025-02-01',
                    end: '2025-02-28'
                }
            });
        });
        (0, _globals.expect)(result.current.filters.dateRange).toEqual({
            start: '2025-02-01',
            end: '2025-02-28'
        });
        (0, _globals.expect)(result.current.filters.statusFilter).toEqual(complexFilters.statusFilter);
    });
});

//# sourceMappingURL=data:application/json;base64,