{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\LiveNavigationMap.tsx"],"sourcesContent":["/**\r\n * Componente de navegaci√≥n GPS en tiempo real para drivers\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, DirectionsRenderer, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Navigation,\r\n  MapPin,\r\n  CheckCircle,\r\n  Clock,\r\n  AlertTriangle,\r\n  Phone,\r\n  Package\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface DeliveryStop {\r\n  orderId: number;\r\n  orderNumber: string;\r\n  address: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  sequence: number;\r\n  status: 'pending' | 'current' | 'completed';\r\n  estimatedArrival?: string;\r\n  total: number;\r\n  items: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface LiveNavigationMapProps {\r\n  stops: DeliveryStop[];\r\n  onCompleteDelivery: (orderId: number) => void;\r\n  onNavigationUpdate?: (currentLocation: { lat: number; lng: number }) => void;\r\n}\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst defaultCenter = {\r\n  lat: -31.4201,\r\n  lng: -64.1888\r\n};\r\n\r\nexport default function LiveNavigationMap({\r\n  stops,\r\n  onCompleteDelivery,\r\n  onNavigationUpdate\r\n}: LiveNavigationMapProps) {\r\n  const [currentLocation, setCurrentLocation] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null);\r\n  const [currentStopIndex, setCurrentStopIndex] = useState(0);\r\n  const [selectedStop, setSelectedStop] = useState<DeliveryStop | null>(null);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n  const [watchId, setWatchId] = useState<number | null>(null);\r\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\r\n  const mapRef = useRef<google.maps.Map | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Verificar si Google Maps est√° cargado\r\n    const checkGoogleMaps = () => {\r\n      if (window.google && window.google.maps) {\r\n        setIsGoogleMapsLoaded(true);\r\n      } else {\r\n        setTimeout(checkGoogleMaps, 100);\r\n      }\r\n    };\r\n    checkGoogleMaps();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Solicitar ubicaci√≥n actual\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const location = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          };\r\n          setCurrentLocation(location);\r\n          if (onNavigationUpdate) {\r\n            onNavigationUpdate(location);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error('Error getting location:', error);\r\n          toast.error('No se pudo obtener la ubicaci√≥n actual');\r\n          // Usar ubicaci√≥n por defecto (C√≥rdoba)\r\n          setCurrentLocation(defaultCenter);\r\n        }\r\n      );\r\n    }\r\n  }, [onNavigationUpdate]);\r\n\r\n  useEffect(() => {\r\n    if (currentLocation && stops.length > 0) {\r\n      calculateRoute();\r\n    }\r\n  }, [currentLocation, stops, currentStopIndex]);\r\n\r\n  const calculateRoute = async () => {\r\n    if (!currentLocation || !window.google || !window.google.maps) return;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n    const currentStop = stops.find(stop => stop.status === 'current');\r\n\r\n    if (!currentStop || !currentStop.coordinates) {\r\n      setDirections(null);\r\n      return;\r\n    }\r\n\r\n    console.log('üó∫Ô∏è Calculando ruta GPS desde:', currentLocation, 'hacia:', currentStop.coordinates);\r\n\r\n    try {\r\n      const result = await directionsService.route({\r\n        origin: currentLocation,\r\n        destination: currentStop.coordinates,\r\n        travelMode: google.maps.TravelMode.DRIVING,\r\n        optimizeWaypoints: false,\r\n        avoidHighways: false,\r\n        avoidTolls: false,\r\n        unitSystem: google.maps.UnitSystem.METRIC,\r\n        language: 'es',\r\n        region: 'AR'\r\n      });\r\n\r\n      console.log('‚úÖ Ruta GPS calculada exitosamente:', result);\r\n      setDirections(result);\r\n\r\n      // Extraer informaci√≥n de navegaci√≥n\r\n      const route = result.routes[0];\r\n      const leg = route.legs[0];\r\n\r\n      console.log('üìä Informaci√≥n de ruta:', {\r\n        distance: leg.distance?.text,\r\n        duration: leg.duration?.text,\r\n        steps: leg.steps.length\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Error calculating route:', error);\r\n      toast.error('Error al calcular la ruta GPS');\r\n    }\r\n  };\r\n  const startNavigation = () => {\r\n    if (!navigator.geolocation) {\r\n      toast.error('Geolocalizaci√≥n no disponible');\r\n      return;\r\n    }\r\n\r\n    setIsNavigating(true);\r\n\r\n    const id = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const location = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setCurrentLocation(location);\r\n\r\n        if (onNavigationUpdate) {\r\n          onNavigationUpdate(location);\r\n        }\r\n\r\n        // Verificar si llegamos cerca del destino actual\r\n        const currentStop = stops.find(stop => stop.status === 'current' ||\r\n          (stop.status === 'pending' && stop.sequence === currentStopIndex + 1));\r\n\r\n        if (currentStop && currentStop.coordinates) {\r\n          const distance = calculateDistance(location, currentStop.coordinates);\r\n          if (distance < 0.1) { // 100 metros\r\n            toast.success(`Has llegado a ${currentStop.address}`);\r\n          }\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error watching location:', error);\r\n        toast.error('Error al seguir la ubicaci√≥n');\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000\r\n      }\r\n    );\r\n\r\n    setWatchId(id);\r\n    toast.success('Navegaci√≥n iniciada');\r\n  };\r\n\r\n  const stopNavigation = () => {\r\n    if (watchId) {\r\n      navigator.geolocation.clearWatch(watchId);\r\n      setWatchId(null);\r\n    }\r\n    setIsNavigating(false);\r\n    toast.info('Navegaci√≥n detenida');\r\n  };\r\n\r\n  const handleCompleteDelivery = async (stop: DeliveryStop) => {\r\n    try {\r\n      const response = await fetch('/api/driver/complete-delivery', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          orderId: stop.orderId,\r\n          deliveryLocation: currentLocation,\r\n          deliveryTime: new Date().toISOString(),\r\n          deliveryNotes: `Entregado en ${stop.address}`\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al completar la entrega');\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        toast.success(`Entrega completada: ${stop.orderNumber}`);\r\n        onCompleteDelivery(stop.orderId);\r\n        setCurrentStopIndex(prev => prev + 1);\r\n        setSelectedStop(null);\r\n      } else {\r\n        throw new Error(result.error || 'Error desconocido');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing delivery:', error);\r\n      toast.error('Error al completar la entrega');\r\n    }\r\n  };\r\n\r\n  const calculateDistance = (pos1: { lat: number; lng: number }, pos2: { lat: number; lng: number }) => {\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = (pos2.lat - pos1.lat) * Math.PI / 180;\r\n    const dLon = (pos2.lng - pos1.lng) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n              Math.cos(pos1.lat * Math.PI / 180) * Math.cos(pos2.lat * Math.PI / 180) *\r\n              Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Controles de navegaci√≥n */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Navigation className=\"h-5 w-5\" />\r\n              <span className=\"font-medium\">\r\n                {selectedOrders.size} de {orders.length} √≥rdenes seleccionadas\r\n              </span>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              {!isNavigating ? (\r\n                <Button onClick={startNavigation} size=\"sm\">\r\n                  Iniciar Navegaci√≥n\r\n                </Button>\r\n              ) : (\r\n                <Button onClick={stopNavigation} variant=\"outline\" size=\"sm\">\r\n                  Detener\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-between text-sm\">\r\n            <span>Paradas restantes: {stops.filter(s => s.status === 'pending').length}</span>\r\n            <span>Completadas: {stops.filter(s => s.status === 'completed').length}</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Mapa */}\r\n      <Card>\r\n        <CardContent className=\"p-0\">\r\n          <GoogleMap\r\n            mapContainerStyle={mapContainerStyle}\r\n            center={currentLocation || defaultCenter}\r\n            zoom={13}\r\n            onLoad={(map) => {\r\n              mapRef.current = map;\r\n            }}\r\n          >\r\n            {/* Mostrar ruta */}\r\n            {directions && (\r\n              <DirectionsRenderer\r\n                directions={directions}\r\n                options={{\r\n                  suppressMarkers: false,\r\n                  polylineOptions: {\r\n                    strokeColor: '#2563eb',\r\n                    strokeWeight: 4\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {/* Marcador de ubicaci√≥n actual */}\r\n            {currentLocation && window.google && window.google.maps && (\r\n              <Marker\r\n                position={currentLocation}\r\n                icon={{\r\n                  url: '/icons/current-location.png',\r\n                  scaledSize: new google.maps.Size(30, 30)\r\n                }}\r\n                title=\"Tu ubicaci√≥n\"\r\n              />\r\n            )}\r\n\r\n            {/* Marcadores de paradas */}\r\n            {window.google && window.google.maps && stops.map((stop) => (\r\n              <Marker\r\n                key={stop.orderId}\r\n                position={stop.coordinates || { lat: 0, lng: 0 }}\r\n                onClick={() => setSelectedStop(stop)}\r\n                icon={{\r\n                  url: stop.status === 'completed' ? '/icons/marker-green.png' :\r\n                       stop.status === 'current' ? '/icons/marker-blue.png' : '/icons/marker-red.png',\r\n                  scaledSize: new google.maps.Size(25, 25)\r\n                }}\r\n                title={`${stop.orderNumber} - ${stop.address}`}\r\n              />\r\n            ))}\r\n\r\n            {/* Info window para parada seleccionada */}\r\n            {selectedStop && selectedStop.coordinates && (\r\n              <InfoWindow\r\n                position={selectedStop.coordinates}\r\n                onCloseClick={() => setSelectedStop(null)}\r\n              >\r\n                <div className=\"p-2 max-w-xs\">\r\n                  <h3 className=\"font-semibold\">{selectedStop.orderNumber}</h3>\r\n                  <p className=\"text-sm text-gray-600\">{selectedStop.address}</p>\r\n                  <p className=\"text-sm\">Total: {formatCurrency(selectedStop.total)}</p>\r\n                  <p className=\"text-sm\">Items: {selectedStop.items}</p>\r\n                  {selectedStop.status === 'pending' && (\r\n                    <Button\r\n                      size=\"sm\"\r\n                      className=\"mt-2 w-full\"\r\n                      onClick={() => handleCompleteDelivery(selectedStop)}\r\n                    >\r\n                      <CheckCircle className=\"h-4 w-4 mr-1\" />\r\n                      Completar Entrega\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </InfoWindow>\r\n            )}\r\n          </GoogleMap>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Lista de paradas */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Navigation className=\"h-5 w-5\" />\r\n            Paradas del Recorrido\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {stops.map((stop, index) => (\r\n              <div\r\n                key={stop.orderId}\r\n                className={`p-3 rounded-lg border ${\r\n                  stop.status === 'completed' ? 'bg-green-50 border-green-200' :\r\n                  stop.status === 'current' ? 'bg-blue-50 border-blue-200' :\r\n                  'bg-gray-50 border-gray-200'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\r\n                      stop.status === 'completed' ? 'bg-green-500 text-white' :\r\n                      stop.status === 'current' ? 'bg-blue-500 text-white' :\r\n                      'bg-gray-300 text-gray-700'\r\n                    }`}>\r\n                      {stop.sequence}\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">{stop.orderNumber}</p>\r\n                      <p className=\"text-sm text-gray-600\">{stop.address}</p>\r\n                      <p className=\"text-sm\">\r\n                        {formatCurrency(stop.total)} ‚Ä¢ {stop.items} items\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant={\r\n                      stop.status === 'completed' ? 'default' :\r\n                      stop.status === 'current' ? 'secondary' :\r\n                      'outline'\r\n                    }>\r\n                      {stop.status === 'completed' ? 'Completada' :\r\n                       stop.status === 'current' ? 'Actual' :\r\n                       'Pendiente'}\r\n                    </Badge>\r\n                    {stop.status === 'pending' && (\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleCompleteDelivery(stop)}\r\n                      >\r\n                        <CheckCircle className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["LiveNavigationMap","mapContainerStyle","width","height","defaultCenter","lat","lng","stops","onCompleteDelivery","onNavigationUpdate","currentLocation","setCurrentLocation","useState","directions","setDirections","currentStopIndex","setCurrentStopIndex","selectedStop","setSelectedStop","isNavigating","setIsNavigating","watchId","setWatchId","isGoogleMapsLoaded","setIsGoogleMapsLoaded","mapRef","useRef","useEffect","checkGoogleMaps","window","google","maps","setTimeout","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","longitude","error","console","toast","length","calculateRoute","directionsService","DirectionsService","currentStop","find","stop","status","coordinates","log","result","route","origin","destination","travelMode","TravelMode","DRIVING","optimizeWaypoints","avoidHighways","avoidTolls","unitSystem","UnitSystem","METRIC","language","region","routes","leg","legs","distance","text","duration","steps","startNavigation","id","watchPosition","sequence","calculateDistance","success","address","enableHighAccuracy","timeout","maximumAge","stopNavigation","clearWatch","info","handleCompleteDelivery","response","fetch","method","headers","body","JSON","stringify","orderId","deliveryLocation","deliveryTime","Date","toISOString","deliveryNotes","ok","Error","json","orderNumber","prev","pos1","pos2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","formatCurrency","amount","Intl","NumberFormat","style","currency","format","div","className","Card","CardHeader","CardTitle","Navigation","span","selectedOrders","size","orders","Button","onClick","variant","CardContent","filter","s","GoogleMap","center","zoom","onLoad","map","current","DirectionsRenderer","options","suppressMarkers","polylineOptions","strokeColor","strokeWeight","Marker","icon","url","scaledSize","Size","title","InfoWindow","onCloseClick","h3","p","total","items","CheckCircle","index","Badge"],"mappings":"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"}