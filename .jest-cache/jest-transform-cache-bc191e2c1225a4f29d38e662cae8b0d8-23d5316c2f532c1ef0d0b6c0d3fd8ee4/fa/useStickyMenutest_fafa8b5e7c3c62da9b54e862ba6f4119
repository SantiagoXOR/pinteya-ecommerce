1cd281456ed0116af89884522e9d840d
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA HOOK STICKY MENU
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useStickyMenu = require("../../hooks/useStickyMenu");
// Mock para window scroll
const mockAddEventListener = jest.fn();
const mockRemoveEventListener = jest.fn();
beforeEach(()=>{
    // Reset mocks
    mockAddEventListener.mockClear();
    mockRemoveEventListener.mockClear();
    // Mock window.addEventListener
    Object.defineProperty(window, 'addEventListener', {
        value: mockAddEventListener,
        writable: true
    });
    Object.defineProperty(window, 'removeEventListener', {
        value: mockRemoveEventListener,
        writable: true
    });
    // Mock scroll properties
    Object.defineProperty(window, 'pageYOffset', {
        value: 0,
        writable: true
    });
    Object.defineProperty(document.documentElement, 'scrollTop', {
        value: 0,
        writable: true
    });
});
describe('useStickyMenu', ()=>{
    it('should initialize with non-sticky state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(result.current.isSticky).toBe(false);
    });
    it('should use default threshold of 80', ()=>{
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should use custom threshold', ()=>{
        const customThreshold = 100;
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(customThreshold));
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should add scroll event listener on mount', ()=>{
        (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        expect(mockAddEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should remove scroll event listener on unmount', ()=>{
        const { unmount } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)());
        unmount();
        expect(mockRemoveEventListener).toHaveBeenCalledWith('scroll', expect.any(Function));
    });
    it('should become sticky when scroll exceeds threshold', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock scroll position above threshold
        Object.defineProperty(window, 'pageYOffset', {
            value: 100,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
    it('should not be sticky when scroll is below threshold', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock scroll position below threshold
        Object.defineProperty(window, 'pageYOffset', {
            value: 50,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(false);
    });
    it('should use documentElement.scrollTop as fallback', ()=>{
        const threshold = 80;
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(threshold));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Mock pageYOffset as undefined and use scrollTop
        Object.defineProperty(window, 'pageYOffset', {
            value: undefined,
            writable: true
        });
        Object.defineProperty(document.documentElement, 'scrollTop', {
            value: 100,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
    it('should handle threshold of 0', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useStickyMenu.useStickyMenu)(0));
        // Simulate scroll event
        const scrollHandler = mockAddEventListener.mock.calls[0][1];
        // Any scroll should make it sticky
        Object.defineProperty(window, 'pageYOffset', {
            value: 1,
            writable: true
        });
        (0, _react.act)(()=>{
            scrollHandler();
        });
        expect(result.current.isSticky).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,