a0d0f73d5e4c36c5d5c4dd3ebd9937cb
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2ne3zxh9ur() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\route.ts";
  var hash = "8e68b5abaa95a27220b9535a736f90fc73ccc6a1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 19
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 18
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "10": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 54
        }
      },
      "11": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "12": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 88
        }
      },
      "14": {
        start: {
          line: 39,
          column: 43
        },
        end: {
          line: 41,
          column: 10
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 74
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "18": {
        start: {
          line: 46,
          column: 29
        },
        end: {
          line: 46,
          column: 52
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 82
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "21": {
        start: {
          line: 50,
          column: 43
        },
        end: {
          line: 52,
          column: 23
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "23": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 107
        }
      },
      "24": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 57,
          column: 48
        }
      },
      "25": {
        start: {
          line: 59,
          column: 15
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "26": {
        start: {
          line: 61,
          column: 34
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "27": {
        start: {
          line: 62,
          column: 32
        },
        end: {
          line: 62,
          column: 78
        }
      },
      "28": {
        start: {
          line: 62,
          column: 70
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "29": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 103
        }
      },
      "30": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 78
        }
      },
      "31": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "32": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 84
        }
      },
      "33": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "34": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 171,
          column: 5
        }
      },
      "35": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "36": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 105
        }
      },
      "38": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "39": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 49
        }
      },
      "40": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 79
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "42": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 52
        }
      },
      "43": {
        start: {
          line: 92,
          column: 34
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "44": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "45": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 68
        }
      },
      "46": {
        start: {
          line: 103,
          column: 47
        },
        end: {
          line: 103,
          column: 146
        }
      },
      "47": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 52
        }
      },
      "48": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 55
        }
      },
      "49": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "50": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 78
        }
      },
      "51": {
        start: {
          line: 109,
          column: 58
        },
        end: {
          line: 123,
          column: 36
        }
      },
      "52": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "53": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 71
        }
      },
      "54": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "55": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 27
        }
      },
      "56": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 64
        }
      },
      "57": {
        start: {
          line: 134,
          column: 15
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "58": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "59": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "60": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 70
        }
      },
      "61": {
        start: {
          line: 144,
          column: 43
        },
        end: {
          line: 148,
          column: 10
        }
      },
      "62": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 62
        }
      },
      "63": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 55
        }
      },
      "64": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 68
        }
      },
      "66": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "67": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 62
        }
      },
      "68": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "69": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 66
        }
      },
      "70": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "71": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "72": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 72
        }
      },
      "73": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "74": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 106
        }
      },
      "75": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "76": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 186,
          column: 49
        }
      },
      "77": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 79
        }
      },
      "78": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "79": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 52
        }
      },
      "80": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "81": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "82": {
        start: {
          line: 199,
          column: 21
        },
        end: {
          line: 199,
          column: 41
        }
      },
      "83": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 52
        }
      },
      "84": {
        start: {
          line: 202,
          column: 123
        },
        end: {
          line: 202,
          column: 127
        }
      },
      "85": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "86": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "87": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 75
        }
      },
      "88": {
        start: {
          line: 212,
          column: 47
        },
        end: {
          line: 212,
          column: 146
        }
      },
      "89": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "90": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 85
        }
      },
      "91": {
        start: {
          line: 216,
          column: 58
        },
        end: {
          line: 230,
          column: 36
        }
      },
      "92": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "93": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 78
        }
      },
      "94": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 237,
          column: 19
        }
      },
      "95": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 27
        }
      },
      "96": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 71
        }
      },
      "97": {
        start: {
          line: 241,
          column: 15
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "98": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 89
        }
      },
      "99": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "100": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "101": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 88
        }
      },
      "102": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 38
        }
      },
      "103": {
        start: {
          line: 258,
          column: 48
        },
        end: {
          line: 258,
          column: 136
        }
      },
      "104": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "105": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 101
        }
      },
      "106": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 34
        }
      },
      "107": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "108": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 60
        }
      },
      "109": {
        start: {
          line: 281,
          column: 44
        },
        end: {
          line: 283,
          column: 28
        }
      },
      "110": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "111": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 62
        }
      },
      "112": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 290,
          column: 15
        }
      },
      "113": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 47
        }
      },
      "114": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 298,
          column: 11
        }
      },
      "115": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 67
        }
      },
      "116": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "117": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 449,
          column: 5
        }
      },
      "118": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 76
        }
      },
      "119": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 49
        }
      },
      "120": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 79
        }
      },
      "121": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "122": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 52
        }
      },
      "123": {
        start: {
          line: 316,
          column: 34
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "124": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "125": {
        start: {
          line: 325,
          column: 21
        },
        end: {
          line: 325,
          column: 41
        }
      },
      "126": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 51
        }
      },
      "127": {
        start: {
          line: 328,
          column: 148
        },
        end: {
          line: 328,
          column: 152
        }
      },
      "128": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "129": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "130": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "131": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "132": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "133": {
        start: {
          line: 346,
          column: 61
        },
        end: {
          line: 346,
          column: 152
        }
      },
      "134": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "135": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 82
        }
      },
      "136": {
        start: {
          line: 349,
          column: 62
        },
        end: {
          line: 353,
          column: 36
        }
      },
      "137": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "138": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 355,
          column: 74
        }
      },
      "139": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 360,
          column: 23
        }
      },
      "140": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 31
        }
      },
      "141": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "142": {
        start: {
          line: 366,
          column: 19
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "143": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 69
        }
      },
      "144": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 372,
          column: 19
        }
      },
      "145": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 36
        }
      },
      "146": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 377,
          column: 19
        }
      },
      "147": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 64
        }
      },
      "148": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 385,
          column: 15
        }
      },
      "149": {
        start: {
          line: 388,
          column: 63
        },
        end: {
          line: 388,
          column: 182
        }
      },
      "150": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "151": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 94
        }
      },
      "152": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 395,
          column: 15
        }
      },
      "153": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "154": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 87
        }
      },
      "155": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 403,
          column: 52
        }
      },
      "156": {
        start: {
          line: 406,
          column: 27
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "157": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 58
        }
      },
      "158": {
        start: {
          line: 423,
          column: 61
        },
        end: {
          line: 423,
          column: 186
        }
      },
      "159": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "160": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 73
        }
      },
      "161": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 430,
          column: 15
        }
      },
      "162": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "163": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 47
        }
      },
      "164": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 441,
          column: 11
        }
      },
      "165": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 66
        }
      },
      "166": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 448,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "ensureOneDefaultAddress",
        decl: {
          start: {
            line: 35,
            column: 19
          },
          end: {
            line: 35,
            column: 42
          }
        },
        loc: {
          start: {
            line: 35,
            column: 51
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 62,
            column: 62
          },
          end: {
            line: 62,
            column: 63
          }
        },
        loc: {
          start: {
            line: 62,
            column: 70
          },
          end: {
            line: 62,
            column: 77
          }
        },
        line: 62
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 18
          }
        },
        loc: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 172,
            column: 1
          }
        },
        line: 75
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 173,
            column: 15
          },
          end: {
            line: 173,
            column: 19
          }
        },
        loc: {
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 173
      },
      "9": {
        name: "PUT",
        decl: {
          start: {
            line: 308,
            column: 15
          },
          end: {
            line: 308,
            column: 18
          }
        },
        loc: {
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 450,
            column: 1
          }
        },
        line: 308
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 70,
            column: 9
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 28
          }
        }, {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 55
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 70,
            column: 9
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 35
          },
          end: {
            line: 89,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 45
          },
          end: {
            line: 89,
            column: 58
          }
        }, {
          start: {
            line: 89,
            column: 61
          },
          end: {
            line: 89,
            column: 77
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 141,
            column: 9
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 17
          }
        }, {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 51
          }
        }],
        line: 107
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 60
          }
        }, {
          start: {
            line: 112,
            column: 64
          },
          end: {
            line: 112,
            column: 68
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 113,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 113,
            column: 75
          }
        }, {
          start: {
            line: 113,
            column: 79
          },
          end: {
            line: 113,
            column: 83
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "13": {
        loc: {
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "15": {
        loc: {
          start: {
            line: 162,
            column: 18
          },
          end: {
            line: 162,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 18
          },
          end: {
            line: 162,
            column: 27
          }
        }, {
          start: {
            line: 162,
            column: 31
          },
          end: {
            line: 162,
            column: 33
          }
        }],
        line: 162
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 187,
            column: 35
          },
          end: {
            line: 187,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 45
          },
          end: {
            line: 187,
            column: 58
          }
        }, {
          start: {
            line: 187,
            column: 61
          },
          end: {
            line: 187,
            column: 77
          }
        }],
        line: 187
      },
      "18": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 17
          }
        }, {
          start: {
            line: 203,
            column: 21
          },
          end: {
            line: 203,
            column: 28
          }
        }, {
          start: {
            line: 203,
            column: 32
          },
          end: {
            line: 203,
            column: 37
          }
        }, {
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 203,
            column: 53
          }
        }],
        line: 203
      },
      "21": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 248,
            column: 9
          }
        }],
        line: 214
      },
      "22": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 214,
            column: 51
          }
        }],
        line: 214
      },
      "23": {
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 219,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 219,
            column: 60
          }
        }, {
          start: {
            line: 219,
            column: 64
          },
          end: {
            line: 219,
            column: 68
          }
        }],
        line: 219
      },
      "24": {
        loc: {
          start: {
            line: 220,
            column: 27
          },
          end: {
            line: 220,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 27
          },
          end: {
            line: 220,
            column: 75
          }
        }, {
          start: {
            line: 220,
            column: 79
          },
          end: {
            line: 220,
            column: 83
          }
        }],
        line: 220
      },
      "25": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "26": {
        loc: {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "27": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: 256,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }],
        line: 250
      },
      "28": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "29": {
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 34
          }
        }, {
          start: {
            line: 260,
            column: 38
          },
          end: {
            line: 260,
            column: 68
          }
        }],
        line: 260
      },
      "30": {
        loc: {
          start: {
            line: 270,
            column: 23
          },
          end: {
            line: 270,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 23
          },
          end: {
            line: 270,
            column: 32
          }
        }, {
          start: {
            line: 270,
            column: 36
          },
          end: {
            line: 270,
            column: 40
          }
        }],
        line: 270
      },
      "31": {
        loc: {
          start: {
            line: 272,
            column: 19
          },
          end: {
            line: 272,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 19
          },
          end: {
            line: 272,
            column: 24
          }
        }, {
          start: {
            line: 272,
            column: 28
          },
          end: {
            line: 272,
            column: 30
          }
        }],
        line: 272
      },
      "32": {
        loc: {
          start: {
            line: 274,
            column: 21
          },
          end: {
            line: 274,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 21
          },
          end: {
            line: 274,
            column: 28
          }
        }, {
          start: {
            line: 274,
            column: 32
          },
          end: {
            line: 274,
            column: 43
          }
        }],
        line: 274
      },
      "33": {
        loc: {
          start: {
            line: 275,
            column: 19
          },
          end: {
            line: 275,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 19
          },
          end: {
            line: 275,
            column: 24
          }
        }, {
          start: {
            line: 275,
            column: 28
          },
          end: {
            line: 275,
            column: 32
          }
        }],
        line: 275
      },
      "34": {
        loc: {
          start: {
            line: 276,
            column: 18
          },
          end: {
            line: 276,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 18
          },
          end: {
            line: 276,
            column: 22
          }
        }, {
          start: {
            line: 276,
            column: 26
          },
          end: {
            line: 276,
            column: 36
          }
        }],
        line: 276
      },
      "35": {
        loc: {
          start: {
            line: 277,
            column: 24
          },
          end: {
            line: 277,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 24
          },
          end: {
            line: 277,
            column: 34
          }
        }, {
          start: {
            line: 277,
            column: 38
          },
          end: {
            line: 277,
            column: 43
          }
        }],
        line: 277
      },
      "36": {
        loc: {
          start: {
            line: 278,
            column: 31
          },
          end: {
            line: 278,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 31
          },
          end: {
            line: 278,
            column: 48
          }
        }, {
          start: {
            line: 278,
            column: 52
          },
          end: {
            line: 278,
            column: 61
          }
        }],
        line: 278
      },
      "37": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "38": {
        loc: {
          start: {
            line: 313,
            column: 35
          },
          end: {
            line: 313,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 45
          },
          end: {
            line: 313,
            column: 58
          }
        }, {
          start: {
            line: 313,
            column: 61
          },
          end: {
            line: 313,
            column: 77
          }
        }],
        line: 313
      },
      "39": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "40": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "41": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "42": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 336,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 336,
            column: 17
          }
        }, {
          start: {
            line: 336,
            column: 21
          },
          end: {
            line: 336,
            column: 28
          }
        }, {
          start: {
            line: 336,
            column: 32
          },
          end: {
            line: 336,
            column: 37
          }
        }, {
          start: {
            line: 336,
            column: 41
          },
          end: {
            line: 336,
            column: 53
          }
        }],
        line: 336
      },
      "43": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: 366,
            column: 19
          },
          end: {
            line: 378,
            column: 13
          }
        }],
        line: 347
      },
      "44": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 25
          }
        }, {
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 58
          }
        }],
        line: 347
      },
      "45": {
        loc: {
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "46": {
        loc: {
          start: {
            line: 366,
            column: 19
          },
          end: {
            line: 378,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 19
          },
          end: {
            line: 378,
            column: 13
          }
        }, {
          start: {
            line: 373,
            column: 19
          },
          end: {
            line: 378,
            column: 13
          }
        }],
        line: 366
      },
      "47": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "48": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 389,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 389,
            column: 24
          }
        }, {
          start: {
            line: 389,
            column: 28
          },
          end: {
            line: 389,
            column: 44
          }
        }],
        line: 389
      },
      "49": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "50": {
        loc: {
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 32
          }
        }, {
          start: {
            line: 409,
            column: 36
          },
          end: {
            line: 409,
            column: 40
          }
        }],
        line: 409
      },
      "51": {
        loc: {
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 411,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 19
          },
          end: {
            line: 411,
            column: 24
          }
        }, {
          start: {
            line: 411,
            column: 28
          },
          end: {
            line: 411,
            column: 30
          }
        }],
        line: 411
      },
      "52": {
        loc: {
          start: {
            line: 413,
            column: 21
          },
          end: {
            line: 413,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 21
          },
          end: {
            line: 413,
            column: 28
          }
        }, {
          start: {
            line: 413,
            column: 32
          },
          end: {
            line: 413,
            column: 43
          }
        }],
        line: 413
      },
      "53": {
        loc: {
          start: {
            line: 414,
            column: 19
          },
          end: {
            line: 414,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 19
          },
          end: {
            line: 414,
            column: 24
          }
        }, {
          start: {
            line: 414,
            column: 28
          },
          end: {
            line: 414,
            column: 32
          }
        }],
        line: 414
      },
      "54": {
        loc: {
          start: {
            line: 415,
            column: 18
          },
          end: {
            line: 415,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 18
          },
          end: {
            line: 415,
            column: 22
          }
        }, {
          start: {
            line: 415,
            column: 26
          },
          end: {
            line: 415,
            column: 36
          }
        }],
        line: 415
      },
      "55": {
        loc: {
          start: {
            line: 416,
            column: 24
          },
          end: {
            line: 416,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 24
          },
          end: {
            line: 416,
            column: 34
          }
        }, {
          start: {
            line: 416,
            column: 38
          },
          end: {
            line: 416,
            column: 43
          }
        }],
        line: 416
      },
      "56": {
        loc: {
          start: {
            line: 417,
            column: 31
          },
          end: {
            line: 417,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 31
          },
          end: {
            line: 417,
            column: 48
          }
        }, {
          start: {
            line: 417,
            column: 52
          },
          end: {
            line: 417,
            column: 61
          }
        }],
        line: 417
      },
      "57": {
        loc: {
          start: {
            line: 418,
            column: 22
          },
          end: {
            line: 418,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 22
          },
          end: {
            line: 418,
            column: 30
          }
        }, {
          start: {
            line: 418,
            column: 34
          },
          end: {
            line: 418,
            column: 38
          }
        }],
        line: 418
      },
      "58": {
        loc: {
          start: {
            line: 419,
            column: 23
          },
          end: {
            line: 419,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 23
          },
          end: {
            line: 419,
            column: 32
          }
        }, {
          start: {
            line: 419,
            column: 36
          },
          end: {
            line: 419,
            column: 40
          }
        }],
        line: 419
      },
      "59": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE DIRECCIONES DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS\r\n// ===================================\r\n\r\n/**\r\n * Asegura que el usuario tenga exactamente una direcci\xF3n predeterminada\r\n */\r\nasync function ensureOneDefaultAddress(userId: string) {\r\n  try {\r\n    console.log('\uD83D\uDD0D Verificando direcciones predeterminadas para usuario:', userId);\r\n\r\n    // Obtener todas las direcciones predeterminadas del usuario\r\n    const { data: defaultAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, created_at')\r\n      .eq('user_id', userId)\r\n      .eq('is_default', true)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (!defaultAddresses) {\r\n      console.log('\u274C Error al obtener direcciones predeterminadas');\r\n      return;\r\n    }\r\n\r\n    const defaultCount = defaultAddresses.length;\r\n    console.log(`\uD83D\uDD0D Encontradas ${defaultCount} direcciones predeterminadas`);\r\n\r\n    if (defaultCount === 0) {\r\n      // No hay direcciones predeterminadas, marcar la m\xE1s reciente\r\n      const { data: allAddresses } = await supabaseAdmin\r\n        .from('user_addresses')\r\n        .select('id')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (allAddresses && allAddresses.length > 0) {\r\n        console.log('\uD83D\uDD04 Marcando direcci\xF3n m\xE1s reciente como predeterminada:', allAddresses[0].id);\r\n        await supabaseAdmin\r\n          .from('user_addresses')\r\n          .update({ is_default: true })\r\n          .eq('id', allAddresses[0].id);\r\n      }\r\n    } else if (defaultCount > 1) {\r\n      // Hay m\xFAltiples direcciones predeterminadas, mantener solo la m\xE1s reciente\r\n      const keepDefaultId = defaultAddresses[0].id;\r\n      const idsToUpdate = defaultAddresses.slice(1).map(addr => addr.id);\r\n\r\n      console.log(`\uD83D\uDD04 Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);\r\n      console.log('\uD83D\uDD04 Manteniendo como predeterminada:', keepDefaultId);\r\n\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .in('id', idsToUpdate);\r\n    } else {\r\n      console.log('\u2705 Usuario tiene exactamente una direcci\xF3n predeterminada');\r\n    }\r\n  } catch (error) {\r\n    console.error('\u274C Error en ensureOneDefaultAddress:', error);\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener direcciones del usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDD0D GET /api/user/addresses - Iniciando petici\xF3n');\r\n\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/addresses');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    console.log('\uD83D\uDD0D Session:', session ? 'Autenticado' : 'No autenticado');\r\n\r\n    if (!session?.user) {\r\n      console.log('\u274C Usuario no autenticado');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n\r\n    // Obtener usuario primero\r\n    console.log('\uD83D\uDD0D Buscando usuario con id:', session.user.id);\r\n    let { data: user, error: userError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    console.log('\uD83D\uDD0D Usuario encontrado:', user);\r\n    console.log('\uD83D\uDD0D Error de usuario:', userError);\r\n\r\n    // Si el usuario no existe, crearlo autom\xE1ticamente\r\n    if (!user && userError?.code === 'PGRST116') {\r\n      console.log('\uD83D\uDD04 Usuario no existe, cre\xE1ndolo autom\xE1ticamente...');\r\n\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('user_profiles')\r\n        .insert({\r\n          id: session.user.id,\r\n          email: session.user.email,\r\n          first_name: session.user.name?.split(' ')[0] || null,\r\n          last_name: session.user.name?.split(' ').slice(1).join(' ') || null,\r\n          role_id: null,\r\n          is_active: true,\r\n          metadata: {\r\n            created_via: 'nextauth_auto',\r\n            source: 'address_api',\r\n            created_at: new Date().toISOString()\r\n          },\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select('id')\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('\u274C Error creando usuario:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error creando usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      user = newUser;\r\n      console.log('\u2705 Usuario creado exitosamente:', user);\r\n    } else if (!user) {\r\n      console.log('\u274C Usuario no encontrado y error inesperado:', userError);\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener direcciones del usuario\r\n    console.log('\uD83D\uDD0D Buscando direcciones para user_id:', user.id);\r\n    const { data: addresses, error } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .order('is_default', { ascending: false })\r\n      .order('created_at', { ascending: false });\r\n\r\n    console.log('\uD83D\uDD0D Direcciones encontradas:', addresses);\r\n    console.log('\uD83D\uDD0D Error de direcciones:', error);\r\n\r\n    if (error) {\r\n      console.error('\u274C Error al obtener direcciones:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener direcciones' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('\u2705 Devolviendo direcciones exitosamente');\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: addresses || [],\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/addresses:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Crear nueva direcci\xF3n\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDD0D POST /api/user/addresses - Iniciando petici\xF3n');\r\n\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/user/addresses');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    console.log('\uD83D\uDD0D Session:', session ? 'Autenticado' : 'No autenticado');\r\n\r\n    if (!session?.user) {\r\n      console.log('\u274C Usuario no autenticado');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const body = await request.json();\r\n    console.log('Received address data:', body); // Debug\r\n\r\n    // Validar datos requeridos\r\n    const {\r\n      name,\r\n      street,\r\n      apartment,\r\n      city,\r\n      postal_code,\r\n      state,\r\n      country,\r\n      phone,\r\n      type,\r\n      is_default,\r\n      validation_status\r\n    } = body;\r\n\r\n    if (!name || !street || !city || !postal_code) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre, direcci\xF3n, ciudad y c\xF3digo postal son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    console.log('\uD83D\uDD0D POST - Buscando usuario con id:', session.user.id);\r\n    let { data: user, error: userError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    // Si el usuario no existe, crearlo autom\xE1ticamente\r\n    if (!user && userError?.code === 'PGRST116') {\r\n      console.log('\uD83D\uDD04 POST - Usuario no existe, cre\xE1ndolo autom\xE1ticamente...');\r\n\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('user_profiles')\r\n        .insert({\r\n          id: session.user.id,\r\n          email: session.user.email,\r\n          first_name: session.user.name?.split(' ')[0] || null,\r\n          last_name: session.user.name?.split(' ').slice(1).join(' ') || null,\r\n          role_id: null,\r\n          is_active: true,\r\n          metadata: {\r\n            created_via: 'nextauth_auto',\r\n            source: 'address_api_post',\r\n            created_at: new Date().toISOString()\r\n          },\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select('id')\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('\u274C POST - Error creando usuario:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error creando usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      user = newUser;\r\n      console.log('\u2705 POST - Usuario creado exitosamente:', user);\r\n    } else if (!user) {\r\n      console.log('\u274C POST - Usuario no encontrado y error inesperado:', userError);\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Manejar l\xF3gica de direcci\xF3n predeterminada\r\n    if (is_default) {\r\n      console.log('\uD83D\uDD04 POST - Desmarcando otras direcciones como predeterminadas');\r\n      // Desmarcar todas las otras direcciones como predeterminadas\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .eq('user_id', user.id);\r\n    } else {\r\n      // Si no es predeterminada, verificar si es la primera direcci\xF3n del usuario\r\n      const { data: existingAddresses } = await supabaseAdmin\r\n        .from('user_addresses')\r\n        .select('id')\r\n        .eq('user_id', user.id);\r\n\r\n      // Si es la primera direcci\xF3n, marcarla como predeterminada autom\xE1ticamente\r\n      if (!existingAddresses || existingAddresses.length === 0) {\r\n        console.log('\uD83D\uDD04 POST - Primera direcci\xF3n del usuario, marcando como predeterminada');\r\n        is_default = true;\r\n      }\r\n    }\r\n\r\n    // Crear nueva direcci\xF3n\r\n    const addressData = {\r\n      user_id: user.id,\r\n      name,\r\n      street,\r\n      apartment: apartment || null,\r\n      city,\r\n      state: state || '',\r\n      postal_code,\r\n      country: country || 'Argentina',\r\n      phone: phone || null,\r\n      type: type || 'shipping',\r\n      is_default: is_default || false,\r\n      validation_status: validation_status || 'pending',\r\n    };\r\n\r\n    console.log('Inserting address data:', addressData); // Debug\r\n\r\n    const { data: newAddress, error } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .insert([addressData])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al crear direcci\xF3n:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear direcci\xF3n' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Asegurar que solo haya una direcci\xF3n predeterminada\r\n    await ensureOneDefaultAddress(user.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: newAddress,\r\n      message: 'Direcci\xF3n creada correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/addresses:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Actualizar direcci\xF3n existente\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83D\uDD04 PUT /api/user/addresses - Iniciando actualizaci\xF3n');\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    console.log('\uD83D\uDD0D Session:', session ? 'Autenticado' : 'No autenticado');\r\n\r\n    if (!session?.user) {\r\n      console.log('\u274C Usuario no autenticado');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    console.log('Received update data:', body); // Debug\r\n\r\n    // Validar datos requeridos\r\n    const {\r\n      id,\r\n      name,\r\n      street,\r\n      apartment,\r\n      city,\r\n      postal_code,\r\n      state,\r\n      country,\r\n      phone,\r\n      type,\r\n      is_default,\r\n      validation_status,\r\n      latitude,\r\n      longitude\r\n    } = body;\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de direcci\xF3n es requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!name || !street || !city || !postal_code) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre, direcci\xF3n, ciudad y c\xF3digo postal son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Buscar o crear usuario\r\n    let user;\r\n    try {\r\n      const { data: existingUser, error: userError } = await supabaseAdmin\r\n        .from('users')\r\n        .select('id')\r\n        .eq('id', session.user.id)\r\n        .single();\r\n\r\n      if (userError && userError.code === 'PGRST116') {\r\n        console.log('\uD83D\uDD04 Usuario no existe, cre\xE1ndolo autom\xE1ticamente...');\r\n        const { data: newUser, error: createError } = await supabaseAdmin\r\n          .from('users')\r\n          .insert([{ id: session.user.id }])\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('Error al crear usuario:', createError);\r\n          return NextResponse.json(\r\n            { error: 'Error al crear usuario' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        user = newUser;\r\n        console.log('\u2705 Usuario creado exitosamente:', { id: user.id });\r\n      } else if (userError) {\r\n        console.error('Error al buscar usuario:', userError);\r\n        return NextResponse.json(\r\n          { error: 'Error al buscar usuario' },\r\n          { status: 500 }\r\n        );\r\n      } else {\r\n        user = existingUser;\r\n        console.log('\uD83D\uDD0D Usuario encontrado:', { id: user.id });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en manejo de usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error interno del servidor' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la direcci\xF3n pertenece al usuario\r\n    const { data: existingAddress, error: addressError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, user_id')\r\n      .eq('id', id)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (addressError || !existingAddress) {\r\n      console.error('Direcci\xF3n no encontrada o no pertenece al usuario:', addressError);\r\n      return NextResponse.json(\r\n        { error: 'Direcci\xF3n no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Manejar l\xF3gica de direcci\xF3n predeterminada en actualizaci\xF3n\r\n    if (is_default) {\r\n      console.log('\uD83D\uDD04 PUT - Desmarcando otras direcciones como predeterminadas');\r\n      // Desmarcar todas las otras direcciones como predeterminadas\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .eq('user_id', user.id)\r\n        .neq('id', id);\r\n    }\r\n\r\n    // Actualizar direcci\xF3n\r\n    const updateData = {\r\n      name,\r\n      street,\r\n      apartment: apartment || null,\r\n      city,\r\n      state: state || '',\r\n      postal_code,\r\n      country: country || 'Argentina',\r\n      phone: phone || null,\r\n      type: type || 'shipping',\r\n      is_default: is_default || false,\r\n      validation_status: validation_status || 'pending',\r\n      latitude: latitude || null,\r\n      longitude: longitude || null,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    console.log('Updating address data:', updateData); // Debug\r\n\r\n    const { data: updatedAddress, error: updateError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .update(updateData)\r\n      .eq('id', id)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error al actualizar direcci\xF3n:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar direcci\xF3n' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    console.log('\u2705 Direcci\xF3n actualizada exitosamente:', { id: updatedAddress.id });\r\n\r\n    // Asegurar que solo haya una direcci\xF3n predeterminada\r\n    await ensureOneDefaultAddress(user.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: updatedAddress,\r\n      message: 'Direcci\xF3n actualizada correctamente',\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/addresses:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "PUT", "runtime", "ensureOneDefaultAddress", "userId", "console", "log", "data", "defaultAddresses", "supabaseAdmin", "from", "select", "eq", "order", "ascending", "defaultCount", "length", "allAddresses", "limit", "id", "update", "is_default", "keepDefaultId", "idsToUpdate", "slice", "map", "addr", "in", "error", "request", "NextResponse", "json", "status", "session", "auth", "user", "errorResponse", "success", "userError", "single", "code", "newUser", "createError", "insert", "email", "first_name", "name", "split", "last_name", "join", "role_id", "is_active", "metadata", "created_via", "source", "created_at", "Date", "toISOString", "updated_at", "addresses", "body", "street", "apartment", "city", "postal_code", "state", "country", "phone", "type", "validation_status", "existingAddresses", "addressData", "user_id", "newAddress", "message", "latitude", "longitude", "existingUser", "existingAddress", "addressError", "neq", "updateData", "updatedAddress", "updateError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e68b5abaa95a27220b9535a736f90fc73ccc6a1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ne3zxh9ur = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ne3zxh9ur();
cov_2ne3zxh9ur().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ne3zxh9ur().f[0]++;
  cov_2ne3zxh9ur().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2ne3zxh9ur().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().f[1]++;
    cov_2ne3zxh9ur().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().f[2]++;
    cov_2ne3zxh9ur().s[5]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().f[3]++;
    cov_2ne3zxh9ur().s[6]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().f[4]++;
    cov_2ne3zxh9ur().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ne3zxh9ur().s[8]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_2ne3zxh9ur().s[9]++, require("../../../../lib/integrations/supabase"));
const _config =
/* istanbul ignore next */
(cov_2ne3zxh9ur().s[10]++, require("../../../../lib/auth/config"));
const runtime =
/* istanbul ignore next */
(cov_2ne3zxh9ur().s[11]++, 'nodejs');
// ===================================
// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS
// ===================================
/**
 * Asegura que el usuario tenga exactamente una direcciÃ³n predeterminada
 */
async function ensureOneDefaultAddress(userId) {
  /* istanbul ignore next */
  cov_2ne3zxh9ur().f[5]++;
  cov_2ne3zxh9ur().s[12]++;
  try {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[13]++;
    console.log('ğ Verificando direcciones predeterminadas para usuario:', userId);
    // Obtener todas las direcciones predeterminadas del usuario
    const {
      data: defaultAddresses
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[14]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, created_at').eq('user_id', userId).eq('is_default', true).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[15]++;
    if (!defaultAddresses) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[0][0]++;
      cov_2ne3zxh9ur().s[16]++;
      console.log('â Error al obtener direcciones predeterminadas');
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[0][1]++;
    }
    const defaultCount =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[18]++, defaultAddresses.length);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[19]++;
    console.log(`ğ Encontradas ${defaultCount} direcciones predeterminadas`);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[20]++;
    if (defaultCount === 0) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[1][0]++;
      // No hay direcciones predeterminadas, marcar la mÃ¡s reciente
      const {
        data: allAddresses
      } =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[21]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('user_id', userId).order('created_at', {
        ascending: false
      }).limit(1));
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[3][0]++, allAddresses) &&
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[3][1]++, allAddresses.length > 0)) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[2][0]++;
        cov_2ne3zxh9ur().s[23]++;
        console.log('ğ Marcando direcciÃ³n mÃ¡s reciente como predeterminada:', allAddresses[0].id);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[24]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: true
        }).eq('id', allAddresses[0].id);
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[2][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[1][1]++;
      cov_2ne3zxh9ur().s[25]++;
      if (defaultCount > 1) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[4][0]++;
        // Hay mÃºltiples direcciones predeterminadas, mantener solo la mÃ¡s reciente
        const keepDefaultId =
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().s[26]++, defaultAddresses[0].id);
        const idsToUpdate =
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().s[27]++, defaultAddresses.slice(1).map(addr => {
          /* istanbul ignore next */
          cov_2ne3zxh9ur().f[6]++;
          cov_2ne3zxh9ur().s[28]++;
          return addr.id;
        }));
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[29]++;
        console.log(`ğ Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[30]++;
        console.log('ğ Manteniendo como predeterminada:', keepDefaultId);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[31]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: false
        }).in('id', idsToUpdate);
      } else {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[4][1]++;
        cov_2ne3zxh9ur().s[32]++;
        console.log('â Usuario tiene exactamente una direcciÃ³n predeterminada');
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[33]++;
    console.error('â Error en ensureOneDefaultAddress:', error);
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2ne3zxh9ur().f[7]++;
  cov_2ne3zxh9ur().s[34]++;
  try {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[35]++;
    console.log('ğ GET /api/user/addresses - Iniciando peticiÃ³n');
    // Verificar que el cliente administrativo estÃ© disponible
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[36]++;
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[5][0]++;
      cov_2ne3zxh9ur().s[37]++;
      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/addresses');
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[38]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[5][1]++;
    }
    // AutenticaciÃ³n con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[39]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[40]++;
    console.log('ğ Session:', session ?
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[6][0]++, 'Autenticado') :
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[6][1]++, 'No autenticado'));
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[41]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[7][0]++;
      cov_2ne3zxh9ur().s[42]++;
      console.log('â Usuario no autenticado');
      const errorResponse =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[43]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[44]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[7][1]++;
    }
    // Obtener usuario primero
    cov_2ne3zxh9ur().s[45]++;
    console.log('ğ Buscando usuario con id:', session.user.id);
    let {
      data: user,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[46]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[47]++;
    console.log('ğ Usuario encontrado:', user);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[48]++;
    console.log('ğ Error de usuario:', userError);
    // Si el usuario no existe, crearlo automÃ¡ticamente
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[9][0]++, !user) &&
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[9][1]++, userError?.code === 'PGRST116')) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[8][0]++;
      cov_2ne3zxh9ur().s[50]++;
      console.log('ğ Usuario no existe, creÃ¡ndolo automÃ¡ticamente...');
      const {
        data: newUser,
        error: createError
      } =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[51]++, await _supabase.supabaseAdmin.from('user_profiles').insert({
        id: session.user.id,
        email: session.user.email,
        first_name:
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[10][0]++, session.user.name?.split(' ')[0]) ||
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[10][1]++, null),
        last_name:
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[11][0]++, session.user.name?.split(' ').slice(1).join(' ')) ||
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[11][1]++, null),
        role_id: null,
        is_active: true,
        metadata: {
          created_via: 'nextauth_auto',
          source: 'address_api',
          created_at: new Date().toISOString()
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }).select('id').single());
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[52]++;
      if (createError) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[12][0]++;
        cov_2ne3zxh9ur().s[53]++;
        console.error('â Error creando usuario:', createError);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[54]++;
        return _server.NextResponse.json({
          error: 'Error creando usuario'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[12][1]++;
      }
      cov_2ne3zxh9ur().s[55]++;
      user = newUser;
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[56]++;
      console.log('â Usuario creado exitosamente:', user);
    } else {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[8][1]++;
      cov_2ne3zxh9ur().s[57]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[13][0]++;
        cov_2ne3zxh9ur().s[58]++;
        console.log('â Usuario no encontrado y error inesperado:', userError);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[59]++;
        return _server.NextResponse.json({
          error: 'Usuario no encontrado'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[13][1]++;
      }
    }
    // Obtener direcciones del usuario
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[60]++;
    console.log('ğ Buscando direcciones para user_id:', user.id);
    const {
      data: addresses,
      error
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[61]++, await _supabase.supabaseAdmin.from('user_addresses').select('*').eq('user_id', user.id).order('is_default', {
      ascending: false
    }).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[62]++;
    console.log('ğ Direcciones encontradas:', addresses);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[63]++;
    console.log('ğ Error de direcciones:', error);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[64]++;
    if (error) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[14][0]++;
      cov_2ne3zxh9ur().s[65]++;
      console.error('â Error al obtener direcciones:', error);
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[66]++;
      return _server.NextResponse.json({
        error: 'Error al obtener direcciones'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[14][1]++;
    }
    cov_2ne3zxh9ur().s[67]++;
    console.log('â Devolviendo direcciones exitosamente');
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[68]++;
    return _server.NextResponse.json({
      success: true,
      data:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[15][0]++, addresses) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[15][1]++, [])
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[69]++;
    console.error('Error en GET /api/user/addresses:', error);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[70]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2ne3zxh9ur().f[8]++;
  cov_2ne3zxh9ur().s[71]++;
  try {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[72]++;
    console.log('ğ POST /api/user/addresses - Iniciando peticiÃ³n');
    // Verificar que el cliente administrativo estÃ© disponible
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[73]++;
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[16][0]++;
      cov_2ne3zxh9ur().s[74]++;
      console.error('Cliente administrativo de Supabase no disponible en POST /api/user/addresses');
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[75]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[16][1]++;
    }
    // AutenticaciÃ³n con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[76]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[77]++;
    console.log('ğ Session:', session ?
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[17][0]++, 'Autenticado') :
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[17][1]++, 'No autenticado'));
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[78]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[18][0]++;
      cov_2ne3zxh9ur().s[79]++;
      console.log('â Usuario no autenticado');
      const errorResponse =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[80]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[81]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[18][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[82]++, await request.json());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[83]++;
    console.log('Received address data:', body); // Debug
    // Validar datos requeridos
    const {
      name,
      street,
      apartment,
      city,
      postal_code,
      state,
      country,
      phone,
      type,
      is_default,
      validation_status
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[84]++, body);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[85]++;
    if (
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[20][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[20][1]++, !street) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[20][2]++, !city) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[20][3]++, !postal_code)) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[19][0]++;
      cov_2ne3zxh9ur().s[86]++;
      return _server.NextResponse.json({
        error: 'Nombre, direcciÃ³n, ciudad y cÃ³digo postal son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[19][1]++;
    }
    // Obtener usuario
    cov_2ne3zxh9ur().s[87]++;
    console.log('ğ POST - Buscando usuario con id:', session.user.id);
    let {
      data: user,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[88]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    // Si el usuario no existe, crearlo automÃ¡ticamente
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[89]++;
    if (
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[22][0]++, !user) &&
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[22][1]++, userError?.code === 'PGRST116')) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[21][0]++;
      cov_2ne3zxh9ur().s[90]++;
      console.log('ğ POST - Usuario no existe, creÃ¡ndolo automÃ¡ticamente...');
      const {
        data: newUser,
        error: createError
      } =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[91]++, await _supabase.supabaseAdmin.from('user_profiles').insert({
        id: session.user.id,
        email: session.user.email,
        first_name:
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[23][0]++, session.user.name?.split(' ')[0]) ||
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[23][1]++, null),
        last_name:
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[24][0]++, session.user.name?.split(' ').slice(1).join(' ')) ||
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().b[24][1]++, null),
        role_id: null,
        is_active: true,
        metadata: {
          created_via: 'nextauth_auto',
          source: 'address_api_post',
          created_at: new Date().toISOString()
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }).select('id').single());
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[92]++;
      if (createError) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[25][0]++;
        cov_2ne3zxh9ur().s[93]++;
        console.error('â POST - Error creando usuario:', createError);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[94]++;
        return _server.NextResponse.json({
          error: 'Error creando usuario'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[25][1]++;
      }
      cov_2ne3zxh9ur().s[95]++;
      user = newUser;
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[96]++;
      console.log('â POST - Usuario creado exitosamente:', user);
    } else {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[21][1]++;
      cov_2ne3zxh9ur().s[97]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[26][0]++;
        cov_2ne3zxh9ur().s[98]++;
        console.log('â POST - Usuario no encontrado y error inesperado:', userError);
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[99]++;
        return _server.NextResponse.json({
          error: 'Usuario no encontrado'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[26][1]++;
      }
    }
    // Manejar lÃ³gica de direcciÃ³n predeterminada
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[100]++;
    if (is_default) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[27][0]++;
      cov_2ne3zxh9ur().s[101]++;
      console.log('ğ POST - Desmarcando otras direcciones como predeterminadas');
      // Desmarcar todas las otras direcciones como predeterminadas
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[102]++;
      await _supabase.supabaseAdmin.from('user_addresses').update({
        is_default: false
      }).eq('user_id', user.id);
    } else {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[27][1]++;
      // Si no es predeterminada, verificar si es la primera direcciÃ³n del usuario
      const {
        data: existingAddresses
      } =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[103]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('user_id', user.id));
      // Si es la primera direcciÃ³n, marcarla como predeterminada automÃ¡ticamente
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[104]++;
      if (
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[29][0]++, !existingAddresses) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[29][1]++, existingAddresses.length === 0)) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[28][0]++;
        cov_2ne3zxh9ur().s[105]++;
        console.log('ğ POST - Primera direcciÃ³n del usuario, marcando como predeterminada');
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[106]++;
        is_default = true;
      } else
      /* istanbul ignore next */
      {
        cov_2ne3zxh9ur().b[28][1]++;
      }
    }
    // Crear nueva direcciÃ³n
    const addressData =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[107]++, {
      user_id: user.id,
      name,
      street,
      apartment:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[30][0]++, apartment) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[30][1]++, null),
      city,
      state:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[31][0]++, state) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[31][1]++, ''),
      postal_code,
      country:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[32][0]++, country) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[32][1]++, 'Argentina'),
      phone:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[33][0]++, phone) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[33][1]++, null),
      type:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[34][0]++, type) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[34][1]++, 'shipping'),
      is_default:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[35][0]++, is_default) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[35][1]++, false),
      validation_status:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[36][0]++, validation_status) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[36][1]++, 'pending')
    });
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[108]++;
    console.log('Inserting address data:', addressData); // Debug
    const {
      data: newAddress,
      error
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[109]++, await _supabase.supabaseAdmin.from('user_addresses').insert([addressData]).select().single());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[110]++;
    if (error) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[37][0]++;
      cov_2ne3zxh9ur().s[111]++;
      console.error('Error al crear direcciÃ³n:', error);
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[112]++;
      return _server.NextResponse.json({
        error: 'Error al crear direcciÃ³n'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[37][1]++;
    }
    // Asegurar que solo haya una direcciÃ³n predeterminada
    cov_2ne3zxh9ur().s[113]++;
    await ensureOneDefaultAddress(user.id);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[114]++;
    return _server.NextResponse.json({
      success: true,
      data: newAddress,
      message: 'DirecciÃ³n creada correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[115]++;
    console.error('Error en POST /api/user/addresses:', error);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[116]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PUT(request) {
  /* istanbul ignore next */
  cov_2ne3zxh9ur().f[9]++;
  cov_2ne3zxh9ur().s[117]++;
  try {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[118]++;
    console.log('ğ PUT /api/user/addresses - Iniciando actualizaciÃ³n');
    // AutenticaciÃ³n con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[119]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[120]++;
    console.log('ğ Session:', session ?
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[38][0]++, 'Autenticado') :
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[38][1]++, 'No autenticado'));
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[121]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[39][0]++;
      cov_2ne3zxh9ur().s[122]++;
      console.log('â Usuario no autenticado');
      const errorResponse =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[123]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[124]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[39][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[125]++, await request.json());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[126]++;
    console.log('Received update data:', body); // Debug
    // Validar datos requeridos
    const {
      id,
      name,
      street,
      apartment,
      city,
      postal_code,
      state,
      country,
      phone,
      type,
      is_default,
      validation_status,
      latitude,
      longitude
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[127]++, body);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[128]++;
    if (!id) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[40][0]++;
      cov_2ne3zxh9ur().s[129]++;
      return _server.NextResponse.json({
        error: 'ID de direcciÃ³n es requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[40][1]++;
    }
    cov_2ne3zxh9ur().s[130]++;
    if (
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[42][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[42][1]++, !street) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[42][2]++, !city) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[42][3]++, !postal_code)) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[41][0]++;
      cov_2ne3zxh9ur().s[131]++;
      return _server.NextResponse.json({
        error: 'Nombre, direcciÃ³n, ciudad y cÃ³digo postal son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[41][1]++;
    }
    // Buscar o crear usuario
    let user;
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[132]++;
    try {
      const {
        data: existingUser,
        error: userError
      } =
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().s[133]++, await _supabase.supabaseAdmin.from('users').select('id').eq('id', session.user.id).single());
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[134]++;
      if (
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[44][0]++, userError) &&
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[44][1]++, userError.code === 'PGRST116')) {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[43][0]++;
        cov_2ne3zxh9ur().s[135]++;
        console.log('ğ Usuario no existe, creÃ¡ndolo automÃ¡ticamente...');
        const {
          data: newUser,
          error: createError
        } =
        /* istanbul ignore next */
        (cov_2ne3zxh9ur().s[136]++, await _supabase.supabaseAdmin.from('users').insert([{
          id: session.user.id
        }]).select().single());
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[137]++;
        if (createError) {
          /* istanbul ignore next */
          cov_2ne3zxh9ur().b[45][0]++;
          cov_2ne3zxh9ur().s[138]++;
          console.error('Error al crear usuario:', createError);
          /* istanbul ignore next */
          cov_2ne3zxh9ur().s[139]++;
          return _server.NextResponse.json({
            error: 'Error al crear usuario'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ne3zxh9ur().b[45][1]++;
        }
        cov_2ne3zxh9ur().s[140]++;
        user = newUser;
        /* istanbul ignore next */
        cov_2ne3zxh9ur().s[141]++;
        console.log('â Usuario creado exitosamente:', {
          id: user.id
        });
      } else {
        /* istanbul ignore next */
        cov_2ne3zxh9ur().b[43][1]++;
        cov_2ne3zxh9ur().s[142]++;
        if (userError) {
          /* istanbul ignore next */
          cov_2ne3zxh9ur().b[46][0]++;
          cov_2ne3zxh9ur().s[143]++;
          console.error('Error al buscar usuario:', userError);
          /* istanbul ignore next */
          cov_2ne3zxh9ur().s[144]++;
          return _server.NextResponse.json({
            error: 'Error al buscar usuario'
          }, {
            status: 500
          });
        } else {
          /* istanbul ignore next */
          cov_2ne3zxh9ur().b[46][1]++;
          cov_2ne3zxh9ur().s[145]++;
          user = existingUser;
          /* istanbul ignore next */
          cov_2ne3zxh9ur().s[146]++;
          console.log('ğ Usuario encontrado:', {
            id: user.id
          });
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[147]++;
      console.error('Error en manejo de usuario:', error);
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[148]++;
      return _server.NextResponse.json({
        error: 'Error interno del servidor'
      }, {
        status: 500
      });
    }
    // Verificar que la direcciÃ³n pertenece al usuario
    const {
      data: existingAddress,
      error: addressError
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[149]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, user_id').eq('id', id).eq('user_id', user.id).single());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[150]++;
    if (
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[48][0]++, addressError) ||
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().b[48][1]++, !existingAddress)) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[47][0]++;
      cov_2ne3zxh9ur().s[151]++;
      console.error('DirecciÃ³n no encontrada o no pertenece al usuario:', addressError);
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[152]++;
      return _server.NextResponse.json({
        error: 'DirecciÃ³n no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[47][1]++;
    }
    // Manejar lÃ³gica de direcciÃ³n predeterminada en actualizaciÃ³n
    cov_2ne3zxh9ur().s[153]++;
    if (is_default) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[49][0]++;
      cov_2ne3zxh9ur().s[154]++;
      console.log('ğ PUT - Desmarcando otras direcciones como predeterminadas');
      // Desmarcar todas las otras direcciones como predeterminadas
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[155]++;
      await _supabase.supabaseAdmin.from('user_addresses').update({
        is_default: false
      }).eq('user_id', user.id).neq('id', id);
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[49][1]++;
    }
    // Actualizar direcciÃ³n
    const updateData =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[156]++, {
      name,
      street,
      apartment:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[50][0]++, apartment) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[50][1]++, null),
      city,
      state:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[51][0]++, state) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[51][1]++, ''),
      postal_code,
      country:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[52][0]++, country) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[52][1]++, 'Argentina'),
      phone:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[53][0]++, phone) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[53][1]++, null),
      type:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[54][0]++, type) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[54][1]++, 'shipping'),
      is_default:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[55][0]++, is_default) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[55][1]++, false),
      validation_status:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[56][0]++, validation_status) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[56][1]++, 'pending'),
      latitude:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[57][0]++, latitude) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[57][1]++, null),
      longitude:
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[58][0]++, longitude) ||
      /* istanbul ignore next */
      (cov_2ne3zxh9ur().b[58][1]++, null),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[157]++;
    console.log('Updating address data:', updateData); // Debug
    const {
      data: updatedAddress,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_2ne3zxh9ur().s[158]++, await _supabase.supabaseAdmin.from('user_addresses').update(updateData).eq('id', id).eq('user_id', user.id).select().single());
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[159]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_2ne3zxh9ur().b[59][0]++;
      cov_2ne3zxh9ur().s[160]++;
      console.error('Error al actualizar direcciÃ³n:', updateError);
      /* istanbul ignore next */
      cov_2ne3zxh9ur().s[161]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar direcciÃ³n'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ne3zxh9ur().b[59][1]++;
    }
    cov_2ne3zxh9ur().s[162]++;
    console.log('â DirecciÃ³n actualizada exitosamente:', {
      id: updatedAddress.id
    });
    // Asegurar que solo haya una direcciÃ³n predeterminada
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[163]++;
    await ensureOneDefaultAddress(user.id);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[164]++;
    return _server.NextResponse.json({
      success: true,
      data: updatedAddress,
      message: 'DirecciÃ³n actualizada correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[165]++;
    console.error('Error en PUT /api/user/addresses:', error);
    /* istanbul ignore next */
    cov_2ne3zxh9ur().s[166]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,