{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\query-client.ts"],"sourcesContent":["// ===================================\n// CONFIGURACIÓN: TanStack Query Client\n// ===================================\n\nimport { QueryClient } from '@tanstack/react-query'\n\n// Función para detectar errores de red que deben ser reintentados\nfunction shouldRetryError(error: any): boolean {\n  // Errores de red comunes que deben ser reintentados\n  const networkErrors = [\n    'ERR_NETWORK',\n    'ERR_INTERNET_DISCONNECTED',\n    'ERR_CONNECTION_REFUSED',\n    'ERR_CONNECTION_RESET',\n    'ERR_CONNECTION_TIMED_OUT',\n    'ERR_ABORTED', // Incluir ERR_ABORTED para reintentos\n    'NETWORK_ERROR',\n    'TIMEOUT_ERROR',\n  ]\n\n  // Verificar si es un error de red\n  if (error?.code && networkErrors.includes(error.code)) {\n    return true\n  }\n\n  // Verificar por mensaje de error\n  if (error?.message) {\n    const message = error.message.toLowerCase()\n    if (\n      message.includes('network') ||\n      message.includes('fetch') ||\n      message.includes('aborted') ||\n      message.includes('timeout') ||\n      message.includes('connection')\n    ) {\n      return true\n    }\n  }\n\n  // Errores HTTP 5xx (servidor) deben ser reintentados\n  if (error?.status >= 500) {\n    return true\n  }\n\n  return false\n}\n\n// Configuración optimizada para e-commerce con manejo robusto de errores de red\nexport const queryClientConfig = {\n  defaultOptions: {\n    queries: {\n      // Cache por 5 minutos para datos de productos\n      staleTime: 5 * 60 * 1000,\n      // Mantener en cache por 10 minutos\n      gcTime: 10 * 60 * 1000,\n      // Retry logic inteligente con manejo de errores de red\n      retry: (failureCount: number, error: any) => {\n        // No retry para errores 4xx (cliente) excepto 408 (timeout)\n        if (error?.status >= 400 && error?.status < 500 && error?.status !== 408) {\n          return false\n        }\n\n        // Retry para errores de red detectados\n        if (shouldRetryError(error)) {\n          return failureCount < 3 // Más reintentos para errores de red\n        }\n\n        // Máximo 2 reintentos para otros errores de servidor\n        return failureCount < 2\n      },\n      // Intervalo de retry con backoff exponencial más agresivo para errores de red\n      retryDelay: (attemptIndex: number, error: any) => {\n        // Delay más corto para errores de red\n        if (shouldRetryError(error)) {\n          return Math.min(500 * 2 ** attemptIndex, 5000)\n        }\n        // Delay normal para otros errores\n        return Math.min(1000 * 2 ** attemptIndex, 30000)\n      },\n      // Refetch en focus para datos críticos\n      refetchOnWindowFocus: false,\n      // Refetch en reconexión\n      refetchOnReconnect: true,\n      // No refetch en mount si los datos están frescos\n      refetchOnMount: true,\n      // Configuración de red más robusta\n      networkMode: 'online',\n    },\n    mutations: {\n      // Retry para mutaciones críticas con manejo de errores de red\n      retry: (failureCount: number, error: any) => {\n        // Retry para errores de red en mutaciones\n        if (shouldRetryError(error)) {\n          return failureCount < 2\n        }\n        // Un solo retry para otros errores\n        return failureCount < 1\n      },\n      retryDelay: (attemptIndex: number, error: any) => {\n        // Delay más corto para errores de red en mutaciones\n        if (shouldRetryError(error)) {\n          return Math.min(300 * 2 ** attemptIndex, 3000)\n        }\n        return 1000\n      },\n      networkMode: 'online',\n    },\n  },\n}\n\n// Función para crear QueryClient con configuración optimizada\nexport function createQueryClient() {\n  return new QueryClient(queryClientConfig)\n}\n\n// Instancia singleton para uso en la aplicación\nexport const queryClient = createQueryClient()\n\n// Configuración específica para búsquedas\nexport const searchQueryConfig = {\n  // Cache más agresivo para búsquedas\n  staleTime: 2 * 60 * 1000, // 2 minutos\n  gcTime: 5 * 60 * 1000, // 5 minutos\n  // Retry más conservador para búsquedas\n  retry: 1,\n  retryDelay: 500,\n  // No refetch automático para búsquedas\n  refetchOnWindowFocus: false,\n  refetchOnReconnect: false,\n  refetchOnMount: false,\n}\n\n// Keys para queries de búsqueda\nexport const searchQueryKeys = {\n  all: ['search'] as const,\n  searches: () => [...searchQueryKeys.all, 'searches'] as const,\n  search: (query: string) => [...searchQueryKeys.searches(), query] as const,\n  suggestions: (query: string) => [...searchQueryKeys.all, 'suggestions', query] as const,\n  recent: () => [...searchQueryKeys.all, 'recent'] as const,\n  trending: () => [...searchQueryKeys.all, 'trending'] as const,\n} as const\n\n// Utilidades para invalidación de cache\nexport const searchQueryUtils = {\n  // Invalidar todas las búsquedas\n  invalidateAll: () => queryClient.invalidateQueries({ queryKey: searchQueryKeys.all }),\n\n  // Invalidar búsquedas específicas\n  invalidateSearch: (query: string) =>\n    queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(query) }),\n\n  // Limpiar cache de búsquedas\n  clearSearchCache: () => queryClient.removeQueries({ queryKey: searchQueryKeys.all }),\n\n  // Prefetch de búsqueda\n  prefetchSearch: (query: string) =>\n    queryClient.prefetchQuery({\n      queryKey: searchQueryKeys.search(query),\n      queryFn: () => import('@/lib/api/products').then(m => m.searchProducts(query, 6)),\n      ...searchQueryConfig,\n    }),\n}\n"],"names":["createQueryClient","queryClient","queryClientConfig","searchQueryConfig","searchQueryKeys","searchQueryUtils","shouldRetryError","error","networkErrors","code","includes","message","toLowerCase","status","defaultOptions","queries","staleTime","gcTime","retry","failureCount","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","networkMode","mutations","QueryClient","all","searches","search","query","suggestions","recent","trending","invalidateAll","invalidateQueries","queryKey","invalidateSearch","clearSearchCache","removeQueries","prefetchSearch","prefetchQuery","queryFn","then","m","searchProducts"],"mappings":"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"}