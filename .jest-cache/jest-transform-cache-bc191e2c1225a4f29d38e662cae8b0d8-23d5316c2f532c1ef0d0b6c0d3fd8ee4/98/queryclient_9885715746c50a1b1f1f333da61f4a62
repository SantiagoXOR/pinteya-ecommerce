87a7746f5d55fb71a384e2526af9b8ad
// ===================================
// CONFIGURACIÓN: TanStack Query Client
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createQueryClient () {
        return createQueryClient;
    },
    get queryClient () {
        return queryClient;
    },
    get queryClientConfig () {
        return queryClientConfig;
    },
    get searchQueryConfig () {
        return searchQueryConfig;
    },
    get searchQueryKeys () {
        return searchQueryKeys;
    },
    get searchQueryUtils () {
        return searchQueryUtils;
    }
});
const _reactquery = require("@tanstack/react-query");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Función para detectar errores de red que deben ser reintentados
function shouldRetryError(error) {
    // Errores de red comunes que deben ser reintentados
    const networkErrors = [
        'ERR_NETWORK',
        'ERR_INTERNET_DISCONNECTED',
        'ERR_CONNECTION_REFUSED',
        'ERR_CONNECTION_RESET',
        'ERR_CONNECTION_TIMED_OUT',
        'ERR_ABORTED',
        'NETWORK_ERROR',
        'TIMEOUT_ERROR'
    ];
    // Verificar si es un error de red
    if (error?.code && networkErrors.includes(error.code)) {
        return true;
    }
    // Verificar por mensaje de error
    if (error?.message) {
        const message = error.message.toLowerCase();
        if (message.includes('network') || message.includes('fetch') || message.includes('aborted') || message.includes('timeout') || message.includes('connection')) {
            return true;
        }
    }
    // Errores HTTP 5xx (servidor) deben ser reintentados
    if (error?.status >= 500) {
        return true;
    }
    return false;
}
const queryClientConfig = {
    defaultOptions: {
        queries: {
            // Cache por 5 minutos para datos de productos
            staleTime: 5 * 60 * 1000,
            // Mantener en cache por 10 minutos
            gcTime: 10 * 60 * 1000,
            // Retry logic inteligente con manejo de errores de red
            retry: (failureCount, error)=>{
                // No retry para errores 4xx (cliente) excepto 408 (timeout)
                if (error?.status >= 400 && error?.status < 500 && error?.status !== 408) {
                    return false;
                }
                // Retry para errores de red detectados
                if (shouldRetryError(error)) {
                    return failureCount < 3 // Más reintentos para errores de red
                    ;
                }
                // Máximo 2 reintentos para otros errores de servidor
                return failureCount < 2;
            },
            // Intervalo de retry con backoff exponencial más agresivo para errores de red
            retryDelay: (attemptIndex, error)=>{
                // Delay más corto para errores de red
                if (shouldRetryError(error)) {
                    return Math.min(500 * 2 ** attemptIndex, 5000);
                }
                // Delay normal para otros errores
                return Math.min(1000 * 2 ** attemptIndex, 30000);
            },
            // Refetch en focus para datos críticos
            refetchOnWindowFocus: false,
            // Refetch en reconexión
            refetchOnReconnect: true,
            // No refetch en mount si los datos están frescos
            refetchOnMount: true,
            // Configuración de red más robusta
            networkMode: 'online'
        },
        mutations: {
            // Retry para mutaciones críticas con manejo de errores de red
            retry: (failureCount, error)=>{
                // Retry para errores de red en mutaciones
                if (shouldRetryError(error)) {
                    return failureCount < 2;
                }
                // Un solo retry para otros errores
                return failureCount < 1;
            },
            retryDelay: (attemptIndex, error)=>{
                // Delay más corto para errores de red en mutaciones
                if (shouldRetryError(error)) {
                    return Math.min(300 * 2 ** attemptIndex, 3000);
                }
                return 1000;
            },
            networkMode: 'online'
        }
    }
};
function createQueryClient() {
    return new _reactquery.QueryClient(queryClientConfig);
}
const queryClient = createQueryClient();
const searchQueryConfig = {
    // Cache más agresivo para búsquedas
    staleTime: 2 * 60 * 1000,
    gcTime: 5 * 60 * 1000,
    // Retry más conservador para búsquedas
    retry: 1,
    retryDelay: 500,
    // No refetch automático para búsquedas
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
    refetchOnMount: false
};
const searchQueryKeys = {
    all: [
        'search'
    ],
    searches: ()=>[
            ...searchQueryKeys.all,
            'searches'
        ],
    search: (query)=>[
            ...searchQueryKeys.searches(),
            query
        ],
    suggestions: (query)=>[
            ...searchQueryKeys.all,
            'suggestions',
            query
        ],
    recent: ()=>[
            ...searchQueryKeys.all,
            'recent'
        ],
    trending: ()=>[
            ...searchQueryKeys.all,
            'trending'
        ]
};
const searchQueryUtils = {
    // Invalidar todas las búsquedas
    invalidateAll: ()=>queryClient.invalidateQueries({
            queryKey: searchQueryKeys.all
        }),
    // Invalidar búsquedas específicas
    invalidateSearch: (query)=>queryClient.invalidateQueries({
            queryKey: searchQueryKeys.search(query)
        }),
    // Limpiar cache de búsquedas
    clearSearchCache: ()=>queryClient.removeQueries({
            queryKey: searchQueryKeys.all
        }),
    // Prefetch de búsqueda
    prefetchSearch: (query)=>queryClient.prefetchQuery({
            queryKey: searchQueryKeys.search(query),
            queryFn: ()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./api/products"))).then((m)=>m.searchProducts(query, 6)),
            ...searchQueryConfig
        })
};

//# sourceMappingURL=data:application/json;base64,