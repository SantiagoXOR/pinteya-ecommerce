{"version":3,"names":["default","cov_26dnqyya7r","f","s","_default","useRouteOptimization","DEFAULT_OPTIMIZATION_PARAMS","max_shipments_per_route","max_distance_per_route","max_time_per_route","priority_weight","distance_weight","time_weight","CITY_COORDINATES","lat","lng","mockDrivers","id","name","phone","vehicle_type","license_plate","status","max_capacity","calculateDistance","point1","point2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","clusterShipments","shipments","maxClusters","length","b","map","centroids","i","randomIndex","floor","random","shipment","destination","coordinates","push","clusters","Array","fill","iterations","maxIterations","forEach","minDistance","Infinity","closestCluster","centroid","index","distance","changed","cluster","avgLat","reduce","sum","avgLng","newCentroid","filter","optimizeRouteOrder","startLocation","start","unvisited","route","currentLocation","nearestIndex","nearestDistance","nearestShipment","splice","optimizationParams","setOptimizationParams","_react","useState","isOptimizing","setIsOptimizing","queryClient","_reactquery","useQueryClient","data","routes","isLoading","isLoadingRoutes","useQuery","queryKey","queryFn","response","fetch","ok","console","warn","json","error","drivers","isLoadingDrivers","createRouteMutation","useMutation","mutationFn","method","headers","body","JSON","stringify","Error","onSuccess","invalidateQueries","assignDriverMutation","routeId","driverId","driver_id","optimizeRoutes","useCallback","eligibleShipments","includes","maxShipmentsPerRoute","numRoutes","ceil","optimizedRoutes","cities","city","mainCity","_","arr","v","optimizedOrder","totalDistance","waypoints","estimatedTime","round","avgPriority","priorityScore","low","medium","high","urgent","priority","optimizationScore","max","Date","now","total_distance","estimated_time","created_at","toISOString","start_location","optimization_score","sort","routeStats","useMemo","totalRoutes","activeRoutes","r","completedRoutes","totalShipments","avgOptimizationScore","createRoute","mutateAsync","assignDriver","isCreatingRoute","isPending","isAssigningDriver"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useRouteOptimization.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: OPTIMIZACIÓN DE RUTAS PARA LOGÍSTICA\r\n// Descripción: Gestión inteligente de rutas para carriers propios\r\n// Funcionalidades: Optimización automática, clustering geográfico\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// =====================================================\r\n// INTERFACES Y TIPOS\r\n// =====================================================\r\n\r\ninterface Coordinates {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\ninterface ShipmentLocation {\r\n  id: string;\r\n  tracking_number: string;\r\n  status: 'pending' | 'confirmed' | 'in_transit' | 'delivered' | 'exception';\r\n  destination: {\r\n    address: string;\r\n    city: string;\r\n    coordinates?: Coordinates;\r\n  };\r\n  courier: string;\r\n  estimated_delivery?: string;\r\n  cost: number;\r\n  created_at: string;\r\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\r\n  route_id?: string;\r\n}\r\n\r\ninterface OptimizedRoute {\r\n  id: string;\r\n  name: string;\r\n  shipments: ShipmentLocation[];\r\n  total_distance: number;\r\n  estimated_time: number;\r\n  driver?: string;\r\n  vehicle?: string;\r\n  status: 'planned' | 'active' | 'completed';\r\n  created_at: string;\r\n  start_location?: Coordinates;\r\n  waypoints: Coordinates[];\r\n  optimization_score: number;\r\n}\r\n\r\ninterface RouteOptimizationParams {\r\n  max_shipments_per_route?: number;\r\n  max_distance_per_route?: number;\r\n  max_time_per_route?: number;\r\n  priority_weight?: number;\r\n  distance_weight?: number;\r\n  time_weight?: number;\r\n}\r\n\r\ninterface Driver {\r\n  id: string;\r\n  name: string;\r\n  phone: string;\r\n  vehicle_type: string;\r\n  license_plate: string;\r\n  status: 'available' | 'busy' | 'offline';\r\n  current_location?: Coordinates;\r\n  max_capacity: number;\r\n}\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN Y CONSTANTES\r\n// =====================================================\r\n\r\nconst DEFAULT_OPTIMIZATION_PARAMS: RouteOptimizationParams = {\r\n  max_shipments_per_route: 15,\r\n  max_distance_per_route: 50, // km\r\n  max_time_per_route: 480, // 8 horas en minutos\r\n  priority_weight: 0.3,\r\n  distance_weight: 0.4,\r\n  time_weight: 0.3\r\n};\r\n\r\nconst CITY_COORDINATES = {\r\n  'Buenos Aires': { lat: -34.6037, lng: -58.3816 },\r\n  'Córdoba': { lat: -31.4201, lng: -64.1888 },\r\n  'Rosario': { lat: -32.9442, lng: -60.6505 },\r\n  'Mendoza': { lat: -32.8895, lng: -68.8458 },\r\n  'La Plata': { lat: -34.9215, lng: -57.9545 },\r\n  'Alta Gracia': { lat: -31.6539, lng: -64.4281 },\r\n  'Mar del Plata': { lat: -38.0055, lng: -57.5426 },\r\n  'Salta': { lat: -24.7821, lng: -65.4232 },\r\n  'San Miguel de Tucumán': { lat: -26.8083, lng: -65.2176 },\r\n  'Santa Fe': { lat: -31.6333, lng: -60.7000 }\r\n};\r\n\r\n// Datos mock para drivers (estructura actualizada para coincidir con DB)\r\nconst mockDrivers: Driver[] = [\r\n  {\r\n    id: 'driver-1',\r\n    name: 'Carlos Rodríguez',\r\n    phone: '+54 11 1234-5678',\r\n    vehicle_type: 'Camioneta',\r\n    license_plate: 'ABC123',\r\n    status: 'available',\r\n    max_capacity: 30\r\n  },\r\n  {\r\n    id: 'driver-2',\r\n    name: 'María González',\r\n    phone: '+54 11 2345-6789',\r\n    vehicle_type: 'Furgón',\r\n    license_plate: 'DEF456',\r\n    status: 'available',\r\n    max_capacity: 50\r\n  },\r\n  {\r\n    id: 'driver-3',\r\n    name: 'Juan Pérez',\r\n    phone: '+54 11 3456-7890',\r\n    vehicle_type: 'Motocicleta',\r\n    license_plate: 'GHI789',\r\n    status: 'available',\r\n    max_capacity: 10\r\n  },\r\n  {\r\n    id: 'driver-4',\r\n    name: 'Ana Martínez',\r\n    phone: '+54 11 4567-8901',\r\n    vehicle_type: 'Camión',\r\n    license_plate: 'JKL012',\r\n    status: 'available',\r\n    max_capacity: 100\r\n  },\r\n  {\r\n    id: 'driver-5',\r\n    name: 'Luis Fernández',\r\n    phone: '+54 11 5678-9012',\r\n    vehicle_type: 'Camioneta',\r\n    license_plate: 'MNO345',\r\n    status: 'busy',\r\n    max_capacity: 30\r\n  }\r\n];\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\n// Calcular distancia entre dos puntos (fórmula de Haversine)\r\nfunction calculateDistance(point1: Coordinates, point2: Coordinates): number {\r\n  const R = 6371; // Radio de la Tierra en km\r\n  const dLat = (point2.lat - point1.lat) * Math.PI / 180;\r\n  const dLon = (point2.lng - point1.lng) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * \r\n    Math.sin(dLon/2) * Math.sin(dLon/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\n// Clustering geográfico usando K-means simplificado\r\nfunction clusterShipments(shipments: ShipmentLocation[], maxClusters: number): ShipmentLocation[][] {\r\n  if (shipments.length <= maxClusters) {\r\n    return shipments.map(s => [s]);\r\n  }\r\n\r\n  // Inicializar centroides\r\n  const centroids: Coordinates[] = [];\r\n  for (let i = 0; i < maxClusters; i++) {\r\n    const randomIndex = Math.floor(Math.random() * shipments.length);\r\n    const shipment = shipments[randomIndex];\r\n    if (shipment.destination.coordinates) {\r\n      centroids.push(shipment.destination.coordinates);\r\n    }\r\n  }\r\n\r\n  let clusters: ShipmentLocation[][] = Array(maxClusters).fill(null).map(() => []);\r\n  let iterations = 0;\r\n  const maxIterations = 10;\r\n\r\n  while (iterations < maxIterations) {\r\n    // Limpiar clusters\r\n    clusters = Array(maxClusters).fill(null).map(() => []);\r\n\r\n    // Asignar cada envío al centroide más cercano\r\n    shipments.forEach(shipment => {\r\n      if (!shipment.destination.coordinates) return;\r\n\r\n      let minDistance = Infinity;\r\n      let closestCluster = 0;\r\n\r\n      centroids.forEach((centroid, index) => {\r\n        const distance = calculateDistance(shipment.destination.coordinates!, centroid);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          closestCluster = index;\r\n        }\r\n      });\r\n\r\n      clusters[closestCluster].push(shipment);\r\n    });\r\n\r\n    // Recalcular centroides\r\n    let changed = false;\r\n    clusters.forEach((cluster, index) => {\r\n      if (cluster.length > 0) {\r\n        const avgLat = cluster.reduce((sum, s) => sum + (s.destination.coordinates?.lat || 0), 0) / cluster.length;\r\n        const avgLng = cluster.reduce((sum, s) => sum + (s.destination.coordinates?.lng || 0), 0) / cluster.length;\r\n        \r\n        const newCentroid = { lat: avgLat, lng: avgLng };\r\n        const distance = calculateDistance(centroids[index], newCentroid);\r\n        \r\n        if (distance > 0.001) { // Umbral de convergencia\r\n          centroids[index] = newCentroid;\r\n          changed = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!changed) break;\r\n    iterations++;\r\n  }\r\n\r\n  return clusters.filter(cluster => cluster.length > 0);\r\n}\r\n\r\n// Optimizar orden de envíos en una ruta (TSP simplificado)\r\nfunction optimizeRouteOrder(shipments: ShipmentLocation[], startLocation?: Coordinates): ShipmentLocation[] {\r\n  if (shipments.length <= 2) return shipments;\r\n\r\n  const start = startLocation || CITY_COORDINATES['Buenos Aires'];\r\n  const unvisited = [...shipments];\r\n  const route: ShipmentLocation[] = [];\r\n  let currentLocation = start;\r\n\r\n  while (unvisited.length > 0) {\r\n    let nearestIndex = 0;\r\n    let nearestDistance = Infinity;\r\n\r\n    unvisited.forEach((shipment, index) => {\r\n      if (shipment.destination.coordinates) {\r\n        const distance = calculateDistance(currentLocation, shipment.destination.coordinates);\r\n        if (distance < nearestDistance) {\r\n          nearestDistance = distance;\r\n          nearestIndex = index;\r\n        }\r\n      }\r\n    });\r\n\r\n    const nearestShipment = unvisited.splice(nearestIndex, 1)[0];\r\n    route.push(nearestShipment);\r\n    currentLocation = nearestShipment.destination.coordinates || currentLocation;\r\n  }\r\n\r\n  return route;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useRouteOptimization() {\r\n  const [optimizationParams, setOptimizationParams] = useState<RouteOptimizationParams>(DEFAULT_OPTIMIZATION_PARAMS);\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const queryClient = useQueryClient();\r\n\r\n  // Obtener rutas existentes\r\n  const { data: routes = [], isLoading: isLoadingRoutes } = useQuery({\r\n    queryKey: ['optimized-routes'],\r\n    queryFn: async (): Promise<OptimizedRoute[]> => {\r\n      try {\r\n        const response = await fetch('/api/admin/logistics/routes');\r\n        if (!response.ok) {\r\n          console.warn('Error al cargar rutas, usando datos mock');\r\n          return [];\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.warn('Error al cargar rutas, usando datos mock:', error);\r\n        return [];\r\n      }\r\n    }\r\n  });\r\n\r\n  // Obtener drivers disponibles\r\n  const { data: drivers = [], isLoading: isLoadingDrivers } = useQuery({\r\n    queryKey: ['available-drivers'],\r\n    queryFn: async (): Promise<Driver[]> => {\r\n      try {\r\n        const response = await fetch('/api/admin/logistics/drivers');\r\n        if (!response.ok) {\r\n          console.warn('Error al cargar drivers, usando datos mock');\r\n          return mockDrivers;\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.warn('Error al cargar drivers, usando datos mock:', error);\r\n        return mockDrivers;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Crear nueva ruta optimizada\r\n  const createRouteMutation = useMutation({\r\n    mutationFn: async (route: Omit<OptimizedRoute, 'id' | 'created_at'>): Promise<OptimizedRoute> => {\r\n      const response = await fetch('/api/admin/logistics/routes', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(route)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Error al crear ruta');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['optimized-routes'] });\r\n    }\r\n  });\r\n\r\n  // Asignar driver a ruta\r\n  const assignDriverMutation = useMutation({\r\n    mutationFn: async ({ routeId, driverId }: { routeId: string; driverId: string }) => {\r\n      const response = await fetch(`/api/admin/logistics/routes/${routeId}/assign-driver`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ driver_id: driverId })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Error al asignar driver');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['optimized-routes'] });\r\n      queryClient.invalidateQueries({ queryKey: ['available-drivers'] });\r\n    }\r\n  });\r\n\r\n  // Función principal de optimización\r\n  const optimizeRoutes = useCallback(async (shipments: ShipmentLocation[]): Promise<OptimizedRoute[]> => {\r\n    setIsOptimizing(true);\r\n    \r\n    try {\r\n      // Filtrar solo envíos pendientes y confirmados\r\n      const eligibleShipments = shipments.filter(s => \r\n        ['pending', 'confirmed'].includes(s.status) && \r\n        s.destination.coordinates\r\n      );\r\n\r\n      if (eligibleShipments.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Calcular número óptimo de rutas\r\n      const maxShipmentsPerRoute = optimizationParams.max_shipments_per_route || 15;\r\n      const numRoutes = Math.ceil(eligibleShipments.length / maxShipmentsPerRoute);\r\n\r\n      // Clustering geográfico\r\n      const clusters = clusterShipments(eligibleShipments, numRoutes);\r\n\r\n      // Crear rutas optimizadas\r\n      const optimizedRoutes: OptimizedRoute[] = [];\r\n\r\n      for (let i = 0; i < clusters.length; i++) {\r\n        const cluster = clusters[i];\r\n        if (cluster.length === 0) continue;\r\n\r\n        // Determinar ciudad principal del cluster\r\n        const cities = cluster.map(s => s.destination.city);\r\n        const mainCity = cities.reduce((a, b, _, arr) => \r\n          arr.filter(v => v === a).length >= arr.filter(v => v === b).length ? a : b\r\n        );\r\n\r\n        const startLocation = CITY_COORDINATES[mainCity as keyof typeof CITY_COORDINATES] || \r\n                             CITY_COORDINATES['Buenos Aires'];\r\n\r\n        // Optimizar orden de la ruta\r\n        const optimizedOrder = optimizeRouteOrder(cluster, startLocation);\r\n\r\n        // Calcular métricas de la ruta\r\n        let totalDistance = 0;\r\n        let currentLocation = startLocation;\r\n        const waypoints: Coordinates[] = [startLocation];\r\n\r\n        optimizedOrder.forEach(shipment => {\r\n          if (shipment.destination.coordinates) {\r\n            totalDistance += calculateDistance(currentLocation, shipment.destination.coordinates);\r\n            waypoints.push(shipment.destination.coordinates);\r\n            currentLocation = shipment.destination.coordinates;\r\n          }\r\n        });\r\n\r\n        // Estimar tiempo (velocidad promedio 30 km/h + 15 min por parada)\r\n        const estimatedTime = Math.round((totalDistance / 30) * 60 + (optimizedOrder.length * 15));\r\n\r\n        // Calcular score de optimización\r\n        const avgPriority = optimizedOrder.reduce((sum, s) => {\r\n          const priorityScore = { low: 1, medium: 2, high: 3, urgent: 4 }[s.priority || 'medium'];\r\n          return sum + priorityScore;\r\n        }, 0) / optimizedOrder.length;\r\n\r\n        const optimizationScore = Math.round(\r\n          (optimizationParams.priority_weight! * avgPriority * 25) +\r\n          (optimizationParams.distance_weight! * Math.max(0, 100 - totalDistance)) +\r\n          (optimizationParams.time_weight! * Math.max(0, 100 - estimatedTime / 5))\r\n        );\r\n\r\n        const route: OptimizedRoute = {\r\n          id: `route-${Date.now()}-${i}`,\r\n          name: `Ruta ${mainCity} #${i + 1}`,\r\n          shipments: optimizedOrder,\r\n          total_distance: Math.round(totalDistance * 10) / 10,\r\n          estimated_time: estimatedTime,\r\n          status: 'planned',\r\n          created_at: new Date().toISOString(),\r\n          start_location: startLocation,\r\n          waypoints,\r\n          optimization_score: optimizationScore\r\n        };\r\n\r\n        optimizedRoutes.push(route);\r\n      }\r\n\r\n      // Ordenar rutas por score de optimización\r\n      optimizedRoutes.sort((a, b) => b.optimization_score - a.optimization_score);\r\n\r\n      return optimizedRoutes;\r\n\r\n    } catch (error) {\r\n      console.error('Error en optimización de rutas:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsOptimizing(false);\r\n    }\r\n  }, [optimizationParams]);\r\n\r\n  // Estadísticas de rutas\r\n  const routeStats = useMemo(() => {\r\n    const totalRoutes = routes.length;\r\n    const activeRoutes = routes.filter(r => r.status === 'active').length;\r\n    const completedRoutes = routes.filter(r => r.status === 'completed').length;\r\n    const totalShipments = routes.reduce((sum, r) => sum + r.shipments.length, 0);\r\n    const totalDistance = routes.reduce((sum, r) => sum + r.total_distance, 0);\r\n    const avgOptimizationScore = routes.length > 0 \r\n      ? routes.reduce((sum, r) => sum + r.optimization_score, 0) / routes.length \r\n      : 0;\r\n\r\n    return {\r\n      totalRoutes,\r\n      activeRoutes,\r\n      completedRoutes,\r\n      totalShipments,\r\n      totalDistance: Math.round(totalDistance * 10) / 10,\r\n      avgOptimizationScore: Math.round(avgOptimizationScore)\r\n    };\r\n  }, [routes]);\r\n\r\n  return {\r\n    // Datos\r\n    routes,\r\n    drivers,\r\n    routeStats,\r\n    optimizationParams,\r\n    \r\n    // Estados\r\n    isOptimizing,\r\n    isLoadingRoutes,\r\n    isLoadingDrivers,\r\n    \r\n    // Funciones\r\n    optimizeRoutes,\r\n    setOptimizationParams,\r\n    createRoute: createRouteMutation.mutateAsync,\r\n    assignDriver: assignDriverMutation.mutateAsync,\r\n    \r\n    // Estados de mutaciones\r\n    isCreatingRoute: createRouteMutation.isPending,\r\n    isAssigningDriver: assignDriverMutation.isPending\r\n  };\r\n}\r\n\r\nexport default useRouteOptimization;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}