{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useLogisticsWebSocket.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: LOGISTICS WEBSOCKET ENTERPRISE\r\n// Descripción: Hook React para WebSocket tiempo real\r\n// Basado en: React Hooks + WebSocket + Context\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  getLogisticsWebSocket, \r\n  LogisticsWebSocketSimulator,\r\n  TrackingUpdate,\r\n  GeofenceEvent,\r\n  LogisticsAlert \r\n} from '@/lib/websockets/logistics-websocket';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\nexport interface UseLogisticsWebSocketOptions {\r\n  enabled?: boolean;\r\n  autoConnect?: boolean;\r\n  showNotifications?: boolean;\r\n  simulateInDevelopment?: boolean;\r\n}\r\n\r\nexport interface UseLogisticsWebSocketReturn {\r\n  isConnected: boolean;\r\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';\r\n  connect: () => Promise<void>;\r\n  disconnect: () => void;\r\n  subscribeToShipment: (shipmentId: number) => void;\r\n  unsubscribeFromShipment: (shipmentId: number) => void;\r\n  subscribeToGeofence: (zoneId: string) => void;\r\n  subscribeToAlerts: () => void;\r\n  lastTrackingUpdate: TrackingUpdate | null;\r\n  lastAlert: LogisticsAlert | null;\r\n  lastGeofenceEvent: GeofenceEvent | null;\r\n  alerts: LogisticsAlert[];\r\n  clearAlerts: () => void;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useLogisticsWebSocket(\r\n  options: UseLogisticsWebSocketOptions = {}\r\n): UseLogisticsWebSocketReturn {\r\n  \r\n  const {\r\n    enabled = true,\r\n    autoConnect = true,\r\n    showNotifications = true,\r\n    simulateInDevelopment = true\r\n  } = options;\r\n  \r\n  // Estados\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');\r\n  const [lastTrackingUpdate, setLastTrackingUpdate] = useState<TrackingUpdate | null>(null);\r\n  const [lastAlert, setLastAlert] = useState<LogisticsAlert | null>(null);\r\n  const [lastGeofenceEvent, setLastGeofenceEvent] = useState<GeofenceEvent | null>(null);\r\n  const [alerts, setAlerts] = useState<LogisticsAlert[]>([]);\r\n  \r\n  // Referencias\r\n  const wsRef = useRef(getLogisticsWebSocket());\r\n  const simulatorRef = useRef<LogisticsWebSocketSimulator | null>(null);\r\n  const queryClient = useQueryClient();\r\n  \r\n  // =====================================================\r\n  // CONFIGURACIÓN DE EVENTOS\r\n  // =====================================================\r\n  \r\n  useEffect(() => {\r\n    if (!enabled) {return;}\r\n    \r\n    const ws = wsRef.current;\r\n    \r\n    // Eventos de conexión\r\n    const handleConnected = () => {\r\n      setIsConnected(true);\r\n      setConnectionState('connected');\r\n      if (showNotifications) {\r\n        toast.success('Conectado al sistema de tracking en tiempo real');\r\n      }\r\n    };\r\n    \r\n    const handleDisconnected = () => {\r\n      setIsConnected(false);\r\n      setConnectionState('disconnected');\r\n      if (showNotifications) {\r\n        toast.warning('Desconectado del sistema de tracking');\r\n      }\r\n    };\r\n    \r\n    const handleError = (error: any) => {\r\n      setConnectionState('error');\r\n      console.error('WebSocket error:', error);\r\n      if (showNotifications) {\r\n        toast.error('Error en la conexión de tiempo real');\r\n      }\r\n    };\r\n    \r\n    // Eventos de datos\r\n    const handleTrackingUpdate = (update: TrackingUpdate) => {\r\n      setLastTrackingUpdate(update);\r\n      \r\n      // Invalidar cache de tracking para el shipment\r\n      queryClient.invalidateQueries({ \r\n        queryKey: ['admin', 'logistics', 'tracking', update.shipment_id] \r\n      });\r\n      \r\n      // Invalidar dashboard si es necesario\r\n      queryClient.invalidateQueries({ \r\n        queryKey: ['admin', 'logistics', 'dashboard'] \r\n      });\r\n      \r\n      if (showNotifications) {\r\n        toast.info(`Actualización de envío #${update.shipment_id}`, {\r\n          description: `Estado: ${update.status}`\r\n        });\r\n      }\r\n    };\r\n    \r\n    const handleAlert = (alert: LogisticsAlert) => {\r\n      setLastAlert(alert);\r\n      setAlerts(prev => [alert, ...prev.slice(0, 49)]); // Mantener últimas 50\r\n      \r\n      if (showNotifications) {\r\n        const toastFn = alert.severity === 'critical' ? toast.error :\r\n                       alert.severity === 'high' ? toast.warning :\r\n                       toast.info;\r\n        \r\n        toastFn(`Alerta: ${alert.type}`, {\r\n          description: alert.message\r\n        });\r\n      }\r\n    };\r\n    \r\n    const handleGeofenceEvent = (event: GeofenceEvent) => {\r\n      setLastGeofenceEvent(event);\r\n      \r\n      // Invalidar cache relacionado\r\n      queryClient.invalidateQueries({ \r\n        queryKey: ['admin', 'logistics', 'tracking', event.shipment_id] \r\n      });\r\n      \r\n      if (showNotifications) {\r\n        toast.info(`Evento de zona: ${event.zone_name}`, {\r\n          description: `Envío #${event.shipment_id} ${event.event_type === 'enter' ? 'entró' : 'salió'}`\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Registrar eventos\r\n    ws.on('connected', handleConnected);\r\n    ws.on('disconnected', handleDisconnected);\r\n    ws.on('error', handleError);\r\n    ws.on('tracking_update', handleTrackingUpdate);\r\n    ws.on('alert', handleAlert);\r\n    ws.on('geofence_event', handleGeofenceEvent);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      ws.off('connected', handleConnected);\r\n      ws.off('disconnected', handleDisconnected);\r\n      ws.off('error', handleError);\r\n      ws.off('tracking_update', handleTrackingUpdate);\r\n      ws.off('alert', handleAlert);\r\n      ws.off('geofence_event', handleGeofenceEvent);\r\n    };\r\n  }, [enabled, showNotifications, queryClient]);\r\n  \r\n  // =====================================================\r\n  // SIMULADOR PARA DESARROLLO\r\n  // =====================================================\r\n  \r\n  useEffect(() => {\r\n    if (!enabled || !simulateInDevelopment || process.env.NODE_ENV !== 'development') {\r\n      return;\r\n    }\r\n    \r\n    // Crear simulador si no existe\r\n    if (!simulatorRef.current) {\r\n      simulatorRef.current = new LogisticsWebSocketSimulator();\r\n      \r\n      // Conectar eventos del simulador a los handlers\r\n      simulatorRef.current.on('tracking_update', (update: TrackingUpdate) => {\r\n        setLastTrackingUpdate(update);\r\n        queryClient.invalidateQueries({ \r\n          queryKey: ['admin', 'logistics', 'tracking', update.shipment_id] \r\n        });\r\n      });\r\n      \r\n      simulatorRef.current.on('alert', (alert: LogisticsAlert) => {\r\n        setLastAlert(alert);\r\n        setAlerts(prev => [alert, ...prev.slice(0, 49)]);\r\n        \r\n        if (showNotifications) {\r\n          toast.info(`🎭 Simulación - ${alert.type}`, {\r\n            description: alert.message\r\n          });\r\n        }\r\n      });\r\n      \r\n      simulatorRef.current.on('geofence_event', (event: GeofenceEvent) => {\r\n        setLastGeofenceEvent(event);\r\n        queryClient.invalidateQueries({ \r\n          queryKey: ['admin', 'logistics', 'tracking', event.shipment_id] \r\n        });\r\n      });\r\n    }\r\n    \r\n    // Iniciar simulador\r\n    simulatorRef.current.start();\r\n    setIsConnected(true);\r\n    setConnectionState('connected');\r\n    \r\n    if (showNotifications) {\r\n      toast.success('🎭 Simulador de WebSocket iniciado');\r\n    }\r\n    \r\n    return () => {\r\n      if (simulatorRef.current) {\r\n        simulatorRef.current.stop();\r\n      }\r\n    };\r\n  }, [enabled, simulateInDevelopment, showNotifications, queryClient]);\r\n  \r\n  // =====================================================\r\n  // AUTO-CONEXIÓN\r\n  // =====================================================\r\n  \r\n  useEffect(() => {\r\n    if (enabled && autoConnect && process.env.NODE_ENV !== 'development') {\r\n      connect();\r\n    }\r\n  }, [enabled, autoConnect]);\r\n  \r\n  // =====================================================\r\n  // FUNCIONES PÚBLICAS\r\n  // =====================================================\r\n  \r\n  const connect = useCallback(async () => {\r\n    if (process.env.NODE_ENV === 'development' && simulateInDevelopment) {\r\n      // En desarrollo usar simulador\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setConnectionState('connecting');\r\n      await wsRef.current.connect();\r\n    } catch (error) {\r\n      setConnectionState('error');\r\n      throw error;\r\n    }\r\n  }, [simulateInDevelopment]);\r\n  \r\n  const disconnect = useCallback(() => {\r\n    if (process.env.NODE_ENV === 'development' && simulatorRef.current) {\r\n      simulatorRef.current.stop();\r\n      setIsConnected(false);\r\n      setConnectionState('disconnected');\r\n      return;\r\n    }\r\n    \r\n    wsRef.current.disconnect();\r\n    setIsConnected(false);\r\n    setConnectionState('disconnected');\r\n  }, []);\r\n  \r\n  const subscribeToShipment = useCallback((shipmentId: number) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`🎭 Simulando suscripción a envío ${shipmentId}`);\r\n      return;\r\n    }\r\n    \r\n    wsRef.current.subscribeToShipment(shipmentId);\r\n  }, []);\r\n  \r\n  const unsubscribeFromShipment = useCallback((shipmentId: number) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`🎭 Simulando desuscripción de envío ${shipmentId}`);\r\n      return;\r\n    }\r\n    \r\n    wsRef.current.unsubscribeFromShipment(shipmentId);\r\n  }, []);\r\n  \r\n  const subscribeToGeofence = useCallback((zoneId: string) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`🎭 Simulando suscripción a zona ${zoneId}`);\r\n      return;\r\n    }\r\n    \r\n    wsRef.current.subscribeToGeofence(zoneId);\r\n  }, []);\r\n  \r\n  const subscribeToAlerts = useCallback(() => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('🎭 Simulando suscripción a alertas');\r\n      return;\r\n    }\r\n    \r\n    wsRef.current.subscribeToAlerts();\r\n  }, []);\r\n  \r\n  const clearAlerts = useCallback(() => {\r\n    setAlerts([]);\r\n  }, []);\r\n  \r\n  return {\r\n    isConnected,\r\n    connectionState,\r\n    connect,\r\n    disconnect,\r\n    subscribeToShipment,\r\n    unsubscribeFromShipment,\r\n    subscribeToGeofence,\r\n    subscribeToAlerts,\r\n    lastTrackingUpdate,\r\n    lastAlert,\r\n    lastGeofenceEvent,\r\n    alerts,\r\n    clearAlerts\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA TRACKING ESPECÍFICO\r\n// =====================================================\r\n\r\nexport function useShipmentTracking(shipmentId: number) {\r\n  const {\r\n    isConnected,\r\n    subscribeToShipment,\r\n    unsubscribeFromShipment,\r\n    lastTrackingUpdate\r\n  } = useLogisticsWebSocket({\r\n    simulateInDevelopment: false // Deshabilitado para evitar notificaciones persistentes\r\n  });\r\n  \r\n  const [trackingHistory, setTrackingHistory] = useState<TrackingUpdate[]>([]);\r\n  \r\n  // Suscribirse al envío específico\r\n  useEffect(() => {\r\n    if (isConnected && shipmentId) {\r\n      subscribeToShipment(shipmentId);\r\n      \r\n      return () => {\r\n        unsubscribeFromShipment(shipmentId);\r\n      };\r\n    }\r\n  }, [isConnected, shipmentId, subscribeToShipment, unsubscribeFromShipment]);\r\n  \r\n  // Actualizar historial cuando llegan nuevas actualizaciones\r\n  useEffect(() => {\r\n    if (lastTrackingUpdate && lastTrackingUpdate.shipment_id === shipmentId) {\r\n      setTrackingHistory(prev => [lastTrackingUpdate, ...prev.slice(0, 99)]); // Últimas 100\r\n    }\r\n  }, [lastTrackingUpdate, shipmentId]);\r\n  \r\n  return {\r\n    isConnected,\r\n    shipmentId,\r\n    currentLocation: lastTrackingUpdate?.shipment_id === shipmentId ? lastTrackingUpdate : null,\r\n    trackingHistory: trackingHistory.filter(update => update.shipment_id === shipmentId)\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// HOOK PARA ALERTAS\r\n// =====================================================\r\n\r\nexport function useLogisticsAlerts() {\r\n  const {\r\n    isConnected,\r\n    subscribeToAlerts,\r\n    alerts,\r\n    clearAlerts,\r\n    lastAlert\r\n  } = useLogisticsWebSocket({\r\n    simulateInDevelopment: false // Deshabilitado para evitar notificaciones persistentes\r\n  });\r\n  \r\n  // Auto-suscribirse a alertas\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      subscribeToAlerts();\r\n    }\r\n  }, [isConnected, subscribeToAlerts]);\r\n  \r\n  // Filtrar alertas por severidad\r\n  const criticalAlerts = alerts.filter(alert => alert.severity === 'critical');\r\n  const highAlerts = alerts.filter(alert => alert.severity === 'high');\r\n  const unreadAlerts = alerts.filter(alert => !alert.auto_resolve);\r\n  \r\n  return {\r\n    isConnected,\r\n    alerts,\r\n    criticalAlerts,\r\n    highAlerts,\r\n    unreadAlerts,\r\n    lastAlert,\r\n    clearAlerts,\r\n    totalAlerts: alerts.length,\r\n    criticalCount: criticalAlerts.length,\r\n    highCount: highAlerts.length,\r\n    unreadCount: unreadAlerts.length\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useLogisticsAlerts","useLogisticsWebSocket","useShipmentTracking","options","enabled","autoConnect","showNotifications","simulateInDevelopment","isConnected","setIsConnected","useState","connectionState","setConnectionState","lastTrackingUpdate","setLastTrackingUpdate","lastAlert","setLastAlert","lastGeofenceEvent","setLastGeofenceEvent","alerts","setAlerts","wsRef","useRef","getLogisticsWebSocket","simulatorRef","queryClient","useQueryClient","useEffect","ws","current","handleConnected","toast","success","handleDisconnected","warning","handleError","error","console","handleTrackingUpdate","update","invalidateQueries","queryKey","shipment_id","info","description","status","handleAlert","alert","prev","slice","toastFn","severity","type","message","handleGeofenceEvent","event","zone_name","event_type","on","off","process","env","NODE_ENV","LogisticsWebSocketSimulator","start","stop","connect","useCallback","disconnect","subscribeToShipment","shipmentId","log","unsubscribeFromShipment","subscribeToGeofence","zoneId","subscribeToAlerts","clearAlerts","trackingHistory","setTrackingHistory","currentLocation","filter","criticalAlerts","highAlerts","unreadAlerts","auto_resolve","totalAlerts","length","criticalCount","highCount","unreadCount"],"mappings":"AAAA,wDAAwD;AACxD,uCAAuC;AACvC,qDAAqD;AACrD,+CAA+C;AAC/C,wDAAwD;AAExD;;;;;;;;;;;;QAqXgBA;eAAAA;;QAzUAC;eAAAA;;QA+RAC;eAAAA;;;uBAzUyC;4BAC1B;wBACT;oCAOf;AAiCA,SAASD,sBACdE,UAAwC,CAAC,CAAC;IAG1C,MAAM,EACJC,UAAU,IAAI,EACdC,cAAc,IAAI,EAClBC,oBAAoB,IAAI,EACxBC,wBAAwB,IAAI,EAC7B,GAAGJ;IAEJ,UAAU;IACV,MAAM,CAACK,aAAaC,eAAe,GAAGC,IAAAA,eAAQ,EAAC;IAC/C,MAAM,CAACC,iBAAiBC,mBAAmB,GAAGF,IAAAA,eAAQ,EAAwD;IAC9G,MAAM,CAACG,oBAAoBC,sBAAsB,GAAGJ,IAAAA,eAAQ,EAAwB;IACpF,MAAM,CAACK,WAAWC,aAAa,GAAGN,IAAAA,eAAQ,EAAwB;IAClE,MAAM,CAACO,mBAAmBC,qBAAqB,GAAGR,IAAAA,eAAQ,EAAuB;IACjF,MAAM,CAACS,QAAQC,UAAU,GAAGV,IAAAA,eAAQ,EAAmB,EAAE;IAEzD,cAAc;IACd,MAAMW,QAAQC,IAAAA,aAAM,EAACC,IAAAA,yCAAqB;IAC1C,MAAMC,eAAeF,IAAAA,aAAM,EAAqC;IAChE,MAAMG,cAAcC,IAAAA,0BAAc;IAElC,wDAAwD;IACxD,2BAA2B;IAC3B,wDAAwD;IAExDC,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACvB,SAAS;YAAC;QAAO;QAEtB,MAAMwB,KAAKP,MAAMQ,OAAO;QAExB,sBAAsB;QACtB,MAAMC,kBAAkB;YACtBrB,eAAe;YACfG,mBAAmB;YACnB,IAAIN,mBAAmB;gBACrByB,aAAK,CAACC,OAAO,CAAC;YAChB;QACF;QAEA,MAAMC,qBAAqB;YACzBxB,eAAe;YACfG,mBAAmB;YACnB,IAAIN,mBAAmB;gBACrByB,aAAK,CAACG,OAAO,CAAC;YAChB;QACF;QAEA,MAAMC,cAAc,CAACC;YACnBxB,mBAAmB;YACnByB,QAAQD,KAAK,CAAC,oBAAoBA;YAClC,IAAI9B,mBAAmB;gBACrByB,aAAK,CAACK,KAAK,CAAC;YACd;QACF;QAEA,mBAAmB;QACnB,MAAME,uBAAuB,CAACC;YAC5BzB,sBAAsByB;YAEtB,+CAA+C;YAC/Cd,YAAYe,iBAAiB,CAAC;gBAC5BC,UAAU;oBAAC;oBAAS;oBAAa;oBAAYF,OAAOG,WAAW;iBAAC;YAClE;YAEA,sCAAsC;YACtCjB,YAAYe,iBAAiB,CAAC;gBAC5BC,UAAU;oBAAC;oBAAS;oBAAa;iBAAY;YAC/C;YAEA,IAAInC,mBAAmB;gBACrByB,aAAK,CAACY,IAAI,CAAC,CAAC,wBAAwB,EAAEJ,OAAOG,WAAW,EAAE,EAAE;oBAC1DE,aAAa,CAAC,QAAQ,EAAEL,OAAOM,MAAM,EAAE;gBACzC;YACF;QACF;QAEA,MAAMC,cAAc,CAACC;YACnB/B,aAAa+B;YACb3B,UAAU4B,CAAAA,OAAQ;oBAACD;uBAAUC,KAAKC,KAAK,CAAC,GAAG;iBAAI,GAAG,sBAAsB;YAExE,IAAI3C,mBAAmB;gBACrB,MAAM4C,UAAUH,MAAMI,QAAQ,KAAK,aAAapB,aAAK,CAACK,KAAK,GAC5CW,MAAMI,QAAQ,KAAK,SAASpB,aAAK,CAACG,OAAO,GACzCH,aAAK,CAACY,IAAI;gBAEzBO,QAAQ,CAAC,QAAQ,EAAEH,MAAMK,IAAI,EAAE,EAAE;oBAC/BR,aAAaG,MAAMM,OAAO;gBAC5B;YACF;QACF;QAEA,MAAMC,sBAAsB,CAACC;YAC3BrC,qBAAqBqC;YAErB,8BAA8B;YAC9B9B,YAAYe,iBAAiB,CAAC;gBAC5BC,UAAU;oBAAC;oBAAS;oBAAa;oBAAYc,MAAMb,WAAW;iBAAC;YACjE;YAEA,IAAIpC,mBAAmB;gBACrByB,aAAK,CAACY,IAAI,CAAC,CAAC,gBAAgB,EAAEY,MAAMC,SAAS,EAAE,EAAE;oBAC/CZ,aAAa,CAAC,OAAO,EAAEW,MAAMb,WAAW,CAAC,CAAC,EAAEa,MAAME,UAAU,KAAK,UAAU,UAAU,SAAS;gBAChG;YACF;QACF;QAEA,oBAAoB;QACpB7B,GAAG8B,EAAE,CAAC,aAAa5B;QACnBF,GAAG8B,EAAE,CAAC,gBAAgBzB;QACtBL,GAAG8B,EAAE,CAAC,SAASvB;QACfP,GAAG8B,EAAE,CAAC,mBAAmBpB;QACzBV,GAAG8B,EAAE,CAAC,SAASZ;QACflB,GAAG8B,EAAE,CAAC,kBAAkBJ;QAExB,UAAU;QACV,OAAO;YACL1B,GAAG+B,GAAG,CAAC,aAAa7B;YACpBF,GAAG+B,GAAG,CAAC,gBAAgB1B;YACvBL,GAAG+B,GAAG,CAAC,SAASxB;YAChBP,GAAG+B,GAAG,CAAC,mBAAmBrB;YAC1BV,GAAG+B,GAAG,CAAC,SAASb;YAChBlB,GAAG+B,GAAG,CAAC,kBAAkBL;QAC3B;IACF,GAAG;QAAClD;QAASE;QAAmBmB;KAAY;IAE5C,wDAAwD;IACxD,4BAA4B;IAC5B,wDAAwD;IAExDE,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACvB,WAAW,CAACG,yBAAyBqD,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YAChF;QACF;QAEA,+BAA+B;QAC/B,IAAI,CAACtC,aAAaK,OAAO,EAAE;YACzBL,aAAaK,OAAO,GAAG,IAAIkC,+CAA2B;YAEtD,gDAAgD;YAChDvC,aAAaK,OAAO,CAAC6B,EAAE,CAAC,mBAAmB,CAACnB;gBAC1CzB,sBAAsByB;gBACtBd,YAAYe,iBAAiB,CAAC;oBAC5BC,UAAU;wBAAC;wBAAS;wBAAa;wBAAYF,OAAOG,WAAW;qBAAC;gBAClE;YACF;YAEAlB,aAAaK,OAAO,CAAC6B,EAAE,CAAC,SAAS,CAACX;gBAChC/B,aAAa+B;gBACb3B,UAAU4B,CAAAA,OAAQ;wBAACD;2BAAUC,KAAKC,KAAK,CAAC,GAAG;qBAAI;gBAE/C,IAAI3C,mBAAmB;oBACrByB,aAAK,CAACY,IAAI,CAAC,CAAC,gBAAgB,EAAEI,MAAMK,IAAI,EAAE,EAAE;wBAC1CR,aAAaG,MAAMM,OAAO;oBAC5B;gBACF;YACF;YAEA7B,aAAaK,OAAO,CAAC6B,EAAE,CAAC,kBAAkB,CAACH;gBACzCrC,qBAAqBqC;gBACrB9B,YAAYe,iBAAiB,CAAC;oBAC5BC,UAAU;wBAAC;wBAAS;wBAAa;wBAAYc,MAAMb,WAAW;qBAAC;gBACjE;YACF;QACF;QAEA,oBAAoB;QACpBlB,aAAaK,OAAO,CAACmC,KAAK;QAC1BvD,eAAe;QACfG,mBAAmB;QAEnB,IAAIN,mBAAmB;YACrByB,aAAK,CAACC,OAAO,CAAC;QAChB;QAEA,OAAO;YACL,IAAIR,aAAaK,OAAO,EAAE;gBACxBL,aAAaK,OAAO,CAACoC,IAAI;YAC3B;QACF;IACF,GAAG;QAAC7D;QAASG;QAAuBD;QAAmBmB;KAAY;IAEnE,wDAAwD;IACxD,gBAAgB;IAChB,wDAAwD;IAExDE,IAAAA,gBAAS,EAAC;QACR,IAAIvB,WAAWC,eAAeuD,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YACpEI;QACF;IACF,GAAG;QAAC9D;QAASC;KAAY;IAEzB,wDAAwD;IACxD,qBAAqB;IACrB,wDAAwD;IAExD,MAAM6D,UAAUC,IAAAA,kBAAW,EAAC;QAC1B,IAAIP,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiBvD,uBAAuB;YACnE,+BAA+B;YAC/B;QACF;QAEA,IAAI;YACFK,mBAAmB;YACnB,MAAMS,MAAMQ,OAAO,CAACqC,OAAO;QAC7B,EAAE,OAAO9B,OAAO;YACdxB,mBAAmB;YACnB,MAAMwB;QACR;IACF,GAAG;QAAC7B;KAAsB;IAE1B,MAAM6D,aAAaD,IAAAA,kBAAW,EAAC;QAC7B,IAAIP,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiBtC,aAAaK,OAAO,EAAE;YAClEL,aAAaK,OAAO,CAACoC,IAAI;YACzBxD,eAAe;YACfG,mBAAmB;YACnB;QACF;QAEAS,MAAMQ,OAAO,CAACuC,UAAU;QACxB3D,eAAe;QACfG,mBAAmB;IACrB,GAAG,EAAE;IAEL,MAAMyD,sBAAsBF,IAAAA,kBAAW,EAAC,CAACG;QACvC,IAAIV,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YAC1CzB,QAAQkC,GAAG,CAAC,CAAC,iCAAiC,EAAED,YAAY;YAC5D;QACF;QAEAjD,MAAMQ,OAAO,CAACwC,mBAAmB,CAACC;IACpC,GAAG,EAAE;IAEL,MAAME,0BAA0BL,IAAAA,kBAAW,EAAC,CAACG;QAC3C,IAAIV,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YAC1CzB,QAAQkC,GAAG,CAAC,CAAC,oCAAoC,EAAED,YAAY;YAC/D;QACF;QAEAjD,MAAMQ,OAAO,CAAC2C,uBAAuB,CAACF;IACxC,GAAG,EAAE;IAEL,MAAMG,sBAAsBN,IAAAA,kBAAW,EAAC,CAACO;QACvC,IAAId,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YAC1CzB,QAAQkC,GAAG,CAAC,CAAC,gCAAgC,EAAEG,QAAQ;YACvD;QACF;QAEArD,MAAMQ,OAAO,CAAC4C,mBAAmB,CAACC;IACpC,GAAG,EAAE;IAEL,MAAMC,oBAAoBR,IAAAA,kBAAW,EAAC;QACpC,IAAIP,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;YAC1CzB,QAAQkC,GAAG,CAAC;YACZ;QACF;QAEAlD,MAAMQ,OAAO,CAAC8C,iBAAiB;IACjC,GAAG,EAAE;IAEL,MAAMC,cAAcT,IAAAA,kBAAW,EAAC;QAC9B/C,UAAU,EAAE;IACd,GAAG,EAAE;IAEL,OAAO;QACLZ;QACAG;QACAuD;QACAE;QACAC;QACAG;QACAC;QACAE;QACA9D;QACAE;QACAE;QACAE;QACAyD;IACF;AACF;AAMO,SAAS1E,oBAAoBoE,UAAkB;IACpD,MAAM,EACJ9D,WAAW,EACX6D,mBAAmB,EACnBG,uBAAuB,EACvB3D,kBAAkB,EACnB,GAAGZ,sBAAsB;QACxBM,uBAAuB,MAAM,wDAAwD;IACvF;IAEA,MAAM,CAACsE,iBAAiBC,mBAAmB,GAAGpE,IAAAA,eAAQ,EAAmB,EAAE;IAE3E,kCAAkC;IAClCiB,IAAAA,gBAAS,EAAC;QACR,IAAInB,eAAe8D,YAAY;YAC7BD,oBAAoBC;YAEpB,OAAO;gBACLE,wBAAwBF;YAC1B;QACF;IACF,GAAG;QAAC9D;QAAa8D;QAAYD;QAAqBG;KAAwB;IAE1E,4DAA4D;IAC5D7C,IAAAA,gBAAS,EAAC;QACR,IAAId,sBAAsBA,mBAAmB6B,WAAW,KAAK4B,YAAY;YACvEQ,mBAAmB9B,CAAAA,OAAQ;oBAACnC;uBAAuBmC,KAAKC,KAAK,CAAC,GAAG;iBAAI,GAAG,cAAc;QACxF;IACF,GAAG;QAACpC;QAAoByD;KAAW;IAEnC,OAAO;QACL9D;QACA8D;QACAS,iBAAiBlE,oBAAoB6B,gBAAgB4B,aAAazD,qBAAqB;QACvFgE,iBAAiBA,gBAAgBG,MAAM,CAACzC,CAAAA,SAAUA,OAAOG,WAAW,KAAK4B;IAC3E;AACF;AAMO,SAAStE;IACd,MAAM,EACJQ,WAAW,EACXmE,iBAAiB,EACjBxD,MAAM,EACNyD,WAAW,EACX7D,SAAS,EACV,GAAGd,sBAAsB;QACxBM,uBAAuB,MAAM,wDAAwD;IACvF;IAEA,6BAA6B;IAC7BoB,IAAAA,gBAAS,EAAC;QACR,IAAInB,aAAa;YACfmE;QACF;IACF,GAAG;QAACnE;QAAamE;KAAkB;IAEnC,gCAAgC;IAChC,MAAMM,iBAAiB9D,OAAO6D,MAAM,CAACjC,CAAAA,QAASA,MAAMI,QAAQ,KAAK;IACjE,MAAM+B,aAAa/D,OAAO6D,MAAM,CAACjC,CAAAA,QAASA,MAAMI,QAAQ,KAAK;IAC7D,MAAMgC,eAAehE,OAAO6D,MAAM,CAACjC,CAAAA,QAAS,CAACA,MAAMqC,YAAY;IAE/D,OAAO;QACL5E;QACAW;QACA8D;QACAC;QACAC;QACApE;QACA6D;QACAS,aAAalE,OAAOmE,MAAM;QAC1BC,eAAeN,eAAeK,MAAM;QACpCE,WAAWN,WAAWI,MAAM;QAC5BG,aAAaN,aAAaG,MAAM;IAClC;AACF"}