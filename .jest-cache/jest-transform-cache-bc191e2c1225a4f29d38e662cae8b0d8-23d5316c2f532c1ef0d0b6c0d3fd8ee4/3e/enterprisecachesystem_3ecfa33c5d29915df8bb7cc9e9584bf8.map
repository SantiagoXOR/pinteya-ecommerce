{"version":3,"names":["cov_26itzol5jn","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","ENTERPRISE_CACHE_CONFIGS","EnterpriseCacheSystem","EnterpriseCacheUtils","enterpriseCacheSystem","AUTH_CRITICAL","_cachemanager","CACHE_CONFIGS","SYSTEM_CONFIG","ttl","prefix","enableAuditLogging","enableMetrics","enableInvalidation","securityLevel","encryptData","compressionLevel","evictionPolicy","PRODUCTS_SMART","PRODUCT_DATA","enableWarmup","invalidationPatterns","dependentKeys","warmupStrategy","warmupInterval","PUBLIC_PERFORMANCE","compress","serialize","maxMemoryUsage","USER_SESSIONS","ANALYTICS_DATA","constructor","metrics","Map","invalidationJobs","warmupJobs","isInitialized","getInstance","instance","initialize","initializeWarmupJobs","startCleanupScheduler","startMemoryMonitoring","console","log","error","get","key","config","context","startTime","Date","now","fullKey","generateKey","verifyAccess","result","cacheManager","responseTime","updateMetrics","logCacheAccess","updateErrorMetrics","set","value","verifyWriteAccess","processedValue","success","updateSetMetrics","scheduleDependencyInvalidation","invalidate","pattern","reason","affectedKeys","findKeysByPattern","deletionPromises","map","_redis","redisCache","del","Promise","all","invalidationEvent","timestamp","toISOString","triggeredBy","userId","Math","random","toString","substr","_enterpriseauditsystem","enterpriseAuditSystem","logEnterpriseEvent","user_id","event_type","event_category","severity","description","metadata","affected_keys_count","length","affected_keys","slice","ip_address","ipAddress","user_agent","userAgent","warmup","keys","dataFetcher","jobId","warmupJob","id","join","strategy","interval","lastRun","status","warmupPromises","existing","data","warn","nextRun","getMetrics","Object","fromEntries","getInvalidationStats","Array","from","values","getWarmupStats","permissions","includes","Error","jsonString","JSON","stringify","encoded","Buffer","encrypted","hit","hits","misses","hitRate","avgResponseTime","memoryUsage","evictions","errors","lastAccess","totalRequests","operation","cache_system","client","scanStream","stream","match","count","resolve","reject","on","resultKeys","push","setTimeout","depKey","setInterval","oneHourAgo","entries","lastAccessTime","getTime","delete","process","heapUsed","cacheAuthData","fetcher","cached","cacheProductData","cachePublicData","invalidateByPatterns","patterns","invalidationPromises"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\enterprise-cache-system.ts"],"sourcesContent":["/**\r\n * Sistema Enterprise de Caché Inteligente\r\n * Extiende el cache manager existente con funcionalidades enterprise avanzadas\r\n */\r\n\r\nimport { cacheManager, CACHE_CONFIGS, type CacheConfig } from '@/lib/cache-manager';\r\nimport { redisCache } from '@/lib/integrations/redis';\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { metricsCollector } from '@/lib/rate-limiting/enterprise-rate-limiter';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES ENTERPRISE\r\n// =====================================================\r\n\r\nexport interface EnterpriseCacheConfig extends CacheConfig {\r\n  // Configuraciones enterprise\r\n  enableAuditLogging?: boolean;\r\n  enableMetrics?: boolean;\r\n  enableInvalidation?: boolean;\r\n  enableWarmup?: boolean;\r\n  \r\n  // Configuraciones de invalidación\r\n  invalidationPatterns?: string[];\r\n  dependentKeys?: string[];\r\n  \r\n  // Configuraciones de warmup\r\n  warmupStrategy?: 'eager' | 'lazy' | 'scheduled';\r\n  warmupInterval?: number;\r\n  \r\n  // Configuraciones de seguridad\r\n  securityLevel?: 'basic' | 'standard' | 'high' | 'critical';\r\n  encryptData?: boolean;\r\n  \r\n  // Configuraciones de performance\r\n  compressionLevel?: number;\r\n  maxMemoryUsage?: number;\r\n  evictionPolicy?: 'lru' | 'lfu' | 'ttl' | 'random';\r\n}\r\n\r\nexport interface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  avgResponseTime: number;\r\n  memoryUsage: number;\r\n  evictions: number;\r\n  errors: number;\r\n  lastAccess: string;\r\n}\r\n\r\nexport interface CacheInvalidationEvent {\r\n  pattern: string;\r\n  reason: 'manual' | 'ttl_expired' | 'dependency_changed' | 'memory_pressure';\r\n  affectedKeys: string[];\r\n  timestamp: string;\r\n  triggeredBy?: string;\r\n}\r\n\r\nexport interface CacheWarmupJob {\r\n  id: string;\r\n  pattern: string;\r\n  strategy: 'eager' | 'lazy' | 'scheduled';\r\n  interval?: number;\r\n  lastRun?: string;\r\n  nextRun?: string;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n}\r\n\r\n// =====================================================\r\n// CONFIGURACIONES ENTERPRISE PREDEFINIDAS\r\n// =====================================================\r\n\r\nexport const ENTERPRISE_CACHE_CONFIGS: Record<string, EnterpriseCacheConfig> = {\r\n  // Cache crítico para datos de autenticación\r\n  AUTH_CRITICAL: {\r\n    ...CACHE_CONFIGS.SYSTEM_CONFIG,\r\n    ttl: 300, // 5 minutos\r\n    prefix: 'auth_critical',\r\n    enableAuditLogging: true,\r\n    enableMetrics: true,\r\n    enableInvalidation: true,\r\n    securityLevel: 'critical',\r\n    encryptData: true,\r\n    compressionLevel: 9,\r\n    evictionPolicy: 'ttl'\r\n  },\r\n\r\n  // Cache para datos de productos con invalidación inteligente\r\n  PRODUCTS_SMART: {\r\n    ...CACHE_CONFIGS.PRODUCT_DATA,\r\n    ttl: 1800, // 30 minutos\r\n    prefix: 'products_smart',\r\n    enableAuditLogging: false,\r\n    enableMetrics: true,\r\n    enableInvalidation: true,\r\n    enableWarmup: true,\r\n    invalidationPatterns: ['product:*', 'category:*', 'inventory:*'],\r\n    dependentKeys: ['categories', 'brands', 'pricing'],\r\n    warmupStrategy: 'scheduled',\r\n    warmupInterval: 3600, // 1 hora\r\n    securityLevel: 'standard',\r\n    compressionLevel: 6,\r\n    evictionPolicy: 'lru'\r\n  },\r\n\r\n  // Cache para APIs públicas con alta performance\r\n  PUBLIC_PERFORMANCE: {\r\n    ttl: 600, // 10 minutos\r\n    prefix: 'public_perf',\r\n    compress: true,\r\n    serialize: true,\r\n    enableAuditLogging: false,\r\n    enableMetrics: true,\r\n    enableInvalidation: true,\r\n    enableWarmup: true,\r\n    warmupStrategy: 'eager',\r\n    securityLevel: 'basic',\r\n    compressionLevel: 3,\r\n    maxMemoryUsage: 100 * 1024 * 1024, // 100MB\r\n    evictionPolicy: 'lfu'\r\n  },\r\n\r\n  // Cache para sesiones de usuario\r\n  USER_SESSIONS: {\r\n    ttl: 7200, // 2 horas\r\n    prefix: 'user_sessions',\r\n    compress: false,\r\n    serialize: true,\r\n    enableAuditLogging: true,\r\n    enableMetrics: true,\r\n    enableInvalidation: true,\r\n    securityLevel: 'high',\r\n    encryptData: true,\r\n    evictionPolicy: 'ttl'\r\n  },\r\n\r\n  // Cache para métricas y analytics\r\n  ANALYTICS_DATA: {\r\n    ttl: 900, // 15 minutos\r\n    prefix: 'analytics',\r\n    compress: true,\r\n    serialize: true,\r\n    enableAuditLogging: false,\r\n    enableMetrics: true,\r\n    enableInvalidation: true,\r\n    enableWarmup: true,\r\n    warmupStrategy: 'lazy',\r\n    securityLevel: 'standard',\r\n    compressionLevel: 8,\r\n    evictionPolicy: 'lru'\r\n  }\r\n};\r\n\r\n// =====================================================\r\n// SISTEMA ENTERPRISE DE CACHÉ\r\n// =====================================================\r\n\r\nexport class EnterpriseCacheSystem {\r\n  private static instance: EnterpriseCacheSystem;\r\n  private metrics: Map<string, CacheMetrics> = new Map();\r\n  private invalidationJobs: Map<string, CacheInvalidationEvent> = new Map();\r\n  private warmupJobs: Map<string, CacheWarmupJob> = new Map();\r\n  private isInitialized = false;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): EnterpriseCacheSystem {\r\n    if (!EnterpriseCacheSystem.instance) {\r\n      EnterpriseCacheSystem.instance = new EnterpriseCacheSystem();\r\n    }\r\n    return EnterpriseCacheSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa el sistema enterprise de caché\r\n   */\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) {return;}\r\n\r\n    try {\r\n      // Inicializar jobs de warmup programados\r\n      await this.initializeWarmupJobs();\r\n      \r\n      // Inicializar limpieza automática\r\n      this.startCleanupScheduler();\r\n      \r\n      // Inicializar monitoreo de memoria\r\n      this.startMemoryMonitoring();\r\n      \r\n      this.isInitialized = true;\r\n      console.log('[ENTERPRISE_CACHE] Sistema inicializado correctamente');\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_CACHE] Error inicializando sistema:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del caché con funcionalidades enterprise\r\n   */\r\n  async get<T>(\r\n    key: string, \r\n    config: EnterpriseCacheConfig,\r\n    context?: EnterpriseAuthContext\r\n  ): Promise<T | null> {\r\n    const startTime = Date.now();\r\n    const fullKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      // Verificar permisos de acceso si es necesario\r\n      if (config.securityLevel === 'critical' && context) {\r\n        await this.verifyAccess(fullKey, context);\r\n      }\r\n\r\n      // Intentar obtener del caché\r\n      const result = await cacheManager.get<T>(key, config);\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      // Actualizar métricas\r\n      if (config.enableMetrics) {\r\n        this.updateMetrics(fullKey, result !== null, responseTime);\r\n      }\r\n\r\n      // Registrar acceso si está habilitado\r\n      if (config.enableAuditLogging && context) {\r\n        await this.logCacheAccess('GET', fullKey, result !== null, context);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Actualizar métricas de error\r\n      if (config.enableMetrics) {\r\n        this.updateErrorMetrics(fullKey, responseTime);\r\n      }\r\n\r\n      console.error('[ENTERPRISE_CACHE] Error en get:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece datos en el caché con funcionalidades enterprise\r\n   */\r\n  async set<T>(\r\n    key: string, \r\n    value: T, \r\n    config: EnterpriseCacheConfig,\r\n    context?: EnterpriseAuthContext\r\n  ): Promise<boolean> {\r\n    const startTime = Date.now();\r\n    const fullKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      // Verificar permisos de escritura si es necesario\r\n      if (config.securityLevel === 'critical' && context) {\r\n        await this.verifyWriteAccess(fullKey, context);\r\n      }\r\n\r\n      // Encriptar datos si está configurado\r\n      let processedValue = value;\r\n      if (config.encryptData) {\r\n        processedValue = await this.encryptData(value) as T;\r\n      }\r\n\r\n      // Establecer en caché\r\n      const success = await cacheManager.set(key, processedValue, config);\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      // Actualizar métricas\r\n      if (config.enableMetrics) {\r\n        this.updateSetMetrics(fullKey, success, responseTime);\r\n      }\r\n\r\n      // Registrar escritura si está habilitado\r\n      if (config.enableAuditLogging && context) {\r\n        await this.logCacheAccess('SET', fullKey, success, context);\r\n      }\r\n\r\n      // Programar invalidación de dependencias si es necesario\r\n      if (config.enableInvalidation && config.dependentKeys) {\r\n        await this.scheduleDependencyInvalidation(fullKey, config.dependentKeys);\r\n      }\r\n\r\n      return success;\r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      \r\n      // Actualizar métricas de error\r\n      if (config.enableMetrics) {\r\n        this.updateErrorMetrics(fullKey, responseTime);\r\n      }\r\n\r\n      console.error('[ENTERPRISE_CACHE] Error en set:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidación inteligente de caché\r\n   */\r\n  async invalidate(\r\n    pattern: string, \r\n    reason: CacheInvalidationEvent['reason'] = 'manual',\r\n    context?: EnterpriseAuthContext\r\n  ): Promise<string[]> {\r\n    try {\r\n      const affectedKeys = await this.findKeysByPattern(pattern);\r\n      \r\n      // Eliminar claves del caché\r\n      const deletionPromises = affectedKeys.map(key => redisCache.del(key));\r\n      await Promise.all(deletionPromises);\r\n\r\n      // Registrar evento de invalidación\r\n      const invalidationEvent: CacheInvalidationEvent = {\r\n        pattern,\r\n        reason,\r\n        affectedKeys,\r\n        timestamp: new Date().toISOString(),\r\n        triggeredBy: context?.userId\r\n      };\r\n\r\n      this.invalidationJobs.set(\r\n        `inv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        invalidationEvent\r\n      );\r\n\r\n      // Registrar en auditoría si hay contexto\r\n      if (context) {\r\n        await enterpriseAuditSystem.logEnterpriseEvent({\r\n          user_id: context.userId,\r\n          event_type: 'CACHE_INVALIDATION' as any,\r\n          event_category: 'system_operation',\r\n          severity: 'medium' as any,\r\n          description: `Cache invalidation: ${pattern}`,\r\n          metadata: {\r\n            pattern,\r\n            reason,\r\n            affected_keys_count: affectedKeys.length,\r\n            affected_keys: affectedKeys.slice(0, 10) // Primeras 10 para no saturar\r\n          },\r\n          ip_address: context.ipAddress,\r\n          user_agent: context.userAgent\r\n        }, context);\r\n      }\r\n\r\n      console.log(`[ENTERPRISE_CACHE] Invalidated ${affectedKeys.length} keys for pattern: ${pattern}`);\r\n      return affectedKeys;\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_CACHE] Error en invalidación:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Warmup inteligente de caché\r\n   */\r\n  async warmup(\r\n    keys: string[], \r\n    config: EnterpriseCacheConfig,\r\n    dataFetcher: (key: string) => Promise<any>\r\n  ): Promise<void> {\r\n    const jobId = `warmup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const warmupJob: CacheWarmupJob = {\r\n      id: jobId,\r\n      pattern: keys.join(','),\r\n      strategy: config.warmupStrategy || 'lazy',\r\n      interval: config.warmupInterval,\r\n      lastRun: new Date().toISOString(),\r\n      status: 'running'\r\n    };\r\n\r\n    this.warmupJobs.set(jobId, warmupJob);\r\n\r\n    try {\r\n      const warmupPromises = keys.map(async (key) => {\r\n        try {\r\n          // Verificar si ya existe en caché\r\n          const existing = await this.get(key, config);\r\n          if (existing !== null) {\r\n            return; // Ya está en caché\r\n          }\r\n\r\n          // Obtener datos y cachear\r\n          const data = await dataFetcher(key);\r\n          await this.set(key, data, config);\r\n        } catch (error) {\r\n          console.warn(`[ENTERPRISE_CACHE] Error warming up key ${key}:`, error);\r\n        }\r\n      });\r\n\r\n      await Promise.all(warmupPromises);\r\n      \r\n      // Actualizar estado del job\r\n      warmupJob.status = 'completed';\r\n      warmupJob.nextRun = config.warmupInterval ? \r\n        new Date(Date.now() + config.warmupInterval * 1000).toISOString() : \r\n        undefined;\r\n\r\n      console.log(`[ENTERPRISE_CACHE] Warmup completed for ${keys.length} keys`);\r\n    } catch (error) {\r\n      warmupJob.status = 'failed';\r\n      console.error('[ENTERPRISE_CACHE] Error en warmup:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas del sistema de caché\r\n   */\r\n  getMetrics(): Record<string, CacheMetrics> {\r\n    return Object.fromEntries(this.metrics);\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de invalidación\r\n   */\r\n  getInvalidationStats(): CacheInvalidationEvent[] {\r\n    return Array.from(this.invalidationJobs.values());\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de warmup\r\n   */\r\n  getWarmupStats(): CacheWarmupJob[] {\r\n    return Array.from(this.warmupJobs.values());\r\n  }\r\n\r\n  // =====================================================\r\n  // MÉTODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  private generateKey(config: EnterpriseCacheConfig, key: string): string {\r\n    return `${config.prefix}:${key}`;\r\n  }\r\n\r\n  private async verifyAccess(key: string, context: EnterpriseAuthContext): Promise<void> {\r\n    // Verificar permisos de acceso para datos críticos\r\n    if (!context.permissions.includes('cache_access') && \r\n        !context.permissions.includes('admin_access')) {\r\n      throw new Error('Insufficient permissions for cache access');\r\n    }\r\n  }\r\n\r\n  private async verifyWriteAccess(key: string, context: EnterpriseAuthContext): Promise<void> {\r\n    // Verificar permisos de escritura para datos críticos\r\n    if (!context.permissions.includes('cache_write') && \r\n        !context.permissions.includes('admin_access')) {\r\n      throw new Error('Insufficient permissions for cache write');\r\n    }\r\n  }\r\n\r\n  private async encryptData(data: any): Promise<any> {\r\n    // Implementación básica de encriptación\r\n    // En producción, usar una librería de encriptación robusta\r\n    try {\r\n      const jsonString = JSON.stringify(data);\r\n      const encoded = Buffer.from(jsonString).toString('base64');\r\n      return { encrypted: true, data: encoded };\r\n    } catch (error) {\r\n      console.warn('[ENTERPRISE_CACHE] Error encriptando datos:', error);\r\n      return data;\r\n    }\r\n  }\r\n\r\n  private updateMetrics(key: string, hit: boolean, responseTime: number): void {\r\n    const existing = this.metrics.get(key) || {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgResponseTime: 0,\r\n      memoryUsage: 0,\r\n      evictions: 0,\r\n      errors: 0,\r\n      lastAccess: new Date().toISOString()\r\n    };\r\n\r\n    if (hit) {\r\n      existing.hits++;\r\n    } else {\r\n      existing.misses++;\r\n    }\r\n\r\n    const totalRequests = existing.hits + existing.misses;\r\n    existing.hitRate = totalRequests > 0 ? existing.hits / totalRequests : 0;\r\n    existing.avgResponseTime = (existing.avgResponseTime + responseTime) / 2;\r\n    existing.lastAccess = new Date().toISOString();\r\n\r\n    this.metrics.set(key, existing);\r\n  }\r\n\r\n  private updateSetMetrics(key: string, success: boolean, responseTime: number): void {\r\n    const existing = this.metrics.get(key) || {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgResponseTime: 0,\r\n      memoryUsage: 0,\r\n      evictions: 0,\r\n      errors: 0,\r\n      lastAccess: new Date().toISOString()\r\n    };\r\n\r\n    existing.avgResponseTime = (existing.avgResponseTime + responseTime) / 2;\r\n    existing.lastAccess = new Date().toISOString();\r\n\r\n    if (!success) {\r\n      existing.errors++;\r\n    }\r\n\r\n    this.metrics.set(key, existing);\r\n  }\r\n\r\n  private updateErrorMetrics(key: string, responseTime: number): void {\r\n    const existing = this.metrics.get(key) || {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgResponseTime: 0,\r\n      memoryUsage: 0,\r\n      evictions: 0,\r\n      errors: 0,\r\n      lastAccess: new Date().toISOString()\r\n    };\r\n\r\n    existing.errors++;\r\n    existing.avgResponseTime = (existing.avgResponseTime + responseTime) / 2;\r\n    existing.lastAccess = new Date().toISOString();\r\n\r\n    this.metrics.set(key, existing);\r\n  }\r\n\r\n  private async logCacheAccess(\r\n    operation: 'GET' | 'SET',\r\n    key: string,\r\n    success: boolean,\r\n    context: EnterpriseAuthContext\r\n  ): Promise<void> {\r\n    try {\r\n      await enterpriseAuditSystem.logEnterpriseEvent({\r\n        user_id: context.userId,\r\n        event_type: 'CACHE_ACCESS' as any,\r\n        event_category: 'system_operation',\r\n        severity: 'low' as any,\r\n        description: `Cache ${operation}: ${key}`,\r\n        metadata: {\r\n          operation,\r\n          key,\r\n          success,\r\n          cache_system: 'enterprise'\r\n        },\r\n        ip_address: context.ipAddress,\r\n        user_agent: context.userAgent\r\n      }, context);\r\n    } catch (error) {\r\n      console.warn('[ENTERPRISE_CACHE] Error logging cache access:', error);\r\n    }\r\n  }\r\n\r\n  private async findKeysByPattern(pattern: string): Promise<string[]> {\r\n    try {\r\n      // Usar Redis SCAN para encontrar claves por patrón\r\n      const keys: string[] = [];\r\n      const client = redisCache['client']; // Acceder al cliente Redis interno\r\n      \r\n      if (client && typeof client.scanStream === 'function') {\r\n        const stream = client.scanStream({\r\n          match: pattern,\r\n          count: 100\r\n        });\r\n\r\n        return new Promise((resolve, reject) => {\r\n          stream.on('data', (resultKeys: string[]) => {\r\n            keys.push(...resultKeys);\r\n          });\r\n\r\n          stream.on('end', () => {\r\n            resolve(keys);\r\n          });\r\n\r\n          stream.on('error', (error: Error) => {\r\n            reject(error);\r\n          });\r\n        });\r\n      }\r\n\r\n      return keys;\r\n    } catch (error) {\r\n      console.error('[ENTERPRISE_CACHE] Error finding keys by pattern:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async scheduleDependencyInvalidation(key: string, dependentKeys: string[]): Promise<void> {\r\n    // Programar invalidación de claves dependientes\r\n    // Esto se podría implementar con un job queue como Bull o Agenda\r\n    setTimeout(async () => {\r\n      for (const depKey of dependentKeys) {\r\n        await this.invalidate(depKey, 'dependency_changed');\r\n      }\r\n    }, 1000); // 1 segundo de delay\r\n  }\r\n\r\n  private async initializeWarmupJobs(): Promise<void> {\r\n    // Inicializar jobs de warmup programados\r\n    // En una implementación real, esto se cargaría desde una base de datos\r\n    console.log('[ENTERPRISE_CACHE] Warmup jobs initialized');\r\n  }\r\n\r\n  private startCleanupScheduler(): void {\r\n    // Limpiar métricas antiguas cada hora\r\n    setInterval(() => {\r\n      const oneHourAgo = Date.now() - 60 * 60 * 1000;\r\n      \r\n      for (const [key, metrics] of this.metrics.entries()) {\r\n        const lastAccessTime = new Date(metrics.lastAccess).getTime();\r\n        if (lastAccessTime < oneHourAgo) {\r\n          this.metrics.delete(key);\r\n        }\r\n      }\r\n    }, 60 * 60 * 1000); // 1 hora\r\n  }\r\n\r\n  private startMemoryMonitoring(): void {\r\n    // Monitorear uso de memoria cada 5 minutos\r\n    setInterval(() => {\r\n      const memoryUsage = process.memoryUsage();\r\n      \r\n      if (memoryUsage.heapUsed > 500 * 1024 * 1024) { // 500MB\r\n        console.warn('[ENTERPRISE_CACHE] High memory usage detected:', memoryUsage);\r\n        // Aquí se podría implementar limpieza automática\r\n      }\r\n    }, 5 * 60 * 1000); // 5 minutos\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON Y UTILIDADES\r\n// =====================================================\r\n\r\nexport const enterpriseCacheSystem = EnterpriseCacheSystem.getInstance();\r\n\r\n/**\r\n * Funciones de utilidad para casos comunes\r\n */\r\nexport const EnterpriseCacheUtils = {\r\n  /**\r\n   * Cache para datos de autenticación críticos\r\n   */\r\n  async cacheAuthData<T>(key: string, fetcher: () => Promise<T>, context: EnterpriseAuthContext): Promise<T> {\r\n    const cached = await enterpriseCacheSystem.get<T>(key, ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL, context);\r\n    if (cached !== null) {return cached;}\r\n\r\n    const data = await fetcher();\r\n    await enterpriseCacheSystem.set(key, data, ENTERPRISE_CACHE_CONFIGS.AUTH_CRITICAL, context);\r\n    return data;\r\n  },\r\n\r\n  /**\r\n   * Cache inteligente para productos\r\n   */\r\n  async cacheProductData<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\r\n    const cached = await enterpriseCacheSystem.get<T>(key, ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART);\r\n    if (cached !== null) {return cached;}\r\n\r\n    const data = await fetcher();\r\n    await enterpriseCacheSystem.set(key, data, ENTERPRISE_CACHE_CONFIGS.PRODUCTS_SMART);\r\n    return data;\r\n  },\r\n\r\n  /**\r\n   * Cache de alta performance para APIs públicas\r\n   */\r\n  async cachePublicData<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\r\n    const cached = await enterpriseCacheSystem.get<T>(key, ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE);\r\n    if (cached !== null) {return cached;}\r\n\r\n    const data = await fetcher();\r\n    await enterpriseCacheSystem.set(key, data, ENTERPRISE_CACHE_CONFIGS.PUBLIC_PERFORMANCE);\r\n    return data;\r\n  },\r\n\r\n  /**\r\n   * Invalidación masiva por patrones\r\n   */\r\n  async invalidateByPatterns(patterns: string[], context?: EnterpriseAuthContext): Promise<void> {\r\n    const invalidationPromises = patterns.map(pattern => \r\n      enterpriseCacheSystem.invalidate(pattern, 'manual', context)\r\n    );\r\n    await Promise.all(invalidationPromises);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}