{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { supabaseAdmin } from '@/lib/integrations/supabase'\nimport { auth } from '@/lib/auth/config'\nimport { ApiResponse } from '@/types/api'\nimport { logProfileActivity, getRequestInfo } from '@/lib/activity/activityLogger'\n\n// ===================================\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\n// ===================================\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter'\nimport { API_TIMEOUTS, withDatabaseTimeout, getEndpointTimeouts } from '@/lib/config/api-timeouts'\nimport { createSecurityLogger } from '@/lib/logging/security-logger'\n\n// ===================================\n// GET - Obtener perfil de usuario\n// ===================================\nexport async function GET(request: NextRequest) {\n  // Crear logger de seguridad con contexto\n  const securityLogger = createSecurityLogger(request)\n\n  // Aplicar rate limiting para APIs de usuario\n  const rateLimitResult = await withRateLimit(request, RATE_LIMIT_CONFIGS.auth, async () => {\n    // Log de acceso a la API\n    securityLogger.log({\n      type: 'api_access',\n      endpoint: '/api/user/profile',\n      method: 'GET',\n      userAgent: request.headers.get('user-agent'),\n      timestamp: new Date().toISOString(),\n    })\n\n    try {\n      // Verificar que el cliente administrativo esté disponible\n      if (!supabaseAdmin) {\n        console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile')\n\n        // Log de error de seguridad\n        securityLogger.log({\n          type: 'service_unavailable',\n          service: 'supabase_admin',\n          endpoint: '/api/user/profile',\n        })\n\n        return NextResponse.json(\n          { error: 'Servicio de base de datos no disponible' },\n          { status: 503 }\n        )\n      }\n\n      // Autenticación con Clerk\n      const session = await auth()\n      if (!session?.user) {\n        // Log de intento de acceso no autorizado\n        securityLogger.log({\n          type: 'unauthorized_access',\n          endpoint: '/api/user/profile',\n          reason: 'no_session',\n        })\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: 'Usuario no autenticado',\n        }\n        return NextResponse.json(errorResponse, { status: 401 })\n      }\n\n      // Buscar usuario en Supabase\n      const userId = session.user.id\n      const { data: user, error } = await withDatabaseTimeout(\n        supabaseAdmin.from('users').select('*').eq('clerk_id', userId).single(),\n        API_TIMEOUTS.database\n      )\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error al obtener usuario:', error)\n\n        // Log de error de base de datos\n        securityLogger.logApiError(error.message, '/api/user/profile')\n\n        return NextResponse.json({ error: 'Error al obtener perfil de usuario' }, { status: 500 })\n      }\n\n      // Si no existe el usuario, crear uno demo\n      if (!user) {\n        const { data: newUser, error: createError } = await supabaseAdmin\n          .from('users')\n          .insert([\n            {\n              clerk_id: userId,\n              email: 'usuario@demo.com',\n              name: 'Usuario Demo',\n            },\n          ])\n          .select()\n          .single()\n\n        if (createError) {\n          console.error('Error al crear usuario demo:', createError)\n          return NextResponse.json({ error: 'Error al crear perfil de usuario' }, { status: 500 })\n        }\n\n        return NextResponse.json({\n          success: true,\n          user: newUser,\n        })\n      }\n\n      // Log de operación exitosa\n      securityLogger.log({\n        type: 'user_profile_retrieved',\n        userId: userId,\n        hasUser: !!user,\n      })\n\n      return NextResponse.json({\n        success: true,\n        user,\n      })\n    } catch (error) {\n      console.error('Error en GET /api/user/profile:', error)\n\n      // Log de error de seguridad\n      securityLogger.logApiError(\n        error instanceof Error ? error.message : 'Unknown error',\n        '/api/user/profile'\n      )\n\n      return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n    }\n  })\n\n  // Manejar rate limit excedido\n  if (rateLimitResult instanceof NextResponse) {\n    securityLogger.logRateLimitExceeded(securityLogger.context, {\n      endpoint: '/api/user/profile',\n      method: 'GET',\n    })\n    return rateLimitResult\n  }\n\n  return rateLimitResult\n}\n\n// ===================================\n// PUT - Actualizar perfil de usuario\n// ===================================\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verificar que el cliente administrativo esté disponible\n    if (!supabaseAdmin) {\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile')\n      return NextResponse.json(\n        { error: 'Servicio de base de datos no disponible' },\n        { status: 503 }\n      )\n    }\n\n    // Autenticación con Clerk\n    const session = await auth()\n    if (!session?.user) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Usuario no autenticado',\n      }\n      return NextResponse.json(errorResponse, { status: 401 })\n    }\n    const userId = session.user.id\n    const body = await request.json()\n\n    // Validar datos requeridos\n    const { name, email, phone } = body\n    if (!name || !email) {\n      return NextResponse.json({ error: 'Nombre y email son requeridos' }, { status: 400 })\n    }\n\n    // Actualizar usuario en Supabase\n    const { data: updatedUser, error } = await supabaseAdmin\n      .from('users')\n      .update({\n        name,\n        email,\n        phone: phone || null,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('clerk_id', userId)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Error al actualizar usuario:', error)\n      return NextResponse.json({ error: 'Error al actualizar perfil de usuario' }, { status: 500 })\n    }\n\n    // Registrar actividad de actualización de perfil\n    const requestInfo = getRequestInfo(request)\n    await logProfileActivity(\n      updatedUser.id,\n      'update_profile',\n      {\n        fields_updated: Object.keys(body),\n        previous_name: updatedUser.name !== name ? 'changed' : 'unchanged',\n        previous_email: updatedUser.email !== email ? 'changed' : 'unchanged',\n        previous_phone: updatedUser.phone !== phone ? 'changed' : 'unchanged',\n      },\n      requestInfo\n    )\n\n    return NextResponse.json({\n      success: true,\n      user: updatedUser,\n      message: 'Perfil actualizado correctamente',\n    })\n  } catch (error) {\n    console.error('Error en PUT /api/user/profile:', error)\n    return NextResponse.json({ error: 'Error interno del servidor' }, { status: 500 })\n  }\n}\n"],"names":["GET","PUT","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","auth","log","type","endpoint","method","userAgent","headers","get","timestamp","Date","toISOString","supabaseAdmin","console","error","service","NextResponse","json","status","session","user","reason","errorResponse","data","success","userId","id","withDatabaseTimeout","from","select","eq","single","API_TIMEOUTS","database","code","logApiError","message","newUser","createError","insert","clerk_id","email","name","hasUser","Error","logRateLimitExceeded","context","body","phone","updatedUser","update","updated_at","requestInfo","getRequestInfo","logProfileActivity","fields_updated","Object","keys","previous_name","previous_email","previous_phone"],"mappings":"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"}