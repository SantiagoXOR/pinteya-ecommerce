{"version":3,"names":["ASSET_CONFIGS","cov_8xkeda9qo","f","s","AssetOptimizer","AssetUtils","assetOptimizer","PRODUCT_IMAGES","compress","quality","format","maxWidth","maxHeight","lazy","PAYMENT_ICONS","HERO_IMAGES","AVATARS","constructor","getInstance","instance","b","optimizeImageUrl","originalUrl","config","startsWith","url","URL","hostname","includes","params","URLSearchParams","set","toString","search","error","_logger","logger","LogCategory","API","generateSrcSet","baseUrl","sizes","width","suffix","srcSet","filter","size","map","optimizedConfig","join","generateSizes","breakpoints","bp","condition","preloadCriticalAssets","assets","window","forEach","asset","link","document","createElement","rel","href","type","as","crossOrigin","head","appendChild","info","setupLazyLoading","imageObserver","IntersectionObserver","entries","observer","entry","isIntersecting","img","target","dataset","src","removeAttribute","srcset","classList","remove","unobserve","rootMargin","threshold","querySelectorAll","observe","optimizeCriticalCSS","criticalSelectors","criticalCSS","selector","optimizeJsonResponse","data","cleaned","removeNullValues","compressed","JSON","stringify","obj","undefined","Array","isArray","item","key","value","Object","cleanedValue","optimizeProductImage","optimizePaymentIcon","generateProductImageProps","loading","decoding","preloadPaymentAssets","criticalAssets","initializeClientOptimizations"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\asset-optimizer.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ASSET OPTIMIZER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\n\r\n// Configuración de optimización de assets\r\ninterface AssetConfig {\r\n  compress: boolean;\r\n  quality?: number;\r\n  format?: 'webp' | 'jpeg' | 'png';\r\n  maxWidth?: number;\r\n  maxHeight?: number;\r\n  lazy?: boolean;\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const ASSET_CONFIGS = {\r\n  // Para imágenes de productos\r\n  PRODUCT_IMAGES: {\r\n    compress: true,\r\n    quality: 85,\r\n    format: 'webp' as const,\r\n    maxWidth: 800,\r\n    maxHeight: 600,\r\n    lazy: true,\r\n  },\r\n  \r\n  // Para iconos de pago\r\n  PAYMENT_ICONS: {\r\n    compress: true,\r\n    quality: 90,\r\n    format: 'webp' as const,\r\n    maxWidth: 64,\r\n    maxHeight: 64,\r\n    lazy: false,\r\n  },\r\n  \r\n  // Para imágenes de hero/banner\r\n  HERO_IMAGES: {\r\n    compress: true,\r\n    quality: 80,\r\n    format: 'webp' as const,\r\n    maxWidth: 1920,\r\n    maxHeight: 1080,\r\n    lazy: true,\r\n  },\r\n  \r\n  // Para avatares de usuario\r\n  AVATARS: {\r\n    compress: true,\r\n    quality: 85,\r\n    format: 'webp' as const,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    lazy: true,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para optimización de assets\r\n */\r\nexport class AssetOptimizer {\r\n  private static instance: AssetOptimizer;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): AssetOptimizer {\r\n    if (!AssetOptimizer.instance) {\r\n      AssetOptimizer.instance = new AssetOptimizer();\r\n    }\r\n    return AssetOptimizer.instance;\r\n  }\r\n\r\n  /**\r\n   * Optimiza una URL de imagen\r\n   */\r\n  optimizeImageUrl(\r\n    originalUrl: string,\r\n    config: AssetConfig = ASSET_CONFIGS.PRODUCT_IMAGES\r\n  ): string {\r\n    try {\r\n      // Si es una URL externa, aplicar parámetros de optimización\r\n      if (originalUrl.startsWith('http')) {\r\n        const url = new URL(originalUrl);\r\n        \r\n        // Para Supabase Storage, agregar parámetros de transformación\r\n        if (url.hostname.includes('supabase')) {\r\n          const params = new URLSearchParams();\r\n          \r\n          if (config.maxWidth) {\r\n            params.set('width', config.maxWidth.toString());\r\n          }\r\n          \r\n          if (config.maxHeight) {\r\n            params.set('height', config.maxHeight.toString());\r\n          }\r\n          \r\n          if (config.quality) {\r\n            params.set('quality', config.quality.toString());\r\n          }\r\n          \r\n          if (config.format) {\r\n            params.set('format', config.format);\r\n          }\r\n          \r\n          if (params.toString()) {\r\n            url.search = params.toString();\r\n          }\r\n        }\r\n        \r\n        return url.toString();\r\n      }\r\n      \r\n      // Para URLs locales, mantener como están\r\n      return originalUrl;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Image URL optimization failed', error as Error);\r\n      return originalUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera srcSet para imágenes responsivas\r\n   */\r\n  generateSrcSet(\r\n    baseUrl: string,\r\n    config: AssetConfig = ASSET_CONFIGS.PRODUCT_IMAGES\r\n  ): string {\r\n    try {\r\n      const sizes = [\r\n        { width: 320, suffix: 'sm' },\r\n        { width: 640, suffix: 'md' },\r\n        { width: 1024, suffix: 'lg' },\r\n        { width: 1920, suffix: 'xl' },\r\n      ];\r\n\r\n      const srcSet = sizes\r\n        .filter(size => !config.maxWidth || size.width <= config.maxWidth)\r\n        .map(size => {\r\n          const optimizedConfig = { ...config, maxWidth: size.width };\r\n          const url = this.optimizeImageUrl(baseUrl, optimizedConfig);\r\n          return `${url} ${size.width}w`;\r\n        })\r\n        .join(', ');\r\n\r\n      return srcSet;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'SrcSet generation failed', error as Error);\r\n      return baseUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera sizes attribute para imágenes responsivas\r\n   */\r\n  generateSizes(breakpoints: Array<{ condition: string; size: string }>): string {\r\n    return breakpoints\r\n      .map(bp => `${bp.condition} ${bp.size}`)\r\n      .join(', ');\r\n  }\r\n\r\n  /**\r\n   * Precarga assets críticos\r\n   */\r\n  preloadCriticalAssets(assets: Array<{ url: string; type: 'image' | 'font' | 'style' }>): void {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    assets.forEach(asset => {\r\n      try {\r\n        const link = document.createElement('link');\r\n        link.rel = 'preload';\r\n        link.href = asset.url;\r\n        \r\n        switch (asset.type) {\r\n          case 'image':\r\n            link.as = 'image';\r\n            break;\r\n          case 'font':\r\n            link.as = 'font';\r\n            link.crossOrigin = 'anonymous';\r\n            break;\r\n          case 'style':\r\n            link.as = 'style';\r\n            break;\r\n        }\r\n        \r\n        document.head.appendChild(link);\r\n        \r\n        logger.info(LogCategory.API, 'Asset preloaded');\r\n      } catch (error) {\r\n        logger.error(LogCategory.API, 'Asset preload failed', error as Error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lazy load de imágenes con Intersection Observer\r\n   */\r\n  setupLazyLoading(): void {\r\n    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {\r\n      return;\r\n    }\r\n\r\n    const imageObserver = new IntersectionObserver((entries, observer) => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          const img = entry.target as HTMLImageElement;\r\n          \r\n          if (img.dataset.src) {\r\n            img.src = img.dataset.src;\r\n            img.removeAttribute('data-src');\r\n          }\r\n          \r\n          if (img.dataset.srcset) {\r\n            img.srcset = img.dataset.srcset;\r\n            img.removeAttribute('data-srcset');\r\n          }\r\n          \r\n          img.classList.remove('lazy');\r\n          observer.unobserve(img);\r\n          \r\n          logger.info(LogCategory.API, 'Lazy image loaded');\r\n        }\r\n      });\r\n    }, {\r\n      rootMargin: '50px 0px',\r\n      threshold: 0.01,\r\n    });\r\n\r\n    // Observar todas las imágenes lazy\r\n    document.querySelectorAll('img[data-src]').forEach(img => {\r\n      imageObserver.observe(img);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimiza CSS crítico\r\n   */\r\n  optimizeCriticalCSS(criticalSelectors: string[]): string {\r\n    try {\r\n      // En una implementación real, esto extraería CSS crítico\r\n      // Por ahora, retornamos un placeholder\r\n      const criticalCSS = criticalSelectors\r\n        .map(selector => `${selector} { /* critical styles */ }`)\r\n        .join('\\n');\r\n\r\n      logger.info(LogCategory.API, 'Critical CSS optimized');\r\n\r\n      return criticalCSS;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Critical CSS optimization failed', error as Error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Comprime y optimiza JSON para APIs\r\n   */\r\n  optimizeJsonResponse(data: any): string {\r\n    try {\r\n      // Remover propiedades null/undefined\r\n      const cleaned = this.removeNullValues(data);\r\n      \r\n      // Comprimir JSON (sin espacios)\r\n      const compressed = JSON.stringify(cleaned);\r\n      \r\n      logger.info(LogCategory.API, 'JSON response optimized');\r\n\r\n      return compressed;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'JSON optimization failed', error as Error);\r\n      // En caso de error (como objetos circulares), retornar string simple\r\n      try {\r\n        return JSON.stringify({ error: 'Serialization failed' });\r\n      } catch {\r\n        return '{\"error\":\"Serialization failed\"}';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remueve valores null/undefined de objetos\r\n   */\r\n  private removeNullValues(obj: any): any {\r\n    if (obj === null || obj === undefined) {\r\n      return undefined;\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n      return obj.map(item => this.removeNullValues(item)).filter(item => item !== undefined);\r\n    }\r\n    \r\n    if (typeof obj === 'object') {\r\n      const cleaned: any = {};\r\n      for (const [key, value] of Object.entries(obj)) {\r\n        const cleanedValue = this.removeNullValues(value);\r\n        if (cleanedValue !== undefined) {\r\n          cleaned[key] = cleanedValue;\r\n        }\r\n      }\r\n      return cleaned;\r\n    }\r\n    \r\n    return obj;\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const assetOptimizer = AssetOptimizer.getInstance();\r\n\r\n/**\r\n * Funciones de utilidad para optimización de assets\r\n */\r\nexport const AssetUtils = {\r\n  /**\r\n   * Optimiza imagen de producto\r\n   */\r\n  optimizeProductImage(url: string): string {\r\n    return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES);\r\n  },\r\n\r\n  /**\r\n   * Optimiza icono de pago\r\n   */\r\n  optimizePaymentIcon(url: string): string {\r\n    return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PAYMENT_ICONS);\r\n  },\r\n\r\n  /**\r\n   * Genera imagen responsiva para productos\r\n   */\r\n  generateProductImageProps(url: string) {\r\n    return {\r\n      src: assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES),\r\n      srcSet: assetOptimizer.generateSrcSet(url, ASSET_CONFIGS.PRODUCT_IMAGES),\r\n      sizes: assetOptimizer.generateSizes([\r\n        { condition: '(max-width: 640px)', size: '100vw' },\r\n        { condition: '(max-width: 1024px)', size: '50vw' },\r\n        { condition: '', size: '33vw' },\r\n      ]),\r\n      loading: 'lazy' as const,\r\n      decoding: 'async' as const,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Precarga assets críticos de pago\r\n   */\r\n  preloadPaymentAssets(): void {\r\n    const criticalAssets = [\r\n      { url: '/images/logo/visa.svg', type: 'image' as const },\r\n      { url: '/images/logo/mastercard.svg', type: 'image' as const },\r\n      { url: '/images/logo/mercadopago.svg', type: 'image' as const },\r\n    ];\r\n\r\n    assetOptimizer.preloadCriticalAssets(criticalAssets);\r\n  },\r\n\r\n  /**\r\n   * Inicializa optimizaciones en el cliente\r\n   */\r\n  initializeClientOptimizations(): void {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    // Configurar lazy loading\r\n    assetOptimizer.setupLazyLoading();\r\n\r\n    // Precargar assets críticos\r\n    AssetUtils.preloadPaymentAssets();\r\n\r\n    logger.info(LogCategory.API, 'Client asset optimizations initialized');\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}