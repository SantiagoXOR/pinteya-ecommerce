{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\redux\\features\\cart-slice.ts"],"sourcesContent":["import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../store\";\r\nimport { loadCartFromStorage } from \"../middleware/cartPersistence\";\r\n\r\ntype InitialState = {\r\n  items: CartItem[];\r\n};\r\n\r\ntype CartItem = {\r\n  id: number;\r\n  title: string;\r\n  price: number;\r\n  discountedPrice: number;\r\n  quantity: number;\r\n  imgs?: {\r\n    thumbnails: string[];\r\n    previews: string[];\r\n  };\r\n};\r\n\r\n// Función para obtener el estado inicial con persistencia\r\nconst getInitialState = (): InitialState => {\r\n  // En el servidor, siempre retornar estado vacío\r\n  if (typeof window === 'undefined') {\r\n    return { items: [] };\r\n  }\r\n\r\n  // En el cliente, intentar cargar desde localStorage\r\n  try {\r\n    const persistedItems = loadCartFromStorage();\r\n    return { items: persistedItems };\r\n  } catch (error) {\r\n    console.warn('Error loading persisted cart:', error);\r\n    return { items: [] };\r\n  }\r\n};\r\n\r\nconst initialState: InitialState = getInitialState();\r\n\r\nexport const cart = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItemToCart: (state, action: PayloadAction<CartItem>) => {\r\n      const { id, title, price, quantity, discountedPrice, imgs } =\r\n        action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n\r\n      if (existingItem) {\r\n        existingItem.quantity += quantity;\r\n      } else {\r\n        state.items.push({\r\n          id,\r\n          title,\r\n          price,\r\n          quantity,\r\n          discountedPrice,\r\n          imgs,\r\n        });\r\n      }\r\n    },\r\n    removeItemFromCart: (state, action: PayloadAction<number>) => {\r\n      const itemId = action.payload;\r\n      state.items = state.items.filter((item) => item.id !== itemId);\r\n    },\r\n    updateCartItemQuantity: (\r\n      state,\r\n      action: PayloadAction<{ id: number; quantity: number }>\r\n    ) => {\r\n      const { id, quantity } = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n\r\n      if (existingItem) {\r\n        existingItem.quantity = quantity;\r\n      }\r\n    },\r\n\r\n    removeAllItemsFromCart: (state) => {\r\n      state.items = [];\r\n    },\r\n\r\n    // Acción para hidratar el carrito desde localStorage\r\n    hydrateCart: (state, action: PayloadAction<CartItem[]>) => {\r\n      state.items = action.payload;\r\n    },\r\n\r\n    // Acción para reemplazar todo el carrito (útil para migración de usuarios)\r\n    replaceCart: (state, action: PayloadAction<CartItem[]>) => {\r\n      state.items = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectCartItems = (state: RootState) => state.cartReducer.items;\r\n\r\nexport const selectTotalPrice = createSelector([selectCartItems], (items) => {\r\n  return items.reduce((total: number, item: CartItem) => {\r\n    return total + item.discountedPrice * item.quantity;\r\n  }, 0);\r\n});\r\n\r\nexport const {\r\n  addItemToCart,\r\n  removeItemFromCart,\r\n  updateCartItemQuantity,\r\n  removeAllItemsFromCart,\r\n  hydrateCart,\r\n  replaceCart,\r\n} = cart.actions;\r\nexport default cart.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["addItemToCart","cart","hydrateCart","removeAllItemsFromCart","removeItemFromCart","replaceCart","selectCartItems","selectTotalPrice","updateCartItemQuantity","getInitialState","window","items","persistedItems","loadCartFromStorage","error","console","warn","initialState","createSlice","name","reducers","state","action","id","title","price","quantity","discountedPrice","imgs","payload","existingItem","find","item","push","itemId","filter","cartReducer","createSelector","reduce","total","actions","reducer"],"mappings":";;;;;;;;;;;QAsGEA;eAAAA;;QA/DWC;eAAAA;;QAsEb;eAAA;;QAHEC;eAAAA;;QADAC;eAAAA;;QAFAC;eAAAA;;QAIAC;eAAAA;;QAdWC;eAAAA;;QAEAC;eAAAA;;QASXC;eAAAA;;;yBAxGyD;iCAEvB;AAkBpC,0DAA0D;AAC1D,MAAMC,kBAAkB;IACtB,gDAAgD;IAChD,IAAI,OAAOC,WAAW,aAAa;QACjC,OAAO;YAAEC,OAAO,EAAE;QAAC;IACrB;IAEA,oDAAoD;IACpD,IAAI;QACF,MAAMC,iBAAiBC,IAAAA,oCAAmB;QAC1C,OAAO;YAAEF,OAAOC;QAAe;IACjC,EAAE,OAAOE,OAAO;QACdC,QAAQC,IAAI,CAAC,iCAAiCF;QAC9C,OAAO;YAAEH,OAAO,EAAE;QAAC;IACrB;AACF;AAEA,MAAMM,eAA6BR;AAE5B,MAAMR,OAAOiB,IAAAA,oBAAW,EAAC;IAC9BC,MAAM;IACNF;IACAG,UAAU;QACRpB,eAAe,CAACqB,OAAOC;YACrB,MAAM,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,IAAI,EAAE,GACzDN,OAAOO,OAAO;YAChB,MAAMC,eAAeT,MAAMV,KAAK,CAACoB,IAAI,CAAC,CAACC,OAASA,KAAKT,EAAE,KAAKA;YAE5D,IAAIO,cAAc;gBAChBA,aAAaJ,QAAQ,IAAIA;YAC3B,OAAO;gBACLL,MAAMV,KAAK,CAACsB,IAAI,CAAC;oBACfV;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;gBACF;YACF;QACF;QACAxB,oBAAoB,CAACiB,OAAOC;YAC1B,MAAMY,SAASZ,OAAOO,OAAO;YAC7BR,MAAMV,KAAK,GAAGU,MAAMV,KAAK,CAACwB,MAAM,CAAC,CAACH,OAASA,KAAKT,EAAE,KAAKW;QACzD;QACA1B,wBAAwB,CACtBa,OACAC;YAEA,MAAM,EAAEC,EAAE,EAAEG,QAAQ,EAAE,GAAGJ,OAAOO,OAAO;YACvC,MAAMC,eAAeT,MAAMV,KAAK,CAACoB,IAAI,CAAC,CAACC,OAASA,KAAKT,EAAE,KAAKA;YAE5D,IAAIO,cAAc;gBAChBA,aAAaJ,QAAQ,GAAGA;YAC1B;QACF;QAEAvB,wBAAwB,CAACkB;YACvBA,MAAMV,KAAK,GAAG,EAAE;QAClB;QAEA,qDAAqD;QACrDT,aAAa,CAACmB,OAAOC;YACnBD,MAAMV,KAAK,GAAGW,OAAOO,OAAO;QAC9B;QAEA,2EAA2E;QAC3ExB,aAAa,CAACgB,OAAOC;YACnBD,MAAMV,KAAK,GAAGW,OAAOO,OAAO;QAC9B;IACF;AACF;AAEO,MAAMvB,kBAAkB,CAACe,QAAqBA,MAAMe,WAAW,CAACzB,KAAK;AAErE,MAAMJ,mBAAmB8B,IAAAA,uBAAc,EAAC;IAAC/B;CAAgB,EAAE,CAACK;IACjE,OAAOA,MAAM2B,MAAM,CAAC,CAACC,OAAeP;QAClC,OAAOO,QAAQP,KAAKL,eAAe,GAAGK,KAAKN,QAAQ;IACrD,GAAG;AACL;AAEO,MAAM,EACX1B,aAAa,EACbI,kBAAkB,EAClBI,sBAAsB,EACtBL,sBAAsB,EACtBD,WAAW,EACXG,WAAW,EACZ,GAAGJ,KAAKuC,OAAO;MAChB,WAAevC,KAAKwC,OAAO"}