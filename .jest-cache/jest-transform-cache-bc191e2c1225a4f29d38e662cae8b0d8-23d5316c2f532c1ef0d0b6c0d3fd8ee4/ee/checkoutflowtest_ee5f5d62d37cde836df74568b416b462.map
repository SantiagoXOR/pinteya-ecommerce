{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\integration\\checkout-flow.test.tsx"],"sourcesContent":["// ===================================\n// TESTS DE INTEGRACIÓN - FLUJO DE CHECKOUT\n// Tests completos del proceso de compra\n// ===================================\n\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { CheckoutPage } from '@/app/checkout/page'\nimport { CartProvider } from '@/contexts/CartContext'\nimport { AuthProvider } from '@/contexts/AuthContext'\nimport { supabase } from '@/lib/integrations/supabase'\nimport { toast } from 'sonner'\nimport { useRouter } from 'next/navigation'\nimport React from 'react'\n\n// Mocks\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      getUser: jest.fn(),\n      signInWithPassword: jest.fn(),\n    },\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          order: jest.fn(() => ({\n            limit: jest.fn(),\n          })),\n        })),\n        insert: jest.fn(),\n        update: jest.fn(() => ({\n          eq: jest.fn(),\n        })),\n      })),\n    })),\n  },\n}))\n\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n    loading: jest.fn(),\n  },\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}))\n\n// Mock MercadoPago\njest.mock('@/lib/mercadopago', () => ({\n  createPreference: jest.fn(),\n  processPayment: jest.fn(),\n}))\n\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  refresh: jest.fn(),\n}\n\n// Mock localStorage\nconst localStorageMock = (() => {\n  let store: { [key: string]: string } = {}\n  return {\n    getItem: (key: string) => store[key] || null,\n    setItem: (key: string, value: string) => {\n      store[key] = value\n    },\n    removeItem: (key: string) => {\n      delete store[key]\n    },\n    clear: () => {\n      store = {}\n    },\n  }\n})()\n\nObject.defineProperty(window, 'localStorage', { value: localStorageMock })\n\n// Datos de prueba\nconst mockUser = {\n  id: 'user-123',\n  email: 'test@example.com',\n  user_metadata: { full_name: 'Test User' },\n}\n\nconst mockCartItems = [\n  {\n    id: 1,\n    name: 'Producto Test 1',\n    price: 100,\n    quantity: 2,\n    image: 'https://example.com/image1.jpg',\n    stock: 10,\n  },\n  {\n    id: 2,\n    name: 'Producto Test 2',\n    price: 50,\n    quantity: 1,\n    image: 'https://example.com/image2.jpg',\n    stock: 5,\n  },\n]\n\nconst mockShippingAddress = {\n  street: 'Av. Corrientes 1234',\n  city: 'Buenos Aires',\n  state: 'CABA',\n  postal_code: '1043',\n  country: 'Argentina',\n}\n\n// Wrapper de providers\nconst createWrapper = (initialCartItems = mockCartItems) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  })\n\n  // Configurar localStorage con items del carrito\n  localStorageMock.setItem('cart-items', JSON.stringify(initialCartItems))\n\n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <CartProvider>{children}</CartProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  )\n}\n\ndescribe('Flujo de Checkout - Integración', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    localStorageMock.clear()\n    ;(useRouter as jest.Mock).mockReturnValue(mockRouter)\n  })\n\n  describe('Inicialización del Checkout', () => {\n    it('debe mostrar los productos del carrito correctamente', async () => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Verificar que se muestran los productos\n      expect(screen.getByText('Producto Test 1')).toBeInTheDocument()\n      expect(screen.getByText('Producto Test 2')).toBeInTheDocument()\n\n      // Verificar cantidades\n      expect(screen.getByText('Cantidad: 2')).toBeInTheDocument()\n      expect(screen.getByText('Cantidad: 1')).toBeInTheDocument()\n\n      // Verificar total\n      expect(screen.getByText('Total: $250')).toBeInTheDocument()\n    })\n\n    it('debe redirigir si el carrito está vacío', async () => {\n      render(<CheckoutPage />, { wrapper: createWrapper([]) })\n\n      await waitFor(() => {\n        expect(mockRouter.push).toHaveBeenCalledWith('/cart')\n      })\n\n      expect(toast.error).toHaveBeenCalledWith(\n        'Tu carrito está vacío. Agrega productos antes de continuar.'\n      )\n    })\n\n    it('debe mostrar formulario de login si no está autenticado', async () => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: null },\n        error: null,\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      expect(screen.getByText('Iniciar Sesión')).toBeInTheDocument()\n      expect(screen.getByLabelText('Email')).toBeInTheDocument()\n      expect(screen.getByLabelText('Contraseña')).toBeInTheDocument()\n    })\n  })\n\n  describe('Autenticación en Checkout', () => {\n    it('debe permitir login durante el checkout', async () => {\n      const user = userEvent.setup()\n\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: null },\n        error: null,\n      })\n      ;(supabase.auth.signInWithPassword as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Llenar formulario de login\n      await user.type(screen.getByLabelText('Email'), 'test@example.com')\n      await user.type(screen.getByLabelText('Contraseña'), 'password123')\n\n      // Hacer click en login\n      await user.click(screen.getByRole('button', { name: /iniciar sesión/i }))\n\n      await waitFor(() => {\n        expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({\n          email: 'test@example.com',\n          password: 'password123',\n        })\n      })\n\n      // Debe mostrar el formulario de checkout después del login\n      await waitFor(() => {\n        expect(screen.getByText('Información de Envío')).toBeInTheDocument()\n      })\n    })\n\n    it('debe manejar errores de login', async () => {\n      const user = userEvent.setup()\n\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: null },\n        error: null,\n      })\n      ;(supabase.auth.signInWithPassword as jest.Mock).mockResolvedValue({\n        data: null,\n        error: { message: 'Invalid credentials' },\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await user.type(screen.getByLabelText('Email'), 'test@example.com')\n      await user.type(screen.getByLabelText('Contraseña'), 'wrongpassword')\n      await user.click(screen.getByRole('button', { name: /iniciar sesión/i }))\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith('Credenciales inválidas')\n      })\n    })\n  })\n\n  describe('Formulario de Información de Envío', () => {\n    beforeEach(() => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n    })\n\n    it('debe validar campos requeridos', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Intentar continuar sin llenar campos\n      const continueButton = screen.getByRole('button', { name: /continuar/i })\n      await user.click(continueButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('La dirección es requerida')).toBeInTheDocument()\n        expect(screen.getByText('La ciudad es requerida')).toBeInTheDocument()\n        expect(screen.getByText('El código postal es requerido')).toBeInTheDocument()\n      })\n    })\n\n    it('debe llenar y validar el formulario correctamente', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Llenar formulario de envío\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n\n      // Seleccionar país\n      const countrySelect = screen.getByLabelText('País')\n      await user.selectOptions(countrySelect, mockShippingAddress.country)\n\n      // Continuar al siguiente paso\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      await waitFor(() => {\n        expect(screen.getByText('Método de Pago')).toBeInTheDocument()\n      })\n    })\n\n    it('debe validar formato de código postal', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await user.type(screen.getByLabelText('Código Postal'), 'invalid')\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      await waitFor(() => {\n        expect(screen.getByText('Formato de código postal inválido')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Selección de Método de Pago', () => {\n    beforeEach(async () => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n    })\n\n    const fillShippingForm = async (user: any) => {\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n      await user.selectOptions(screen.getByLabelText('País'), mockShippingAddress.country)\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n    }\n\n    it('debe mostrar opciones de pago disponibles', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await fillShippingForm(user)\n\n      await waitFor(() => {\n        expect(screen.getByText('MercadoPago')).toBeInTheDocument()\n        expect(screen.getByText('Transferencia Bancaria')).toBeInTheDocument()\n        expect(screen.getByText('Efectivo')).toBeInTheDocument()\n      })\n    })\n\n    it('debe seleccionar método de pago', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await fillShippingForm(user)\n\n      // Seleccionar MercadoPago\n      const mercadopagoOption = screen.getByLabelText('MercadoPago')\n      await user.click(mercadopagoOption)\n\n      expect(mercadopagoOption).toBeChecked()\n\n      // Debe mostrar información adicional de MercadoPago\n      expect(screen.getByText('Paga con tarjeta de crédito, débito o efectivo')).toBeInTheDocument()\n    })\n\n    it('debe validar selección de método de pago', async () => {\n      const user = userEvent.setup()\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await fillShippingForm(user)\n\n      // Intentar continuar sin seleccionar método de pago\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(screen.getByText('Selecciona un método de pago')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Finalización de Compra', () => {\n    beforeEach(() => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n    })\n\n    const completeCheckoutForm = async (user: any) => {\n      // Llenar información de envío\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n      await user.selectOptions(screen.getByLabelText('País'), mockShippingAddress.country)\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      // Seleccionar método de pago\n      await waitFor(() => {\n        expect(screen.getByLabelText('MercadoPago')).toBeInTheDocument()\n      })\n      await user.click(screen.getByLabelText('MercadoPago'))\n    }\n\n    it('debe crear la orden exitosamente', async () => {\n      const user = userEvent.setup()\n\n      // Mock de creación de orden\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockResolvedValue({\n          data: [{ id: 'order-123' }],\n          error: null,\n        }),\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await completeCheckoutForm(user)\n\n      // Finalizar compra\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(supabase.from).toHaveBeenCalledWith('orders')\n        expect(toast.success).toHaveBeenCalledWith('¡Compra realizada exitosamente!')\n        expect(mockRouter.push).toHaveBeenCalledWith('/orders/order-123')\n      })\n    })\n\n    it('debe manejar errores al crear la orden', async () => {\n      const user = userEvent.setup()\n\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await completeCheckoutForm(user)\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith('Error al procesar la compra. Intenta nuevamente.')\n      })\n    })\n\n    it('debe validar stock antes de crear la orden', async () => {\n      const user = userEvent.setup()\n\n      // Mock de productos con stock insuficiente\n      const itemsWithLowStock = [\n        { ...mockCartItems[0], quantity: 15, stock: 10 }, // Más cantidad que stock\n      ]\n\n      render(<CheckoutPage />, { wrapper: createWrapper(itemsWithLowStock) })\n\n      await completeCheckoutForm(user)\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith('Algunos productos no tienen stock suficiente')\n      })\n    })\n\n    it('debe limpiar el carrito después de compra exitosa', async () => {\n      const user = userEvent.setup()\n\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockResolvedValue({\n          data: [{ id: 'order-123' }],\n          error: null,\n        }),\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      await completeCheckoutForm(user)\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        // Verificar que el localStorage se limpió\n        const cartItems = JSON.parse(localStorageMock.getItem('cart-items') || '[]')\n        expect(cartItems).toEqual([])\n      })\n    })\n  })\n\n  describe('Integración con MercadoPago', () => {\n    beforeEach(() => {\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n    })\n\n    it('debe crear preferencia de MercadoPago', async () => {\n      const user = userEvent.setup()\n      const { createPreference } = require('@/lib/mercadopago')\n\n      createPreference.mockResolvedValue({\n        id: 'preference-123',\n        init_point: 'https://mercadopago.com/checkout/preference-123',\n      })\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockResolvedValue({\n          data: [{ id: 'order-123' }],\n          error: null,\n        }),\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Completar formulario\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n      await user.selectOptions(screen.getByLabelText('País'), mockShippingAddress.country)\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      await waitFor(() => {\n        expect(screen.getByLabelText('MercadoPago')).toBeInTheDocument()\n      })\n      await user.click(screen.getByLabelText('MercadoPago'))\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(createPreference).toHaveBeenCalledWith({\n          items: expect.arrayContaining([\n            expect.objectContaining({\n              title: 'Producto Test 1',\n              unit_price: 100,\n              quantity: 2,\n            }),\n          ]),\n          payer: {\n            email: mockUser.email,\n          },\n          external_reference: 'order-123',\n        })\n      })\n    })\n  })\n\n  describe('Casos Edge y Errores', () => {\n    it('debe manejar pérdida de conexión', async () => {\n      const user = userEvent.setup()\n\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockRejectedValue(new Error('Network error')),\n      })\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Completar formulario rápidamente\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n      await user.selectOptions(screen.getByLabelText('País'), mockShippingAddress.country)\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      await waitFor(() => {\n        expect(screen.getByLabelText('MercadoPago')).toBeInTheDocument()\n      })\n      await user.click(screen.getByLabelText('MercadoPago'))\n      await user.click(screen.getByRole('button', { name: /finalizar compra/i }))\n\n      await waitFor(() => {\n        expect(toast.error).toHaveBeenCalledWith(\n          'Error de conexión. Verifica tu internet e intenta nuevamente.'\n        )\n      })\n    })\n\n    it('debe prevenir doble envío de formulario', async () => {\n      const user = userEvent.setup()\n\n      let resolveInsert: (value: any) => void\n      const insertPromise = new Promise(resolve => {\n        resolveInsert = resolve\n      })\n\n      ;(supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockReturnValue(insertPromise),\n      })\n      ;(supabase.auth.getUser as jest.Mock).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      })\n\n      render(<CheckoutPage />, { wrapper: createWrapper() })\n\n      // Completar formulario\n      await user.type(screen.getByLabelText('Dirección'), mockShippingAddress.street)\n      await user.type(screen.getByLabelText('Ciudad'), mockShippingAddress.city)\n      await user.type(screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state)\n      await user.type(screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code)\n      await user.selectOptions(screen.getByLabelText('País'), mockShippingAddress.country)\n      await user.click(screen.getByRole('button', { name: /continuar/i }))\n\n      await waitFor(() => {\n        expect(screen.getByLabelText('MercadoPago')).toBeInTheDocument()\n      })\n      await user.click(screen.getByLabelText('MercadoPago'))\n\n      const submitButton = screen.getByRole('button', { name: /finalizar compra/i })\n\n      // Hacer doble click rápido\n      await user.click(submitButton)\n      await user.click(submitButton)\n\n      // El botón debe estar deshabilitado después del primer click\n      expect(submitButton).toBeDisabled()\n\n      // Resolver la promesa\n      resolveInsert!({\n        data: [{ id: 'order-123' }],\n        error: null,\n      })\n\n      // Solo debe haberse llamado una vez\n      await waitFor(() => {\n        expect(supabase.from().insert).toHaveBeenCalledTimes(1)\n      })\n    })\n  })\n})\n"],"names":["jest","mock","supabase","auth","getUser","fn","signInWithPassword","from","select","eq","single","order","limit","insert","update","toast","success","error","loading","useRouter","createPreference","processPayment","mockRouter","push","replace","refresh","localStorageMock","store","getItem","key","setItem","value","removeItem","clear","Object","defineProperty","window","mockUser","id","email","user_metadata","full_name","mockCartItems","name","price","quantity","image","stock","mockShippingAddress","street","city","state","postal_code","country","createWrapper","initialCartItems","queryClient","QueryClient","defaultOptions","queries","retry","mutations","JSON","stringify","children","QueryClientProvider","client","AuthProvider","CartProvider","describe","beforeEach","clearAllMocks","mockReturnValue","it","mockResolvedValue","data","user","render","CheckoutPage","wrapper","expect","screen","getByText","toBeInTheDocument","waitFor","toHaveBeenCalledWith","getByLabelText","userEvent","setup","type","click","getByRole","password","message","continueButton","countrySelect","selectOptions","fillShippingForm","mercadopagoOption","toBeChecked","completeCheckoutForm","itemsWithLowStock","cartItems","parse","toEqual","require","init_point","items","arrayContaining","objectContaining","title","unit_price","payer","external_reference","mockRejectedValue","Error","resolveInsert","insertPromise","Promise","resolve","submitButton","toBeDisabled","toHaveBeenCalledTimes"],"mappings":"AAAA,sCAAsC;AACtC,2CAA2C;AAC3C,wCAAwC;AACxC,sCAAsC;;AAatC,QAAQ;AACRA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,UAAU;YACRC,MAAM;gBACJC,SAASJ,KAAKK,EAAE;gBAChBC,oBAAoBN,KAAKK,EAAE;YAC7B;YACAE,MAAMP,KAAKK,EAAE,CAAC,IAAO,CAAA;oBACnBG,QAAQR,KAAKK,EAAE,CAAC,IAAO,CAAA;4BACrBI,IAAIT,KAAKK,EAAE,CAAC,IAAO,CAAA;oCACjBK,QAAQV,KAAKK,EAAE;oCACfM,OAAOX,KAAKK,EAAE,CAAC,IAAO,CAAA;4CACpBO,OAAOZ,KAAKK,EAAE;wCAChB,CAAA;gCACF,CAAA;4BACAQ,QAAQb,KAAKK,EAAE;4BACfS,QAAQd,KAAKK,EAAE,CAAC,IAAO,CAAA;oCACrBI,IAAIT,KAAKK,EAAE;gCACb,CAAA;wBACF,CAAA;gBACF,CAAA;QACF;IACF,CAAA;AAEAL,KAAKC,IAAI,CAAC,UAAU,IAAO,CAAA;QACzBc,OAAO;YACLC,SAAShB,KAAKK,EAAE;YAChBY,OAAOjB,KAAKK,EAAE;YACda,SAASlB,KAAKK,EAAE;QAClB;IACF,CAAA;AAEAL,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCkB,WAAWnB,KAAKK,EAAE;IACpB,CAAA;AAEA,mBAAmB;AACnBL,KAAKC,IAAI,CAAC,qBAAqB,IAAO,CAAA;QACpCmB,kBAAkBpB,KAAKK,EAAE;QACzBgB,gBAAgBrB,KAAKK,EAAE;IACzB,CAAA;;;;;uBAnD2D;kEACrC;4BAC2B;sBACpB;6BACA;6BACA;0BACJ;wBACH;4BACI;+DACR;;;;;;AA4ClB,MAAMiB,aAAa;IACjBC,MAAMvB,KAAKK,EAAE;IACbmB,SAASxB,KAAKK,EAAE;IAChBoB,SAASzB,KAAKK,EAAE;AAClB;AAEA,oBAAoB;AACpB,MAAMqB,mBAAmB,AAAC,CAAA;IACxB,IAAIC,QAAmC,CAAC;IACxC,OAAO;QACLC,SAAS,CAACC,MAAgBF,KAAK,CAACE,IAAI,IAAI;QACxCC,SAAS,CAACD,KAAaE;YACrBJ,KAAK,CAACE,IAAI,GAAGE;QACf;QACAC,YAAY,CAACH;YACX,OAAOF,KAAK,CAACE,IAAI;QACnB;QACAI,OAAO;YACLN,QAAQ,CAAC;QACX;IACF;AACF,CAAA;AAEAO,OAAOC,cAAc,CAACC,QAAQ,gBAAgB;IAAEL,OAAOL;AAAiB;AAExE,kBAAkB;AAClB,MAAMW,WAAW;IACfC,IAAI;IACJC,OAAO;IACPC,eAAe;QAAEC,WAAW;IAAY;AAC1C;AAEA,MAAMC,gBAAgB;IACpB;QACEJ,IAAI;QACJK,MAAM;QACNC,OAAO;QACPC,UAAU;QACVC,OAAO;QACPC,OAAO;IACT;IACA;QACET,IAAI;QACJK,MAAM;QACNC,OAAO;QACPC,UAAU;QACVC,OAAO;QACPC,OAAO;IACT;CACD;AAED,MAAMC,sBAAsB;IAC1BC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,aAAa;IACbC,SAAS;AACX;AAEA,uBAAuB;AACvB,MAAMC,gBAAgB,CAACC,mBAAmBb,aAAa;IACrD,MAAMc,cAAc,IAAIC,uBAAW,CAAC;QAClCC,gBAAgB;YACdC,SAAS;gBAAEC,OAAO;YAAM;YACxBC,WAAW;gBAAED,OAAO;YAAM;QAC5B;IACF;IAEA,gDAAgD;IAChDlC,iBAAiBI,OAAO,CAAC,cAAcgC,KAAKC,SAAS,CAACR;IAEtD,OAAO,CAAC,EAAES,QAAQ,EAAiC,iBACjD,qBAACC,+BAAmB;YAACC,QAAQV;sBAC3B,cAAA,qBAACW,yBAAY;0BACX,cAAA,qBAACC,yBAAY;8BAAEJ;;;;AAIvB;AAEAK,SAAS,mCAAmC;IAC1CC,WAAW;QACTtE,KAAKuE,aAAa;QAClB7C,iBAAiBO,KAAK;QACpBd,qBAAS,CAAeqD,eAAe,CAAClD;IAC5C;IAEA+C,SAAS,+BAA+B;QACtCI,GAAG,wDAAwD;;YACvDvE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,0CAA0C;YAC1C0B,OAAOC,aAAM,CAACC,SAAS,CAAC,oBAAoBC,iBAAiB;YAC7DH,OAAOC,aAAM,CAACC,SAAS,CAAC,oBAAoBC,iBAAiB;YAE7D,uBAAuB;YACvBH,OAAOC,aAAM,CAACC,SAAS,CAAC,gBAAgBC,iBAAiB;YACzDH,OAAOC,aAAM,CAACC,SAAS,CAAC,gBAAgBC,iBAAiB;YAEzD,kBAAkB;YAClBH,OAAOC,aAAM,CAACC,SAAS,CAAC,gBAAgBC,iBAAiB;QAC3D;QAEAV,GAAG,2CAA2C;YAC5CI,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB,cAAc,EAAE;YAAE;YAEtD,MAAM8B,IAAAA,cAAO,EAAC;gBACZJ,OAAO1D,WAAWC,IAAI,EAAE8D,oBAAoB,CAAC;YAC/C;YAEAL,OAAOjE,aAAK,CAACE,KAAK,EAAEoE,oBAAoB,CACtC;QAEJ;QAEAZ,GAAG,2DAA2D;;YAC1DvE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAM;gBAAK;gBACnB3D,OAAO;YACT;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD0B,OAAOC,aAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;YAC5DH,OAAOC,aAAM,CAACK,cAAc,CAAC,UAAUH,iBAAiB;YACxDH,OAAOC,aAAM,CAACK,cAAc,CAAC,eAAeH,iBAAiB;QAC/D;IACF;IAEAd,SAAS,6BAA6B;QACpCI,GAAG,2CAA2C;YAC5C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE1BtF,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAM;gBAAK;gBACnB3D,OAAO;YACT;YACEf,kBAAQ,CAACC,IAAI,CAACG,kBAAkB,CAAeoE,iBAAiB,CAAC;gBACjEC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,6BAA6B;YAC7B,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,UAAU;YAChD,MAAMV,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,eAAe;YAErD,uBAAuB;YACvB,MAAMV,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAkB;YAEtE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAO9E,kBAAQ,CAACC,IAAI,CAACG,kBAAkB,EAAE+E,oBAAoB,CAAC;oBAC5D9C,OAAO;oBACPqD,UAAU;gBACZ;YACF;YAEA,2DAA2D;YAC3D,MAAMR,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,yBAAyBC,iBAAiB;YACpE;QACF;QAEAV,GAAG,iCAAiC;YAClC,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE1BtF,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAM;gBAAK;gBACnB3D,OAAO;YACT;YACEf,kBAAQ,CAACC,IAAI,CAACG,kBAAkB,CAAeoE,iBAAiB,CAAC;gBACjEC,MAAM;gBACN1D,OAAO;oBAAE4E,SAAS;gBAAsB;YAC1C;YAEAhB,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,UAAU;YAChD,MAAMV,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,eAAe;YACrD,MAAMV,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAkB;YAEtE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOjE,aAAK,CAACE,KAAK,EAAEoE,oBAAoB,CAAC;YAC3C;QACF;IACF;IAEAhB,SAAS,sCAAsC;QAC7CC,WAAW;;YACPpE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;QACF;QAEAwD,GAAG,kCAAkC;YACnC,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,uCAAuC;YACvC,MAAMwC,iBAAiBb,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YACvE,MAAMiC,KAAKc,KAAK,CAACI;YAEjB,MAAMV,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,8BAA8BC,iBAAiB;gBACvEH,OAAOC,aAAM,CAACC,SAAS,CAAC,2BAA2BC,iBAAiB;gBACpEH,OAAOC,aAAM,CAACC,SAAS,CAAC,kCAAkCC,iBAAiB;YAC7E;QACF;QAEAV,GAAG,qDAAqD;YACtD,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,6BAA6B;YAC7B,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YAEvF,mBAAmB;YACnB,MAAM2C,gBAAgBd,aAAM,CAACK,cAAc,CAAC;YAC5C,MAAMV,KAAKoB,aAAa,CAACD,eAAe/C,oBAAoBK,OAAO;YAEnE,8BAA8B;YAC9B,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;YAC9D;QACF;QAEAV,GAAG,yCAAyC;YAC1C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkB;YACxD,MAAMV,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,sCAAsCC,iBAAiB;YACjF;QACF;IACF;IAEAd,SAAS,+BAA+B;QACtCC,WAAW;;YACPpE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;QACF;QAEA,MAAMgF,mBAAmB,OAAOrB;YAC9B,MAAMA,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YACvF,MAAMwB,KAAKoB,aAAa,CAACf,aAAM,CAACK,cAAc,CAAC,SAAStC,oBAAoBK,OAAO;YACnF,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;QACnE;QAEA8B,GAAG,6CAA6C;YAC9C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM2C,iBAAiBrB;YAEvB,MAAMQ,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,gBAAgBC,iBAAiB;gBACzDH,OAAOC,aAAM,CAACC,SAAS,CAAC,2BAA2BC,iBAAiB;gBACpEH,OAAOC,aAAM,CAACC,SAAS,CAAC,aAAaC,iBAAiB;YACxD;QACF;QAEAV,GAAG,mCAAmC;YACpC,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM2C,iBAAiBrB;YAEvB,0BAA0B;YAC1B,MAAMsB,oBAAoBjB,aAAM,CAACK,cAAc,CAAC;YAChD,MAAMV,KAAKc,KAAK,CAACQ;YAEjBlB,OAAOkB,mBAAmBC,WAAW;YAErC,oDAAoD;YACpDnB,OAAOC,aAAM,CAACC,SAAS,CAAC,mDAAmDC,iBAAiB;QAC9F;QAEAV,GAAG,4CAA4C;YAC7C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5BX,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM2C,iBAAiBrB;YAEvB,oDAAoD;YACpD,MAAMA,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACC,SAAS,CAAC,iCAAiCC,iBAAiB;YAC5E;QACF;IACF;IAEAd,SAAS,0BAA0B;QACjCC,WAAW;;YACPpE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;QACF;QAEA,MAAMmF,uBAAuB,OAAOxB;YAClC,8BAA8B;YAC9B,MAAMA,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YACvF,MAAMwB,KAAKoB,aAAa,CAACf,aAAM,CAACK,cAAc,CAAC,SAAStC,oBAAoBK,OAAO;YACnF,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,6BAA6B;YAC7B,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACK,cAAc,CAAC,gBAAgBH,iBAAiB;YAChE;YACA,MAAMP,KAAKc,KAAK,CAACT,aAAM,CAACK,cAAc,CAAC;QACzC;QAEAb,GAAG,oCAAoC;YACrC,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAG1BtF,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAGqE,iBAAiB,CAAC;oBAClCC,MAAM;wBAAC;4BAAErC,IAAI;wBAAY;qBAAE;oBAC3BrB,OAAO;gBACT;YACF;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM8C,qBAAqBxB;YAE3B,mBAAmB;YACnB,MAAMA,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAO9E,kBAAQ,CAACK,IAAI,EAAE8E,oBAAoB,CAAC;gBAC3CL,OAAOjE,aAAK,CAACC,OAAO,EAAEqE,oBAAoB,CAAC;gBAC3CL,OAAO1D,WAAWC,IAAI,EAAE8D,oBAAoB,CAAC;YAC/C;QACF;QAEAZ,GAAG,0CAA0C;YAC3C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE1BtF,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAGqE,iBAAiB,CAAC;oBAClCC,MAAM;oBACN1D,OAAO;wBAAE4E,SAAS;oBAAiB;gBACrC;YACF;YAEAhB,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM8C,qBAAqBxB;YAC3B,MAAMA,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOjE,aAAK,CAACE,KAAK,EAAEoE,oBAAoB,CAAC;YAC3C;QACF;QAEAZ,GAAG,8CAA8C;YAC/C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5B,2CAA2C;YAC3C,MAAMa,oBAAoB;gBACxB;oBAAE,GAAG3D,aAAa,CAAC,EAAE;oBAAEG,UAAU;oBAAIE,OAAO;gBAAG;aAChD;YAED8B,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB,cAAc+C;YAAmB;YAErE,MAAMD,qBAAqBxB;YAC3B,MAAMA,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOjE,aAAK,CAACE,KAAK,EAAEoE,oBAAoB,CAAC;YAC3C;QACF;QAEAZ,GAAG,qDAAqD;YACtD,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE1BtF,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAGqE,iBAAiB,CAAC;oBAClCC,MAAM;wBAAC;4BAAErC,IAAI;wBAAY;qBAAE;oBAC3BrB,OAAO;gBACT;YACF;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,MAAM8C,qBAAqBxB;YAC3B,MAAMA,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZ,0CAA0C;gBAC1C,MAAMkB,YAAYxC,KAAKyC,KAAK,CAAC7E,iBAAiBE,OAAO,CAAC,iBAAiB;gBACvEoD,OAAOsB,WAAWE,OAAO,CAAC,EAAE;YAC9B;QACF;IACF;IAEAnC,SAAS,+BAA+B;QACtCC,WAAW;;YACPpE,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;QACF;QAEAwD,GAAG,yCAAyC;YAC1C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAC5B,MAAM,EAAEpE,gBAAgB,EAAE,GAAGqF,QAAQ;YAErCrF,iBAAiBsD,iBAAiB,CAAC;gBACjCpC,IAAI;gBACJoE,YAAY;YACd;YACExG,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAGqE,iBAAiB,CAAC;oBAClCC,MAAM;wBAAC;4BAAErC,IAAI;wBAAY;qBAAE;oBAC3BrB,OAAO;gBACT;YACF;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,uBAAuB;YACvB,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YACvF,MAAMwB,KAAKoB,aAAa,CAACf,aAAM,CAACK,cAAc,CAAC,SAAStC,oBAAoBK,OAAO;YACnF,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACK,cAAc,CAAC,gBAAgBH,iBAAiB;YAChE;YACA,MAAMP,KAAKc,KAAK,CAACT,aAAM,CAACK,cAAc,CAAC;YACvC,MAAMV,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAO5D,kBAAkBiE,oBAAoB,CAAC;oBAC5CsB,OAAO3B,OAAO4B,eAAe,CAAC;wBAC5B5B,OAAO6B,gBAAgB,CAAC;4BACtBC,OAAO;4BACPC,YAAY;4BACZlE,UAAU;wBACZ;qBACD;oBACDmE,OAAO;wBACLzE,OAAOF,SAASE,KAAK;oBACvB;oBACA0E,oBAAoB;gBACtB;YACF;QACF;IACF;IAEA5C,SAAS,wBAAwB;QAC/BI,GAAG,oCAAoC;YACrC,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE1BtF,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAG6G,iBAAiB,CAAC,IAAIC,MAAM;YAChD;YACEjH,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,mCAAmC;YACnC,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YACvF,MAAMwB,KAAKoB,aAAa,CAACf,aAAM,CAACK,cAAc,CAAC,SAAStC,oBAAoBK,OAAO;YACnF,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACK,cAAc,CAAC,gBAAgBH,iBAAiB;YAChE;YACA,MAAMP,KAAKc,KAAK,CAACT,aAAM,CAACK,cAAc,CAAC;YACvC,MAAMV,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAExE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOjE,aAAK,CAACE,KAAK,EAAEoE,oBAAoB,CACtC;YAEJ;QACF;QAEAZ,GAAG,2CAA2C;YAC5C,MAAMG,OAAOW,kBAAS,CAACC,KAAK;YAE5B,IAAI4B;YACJ,MAAMC,gBAAgB,IAAIC,QAAQC,CAAAA;gBAChCH,gBAAgBG;YAClB;YAEErH,kBAAQ,CAACK,IAAI,CAAeiE,eAAe,CAAC;gBAC5C3D,QAAQb,KAAKK,EAAE,GAAGmE,eAAe,CAAC6C;YACpC;YACEnH,kBAAQ,CAACC,IAAI,CAACC,OAAO,CAAesE,iBAAiB,CAAC;gBACtDC,MAAM;oBAAEC,MAAMvC;gBAAS;gBACvBpB,OAAO;YACT;YAEA4D,IAAAA,aAAM,gBAAC,qBAACC,kBAAY,OAAK;gBAAEC,SAASzB;YAAgB;YAEpD,uBAAuB;YACvB,MAAMsB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,cAActC,oBAAoBC,MAAM;YAC9E,MAAM2B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,WAAWtC,oBAAoBE,IAAI;YACzE,MAAM0B,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,qBAAqBtC,oBAAoBG,KAAK;YACpF,MAAMyB,KAAKa,IAAI,CAACR,aAAM,CAACK,cAAc,CAAC,kBAAkBtC,oBAAoBI,WAAW;YACvF,MAAMwB,KAAKoB,aAAa,CAACf,aAAM,CAACK,cAAc,CAAC,SAAStC,oBAAoBK,OAAO;YACnF,MAAMuB,KAAKc,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAa;YAEjE,MAAMyC,IAAAA,cAAO,EAAC;gBACZJ,OAAOC,aAAM,CAACK,cAAc,CAAC,gBAAgBH,iBAAiB;YAChE;YACA,MAAMP,KAAKc,KAAK,CAACT,aAAM,CAACK,cAAc,CAAC;YAEvC,MAAMkC,eAAevC,aAAM,CAACU,SAAS,CAAC,UAAU;gBAAEhD,MAAM;YAAoB;YAE5E,2BAA2B;YAC3B,MAAMiC,KAAKc,KAAK,CAAC8B;YACjB,MAAM5C,KAAKc,KAAK,CAAC8B;YAEjB,6DAA6D;YAC7DxC,OAAOwC,cAAcC,YAAY;YAEjC,sBAAsB;YACtBL,cAAe;gBACbzC,MAAM;oBAAC;wBAAErC,IAAI;oBAAY;iBAAE;gBAC3BrB,OAAO;YACT;YAEA,oCAAoC;YACpC,MAAMmE,IAAAA,cAAO,EAAC;gBACZJ,OAAO9E,kBAAQ,CAACK,IAAI,GAAGM,MAAM,EAAE6G,qBAAqB,CAAC;YACvD;QACF;IACF;AACF"}