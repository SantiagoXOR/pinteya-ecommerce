7ec83d5b73c653079e5a8456124f037c
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2qknwetrc5() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts";
  var hash = "df1b78059ad2b3a6210e6d4e7852787ffa9af74f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "9": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "10": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 71
        }
      },
      "11": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "12": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 71
        }
      },
      "13": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "14": {
        start: {
          line: 30,
          column: 39
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "15": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "16": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "17": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 20
        }
      },
      "18": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "19": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "21": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "22": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "24": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "25": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 30
        }
      },
      "26": {
        start: {
          line: 50,
          column: 17
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "27": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 88
        }
      },
      "28": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "29": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "30": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 95
        }
      },
      "31": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "32": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "33": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "34": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "35": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "36": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 31
        }
      },
      "37": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 18
        }
      },
      "38": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "39": {
        start: {
          line: 73,
          column: 27
        },
        end: {
          line: 73,
          column: 77
        }
      },
      "40": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 179,
          column: 6
        }
      },
      "41": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "42": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "43": {
        start: {
          line: 89,
          column: 37
        },
        end: {
          line: 89,
          column: 57
        }
      },
      "44": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "45": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "46": {
        start: {
          line: 98,
          column: 29
        },
        end: {
          line: 98,
          column: 63
        }
      },
      "47": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "48": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 90
        }
      },
      "49": {
        start: {
          line: 102,
          column: 38
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "50": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "51": {
        start: {
          line: 112,
          column: 30
        },
        end: {
          line: 115,
          column: 22
        }
      },
      "52": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 33
        }
      },
      "53": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "54": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 67
        }
      },
      "55": {
        start: {
          line: 122,
          column: 48
        },
        end: {
          line: 124,
          column: 50
        }
      },
      "56": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "57": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "58": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 70
        }
      },
      "59": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 131,
          column: 19
        }
      },
      "60": {
        start: {
          line: 132,
          column: 38
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "61": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 139,
          column: 19
        }
      },
      "62": {
        start: {
          line: 142,
          column: 40
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "63": {
        start: {
          line: 142,
          column: 69
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "64": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "65": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "66": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 55
        }
      },
      "67": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 66
        }
      },
      "68": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "69": {
        start: {
          line: 170,
          column: 34
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "70": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "71": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "72": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "73": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 31
        }
      },
      "74": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 188,
          column: 27
        }
      },
      "75": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 251,
          column: 5
        }
      },
      "76": {
        start: {
          line: 193,
          column: 37
        },
        end: {
          line: 193,
          column: 162
        }
      },
      "77": {
        start: {
          line: 193,
          column: 84
        },
        end: {
          line: 193,
          column: 161
        }
      },
      "78": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 196,
          column: 10
        }
      },
      "79": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "80": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "81": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 42
        }
      },
      "82": {
        start: {
          line: 208,
          column: 21
        },
        end: {
          line: 208,
          column: 41
        }
      },
      "83": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 94
        }
      },
      "84": {
        start: {
          line: 211,
          column: 25
        },
        end: {
          line: 211,
          column: 63
        }
      },
      "85": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "86": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 102
        }
      },
      "87": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "88": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "89": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "90": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 116
        }
      },
      "91": {
        start: {
          line: 229,
          column: 42
        },
        end: {
          line: 229,
          column: 114
        }
      },
      "92": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "93": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 78
        }
      },
      "94": {
        start: {
          line: 233,
          column: 25
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "95": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "96": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 63
        }
      },
      "97": {
        start: {
          line: 243,
          column: 30
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "98": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 47
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 40
          }
        },
        loc: {
          start: {
            line: 33,
            column: 61
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "6": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 34
          }
        },
        loc: {
          start: {
            line: 37,
            column: 53
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 37
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 71,
            column: 18
          }
        },
        loc: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 189,
            column: 1
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 117
          },
          end: {
            line: 75,
            column: 118
          }
        },
        loc: {
          start: {
            line: 75,
            column: 127
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 122,
            column: 92
          },
          end: {
            line: 122,
            column: 93
          }
        },
        loc: {
          start: {
            line: 122,
            column: 108
          },
          end: {
            line: 124,
            column: 13
          }
        },
        line: 122
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 56
          },
          end: {
            line: 142,
            column: 57
          }
        },
        loc: {
          start: {
            line: 142,
            column: 69
          },
          end: {
            line: 145,
            column: 17
          }
        },
        line: 142
      },
      "11": {
        name: "POST",
        decl: {
          start: {
            line: 190,
            column: 15
          },
          end: {
            line: 190,
            column: 19
          }
        },
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 252,
            column: 1
          }
        },
        line: 190
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 193,
            column: 66
          },
          end: {
            line: 193,
            column: 67
          }
        },
        loc: {
          start: {
            line: 193,
            column: 84
          },
          end: {
            line: 193,
            column: 161
          }
        },
        line: 193
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 34,
            column: 45
          }
        }, {
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 34,
            column: 65
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 20
          }
        }, {
          start: {
            line: 38,
            column: 24
          },
          end: {
            line: 38,
            column: 27
          }
        }, {
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 38,
            column: 45
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 20
          }
        }, {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 76
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 47,
            column: 31
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 53
          }
        }, {
          start: {
            line: 53,
            column: 57
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 29
          }
        }, {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 79
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 56,
            column: 23
          },
          end: {
            line: 56,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 47
          },
          end: {
            line: 56,
            column: 88
          }
        }, {
          start: {
            line: 56,
            column: 91
          },
          end: {
            line: 56,
            column: 95
          }
        }],
        line: 56
      },
      "12": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 61,
            column: 13
          }
        }],
        line: 57
      },
      "13": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 20
          }
        }, {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 33
          }
        }, {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 45
          }
        }],
        line: 57
      },
      "14": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "15": {
        loc: {
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 92,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 92,
            column: 50
          }
        }, {
          start: {
            line: 92,
            column: 54
          },
          end: {
            line: 92,
            column: 63
          }
        }],
        line: 92
      },
      "16": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "17": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "18": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "19": {
        loc: {
          start: {
            line: 135,
            column: 27
          },
          end: {
            line: 135,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 27
          },
          end: {
            line: 135,
            column: 40
          }
        }, {
          start: {
            line: 135,
            column: 44
          },
          end: {
            line: 135,
            column: 73
          }
        }],
        line: 135
      },
      "20": {
        loc: {
          start: {
            line: 142,
            column: 40
          },
          end: {
            line: 145,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 40
          },
          end: {
            line: 145,
            column: 19
          }
        }, {
          start: {
            line: 145,
            column: 23
          },
          end: {
            line: 145,
            column: 25
          }
        }],
        line: 142
      },
      "21": {
        loc: {
          start: {
            line: 144,
            column: 36
          },
          end: {
            line: 144,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 36
          },
          end: {
            line: 144,
            column: 71
          }
        }, {
          start: {
            line: 144,
            column: 75
          },
          end: {
            line: 144,
            column: 76
          }
        }],
        line: 144
      },
      "22": {
        loc: {
          start: {
            line: 167,
            column: 63
          },
          end: {
            line: 167,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 88
          },
          end: {
            line: 167,
            column: 93
          }
        }, {
          start: {
            line: 167,
            column: 96
          },
          end: {
            line: 167,
            column: 122
          }
        }],
        line: 167
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 173,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 23
          },
          end: {
            line: 173,
            column: 36
          }
        }, {
          start: {
            line: 173,
            column: 40
          },
          end: {
            line: 173,
            column: 68
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "25": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "26": {
        loc: {
          start: {
            line: 204,
            column: 24
          },
          end: {
            line: 204,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 24
          },
          end: {
            line: 204,
            column: 41
          }
        }, {
          start: {
            line: 204,
            column: 45
          },
          end: {
            line: 204,
            column: 48
          }
        }],
        line: 204
      },
      "27": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "28": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "29": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "30": {
        loc: {
          start: {
            line: 246,
            column: 19
          },
          end: {
            line: 246,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 19
          },
          end: {
            line: 246,
            column: 32
          }
        }, {
          start: {
            line: 246,
            column: 36
          },
          end: {
            line: 246,
            column: 64
          }
        }],
        line: 246
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE CATEGOR\xCDAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { validateData, CategoryFiltersSchema, CategorySchema } from '@/lib/validations';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { Category } from '@/types/database';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET /api/categories - Obtener categor\xEDas\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de categor\xEDas\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.products, // Usar config de productos para categor\xEDas\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Categories API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/categories',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer par\xE1metros de query\r\n    const queryParams = {\r\n      search: searchParams.get('search') || undefined,\r\n    };\r\n\r\n    // Validar par\xE1metros (simplificado para la estructura actual)\r\n    const filters = {\r\n      search: queryParams.search,\r\n    };\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase est\xE9 disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query base - simplificado para la estructura actual\r\n    const baseQuery = supabase\r\n      .from('categories')\r\n      .select(`\r\n        *,\r\n        products_count:products(count)\r\n      `)\r\n      .order('name');\r\n\r\n    // Aplicar filtros\r\n    let query = baseQuery;\r\n    if (filters.search) {\r\n      query = query.ilike('name', `%${filters.search}%`);\r\n    }\r\n\r\n    // Ejecutar query con timeout de base de datos\r\n    const { data: categories, error } = await withDatabaseTimeout(\r\n      async (signal) => {\r\n        return await query.abortSignal(signal);\r\n      },\r\n      API_TIMEOUTS.database\r\n    );\r\n\r\n    if (error) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        new Error(`Database error: ${error.message}`),\r\n        {\r\n          endpoint: '/api/categories',\r\n          operation: 'select_categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error obteniendo categor\xEDas',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Procesar datos para incluir conteo de productos\r\n    const processedCategories = categories?.map(category => ({\r\n      ...category,\r\n      products_count: category.products_count?.[0]?.count || 0,\r\n    })) || [];\r\n\r\n    // Log de operaci\xF3n exitosa\r\n    securityLogger.log({\r\n      type: 'data_access',\r\n      severity: 'low',\r\n      message: 'Categories retrieved successfully',\r\n      context: securityLogger.context,\r\n      metadata: {\r\n        categoriesCount: processedCategories.length,\r\n        hasSearch: !!filters.search,\r\n        searchTerm: filters.search\r\n      }\r\n    });\r\n\r\n    const response: ApiResponse<Category[]> = {\r\n      data: processedCategories,\r\n      success: true,\r\n      message: `${processedCategories.length} categor\xEDas encontradas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        error instanceof Error ? error : new Error('Unknown error'),\r\n        {\r\n          endpoint: '/api/categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error interno del servidor',\r\n      };\r\n\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n  });\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/categories', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// POST /api/categories - Crear categor\xEDa (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // ENTERPRISE: Usar nueva autenticaci\xF3n enterprise para admin\r\n    const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils');\r\n\r\n    const authResult = await requireAdminAuth(request, ['categories_create']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    const body = await request.json();\r\n    \r\n    // Validar datos de la categor\xEDa\r\n    const categoryData = validateData(CategorySchema, body);\r\n    \r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabase) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio administrativo no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Crear slug si no se proporciona\r\n    if (!categoryData.slug) {\r\n      categoryData.slug = categoryData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    // Insertar categor\xEDa\r\n    const { data: category, error } = await supabase\r\n      .from('categories')\r\n      .insert(categoryData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/categories');\r\n    }\r\n\r\n    const response: ApiResponse<Category> = {\r\n      data: category,\r\n      success: true,\r\n      message: 'Categor\xEDa creada exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/categories:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "securityLogger", "createSecurityLogger", "rateLimitResult", "withRateLimit", "RATE_LIMIT_CONFIGS", "products", "log", "type", "severity", "message", "context", "metadata", "endpoint", "method", "userAgent", "headers", "get", "searchParams", "URL", "url", "queryParams", "search", "undefined", "filters", "supabase", "getSupabaseClient", "console", "error", "errorResponse", "data", "success", "NextResponse", "json", "status", "baseQuery", "from", "select", "order", "query", "ilike", "categories", "withDatabaseTimeout", "signal", "abortSignal", "API_TIMEOUTS", "database", "logApiError", "Error", "operation", "processedCategories", "map", "category", "products_count", "count", "categoriesCount", "length", "hasSearch", "searchTerm", "response", "logRateLimitExceeded", "requireAdminAuth", "authResult", "code", "enterprise", "timestamp", "Date", "toISOString", "body", "categoryData", "validateData", "CategorySchema", "slug", "name", "toLowerCase", "replace", "insert", "single", "handleSupabaseError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "df1b78059ad2b3a6210e6d4e7852787ffa9af74f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qknwetrc5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qknwetrc5();
cov_2qknwetrc5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2qknwetrc5().f[0]++;
  cov_2qknwetrc5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2qknwetrc5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2qknwetrc5().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2qknwetrc5().f[1]++;
    cov_2qknwetrc5().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2qknwetrc5().f[2]++;
    cov_2qknwetrc5().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2qknwetrc5().f[3]++;
    cov_2qknwetrc5().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2qknwetrc5().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_2qknwetrc5().s[8]++, require("../../../lib/integrations/supabase"));
const _validations =
/* istanbul ignore next */
(cov_2qknwetrc5().s[9]++, require("../../../lib/validations"));
const _ratelimiter =
/* istanbul ignore next */
(cov_2qknwetrc5().s[10]++, require("../../../lib/rate-limiting/rate-limiter"));
const _apitimeouts =
/* istanbul ignore next */
(cov_2qknwetrc5().s[11]++, require("../../../lib/config/api-timeouts"));
const _securitylogger =
/* istanbul ignore next */
(cov_2qknwetrc5().s[12]++, require("../../../lib/logging/security-logger"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_2qknwetrc5().f[4]++;
  cov_2qknwetrc5().s[13]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[0][0]++;
    cov_2qknwetrc5().s[14]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[15]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[16]++, new WeakMap());
  /* istanbul ignore next */
  cov_2qknwetrc5().s[17]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_2qknwetrc5().f[5]++;
    cov_2qknwetrc5().s[18]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_2qknwetrc5().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_2qknwetrc5().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_2qknwetrc5().f[6]++;
  cov_2qknwetrc5().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[2][0]++;
    cov_2qknwetrc5().s[20]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[2][1]++;
  }
  cov_2qknwetrc5().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[4][0]++;
    cov_2qknwetrc5().s[22]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[23]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_2qknwetrc5().s[24]++;
  if (
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[6][0]++;
    cov_2qknwetrc5().s[25]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[26]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[27]++,
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_2qknwetrc5().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_2qknwetrc5().s[28]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_2qknwetrc5().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_2qknwetrc5().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_2qknwetrc5().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_2qknwetrc5().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[30]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[11][1]++, null));
      /* istanbul ignore next */
      cov_2qknwetrc5().s[31]++;
      if (
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_2qknwetrc5().b[12][0]++;
        cov_2qknwetrc5().s[32]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_2qknwetrc5().b[12][1]++;
        cov_2qknwetrc5().s[33]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_2qknwetrc5().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2qknwetrc5().s[34]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_2qknwetrc5().s[35]++;
  if (cache) {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[14][0]++;
    cov_2qknwetrc5().s[36]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[14][1]++;
  }
  cov_2qknwetrc5().s[37]++;
  return newObj;
}
const runtime =
/* istanbul ignore next */
(cov_2qknwetrc5().s[38]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_2qknwetrc5().f[7]++;
  // Crear logger de seguridad con contexto
  const securityLogger =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[39]++, (0, _securitylogger.createSecurityLogger)(request));
  // Aplicar rate limiting para APIs de categorÃ­as
  const rateLimitResult =
  /* istanbul ignore next */
  (cov_2qknwetrc5().s[40]++, await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.products, async () => {
    /* istanbul ignore next */
    cov_2qknwetrc5().f[8]++;
    cov_2qknwetrc5().s[41]++;
    // Log de acceso a la API
    securityLogger.log({
      type: 'data_access',
      severity: 'low',
      message: 'Categories API accessed',
      context: securityLogger.context,
      metadata: {
        endpoint: '/api/categories',
        method: 'GET',
        userAgent: request.headers.get('user-agent')
      }
    });
    /* istanbul ignore next */
    cov_2qknwetrc5().s[42]++;
    try {
      const {
        searchParams
      } =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[43]++, new URL(request.url));
      // Extraer parÃ¡metros de query
      const queryParams =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[44]++, {
        search:
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[15][0]++, searchParams.get('search')) ||
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[15][1]++, undefined)
      });
      // Validar parÃ¡metros (simplificado para la estructura actual)
      const filters =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[45]++, {
        search: queryParams.search
      });
      const supabase =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[46]++, (0, _supabase.getSupabaseClient)());
      // Verificar que el cliente de Supabase estÃ© disponible
      /* istanbul ignore next */
      cov_2qknwetrc5().s[47]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_2qknwetrc5().b[16][0]++;
        cov_2qknwetrc5().s[48]++;
        console.error('Cliente de Supabase no disponible en GET /api/categories');
        const errorResponse =
        /* istanbul ignore next */
        (cov_2qknwetrc5().s[49]++, {
          data: null,
          success: false,
          error: 'Servicio de base de datos no disponible'
        });
        /* istanbul ignore next */
        cov_2qknwetrc5().s[50]++;
        return _server.NextResponse.json(errorResponse, {
          status: 503
        });
      } else
      /* istanbul ignore next */
      {
        cov_2qknwetrc5().b[16][1]++;
      }
      // Construir query base - simplificado para la estructura actual
      const baseQuery =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[51]++, supabase.from('categories').select(`
        *,
        products_count:products(count)
      `).order('name'));
      // Aplicar filtros
      let query =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[52]++, baseQuery);
      /* istanbul ignore next */
      cov_2qknwetrc5().s[53]++;
      if (filters.search) {
        /* istanbul ignore next */
        cov_2qknwetrc5().b[17][0]++;
        cov_2qknwetrc5().s[54]++;
        query = query.ilike('name', `%${filters.search}%`);
      } else
      /* istanbul ignore next */
      {
        cov_2qknwetrc5().b[17][1]++;
      }
      // Ejecutar query con timeout de base de datos
      const {
        data: categories,
        error
      } =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[55]++, await (0, _apitimeouts.withDatabaseTimeout)(async signal => {
        /* istanbul ignore next */
        cov_2qknwetrc5().f[9]++;
        cov_2qknwetrc5().s[56]++;
        return await query.abortSignal(signal);
      }, _apitimeouts.API_TIMEOUTS.database));
      /* istanbul ignore next */
      cov_2qknwetrc5().s[57]++;
      if (error) {
        /* istanbul ignore next */
        cov_2qknwetrc5().b[18][0]++;
        cov_2qknwetrc5().s[58]++;
        console.error('Error en GET /api/categories:', error);
        // Log de error de seguridad
        /* istanbul ignore next */
        cov_2qknwetrc5().s[59]++;
        securityLogger.logApiError(securityLogger.context, new Error(`Database error: ${error.message}`), {
          endpoint: '/api/categories',
          operation: 'select_categories'
        });
        const errorResponse =
        /* istanbul ignore next */
        (cov_2qknwetrc5().s[60]++, {
          data: null,
          success: false,
          error:
          /* istanbul ignore next */
          (cov_2qknwetrc5().b[19][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_2qknwetrc5().b[19][1]++, 'Error obteniendo categorÃ­as')
        });
        /* istanbul ignore next */
        cov_2qknwetrc5().s[61]++;
        return _server.NextResponse.json(errorResponse, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2qknwetrc5().b[18][1]++;
      }
      // Procesar datos para incluir conteo de productos
      const processedCategories =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[62]++,
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[20][0]++, categories?.map(category => {
        /* istanbul ignore next */
        cov_2qknwetrc5().f[10]++;
        cov_2qknwetrc5().s[63]++;
        return {
          ...category,
          products_count:
          /* istanbul ignore next */
          (cov_2qknwetrc5().b[21][0]++, category.products_count?.[0]?.count) ||
          /* istanbul ignore next */
          (cov_2qknwetrc5().b[21][1]++, 0)
        };
      })) ||
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[20][1]++, []));
      // Log de operaciÃ³n exitosa
      /* istanbul ignore next */
      cov_2qknwetrc5().s[64]++;
      securityLogger.log({
        type: 'data_access',
        severity: 'low',
        message: 'Categories retrieved successfully',
        context: securityLogger.context,
        metadata: {
          categoriesCount: processedCategories.length,
          hasSearch: !!filters.search,
          searchTerm: filters.search
        }
      });
      const response =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[65]++, {
        data: processedCategories,
        success: true,
        message: `${processedCategories.length} categorÃ­as encontradas`
      });
      /* istanbul ignore next */
      cov_2qknwetrc5().s[66]++;
      return _server.NextResponse.json(response);
    } catch (error) {
      /* istanbul ignore next */
      cov_2qknwetrc5().s[67]++;
      console.error('Error en GET /api/categories:', error);
      // Log de error de seguridad
      /* istanbul ignore next */
      cov_2qknwetrc5().s[68]++;
      securityLogger.logApiError(securityLogger.context, error instanceof Error ?
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[22][0]++, error) :
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[22][1]++, new Error('Unknown error')), {
        endpoint: '/api/categories'
      });
      const errorResponse =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[69]++, {
        data: null,
        success: false,
        error:
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[23][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[23][1]++, 'Error interno del servidor')
      });
      /* istanbul ignore next */
      cov_2qknwetrc5().s[70]++;
      return _server.NextResponse.json(errorResponse, {
        status: 500
      });
    }
  }));
  // Manejar rate limit excedido
  /* istanbul ignore next */
  cov_2qknwetrc5().s[71]++;
  if (rateLimitResult instanceof _server.NextResponse) {
    /* istanbul ignore next */
    cov_2qknwetrc5().b[24][0]++;
    cov_2qknwetrc5().s[72]++;
    securityLogger.logRateLimitExceeded(securityLogger.context, {
      endpoint: '/api/categories',
      method: 'GET'
    });
    /* istanbul ignore next */
    cov_2qknwetrc5().s[73]++;
    return rateLimitResult;
  } else
  /* istanbul ignore next */
  {
    cov_2qknwetrc5().b[24][1]++;
  }
  cov_2qknwetrc5().s[74]++;
  return rateLimitResult;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2qknwetrc5().f[11]++;
  cov_2qknwetrc5().s[75]++;
  try {
    // ENTERPRISE: Usar nueva autenticaciÃ³n enterprise para admin
    const {
      requireAdminAuth
    } =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[76]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2qknwetrc5().f[12]++;
      cov_2qknwetrc5().s[77]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../lib/auth/enterprise-auth-utils"));
    }));
    const authResult =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[78]++, await requireAdminAuth(request, ['categories_create']));
    /* istanbul ignore next */
    cov_2qknwetrc5().s[79]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_2qknwetrc5().b[25][0]++;
      cov_2qknwetrc5().s[80]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true,
        timestamp: new Date().toISOString()
      }, {
        status:
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[26][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_2qknwetrc5().b[26][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qknwetrc5().b[25][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[81]++, authResult.context);
    const body =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[82]++, await request.json());
    // Validar datos de la categorÃ­a
    const categoryData =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[83]++, (0, _validations.validateData)(_validations.CategorySchema, body));
    const supabase =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[84]++, (0, _supabase.getSupabaseClient)(true)); // Usar cliente admin
    // Verificar que el cliente administrativo estÃ© disponible
    /* istanbul ignore next */
    cov_2qknwetrc5().s[85]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_2qknwetrc5().b[27][0]++;
      cov_2qknwetrc5().s[86]++;
      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');
      const errorResponse =
      /* istanbul ignore next */
      (cov_2qknwetrc5().s[87]++, {
        data: null,
        success: false,
        error: 'Servicio administrativo no disponible'
      });
      /* istanbul ignore next */
      cov_2qknwetrc5().s[88]++;
      return _server.NextResponse.json(errorResponse, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qknwetrc5().b[27][1]++;
    }
    // Crear slug si no se proporciona
    cov_2qknwetrc5().s[89]++;
    if (!categoryData.slug) {
      /* istanbul ignore next */
      cov_2qknwetrc5().b[28][0]++;
      cov_2qknwetrc5().s[90]++;
      categoryData.slug = categoryData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
    } else
    /* istanbul ignore next */
    {
      cov_2qknwetrc5().b[28][1]++;
    }
    // Insertar categorÃ­a
    const {
      data: category,
      error
    } =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[91]++, await supabase.from('categories').insert(categoryData).select().single());
    /* istanbul ignore next */
    cov_2qknwetrc5().s[92]++;
    if (error) {
      /* istanbul ignore next */
      cov_2qknwetrc5().b[29][0]++;
      cov_2qknwetrc5().s[93]++;
      (0, _supabase.handleSupabaseError)(error, 'POST /api/categories');
    } else
    /* istanbul ignore next */
    {
      cov_2qknwetrc5().b[29][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[94]++, {
      data: category,
      success: true,
      message: 'CategorÃ­a creada exitosamente'
    });
    /* istanbul ignore next */
    cov_2qknwetrc5().s[95]++;
    return _server.NextResponse.json(response, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qknwetrc5().s[96]++;
    console.error('Error en POST /api/categories:', error);
    const errorResponse =
    /* istanbul ignore next */
    (cov_2qknwetrc5().s[97]++, {
      data: null,
      success: false,
      error:
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[30][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_2qknwetrc5().b[30][1]++, 'Error interno del servidor')
    });
    /* istanbul ignore next */
    cov_2qknwetrc5().s[98]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,