{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\metrics.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - METRICS TESTS\r\n// ===================================\r\n\r\nimport { MetricsCollector, metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// Mock Redis\r\njest.mock('@/lib/redis', () => ({\r\n  redisCache: {\r\n    incr: jest.fn(),\r\n    expire: jest.fn(),\r\n    get: jest.fn(),\r\n    client: {\r\n      lpush: jest.fn(),\r\n      ltrim: jest.fn(),\r\n      expire: jest.fn(),\r\n      lrange: jest.fn(),\r\n    },\r\n  },\r\n}));\r\n\r\n// Mock logger\r\njest.mock('@/lib/enterprise/logger', () => ({\r\n  logger: {\r\n    debug: jest.fn(),\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn(),\r\n  },\r\n  LogLevel: {\r\n    DEBUG: 'debug',\r\n    INFO: 'info',\r\n    WARN: 'warn',\r\n    ERROR: 'error',\r\n  },\r\n  LogCategory: {\r\n    SYSTEM: 'system',\r\n  },\r\n}));\r\n\r\ndescribe('MetricsCollector', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Singleton Pattern', () => {\r\n    it('should return the same instance', () => {\r\n      const instance1 = MetricsCollector.getInstance();\r\n      const instance2 = MetricsCollector.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n      expect(instance1).toBe(metricsCollector);\r\n    });\r\n  });\r\n\r\n  describe('recordRequest', () => {\r\n    it('should record successful request metrics', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      await metricsCollector.recordRequest(\r\n        'create-preference',\r\n        'POST',\r\n        200,\r\n        1500,\r\n        { clientIP: '192.168.1.1' }\r\n      );\r\n\r\n      // Verificar que se registraron las métricas correctas\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:requests:total')\r\n      );\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:requests:success')\r\n      );\r\n      expect(redisCache.client.lpush).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:response_time'),\r\n        '1500'\r\n      );\r\n    });\r\n\r\n    it('should record error request metrics', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      await metricsCollector.recordRequest(\r\n        'create-preference',\r\n        'POST',\r\n        500,\r\n        2000\r\n      );\r\n\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:requests:total')\r\n      );\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:requests:error')\r\n      );\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:errors:5xx')\r\n      );\r\n    });\r\n\r\n    it('should record rate limited request metrics', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      await metricsCollector.recordRequest(\r\n        'webhook',\r\n        'POST',\r\n        429,\r\n        500\r\n      );\r\n\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:webhook:POST:requests:total')\r\n      );\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:webhook:POST:requests:rate_limited')\r\n      );\r\n    });\r\n\r\n    it('should categorize 4xx errors correctly', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      await metricsCollector.recordRequest(\r\n        'create-preference',\r\n        'POST',\r\n        400,\r\n        300\r\n      );\r\n\r\n      expect(redisCache.incr).toHaveBeenCalledWith(\r\n        expect.stringContaining('metrics:create-preference:POST:errors:4xx')\r\n      );\r\n    });\r\n\r\n    it('should handle errors gracefully', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      const { logger } = require('@/lib/enterprise/logger');\r\n      \r\n      redisCache.incr.mockRejectedValue(new Error('Redis error'));\r\n      \r\n      // No debería lanzar error\r\n      await expect(metricsCollector.recordRequest(\r\n        'test-endpoint',\r\n        'GET',\r\n        200,\r\n        1000\r\n      )).resolves.not.toThrow();\r\n\r\n      expect(logger.error).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('recordRetry', () => {\r\n    it('should record successful retry metrics without errors', async () => {\r\n      await expect(metricsCollector.recordRetry(\r\n        'createPaymentPreference',\r\n        3,\r\n        true,\r\n        5000\r\n      )).resolves.not.toThrow();\r\n    });\r\n\r\n    it('should record failed retry metrics without errors', async () => {\r\n      await expect(metricsCollector.recordRetry(\r\n        'getPaymentInfo',\r\n        2,\r\n        false,\r\n        3000\r\n      )).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('recordRateLimit', () => {\r\n    it('should record rate limit metrics without errors', async () => {\r\n      await expect(metricsCollector.recordRateLimit(\r\n        'create-preference',\r\n        false,\r\n        8,\r\n        10\r\n      )).resolves.not.toThrow();\r\n    });\r\n\r\n    it('should record blocked rate limit metrics without errors', async () => {\r\n      await expect(metricsCollector.recordRateLimit(\r\n        'webhook',\r\n        true,\r\n        0,\r\n        100\r\n      )).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('getApiMetrics', () => {\r\n    it('should return empty metrics when no data available', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      // Mock empty responses\r\n      redisCache.get.mockResolvedValue(null);\r\n      redisCache.client.lrange.mockResolvedValue([]);\r\n      \r\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1);\r\n      \r\n      expect(metrics).toEqual({\r\n        requests: { total: 0, success: 0, error: 0, rate_limited: 0 },\r\n        response_times: { count: 0, sum: 0, avg: 0, min: 0, max: 0, p95: 0, p99: 0 },\r\n        error_rates: { '4xx': 0, '5xx': 0, network: 0, timeout: 0 },\r\n        retry_stats: { total_retries: 0, successful_retries: 0, failed_retries: 0, avg_attempts: 0 },\r\n      });\r\n    });\r\n\r\n    it('should aggregate metrics correctly', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      // Mock counter data\r\n      redisCache.get.mockImplementation((key) => {\r\n        if (key.includes('total')) {return '100';}\r\n        if (key.includes('success')) {return '95';}\r\n        if (key.includes('error')) {return '5';}\r\n        return '0';\r\n      });\r\n      \r\n      // Mock response time data\r\n      redisCache.client.lrange.mockResolvedValue(['1000', '1500', '2000', '800', '1200']);\r\n      \r\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1);\r\n      \r\n      expect(metrics.requests.total).toBeGreaterThan(0);\r\n      expect(metrics.requests.success).toBeGreaterThan(0);\r\n      expect(metrics.response_times.count).toBeGreaterThan(0);\r\n      expect(metrics.response_times.avg).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should handle errors gracefully and return empty metrics', async () => {\r\n      const { redisCache } = require('@/lib/redis');\r\n      const { logger } = require('@/lib/enterprise/logger');\r\n      \r\n      redisCache.get.mockRejectedValue(new Error('Redis error'));\r\n      \r\n      const metrics = await metricsCollector.getApiMetrics('test-endpoint', 'GET', 1);\r\n      \r\n      expect(logger.error).toHaveBeenCalled();\r\n      expect(metrics.requests.total).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Window Key Generation', () => {\r\n    it('should generate consistent window keys', () => {\r\n      const collector = new (MetricsCollector as any)();\r\n      const timestamp1 = 1640995200000; // 2022-01-01 00:00:00\r\n      const timestamp2 = 1640995260000; // 2022-01-01 00:01:00 (same window)\r\n      const timestamp3 = 1640995500000; // 2022-01-01 00:05:00 (next window)\r\n      \r\n      const key1 = collector.getWindowKey('test:metric', timestamp1);\r\n      const key2 = collector.getWindowKey('test:metric', timestamp2);\r\n      const key3 = collector.getWindowKey('test:metric', timestamp3);\r\n      \r\n      expect(key1).toBe(key2); // Same 5-minute window\r\n      expect(key1).not.toBe(key3); // Different window\r\n    });\r\n  });\r\n\r\n  describe('Value Statistics', () => {\r\n    it('should calculate percentiles correctly', async () => {\r\n      const collector = metricsCollector as any;\r\n      const { redisCache } = require('@/lib/redis');\r\n\r\n      // Mock response times: [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\r\n      const values = Array.from({ length: 10 }, (_, i) => ((i + 1) * 100).toString());\r\n\r\n      // Mock para que solo devuelva valores una vez\r\n      redisCache.client.lrange.mockResolvedValueOnce(values).mockResolvedValue([]);\r\n\r\n      const stats = await collector.getValueStats('test:response_time', 0, Date.now());\r\n\r\n      expect(stats.count).toBe(10);\r\n      expect(stats.min).toBe(100);\r\n      expect(stats.max).toBe(1000);\r\n      expect(stats.avg).toBe(550);\r\n      expect(stats.p95).toBeGreaterThan(900); // 95th percentile\r\n      expect(stats.p99).toBeGreaterThan(950); // 99th percentile\r\n    });\r\n\r\n    it('should handle empty value arrays', async () => {\r\n      const collector = metricsCollector as any;\r\n      const { redisCache } = require('@/lib/redis');\r\n      \r\n      redisCache.client.lrange.mockResolvedValue([]);\r\n      \r\n      const stats = await collector.getValueStats('test:response_time', 0, Date.now());\r\n      \r\n      expect(stats).toEqual({\r\n        count: 0,\r\n        sum: 0,\r\n        avg: 0,\r\n        min: 0,\r\n        max: 0,\r\n        p95: 0,\r\n        p99: 0,\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","redisCache","incr","fn","expire","get","client","lpush","ltrim","lrange","logger","debug","info","warn","error","LogLevel","DEBUG","INFO","WARN","ERROR","LogCategory","SYSTEM","describe","beforeEach","clearAllMocks","it","instance1","MetricsCollector","getInstance","instance2","expect","toBe","metricsCollector","require","recordRequest","clientIP","toHaveBeenCalledWith","stringContaining","mockRejectedValue","Error","resolves","not","toThrow","toHaveBeenCalled","recordRetry","recordRateLimit","mockResolvedValue","metrics","getApiMetrics","toEqual","requests","total","success","rate_limited","response_times","count","sum","avg","min","max","p95","p99","error_rates","network","timeout","retry_stats","total_retries","successful_retries","failed_retries","avg_attempts","mockImplementation","key","includes","toBeGreaterThan","collector","timestamp1","timestamp2","timestamp3","key1","getWindowKey","key2","key3","values","Array","from","length","_","i","toString","mockResolvedValueOnce","stats","getValueStats","Date","now"],"mappings":"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"}