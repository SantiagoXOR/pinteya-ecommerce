{"version":3,"names":["cov_2obydt0iuy","actualCoverage","s","GET","f","POST","runtime","request","searchParams","URL","url","action","get","flowId","executionId","b","flows","_advancedtestflows","testFlowManager","getAvailableFlows","_server","NextResponse","json","success","data","total","length","executions","getExecutions","undefined","map","exec","screenshots","screenshotCount","steps","reduce","step","error","status","execution","getExecution","screenshotStats","getScreenshotStats","allFlows","allExecutions","summary","totalFlows","totalExecutions","recentExecutions","sort","a","startTime","getTime","slice","flowStats","flow","flowExecutions","filter","e","id","successful","failed","running","name","successRate","lastExecution","console","details","Error","message","body","trigger","log","executeFlow","registerFlow"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-flows\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Flows Management\r\n// Endpoint para gestión de flujos de testing automatizados\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { ScreenshotMetadata } from '@/lib/testing/screenshot-manager';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const flowId = searchParams.get('flowId');\r\n    const executionId = searchParams.get('executionId');\r\n\r\n    switch (action) {\r\n      case 'flows':\r\n        // Obtener todos los flujos disponibles\r\n        const flows = testFlowManager.getAvailableFlows();\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: flows,\r\n          total: flows.length\r\n        });\r\n\r\n      case 'executions':\r\n        // Obtener ejecuciones (todas o de un flujo específico)\r\n        const executions = testFlowManager.getExecutions(flowId || undefined);\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: executions.map(exec => ({\r\n            ...exec,\r\n            screenshots: exec.screenshots || [],\r\n            screenshotCount: (exec.screenshots || []).length + \r\n              exec.steps.reduce((total, step) => total + (step.screenshots || []).length, 0)\r\n          })),\r\n          total: executions.length,\r\n          flowId: flowId || 'all'\r\n        });\r\n\r\n      case 'execution':\r\n        // Obtener ejecución específica\r\n        if (!executionId) {\r\n          return NextResponse.json(\r\n            { error: 'executionId es requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n        \r\n        const execution = testFlowManager.getExecution(executionId);\r\n        if (!execution) {\r\n          return NextResponse.json(\r\n            { error: 'Ejecución no encontrada' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n        // Incluir estadísticas de screenshots\r\n        const screenshotStats = testFlowManager.getScreenshotStats(executionId);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: {\r\n            ...execution,\r\n            screenshotStats\r\n          }\r\n        });\r\n\r\n      default:\r\n        // Por defecto, retornar resumen\r\n        const allFlows = testFlowManager.getAvailableFlows();\r\n        const allExecutions = testFlowManager.getExecutions();\r\n        \r\n        const summary = {\r\n          totalFlows: allFlows.length,\r\n          totalExecutions: allExecutions.length,\r\n          recentExecutions: allExecutions\r\n            .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())\r\n            .slice(0, 10),\r\n          flowStats: allFlows.map(flow => {\r\n            const flowExecutions = allExecutions.filter(e => e.flowId === flow.id);\r\n            const successful = flowExecutions.filter(e => e.status === 'success').length;\r\n            const failed = flowExecutions.filter(e => e.status === 'failed').length;\r\n            const running = flowExecutions.filter(e => e.status === 'running').length;\r\n            \r\n            return {\r\n              flowId: flow.id,\r\n              name: flow.name,\r\n              totalExecutions: flowExecutions.length,\r\n              successful,\r\n              failed,\r\n              running,\r\n              successRate: flowExecutions.length > 0 ? (successful / flowExecutions.length) * 100 : 0,\r\n              lastExecution: flowExecutions.length > 0 ? \r\n                flowExecutions.sort((a, b) => b.startTime.getTime() - a.startTime.getTime())[0] : null\r\n            };\r\n          })\r\n        };\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: summary\r\n        });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en API de test flows:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { action, flowId, trigger = 'manual' } = body;\r\n\r\n    switch (action) {\r\n      case 'execute':\r\n        // Ejecutar un flujo específico\r\n        if (!flowId) {\r\n          return NextResponse.json(\r\n            { error: 'flowId es requerido para ejecutar un flujo' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        console.log(`🚀 Iniciando ejecución de flujo: ${flowId}`);\r\n        \r\n        // Ejecutar flujo de manera asíncrona\r\n        const execution = await testFlowManager.executeFlow(flowId, trigger);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: execution,\r\n          message: `Flujo ${flowId} iniciado exitosamente`\r\n        });\r\n\r\n      case 'register':\r\n        // Registrar un nuevo flujo (para casos avanzados)\r\n        const { flow } = body;\r\n        if (!flow) {\r\n          return NextResponse.json(\r\n            { error: 'Configuración de flujo es requerida' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        testFlowManager.registerFlow(flow);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          message: `Flujo ${flow.id} registrado exitosamente`\r\n        });\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Acción no válida' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error ejecutando flujo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error ejecutando flujo',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsyHsB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MA7GAC,IAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,GAAA;;MA6GAE,KAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,IAAA;;MAxHTC,QAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,OAAA;;;;;kCAO6B;;;kCACV;AARzB,MAAMA,OAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAU;AAWhB,eAAeC,IAAII,OAAoB;EAAA;EAAAP,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAM;MAAEM;IAAY,CAAE;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,QAAG,IAAIO,GAAA,CAAIF,OAAA,CAAQG,GAAG;IAC5C,MAAMC,MAAA;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA,QAASM,YAAA,CAAaI,GAAG,CAAC;IAChC,MAAMC,MAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAASM,YAAA,CAAaI,GAAG,CAAC;IAChC,MAAME,WAAA;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAcM,YAAA,CAAaI,GAAG,CAAC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAErC,QAAQS,MAAA;MACN,KAAK;QAAA;QAAAX,cAAA,GAAAe,CAAA;QACH;QACA,MAAMC,KAAA;QAAA;QAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAQe,kBAAA,CAAAC,eAAe,CAACC,iBAAiB;QAAA;QAAAnB,cAAA,GAAAE,CAAA;QAC/C,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACTC,IAAA,EAAMR,KAAA;UACNS,KAAA,EAAOT,KAAA,CAAMU;QACf;MAEF,KAAK;QAAA;QAAA1B,cAAA,GAAAe,CAAA;QACH;QACA,MAAMY,UAAA;QAAA;QAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAae,kBAAA,CAAAC,eAAe,CAACU,aAAa;QAAC;QAAA,CAAA5B,cAAA,GAAAe,CAAA,UAAAF,MAAA;QAAA;QAAA,CAAAb,cAAA,GAAAe,CAAA,UAAUc,SAAA;QAAA;QAAA7B,cAAA,GAAAE,CAAA;QAC3D,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACTC,IAAA,EAAMG,UAAA,CAAWG,GAAG,CAACC,IAAA,IAAS;YAAA;YAAA/B,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAE,CAAA;YAAA;cAC5B,GAAG6B,IAAI;cACPC,WAAA;cAAa;cAAA,CAAAhC,cAAA,GAAAe,CAAA,UAAAgB,IAAA,CAAKC,WAAW;cAAA;cAAA,CAAAhC,cAAA,GAAAe,CAAA,UAAI,EAAE;cACnCkB,eAAA,EAAiB;cAAC;cAAA,CAAAjC,cAAA,GAAAe,CAAA,UAAAgB,IAAA,CAAKC,WAAW;cAAA;cAAA,CAAAhC,cAAA,GAAAe,CAAA,UAAI,EAAE,GAAEW,MAAM,GAC9CK,IAAA,CAAKG,KAAK,CAACC,MAAM,CAAC,CAACV,KAAA,EAAOW,IAAA,KAAS;gBAAA;gBAAApC,cAAA,GAAAI,CAAA;gBAAAJ,cAAA,GAAAE,CAAA;gBAAA,OAAAuB,KAAA,GAAQ;gBAAC;gBAAA,CAAAzB,cAAA,GAAAe,CAAA,UAAAqB,IAAA,CAAKJ,WAAW;gBAAA;gBAAA,CAAAhC,cAAA,GAAAe,CAAA,UAAI,EAAE,GAAEW,MAAM;cAAN,CAAM,EAAE;YAChF;UAAA;UACAD,KAAA,EAAOE,UAAA,CAAWD,MAAM;UACxBb,MAAA;UAAQ;UAAA,CAAAb,cAAA,GAAAe,CAAA,UAAAF,MAAA;UAAA;UAAA,CAAAb,cAAA,GAAAe,CAAA,UAAU;QACpB;MAEF,KAAK;QAAA;QAAAf,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QACH;QACA,IAAI,CAACY,WAAA,EAAa;UAAA;UAAAd,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UAChB,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;YAAEe,KAAA,EAAO;UAA2B,GACpC;YAAEC,MAAA,EAAQ;UAAI;QAElB;QAAA;QAAA;UAAAtC,cAAA,GAAAe,CAAA;QAAA;QAEA,MAAMwB,SAAA;QAAA;QAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAYe,kBAAA,CAAAC,eAAe,CAACsB,YAAY,CAAC1B,WAAA;QAAA;QAAAd,cAAA,GAAAE,CAAA;QAC/C,IAAI,CAACqC,SAAA,EAAW;UAAA;UAAAvC,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UACd,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;YAAEe,KAAA,EAAO;UAA0B,GACnC;YAAEC,MAAA,EAAQ;UAAI;QAElB;QAAA;QAAA;UAAAtC,cAAA,GAAAe,CAAA;QAAA;QAEA;QACA,MAAM0B,eAAA;QAAA;QAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAkBe,kBAAA,CAAAC,eAAe,CAACwB,kBAAkB,CAAC5B,WAAA;QAAA;QAAAd,cAAA,GAAAE,CAAA;QAE3D,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACTC,IAAA,EAAM;YACJ,GAAGe,SAAS;YACZE;UACF;QACF;MAEF;QAAA;QAAAzC,cAAA,GAAAe,CAAA;QACE;QACA,MAAM4B,QAAA;QAAA;QAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAWe,kBAAA,CAAAC,eAAe,CAACC,iBAAiB;QAClD,MAAMyB,aAAA;QAAA;QAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAgBe,kBAAA,CAAAC,eAAe,CAACU,aAAa;QAEnD,MAAMiB,OAAA;QAAA;QAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAU;UACd4C,UAAA,EAAYH,QAAA,CAASjB,MAAM;UAC3BqB,eAAA,EAAiBH,aAAA,CAAclB,MAAM;UACrCsB,gBAAA,EAAkBJ,aAAA,CACfK,IAAI,CAAC,CAACC,CAAA,EAAGnC,CAAA,KAAM;YAAA;YAAAf,cAAA,GAAAI,CAAA;YAAAJ,cAAA,GAAAE,CAAA;YAAA,OAAAa,CAAA,CAAEoC,SAAS,CAACC,OAAO,KAAKF,CAAA,CAAEC,SAAS,CAACC,OAAO;UAAA,GAC1DC,KAAK,CAAC,GAAG;UACZC,SAAA,EAAWX,QAAA,CAASb,GAAG,CAACyB,IAAA;YAAA;YAAAvD,cAAA,GAAAI,CAAA;YACtB,MAAMoD,cAAA;YAAA;YAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAiB0C,aAAA,CAAca,MAAM,CAACC,CAAA,IAAK;cAAA;cAAA1D,cAAA,GAAAI,CAAA;cAAAJ,cAAA,GAAAE,CAAA;cAAA,OAAAwD,CAAA,CAAE7C,MAAM,KAAK0C,IAAA,CAAKI,EAAE;YAAF,CAAE;YACrE,MAAMC,UAAA;YAAA;YAAA,CAAA5D,cAAA,GAAAE,CAAA,QAAasD,cAAA,CAAeC,MAAM,CAACC,CAAA,IAAK;cAAA;cAAA1D,cAAA,GAAAI,CAAA;cAAAJ,cAAA,GAAAE,CAAA;cAAA,OAAAwD,CAAA,CAAEpB,MAAM,KAAK;YAAA,GAAWZ,MAAM;YAC5E,MAAMmC,MAAA;YAAA;YAAA,CAAA7D,cAAA,GAAAE,CAAA,QAASsD,cAAA,CAAeC,MAAM,CAACC,CAAA,IAAK;cAAA;cAAA1D,cAAA,GAAAI,CAAA;cAAAJ,cAAA,GAAAE,CAAA;cAAA,OAAAwD,CAAA,CAAEpB,MAAM,KAAK;YAAA,GAAUZ,MAAM;YACvE,MAAMoC,OAAA;YAAA;YAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAUsD,cAAA,CAAeC,MAAM,CAACC,CAAA,IAAK;cAAA;cAAA1D,cAAA,GAAAI,CAAA;cAAAJ,cAAA,GAAAE,CAAA;cAAA,OAAAwD,CAAA,CAAEpB,MAAM,KAAK;YAAA,GAAWZ,MAAM;YAAA;YAAA1B,cAAA,GAAAE,CAAA;YAEzE,OAAO;cACLW,MAAA,EAAQ0C,IAAA,CAAKI,EAAE;cACfI,IAAA,EAAMR,IAAA,CAAKQ,IAAI;cACfhB,eAAA,EAAiBS,cAAA,CAAe9B,MAAM;cACtCkC,UAAA;cACAC,MAAA;cACAC,OAAA;cACAE,WAAA,EAAaR,cAAA,CAAe9B,MAAM,GAAG;cAAA;cAAA,CAAA1B,cAAA,GAAAe,CAAA,UAAI6C,UAAC,GAAaJ,cAAA,CAAe9B,MAAM,GAAI;cAAA;cAAA,CAAA1B,cAAA,GAAAe,CAAA,UAAM;cACtFkD,aAAA,EAAeT,cAAA,CAAe9B,MAAM,GAAG;cAAA;cAAA,CAAA1B,cAAA,GAAAe,CAAA,UACrCyC,cAAA,CAAeP,IAAI,CAAC,CAACC,CAAA,EAAGnC,CAAA,KAAM;gBAAA;gBAAAf,cAAA,GAAAI,CAAA;gBAAAJ,cAAA,GAAAE,CAAA;gBAAA,OAAAa,CAAA,CAAEoC,SAAS,CAACC,OAAO,KAAKF,CAAA,CAAEC,SAAS,CAACC,OAAO;cAAA,EAAG,CAAC,EAAE;cAAA;cAAA,CAAApD,cAAA,GAAAe,CAAA,UAAG;YACtF;UACF;QACF;QAAA;QAAAf,cAAA,GAAAE,CAAA;QAEA,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACTC,IAAA,EAAMqB;QACR;IACJ;EAEF,EAAE,OAAOR,KAAA,EAAO;IAAA;IAAArC,cAAA,GAAAE,CAAA;IACdgE,OAAA,CAAQ7B,KAAK,CAAC,+BAA+BA,KAAA;IAAA;IAAArC,cAAA,GAAAE,CAAA;IAC7C,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MACEe,KAAA,EAAO;MACP8B,OAAA,EAAS9B,KAAA,YAAiB+B,KAAA;MAAA;MAAA,CAAApE,cAAA,GAAAe,CAAA,WAAQsB,KAAA,CAAMgC,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAe,CAAA,WAAG;IACpD,GACA;MAAEuB,MAAA,EAAQ;IAAI;EAElB;AACF;AAEO,eAAejC,KAAKE,OAAoB;EAAA;EAAAP,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAMoE,IAAA;IAAA;IAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAO,MAAMK,OAAA,CAAQe,IAAI;IAC/B,MAAM;MAAEX,MAAM;MAAEE,MAAM;MAAE0D,OAAA;MAAA;MAAA,CAAAvE,cAAA,GAAAe,CAAA,WAAU,QAAQ;IAAA,CAAE;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAGoE,IAAA;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAE/C,QAAQS,MAAA;MACN,KAAK;QAAA;QAAAX,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QACH;QACA,IAAI,CAACW,MAAA,EAAQ;UAAA;UAAAb,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UACX,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;YAAEe,KAAA,EAAO;UAA6C,GACtD;YAAEC,MAAA,EAAQ;UAAI;QAElB;QAAA;QAAA;UAAAtC,cAAA,GAAAe,CAAA;QAAA;QAAAf,cAAA,GAAAE,CAAA;QAEAgE,OAAA,CAAQM,GAAG,CAAC,oCAAoC3D,MAAA,EAAQ;QAExD;QACA,MAAM0B,SAAA;QAAA;QAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAY,MAAMe,kBAAA,CAAAC,eAAe,CAACuD,WAAW,CAAC5D,MAAA,EAAQ0D,OAAA;QAAA;QAAAvE,cAAA,GAAAE,CAAA;QAE5D,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACTC,IAAA,EAAMe,SAAA;UACN8B,OAAA,EAAS,SAASxD,MAAA;QACpB;MAEF,KAAK;QAAA;QAAAb,cAAA,GAAAe,CAAA;QACH;QACA,MAAM;UAAEwC;QAAI,CAAE;QAAA;QAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAGoE,IAAA;QAAA;QAAAtE,cAAA,GAAAE,CAAA;QACjB,IAAI,CAACqD,IAAA,EAAM;UAAA;UAAAvD,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UACT,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;YAAEe,KAAA,EAAO;UAAsC,GAC/C;YAAEC,MAAA,EAAQ;UAAI;QAElB;QAAA;QAAA;UAAAtC,cAAA,GAAAe,CAAA;QAAA;QAAAf,cAAA,GAAAE,CAAA;QAEAe,kBAAA,CAAAC,eAAe,CAACwD,YAAY,CAACnB,IAAA;QAAA;QAAAvD,cAAA,GAAAE,CAAA;QAE7B,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;UACvBC,OAAA,EAAS;UACT8C,OAAA,EAAS,SAASd,IAAA,CAAKI,EAAE;QAC3B;MAEF;QAAA;QAAA3D,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QACE,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEe,KAAA,EAAO;QAAmB,GAC5B;UAAEC,MAAA,EAAQ;QAAI;IAEpB;EAEF,EAAE,OAAOD,KAAA,EAAO;IAAA;IAAArC,cAAA,GAAAE,CAAA;IACdgE,OAAA,CAAQ7B,KAAK,CAAC,2BAA2BA,KAAA;IAAA;IAAArC,cAAA,GAAAE,CAAA;IACzC,OAAOkB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MACEe,KAAA,EAAO;MACP8B,OAAA,EAAS9B,KAAA,YAAiB+B,KAAA;MAAA;MAAA,CAAApE,cAAA,GAAAe,CAAA,WAAQsB,KAAA,CAAMgC,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAe,CAAA,WAAG;IACpD,GACA;MAAEuB,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}