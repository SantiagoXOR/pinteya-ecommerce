a3c4a5f8b03159914bcc5c1e9bee3dae
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_bugx5e55g() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-execution\\route.ts";
  var hash = "bbe90275995538d5b3628aba3a3496adac7b14c0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-execution\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "9": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "10": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "11": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 65
        }
      },
      "12": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "13": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 67
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "15": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "16": {
        start: {
          line: 36,
          column: 18
        },
        end: {
          line: 36,
          column: 59
        }
      },
      "17": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "18": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "19": {
        start: {
          line: 72,
          column: 21
        },
        end: {
          line: 72,
          column: 41
        }
      },
      "20": {
        start: {
          line: 73,
          column: 107
        },
        end: {
          line: 73,
          column: 111
        }
      },
      "21": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 75,
          column: 73
        }
      },
      "22": {
        start: {
          line: 75,
          column: 53
        },
        end: {
          line: 75,
          column: 72
        }
      },
      "23": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "24": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "25": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "26": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 36
        }
      },
      "27": {
        start: {
          line: 98,
          column: 37
        },
        end: {
          line: 98,
          column: 41
        }
      },
      "28": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "29": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 14
        }
      },
      "30": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 68
        }
      },
      "31": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "32": {
        start: {
          line: 110,
          column: 26
        },
        end: {
          line: 110,
          column: 47
        }
      },
      "33": {
        start: {
          line: 111,
          column: 35
        },
        end: {
          line: 111,
          column: 45
        }
      },
      "34": {
        start: {
          line: 112,
          column: 37
        },
        end: {
          line: 112,
          column: 39
        }
      },
      "35": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "36": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 66
        }
      },
      "37": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "38": {
        start: {
          line: 117,
          column: 35
        },
        end: {
          line: 125,
          column: 22
        }
      },
      "39": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 43
        }
      },
      "40": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 43
        }
      },
      "41": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 139,
          column: 21
        }
      },
      "42": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "43": {
        start: {
          line: 132,
          column: 47
        },
        end: {
          line: 134,
          column: 30
        }
      },
      "44": {
        start: {
          line: 135,
          column: 28
        },
        end: {
          line: 135,
          column: 62
        }
      },
      "45": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 99
        }
      },
      "46": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 36
        }
      },
      "47": {
        start: {
          line: 142,
          column: 38
        },
        end: {
          line: 142,
          column: 65
        }
      },
      "48": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "49": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "50": {
        start: {
          line: 146,
          column: 50
        },
        end: {
          line: 146,
          column: 123
        }
      },
      "51": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 68
        }
      },
      "52": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 77
        }
      },
      "53": {
        start: {
          line: 153,
          column: 36
        },
        end: {
          line: 153,
          column: 93
        }
      },
      "54": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "55": {
        start: {
          line: 159,
          column: 60
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "56": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 45
        }
      },
      "57": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 86
        }
      },
      "58": {
        start: {
          line: 171,
          column: 38
        },
        end: {
          line: 171,
          column: 65
        }
      },
      "59": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 80
        }
      },
      "60": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 183,
          column: 17
        }
      },
      "61": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 182,
          column: 21
        }
      },
      "62": {
        start: {
          line: 176,
          column: 43
        },
        end: {
          line: 178,
          column: 26
        }
      },
      "63": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 58
        }
      },
      "64": {
        start: {
          line: 181,
          column: 24
        },
        end: {
          line: 181,
          column: 95
        }
      },
      "65": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "66": {
        start: {
          line: 192,
          column: 60
        },
        end: {
          line: 197,
          column: 25
        }
      },
      "67": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 41
        }
      },
      "68": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 58
        }
      },
      "69": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "70": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "71": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 50
        }
      },
      "72": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 71
        }
      },
      "73": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "74": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 61
        }
      },
      "75": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "76": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "77": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "78": {
        start: {
          line: 231,
          column: 79
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "79": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "80": {
        start: {
          line: 248,
          column: 19
        },
        end: {
          line: 254,
          column: 5
        }
      },
      "81": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 296,
          column: 5
        }
      },
      "82": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "83": {
        start: {
          line: 258,
          column: 36
        },
        end: {
          line: 258,
          column: 79
        }
      },
      "84": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "85": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 61
        }
      },
      "86": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 61
        }
      },
      "87": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 61
        }
      },
      "88": {
        start: {
          line: 266,
          column: 30
        },
        end: {
          line: 266,
          column: 98
        }
      },
      "89": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "90": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 55
        }
      },
      "91": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 55
        }
      },
      "92": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 54
        }
      },
      "93": {
        start: {
          line: 273,
          column: 34
        },
        end: {
          line: 273,
          column: 63
        }
      },
      "94": {
        start: {
          line: 274,
          column: 34
        },
        end: {
          line: 274,
          column: 63
        }
      },
      "95": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 277,
          column: 17
        }
      },
      "96": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 59
        }
      },
      "97": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 280,
          column: 17
        }
      },
      "98": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 279,
          column: 59
        }
      },
      "99": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 61
        }
      },
      "100": {
        start: {
          line: 284,
          column: 34
        },
        end: {
          line: 284,
          column: 75
        }
      },
      "101": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "102": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 291,
          column: 18
        }
      },
      "103": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 69
        }
      },
      "104": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 297,
          column: 18
        }
      },
      "105": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 394,
          column: 5
        }
      },
      "106": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 86
        }
      },
      "107": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "108": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "109": {
        start: {
          line: 309,
          column: 33
        },
        end: {
          line: 309,
          column: 114
        }
      },
      "110": {
        start: {
          line: 309,
          column: 73
        },
        end: {
          line: 309,
          column: 110
        }
      },
      "111": {
        start: {
          line: 310,
          column: 34
        },
        end: {
          line: 314,
          column: 15
        }
      },
      "112": {
        start: {
          line: 310,
          column: 65
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "113": {
        start: {
          line: 316,
          column: 23
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "114": {
        start: {
          line: 328,
          column: 57
        },
        end: {
          line: 343,
          column: 17
        }
      },
      "115": {
        start: {
          line: 345,
          column: 48
        },
        end: {
          line: 345,
          column: 69
        }
      },
      "116": {
        start: {
          line: 345,
          column: 80
        },
        end: {
          line: 345,
          column: 87
        }
      },
      "117": {
        start: {
          line: 354,
          column: 70
        },
        end: {
          line: 354,
          column: 80
        }
      },
      "118": {
        start: {
          line: 355,
          column: 70
        },
        end: {
          line: 355,
          column: 80
        }
      },
      "119": {
        start: {
          line: 387,
          column: 25
        },
        end: {
          line: 387,
          column: 70
        }
      },
      "120": {
        start: {
          line: 388,
          column: 25
        },
        end: {
          line: 388,
          column: 65
        }
      },
      "121": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 77
        }
      },
      "122": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 56
        }
      },
      "123": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 57
        }
      },
      "124": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 33
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 19
          }
        },
        loc: {
          start: {
            line: 70,
            column: 29
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 45
          }
        },
        loc: {
          start: {
            line: 75,
            column: 53
          },
          end: {
            line: 75,
            column: 72
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 159,
            column: 54
          },
          end: {
            line: 159,
            column: 55
          }
        },
        loc: {
          start: {
            line: 159,
            column: 60
          },
          end: {
            line: 164,
            column: 25
          }
        },
        line: 159
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 192,
            column: 54
          },
          end: {
            line: 192,
            column: 55
          }
        },
        loc: {
          start: {
            line: 192,
            column: 60
          },
          end: {
            line: 197,
            column: 25
          }
        },
        line: 192
      },
      "9": {
        name: "GET",
        decl: {
          start: {
            line: 227,
            column: 15
          },
          end: {
            line: 227,
            column: 18
          }
        },
        loc: {
          start: {
            line: 227,
            column: 28
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 227
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 231,
            column: 61
          },
          end: {
            line: 231,
            column: 62
          }
        },
        loc: {
          start: {
            line: 231,
            column: 79
          },
          end: {
            line: 236,
            column: 17
          }
        },
        line: 231
      },
      "11": {
        name: "parseSuiteOutput",
        decl: {
          start: {
            line: 247,
            column: 9
          },
          end: {
            line: 247,
            column: 25
          }
        },
        loc: {
          start: {
            line: 247,
            column: 62
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 247
      },
      "12": {
        name: "generateTestReport",
        decl: {
          start: {
            line: 299,
            column: 15
          },
          end: {
            line: 299,
            column: 33
          }
        },
        loc: {
          start: {
            line: 299,
            column: 43
          },
          end: {
            line: 395,
            column: 1
          }
        },
        line: 299
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 309,
            column: 56
          },
          end: {
            line: 309,
            column: 57
          }
        },
        loc: {
          start: {
            line: 309,
            column: 73
          },
          end: {
            line: 309,
            column: 110
          }
        },
        line: 309
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 310,
            column: 54
          },
          end: {
            line: 310,
            column: 55
          }
        },
        loc: {
          start: {
            line: 310,
            column: 65
          },
          end: {
            line: 314,
            column: 13
          }
        },
        line: 310
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 328,
            column: 39
          },
          end: {
            line: 328,
            column: 40
          }
        },
        loc: {
          start: {
            line: 328,
            column: 57
          },
          end: {
            line: 343,
            column: 17
          }
        },
        line: 328
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 345,
            column: 43
          },
          end: {
            line: 345,
            column: 44
          }
        },
        loc: {
          start: {
            line: 345,
            column: 48
          },
          end: {
            line: 345,
            column: 69
          }
        },
        line: 345
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 345,
            column: 75
          },
          end: {
            line: 345,
            column: 76
          }
        },
        loc: {
          start: {
            line: 345,
            column: 80
          },
          end: {
            line: 345,
            column: 87
          }
        },
        line: 345
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 354,
            column: 65
          },
          end: {
            line: 354,
            column: 66
          }
        },
        loc: {
          start: {
            line: 354,
            column: 70
          },
          end: {
            line: 354,
            column: 80
          }
        },
        line: 354
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 355,
            column: 65
          },
          end: {
            line: 355,
            column: 66
          }
        },
        loc: {
          start: {
            line: 355,
            column: 70
          },
          end: {
            line: 355,
            column: 80
          }
        },
        line: 355
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 38
          }
        }, {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 33,
            column: 5
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 14
          }
        }, {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 32
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 41
          },
          end: {
            line: 73,
            column: 45
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 47
          },
          end: {
            line: 73,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 57
          },
          end: {
            line: 73,
            column: 63
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 65
          },
          end: {
            line: 73,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 79
          },
          end: {
            line: 73,
            column: 84
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 34
          },
          end: {
            line: 101,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 34
          },
          end: {
            line: 101,
            column: 68
          }
        }, {
          start: {
            line: 101,
            column: 72
          },
          end: {
            line: 101,
            column: 76
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 102,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 102,
            column: 60
          }
        }, {
          start: {
            line: 102,
            column: 64
          },
          end: {
            line: 102,
            column: 69
          }
        }],
        line: 102
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 50
          }
        }, {
          start: {
            line: 103,
            column: 54
          },
          end: {
            line: 103,
            column: 56
          }
        }],
        line: 103
      },
      "10": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 139,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 139,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 174,
            column: 60
          }
        }, {
          start: {
            line: 174,
            column: 64
          },
          end: {
            line: 174,
            column: 93
          }
        }],
        line: 174
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 40
          }
        }, {
          start: {
            line: 190,
            column: 44
          },
          end: {
            line: 190,
            column: 46
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 191,
            column: 28
          },
          end: {
            line: 191,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 28
          },
          end: {
            line: 191,
            column: 40
          }
        }, {
          start: {
            line: 191,
            column: 44
          },
          end: {
            line: 191,
            column: 46
          }
        }],
        line: 191
      },
      "16": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "17": {
        loc: {
          start: {
            line: 221,
            column: 21
          },
          end: {
            line: 221,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 46
          },
          end: {
            line: 221,
            column: 59
          }
        }, {
          start: {
            line: 221,
            column: 62
          },
          end: {
            line: 221,
            column: 77
          }
        }],
        line: 221
      },
      "18": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: 264,
            column: 15
          },
          end: {
            line: 293,
            column: 9
          }
        }],
        line: 256
      },
      "19": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: 271,
            column: 19
          },
          end: {
            line: 282,
            column: 13
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 277,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 277,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "24": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "25": {
        loc: {
          start: {
            line: 309,
            column: 82
          },
          end: {
            line: 309,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 82
          },
          end: {
            line: 309,
            column: 104
          }
        }, {
          start: {
            line: 309,
            column: 108
          },
          end: {
            line: 309,
            column: 109
          }
        }],
        line: 309
      },
      "26": {
        loc: {
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 312,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 312,
            column: 45
          }
        }, {
          start: {
            line: 312,
            column: 49
          },
          end: {
            line: 312,
            column: 50
          }
        }],
        line: 312
      },
      "27": {
        loc: {
          start: {
            line: 313,
            column: 29
          },
          end: {
            line: 313,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 29
          },
          end: {
            line: 313,
            column: 47
          }
        }, {
          start: {
            line: 313,
            column: 51
          },
          end: {
            line: 313,
            column: 53
          }
        }],
        line: 313
      },
      "28": {
        loc: {
          start: {
            line: 335,
            column: 33
          },
          end: {
            line: 335,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 33
          },
          end: {
            line: 335,
            column: 51
          }
        }, {
          start: {
            line: 335,
            column: 55
          },
          end: {
            line: 335,
            column: 57
          }
        }],
        line: 335
      },
      "29": {
        loc: {
          start: {
            line: 336,
            column: 37
          },
          end: {
            line: 336,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 37
          },
          end: {
            line: 336,
            column: 59
          }
        }, {
          start: {
            line: 336,
            column: 63
          },
          end: {
            line: 336,
            column: 64
          }
        }],
        line: 336
      },
      "30": {
        loc: {
          start: {
            line: 338,
            column: 31
          },
          end: {
            line: 338,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 31
          },
          end: {
            line: 338,
            column: 43
          }
        }, {
          start: {
            line: 338,
            column: 47
          },
          end: {
            line: 338,
            column: 48
          }
        }],
        line: 338
      },
      "31": {
        loc: {
          start: {
            line: 339,
            column: 32
          },
          end: {
            line: 339,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 32
          },
          end: {
            line: 339,
            column: 45
          }
        }, {
          start: {
            line: 339,
            column: 49
          },
          end: {
            line: 339,
            column: 50
          }
        }],
        line: 339
      },
      "32": {
        loc: {
          start: {
            line: 340,
            column: 32
          },
          end: {
            line: 340,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 32
          },
          end: {
            line: 340,
            column: 45
          }
        }, {
          start: {
            line: 340,
            column: 49
          },
          end: {
            line: 340,
            column: 50
          }
        }],
        line: 340
      },
      "33": {
        loc: {
          start: {
            line: 347,
            column: 24
          },
          end: {
            line: 347,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 55
          },
          end: {
            line: 347,
            column: 64
          }
        }, {
          start: {
            line: 347,
            column: 67
          },
          end: {
            line: 347,
            column: 76
          }
        }],
        line: 347
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-execution\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Execution\r\n// Endpoint para ejecutar tests automatizados desde el dashboard admin\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { screenshotManager } from '@/lib/testing/screenshot-manager';\r\nimport { API_TIMEOUTS } from '@/lib/config/api-timeouts';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\ninterface TestExecutionRequest {\r\n  suites: string[];\r\n  generateReport?: boolean;\r\n  timeout?: number;\r\n  screenshots?: boolean;\r\n  screenshotConfig?: {\r\n    captureOnFailure?: boolean;\r\n    captureSteps?: boolean;\r\n    quality?: number;\r\n  };\r\n}\r\n\r\ninterface TestSuiteConfig {\r\n  name: string;\r\n  command: string;\r\n  timeout: number;\r\n  description: string;\r\n}\r\n\r\n// Configuraci\xF3n de suites de testing disponibles\r\nconst TEST_SUITES: Record<string, TestSuiteConfig> = {\r\n  unit: {\r\n    name: 'Tests Unitarios',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(hooks|utils|lib)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests unitarios de hooks, utilities y librer\xEDas'\r\n  },\r\n  components: {\r\n    name: 'Tests de Componentes',\r\n    command: 'npm test -- --testPathPattern=\"__tests__/(components|optimization)\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default + 30000, // 30s adicionales para componentes\r\n    description: 'Tests de componentes React y optimizaciones'\r\n  },\r\n  e2e: {\r\n    name: 'Tests E2E',\r\n    command: 'npx playwright test --project=ui-admin --reporter=json',\r\n    timeout: API_TIMEOUTS.upload * 2.5, // Timeout extendido para E2E\r\n    description: 'Tests end-to-end con Playwright'\r\n  },\r\n  performance: {\r\n    name: 'Tests de Performance',\r\n    command: 'npm test -- --testPathPattern=\"performance\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.upload, // Usar timeout de upload para performance\r\n    description: 'Tests de performance y Core Web Vitals'\r\n  },\r\n  api: {\r\n    name: 'Tests de API',\r\n    command: 'npm test -- --testPathPattern=\"api\" --passWithNoTests',\r\n    timeout: API_TIMEOUTS.default, // Usar timeout centralizado\r\n    description: 'Tests de endpoints y APIs'\r\n  }\r\n};\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: TestExecutionRequest = await request.json();\r\n    const { suites, generateReport = true, timeout = 300000, screenshots = false, screenshotConfig } = body;\r\n\r\n    // Validar suites solicitadas\r\n    const invalidSuites = suites.filter(suite => !TEST_SUITES[suite]);\r\n    if (invalidSuites.length > 0) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Suites inv\xE1lidas: ${invalidSuites.join(', ')}`,\r\n          availableSuites: Object.keys(TEST_SUITES)\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const results = {\r\n      executionId: `exec-${Date.now()}`,\r\n      timestamp: new Date().toISOString(),\r\n      requestedSuites: suites,\r\n      results: [] as any[],\r\n      summary: {\r\n        totalSuites: suites.length,\r\n        successful: 0,\r\n        failed: 0,\r\n        duration: 0\r\n      }\r\n    };\r\n\r\n    const startTime = Date.now();\r\n\r\n    // Configurar screenshots si est\xE1 habilitado\r\n    let screenshotConfig_final = null;\r\n    if (screenshots) {\r\n      screenshotConfig_final = {\r\n        captureOnFailure: screenshotConfig?.captureOnFailure ?? true,\r\n        captureSteps: screenshotConfig?.captureSteps ?? false,\r\n        quality: screenshotConfig?.quality ?? 80\r\n      };\r\n      \r\n      // Inicializar screenshot manager\r\n      await screenshotManager.initialize();\r\n    }\r\n\r\n    // Ejecutar cada suite secuencialmente\r\n    for (const suiteKey of suites) {\r\n      const suite = TEST_SUITES[suiteKey];\r\n      const suiteStartTime = Date.now();\r\n      const suiteScreenshots = [];\r\n\r\n      try {\r\n        console.log(`\uD83E\uDDEA Ejecutando suite: ${suite.name}`);\r\n        \r\n        let stdout, stderr;\r\n        try {\r\n          const result = await execAsync(suite.command, {\r\n            cwd: process.cwd(),\r\n            timeout: suite.timeout,\r\n            env: {\r\n              ...process.env,\r\n              NODE_ENV: 'test',\r\n              CI: 'true'\r\n            }\r\n          });\r\n          stdout = result.stdout;\r\n          stderr = result.stderr;\r\n        } catch (execError: any) {\r\n          // Capturar screenshot en caso de fallo si est\xE1 configurado\r\n          if (screenshotConfig_final?.captureOnFailure) {\r\n            try {\r\n              const screenshot = await screenshotManager.captureScreenshot(\r\n                `test-failure-${suiteKey}-${Date.now()}`,\r\n                { description: `Test failure in ${suite.name}: ${execError.message}` }\r\n              );\r\n              suiteScreenshots.push(screenshot);\r\n            } catch (screenshotError) {\r\n              console.warn('Error capturando screenshot de fallo:', screenshotError);\r\n            }\r\n          }\r\n          throw execError;\r\n        }\r\n\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        \r\n        // Obtener screenshots capturados durante la ejecuci\xF3n\r\n        if (screenshotConfig_final) {\r\n          try {\r\n            const recentScreenshots = screenshotManager.getRecentScreenshots(suiteStartTime);\r\n            suiteScreenshots.push(...recentScreenshots);\r\n          } catch (error) {\r\n            console.warn('Error obteniendo screenshots:', error);\r\n          }\r\n        }\r\n        \r\n        // Parsear resultados seg\xFAn el tipo de suite\r\n        const suiteResult = parseSuiteOutput(suiteKey, stdout, stderr, suiteDuration);\r\n        \r\n        results.results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'success',\r\n          duration: suiteDuration,\r\n          screenshots: suiteScreenshots.map(s => ({\r\n            filename: s.filename,\r\n            description: s.description,\r\n            timestamp: s.timestamp,\r\n            url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`\r\n          })),\r\n          screenshotCount: suiteScreenshots.length,\r\n          ...suiteResult\r\n        });\r\n\r\n        results.summary.successful++;\r\n        console.log(`\u2705 Suite completada: ${suite.name} (${suiteDuration}ms)`);\r\n\r\n      } catch (error: any) {\r\n        const suiteDuration = Date.now() - suiteStartTime;\r\n        \r\n        console.error(`\u274C Error en suite ${suite.name}:`, error.message);\r\n        \r\n        // Capturar screenshot de error adicional si est\xE1 configurado\r\n        if (screenshotConfig_final?.captureOnFailure && suiteScreenshots.length === 0) {\r\n          try {\r\n            const screenshot = await screenshotManager.captureScreenshot(\r\n              `test-error-${suiteKey}-${Date.now()}`,\r\n              { description: `Test execution error in ${suite.name}: ${error.message}` }\r\n            );\r\n            suiteScreenshots.push(screenshot);\r\n          } catch (screenshotError) {\r\n            console.warn('Error capturando screenshot de error:', screenshotError);\r\n          }\r\n        }\r\n        \r\n        results.results.push({\r\n          suite: suiteKey,\r\n          name: suite.name,\r\n          status: 'failed',\r\n          duration: suiteDuration,\r\n          error: error.message,\r\n          stdout: error.stdout || '',\r\n          stderr: error.stderr || '',\r\n          screenshots: suiteScreenshots.map(s => ({\r\n            filename: s.filename,\r\n            description: s.description,\r\n            timestamp: s.timestamp,\r\n            url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`\r\n          })),\r\n          screenshotCount: suiteScreenshots.length\r\n        });\r\n\r\n        results.summary.failed++;\r\n      }\r\n    }\r\n\r\n    results.summary.duration = Date.now() - startTime;\r\n\r\n    // Generar reporte si se solicita\r\n    if (generateReport) {\r\n      try {\r\n        await generateTestReport(results);\r\n      } catch (reportError) {\r\n        console.error('Error generando reporte:', reportError);\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: results,\r\n      message: `Ejecuci\xF3n completada: ${results.summary.successful}/${results.summary.totalSuites} suites exitosas`\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en ejecuci\xF3n de tests:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    return NextResponse.json({\r\n      success: true,\r\n      availableSuites: Object.entries(TEST_SUITES).map(([key, config]) => ({\r\n        key,\r\n        name: config.name,\r\n        description: config.description,\r\n        timeout: config.timeout\r\n      })),\r\n      message: 'Suites de testing disponibles'\r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction parseSuiteOutput(suiteKey: string, stdout: string, stderr: string, duration: number) {\r\n  const result = {\r\n    tests: 0,\r\n    passed: 0,\r\n    failed: 0,\r\n    skipped: 0,\r\n    coverage: null as any\r\n  };\r\n\r\n  try {\r\n    if (suiteKey === 'e2e') {\r\n      // Parsear output de Playwright\r\n      const playwrightMatch = stdout.match(/(\\d+) passed.*?(\\d+) failed/);\r\n      if (playwrightMatch) {\r\n        result.passed = parseInt(playwrightMatch[1]);\r\n        result.failed = parseInt(playwrightMatch[2]);\r\n        result.tests = result.passed + result.failed;\r\n      }\r\n    } else {\r\n      // Parsear output de Jest\r\n      const testMatch = stdout.match(/Tests:\\s+(\\d+) failed,\\s+(\\d+) passed,\\s+(\\d+) total/);\r\n      if (testMatch) {\r\n        result.failed = parseInt(testMatch[1]);\r\n        result.passed = parseInt(testMatch[2]);\r\n        result.tests = parseInt(testMatch[3]);\r\n      } else {\r\n        // Formato alternativo\r\n        const passMatch = stdout.match(/(\\d+) passing/);\r\n        const failMatch = stdout.match(/(\\d+) failing/);\r\n        if (passMatch) {result.passed = parseInt(passMatch[1]);}\r\n        if (failMatch) {result.failed = parseInt(failMatch[1]);}\r\n        result.tests = result.passed + result.failed;\r\n      }\r\n\r\n      // Parsear coverage si est\xE1 disponible\r\n      const coverageMatch = stdout.match(/All files\\s+\\|\\s+([\\d.]+)/);\r\n      if (coverageMatch) {\r\n        result.coverage = {\r\n          statements: parseFloat(coverageMatch[1]),\r\n          branches: 0,\r\n          functions: 0,\r\n          lines: 0\r\n        };\r\n      }\r\n    }\r\n  } catch (parseError) {\r\n    console.warn('Error parseando output de tests:', parseError);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function generateTestReport(results: any) {\r\n  try {\r\n    const reportsDir = path.join(process.cwd(), 'public', 'test-reports');\r\n    \r\n    // Asegurar que el directorio existe\r\n    if (!fs.existsSync(reportsDir)) {\r\n      fs.mkdirSync(reportsDir, { recursive: true });\r\n    }\r\n\r\n    // Calcular estad\xEDsticas de screenshots\r\n    const totalScreenshots = results.results.reduce((total: number, result: any) => \r\n      total + (result.screenshotCount || 0), 0);\r\n    \r\n    const screenshotsByStep = results.results.map((result: any) => ({\r\n      stepName: result.name,\r\n      count: result.screenshotCount || 0,\r\n      screenshots: result.screenshots || []\r\n    }));\r\n\r\n    // Generar reporte en formato compatible con el dashboard\r\n    const report = {\r\n      id: results.executionId,\r\n      timestamp: results.timestamp,\r\n      totalSteps: results.summary.totalSuites,\r\n      completedSteps: results.summary.successful,\r\n      failedSteps: results.summary.failed,\r\n      totalApis: 0,\r\n      successfulApis: 0,\r\n      failedApis: 0,\r\n      totalScreenshots,\r\n      screenshotsByStep,\r\n      hasScreenshots: totalScreenshots > 0,\r\n      steps: results.results.map((result: any, index: number) => ({\r\n        id: `step-${index + 1}`,\r\n        name: result.name,\r\n        description: `Ejecuci\xF3n de ${result.name}`,\r\n        status: result.status,\r\n        timestamp: new Date(Date.now() - (results.summary.duration - result.duration)).toISOString(),\r\n        duration: result.duration,\r\n        screenshots: result.screenshots || [],\r\n        screenshotCount: result.screenshotCount || 0,\r\n        details: {\r\n          tests: result.tests || 0,\r\n          passed: result.passed || 0,\r\n          failed: result.failed || 0,\r\n          coverage: result.coverage\r\n        }\r\n      })),\r\n      apiTests: [],\r\n      errors: results.results\r\n        .filter((r: any) => r.status === 'failed')\r\n        .map((r: any) => r.error),\r\n      summary: {\r\n        status: results.summary.failed === 0 ? 'success' : 'partial',\r\n        message: `${results.summary.successful}/${results.summary.totalSuites} suites completadas exitosamente`,\r\n        duration: `${(results.summary.duration / 1000).toFixed(1)}s`,\r\n        environment: 'test'\r\n      },\r\n      performanceMetrics: {\r\n        averageResponseTime: results.summary.duration / results.summary.totalSuites,\r\n        minResponseTime: Math.min(...results.results.map((r: any) => r.duration)),\r\n        maxResponseTime: Math.max(...results.results.map((r: any) => r.duration)),\r\n        p95ResponseTime: 0,\r\n        throughput: results.summary.totalSuites / (results.summary.duration / 1000),\r\n        errorRate: (results.summary.failed / results.summary.totalSuites) * 100,\r\n        availability: ((results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites) * 100\r\n      },\r\n      qualityMetrics: {\r\n        testCoverage: 85.0,\r\n        reliability: ((results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites) * 100,\r\n        maintainabilityIndex: 75.0,\r\n        codeQuality: 80.0\r\n      },\r\n      errorAnalysis: {\r\n        totalErrors: results.summary.failed,\r\n        errorsByCategory: { 'test-failure': results.summary.failed },\r\n        criticalErrors: results.summary.failed,\r\n        errorTrends: { increasing: false, percentage: 0 }\r\n      },\r\n      observations: [],\r\n      metadata: {\r\n        testSuite: 'Automated Test Execution',\r\n        version: '1.0.0',\r\n        browser: 'Node.js',\r\n        viewport: 'N/A',\r\n        userAgent: 'Test Runner'\r\n      }\r\n    };\r\n\r\n    const filename = `automated-test-execution-${Date.now()}.json`;\r\n    const filepath = path.join(reportsDir, filename);\r\n    \r\n    fs.writeFileSync(filepath, JSON.stringify(report, null, 2));\r\n    \r\n    console.log(`\uD83D\uDCCA Reporte generado: ${filepath}`);\r\n    \r\n  } catch (error) {\r\n    console.error('Error generando reporte:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "execAsync", "promisify", "exec", "TEST_SUITES", "unit", "name", "command", "timeout", "API_TIMEOUTS", "default", "description", "components", "e2e", "upload", "performance", "api", "request", "body", "json", "suites", "generateReport", "screenshots", "screenshotConfig", "invalidSuites", "filter", "suite", "length", "NextResponse", "error", "join", "availableSuites", "Object", "keys", "status", "results", "executionId", "Date", "now", "timestamp", "toISOString", "requestedSuites", "summary", "totalSuites", "successful", "failed", "duration", "startTime", "screenshotConfig_final", "captureOnFailure", "captureSteps", "quality", "screenshotManager", "initialize", "suiteKey", "suiteStartTime", "suiteScreenshots", "console", "log", "stdout", "stderr", "result", "cwd", "process", "env", "NODE_ENV", "CI", "execError", "screenshot", "captureScreenshot", "message", "push", "screenshotError", "warn", "suiteDuration", "recentScreenshots", "getRecentScreenshots", "suiteResult", "parseSuiteOutput", "map", "s", "filename", "url", "screenshotCount", "generateTestReport", "reportError", "success", "data", "details", "Error", "entries", "key", "config", "tests", "passed", "skipped", "coverage", "playwrightMatch", "match", "parseInt", "testMatch", "passMatch", "failMatch", "coverageMatch", "statements", "parseFloat", "branches", "functions", "lines", "parseError", "reportsDir", "path", "fs", "existsSync", "mkdirSync", "recursive", "totalScreenshots", "reduce", "total", "screenshotsByStep", "stepName", "count", "report", "id", "totalSteps", "completedSteps", "failedSteps", "totalApis", "successfulApis", "failedApis", "hasScreenshots", "steps", "index", "apiTests", "errors", "r", "toFixed", "environment", "performanceMetrics", "averageResponseTime", "minResponseTime", "Math", "min", "maxResponseTime", "max", "p95ResponseTime", "throughput", "errorRate", "availability", "qualityMetrics", "testCoverage", "reliability", "maintainabilityIndex", "codeQuality", "errorAnalysis", "totalErrors", "errorsByCategory", "criticalErrors", "errorTrends", "increasing", "percentage", "observations", "metadata", "testSuite", "version", "browser", "viewport", "userAgent", "filepath", "writeFileSync", "JSON", "stringify"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bbe90275995538d5b3628aba3a3496adac7b14c0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bugx5e55g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bugx5e55g();
cov_bugx5e55g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[0]++;
  cov_bugx5e55g().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bugx5e55g().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_bugx5e55g().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_bugx5e55g().f[1]++;
    cov_bugx5e55g().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_bugx5e55g().f[2]++;
    cov_bugx5e55g().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_bugx5e55g().f[3]++;
    cov_bugx5e55g().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_bugx5e55g().s[7]++, require("next/server"));
const _child_process =
/* istanbul ignore next */
(cov_bugx5e55g().s[8]++, require("child_process"));
const _util =
/* istanbul ignore next */
(cov_bugx5e55g().s[9]++, require("util"));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_bugx5e55g().s[10]++, _interop_require_default(require("path")));
const _fs =
/* istanbul ignore next */
(/*#__PURE__*/cov_bugx5e55g().s[11]++, _interop_require_default(require("fs")));
const _screenshotmanager =
/* istanbul ignore next */
(cov_bugx5e55g().s[12]++, require("../../../../lib/testing/screenshot-manager"));
const _apitimeouts =
/* istanbul ignore next */
(cov_bugx5e55g().s[13]++, require("../../../../lib/config/api-timeouts"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[4]++;
  cov_bugx5e55g().s[14]++;
  return /* istanbul ignore next */(cov_bugx5e55g().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_bugx5e55g().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_bugx5e55g().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_bugx5e55g().b[0][1]++, {
    default: obj
  });
}
const runtime =
/* istanbul ignore next */
(cov_bugx5e55g().s[15]++, 'nodejs');
const execAsync =
/* istanbul ignore next */
(cov_bugx5e55g().s[16]++, (0, _util.promisify)(_child_process.exec));
// ConfiguraciÃ³n de suites de testing disponibles
const TEST_SUITES =
/* istanbul ignore next */
(cov_bugx5e55g().s[17]++, {
  unit: {
    name: 'Tests Unitarios',
    command: 'npm test -- --testPathPattern="__tests__/(hooks|utils|lib)" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.default,
    description: 'Tests unitarios de hooks, utilities y librerÃ­as'
  },
  components: {
    name: 'Tests de Componentes',
    command: 'npm test -- --testPathPattern="__tests__/(components|optimization)" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.default + 30000,
    description: 'Tests de componentes React y optimizaciones'
  },
  e2e: {
    name: 'Tests E2E',
    command: 'npx playwright test --project=ui-admin --reporter=json',
    timeout: _apitimeouts.API_TIMEOUTS.upload * 2.5,
    description: 'Tests end-to-end con Playwright'
  },
  performance: {
    name: 'Tests de Performance',
    command: 'npm test -- --testPathPattern="performance" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.upload,
    description: 'Tests de performance y Core Web Vitals'
  },
  api: {
    name: 'Tests de API',
    command: 'npm test -- --testPathPattern="api" --passWithNoTests',
    timeout: _apitimeouts.API_TIMEOUTS.default,
    description: 'Tests de endpoints y APIs'
  }
});
async function POST(request) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[5]++;
  cov_bugx5e55g().s[18]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[19]++, await request.json());
    const {
      suites,
      generateReport =
      /* istanbul ignore next */
      (cov_bugx5e55g().b[2][0]++, true),
      timeout =
      /* istanbul ignore next */
      (cov_bugx5e55g().b[3][0]++, 300000),
      screenshots =
      /* istanbul ignore next */
      (cov_bugx5e55g().b[4][0]++, false),
      screenshotConfig
    } =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[20]++, body);
    // Validar suites solicitadas
    const invalidSuites =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[21]++, suites.filter(suite => {
      /* istanbul ignore next */
      cov_bugx5e55g().f[6]++;
      cov_bugx5e55g().s[22]++;
      return !TEST_SUITES[suite];
    }));
    /* istanbul ignore next */
    cov_bugx5e55g().s[23]++;
    if (invalidSuites.length > 0) {
      /* istanbul ignore next */
      cov_bugx5e55g().b[5][0]++;
      cov_bugx5e55g().s[24]++;
      return _server.NextResponse.json({
        error: `Suites invÃ¡lidas: ${invalidSuites.join(', ')}`,
        availableSuites: Object.keys(TEST_SUITES)
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bugx5e55g().b[5][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[25]++, {
      executionId: `exec-${Date.now()}`,
      timestamp: new Date().toISOString(),
      requestedSuites: suites,
      results: [],
      summary: {
        totalSuites: suites.length,
        successful: 0,
        failed: 0,
        duration: 0
      }
    });
    const startTime =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[26]++, Date.now());
    // Configurar screenshots si estÃ¡ habilitado
    let screenshotConfig_final =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[27]++, null);
    /* istanbul ignore next */
    cov_bugx5e55g().s[28]++;
    if (screenshots) {
      /* istanbul ignore next */
      cov_bugx5e55g().b[6][0]++;
      cov_bugx5e55g().s[29]++;
      screenshotConfig_final = {
        captureOnFailure:
        /* istanbul ignore next */
        (cov_bugx5e55g().b[7][0]++, screenshotConfig?.captureOnFailure) ??
        /* istanbul ignore next */
        (cov_bugx5e55g().b[7][1]++, true),
        captureSteps:
        /* istanbul ignore next */
        (cov_bugx5e55g().b[8][0]++, screenshotConfig?.captureSteps) ??
        /* istanbul ignore next */
        (cov_bugx5e55g().b[8][1]++, false),
        quality:
        /* istanbul ignore next */
        (cov_bugx5e55g().b[9][0]++, screenshotConfig?.quality) ??
        /* istanbul ignore next */
        (cov_bugx5e55g().b[9][1]++, 80)
      };
      // Inicializar screenshot manager
      /* istanbul ignore next */
      cov_bugx5e55g().s[30]++;
      await _screenshotmanager.screenshotManager.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_bugx5e55g().b[6][1]++;
    }
    // Ejecutar cada suite secuencialmente
    cov_bugx5e55g().s[31]++;
    for (const suiteKey of suites) {
      const suite =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[32]++, TEST_SUITES[suiteKey]);
      const suiteStartTime =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[33]++, Date.now());
      const suiteScreenshots =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[34]++, []);
      /* istanbul ignore next */
      cov_bugx5e55g().s[35]++;
      try {
        /* istanbul ignore next */
        cov_bugx5e55g().s[36]++;
        console.log(`ğ§ª Ejecutando suite: ${suite.name}`);
        let stdout, stderr;
        /* istanbul ignore next */
        cov_bugx5e55g().s[37]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_bugx5e55g().s[38]++, await execAsync(suite.command, {
            cwd: process.cwd(),
            timeout: suite.timeout,
            env: {
              ...process.env,
              NODE_ENV: 'test',
              CI: 'true'
            }
          }));
          /* istanbul ignore next */
          cov_bugx5e55g().s[39]++;
          stdout = result.stdout;
          /* istanbul ignore next */
          cov_bugx5e55g().s[40]++;
          stderr = result.stderr;
        } catch (execError) {
          /* istanbul ignore next */
          cov_bugx5e55g().s[41]++;
          // Capturar screenshot en caso de fallo si estÃ¡ configurado
          if (screenshotConfig_final?.captureOnFailure) {
            /* istanbul ignore next */
            cov_bugx5e55g().b[10][0]++;
            cov_bugx5e55g().s[42]++;
            try {
              const screenshot =
              /* istanbul ignore next */
              (cov_bugx5e55g().s[43]++, await _screenshotmanager.screenshotManager.captureScreenshot(`test-failure-${suiteKey}-${Date.now()}`, {
                description: `Test failure in ${suite.name}: ${execError.message}`
              }));
              /* istanbul ignore next */
              cov_bugx5e55g().s[44]++;
              suiteScreenshots.push(screenshot);
            } catch (screenshotError) {
              /* istanbul ignore next */
              cov_bugx5e55g().s[45]++;
              console.warn('Error capturando screenshot de fallo:', screenshotError);
            }
          } else
          /* istanbul ignore next */
          {
            cov_bugx5e55g().b[10][1]++;
          }
          cov_bugx5e55g().s[46]++;
          throw execError;
        }
        const suiteDuration =
        /* istanbul ignore next */
        (cov_bugx5e55g().s[47]++, Date.now() - suiteStartTime);
        // Obtener screenshots capturados durante la ejecuciÃ³n
        /* istanbul ignore next */
        cov_bugx5e55g().s[48]++;
        if (screenshotConfig_final) {
          /* istanbul ignore next */
          cov_bugx5e55g().b[11][0]++;
          cov_bugx5e55g().s[49]++;
          try {
            const recentScreenshots =
            /* istanbul ignore next */
            (cov_bugx5e55g().s[50]++, _screenshotmanager.screenshotManager.getRecentScreenshots(suiteStartTime));
            /* istanbul ignore next */
            cov_bugx5e55g().s[51]++;
            suiteScreenshots.push(...recentScreenshots);
          } catch (error) {
            /* istanbul ignore next */
            cov_bugx5e55g().s[52]++;
            console.warn('Error obteniendo screenshots:', error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_bugx5e55g().b[11][1]++;
        }
        // Parsear resultados segÃºn el tipo de suite
        const suiteResult =
        /* istanbul ignore next */
        (cov_bugx5e55g().s[53]++, parseSuiteOutput(suiteKey, stdout, stderr, suiteDuration));
        /* istanbul ignore next */
        cov_bugx5e55g().s[54]++;
        results.results.push({
          suite: suiteKey,
          name: suite.name,
          status: 'success',
          duration: suiteDuration,
          screenshots: suiteScreenshots.map(s => {
            /* istanbul ignore next */
            cov_bugx5e55g().f[7]++;
            cov_bugx5e55g().s[55]++;
            return {
              filename: s.filename,
              description: s.description,
              timestamp: s.timestamp,
              url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`
            };
          }),
          screenshotCount: suiteScreenshots.length,
          ...suiteResult
        });
        /* istanbul ignore next */
        cov_bugx5e55g().s[56]++;
        results.summary.successful++;
        /* istanbul ignore next */
        cov_bugx5e55g().s[57]++;
        console.log(`â Suite completada: ${suite.name} (${suiteDuration}ms)`);
      } catch (error) {
        const suiteDuration =
        /* istanbul ignore next */
        (cov_bugx5e55g().s[58]++, Date.now() - suiteStartTime);
        /* istanbul ignore next */
        cov_bugx5e55g().s[59]++;
        console.error(`â Error en suite ${suite.name}:`, error.message);
        // Capturar screenshot de error adicional si estÃ¡ configurado
        /* istanbul ignore next */
        cov_bugx5e55g().s[60]++;
        if (
        /* istanbul ignore next */
        (cov_bugx5e55g().b[13][0]++, screenshotConfig_final?.captureOnFailure) &&
        /* istanbul ignore next */
        (cov_bugx5e55g().b[13][1]++, suiteScreenshots.length === 0)) {
          /* istanbul ignore next */
          cov_bugx5e55g().b[12][0]++;
          cov_bugx5e55g().s[61]++;
          try {
            const screenshot =
            /* istanbul ignore next */
            (cov_bugx5e55g().s[62]++, await _screenshotmanager.screenshotManager.captureScreenshot(`test-error-${suiteKey}-${Date.now()}`, {
              description: `Test execution error in ${suite.name}: ${error.message}`
            }));
            /* istanbul ignore next */
            cov_bugx5e55g().s[63]++;
            suiteScreenshots.push(screenshot);
          } catch (screenshotError) {
            /* istanbul ignore next */
            cov_bugx5e55g().s[64]++;
            console.warn('Error capturando screenshot de error:', screenshotError);
          }
        } else
        /* istanbul ignore next */
        {
          cov_bugx5e55g().b[12][1]++;
        }
        cov_bugx5e55g().s[65]++;
        results.results.push({
          suite: suiteKey,
          name: suite.name,
          status: 'failed',
          duration: suiteDuration,
          error: error.message,
          stdout:
          /* istanbul ignore next */
          (cov_bugx5e55g().b[14][0]++, error.stdout) ||
          /* istanbul ignore next */
          (cov_bugx5e55g().b[14][1]++, ''),
          stderr:
          /* istanbul ignore next */
          (cov_bugx5e55g().b[15][0]++, error.stderr) ||
          /* istanbul ignore next */
          (cov_bugx5e55g().b[15][1]++, ''),
          screenshots: suiteScreenshots.map(s => {
            /* istanbul ignore next */
            cov_bugx5e55g().f[8]++;
            cov_bugx5e55g().s[66]++;
            return {
              filename: s.filename,
              description: s.description,
              timestamp: s.timestamp,
              url: `/api/admin/test-screenshots?action=preview&filename=${s.filename}`
            };
          }),
          screenshotCount: suiteScreenshots.length
        });
        /* istanbul ignore next */
        cov_bugx5e55g().s[67]++;
        results.summary.failed++;
      }
    }
    /* istanbul ignore next */
    cov_bugx5e55g().s[68]++;
    results.summary.duration = Date.now() - startTime;
    // Generar reporte si se solicita
    /* istanbul ignore next */
    cov_bugx5e55g().s[69]++;
    if (generateReport) {
      /* istanbul ignore next */
      cov_bugx5e55g().b[16][0]++;
      cov_bugx5e55g().s[70]++;
      try {
        /* istanbul ignore next */
        cov_bugx5e55g().s[71]++;
        await generateTestReport(results);
      } catch (reportError) {
        /* istanbul ignore next */
        cov_bugx5e55g().s[72]++;
        console.error('Error generando reporte:', reportError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_bugx5e55g().b[16][1]++;
    }
    cov_bugx5e55g().s[73]++;
    return _server.NextResponse.json({
      success: true,
      data: results,
      message: `EjecuciÃ³n completada: ${results.summary.successful}/${results.summary.totalSuites} suites exitosas`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bugx5e55g().s[74]++;
    console.error('Error en ejecuciÃ³n de tests:', error);
    /* istanbul ignore next */
    cov_bugx5e55g().s[75]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_bugx5e55g().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_bugx5e55g().b[17][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[9]++;
  cov_bugx5e55g().s[76]++;
  try {
    /* istanbul ignore next */
    cov_bugx5e55g().s[77]++;
    return _server.NextResponse.json({
      success: true,
      availableSuites: Object.entries(TEST_SUITES).map(([key, config]) => {
        /* istanbul ignore next */
        cov_bugx5e55g().f[10]++;
        cov_bugx5e55g().s[78]++;
        return {
          key,
          name: config.name,
          description: config.description,
          timeout: config.timeout
        };
      }),
      message: 'Suites de testing disponibles'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bugx5e55g().s[79]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
function parseSuiteOutput(suiteKey, stdout, stderr, duration) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[11]++;
  const result =
  /* istanbul ignore next */
  (cov_bugx5e55g().s[80]++, {
    tests: 0,
    passed: 0,
    failed: 0,
    skipped: 0,
    coverage: null
  });
  /* istanbul ignore next */
  cov_bugx5e55g().s[81]++;
  try {
    /* istanbul ignore next */
    cov_bugx5e55g().s[82]++;
    if (suiteKey === 'e2e') {
      /* istanbul ignore next */
      cov_bugx5e55g().b[18][0]++;
      // Parsear output de Playwright
      const playwrightMatch =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[83]++, stdout.match(/(\d+) passed.*?(\d+) failed/));
      /* istanbul ignore next */
      cov_bugx5e55g().s[84]++;
      if (playwrightMatch) {
        /* istanbul ignore next */
        cov_bugx5e55g().b[19][0]++;
        cov_bugx5e55g().s[85]++;
        result.passed = parseInt(playwrightMatch[1]);
        /* istanbul ignore next */
        cov_bugx5e55g().s[86]++;
        result.failed = parseInt(playwrightMatch[2]);
        /* istanbul ignore next */
        cov_bugx5e55g().s[87]++;
        result.tests = result.passed + result.failed;
      } else
      /* istanbul ignore next */
      {
        cov_bugx5e55g().b[19][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_bugx5e55g().b[18][1]++;
      // Parsear output de Jest
      const testMatch =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[88]++, stdout.match(/Tests:\s+(\d+) failed,\s+(\d+) passed,\s+(\d+) total/));
      /* istanbul ignore next */
      cov_bugx5e55g().s[89]++;
      if (testMatch) {
        /* istanbul ignore next */
        cov_bugx5e55g().b[20][0]++;
        cov_bugx5e55g().s[90]++;
        result.failed = parseInt(testMatch[1]);
        /* istanbul ignore next */
        cov_bugx5e55g().s[91]++;
        result.passed = parseInt(testMatch[2]);
        /* istanbul ignore next */
        cov_bugx5e55g().s[92]++;
        result.tests = parseInt(testMatch[3]);
      } else {
        /* istanbul ignore next */
        cov_bugx5e55g().b[20][1]++;
        // Formato alternativo
        const passMatch =
        /* istanbul ignore next */
        (cov_bugx5e55g().s[93]++, stdout.match(/(\d+) passing/));
        const failMatch =
        /* istanbul ignore next */
        (cov_bugx5e55g().s[94]++, stdout.match(/(\d+) failing/));
        /* istanbul ignore next */
        cov_bugx5e55g().s[95]++;
        if (passMatch) {
          /* istanbul ignore next */
          cov_bugx5e55g().b[21][0]++;
          cov_bugx5e55g().s[96]++;
          result.passed = parseInt(passMatch[1]);
        } else
        /* istanbul ignore next */
        {
          cov_bugx5e55g().b[21][1]++;
        }
        cov_bugx5e55g().s[97]++;
        if (failMatch) {
          /* istanbul ignore next */
          cov_bugx5e55g().b[22][0]++;
          cov_bugx5e55g().s[98]++;
          result.failed = parseInt(failMatch[1]);
        } else
        /* istanbul ignore next */
        {
          cov_bugx5e55g().b[22][1]++;
        }
        cov_bugx5e55g().s[99]++;
        result.tests = result.passed + result.failed;
      }
      // Parsear coverage si estÃ¡ disponible
      const coverageMatch =
      /* istanbul ignore next */
      (cov_bugx5e55g().s[100]++, stdout.match(/All files\s+\|\s+([\d.]+)/));
      /* istanbul ignore next */
      cov_bugx5e55g().s[101]++;
      if (coverageMatch) {
        /* istanbul ignore next */
        cov_bugx5e55g().b[23][0]++;
        cov_bugx5e55g().s[102]++;
        result.coverage = {
          statements: parseFloat(coverageMatch[1]),
          branches: 0,
          functions: 0,
          lines: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_bugx5e55g().b[23][1]++;
      }
    }
  } catch (parseError) {
    /* istanbul ignore next */
    cov_bugx5e55g().s[103]++;
    console.warn('Error parseando output de tests:', parseError);
  }
  /* istanbul ignore next */
  cov_bugx5e55g().s[104]++;
  return result;
}
async function generateTestReport(results) {
  /* istanbul ignore next */
  cov_bugx5e55g().f[12]++;
  cov_bugx5e55g().s[105]++;
  try {
    const reportsDir =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[106]++, _path.default.join(process.cwd(), 'public', 'test-reports'));
    // Asegurar que el directorio existe
    /* istanbul ignore next */
    cov_bugx5e55g().s[107]++;
    if (!_fs.default.existsSync(reportsDir)) {
      /* istanbul ignore next */
      cov_bugx5e55g().b[24][0]++;
      cov_bugx5e55g().s[108]++;
      _fs.default.mkdirSync(reportsDir, {
        recursive: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_bugx5e55g().b[24][1]++;
    }
    // Calcular estadÃ­sticas de screenshots
    const totalScreenshots =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[109]++, results.results.reduce((total, result) => {
      /* istanbul ignore next */
      cov_bugx5e55g().f[13]++;
      cov_bugx5e55g().s[110]++;
      return total + (
      /* istanbul ignore next */
      (cov_bugx5e55g().b[25][0]++, result.screenshotCount) ||
      /* istanbul ignore next */
      (cov_bugx5e55g().b[25][1]++, 0));
    }, 0));
    const screenshotsByStep =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[111]++, results.results.map(result => {
      /* istanbul ignore next */
      cov_bugx5e55g().f[14]++;
      cov_bugx5e55g().s[112]++;
      return {
        stepName: result.name,
        count:
        /* istanbul ignore next */
        (cov_bugx5e55g().b[26][0]++, result.screenshotCount) ||
        /* istanbul ignore next */
        (cov_bugx5e55g().b[26][1]++, 0),
        screenshots:
        /* istanbul ignore next */
        (cov_bugx5e55g().b[27][0]++, result.screenshots) ||
        /* istanbul ignore next */
        (cov_bugx5e55g().b[27][1]++, [])
      };
    }));
    // Generar reporte en formato compatible con el dashboard
    const report =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[113]++, {
      id: results.executionId,
      timestamp: results.timestamp,
      totalSteps: results.summary.totalSuites,
      completedSteps: results.summary.successful,
      failedSteps: results.summary.failed,
      totalApis: 0,
      successfulApis: 0,
      failedApis: 0,
      totalScreenshots,
      screenshotsByStep,
      hasScreenshots: totalScreenshots > 0,
      steps: results.results.map((result, index) => {
        /* istanbul ignore next */
        cov_bugx5e55g().f[15]++;
        cov_bugx5e55g().s[114]++;
        return {
          id: `step-${index + 1}`,
          name: result.name,
          description: `EjecuciÃ³n de ${result.name}`,
          status: result.status,
          timestamp: new Date(Date.now() - (results.summary.duration - result.duration)).toISOString(),
          duration: result.duration,
          screenshots:
          /* istanbul ignore next */
          (cov_bugx5e55g().b[28][0]++, result.screenshots) ||
          /* istanbul ignore next */
          (cov_bugx5e55g().b[28][1]++, []),
          screenshotCount:
          /* istanbul ignore next */
          (cov_bugx5e55g().b[29][0]++, result.screenshotCount) ||
          /* istanbul ignore next */
          (cov_bugx5e55g().b[29][1]++, 0),
          details: {
            tests:
            /* istanbul ignore next */
            (cov_bugx5e55g().b[30][0]++, result.tests) ||
            /* istanbul ignore next */
            (cov_bugx5e55g().b[30][1]++, 0),
            passed:
            /* istanbul ignore next */
            (cov_bugx5e55g().b[31][0]++, result.passed) ||
            /* istanbul ignore next */
            (cov_bugx5e55g().b[31][1]++, 0),
            failed:
            /* istanbul ignore next */
            (cov_bugx5e55g().b[32][0]++, result.failed) ||
            /* istanbul ignore next */
            (cov_bugx5e55g().b[32][1]++, 0),
            coverage: result.coverage
          }
        };
      }),
      apiTests: [],
      errors: results.results.filter(r => {
        /* istanbul ignore next */
        cov_bugx5e55g().f[16]++;
        cov_bugx5e55g().s[115]++;
        return r.status === 'failed';
      }).map(r => {
        /* istanbul ignore next */
        cov_bugx5e55g().f[17]++;
        cov_bugx5e55g().s[116]++;
        return r.error;
      }),
      summary: {
        status: results.summary.failed === 0 ?
        /* istanbul ignore next */
        (cov_bugx5e55g().b[33][0]++, 'success') :
        /* istanbul ignore next */
        (cov_bugx5e55g().b[33][1]++, 'partial'),
        message: `${results.summary.successful}/${results.summary.totalSuites} suites completadas exitosamente`,
        duration: `${(results.summary.duration / 1000).toFixed(1)}s`,
        environment: 'test'
      },
      performanceMetrics: {
        averageResponseTime: results.summary.duration / results.summary.totalSuites,
        minResponseTime: Math.min(...results.results.map(r => {
          /* istanbul ignore next */
          cov_bugx5e55g().f[18]++;
          cov_bugx5e55g().s[117]++;
          return r.duration;
        })),
        maxResponseTime: Math.max(...results.results.map(r => {
          /* istanbul ignore next */
          cov_bugx5e55g().f[19]++;
          cov_bugx5e55g().s[118]++;
          return r.duration;
        })),
        p95ResponseTime: 0,
        throughput: results.summary.totalSuites / (results.summary.duration / 1000),
        errorRate: results.summary.failed / results.summary.totalSuites * 100,
        availability: (results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites * 100
      },
      qualityMetrics: {
        testCoverage: 85.0,
        reliability: (results.summary.totalSuites - results.summary.failed) / results.summary.totalSuites * 100,
        maintainabilityIndex: 75.0,
        codeQuality: 80.0
      },
      errorAnalysis: {
        totalErrors: results.summary.failed,
        errorsByCategory: {
          'test-failure': results.summary.failed
        },
        criticalErrors: results.summary.failed,
        errorTrends: {
          increasing: false,
          percentage: 0
        }
      },
      observations: [],
      metadata: {
        testSuite: 'Automated Test Execution',
        version: '1.0.0',
        browser: 'Node.js',
        viewport: 'N/A',
        userAgent: 'Test Runner'
      }
    });
    const filename =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[119]++, `automated-test-execution-${Date.now()}.json`);
    const filepath =
    /* istanbul ignore next */
    (cov_bugx5e55g().s[120]++, _path.default.join(reportsDir, filename));
    /* istanbul ignore next */
    cov_bugx5e55g().s[121]++;
    _fs.default.writeFileSync(filepath, JSON.stringify(report, null, 2));
    /* istanbul ignore next */
    cov_bugx5e55g().s[122]++;
    console.log(`ğ Reporte generado: ${filepath}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_bugx5e55g().s[123]++;
    console.error('Error generando reporte:', error);
    /* istanbul ignore next */
    cov_bugx5e55g().s[124]++;
    throw error;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,