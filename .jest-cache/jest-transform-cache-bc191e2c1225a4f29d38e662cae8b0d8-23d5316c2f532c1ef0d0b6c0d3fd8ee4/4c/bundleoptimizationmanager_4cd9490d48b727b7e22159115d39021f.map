{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts"],"sourcesContent":["// ===================================\n// BUNDLE OPTIMIZATION MANAGER\n// ===================================\n// Sistema avanzado de optimización de bundles para Pinteya E-commerce\n\nimport { promises as fs } from 'fs'\nimport path from 'path'\n\n// ===================================\n// INTERFACES Y TIPOS\n// ===================================\n\nexport interface BundleAnalysis {\n  totalSize: number\n  gzippedSize: number\n  chunks: ChunkInfo[]\n  dependencies: DependencyInfo[]\n  recommendations: OptimizationRecommendation[]\n  performance: PerformanceMetrics\n}\n\nexport interface ChunkInfo {\n  name: string\n  size: number\n  gzippedSize: number\n  modules: ModuleInfo[]\n  type: 'vendor' | 'app' | 'shared' | 'dynamic'\n  loadPriority: 'critical' | 'high' | 'medium' | 'low'\n}\n\nexport interface ModuleInfo {\n  name: string\n  size: number\n  path: string\n  imports: string[]\n  exports: string[]\n  isTreeShakeable: boolean\n}\n\nexport interface DependencyInfo {\n  name: string\n  version: string\n  size: number\n  usage: 'critical' | 'important' | 'optional' | 'unused'\n  alternatives?: string[]\n  optimizationPotential: number\n}\n\nexport interface OptimizationRecommendation {\n  type:\n    | 'code-splitting'\n    | 'tree-shaking'\n    | 'dependency-replacement'\n    | 'lazy-loading'\n    | 'compression'\n  priority: 'critical' | 'high' | 'medium' | 'low'\n  description: string\n  estimatedSavings: number\n  implementation: string\n  effort: 'low' | 'medium' | 'high'\n}\n\nexport interface PerformanceMetrics {\n  firstLoadJS: number\n  totalJS: number\n  css: number\n  images: number\n  fonts: number\n  other: number\n  score: number\n  grade: 'A' | 'B' | 'C' | 'D' | 'F'\n}\n\nexport interface BundleOptimizationConfig {\n  maxChunkSize: number\n  maxFirstLoadSize: number\n  enableTreeShaking: boolean\n  enableCodeSplitting: boolean\n  enableCompression: boolean\n  enableLazyLoading: boolean\n  performanceBudgets: PerformanceBudgets\n}\n\nexport interface PerformanceBudgets {\n  maxBundleSize: number\n  maxFirstLoadJS: number\n  maxCSS: number\n  maxImages: number\n  warningThreshold: number\n  errorThreshold: number\n}\n\n// ===================================\n// BUNDLE OPTIMIZATION MANAGER\n// ===================================\n\nexport class BundleOptimizationManager {\n  private static instance: BundleOptimizationManager\n  private config: BundleOptimizationConfig\n  private analysisCache: Map<string, BundleAnalysis> = new Map()\n\n  private constructor() {\n    this.config = this.getDefaultConfig()\n  }\n\n  public static getInstance(): BundleOptimizationManager {\n    if (!BundleOptimizationManager.instance) {\n      BundleOptimizationManager.instance = new BundleOptimizationManager()\n    }\n    return BundleOptimizationManager.instance\n  }\n\n  // ===================================\n  // CONFIGURACIÓN\n  // ===================================\n\n  private getDefaultConfig(): BundleOptimizationConfig {\n    return {\n      maxChunkSize: 250 * 1024, // 250KB\n      maxFirstLoadSize: 128 * 1024, // 128KB\n      enableTreeShaking: true,\n      enableCodeSplitting: true,\n      enableCompression: true,\n      enableLazyLoading: true,\n      performanceBudgets: {\n        maxBundleSize: 500 * 1024, // 500KB\n        maxFirstLoadJS: 128 * 1024, // 128KB\n        maxCSS: 50 * 1024, // 50KB\n        maxImages: 200 * 1024, // 200KB\n        warningThreshold: 0.8, // 80%\n        errorThreshold: 1.0, // 100%\n      },\n    }\n  }\n\n  public updateConfig(newConfig: Partial<BundleOptimizationConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n  }\n\n  // ===================================\n  // ANÁLISIS DE BUNDLES\n  // ===================================\n\n  public async analyzeBundles(buildPath: string = '.next'): Promise<BundleAnalysis> {\n    const cacheKey = `${buildPath}-${Date.now()}`\n\n    if (this.analysisCache.has(cacheKey)) {\n      return this.analysisCache.get(cacheKey)!\n    }\n\n    try {\n      const analysis = await this.performBundleAnalysis(buildPath)\n      this.analysisCache.set(cacheKey, analysis)\n\n      // Limpiar cache antiguo\n      if (this.analysisCache.size > 5) {\n        const firstKey = this.analysisCache.keys().next().value\n        this.analysisCache.delete(firstKey)\n      }\n\n      return analysis\n    } catch (error) {\n      console.error('Error analyzing bundles:', error)\n      throw new Error(\n        `Bundle analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      )\n    }\n  }\n\n  private async performBundleAnalysis(buildPath: string): Promise<BundleAnalysis> {\n    const staticPath = path.join(buildPath, 'static')\n    const chunks = await this.analyzeChunks(staticPath)\n    const dependencies = await this.analyzeDependencies()\n    const performance = this.calculatePerformanceMetrics(chunks)\n    const recommendations = this.generateRecommendations(chunks, dependencies, performance)\n\n    const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0)\n    const gzippedSize = chunks.reduce((sum, chunk) => sum + chunk.gzippedSize, 0)\n\n    return {\n      totalSize,\n      gzippedSize,\n      chunks,\n      dependencies,\n      recommendations,\n      performance,\n    }\n  }\n\n  private async analyzeChunks(staticPath: string): Promise<ChunkInfo[]> {\n    const chunks: ChunkInfo[] = []\n\n    try {\n      // Simular análisis de chunks (en implementación real usaríamos webpack-bundle-analyzer)\n      const mockChunks = [\n        {\n          name: 'main',\n          size: 85 * 1024,\n          gzippedSize: 28 * 1024,\n          type: 'app' as const,\n          loadPriority: 'critical' as const,\n        },\n        {\n          name: 'vendors',\n          size: 180 * 1024,\n          gzippedSize: 65 * 1024,\n          type: 'vendor' as const,\n          loadPriority: 'critical' as const,\n        },\n        {\n          name: 'admin',\n          size: 120 * 1024,\n          gzippedSize: 42 * 1024,\n          type: 'dynamic' as const,\n          loadPriority: 'medium' as const,\n        },\n      ]\n\n      for (const mockChunk of mockChunks) {\n        chunks.push({\n          ...mockChunk,\n          modules: await this.analyzeChunkModules(mockChunk.name),\n        })\n      }\n    } catch (error) {\n      console.warn('Could not analyze chunks from filesystem, using mock data')\n    }\n\n    return chunks\n  }\n\n  private async analyzeChunkModules(chunkName: string): Promise<ModuleInfo[]> {\n    // Simular análisis de módulos\n    return [\n      {\n        name: `${chunkName}-module-1`,\n        size: 15 * 1024,\n        path: `src/components/${chunkName}`,\n        imports: ['react', 'next'],\n        exports: ['default'],\n        isTreeShakeable: true,\n      },\n    ]\n  }\n\n  private async analyzeDependencies(): Promise<DependencyInfo[]> {\n    try {\n      const packageJsonPath = path.join(process.cwd(), 'package.json')\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'))\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies }\n\n      return Object.entries(dependencies).map(([name, version]) => ({\n        name,\n        version: version as string,\n        size: this.estimateDependencySize(name),\n        usage: this.analyzeDependencyUsage(name),\n        alternatives: this.suggestAlternatives(name),\n        optimizationPotential: this.calculateOptimizationPotential(name),\n      }))\n    } catch (error) {\n      console.warn('Could not analyze dependencies:', error)\n      return []\n    }\n  }\n\n  private estimateDependencySize(name: string): number {\n    // Estimaciones basadas en dependencias comunes\n    const sizeMap: Record<string, number> = {\n      react: 45 * 1024,\n      'react-dom': 130 * 1024,\n      next: 200 * 1024,\n      'framer-motion': 180 * 1024,\n      recharts: 250 * 1024,\n      'maplibre-gl': 400 * 1024,\n      'lodash-es': 70 * 1024,\n      '@radix-ui/react-dialog': 25 * 1024,\n    }\n\n    return sizeMap[name] || 20 * 1024 // Default 20KB\n  }\n\n  private analyzeDependencyUsage(name: string): 'critical' | 'important' | 'optional' | 'unused' {\n    const criticalDeps = ['react', 'react-dom', 'next']\n    const importantDeps = ['@supabase/supabase-js', 'zod', 'next-auth']\n\n    if (criticalDeps.includes(name)) {\n      return 'critical'\n    }\n    if (importantDeps.includes(name)) {\n      return 'important'\n    }\n    return 'optional'\n  }\n\n  private suggestAlternatives(name: string): string[] {\n    const alternatives: Record<string, string[]> = {\n      'lodash-es': ['ramda', 'native-methods'],\n      moment: ['date-fns', 'dayjs'],\n      recharts: ['chart.js', 'victory'],\n      'framer-motion': ['react-spring', 'lottie-react'],\n    }\n\n    return alternatives[name] || []\n  }\n\n  private calculateOptimizationPotential(name: string): number {\n    // Porcentaje de optimización potencial\n    const optimizationMap: Record<string, number> = {\n      'lodash-es': 60, // Tree shaking potential\n      'framer-motion': 40, // Code splitting potential\n      recharts: 50, // Lazy loading potential\n      'maplibre-gl': 30, // Compression potential\n    }\n\n    return optimizationMap[name] || 10\n  }\n\n  private calculatePerformanceMetrics(chunks: ChunkInfo[]): PerformanceMetrics {\n    const firstLoadJS = chunks\n      .filter(chunk => chunk.loadPriority === 'critical')\n      .reduce((sum, chunk) => sum + chunk.size, 0)\n\n    const totalJS = chunks.reduce((sum, chunk) => sum + chunk.size, 0)\n\n    // Calcular score basado en performance budgets\n    const score = this.calculatePerformanceScore(firstLoadJS, totalJS)\n    const grade = this.getPerformanceGrade(score)\n\n    return {\n      firstLoadJS,\n      totalJS,\n      css: 25 * 1024, // Estimado\n      images: 150 * 1024, // Estimado\n      fonts: 30 * 1024, // Estimado\n      other: 20 * 1024, // Estimado\n      score,\n      grade,\n    }\n  }\n\n  private calculatePerformanceScore(firstLoadJS: number, totalJS: number): number {\n    const { performanceBudgets } = this.config\n\n    const firstLoadRatio = firstLoadJS / performanceBudgets.maxFirstLoadJS\n    const totalRatio = totalJS / performanceBudgets.maxBundleSize\n\n    const penalty = Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0)\n    return Math.max(100 - penalty * 50, 0)\n  }\n\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\n    if (score >= 90) {\n      return 'A'\n    }\n    if (score >= 80) {\n      return 'B'\n    }\n    if (score >= 70) {\n      return 'C'\n    }\n    if (score >= 60) {\n      return 'D'\n    }\n    return 'F'\n  }\n\n  private generateRecommendations(\n    chunks: ChunkInfo[],\n    dependencies: DependencyInfo[],\n    performance: PerformanceMetrics\n  ): OptimizationRecommendation[] {\n    const recommendations: OptimizationRecommendation[] = []\n\n    // Recomendaciones basadas en tamaño de chunks\n    const largeChunks = chunks.filter(chunk => chunk.size > this.config.maxChunkSize)\n    for (const chunk of largeChunks) {\n      recommendations.push({\n        type: 'code-splitting',\n        priority: 'high',\n        description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,\n        estimatedSavings: chunk.size * 0.3,\n        implementation: `Dividir ${chunk.name} en chunks más pequeños usando dynamic imports`,\n        effort: 'medium',\n      })\n    }\n\n    // Recomendaciones basadas en dependencias\n    const heavyDeps = dependencies.filter(\n      dep => dep.size > 100 * 1024 && dep.optimizationPotential > 30\n    )\n    for (const dep of heavyDeps) {\n      recommendations.push({\n        type: 'dependency-replacement',\n        priority: 'medium',\n        description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimización`,\n        estimatedSavings: dep.size * (dep.optimizationPotential / 100),\n        implementation: `Considerar alternativas: ${dep.alternatives?.join(', ') || 'tree shaking'}`,\n        effort: 'high',\n      })\n    }\n\n    // Recomendaciones basadas en performance\n    if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {\n      recommendations.push({\n        type: 'lazy-loading',\n        priority: 'critical',\n        description: 'First Load JS excede el presupuesto de performance',\n        estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,\n        implementation: 'Implementar lazy loading para componentes no críticos',\n        effort: 'low',\n      })\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 }\n      return priorityOrder[b.priority] - priorityOrder[a.priority]\n    })\n  }\n\n  // ===================================\n  // OPTIMIZACIONES AUTOMÁTICAS\n  // ===================================\n\n  public async applyOptimizations(recommendations: OptimizationRecommendation[]): Promise<void> {\n    for (const recommendation of recommendations) {\n      if (recommendation.effort === 'low') {\n        await this.applyLowEffortOptimization(recommendation)\n      }\n    }\n  }\n\n  private async applyLowEffortOptimization(\n    recommendation: OptimizationRecommendation\n  ): Promise<void> {\n    switch (recommendation.type) {\n      case 'lazy-loading':\n        await this.implementLazyLoading()\n        break\n      case 'compression':\n        await this.enableCompression()\n        break\n      default:\n        console.log(`Optimization ${recommendation.type} requires manual implementation`)\n    }\n  }\n\n  private async implementLazyLoading(): Promise<void> {\n    // Implementar lazy loading automático para componentes pesados\n    console.log('Implementing automatic lazy loading...')\n  }\n\n  private async enableCompression(): Promise<void> {\n    // Habilitar compresión automática\n    console.log('Enabling compression...')\n  }\n\n  // ===================================\n  // REPORTES Y MÉTRICAS\n  // ===================================\n\n  public generateOptimizationReport(analysis: BundleAnalysis): string {\n    const report = `\n# Bundle Optimization Report\n\n## Performance Metrics\n- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})\n- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB\n- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB\n- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB\n- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB\n\n## Chunks Analysis\n${analysis.chunks\n  .map(\n    chunk => `\n- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)\n`\n  )\n  .join('')}\n\n## Top Recommendations\n${analysis.recommendations\n  .slice(0, 5)\n  .map(\n    (rec, i) => `\n${i + 1}. **${rec.type}** (${rec.priority} priority)\n   - ${rec.description}\n   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB\n   - Implementation: ${rec.implementation}\n`\n  )\n  .join('')}\n\n## Dependencies Analysis\n- **Total Dependencies**: ${analysis.dependencies.length}\n- **Heavy Dependencies**: ${analysis.dependencies.filter(d => d.size > 100 * 1024).length}\n- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d) => sum + d.optimizationPotential, 0) / analysis.dependencies.length)}%\n`\n\n    return report\n  }\n}\n"],"names":["BundleOptimizationManager","analysisCache","Map","config","getDefaultConfig","getInstance","instance","maxChunkSize","maxFirstLoadSize","enableTreeShaking","enableCodeSplitting","enableCompression","enableLazyLoading","performanceBudgets","maxBundleSize","maxFirstLoadJS","maxCSS","maxImages","warningThreshold","errorThreshold","updateConfig","newConfig","analyzeBundles","buildPath","cacheKey","Date","now","has","get","analysis","performBundleAnalysis","set","size","firstKey","keys","next","value","delete","error","console","Error","message","staticPath","path","join","chunks","analyzeChunks","dependencies","analyzeDependencies","performance","calculatePerformanceMetrics","recommendations","generateRecommendations","totalSize","reduce","sum","chunk","gzippedSize","mockChunks","name","type","loadPriority","mockChunk","push","modules","analyzeChunkModules","warn","chunkName","imports","exports","isTreeShakeable","packageJsonPath","process","cwd","packageJson","JSON","parse","fs","readFile","devDependencies","Object","entries","map","version","estimateDependencySize","usage","analyzeDependencyUsage","alternatives","suggestAlternatives","optimizationPotential","calculateOptimizationPotential","sizeMap","react","recharts","criticalDeps","importantDeps","includes","moment","optimizationMap","firstLoadJS","filter","totalJS","score","calculatePerformanceScore","grade","getPerformanceGrade","css","images","fonts","other","firstLoadRatio","totalRatio","penalty","Math","max","largeChunks","priority","description","round","estimatedSavings","implementation","effort","heavyDeps","dep","sort","a","b","priorityOrder","critical","high","medium","low","applyOptimizations","recommendation","applyLowEffortOptimization","implementLazyLoading","log","generateOptimizationReport","report","slice","rec","i","length","d"],"mappings":"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"}