{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\api\\categories.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TESTS PARA API CATEGORIES\r\n// ===================================\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { GET } from '@/app/api/categories/route';\r\n\r\n// Mock Supabase\r\nconst mockSupabaseClient = {\r\n  from: jest.fn(() => ({\r\n    select: jest.fn(() => ({\r\n      order: jest.fn(() => ({\r\n        data: [\r\n          { id: 1, name: 'Pinturas', slug: 'pinturas', products_count: [{ count: 5 }] },\r\n          { id: 2, name: 'Herramientas', slug: 'herramientas', products_count: [{ count: 3 }] },\r\n        ],\r\n        error: null,\r\n      })),\r\n    })),\r\n  })),\r\n};\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn(() => mockSupabaseClient),\r\n  handleSupabaseError: jest.fn(),\r\n}));\r\n\r\ndescribe('/api/categories', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset getSupabaseClient mock\r\n    const { getSupabaseClient } = require('@/lib/supabase');\r\n    getSupabaseClient.mockReturnValue(mockSupabaseClient);\r\n\r\n    // Reset mock data to default\r\n    mockSupabaseClient.from.mockReturnValue({\r\n      select: jest.fn(() => ({\r\n        order: jest.fn(() => ({\r\n          data: [\r\n            { id: 1, name: 'Pinturas', slug: 'pinturas', products_count: [{ count: 5 }] },\r\n            { id: 2, name: 'Herramientas', slug: 'herramientas', products_count: [{ count: 3 }] },\r\n          ],\r\n          error: null,\r\n        })),\r\n      })),\r\n    });\r\n  });\r\n\r\n  describe('GET', () => {\r\n    it('should return categories successfully', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveLength(2);\r\n      expect(data.data[0]).toEqual({\r\n        id: 1,\r\n        name: 'Pinturas',\r\n        slug: 'pinturas',\r\n        products_count: 5,\r\n      });\r\n    });\r\n\r\n    it('should handle database errors', async () => {\r\n      // Mock error response\r\n      mockSupabaseClient.from.mockReturnValue({\r\n        select: jest.fn(() => ({\r\n          order: jest.fn(() => ({\r\n            data: null,\r\n            error: { message: 'Database error' },\r\n          })),\r\n        })),\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Database error');\r\n    });\r\n\r\n    it('should handle empty categories', async () => {\r\n      // Mock empty response\r\n      mockSupabaseClient.from.mockReturnValue({\r\n        select: jest.fn(() => ({\r\n          order: jest.fn(() => ({\r\n            data: [],\r\n            error: null,\r\n          })),\r\n        })),\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toEqual([]);\r\n    });\r\n\r\n    it('should handle unexpected errors', async () => {\r\n      // Mock unexpected error\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      getSupabaseClient.mockImplementation(() => {\r\n        throw new Error('Unexpected error');\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.success).toBe(false);\r\n      expect(data.error).toBe('Unexpected error');\r\n    });\r\n\r\n    it('should return categories with proper structure', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data).toHaveProperty('success');\r\n      expect(data).toHaveProperty('data');\r\n      expect(data).toHaveProperty('message');\r\n\r\n      // Verificar estructura de categorÃ­as\r\n      data.data.forEach((category: { id: string; name: string; slug: string }) => {\r\n        expect(category).toHaveProperty('id');\r\n        expect(category).toHaveProperty('name');\r\n        expect(category).toHaveProperty('slug');\r\n      });\r\n    });\r\n\r\n    it('should call supabase with correct parameters', async () => {\r\n      const { getSupabaseClient } = require('@/lib/supabase');\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      await GET(request);\r\n\r\n      expect(getSupabaseClient).toHaveBeenCalled();\r\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('categories');\r\n    });\r\n\r\n    it('should handle null data response', async () => {\r\n      // Mock null response\r\n      mockSupabaseClient.from.mockReturnValue({\r\n        select: jest.fn(() => ({\r\n          order: jest.fn(() => ({\r\n            data: null,\r\n            error: null,\r\n          })),\r\n        })),\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toEqual([]);\r\n    });\r\n\r\n    it('should handle categories with special characters', async () => {\r\n      // Mock response with special characters\r\n      mockSupabaseClient.from.mockReturnValue({\r\n        select: jest.fn(() => ({\r\n          order: jest.fn(() => ({\r\n            data: [\r\n              { id: 1, name: 'Pinturas & Barnices', slug: 'pinturas-barnices', products_count: [{ count: 2 }] },\r\n              { id: 2, name: 'Herramientas (Profesionales)', slug: 'herramientas-profesionales', products_count: [{ count: 1 }] },\r\n            ],\r\n            error: null,\r\n          })),\r\n        })),\r\n      });\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/categories');\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(data.success).toBe(true);\r\n      expect(data.data).toHaveLength(2);\r\n      expect(data.data[0].name).toBe('Pinturas & Barnices');\r\n      expect(data.data[1].name).toBe('Herramientas (Profesionales)');\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","getSupabaseClient","fn","mockSupabaseClient","handleSupabaseError","from","select","order","data","id","name","slug","products_count","count","error","describe","beforeEach","clearAllMocks","require","mockReturnValue","it","request","NextRequest","response","GET","json","expect","status","toBe","success","toHaveLength","toEqual","message","mockImplementation","Error","toHaveProperty","forEach","category","toHaveBeenCalled","toHaveBeenCalledWith"],"mappings":"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"}