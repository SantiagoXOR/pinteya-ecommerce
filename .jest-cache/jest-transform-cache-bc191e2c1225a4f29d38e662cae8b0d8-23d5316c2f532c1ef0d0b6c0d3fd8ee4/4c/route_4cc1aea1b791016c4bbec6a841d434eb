002502a9f2d169c4c4093a19e2f58be4
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2obydt0iuy() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-flows\\route.ts";
  var hash = "dac2bcaba9c7173a3bd2c465233d0b7264e91e4b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-flows\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 81
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "10": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "11": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "12": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 49
        }
      },
      "13": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "14": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 59
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 30
        },
        end: {
          line: 35,
          column: 84
        }
      },
      "17": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "18": {
        start: {
          line: 43,
          column: 35
        },
        end: {
          line: 43,
          column: 104
        }
      },
      "19": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "20": {
        start: {
          line: 46,
          column: 50
        },
        end: {
          line: 50,
          column: 25
        }
      },
      "21": {
        start: {
          line: 49,
          column: 112
        },
        end: {
          line: 49,
          column: 151
        }
      },
      "22": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "23": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 61,
          column: 23
        }
      },
      "24": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 63,
          column: 94
        }
      },
      "25": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "26": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "27": {
        start: {
          line: 72,
          column: 40
        },
        end: {
          line: 72,
          column: 106
        }
      },
      "28": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "29": {
        start: {
          line: 82,
          column: 33
        },
        end: {
          line: 82,
          column: 87
        }
      },
      "30": {
        start: {
          line: 83,
          column: 38
        },
        end: {
          line: 83,
          column: 88
        }
      },
      "31": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 104,
          column: 17
        }
      },
      "32": {
        start: {
          line: 87,
          column: 65
        },
        end: {
          line: 87,
          column: 110
        }
      },
      "33": {
        start: {
          line: 89,
          column: 47
        },
        end: {
          line: 89,
          column: 94
        }
      },
      "34": {
        start: {
          line: 89,
          column: 73
        },
        end: {
          line: 89,
          column: 93
        }
      },
      "35": {
        start: {
          line: 90,
          column: 43
        },
        end: {
          line: 90,
          column: 100
        }
      },
      "36": {
        start: {
          line: 90,
          column: 70
        },
        end: {
          line: 90,
          column: 92
        }
      },
      "37": {
        start: {
          line: 91,
          column: 39
        },
        end: {
          line: 91,
          column: 95
        }
      },
      "38": {
        start: {
          line: 91,
          column: 66
        },
        end: {
          line: 91,
          column: 87
        }
      },
      "39": {
        start: {
          line: 92,
          column: 40
        },
        end: {
          line: 92,
          column: 97
        }
      },
      "40": {
        start: {
          line: 92,
          column: 67
        },
        end: {
          line: 92,
          column: 89
        }
      },
      "41": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 102,
          column: 26
        }
      },
      "42": {
        start: {
          line: 101,
          column: 99
        },
        end: {
          line: 101,
          column: 144
        }
      },
      "43": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "44": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 60
        }
      },
      "45": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "46": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "47": {
        start: {
          line: 122,
          column: 21
        },
        end: {
          line: 122,
          column: 41
        }
      },
      "48": {
        start: {
          line: 123,
          column: 55
        },
        end: {
          line: 123,
          column: 59
        }
      },
      "49": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "50": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "51": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "52": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 74
        }
      },
      "53": {
        start: {
          line: 136,
          column: 34
        },
        end: {
          line: 136,
          column: 103
        }
      },
      "54": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 141,
          column: 19
        }
      },
      "55": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 144,
          column: 37
        }
      },
      "56": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "57": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 150,
          column: 23
        }
      },
      "58": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 70
        }
      },
      "59": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 156,
          column: 19
        }
      },
      "60": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 162,
          column: 19
        }
      },
      "61": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 56
        }
      },
      "62": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 41
          },
          end: {
            line: 46,
            column: 42
          }
        },
        loc: {
          start: {
            line: 46,
            column: 50
          },
          end: {
            line: 50,
            column: 25
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 97
          },
          end: {
            line: 49,
            column: 98
          }
        },
        loc: {
          start: {
            line: 49,
            column: 112
          },
          end: {
            line: 49,
            column: 151
          }
        },
        line: 49
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 57
          },
          end: {
            line: 87,
            column: 58
          }
        },
        loc: {
          start: {
            line: 87,
            column: 65
          },
          end: {
            line: 87,
            column: 110
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 88,
            column: 45
          }
        },
        loc: {
          start: {
            line: 88,
            column: 52
          },
          end: {
            line: 103,
            column: 21
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 68
          },
          end: {
            line: 89,
            column: 69
          }
        },
        loc: {
          start: {
            line: 89,
            column: 73
          },
          end: {
            line: 89,
            column: 93
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 90,
            column: 65
          },
          end: {
            line: 90,
            column: 66
          }
        },
        loc: {
          start: {
            line: 90,
            column: 70
          },
          end: {
            line: 90,
            column: 92
          }
        },
        line: 90
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 61
          },
          end: {
            line: 91,
            column: 62
          }
        },
        loc: {
          start: {
            line: 91,
            column: 66
          },
          end: {
            line: 91,
            column: 87
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 92,
            column: 62
          },
          end: {
            line: 92,
            column: 63
          }
        },
        loc: {
          start: {
            line: 92,
            column: 67
          },
          end: {
            line: 92,
            column: 89
          }
        },
        line: 92
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 101,
            column: 91
          },
          end: {
            line: 101,
            column: 92
          }
        },
        loc: {
          start: {
            line: 101,
            column: 99
          },
          end: {
            line: 101,
            column: 144
          }
        },
        line: 101
      },
      "14": {
        name: "POST",
        decl: {
          start: {
            line: 120,
            column: 15
          },
          end: {
            line: 120,
            column: 19
          }
        },
        loc: {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 120
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 40,
            column: 19
          }
        }, {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 53,
            column: 19
          }
        }, {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 79,
            column: 19
          }
        }, {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 108,
            column: 19
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 84
          },
          end: {
            line: 43,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 84
          },
          end: {
            line: 43,
            column: 90
          }
        }, {
          start: {
            line: 43,
            column: 94
          },
          end: {
            line: 43,
            column: 103
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 41
          },
          end: {
            line: 48,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 41
          },
          end: {
            line: 48,
            column: 57
          }
        }, {
          start: {
            line: 48,
            column: 61
          },
          end: {
            line: 48,
            column: 63
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 62
          }
        }, {
          start: {
            line: 49,
            column: 66
          },
          end: {
            line: 49,
            column: 68
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 121
          },
          end: {
            line: 49,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 121
          },
          end: {
            line: 49,
            column: 137
          }
        }, {
          start: {
            line: 49,
            column: 141
          },
          end: {
            line: 49,
            column: 143
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 34
          }
        }, {
          start: {
            line: 52,
            column: 38
          },
          end: {
            line: 52,
            column: 43
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 100,
            column: 41
          },
          end: {
            line: 100,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 69
          },
          end: {
            line: 100,
            column: 109
          }
        }, {
          start: {
            line: 100,
            column: 112
          },
          end: {
            line: 100,
            column: 113
          }
        }],
        line: 100
      },
      "9": {
        loc: {
          start: {
            line: 101,
            column: 43
          },
          end: {
            line: 101,
            column: 155
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 71
          },
          end: {
            line: 101,
            column: 148
          }
        }, {
          start: {
            line: 101,
            column: 151
          },
          end: {
            line: 101,
            column: 155
          }
        }],
        line: 101
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 21
          },
          end: {
            line: 114,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 46
          },
          end: {
            line: 114,
            column: 59
          }
        }, {
          start: {
            line: 114,
            column: 62
          },
          end: {
            line: 114,
            column: 77
          }
        }],
        line: 114
      },
      "11": {
        loc: {
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 123,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 123,
            column: 50
          }
        }],
        line: 123
      },
      "12": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 141,
            column: 19
          }
        }, {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 156,
            column: 19
          }
        }, {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 162,
            column: 19
          }
        }],
        line: 124
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 168,
            column: 21
          },
          end: {
            line: 168,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 168,
            column: 59
          }
        }, {
          start: {
            line: 168,
            column: 62
          },
          end: {
            line: 168,
            column: 77
          }
        }],
        line: 168
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\test-flows\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: Test Flows Management\r\n// Endpoint para gesti\xF3n de flujos de testing automatizados\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { testFlowManager } from '@/lib/testing/advanced-test-flows';\r\nimport { ScreenshotMetadata } from '@/lib/testing/screenshot-manager';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const flowId = searchParams.get('flowId');\r\n    const executionId = searchParams.get('executionId');\r\n\r\n    switch (action) {\r\n      case 'flows':\r\n        // Obtener todos los flujos disponibles\r\n        const flows = testFlowManager.getAvailableFlows();\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: flows,\r\n          total: flows.length\r\n        });\r\n\r\n      case 'executions':\r\n        // Obtener ejecuciones (todas o de un flujo espec\xEDfico)\r\n        const executions = testFlowManager.getExecutions(flowId || undefined);\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: executions.map(exec => ({\r\n            ...exec,\r\n            screenshots: exec.screenshots || [],\r\n            screenshotCount: (exec.screenshots || []).length + \r\n              exec.steps.reduce((total, step) => total + (step.screenshots || []).length, 0)\r\n          })),\r\n          total: executions.length,\r\n          flowId: flowId || 'all'\r\n        });\r\n\r\n      case 'execution':\r\n        // Obtener ejecuci\xF3n espec\xEDfica\r\n        if (!executionId) {\r\n          return NextResponse.json(\r\n            { error: 'executionId es requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n        \r\n        const execution = testFlowManager.getExecution(executionId);\r\n        if (!execution) {\r\n          return NextResponse.json(\r\n            { error: 'Ejecuci\xF3n no encontrada' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n        // Incluir estad\xEDsticas de screenshots\r\n        const screenshotStats = testFlowManager.getScreenshotStats(executionId);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: {\r\n            ...execution,\r\n            screenshotStats\r\n          }\r\n        });\r\n\r\n      default:\r\n        // Por defecto, retornar resumen\r\n        const allFlows = testFlowManager.getAvailableFlows();\r\n        const allExecutions = testFlowManager.getExecutions();\r\n        \r\n        const summary = {\r\n          totalFlows: allFlows.length,\r\n          totalExecutions: allExecutions.length,\r\n          recentExecutions: allExecutions\r\n            .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())\r\n            .slice(0, 10),\r\n          flowStats: allFlows.map(flow => {\r\n            const flowExecutions = allExecutions.filter(e => e.flowId === flow.id);\r\n            const successful = flowExecutions.filter(e => e.status === 'success').length;\r\n            const failed = flowExecutions.filter(e => e.status === 'failed').length;\r\n            const running = flowExecutions.filter(e => e.status === 'running').length;\r\n            \r\n            return {\r\n              flowId: flow.id,\r\n              name: flow.name,\r\n              totalExecutions: flowExecutions.length,\r\n              successful,\r\n              failed,\r\n              running,\r\n              successRate: flowExecutions.length > 0 ? (successful / flowExecutions.length) * 100 : 0,\r\n              lastExecution: flowExecutions.length > 0 ? \r\n                flowExecutions.sort((a, b) => b.startTime.getTime() - a.startTime.getTime())[0] : null\r\n            };\r\n          })\r\n        };\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: summary\r\n        });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en API de test flows:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { action, flowId, trigger = 'manual' } = body;\r\n\r\n    switch (action) {\r\n      case 'execute':\r\n        // Ejecutar un flujo espec\xEDfico\r\n        if (!flowId) {\r\n          return NextResponse.json(\r\n            { error: 'flowId es requerido para ejecutar un flujo' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        console.log(`\uD83D\uDE80 Iniciando ejecuci\xF3n de flujo: ${flowId}`);\r\n        \r\n        // Ejecutar flujo de manera as\xEDncrona\r\n        const execution = await testFlowManager.executeFlow(flowId, trigger);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: execution,\r\n          message: `Flujo ${flowId} iniciado exitosamente`\r\n        });\r\n\r\n      case 'register':\r\n        // Registrar un nuevo flujo (para casos avanzados)\r\n        const { flow } = body;\r\n        if (!flow) {\r\n          return NextResponse.json(\r\n            { error: 'Configuraci\xF3n de flujo es requerida' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        testFlowManager.registerFlow(flow);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          message: `Flujo ${flow.id} registrado exitosamente`\r\n        });\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Acci\xF3n no v\xE1lida' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error ejecutando flujo:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error ejecutando flujo',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "searchParams", "URL", "url", "action", "get", "flowId", "executionId", "flows", "testFlowManager", "getAvailableFlows", "NextResponse", "json", "success", "data", "total", "length", "executions", "getExecutions", "undefined", "map", "exec", "screenshots", "screenshotCount", "steps", "reduce", "step", "error", "status", "execution", "getExecution", "screenshotStats", "getScreenshotStats", "allFlows", "allExecutions", "summary", "totalFlows", "totalExecutions", "recentExecutions", "sort", "a", "b", "startTime", "getTime", "slice", "flowStats", "flow", "flowExecutions", "filter", "e", "id", "successful", "failed", "running", "name", "successRate", "lastExecution", "console", "details", "Error", "message", "body", "trigger", "log", "executeFlow", "registerFlow"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dac2bcaba9c7173a3bd2c465233d0b7264e91e4b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2obydt0iuy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2obydt0iuy();
cov_2obydt0iuy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2obydt0iuy().f[0]++;
  cov_2obydt0iuy().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2obydt0iuy().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2obydt0iuy().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2obydt0iuy().f[1]++;
    cov_2obydt0iuy().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2obydt0iuy().f[2]++;
    cov_2obydt0iuy().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2obydt0iuy().f[3]++;
    cov_2obydt0iuy().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2obydt0iuy().s[7]++, require("next/server"));
const _advancedtestflows =
/* istanbul ignore next */
(cov_2obydt0iuy().s[8]++, require("../../../../lib/testing/advanced-test-flows"));
const runtime =
/* istanbul ignore next */
(cov_2obydt0iuy().s[9]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_2obydt0iuy().f[4]++;
  cov_2obydt0iuy().s[10]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[11]++, new URL(request.url));
    const action =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[12]++, searchParams.get('action'));
    const flowId =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[13]++, searchParams.get('flowId'));
    const executionId =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[14]++, searchParams.get('executionId'));
    /* istanbul ignore next */
    cov_2obydt0iuy().s[15]++;
    switch (action) {
      case 'flows':
        /* istanbul ignore next */
        cov_2obydt0iuy().b[0][0]++;
        // Obtener todos los flujos disponibles
        const flows =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[16]++, _advancedtestflows.testFlowManager.getAvailableFlows());
        /* istanbul ignore next */
        cov_2obydt0iuy().s[17]++;
        return _server.NextResponse.json({
          success: true,
          data: flows,
          total: flows.length
        });
      case 'executions':
        /* istanbul ignore next */
        cov_2obydt0iuy().b[0][1]++;
        // Obtener ejecuciones (todas o de un flujo especÃ­fico)
        const executions =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[18]++, _advancedtestflows.testFlowManager.getExecutions(
        /* istanbul ignore next */
        (cov_2obydt0iuy().b[1][0]++, flowId) ||
        /* istanbul ignore next */
        (cov_2obydt0iuy().b[1][1]++, undefined)));
        /* istanbul ignore next */
        cov_2obydt0iuy().s[19]++;
        return _server.NextResponse.json({
          success: true,
          data: executions.map(exec => {
            /* istanbul ignore next */
            cov_2obydt0iuy().f[5]++;
            cov_2obydt0iuy().s[20]++;
            return {
              ...exec,
              screenshots:
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[2][0]++, exec.screenshots) ||
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[2][1]++, []),
              screenshotCount: (
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[3][0]++, exec.screenshots) ||
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[3][1]++, [])).length + exec.steps.reduce((total, step) => {
                /* istanbul ignore next */
                cov_2obydt0iuy().f[6]++;
                cov_2obydt0iuy().s[21]++;
                return total + (
                /* istanbul ignore next */
                (cov_2obydt0iuy().b[4][0]++, step.screenshots) ||
                /* istanbul ignore next */
                (cov_2obydt0iuy().b[4][1]++, [])).length;
              }, 0)
            };
          }),
          total: executions.length,
          flowId:
          /* istanbul ignore next */
          (cov_2obydt0iuy().b[5][0]++, flowId) ||
          /* istanbul ignore next */
          (cov_2obydt0iuy().b[5][1]++, 'all')
        });
      case 'execution':
        /* istanbul ignore next */
        cov_2obydt0iuy().b[0][2]++;
        cov_2obydt0iuy().s[22]++;
        // Obtener ejecuciÃ³n especÃ­fica
        if (!executionId) {
          /* istanbul ignore next */
          cov_2obydt0iuy().b[6][0]++;
          cov_2obydt0iuy().s[23]++;
          return _server.NextResponse.json({
            error: 'executionId es requerido'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2obydt0iuy().b[6][1]++;
        }
        const execution =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[24]++, _advancedtestflows.testFlowManager.getExecution(executionId));
        /* istanbul ignore next */
        cov_2obydt0iuy().s[25]++;
        if (!execution) {
          /* istanbul ignore next */
          cov_2obydt0iuy().b[7][0]++;
          cov_2obydt0iuy().s[26]++;
          return _server.NextResponse.json({
            error: 'EjecuciÃ³n no encontrada'
          }, {
            status: 404
          });
        } else
        /* istanbul ignore next */
        {
          cov_2obydt0iuy().b[7][1]++;
        }
        // Incluir estadÃ­sticas de screenshots
        const screenshotStats =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[27]++, _advancedtestflows.testFlowManager.getScreenshotStats(executionId));
        /* istanbul ignore next */
        cov_2obydt0iuy().s[28]++;
        return _server.NextResponse.json({
          success: true,
          data: {
            ...execution,
            screenshotStats
          }
        });
      default:
        /* istanbul ignore next */
        cov_2obydt0iuy().b[0][3]++;
        // Por defecto, retornar resumen
        const allFlows =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[29]++, _advancedtestflows.testFlowManager.getAvailableFlows());
        const allExecutions =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[30]++, _advancedtestflows.testFlowManager.getExecutions());
        const summary =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[31]++, {
          totalFlows: allFlows.length,
          totalExecutions: allExecutions.length,
          recentExecutions: allExecutions.sort((a, b) => {
            /* istanbul ignore next */
            cov_2obydt0iuy().f[7]++;
            cov_2obydt0iuy().s[32]++;
            return b.startTime.getTime() - a.startTime.getTime();
          }).slice(0, 10),
          flowStats: allFlows.map(flow => {
            /* istanbul ignore next */
            cov_2obydt0iuy().f[8]++;
            const flowExecutions =
            /* istanbul ignore next */
            (cov_2obydt0iuy().s[33]++, allExecutions.filter(e => {
              /* istanbul ignore next */
              cov_2obydt0iuy().f[9]++;
              cov_2obydt0iuy().s[34]++;
              return e.flowId === flow.id;
            }));
            const successful =
            /* istanbul ignore next */
            (cov_2obydt0iuy().s[35]++, flowExecutions.filter(e => {
              /* istanbul ignore next */
              cov_2obydt0iuy().f[10]++;
              cov_2obydt0iuy().s[36]++;
              return e.status === 'success';
            }).length);
            const failed =
            /* istanbul ignore next */
            (cov_2obydt0iuy().s[37]++, flowExecutions.filter(e => {
              /* istanbul ignore next */
              cov_2obydt0iuy().f[11]++;
              cov_2obydt0iuy().s[38]++;
              return e.status === 'failed';
            }).length);
            const running =
            /* istanbul ignore next */
            (cov_2obydt0iuy().s[39]++, flowExecutions.filter(e => {
              /* istanbul ignore next */
              cov_2obydt0iuy().f[12]++;
              cov_2obydt0iuy().s[40]++;
              return e.status === 'running';
            }).length);
            /* istanbul ignore next */
            cov_2obydt0iuy().s[41]++;
            return {
              flowId: flow.id,
              name: flow.name,
              totalExecutions: flowExecutions.length,
              successful,
              failed,
              running,
              successRate: flowExecutions.length > 0 ?
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[8][0]++, successful / flowExecutions.length * 100) :
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[8][1]++, 0),
              lastExecution: flowExecutions.length > 0 ?
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[9][0]++, flowExecutions.sort((a, b) => {
                /* istanbul ignore next */
                cov_2obydt0iuy().f[13]++;
                cov_2obydt0iuy().s[42]++;
                return b.startTime.getTime() - a.startTime.getTime();
              })[0]) :
              /* istanbul ignore next */
              (cov_2obydt0iuy().b[9][1]++, null)
            };
          })
        });
        /* istanbul ignore next */
        cov_2obydt0iuy().s[43]++;
        return _server.NextResponse.json({
          success: true,
          data: summary
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2obydt0iuy().s[44]++;
    console.error('Error en API de test flows:', error);
    /* istanbul ignore next */
    cov_2obydt0iuy().s[45]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2obydt0iuy().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2obydt0iuy().b[10][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2obydt0iuy().f[14]++;
  cov_2obydt0iuy().s[46]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[47]++, await request.json());
    const {
      action,
      flowId,
      trigger =
      /* istanbul ignore next */
      (cov_2obydt0iuy().b[11][0]++, 'manual')
    } =
    /* istanbul ignore next */
    (cov_2obydt0iuy().s[48]++, body);
    /* istanbul ignore next */
    cov_2obydt0iuy().s[49]++;
    switch (action) {
      case 'execute':
        /* istanbul ignore next */
        cov_2obydt0iuy().b[12][0]++;
        cov_2obydt0iuy().s[50]++;
        // Ejecutar un flujo especÃ­fico
        if (!flowId) {
          /* istanbul ignore next */
          cov_2obydt0iuy().b[13][0]++;
          cov_2obydt0iuy().s[51]++;
          return _server.NextResponse.json({
            error: 'flowId es requerido para ejecutar un flujo'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2obydt0iuy().b[13][1]++;
        }
        cov_2obydt0iuy().s[52]++;
        console.log(`ğ Iniciando ejecuciÃ³n de flujo: ${flowId}`);
        // Ejecutar flujo de manera asÃ­ncrona
        const execution =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[53]++, await _advancedtestflows.testFlowManager.executeFlow(flowId, trigger));
        /* istanbul ignore next */
        cov_2obydt0iuy().s[54]++;
        return _server.NextResponse.json({
          success: true,
          data: execution,
          message: `Flujo ${flowId} iniciado exitosamente`
        });
      case 'register':
        /* istanbul ignore next */
        cov_2obydt0iuy().b[12][1]++;
        // Registrar un nuevo flujo (para casos avanzados)
        const {
          flow
        } =
        /* istanbul ignore next */
        (cov_2obydt0iuy().s[55]++, body);
        /* istanbul ignore next */
        cov_2obydt0iuy().s[56]++;
        if (!flow) {
          /* istanbul ignore next */
          cov_2obydt0iuy().b[14][0]++;
          cov_2obydt0iuy().s[57]++;
          return _server.NextResponse.json({
            error: 'ConfiguraciÃ³n de flujo es requerida'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2obydt0iuy().b[14][1]++;
        }
        cov_2obydt0iuy().s[58]++;
        _advancedtestflows.testFlowManager.registerFlow(flow);
        /* istanbul ignore next */
        cov_2obydt0iuy().s[59]++;
        return _server.NextResponse.json({
          success: true,
          message: `Flujo ${flow.id} registrado exitosamente`
        });
      default:
        /* istanbul ignore next */
        cov_2obydt0iuy().b[12][2]++;
        cov_2obydt0iuy().s[60]++;
        return _server.NextResponse.json({
          error: 'AcciÃ³n no vÃ¡lida'
        }, {
          status: 400
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2obydt0iuy().s[61]++;
    console.error('Error ejecutando flujo:', error);
    /* istanbul ignore next */
    cov_2obydt0iuy().s[62]++;
    return _server.NextResponse.json({
      error: 'Error ejecutando flujo',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2obydt0iuy().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2obydt0iuy().b[15][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,