{"version":3,"names":["capitalizeFirst","cov_1jmld52f8l","f","s","formatAddress","formatCoordinates","formatCurrency","formatDate","formatDateTime","formatDuration","formatFileSize","formatNumber","formatOrderStatus","formatPercentage","formatPhoneNumber","formatRelativeTime","formatShipmentStatus","formatSlug","formatTimeAgo","truncateText","date","pattern","b","dateObj","Date","isNaN","getTime","day","getDate","toString","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","error","console","_optimizedimports","parseISO","isValid","now","diffInSeconds","Math","floor","diffInMinutes","diffInHours","diffInDays","diffInMonths","diffInYears","amount","currency","locale","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","toFixed","number","options","value","decimals","phone","cleaned","replace","length","startsWith","address","parts","street","apartment","neighborhood","city","state","postal_code","filter","Boolean","join","text","maxLength","substring","charAt","toUpperCase","slice","toLowerCase","normalize","trim","status","statusMap","pending","label","color","confirmed","picked_up","in_transit","out_for_delivery","delivered","exception","cancelled","returned","processing","shipped","refunded","bytes","k","sizes","i","log","parseFloat","pow","lat","lng","latDir","lngDir","abs","remainingMinutes"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\utils\\format.ts"],"sourcesContent":["// =====================================================\r\n// UTILIDADES: FORMATEO DE DATOS\r\n// Descripción: Funciones para formatear fechas, números, monedas, etc.\r\n// Basado en: Intl API + date-fns + patrones enterprise\r\n// =====================================================\r\n\r\nimport { format, formatDistance, formatDistanceToNow, parseISO, isValid, es } from '@/lib/optimized-imports';\r\n\r\n// =====================================================\r\n// FORMATEO DE FECHAS\r\n// =====================================================\r\n\r\nexport function formatDate(date: string | Date, pattern: string = 'dd/MM/yyyy'): string {\r\n  try {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n    if (isNaN(dateObj.getTime())) {\r\n      return 'Fecha inválida';\r\n    }\r\n\r\n    // Usar formateo nativo para evitar problemas con date-fns\r\n    const day = dateObj.getDate().toString().padStart(2, '0');\r\n    const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');\r\n    const year = dateObj.getFullYear();\r\n    const hours = dateObj.getHours().toString().padStart(2, '0');\r\n    const minutes = dateObj.getMinutes().toString().padStart(2, '0');\r\n\r\n    if (pattern === 'dd/MM/yyyy hh:mm') {\r\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\r\n    }\r\n\r\n    return `${day}/${month}/${year}`;\r\n  } catch (error) {\r\n    console.error('Error formatting date:', error);\r\n    return 'Fecha inválida';\r\n  }\r\n}\r\n\r\nexport function formatDateTime(date: string | Date): string {\r\n  return formatDate(date, 'dd/MM/yyyy hh:mm');\r\n}\r\n\r\nexport function formatTimeAgo(date: string | Date): string {\r\n  try {\r\n    const dateObj = typeof date === 'string' ? parseISO(date) : date;\r\n    if (!isValid(dateObj)) {\r\n      return 'Fecha inválida';\r\n    }\r\n\r\n    // Usar implementación simple sin locale para evitar errores de formato\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);\r\n\r\n    if (diffInSeconds < 60) {\r\n      return 'hace menos de un minuto';\r\n    }\r\n\r\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\r\n    if (diffInMinutes < 60) {\r\n      return `hace ${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    const diffInHours = Math.floor(diffInMinutes / 60);\r\n    if (diffInHours < 24) {\r\n      return `hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 30) {\r\n      return `hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;\r\n    }\r\n\r\n    const diffInMonths = Math.floor(diffInDays / 30);\r\n    if (diffInMonths < 12) {\r\n      return `hace ${diffInMonths} mes${diffInMonths > 1 ? 'es' : ''}`;\r\n    }\r\n\r\n    const diffInYears = Math.floor(diffInMonths / 12);\r\n    return `hace ${diffInYears} año${diffInYears > 1 ? 's' : ''}`;\r\n  } catch (error) {\r\n    console.error('Error formatting time ago:', error);\r\n    return 'Fecha inválida';\r\n  }\r\n}\r\n\r\nexport function formatRelativeTime(date: string | Date): string {\r\n  return formatTimeAgo(date);\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE NÚMEROS Y MONEDAS\r\n// =====================================================\r\n\r\nexport function formatCurrency(\r\n  amount: number, \r\n  currency: string = 'ARS',\r\n  locale: string = 'es-AR'\r\n): string {\r\n  try {\r\n    return new Intl.NumberFormat(locale, {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 2\r\n    }).format(amount);\r\n  } catch (error) {\r\n    console.error('Error formatting currency:', error);\r\n    return `$${amount.toFixed(2)}`;\r\n  }\r\n}\r\n\r\nexport function formatNumber(\r\n  number: number,\r\n  locale: string = 'es-AR',\r\n  options?: Intl.NumberFormatOptions\r\n): string {\r\n  try {\r\n    return new Intl.NumberFormat(locale, options).format(number);\r\n  } catch (error) {\r\n    console.error('Error formatting number:', error);\r\n    return number.toString();\r\n  }\r\n}\r\n\r\nexport function formatPercentage(\r\n  value: number,\r\n  decimals: number = 1,\r\n  locale: string = 'es-AR'\r\n): string {\r\n  try {\r\n    return new Intl.NumberFormat(locale, {\r\n      style: 'percent',\r\n      minimumFractionDigits: decimals,\r\n      maximumFractionDigits: decimals\r\n    }).format(value / 100);\r\n  } catch (error) {\r\n    console.error('Error formatting percentage:', error);\r\n    return `${value.toFixed(decimals)}%`;\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE TEXTO\r\n// =====================================================\r\n\r\nexport function formatPhoneNumber(phone: string): string {\r\n  // Formato argentino: +54 9 351 123 4567\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n  \r\n  if (cleaned.length === 10) {\r\n    // Formato local: 351 123 4567\r\n    return cleaned.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1 $2 $3');\r\n  } else if (cleaned.length === 13 && cleaned.startsWith('549')) {\r\n    // Formato internacional: +54 9 351 123 4567\r\n    return cleaned.replace(/(\\d{2})(\\d{1})(\\d{3})(\\d{3})(\\d{4})/, '+$1 $2 $3 $4 $5');\r\n  }\r\n  \r\n  return phone;\r\n}\r\n\r\nexport function formatAddress(address: {\r\n  street: string;\r\n  number: string;\r\n  apartment?: string;\r\n  neighborhood: string;\r\n  city: string;\r\n  state: string;\r\n  postal_code: string;\r\n}): string {\r\n  const parts = [\r\n    `${address.street} ${address.number}`,\r\n    address.apartment ? `Depto ${address.apartment}` : '',\r\n    address.neighborhood,\r\n    address.city,\r\n    address.state,\r\n    `CP ${address.postal_code}`\r\n  ].filter(Boolean);\r\n  \r\n  return parts.join(', ');\r\n}\r\n\r\nexport function truncateText(text: string, maxLength: number = 50): string {\r\n  if (text.length <= maxLength) {\r\n    return text;\r\n  }\r\n  return text.substring(0, maxLength - 3) + '...';\r\n}\r\n\r\nexport function capitalizeFirst(text: string): string {\r\n  if (!text) {return '';}\r\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\r\n}\r\n\r\nexport function formatSlug(text: string): string {\r\n  return text\r\n    .toLowerCase()\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '') // Remover acentos\r\n    .replace(/[^a-z0-9\\s-]/g, '') // Remover caracteres especiales\r\n    .replace(/\\s+/g, '-') // Reemplazar espacios con guiones\r\n    .replace(/-+/g, '-') // Remover guiones múltiples\r\n    .trim();\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE ESTADOS Y BADGES\r\n// =====================================================\r\n\r\nexport function formatShipmentStatus(status: string): {\r\n  label: string;\r\n  color: 'default' | 'secondary' | 'destructive' | 'outline';\r\n} {\r\n  const statusMap: Record<string, { label: string; color: any }> = {\r\n    pending: { label: 'Pendiente', color: 'secondary' },\r\n    confirmed: { label: 'Confirmado', color: 'default' },\r\n    picked_up: { label: 'Retirado', color: 'default' },\r\n    in_transit: { label: 'En Tránsito', color: 'default' },\r\n    out_for_delivery: { label: 'En Reparto', color: 'default' },\r\n    delivered: { label: 'Entregado', color: 'default' },\r\n    exception: { label: 'Excepción', color: 'destructive' },\r\n    cancelled: { label: 'Cancelado', color: 'destructive' },\r\n    returned: { label: 'Devuelto', color: 'outline' }\r\n  };\r\n  \r\n  return statusMap[status] || { label: status, color: 'outline' };\r\n}\r\n\r\nexport function formatOrderStatus(status: string): {\r\n  label: string;\r\n  color: 'default' | 'secondary' | 'destructive' | 'outline';\r\n} {\r\n  const statusMap: Record<string, { label: string; color: any }> = {\r\n    pending: { label: 'Pendiente', color: 'secondary' },\r\n    confirmed: { label: 'Confirmado', color: 'default' },\r\n    processing: { label: 'Procesando', color: 'default' },\r\n    shipped: { label: 'Enviado', color: 'default' },\r\n    delivered: { label: 'Entregado', color: 'default' },\r\n    cancelled: { label: 'Cancelado', color: 'destructive' },\r\n    refunded: { label: 'Reembolsado', color: 'outline' },\r\n    returned: { label: 'Devuelto', color: 'outline' }\r\n  };\r\n  \r\n  return statusMap[status] || { label: status, color: 'outline' };\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE ARCHIVOS Y TAMAÑOS\r\n// =====================================================\r\n\r\nexport function formatFileSize(bytes: number): string {\r\n  if (bytes === 0) {return '0 Bytes';}\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE COORDENADAS\r\n// =====================================================\r\n\r\nexport function formatCoordinates(lat: number, lng: number): string {\r\n  const latDir = lat >= 0 ? 'N' : 'S';\r\n  const lngDir = lng >= 0 ? 'E' : 'O';\r\n  \r\n  return `${Math.abs(lat).toFixed(6)}°${latDir}, ${Math.abs(lng).toFixed(6)}°${lngDir}`;\r\n}\r\n\r\n// =====================================================\r\n// FORMATEO DE DURACIÓN\r\n// =====================================================\r\n\r\nexport function formatDuration(minutes: number): string {\r\n  if (minutes < 60) {\r\n    return `${minutes} min`;\r\n  }\r\n  \r\n  const hours = Math.floor(minutes / 60);\r\n  const remainingMinutes = minutes % 60;\r\n  \r\n  if (remainingMinutes === 0) {\r\n    return `${hours}h`;\r\n  }\r\n  \r\n  return `${hours}h ${remainingMinutes}min`;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}