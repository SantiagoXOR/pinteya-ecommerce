{"version":3,"names":["AdvancedAlertingEngine","cov_vnrg6nfch","f","s","AdvancedAlertingUtils","AlertChannel","AlertSeverity","AlertStatus","AlertType","DEFAULT_CHANNEL_CONFIGS","DEFAULT_ESCALATION_POLICY","advancedAlertingEngine","channel","enabled","config","recipients","filters","severities","rateLimiting","maxAlertsPerHour","cooldownMinutes","webhookUrl","process","env","SLACK_WEBHOOK_URL","slackChannel","id","name","rules","level","delayMinutes","channels","conditions","unacknowledgedOnly","phones","constructor","redis","_redis","getRedisClient","alerts","Map","channelConfigs","escalationPolicies","suppressionRules","escalationTimers","rateLimitCounters","initializeDefaultConfigs","getInstance","instance","b","forEach","set","_logger","logger","info","LogCategory","MONITORING","createAlert","type","severity","title","message","details","source","tags","fingerprint","generateFingerprint","existingAlert","findExistingAlert","status","updateExistingAlert","isAlertSuppressed","alertId","Date","now","Math","random","toString","substr","alert","timestamp","escalationLevel","relatedAlerts","persistAlert","processAlert","scheduleEscalation","applicableChannels","getApplicableChannels","sendPromises","map","channelConfig","checkRateLimit","warn","sendToChannel","updateRateLimit","error","Promise","allSettled","sendEmailAlert","sendSlackAlert","sendWebhookAlert","sendSMSAlert","sendDiscordAlert","sendTeamsAlert","sendConsoleAlert","payload","text","getSeverityEmoji","attachments","color","getSeverityColor","fields","value","short","toISOString","footer","response","fetch","method","headers","body","JSON","stringify","ok","Error","url","phoneNumbers","discordWebhook","embed","description","getSeverityColorHex","inline","embeds","teamsWebhook","card","emoji","console","log","toUpperCase","Array","from","values","filter","includes","types","keywords","toLowerCase","hasKeyword","some","keyword","key","counter","get","resetTime","count","policy","nextRule","find","rule","delay","timer","setTimeout","escalateAlert","escalatedAt","escalationChannels","Boolean","acknowledgeAlert","acknowledgedBy","acknowledgedAt","clearTimeout","delete","resolveAlert","resolvedBy","resolvedAt","suppressAlert","durationMinutes","reason","suppressedUntil","getActiveAlerts","getAlertStats","stats","total","length","active","acknowledged","resolved","suppressed","bySeverity","byType","content","Buffer","slice","newDetails","sources","timeWindows","currentTime","getHours","padStart","getMinutes","currentDay","getDay","inTimeWindow","window","days","start","end","setex","configureChannel","existing","configureEscalationPolicy","addSuppressionRule","destroy","clear","createPerformanceAlert","createErrorAlert","createCapacityAlert","getAlertSummary","activeAlerts","criticalAlerts","a","lastAlert","sort","activeCount","criticalCount"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\advanced-alerting-engine.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADVANCED ALERTING ENGINE\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Canales de notificación disponibles\r\n */\r\nexport enum AlertChannel {\r\n  EMAIL = 'email',\r\n  SLACK = 'slack',\r\n  WEBHOOK = 'webhook',\r\n  SMS = 'sms',\r\n  DISCORD = 'discord',\r\n  TEAMS = 'teams',\r\n  CONSOLE = 'console'\r\n}\r\n\r\n/**\r\n * Tipos de alerta\r\n */\r\nexport enum AlertType {\r\n  PERFORMANCE = 'performance',\r\n  ERROR = 'error',\r\n  CAPACITY = 'capacity',\r\n  AVAILABILITY = 'availability',\r\n  SECURITY = 'security',\r\n  BUSINESS = 'business'\r\n}\r\n\r\n/**\r\n * Severidad de alerta\r\n */\r\nexport enum AlertSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n/**\r\n * Estado de alerta\r\n */\r\nexport enum AlertStatus {\r\n  ACTIVE = 'active',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  RESOLVED = 'resolved',\r\n  SUPPRESSED = 'suppressed'\r\n}\r\n\r\n/**\r\n * Configuración de canal de alerta\r\n */\r\nexport interface AlertChannelConfig {\r\n  channel: AlertChannel;\r\n  enabled: boolean;\r\n  config: {\r\n    // Email\r\n    recipients?: string[];\r\n    smtpConfig?: {\r\n      host: string;\r\n      port: number;\r\n      secure: boolean;\r\n      auth: { user: string; pass: string };\r\n    };\r\n    \r\n    // Slack\r\n    webhookUrl?: string;\r\n    slackChannel?: string;\r\n    \r\n    // Webhook\r\n    url?: string;\r\n    headers?: Record<string, string>;\r\n    \r\n    // SMS\r\n    provider?: 'twilio' | 'aws-sns';\r\n    phoneNumbers?: string[];\r\n    \r\n    // Discord\r\n    discordWebhook?: string;\r\n    \r\n    // Teams\r\n    teamsWebhook?: string;\r\n  };\r\n  filters?: {\r\n    severities?: AlertSeverity[];\r\n    types?: AlertType[];\r\n    keywords?: string[];\r\n  };\r\n  rateLimiting?: {\r\n    maxAlertsPerHour: number;\r\n    cooldownMinutes: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Política de escalación\r\n */\r\nexport interface EscalationPolicy {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  rules: EscalationRule[];\r\n}\r\n\r\n/**\r\n * Regla de escalación\r\n */\r\nexport interface EscalationRule {\r\n  level: number;\r\n  delayMinutes: number;\r\n  channels: AlertChannel[];\r\n  conditions?: {\r\n    severities?: AlertSeverity[];\r\n    types?: AlertType[];\r\n    unacknowledgedOnly?: boolean;\r\n  };\r\n  recipients?: {\r\n    emails?: string[];\r\n    phones?: string[];\r\n    slackUsers?: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Alerta avanzada\r\n */\r\nexport interface AdvancedAlert {\r\n  id: string;\r\n  type: AlertType;\r\n  severity: AlertSeverity;\r\n  status: AlertStatus;\r\n  title: string;\r\n  message: string;\r\n  details: Record<string, unknown>;\r\n  source: string;\r\n  timestamp: number;\r\n  acknowledgedBy?: string;\r\n  acknowledgedAt?: number;\r\n  resolvedBy?: string;\r\n  resolvedAt?: number;\r\n  escalationLevel: number;\r\n  escalatedAt?: number;\r\n  suppressedUntil?: number;\r\n  tags: string[];\r\n  fingerprint: string; // Para deduplicación\r\n  relatedAlerts: string[];\r\n  metrics?: {\r\n    value: number;\r\n    threshold: number;\r\n    unit: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Configuración de supresión\r\n */\r\nexport interface SuppressionRule {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  conditions: {\r\n    types?: AlertType[];\r\n    severities?: AlertSeverity[];\r\n    sources?: string[];\r\n    keywords?: string[];\r\n    timeWindows?: Array<{\r\n      start: string; // HH:MM\r\n      end: string;   // HH:MM\r\n      days: number[]; // 0-6 (domingo-sábado)\r\n    }>;\r\n  };\r\n  duration?: number; // minutos\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas de canales\r\n */\r\nexport const DEFAULT_CHANNEL_CONFIGS: AlertChannelConfig[] = [\r\n  {\r\n    channel: AlertChannel.EMAIL,\r\n    enabled: true,\r\n    config: {\r\n      recipients: ['admin@pinteya.com', 'dev@pinteya.com']\r\n    },\r\n    filters: {\r\n      severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n    },\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 10,\r\n      cooldownMinutes: 5\r\n    }\r\n  },\r\n  {\r\n    channel: AlertChannel.SLACK,\r\n    enabled: true,\r\n    config: {\r\n      webhookUrl: process.env.SLACK_WEBHOOK_URL,\r\n      slackChannel: '#alerts'\r\n    },\r\n    filters: {\r\n      severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n    },\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 20,\r\n      cooldownMinutes: 2\r\n    }\r\n  },\r\n  {\r\n    channel: AlertChannel.CONSOLE,\r\n    enabled: true,\r\n    config: {},\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 100,\r\n      cooldownMinutes: 0\r\n    }\r\n  }\r\n];\r\n\r\n/**\r\n * Política de escalación por defecto\r\n */\r\nexport const DEFAULT_ESCALATION_POLICY: EscalationPolicy = {\r\n  id: 'default',\r\n  name: 'Política de Escalación por Defecto',\r\n  enabled: true,\r\n  rules: [\r\n    {\r\n      level: 1,\r\n      delayMinutes: 0,\r\n      channels: [AlertChannel.SLACK, AlertChannel.CONSOLE],\r\n      conditions: {\r\n        severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n      }\r\n    },\r\n    {\r\n      level: 2,\r\n      delayMinutes: 15,\r\n      channels: [AlertChannel.EMAIL],\r\n      conditions: {\r\n        severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL],\r\n        unacknowledgedOnly: true\r\n      }\r\n    },\r\n    {\r\n      level: 3,\r\n      delayMinutes: 60,\r\n      channels: [AlertChannel.SMS],\r\n      conditions: {\r\n        severities: [AlertSeverity.CRITICAL],\r\n        unacknowledgedOnly: true\r\n      },\r\n      recipients: {\r\n        phones: ['+5491123456789'] // Número de emergencia\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Motor de alertas avanzado\r\n */\r\nexport class AdvancedAlertingEngine {\r\n  private static instance: AdvancedAlertingEngine;\r\n  private redis = getRedisClient();\r\n  private alerts: Map<string, AdvancedAlert> = new Map();\r\n  private channelConfigs: Map<AlertChannel, AlertChannelConfig> = new Map();\r\n  private escalationPolicies: Map<string, EscalationPolicy> = new Map();\r\n  private suppressionRules: Map<string, SuppressionRule> = new Map();\r\n  private escalationTimers: Map<string, NodeJS.Timeout> = new Map();\r\n  private rateLimitCounters: Map<string, { count: number; resetTime: number }> = new Map();\r\n\r\n  private constructor() {\r\n    this.initializeDefaultConfigs();\r\n  }\r\n\r\n  static getInstance(): AdvancedAlertingEngine {\r\n    if (!AdvancedAlertingEngine.instance) {\r\n      AdvancedAlertingEngine.instance = new AdvancedAlertingEngine();\r\n    }\r\n    return AdvancedAlertingEngine.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa configuraciones por defecto\r\n   */\r\n  private initializeDefaultConfigs(): void {\r\n    // Configurar canales por defecto\r\n    DEFAULT_CHANNEL_CONFIGS.forEach(config => {\r\n      this.channelConfigs.set(config.channel, config);\r\n    });\r\n\r\n    // Configurar política de escalación por defecto\r\n    this.escalationPolicies.set(DEFAULT_ESCALATION_POLICY.id, DEFAULT_ESCALATION_POLICY);\r\n\r\n    logger.info(LogCategory.MONITORING, 'Advanced Alerting Engine initialized');\r\n  }\r\n\r\n  /**\r\n   * Crea y procesa una nueva alerta\r\n   */\r\n  async createAlert(\r\n    type: AlertType,\r\n    severity: AlertSeverity,\r\n    title: string,\r\n    message: string,\r\n    details: Record<string, unknown> = {},\r\n    source: string = 'system',\r\n    tags: string[] = []\r\n  ): Promise<string> {\r\n    // Generar fingerprint para deduplicación\r\n    const fingerprint = this.generateFingerprint(type, title, source);\r\n    \r\n    // Verificar si ya existe una alerta similar activa\r\n    const existingAlert = this.findExistingAlert(fingerprint);\r\n    if (existingAlert && existingAlert.status === AlertStatus.ACTIVE) {\r\n      // Actualizar alerta existente en lugar de crear nueva\r\n      return this.updateExistingAlert(existingAlert.id, details);\r\n    }\r\n\r\n    // Verificar reglas de supresión\r\n    if (await this.isAlertSuppressed(type, severity, source, title)) {\r\n      logger.info(LogCategory.MONITORING, `Alert suppressed: ${title}`);\r\n      return '';\r\n    }\r\n\r\n    const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const alert: AdvancedAlert = {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      status: AlertStatus.ACTIVE,\r\n      title,\r\n      message,\r\n      details,\r\n      source,\r\n      timestamp: Date.now(),\r\n      escalationLevel: 0,\r\n      tags,\r\n      fingerprint,\r\n      relatedAlerts: []\r\n    };\r\n\r\n    this.alerts.set(alertId, alert);\r\n\r\n    // Persistir en Redis\r\n    await this.persistAlert(alert);\r\n\r\n    // Procesar alerta inmediatamente\r\n    await this.processAlert(alert);\r\n\r\n    // Programar escalación si es necesario\r\n    this.scheduleEscalation(alert);\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert created: ${title}`, {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      source\r\n    });\r\n\r\n    return alertId;\r\n  }\r\n\r\n  /**\r\n   * Procesa una alerta enviándola a los canales apropiados\r\n   */\r\n  private async processAlert(alert: AdvancedAlert): Promise<void> {\r\n    const applicableChannels = this.getApplicableChannels(alert);\r\n    \r\n    const sendPromises = applicableChannels.map(async (channelConfig) => {\r\n      try {\r\n        // Verificar rate limiting\r\n        if (!this.checkRateLimit(channelConfig)) {\r\n          logger.warn(LogCategory.MONITORING, `Rate limit exceeded for channel ${channelConfig.channel}`);\r\n          return;\r\n        }\r\n\r\n        await this.sendToChannel(alert, channelConfig);\r\n        this.updateRateLimit(channelConfig);\r\n        \r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, `Error sending alert to ${channelConfig.channel}`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(sendPromises);\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a un canal específico\r\n   */\r\n  private async sendToChannel(alert: AdvancedAlert, channelConfig: AlertChannelConfig): Promise<void> {\r\n    switch (channelConfig.channel) {\r\n      case AlertChannel.EMAIL:\r\n        await this.sendEmailAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.SLACK:\r\n        await this.sendSlackAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.WEBHOOK:\r\n        await this.sendWebhookAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.SMS:\r\n        await this.sendSMSAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.DISCORD:\r\n        await this.sendDiscordAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.TEAMS:\r\n        await this.sendTeamsAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.CONSOLE:\r\n        this.sendConsoleAlert(alert);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por email\r\n   */\r\n  private async sendEmailAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    // Implementación de envío de email\r\n    // En implementación real, usar nodemailer o servicio de email\r\n    logger.info(LogCategory.MONITORING, `Email alert sent: ${alert.title}`, {\r\n      recipients: config.config.recipients\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Slack\r\n   */\r\n  private async sendSlackAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.webhookUrl) {return;}\r\n\r\n    const payload = {\r\n      text: `🚨 ${this.getSeverityEmoji(alert.severity)} ${alert.title}`,\r\n      attachments: [\r\n        {\r\n          color: this.getSeverityColor(alert.severity),\r\n          fields: [\r\n            { title: 'Tipo', value: alert.type, short: true },\r\n            { title: 'Severidad', value: alert.severity, short: true },\r\n            { title: 'Fuente', value: alert.source, short: true },\r\n            { title: 'Timestamp', value: new Date(alert.timestamp).toISOString(), short: true }\r\n          ],\r\n          text: alert.message,\r\n          footer: `Alert ID: ${alert.id}`\r\n        }\r\n      ]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.webhookUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Slack webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Slack alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Slack alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por webhook\r\n   */\r\n  private async sendWebhookAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.url) {return;}\r\n\r\n    try {\r\n      const response = await fetch(config.config.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...config.config.headers\r\n        },\r\n        body: JSON.stringify({\r\n          alert,\r\n          timestamp: Date.now(),\r\n          source: 'pinteya-ecommerce'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Webhook alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending webhook alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por SMS\r\n   */\r\n  private async sendSMSAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    // Implementación de SMS (Twilio, AWS SNS, etc.)\r\n    logger.info(LogCategory.MONITORING, `SMS alert sent: ${alert.title}`, {\r\n      phones: config.config.phoneNumbers\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Discord\r\n   */\r\n  private async sendDiscordAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.discordWebhook) {return;}\r\n\r\n    const embed = {\r\n      title: `🚨 ${alert.title}`,\r\n      description: alert.message,\r\n      color: this.getSeverityColorHex(alert.severity),\r\n      fields: [\r\n        { name: 'Tipo', value: alert.type, inline: true },\r\n        { name: 'Severidad', value: alert.severity, inline: true },\r\n        { name: 'Fuente', value: alert.source, inline: true }\r\n      ],\r\n      timestamp: new Date(alert.timestamp).toISOString(),\r\n      footer: { text: `Alert ID: ${alert.id}` }\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.discordWebhook, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ embeds: [embed] })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Discord webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Discord alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Discord alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Teams\r\n   */\r\n  private async sendTeamsAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.teamsWebhook) {return;}\r\n\r\n    const card = {\r\n      \"@type\": \"MessageCard\",\r\n      \"@context\": \"http://schema.org/extensions\",\r\n      \"themeColor\": this.getSeverityColorHex(alert.severity),\r\n      \"summary\": alert.title,\r\n      \"sections\": [\r\n        {\r\n          \"activityTitle\": `🚨 ${alert.title}`,\r\n          \"activitySubtitle\": alert.message,\r\n          \"facts\": [\r\n            { \"name\": \"Tipo\", \"value\": alert.type },\r\n            { \"name\": \"Severidad\", \"value\": alert.severity },\r\n            { \"name\": \"Fuente\", \"value\": alert.source },\r\n            { \"name\": \"Timestamp\", \"value\": new Date(alert.timestamp).toISOString() }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.teamsWebhook, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(card)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Teams webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Teams alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Teams alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a consola\r\n   */\r\n  private sendConsoleAlert(alert: AdvancedAlert): void {\r\n    const emoji = this.getSeverityEmoji(alert.severity);\r\n    console.log(`${emoji} [${alert.severity.toUpperCase()}] ${alert.title}`);\r\n    console.log(`   Message: ${alert.message}`);\r\n    console.log(`   Source: ${alert.source} | Type: ${alert.type}`);\r\n    console.log(`   ID: ${alert.id} | Time: ${new Date(alert.timestamp).toISOString()}`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene canales aplicables para una alerta\r\n   */\r\n  private getApplicableChannels(alert: AdvancedAlert): AlertChannelConfig[] {\r\n    return Array.from(this.channelConfigs.values()).filter(config => {\r\n      if (!config.enabled) {return false;}\r\n\r\n      const { filters } = config;\r\n      if (!filters) {return true;}\r\n\r\n      // Filtrar por severidad\r\n      if (filters.severities && !filters.severities.includes(alert.severity)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtrar por tipo\r\n      if (filters.types && !filters.types.includes(alert.type)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtrar por keywords\r\n      if (filters.keywords) {\r\n        const text = `${alert.title} ${alert.message}`.toLowerCase();\r\n        const hasKeyword = filters.keywords.some(keyword => \r\n          text.includes(keyword.toLowerCase())\r\n        );\r\n        if (!hasKeyword) {return false;}\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verifica rate limiting\r\n   */\r\n  private checkRateLimit(config: AlertChannelConfig): boolean {\r\n    if (!config.rateLimiting) {return true;}\r\n\r\n    const key = `${config.channel}_rate_limit`;\r\n    const now = Date.now();\r\n    const counter = this.rateLimitCounters.get(key);\r\n\r\n    if (!counter || now > counter.resetTime) {\r\n      // Reset counter\r\n      this.rateLimitCounters.set(key, {\r\n        count: 0,\r\n        resetTime: now + (60 * 60 * 1000) // 1 hora\r\n      });\r\n      return true;\r\n    }\r\n\r\n    return counter.count < config.rateLimiting.maxAlertsPerHour;\r\n  }\r\n\r\n  /**\r\n   * Actualiza contador de rate limiting\r\n   */\r\n  private updateRateLimit(config: AlertChannelConfig): void {\r\n    if (!config.rateLimiting) {return;}\r\n\r\n    const key = `${config.channel}_rate_limit`;\r\n    const counter = this.rateLimitCounters.get(key);\r\n    \r\n    if (counter) {\r\n      counter.count++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa escalación de alerta\r\n   */\r\n  private scheduleEscalation(alert: AdvancedAlert): void {\r\n    const policy = this.escalationPolicies.get('default');\r\n    if (!policy || !policy.enabled) {return;}\r\n\r\n    const nextRule = policy.rules.find(rule => rule.level > alert.escalationLevel);\r\n    if (!nextRule) {return;}\r\n\r\n    const delay = nextRule.delayMinutes * 60 * 1000;\r\n    \r\n    const timer = setTimeout(async () => {\r\n      await this.escalateAlert(alert.id, nextRule);\r\n    }, delay);\r\n\r\n    this.escalationTimers.set(alert.id, timer);\r\n  }\r\n\r\n  /**\r\n   * Escala una alerta\r\n   */\r\n  private async escalateAlert(alertId: string, rule: EscalationRule): Promise<void> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {return;}\r\n\r\n    // Verificar condiciones de escalación\r\n    if (rule.conditions?.unacknowledgedOnly && alert.status === AlertStatus.ACKNOWLEDGED) {\r\n      return;\r\n    }\r\n\r\n    if (rule.conditions?.severities && !rule.conditions.severities.includes(alert.severity)) {\r\n      return;\r\n    }\r\n\r\n    if (rule.conditions?.types && !rule.conditions.types.includes(alert.type)) {\r\n      return;\r\n    }\r\n\r\n    // Actualizar nivel de escalación\r\n    alert.escalationLevel = rule.level;\r\n    alert.escalatedAt = Date.now();\r\n\r\n    // Enviar a canales de escalación\r\n    const escalationChannels = rule.channels.map(channel => \r\n      this.channelConfigs.get(channel)\r\n    ).filter(Boolean) as AlertChannelConfig[];\r\n\r\n    for (const channelConfig of escalationChannels) {\r\n      await this.sendToChannel(alert, channelConfig);\r\n    }\r\n\r\n    // Programar siguiente escalación\r\n    this.scheduleEscalation(alert);\r\n\r\n    logger.warn(LogCategory.MONITORING, `Alert escalated to level ${rule.level}: ${alert.title}`, {\r\n      alertId,\r\n      level: rule.level\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  acknowledgeAlert(alertId: string, acknowledgedBy: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {return false;}\r\n\r\n    alert.status = AlertStatus.ACKNOWLEDGED;\r\n    alert.acknowledgedBy = acknowledgedBy;\r\n    alert.acknowledgedAt = Date.now();\r\n\r\n    // Cancelar escalación\r\n    const timer = this.escalationTimers.get(alertId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.escalationTimers.delete(alertId);\r\n    }\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert acknowledged: ${alert.title}`, {\r\n      alertId,\r\n      acknowledgedBy\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string, resolvedBy: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status === AlertStatus.RESOLVED) {return false;}\r\n\r\n    alert.status = AlertStatus.RESOLVED;\r\n    alert.resolvedBy = resolvedBy;\r\n    alert.resolvedAt = Date.now();\r\n\r\n    // Cancelar escalación\r\n    const timer = this.escalationTimers.get(alertId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.escalationTimers.delete(alertId);\r\n    }\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert resolved: ${alert.title}`, {\r\n      alertId,\r\n      resolvedBy\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Suprime una alerta\r\n   */\r\n  suppressAlert(alertId: string, durationMinutes: number, reason: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert) {return false;}\r\n\r\n    alert.status = AlertStatus.SUPPRESSED;\r\n    alert.suppressedUntil = Date.now() + (durationMinutes * 60 * 1000);\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert suppressed: ${alert.title}`, {\r\n      alertId,\r\n      durationMinutes,\r\n      reason\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Obtiene alertas activas\r\n   */\r\n  getActiveAlerts(): AdvancedAlert[] {\r\n    return Array.from(this.alerts.values()).filter(alert => \r\n      alert.status === AlertStatus.ACTIVE || alert.status === AlertStatus.ACKNOWLEDGED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de alertas\r\n   */\r\n  getAlertStats(): {\r\n    total: number;\r\n    active: number;\r\n    acknowledged: number;\r\n    resolved: number;\r\n    suppressed: number;\r\n    bySeverity: Record<AlertSeverity, number>;\r\n    byType: Record<AlertType, number>;\r\n  } {\r\n    const alerts = Array.from(this.alerts.values());\r\n    \r\n    const stats = {\r\n      total: alerts.length,\r\n      active: 0,\r\n      acknowledged: 0,\r\n      resolved: 0,\r\n      suppressed: 0,\r\n      bySeverity: {\r\n        [AlertSeverity.LOW]: 0,\r\n        [AlertSeverity.MEDIUM]: 0,\r\n        [AlertSeverity.HIGH]: 0,\r\n        [AlertSeverity.CRITICAL]: 0\r\n      },\r\n      byType: {\r\n        [AlertType.PERFORMANCE]: 0,\r\n        [AlertType.ERROR]: 0,\r\n        [AlertType.CAPACITY]: 0,\r\n        [AlertType.AVAILABILITY]: 0,\r\n        [AlertType.SECURITY]: 0,\r\n        [AlertType.BUSINESS]: 0\r\n      }\r\n    };\r\n\r\n    alerts.forEach(alert => {\r\n      switch (alert.status) {\r\n        case AlertStatus.ACTIVE:\r\n          stats.active++;\r\n          break;\r\n        case AlertStatus.ACKNOWLEDGED:\r\n          stats.acknowledged++;\r\n          break;\r\n        case AlertStatus.RESOLVED:\r\n          stats.resolved++;\r\n          break;\r\n        case AlertStatus.SUPPRESSED:\r\n          stats.suppressed++;\r\n          break;\r\n      }\r\n\r\n      stats.bySeverity[alert.severity]++;\r\n      stats.byType[alert.type]++;\r\n    });\r\n\r\n    return stats;\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS AUXILIARES\r\n  // ===================================\r\n\r\n  private generateFingerprint(type: AlertType, title: string, source: string): string {\r\n    const content = `${type}:${title}:${source}`;\r\n    return Buffer.from(content).toString('base64').slice(0, 16);\r\n  }\r\n\r\n  private findExistingAlert(fingerprint: string): AdvancedAlert | undefined {\r\n    return Array.from(this.alerts.values()).find(alert => \r\n      alert.fingerprint === fingerprint && alert.status === AlertStatus.ACTIVE\r\n    );\r\n  }\r\n\r\n  private async updateExistingAlert(alertId: string, newDetails: Record<string, unknown>): Promise<string> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert) {\r\n      alert.details = { ...alert.details, ...newDetails };\r\n      alert.timestamp = Date.now(); // Actualizar timestamp\r\n      await this.persistAlert(alert);\r\n    }\r\n    return alertId;\r\n  }\r\n\r\n  private async isAlertSuppressed(\r\n    type: AlertType,\r\n    severity: AlertSeverity,\r\n    source: string,\r\n    title: string\r\n  ): Promise<boolean> {\r\n    // Verificar reglas de supresión\r\n    for (const rule of this.suppressionRules.values()) {\r\n      if (!rule.enabled) {continue;}\r\n\r\n      const { conditions } = rule;\r\n      \r\n      if (conditions.types && !conditions.types.includes(type)) {continue;}\r\n      if (conditions.severities && !conditions.severities.includes(severity)) {continue;}\r\n      if (conditions.sources && !conditions.sources.includes(source)) {continue;}\r\n      \r\n      if (conditions.keywords) {\r\n        const text = title.toLowerCase();\r\n        const hasKeyword = conditions.keywords.some(keyword => \r\n          text.includes(keyword.toLowerCase())\r\n        );\r\n        if (!hasKeyword) {continue;}\r\n      }\r\n\r\n      // Verificar ventanas de tiempo\r\n      if (conditions.timeWindows) {\r\n        const now = new Date();\r\n        const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n        const currentDay = now.getDay();\r\n        \r\n        const inTimeWindow = conditions.timeWindows.some(window => {\r\n          return window.days.includes(currentDay) &&\r\n                 currentTime >= window.start &&\r\n                 currentTime <= window.end;\r\n        });\r\n        \r\n        if (!inTimeWindow) {continue;}\r\n      }\r\n\r\n      return true; // Alerta suprimida\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private async persistAlert(alert: AdvancedAlert): Promise<void> {\r\n    try {\r\n      await this.redis.setex(\r\n        `alert:${alert.id}`,\r\n        86400 * 30, // 30 días\r\n        JSON.stringify(alert)\r\n      );\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error);\r\n    }\r\n  }\r\n\r\n  private getSeverityEmoji(severity: AlertSeverity): string {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return '🟡';\r\n      case AlertSeverity.MEDIUM: return '🟠';\r\n      case AlertSeverity.HIGH: return '🔴';\r\n      case AlertSeverity.CRITICAL: return '🚨';\r\n      default: return '⚪';\r\n    }\r\n  }\r\n\r\n  private getSeverityColor(severity: AlertSeverity): string {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return '#ffeb3b';\r\n      case AlertSeverity.MEDIUM: return '#ff9800';\r\n      case AlertSeverity.HIGH: return '#f44336';\r\n      case AlertSeverity.CRITICAL: return '#d32f2f';\r\n      default: return '#9e9e9e';\r\n    }\r\n  }\r\n\r\n  private getSeverityColorHex(severity: AlertSeverity): number {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return 0xffeb3b;\r\n      case AlertSeverity.MEDIUM: return 0xff9800;\r\n      case AlertSeverity.HIGH: return 0xf44336;\r\n      case AlertSeverity.CRITICAL: return 0xd32f2f;\r\n      default: return 0x9e9e9e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configurar canales de alerta\r\n   */\r\n  configureChannel(channel: AlertChannel, config: Partial<AlertChannelConfig>): void {\r\n    const existing = this.channelConfigs.get(channel) || {\r\n      channel,\r\n      enabled: false,\r\n      config: {}\r\n    };\r\n\r\n    this.channelConfigs.set(channel, { ...existing, ...config });\r\n    logger.info(LogCategory.MONITORING, `Alert channel configured: ${channel}`);\r\n  }\r\n\r\n  /**\r\n   * Configurar política de escalación\r\n   */\r\n  configureEscalationPolicy(policy: EscalationPolicy): void {\r\n    this.escalationPolicies.set(policy.id, policy);\r\n    logger.info(LogCategory.MONITORING, `Escalation policy configured: ${policy.name}`);\r\n  }\r\n\r\n  /**\r\n   * Agregar regla de supresión\r\n   */\r\n  addSuppressionRule(rule: SuppressionRule): void {\r\n    this.suppressionRules.set(rule.id, rule);\r\n    logger.info(LogCategory.MONITORING, `Suppression rule added: ${rule.name}`);\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    this.escalationTimers.forEach(timer => clearTimeout(timer));\r\n    this.escalationTimers.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const advancedAlertingEngine = AdvancedAlertingEngine.getInstance();\r\n\r\n/**\r\n * Utilidades para alertas avanzadas\r\n */\r\nexport const AdvancedAlertingUtils = {\r\n  /**\r\n   * Crea alerta de performance\r\n   */\r\n  async createPerformanceAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.PERFORMANCE,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'performance-monitor'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Crea alerta de error\r\n   */\r\n  async createErrorAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.HIGH,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.ERROR,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'error-tracker'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Crea alerta de capacidad\r\n   */\r\n  async createCapacityAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.CAPACITY,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'capacity-monitor'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen de alertas\r\n   */\r\n  getAlertSummary(): {\r\n    activeCount: number;\r\n    criticalCount: number;\r\n    lastAlert?: AdvancedAlert;\r\n  } {\r\n    const activeAlerts = advancedAlertingEngine.getActiveAlerts();\r\n    const criticalAlerts = activeAlerts.filter(a => a.severity === AlertSeverity.CRITICAL);\r\n    const lastAlert = activeAlerts.sort((a, b) => b.timestamp - a.timestamp)[0];\r\n\r\n    return {\r\n      activeCount: activeAlerts.length,\r\n      criticalCount: criticalAlerts.length,\r\n      lastAlert\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}