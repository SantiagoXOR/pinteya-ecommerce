{"version":3,"names":["RETRY_CONFIGS","cov_2bxgtlpwaz","f","s","createRetryFunction","retryMercadoPagoOperation","retryWebhookOperation","retryWithBackoff","MERCADOPAGO_CRITICAL","maxRetries","baseDelayMs","maxDelayMs","backoffMultiplier","jitterMs","retryableErrors","nonRetryableErrors","MERCADOPAGO_QUERY","WEBHOOK_PROCESSING","calculateDelay","attempt","config","exponentialDelay","Math","pow","cappedDelay","min","jitter","random","floor","isRetryableError","error","errorMessage","b","message","toLowerCase","errorName","name","nonRetryableError","includes","retryableError","extractErrorInfo","networkErrors","isNetwork","some","netError","statusMatch","match","statusCode","parseInt","undefined","type","code","toString","operation","operationName","startTime","Date","now","lastError","attempts","_logger","logger","info","LogCategory","API","attemptStart","result","attemptDuration","totalDuration","_metrics","metricsCollector","recordRetry","success","data","lastAttemptDuration","errorInfo","attemptInfo","delay","duration","warn","Promise","resolve","setTimeout","isCritical"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\retry-logic.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RETRY LOGIC WITH EXPONENTIAL BACKOFF\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\nimport { metricsCollector } from './enterprise/metrics';\r\n\r\n// Configuración de retry\r\nexport interface RetryConfig {\r\n  maxRetries: number;           // Máximo número de reintentos\r\n  baseDelayMs: number;          // Delay base en milisegundos\r\n  maxDelayMs: number;           // Delay máximo en milisegundos\r\n  backoffMultiplier: number;    // Multiplicador para backoff exponencial\r\n  jitterMs: number;             // Jitter máximo en milisegundos\r\n  retryableErrors: string[];    // Códigos de error que permiten retry\r\n  nonRetryableErrors: string[]; // Códigos de error que NO permiten retry\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const RETRY_CONFIGS: Record<string, RetryConfig> = {\r\n  // Para llamadas críticas a MercadoPago\r\n  MERCADOPAGO_CRITICAL: {\r\n    maxRetries: 3,\r\n    baseDelayMs: 1000,        // 1 segundo\r\n    maxDelayMs: 30000,        // 30 segundos\r\n    backoffMultiplier: 2,\r\n    jitterMs: 500,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ENOTFOUND',\r\n      'ECONNREFUSED',\r\n      'ETIMEDOUT',\r\n      'NETWORK_ERROR',\r\n      'TIMEOUT',\r\n      '500',\r\n      '502',\r\n      '503',\r\n      '504',\r\n      '429'  // Rate limit - retry después de delay\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',  // Bad Request\r\n      '401',  // Unauthorized\r\n      '403',  // Forbidden\r\n      '404',  // Not Found\r\n      '422',  // Unprocessable Entity\r\n      'INVALID_CREDENTIALS',\r\n      'INVALID_REQUEST',\r\n      'PAYMENT_REJECTED'\r\n    ]\r\n  },\r\n\r\n  // Para operaciones de consulta menos críticas\r\n  MERCADOPAGO_QUERY: {\r\n    maxRetries: 2,\r\n    baseDelayMs: 500,         // 0.5 segundos\r\n    maxDelayMs: 10000,        // 10 segundos\r\n    backoffMultiplier: 2,\r\n    jitterMs: 250,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ENOTFOUND',\r\n      'ETIMEDOUT',\r\n      '500',\r\n      '502',\r\n      '503',\r\n      '504'\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',\r\n      '401',\r\n      '403',\r\n      '404',\r\n      '422'\r\n    ]\r\n  },\r\n\r\n  // Para webhooks (menos agresivo)\r\n  WEBHOOK_PROCESSING: {\r\n    maxRetries: 1,\r\n    baseDelayMs: 2000,        // 2 segundos\r\n    maxDelayMs: 5000,         // 5 segundos\r\n    backoffMultiplier: 1.5,\r\n    jitterMs: 1000,\r\n    retryableErrors: [\r\n      'ECONNRESET',\r\n      'ETIMEDOUT',\r\n      '500',\r\n      '503'\r\n    ],\r\n    nonRetryableErrors: [\r\n      '400',\r\n      '401',\r\n      '403',\r\n      '404',\r\n      '422',\r\n      'DUPLICATE_WEBHOOK'\r\n    ]\r\n  }\r\n} as const;\r\n\r\n// Resultado del retry\r\nexport interface RetryResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: Error;\r\n  attempts: number;\r\n  totalDuration: number;\r\n  lastAttemptDuration: number;\r\n}\r\n\r\n// Información del intento\r\nexport interface AttemptInfo {\r\n  attempt: number;\r\n  maxRetries: number;\r\n  delay: number;\r\n  error?: Error;\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Calcula el delay para el siguiente intento usando backoff exponencial con jitter\r\n */\r\nfunction calculateDelay(\r\n  attempt: number, \r\n  config: RetryConfig\r\n): number {\r\n  // Backoff exponencial: baseDelay * (multiplier ^ attempt)\r\n  const exponentialDelay = config.baseDelayMs * Math.pow(config.backoffMultiplier, attempt);\r\n  \r\n  // Aplicar límite máximo\r\n  const cappedDelay = Math.min(exponentialDelay, config.maxDelayMs);\r\n  \r\n  // Agregar jitter aleatorio para evitar thundering herd\r\n  const jitter = Math.random() * config.jitterMs;\r\n  \r\n  return Math.floor(cappedDelay + jitter);\r\n}\r\n\r\n/**\r\n * Determina si un error es reintentable\r\n */\r\nfunction isRetryableError(error: Error, config: RetryConfig): boolean {\r\n  const errorMessage = (error.message || '').toLowerCase();\r\n  const errorName = (error.name || '').toLowerCase();\r\n  \r\n  // Verificar errores no reintenables primero (tienen prioridad)\r\n  for (const nonRetryableError of config.nonRetryableErrors) {\r\n    if (errorMessage.includes(nonRetryableError.toLowerCase()) ||\r\n        errorName.includes(nonRetryableError.toLowerCase())) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Verificar errores reintenables\r\n  for (const retryableError of config.retryableErrors) {\r\n    if (errorMessage.includes(retryableError.toLowerCase()) ||\r\n        errorName.includes(retryableError.toLowerCase())) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // Por defecto, no reintentar errores desconocidos\r\n  return false;\r\n}\r\n\r\n/**\r\n * Extrae información del error para logging\r\n */\r\nfunction extractErrorInfo(error: Error): {\r\n  type: string;\r\n  code?: string;\r\n  statusCode?: number;\r\n  isNetwork: boolean;\r\n} {\r\n  const message = (error.message || '').toLowerCase();\r\n  const name = (error.name || '').toLowerCase();\r\n  \r\n  // Detectar errores de red\r\n  const networkErrors = ['econnreset', 'enotfound', 'econnrefused', 'etimedout'];\r\n  const isNetwork = networkErrors.some(netError => \r\n    message.includes(netError) || name.includes(netError)\r\n  );\r\n  \r\n  // Extraer código de estado HTTP si existe\r\n  const statusMatch = message.match(/(\\d{3})/);\r\n  const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\r\n  \r\n  return {\r\n    type: name || 'unknown',\r\n    code: statusCode?.toString(),\r\n    statusCode,\r\n    isNetwork\r\n  };\r\n}\r\n\r\n/**\r\n * Función principal de retry con backoff exponencial\r\n */\r\nexport async function retryWithBackoff<T>(\r\n  operation: () => Promise<T>,\r\n  config: RetryConfig,\r\n  operationName: string = 'unknown'\r\n): Promise<RetryResult<T>> {\r\n  const startTime = Date.now();\r\n  let lastError: Error | undefined;\r\n  let attempts = 0;\r\n\r\n  logger.info(LogCategory.API, `Starting retry operation: ${operationName}`);\r\n\r\n  for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\r\n    attempts = attempt + 1;\r\n    const attemptStart = Date.now();\r\n\r\n    try {\r\n      logger.info(LogCategory.API, `Retry attempt ${attempts}/${config.maxRetries + 1} for ${operationName}`);\r\n      \r\n      const result = await operation();\r\n      const attemptDuration = Date.now() - attemptStart;\r\n      const totalDuration = Date.now() - startTime;\r\n\r\n      logger.info(LogCategory.API, `Retry operation succeeded: ${operationName}`);\r\n\r\n      // ✅ NUEVO: Registrar métricas de retry exitoso\r\n      await metricsCollector.recordRetry(operationName, attempts, true, totalDuration);\r\n\r\n      return {\r\n        success: true,\r\n        data: result,\r\n        attempts,\r\n        totalDuration,\r\n        lastAttemptDuration: attemptDuration,\r\n      };\r\n\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      const attemptDuration = Date.now() - attemptStart;\r\n      const errorInfo = extractErrorInfo(lastError);\r\n\r\n      const attemptInfo: AttemptInfo = {\r\n        attempt: attempts,\r\n        maxRetries: config.maxRetries + 1,\r\n        delay: 0,\r\n        error: lastError,\r\n        duration: attemptDuration,\r\n      };\r\n\r\n      // Log del intento fallido\r\n      logger.warn(LogCategory.API, `Retry attempt ${attempts} failed for ${operationName}`);\r\n\r\n      // Si es el último intento, no calcular delay\r\n      if (attempt === config.maxRetries) {\r\n        break;\r\n      }\r\n\r\n      // Verificar si el error es reintentable\r\n      if (!isRetryableError(lastError, config)) {\r\n        logger.error(LogCategory.API, `Non-retryable error for ${operationName}`, lastError);\r\n        break;\r\n      }\r\n\r\n      // Calcular delay para el siguiente intento\r\n      const delay = calculateDelay(attempt, config);\r\n      attemptInfo.delay = delay;\r\n\r\n      logger.info(LogCategory.API, `Retrying ${operationName} in ${delay}ms`);\r\n\r\n      // Esperar antes del siguiente intento\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  // Todos los intentos fallaron\r\n  const totalDuration = Date.now() - startTime;\r\n  \r\n  logger.error(LogCategory.API, `All retry attempts failed for ${operationName}`, lastError!);\r\n\r\n  // ✅ NUEVO: Registrar métricas de retry fallido\r\n  await metricsCollector.recordRetry(operationName, attempts, false, totalDuration);\r\n\r\n  return {\r\n    success: false,\r\n    error: lastError,\r\n    attempts,\r\n    totalDuration,\r\n    lastAttemptDuration: 0,\r\n  };\r\n}\r\n\r\n/**\r\n * Wrapper específico para operaciones de MercadoPago\r\n */\r\nexport async function retryMercadoPagoOperation<T>(\r\n  operation: () => Promise<T>,\r\n  operationName: string,\r\n  isCritical: boolean = true\r\n): Promise<RetryResult<T>> {\r\n  const config = isCritical ? RETRY_CONFIGS.MERCADOPAGO_CRITICAL : RETRY_CONFIGS.MERCADOPAGO_QUERY;\r\n  \r\n  return retryWithBackoff(operation, config, `MercadoPago:${operationName}`);\r\n}\r\n\r\n/**\r\n * Wrapper para operaciones de webhook\r\n */\r\nexport async function retryWebhookOperation<T>(\r\n  operation: () => Promise<T>,\r\n  operationName: string\r\n): Promise<RetryResult<T>> {\r\n  return retryWithBackoff(operation, RETRY_CONFIGS.WEBHOOK_PROCESSING, `Webhook:${operationName}`);\r\n}\r\n\r\n/**\r\n * Función de utilidad para crear un retry personalizado\r\n */\r\nexport function createRetryFunction<T>(\r\n  config: RetryConfig,\r\n  operationName: string\r\n) {\r\n  return (operation: () => Promise<T>): Promise<RetryResult<T>> => {\r\n    return retryWithBackoff(operation, config, operationName);\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsiBaA,cAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,aAAA;;MAwSGI,oBAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,mBAAA;;MAvBMC,0BAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,yBAAA;;MAaAC,sBAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAG,qBAAA;;MA1GAC,iBAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAI,gBAAA;;;;;kCAnMwB;;;mCACb;AAc1B,MAAMP,aAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAA6C;EACxD;EACAK,oBAAA,EAAsB;IACpBC,UAAA,EAAY;IACZC,WAAA,EAAa;IACbC,UAAA,EAAY;IACZC,iBAAA,EAAmB;IACnBC,QAAA,EAAU;IACVC,eAAA,EAAiB,CACf,cACA,aACA,gBACA,aACA,iBACA,WACA,OACA,OACA,OACA,OACA,MAAO;IAAA,CACR;IACDC,kBAAA,EAAoB,CAClB,OACA,OACA,OACA,OACA,OACA,uBACA,mBACA;EAEJ;EAEA;EACAC,iBAAA,EAAmB;IACjBP,UAAA,EAAY;IACZC,WAAA,EAAa;IACbC,UAAA,EAAY;IACZC,iBAAA,EAAmB;IACnBC,QAAA,EAAU;IACVC,eAAA,EAAiB,CACf,cACA,aACA,aACA,OACA,OACA,OACA,MACD;IACDC,kBAAA,EAAoB,CAClB,OACA,OACA,OACA,OACA;EAEJ;EAEA;EACAE,kBAAA,EAAoB;IAClBR,UAAA,EAAY;IACZC,WAAA,EAAa;IACbC,UAAA,EAAY;IACZC,iBAAA,EAAmB;IACnBC,QAAA,EAAU;IACVC,eAAA,EAAiB,CACf,cACA,aACA,OACA,MACD;IACDC,kBAAA,EAAoB,CAClB,OACA,OACA,OACA,OACA,OACA;EAEJ;AACF;AAqBA;;;AAGA,SAASG,eACPC,OAAe,EACfC,MAAmB;EAAA;EAAAnB,cAAA,GAAAC,CAAA;EAEnB;EACA,MAAMmB,gBAAA;EAAA;EAAA,CAAApB,cAAA,GAAAE,CAAA,QAAmBiB,MAAA,CAAOV,WAAW,GAAGY,IAAA,CAAKC,GAAG,CAACH,MAAA,CAAOR,iBAAiB,EAAEO,OAAA;EAEjF;EACA,MAAMK,WAAA;EAAA;EAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAcmB,IAAA,CAAKG,GAAG,CAACJ,gBAAA,EAAkBD,MAAA,CAAOT,UAAU;EAEhE;EACA,MAAMe,MAAA;EAAA;EAAA,CAAAzB,cAAA,GAAAE,CAAA,QAASmB,IAAA,CAAKK,MAAM,KAAKP,MAAA,CAAOP,QAAQ;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EAE9C,OAAOmB,IAAA,CAAKM,KAAK,CAACJ,WAAA,GAAcE,MAAA;AAClC;AAEA;;;AAGA,SAASG,iBAAiBC,KAAY,EAAEV,MAAmB;EAAA;EAAAnB,cAAA,GAAAC,CAAA;EACzD,MAAM6B,YAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAe;EAAC;EAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAF,KAAA,CAAMG,OAAO;EAAA;EAAA,CAAAhC,cAAA,GAAA+B,CAAA,UAAI,EAAC,GAAGE,WAAW;EACtD,MAAMC,SAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAY;EAAC;EAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAF,KAAA,CAAMM,IAAI;EAAA;EAAA,CAAAnC,cAAA,GAAA+B,CAAA,UAAI,EAAC,GAAGE,WAAW;EAEhD;EAAA;EAAAjC,cAAA,GAAAE,CAAA;EACA,KAAK,MAAMkC,iBAAA,IAAqBjB,MAAA,CAAOL,kBAAkB,EAAE;IAAA;IAAAd,cAAA,GAAAE,CAAA;IACzD;IAAI;IAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAD,YAAA,CAAaO,QAAQ,CAACD,iBAAA,CAAkBH,WAAW;IAAA;IAAA,CAAAjC,cAAA,GAAA+B,CAAA,UACnDG,SAAA,CAAUG,QAAQ,CAACD,iBAAA,CAAkBH,WAAW,MAAK;MAAA;MAAAjC,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAE,CAAA;MACvD,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAA+B,CAAA;IAAA;EACF;EAEA;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EACA,KAAK,MAAMoC,cAAA,IAAkBnB,MAAA,CAAON,eAAe,EAAE;IAAA;IAAAb,cAAA,GAAAE,CAAA;IACnD;IAAI;IAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAD,YAAA,CAAaO,QAAQ,CAACC,cAAA,CAAeL,WAAW;IAAA;IAAA,CAAAjC,cAAA,GAAA+B,CAAA,UAChDG,SAAA,CAAUG,QAAQ,CAACC,cAAA,CAAeL,WAAW,MAAK;MAAA;MAAAjC,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAE,CAAA;MACpD,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAA+B,CAAA;IAAA;EACF;EAEA;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EACA,OAAO;AACT;AAEA;;;AAGA,SAASqC,iBAAiBV,KAAY;EAAA;EAAA7B,cAAA,GAAAC,CAAA;EAMpC,MAAM+B,OAAA;EAAA;EAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAU;EAAC;EAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAF,KAAA,CAAMG,OAAO;EAAA;EAAA,CAAAhC,cAAA,GAAA+B,CAAA,UAAI,EAAC,GAAGE,WAAW;EACjD,MAAME,IAAA;EAAA;EAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAO;EAAC;EAAA,CAAAF,cAAA,GAAA+B,CAAA,UAAAF,KAAA,CAAMM,IAAI;EAAA;EAAA,CAAAnC,cAAA,GAAA+B,CAAA,UAAI,EAAC,GAAGE,WAAW;EAE3C;EACA,MAAMO,aAAA;EAAA;EAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAgB,CAAC,cAAc,aAAa,gBAAgB,YAAY;EAC9E,MAAMuC,SAAA;EAAA;EAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAYsC,aAAA,CAAcE,IAAI,CAACC,QAAA,IACnC;IAAA;IAAA3C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,kCAAAF,cAAA,GAAA+B,CAAA,UAAAC,OAAA,CAAQK,QAAQ,CAACM,QAAA;IAAA;IAAA,CAAA3C,cAAA,GAAA+B,CAAA,UAAaI,IAAA,CAAKE,QAAQ,CAACM,QAAA;EAAA;EAG9C;EACA,MAAMC,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAc8B,OAAA,CAAQa,KAAK,CAAC;EAClC,MAAMC,UAAA;EAAA;EAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAa0C,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAA+B,CAAA,UAAcgB,QAAA,CAASH,WAAW,CAAC,EAAE;EAAA;EAAA,CAAA5C,cAAA,GAAA+B,CAAA,UAAIiB,SAAA;EAAA;EAAAhD,cAAA,GAAAE,CAAA;EAE5D,OAAO;IACL+C,IAAA;IAAM;IAAA,CAAAjD,cAAA,GAAA+B,CAAA,WAAAI,IAAA;IAAA;IAAA,CAAAnC,cAAA,GAAA+B,CAAA,WAAQ;IACdmB,IAAA,EAAMJ,UAAA,EAAYK,QAAA;IAClBL,UAAA;IACAL;EACF;AACF;AAKO,eAAenC,iBACpB8C,SAA2B,EAC3BjC,MAAmB,EACnBkC,aAAA;AAAA;AAAA,CAAArD,cAAA,GAAA+B,CAAA,WAAwB,SAAS;EAAA;EAAA/B,cAAA,GAAAC,CAAA;EAEjC,MAAMqD,SAAA;EAAA;EAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAYqD,IAAA,CAAKC,GAAG;EAC1B,IAAIC,SAAA;EACJ,IAAIC,QAAA;EAAA;EAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAW;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAEfyD,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,6BAA6BV,aAAA,EAAe;EAAA;EAAArD,cAAA,GAAAE,CAAA;EAEzE,KAAK,IAAIgB,OAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAU,IAAGgB,OAAA,IAAWC,MAAA,CAAOX,UAAU,EAAEU,OAAA,IAAW;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAC7DwD,QAAA,GAAWxC,OAAA,GAAU;IACrB,MAAM8C,YAAA;IAAA;IAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAeqD,IAAA,CAAKC,GAAG;IAAA;IAAAxD,cAAA,GAAAE,CAAA;IAE7B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFyD,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,iBAAiBL,QAAA,IAAYvC,MAAA,CAAOX,UAAU,GAAG,SAAS6C,aAAA,EAAe;MAEtG,MAAMY,MAAA;MAAA;MAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAS,MAAMkD,SAAA;MACrB,MAAMc,eAAA;MAAA;MAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAkBqD,IAAA,CAAKC,GAAG,KAAKQ,YAAA;MACrC,MAAMG,aAAA;MAAA;MAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAgBqD,IAAA,CAAKC,GAAG,KAAKF,SAAA;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MAEnCyD,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,8BAA8BV,aAAA,EAAe;MAE1E;MAAA;MAAArD,cAAA,GAAAE,CAAA;MACA,MAAMkE,QAAA,CAAAC,gBAAgB,CAACC,WAAW,CAACjB,aAAA,EAAeK,QAAA,EAAU,MAAMS,aAAA;MAAA;MAAAnE,cAAA,GAAAE,CAAA;MAElE,OAAO;QACLqE,OAAA,EAAS;QACTC,IAAA,EAAMP,MAAA;QACNP,QAAA;QACAS,aAAA;QACAM,mBAAA,EAAqBP;MACvB;IAEF,EAAE,OAAOrC,KAAA,EAAO;MAAA;MAAA7B,cAAA,GAAAE,CAAA;MACduD,SAAA,GAAY5B,KAAA;MACZ,MAAMqC,eAAA;MAAA;MAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAkBqD,IAAA,CAAKC,GAAG,KAAKQ,YAAA;MACrC,MAAMU,SAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAYqC,gBAAA,CAAiBkB,SAAA;MAEnC,MAAMkB,WAAA;MAAA;MAAA,CAAA3E,cAAA,GAAAE,CAAA,QAA2B;QAC/BgB,OAAA,EAASwC,QAAA;QACTlD,UAAA,EAAYW,MAAA,CAAOX,UAAU,GAAG;QAChCoE,KAAA,EAAO;QACP/C,KAAA,EAAO4B,SAAA;QACPoB,QAAA,EAAUX;MACZ;MAEA;MAAA;MAAAlE,cAAA,GAAAE,CAAA;MACAyD,OAAA,CAAAC,MAAM,CAACkB,IAAI,CAACnB,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,iBAAiBL,QAAA,eAAuBL,aAAA,EAAe;MAEpF;MAAA;MAAArD,cAAA,GAAAE,CAAA;MACA,IAAIgB,OAAA,KAAYC,MAAA,CAAOX,UAAU,EAAE;QAAA;QAAAR,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAE,CAAA;QACjC;MACF;MAAA;MAAA;QAAAF,cAAA,GAAA+B,CAAA;MAAA;MAEA;MAAA/B,cAAA,GAAAE,CAAA;MACA,IAAI,CAAC0B,gBAAA,CAAiB6B,SAAA,EAAWtC,MAAA,GAAS;QAAA;QAAAnB,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAE,CAAA;QACxCyD,OAAA,CAAAC,MAAM,CAAC/B,KAAK,CAAC8B,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,2BAA2BV,aAAA,EAAe,EAAEI,SAAA;QAAA;QAAAzD,cAAA,GAAAE,CAAA;QAC1E;MACF;MAAA;MAAA;QAAAF,cAAA,GAAA+B,CAAA;MAAA;MAEA;MACA,MAAM6C,KAAA;MAAA;MAAA,CAAA5E,cAAA,GAAAE,CAAA,QAAQe,cAAA,CAAeC,OAAA,EAASC,MAAA;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MACtCyE,WAAA,CAAYC,KAAK,GAAGA,KAAA;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MAEpByD,OAAA,CAAAC,MAAM,CAACC,IAAI,CAACF,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,YAAYV,aAAA,OAAoBuB,KAAA,IAAS;MAEtE;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MACA,MAAM,IAAI6E,OAAA,CAAQC,OAAA,IAAW;QAAA;QAAAhF,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAA+E,UAAA,CAAWD,OAAA,EAASJ,KAAA;MAAA;IACnD;EACF;EAEA;EACA,MAAMT,aAAA;EAAA;EAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAgBqD,IAAA,CAAKC,GAAG,KAAKF,SAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAEnCyD,OAAA,CAAAC,MAAM,CAAC/B,KAAK,CAAC8B,OAAA,CAAAG,WAAW,CAACC,GAAG,EAAE,iCAAiCV,aAAA,EAAe,EAAEI,SAAA;EAEhF;EAAA;EAAAzD,cAAA,GAAAE,CAAA;EACA,MAAMkE,QAAA,CAAAC,gBAAgB,CAACC,WAAW,CAACjB,aAAA,EAAeK,QAAA,EAAU,OAAOS,aAAA;EAAA;EAAAnE,cAAA,GAAAE,CAAA;EAEnE,OAAO;IACLqE,OAAA,EAAS;IACT1C,KAAA,EAAO4B,SAAA;IACPC,QAAA;IACAS,aAAA;IACAM,mBAAA,EAAqB;EACvB;AACF;AAKO,eAAerE,0BACpBgD,SAA2B,EAC3BC,aAAqB,EACrB6B,UAAA;AAAA;AAAA,CAAAlF,cAAA,GAAA+B,CAAA,WAAsB,IAAI;EAAA;EAAA/B,cAAA,GAAAC,CAAA;EAE1B,MAAMkB,MAAA;EAAA;EAAA,CAAAnB,cAAA,GAAAE,CAAA,QAASgF,UAAA;EAAA;EAAA,CAAAlF,cAAA,GAAA+B,CAAA,WAAahC,aAAA,CAAcQ,oBAAoB;EAAA;EAAA,CAAAP,cAAA,GAAA+B,CAAA,WAAGhC,aAAA,CAAcgB,iBAAiB;EAAA;EAAAf,cAAA,GAAAE,CAAA;EAEhG,OAAOI,gBAAA,CAAiB8C,SAAA,EAAWjC,MAAA,EAAQ,eAAekC,aAAA,EAAe;AAC3E;AAKO,eAAehD,sBACpB+C,SAA2B,EAC3BC,aAAqB;EAAA;EAAArD,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAErB,OAAOI,gBAAA,CAAiB8C,SAAA,EAAWrD,aAAA,CAAciB,kBAAkB,EAAE,WAAWqC,aAAA,EAAe;AACjG;AAKO,SAASlD,oBACdgB,MAAmB,EACnBkC,aAAqB;EAAA;EAAArD,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAErB,OAAQkD,SAAA;IAAA;IAAApD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACN,OAAOI,gBAAA,CAAiB8C,SAAA,EAAWjC,MAAA,EAAQkC,aAAA;EAC7C;AACF","ignoreList":[]}