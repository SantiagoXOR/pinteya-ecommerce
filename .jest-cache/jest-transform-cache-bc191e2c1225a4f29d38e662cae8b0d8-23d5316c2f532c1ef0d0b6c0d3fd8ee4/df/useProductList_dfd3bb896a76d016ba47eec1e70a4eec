5a4d500ffc8cd2776929d2d46862b0d2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProductList", {
    enumerable: true,
    get: function() {
        return useProductList;
    }
});
const _react = require("react");
function useProductList() {
    console.log('üîß useProductList: Hook iniciado');
    const [products, setProducts] = (0, _react.useState)([]);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const fetchProducts = async ()=>{
            try {
                console.log('üîß useProductList: Iniciando fetch...');
                setIsLoading(true);
                setError(null);
                const response = await fetch('/api/admin/products?limit=25', {
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                console.log('üîß useProductList: Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                console.log('üîß useProductList: Respuesta completa:', data);
                console.log('üîß useProductList: data.data:', data.data);
                if (Array.isArray(data.data)) {
                    setProducts(data.data);
                    console.log('üîß useProductList: ‚úÖ Productos cargados:', data.data.length);
                } else {
                    throw new Error('Estructura de respuesta inv√°lida - data no es un array');
                }
            } catch (err) {
                console.error('üîß useProductList: ‚ùå Error:', err);
                setError(err instanceof Error ? err.message : 'Error desconocido');
                setProducts([]);
            } finally{
                setIsLoading(false);
            }
        };
        fetchProducts();
    }, []);
    return {
        products,
        isLoading,
        error
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcaG9va3NcXGFkbWluXFx1c2VQcm9kdWN0TGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5cbmludGVyZmFjZSBQcm9kdWN0IHtcbiAgaWQ6IG51bWJlclxuICBuYW1lOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBwcmljZTogbnVtYmVyXG4gIHN0b2NrOiBudW1iZXJcbiAgY2F0ZWdvcnlfaWQ6IG51bWJlclxuICBpbWFnZXM6IHtcbiAgICBtYWluOiBzdHJpbmdcbiAgICBnYWxsZXJ5OiBzdHJpbmdbXVxuICAgIHByZXZpZXdzOiBzdHJpbmdbXVxuICAgIHRodW1ibmFpbHM6IHN0cmluZ1tdXG4gIH1cbiAgY3JlYXRlZF9hdDogc3RyaW5nXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZ1xuICBjYXRlZ29yeV9uYW1lOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFByb2R1Y3RMaXN0UmVzcG9uc2Uge1xuICBkYXRhOiBQcm9kdWN0W11cbiAgdG90YWw6IG51bWJlclxuICBwYWdlOiBudW1iZXJcbiAgcGFnZVNpemU6IG51bWJlclxuICB0b3RhbFBhZ2VzOiBudW1iZXJcbn1cblxuLyoqXG4gKiBIb29rIGVzdMOhbmRhciBwYXJhIGdlc3Rpw7NuIGRlIHByb2R1Y3RvcyBlbiBlbCBwYW5lbCBhZG1pbmlzdHJhdGl2b1xuICpcbiAqIEZ1bmNpb25hbGlkYWRlczpcbiAqIC0gQ29uc3VsdGEgcmVhbCBhIGxhIEFQSSAvYXBpL2FkbWluL3Byb2R1Y3RzXG4gKiAtIENhcmdhIGRlIDI1IHByb2R1Y3RvcyByZWFsZXMgZGUgU3VwYWJhc2UgcG9yIHDDoWdpbmFcbiAqIC0gSW5mb3JtYWNpw7NuIGRlIHBhZ2luYWNpw7NuIGNvbXBsZXRhXG4gKiAtIERhdG9zIGNvbXBsZXRvcyAobm9tYnJlcywgcHJlY2lvcywgc3RvY2ssIGNhdGVnb3LDrWFzLCBpbcOhZ2VuZXMpXG4gKlxuICogQHJldHVybnMge09iamVjdH0gRXN0YWRvIGRlbCBob29rIGNvbiBwcm9kdWN0b3MsIGxvYWRpbmcgeSBlcnJvclxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvZHVjdExpc3QoKSB7XG4gIGNvbnNvbGUubG9nKCfwn5SnIHVzZVByb2R1Y3RMaXN0OiBIb29rIGluaWNpYWRvJylcbiAgY29uc3QgW3Byb2R1Y3RzLCBzZXRQcm9kdWN0c10gPSB1c2VTdGF0ZTxQcm9kdWN0W10+KFtdKVxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hQcm9kdWN0cyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIHVzZVByb2R1Y3RMaXN0OiBJbmljaWFuZG8gZmV0Y2guLi4nKVxuICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSlcbiAgICAgICAgc2V0RXJyb3IobnVsbClcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2FkbWluL3Byb2R1Y3RzP2xpbWl0PTI1Jywge1xuICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICBjb25zb2xlLmxvZygn8J+UpyB1c2VQcm9kdWN0TGlzdDogUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cylcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YTogUHJvZHVjdExpc3RSZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICBjb25zb2xlLmxvZygn8J+UpyB1c2VQcm9kdWN0TGlzdDogUmVzcHVlc3RhIGNvbXBsZXRhOicsIGRhdGEpXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIHVzZVByb2R1Y3RMaXN0OiBkYXRhLmRhdGE6JywgZGF0YS5kYXRhKVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEuZGF0YSkpIHtcbiAgICAgICAgICBzZXRQcm9kdWN0cyhkYXRhLmRhdGEpXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflKcgdXNlUHJvZHVjdExpc3Q6IOKchSBQcm9kdWN0b3MgY2FyZ2Fkb3M6JywgZGF0YS5kYXRhLmxlbmd0aClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VzdHJ1Y3R1cmEgZGUgcmVzcHVlc3RhIGludsOhbGlkYSAtIGRhdGEgbm8gZXMgdW4gYXJyYXknKVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign8J+UpyB1c2VQcm9kdWN0TGlzdDog4p2MIEVycm9yOicsIGVycilcbiAgICAgICAgc2V0RXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdFcnJvciBkZXNjb25vY2lkbycpXG4gICAgICAgIHNldFByb2R1Y3RzKFtdKVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZldGNoUHJvZHVjdHMoKVxuICB9LCBbXSlcblxuICByZXR1cm4ge1xuICAgIHByb2R1Y3RzLFxuICAgIGlzTG9hZGluZyxcbiAgICBlcnJvcixcbiAgfVxufVxuXG5leHBvcnQgdHlwZSB7IFByb2R1Y3QsIFByb2R1Y3RMaXN0UmVzcG9uc2UgfVxuIl0sIm5hbWVzIjpbInVzZVByb2R1Y3RMaXN0IiwiY29uc29sZSIsImxvZyIsInByb2R1Y3RzIiwic2V0UHJvZHVjdHMiLCJ1c2VTdGF0ZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJ1c2VFZmZlY3QiLCJmZXRjaFByb2R1Y3RzIiwicmVzcG9uc2UiLCJmZXRjaCIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsInN0YXR1cyIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJlcnIiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7OytCQXVDZ0JBOzs7ZUFBQUE7Ozt1QkF2Q29CO0FBdUM3QixTQUFTQTtJQUNkQyxRQUFRQyxHQUFHLENBQUM7SUFDWixNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR0MsSUFBQUEsZUFBUSxFQUFZLEVBQUU7SUFDdEQsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdGLElBQUFBLGVBQVEsRUFBQztJQUMzQyxNQUFNLENBQUNHLE9BQU9DLFNBQVMsR0FBR0osSUFBQUEsZUFBUSxFQUFnQjtJQUVsREssSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLGdCQUFnQjtZQUNwQixJQUFJO2dCQUNGVixRQUFRQyxHQUFHLENBQUM7Z0JBQ1pLLGFBQWE7Z0JBQ2JFLFNBQVM7Z0JBRVQsTUFBTUcsV0FBVyxNQUFNQyxNQUFNLGdDQUFnQztvQkFDM0RDLGFBQWE7b0JBQ2JDLFNBQVM7d0JBQ1AsZ0JBQWdCO29CQUNsQjtnQkFDRjtnQkFDQWQsUUFBUUMsR0FBRyxDQUFDLHVDQUF1Q1UsU0FBU0ksTUFBTTtnQkFFbEUsSUFBSSxDQUFDSixTQUFTSyxFQUFFLEVBQUU7b0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLE1BQU0sRUFBRU4sU0FBU0ksTUFBTSxDQUFDLEVBQUUsRUFBRUosU0FBU08sVUFBVSxFQUFFO2dCQUNwRTtnQkFFQSxNQUFNQyxPQUE0QixNQUFNUixTQUFTUyxJQUFJO2dCQUNyRHBCLFFBQVFDLEdBQUcsQ0FBQywwQ0FBMENrQjtnQkFDdERuQixRQUFRQyxHQUFHLENBQUMsaUNBQWlDa0IsS0FBS0EsSUFBSTtnQkFFdEQsSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxLQUFLQSxJQUFJLEdBQUc7b0JBQzVCaEIsWUFBWWdCLEtBQUtBLElBQUk7b0JBQ3JCbkIsUUFBUUMsR0FBRyxDQUFDLDRDQUE0Q2tCLEtBQUtBLElBQUksQ0FBQ0ksTUFBTTtnQkFDMUUsT0FBTztvQkFDTCxNQUFNLElBQUlOLE1BQU07Z0JBQ2xCO1lBQ0YsRUFBRSxPQUFPTyxLQUFLO2dCQUNaeEIsUUFBUU8sS0FBSyxDQUFDLCtCQUErQmlCO2dCQUM3Q2hCLFNBQVNnQixlQUFlUCxRQUFRTyxJQUFJQyxPQUFPLEdBQUc7Z0JBQzlDdEIsWUFBWSxFQUFFO1lBQ2hCLFNBQVU7Z0JBQ1JHLGFBQWE7WUFDZjtRQUNGO1FBRUFJO0lBQ0YsR0FBRyxFQUFFO0lBRUwsT0FBTztRQUNMUjtRQUNBRztRQUNBRTtJQUNGO0FBQ0YifQ==