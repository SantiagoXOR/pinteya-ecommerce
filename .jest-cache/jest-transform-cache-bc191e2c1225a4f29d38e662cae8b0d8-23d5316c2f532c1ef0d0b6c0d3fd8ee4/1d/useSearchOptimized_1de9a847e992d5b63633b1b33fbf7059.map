{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchOptimized.ts"],"sourcesContent":["// ===================================\n// HOOK: useSearchOptimized - Sistema de b√∫squeda con TanStack Query\n// ===================================\n\nimport { useState, useCallback, useEffect, useRef, useMemo } from 'react'\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport { useDebouncedCallback } from 'use-debounce'\nimport { searchProducts } from '@/lib/api/products'\nimport { ProductWithCategory } from '@/types/api'\nimport { searchQueryKeys, searchQueryConfig } from '@/lib/query-client'\nimport { useSearchErrorHandler } from './useSearchErrorHandler'\nimport { useSearchToast } from './useSearchToast'\nimport { useSearchNavigation } from './useSearchNavigation'\nimport { useTrendingSearches } from './useTrendingSearches'\nimport { useRecentSearches } from './useRecentSearches'\nimport { SEARCH_CONSTANTS } from '@/constants/shop'\n\n// ===================================\n// TIPOS\n// ===================================\n\nexport interface SearchSuggestion {\n  id: string\n  type: 'product' | 'category' | 'recent' | 'trending'\n  title: string\n  subtitle?: string\n  image?: string\n  badge?: string\n  href: string\n}\n\nexport interface UseSearchOptimizedOptions {\n  /** Tiempo de debounce en milisegundos */\n  debounceMs?: number\n  /** N√∫mero m√°ximo de sugerencias */\n  maxSuggestions?: number\n  /** L√≠mite de resultados de b√∫squeda */\n  searchLimit?: number\n  /** Guardar b√∫squedas recientes */\n  saveRecentSearches?: boolean\n  /** Habilitar prefetch de sugerencias */\n  enablePrefetch?: boolean\n  /** Callback cuando se realiza una b√∫squeda */\n  onSearch?: (query: string, results: ProductWithCategory[]) => void\n  /** Callback cuando se selecciona una sugerencia */\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void\n}\n\n// ===================================\n// HOOK PRINCIPAL\n// ===================================\n\nexport function useSearchOptimized(options: UseSearchOptimizedOptions = {}) {\n  const {\n    debounceMs = 150,\n    maxSuggestions = 6,\n    searchLimit = 12,\n    saveRecentSearches = true,\n    enablePrefetch = true,\n    onSearch,\n    onSuggestionSelect,\n  } = options\n\n  // Estados locales\n  const [query, setQuery] = useState('')\n  const [debouncedQuery, setDebouncedQuery] = useState('')\n  const [recentSearches, setRecentSearches] = useState<string[]>([])\n  const [hasSearched, setHasSearched] = useState(false)\n\n  // Hooks externos\n  const queryClient = useQueryClient()\n  const errorHandler = useSearchErrorHandler()\n  const toastHandler = useSearchToast()\n  const navigation = useSearchNavigation({\n    scrollToTop: true,\n    onBeforeNavigate: url => console.log('üîç Navegando a:', url),\n    onAfterNavigate: url => console.log('‚úÖ Navegaci√≥n completada:', url),\n  })\n\n  // Hooks para trending y recent searches\n  const { trendingSearches, trackSearch } = useTrendingSearches({\n    limit: 4,\n    enabled: true,\n  })\n\n  // Debug para trending searches\n  if (process.env.NODE_ENV === 'development') {\n    console.log('üî• useSearchOptimized: Trending searches state:', {\n      trendingSearches: trendingSearches?.length || 0,\n      trendingSearchesData: trendingSearches?.map(t => ({ id: t.id, query: t.query })) || [],\n    })\n  }\n\n  const {\n    recentSearches: recentSearchesList,\n    addSearch: addRecentSearch,\n    getRecentSearches,\n  } = useRecentSearches({\n    maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\n    enablePersistence: saveRecentSearches,\n    expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS,\n  })\n\n  // ===================================\n  // DEBOUNCED QUERY UPDATE\n  // ===================================\n\n  const updateDebouncedQuery = useDebouncedCallback(\n    (value: string) => {\n      setDebouncedQuery(value)\n\n      // Analytics tracking\n      if (\n        value.trim() &&\n        process.env.NODE_ENV === 'development' &&\n        process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true'\n      ) {\n        console.log('üîç useSearchOptimized: Query enabled condition will be:', !!value?.trim())\n      }\n    },\n    debounceMs,\n    {\n      maxWait: 2000,\n      leading: false,\n      trailing: true,\n    }\n  )\n\n  // ===================================\n  // TANSTACK QUERY INTEGRATION\n  // ===================================\n\n  // Query principal para b√∫squedas\n  const {\n    data: searchResults,\n    isLoading,\n    error,\n    isFetching,\n    isStale,\n    dataUpdatedAt,\n  } = useQuery({\n    queryKey: searchQueryKeys.search(debouncedQuery),\n    queryFn: async ({ queryKey, signal }) => {\n      const [, , searchQuery] = queryKey\n      if (!searchQuery?.trim()) {\n        return []\n      }\n\n      try {\n        // Usar la API de b√∫squeda correcta\n        const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`\n\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal, // Usar AbortController\n        })\n\n        if (!response.ok) {\n          console.error('üîç useSearchOptimized: API response not ok:', response.status)\n          throw new Error(`HTTP error! status: ${response.status}`)\n        }\n\n        const data = await response.json()\n\n        return data.products || []\n      } catch (error) {\n        console.error('üîç useSearchOptimized: API call failed:', error)\n        throw error\n      }\n    },\n    enabled: !!debouncedQuery?.trim() && debouncedQuery.length >= 2,\n    ...searchQueryConfig,\n  })\n\n  // ===================================\n  // SUGGESTIONS GENERATION\n  // ===================================\n\n  if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\n    console.log('üîç useSearchOptimized: Current state before suggestions:', {\n      query,\n      debouncedQuery,\n      searchResults: searchResults?.length || 0,\n      isLoading,\n      error: !!error,\n    })\n  }\n\n  const suggestions: SearchSuggestion[] = useMemo(() => {\n    const allSuggestions: SearchSuggestion[] = []\n    const hasQuery = !!debouncedQuery?.trim()\n\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\n      console.log('üîç useSearchOptimized: query (current):', `\"${query}\"`)\n      console.log('üîç useSearchOptimized: searchResults isArray:', Array.isArray(searchResults))\n    }\n\n    if (hasQuery) {\n      // CUANDO HAY TEXTO: Priorizar productos SIEMPRE\n\n      // Extraer productos de la respuesta de la API\n      let products = []\n\n      // Si searchResults es un array directamente\n      if (Array.isArray(searchResults)) {\n        products = searchResults\n      }\n      // Si searchResults es un objeto con propiedad data (respuesta de API)\n      else if (\n        searchResults &&\n        typeof searchResults === 'object' &&\n        Array.isArray(searchResults.data)\n      ) {\n        products = searchResults.data\n      }\n      // Si searchResults es un objeto con propiedad products\n      else if (\n        searchResults &&\n        typeof searchResults === 'object' &&\n        Array.isArray(searchResults.products)\n      ) {\n        products = searchResults.products\n      }\n\n      if (products.length > 0) {\n        const productSuggestions = products.map((product: ProductWithCategory) => {\n          return {\n            id: product.id.toString(),\n            type: 'product' as const,\n            title: product.name,\n            subtitle: product.category?.name,\n            image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],\n            badge: product.stock > 0 ? 'En stock' : 'Sin stock',\n            href: `/products/${product.id}`,\n          }\n        })\n        allSuggestions.push(...productSuggestions)\n      } else {\n        if (\n          process.env.NODE_ENV === 'development' &&\n          process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true'\n        ) {\n          console.log('üîç useSearchOptimized: searchResults structure:', {\n            isArray: Array.isArray(searchResults),\n            hasData: searchResults?.data ? 'yes' : 'no',\n            hasProducts: searchResults?.products ? 'yes' : 'no',\n            dataLength: searchResults?.data?.length,\n            productsLength: searchResults?.products?.length,\n            keys: searchResults ? Object.keys(searchResults) : 'null',\n          })\n        }\n      }\n\n      // Solo agregar recent/trending si hay muy pocos productos\n      if (allSuggestions.length < 2) {\n        const recentSuggestions = getRecentSearches(2).map((search, index) => ({\n          id: `recent-${index}`,\n          type: 'recent' as const,\n          title: search,\n          href: `/shop?q=${encodeURIComponent(search)}`,\n        }))\n        allSuggestions.push(...recentSuggestions)\n      }\n    } else {\n      // CUANDO NO HAY TEXTO: Mostrar trending y recent\n\n      // Agregar b√∫squedas recientes primero\n      const recentSuggestions = getRecentSearches(3).map((search, index) => ({\n        id: `recent-${index}`,\n        type: 'recent' as const,\n        title: search,\n        href: `/shop?q=${encodeURIComponent(search)}`,\n      }))\n      allSuggestions.push(...recentSuggestions)\n\n      // Agregar trending searches\n      if (allSuggestions.length < maxSuggestions) {\n        const remainingSlots = maxSuggestions - allSuggestions.length\n        const trendingSuggestions = trendingSearches.slice(0, remainingSlots).map(trending => ({\n          id: trending.id,\n          type: 'trending' as const,\n          title: trending.query,\n          href: trending.href,\n          badge: trending.count ? `${trending.count}` : undefined,\n        }))\n        allSuggestions.push(...trendingSuggestions)\n      }\n    }\n\n    const finalSuggestions = allSuggestions.slice(0, maxSuggestions)\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\n      console.log(\n        'üîç useSearchOptimized: Final suggestions types:',\n        finalSuggestions.map(s => s.type)\n      )\n      console.log(\n        'üîç useSearchOptimized: Final suggestions titles:',\n        finalSuggestions.map(s => s.title)\n      )\n    }\n\n    return finalSuggestions\n  }, [debouncedQuery, searchResults, isLoading, error, maxSuggestions, trendingSearches])\n\n  // ===================================\n  // SEARCH FUNCTIONS\n  // ===================================\n\n  const searchWithDebounce = useCallback(\n    (searchQuery: string) => {\n      setQuery(searchQuery)\n      updateDebouncedQuery(searchQuery)\n\n      // Prefetch si est√° habilitado y la query es v√°lida\n      if (enablePrefetch && searchQuery.trim().length >= 1) {\n        // Prefetch de datos de b√∫squeda\n        queryClient.prefetchQuery({\n          queryKey: searchQueryKeys.search(searchQuery),\n          queryFn: () => searchProducts(searchQuery, maxSuggestions),\n          ...searchQueryConfig,\n        })\n\n        // Prefetch de p√°gina de resultados\n        navigation.prefetchSearch(searchQuery.trim())\n      }\n    },\n    [updateDebouncedQuery, enablePrefetch, queryClient, maxSuggestions, navigation]\n  )\n\n  const executeSearch = useCallback(\n    async (searchQuery: string) => {\n      if (!searchQuery.trim()) {\n        return\n      }\n\n      try {\n        setHasSearched(true)\n\n        // Guardar en historial usando el hook\n        if (saveRecentSearches) {\n          addRecentSearch(searchQuery.trim())\n        }\n\n        // Registrar en trending searches\n        trackSearch(searchQuery.trim()).catch(console.warn)\n\n        // Navegar a p√°gina de resultados usando navegaci√≥n optimizada\n        navigation.navigateToSearch(searchQuery.trim())\n\n        // Callback externo\n        if (onSearch && searchResults) {\n          onSearch(searchQuery, searchResults)\n        }\n\n        toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0)\n      } catch (error) {\n        console.error('‚ùå useSearchOptimized: Error en executeSearch:', error)\n        errorHandler.handleError(error)\n      }\n    },\n    [\n      saveRecentSearches,\n      recentSearches,\n      navigation,\n      onSearch,\n      searchResults,\n      toastHandler,\n      errorHandler,\n    ]\n  )\n\n  const selectSuggestion = useCallback(\n    (suggestion: SearchSuggestion) => {\n      // Navegar seg√∫n el tipo de sugerencia\n      if (suggestion.type === 'product') {\n        navigation.navigateToProduct(suggestion.id)\n      } else {\n        // Para b√∫squedas recientes o trending, navegar a b√∫squeda\n        navigation.navigateToSearch(suggestion.title)\n      }\n\n      // Callback externo\n      if (onSuggestionSelect) {\n        onSuggestionSelect(suggestion)\n      }\n\n      toastHandler.showInfoToast(\n        `${suggestion.type === 'product' ? 'Producto' : 'B√∫squeda'} seleccionado`,\n        suggestion.title\n      )\n    },\n    [navigation, onSuggestionSelect, toastHandler]\n  )\n\n  const clearSearch = useCallback(() => {\n    setQuery('')\n    setDebouncedQuery('')\n    setHasSearched(false)\n\n    // Limpiar cache de b√∫squedas si es necesario\n    queryClient.removeQueries({ queryKey: searchQueryKeys.searches() })\n  }, [queryClient])\n\n  // ===================================\n  // LIFECYCLE\n  // ===================================\n\n  const initialize = useCallback(() => {\n    // Cargar b√∫squedas recientes\n    if (saveRecentSearches) {\n      try {\n        const saved = localStorage.getItem('pinteya-recent-searches')\n        if (saved && saved.trim() !== '' && saved !== '\"\"' && saved !== \"''\") {\n          // Validar que no est√© corrupto\n          if (saved.includes('\"\"') && saved.length < 5) {\n            console.warn('Detected corrupted recent searches data, cleaning up')\n            localStorage.removeItem('pinteya-recent-searches')\n            return\n          }\n\n          const parsed = JSON.parse(saved)\n          // Verificar que sea un array v√°lido\n          if (Array.isArray(parsed)) {\n            setRecentSearches(parsed)\n          } else {\n            console.warn('Invalid recent searches format, resetting')\n            localStorage.removeItem('pinteya-recent-searches')\n          }\n        }\n      } catch (error) {\n        console.warn('Error cargando b√∫squedas recientes:', error)\n        // Limpiar datos corruptos\n        localStorage.removeItem('pinteya-recent-searches')\n      }\n    }\n  }, [saveRecentSearches])\n\n  const cleanup = useCallback(() => {\n    // Limpiar debounce y cache si es necesario\n    updateDebouncedQuery.cancel()\n  }, [updateDebouncedQuery])\n\n  // Inicializar al montar\n  useEffect(() => {\n    initialize()\n    return cleanup\n  }, [initialize, cleanup])\n\n  // ===================================\n  // RETURN\n  // ===================================\n\n  return {\n    // Estado de b√∫squeda\n    query,\n    results: searchResults || [],\n    suggestions,\n    isLoading,\n    error: error?.message || null,\n    hasSearched,\n    recentSearches: recentSearchesList,\n    trendingSearches,\n\n    // Estados de TanStack Query\n    isFetching,\n    isStale,\n    dataUpdatedAt,\n\n    // Estado de errores y toasts\n    searchError: errorHandler.currentError,\n    isRetrying: errorHandler.isRetrying,\n    retryCount: errorHandler.retryCount,\n    toasts: toastHandler.toasts,\n\n    // Funciones principales\n    searchWithDebounce,\n    executeSearch,\n    selectSuggestion,\n    clearSearch,\n    initialize,\n    cleanup,\n\n    // Funciones de manejo de errores\n    clearError: errorHandler.clearError,\n    retryManually: errorHandler.retryManually,\n\n    // Funciones de toast\n    removeToast: toastHandler.removeToast,\n    clearToasts: toastHandler.clearToasts,\n\n    // Utilidades de cache\n    invalidateSearch: (searchQuery: string) =>\n      queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(searchQuery) }),\n    prefetchSearch: (searchQuery: string) =>\n      queryClient.prefetchQuery({\n        queryKey: searchQueryKeys.search(searchQuery),\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\n        ...searchQueryConfig,\n      }),\n\n    // Funciones de navegaci√≥n optimizada\n    navigateToSearch: navigation.navigateToSearch,\n    navigateToProduct: navigation.navigateToProduct,\n    navigateToCategory: navigation.navigateToCategory,\n    prefetchSearchPage: navigation.prefetchSearch,\n    prefetchProductPage: navigation.prefetchProduct,\n    getCurrentSearchQuery: navigation.getCurrentSearchQuery,\n    buildSearchUrl: navigation.buildSearchUrl,\n  }\n}\n\nexport default useSearchOptimized\n"],"names":["useSearchOptimized","options","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","enablePrefetch","onSearch","onSuggestionSelect","query","setQuery","useState","debouncedQuery","setDebouncedQuery","recentSearches","setRecentSearches","hasSearched","setHasSearched","queryClient","useQueryClient","errorHandler","useSearchErrorHandler","toastHandler","useSearchToast","navigation","useSearchNavigation","scrollToTop","onBeforeNavigate","url","console","log","onAfterNavigate","trendingSearches","trackSearch","useTrendingSearches","limit","enabled","process","env","NODE_ENV","length","trendingSearchesData","map","t","id","recentSearchesList","addSearch","addRecentSearch","getRecentSearches","useRecentSearches","maxSearches","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","updateDebouncedQuery","useDebouncedCallback","value","trim","NEXT_PUBLIC_DEBUG_SEARCH","maxWait","leading","trailing","data","searchResults","isLoading","error","isFetching","isStale","dataUpdatedAt","useQuery","queryKey","searchQueryKeys","search","queryFn","signal","searchQuery","encodeURIComponent","response","fetch","method","headers","ok","status","Error","json","products","searchQueryConfig","suggestions","useMemo","allSuggestions","hasQuery","Array","isArray","productSuggestions","product","toString","type","title","name","subtitle","category","image","images","previews","thumbnails","badge","stock","href","push","hasData","hasProducts","dataLength","productsLength","keys","Object","recentSuggestions","index","remainingSlots","trendingSuggestions","slice","trending","count","undefined","finalSuggestions","s","searchWithDebounce","useCallback","prefetchQuery","searchProducts","prefetchSearch","executeSearch","catch","warn","navigateToSearch","showSuccessToast","handleError","selectSuggestion","suggestion","navigateToProduct","showInfoToast","clearSearch","removeQueries","searches","initialize","saved","localStorage","getItem","includes","removeItem","parsed","JSON","parse","cleanup","cancel","useEffect","results","message","searchError","currentError","isRetrying","retryCount","toasts","clearError","retryManually","removeToast","clearToasts","invalidateSearch","invalidateQueries","navigateToCategory","prefetchSearchPage","prefetchProductPage","prefetchProduct","getCurrentSearchQuery","buildSearchUrl"],"mappings":"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"}