3f885a8fe82ad143872fe25e78c857d3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get capitalize () {
        return capitalize;
    },
    get cn () {
        return cn;
    },
    get debounce () {
        return debounce;
    },
    get formatCurrency () {
        return formatCurrency;
    },
    get generateId () {
        return generateId;
    },
    get isEmpty () {
        return isEmpty;
    },
    get sleep () {
        return sleep;
    },
    get slugify () {
        return slugify;
    },
    get throttle () {
        return throttle;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function formatCurrency(amount) {
    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('es-AR', {
        style: 'currency',
        currency: 'ARS'
    }).format(numAmount);
}
function generateId(length = 8) {
    return Math.random().toString(36).substring(2, length + 2);
}
function debounce(func, wait) {
    let timeout;
    return (...args)=>{
        clearTimeout(timeout);
        timeout = setTimeout(()=>func(...args), wait);
    };
}
function throttle(func, limit) {
    let inThrottle;
    return (...args)=>{
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}
function sleep(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms));
}
function isEmpty(value) {
    if (value == null) return true;
    if (typeof value === 'string') return value.trim() === '';
    if (Array.isArray(value)) return value.length === 0;
    if (typeof value === 'object') return Object.keys(value).length === 0;
    return false;
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
function slugify(str) {
    return str.toLowerCase().trim().replace(/[^\w\s-]/g, '').replace(/[\s_-]+/g, '-').replace(/^-+|-+$/g, '');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcbGliXFxjb3JlXFx1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbHN4LCB0eXBlIENsYXNzVmFsdWUgfSBmcm9tIFwiY2xzeFwiXHJcbmltcG9ydCB7IHR3TWVyZ2UgfSBmcm9tIFwidGFpbHdpbmQtbWVyZ2VcIlxyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gbWVyZ2UgVGFpbHdpbmQgQ1NTIGNsYXNzZXMgd2l0aCBjbHN4XHJcbiAqIEBwYXJhbSBpbnB1dHMgLSBDbGFzcyB2YWx1ZXMgdG8gbWVyZ2VcclxuICogQHJldHVybnMgTWVyZ2VkIGNsYXNzIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XHJcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKVxyXG59XHJcblxyXG4vKipcclxuICogRm9ybWF0IGN1cnJlbmN5IGluIEFyZ2VudGluZSBQZXNvIGZvcm1hdFxyXG4gKiBAcGFyYW0gYW1vdW50IC0gQW1vdW50IHRvIGZvcm1hdFxyXG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgY3VycmVuY3kgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Q3VycmVuY3koYW1vdW50OiBudW1iZXIgfCBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IG51bUFtb3VudCA9IHR5cGVvZiBhbW91bnQgPT09ICdzdHJpbmcnID8gcGFyc2VGbG9hdChhbW91bnQpIDogYW1vdW50O1xyXG4gIHJldHVybiBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VzLUFSJywge1xyXG4gICAgc3R5bGU6ICdjdXJyZW5jeScsXHJcbiAgICBjdXJyZW5jeTogJ0FSUycsXHJcbiAgfSkuZm9ybWF0KG51bUFtb3VudCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBJRFxyXG4gKiBAcGFyYW0gbGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSBJRFxyXG4gKiBAcmV0dXJucyBSYW5kb20gSUQgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVJZChsZW5ndGg6IG51bWJlciA9IDgpOiBzdHJpbmcge1xyXG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgbGVuZ3RoICsgMik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWJvdW5jZSBmdW5jdGlvblxyXG4gKiBAcGFyYW0gZnVuYyAtIEZ1bmN0aW9uIHRvIGRlYm91bmNlXHJcbiAqIEBwYXJhbSB3YWl0IC0gV2FpdCB0aW1lIGluIG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBEZWJvdW5jZWQgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxyXG4gIGZ1bmM6IFQsXHJcbiAgd2FpdDogbnVtYmVyXHJcbik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcclxuICBsZXQgdGltZW91dDogTm9kZUpTLlRpbWVvdXQ7XHJcbiAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBmdW5jKC4uLmFyZ3MpLCB3YWl0KTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogVGhyb3R0bGUgZnVuY3Rpb25cclxuICogQHBhcmFtIGZ1bmMgLSBGdW5jdGlvbiB0byB0aHJvdHRsZVxyXG4gKiBAcGFyYW0gbGltaXQgLSBUaW1lIGxpbWl0IGluIG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBUaHJvdHRsZWQgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxyXG4gIGZ1bmM6IFQsXHJcbiAgbGltaXQ6IG51bWJlclxyXG4pOiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4gdm9pZCB7XHJcbiAgbGV0IGluVGhyb3R0bGU6IGJvb2xlYW47XHJcbiAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcbiAgICBpZiAoIWluVGhyb3R0bGUpIHtcclxuICAgICAgZnVuYyguLi5hcmdzKTtcclxuICAgICAgaW5UaHJvdHRsZSA9IHRydWU7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gKGluVGhyb3R0bGUgPSBmYWxzZSksIGxpbWl0KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogU2xlZXAgZnVuY3Rpb24gZm9yIGFzeW5jIG9wZXJhdGlvbnNcclxuICogQHBhcmFtIG1zIC0gTWlsbGlzZWNvbmRzIHRvIHNsZWVwXHJcbiAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyBhZnRlciB0aGUgc3BlY2lmaWVkIHRpbWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBlbXB0eSAobnVsbCwgdW5kZWZpbmVkLCBlbXB0eSBzdHJpbmcsIGVtcHR5IGFycmF5LCBlbXB0eSBvYmplY3QpXHJcbiAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlIHRvIGNoZWNrXHJcbiAqIEByZXR1cm5zIFRydWUgaWYgZW1wdHksIGZhbHNlIG90aGVyd2lzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlLnRyaW0oKSA9PT0gJyc7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUubGVuZ3RoID09PSAwO1xyXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYXBpdGFsaXplIGZpcnN0IGxldHRlciBvZiBhIHN0cmluZ1xyXG4gKiBAcGFyYW0gc3RyIC0gU3RyaW5nIHRvIGNhcGl0YWxpemVcclxuICogQHJldHVybnMgQ2FwaXRhbGl6ZWQgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgc3RyaW5nIHRvIHNsdWcgZm9ybWF0XHJcbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyBTbHVnIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNsdWdpZnkoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBzdHJcclxuICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAudHJpbSgpXHJcbiAgICAucmVwbGFjZSgvW15cXHdcXHMtXS9nLCAnJylcclxuICAgIC5yZXBsYWNlKC9bXFxzXy1dKy9nLCAnLScpXHJcbiAgICAucmVwbGFjZSgvXi0rfC0rJC9nLCAnJyk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImNhcGl0YWxpemUiLCJjbiIsImRlYm91bmNlIiwiZm9ybWF0Q3VycmVuY3kiLCJnZW5lcmF0ZUlkIiwiaXNFbXB0eSIsInNsZWVwIiwic2x1Z2lmeSIsInRocm90dGxlIiwiaW5wdXRzIiwidHdNZXJnZSIsImNsc3giLCJhbW91bnQiLCJudW1BbW91bnQiLCJwYXJzZUZsb2F0IiwiSW50bCIsIk51bWJlckZvcm1hdCIsInN0eWxlIiwiY3VycmVuY3kiLCJmb3JtYXQiLCJsZW5ndGgiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJhcmdzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImxpbWl0IiwiaW5UaHJvdHRsZSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2YWx1ZSIsInRyaW0iLCJBcnJheSIsImlzQXJyYXkiLCJPYmplY3QiLCJrZXlzIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUFrR2dCQTtlQUFBQTs7UUExRkFDO2VBQUFBOztRQWdDQUM7ZUFBQUE7O1FBdkJBQztlQUFBQTs7UUFhQUM7ZUFBQUE7O1FBdURBQztlQUFBQTs7UUFUQUM7ZUFBQUE7O1FBK0JBQztlQUFBQTs7UUFsREFDO2VBQUFBOzs7c0JBekRzQjsrQkFDZDtBQU9qQixTQUFTUCxHQUFHLEdBQUdRLE1BQW9CO0lBQ3hDLE9BQU9DLElBQUFBLHNCQUFPLEVBQUNDLElBQUFBLFVBQUksRUFBQ0Y7QUFDdEI7QUFPTyxTQUFTTixlQUFlUyxNQUF1QjtJQUNwRCxNQUFNQyxZQUFZLE9BQU9ELFdBQVcsV0FBV0UsV0FBV0YsVUFBVUE7SUFDcEUsT0FBTyxJQUFJRyxLQUFLQyxZQUFZLENBQUMsU0FBUztRQUNwQ0MsT0FBTztRQUNQQyxVQUFVO0lBQ1osR0FBR0MsTUFBTSxDQUFDTjtBQUNaO0FBT08sU0FBU1QsV0FBV2dCLFNBQWlCLENBQUM7SUFDM0MsT0FBT0MsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUdKLFNBQVM7QUFDMUQ7QUFRTyxTQUFTbEIsU0FDZHVCLElBQU8sRUFDUEMsSUFBWTtJQUVaLElBQUlDO0lBQ0osT0FBTyxDQUFDLEdBQUdDO1FBQ1RDLGFBQWFGO1FBQ2JBLFVBQVVHLFdBQVcsSUFBTUwsUUFBUUcsT0FBT0Y7SUFDNUM7QUFDRjtBQVFPLFNBQVNsQixTQUNkaUIsSUFBTyxFQUNQTSxLQUFhO0lBRWIsSUFBSUM7SUFDSixPQUFPLENBQUMsR0FBR0o7UUFDVCxJQUFJLENBQUNJLFlBQVk7WUFDZlAsUUFBUUc7WUFDUkksYUFBYTtZQUNiRixXQUFXLElBQU9FLGFBQWEsT0FBUUQ7UUFDekM7SUFDRjtBQUNGO0FBT08sU0FBU3pCLE1BQU0yQixFQUFVO0lBQzlCLE9BQU8sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0wsV0FBV0ssU0FBU0Y7QUFDcEQ7QUFPTyxTQUFTNUIsUUFBUStCLEtBQVU7SUFDaEMsSUFBSUEsU0FBUyxNQUFNLE9BQU87SUFDMUIsSUFBSSxPQUFPQSxVQUFVLFVBQVUsT0FBT0EsTUFBTUMsSUFBSSxPQUFPO0lBQ3ZELElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUSxPQUFPQSxNQUFNaEIsTUFBTSxLQUFLO0lBQ2xELElBQUksT0FBT2dCLFVBQVUsVUFBVSxPQUFPSSxPQUFPQyxJQUFJLENBQUNMLE9BQU9oQixNQUFNLEtBQUs7SUFDcEUsT0FBTztBQUNUO0FBT08sU0FBU3BCLFdBQVcwQyxHQUFXO0lBQ3BDLE9BQU9BLElBQUlDLE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtGLElBQUlHLEtBQUssQ0FBQztBQUNqRDtBQU9PLFNBQVN0QyxRQUFRbUMsR0FBVztJQUNqQyxPQUFPQSxJQUNKSSxXQUFXLEdBQ1hULElBQUksR0FDSlUsT0FBTyxDQUFDLGFBQWEsSUFDckJBLE9BQU8sQ0FBQyxZQUFZLEtBQ3BCQSxPQUFPLENBQUMsWUFBWTtBQUN6QiJ9