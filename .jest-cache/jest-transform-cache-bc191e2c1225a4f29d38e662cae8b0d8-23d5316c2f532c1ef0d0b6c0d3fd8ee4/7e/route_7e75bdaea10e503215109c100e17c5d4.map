{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - API DE PRODUCTOS\n// ===================================\n// API optimizada con rate limiting, timeouts centralizados y logging estructurado\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase'\nimport {\n  validateData,\n  safeValidateData,\n  ProductFiltersSchema,\n  ProductSchema,\n} from '@/lib/validations'\nimport { ApiResponse, PaginatedResponse, ProductWithCategory } from '@/types/api'\nimport { executeWithRLS, withRLS, createRLSFilters } from '@/lib/auth/enterprise-rls-utils'\n\n// ===================================\n// NUEVAS IMPORTACIONES - MEJORAS DE ALTA PRIORIDAD\n// ===================================\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter'\nimport { API_TIMEOUTS, withDatabaseTimeout, getEndpointTimeouts } from '@/lib/config/api-timeouts'\nimport { createSecurityLogger } from '@/lib/logging/security-logger'\n\n// ===================================\n// GET /api/products - Obtener productos con filtros\n// ===================================\nexport async function GET(request: NextRequest) {\n  // Crear logger de seguridad con contexto\n  const securityLogger = createSecurityLogger(request)\n\n  // Aplicar rate limiting\n  const rateLimitResult = await withRateLimit(request, RATE_LIMIT_CONFIGS.products, async () => {\n    try {\n      const { searchParams } = new URL(request.url)\n\n      // Extraer parámetros de query\n      const queryParams = {\n        category: searchParams.get('category') || undefined,\n        categories: searchParams.get('categories')?.split(',').filter(Boolean) || undefined,\n        brand: searchParams.get('brand') || undefined,\n        brands: searchParams.get('brands')?.split(',').filter(Boolean) || undefined,\n        paintType: searchParams.get('paintType') || undefined,\n        paintTypes: searchParams.get('paintTypes')?.split(',').filter(Boolean) || undefined,\n        priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\n        priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\n        search: searchParams.get('search') || undefined,\n        page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,\n        limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,\n        sortBy:\n          (searchParams.get('sortBy') as 'price' | 'name' | 'created_at' | 'brand') || 'created_at',\n        sortOrder: (searchParams.get('sortOrder') as 'asc' | 'desc') || 'desc',\n      }\n\n      // Validar parámetros de manera segura\n      const validationResult = safeValidateData(ProductFiltersSchema, queryParams)\n\n      if (!validationResult.success) {\n        // Log de error de validación con contexto de seguridad\n        securityLogger.log({\n          type: 'validation_error',\n          severity: 'medium',\n          message: 'Invalid parameters in products API',\n          context: securityLogger.context,\n          metadata: {\n            validationError: validationResult.error,\n            queryParams,\n          },\n        })\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: `Parámetros inválidos: ${validationResult.error}`,\n        }\n        return NextResponse.json(errorResponse, { status: 400 })\n      }\n\n      const filters = validationResult.data!\n\n      // Log de acceso a datos con contexto\n      securityLogger.log({\n        type: 'data_access',\n        severity: 'low',\n        message: 'Products API accessed',\n        context: securityLogger.context,\n        metadata: {\n          filters: filters,\n          hasSearch: !!filters.search,\n          hasFilters: !!(filters.category || filters.brand || filters.paintType),\n        },\n      })\n\n      const supabase = getSupabaseClient()\n\n      // Verificar que el cliente de Supabase esté disponible\n      if (!supabase) {\n        securityLogger.logApiError(\n          securityLogger.context,\n          new Error('Supabase client not available'),\n          { service: 'supabase' }\n        )\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: 'Servicio de base de datos no disponible',\n        }\n        return NextResponse.json(errorResponse, { status: 503 })\n      }\n\n      // Construir query base optimizada (solo campos necesarios)\n      // Usar timeout centralizado para operaciones de base de datos\n      const result = await withDatabaseTimeout(async signal => {\n        let query = supabase.from('products').select(\n          `\n              id, name, slug, price, discounted_price, brand, stock, images,\n              category:categories(id, name, slug)\n            `,\n          { count: 'exact' }\n        )\n\n        // Aplicar filtros\n        if (filters.category) {\n          // Primero obtener el ID de la categoría por su slug\n          const { data: categoryData } = await supabase\n            .from('categories')\n            .select('id')\n            .eq('slug', filters.category)\n            .single()\n\n          if (categoryData) {\n            query = query.eq('category_id', categoryData.id)\n          }\n        }\n\n        // Filtro por múltiples categorías (nuevo)\n        if (filters.categories && filters.categories.length > 0) {\n          const { data: categoriesData } = await supabase\n            .from('categories')\n            .select('id')\n            .in('slug', filters.categories)\n\n          if (categoriesData && categoriesData.length > 0) {\n            const categoryIds = categoriesData.map(cat => cat.id)\n            query = query.in('category_id', categoryIds)\n          }\n        }\n\n        if (filters.brand) {\n          query = query.eq('brand', filters.brand)\n        }\n\n        // Filtro por múltiples marcas (nuevo)\n        if (filters.brands && filters.brands.length > 0) {\n          query = query.in('brand', filters.brands)\n        }\n\n        // Filtro por tipo de pintura (nuevo)\n        if (filters.paintType) {\n          query = query.eq('paint_type', filters.paintType)\n        }\n\n        // Filtro por múltiples tipos de pintura (nuevo)\n        if (filters.paintTypes && filters.paintTypes.length > 0) {\n          query = query.in('paint_type', filters.paintTypes)\n        }\n\n        if (filters.priceMin) {\n          query = query.gte('price', filters.priceMin)\n        }\n\n        if (filters.priceMax) {\n          query = query.lte('price', filters.priceMax)\n        }\n\n        if (filters.search) {\n          query = query.or(\n            `name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`\n          )\n        }\n\n        // Filtro por productos con descuento real (discounted_price < price)\n        if (filters.hasDiscount) {\n          query = query.not('discounted_price', 'is', null).lt('discounted_price', 'price')\n        }\n\n        // Solo productos con stock (temporalmente comentado para testing)\n        // query = query.gt('stock', 0);\n\n        // Ordenamiento\n        const orderColumn =\n          filters.sortBy === 'created_at'\n            ? 'created_at'\n            : filters.sortBy === 'brand'\n              ? 'brand'\n              : filters.sortBy || 'created_at'\n        query = query.order(orderColumn, { ascending: filters.sortOrder === 'asc' })\n\n        // Paginación\n        const page = filters.page || 1\n        const limit = filters.limit || 10\n        const from = (page - 1) * limit\n        const to = from + limit - 1\n        query = query.range(from, to)\n\n        // Ejecutar query con timeout\n        return await query\n      }, API_TIMEOUTS.database)\n\n      const { data: products, error, count } = result\n\n      if (error) {\n        // Log de error de base de datos con contexto de seguridad\n        securityLogger.logApiError(\n          securityLogger.context,\n          new Error(`Supabase error: ${error.message}`),\n          {\n            supabaseError: error,\n            filters: filters,\n            operation: 'products_query',\n          }\n        )\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: error.message || 'Error obteniendo productos de la base de datos',\n        }\n        return NextResponse.json(errorResponse, { status: 500 })\n      }\n\n      // Calcular información de paginación\n      const page = filters.page || 1\n      const limit = filters.limit || 10\n      const totalPages = Math.ceil((count || 0) / limit)\n\n      // Log de operación exitosa\n      securityLogger.log({\n        type: 'data_access',\n        severity: 'low',\n        message: 'Products retrieved successfully',\n        context: securityLogger.context,\n        metadata: {\n          productsCount: products?.length || 0,\n          totalCount: count || 0,\n          page,\n          limit,\n          filters: filters,\n        },\n      })\n\n      const response: PaginatedResponse<ProductWithCategory> = {\n        data: products || [],\n        pagination: {\n          page,\n          limit,\n          total: count || 0,\n          totalPages,\n        },\n        success: true,\n        message: `${products?.length || 0} productos encontrados`,\n      }\n\n      // Agregar headers de cache para mejorar performance\n      return NextResponse.json(response, {\n        headers: {\n          'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',\n          'Content-Type': 'application/json',\n        },\n      })\n    } catch (error: any) {\n      // Log de error general con contexto de seguridad\n      securityLogger.logApiError(securityLogger.context, error, {\n        operation: 'products_get',\n        stage: 'database_operation',\n      })\n\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: error.message || 'Error interno del servidor',\n      }\n\n      return NextResponse.json(errorResponse, { status: 500 })\n    }\n  })\n\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\n  if (rateLimitResult instanceof NextResponse) {\n    // Log de rate limit excedido\n    securityLogger.logRateLimitExceeded(securityLogger.context, {\n      endpoint: '/api/products',\n      method: 'GET',\n    })\n    return rateLimitResult\n  }\n\n  return rateLimitResult\n}\n\n// ===================================\n// POST /api/products - Crear producto (Admin)\n// ===================================\nexport async function POST(request: NextRequest) {\n  // Crear logger de seguridad con contexto\n  const securityLogger = createSecurityLogger(request)\n\n  // Aplicar rate limiting para operaciones de creación\n  const rateLimitResult = await withRateLimit(request, RATE_LIMIT_CONFIGS.creation, async () => {\n    try {\n      // ENTERPRISE: Usar nueva autenticación enterprise para admin\n      const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils')\n\n      const authResult = await requireAdminAuth(request, ['products_create'])\n\n      if (!authResult.success) {\n        // Log de intento de acceso no autorizado\n        securityLogger.logPermissionDenied(securityLogger.context, 'products', 'create')\n\n        return NextResponse.json(\n          {\n            error: authResult.error,\n            code: authResult.code,\n            enterprise: true,\n            timestamp: new Date().toISOString(),\n          },\n          { status: authResult.status || 401 }\n        )\n      }\n\n      const context = authResult.context!\n\n      // Actualizar contexto del logger con información del usuario\n      securityLogger.context.userId = context.userId\n\n      const body = await request.json()\n\n      // Log de acción administrativa\n      securityLogger.logAdminAction(securityLogger.context, 'create_product', {\n        productName: body.name,\n        category: body.category_id,\n      })\n\n      // Validar datos del producto\n      const productData = validateData(ProductSchema, body)\n\n      const supabase = getSupabaseClient(true) // Usar cliente admin\n\n      // Verificar que el cliente administrativo esté disponible\n      if (!supabase) {\n        securityLogger.logApiError(\n          securityLogger.context,\n          new Error('Admin Supabase client not available'),\n          { service: 'supabase_admin' }\n        )\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: 'Servicio administrativo no disponible',\n        }\n        return NextResponse.json(errorResponse, { status: 503 })\n      }\n\n      // Crear slug si no se proporciona\n      if (!productData.slug) {\n        productData.slug = productData.name\n          .toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-')\n          .replace(/(^-|-$)/g, '')\n      }\n\n      // Insertar producto con timeout\n      const result = await withDatabaseTimeout(async signal => {\n        return await supabase\n          .from('products')\n          .insert(productData)\n          .select(\n            `\n              *,\n              category:categories(id, name, slug)\n            `\n          )\n          .single()\n      }, API_TIMEOUTS.admin)\n\n      const { data: product, error } = result\n\n      if (error) {\n        securityLogger.logApiError(\n          securityLogger.context,\n          new Error(`Product creation failed: ${error.message}`),\n          {\n            supabaseError: error,\n            productData: { ...productData, images: '[REDACTED]' }, // No loggear imágenes por seguridad\n          }\n        )\n        handleSupabaseError(error, 'POST /api/products')\n      }\n\n      // Log de creación exitosa\n      securityLogger.logAdminAction(securityLogger.context, 'product_created_successfully', {\n        productId: product?.id,\n        productName: product?.name,\n        category: product?.category?.name,\n      })\n\n      const response: ApiResponse<ProductWithCategory> = {\n        data: product,\n        success: true,\n        message: 'Producto creado exitosamente',\n      }\n\n      return NextResponse.json(response, { status: 201 })\n    } catch (error: any) {\n      // Log de error general en creación de producto\n      securityLogger.logApiError(securityLogger.context, error, {\n        operation: 'product_creation',\n        stage: 'general_error',\n      })\n\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: error.message || 'Error interno del servidor',\n      }\n\n      return NextResponse.json(errorResponse, { status: 500 })\n    }\n  })\n\n  // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla\n  if (rateLimitResult instanceof NextResponse) {\n    // Log de rate limit excedido para creación\n    securityLogger.logRateLimitExceeded(securityLogger.context, {\n      endpoint: '/api/products',\n      method: 'POST',\n      operation: 'product_creation',\n    })\n    return rateLimitResult\n  }\n\n  return rateLimitResult\n}\n"],"names":["GET","POST","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","products","searchParams","URL","url","queryParams","category","get","undefined","categories","split","filter","Boolean","brand","brands","paintType","paintTypes","priceMin","Number","priceMax","search","page","limit","sortBy","sortOrder","validationResult","safeValidateData","ProductFiltersSchema","success","log","type","severity","message","context","metadata","validationError","error","errorResponse","data","NextResponse","json","status","filters","hasSearch","hasFilters","supabase","getSupabaseClient","logApiError","Error","service","result","withDatabaseTimeout","signal","query","from","select","count","categoryData","eq","single","id","length","categoriesData","in","categoryIds","map","cat","gte","lte","or","hasDiscount","not","lt","orderColumn","order","ascending","to","range","API_TIMEOUTS","database","supabaseError","operation","totalPages","Math","ceil","productsCount","totalCount","response","pagination","total","headers","stage","logRateLimitExceeded","endpoint","method","creation","requireAdminAuth","authResult","logPermissionDenied","code","enterprise","timestamp","Date","toISOString","userId","body","logAdminAction","productName","name","category_id","productData","validateData","ProductSchema","slug","toLowerCase","replace","insert","admin","product","images","handleSupabaseError","productId"],"mappings":"AAAA,qCAAqC;;;;;;;;;;;;QA6BfA;eAAAA;;QAqRAC;eAAAA;;QAjTTC;eAAAA;;;wBAO6B;0BACa;6BAMhD;6BAO2C;6BACqB;gCAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvB9B,MAAMA,UAAU;AA4BhB,eAAeF,IAAIG,OAAoB;IAC5C,yCAAyC;IACzC,MAAMC,iBAAiBC,IAAAA,oCAAoB,EAACF;IAE5C,wBAAwB;IACxB,MAAMG,kBAAkB,MAAMC,IAAAA,0BAAa,EAACJ,SAASK,+BAAkB,CAACC,QAAQ,EAAE;QAChF,IAAI;YACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIR,QAAQS,GAAG;YAE5C,8BAA8B;YAC9B,MAAMC,cAAc;gBAClBC,UAAUJ,aAAaK,GAAG,CAAC,eAAeC;gBAC1CC,YAAYP,aAAaK,GAAG,CAAC,eAAeG,MAAM,KAAKC,OAAOC,YAAYJ;gBAC1EK,OAAOX,aAAaK,GAAG,CAAC,YAAYC;gBACpCM,QAAQZ,aAAaK,GAAG,CAAC,WAAWG,MAAM,KAAKC,OAAOC,YAAYJ;gBAClEO,WAAWb,aAAaK,GAAG,CAAC,gBAAgBC;gBAC5CQ,YAAYd,aAAaK,GAAG,CAAC,eAAeG,MAAM,KAAKC,OAAOC,YAAYJ;gBAC1ES,UAAUf,aAAaK,GAAG,CAAC,cAAcW,OAAOhB,aAAaK,GAAG,CAAC,eAAeC;gBAChFW,UAAUjB,aAAaK,GAAG,CAAC,cAAcW,OAAOhB,aAAaK,GAAG,CAAC,eAAeC;gBAChFY,QAAQlB,aAAaK,GAAG,CAAC,aAAaC;gBACtCa,MAAMnB,aAAaK,GAAG,CAAC,UAAUW,OAAOhB,aAAaK,GAAG,CAAC,WAAW;gBACpEe,OAAOpB,aAAaK,GAAG,CAAC,WAAWW,OAAOhB,aAAaK,GAAG,CAAC,YAAY;gBACvEgB,QACE,AAACrB,aAAaK,GAAG,CAAC,aAA2D;gBAC/EiB,WAAW,AAACtB,aAAaK,GAAG,CAAC,gBAAmC;YAClE;YAEA,sCAAsC;YACtC,MAAMkB,mBAAmBC,IAAAA,6BAAgB,EAACC,iCAAoB,EAAEtB;YAEhE,IAAI,CAACoB,iBAAiBG,OAAO,EAAE;gBAC7B,uDAAuD;gBACvDhC,eAAeiC,GAAG,CAAC;oBACjBC,MAAM;oBACNC,UAAU;oBACVC,SAAS;oBACTC,SAASrC,eAAeqC,OAAO;oBAC/BC,UAAU;wBACRC,iBAAiBV,iBAAiBW,KAAK;wBACvC/B;oBACF;gBACF;gBAEA,MAAMgC,gBAAmC;oBACvCC,MAAM;oBACNV,SAAS;oBACTQ,OAAO,CAAC,sBAAsB,EAAEX,iBAAiBW,KAAK,EAAE;gBAC1D;gBACA,OAAOG,oBAAY,CAACC,IAAI,CAACH,eAAe;oBAAEI,QAAQ;gBAAI;YACxD;YAEA,MAAMC,UAAUjB,iBAAiBa,IAAI;YAErC,qCAAqC;YACrC1C,eAAeiC,GAAG,CAAC;gBACjBC,MAAM;gBACNC,UAAU;gBACVC,SAAS;gBACTC,SAASrC,eAAeqC,OAAO;gBAC/BC,UAAU;oBACRQ,SAASA;oBACTC,WAAW,CAAC,CAACD,QAAQtB,MAAM;oBAC3BwB,YAAY,CAAC,CAAEF,CAAAA,QAAQpC,QAAQ,IAAIoC,QAAQ7B,KAAK,IAAI6B,QAAQ3B,SAAS,AAAD;gBACtE;YACF;YAEA,MAAM8B,WAAWC,IAAAA,2BAAiB;YAElC,uDAAuD;YACvD,IAAI,CAACD,UAAU;gBACbjD,eAAemD,WAAW,CACxBnD,eAAeqC,OAAO,EACtB,IAAIe,MAAM,kCACV;oBAAEC,SAAS;gBAAW;gBAGxB,MAAMZ,gBAAmC;oBACvCC,MAAM;oBACNV,SAAS;oBACTQ,OAAO;gBACT;gBACA,OAAOG,oBAAY,CAACC,IAAI,CAACH,eAAe;oBAAEI,QAAQ;gBAAI;YACxD;YAEA,2DAA2D;YAC3D,8DAA8D;YAC9D,MAAMS,SAAS,MAAMC,IAAAA,gCAAmB,EAAC,OAAMC;gBAC7C,IAAIC,QAAQR,SAASS,IAAI,CAAC,YAAYC,MAAM,CAC1C,CAAC;;;YAGC,CAAC,EACH;oBAAEC,OAAO;gBAAQ;gBAGnB,kBAAkB;gBAClB,IAAId,QAAQpC,QAAQ,EAAE;oBACpB,oDAAoD;oBACpD,MAAM,EAAEgC,MAAMmB,YAAY,EAAE,GAAG,MAAMZ,SAClCS,IAAI,CAAC,cACLC,MAAM,CAAC,MACPG,EAAE,CAAC,QAAQhB,QAAQpC,QAAQ,EAC3BqD,MAAM;oBAET,IAAIF,cAAc;wBAChBJ,QAAQA,MAAMK,EAAE,CAAC,eAAeD,aAAaG,EAAE;oBACjD;gBACF;gBAEA,0CAA0C;gBAC1C,IAAIlB,QAAQjC,UAAU,IAAIiC,QAAQjC,UAAU,CAACoD,MAAM,GAAG,GAAG;oBACvD,MAAM,EAAEvB,MAAMwB,cAAc,EAAE,GAAG,MAAMjB,SACpCS,IAAI,CAAC,cACLC,MAAM,CAAC,MACPQ,EAAE,CAAC,QAAQrB,QAAQjC,UAAU;oBAEhC,IAAIqD,kBAAkBA,eAAeD,MAAM,GAAG,GAAG;wBAC/C,MAAMG,cAAcF,eAAeG,GAAG,CAACC,CAAAA,MAAOA,IAAIN,EAAE;wBACpDP,QAAQA,MAAMU,EAAE,CAAC,eAAeC;oBAClC;gBACF;gBAEA,IAAItB,QAAQ7B,KAAK,EAAE;oBACjBwC,QAAQA,MAAMK,EAAE,CAAC,SAAShB,QAAQ7B,KAAK;gBACzC;gBAEA,sCAAsC;gBACtC,IAAI6B,QAAQ5B,MAAM,IAAI4B,QAAQ5B,MAAM,CAAC+C,MAAM,GAAG,GAAG;oBAC/CR,QAAQA,MAAMU,EAAE,CAAC,SAASrB,QAAQ5B,MAAM;gBAC1C;gBAEA,qCAAqC;gBACrC,IAAI4B,QAAQ3B,SAAS,EAAE;oBACrBsC,QAAQA,MAAMK,EAAE,CAAC,cAAchB,QAAQ3B,SAAS;gBAClD;gBAEA,gDAAgD;gBAChD,IAAI2B,QAAQ1B,UAAU,IAAI0B,QAAQ1B,UAAU,CAAC6C,MAAM,GAAG,GAAG;oBACvDR,QAAQA,MAAMU,EAAE,CAAC,cAAcrB,QAAQ1B,UAAU;gBACnD;gBAEA,IAAI0B,QAAQzB,QAAQ,EAAE;oBACpBoC,QAAQA,MAAMc,GAAG,CAAC,SAASzB,QAAQzB,QAAQ;gBAC7C;gBAEA,IAAIyB,QAAQvB,QAAQ,EAAE;oBACpBkC,QAAQA,MAAMe,GAAG,CAAC,SAAS1B,QAAQvB,QAAQ;gBAC7C;gBAEA,IAAIuB,QAAQtB,MAAM,EAAE;oBAClBiC,QAAQA,MAAMgB,EAAE,CACd,CAAC,YAAY,EAAE3B,QAAQtB,MAAM,CAAC,qBAAqB,EAAEsB,QAAQtB,MAAM,CAAC,eAAe,EAAEsB,QAAQtB,MAAM,CAAC,CAAC,CAAC;gBAE1G;gBAEA,qEAAqE;gBACrE,IAAIsB,QAAQ4B,WAAW,EAAE;oBACvBjB,QAAQA,MAAMkB,GAAG,CAAC,oBAAoB,MAAM,MAAMC,EAAE,CAAC,oBAAoB;gBAC3E;gBAEA,kEAAkE;gBAClE,gCAAgC;gBAEhC,eAAe;gBACf,MAAMC,cACJ/B,QAAQnB,MAAM,KAAK,eACf,eACAmB,QAAQnB,MAAM,KAAK,UACjB,UACAmB,QAAQnB,MAAM,IAAI;gBAC1B8B,QAAQA,MAAMqB,KAAK,CAACD,aAAa;oBAAEE,WAAWjC,QAAQlB,SAAS,KAAK;gBAAM;gBAE1E,aAAa;gBACb,MAAMH,OAAOqB,QAAQrB,IAAI,IAAI;gBAC7B,MAAMC,QAAQoB,QAAQpB,KAAK,IAAI;gBAC/B,MAAMgC,OAAO,AAACjC,CAAAA,OAAO,CAAA,IAAKC;gBAC1B,MAAMsD,KAAKtB,OAAOhC,QAAQ;gBAC1B+B,QAAQA,MAAMwB,KAAK,CAACvB,MAAMsB;gBAE1B,6BAA6B;gBAC7B,OAAO,MAAMvB;YACf,GAAGyB,yBAAY,CAACC,QAAQ;YAExB,MAAM,EAAEzC,MAAMrC,QAAQ,EAAEmC,KAAK,EAAEoB,KAAK,EAAE,GAAGN;YAEzC,IAAId,OAAO;gBACT,0DAA0D;gBAC1DxC,eAAemD,WAAW,CACxBnD,eAAeqC,OAAO,EACtB,IAAIe,MAAM,CAAC,gBAAgB,EAAEZ,MAAMJ,OAAO,EAAE,GAC5C;oBACEgD,eAAe5C;oBACfM,SAASA;oBACTuC,WAAW;gBACb;gBAGF,MAAM5C,gBAAmC;oBACvCC,MAAM;oBACNV,SAAS;oBACTQ,OAAOA,MAAMJ,OAAO,IAAI;gBAC1B;gBACA,OAAOO,oBAAY,CAACC,IAAI,CAACH,eAAe;oBAAEI,QAAQ;gBAAI;YACxD;YAEA,qCAAqC;YACrC,MAAMpB,OAAOqB,QAAQrB,IAAI,IAAI;YAC7B,MAAMC,QAAQoB,QAAQpB,KAAK,IAAI;YAC/B,MAAM4D,aAAaC,KAAKC,IAAI,CAAC,AAAC5B,CAAAA,SAAS,CAAA,IAAKlC;YAE5C,2BAA2B;YAC3B1B,eAAeiC,GAAG,CAAC;gBACjBC,MAAM;gBACNC,UAAU;gBACVC,SAAS;gBACTC,SAASrC,eAAeqC,OAAO;gBAC/BC,UAAU;oBACRmD,eAAepF,UAAU4D,UAAU;oBACnCyB,YAAY9B,SAAS;oBACrBnC;oBACAC;oBACAoB,SAASA;gBACX;YACF;YAEA,MAAM6C,WAAmD;gBACvDjD,MAAMrC,YAAY,EAAE;gBACpBuF,YAAY;oBACVnE;oBACAC;oBACAmE,OAAOjC,SAAS;oBAChB0B;gBACF;gBACAtD,SAAS;gBACTI,SAAS,GAAG/B,UAAU4D,UAAU,EAAE,sBAAsB,CAAC;YAC3D;YAEA,oDAAoD;YACpD,OAAOtB,oBAAY,CAACC,IAAI,CAAC+C,UAAU;gBACjCG,SAAS;oBACP,iBAAiB;oBACjB,gBAAgB;gBAClB;YACF;QACF,EAAE,OAAOtD,OAAY;YACnB,iDAAiD;YACjDxC,eAAemD,WAAW,CAACnD,eAAeqC,OAAO,EAAEG,OAAO;gBACxD6C,WAAW;gBACXU,OAAO;YACT;YAEA,MAAMtD,gBAAmC;gBACvCC,MAAM;gBACNV,SAAS;gBACTQ,OAAOA,MAAMJ,OAAO,IAAI;YAC1B;YAEA,OAAOO,oBAAY,CAACC,IAAI,CAACH,eAAe;gBAAEI,QAAQ;YAAI;QACxD;IACF;IAEA,4EAA4E;IAC5E,IAAI3C,2BAA2ByC,oBAAY,EAAE;QAC3C,6BAA6B;QAC7B3C,eAAegG,oBAAoB,CAAChG,eAAeqC,OAAO,EAAE;YAC1D4D,UAAU;YACVC,QAAQ;QACV;QACA,OAAOhG;IACT;IAEA,OAAOA;AACT;AAKO,eAAeL,KAAKE,OAAoB;IAC7C,yCAAyC;IACzC,MAAMC,iBAAiBC,IAAAA,oCAAoB,EAACF;IAE5C,qDAAqD;IACrD,MAAMG,kBAAkB,MAAMC,IAAAA,0BAAa,EAACJ,SAASK,+BAAkB,CAAC+F,QAAQ,EAAE;QAChF,IAAI;YACF,6DAA6D;YAC7D,MAAM,EAAEC,gBAAgB,EAAE,GAAG,MAAM,mEAAA,QAAO;YAE1C,MAAMC,aAAa,MAAMD,iBAAiBrG,SAAS;gBAAC;aAAkB;YAEtE,IAAI,CAACsG,WAAWrE,OAAO,EAAE;gBACvB,yCAAyC;gBACzChC,eAAesG,mBAAmB,CAACtG,eAAeqC,OAAO,EAAE,YAAY;gBAEvE,OAAOM,oBAAY,CAACC,IAAI,CACtB;oBACEJ,OAAO6D,WAAW7D,KAAK;oBACvB+D,MAAMF,WAAWE,IAAI;oBACrBC,YAAY;oBACZC,WAAW,IAAIC,OAAOC,WAAW;gBACnC,GACA;oBAAE9D,QAAQwD,WAAWxD,MAAM,IAAI;gBAAI;YAEvC;YAEA,MAAMR,UAAUgE,WAAWhE,OAAO;YAElC,6DAA6D;YAC7DrC,eAAeqC,OAAO,CAACuE,MAAM,GAAGvE,QAAQuE,MAAM;YAE9C,MAAMC,OAAO,MAAM9G,QAAQ6C,IAAI;YAE/B,+BAA+B;YAC/B5C,eAAe8G,cAAc,CAAC9G,eAAeqC,OAAO,EAAE,kBAAkB;gBACtE0E,aAAaF,KAAKG,IAAI;gBACtBtG,UAAUmG,KAAKI,WAAW;YAC5B;YAEA,6BAA6B;YAC7B,MAAMC,cAAcC,IAAAA,yBAAY,EAACC,0BAAa,EAAEP;YAEhD,MAAM5D,WAAWC,IAAAA,2BAAiB,EAAC,MAAM,qBAAqB;;YAE9D,0DAA0D;YAC1D,IAAI,CAACD,UAAU;gBACbjD,eAAemD,WAAW,CACxBnD,eAAeqC,OAAO,EACtB,IAAIe,MAAM,wCACV;oBAAEC,SAAS;gBAAiB;gBAG9B,MAAMZ,gBAAmC;oBACvCC,MAAM;oBACNV,SAAS;oBACTQ,OAAO;gBACT;gBACA,OAAOG,oBAAY,CAACC,IAAI,CAACH,eAAe;oBAAEI,QAAQ;gBAAI;YACxD;YAEA,kCAAkC;YAClC,IAAI,CAACqE,YAAYG,IAAI,EAAE;gBACrBH,YAAYG,IAAI,GAAGH,YAAYF,IAAI,CAChCM,WAAW,GACXC,OAAO,CAAC,eAAe,KACvBA,OAAO,CAAC,YAAY;YACzB;YAEA,gCAAgC;YAChC,MAAMjE,SAAS,MAAMC,IAAAA,gCAAmB,EAAC,OAAMC;gBAC7C,OAAO,MAAMP,SACVS,IAAI,CAAC,YACL8D,MAAM,CAACN,aACPvD,MAAM,CACL,CAAC;;;YAGD,CAAC,EAEFI,MAAM;YACX,GAAGmB,yBAAY,CAACuC,KAAK;YAErB,MAAM,EAAE/E,MAAMgF,OAAO,EAAElF,KAAK,EAAE,GAAGc;YAEjC,IAAId,OAAO;gBACTxC,eAAemD,WAAW,CACxBnD,eAAeqC,OAAO,EACtB,IAAIe,MAAM,CAAC,yBAAyB,EAAEZ,MAAMJ,OAAO,EAAE,GACrD;oBACEgD,eAAe5C;oBACf0E,aAAa;wBAAE,GAAGA,WAAW;wBAAES,QAAQ;oBAAa;gBACtD;gBAEFC,IAAAA,6BAAmB,EAACpF,OAAO;YAC7B;YAEA,0BAA0B;YAC1BxC,eAAe8G,cAAc,CAAC9G,eAAeqC,OAAO,EAAE,gCAAgC;gBACpFwF,WAAWH,SAAS1D;gBACpB+C,aAAaW,SAASV;gBACtBtG,UAAUgH,SAAShH,UAAUsG;YAC/B;YAEA,MAAMrB,WAA6C;gBACjDjD,MAAMgF;gBACN1F,SAAS;gBACTI,SAAS;YACX;YAEA,OAAOO,oBAAY,CAACC,IAAI,CAAC+C,UAAU;gBAAE9C,QAAQ;YAAI;QACnD,EAAE,OAAOL,OAAY;YACnB,+CAA+C;YAC/CxC,eAAemD,WAAW,CAACnD,eAAeqC,OAAO,EAAEG,OAAO;gBACxD6C,WAAW;gBACXU,OAAO;YACT;YAEA,MAAMtD,gBAAmC;gBACvCC,MAAM;gBACNV,SAAS;gBACTQ,OAAOA,MAAMJ,OAAO,IAAI;YAC1B;YAEA,OAAOO,oBAAY,CAACC,IAAI,CAACH,eAAe;gBAAEI,QAAQ;YAAI;QACxD;IACF;IAEA,4EAA4E;IAC5E,IAAI3C,2BAA2ByC,oBAAY,EAAE;QAC3C,2CAA2C;QAC3C3C,eAAegG,oBAAoB,CAAChG,eAAeqC,OAAO,EAAE;YAC1D4D,UAAU;YACVC,QAAQ;YACRb,WAAW;QACb;QACA,OAAOnF;IACT;IAEA,OAAOA;AACT"}