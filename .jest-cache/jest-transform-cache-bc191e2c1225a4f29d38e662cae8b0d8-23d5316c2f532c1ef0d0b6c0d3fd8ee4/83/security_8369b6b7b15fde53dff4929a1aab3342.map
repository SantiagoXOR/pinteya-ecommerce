{"version":3,"names":["cleanupRateLimit","cov_11ar75xfl0","f","s","getRateLimitStats","securityMiddleware","RATE_LIMITS","windowMs","maxRequests","default","requestCounts","Map","checkRateLimit","request","ip","b","headers","get","pathname","nextUrl","config","path","pathConfig","Object","entries","startsWith","key","now","Date","windowStart","current","resetTime","set","count","addSecurityHeaders","response","nonces","_cspnonce","generateNonces","csp","process","env","NODE_ENV","buildStrictCSP","buildDevelopmentCSP","nonceHeaders","createNonceHeaders","forEach","value","validateRequest","userAgent","length","isValid","error","includes","method","contentType","contentLength","parseInt","validContentTypes","some","type","logSecurityEvent","event","details","console","warn","timestamp","toISOString","validation","_server","NextResponse","status","next","data","Array","from","delete","totalKeys","size","map"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\security.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MIDDLEWARE DE SEGURIDAD\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { generateNonces, buildStrictCSP, buildDevelopmentCSP, createNonceHeaders } from '@/lib/security/csp-nonce';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DE RATE LIMITING\r\n// ===================================\r\n\r\ninterface RateLimitConfig {\r\n  windowMs: number;\r\n  maxRequests: number;\r\n}\r\n\r\nconst RATE_LIMITS: Record<string, RateLimitConfig> = {\r\n  '/api/payments': { windowMs: 60000, maxRequests: 10 }, // 10 requests per minute\r\n  '/api/user': { windowMs: 60000, maxRequests: 30 }, // 30 requests per minute\r\n  '/api/orders': { windowMs: 60000, maxRequests: 20 }, // 20 requests per minute\r\n  '/api/products': { windowMs: 60000, maxRequests: 100 }, // 100 requests per minute\r\n  default: { windowMs: 60000, maxRequests: 60 }, // 60 requests per minute\r\n};\r\n\r\n// Store para rate limiting (en producción usar Redis)\r\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\r\n\r\n/**\r\n * Implementa rate limiting básico\r\n */\r\nfunction checkRateLimit(request: NextRequest): boolean {\r\n  const ip = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';\r\n  const pathname = request.nextUrl.pathname;\r\n  \r\n  // Encontrar configuración de rate limit\r\n  let config = RATE_LIMITS.default;\r\n  for (const [path, pathConfig] of Object.entries(RATE_LIMITS)) {\r\n    if (pathname.startsWith(path)) {\r\n      config = pathConfig;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  const key = `${ip}:${pathname}`;\r\n  const now = Date.now();\r\n  const windowStart = now - config.windowMs;\r\n  \r\n  const current = requestCounts.get(key);\r\n  \r\n  if (!current || current.resetTime < windowStart) {\r\n    // Nueva ventana o primera request\r\n    requestCounts.set(key, { count: 1, resetTime: now });\r\n    return true;\r\n  }\r\n  \r\n  if (current.count >= config.maxRequests) {\r\n    return false; // Rate limit excedido\r\n  }\r\n  \r\n  // Incrementar contador\r\n  current.count++;\r\n  return true;\r\n}\r\n\r\n// ===================================\r\n// HEADERS DE SEGURIDAD\r\n// ===================================\r\n\r\n/**\r\n * Agrega headers de seguridad a la respuesta\r\n */\r\nfunction addSecurityHeaders(response: NextResponse): NextResponse {\r\n  // Generar nonces para CSP\r\n  const nonces = generateNonces();\r\n  \r\n  // Content Security Policy con nonces\r\n  const csp = process.env.NODE_ENV === 'production' \r\n    ? buildStrictCSP(nonces)\r\n    : buildDevelopmentCSP(nonces);\r\n  \r\n  response.headers.set('Content-Security-Policy', csp);\r\n  \r\n  // Agregar nonces a los headers para que estén disponibles en la aplicación\r\n  const nonceHeaders = createNonceHeaders(nonces);\r\n  Object.entries(nonceHeaders).forEach(([key, value]) => {\r\n    response.headers.set(key, value);\r\n  });\r\n  \r\n  // Otros headers de seguridad\r\n  response.headers.set('X-Frame-Options', 'DENY');\r\n  response.headers.set('X-Content-Type-Options', 'nosniff');\r\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\r\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\r\n  \r\n  // HSTS (solo en HTTPS)\r\n  if (process.env.NODE_ENV === 'production') {\r\n    response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');\r\n  }\r\n  \r\n  return response;\r\n}\r\n\r\n// ===================================\r\n// VALIDACIÓN DE REQUESTS\r\n// ===================================\r\n\r\n/**\r\n * Valida que el request sea seguro\r\n */\r\nfunction validateRequest(request: NextRequest): { isValid: boolean; error?: string } {\r\n  const { pathname } = request.nextUrl;\r\n  \r\n  // Validar User-Agent (básico)\r\n  const userAgent = request.headers.get('user-agent');\r\n  if (!userAgent || userAgent.length < 10) {\r\n    return { isValid: false, error: 'Invalid User-Agent' };\r\n  }\r\n  \r\n  // Validar Content-Type para requests con body (solo para APIs que requieren JSON)\r\n  if (['POST', 'PUT', 'PATCH'].includes(request.method) && pathname.startsWith('/api/')) {\r\n    const contentType = request.headers.get('content-type');\r\n    const contentLength = request.headers.get('content-length');\r\n\r\n    // Solo validar Content-Type si hay contenido en el body\r\n    if (contentLength && parseInt(contentLength) > 0) {\r\n      // Permitir tipos de contenido válidos\r\n      const validContentTypes = [\r\n        'application/json',\r\n        'application/x-www-form-urlencoded',\r\n        'multipart/form-data',\r\n        'text/plain'\r\n      ];\r\n\r\n      if (!contentType || !validContentTypes.some(type => contentType.includes(type))) {\r\n        return { isValid: false, error: 'Invalid Content-Type' };\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Validar tamaño del request (básico)\r\n  const contentLength = request.headers.get('content-length');\r\n  if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) { // 10MB max\r\n    return { isValid: false, error: 'Request too large' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n}\r\n\r\n// ===================================\r\n// LOGGING DE SEGURIDAD\r\n// ===================================\r\n\r\n/**\r\n * Log de eventos de seguridad\r\n */\r\nfunction logSecurityEvent(\r\n  event: 'RATE_LIMIT' | 'INVALID_REQUEST' | 'SUSPICIOUS_ACTIVITY',\r\n  request: NextRequest,\r\n  details?: string\r\n) {\r\n  const ip = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n  \r\n  console.warn(`[SECURITY] ${event}`, {\r\n    ip,\r\n    pathname: request.nextUrl.pathname,\r\n    method: request.method,\r\n    userAgent,\r\n    timestamp: new Date().toISOString(),\r\n    details,\r\n  });\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE PRINCIPAL\r\n// ===================================\r\n\r\n/**\r\n * Middleware de seguridad principal\r\n */\r\nexport function securityMiddleware(request: NextRequest): NextResponse | null {\r\n  const { pathname } = request.nextUrl;\r\n  \r\n  // Skip para archivos estáticos\r\n  if (\r\n    pathname.startsWith('/_next') ||\r\n    pathname.startsWith('/favicon') ||\r\n    pathname.includes('.') ||\r\n    pathname === '/robots.txt' ||\r\n    pathname === '/sitemap.xml'\r\n  ) {\r\n    return null; // Continuar sin procesar\r\n  }\r\n  \r\n  // Validar request\r\n  const validation = validateRequest(request);\r\n  if (!validation.isValid) {\r\n    logSecurityEvent('INVALID_REQUEST', request, validation.error);\r\n    return new NextResponse('Bad Request', { status: 400 });\r\n  }\r\n  \r\n  // Verificar rate limiting para APIs\r\n  if (pathname.startsWith('/api/')) {\r\n    if (!checkRateLimit(request)) {\r\n      logSecurityEvent('RATE_LIMIT', request);\r\n      return new NextResponse('Too Many Requests', { \r\n        status: 429,\r\n        headers: {\r\n          'Retry-After': '60'\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Crear respuesta con headers de seguridad\r\n  const response = NextResponse.next();\r\n  return addSecurityHeaders(response);\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES ADICIONALES\r\n// ===================================\r\n\r\n/**\r\n * Limpia el store de rate limiting (llamar periódicamente)\r\n */\r\nexport function cleanupRateLimit() {\r\n  const now = Date.now();\r\n  for (const [key, data] of Array.from(requestCounts.entries())) {\r\n    if (now - data.resetTime > 300000) { // 5 minutos\r\n      requestCounts.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas de rate limiting\r\n */\r\nexport function getRateLimitStats() {\r\n  return {\r\n    totalKeys: requestCounts.size,\r\n    entries: Array.from(requestCounts.entries()).map(([key, data]) => ({\r\n      key,\r\n      count: data.count,\r\n      resetTime: new Date(data.resetTime).toISOString(),\r\n    })),\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}