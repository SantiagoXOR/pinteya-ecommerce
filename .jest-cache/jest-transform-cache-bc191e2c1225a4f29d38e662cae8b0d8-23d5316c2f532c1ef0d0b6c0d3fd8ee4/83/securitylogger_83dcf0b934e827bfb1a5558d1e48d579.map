{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\logging\\security-logger.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - LOGGING ESTRUCTURADO DE SEGURIDAD\n// ===================================\n// Sistema de logging estructurado para eventos de seguridad\n// con contexto enriquecido y formato consistente\n\nimport { NextRequest } from 'next/server'\n\n// ===================================\n// TIPOS Y INTERFACES\n// ===================================\n\nexport interface SecurityLogContext {\n  userId?: string\n  sessionId?: string\n  ip?: string\n  userAgent?: string\n  endpoint: string\n  method: string\n  timestamp: string\n  requestId?: string\n}\n\nexport interface SecurityEvent {\n  type: SecurityEventType\n  severity: SecuritySeverity\n  message: string\n  context: SecurityLogContext\n  metadata?: Record<string, any>\n  error?: Error\n}\n\nexport type SecurityEventType =\n  | 'auth_attempt'\n  | 'auth_success'\n  | 'auth_failure'\n  | 'rate_limit_exceeded'\n  | 'permission_denied'\n  | 'suspicious_activity'\n  | 'data_access'\n  | 'admin_action'\n  | 'api_error'\n  | 'validation_error'\n  | 'security_scan'\n  | 'unauthorized_access'\n\nexport type SecuritySeverity = 'low' | 'medium' | 'high' | 'critical'\n\nexport interface SecurityLogger {\n  log(event: SecurityEvent): void\n  logAuthAttempt(\n    context: SecurityLogContext,\n    success: boolean,\n    metadata?: Record<string, any>\n  ): void\n  logRateLimitExceeded(context: SecurityLogContext, metadata?: Record<string, any>): void\n  logPermissionDenied(context: SecurityLogContext, resource: string, action: string): void\n  logSuspiciousActivity(\n    context: SecurityLogContext,\n    reason: string,\n    metadata?: Record<string, any>\n  ): void\n  logAdminAction(context: SecurityLogContext, action: string, metadata?: Record<string, any>): void\n  logApiError(context: SecurityLogContext, error: Error, metadata?: Record<string, any>): void\n}\n\n// ===================================\n// EXTRACTOR DE CONTEXTO DE REQUEST\n// ===================================\n\nexport function extractSecurityContext(\n  request: NextRequest,\n  additionalContext: Partial<SecurityLogContext> = {}\n): SecurityLogContext {\n  const url = new URL(request.url)\n\n  // Extraer IP de headers\n  const forwarded = request.headers.get('x-forwarded-for')\n  const ip = forwarded\n    ? forwarded.split(',')[0].trim()\n    : request.headers.get('x-real-ip') || 'unknown'\n\n  // Generar request ID único\n  const requestId =\n    request.headers.get('x-request-id') ||\n    `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n  return {\n    ip,\n    userAgent: request.headers.get('user-agent') || 'unknown',\n    endpoint: url.pathname,\n    method: request.method,\n    timestamp: new Date().toISOString(),\n    requestId,\n    ...additionalContext,\n  }\n}\n\n// ===================================\n// IMPLEMENTACIÓN DEL LOGGER\n// ===================================\n\nclass SecurityLoggerImpl implements SecurityLogger {\n  private formatLogEntry(event: SecurityEvent): string {\n    const logEntry = {\n      timestamp: event.context.timestamp,\n      level: this.mapSeverityToLevel(event.severity),\n      type: 'SECURITY',\n      event_type: event.type,\n      severity: event.severity,\n      message: event.message,\n      context: event.context,\n      metadata: event.metadata,\n      error: event.error\n        ? {\n            name: event.error.name,\n            message: event.error.message,\n            stack: event.error.stack,\n          }\n        : undefined,\n    }\n\n    return JSON.stringify(logEntry, null, process.env.NODE_ENV === 'development' ? 2 : 0)\n  }\n\n  private mapSeverityToLevel(severity: SecuritySeverity): string {\n    switch (severity) {\n      case 'low':\n        return 'info'\n      case 'medium':\n        return 'warn'\n      case 'high':\n        return 'error'\n      case 'critical':\n        return 'error'\n      default:\n        return 'info'\n    }\n  }\n\n  private shouldLog(severity: SecuritySeverity): boolean {\n    const logLevel = process.env.SECURITY_LOG_LEVEL || 'medium'\n\n    const levels = { low: 1, medium: 2, high: 3, critical: 4 }\n    const currentLevel = levels[logLevel as SecuritySeverity] || 2\n    const eventLevel = levels[severity]\n\n    return eventLevel >= currentLevel\n  }\n\n  log(event: SecurityEvent): void {\n    if (!this.shouldLog(event.severity)) {\n      return\n    }\n\n    const logEntry = this.formatLogEntry(event)\n\n    // En desarrollo, usar console con colores\n    if (process.env.NODE_ENV === 'development') {\n      const colors = {\n        low: '\\x1b[36m', // cyan\n        medium: '\\x1b[33m', // yellow\n        high: '\\x1b[31m', // red\n        critical: '\\x1b[35m', // magenta\n      }\n\n      const reset = '\\x1b[0m'\n      const color = colors[event.severity]\n\n      console.log(`${color}[SECURITY:${event.type.toUpperCase()}]${reset}`, logEntry)\n    } else {\n      // En producción, usar console.log estándar para integración con sistemas de logging\n      console.log(logEntry)\n    }\n\n    // TODO: Integrar con servicio de logging externo (DataDog, LogRocket, etc.)\n    // await this.sendToExternalLogger(logEntry);\n  }\n\n  logAuthAttempt(\n    context: SecurityLogContext,\n    success: boolean,\n    metadata?: Record<string, any>\n  ): void {\n    this.log({\n      type: success ? 'auth_success' : 'auth_failure',\n      severity: success ? 'low' : 'medium',\n      message: success\n        ? `Authentication successful for ${context.userId || 'unknown user'}`\n        : `Authentication failed for ${context.userId || 'unknown user'}`,\n      context,\n      metadata: {\n        success,\n        ...metadata,\n      },\n    })\n  }\n\n  logRateLimitExceeded(context: SecurityLogContext, metadata?: Record<string, any>): void {\n    this.log({\n      type: 'rate_limit_exceeded',\n      severity: 'medium',\n      message: `Rate limit exceeded for ${context.endpoint}`,\n      context,\n      metadata: {\n        endpoint: context.endpoint,\n        ip: context.ip,\n        ...metadata,\n      },\n    })\n  }\n\n  logPermissionDenied(context: SecurityLogContext, resource: string, action: string): void {\n    this.log({\n      type: 'permission_denied',\n      severity: 'high',\n      message: `Permission denied: ${action} on ${resource}`,\n      context,\n      metadata: {\n        resource,\n        action,\n        userId: context.userId,\n      },\n    })\n  }\n\n  logSuspiciousActivity(\n    context: SecurityLogContext,\n    reason: string,\n    metadata?: Record<string, any>\n  ): void {\n    this.log({\n      type: 'suspicious_activity',\n      severity: 'high',\n      message: `Suspicious activity detected: ${reason}`,\n      context,\n      metadata: {\n        reason,\n        ...metadata,\n      },\n    })\n  }\n\n  logAdminAction(\n    context: SecurityLogContext,\n    action: string,\n    metadata?: Record<string, any>\n  ): void {\n    this.log({\n      type: 'admin_action',\n      severity: 'medium',\n      message: `Admin action performed: ${action}`,\n      context,\n      metadata: {\n        action,\n        adminUserId: context.userId,\n        ...metadata,\n      },\n    })\n  }\n\n  logApiError(context: SecurityLogContext, error: Error, metadata?: Record<string, any>): void {\n    this.log({\n      type: 'api_error',\n      severity: 'medium',\n      message: `API error in ${context.endpoint}: ${error.message}`,\n      context,\n      error,\n      metadata,\n    })\n  }\n}\n\n// ===================================\n// INSTANCIA GLOBAL Y FACTORY\n// ===================================\n\nconst globalSecurityLogger = new SecurityLoggerImpl()\n\n/**\n * Crea un logger de seguridad con contexto pre-configurado\n */\nexport function createSecurityLogger(\n  request?: NextRequest,\n  additionalContext?: Partial<SecurityLogContext>\n): SecurityLogger & { context: SecurityLogContext } {\n  const context = request\n    ? extractSecurityContext(request, additionalContext)\n    : ({\n        endpoint: 'unknown',\n        method: 'unknown',\n        timestamp: new Date().toISOString(),\n        ...additionalContext,\n      } as SecurityLogContext)\n\n  return {\n    context,\n    log: globalSecurityLogger.log.bind(globalSecurityLogger),\n    logAuthAttempt: (ctx, success, metadata) =>\n      globalSecurityLogger.logAuthAttempt({ ...context, ...ctx }, success, metadata),\n    logRateLimitExceeded: (ctx, metadata) =>\n      globalSecurityLogger.logRateLimitExceeded({ ...context, ...ctx }, metadata),\n    logPermissionDenied: (ctx, resource, action) =>\n      globalSecurityLogger.logPermissionDenied({ ...context, ...ctx }, resource, action),\n    logSuspiciousActivity: (ctx, reason, metadata) =>\n      globalSecurityLogger.logSuspiciousActivity({ ...context, ...ctx }, reason, metadata),\n    logAdminAction: (ctx, action, metadata) =>\n      globalSecurityLogger.logAdminAction({ ...context, ...ctx }, action, metadata),\n    logApiError: (ctx, error, metadata) =>\n      globalSecurityLogger.logApiError({ ...context, ...ctx }, error, metadata),\n  }\n}\n\n// ===================================\n// HELPERS Y UTILIDADES\n// ===================================\n\n/**\n * Helper para logging rápido de eventos de seguridad\n */\nexport const securityLog = {\n  info: (message: string, context: Partial<SecurityLogContext> = {}) => {\n    globalSecurityLogger.log({\n      type: 'security_scan',\n      severity: 'low',\n      message,\n      context: {\n        endpoint: 'system',\n        method: 'SYSTEM',\n        timestamp: new Date().toISOString(),\n        ...context,\n      },\n    })\n  },\n\n  warn: (message: string, context: Partial<SecurityLogContext> = {}) => {\n    globalSecurityLogger.log({\n      type: 'suspicious_activity',\n      severity: 'medium',\n      message,\n      context: {\n        endpoint: 'system',\n        method: 'SYSTEM',\n        timestamp: new Date().toISOString(),\n        ...context,\n      },\n    })\n  },\n\n  error: (message: string, error?: Error, context: Partial<SecurityLogContext> = {}) => {\n    globalSecurityLogger.log({\n      type: 'api_error',\n      severity: 'high',\n      message,\n      error,\n      context: {\n        endpoint: 'system',\n        method: 'SYSTEM',\n        timestamp: new Date().toISOString(),\n        ...context,\n      },\n    })\n  },\n}\n\nexport default globalSecurityLogger\n"],"names":["createSecurityLogger","extractSecurityContext","securityLog","request","additionalContext","url","URL","forwarded","headers","get","ip","split","trim","requestId","Date","now","Math","random","toString","substr","userAgent","endpoint","pathname","method","timestamp","toISOString","SecurityLoggerImpl","formatLogEntry","event","logEntry","context","level","mapSeverityToLevel","severity","type","event_type","message","metadata","error","name","stack","undefined","JSON","stringify","process","env","NODE_ENV","shouldLog","logLevel","SECURITY_LOG_LEVEL","levels","low","medium","high","critical","currentLevel","eventLevel","log","colors","reset","color","console","toUpperCase","logAuthAttempt","success","userId","logRateLimitExceeded","logPermissionDenied","resource","action","logSuspiciousActivity","reason","logAdminAction","adminUserId","logApiError","globalSecurityLogger","bind","ctx","info","warn"],"mappings":"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"}