1100808b0a50b6933e6d1ded815a654e
/**
 * useCategoryFilter Hook
 * Manages category filter state and logic
 * Pinteya E-commerce - Enterprise-ready implementation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get /**
 * Default export for convenience
 */ default () {
        return _default;
    },
    get isCategoryId () {
        return isCategoryId;
    },
    get useCategoryFilter () {
        return useCategoryFilter;
    },
    get validateCategoryIds () {
        return validateCategoryIds;
    }
});
const _react = require("react");
const _navigation = require("next/navigation");
const useCategoryFilter = (options = {})=>{
    const { initialCategories = [], maxSelections = 10, syncWithUrl = true, urlParamName = 'categories', onCategoryChange, enableAnalytics = true } = options;
    const searchParams = (0, _navigation.useSearchParams)();
    // Initialize state from URL if sync is enabled, otherwise use initial categories
    const getInitialState = (0, _react.useCallback)(()=>{
        if (syncWithUrl) {
            const urlCategories = searchParams.get(urlParamName);
            if (urlCategories) {
                return urlCategories.split(',').filter(Boolean);
            }
        }
        return initialCategories;
    }, [
        syncWithUrl,
        searchParams,
        urlParamName,
        initialCategories
    ]);
    const [selectedCategories, setSelectedCategories] = (0, _react.useState)(getInitialState);
    /**
   * Create category change event for analytics and callbacks
   */ const createChangeEvent = (0, _react.useCallback)((type, categoryId, newCategories, previousCategories)=>({
            type,
            categoryId,
            selectedCategories: newCategories,
            previousCategories,
            timestamp: new Date()
        }), []);
    /**
   * Track analytics event if enabled
   */ const trackAnalytics = (0, _react.useCallback)((event)=>{
        if (!enableAnalytics) {
            return;
        }
        // Track with analytics service (placeholder for actual implementation)
        if (typeof window !== 'undefined' && window.gtag) {
            window.gtag('event', 'category_filter_change', {
                event_category: 'filters',
                event_label: event.categoryId || 'bulk_action',
                value: event.selectedCategories.length,
                custom_parameters: {
                    action_type: event.type,
                    selected_count: event.selectedCategories.length
                }
            });
        }
        // Console log for development
        if (process.env.NODE_ENV === 'development') {}
    }, [
        enableAnalytics
    ]);
    /**
   * Toggle a category selection
   */ const toggleCategory = (0, _react.useCallback)((categoryId)=>{
        setSelectedCategories((prev)=>{
            const isCurrentlySelected = prev.includes(categoryId);
            let newCategories;
            if (isCurrentlySelected) {
                // Remove category
                newCategories = prev.filter((id)=>id !== categoryId);
            } else {
                // Add category (respect max selections)
                if (prev.length >= maxSelections) {
                    console.warn(`Maximum ${maxSelections} categories can be selected`);
                    return prev;
                }
                newCategories = [
                    ...prev,
                    categoryId
                ];
            }
            // Create and track event
            const event = createChangeEvent(isCurrentlySelected ? 'deselect' : 'select', categoryId, newCategories, prev);
            trackAnalytics(event);
            onCategoryChange?.(event);
            return newCategories;
        });
    }, [
        maxSelections,
        createChangeEvent,
        trackAnalytics,
        onCategoryChange
    ]);
    /**
   * Clear all selected categories
   */ const clearAll = (0, _react.useCallback)(()=>{
        setSelectedCategories((prev)=>{
            if (prev.length === 0) {
                return prev;
            }
            const event = createChangeEvent('clear', undefined, [], prev);
            trackAnalytics(event);
            onCategoryChange?.(event);
            return [];
        });
    }, [
        createChangeEvent,
        trackAnalytics,
        onCategoryChange
    ]);
    /**
   * Select all provided categories
   */ const selectAll = (0, _react.useCallback)((categoryIds)=>{
        setSelectedCategories((prev)=>{
            // Respect max selections
            const limitedCategories = categoryIds.slice(0, maxSelections);
            if (categoryIds.length > maxSelections) {
                console.warn(`Only first ${maxSelections} categories will be selected`);
            }
            const event = createChangeEvent('selectAll', undefined, limitedCategories, prev);
            trackAnalytics(event);
            onCategoryChange?.(event);
            return limitedCategories;
        });
    }, [
        maxSelections,
        createChangeEvent,
        trackAnalytics,
        onCategoryChange
    ]);
    /**
   * Check if a category is selected
   */ const isSelected = (0, _react.useCallback)((categoryId)=>{
        return selectedCategories.includes(categoryId);
    }, [
        selectedCategories
    ]);
    /**
   * Get count of selected categories
   */ const selectedCount = (0, _react.useMemo)(()=>selectedCategories.length, [
        selectedCategories
    ]);
    /**
   * Memoized return object for performance
   */ const returnValue = (0, _react.useMemo)(()=>({
            selectedCategories,
            toggleCategory,
            clearAll,
            selectAll,
            isSelected,
            selectedCount
        }), [
        selectedCategories,
        toggleCategory,
        clearAll,
        selectAll,
        isSelected,
        selectedCount
    ]);
    return returnValue;
};
const isCategoryId = (value)=>{
    return typeof value === 'string' && value.length > 0;
};
const validateCategoryIds = (categoryIds)=>{
    return categoryIds.filter(isCategoryId);
};
const _default = useCategoryFilter;

//# sourceMappingURL=data:application/json;base64,