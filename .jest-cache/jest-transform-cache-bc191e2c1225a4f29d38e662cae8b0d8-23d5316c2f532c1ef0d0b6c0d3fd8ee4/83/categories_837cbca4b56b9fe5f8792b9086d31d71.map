{"version":3,"names":["formatCategoryName","cov_1yuzhktzbi","f","s","getCategories","getCategoriesHierarchy","getCategoryBreadcrumb","getCategoryBySlug","getCategoryImage","getCategoryUrl","getMainCategories","getSubcategories","hasSubcategories","searchCategories","filters","searchParams","URLSearchParams","b","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","method","headers","ok","Error","status","statusText","json","error","console","data","parentId","warn","searchTerm","search","buildCategoriesHierarchy","categories","rootCategories","map","category","children","slug","find","categoryId","currentCategory","cat","id","name","charAt","toUpperCase","slice","toLowerCase","icon"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\api\\categories.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - FUNCIONES DE API PARA CATEGORÍAS\r\n// ===================================\r\n\r\nimport { CategoryFilters, ApiResponse } from '@/types/api';\r\nimport { Category } from '@/types/database';\r\n\r\n// ===================================\r\n// FUNCIONES PARA EL FRONTEND\r\n// ===================================\r\n\r\n/**\r\n * Obtiene todas las categorías desde la API\r\n * @param filters - Filtros de categorías\r\n * @returns Promise<ApiResponse<Category[]>>\r\n */\r\nexport async function getCategories(filters?: CategoryFilters): Promise<ApiResponse<Category[]>> {\r\n  try {\r\n    const searchParams = new URLSearchParams();\r\n    \r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          searchParams.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n\r\n    const response = await fetch(`/api/categories?${searchParams.toString()}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error obteniendo categorías:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene todas las categorías (simplificado para la estructura actual)\r\n * @returns Promise<Category[]>\r\n */\r\nexport async function getMainCategories(): Promise<Category[]> {\r\n  try {\r\n    const response = await getCategories();\r\n    return response.data || [];\r\n  } catch (error) {\r\n    console.error('Error obteniendo categorías:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene subcategorías de una categoría padre\r\n * @param parentId - ID de la categoría padre\r\n * @returns Promise<Category[]>\r\n */\r\nexport async function getSubcategories(parentId: number): Promise<Category[]> {\r\n  // Nota: La tabla categories actual no soporta jerarquías (no tiene parent_id)\r\n  // Retornamos array vacío por ahora\r\n  console.warn('getSubcategories: La tabla categories no soporta jerarquías');\r\n  return [];\r\n}\r\n\r\n/**\r\n * Busca categorías por nombre\r\n * @param searchTerm - Término de búsqueda\r\n * @returns Promise<Category[]>\r\n */\r\nexport async function searchCategories(searchTerm: string): Promise<Category[]> {\r\n  try {\r\n    const response = await getCategories({ search: searchTerm });\r\n    return response.data || [];\r\n  } catch (error) {\r\n    console.error('Error buscando categorías:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene la jerarquía completa de categorías\r\n * @returns Promise<CategoryHierarchy[]>\r\n */\r\nexport async function getCategoriesHierarchy(): Promise<CategoryHierarchy[]> {\r\n  try {\r\n    const response = await fetch('/api/categories/hierarchy', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Si no existe el endpoint de jerarquía, construirla manualmente\r\n      return await buildCategoriesHierarchy();\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Error obteniendo jerarquía de categorías:', error);\r\n    return await buildCategoriesHierarchy();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nexport interface CategoryHierarchy extends Category {\r\n  children: CategoryHierarchy[];\r\n}\r\n\r\n/**\r\n * Construye la jerarquía de categorías manualmente\r\n * @returns Promise<CategoryHierarchy[]>\r\n */\r\nasync function buildCategoriesHierarchy(): Promise<CategoryHierarchy[]> {\r\n  try {\r\n    const response = await getCategories();\r\n    const categories = response.data || [];\r\n\r\n    // Como no hay parent_id, todas las categorías son de nivel raíz\r\n    const rootCategories: CategoryHierarchy[] = categories.map(category => ({\r\n      ...category,\r\n      children: []\r\n    }));\r\n\r\n    return rootCategories;\r\n  } catch (error) {\r\n    console.error('Error construyendo jerarquía de categorías:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Encuentra una categoría por slug\r\n * @param slug - Slug de la categoría\r\n * @param categories - Lista de categorías (opcional)\r\n * @returns Promise<Category | null>\r\n */\r\nexport async function getCategoryBySlug(\r\n  slug: string,\r\n  categories?: Category[]\r\n): Promise<Category | null> {\r\n  try {\r\n    if (!categories) {\r\n      const response = await getCategories();\r\n      categories = response.data || [];\r\n    }\r\n\r\n    return categories.find(category => category.slug === slug) || null;\r\n  } catch (error) {\r\n    console.error(`Error obteniendo categoría por slug ${slug}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el breadcrumb de una categoría\r\n * @param categoryId - ID de la categoría\r\n * @param categories - Lista de categorías (opcional)\r\n * @returns Promise<Category[]>\r\n */\r\nexport async function getCategoryBreadcrumb(\r\n  categoryId: number,\r\n  categories?: Category[]\r\n): Promise<Category[]> {\r\n  try {\r\n    if (!categories) {\r\n      const response = await getCategories();\r\n      categories = response.data || [];\r\n    }\r\n\r\n    // Como no hay jerarquías, el breadcrumb solo incluye la categoría actual\r\n    const currentCategory = categories.find(cat => cat.id === categoryId);\r\n    return currentCategory ? [currentCategory] : [];\r\n  } catch (error) {\r\n    console.error(`Error obteniendo breadcrumb de categoría ${categoryId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica si una categoría tiene subcategorías\r\n * @param categoryId - ID de la categoría\r\n * @param categories - Lista de categorías (opcional)\r\n * @returns Promise<boolean>\r\n */\r\nexport async function hasSubcategories(\r\n  categoryId: number,\r\n  categories?: Category[]\r\n): Promise<boolean> {\r\n  // Como no hay jerarquías, ninguna categoría tiene subcategorías\r\n  return false;\r\n}\r\n\r\n/**\r\n * Formatea el nombre de la categoría para mostrar\r\n * @param category - Categoría\r\n * @returns string\r\n */\r\nexport function formatCategoryName(category: Category): string {\r\n  return category.name.charAt(0).toUpperCase() + category.name.slice(1).toLowerCase();\r\n}\r\n\r\n/**\r\n * Genera la URL de la categoría\r\n * @param category - Categoría\r\n * @returns string\r\n */\r\nexport function getCategoryUrl(category: Category): string {\r\n  return `/shop?category=${category.slug}`;\r\n}\r\n\r\n/**\r\n * Obtiene la imagen de la categoría o una por defecto\r\n * @param category - Categoría\r\n * @returns string\r\n */\r\nexport function getCategoryImage(category: Category): string {\r\n  return (category && category.icon) ? category.icon : '/images/categories/default.jpg';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}