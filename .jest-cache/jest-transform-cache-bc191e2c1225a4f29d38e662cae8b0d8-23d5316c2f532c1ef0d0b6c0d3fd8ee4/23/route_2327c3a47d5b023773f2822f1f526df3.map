{"version":3,"names":["cov_1nu7i19u4d","actualCoverage","s","DELETE","f","GET","POST","runtime","request","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","url","URL","includeRedisStats","searchParams","get","includeMemoryStats","includeTopKeys","cleanup","redisAvailable","_redis","isRedisAvailable","collectorMetrics","_enterpriseratelimiter","metricsCollector","getMetrics","redisStats","getRateLimitStats","memoryStats","memoryStore","getStats","cleanupResult","cleanedKeys","cleanupRateLimitKeys","timestamp","Date","toISOString","derivedMetrics","successRate","totalRequests","allowedRequests","blockRate","blockedRequests","redisUsageRate","redisHits","errorRate","errors","response","data","overview","requestedBy","userId","collector","derived","redis","memory","requester","role","permissions","security","level","securityLevel","validations","message","console","body","action","resetCollector","cleanupRedis","pattern","results","actions","reset","push","updatedMetrics","operations","audit","force","destructive"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\rate-limiting\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Métricas de Rate Limiting Enterprise\r\n * Proporciona estadísticas detalladas del sistema de rate limiting\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  getRateLimitStats, \r\n  cleanupRateLimitKeys,\r\n  isRedisAvailable \r\n} from '@/lib/integrations/redis';\r\nimport { \r\n  metricsCollector,\r\n  memoryStore \r\n} from '@/lib/rate-limiting/enterprise-rate-limiter';\r\n\r\n// =====================================================\r\n// GET /api/admin/rate-limiting/metrics\r\n// Obtiene métricas completas de rate limiting\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'metrics_read']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const includeRedisStats = url.searchParams.get('redis') !== 'false';\r\n    const includeMemoryStats = url.searchParams.get('memory') !== 'false';\r\n    const includeTopKeys = url.searchParams.get('topKeys') !== 'false';\r\n    const cleanup = url.searchParams.get('cleanup') === 'true';\r\n\r\n    // Verificar disponibilidad de Redis\r\n    const redisAvailable = await isRedisAvailable();\r\n\r\n    // Obtener métricas del collector\r\n    const collectorMetrics = includeMemoryStats ? metricsCollector.getMetrics() : null;\r\n\r\n    // Obtener estadísticas de Redis si está disponible\r\n    let redisStats = null;\r\n    if (redisAvailable && includeRedisStats) {\r\n      redisStats = await getRateLimitStats();\r\n    }\r\n\r\n    // Obtener estadísticas del store en memoria\r\n    let memoryStats = null;\r\n    if (includeMemoryStats) {\r\n      memoryStats = memoryStore.getStats();\r\n    }\r\n\r\n    // Limpiar claves expiradas si se solicita\r\n    let cleanupResult = null;\r\n    if (cleanup && redisAvailable) {\r\n      const cleanedKeys = await cleanupRateLimitKeys();\r\n      cleanupResult = {\r\n        cleanedKeys,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    // Calcular métricas derivadas\r\n    const derivedMetrics = collectorMetrics ? {\r\n      successRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.allowedRequests / collectorMetrics.totalRequests) * 100 \r\n        : 100,\r\n      blockRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.blockedRequests / collectorMetrics.totalRequests) * 100 \r\n        : 0,\r\n      redisUsageRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.redisHits / collectorMetrics.totalRequests) * 100 \r\n        : 0,\r\n      errorRate: collectorMetrics.totalRequests > 0 \r\n        ? (collectorMetrics.errors / collectorMetrics.totalRequests) * 100 \r\n        : 0\r\n    } : null;\r\n\r\n    // Construir respuesta\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        overview: {\r\n          redisAvailable,\r\n          timestamp: new Date().toISOString(),\r\n          requestedBy: context.userId\r\n        },\r\n        collector: collectorMetrics,\r\n        derived: derivedMetrics,\r\n        redis: redisStats,\r\n        memory: memoryStats,\r\n        cleanup: cleanupResult\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          validations: context.validations\r\n        }\r\n      },\r\n      message: 'Métricas de rate limiting obtenidas correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_METRICS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener métricas de rate limiting',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/rate-limiting/metrics\r\n// Resetea métricas o ejecuta operaciones de mantenimiento\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin con permisos críticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'metrics_write', 'system_maintenance']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      action = 'reset',\r\n      resetCollector = false,\r\n      cleanupRedis = false,\r\n      pattern = 'rate_limit:*'\r\n    } = body;\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      actions: []\r\n    };\r\n\r\n    // Resetear métricas del collector\r\n    if (action === 'reset' || resetCollector) {\r\n      metricsCollector.reset();\r\n      results.actions.push({\r\n        action: 'reset_collector',\r\n        success: true,\r\n        message: 'Métricas del collector reseteadas'\r\n      });\r\n    }\r\n\r\n    // Limpiar claves de Redis\r\n    if (action === 'cleanup' || cleanupRedis) {\r\n      const redisAvailable = await isRedisAvailable();\r\n      \r\n      if (redisAvailable) {\r\n        const cleanedKeys = await cleanupRateLimitKeys(pattern);\r\n        results.actions.push({\r\n          action: 'cleanup_redis',\r\n          success: true,\r\n          cleanedKeys,\r\n          pattern,\r\n          message: `${cleanedKeys} claves limpiadas de Redis`\r\n        });\r\n      } else {\r\n        results.actions.push({\r\n          action: 'cleanup_redis',\r\n          success: false,\r\n          message: 'Redis no disponible para limpieza'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Obtener estadísticas actualizadas\r\n    const updatedMetrics = metricsCollector.getMetrics();\r\n    const redisStats = await isRedisAvailable() ? await getRateLimitStats() : null;\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        operations: results,\r\n        updatedMetrics: {\r\n          collector: updatedMetrics,\r\n          redis: redisStats\r\n        }\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: 'Operaciones de mantenimiento completadas'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_MAINTENANCE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en operaciones de mantenimiento',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// DELETE /api/admin/rate-limiting/metrics\r\n// Elimina métricas específicas o todas\r\n// =====================================================\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin con permisos críticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'system_maintenance']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const url = new URL(request.url);\r\n    const pattern = url.searchParams.get('pattern') || 'rate_limit:*';\r\n    const force = url.searchParams.get('force') === 'true';\r\n\r\n    if (!force) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Operación de eliminación requiere confirmación con force=true',\r\n          code: 'CONFIRMATION_REQUIRED',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      pattern,\r\n      actions: []\r\n    };\r\n\r\n    // Resetear collector\r\n    metricsCollector.reset();\r\n    results.actions.push({\r\n      action: 'reset_collector',\r\n      success: true\r\n    });\r\n\r\n    // Limpiar Redis si está disponible\r\n    const redisAvailable = await isRedisAvailable();\r\n    if (redisAvailable) {\r\n      const cleanedKeys = await cleanupRateLimitKeys(pattern);\r\n      results.actions.push({\r\n        action: 'cleanup_redis',\r\n        success: true,\r\n        cleanedKeys,\r\n        pattern\r\n      });\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: results,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true,\r\n          destructive: true\r\n        }\r\n      },\r\n      message: 'Métricas eliminadas correctamente'\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[RATE_LIMIT_DELETE] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al eliminar métricas',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}