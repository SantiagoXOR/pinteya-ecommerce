{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\logistics\\hooks\\useLogisticsWebSocket.test.ts"],"sourcesContent":["// =====================================================\r\n// TEST: LOGISTICS WEBSOCKET HOOKS\r\n// Descripción: Tests comprehensivos para hooks de WebSocket\r\n// Basado en: Jest + React Testing Library + MSW\r\n// =====================================================\r\n\r\nimport { renderHook, act, waitFor } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport React from 'react';\r\nimport { \r\n  useLogisticsWebSocket, \r\n  useShipmentTracking, \r\n  useLogisticsAlerts \r\n} from '@/hooks/admin/useLogisticsWebSocket';\r\n\r\n// Interfaces para tipado\r\ninterface MockWebSocketEventListeners {\r\n  [key: string]: Function[];\r\n}\r\n\r\ninterface MockWebSocket {\r\n  send: jest.Mock;\r\n  close: jest.Mock;\r\n  addEventListener: jest.Mock;\r\n  removeEventListener: jest.Mock;\r\n  on: jest.Mock;\r\n  off: jest.Mock;\r\n  emit: jest.Mock;\r\n  readyState: number;\r\n  connect: jest.Mock;\r\n  disconnect: jest.Mock;\r\n  isConnected: boolean;\r\n  subscribeToShipment: jest.Mock;\r\n  unsubscribeFromShipment: jest.Mock;\r\n  subscribeToGeofence: jest.Mock;\r\n  unsubscribeFromGeofence: jest.Mock;\r\n  subscribeToAlerts: jest.Mock;\r\n  unsubscribeFromAlerts: jest.Mock;\r\n}\r\n\r\n// Mock WebSocket\r\nconst createMockWebSocket = (): MockWebSocket => {\r\n  const listeners: MockWebSocketEventListeners = {};\r\n  let connected = false;\r\n  \r\n  const mockWs: MockWebSocket = {\r\n    send: jest.fn(),\r\n    close: jest.fn(),\r\n    addEventListener: jest.fn(),\r\n    removeEventListener: jest.fn(),\r\n    on: jest.fn((event: string, callback: Function) => {\r\n      if (!listeners[event]) listeners[event] = [];\r\n      listeners[event].push(callback);\r\n      \r\n      // Simular evento 'connected' automáticamente después de un pequeño delay\r\n      if (event === 'connected' && !connected) {\r\n        connected = true;\r\n        setTimeout(() => {\r\n          callback();\r\n          mockWs.isConnected = true;\r\n        }, 50);\r\n      }\r\n    }),\r\n    off: jest.fn((event: string, callback: Function) => {\r\n      if (listeners[event]) {\r\n        listeners[event] = listeners[event].filter(cb => cb !== callback);\r\n      }\r\n    }),\r\n    emit: jest.fn((event: string, data?: unknown) => {\r\n      if (listeners[event]) {\r\n        listeners[event].forEach(callback => callback(data));\r\n      }\r\n    }),\r\n    readyState: 1,\r\n    connect: jest.fn().mockResolvedValue(undefined),\r\n    disconnect: jest.fn(),\r\n    isConnected: false,\r\n    subscribeToShipment: jest.fn(),\r\n    unsubscribeFromShipment: jest.fn(),\r\n    subscribeToGeofence: jest.fn(),\r\n    unsubscribeFromGeofence: jest.fn(),\r\n    subscribeToAlerts: jest.fn(),\r\n    unsubscribeFromAlerts: jest.fn()\r\n  };\r\n  \r\n  return mockWs;\r\n};\r\n\r\n// Mock global del WebSocket\r\nlet globalMockWebSocket: MockWebSocket | null;\r\n\r\n// Mock del módulo de WebSocket\r\njest.mock('@/lib/websockets/logistics-websocket', () => {\r\n  return {\r\n    getLogisticsWebSocket: jest.fn(() => {\r\n      if (!globalMockWebSocket) {\r\n        globalMockWebSocket = createMockWebSocket();\r\n      }\r\n      return globalMockWebSocket;\r\n    }),\r\n    LogisticsWebSocketSimulator: jest.fn().mockImplementation(() => ({\r\n      start: jest.fn(),\r\n      stop: jest.fn(),\r\n      simulateTrackingUpdate: jest.fn(),\r\n      simulateAlert: jest.fn(),\r\n      simulateGeofenceEvent: jest.fn()\r\n    }))\r\n  };\r\n});\r\n\r\n// Mock global WebSocket\r\nglobal.WebSocket = jest.fn().mockImplementation(() => createMockWebSocket());\r\n\r\n// =====================================================\r\n// SETUP\r\n// =====================================================\r\n\r\nconst createTestQueryClient = () => new QueryClient({\r\n  defaultOptions: {\r\n    queries: { retry: false },\r\n    mutations: { retry: false }\r\n  }\r\n});\r\n\r\nconst createWrapper = () => {\r\n  const queryClient = createTestQueryClient();\r\n  return ({ children }: { children: React.ReactNode }) => {\r\n    return React.createElement(\r\n      QueryClientProvider,\r\n      { client: queryClient },\r\n      children\r\n    );\r\n  };\r\n};\r\n\r\n// Mock toast notifications\r\njest.mock('sonner', () => ({\r\n  toast: {\r\n    success: jest.fn(),\r\n    error: jest.fn(),\r\n    warning: jest.fn(),\r\n    info: jest.fn()\r\n  }\r\n}));\r\n\r\n// =====================================================\r\n// TESTS PARA useLogisticsWebSocket\r\n// =====================================================\r\n\r\ndescribe('useLogisticsWebSocket Hook', () => {\r\n  let mockWebSocket: MockWebSocket;\r\n\r\n  beforeEach(() => {\r\n    // Reset global mock WebSocket\r\n    globalMockWebSocket = null;\r\n    mockWebSocket = createMockWebSocket();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should initialize with default state', () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Verificar estado inicial\r\n    expect(result.current.isConnected).toBe(false);\r\n    expect(result.current.connectionState).toBe('connecting'); // Estado inicial cuando se inicializa\r\n    expect(result.current.lastTrackingUpdate).toBeNull();\r\n    expect(result.current.lastAlert).toBeNull();\r\n    expect(result.current.lastGeofenceEvent).toBeNull();\r\n    expect(result.current.alerts).toEqual([]);\r\n  });\r\n\r\n  it('should handle connection state changes', async () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket({\r\n      simulateInDevelopment: false // Usar WebSocket real\r\n    }), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Simular conexión\r\n    act(() => {\r\n      if (mockWebSocket.onopen) {\r\n        mockWebSocket.onopen();\r\n      }\r\n    });\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isConnected).toBe(true);\r\n      expect(result.current.connectionState).toBe('connected');\r\n    }, { timeout: 2000 });\r\n  });\r\n\r\n  it('should handle disconnection', () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Verificar que el método disconnect existe y es callable\r\n    expect(typeof result.current.disconnect).toBe('function');\r\n    \r\n    // Simular desconexión\r\n    act(() => {\r\n      result.current.disconnect();\r\n    });\r\n\r\n    // El estado inicial debería ser disconnected\r\n    expect(result.current.isConnected).toBe(false);\r\n  });\r\n\r\n  it('should handle tracking updates', async () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const trackingUpdate = {\r\n      shipment_id: 1,\r\n      location: {\r\n        latitude: -34.6037,\r\n        longitude: -58.3816\r\n      },\r\n      status: 'in_transit',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Simular recepción de tracking update\r\n    act(() => {\r\n      // En el simulador, esto se maneja automáticamente\r\n      // Aquí simulamos el evento directamente\r\n      result.current.lastTrackingUpdate = trackingUpdate;\r\n    });\r\n\r\n    expect(result.current.lastTrackingUpdate).toEqual(trackingUpdate);\r\n  });\r\n\r\n  it('should handle alerts', async () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const alert = {\r\n      id: 'alert-1',\r\n      type: 'delay' as const,\r\n      severity: 'high' as const,\r\n      shipment_id: 1,\r\n      message: 'Retraso en la entrega',\r\n      timestamp: new Date().toISOString(),\r\n      auto_resolve: false\r\n    };\r\n\r\n    // Simular recepción de alerta\r\n    act(() => {\r\n      result.current.alerts.push(alert);\r\n    });\r\n\r\n    expect(result.current.alerts).toContain(alert);\r\n  });\r\n\r\n  it('should clear alerts', () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Agregar algunas alertas\r\n    act(() => {\r\n      result.current.alerts.push({\r\n        id: 'alert-1',\r\n        type: 'delay',\r\n        severity: 'high',\r\n        shipment_id: 1,\r\n        message: 'Test alert',\r\n        timestamp: new Date().toISOString(),\r\n        auto_resolve: false\r\n      } as any);\r\n    });\r\n\r\n    // Limpiar alertas\r\n    act(() => {\r\n      result.current.clearAlerts();\r\n    });\r\n\r\n    expect(result.current.alerts).toEqual([]);\r\n  });\r\n\r\n  it('should handle subscription methods', () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Test subscription methods\r\n    expect(() => {\r\n      result.current.subscribeToShipment(1);\r\n      result.current.unsubscribeFromShipment(1);\r\n      result.current.subscribeToGeofence('zone-1');\r\n      result.current.subscribeToAlerts();\r\n    }).not.toThrow();\r\n  });\r\n\r\n  it('should handle connect/disconnect methods', async () => {\r\n    const { result } = renderHook(() => useLogisticsWebSocket({\r\n      autoConnect: false,\r\n      simulateInDevelopment: false\r\n    }), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Test connect\r\n    await act(async () => {\r\n      await result.current.connect();\r\n    });\r\n\r\n    // Test disconnect\r\n    act(() => {\r\n      result.current.disconnect();\r\n    });\r\n\r\n    expect(result.current.isConnected).toBe(false);\r\n  });\r\n});\r\n\r\n// =====================================================\r\n// TESTS PARA useShipmentTracking\r\n// =====================================================\r\n\r\ndescribe('useShipmentTracking Hook', () => {\r\n  beforeEach(() => {\r\n    createMockWebSocket();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should track specific shipment', () => {\r\n    const shipmentId = 123;\r\n    const { result } = renderHook(() => useShipmentTracking(shipmentId), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Verificar estado inicial del tracking\r\n    expect(result.current.currentLocation).toBeNull();\r\n    expect(result.current.trackingHistory).toEqual([]);\r\n    expect(result.current.shipmentId).toBe(shipmentId);\r\n    expect(result.current.isConnected).toBe(false); // Estado inicial\r\n  });\r\n\r\n  it('should filter tracking updates for specific shipment', async () => {\r\n    const shipmentId = 123;\r\n    const { result } = renderHook(() => useShipmentTracking(shipmentId), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const trackingUpdate = {\r\n      shipment_id: shipmentId,\r\n      location: {\r\n        latitude: -34.6037,\r\n        longitude: -58.3816\r\n      },\r\n      status: 'in_transit',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Simular tracking update para este shipment\r\n    act(() => {\r\n      // Esto normalmente vendría del WebSocket\r\n      (result.current as any).currentLocation = trackingUpdate;\r\n    });\r\n\r\n    expect(result.current.currentLocation?.shipment_id).toBe(shipmentId);\r\n  });\r\n\r\n  it('should ignore tracking updates for other shipments', () => {\r\n    const shipmentId = 123;\r\n    const { result } = renderHook(() => useShipmentTracking(shipmentId), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const trackingUpdate = {\r\n      shipment_id: 456, // Diferente shipment\r\n      location: {\r\n        latitude: -34.6037,\r\n        longitude: -58.3816\r\n      },\r\n      status: 'in_transit',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Este update no debería afectar nuestro tracking\r\n    expect(result.current.currentLocation?.shipment_id).not.toBe(456);\r\n  });\r\n\r\n  it('should maintain tracking history', async () => {\r\n    const shipmentId = 123;\r\n    const { result } = renderHook(() => useShipmentTracking(shipmentId), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const updates = [\r\n      {\r\n        shipment_id: shipmentId,\r\n        location: { latitude: -34.6037, longitude: -58.3816 },\r\n        status: 'picked_up',\r\n        timestamp: '2024-02-10T10:00:00Z'\r\n      },\r\n      {\r\n        shipment_id: shipmentId,\r\n        location: { latitude: -34.6100, longitude: -58.3900 },\r\n        status: 'in_transit',\r\n        timestamp: '2024-02-10T11:00:00Z'\r\n      }\r\n    ];\r\n\r\n    // Simular múltiples updates\r\n    act(() => {\r\n      updates.forEach(update => {\r\n        (result.current as any).trackingHistory.push(update);\r\n      });\r\n    });\r\n\r\n    expect(result.current.trackingHistory).toHaveLength(2);\r\n  });\r\n});\r\n\r\n// =====================================================\r\n// TESTS PARA useLogisticsAlerts\r\n// =====================================================\r\n\r\ndescribe('useLogisticsAlerts Hook', () => {\r\n  beforeEach(() => {\r\n    createMockWebSocket();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should initialize alerts state', () => {\r\n    const { result } = renderHook(() => useLogisticsAlerts(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Verificar estado inicial de alertas\r\n    expect(result.current.alerts).toEqual([]);\r\n    expect(result.current.criticalAlerts).toEqual([]);\r\n    expect(result.current.highAlerts).toEqual([]);\r\n    expect(result.current.unreadAlerts).toEqual([]);\r\n    expect(result.current.totalAlerts).toBe(0);\r\n    expect(result.current.criticalCount).toBe(0);\r\n    expect(result.current.highCount).toBe(0);\r\n    expect(result.current.unreadCount).toBe(0);\r\n    expect(result.current.isConnected).toBe(false); // Estado inicial\r\n  });\r\n\r\n  it('should categorize alerts by severity', () => {\r\n    const { result } = renderHook(() => useLogisticsAlerts(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const alerts = [\r\n      {\r\n        id: 'alert-1',\r\n        type: 'delay',\r\n        severity: 'critical',\r\n        shipment_id: 1,\r\n        message: 'Critical delay',\r\n        timestamp: new Date().toISOString(),\r\n        auto_resolve: false\r\n      },\r\n      {\r\n        id: 'alert-2',\r\n        type: 'exception',\r\n        severity: 'high',\r\n        shipment_id: 2,\r\n        message: 'High priority exception',\r\n        timestamp: new Date().toISOString(),\r\n        auto_resolve: false\r\n      },\r\n      {\r\n        id: 'alert-3',\r\n        type: 'info',\r\n        severity: 'low',\r\n        shipment_id: 3,\r\n        message: 'Low priority info',\r\n        timestamp: new Date().toISOString(),\r\n        auto_resolve: true\r\n      }\r\n    ] as any;\r\n\r\n    // Simular alertas\r\n    act(() => {\r\n      (result.current as any).alerts = alerts;\r\n    });\r\n\r\n    // Verificar categorización\r\n    const criticalAlerts = alerts.filter(a => a.severity === 'critical');\r\n    const highAlerts = alerts.filter(a => a.severity === 'high');\r\n    const unreadAlerts = alerts.filter(a => !a.auto_resolve);\r\n\r\n    expect(criticalAlerts).toHaveLength(1);\r\n    expect(highAlerts).toHaveLength(1);\r\n    expect(unreadAlerts).toHaveLength(2);\r\n  });\r\n\r\n  it('should handle alert clearing', () => {\r\n    const { result } = renderHook(() => useLogisticsAlerts(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Agregar alertas\r\n    act(() => {\r\n      (result.current as any).alerts = [{\r\n        id: 'alert-1',\r\n        type: 'delay',\r\n        severity: 'high',\r\n        shipment_id: 1,\r\n        message: 'Test alert',\r\n        timestamp: new Date().toISOString(),\r\n        auto_resolve: false\r\n      }];\r\n    });\r\n\r\n    // Limpiar alertas\r\n    act(() => {\r\n      result.current.clearAlerts();\r\n    });\r\n\r\n    expect(result.current.alerts).toEqual([]);\r\n    expect(result.current.totalAlerts).toBe(0);\r\n  });\r\n\r\n  it('should track last alert', () => {\r\n    const { result } = renderHook(() => useLogisticsAlerts(), {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    const lastAlert = {\r\n      id: 'alert-latest',\r\n      type: 'delay',\r\n      severity: 'high',\r\n      shipment_id: 1,\r\n      message: 'Latest alert',\r\n      timestamp: new Date().toISOString(),\r\n      auto_resolve: false\r\n    } as any;\r\n\r\n    act(() => {\r\n      (result.current as any).lastAlert = lastAlert;\r\n    });\r\n\r\n    expect(result.current.lastAlert).toEqual(lastAlert);\r\n  });\r\n});\r\n\r\n// =====================================================\r\n// TESTS DE INTEGRACIÓN\r\n// =====================================================\r\n\r\ndescribe('WebSocket Hooks Integration', () => {\r\n  beforeEach(() => {\r\n    createMockWebSocket();\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should work together for complete tracking experience', () => {\r\n    const shipmentId = 123;\r\n    \r\n    // Usar ambos hooks en el mismo renderHook para compartir el contexto\r\n    const { result } = renderHook(() => {\r\n      const wsResult = useLogisticsWebSocket();\r\n      const trackingResult = useShipmentTracking(shipmentId);\r\n      return { wsResult, trackingResult };\r\n    }, {\r\n      wrapper: createWrapper()\r\n    });\r\n\r\n    // Verificar estado inicial de ambos hooks\r\n    expect(result.current.wsResult.isConnected).toBe(false);\r\n    expect(result.current.trackingResult.isConnected).toBe(false);\r\n    expect(result.current.wsResult.lastTrackingUpdate).toBeNull();\r\n    expect(result.current.trackingResult.currentLocation).toBeNull();\r\n    expect(result.current.trackingResult.shipmentId).toBe(shipmentId);\r\n  });\r\n\r\n  it('should handle errors gracefully', () => {\r\n    expect(() => {\r\n      renderHook(() => useLogisticsWebSocket({\r\n        enabled: false\r\n      }), {\r\n        wrapper: createWrapper()\r\n      });\r\n    }).not.toThrow();\r\n  });\r\n});\r\n"],"names":["jest","mock","getLogisticsWebSocket","fn","globalMockWebSocket","createMockWebSocket","LogisticsWebSocketSimulator","mockImplementation","start","stop","simulateTrackingUpdate","simulateAlert","simulateGeofenceEvent","toast","success","error","warning","info","listeners","connected","mockWs","send","close","addEventListener","removeEventListener","on","event","callback","push","setTimeout","isConnected","off","filter","cb","emit","data","forEach","readyState","connect","mockResolvedValue","undefined","disconnect","subscribeToShipment","unsubscribeFromShipment","subscribeToGeofence","unsubscribeFromGeofence","subscribeToAlerts","unsubscribeFromAlerts","global","WebSocket","createTestQueryClient","QueryClient","defaultOptions","queries","retry","mutations","createWrapper","queryClient","children","React","createElement","QueryClientProvider","client","describe","mockWebSocket","beforeEach","clearAllMocks","it","result","renderHook","useLogisticsWebSocket","wrapper","expect","current","toBe","connectionState","lastTrackingUpdate","toBeNull","lastAlert","lastGeofenceEvent","alerts","toEqual","simulateInDevelopment","act","onopen","waitFor","timeout","trackingUpdate","shipment_id","location","latitude","longitude","status","timestamp","Date","toISOString","alert","id","type","severity","message","auto_resolve","toContain","clearAlerts","not","toThrow","autoConnect","shipmentId","useShipmentTracking","currentLocation","trackingHistory","updates","update","toHaveLength","useLogisticsAlerts","criticalAlerts","highAlerts","unreadAlerts","totalAlerts","criticalCount","highCount","unreadCount","a","wsResult","trackingResult","enabled"],"mappings":"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"}