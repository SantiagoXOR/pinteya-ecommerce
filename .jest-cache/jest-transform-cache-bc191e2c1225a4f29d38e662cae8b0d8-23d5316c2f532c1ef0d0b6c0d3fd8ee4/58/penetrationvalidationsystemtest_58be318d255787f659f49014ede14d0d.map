{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\security\\penetration-validation-system.test.ts"],"sourcesContent":["/**\r\n * Tests de Penetración para Sistema de Validación Enterprise\r\n * Valida la robustez contra ataques de inyección, XSS, y bypass de validación\r\n */\r\n\r\n// Mock de dependencias\r\njest.mock('@/lib/security/enterprise-audit-system', () => ({\r\n  enterpriseAuditSystem: {\r\n    logEnterpriseEvent: jest.fn()\r\n  }\r\n}));\r\n\r\njest.mock('isomorphic-dompurify', () => ({\r\n  __esModule: true,\r\n  default: {\r\n    sanitize: jest.fn((input, options) => {\r\n      // Simular DOMPurify real\r\n      let cleaned = input;\r\n      if (options?.ALLOWED_TAGS?.length === 0) {\r\n        cleaned = cleaned.replace(/<[^>]*>/g, '');\r\n      }\r\n      cleaned = cleaned.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n      return cleaned;\r\n    })\r\n  }\r\n}));\r\n\r\njest.mock('validator', () => ({\r\n  __esModule: true,\r\n  default: {\r\n    escape: jest.fn((input) => \r\n      input.replace(/[<>&\"']/g, (char) => {\r\n        const entities: Record<string, string> = {\r\n          '<': '&lt;',\r\n          '>': '&gt;',\r\n          '&': '&amp;',\r\n          '\"': '&quot;',\r\n          \"'\": '&#x27;'\r\n        };\r\n        return entities[char] || char;\r\n      })\r\n    )\r\n  }\r\n}));\r\n\r\nimport { z } from 'zod';\r\nimport {\r\n  EnterpriseValidator,\r\n  EnterpriseSanitizer,\r\n  ENTERPRISE_VALIDATION_CONFIGS,\r\n  criticalValidator,\r\n  highValidator\r\n} from '@/lib/validation/enterprise-validation-system';\r\nimport {\r\n  EnterpriseEmailSchema,\r\n  EnterprisePasswordSchema,\r\n  EnterpriseProductSchema\r\n} from '@/lib/validation/enterprise-schemas';\r\nimport type { EnterpriseAuthContext } from '@/lib/auth/enterprise-auth-utils';\r\n\r\ndescribe('Tests de Penetración - Sistema de Validación Enterprise', () => {\r\n  let mockContext: EnterpriseAuthContext;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    mockContext = {\r\n      userId: 'test_user_123',\r\n      sessionId: 'test_session_123',\r\n      email: 'test@example.com',\r\n      role: 'admin',\r\n      permissions: ['admin_access'],\r\n      sessionValid: true,\r\n      securityLevel: 'critical',\r\n      ipAddress: '192.168.1.1',\r\n      userAgent: 'test-agent',\r\n      supabase: {} as any,\r\n      validations: {\r\n        jwtValid: true,\r\n        csrfValid: true,\r\n        rateLimitPassed: true,\r\n        originValid: true\r\n      }\r\n    };\r\n  });\r\n\r\n  describe('Ataques de Inyección SQL', () => {\r\n    it('debe detectar y bloquear inyecciones SQL básicas', async () => {\r\n      const sqlInjectionPayloads = [\r\n        \"'; DROP TABLE users; --\",\r\n        \"' OR '1'='1\",\r\n        \"' UNION SELECT * FROM admin_users --\",\r\n        \"'; INSERT INTO users (role) VALUES ('admin'); --\",\r\n        \"' AND 1=1 --\",\r\n        \"' OR 1=1 #\",\r\n        \"'; EXEC xp_cmdshell('dir'); --\",\r\n        \"' UNION ALL SELECT password FROM users WHERE '1'='1\",\r\n        \"'; UPDATE users SET role='admin' WHERE id=1; --\",\r\n        \"' OR EXISTS(SELECT * FROM users WHERE role='admin') --\"\r\n      ];\r\n\r\n      const schema = z.object({\r\n        search: z.string(),\r\n        filter: z.string()\r\n      });\r\n\r\n      let blockedCount = 0;\r\n      let allowedCount = 0;\r\n\r\n      for (const payload of sqlInjectionPayloads) {\r\n        const testData = {\r\n          search: payload,\r\n          filter: `category = '${payload}'`\r\n        };\r\n\r\n        const result = await criticalValidator.validateAndSanitize(\r\n          schema,\r\n          testData,\r\n          mockContext\r\n        );\r\n\r\n        if (!result.success) {\r\n          const hasSQLError = result.errors?.some(e => \r\n            e.code === 'SQL_INJECTION_DETECTED' || \r\n            e.message.includes('SQL') ||\r\n            e.message.includes('injection')\r\n          );\r\n          \r\n          if (hasSQLError) {\r\n            blockedCount++;\r\n          } else {\r\n            allowedCount++;\r\n          }\r\n        } else {\r\n          // Verificar que fue sanitizado\r\n          const sanitizedSearch = result.sanitized?.search || '';\r\n          const sanitizedFilter = result.sanitized?.filter || '';\r\n          \r\n          const containsSQLKeywords = \r\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|EXEC)\\b/i.test(sanitizedSearch) ||\r\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|EXEC)\\b/i.test(sanitizedFilter);\r\n          \r\n          if (containsSQLKeywords) {\r\n            allowedCount++; // Payload pasó sin sanitización adecuada\r\n          } else {\r\n            blockedCount++; // Payload fue sanitizado correctamente\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar que la mayoría de inyecciones fueron bloqueadas/sanitizadas\r\n      expect(blockedCount).toBeGreaterThan(allowedCount);\r\n      expect(blockedCount).toBeGreaterThan(7); // Al menos 70% bloqueadas\r\n    });\r\n\r\n    it('debe detectar inyecciones SQL avanzadas y ofuscadas', async () => {\r\n      const advancedSQLPayloads = [\r\n        // Ofuscación con comentarios\r\n        \"'; /*comment*/ DROP /*comment*/ TABLE users; --\",\r\n        \r\n        // Codificación hexadecimal\r\n        \"'; SELECT 0x41646d696e; --\", // 'Admin' en hex\r\n        \r\n        // Bypass con espacios y tabs\r\n        \"';\\t\\nSELECT\\t*\\nFROM\\tusers\\tWHERE\\t'1'='1\",\r\n        \r\n        // Inyección con funciones\r\n        \"'; SELECT CHAR(65,68,77,73,78); --\", // 'ADMIN'\r\n        \r\n        // Bypass con concatenación\r\n        \"'; SELECT 'ad'+'min' FROM users; --\",\r\n        \r\n        // Inyección con subconsultas\r\n        \"' AND (SELECT COUNT(*) FROM users WHERE role='admin') > 0 --\",\r\n        \r\n        // Bypass con CASE statements\r\n        \"'; SELECT CASE WHEN (1=1) THEN 'admin' ELSE 'user' END; --\",\r\n        \r\n        // Time-based blind injection\r\n        \"'; WAITFOR DELAY '00:00:05'; --\",\r\n        \r\n        // Boolean-based blind injection\r\n        \"' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE id=1)='a\",\r\n        \r\n        // Error-based injection\r\n        \"' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT password FROM users LIMIT 1), 0x7e)); --\"\r\n      ];\r\n\r\n      const schema = z.object({\r\n        query: z.string(),\r\n        params: z.string()\r\n      });\r\n\r\n      let detectedCount = 0;\r\n\r\n      for (const payload of advancedSQLPayloads) {\r\n        const testData = {\r\n          query: payload,\r\n          params: `param=${payload}`\r\n        };\r\n\r\n        const result = await criticalValidator.validateAndSanitize(\r\n          schema,\r\n          testData,\r\n          mockContext\r\n        );\r\n\r\n        // Verificar detección o sanitización\r\n        if (!result.success) {\r\n          const hasSQLDetection = result.errors?.some(e => \r\n            e.code === 'SQL_INJECTION_DETECTED' ||\r\n            e.severity === 'critical'\r\n          );\r\n          \r\n          if (hasSQLDetection) {\r\n            detectedCount++;\r\n          }\r\n        } else {\r\n          // Verificar sanitización efectiva\r\n          const sanitizedQuery = result.sanitized?.query || '';\r\n          const sanitizedParams = result.sanitized?.params || '';\r\n          \r\n          const stillContainsSQLPatterns = \r\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|WAITFOR|EXTRACTVALUE)\\b/i.test(sanitizedQuery) ||\r\n            /\\b(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|WAITFOR|EXTRACTVALUE)\\b/i.test(sanitizedParams);\r\n          \r\n          if (!stillContainsSQLPatterns) {\r\n            detectedCount++; // Sanitización efectiva\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar detección de inyecciones avanzadas\r\n      expect(detectedCount).toBeGreaterThan(7); // Al menos 70% detectadas\r\n    });\r\n  });\r\n\r\n  describe('Ataques XSS (Cross-Site Scripting)', () => {\r\n    it('debe detectar y bloquear XSS básicos', async () => {\r\n      const xssPayloads = [\r\n        '<script>alert(\"XSS\")</script>',\r\n        '<img src=\"x\" onerror=\"alert(1)\">',\r\n        '<svg onload=\"alert(1)\">',\r\n        '<iframe src=\"javascript:alert(1)\"></iframe>',\r\n        '<body onload=\"alert(1)\">',\r\n        '<div onclick=\"alert(1)\">Click me</div>',\r\n        '<a href=\"javascript:alert(1)\">Link</a>',\r\n        '<input type=\"text\" onfocus=\"alert(1)\" autofocus>',\r\n        '<marquee onstart=\"alert(1)\">',\r\n        '<video><source onerror=\"alert(1)\">'\r\n      ];\r\n\r\n      const schema = z.object({\r\n        content: z.string(),\r\n        description: z.string()\r\n      });\r\n\r\n      let blockedCount = 0;\r\n\r\n      for (const payload of xssPayloads) {\r\n        const testData = {\r\n          content: payload,\r\n          description: `User content: ${payload}`\r\n        };\r\n\r\n        const result = await criticalValidator.validateAndSanitize(\r\n          schema,\r\n          testData,\r\n          mockContext\r\n        );\r\n\r\n        if (!result.success) {\r\n          const hasXSSError = result.errors?.some(e => \r\n            e.code === 'XSS_DETECTED' ||\r\n            e.message.includes('XSS') ||\r\n            e.message.includes('script')\r\n          );\r\n          \r\n          if (hasXSSError) {\r\n            blockedCount++;\r\n          }\r\n        } else {\r\n          // Verificar sanitización\r\n          const sanitizedContent = result.sanitized?.content || '';\r\n          const sanitizedDescription = result.sanitized?.description || '';\r\n          \r\n          const containsXSSPatterns = \r\n            /<script/i.test(sanitizedContent) ||\r\n            /javascript:/i.test(sanitizedContent) ||\r\n            /on\\w+\\s*=/i.test(sanitizedContent) ||\r\n            /<script/i.test(sanitizedDescription) ||\r\n            /javascript:/i.test(sanitizedDescription) ||\r\n            /on\\w+\\s*=/i.test(sanitizedDescription);\r\n          \r\n          if (!containsXSSPatterns) {\r\n            blockedCount++; // Sanitización efectiva\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar que la mayoría de XSS fueron bloqueados/sanitizados\r\n      expect(blockedCount).toBeGreaterThan(7); // Al menos 70% bloqueados\r\n    });\r\n\r\n    it('debe detectar XSS avanzados y ofuscados', async () => {\r\n      const advancedXSSPayloads = [\r\n        // Ofuscación con encoding\r\n        '%3Cscript%3Ealert(1)%3C/script%3E',\r\n        \r\n        // Bypass con mayúsculas/minúsculas\r\n        '<ScRiPt>alert(1)</ScRiPt>',\r\n        \r\n        // Bypass con espacios y tabs\r\n        '<script\\t>alert(1)</script>',\r\n        \r\n        // Bypass con comentarios HTML\r\n        '<script><!--alert(1)--></script>',\r\n        \r\n        // Bypass con caracteres nulos\r\n        '<script\\x00>alert(1)</script>',\r\n        \r\n        // Bypass con entidades HTML\r\n        '&lt;script&gt;alert(1)&lt;/script&gt;',\r\n        \r\n        // Bypass con atributos fragmentados\r\n        '<img src=\"x\" onerror=\"eval(String.fromCharCode(97,108,101,114,116,40,49,41))\">',\r\n        \r\n        // Bypass con eventos menos comunes\r\n        '<details open ontoggle=\"alert(1)\">',\r\n        \r\n        // Bypass con CSS\r\n        '<style>@import\"javascript:alert(1)\";</style>',\r\n        \r\n        // Bypass con SVG\r\n        '<svg><script>alert(1)</script></svg>'\r\n      ];\r\n\r\n      const schema = z.object({\r\n        userInput: z.string(),\r\n        htmlContent: z.string()\r\n      });\r\n\r\n      let detectedCount = 0;\r\n\r\n      for (const payload of advancedXSSPayloads) {\r\n        const testData = {\r\n          userInput: payload,\r\n          htmlContent: `<div>${payload}</div>`\r\n        };\r\n\r\n        const result = await criticalValidator.validateAndSanitize(\r\n          schema,\r\n          testData,\r\n          mockContext\r\n        );\r\n\r\n        if (!result.success) {\r\n          const hasXSSDetection = result.errors?.some(e => \r\n            e.code === 'XSS_DETECTED' ||\r\n            e.severity === 'critical'\r\n          );\r\n          \r\n          if (hasXSSDetection) {\r\n            detectedCount++;\r\n          }\r\n        } else {\r\n          // Verificar sanitización efectiva\r\n          const sanitizedInput = result.sanitized?.userInput || '';\r\n          const sanitizedHTML = result.sanitized?.htmlContent || '';\r\n          \r\n          const stillContainsXSS = \r\n            /<script/i.test(sanitizedInput) ||\r\n            /javascript:/i.test(sanitizedInput) ||\r\n            /on\\w+\\s*=/i.test(sanitizedInput) ||\r\n            /<script/i.test(sanitizedHTML) ||\r\n            /javascript:/i.test(sanitizedHTML) ||\r\n            /on\\w+\\s*=/i.test(sanitizedHTML);\r\n          \r\n          if (!stillContainsXSS) {\r\n            detectedCount++; // Sanitización efectiva\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar detección de XSS avanzados\r\n      expect(detectedCount).toBeGreaterThan(7); // Al menos 70% detectados\r\n    });\r\n  });\r\n\r\n  describe('Ataques de Bypass de Validación', () => {\r\n    it('debe resistir intentos de bypass con datos malformados', async () => {\r\n      const bypassAttempts = [\r\n        // Null bytes\r\n        { email: 'test@example.com\\x00admin@evil.com', password: 'password\\x00' },\r\n        \r\n        // Unicode normalization attacks\r\n        { email: 'test@еxample.com', password: 'pаssword123!' }, // Cyrillic characters\r\n        \r\n        // Overlong UTF-8 sequences\r\n        { email: 'test@example.com', password: '\\xC0\\xAFpassword' },\r\n        \r\n        // Control characters\r\n        { email: 'test\\r\\n@example.com', password: 'pass\\tword' },\r\n        \r\n        // Homograph attacks\r\n        { email: 'admin@gооgle.com', password: 'password123!' }, // Cyrillic 'o'\r\n        \r\n        // Length manipulation\r\n        { email: 'a'.repeat(1000) + '@example.com', password: 'x'.repeat(10000) },\r\n        \r\n        // Type confusion\r\n        { email: ['test@example.com'], password: { value: 'password' } },\r\n        \r\n        // Prototype pollution attempt\r\n        { \r\n          email: 'test@example.com',\r\n          password: 'password',\r\n          '__proto__': { isAdmin: true },\r\n          'constructor': { prototype: { role: 'admin' } }\r\n        }\r\n      ];\r\n\r\n      let blockedCount = 0;\r\n      let allowedCount = 0;\r\n\r\n      for (const attempt of bypassAttempts) {\r\n        try {\r\n          const result = await criticalValidator.validateAndSanitize(\r\n            z.object({\r\n              email: EnterpriseEmailSchema,\r\n              password: EnterprisePasswordSchema\r\n            }),\r\n            attempt,\r\n            mockContext\r\n          );\r\n\r\n          if (!result.success) {\r\n            blockedCount++;\r\n          } else {\r\n            // Verificar que los datos fueron sanitizados apropiadamente\r\n            const sanitizedEmail = result.sanitized?.email || '';\r\n            const sanitizedPassword = result.sanitized?.password || '';\r\n            \r\n            const containsMaliciousPatterns = \r\n              /[\\x00-\\x1F\\x7F-\\x9F]/.test(sanitizedEmail) ||\r\n              /[\\x00-\\x1F\\x7F-\\x9F]/.test(sanitizedPassword) ||\r\n              sanitizedEmail.length > 254 ||\r\n              sanitizedPassword.length > 128;\r\n            \r\n            if (containsMaliciousPatterns) {\r\n              allowedCount++; // Bypass exitoso\r\n            } else {\r\n              blockedCount++; // Sanitización efectiva\r\n            }\r\n          }\r\n        } catch (error) {\r\n          blockedCount++; // Error = bypass fallido\r\n        }\r\n      }\r\n\r\n      // Verificar que la mayoría de bypasses fueron bloqueados\r\n      expect(blockedCount).toBeGreaterThan(allowedCount);\r\n      expect(blockedCount).toBeGreaterThan(6); // Al menos 75% bloqueados\r\n    });\r\n\r\n    it('debe detectar ataques de schema poisoning', async () => {\r\n      const schemaPoisoningAttempts = [\r\n        // Intentar inyectar propiedades adicionales\r\n        {\r\n          name: 'Product Name',\r\n          price: 100,\r\n          isAdmin: true,\r\n          role: 'admin',\r\n          permissions: ['all'],\r\n          __proto__: { constructor: 'evil' }\r\n        },\r\n        \r\n        // Intentar bypass con nested objects\r\n        {\r\n          name: 'Product Name',\r\n          price: 100,\r\n          metadata: {\r\n            admin: true,\r\n            execute: 'rm -rf /',\r\n            eval: 'process.exit(1)'\r\n          }\r\n        },\r\n        \r\n        // Intentar bypass con arrays maliciosos\r\n        {\r\n          name: 'Product Name',\r\n          price: 100,\r\n          tags: [\r\n            'normal',\r\n            { __proto__: { isAdmin: true } },\r\n            'another_normal'\r\n          ]\r\n        },\r\n        \r\n        // Intentar bypass con funciones\r\n        {\r\n          name: 'Product Name',\r\n          price: 100,\r\n          callback: 'function() { return true; }',\r\n          toString: 'function() { return \"admin\"; }'\r\n        }\r\n      ];\r\n\r\n      let detectedCount = 0;\r\n\r\n      for (const attempt of schemaPoisoningAttempts) {\r\n        const result = await criticalValidator.validateAndSanitize(\r\n          EnterpriseProductSchema,\r\n          attempt,\r\n          mockContext\r\n        );\r\n\r\n        if (!result.success) {\r\n          detectedCount++;\r\n        } else {\r\n          // Verificar que propiedades maliciosas fueron removidas\r\n          const sanitizedData = result.sanitized || {};\r\n          \r\n          const hasMaliciousProps = \r\n            'isAdmin' in sanitizedData ||\r\n            'role' in sanitizedData ||\r\n            'permissions' in sanitizedData ||\r\n            '__proto__' in sanitizedData ||\r\n            'constructor' in sanitizedData ||\r\n            'callback' in sanitizedData ||\r\n            'toString' in sanitizedData;\r\n          \r\n          if (!hasMaliciousProps) {\r\n            detectedCount++; // Sanitización efectiva\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar detección de schema poisoning\r\n      expect(detectedCount).toBe(schemaPoisoningAttempts.length);\r\n    });\r\n  });\r\n\r\n  describe('Ataques de Agotamiento de Recursos', () => {\r\n    it('debe manejar payloads extremadamente grandes', async () => {\r\n      const largeSanitizer = new EnterpriseSanitizer(ENTERPRISE_VALIDATION_CONFIGS.CRITICAL_ADMIN);\r\n      \r\n      const resourceExhaustionPayloads = [\r\n        // String extremadamente largo\r\n        'x'.repeat(10000000), // 10MB\r\n        \r\n        // Objeto con muchas propiedades\r\n        Object.fromEntries(\r\n          Array.from({ length: 100000 }, (_, i) => [`prop_${i}`, `value_${i}`])\r\n        ),\r\n        \r\n        // Array extremadamente largo\r\n        Array.from({ length: 1000000 }, (_, i) => `item_${i}`),\r\n        \r\n        // Objeto profundamente anidado\r\n        Array.from({ length: 1000 }, () => ({})).reduce((acc, curr) => ({ nested: acc }), {})\r\n      ];\r\n\r\n      let handledCount = 0;\r\n      const startTime = Date.now();\r\n\r\n      for (const payload of resourceExhaustionPayloads) {\r\n        try {\r\n          const startMemory = process.memoryUsage().heapUsed;\r\n          \r\n          // Intentar sanitizar payload masivo\r\n          const result = largeSanitizer.sanitizeObject(payload);\r\n          \r\n          const endMemory = process.memoryUsage().heapUsed;\r\n          const memoryIncrease = endMemory - startMemory;\r\n          \r\n          // Verificar que no se agotó la memoria (< 100MB por payload)\r\n          if (memoryIncrease < 100 * 1024 * 1024) {\r\n            handledCount++;\r\n          }\r\n        } catch (error) {\r\n          // Error esperado para payloads que exceden límites\r\n          if (error.message.includes('máxima') || error.message.includes('excede')) {\r\n            handledCount++; // Límite aplicado correctamente\r\n          }\r\n        }\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n\r\n      // Verificar que el sistema manejó los payloads sin crashear\r\n      expect(handledCount).toBe(resourceExhaustionPayloads.length);\r\n      \r\n      // Verificar que el tiempo de procesamiento fue razonable (< 30 segundos)\r\n      expect(totalTime).toBeLessThan(30000);\r\n    });\r\n\r\n    it('debe resistir ataques de regex DoS (ReDoS)', async () => {\r\n      const redosPayloads = [\r\n        // Payload que causa backtracking exponencial\r\n        'a'.repeat(1000) + 'X',\r\n        \r\n        // Nested quantifiers\r\n        '(' + 'a'.repeat(100) + ')*' + 'b'.repeat(100),\r\n        \r\n        // Alternation with overlapping patterns\r\n        'a'.repeat(50) + '|' + 'a'.repeat(49) + 'b',\r\n        \r\n        // Catastrophic backtracking pattern\r\n        'a'.repeat(30) + 'a?'.repeat(30) + 'a'.repeat(30)\r\n      ];\r\n\r\n      const emailSchema = z.object({\r\n        email: EnterpriseEmailSchema,\r\n        description: z.string().max(1000)\r\n      });\r\n\r\n      let processedCount = 0;\r\n      const maxTimePerPayload = 5000; // 5 segundos máximo\r\n\r\n      for (const payload of redosPayloads) {\r\n        const startTime = Date.now();\r\n        \r\n        try {\r\n          const testData = {\r\n            email: `test${payload}@example.com`,\r\n            description: payload\r\n          };\r\n\r\n          const result = await Promise.race([\r\n            criticalValidator.validateAndSanitize(emailSchema, testData, mockContext),\r\n            new Promise((_, reject) => \r\n              setTimeout(() => reject(new Error('Timeout')), maxTimePerPayload)\r\n            )\r\n          ]);\r\n\r\n          const endTime = Date.now();\r\n          const processingTime = endTime - startTime;\r\n\r\n          // Verificar que no hubo timeout\r\n          if (processingTime < maxTimePerPayload) {\r\n            processedCount++;\r\n          }\r\n        } catch (error) {\r\n          const endTime = Date.now();\r\n          const processingTime = endTime - startTime;\r\n\r\n          // Si fue timeout, es un problema; si fue validación fallida, está bien\r\n          if (error.message !== 'Timeout' && processingTime < maxTimePerPayload) {\r\n            processedCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Verificar que todos los payloads fueron procesados sin timeout\r\n      expect(processedCount).toBe(redosPayloads.length);\r\n    });\r\n  });\r\n\r\n  describe('Validación de Integridad del Sistema', () => {\r\n    it('debe mantener consistencia durante ataques masivos', async () => {\r\n      const massiveAttack = Array.from({ length: 1000 }, (_, i) => ({\r\n        email: `attacker${i}@evil.com`,\r\n        password: `<script>alert(${i})</script>`,\r\n        name: `'; DROP TABLE users; -- ${i}`,\r\n        description: 'x'.repeat(10000) + i\r\n      }));\r\n\r\n      let validatedCount = 0;\r\n      let blockedCount = 0;\r\n      const startTime = Date.now();\r\n\r\n      const schema = z.object({\r\n        email: EnterpriseEmailSchema,\r\n        password: EnterprisePasswordSchema,\r\n        name: z.string().min(1).max(100),\r\n        description: z.string().max(1000)\r\n      });\r\n\r\n      for (const attackData of massiveAttack) {\r\n        try {\r\n          const result = await criticalValidator.validateAndSanitize(\r\n            schema,\r\n            attackData,\r\n            mockContext\r\n          );\r\n\r\n          if (result.success) {\r\n            validatedCount++;\r\n          } else {\r\n            blockedCount++;\r\n          }\r\n        } catch (error) {\r\n          blockedCount++;\r\n        }\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const totalTime = endTime - startTime;\r\n      const avgTimePerValidation = totalTime / 1000;\r\n\r\n      // Verificar que el sistema procesó todos los ataques\r\n      expect(validatedCount + blockedCount).toBe(1000);\r\n      \r\n      // Verificar que la mayoría fueron bloqueados\r\n      expect(blockedCount).toBeGreaterThan(validatedCount);\r\n      \r\n      // Verificar performance razonable (< 10ms por validación)\r\n      expect(avgTimePerValidation).toBeLessThan(10);\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","enterpriseAuditSystem","logEnterpriseEvent","fn","__esModule","default","sanitize","input","options","cleaned","ALLOWED_TAGS","length","replace","escape","char","entities","describe","mockContext","beforeEach","clearAllMocks","userId","sessionId","email","role","permissions","sessionValid","securityLevel","ipAddress","userAgent","supabase","validations","jwtValid","csrfValid","rateLimitPassed","originValid","it","sqlInjectionPayloads","schema","z","object","search","string","filter","blockedCount","allowedCount","payload","testData","result","criticalValidator","validateAndSanitize","success","hasSQLError","errors","some","e","code","message","includes","sanitizedSearch","sanitized","sanitizedFilter","containsSQLKeywords","test","expect","toBeGreaterThan","advancedSQLPayloads","query","params","detectedCount","hasSQLDetection","severity","sanitizedQuery","sanitizedParams","stillContainsSQLPatterns","xssPayloads","content","description","hasXSSError","sanitizedContent","sanitizedDescription","containsXSSPatterns","advancedXSSPayloads","userInput","htmlContent","hasXSSDetection","sanitizedInput","sanitizedHTML","stillContainsXSS","bypassAttempts","password","repeat","value","isAdmin","prototype","attempt","EnterpriseEmailSchema","EnterprisePasswordSchema","sanitizedEmail","sanitizedPassword","containsMaliciousPatterns","error","schemaPoisoningAttempts","name","price","__proto__","metadata","admin","execute","eval","tags","callback","toString","EnterpriseProductSchema","sanitizedData","hasMaliciousProps","toBe","largeSanitizer","EnterpriseSanitizer","ENTERPRISE_VALIDATION_CONFIGS","CRITICAL_ADMIN","resourceExhaustionPayloads","Object","fromEntries","Array","from","_","i","reduce","acc","curr","nested","handledCount","startTime","Date","now","startMemory","process","memoryUsage","heapUsed","sanitizeObject","endMemory","memoryIncrease","endTime","totalTime","toBeLessThan","redosPayloads","emailSchema","max","processedCount","maxTimePerPayload","Promise","race","reject","setTimeout","Error","processingTime","massiveAttack","validatedCount","min","attackData","avgTimePerValidation"],"mappings":"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"}