{"version":3,"names":["cov_2ez155zxfn","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","BulkOperationSchema","_zod","z","object","operation","enum","product_ids","array","string","uuid","min","data","status","optional","category_id","number","int","positive","price_adjustment","type","value","request","session","_config","auth","user","b","_server","NextResponse","json","error","body","validationResult","safeParse","success","details","errors","existingProducts","checkError","from","select","in","console","length","result","affectedCount","statusUpdateData","statusError","update","is_active","updated_at","Date","toISOString","affected_count","new_status","category","categoryError","eq","single","categoryUpdateData","categoryUpdateError","new_category","name","currentProducts","priceError","priceUpdates","map","product","newPrice","price","Math","max","id","round","priceUpdatePromises","priceResults","Promise","all","priceErrors","filter","deleteData","deleteError","log","user_id","timestamp","message","Error","operations","update_status","description","required_data","update_category","update_price","delete","available_operations","max_products_per_operation"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\bulk\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: OPERACIONES MASIVAS DE PRODUCTOS\r\n// Ruta: /api/admin/products/bulk\r\n// Descripción: Operaciones masivas enterprise para productos\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nconst BulkOperationSchema = z.object({\r\n  operation: z.enum(['update_status', 'update_category', 'update_price', 'delete']),\r\n  product_ids: z.array(z.string().uuid()).min(1, 'Debe seleccionar al menos un producto'),\r\n  data: z.object({\r\n    status: z.enum(['active', 'inactive']).optional(),\r\n    category_id: z.number().int().positive().optional(),\r\n    price_adjustment: z.object({\r\n      type: z.enum(['percentage', 'fixed']),\r\n      value: z.number()\r\n    }).optional()\r\n  }).optional()\r\n});\r\n\r\n// =====================================================\r\n// HANDLER POST - OPERACIONES MASIVAS\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = BulkOperationSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Datos de operación inválidos', \r\n          details: validationResult.error.errors \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { operation, product_ids, data } = validationResult.data;\r\n\r\n    // Verificar que los productos existen y pertenecen al usuario autorizado\r\n    const { data: existingProducts, error: checkError } = await supabase\r\n      .from('products')\r\n      .select('id, name')\r\n      .in('id', product_ids);\r\n\r\n    if (checkError) {\r\n      console.error('Error verificando productos:', checkError);\r\n      return NextResponse.json(\r\n        { error: 'Error al verificar productos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (existingProducts.length !== product_ids.length) {\r\n      return NextResponse.json(\r\n        { error: 'Algunos productos no fueron encontrados' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    let result;\r\n    let affectedCount = 0;\r\n\r\n    // Ejecutar operación según el tipo\r\n    switch (operation) {\r\n      case 'update_status':\r\n        if (!data?.status) {\r\n          return NextResponse.json(\r\n            { error: 'Estado requerido para operación update_status' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const { data: statusUpdateData, error: statusError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            is_active: data.status === 'active',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (statusError) {\r\n          throw statusError;\r\n        }\r\n\r\n        affectedCount = statusUpdateData?.length || 0;\r\n        result = {\r\n          operation: 'update_status',\r\n          affected_count: affectedCount,\r\n          new_status: data.status\r\n        };\r\n        break;\r\n\r\n      case 'update_category':\r\n        if (!data?.category_id) {\r\n          return NextResponse.json(\r\n            { error: 'ID de categoría requerido para operación update_category' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Verificar que la categoría existe\r\n        const { data: category, error: categoryError } = await supabase\r\n          .from('categories')\r\n          .select('id, name')\r\n          .eq('id', data.category_id)\r\n          .single();\r\n\r\n        if (categoryError || !category) {\r\n          return NextResponse.json(\r\n            { error: 'Categoría no encontrada' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n        const { data: categoryUpdateData, error: categoryUpdateError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            category_id: data.category_id,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (categoryUpdateError) {\r\n          throw categoryUpdateError;\r\n        }\r\n\r\n        affectedCount = categoryUpdateData?.length || 0;\r\n        result = {\r\n          operation: 'update_category',\r\n          affected_count: affectedCount,\r\n          new_category: category.name\r\n        };\r\n        break;\r\n\r\n      case 'update_price':\r\n        if (!data?.price_adjustment) {\r\n          return NextResponse.json(\r\n            { error: 'Ajuste de precio requerido para operación update_price' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Obtener precios actuales\r\n        const { data: currentProducts, error: priceError } = await supabase\r\n          .from('products')\r\n          .select('id, price')\r\n          .in('id', product_ids);\r\n\r\n        if (priceError) {\r\n          throw priceError;\r\n        }\r\n\r\n        // Calcular nuevos precios\r\n        const priceUpdates = currentProducts.map(product => {\r\n          let newPrice = product.price;\r\n          \r\n          if (data.price_adjustment!.type === 'percentage') {\r\n            newPrice = product.price * (1 + data.price_adjustment!.value / 100);\r\n          } else {\r\n            newPrice = product.price + data.price_adjustment!.value;\r\n          }\r\n\r\n          // Asegurar que el precio no sea negativo\r\n          newPrice = Math.max(0, newPrice);\r\n\r\n          return {\r\n            id: product.id,\r\n            price: Math.round(newPrice * 100) / 100, // Redondear a 2 decimales\r\n            updated_at: new Date().toISOString()\r\n          };\r\n        });\r\n\r\n        // Actualizar precios uno por uno (Supabase no soporta bulk update con diferentes valores)\r\n        const priceUpdatePromises = priceUpdates.map(update =>\r\n          supabase\r\n            .from('products')\r\n            .update({ price: update.price, updated_at: update.updated_at })\r\n            .eq('id', update.id)\r\n        );\r\n\r\n        const priceResults = await Promise.all(priceUpdatePromises);\r\n        const priceErrors = priceResults.filter(result => result.error);\r\n\r\n        if (priceErrors.length > 0) {\r\n          console.error('Errores en actualización de precios:', priceErrors);\r\n          return NextResponse.json(\r\n            { error: 'Error al actualizar algunos precios' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        affectedCount = priceUpdates.length;\r\n        result = {\r\n          operation: 'update_price',\r\n          affected_count: affectedCount,\r\n          price_adjustment: data.price_adjustment\r\n        };\r\n        break;\r\n\r\n      case 'delete':\r\n        // Eliminar productos (soft delete marcando como inactivo)\r\n        const { data: deleteData, error: deleteError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            is_active: false,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (deleteError) {\r\n          throw deleteError;\r\n        }\r\n\r\n        affectedCount = deleteData?.length || 0;\r\n        result = {\r\n          operation: 'delete',\r\n          affected_count: affectedCount\r\n        };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Operación no soportada' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    // Log de la operación para auditoría\r\n    console.log(`✅ Operación masiva completada:`, {\r\n      operation,\r\n      affected_count: affectedCount,\r\n      user_id: session.user.id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Operación ${operation} completada exitosamente`,\r\n      data: result\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error en operación masiva:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - INFORMACIÓN DE OPERACIONES\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Retornar información sobre operaciones disponibles\r\n    const operations = {\r\n      update_status: {\r\n        name: 'Actualizar Estado',\r\n        description: 'Activar o desactivar productos en lote',\r\n        required_data: ['status']\r\n      },\r\n      update_category: {\r\n        name: 'Cambiar Categoría',\r\n        description: 'Mover productos a una nueva categoría',\r\n        required_data: ['category_id']\r\n      },\r\n      update_price: {\r\n        name: 'Ajustar Precios',\r\n        description: 'Aplicar ajustes de precio por porcentaje o valor fijo',\r\n        required_data: ['price_adjustment']\r\n      },\r\n      delete: {\r\n        name: 'Eliminar Productos',\r\n        description: 'Desactivar productos (soft delete)',\r\n        required_data: []\r\n      }\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        available_operations: operations,\r\n        max_products_per_operation: 100\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error obteniendo información de operaciones:', error);\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}