0261e5a7ca11e04495df686eff08d922
// =====================================================
// TEST: LOGISTICS MAP COMPONENT
// Descripción: Tests comprehensivos para el componente de mapa
// Basado en: Jest + RTL + MSW
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _LogisticsMap = require("../../../src/components/admin/logistics/LogisticsMap");
const _testconfig = require("../setup/test-config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// =====================================================
// SETUP
// =====================================================
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
const renderWithProviders = (component)=>{
    const queryClient = createTestQueryClient();
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: component
    }));
};
// =====================================================
// TESTS BÁSICOS
// =====================================================
describe('LogisticsMap Component', ()=>{
    beforeEach(()=>{
        (0, _testconfig.createMockWebSocket)();
    });
    it('should render map container', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Mapa de Logística')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();
    });
    it('should display shipments count correctly', ()=>{
        const shipments = [
            _testconfig.mockShipment,
            {
                ..._testconfig.mockShipment,
                id: 2
            }
        ];
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: shipments
        }));
        expect(_react1.screen.getByText('Tracking en tiempo real de 2 envíos')).toBeInTheDocument();
    });
    it('should show loading state initially', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Cargando mapa...')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE FILTROS
    // =====================================================
    it('should render filter controls', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [
                _testconfig.mockShipment
            ]
        }));
        // Filtro de estado
        const comboboxes = _react1.screen.getAllByRole('combobox');
        expect(comboboxes.length).toBeGreaterThan(0);
        expect(comboboxes[0]).toBeInTheDocument();
        // Switches de capas
        expect(_react1.screen.getByText('Zonas')).toBeInTheDocument();
        expect(_react1.screen.getByText('Rutas')).toBeInTheDocument();
    });
    it('should filter shipments by status', async ()=>{
        const shipments = [
            {
                ..._testconfig.mockShipment,
                id: 1,
                status: 'in_transit'
            },
            {
                ..._testconfig.mockShipment,
                id: 2,
                status: 'delivered'
            }
        ];
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: shipments
        }));
        // Verificar que hay filtros disponibles
        const comboboxes = _react1.screen.getAllByRole('combobox');
        expect(comboboxes.length).toBeGreaterThan(0);
        const filterSelect = comboboxes[0]; // Usar el primer combobox
        expect(filterSelect).toBeInTheDocument();
        // Simular interacción con el filtro
        _react1.fireEvent.click(filterSelect);
        // Verificar que el componente sigue funcionando
        expect(comboboxes[0]).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE CONTROLES
    // =====================================================
    it('should have map control buttons', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que hay botones de control disponibles
        const buttons = _react1.screen.getAllByRole('button');
        expect(buttons.length).toBeGreaterThan(0);
        // Verificar que los botones son interactuables
        buttons.forEach((button)=>{
            expect(button).toBeInTheDocument();
            expect(button).not.toBeDisabled();
        });
    });
    it('should toggle geofences visibility', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const switches = _react1.screen.getAllByRole('switch');
        const geofenceSwitch = switches[1] || switches[0]; // Usar el segundo switch o el primero si solo hay uno
        expect(geofenceSwitch).toBeInTheDocument();
        _react1.fireEvent.click(geofenceSwitch);
        // Verificar que el click fue procesado
        expect(geofenceSwitch).toBeInTheDocument();
    });
    it('should toggle routes visibility', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const switches = _react1.screen.getAllByRole('switch');
        const routesSwitch = switches[0]; // Usar el primer switch disponible
        expect(routesSwitch).toBeInTheDocument();
        _react1.fireEvent.click(routesSwitch);
        // Verificar que el click fue procesado
        expect(routesSwitch).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE ESTILOS DE MAPA
    // =====================================================
    it('should change map style', async ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Encontrar el select de estilo
        const styleSelects = _react1.screen.getAllByRole('combobox');
        const styleSelect = styleSelects.find((select)=>select.getAttribute('aria-label')?.includes('style') || select.closest('[data-testid]')?.getAttribute('data-testid')?.includes('style')) || styleSelects[1]; // Fallback al segundo select
        if (styleSelect) {
            _react1.fireEvent.click(styleSelect);
            await (0, _react1.waitFor)(()=>{
                // Buscar opción de satélite si existe
                const satelliteOption = _react1.screen.queryByText('Satélite') || _react1.screen.queryByText('satellite');
                if (satelliteOption) {
                    _react1.fireEvent.click(satelliteOption);
                }
            });
            // Verificar que el select sigue siendo válido después del cambio
            expect(styleSelect).toBeInTheDocument();
        }
    });
    // =====================================================
    // TESTS DE TIEMPO REAL
    // =====================================================
    it('should show real-time badge when enabled', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [],
            realTimeEnabled: true
        }));
        expect(_react1.screen.getByText('Tiempo Real')).toBeInTheDocument();
    });
    it('should not show real-time badge when disabled', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [],
            realTimeEnabled: false
        }));
        expect(_react1.screen.queryByText('Tiempo Real')).not.toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE SELECCIÓN DE ENVÍOS
    // =====================================================
    it('should call onShipmentSelect when shipment is selected', ()=>{
        const onShipmentSelect = jest.fn();
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: [
                _testconfig.mockShipment
            ],
            onShipmentSelect: onShipmentSelect
        }));
        // Simular click en el mapa (esto normalmente sería manejado por MapLibre)
        // Como MapLibre está mockeado, simulamos el comportamiento
        const mapContainer = document.querySelector('[data-testid="map-container"]') || document.querySelector('.maplibregl-map');
        if (mapContainer) {
            _react1.fireEvent.click(mapContainer);
        // En un test real, esto triggearía el evento de MapLibre
        // que llamaría a onShipmentSelect
        }
    });
    // =====================================================
    // TESTS DE LEYENDA
    // =====================================================
    it('should display map legend', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('En Tránsito')).toBeInTheDocument();
        expect(_react1.screen.getByText('En Reparto')).toBeInTheDocument();
        expect(_react1.screen.getByText('Entregado')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE RESPONSIVE
    // =====================================================
    it('should be responsive', ()=>{
        const { container } = renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const mapCard = container.querySelector('.relative');
        expect(mapCard).toHaveClass('relative');
    });
    // =====================================================
    // TESTS DE ACCESIBILIDAD
    // =====================================================
    it('should have proper ARIA labels', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que los controles están presentes y son accesibles
        const switches = _react1.screen.getAllByRole('switch');
        expect(switches.length).toBeGreaterThan(0);
        switches.forEach((switchElement)=>{
            // Verificar que el switch es interactuable
            expect(switchElement).toBeInTheDocument();
            expect(switchElement).not.toBeDisabled();
        });
    });
    it('should support keyboard navigation', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        const filterSelect = _react1.screen.getAllByRole('combobox')[0];
        // Verificar que es focuseable
        filterSelect.focus();
        expect(filterSelect).toHaveFocus();
        // Simular navegación con teclado
        _react1.fireEvent.keyDown(filterSelect, {
            key: 'ArrowDown'
        });
        _react1.fireEvent.keyDown(filterSelect, {
            key: 'Enter'
        });
    });
    // =====================================================
    // TESTS DE ERROR HANDLING
    // =====================================================
    it('should handle empty shipments gracefully', ()=>{
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        expect(_react1.screen.getByText('Tracking en tiempo real de 0 envíos')).toBeInTheDocument();
    });
    it('should handle invalid shipment data', ()=>{
        const invalidShipments = [
            {
                ..._testconfig.mockShipment,
                id: null
            },
            {
                ..._testconfig.mockShipment,
                status: 'invalid_status'
            }
        ];
        expect(()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
                shipments: invalidShipments
            }));
        }).not.toThrow();
    });
    // =====================================================
    // TESTS DE PERFORMANCE
    // =====================================================
    it('should handle large number of shipments', ()=>{
        const manyShipments = Array.from({
            length: 1000
        }, (_, i)=>({
                ..._testconfig.mockShipment,
                id: i + 1,
                shipment_number: `SHP-${i + 1}`
            }));
        const startTime = performance.now();
        renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: manyShipments
        }));
        const endTime = performance.now();
        const renderTime = endTime - startTime;
        // Verificar que el render no tome más de 1 segundo
        expect(renderTime).toBeLessThan(1000);
        expect(_react1.screen.getByText('Tracking en tiempo real de 1000 envíos')).toBeInTheDocument();
    });
    // =====================================================
    // TESTS DE CLEANUP
    // =====================================================
    it('should cleanup resources on unmount', ()=>{
        const { unmount } = renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogisticsMap.LogisticsMap, {
            shipments: []
        }));
        // Verificar que no hay memory leaks
        expect(()=>unmount()).not.toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,