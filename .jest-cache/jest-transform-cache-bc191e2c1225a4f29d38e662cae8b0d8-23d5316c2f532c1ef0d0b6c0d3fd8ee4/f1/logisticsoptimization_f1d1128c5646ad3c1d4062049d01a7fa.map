{"version":3,"names":["LazyGeofenceManager","cov_1x6t35kryz","f","s","LazyLogisticsMap","LazyPerformanceChart","LazyRealTimeDashboard","LazyTrackingTimeline","LazyWrapper","LogisticsLoadingFallback","MapPerformanceOptimizer","OptimizedWebSocketManager","PerformanceManager","detectMemoryLeaks","measureAsyncPerformance","measurePerformance","useDebounceSearch","useMemoizedData","useMemoizedFilters","useThrottleCallback","_react","lazy","Promise","resolve","then","_interop_require_wildcard","require","module","default","LogisticsMap","TrackingTimeline","GeofenceManager","RealTimeDashboard","PerformanceChart","memo","React","createElement","className","displayName","children","fallback","Suspense","b","callback","delay","useCallback","_lodashes","debounce","value","throttle","args","data","dependencies","useMemo","Array","isArray","filter","item","filters","Object","entries","every","key","undefined","itemValue","includes","createConnection","url","options","maxReconnectAttempts","reconnectDelay","heartbeatInterval","connections","has","get","ws","WebSocket","set","messageQueue","setupBatchedMessaging","setupHeartbeat","sendBatch","queue","length","readyState","OPEN","batch","splice","BATCH_SIZE","send","JSON","stringify","type","messages","timestamp","Date","now","batchTimeout","setTimeout","BATCH_DELAY","interval","heartbeat","setInterval","clearInterval","queueMessage","message","push","cleanup","forEach","close","clear","clearTimeout","Map","getInstance","instance","getMarker","markerPool","pop","createNewMarker","returnMarker","marker","id","Math","random","toString","visible","coordinates","clusterMarkers","markers","zoom","clustered","processed","Set","clusterDistance","getClusterDistance","cluster","isCluster","otherMarker","distance","calculateDistance","add","max","pow","coord1","coord2","lng1","lat1","lng2","lat2","R","dLat","toRad","dLng","a","sin","cos","c","atan2","sqrt","PI","cullMarkersOutsideViewport","bounds","lng","lat","west","east","south","north","limitVisibleMarkers","MAX_VISIBLE_MARKERS","sort","priorityA","getMarkerPriority","priorityB","slice","priority","statusPriority","status","created_at","daysSinceCreated","getTime","visibleMarkers","name","fn","start","performance","end","console","log","window","memory","used","round","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","constructor","wsManager","mapOptimizer","getWebSocketManager","getMapOptimizer"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\performance\\logistics-optimization.ts"],"sourcesContent":["// =====================================================\r\n// OPTIMIZACIÓN: PERFORMANCE LOGISTICS MODULE\r\n// Descripción: Optimizaciones de performance para el módulo de logística\r\n// Basado en: React.memo + useMemo + useCallback + Bundle Splitting\r\n// =====================================================\r\n\r\nimport { memo, useMemo, useCallback, lazy, Suspense } from 'react';\r\nimport { debounce, throttle } from 'lodash-es';\r\n\r\n// =====================================================\r\n// LAZY LOADING DE COMPONENTES\r\n// =====================================================\r\n\r\n// Componentes principales con lazy loading\r\nexport const LazyLogisticsMap = lazy(() => \r\n  import('@/components/admin/logistics/LogisticsMap').then(module => ({\r\n    default: module.LogisticsMap\r\n  }))\r\n);\r\n\r\nexport const LazyTrackingTimeline = lazy(() => \r\n  import('@/components/admin/logistics/TrackingTimeline').then(module => ({\r\n    default: module.TrackingTimeline\r\n  }))\r\n);\r\n\r\nexport const LazyGeofenceManager = lazy(() => \r\n  import('@/components/admin/logistics/GeofenceManager').then(module => ({\r\n    default: module.GeofenceManager\r\n  }))\r\n);\r\n\r\nexport const LazyRealTimeDashboard = lazy(() => \r\n  import('@/components/admin/logistics/RealTimeDashboard').then(module => ({\r\n    default: module.RealTimeDashboard\r\n  }))\r\n);\r\n\r\nexport const LazyPerformanceChart = lazy(() => \r\n  import('@/components/admin/logistics/PerformanceChart').then(module => ({\r\n    default: module.PerformanceChart\r\n  }))\r\n);\r\n\r\n// =====================================================\r\n// COMPONENTE DE LOADING OPTIMIZADO\r\n// =====================================================\r\n\r\nexport const LogisticsLoadingFallback = memo(() =>\r\n  React.createElement('div', { className: 'flex items-center justify-center p-8' },\r\n    React.createElement('div', { className: 'space-y-4 w-full max-w-md' },\r\n      React.createElement('div', { className: 'h-4 bg-gray-200 rounded animate-pulse' }),\r\n      React.createElement('div', { className: 'h-4 bg-gray-200 rounded animate-pulse w-3/4' }),\r\n      React.createElement('div', { className: 'h-4 bg-gray-200 rounded animate-pulse w-1/2' })\r\n    )\r\n  )\r\n);\r\n\r\nLogisticsLoadingFallback.displayName = 'LogisticsLoadingFallback';\r\n\r\n// =====================================================\r\n// WRAPPER CON SUSPENSE\r\n// =====================================================\r\n\r\ninterface LazyWrapperProps {\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n}\r\n\r\nexport const LazyWrapper = memo(({ children, fallback }: LazyWrapperProps) =>\r\n  React.createElement(Suspense, { fallback: fallback || React.createElement(LogisticsLoadingFallback) },\r\n    children\r\n  )\r\n);\r\n\r\nLazyWrapper.displayName = 'LazyWrapper';\r\n\r\n// =====================================================\r\n// HOOKS DE OPTIMIZACIÓN\r\n// =====================================================\r\n\r\n// Hook para debounce de búsquedas\r\nexport const useDebounceSearch = (callback: (value: string) => void, delay: number = 300) => {\r\n  return useCallback(\r\n    debounce((value: string) => {\r\n      callback(value);\r\n    }, delay),\r\n    [callback, delay]\r\n  );\r\n};\r\n\r\n// Hook para throttle de eventos de scroll/resize\r\nexport const useThrottleCallback = (callback: (...args: any[]) => void, delay: number = 100) => {\r\n  return useCallback(\r\n    throttle((...args: any[]) => {\r\n      callback(...args);\r\n    }, delay),\r\n    [callback, delay]\r\n  );\r\n};\r\n\r\n// Hook para memoización de datos complejos\r\nexport const useMemoizedData = <T>(\r\n  data: T[], \r\n  dependencies: any[] = []\r\n): T[] => {\r\n  return useMemo(() => {\r\n    if (!Array.isArray(data)) {return [];}\r\n    \r\n    // Filtrar datos inválidos\r\n    return data.filter(item => item != null);\r\n  }, [data, ...dependencies]);\r\n};\r\n\r\n// Hook para memoización de filtros\r\nexport const useMemoizedFilters = (\r\n  data: any[],\r\n  filters: Record<string, any>\r\n) => {\r\n  return useMemo(() => {\r\n    if (!data || !Array.isArray(data)) {return [];}\r\n    \r\n    return data.filter(item => {\r\n      return Object.entries(filters).every(([key, value]) => {\r\n        if (value === null || value === undefined || value === '') {return true;}\r\n        if (value === 'all') {return true;}\r\n        \r\n        const itemValue = item[key];\r\n        if (Array.isArray(value)) {\r\n          return value.includes(itemValue);\r\n        }\r\n        \r\n        return itemValue === value;\r\n      });\r\n    });\r\n  }, [data, filters]);\r\n};\r\n\r\n// =====================================================\r\n// OPTIMIZACIÓN DE WEBSOCKETS\r\n// =====================================================\r\n\r\nexport class OptimizedWebSocketManager {\r\n  private connections = new Map<string, WebSocket>();\r\n  private messageQueue = new Map<string, any[]>();\r\n  private batchTimeout: NodeJS.Timeout | null = null;\r\n  private readonly BATCH_SIZE = 10;\r\n  private readonly BATCH_DELAY = 100; // ms\r\n\r\n  // Crear conexión optimizada\r\n  createConnection(url: string, options: {\r\n    maxReconnectAttempts?: number;\r\n    reconnectDelay?: number;\r\n    heartbeatInterval?: number;\r\n  } = {}) {\r\n    const {\r\n      maxReconnectAttempts = 5,\r\n      reconnectDelay = 1000,\r\n      heartbeatInterval = 30000\r\n    } = options;\r\n\r\n    if (this.connections.has(url)) {\r\n      return this.connections.get(url)!;\r\n    }\r\n\r\n    const ws = new WebSocket(url);\r\n    this.connections.set(url, ws);\r\n    this.messageQueue.set(url, []);\r\n\r\n    // Optimizar envío de mensajes en batch\r\n    this.setupBatchedMessaging(url);\r\n\r\n    // Heartbeat optimizado\r\n    this.setupHeartbeat(ws, heartbeatInterval);\r\n\r\n    return ws;\r\n  }\r\n\r\n  // Envío de mensajes en batch\r\n  private setupBatchedMessaging(url: string) {\r\n    const sendBatch = () => {\r\n      const queue = this.messageQueue.get(url);\r\n      if (!queue || queue.length === 0) {return;}\r\n\r\n      const ws = this.connections.get(url);\r\n      if (!ws || ws.readyState !== WebSocket.OPEN) {return;}\r\n\r\n      // Enviar mensajes en batch\r\n      const batch = queue.splice(0, this.BATCH_SIZE);\r\n      if (batch.length > 0) {\r\n        ws.send(JSON.stringify({\r\n          type: 'batch',\r\n          messages: batch,\r\n          timestamp: Date.now()\r\n        }));\r\n      }\r\n\r\n      // Programar siguiente batch si hay más mensajes\r\n      if (queue.length > 0) {\r\n        this.batchTimeout = setTimeout(sendBatch, this.BATCH_DELAY);\r\n      }\r\n    };\r\n\r\n    // Iniciar procesamiento de batch\r\n    this.batchTimeout = setTimeout(sendBatch, this.BATCH_DELAY);\r\n  }\r\n\r\n  // Heartbeat optimizado\r\n  private setupHeartbeat(ws: WebSocket, interval: number) {\r\n    const heartbeat = setInterval(() => {\r\n      if (ws.readyState === WebSocket.OPEN) {\r\n        ws.send(JSON.stringify({\r\n          type: 'ping',\r\n          timestamp: Date.now()\r\n        }));\r\n      } else {\r\n        clearInterval(heartbeat);\r\n      }\r\n    }, interval);\r\n  }\r\n\r\n  // Agregar mensaje a la cola\r\n  queueMessage(url: string, message: any) {\r\n    const queue = this.messageQueue.get(url);\r\n    if (queue) {\r\n      queue.push(message);\r\n    }\r\n  }\r\n\r\n  // Limpiar conexiones\r\n  cleanup() {\r\n    this.connections.forEach(ws => {\r\n      if (ws.readyState === WebSocket.OPEN) {\r\n        ws.close();\r\n      }\r\n    });\r\n    \r\n    this.connections.clear();\r\n    this.messageQueue.clear();\r\n    \r\n    if (this.batchTimeout) {\r\n      clearTimeout(this.batchTimeout);\r\n    }\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// OPTIMIZACIÓN DE MAPAS\r\n// =====================================================\r\n\r\nexport class MapPerformanceOptimizer {\r\n  private static instance: MapPerformanceOptimizer;\r\n  private markerPool: any[] = [];\r\n  private visibleMarkers = new Set<string>();\r\n  private readonly MAX_VISIBLE_MARKERS = 100;\r\n\r\n  static getInstance(): MapPerformanceOptimizer {\r\n    if (!MapPerformanceOptimizer.instance) {\r\n      MapPerformanceOptimizer.instance = new MapPerformanceOptimizer();\r\n    }\r\n    return MapPerformanceOptimizer.instance;\r\n  }\r\n\r\n  // Pool de markers para reutilización\r\n  getMarker(): any {\r\n    return this.markerPool.pop() || this.createNewMarker();\r\n  }\r\n\r\n  returnMarker(marker: any): void {\r\n    if (this.markerPool.length < 50) { // Límite del pool\r\n      this.markerPool.push(marker);\r\n    }\r\n  }\r\n\r\n  private createNewMarker(): any {\r\n    // Crear nuevo marker (implementación específica del mapa)\r\n    return {\r\n      id: Math.random().toString(36),\r\n      visible: false,\r\n      coordinates: [0, 0]\r\n    };\r\n  }\r\n\r\n  // Clustering inteligente\r\n  clusterMarkers(markers: any[], zoom: number): any[] {\r\n    if (zoom > 12) {return markers;} // No cluster en zoom alto\r\n    \r\n    const clustered: any[] = [];\r\n    const processed = new Set<string>();\r\n    const clusterDistance = this.getClusterDistance(zoom);\r\n\r\n    markers.forEach(marker => {\r\n      if (processed.has(marker.id)) {return;}\r\n\r\n      const cluster = {\r\n        id: `cluster-${marker.id}`,\r\n        coordinates: marker.coordinates,\r\n        markers: [marker],\r\n        isCluster: true\r\n      };\r\n\r\n      // Buscar markers cercanos\r\n      markers.forEach(otherMarker => {\r\n        if (otherMarker.id === marker.id || processed.has(otherMarker.id)) {return;}\r\n\r\n        const distance = this.calculateDistance(\r\n          marker.coordinates,\r\n          otherMarker.coordinates\r\n        );\r\n\r\n        if (distance < clusterDistance) {\r\n          cluster.markers.push(otherMarker);\r\n          processed.add(otherMarker.id);\r\n        }\r\n      });\r\n\r\n      processed.add(marker.id);\r\n      \r\n      if (cluster.markers.length > 1) {\r\n        clustered.push(cluster);\r\n      } else {\r\n        clustered.push(marker);\r\n      }\r\n    });\r\n\r\n    return clustered;\r\n  }\r\n\r\n  private getClusterDistance(zoom: number): number {\r\n    // Distancia de clustering basada en zoom\r\n    return Math.max(0.01, 0.1 / Math.pow(2, zoom - 8));\r\n  }\r\n\r\n  private calculateDistance(coord1: [number, number], coord2: [number, number]): number {\r\n    const [lng1, lat1] = coord1;\r\n    const [lng2, lat2] = coord2;\r\n    \r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = this.toRad(lat2 - lat1);\r\n    const dLng = this.toRad(lng2 - lng1);\r\n    \r\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n              Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) *\r\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  private toRad(value: number): number {\r\n    return value * Math.PI / 180;\r\n  }\r\n\r\n  // Viewport culling\r\n  cullMarkersOutsideViewport(markers: any[], bounds: any): any[] {\r\n    return markers.filter(marker => {\r\n      const [lng, lat] = marker.coordinates;\r\n      return lng >= bounds.west && lng <= bounds.east &&\r\n             lat >= bounds.south && lat <= bounds.north;\r\n    });\r\n  }\r\n\r\n  // Limitar markers visibles\r\n  limitVisibleMarkers(markers: any[]): any[] {\r\n    if (markers.length <= this.MAX_VISIBLE_MARKERS) {\r\n      return markers;\r\n    }\r\n\r\n    // Priorizar por importancia (ej: estado, fecha)\r\n    return markers\r\n      .sort((a, b) => {\r\n        const priorityA = this.getMarkerPriority(a);\r\n        const priorityB = this.getMarkerPriority(b);\r\n        return priorityB - priorityA;\r\n      })\r\n      .slice(0, this.MAX_VISIBLE_MARKERS);\r\n  }\r\n\r\n  private getMarkerPriority(marker: any): number {\r\n    let priority = 0;\r\n    \r\n    // Prioridad por estado\r\n    const statusPriority = {\r\n      'exception': 100,\r\n      'out_for_delivery': 80,\r\n      'in_transit': 60,\r\n      'confirmed': 40,\r\n      'delivered': 20,\r\n      'pending': 10\r\n    };\r\n    \r\n    priority += statusPriority[marker.status as keyof typeof statusPriority] || 0;\r\n    \r\n    // Prioridad por fecha (más reciente = mayor prioridad)\r\n    if (marker.created_at) {\r\n      const daysSinceCreated = (Date.now() - new Date(marker.created_at).getTime()) / (1000 * 60 * 60 * 24);\r\n      priority += Math.max(0, 50 - daysSinceCreated);\r\n    }\r\n    \r\n    return priority;\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// UTILIDADES DE PERFORMANCE\r\n// =====================================================\r\n\r\n// Medición de performance\r\nexport const measurePerformance = (name: string, fn: () => void) => {\r\n  const start = performance.now();\r\n  fn();\r\n  const end = performance.now();\r\n  console.log(`${name} took ${end - start} milliseconds`);\r\n};\r\n\r\n// Medición de performance async\r\nexport const measureAsyncPerformance = async (name: string, fn: () => Promise<void>) => {\r\n  const start = performance.now();\r\n  await fn();\r\n  const end = performance.now();\r\n  console.log(`${name} took ${end - start} milliseconds`);\r\n};\r\n\r\n// Detector de memory leaks\r\nexport const detectMemoryLeaks = () => {\r\n  if (typeof window !== 'undefined' && 'performance' in window) {\r\n    const memory = (performance as any).memory;\r\n    if (memory) {\r\n      console.log('Memory usage:', {\r\n        used: Math.round(memory.usedJSHeapSize / 1048576) + ' MB',\r\n        total: Math.round(memory.totalJSHeapSize / 1048576) + ' MB',\r\n        limit: Math.round(memory.jsHeapSizeLimit / 1048576) + ' MB'\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// Singleton para gestión global de performance\r\nexport class PerformanceManager {\r\n  private static instance: PerformanceManager;\r\n  private wsManager: OptimizedWebSocketManager;\r\n  private mapOptimizer: MapPerformanceOptimizer;\r\n\r\n  private constructor() {\r\n    this.wsManager = new OptimizedWebSocketManager();\r\n    this.mapOptimizer = MapPerformanceOptimizer.getInstance();\r\n  }\r\n\r\n  static getInstance(): PerformanceManager {\r\n    if (!PerformanceManager.instance) {\r\n      PerformanceManager.instance = new PerformanceManager();\r\n    }\r\n    return PerformanceManager.instance;\r\n  }\r\n\r\n  getWebSocketManager(): OptimizedWebSocketManager {\r\n    return this.wsManager;\r\n  }\r\n\r\n  getMapOptimizer(): MapPerformanceOptimizer {\r\n    return this.mapOptimizer;\r\n  }\r\n\r\n  cleanup(): void {\r\n    this.wsManager.cleanup();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}