{"version":3,"names":["cov_bngqux7ra","actualCoverage","s","useCategoriesForFilters","f","useCategoriesWithDynamicCounts","useCategoriesWithStaticCounts","baseFilters","b","selectedCategories","enableDynamicCounts","categories","baseCategories","loading","categoriesLoading","error","categoriesError","_useCategories","useCategories","categoryIds","_react","useMemo","map","cat","slug","filter","Boolean","data","dynamicCounts","isLoading","countsLoading","countsError","_useFilteredProducts","useCategoryProductCounts","categoriesWithDynamicCounts","length","category","dynamicCount","undefined","products_count","availableCategories","isSelected","includes","stats","totalCategories","categoriesWithProducts","totalProducts","reduce","sum","selectedCount","hasSelection","getCategoryBySlug","find","getCategoryCount","searchTerm","otherFilters","search"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoriesWithDynamicCounts.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useMemo } from 'react';\r\nimport { useCategories } from './useCategories';\r\nimport { useCategoryProductCounts, ProductFilters } from './useFilteredProducts';\r\nimport { Category } from '@/types/database';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface CategoryWithDynamicCount extends Category {\r\n  products_count: number;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport interface UseCategoriesWithDynamicCountsOptions {\r\n  baseFilters?: Omit<ProductFilters, 'categories' | 'category'>;\r\n  selectedCategories?: string[];\r\n  enableDynamicCounts?: boolean;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\n/**\r\n * Hook que combina categorías estáticas con conteos dinámicos de productos\r\n * basados en filtros actuales\r\n */\r\nexport const useCategoriesWithDynamicCounts = ({\r\n  baseFilters = {},\r\n  selectedCategories = [],\r\n  enableDynamicCounts = true,\r\n}: UseCategoriesWithDynamicCountsOptions = {}) => {\r\n  // Obtener categorías base\r\n  const { categories: baseCategories, loading: categoriesLoading, error: categoriesError } = useCategories();\r\n\r\n  // Extraer slugs de categorías para obtener conteos\r\n  const categoryIds = useMemo(() => {\r\n    return baseCategories.map(cat => cat.slug).filter(Boolean);\r\n  }, [baseCategories]);\r\n\r\n  // Obtener conteos dinámicos solo si está habilitado\r\n  const {\r\n    data: dynamicCounts,\r\n    isLoading: countsLoading,\r\n    error: countsError\r\n  } = useCategoryProductCounts(\r\n    enableDynamicCounts ? categoryIds : [],\r\n    baseFilters\r\n  );\r\n\r\n  // Combinar categorías con conteos dinámicos\r\n  const categoriesWithDynamicCounts = useMemo((): CategoryWithDynamicCount[] => {\r\n    // Si no hay categorías base, retornar array vacío\r\n    if (baseCategories.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    return baseCategories.map(category => {\r\n      const dynamicCount = enableDynamicCounts && dynamicCounts\r\n        ? dynamicCounts[category.slug]\r\n        : undefined;\r\n\r\n      return {\r\n        ...category,\r\n        products_count: dynamicCount !== undefined ? dynamicCount : (category.products_count || 0),\r\n        isLoading: enableDynamicCounts && countsLoading,\r\n      };\r\n    });\r\n  }, [baseCategories, dynamicCounts, enableDynamicCounts, countsLoading]);\r\n  \r\n  // Filtrar categorías seleccionadas si es necesario\r\n  const availableCategories = useMemo(() => {\r\n    if (selectedCategories.length === 0) {\r\n      return categoriesWithDynamicCounts;\r\n    }\r\n    \r\n    // Mostrar todas las categorías, pero marcar las seleccionadas\r\n    return categoriesWithDynamicCounts.map(category => ({\r\n      ...category,\r\n      isSelected: selectedCategories.includes(category.slug),\r\n    }));\r\n  }, [categoriesWithDynamicCounts, selectedCategories]);\r\n  \r\n  // Estados combinados\r\n  const isLoading = categoriesLoading || (enableDynamicCounts && countsLoading);\r\n  const error = categoriesError || countsError;\r\n  \r\n  // Estadísticas útiles\r\n  const stats = useMemo(() => {\r\n    const totalCategories = availableCategories.length;\r\n    const categoriesWithProducts = availableCategories.filter(cat => cat.products_count > 0).length;\r\n    const totalProducts = availableCategories.reduce((sum, cat) => sum + cat.products_count, 0);\r\n    const selectedCount = selectedCategories.length;\r\n    \r\n    return {\r\n      totalCategories,\r\n      categoriesWithProducts,\r\n      totalProducts,\r\n      selectedCount,\r\n      hasSelection: selectedCount > 0,\r\n    };\r\n  }, [availableCategories, selectedCategories]);\r\n  \r\n  return {\r\n    categories: availableCategories,\r\n    loading: isLoading,\r\n    error,\r\n    stats,\r\n    // Funciones de utilidad\r\n    getCategoryBySlug: (slug: string) => availableCategories.find(cat => cat.slug === slug),\r\n    getCategoryCount: (slug: string) => availableCategories.find(cat => cat.slug === slug)?.products_count || 0,\r\n    // Configuración\r\n    enableDynamicCounts,\r\n    baseFilters,\r\n    selectedCategories,\r\n  };\r\n};\r\n\r\n// ===================================\r\n// HOOK SIMPLIFICADO PARA CASOS COMUNES\r\n// ===================================\r\n\r\n/**\r\n * Hook simplificado para obtener categorías con conteos dinámicos\r\n * basados en filtros de búsqueda y otros filtros activos\r\n */\r\nexport const useCategoriesForFilters = (\r\n  searchTerm?: string,\r\n  selectedCategories: string[] = [],\r\n  otherFilters: Omit<ProductFilters, 'categories' | 'category' | 'search'> = {}\r\n) => {\r\n  const baseFilters = useMemo(() => ({\r\n    ...otherFilters,\r\n    ...(searchTerm && { search: searchTerm }),\r\n  }), [searchTerm, otherFilters]);\r\n  \r\n  return useCategoriesWithDynamicCounts({\r\n    baseFilters,\r\n    selectedCategories,\r\n    enableDynamicCounts: true,\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA CONTEOS ESTÁTICOS (FALLBACK)\r\n// ===================================\r\n\r\n/**\r\n * Hook que devuelve categorías con conteos estáticos\r\n * Útil cuando no se necesitan conteos dinámicos o como fallback\r\n */\r\nexport const useCategoriesWithStaticCounts = () => {\r\n  return useCategoriesWithDynamicCounts({\r\n    enableDynamicCounts: false,\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}