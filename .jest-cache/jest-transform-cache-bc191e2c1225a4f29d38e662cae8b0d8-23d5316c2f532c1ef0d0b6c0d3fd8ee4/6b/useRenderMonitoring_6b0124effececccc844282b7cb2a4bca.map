{"version":3,"names":["cov_2fy3retdu","actualCoverage","s","clearAllAlerts","f","exportMonitoringData","getActiveAlerts","getComponentMetrics","useGlobalMonitoring","useRenderMonitoring","withRenderMonitoring","DEFAULT_THRESHOLDS","slowRenderThreshold","maxRenderCount","memoryThreshold","errorThreshold","DEFAULT_OPTIONS","enabled","process","env","NODE_ENV","thresholds","enableToasts","enableConsoleLogging","enableLocalStorage","sampleRate","MonitoringStore","getInstance","instance","b","addListener","listener","listeners","add","delete","notifyListeners","notifyTimeout","clearTimeout","setTimeout","state","getState","forEach","totalRenders","Array","from","metrics","values","reduce","sum","metric","renderCount","averageRenderTime","_","arr","length","isEnabled","Map","alerts","globalStats","totalComponents","size","activeAlerts","filter","alert","resolved","updateMetrics","componentName","existing","get","updated","lastRenderTime","slowRenders","errorCount","timestamp","Date","now","set","addAlert","newAlert","id","Math","random","toString","substr","unshift","slice","resolveAlert","alertId","find","a","clearAlerts","exportData","JSON","stringify","entries","Set","monitoringStore","measureRenderTime","fn","start","performance","result","duration","getMemoryUsage","memory","usedJSHeapSize","shouldSample","options","opts","toast","_usetoast","useToast","renderCountRef","_react","useRef","renderTimesRef","lastRenderTimeRef","slowRendersRef","errorCountRef","mountTimeRef","monitoringState","setMonitoringState","useState","analyzePerformance","useCallback","renderTime","current","type","severity","message","toFixed","console","warn","oneMinuteAgo","recentRenders","time","title","description","variant","memoryUsage","trackRender","push","recentTimes","i","localStorage","setItem","error","trackError","errorInfo","useEffect","unsubscribe","totalTime","log","setState","Component","displayName","name","WrappedComponent","props","handleError","event","Error","window","addEventListener","removeEventListener","default","createElement"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\monitoring\\useRenderMonitoring.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RENDER MONITORING SYSTEM\r\n// Sistema de monitoreo en tiempo real para detectar problemas de renderizado\r\n// ===================================\r\n\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface RenderMetrics {\r\n  readonly componentName: string;\r\n  readonly renderCount: number;\r\n  readonly averageRenderTime: number;\r\n  readonly lastRenderTime: number;\r\n  readonly slowRenders: number;\r\n  readonly errorCount: number;\r\n  readonly memoryUsage?: number;\r\n  readonly timestamp: number;\r\n}\r\n\r\nexport interface PerformanceThresholds {\r\n  readonly slowRenderThreshold: number; // ms\r\n  readonly maxRenderCount: number; // renders per minute\r\n  readonly memoryThreshold: number; // MB\r\n  readonly errorThreshold: number; // errors per minute\r\n}\r\n\r\nexport interface MonitoringAlert {\r\n  readonly id: string;\r\n  readonly type: 'performance' | 'error' | 'memory' | 'render-loop';\r\n  readonly severity: 'low' | 'medium' | 'high' | 'critical';\r\n  readonly message: string;\r\n  readonly componentName: string;\r\n  readonly metrics: Partial<RenderMetrics>;\r\n  readonly timestamp: number;\r\n  readonly resolved: boolean;\r\n}\r\n\r\nexport interface MonitoringState {\r\n  readonly isEnabled: boolean;\r\n  readonly metrics: Map<string, RenderMetrics>;\r\n  readonly alerts: MonitoringAlert[];\r\n  readonly globalStats: {\r\n    readonly totalComponents: number;\r\n    readonly totalRenders: number;\r\n    readonly averageRenderTime: number;\r\n    readonly activeAlerts: number;\r\n  };\r\n}\r\n\r\nexport interface MonitoringOptions {\r\n  readonly enabled?: boolean;\r\n  readonly componentName: string;\r\n  readonly thresholds?: Partial<PerformanceThresholds>;\r\n  readonly enableToasts?: boolean;\r\n  readonly enableConsoleLogging?: boolean;\r\n  readonly enableLocalStorage?: boolean;\r\n  readonly sampleRate?: number; // 0-1, percentage of renders to monitor\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_THRESHOLDS: PerformanceThresholds = {\r\n  slowRenderThreshold: 16, // 16ms = 60fps\r\n  maxRenderCount: 60, // 60 renders per minute\r\n  memoryThreshold: 100, // 100MB\r\n  errorThreshold: 5 // 5 errors per minute\r\n};\r\n\r\nconst DEFAULT_OPTIONS: Required<Omit<MonitoringOptions, 'componentName'>> = {\r\n  enabled: process.env.NODE_ENV === 'development',\r\n  thresholds: DEFAULT_THRESHOLDS,\r\n  enableToasts: true,\r\n  enableConsoleLogging: true,\r\n  enableLocalStorage: true,\r\n  sampleRate: 1.0\r\n};\r\n\r\n// ===================================\r\n// ALMACENAMIENTO GLOBAL\r\n// ===================================\r\n\r\nclass MonitoringStore {\r\n  private static instance: MonitoringStore;\r\n  private metrics = new Map<string, RenderMetrics>();\r\n  private alerts: MonitoringAlert[] = [];\r\n  private listeners = new Set<(state: MonitoringState) => void>();\r\n\r\n  static getInstance(): MonitoringStore {\r\n    if (!MonitoringStore.instance) {\r\n      MonitoringStore.instance = new MonitoringStore();\r\n    }\r\n    return MonitoringStore.instance;\r\n  }\r\n\r\n  addListener(listener: (state: MonitoringState) => void): () => void {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private notifyListeners(): void {\r\n    // Debounce para evitar loops infinitos\r\n    if (this.notifyTimeout) {\r\n      clearTimeout(this.notifyTimeout);\r\n    }\r\n\r\n    this.notifyTimeout = setTimeout(() => {\r\n      const state = this.getState();\r\n      this.listeners.forEach(listener => listener(state));\r\n      this.notifyTimeout = null;\r\n    }, 16); // 16ms = ~60fps\r\n  }\r\n\r\n  private notifyTimeout: NodeJS.Timeout | null = null;\r\n\r\n  getState(): MonitoringState {\r\n    const totalRenders = Array.from(this.metrics.values())\r\n      .reduce((sum, metric) => sum + metric.renderCount, 0);\r\n    \r\n    const averageRenderTime = Array.from(this.metrics.values())\r\n      .reduce((sum, metric, _, arr) => sum + metric.averageRenderTime / arr.length, 0);\r\n\r\n    return {\r\n      isEnabled: true,\r\n      metrics: new Map(this.metrics),\r\n      alerts: [...this.alerts],\r\n      globalStats: {\r\n        totalComponents: this.metrics.size,\r\n        totalRenders,\r\n        averageRenderTime,\r\n        activeAlerts: this.alerts.filter(alert => !alert.resolved).length\r\n      }\r\n    };\r\n  }\r\n\r\n  updateMetrics(componentName: string, metrics: Partial<RenderMetrics>): void {\r\n    const existing = this.metrics.get(componentName);\r\n    const updated: RenderMetrics = {\r\n      componentName,\r\n      renderCount: 0,\r\n      averageRenderTime: 0,\r\n      lastRenderTime: 0,\r\n      slowRenders: 0,\r\n      errorCount: 0,\r\n      timestamp: Date.now(),\r\n      ...existing,\r\n      ...metrics\r\n    };\r\n\r\n    this.metrics.set(componentName, updated);\r\n    this.notifyListeners();\r\n  }\r\n\r\n  addAlert(alert: Omit<MonitoringAlert, 'id' | 'timestamp' | 'resolved'>): void {\r\n    const newAlert: MonitoringAlert = {\r\n      ...alert,\r\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: Date.now(),\r\n      resolved: false\r\n    };\r\n\r\n    this.alerts.unshift(newAlert);\r\n    \r\n    // Mantener solo las últimas 100 alertas\r\n    if (this.alerts.length > 100) {\r\n      this.alerts = this.alerts.slice(0, 100);\r\n    }\r\n\r\n    this.notifyListeners();\r\n  }\r\n\r\n  resolveAlert(alertId: string): void {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      (alert as any).resolved = true;\r\n      this.notifyListeners();\r\n    }\r\n  }\r\n\r\n  clearAlerts(): void {\r\n    this.alerts = [];\r\n    this.notifyListeners();\r\n  }\r\n\r\n  exportData(): string {\r\n    return JSON.stringify({\r\n      metrics: Array.from(this.metrics.entries()),\r\n      alerts: this.alerts,\r\n      timestamp: Date.now()\r\n    }, null, 2);\r\n  }\r\n}\r\n\r\nconst monitoringStore = MonitoringStore.getInstance();\r\n\r\n// ===================================\r\n// UTILIDADES DE PERFORMANCE\r\n// ===================================\r\n\r\nfunction measureRenderTime<T>(fn: () => T): { result: T; duration: number } {\r\n  const start = performance.now();\r\n  const result = fn();\r\n  const duration = performance.now() - start;\r\n  return { result, duration };\r\n}\r\n\r\nfunction getMemoryUsage(): number {\r\n  if ('memory' in performance) {\r\n    return (performance as any).memory.usedJSHeapSize / 1024 / 1024; // MB\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction shouldSample(sampleRate: number): boolean {\r\n  return Math.random() < sampleRate;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL DE MONITOREO\r\n// ===================================\r\n\r\nexport function useRenderMonitoring(options: MonitoringOptions) {\r\n  const opts = { ...DEFAULT_OPTIONS, ...options };\r\n  const { toast } = useToast();\r\n  \r\n  // Referencias para tracking\r\n  const renderCountRef = useRef(0);\r\n  const renderTimesRef = useRef<number[]>([]);\r\n  const lastRenderTimeRef = useRef(0);\r\n  const slowRendersRef = useRef(0);\r\n  const errorCountRef = useRef(0);\r\n  const mountTimeRef = useRef(Date.now());\r\n  \r\n  // Estado local\r\n  const [monitoringState, setMonitoringState] = useState<MonitoringState>(\r\n    monitoringStore.getState()\r\n  );\r\n\r\n  // ===================================\r\n  // FUNCIONES DE ANÁLISIS\r\n  // ===================================\r\n\r\n  const analyzePerformance = useCallback((renderTime: number) => {\r\n    const { componentName, thresholds } = opts;\r\n    \r\n    // Detectar render lento\r\n    if (renderTime > thresholds.slowRenderThreshold) {\r\n      slowRendersRef.current++;\r\n      \r\n      monitoringStore.addAlert({\r\n        type: 'performance',\r\n        severity: renderTime > thresholds.slowRenderThreshold * 2 ? 'high' : 'medium',\r\n        message: `Render lento detectado: ${renderTime.toFixed(2)}ms (umbral: ${thresholds.slowRenderThreshold}ms)`,\r\n        componentName,\r\n        metrics: { lastRenderTime: renderTime }\r\n      });\r\n\r\n      if (opts.enableConsoleLogging) {\r\n        console.warn(`[RenderMonitoring] Slow render in ${componentName}: ${renderTime.toFixed(2)}ms`);\r\n      }\r\n    }\r\n\r\n    // Detectar posible render loop\r\n    const now = Date.now();\r\n    const oneMinuteAgo = now - 60000;\r\n    const recentRenders = renderTimesRef.current.filter(time => time > oneMinuteAgo).length;\r\n    \r\n    if (recentRenders > thresholds.maxRenderCount) {\r\n      monitoringStore.addAlert({\r\n        type: 'render-loop',\r\n        severity: 'critical',\r\n        message: `Posible render loop: ${recentRenders} renders en el último minuto (máximo: ${thresholds.maxRenderCount})`,\r\n        componentName,\r\n        metrics: { renderCount: recentRenders }\r\n      });\r\n\r\n      if (opts.enableToasts) {\r\n        toast({\r\n          title: 'Render Loop Detectado',\r\n          description: `${componentName}: ${recentRenders} renders/min`,\r\n          variant: 'destructive'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Detectar uso excesivo de memoria\r\n    const memoryUsage = getMemoryUsage();\r\n    if (memoryUsage > thresholds.memoryThreshold) {\r\n      monitoringStore.addAlert({\r\n        type: 'memory',\r\n        severity: 'high',\r\n        message: `Uso de memoria elevado: ${memoryUsage.toFixed(2)}MB (umbral: ${thresholds.memoryThreshold}MB)`,\r\n        componentName,\r\n        metrics: { memoryUsage }\r\n      });\r\n    }\r\n  }, [opts, toast]);\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE TRACKING DE RENDER\r\n  // ===================================\r\n\r\n  const trackRender = useCallback(() => {\r\n    if (!opts.enabled || !shouldSample(opts.sampleRate)) {\r\n      return;\r\n    }\r\n\r\n    const renderTime = performance.now() - lastRenderTimeRef.current;\r\n    renderCountRef.current++;\r\n    renderTimesRef.current.push(Date.now());\r\n    \r\n    // Mantener solo los últimos 100 renders\r\n    if (renderTimesRef.current.length > 100) {\r\n      renderTimesRef.current = renderTimesRef.current.slice(-100);\r\n    }\r\n\r\n    // Calcular promedio de tiempo de render\r\n    const recentTimes = renderTimesRef.current.slice(-10); // Últimos 10 renders\r\n    const averageRenderTime = recentTimes.reduce((sum, time, i, arr) => {\r\n      if (i === 0) {return 0;}\r\n      return sum + (time - arr[i - 1]) / (arr.length - 1);\r\n    }, 0);\r\n\r\n    // Actualizar métricas\r\n    const metrics: Partial<RenderMetrics> = {\r\n      renderCount: renderCountRef.current,\r\n      averageRenderTime,\r\n      lastRenderTime: renderTime,\r\n      slowRenders: slowRendersRef.current,\r\n      errorCount: errorCountRef.current,\r\n      memoryUsage: getMemoryUsage(),\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    monitoringStore.updateMetrics(opts.componentName, metrics);\r\n    \r\n    // Analizar performance\r\n    analyzePerformance(renderTime);\r\n    \r\n    // Guardar en localStorage si está habilitado\r\n    if (opts.enableLocalStorage) {\r\n      try {\r\n        localStorage.setItem(\r\n          `render-monitoring-${opts.componentName}`,\r\n          JSON.stringify(metrics)\r\n        );\r\n      } catch (error) {\r\n        // Ignorar errores de localStorage\r\n      }\r\n    }\r\n\r\n    lastRenderTimeRef.current = performance.now();\r\n  }, [opts, analyzePerformance]);\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE TRACKING DE ERRORES\r\n  // ===================================\r\n\r\n  const trackError = useCallback((error: Error, errorInfo?: any) => {\r\n    if (!opts.enabled) {return;}\r\n\r\n    errorCountRef.current++;\r\n    \r\n    monitoringStore.addAlert({\r\n      type: 'error',\r\n      severity: 'high',\r\n      message: `Error en componente: ${error.message}`,\r\n      componentName: opts.componentName,\r\n      metrics: { errorCount: errorCountRef.current }\r\n    });\r\n\r\n    if (opts.enableConsoleLogging) {\r\n      console.error(`[RenderMonitoring] Error in ${opts.componentName}:`, error, errorInfo);\r\n    }\r\n\r\n    if (opts.enableToasts) {\r\n      toast({\r\n        title: 'Error de Componente',\r\n        description: `${opts.componentName}: ${error.message}`,\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  }, [opts, toast]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // Suscribirse a cambios del store\r\n  useEffect(() => {\r\n    const unsubscribe = monitoringStore.addListener(setMonitoringState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Track render en cada render del componente\r\n  useEffect(() => {\r\n    trackRender();\r\n  });\r\n\r\n  // Cleanup al desmontar\r\n  useEffect(() => {\r\n    return () => {\r\n      if (opts.enableConsoleLogging) {\r\n        const totalTime = Date.now() - mountTimeRef.current;\r\n        console.log(\r\n          `[RenderMonitoring] ${opts.componentName} unmounted after ${totalTime}ms, ` +\r\n          `${renderCountRef.current} renders, ` +\r\n          `${slowRendersRef.current} slow renders, ` +\r\n          `${errorCountRef.current} errors`\r\n        );\r\n      }\r\n    };\r\n  }, [opts]);\r\n\r\n  // ===================================\r\n  // API PÚBLICA\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    isEnabled: opts.enabled,\r\n    metrics: monitoringState.metrics.get(opts.componentName),\r\n    globalStats: monitoringState.globalStats,\r\n    alerts: monitoringState.alerts.filter(alert => \r\n      alert.componentName === opts.componentName\r\n    ),\r\n    \r\n    // Funciones\r\n    trackError,\r\n    trackRender,\r\n    \r\n    // Utilidades\r\n    exportData: () => monitoringStore.exportData(),\r\n    clearAlerts: () => monitoringStore.clearAlerts(),\r\n    resolveAlert: (alertId: string) => monitoringStore.resolveAlert(alertId)\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA MONITOREO GLOBAL\r\n// ===================================\r\n\r\nexport function useGlobalMonitoring() {\r\n  const [state, setState] = useState<MonitoringState>(monitoringStore.getState());\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = monitoringStore.addListener(setState);\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    exportData: () => monitoringStore.exportData(),\r\n    clearAlerts: () => monitoringStore.clearAlerts(),\r\n    resolveAlert: (alertId: string) => monitoringStore.resolveAlert(alertId)\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOC PARA MONITOREO AUTOMÁTICO\r\n// ===================================\r\n\r\nexport function withRenderMonitoring<P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  options: Omit<MonitoringOptions, 'componentName'>\r\n): React.ComponentType<P> {\r\n  const componentName = Component.displayName || Component.name || 'UnknownComponent';\r\n  \r\n  const WrappedComponent: React.FC<P> = (props) => {\r\n    const { trackError } = useRenderMonitoring({\r\n      ...options,\r\n      componentName\r\n    });\r\n\r\n    // Error boundary simple\r\n    useEffect(() => {\r\n      const handleError = (event: ErrorEvent) => {\r\n        trackError(new Error(event.message));\r\n      };\r\n\r\n      window.addEventListener('error', handleError);\r\n      return () => window.removeEventListener('error', handleError);\r\n    }, [trackError]);\r\n\r\n    return React.createElement(Component, props);\r\n  };\r\n\r\n  WrappedComponent.displayName = `withRenderMonitoring(${componentName})`;\r\n  return WrappedComponent;\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES EXPORTADAS\r\n// ===================================\r\n\r\n/**\r\n * Obtiene métricas de un componente específico\r\n */\r\nexport function getComponentMetrics(componentName: string): RenderMetrics | undefined {\r\n  return monitoringStore.getState().metrics.get(componentName);\r\n}\r\n\r\n/**\r\n * Obtiene todas las alertas activas\r\n */\r\nexport function getActiveAlerts(): MonitoringAlert[] {\r\n  return monitoringStore.getState().alerts.filter(alert => !alert.resolved);\r\n}\r\n\r\n/**\r\n * Exporta todos los datos de monitoreo\r\n */\r\nexport function exportMonitoringData(): string {\r\n  return monitoringStore.exportData();\r\n}\r\n\r\n/**\r\n * Limpia todas las alertas\r\n */\r\nexport function clearAllAlerts(): void {\r\n  monitoringStore.clearAlerts();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}