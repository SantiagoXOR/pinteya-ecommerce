{"version":3,"names":["cov_1b84146wv8","actualCoverage","s","DELETE","f","GET","PUT","runtime","defaultPreferences","notifications","emailNotifications","orderUpdates","promotions","securityAlerts","marketingEmails","pushNotifications","smsNotifications","display","language","timezone","currency","theme","privacy","profileVisibility","activityTracking","marketingConsent","dataCollection","thirdPartySharing","analyticsOptOut","request","session","_config","auth","user","id","b","_server","NextResponse","json","error","status","userId","data","userPrefs","_supabase","supabaseAdmin","from","select","eq","single","code","console","preferences","success","body","validatedPreferences","validatePreferences","updatedPrefs","upsert","user_id","updated_at","Date","toISOString","requestInfo","_activityLogger","getRequestInfo","logPreferenceActivity","sections_updated","Object","keys","total_preferences","length","message","resetPrefs","reset_to_defaults","previous_preferences_count","validated","supportedLanguages","includes","supportedCurrencies","supportedThemes","supportedVisibility"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\preferences\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PREFERENCIAS DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { logPreferenceActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// Tipos para las preferencias\r\ninterface UserPreferences {\r\n  notifications: {\r\n    emailNotifications: boolean;\r\n    orderUpdates: boolean;\r\n    promotions: boolean;\r\n    securityAlerts: boolean;\r\n    marketingEmails: boolean;\r\n    pushNotifications: boolean;\r\n    smsNotifications: boolean;\r\n  };\r\n  display: {\r\n    language: string;\r\n    timezone: string;\r\n    currency: string;\r\n    theme: string;\r\n  };\r\n  privacy: {\r\n    profileVisibility: 'public' | 'private';\r\n    activityTracking: boolean;\r\n    marketingConsent: boolean;\r\n    dataCollection: boolean;\r\n    thirdPartySharing: boolean;\r\n    analyticsOptOut: boolean;\r\n  };\r\n}\r\n\r\n// Preferencias por defecto\r\nconst defaultPreferences: UserPreferences = {\r\n  notifications: {\r\n    emailNotifications: true,\r\n    orderUpdates: true,\r\n    promotions: false,\r\n    securityAlerts: true,\r\n    marketingEmails: false,\r\n    pushNotifications: true,\r\n    smsNotifications: false,\r\n  },\r\n  display: {\r\n    language: 'es',\r\n    timezone: 'America/Argentina/Buenos_Aires',\r\n    currency: 'ARS',\r\n    theme: 'system',\r\n  },\r\n  privacy: {\r\n    profileVisibility: 'private',\r\n    activityTracking: true,\r\n    marketingConsent: false,\r\n    dataCollection: true,\r\n    thirdPartySharing: false,\r\n    analyticsOptOut: false,\r\n  },\r\n};\r\n\r\n// GET - Obtener preferencias del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Obtener preferencias de la base de datos\r\n    const { data: userPrefs, error } = await supabaseAdmin\r\n      .from('user_preferences')\r\n      .select('preferences')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\r\n      console.error('Error al obtener preferencias:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener preferencias' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si no hay preferencias guardadas, devolver las por defecto\r\n    const preferences = userPrefs?.preferences || defaultPreferences;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      preferences,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/preferences:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Actualizar preferencias completas\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n    const { preferences } = body;\r\n\r\n    if (!preferences) {\r\n      return NextResponse.json(\r\n        { error: 'Preferencias requeridas' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar estructura de preferencias\r\n    const validatedPreferences = validatePreferences(preferences);\r\n    if (!validatedPreferences) {\r\n      return NextResponse.json(\r\n        { error: 'Formato de preferencias inválido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Upsert preferencias en la base de datos\r\n    const { data: updatedPrefs, error } = await supabaseAdmin\r\n      .from('user_preferences')\r\n      .upsert({\r\n        user_id: userId,\r\n        preferences: validatedPreferences,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar preferencias:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar preferencias' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad\r\n    const requestInfo = getRequestInfo(request);\r\n    await logPreferenceActivity(\r\n      userId,\r\n      'update_preferences',\r\n      {\r\n        sections_updated: Object.keys(preferences),\r\n        total_preferences: Object.keys(validatedPreferences).length,\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      preferences: updatedPrefs.preferences,\r\n      message: 'Preferencias actualizadas correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/preferences:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE - Resetear a preferencias por defecto\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Resetear a preferencias por defecto\r\n    const { data: resetPrefs, error } = await supabaseAdmin\r\n      .from('user_preferences')\r\n      .upsert({\r\n        user_id: userId,\r\n        preferences: defaultPreferences,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al resetear preferencias:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al resetear preferencias' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad\r\n    const requestInfo = getRequestInfo(request);\r\n    await logPreferenceActivity(\r\n      userId,\r\n      'reset_preferences',\r\n      {\r\n        reset_to_defaults: true,\r\n        previous_preferences_count: Object.keys(defaultPreferences).length,\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      preferences: resetPrefs.preferences,\r\n      message: 'Preferencias reseteadas a valores por defecto',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/user/preferences:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función para validar preferencias\r\nfunction validatePreferences(preferences: any): UserPreferences | null {\r\n  try {\r\n    // Validar estructura básica\r\n    if (!preferences || typeof preferences !== 'object') {\r\n      return null;\r\n    }\r\n\r\n    // Combinar con valores por defecto para asegurar completitud\r\n    const validated: UserPreferences = {\r\n      notifications: {\r\n        ...defaultPreferences.notifications,\r\n        ...preferences.notifications,\r\n      },\r\n      display: {\r\n        ...defaultPreferences.display,\r\n        ...preferences.display,\r\n      },\r\n      privacy: {\r\n        ...defaultPreferences.privacy,\r\n        ...preferences.privacy,\r\n      },\r\n    };\r\n\r\n    // Validaciones específicas\r\n    if (preferences.display?.language) {\r\n      const supportedLanguages = ['es', 'en', 'pt'];\r\n      if (!supportedLanguages.includes(preferences.display.language)) {\r\n        validated.display.language = 'es';\r\n      }\r\n    }\r\n\r\n    if (preferences.display?.currency) {\r\n      const supportedCurrencies = ['ARS', 'USD', 'EUR', 'BRL', 'CLP', 'COP', 'MXN', 'PEN'];\r\n      if (!supportedCurrencies.includes(preferences.display.currency)) {\r\n        validated.display.currency = 'ARS';\r\n      }\r\n    }\r\n\r\n    if (preferences.display?.theme) {\r\n      const supportedThemes = ['light', 'dark', 'system'];\r\n      if (!supportedThemes.includes(preferences.display.theme)) {\r\n        validated.display.theme = 'system';\r\n      }\r\n    }\r\n\r\n    if (preferences.privacy?.profileVisibility) {\r\n      const supportedVisibility = ['public', 'private'];\r\n      if (!supportedVisibility.includes(preferences.privacy.profileVisibility)) {\r\n        validated.privacy.profileVisibility = 'private';\r\n      }\r\n    }\r\n\r\n    return validated;\r\n  } catch (error) {\r\n    console.error('Error al validar preferencias:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}