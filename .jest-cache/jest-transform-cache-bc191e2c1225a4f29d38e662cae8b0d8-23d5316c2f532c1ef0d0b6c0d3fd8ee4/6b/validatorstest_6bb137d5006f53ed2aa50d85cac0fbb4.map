{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\utils\\validators.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS UNITARIOS: Validadores\r\n// Tests para funciones de validación críticas\r\n// ===================================\r\n\r\nimport {\r\n  validateEmail,\r\n  validatePassword,\r\n  validatePhone,\r\n  validateProductData,\r\n  validateOrderData,\r\n  validatePaymentData,\r\n  validateAddress,\r\n  validateCurrency,\r\n  validateQuantity,\r\n  validateDiscount\r\n} from '@/lib/utils/validators';\r\n\r\ndescribe('Email Validation', () => {\r\n  test('should validate correct email formats', () => {\r\n    const validEmails = [\r\n      'test@example.com',\r\n      'user.name@domain.co.uk',\r\n      'user+tag@example.org',\r\n      'user123@test-domain.com'\r\n    ];\r\n\r\n    validEmails.forEach(email => {\r\n      expect(validateEmail(email)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should reject invalid email formats', () => {\r\n    const invalidEmails = [\r\n      'invalid-email',\r\n      '@domain.com',\r\n      'user@',\r\n      'user..name@domain.com',\r\n      'user@domain',\r\n      '',\r\n      null,\r\n      undefined\r\n    ];\r\n\r\n    invalidEmails.forEach(email => {\r\n      expect(validateEmail(email)).toBe(false);\r\n    });\r\n  });\r\n\r\n  test('should handle edge cases', () => {\r\n    expect(validateEmail('a@b.co')).toBe(true); // Minimum valid\r\n    expect(validateEmail('a'.repeat(64) + '@' + 'b'.repeat(63) + '.com')).toBe(true); // Max length\r\n    expect(validateEmail('a'.repeat(65) + '@domain.com')).toBe(false); // Too long local part\r\n  });\r\n});\r\n\r\ndescribe('Password Validation', () => {\r\n  test('should validate strong passwords', () => {\r\n    const strongPasswords = [\r\n      'MyStr0ngP@ssw0rd!',\r\n      'C0mpl3x#P@ssw0rd',\r\n      'S3cur3P@ss123!',\r\n      'V3ryStr0ng#2024'\r\n    ];\r\n\r\n    strongPasswords.forEach(password => {\r\n      const result = validatePassword(password);\r\n      expect(result.isValid).toBe(true);\r\n      expect(result.errors).toHaveLength(0);\r\n    });\r\n  });\r\n\r\n  test('should reject weak passwords', () => {\r\n    const weakPasswords = [\r\n      { password: '123456', expectedErrors: ['length', 'uppercase', 'lowercase', 'special'] },\r\n      { password: 'password', expectedErrors: ['uppercase', 'number', 'special'] },\r\n      { password: 'PASSWORD', expectedErrors: ['lowercase', 'number', 'special'] },\r\n      { password: 'Pass123', expectedErrors: ['length', 'special'] },\r\n      { password: 'Pass@', expectedErrors: ['length', 'number'] }\r\n    ];\r\n\r\n    weakPasswords.forEach(({ password, expectedErrors }) => {\r\n      const result = validatePassword(password);\r\n      expect(result.isValid).toBe(false);\r\n      expectedErrors.forEach(error => {\r\n        expect(result.errors).toContain(error);\r\n      });\r\n    });\r\n  });\r\n\r\n  test('should provide detailed error messages', () => {\r\n    const result = validatePassword('weak');\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('length');\r\n    expect(result.message).toContain('al menos 8 caracteres');\r\n  });\r\n});\r\n\r\ndescribe('Phone Validation', () => {\r\n  test('should validate Argentine phone numbers', () => {\r\n    const validPhones = [\r\n      '+541123456789',\r\n      '1123456789',\r\n      '011-2345-6789',\r\n      '(011) 2345-6789',\r\n      '+54 11 2345-6789'\r\n    ];\r\n\r\n    validPhones.forEach(phone => {\r\n      expect(validatePhone(phone, 'AR')).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should validate international phone numbers', () => {\r\n    const validPhones = [\r\n      '+1234567890',\r\n      '+44 20 7946 0958',\r\n      '+33 1 42 86 83 26'\r\n    ];\r\n\r\n    validPhones.forEach(phone => {\r\n      expect(validatePhone(phone, 'INTERNATIONAL')).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should reject invalid phone numbers', () => {\r\n    const invalidPhones = [\r\n      '123',\r\n      'abc123',\r\n      '+54 11 123',\r\n      '',\r\n      null,\r\n      undefined\r\n    ];\r\n\r\n    invalidPhones.forEach(phone => {\r\n      expect(validatePhone(phone, 'AR')).toBe(false);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Product Data Validation', () => {\r\n  const validProduct = {\r\n    name: 'Pintura Latex Interior',\r\n    description: 'Pintura de alta calidad para interiores',\r\n    price: 2500,\r\n    stock: 10,\r\n    category_id: 1,\r\n    brand: 'Sherwin Williams',\r\n    images: ['image1.jpg', 'image2.jpg']\r\n  };\r\n\r\n  test('should validate correct product data', () => {\r\n    const result = validateProductData(validProduct);\r\n    expect(result.isValid).toBe(true);\r\n    expect(result.errors).toHaveLength(0);\r\n  });\r\n\r\n  test('should reject product with missing required fields', () => {\r\n    const invalidProduct = { ...validProduct };\r\n    delete invalidProduct.name;\r\n    delete invalidProduct.price;\r\n\r\n    const result = validateProductData(invalidProduct);\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('name');\r\n    expect(result.errors).toContain('price');\r\n  });\r\n\r\n  test('should validate price constraints', () => {\r\n    const negativePrice = { ...validProduct, price: -100 };\r\n    const zeroPrice = { ...validProduct, price: 0 };\r\n    const tooHighPrice = { ...validProduct, price: 10000000 };\r\n\r\n    expect(validateProductData(negativePrice).isValid).toBe(false);\r\n    expect(validateProductData(zeroPrice).isValid).toBe(false);\r\n    expect(validateProductData(tooHighPrice).isValid).toBe(false);\r\n  });\r\n\r\n  test('should validate stock constraints', () => {\r\n    const negativeStock = { ...validProduct, stock: -1 };\r\n    const validZeroStock = { ...validProduct, stock: 0 };\r\n\r\n    expect(validateProductData(negativeStock).isValid).toBe(false);\r\n    expect(validateProductData(validZeroStock).isValid).toBe(true);\r\n  });\r\n\r\n  test('should validate name length and format', () => {\r\n    const shortName = { ...validProduct, name: 'AB' };\r\n    const longName = { ...validProduct, name: 'A'.repeat(201) };\r\n    const invalidChars = { ...validProduct, name: 'Product<script>' };\r\n\r\n    expect(validateProductData(shortName).isValid).toBe(false);\r\n    expect(validateProductData(longName).isValid).toBe(false);\r\n    expect(validateProductData(invalidChars).isValid).toBe(false);\r\n  });\r\n});\r\n\r\ndescribe('Order Data Validation', () => {\r\n  const validOrder = {\r\n    user_id: 'user_123',\r\n    items: [\r\n      { product_id: 1, quantity: 2, price: 2500 },\r\n      { product_id: 2, quantity: 1, price: 1800 }\r\n    ],\r\n    total: 6800,\r\n    shipping_address: {\r\n      street: 'Av. Corrientes 1234',\r\n      city: 'Buenos Aires',\r\n      state: 'CABA',\r\n      postal_code: '1043',\r\n      country: 'Argentina'\r\n    },\r\n    payment_method: 'mercadopago'\r\n  };\r\n\r\n  test('should validate correct order data', () => {\r\n    const result = validateOrderData(validOrder);\r\n    expect(result.isValid).toBe(true);\r\n    expect(result.errors).toHaveLength(0);\r\n  });\r\n\r\n  test('should validate order items', () => {\r\n    const emptyItems = { ...validOrder, items: [] };\r\n    const invalidItem = {\r\n      ...validOrder,\r\n      items: [{ product_id: 1, quantity: 0, price: -100 }]\r\n    };\r\n\r\n    expect(validateOrderData(emptyItems).isValid).toBe(false);\r\n    expect(validateOrderData(invalidItem).isValid).toBe(false);\r\n  });\r\n\r\n  test('should validate total calculation', () => {\r\n    const wrongTotal = { ...validOrder, total: 5000 }; // Should be 6800\r\n    const result = validateOrderData(wrongTotal);\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('total_mismatch');\r\n  });\r\n\r\n  test('should validate shipping address', () => {\r\n    const invalidAddress = {\r\n      ...validOrder,\r\n      shipping_address: {\r\n        street: '',\r\n        city: 'Buenos Aires',\r\n        state: 'CABA',\r\n        postal_code: '1043',\r\n        country: 'Argentina'\r\n      }\r\n    };\r\n\r\n    const result = validateOrderData(invalidAddress);\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('shipping_address');\r\n  });\r\n});\r\n\r\ndescribe('Payment Data Validation', () => {\r\n  test('should validate MercadoPago payment data', () => {\r\n    const validPayment = {\r\n      method: 'mercadopago',\r\n      amount: 6800,\r\n      currency: 'ARS',\r\n      payment_method_id: 'visa',\r\n      installments: 1,\r\n      payer: {\r\n        email: 'user@example.com',\r\n        identification: {\r\n          type: 'DNI',\r\n          number: '12345678'\r\n        }\r\n      }\r\n    };\r\n\r\n    const result = validatePaymentData(validPayment);\r\n    expect(result.isValid).toBe(true);\r\n  });\r\n\r\n  test('should validate payment amount', () => {\r\n    const negativeAmount = {\r\n      method: 'mercadopago',\r\n      amount: -100,\r\n      currency: 'ARS'\r\n    };\r\n\r\n    const result = validatePaymentData(negativeAmount);\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('amount');\r\n  });\r\n\r\n  test('should validate currency format', () => {\r\n    const invalidCurrency = {\r\n      method: 'mercadopago',\r\n      amount: 1000,\r\n      currency: 'INVALID'\r\n    };\r\n\r\n    const result = validatePaymentData(invalidCurrency);\r\n    expect(result.isValid).toBe(false);\r\n    expect(result.errors).toContain('currency');\r\n  });\r\n});\r\n\r\ndescribe('Address Validation', () => {\r\n  test('should validate complete address', () => {\r\n    const validAddress = {\r\n      street: 'Av. Corrientes 1234',\r\n      city: 'Buenos Aires',\r\n      state: 'CABA',\r\n      postal_code: '1043',\r\n      country: 'Argentina'\r\n    };\r\n\r\n    const result = validateAddress(validAddress);\r\n    expect(result.isValid).toBe(true);\r\n  });\r\n\r\n  test('should validate postal codes by country', () => {\r\n    const argPostalCode = { \r\n      street: '123 Main St',\r\n      city: 'Buenos Aires',\r\n      country: 'Argentina', \r\n      postal_code: '1043' \r\n    };\r\n    const usPostalCode = { \r\n      street: '456 Oak Ave',\r\n      city: 'New York',\r\n      country: 'USA', \r\n      postal_code: '12345' \r\n    };\r\n    const invalidPostalCode = { \r\n      street: '789 Pine St',\r\n      city: 'Córdoba',\r\n      country: 'Argentina', \r\n      postal_code: '123' \r\n    };\r\n\r\n    expect(validateAddress(argPostalCode).isValid).toBe(true);\r\n    expect(validateAddress(usPostalCode).isValid).toBe(true);\r\n    expect(validateAddress(invalidPostalCode).isValid).toBe(false);\r\n  });\r\n});\r\n\r\ndescribe('Currency Validation', () => {\r\n  test('should validate supported currencies', () => {\r\n    const supportedCurrencies = ['ARS', 'USD', 'EUR', 'BRL'];\r\n    \r\n    supportedCurrencies.forEach(currency => {\r\n      expect(validateCurrency(currency)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should reject unsupported currencies', () => {\r\n    const unsupportedCurrencies = ['XYZ', 'ABC', '', null, undefined];\r\n    \r\n    unsupportedCurrencies.forEach(currency => {\r\n      expect(validateCurrency(currency)).toBe(false);\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Quantity Validation', () => {\r\n  test('should validate positive quantities', () => {\r\n    const validQuantities = [1, 5, 10, 100];\r\n    \r\n    validQuantities.forEach(quantity => {\r\n      expect(validateQuantity(quantity)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should reject invalid quantities', () => {\r\n    const invalidQuantities = [0, -1, 1.5, 'abc', null, undefined];\r\n    \r\n    invalidQuantities.forEach(quantity => {\r\n      expect(validateQuantity(quantity)).toBe(false);\r\n    });\r\n  });\r\n\r\n  test('should validate quantity limits', () => {\r\n    expect(validateQuantity(999)).toBe(true);\r\n    expect(validateQuantity(1000)).toBe(false); // Assuming max is 999\r\n  });\r\n});\r\n\r\ndescribe('Discount Validation', () => {\r\n  test('should validate percentage discounts', () => {\r\n    const validDiscounts = [\r\n      { type: 'percentage', value: 10 },\r\n      { type: 'percentage', value: 50 },\r\n      { type: 'percentage', value: 100 }\r\n    ];\r\n\r\n    validDiscounts.forEach(discount => {\r\n      expect(validateDiscount(discount)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should validate fixed amount discounts', () => {\r\n    const validDiscounts = [\r\n      { type: 'fixed', value: 100, currency: 'ARS' },\r\n      { type: 'fixed', value: 50, currency: 'USD' }\r\n    ];\r\n\r\n    validDiscounts.forEach(discount => {\r\n      expect(validateDiscount(discount)).toBe(true);\r\n    });\r\n  });\r\n\r\n  test('should reject invalid discounts', () => {\r\n    const invalidDiscounts = [\r\n      { type: 'percentage', value: -10 },\r\n      { type: 'percentage', value: 150 },\r\n      { type: 'fixed', value: -100 },\r\n      { type: 'invalid', value: 10 }\r\n    ];\r\n\r\n    invalidDiscounts.forEach(discount => {\r\n      expect(validateDiscount(discount)).toBe(false);\r\n    });\r\n  });\r\n});\r\n\r\n// Tests de integración para validadores\r\ndescribe('Validator Integration', () => {\r\n  test('should validate complete user registration data', () => {\r\n    const userData = {\r\n      email: 'user@example.com',\r\n      password: 'MyStr0ng#P@ssw0rd',\r\n      phone: '+541123456789',\r\n      address: {\r\n        street: 'Av. Corrientes 1234',\r\n        city: 'Buenos Aires',\r\n        state: 'CABA',\r\n        postal_code: '1043',\r\n        country: 'Argentina'\r\n      }\r\n    };\r\n\r\n    expect(validateEmail(userData.email)).toBe(true);\r\n    expect(validatePassword(userData.password).isValid).toBe(true);\r\n    expect(validatePhone(userData.phone, 'AR')).toBe(true);\r\n    expect(validateAddress(userData.address).isValid).toBe(true);\r\n  });\r\n\r\n  test('should validate complete checkout flow data', () => {\r\n    const checkoutData = {\r\n      order: {\r\n        user_id: 'user_123',\r\n        items: [{ product_id: 1, quantity: 2, price: 2500 }],\r\n        total: 5000,\r\n        shipping_address: {\r\n          street: 'Av. Corrientes 1234',\r\n          city: 'Buenos Aires',\r\n          state: 'CABA',\r\n          postal_code: '1043',\r\n          country: 'Argentina'\r\n        },\r\n        payment_method: 'mercadopago'\r\n      },\r\n      payment: {\r\n        method: 'mercadopago',\r\n        amount: 5000,\r\n        currency: 'ARS'\r\n      }\r\n    };\r\n\r\n    expect(validateOrderData(checkoutData.order).isValid).toBe(true);\r\n    expect(validatePaymentData(checkoutData.payment).isValid).toBe(true);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["describe","test","validEmails","forEach","email","expect","validateEmail","toBe","invalidEmails","undefined","repeat","strongPasswords","password","result","validatePassword","isValid","errors","toHaveLength","weakPasswords","expectedErrors","error","toContain","message","validPhones","phone","validatePhone","invalidPhones","validProduct","name","description","price","stock","category_id","brand","images","validateProductData","invalidProduct","negativePrice","zeroPrice","tooHighPrice","negativeStock","validZeroStock","shortName","longName","invalidChars","validOrder","user_id","items","product_id","quantity","total","shipping_address","street","city","state","postal_code","country","payment_method","validateOrderData","emptyItems","invalidItem","wrongTotal","invalidAddress","validPayment","method","amount","currency","payment_method_id","installments","payer","identification","type","number","validatePaymentData","negativeAmount","invalidCurrency","validAddress","validateAddress","argPostalCode","usPostalCode","invalidPostalCode","supportedCurrencies","validateCurrency","unsupportedCurrencies","validQuantities","validateQuantity","invalidQuantities","validDiscounts","value","discount","validateDiscount","invalidDiscounts","userData","address","checkoutData","order","payment"],"mappings":"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"}