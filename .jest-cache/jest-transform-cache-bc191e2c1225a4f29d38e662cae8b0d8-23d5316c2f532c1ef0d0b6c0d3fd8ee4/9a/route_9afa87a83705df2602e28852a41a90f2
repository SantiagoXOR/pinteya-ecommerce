c286eaa1fb57d3f6b4c2e5f3aecec1ca
"use strict";

/* istanbul ignore next */
function cov_1ckvpbnaai() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\mark-paid\\route.ts";
  var hash = "979d9005faf4a1fbdc873e77bfdbf8941c38cde2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\mark-paid\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 47
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 78
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 66
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "9": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "10": {
        start: {
          line: 19,
          column: 58
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "11": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "15": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 36,
          column: 58
        }
      },
      "16": {
        start: {
          line: 37,
          column: 51
        },
        end: {
          line: 37,
          column: 151
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "21": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "22": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "23": {
        start: {
          line: 65,
          column: 39
        },
        end: {
          line: 65,
          column: 105
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "25": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "29": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 92,
          column: 19
        }
      },
      "30": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "31": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "32": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "33": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "34": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 41
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 43
          },
          end: {
            line: 19,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 51
          },
          end: {
            line: 19,
            column: 53
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 22
          }
        }, {
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 32
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 49
          },
          end: {
            line: 62,
            column: 60
          }
        }, {
          start: {
            line: 62,
            column: 63
          },
          end: {
            line: 62,
            column: 75
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 38
          }
        }, {
          start: {
            line: 79,
            column: 42
          },
          end: {
            line: 79,
            column: 75
          }
        }],
        line: 79
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\mark-paid\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * POST /api/admin/orders/[id]/mark-paid\r\n * Marca una orden como pagada manualmente\r\n */\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n): Promise<NextResponse> {\r\n  try {\r\n    const orderId = params.id;\r\n    const body = await request.json();\r\n    const { payment_method = 'manual', notes = '' } = body;\r\n\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Marking order as paid manually', { \r\n      orderId,\r\n      userId: session.user.id,\r\n      payment_method\r\n    });\r\n\r\n    // Obtener datos actuales de la orden\r\n    const supabase = createAdminClient();\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, payment_status, total')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      logger.log(LogLevel.WARN, LogCategory.API, 'Order not found', { orderId, orderError });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la orden est\xE9 pendiente de pago\r\n    if (order.payment_status === 'paid') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'La orden ya est\xE1 marcada como pagada' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar estado de pago y orden\r\n    const updateData = {\r\n      payment_status: 'paid',\r\n      status: order.status === 'pending' ? 'confirmed' : order.status,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const { error: updateError } = await supabase\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId);\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error updating order payment status', { \r\n        orderId,\r\n        updateError \r\n      });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al actualizar estado de pago' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar en historial de estados si cambi\xF3 el status\r\n    if (order.status === 'pending' && updateData.status === 'confirmed') {\r\n      try {\r\n        await supabase\r\n          .from('order_status_history')\r\n          .insert({\r\n            order_id: orderId,\r\n            previous_status: 'pending',\r\n            new_status: 'confirmed',\r\n            changed_by: session.user.id,\r\n            reason: `Pago confirmado manualmente por administrador (${payment_method})`,\r\n            metadata: JSON.stringify({\r\n              payment_method,\r\n              notes,\r\n              manual_confirmation: true\r\n            })\r\n          });\r\n      } catch (historyError) {\r\n        // Si la tabla no existe, continuar sin registrar historial\r\n        logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Could not register status history', { historyError });\r\n      }\r\n    }\r\n\r\n    // TODO: Aqu\xED se podr\xEDan agregar acciones adicionales como:\r\n    // - Enviar email de confirmaci\xF3n al cliente\r\n    // - Actualizar inventario\r\n    // - Crear notificaciones\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Order marked as paid successfully', {\r\n      orderId,\r\n      previousStatus: order.status,\r\n      newStatus: updateData.status,\r\n      payment_method\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        order_id: orderId,\r\n        payment_status: 'paid',\r\n        status: updateData.status\r\n      },\r\n      message: 'Orden marcada como pagada exitosamente'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error marking order as paid', { \r\n      orderId: params.id,\r\n      error \r\n    });\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["POST", "request", "params", "orderId", "id", "body", "json", "payment_method", "notes", "session", "auth", "user", "NextResponse", "success", "error", "status", "logger", "log", "LogLevel", "INFO", "LogCategory", "API", "userId", "supabase", "createAdminClient", "data", "order", "orderError", "from", "select", "eq", "single", "WARN", "payment_status", "updateData", "updated_at", "Date", "toISOString", "updateError", "update", "ERROR", "DATABASE", "insert", "order_id", "previous_status", "new_status", "changed_by", "reason", "metadata", "JSON", "stringify", "manual_confirmation", "historyError", "previousStatus", "newStatus", "message"],
      mappings: ";;;;+BASsBA;;;eAAAA;;;wBAToB;sBACrB;yBACa;wBACY;AAMvC,eAAeA,KACpBC,OAAoB,EACpB,EAAEC,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAMC,UAAUD,OAAOE,EAAE;QACzB,MAAMC,OAAO,MAAMJ,QAAQK,IAAI;QAC/B,MAAM,EAAEC,iBAAiB,QAAQ,EAAEC,QAAQ,EAAE,EAAE,GAAGH;QAElD,0BAA0B;QAC1B,MAAMI,UAAU,MAAMC,IAAAA,UAAI;QAC1B,IAAI,CAACD,SAASE,MAAM;YAClB,OAAOC,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAAgB,GACzC;gBAAEC,QAAQ;YAAI;QAElB;QAEAC,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACC,IAAI,EAAEC,mBAAW,CAACC,GAAG,EAAE,kCAAkC;YAC3ElB;YACAmB,QAAQb,QAAQE,IAAI,CAACP,EAAE;YACvBG;QACF;QAEA,qCAAqC;QACrC,MAAMgB,WAAWC,IAAAA,0BAAiB;QAClC,MAAM,EAAEC,MAAMC,KAAK,EAAEZ,OAAOa,UAAU,EAAE,GAAG,MAAMJ,SAC9CK,IAAI,CAAC,UACLC,MAAM,CAAC,qCACPC,EAAE,CAAC,MAAM3B,SACT4B,MAAM;QAET,IAAIJ,cAAc,CAACD,OAAO;YACxBV,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACc,IAAI,EAAEZ,mBAAW,CAACC,GAAG,EAAE,mBAAmB;gBAAElB;gBAASwB;YAAW;YACpF,OAAOf,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAAsB,GAC/C;gBAAEC,QAAQ;YAAI;QAElB;QAEA,gDAAgD;QAChD,IAAIW,MAAMO,cAAc,KAAK,QAAQ;YACnC,OAAOrB,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAAuC,GAChE;gBAAEC,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAMmB,aAAa;YACjBD,gBAAgB;YAChBlB,QAAQW,MAAMX,MAAM,KAAK,YAAY,cAAcW,MAAMX,MAAM;YAC/DoB,YAAY,IAAIC,OAAOC,WAAW;QACpC;QAEA,MAAM,EAAEvB,OAAOwB,WAAW,EAAE,GAAG,MAAMf,SAClCK,IAAI,CAAC,UACLW,MAAM,CAACL,YACPJ,EAAE,CAAC,MAAM3B;QAEZ,IAAImC,aAAa;YACftB,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACsB,KAAK,EAAEpB,mBAAW,CAACqB,QAAQ,EAAE,uCAAuC;gBACtFtC;gBACAmC;YACF;YACA,OAAO1B,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAAqC,GAC9D;gBAAEC,QAAQ;YAAI;QAElB;QAEA,wDAAwD;QACxD,IAAIW,MAAMX,MAAM,KAAK,aAAamB,WAAWnB,MAAM,KAAK,aAAa;YACnE,IAAI;gBACF,MAAMQ,SACHK,IAAI,CAAC,wBACLc,MAAM,CAAC;oBACNC,UAAUxC;oBACVyC,iBAAiB;oBACjBC,YAAY;oBACZC,YAAYrC,QAAQE,IAAI,CAACP,EAAE;oBAC3B2C,QAAQ,CAAC,+CAA+C,EAAExC,eAAe,CAAC,CAAC;oBAC3EyC,UAAUC,KAAKC,SAAS,CAAC;wBACvB3C;wBACAC;wBACA2C,qBAAqB;oBACvB;gBACF;YACJ,EAAE,OAAOC,cAAc;gBACrB,2DAA2D;gBAC3DpC,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACc,IAAI,EAAEZ,mBAAW,CAACqB,QAAQ,EAAE,qCAAqC;oBAAEW;gBAAa;YACtG;QACF;QAEA,2DAA2D;QAC3D,4CAA4C;QAC5C,0BAA0B;QAC1B,yBAAyB;QAEzBpC,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACC,IAAI,EAAEC,mBAAW,CAACC,GAAG,EAAE,qCAAqC;YAC9ElB;YACAkD,gBAAgB3B,MAAMX,MAAM;YAC5BuC,WAAWpB,WAAWnB,MAAM;YAC5BR;QACF;QAEA,OAAOK,oBAAY,CAACN,IAAI,CAAC;YACvBO,SAAS;YACTY,MAAM;gBACJkB,UAAUxC;gBACV8B,gBAAgB;gBAChBlB,QAAQmB,WAAWnB,MAAM;YAC3B;YACAwC,SAAS;QACX;IAEF,EAAE,OAAOzC,OAAO;QACdE,cAAM,CAACC,GAAG,CAACC,gBAAQ,CAACsB,KAAK,EAAEpB,mBAAW,CAACC,GAAG,EAAE,0CAA0C;YACpFlB,SAASD,OAAOE,EAAE;YAClBU;QACF;QAEA,OAAOF,oBAAY,CAACN,IAAI,CACtB;YAAEO,SAAS;YAAOC,OAAO;QAA6B,GACtD;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "979d9005faf4a1fbdc873e77bfdbf8941c38cde2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ckvpbnaai = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ckvpbnaai();
cov_1ckvpbnaai().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ckvpbnaai().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ckvpbnaai().f[0]++;
    cov_1ckvpbnaai().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ckvpbnaai().s[3]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_1ckvpbnaai().s[4]++, require("../../../../../../auth"));
const _server1 =
/* istanbul ignore next */
(cov_1ckvpbnaai().s[5]++, require("../../../../../../lib/integrations/supabase/server"));
const _logger =
/* istanbul ignore next */
(cov_1ckvpbnaai().s[6]++, require("../../../../../../lib/enterprise/logger"));
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1ckvpbnaai().f[1]++;
  cov_1ckvpbnaai().s[7]++;
  try {
    const orderId =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[8]++, params.id);
    const body =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[9]++, await request.json());
    const {
      payment_method =
      /* istanbul ignore next */
      (cov_1ckvpbnaai().b[0][0]++, 'manual'),
      notes =
      /* istanbul ignore next */
      (cov_1ckvpbnaai().b[1][0]++, '')
    } =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[10]++, body);
    // Verificar autenticación
    const session =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[11]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[12]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1ckvpbnaai().b[2][0]++;
      cov_1ckvpbnaai().s[13]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ckvpbnaai().b[2][1]++;
    }
    cov_1ckvpbnaai().s[14]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Marking order as paid manually', {
      orderId,
      userId: session.user.id,
      payment_method
    });
    // Obtener datos actuales de la orden
    const supabase =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[15]++, (0, _server1.createAdminClient)());
    const {
      data: order,
      error: orderError
    } =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[16]++, await supabase.from('orders').select('id, status, payment_status, total').eq('id', orderId).single());
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_1ckvpbnaai().b[4][0]++, orderError) ||
    /* istanbul ignore next */
    (cov_1ckvpbnaai().b[4][1]++, !order)) {
      /* istanbul ignore next */
      cov_1ckvpbnaai().b[3][0]++;
      cov_1ckvpbnaai().s[18]++;
      _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.API, 'Order not found', {
        orderId,
        orderError
      });
      /* istanbul ignore next */
      cov_1ckvpbnaai().s[19]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Orden no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ckvpbnaai().b[3][1]++;
    }
    // Verificar que la orden esté pendiente de pago
    cov_1ckvpbnaai().s[20]++;
    if (order.payment_status === 'paid') {
      /* istanbul ignore next */
      cov_1ckvpbnaai().b[5][0]++;
      cov_1ckvpbnaai().s[21]++;
      return _server.NextResponse.json({
        success: false,
        error: 'La orden ya está marcada como pagada'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ckvpbnaai().b[5][1]++;
    }
    // Actualizar estado de pago y orden
    const updateData =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[22]++, {
      payment_status: 'paid',
      status: order.status === 'pending' ?
      /* istanbul ignore next */
      (cov_1ckvpbnaai().b[6][0]++, 'confirmed') :
      /* istanbul ignore next */
      (cov_1ckvpbnaai().b[6][1]++, order.status),
      updated_at: new Date().toISOString()
    });
    const {
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_1ckvpbnaai().s[23]++, await supabase.from('orders').update(updateData).eq('id', orderId));
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[24]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_1ckvpbnaai().b[7][0]++;
      cov_1ckvpbnaai().s[25]++;
      _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.DATABASE, 'Error updating order payment status', {
        orderId,
        updateError
      });
      /* istanbul ignore next */
      cov_1ckvpbnaai().s[26]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error al actualizar estado de pago'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ckvpbnaai().b[7][1]++;
    }
    // Registrar en historial de estados si cambió el status
    cov_1ckvpbnaai().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_1ckvpbnaai().b[9][0]++, order.status === 'pending') &&
    /* istanbul ignore next */
    (cov_1ckvpbnaai().b[9][1]++, updateData.status === 'confirmed')) {
      /* istanbul ignore next */
      cov_1ckvpbnaai().b[8][0]++;
      cov_1ckvpbnaai().s[28]++;
      try {
        /* istanbul ignore next */
        cov_1ckvpbnaai().s[29]++;
        await supabase.from('order_status_history').insert({
          order_id: orderId,
          previous_status: 'pending',
          new_status: 'confirmed',
          changed_by: session.user.id,
          reason: `Pago confirmado manualmente por administrador (${payment_method})`,
          metadata: JSON.stringify({
            payment_method,
            notes,
            manual_confirmation: true
          })
        });
      } catch (historyError) {
        /* istanbul ignore next */
        cov_1ckvpbnaai().s[30]++;
        // Si la tabla no existe, continuar sin registrar historial
        _logger.logger.log(_logger.LogLevel.WARN, _logger.LogCategory.DATABASE, 'Could not register status history', {
          historyError
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ckvpbnaai().b[8][1]++;
    }
    // TODO: Aquí se podrían agregar acciones adicionales como:
    // - Enviar email de confirmación al cliente
    // - Actualizar inventario
    // - Crear notificaciones
    cov_1ckvpbnaai().s[31]++;
    _logger.logger.log(_logger.LogLevel.INFO, _logger.LogCategory.API, 'Order marked as paid successfully', {
      orderId,
      previousStatus: order.status,
      newStatus: updateData.status,
      payment_method
    });
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[32]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        order_id: orderId,
        payment_status: 'paid',
        status: updateData.status
      },
      message: 'Orden marcada como pagada exitosamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[33]++;
    _logger.logger.log(_logger.LogLevel.ERROR, _logger.LogCategory.API, 'Unexpected error marking order as paid', {
      orderId: params.id,
      error
    });
    /* istanbul ignore next */
    cov_1ckvpbnaai().s[34]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,