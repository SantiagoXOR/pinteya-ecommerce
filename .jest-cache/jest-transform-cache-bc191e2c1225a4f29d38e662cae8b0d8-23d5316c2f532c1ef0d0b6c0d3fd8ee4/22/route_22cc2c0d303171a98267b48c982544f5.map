{"version":3,"names":["cov_2om3073nwv","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","message","BulkPromotionActionSchema","_zod","z","object","action","enum","promotion_ids","array","string","uuid","min","max","extend_days","number","int","optional","priority","force","boolean","default","BulkPromotionUpdateSchema","updates","is_active","is_paused","starts_at","ends_at","usage_limit","usage_limit_per_user","show_on_product_page","show_on_category_page","show_on_homepage","customer_groups","first_time_customers_only","BulkPromotionExportSchema","filters","status","type","date_from","date_to","created_by","format","include_stats","validateAdminAuth","session","_config","auth","user","b","error","data","profile","from","select","eq","id","single","includes","role","userId","getPromotionsForBulkOperation","promotionIds","promotions","in","Error","executeBulkAction","options","results","summary","existingPromotions","existingIds","Set","map","p","promotionId","has","push","promotion_id","success","promotion","find","updateData","actionResult","activated","deactivated","paused","resumed","activeUsage","limit","length","deleted","Promise","all","delete","deleteError","fullPromotion","fetchError","duplicateData","name","coupon_code","Date","now","undefined","usage_count","created_at","toISOString","updated_at","newPromotion","createError","insert","duplicated","newEndDate","setDate","getDate","extended","updated","Object","keys","updatedPromotion","updateError","update","logAuditAction","bulk_operation","successful","filter","r","failed","total_requested","executeBulkUpdate","startsAt","endsAt","exportPromotions","includeStats","query","gte","lte","order","ascending","exportData","exportItem","description","discount_percentage","discount_amount","minimum_order_amount","creator_name","creator","full_name","stats","getPromotionUsageStats","total_usage","unique_users","total_discount_given","conversion_rate","timestamp","split","filename","usage","totalUsage","uniqueUsers","u","user_id","size","totalDiscountGiven","reduce","sum","orderIds","order_id","conversionRate","details","table_name","record_id","changes","_logger","logger","log","LogLevel","WARN","LogCategory","AUDIT","request","startTime","rateLimitResult","_ratelimiter","checkRateLimit","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","body","operation","result","actionData","parse","exportResult","total_records","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","nextResponse","ERROR","API","searchParams","URL","url","get","total_selected","found","not_found","by_status","active","inactive","scheduled","expired","by_type","has_usage","can_delete"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\promotions\\bulk\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { checkRateLimit, addRateLimitHeaders } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nconst RATE_LIMIT_CONFIGS = {\r\n  admin: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    maxRequests: 20, // Más restrictivo para operaciones masivas\r\n    message: 'Demasiadas operaciones masivas de promociones'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// ===================================\r\nconst BulkPromotionActionSchema = z.object({\r\n  action: z.enum(['activate', 'deactivate', 'pause', 'resume', 'delete', 'duplicate', 'extend', 'update_priority']),\r\n  promotion_ids: z.array(z.string().uuid()).min(1, 'Debe seleccionar al menos una promoción').max(50, 'Máximo 50 promociones por operación'),\r\n  \r\n  // Para extend\r\n  extend_days: z.number().int().min(1).max(365).optional(),\r\n  \r\n  // Para update_priority\r\n  priority: z.number().int().min(1).max(100).optional(),\r\n  \r\n  // Para operaciones condicionales\r\n  force: z.boolean().default(false)\r\n});\r\n\r\nconst BulkPromotionUpdateSchema = z.object({\r\n  promotion_ids: z.array(z.string().uuid()).min(1).max(50),\r\n  updates: z.object({\r\n    // Configuración general\r\n    is_active: z.boolean().optional(),\r\n    is_paused: z.boolean().optional(),\r\n    priority: z.number().int().min(1).max(100).optional(),\r\n    \r\n    // Fechas\r\n    starts_at: z.string().optional(),\r\n    ends_at: z.string().optional(),\r\n    \r\n    // Límites\r\n    usage_limit: z.number().int().min(1).optional(),\r\n    usage_limit_per_user: z.number().int().min(1).optional(),\r\n    \r\n    // Display\r\n    show_on_product_page: z.boolean().optional(),\r\n    show_on_category_page: z.boolean().optional(),\r\n    show_on_homepage: z.boolean().optional(),\r\n    \r\n    // Targeting\r\n    customer_groups: z.array(z.string()).optional(),\r\n    first_time_customers_only: z.boolean().optional()\r\n  })\r\n});\r\n\r\nconst BulkPromotionExportSchema = z.object({\r\n  promotion_ids: z.array(z.string().uuid()).optional(),\r\n  filters: z.object({\r\n    status: z.enum(['active', 'inactive', 'scheduled', 'expired', 'paused']).optional(),\r\n    type: z.enum(['percentage_discount', 'fixed_discount', 'buy_x_get_y', 'free_shipping', 'bundle_deal']).optional(),\r\n    date_from: z.string().optional(),\r\n    date_to: z.string().optional(),\r\n    created_by: z.string().uuid().optional()\r\n  }).optional(),\r\n  format: z.enum(['csv', 'xlsx', 'json']).default('csv'),\r\n  include_stats: z.boolean().default(false)\r\n});\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface BulkOperationResult {\r\n  total_requested: number;\r\n  successful: number;\r\n  failed: number;\r\n  results: Array<{\r\n    promotion_id: string;\r\n    success: boolean;\r\n    error?: string;\r\n    data?: any;\r\n  }>;\r\n  summary?: {\r\n    activated?: number;\r\n    deactivated?: number;\r\n    paused?: number;\r\n    resumed?: number;\r\n    deleted?: number;\r\n    duplicated?: number;\r\n    extended?: number;\r\n    updated?: number;\r\n  };\r\n}\r\n\r\ninterface PromotionExportData {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  type: string;\r\n  priority: number;\r\n  discount_percentage?: number;\r\n  discount_amount?: number;\r\n  minimum_order_amount?: number;\r\n  usage_limit?: number;\r\n  usage_count: number;\r\n  starts_at: string;\r\n  ends_at?: string;\r\n  is_active: boolean;\r\n  is_paused?: boolean;\r\n  status: string;\r\n  created_at: string;\r\n  created_by: string;\r\n  creator_name?: string;\r\n  \r\n  // Estadísticas si se incluyen\r\n  total_usage?: number;\r\n  unique_users?: number;\r\n  total_discount_given?: number;\r\n  conversion_rate?: number;\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\nasync function validateAdminAuth() {\r\n  const session = await auth();\r\n  \r\n  if (!session?.user) {\r\n    return { error: 'No autorizado', status: 401 };\r\n  }\r\n\r\n  // Verificar rol de administrador o manager\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', session.user.id)\r\n    .single();\r\n\r\n  if (!['admin', 'manager'].includes(profile?.role)) {\r\n    return { error: 'Acceso denegado', status: 403 };\r\n  }\r\n\r\n  return { userId: session.user.id, role: profile.role };\r\n}\r\n\r\nasync function getPromotionsForBulkOperation(promotionIds: string[]) {\r\n  const { data: promotions, error } = await supabase\r\n    .from('promotions')\r\n    .select(`\r\n      id,\r\n      name,\r\n      type,\r\n      is_active,\r\n      is_paused,\r\n      starts_at,\r\n      ends_at,\r\n      usage_count,\r\n      usage_limit,\r\n      priority\r\n    `)\r\n    .in('id', promotionIds);\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener promociones: ${error.message}`);\r\n  }\r\n\r\n  return promotions || [];\r\n}\r\n\r\nasync function executeBulkAction(\r\n  action: string,\r\n  promotionIds: string[],\r\n  userId: string,\r\n  options: any = {}\r\n): Promise<BulkOperationResult> {\r\n  const results: BulkOperationResult['results'] = [];\r\n  const summary: BulkOperationResult['summary'] = {};\r\n\r\n  // Obtener promociones existentes\r\n  const existingPromotions = await getPromotionsForBulkOperation(promotionIds);\r\n  const existingIds = new Set(existingPromotions.map(p => p.id));\r\n\r\n  for (const promotionId of promotionIds) {\r\n    try {\r\n      if (!existingIds.has(promotionId)) {\r\n        results.push({\r\n          promotion_id: promotionId,\r\n          success: false,\r\n          error: 'Promoción no encontrada'\r\n        });\r\n        continue;\r\n      }\r\n\r\n      const promotion = existingPromotions.find(p => p.id === promotionId)!;\r\n      let updateData: any = {};\r\n      let actionResult: any = null;\r\n\r\n      switch (action) {\r\n        case 'activate':\r\n          if (promotion.is_active && !promotion.is_paused) {\r\n            results.push({\r\n              promotion_id: promotionId,\r\n              success: false,\r\n              error: 'La promoción ya está activa'\r\n            });\r\n            continue;\r\n          }\r\n          updateData = { is_active: true, is_paused: false };\r\n          summary.activated = (summary.activated || 0) + 1;\r\n          break;\r\n\r\n        case 'deactivate':\r\n          if (!promotion.is_active) {\r\n            results.push({\r\n              promotion_id: promotionId,\r\n              success: false,\r\n              error: 'La promoción ya está inactiva'\r\n            });\r\n            continue;\r\n          }\r\n          updateData = { is_active: false };\r\n          summary.deactivated = (summary.deactivated || 0) + 1;\r\n          break;\r\n\r\n        case 'pause':\r\n          if (!promotion.is_active || promotion.is_paused) {\r\n            results.push({\r\n              promotion_id: promotionId,\r\n              success: false,\r\n              error: 'La promoción no se puede pausar'\r\n            });\r\n            continue;\r\n          }\r\n          updateData = { is_paused: true };\r\n          summary.paused = (summary.paused || 0) + 1;\r\n          break;\r\n\r\n        case 'resume':\r\n          if (!promotion.is_paused) {\r\n            results.push({\r\n              promotion_id: promotionId,\r\n              success: false,\r\n              error: 'La promoción no está pausada'\r\n            });\r\n            continue;\r\n          }\r\n          updateData = { is_paused: false };\r\n          summary.resumed = (summary.resumed || 0) + 1;\r\n          break;\r\n\r\n        case 'delete':\r\n          // Verificar si tiene uso activo\r\n          const { data: activeUsage } = await supabase\r\n            .from('promotion_usage')\r\n            .select('id')\r\n            .eq('promotion_id', promotionId)\r\n            .limit(1);\r\n\r\n          if (activeUsage && activeUsage.length > 0 && !options.force) {\r\n            // Desactivar en lugar de eliminar\r\n            updateData = { is_active: false };\r\n            actionResult = { deleted: false, deactivated: true };\r\n          } else {\r\n            // Eliminar relaciones primero\r\n            await Promise.all([\r\n              supabase.from('promotion_categories').delete().eq('promotion_id', promotionId),\r\n              supabase.from('promotion_products').delete().eq('promotion_id', promotionId),\r\n              supabase.from('promotion_brands').delete().eq('promotion_id', promotionId),\r\n              supabase.from('promotion_bundle_products').delete().eq('promotion_id', promotionId)\r\n            ]);\r\n\r\n            // Eliminar promoción\r\n            const { error: deleteError } = await supabase\r\n              .from('promotions')\r\n              .delete()\r\n              .eq('id', promotionId);\r\n\r\n            if (deleteError) {\r\n              throw new Error(`Error al eliminar: ${deleteError.message}`);\r\n            }\r\n\r\n            actionResult = { deleted: true, deactivated: false };\r\n            summary.deleted = (summary.deleted || 0) + 1;\r\n          }\r\n          break;\r\n\r\n        case 'duplicate':\r\n          // Obtener promoción completa\r\n          const { data: fullPromotion, error: fetchError } = await supabase\r\n            .from('promotions')\r\n            .select('*')\r\n            .eq('id', promotionId)\r\n            .single();\r\n\r\n          if (fetchError) {\r\n            throw new Error(`Error al obtener promoción: ${fetchError.message}`);\r\n          }\r\n\r\n          // Crear duplicado\r\n          const duplicateData = {\r\n            ...fullPromotion,\r\n            name: `${fullPromotion.name} (Copia)`,\r\n            coupon_code: fullPromotion.coupon_code ? `${fullPromotion.coupon_code}_COPY_${Date.now()}` : undefined,\r\n            is_active: false,\r\n            usage_count: 0,\r\n            created_by: userId,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          };\r\n\r\n          delete duplicateData.id;\r\n\r\n          const { data: newPromotion, error: createError } = await supabase\r\n            .from('promotions')\r\n            .insert(duplicateData)\r\n            .select()\r\n            .single();\r\n\r\n          if (createError) {\r\n            throw new Error(`Error al duplicar: ${createError.message}`);\r\n          }\r\n\r\n          actionResult = newPromotion;\r\n          summary.duplicated = (summary.duplicated || 0) + 1;\r\n          break;\r\n\r\n        case 'extend':\r\n          if (!options.extend_days) {\r\n            throw new Error('Días de extensión requeridos');\r\n          }\r\n\r\n          if (!promotion.ends_at) {\r\n            throw new Error('La promoción no tiene fecha de finalización');\r\n          }\r\n\r\n          const newEndDate = new Date(promotion.ends_at);\r\n          newEndDate.setDate(newEndDate.getDate() + options.extend_days);\r\n\r\n          updateData = { ends_at: newEndDate.toISOString() };\r\n          summary.extended = (summary.extended || 0) + 1;\r\n          break;\r\n\r\n        case 'update_priority':\r\n          if (!options.priority) {\r\n            throw new Error('Prioridad requerida');\r\n          }\r\n          updateData = { priority: options.priority };\r\n          summary.updated = (summary.updated || 0) + 1;\r\n          break;\r\n\r\n        default:\r\n          throw new Error('Acción no válida');\r\n      }\r\n\r\n      // Ejecutar actualización si hay datos para actualizar\r\n      if (Object.keys(updateData).length > 0) {\r\n        updateData.updated_at = new Date().toISOString();\r\n\r\n        const { data: updatedPromotion, error: updateError } = await supabase\r\n          .from('promotions')\r\n          .update(updateData)\r\n          .eq('id', promotionId)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          throw new Error(`Error al actualizar: ${updateError.message}`);\r\n        }\r\n\r\n        actionResult = updatedPromotion;\r\n      }\r\n\r\n      results.push({\r\n        promotion_id: promotionId,\r\n        success: true,\r\n        data: actionResult\r\n      });\r\n\r\n      // Registrar auditoría\r\n      await logAuditAction(action, promotionId, userId, { bulk_operation: true, ...options });\r\n\r\n    } catch (error) {\r\n      results.push({\r\n        promotion_id: promotionId,\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Error desconocido'\r\n      });\r\n    }\r\n  }\r\n\r\n  const successful = results.filter(r => r.success).length;\r\n  const failed = results.filter(r => !r.success).length;\r\n\r\n  return {\r\n    total_requested: promotionIds.length,\r\n    successful,\r\n    failed,\r\n    results,\r\n    summary\r\n  };\r\n}\r\n\r\nasync function executeBulkUpdate(\r\n  promotionIds: string[],\r\n  updates: any,\r\n  userId: string\r\n): Promise<BulkOperationResult> {\r\n  const results: BulkOperationResult['results'] = [];\r\n\r\n  // Validar fechas si se proporcionan\r\n  if (updates.starts_at && updates.ends_at) {\r\n    const startsAt = new Date(updates.starts_at);\r\n    const endsAt = new Date(updates.ends_at);\r\n    \r\n    if (startsAt >= endsAt) {\r\n      throw new Error('La fecha de inicio debe ser anterior a la fecha de finalización');\r\n    }\r\n  }\r\n\r\n  // Obtener promociones existentes\r\n  const existingPromotions = await getPromotionsForBulkOperation(promotionIds);\r\n  const existingIds = new Set(existingPromotions.map(p => p.id));\r\n\r\n  for (const promotionId of promotionIds) {\r\n    try {\r\n      if (!existingIds.has(promotionId)) {\r\n        results.push({\r\n          promotion_id: promotionId,\r\n          success: false,\r\n          error: 'Promoción no encontrada'\r\n        });\r\n        continue;\r\n      }\r\n\r\n      const updateData = {\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { data: updatedPromotion, error: updateError } = await supabase\r\n        .from('promotions')\r\n        .update(updateData)\r\n        .eq('id', promotionId)\r\n        .select()\r\n        .single();\r\n\r\n      if (updateError) {\r\n        throw new Error(`Error al actualizar: ${updateError.message}`);\r\n      }\r\n\r\n      results.push({\r\n        promotion_id: promotionId,\r\n        success: true,\r\n        data: updatedPromotion\r\n      });\r\n\r\n      // Registrar auditoría\r\n      await logAuditAction('bulk_update', promotionId, userId, { updates });\r\n\r\n    } catch (error) {\r\n      results.push({\r\n        promotion_id: promotionId,\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Error desconocido'\r\n      });\r\n    }\r\n  }\r\n\r\n  const successful = results.filter(r => r.success).length;\r\n  const failed = results.filter(r => !r.success).length;\r\n\r\n  return {\r\n    total_requested: promotionIds.length,\r\n    successful,\r\n    failed,\r\n    results,\r\n    summary: {\r\n      updated: successful\r\n    }\r\n  };\r\n}\r\n\r\nasync function exportPromotions(\r\n  promotionIds?: string[],\r\n  filters?: any,\r\n  format: 'csv' | 'xlsx' | 'json' = 'csv',\r\n  includeStats = false\r\n): Promise<{ data: PromotionExportData[]; filename: string }> {\r\n  let query = supabase\r\n    .from('promotions')\r\n    .select(`\r\n      id,\r\n      name,\r\n      description,\r\n      type,\r\n      priority,\r\n      discount_percentage,\r\n      discount_amount,\r\n      minimum_order_amount,\r\n      usage_limit,\r\n      usage_count,\r\n      starts_at,\r\n      ends_at,\r\n      is_active,\r\n      is_paused,\r\n      created_at,\r\n      created_by,\r\n      creator:profiles!promotions_created_by_fkey(\r\n        full_name\r\n      )\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (promotionIds && promotionIds.length > 0) {\r\n    query = query.in('id', promotionIds);\r\n  }\r\n\r\n  if (filters) {\r\n    if (filters.type) {\r\n      query = query.eq('type', filters.type);\r\n    }\r\n    if (filters.date_from) {\r\n      query = query.gte('created_at', filters.date_from);\r\n    }\r\n    if (filters.date_to) {\r\n      query = query.lte('created_at', filters.date_to);\r\n    }\r\n    if (filters.created_by) {\r\n      query = query.eq('created_by', filters.created_by);\r\n    }\r\n  }\r\n\r\n  const { data: promotions, error } = await query.order('created_at', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(`Error al exportar promociones: ${error.message}`);\r\n  }\r\n\r\n  // Procesar datos para exportación\r\n  const exportData: PromotionExportData[] = [];\r\n\r\n  for (const promotion of promotions || []) {\r\n    // Calcular estado\r\n    const now = new Date();\r\n    const startsAt = new Date(promotion.starts_at);\r\n    const endsAt = promotion.ends_at ? new Date(promotion.ends_at) : null;\r\n    \r\n    let status: string;\r\n    if (promotion.is_paused) {\r\n      status = 'paused';\r\n    } else if (!promotion.is_active) {\r\n      status = 'inactive';\r\n    } else if (now < startsAt) {\r\n      status = 'scheduled';\r\n    } else if (endsAt && now > endsAt) {\r\n      status = 'expired';\r\n    } else {\r\n      status = 'active';\r\n    }\r\n\r\n    const exportItem: PromotionExportData = {\r\n      id: promotion.id,\r\n      name: promotion.name,\r\n      description: promotion.description,\r\n      type: promotion.type,\r\n      priority: promotion.priority,\r\n      discount_percentage: promotion.discount_percentage,\r\n      discount_amount: promotion.discount_amount,\r\n      minimum_order_amount: promotion.minimum_order_amount,\r\n      usage_limit: promotion.usage_limit,\r\n      usage_count: promotion.usage_count,\r\n      starts_at: promotion.starts_at,\r\n      ends_at: promotion.ends_at,\r\n      is_active: promotion.is_active,\r\n      is_paused: promotion.is_paused,\r\n      status,\r\n      created_at: promotion.created_at,\r\n      created_by: promotion.created_by,\r\n      creator_name: promotion.creator?.full_name\r\n    };\r\n\r\n    // Incluir estadísticas si se solicita\r\n    if (includeStats) {\r\n      try {\r\n        const stats = await getPromotionUsageStats(promotion.id);\r\n        exportItem.total_usage = stats.total_usage;\r\n        exportItem.unique_users = stats.unique_users;\r\n        exportItem.total_discount_given = stats.total_discount_given;\r\n        exportItem.conversion_rate = stats.conversion_rate;\r\n      } catch (error) {\r\n        // Continuar sin estadísticas si hay error\r\n      }\r\n    }\r\n\r\n    exportData.push(exportItem);\r\n  }\r\n\r\n  // Generar nombre de archivo\r\n  const timestamp = new Date().toISOString().split('T')[0];\r\n  const filename = `promotions_export_${timestamp}.${format}`;\r\n\r\n  return { data: exportData, filename };\r\n}\r\n\r\nasync function getPromotionUsageStats(promotionId: string) {\r\n  const { data: usage, error } = await supabase\r\n    .from('promotion_usage')\r\n    .select('*')\r\n    .eq('promotion_id', promotionId);\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener estadísticas: ${error.message}`);\r\n  }\r\n\r\n  const totalUsage = usage?.length || 0;\r\n  const uniqueUsers = new Set(usage?.map(u => u.user_id) || []).size;\r\n  const totalDiscountGiven = (usage || []).reduce((sum, u) => sum + (u.discount_amount || 0), 0);\r\n  \r\n  // Calcular tasa de conversión simplificada\r\n  const orderIds = [...new Set(usage?.map(u => u.order_id) || [])];\r\n  const conversionRate = uniqueUsers > 0 ? (orderIds.length / uniqueUsers) * 100 : 0;\r\n\r\n  return {\r\n    total_usage: totalUsage,\r\n    unique_users: uniqueUsers,\r\n    total_discount_given: totalDiscountGiven,\r\n    conversion_rate: conversionRate\r\n  };\r\n}\r\n\r\nasync function logAuditAction(action: string, promotionId: string, userId: string, details?: any) {\r\n  try {\r\n    await supabase.from('audit_logs').insert({\r\n      table_name: 'promotions',\r\n      record_id: promotionId,\r\n      action,\r\n      user_id: userId,\r\n      changes: details,\r\n      created_at: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    logger.log(LogLevel.WARN, LogCategory.AUDIT, 'Error al registrar auditoría', { error });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Operaciones masivas\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message\r\n      },\r\n      'admin-promotions-bulk'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { operation } = body;\r\n\r\n    let result: any;\r\n\r\n    switch (operation) {\r\n      case 'action': {\r\n        const actionData = BulkPromotionActionSchema.parse(body);\r\n        result = await executeBulkAction(\r\n          actionData.action,\r\n          actionData.promotion_ids,\r\n          authResult.userId!,\r\n          {\r\n            extend_days: actionData.extend_days,\r\n            priority: actionData.priority,\r\n            force: actionData.force\r\n          }\r\n        );\r\n        break;\r\n      }\r\n\r\n      case 'update': {\r\n        const updateData = BulkPromotionUpdateSchema.parse(body);\r\n        result = await executeBulkUpdate(\r\n          updateData.promotion_ids,\r\n          updateData.updates,\r\n          authResult.userId!\r\n        );\r\n        break;\r\n      }\r\n\r\n      case 'export': {\r\n        const exportData = BulkPromotionExportSchema.parse(body);\r\n        const exportResult = await exportPromotions(\r\n          exportData.promotion_ids,\r\n          exportData.filters,\r\n          exportData.format,\r\n          exportData.include_stats\r\n        );\r\n        \r\n        result = {\r\n          filename: exportResult.filename,\r\n          total_records: exportResult.data.length,\r\n          data: exportResult.data\r\n        };\r\n        break;\r\n      }\r\n\r\n      default:\r\n        throw new Error('Operación no válida');\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/promotions/bulk',\r\n      method: 'POST',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<typeof result> = {\r\n      data: result,\r\n      success: true,\r\n      message: `Operación '${operation}' ejecutada exitosamente`\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/promotions/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/promotions/bulk',\r\n      method: 'POST',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener información para operaciones masivas\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests * 2,\r\n        message: 'Demasiadas consultas de información masiva'\r\n      },\r\n      'admin-promotions-bulk-info'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const promotionIds = searchParams.get('promotion_ids')?.split(',') || [];\r\n\r\n    if (promotionIds.length === 0) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'IDs de promociones requeridos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Obtener información de las promociones\r\n    const promotions = await getPromotionsForBulkOperation(promotionIds);\r\n    \r\n    // Calcular estadísticas para operaciones masivas\r\n    const stats = {\r\n      total_selected: promotionIds.length,\r\n      found: promotions.length,\r\n      not_found: promotionIds.length - promotions.length,\r\n      by_status: {\r\n        active: 0,\r\n        inactive: 0,\r\n        paused: 0,\r\n        scheduled: 0,\r\n        expired: 0\r\n      },\r\n      by_type: {} as Record<string, number>,\r\n      has_usage: 0,\r\n      can_delete: 0\r\n    };\r\n\r\n    const now = new Date();\r\n    \r\n    for (const promotion of promotions) {\r\n      // Calcular estado\r\n      const startsAt = new Date(promotion.starts_at);\r\n      const endsAt = promotion.ends_at ? new Date(promotion.ends_at) : null;\r\n      \r\n      let status: string;\r\n      if (promotion.is_paused) {\r\n        status = 'paused';\r\n      } else if (!promotion.is_active) {\r\n        status = 'inactive';\r\n      } else if (now < startsAt) {\r\n        status = 'scheduled';\r\n      } else if (endsAt && now > endsAt) {\r\n        status = 'expired';\r\n      } else {\r\n        status = 'active';\r\n      }\r\n\r\n      stats.by_status[status as keyof typeof stats.by_status]++;\r\n      stats.by_type[promotion.type] = (stats.by_type[promotion.type] || 0) + 1;\r\n      \r\n      if (promotion.usage_count > 0) {\r\n        stats.has_usage++;\r\n      } else {\r\n        stats.can_delete++;\r\n      }\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/promotions/bulk',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<{ promotions: typeof promotions; stats: typeof stats }> = {\r\n      data: {\r\n        promotions,\r\n        stats\r\n      },\r\n      success: true,\r\n      message: 'Información de operaciones masivas obtenida exitosamente'\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/promotions/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/promotions/bulk',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}