769bbf347a94943414f8d39d5235c6e5
// ===================================
// TESTS DE INTEGRACIÓN - FLUJO DE CHECKOUT
// Tests completos del proceso de compra
// ===================================
"use strict";
// Mocks
jest.mock('@/lib/supabase', ()=>({
        supabase: {
            auth: {
                getUser: jest.fn(),
                signInWithPassword: jest.fn()
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn(),
                                    order: jest.fn(()=>({
                                            limit: jest.fn()
                                        }))
                                })),
                            insert: jest.fn(),
                            update: jest.fn(()=>({
                                    eq: jest.fn()
                                }))
                        }))
                }))
        }
    }));
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
// Mock MercadoPago
jest.mock('@/lib/mercadopago', ()=>({
        createPreference: jest.fn(),
        processPayment: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactquery = require("@tanstack/react-query");
const _page = require("../../app/checkout/page");
const _CartContext = require("../../contexts/CartContext");
const _AuthContext = require("../../contexts/AuthContext");
const _supabase = require("../../lib/integrations/supabase");
const _sonner = require("sonner");
const _navigation = require("next/navigation");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    refresh: jest.fn()
};
// Mock localStorage
const localStorageMock = (()=>{
    let store = {};
    return {
        getItem: (key)=>store[key] || null,
        setItem: (key, value)=>{
            store[key] = value;
        },
        removeItem: (key)=>{
            delete store[key];
        },
        clear: ()=>{
            store = {};
        }
    };
})();
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Datos de prueba
const mockUser = {
    id: 'user-123',
    email: 'test@example.com',
    user_metadata: {
        full_name: 'Test User'
    }
};
const mockCartItems = [
    {
        id: 1,
        name: 'Producto Test 1',
        price: 100,
        quantity: 2,
        image: 'https://example.com/image1.jpg',
        stock: 10
    },
    {
        id: 2,
        name: 'Producto Test 2',
        price: 50,
        quantity: 1,
        image: 'https://example.com/image2.jpg',
        stock: 5
    }
];
const mockShippingAddress = {
    street: 'Av. Corrientes 1234',
    city: 'Buenos Aires',
    state: 'CABA',
    postal_code: '1043',
    country: 'Argentina'
};
// Wrapper de providers
const createWrapper = (initialCartItems = mockCartItems)=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
    // Configurar localStorage con items del carrito
    localStorageMock.setItem('cart-items', JSON.stringify(initialCartItems));
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CartContext.CartProvider, {
                    children: children
                })
            })
        });
};
describe('Flujo de Checkout - Integración', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        localStorageMock.clear();
        _navigation.useRouter.mockReturnValue(mockRouter);
    });
    describe('Inicialización del Checkout', ()=>{
        it('debe mostrar los productos del carrito correctamente', async ()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Verificar que se muestran los productos
            expect(_react.screen.getByText('Producto Test 1')).toBeInTheDocument();
            expect(_react.screen.getByText('Producto Test 2')).toBeInTheDocument();
            // Verificar cantidades
            expect(_react.screen.getByText('Cantidad: 2')).toBeInTheDocument();
            expect(_react.screen.getByText('Cantidad: 1')).toBeInTheDocument();
            // Verificar total
            expect(_react.screen.getByText('Total: $250')).toBeInTheDocument();
        });
        it('debe redirigir si el carrito está vacío', async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper([])
            });
            await (0, _react.waitFor)(()=>{
                expect(mockRouter.push).toHaveBeenCalledWith('/cart');
            });
            expect(_sonner.toast.error).toHaveBeenCalledWith('Tu carrito está vacío. Agrega productos antes de continuar.');
        });
        it('debe mostrar formulario de login si no está autenticado', async ()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            expect(_react.screen.getByText('Iniciar Sesión')).toBeInTheDocument();
            expect(_react.screen.getByLabelText('Email')).toBeInTheDocument();
            expect(_react.screen.getByLabelText('Contraseña')).toBeInTheDocument();
        });
    });
    describe('Autenticación en Checkout', ()=>{
        it('debe permitir login durante el checkout', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            _supabase.supabase.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Llenar formulario de login
            await user.type(_react.screen.getByLabelText('Email'), 'test@example.com');
            await user.type(_react.screen.getByLabelText('Contraseña'), 'password123');
            // Hacer click en login
            await user.click(_react.screen.getByRole('button', {
                name: /iniciar sesión/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_supabase.supabase.auth.signInWithPassword).toHaveBeenCalledWith({
                    email: 'test@example.com',
                    password: 'password123'
                });
            });
            // Debe mostrar el formulario de checkout después del login
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Información de Envío')).toBeInTheDocument();
            });
        });
        it('debe manejar errores de login', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            _supabase.supabase.auth.signInWithPassword.mockResolvedValue({
                data: null,
                error: {
                    message: 'Invalid credentials'
                }
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await user.type(_react.screen.getByLabelText('Email'), 'test@example.com');
            await user.type(_react.screen.getByLabelText('Contraseña'), 'wrongpassword');
            await user.click(_react.screen.getByRole('button', {
                name: /iniciar sesión/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_sonner.toast.error).toHaveBeenCalledWith('Credenciales inválidas');
            });
        });
    });
    describe('Formulario de Información de Envío', ()=>{
        beforeEach(()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
        });
        it('debe validar campos requeridos', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Intentar continuar sin llenar campos
            const continueButton = _react.screen.getByRole('button', {
                name: /continuar/i
            });
            await user.click(continueButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('La dirección es requerida')).toBeInTheDocument();
                expect(_react.screen.getByText('La ciudad es requerida')).toBeInTheDocument();
                expect(_react.screen.getByText('El código postal es requerido')).toBeInTheDocument();
            });
        });
        it('debe llenar y validar el formulario correctamente', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Llenar formulario de envío
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            // Seleccionar país
            const countrySelect = _react.screen.getByLabelText('País');
            await user.selectOptions(countrySelect, mockShippingAddress.country);
            // Continuar al siguiente paso
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Método de Pago')).toBeInTheDocument();
            });
        });
        it('debe validar formato de código postal', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await user.type(_react.screen.getByLabelText('Código Postal'), 'invalid');
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Formato de código postal inválido')).toBeInTheDocument();
            });
        });
    });
    describe('Selección de Método de Pago', ()=>{
        beforeEach(async ()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
        });
        const fillShippingForm = async (user)=>{
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            await user.selectOptions(_react.screen.getByLabelText('País'), mockShippingAddress.country);
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
        };
        it('debe mostrar opciones de pago disponibles', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await fillShippingForm(user);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('MercadoPago')).toBeInTheDocument();
                expect(_react.screen.getByText('Transferencia Bancaria')).toBeInTheDocument();
                expect(_react.screen.getByText('Efectivo')).toBeInTheDocument();
            });
        });
        it('debe seleccionar método de pago', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await fillShippingForm(user);
            // Seleccionar MercadoPago
            const mercadopagoOption = _react.screen.getByLabelText('MercadoPago');
            await user.click(mercadopagoOption);
            expect(mercadopagoOption).toBeChecked();
            // Debe mostrar información adicional de MercadoPago
            expect(_react.screen.getByText('Paga con tarjeta de crédito, débito o efectivo')).toBeInTheDocument();
        });
        it('debe validar selección de método de pago', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await fillShippingForm(user);
            // Intentar continuar sin seleccionar método de pago
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Selecciona un método de pago')).toBeInTheDocument();
            });
        });
    });
    describe('Finalización de Compra', ()=>{
        beforeEach(()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
        });
        const completeCheckoutForm = async (user)=>{
            // Llenar información de envío
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            await user.selectOptions(_react.screen.getByLabelText('País'), mockShippingAddress.country);
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            // Seleccionar método de pago
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByLabelText('MercadoPago')).toBeInTheDocument();
            });
            await user.click(_react.screen.getByLabelText('MercadoPago'));
        };
        it('debe crear la orden exitosamente', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockResolvedValue({
                    data: [
                        {
                            id: 'order-123'
                        }
                    ],
                    error: null
                })
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await completeCheckoutForm(user);
            // Finalizar compra
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_supabase.supabase.from).toHaveBeenCalledWith('orders');
                expect(_sonner.toast.success).toHaveBeenCalledWith('¡Compra realizada exitosamente!');
                expect(mockRouter.push).toHaveBeenCalledWith('/orders/order-123');
            });
        });
        it('debe manejar errores al crear la orden', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockResolvedValue({
                    data: null,
                    error: {
                        message: 'Database error'
                    }
                })
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await completeCheckoutForm(user);
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_sonner.toast.error).toHaveBeenCalledWith('Error al procesar la compra. Intenta nuevamente.');
            });
        });
        it('debe validar stock antes de crear la orden', async ()=>{
            const user = _userevent.default.setup();
            // Mock de productos con stock insuficiente
            const itemsWithLowStock = [
                {
                    ...mockCartItems[0],
                    quantity: 15,
                    stock: 10
                }
            ];
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper(itemsWithLowStock)
            });
            await completeCheckoutForm(user);
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_sonner.toast.error).toHaveBeenCalledWith('Algunos productos no tienen stock suficiente');
            });
        });
        it('debe limpiar el carrito después de compra exitosa', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockResolvedValue({
                    data: [
                        {
                            id: 'order-123'
                        }
                    ],
                    error: null
                })
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            await completeCheckoutForm(user);
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                // Verificar que el localStorage se limpió
                const cartItems = JSON.parse(localStorageMock.getItem('cart-items') || '[]');
                expect(cartItems).toEqual([]);
            });
        });
    });
    describe('Integración con MercadoPago', ()=>{
        beforeEach(()=>{
            ;
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
        });
        it('debe crear preferencia de MercadoPago', async ()=>{
            const user = _userevent.default.setup();
            const { createPreference } = require('@/lib/mercadopago');
            createPreference.mockResolvedValue({
                id: 'preference-123',
                init_point: 'https://mercadopago.com/checkout/preference-123'
            });
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockResolvedValue({
                    data: [
                        {
                            id: 'order-123'
                        }
                    ],
                    error: null
                })
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Completar formulario
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            await user.selectOptions(_react.screen.getByLabelText('País'), mockShippingAddress.country);
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByLabelText('MercadoPago')).toBeInTheDocument();
            });
            await user.click(_react.screen.getByLabelText('MercadoPago'));
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(createPreference).toHaveBeenCalledWith({
                    items: expect.arrayContaining([
                        expect.objectContaining({
                            title: 'Producto Test 1',
                            unit_price: 100,
                            quantity: 2
                        })
                    ]),
                    payer: {
                        email: mockUser.email
                    },
                    external_reference: 'order-123'
                });
            });
        });
    });
    describe('Casos Edge y Errores', ()=>{
        it('debe manejar pérdida de conexión', async ()=>{
            const user = _userevent.default.setup();
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockRejectedValue(new Error('Network error'))
            });
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Completar formulario rápidamente
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            await user.selectOptions(_react.screen.getByLabelText('País'), mockShippingAddress.country);
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByLabelText('MercadoPago')).toBeInTheDocument();
            });
            await user.click(_react.screen.getByLabelText('MercadoPago'));
            await user.click(_react.screen.getByRole('button', {
                name: /finalizar compra/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_sonner.toast.error).toHaveBeenCalledWith('Error de conexión. Verifica tu internet e intenta nuevamente.');
            });
        });
        it('debe prevenir doble envío de formulario', async ()=>{
            const user = _userevent.default.setup();
            let resolveInsert;
            const insertPromise = new Promise((resolve)=>{
                resolveInsert = resolve;
            });
            _supabase.supabase.from.mockReturnValue({
                insert: jest.fn().mockReturnValue(insertPromise)
            });
            _supabase.supabase.auth.getUser.mockResolvedValue({
                data: {
                    user: mockUser
                },
                error: null
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.CheckoutPage, {}), {
                wrapper: createWrapper()
            });
            // Completar formulario
            await user.type(_react.screen.getByLabelText('Dirección'), mockShippingAddress.street);
            await user.type(_react.screen.getByLabelText('Ciudad'), mockShippingAddress.city);
            await user.type(_react.screen.getByLabelText('Provincia/Estado'), mockShippingAddress.state);
            await user.type(_react.screen.getByLabelText('Código Postal'), mockShippingAddress.postal_code);
            await user.selectOptions(_react.screen.getByLabelText('País'), mockShippingAddress.country);
            await user.click(_react.screen.getByRole('button', {
                name: /continuar/i
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByLabelText('MercadoPago')).toBeInTheDocument();
            });
            await user.click(_react.screen.getByLabelText('MercadoPago'));
            const submitButton = _react.screen.getByRole('button', {
                name: /finalizar compra/i
            });
            // Hacer doble click rápido
            await user.click(submitButton);
            await user.click(submitButton);
            // El botón debe estar deshabilitado después del primer click
            expect(submitButton).toBeDisabled();
            // Resolver la promesa
            resolveInsert({
                data: [
                    {
                        id: 'order-123'
                    }
                ],
                error: null
            });
            // Solo debe haberse llamado una vez
            await (0, _react.waitFor)(()=>{
                expect(_supabase.supabase.from().insert).toHaveBeenCalledTimes(1);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,