{"version":3,"names":["DEFAULT_SEO_CONFIG","cov_1quejj27n8","f","s","EnhancedSEOAnalyticsManager","enhancedSEOAnalyticsManager","seoAnalyticsManager","enableRealTimeTracking","enableKeywordTracking","enableCompetitorAnalysis","enableAutomatedReports","enableAlerts","metricsUpdateInterval","keywordUpdateInterval","competitorUpdateInterval","alertCheckInterval","reportSchedule","daily","enabled","time","recipients","weekly","day","monthly","alertThresholds","seoScoreDrop","rankingDrop","trafficDrop","performanceDrop","criticalIssuesIncrease","conversionRateDrop","integrations","googleSearchConsole","googleAnalytics","semrush","ahrefs","screaminFrog","cache","ttl","maxSize","dataRetention","metricsRetentionDays","alertsRetentionDays","reportsRetentionDays","constructor","config","metrics","keywords","alerts","reports","competitors","listeners","Map","metricsInterval","keywordInterval","competitorInterval","alertInterval","initializeRedis","startTracking","_logger","logger","info","LogLevel","INFO","realTimeTracking","keywordTracking","competitorAnalysis","automatedReports","LogCategory","SEO","getInstance","instance","b","redis","_redis","getRedisClient","error","warn","WARN","setInterval","collectAndProcessMetrics","updateKeywordRankings","updateCompetitorAnalysis","checkAlerts","coreWebVitals","collectCoreWebVitals","indexationStatus","analyzeIndexationStatus","technicalSEO","evaluateTechnicalSEO","performanceMetrics","_realtimeperformancemonitor","realTimePerformanceMonitor","getCurrentMetrics","trafficMetrics","collectTrafficMetrics","timestamp","Date","push","cacheMetrics","checkMetricsThresholds","notifyListeners","type","data","coreWebVitalsScore","score","indexationRate","organicTraffic","ERROR","Promise","resolve","webVitals","length","latest","lcp","fid","cls","fcp","ttfb","inp","Math","random","speedIndex","totalBlockingTime","largestContentfulPaintElement","cumulativeLayoutShiftSources","lcpScore","fidScore","clsScore","scores","every","some","baseTraffic","floor","pageViews","uniqueVisitors","bounceRate","avgSessionDuration","searchImpressions","searchClicks","avgPosition","ctr","conversionRate","revenueFromOrganic","topLandingPages","getTopLandingPages","topExitPages","getTopExitPages","deviceBreakdown","getDeviceBreakdown","geographicData","getGeographicData","pages","map","url","uniquePageViews","avgTimeOnPage","exitRate","conversions","revenue","desktop","sessions","mobile","tablet","locations","country","region","city","location","users","totalPages","indexedPages","notIndexedPages","Number","toFixed","crawlErrors","sitemapStatus","lastCrawlDate","now","mobileUsability","pagespeedScore","httpsUsage","structuredDataErrors","metaTagsOptimization","internalLinkingScore","imageOptimization","canonicalIssues","collectMetrics","analyzeKeywords","checkKeywordAlerts","totalKeywords","averagePosition","reduce","sum","k","position","sampleKeywords","keyword","intent","volume","all","previousPosition","clicks","impressions","searchVolume","difficulty","encodeURIComponent","trend","searchEngine","device","competitorRankings","getCompetitorRankings","relatedKeywords","getRelatedKeywords","seasonalTrends","getSeasonalTrends","costPerClick","lastUpdated","domain","title","description","relatedMap","Array","from","_","month","competition","cpc","analyzeCompetitors","competitorsAnalyzed","competitorDomains","organicKeywords","competitor","split","backlinks","domainAuthority","commonKeywords","getCommonKeywords","keywordGaps","getKeywordGaps","pageAuthority","trustFlow","citationFlow","referringDomains","organicCost","paidKeywords","paidTraffic","paidCost","topPages","getCompetitorTopPages","contentGaps","getContentGaps","backlinksGaps","getBacklinkGaps","socialMetrics","getSocialMetrics","technicalSEOScore","lastAnalyzed","pop","traffic","socialShares","topic","opportunity","linkType","anchorText","facebook","likes","shares","comments","twitter","followers","tweets","retweets","linkedin","posts","engagement","instagram","detectSEOIssues","criticalAlerts","filter","alert","_advancedalertingengine","advancedAlertingEngine","createAlert","AlertType","PERFORMANCE","AlertSeverity","CRITICAL","category","severity","recommendations","previousMetrics","getLastMetrics","drop","significantDrops","lostTopPositions","technicalIssues","detectTechnicalIssues","contentIssues","detectContentIssues","performanceIssues","detectPerformanceIssues","mobileIssues","detectMobileIssues","issues","technicalProblems","affectedPages","impact","effort","priority","estimatedTrafficImpact","estimatedRevenueImpact","problem","createAdvancedAlert","contentProblems","performanceProblems","mobileProblems","id","toString","substr","resolved","relatedAlerts","autoResolvable","resolutionSteps","lastOccurrence","frequency","tags","getRecommendationsForCategory","getResolutionSteps","technical","content","performance","schema","steps","step","action","estimatedTime","requiredSkills","generateSEOReport","period","customDateRange","endDate","startDate","setTime","start","getTime","end","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","report","generateRecommendations","executiveSummary","generateExecutiveSummary","performanceAnalysis","generatePerformanceAnalysis","keywordAnalysis","generateKeywordAnalysis","technicalAnalysis","generateTechnicalAnalysis","contentAnalysis","generateContentAnalysis","competitiveAnalysis","generateCompetitiveAnalysis","actionPlan","generateActionPlan","generatedBy","generatedAt","version","exportFormats","scheduledDelivery","reportId","overallScore","alertsCount","keywordsCount","currentMetrics","calculateOverallSEOScore","scoreChange","keyAchievements","majorConcerns","quickWins","budgetRecommendations","estimatedCost","expectedROI","timeframe","cwv","coreWebVitalsChange","pageSpeedScore","pageSpeedChange","mobileScore","mobileChange","slowestPages","performanceRecommendations","keywordsChange","positionChange","topGainers","sort","a","slice","topLosers","newKeywords","lostKeywords","opportunityKeywords","crawlabilityScore","indexabilityScore","structuredDataScore","mobileUsabilityScore","securityScore","count","fix","improvements","duplicateContent","thinContent","missingMetaTags","contentQualityScore","topPerformingContent","wordCount","readabilityScore","marketShare","visibilityScore","competitorComparison","comp","ourPosition","theirPosition","gap","opportunityAnalysis","potential","dependencies","kpis","shortTerm","longTerm","ongoing","estimatedTimeToImplement","estimatedTrafficIncrease","estimatedRevenueIncrease","implementationSteps","requiredResources","relatedRecommendations","status","notes","key","cacheKey","cacheData","setex","JSON","stringify","set","size","oldestKey","keys","next","value","delete","getCachedMetrics","cached","get","parsed","parse","memoryCached","getHistoricalMetrics","days","cutoffDate","metric","factors","normalizedCTR","min","positionScore","max","trafficScore","alertPenalty","round","getKeywordsByTrend","getAlertsByType","getUnresolvedAlerts","resolveAlert","alertId","find","getKeywordStats","total","topPositions","declines","getPerformanceMetrics","lastMetrics","averageLCP","averageFID","averageCLS","getCompetitorSummary","totalCompetitors","averageDomainAuthority","c","keywordOpportunities","exportDashboardData","overview","unresolvedAlerts","cleanupOldData","metricsRetentionDate","m","alertsRetentionDate","reportsRetentionDate","r","metricsCount","reportsCount","subscribe","callback","unsubscribe","index","indexOf","splice","forEach","destroy","clearInterval","clear"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-analytics-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SEO ANALYTICS MANAGER - ENHANCED\r\n// Sistema avanzado de análisis y monitoreo SEO en tiempo real\r\n// Incluye tracking de rankings, métricas de performance y reportes automatizados\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { getRedisClient } from '@/lib/integrations/redis';\r\nimport { realTimePerformanceMonitor } from '@/lib/monitoring/real-time-performance-monitor';\r\nimport { advancedAlertingEngine, AlertType, AlertSeverity } from '@/lib/monitoring/advanced-alerting-engine';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS MEJORADOS\r\n// ===================================\r\n\r\n// Tipos para métricas SEO mejoradas\r\nexport interface SEOMetrics {\r\n  pageViews: number;\r\n  uniqueVisitors: number;\r\n  bounceRate: number;\r\n  avgSessionDuration: number;\r\n  organicTraffic: number;\r\n  searchImpressions: number;\r\n  searchClicks: number;\r\n  avgPosition: number;\r\n  ctr: number; // Click Through Rate\r\n  coreWebVitals: CoreWebVitals;\r\n  indexationStatus: IndexationStatus;\r\n  technicalSEO: TechnicalSEOMetrics;\r\n  timestamp: Date;\r\n\r\n  // Nuevas métricas avanzadas\r\n  conversionRate: number;\r\n  revenueFromOrganic: number;\r\n  topLandingPages: PageMetrics[];\r\n  topExitPages: PageMetrics[];\r\n  deviceBreakdown: DeviceMetrics;\r\n  geographicData: GeographicMetrics[];\r\n}\r\n\r\n// Nuevas interfaces para métricas avanzadas\r\nexport interface PageMetrics {\r\n  url: string;\r\n  pageViews: number;\r\n  uniquePageViews: number;\r\n  avgTimeOnPage: number;\r\n  bounceRate: number;\r\n  exitRate: number;\r\n  conversions: number;\r\n  revenue: number;\r\n}\r\n\r\nexport interface DeviceMetrics {\r\n  desktop: {\r\n    sessions: number;\r\n    bounceRate: number;\r\n    conversionRate: number;\r\n    avgSessionDuration: number;\r\n  };\r\n  mobile: {\r\n    sessions: number;\r\n    bounceRate: number;\r\n    conversionRate: number;\r\n    avgSessionDuration: number;\r\n  };\r\n  tablet: {\r\n    sessions: number;\r\n    bounceRate: number;\r\n    conversionRate: number;\r\n    avgSessionDuration: number;\r\n  };\r\n}\r\n\r\nexport interface GeographicMetrics {\r\n  country: string;\r\n  region: string;\r\n  city: string;\r\n  sessions: number;\r\n  users: number;\r\n  bounceRate: number;\r\n  conversionRate: number;\r\n  revenue: number;\r\n}\r\n\r\nexport interface CoreWebVitals {\r\n  lcp: number; // Largest Contentful Paint\r\n  fid: number; // First Input Delay\r\n  cls: number; // Cumulative Layout Shift\r\n  fcp: number; // First Contentful Paint\r\n  ttfb: number; // Time to First Byte\r\n  inp: number; // Interaction to Next Paint\r\n  score: 'good' | 'needs-improvement' | 'poor';\r\n\r\n  // Métricas adicionales\r\n  speedIndex: number;\r\n  totalBlockingTime: number;\r\n  largestContentfulPaintElement: string;\r\n  cumulativeLayoutShiftSources: string[];\r\n}\r\n\r\nexport interface IndexationStatus {\r\n  totalPages: number;\r\n  indexedPages: number;\r\n  notIndexedPages: number;\r\n  indexationRate: number;\r\n  crawlErrors: number;\r\n  sitemapStatus: 'submitted' | 'processed' | 'error';\r\n  lastCrawlDate: Date;\r\n}\r\n\r\nexport interface TechnicalSEOMetrics {\r\n  mobileUsability: number;\r\n  pagespeedScore: number;\r\n  httpsUsage: number;\r\n  structuredDataErrors: number;\r\n  metaTagsOptimization: number;\r\n  internalLinkingScore: number;\r\n  imageOptimization: number;\r\n  canonicalIssues: number;\r\n}\r\n\r\nexport interface KeywordMetrics {\r\n  keyword: string;\r\n  position: number;\r\n  previousPosition: number;\r\n  searchVolume: number;\r\n  difficulty: number;\r\n  clicks: number;\r\n  impressions: number;\r\n  ctr: number;\r\n  url: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n\r\n  // Métricas avanzadas de keywords\r\n  searchEngine: 'google' | 'bing' | 'yahoo' | 'duckduckgo';\r\n  device: 'desktop' | 'mobile' | 'tablet';\r\n  location: string;\r\n  intent: 'informational' | 'navigational' | 'transactional' | 'commercial';\r\n  competitorRankings: CompetitorKeywordData[];\r\n  relatedKeywords: string[];\r\n  seasonalTrends: SeasonalData[];\r\n  conversionRate: number;\r\n  revenue: number;\r\n  costPerClick: number;\r\n  lastUpdated: Date;\r\n}\r\n\r\nexport interface CompetitorKeywordData {\r\n  domain: string;\r\n  position: number;\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport interface SeasonalData {\r\n  month: number;\r\n  searchVolume: number;\r\n  competition: number;\r\n  cpc: number;\r\n}\r\n\r\nexport interface CompetitorAnalysis {\r\n  competitor: string;\r\n  domain: string;\r\n  organicKeywords: number;\r\n  organicTraffic: number;\r\n  backlinks: number;\r\n  domainAuthority: number;\r\n  commonKeywords: string[];\r\n  keywordGaps: string[];\r\n\r\n  // Análisis avanzado de competidores\r\n  pageAuthority: number;\r\n  trustFlow: number;\r\n  citationFlow: number;\r\n  referringDomains: number;\r\n  organicCost: number;\r\n  paidKeywords: number;\r\n  paidTraffic: number;\r\n  paidCost: number;\r\n  topPages: CompetitorPage[];\r\n  contentGaps: ContentGap[];\r\n  backlinksGaps: BacklinkGap[];\r\n  socialMetrics: SocialMetrics;\r\n  technicalSEOScore: number;\r\n  lastAnalyzed: Date;\r\n}\r\n\r\nexport interface CompetitorPage {\r\n  url: string;\r\n  title: string;\r\n  traffic: number;\r\n  keywords: number;\r\n  backlinks: number;\r\n  socialShares: number;\r\n}\r\n\r\nexport interface ContentGap {\r\n  topic: string;\r\n  keywords: string[];\r\n  searchVolume: number;\r\n  difficulty: number;\r\n  opportunity: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface BacklinkGap {\r\n  domain: string;\r\n  domainAuthority: number;\r\n  linkType: 'dofollow' | 'nofollow';\r\n  anchorText: string;\r\n  opportunity: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface SocialMetrics {\r\n  facebook: {\r\n    likes: number;\r\n    shares: number;\r\n    comments: number;\r\n  };\r\n  twitter: {\r\n    followers: number;\r\n    tweets: number;\r\n    retweets: number;\r\n  };\r\n  linkedin: {\r\n    followers: number;\r\n    posts: number;\r\n    engagement: number;\r\n  };\r\n  instagram: {\r\n    followers: number;\r\n    posts: number;\r\n    engagement: number;\r\n  };\r\n}\r\n\r\nexport interface SEOAlert {\r\n  id: string;\r\n  type: 'critical' | 'warning' | 'info';\r\n  category: 'technical' | 'content' | 'performance' | 'indexation' | 'security' | 'mobile' | 'schema';\r\n  title: string;\r\n  description: string;\r\n  url?: string;\r\n  severity: number;\r\n  timestamp: Date;\r\n  resolved: boolean;\r\n  recommendations: string[];\r\n\r\n  // Campos avanzados para alertas\r\n  impact: 'high' | 'medium' | 'low';\r\n  effort: 'low' | 'medium' | 'high';\r\n  priority: number;\r\n  affectedPages: string[];\r\n  estimatedTrafficImpact: number;\r\n  estimatedRevenueImpact: number;\r\n  relatedAlerts: string[];\r\n  autoResolvable: boolean;\r\n  resolutionSteps: ResolutionStep[];\r\n  lastOccurrence: Date;\r\n  frequency: number;\r\n  tags: string[];\r\n}\r\n\r\nexport interface ResolutionStep {\r\n  step: number;\r\n  description: string;\r\n  action: string;\r\n  estimatedTime: number; // minutos\r\n  difficulty: 'easy' | 'medium' | 'hard';\r\n  requiredSkills: string[];\r\n}\r\n\r\nexport interface SEOReport {\r\n  id: string;\r\n  period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'custom';\r\n  startDate: Date;\r\n  endDate: Date;\r\n  metrics: SEOMetrics;\r\n  keywords: KeywordMetrics[];\r\n  alerts: SEOAlert[];\r\n  recommendations: SEORecommendation[];\r\n  competitorAnalysis?: CompetitorAnalysis[];\r\n\r\n  // Secciones avanzadas del reporte\r\n  executiveSummary: ExecutiveSummary;\r\n  performanceAnalysis: PerformanceAnalysis;\r\n  keywordAnalysis: KeywordAnalysis;\r\n  technicalAnalysis: TechnicalAnalysis;\r\n  contentAnalysis: ContentAnalysis;\r\n  competitiveAnalysis: CompetitiveAnalysis;\r\n  actionPlan: ActionPlan;\r\n\r\n  // Metadatos del reporte\r\n  generatedBy: string;\r\n  generatedAt: Date;\r\n  version: string;\r\n  exportFormats: ('pdf' | 'excel' | 'csv' | 'json')[];\r\n  scheduledDelivery: ScheduledDelivery[];\r\n}\r\n\r\nexport interface SEORecommendation {\r\n  id: string;\r\n  category: 'technical' | 'content' | 'performance' | 'mobile' | 'schema' | 'keywords';\r\n  title: string;\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  impact: 'high' | 'medium' | 'low';\r\n  effort: 'low' | 'medium' | 'high';\r\n  estimatedTimeToImplement: number; // días\r\n  estimatedTrafficIncrease: number; // porcentaje\r\n  estimatedRevenueIncrease: number; // monto\r\n  implementationSteps: string[];\r\n  requiredResources: string[];\r\n  kpis: string[];\r\n  relatedRecommendations: string[];\r\n  status: 'pending' | 'in-progress' | 'completed' | 'dismissed';\r\n  assignedTo?: string;\r\n  dueDate?: Date;\r\n  completedDate?: Date;\r\n  notes: string[];\r\n}\r\n\r\nexport interface ExecutiveSummary {\r\n  overallScore: number;\r\n  scoreChange: number;\r\n  keyAchievements: string[];\r\n  majorConcerns: string[];\r\n  quickWins: string[];\r\n  budgetRecommendations: BudgetRecommendation[];\r\n}\r\n\r\nexport interface BudgetRecommendation {\r\n  category: string;\r\n  description: string;\r\n  estimatedCost: number;\r\n  expectedROI: number;\r\n  timeframe: string;\r\n}\r\n\r\n// Interfaces adicionales para análisis avanzado\r\nexport interface PerformanceAnalysis {\r\n  coreWebVitalsScore: number;\r\n  coreWebVitalsChange: number;\r\n  pageSpeedScore: number;\r\n  pageSpeedChange: number;\r\n  mobileScore: number;\r\n  mobileChange: number;\r\n  slowestPages: PagePerformance[];\r\n  performanceRecommendations: string[];\r\n}\r\n\r\nexport interface PagePerformance {\r\n  url: string;\r\n  lcp: number;\r\n  fid: number;\r\n  cls: number;\r\n  speedIndex: number;\r\n  totalBlockingTime: number;\r\n  issues: string[];\r\n}\r\n\r\nexport interface KeywordAnalysis {\r\n  totalKeywords: number;\r\n  keywordsChange: number;\r\n  averagePosition: number;\r\n  positionChange: number;\r\n  topGainers: KeywordMetrics[];\r\n  topLosers: KeywordMetrics[];\r\n  newKeywords: KeywordMetrics[];\r\n  lostKeywords: KeywordMetrics[];\r\n  opportunityKeywords: KeywordMetrics[];\r\n}\r\n\r\nexport interface TechnicalAnalysis {\r\n  crawlabilityScore: number;\r\n  indexabilityScore: number;\r\n  structuredDataScore: number;\r\n  mobileUsabilityScore: number;\r\n  securityScore: number;\r\n  technicalIssues: TechnicalIssue[];\r\n  improvements: string[];\r\n}\r\n\r\nexport interface TechnicalIssue {\r\n  type: string;\r\n  severity: 'high' | 'medium' | 'low';\r\n  count: number;\r\n  affectedPages: string[];\r\n  description: string;\r\n  fix: string;\r\n}\r\n\r\nexport interface ContentAnalysis {\r\n  totalPages: number;\r\n  indexedPages: number;\r\n  duplicateContent: number;\r\n  thinContent: number;\r\n  missingMetaTags: number;\r\n  contentQualityScore: number;\r\n  topPerformingContent: ContentMetrics[];\r\n  contentGaps: string[];\r\n}\r\n\r\nexport interface ContentMetrics {\r\n  url: string;\r\n  title: string;\r\n  wordCount: number;\r\n  readabilityScore: number;\r\n  organicTraffic: number;\r\n  socialShares: number;\r\n  backlinks: number;\r\n  conversionRate: number;\r\n}\r\n\r\nexport interface CompetitiveAnalysis {\r\n  marketShare: number;\r\n  visibilityScore: number;\r\n  competitorComparison: CompetitorComparison[];\r\n  opportunityAnalysis: OpportunityAnalysis[];\r\n}\r\n\r\nexport interface CompetitorComparison {\r\n  competitor: string;\r\n  ourPosition: number;\r\n  theirPosition: number;\r\n  gap: number;\r\n  opportunity: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface OpportunityAnalysis {\r\n  type: 'keyword' | 'content' | 'backlink' | 'technical';\r\n  description: string;\r\n  potential: number;\r\n  difficulty: number;\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface ActionPlan {\r\n  quickWins: ActionItem[];\r\n  shortTerm: ActionItem[];\r\n  longTerm: ActionItem[];\r\n  ongoing: ActionItem[];\r\n}\r\n\r\nexport interface ActionItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  effort: 'low' | 'medium' | 'high';\r\n  impact: 'high' | 'medium' | 'low';\r\n  estimatedTime: number;\r\n  assignee?: string;\r\n  dueDate?: Date;\r\n  dependencies: string[];\r\n  kpis: string[];\r\n}\r\n\r\nexport interface ScheduledDelivery {\r\n  email: string;\r\n  frequency: 'daily' | 'weekly' | 'monthly';\r\n  format: 'pdf' | 'excel' | 'summary';\r\n  enabled: boolean;\r\n}\r\n\r\n// Configuración avanzada del sistema\r\nexport interface SEOAnalyticsConfig {\r\n  enableRealTimeTracking: boolean;\r\n  enableKeywordTracking: boolean;\r\n  enableCompetitorAnalysis: boolean;\r\n  enableAutomatedReports: boolean;\r\n  enableAlerts: boolean;\r\n\r\n  // Intervalos de actualización\r\n  metricsUpdateInterval: number; // minutos\r\n  keywordUpdateInterval: number; // horas\r\n  competitorUpdateInterval: number; // días\r\n  alertCheckInterval: number; // minutos\r\n\r\n  // Configuración de reportes\r\n  reportSchedule: {\r\n    daily: { enabled: boolean; time: string; recipients: string[] };\r\n    weekly: { enabled: boolean; day: number; time: string; recipients: string[] };\r\n    monthly: { enabled: boolean; day: number; time: string; recipients: string[] };\r\n  };\r\n\r\n  // Thresholds para alertas\r\n  alertThresholds: {\r\n    seoScoreDrop: number;\r\n    rankingDrop: number;\r\n    trafficDrop: number;\r\n    performanceDrop: number;\r\n    criticalIssuesIncrease: number;\r\n    conversionRateDrop: number;\r\n  };\r\n\r\n  // Integraciones externas\r\n  integrations: {\r\n    googleSearchConsole: { enabled: boolean; credentials?: any };\r\n    googleAnalytics: { enabled: boolean; credentials?: any };\r\n    semrush: { enabled: boolean; apiKey?: string };\r\n    ahrefs: { enabled: boolean; apiKey?: string };\r\n    screaminFrog: { enabled: boolean; apiKey?: string };\r\n  };\r\n\r\n  // Configuración de cache y almacenamiento\r\n  cache: {\r\n    enabled: boolean;\r\n    ttl: number;\r\n    maxSize: number;\r\n  };\r\n\r\n  dataRetention: {\r\n    metricsRetentionDays: number;\r\n    alertsRetentionDays: number;\r\n    reportsRetentionDays: number;\r\n  };\r\n}\r\n\r\n// Configuración por defecto\r\nconst DEFAULT_SEO_CONFIG: SEOAnalyticsConfig = {\r\n  enableRealTimeTracking: true,\r\n  enableKeywordTracking: true,\r\n  enableCompetitorAnalysis: true,\r\n  enableAutomatedReports: true,\r\n  enableAlerts: true,\r\n\r\n  metricsUpdateInterval: 15,\r\n  keywordUpdateInterval: 24,\r\n  competitorUpdateInterval: 7,\r\n  alertCheckInterval: 5,\r\n\r\n  reportSchedule: {\r\n    daily: { enabled: true, time: '09:00', recipients: [] },\r\n    weekly: { enabled: true, day: 1, time: '09:00', recipients: [] },\r\n    monthly: { enabled: true, day: 1, time: '09:00', recipients: [] }\r\n  },\r\n\r\n  alertThresholds: {\r\n    seoScoreDrop: 10,\r\n    rankingDrop: 5,\r\n    trafficDrop: 20,\r\n    performanceDrop: 15,\r\n    criticalIssuesIncrease: 3,\r\n    conversionRateDrop: 25\r\n  },\r\n\r\n  integrations: {\r\n    googleSearchConsole: { enabled: false },\r\n    googleAnalytics: { enabled: false },\r\n    semrush: { enabled: false },\r\n    ahrefs: { enabled: false },\r\n    screaminFrog: { enabled: false }\r\n  },\r\n\r\n  cache: {\r\n    enabled: true,\r\n    ttl: 3600,\r\n    maxSize: 1000\r\n  },\r\n\r\n  dataRetention: {\r\n    metricsRetentionDays: 90,\r\n    alertsRetentionDays: 30,\r\n    reportsRetentionDays: 365\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ENHANCED SEO ANALYTICS MANAGER CLASS\r\n// ===================================\r\n\r\nexport class EnhancedSEOAnalyticsManager {\r\n  private static instance: EnhancedSEOAnalyticsManager;\r\n  private config: SEOAnalyticsConfig;\r\n  private metrics: SEOMetrics[] = [];\r\n  private keywords: KeywordMetrics[] = [];\r\n  private alerts: SEOAlert[] = [];\r\n  private reports: SEOReport[] = [];\r\n  private competitors: CompetitorAnalysis[] = [];\r\n  private listeners: ((data: any) => void)[] = [];\r\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\r\n  private redis: any;\r\n\r\n  // Intervalos de tracking\r\n  private metricsInterval: NodeJS.Timeout | null = null;\r\n  private keywordInterval: NodeJS.Timeout | null = null;\r\n  private competitorInterval: NodeJS.Timeout | null = null;\r\n  private alertInterval: NodeJS.Timeout | null = null;\r\n\r\n  private constructor(config?: Partial<SEOAnalyticsConfig>) {\r\n    this.config = { ...DEFAULT_SEO_CONFIG, ...config };\r\n    this.initializeRedis();\r\n    this.startTracking();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced SEO Analytics Manager initialized', {\r\n      realTimeTracking: this.config.enableRealTimeTracking,\r\n      keywordTracking: this.config.enableKeywordTracking,\r\n      competitorAnalysis: this.config.enableCompetitorAnalysis,\r\n      automatedReports: this.config.enableAutomatedReports\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  public static getInstance(config?: Partial<SEOAnalyticsConfig>): EnhancedSEOAnalyticsManager {\r\n    if (!EnhancedSEOAnalyticsManager.instance) {\r\n      EnhancedSEOAnalyticsManager.instance = new EnhancedSEOAnalyticsManager(config);\r\n    }\r\n    return EnhancedSEOAnalyticsManager.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      this.redis = await getRedisClient();\r\n      logger.info(LogLevel.INFO, 'Redis initialized for SEO analytics', {}, LogCategory.SEO);\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Redis not available for SEO analytics', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // TRACKING Y RECOPILACIÓN DE MÉTRICAS\r\n  // ===================================\r\n\r\n  private startTracking(): void {\r\n    if (this.config.enableRealTimeTracking) {\r\n      this.metricsInterval = setInterval(() => {\r\n        this.collectAndProcessMetrics();\r\n      }, this.config.metricsUpdateInterval * 60 * 1000);\r\n    }\r\n\r\n    if (this.config.enableKeywordTracking) {\r\n      this.keywordInterval = setInterval(() => {\r\n        this.updateKeywordRankings();\r\n      }, this.config.keywordUpdateInterval * 60 * 60 * 1000);\r\n    }\r\n\r\n    if (this.config.enableCompetitorAnalysis) {\r\n      this.competitorInterval = setInterval(() => {\r\n        this.updateCompetitorAnalysis();\r\n      }, this.config.competitorUpdateInterval * 24 * 60 * 60 * 1000);\r\n    }\r\n\r\n    if (this.config.enableAlerts) {\r\n      this.alertInterval = setInterval(() => {\r\n        this.checkAlerts();\r\n      }, this.config.alertCheckInterval * 60 * 1000);\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, 'SEO tracking started', {\r\n      metricsInterval: this.config.metricsUpdateInterval,\r\n      keywordInterval: this.config.keywordUpdateInterval,\r\n      competitorInterval: this.config.competitorUpdateInterval,\r\n      alertInterval: this.config.alertCheckInterval\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  private async collectAndProcessMetrics(): Promise<void> {\r\n    try {\r\n      const coreWebVitals = await this.collectCoreWebVitals();\r\n      const indexationStatus = await this.analyzeIndexationStatus();\r\n      const technicalSEO = await this.evaluateTechnicalSEO();\r\n\r\n      // Obtener métricas del performance monitor\r\n      const performanceMetrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n\r\n      // Procesar métricas de tráfico (simulado - en producción vendría de GA)\r\n      const trafficMetrics = await this.collectTrafficMetrics();\r\n\r\n      const metrics: SEOMetrics = {\r\n        ...trafficMetrics,\r\n        coreWebVitals,\r\n        indexationStatus,\r\n        technicalSEO,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      this.metrics.push(metrics);\r\n      await this.cacheMetrics('latest_metrics', metrics);\r\n\r\n      // Verificar thresholds y generar alertas\r\n      await this.checkMetricsThresholds(metrics);\r\n\r\n      this.notifyListeners({ type: 'metrics_updated', data: metrics });\r\n\r\n      logger.info(LogLevel.INFO, 'SEO metrics collected and processed', {\r\n        coreWebVitalsScore: coreWebVitals.score,\r\n        indexationRate: indexationStatus.indexationRate,\r\n        organicTraffic: trafficMetrics.organicTraffic\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to collect SEO metrics', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // Recopilar métricas de Core Web Vitals mejoradas\r\n  async collectCoreWebVitals(): Promise<CoreWebVitals> {\r\n    return new Promise((resolve) => {\r\n      // Obtener métricas reales del performance monitor si están disponibles\r\n      const performanceMetrics = realTimePerformanceMonitor.getCurrentMetrics();\r\n\r\n      let metrics: CoreWebVitals;\r\n\r\n      if (performanceMetrics.webVitals.length > 0) {\r\n        const latest = performanceMetrics.webVitals[performanceMetrics.webVitals.length - 1];\r\n        metrics = {\r\n          lcp: latest.lcp,\r\n          fid: latest.fid,\r\n          cls: latest.cls,\r\n          fcp: latest.fcp,\r\n          ttfb: latest.ttfb,\r\n          inp: latest.inp || Math.random() * 500 + 100,\r\n          score: 'good', // Se calculará\r\n          speedIndex: latest.lcp * 0.8, // Estimación\r\n          totalBlockingTime: latest.fid * 2, // Estimación\r\n          largestContentfulPaintElement: 'main-content', // Simulado\r\n          cumulativeLayoutShiftSources: ['header', 'sidebar'] // Simulado\r\n        };\r\n      } else {\r\n        // Fallback a métricas simuladas\r\n        metrics = {\r\n          lcp: Math.random() * 4000 + 1000,\r\n          fid: Math.random() * 300 + 50,\r\n          cls: Math.random() * 0.25,\r\n          fcp: Math.random() * 3000 + 500,\r\n          ttfb: Math.random() * 800 + 200,\r\n          inp: Math.random() * 500 + 100,\r\n          score: 'good',\r\n          speedIndex: Math.random() * 5000 + 2000,\r\n          totalBlockingTime: Math.random() * 600 + 100,\r\n          largestContentfulPaintElement: 'main-content',\r\n          cumulativeLayoutShiftSources: []\r\n        };\r\n      }\r\n\r\n      // Calcular score basado en thresholds de Google\r\n      const lcpScore = metrics.lcp <= 2500 ? 'good' : metrics.lcp <= 4000 ? 'needs-improvement' : 'poor';\r\n      const fidScore = metrics.fid <= 100 ? 'good' : metrics.fid <= 300 ? 'needs-improvement' : 'poor';\r\n      const clsScore = metrics.cls <= 0.1 ? 'good' : metrics.cls <= 0.25 ? 'needs-improvement' : 'poor';\r\n\r\n      const scores = [lcpScore, fidScore, clsScore];\r\n      if (scores.every(s => s === 'good')) {metrics.score = 'good';}\r\n      else if (scores.some(s => s === 'poor')) {metrics.score = 'poor';}\r\n      else {metrics.score = 'needs-improvement';}\r\n\r\n      resolve(metrics);\r\n    });\r\n  }\r\n\r\n  // Recopilar métricas de tráfico\r\n  private async collectTrafficMetrics(): Promise<Partial<SEOMetrics>> {\r\n    // En producción, esto se integraría con Google Analytics API\r\n    const baseTraffic = Math.floor(Math.random() * 5000) + 2000;\r\n\r\n    return {\r\n      pageViews: baseTraffic * 2,\r\n      uniqueVisitors: baseTraffic,\r\n      bounceRate: Math.random() * 40 + 30,\r\n      avgSessionDuration: Math.random() * 300 + 120,\r\n      organicTraffic: Math.floor(baseTraffic * 0.6),\r\n      searchImpressions: Math.floor(baseTraffic * 10),\r\n      searchClicks: Math.floor(baseTraffic * 0.8),\r\n      avgPosition: Math.random() * 20 + 5,\r\n      ctr: Math.random() * 8 + 2,\r\n      conversionRate: Math.random() * 5 + 1,\r\n      revenueFromOrganic: Math.floor(Math.random() * 50000) + 10000,\r\n      topLandingPages: this.getTopLandingPages(),\r\n      topExitPages: this.getTopExitPages(),\r\n      deviceBreakdown: this.getDeviceBreakdown(),\r\n      geographicData: this.getGeographicData()\r\n    };\r\n  }\r\n\r\n  private getTopLandingPages(): PageMetrics[] {\r\n    const pages = [\r\n      '/products/pintura-interior',\r\n      '/products/pintura-exterior',\r\n      '/categories/herramientas',\r\n      '/categories/pinturas',\r\n      '/products/sherwin-williams'\r\n    ];\r\n\r\n    return pages.map(url => ({\r\n      url,\r\n      pageViews: Math.floor(Math.random() * 1000) + 100,\r\n      uniquePageViews: Math.floor(Math.random() * 800) + 80,\r\n      avgTimeOnPage: Math.random() * 300 + 60,\r\n      bounceRate: Math.random() * 60 + 20,\r\n      exitRate: Math.random() * 50 + 10,\r\n      conversions: Math.floor(Math.random() * 20) + 1,\r\n      revenue: Math.floor(Math.random() * 5000) + 500\r\n    }));\r\n  }\r\n\r\n  private getTopExitPages(): PageMetrics[] {\r\n    const pages = [\r\n      '/checkout',\r\n      '/cart',\r\n      '/contact',\r\n      '/about',\r\n      '/shipping-info'\r\n    ];\r\n\r\n    return pages.map(url => ({\r\n      url,\r\n      pageViews: Math.floor(Math.random() * 500) + 50,\r\n      uniquePageViews: Math.floor(Math.random() * 400) + 40,\r\n      avgTimeOnPage: Math.random() * 200 + 30,\r\n      bounceRate: Math.random() * 80 + 40,\r\n      exitRate: Math.random() * 90 + 50,\r\n      conversions: Math.floor(Math.random() * 5),\r\n      revenue: Math.floor(Math.random() * 1000)\r\n    }));\r\n  }\r\n\r\n  private getDeviceBreakdown(): DeviceMetrics {\r\n    return {\r\n      desktop: {\r\n        sessions: Math.floor(Math.random() * 2000) + 500,\r\n        bounceRate: Math.random() * 40 + 25,\r\n        conversionRate: Math.random() * 4 + 2,\r\n        avgSessionDuration: Math.random() * 400 + 200\r\n      },\r\n      mobile: {\r\n        sessions: Math.floor(Math.random() * 3000) + 1000,\r\n        bounceRate: Math.random() * 50 + 35,\r\n        conversionRate: Math.random() * 3 + 1,\r\n        avgSessionDuration: Math.random() * 300 + 150\r\n      },\r\n      tablet: {\r\n        sessions: Math.floor(Math.random() * 500) + 100,\r\n        bounceRate: Math.random() * 45 + 30,\r\n        conversionRate: Math.random() * 3.5 + 1.5,\r\n        avgSessionDuration: Math.random() * 350 + 180\r\n      }\r\n    };\r\n  }\r\n\r\n  private getGeographicData(): GeographicMetrics[] {\r\n    const locations = [\r\n      { country: 'Argentina', region: 'Buenos Aires', city: 'CABA' },\r\n      { country: 'Argentina', region: 'Buenos Aires', city: 'La Plata' },\r\n      { country: 'Argentina', region: 'Córdoba', city: 'Córdoba' },\r\n      { country: 'Argentina', region: 'Santa Fe', city: 'Rosario' },\r\n      { country: 'Argentina', region: 'Mendoza', city: 'Mendoza' }\r\n    ];\r\n\r\n    return locations.map(location => ({\r\n      ...location,\r\n      sessions: Math.floor(Math.random() * 1000) + 100,\r\n      users: Math.floor(Math.random() * 800) + 80,\r\n      bounceRate: Math.random() * 50 + 25,\r\n      conversionRate: Math.random() * 4 + 1,\r\n      revenue: Math.floor(Math.random() * 10000) + 1000\r\n    }));\r\n  }\r\n\r\n  // Analizar estado de indexación mejorado\r\n  async analyzeIndexationStatus(): Promise<IndexationStatus> {\r\n    // En producción, esto se integraría con Google Search Console API\r\n    const totalPages = 150 + Math.floor(Math.random() * 50);\r\n    const indexedPages = Math.floor(totalPages * (0.9 + Math.random() * 0.1));\r\n\r\n    return {\r\n      totalPages,\r\n      indexedPages,\r\n      notIndexedPages: totalPages - indexedPages,\r\n      indexationRate: Number(((indexedPages / totalPages) * 100).toFixed(1)),\r\n      crawlErrors: Math.floor(Math.random() * 5),\r\n      sitemapStatus: Math.random() > 0.1 ? 'processed' : 'error',\r\n      lastCrawlDate: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000)\r\n    };\r\n  }\r\n\r\n  // Evaluar SEO técnico\r\n  async evaluateTechnicalSEO(): Promise<TechnicalSEOMetrics> {\r\n    return {\r\n      mobileUsability: 95,\r\n      pagespeedScore: 88,\r\n      httpsUsage: 100,\r\n      structuredDataErrors: 2,\r\n      metaTagsOptimization: 92,\r\n      internalLinkingScore: 85,\r\n      imageOptimization: 78,\r\n      canonicalIssues: 1\r\n    };\r\n  }\r\n\r\n  // Recopilar métricas completas\r\n  async collectMetrics(): Promise<SEOMetrics> {\r\n    const coreWebVitals = await this.collectCoreWebVitals();\r\n    const indexationStatus = await this.analyzeIndexationStatus();\r\n    const technicalSEO = await this.evaluateTechnicalSEO();\r\n\r\n    const metrics: SEOMetrics = {\r\n      pageViews: Math.floor(Math.random() * 10000) + 5000,\r\n      uniqueVisitors: Math.floor(Math.random() * 5000) + 2000,\r\n      bounceRate: Math.random() * 40 + 30, // 30-70%\r\n      avgSessionDuration: Math.random() * 300 + 120, // 2-7 minutos\r\n      organicTraffic: Math.floor(Math.random() * 3000) + 1000,\r\n      searchImpressions: Math.floor(Math.random() * 50000) + 20000,\r\n      searchClicks: Math.floor(Math.random() * 2000) + 800,\r\n      avgPosition: Math.random() * 20 + 5, // Posición 5-25\r\n      ctr: Math.random() * 8 + 2, // 2-10%\r\n      coreWebVitals,\r\n      indexationStatus,\r\n      technicalSEO,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    this.metrics.push(metrics);\r\n    this.notifyListeners({ type: 'metrics', data: metrics });\r\n\r\n    return metrics;\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE KEYWORDS AVANZADO\r\n  // ===================================\r\n\r\n  private async updateKeywordRankings(): Promise<void> {\r\n    try {\r\n      const keywords = await this.analyzeKeywords();\r\n      this.keywords = keywords;\r\n\r\n      await this.cacheMetrics('latest_keywords', keywords);\r\n\r\n      // Verificar cambios significativos en rankings\r\n      await this.checkKeywordAlerts(keywords);\r\n\r\n      this.notifyListeners({ type: 'keywords_updated', data: keywords });\r\n\r\n      logger.info(LogLevel.INFO, 'Keyword rankings updated', {\r\n        totalKeywords: keywords.length,\r\n        averagePosition: keywords.reduce((sum, k) => sum + k.position, 0) / keywords.length\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update keyword rankings', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // Analizar keywords con métricas avanzadas\r\n  async analyzeKeywords(): Promise<KeywordMetrics[]> {\r\n    const sampleKeywords = [\r\n      { keyword: 'pinturería online', intent: 'commercial' as const, volume: 2400 },\r\n      { keyword: 'pinturas sherwin williams', intent: 'commercial' as const, volume: 1800 },\r\n      { keyword: 'ferretería online', intent: 'commercial' as const, volume: 3200 },\r\n      { keyword: 'herramientas pintura', intent: 'commercial' as const, volume: 1500 },\r\n      { keyword: 'corralón online', intent: 'commercial' as const, volume: 2800 },\r\n      { keyword: 'pinturas argentina', intent: 'informational' as const, volume: 4200 },\r\n      { keyword: 'petrilac pinturas', intent: 'navigational' as const, volume: 800 },\r\n      { keyword: 'sinteplast', intent: 'navigational' as const, volume: 1200 },\r\n      { keyword: 'plavicon', intent: 'navigational' as const, volume: 600 },\r\n      { keyword: 'akapol', intent: 'navigational' as const, volume: 400 },\r\n      { keyword: 'pintura interior precio', intent: 'transactional' as const, volume: 1600 },\r\n      { keyword: 'pintura exterior mejor', intent: 'informational' as const, volume: 900 },\r\n      { keyword: 'como pintar paredes', intent: 'informational' as const, volume: 5500 },\r\n      { keyword: 'rodillos pintura profesional', intent: 'commercial' as const, volume: 700 },\r\n      { keyword: 'pintura antioxido', intent: 'commercial' as const, volume: 1100 }\r\n    ];\r\n\r\n    const keywords: KeywordMetrics[] = await Promise.all(\r\n      sampleKeywords.map(async ({ keyword, intent, volume }) => {\r\n        const position = Math.floor(Math.random() * 50) + 1;\r\n        const previousPosition = position + Math.floor(Math.random() * 10) - 5;\r\n        const clicks = Math.floor(Math.random() * 200) + 10;\r\n        const impressions = Math.floor(Math.random() * 2000) + 100;\r\n\r\n        return {\r\n          keyword,\r\n          position,\r\n          previousPosition,\r\n          searchVolume: volume,\r\n          difficulty: Math.floor(Math.random() * 100),\r\n          clicks,\r\n          impressions,\r\n          ctr: (clicks / impressions) * 100,\r\n          url: `/shop?search=${encodeURIComponent(keyword)}`,\r\n          trend: position < previousPosition ? 'up' : position > previousPosition ? 'down' : 'stable',\r\n          searchEngine: 'google',\r\n          device: Math.random() > 0.6 ? 'mobile' : 'desktop',\r\n          location: 'Argentina',\r\n          intent,\r\n          competitorRankings: this.getCompetitorRankings(keyword),\r\n          relatedKeywords: this.getRelatedKeywords(keyword),\r\n          seasonalTrends: this.getSeasonalTrends(keyword),\r\n          conversionRate: Math.random() * 5 + 1,\r\n          revenue: Math.floor(Math.random() * 10000) + 1000,\r\n          costPerClick: Math.random() * 5 + 0.5,\r\n          lastUpdated: new Date()\r\n        };\r\n      })\r\n    );\r\n\r\n    // Guardar keywords en el manager\r\n    this.keywords = keywords;\r\n\r\n    return keywords;\r\n  }\r\n\r\n  private getCompetitorRankings(keyword: string): CompetitorKeywordData[] {\r\n    const competitors = ['easy.com.ar', 'sodimac.com.ar', 'mercadolibre.com.ar'];\r\n\r\n    return competitors.map(domain => ({\r\n      domain,\r\n      position: Math.floor(Math.random() * 20) + 1,\r\n      url: `https://${domain}/search?q=${encodeURIComponent(keyword)}`,\r\n      title: `${keyword} - ${domain}`,\r\n      description: `Encuentra ${keyword} en ${domain} con los mejores precios y calidad.`\r\n    }));\r\n  }\r\n\r\n  private getRelatedKeywords(keyword: string): string[] {\r\n    const relatedMap: Record<string, string[]> = {\r\n      'pinturería online': ['pintura online', 'comprar pintura', 'tienda pintura'],\r\n      'pinturas sherwin williams': ['sherwin williams argentina', 'pintura sherwin', 'sw pinturas'],\r\n      'ferretería online': ['ferretería virtual', 'herramientas online', 'comprar herramientas'],\r\n      'herramientas pintura': ['rodillos pintura', 'pinceles', 'brochas pintura'],\r\n      'corralón online': ['materiales construcción', 'corralón virtual', 'construcción online']\r\n    };\r\n\r\n    return relatedMap[keyword] || [\r\n      `${keyword} precio`,\r\n      `${keyword} argentina`,\r\n      `mejor ${keyword}`\r\n    ];\r\n  }\r\n\r\n  private getSeasonalTrends(keyword: string): SeasonalData[] {\r\n    return Array.from({ length: 12 }, (_, month) => ({\r\n      month: month + 1,\r\n      searchVolume: Math.floor(Math.random() * 2000) + 500,\r\n      competition: Math.random(),\r\n      cpc: Math.random() * 3 + 0.5\r\n    }));\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE COMPETIDORES\r\n  // ===================================\r\n\r\n  private async updateCompetitorAnalysis(): Promise<void> {\r\n    try {\r\n      const competitors = await this.analyzeCompetitors();\r\n      this.competitors = competitors;\r\n\r\n      await this.cacheMetrics('latest_competitors', competitors);\r\n\r\n      this.notifyListeners({ type: 'competitors_updated', data: competitors });\r\n\r\n      logger.info(LogLevel.INFO, 'Competitor analysis updated', {\r\n        competitorsAnalyzed: competitors.length\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update competitor analysis', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  private async analyzeCompetitors(): Promise<CompetitorAnalysis[]> {\r\n    const competitorDomains = [\r\n      'easy.com.ar',\r\n      'sodimac.com.ar',\r\n      'mercadolibre.com.ar',\r\n      'pinturerias-rex.com.ar',\r\n      'sherwin-williams.com.ar'\r\n    ];\r\n\r\n    return Promise.all(competitorDomains.map(async (domain) => {\r\n      const organicKeywords = Math.floor(Math.random() * 10000) + 5000;\r\n      const organicTraffic = Math.floor(Math.random() * 500000) + 100000;\r\n\r\n      return {\r\n        competitor: domain.split('.')[0],\r\n        domain,\r\n        organicKeywords,\r\n        organicTraffic,\r\n        backlinks: Math.floor(Math.random() * 100000) + 10000,\r\n        domainAuthority: Math.floor(Math.random() * 40) + 40,\r\n        commonKeywords: this.getCommonKeywords(domain),\r\n        keywordGaps: this.getKeywordGaps(domain),\r\n        pageAuthority: Math.floor(Math.random() * 30) + 30,\r\n        trustFlow: Math.floor(Math.random() * 40) + 20,\r\n        citationFlow: Math.floor(Math.random() * 50) + 25,\r\n        referringDomains: Math.floor(Math.random() * 5000) + 1000,\r\n        organicCost: Math.floor(Math.random() * 100000) + 20000,\r\n        paidKeywords: Math.floor(Math.random() * 2000) + 500,\r\n        paidTraffic: Math.floor(Math.random() * 50000) + 10000,\r\n        paidCost: Math.floor(Math.random() * 50000) + 10000,\r\n        topPages: this.getCompetitorTopPages(domain),\r\n        contentGaps: this.getContentGaps(domain),\r\n        backlinksGaps: this.getBacklinkGaps(domain),\r\n        socialMetrics: this.getSocialMetrics(domain),\r\n        technicalSEOScore: Math.floor(Math.random() * 30) + 70,\r\n        lastAnalyzed: new Date()\r\n      };\r\n    }));\r\n  }\r\n\r\n  private getCommonKeywords(domain: string): string[] {\r\n    return [\r\n      'pintura interior',\r\n      'pintura exterior',\r\n      'herramientas pintura',\r\n      'rodillos',\r\n      'pinceles'\r\n    ];\r\n  }\r\n\r\n  private getKeywordGaps(domain: string): string[] {\r\n    return [\r\n      'pintura ecológica',\r\n      'pintura antimanchas',\r\n      'pintura magnética',\r\n      'pintura pizarra',\r\n      'pintura texturada'\r\n    ];\r\n  }\r\n\r\n  private getCompetitorTopPages(domain: string): CompetitorPage[] {\r\n    const pages = [\r\n      '/productos/pinturas',\r\n      '/herramientas',\r\n      '/ofertas',\r\n      '/marcas',\r\n      '/consejos'\r\n    ];\r\n\r\n    return pages.map(url => ({\r\n      url: `https://${domain}${url}`,\r\n      title: `${url.split('/').pop()} - ${domain}`,\r\n      traffic: Math.floor(Math.random() * 10000) + 1000,\r\n      keywords: Math.floor(Math.random() * 100) + 20,\r\n      backlinks: Math.floor(Math.random() * 500) + 50,\r\n      socialShares: Math.floor(Math.random() * 1000) + 100\r\n    }));\r\n  }\r\n\r\n  private getContentGaps(domain: string): ContentGap[] {\r\n    return [\r\n      {\r\n        topic: 'Guías de pintura',\r\n        keywords: ['como pintar', 'técnicas pintura', 'consejos pintura'],\r\n        searchVolume: 5000,\r\n        difficulty: 45,\r\n        opportunity: 'high'\r\n      },\r\n      {\r\n        topic: 'Comparativas de productos',\r\n        keywords: ['mejor pintura', 'comparar pinturas', 'pintura vs pintura'],\r\n        searchVolume: 3000,\r\n        difficulty: 60,\r\n        opportunity: 'medium'\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getBacklinkGaps(domain: string): BacklinkGap[] {\r\n    return [\r\n      {\r\n        domain: 'arquitectura.com',\r\n        domainAuthority: 65,\r\n        linkType: 'dofollow',\r\n        anchorText: 'mejores pinturas',\r\n        opportunity: 'high'\r\n      },\r\n      {\r\n        domain: 'decoracion.com.ar',\r\n        domainAuthority: 55,\r\n        linkType: 'dofollow',\r\n        anchorText: 'pintura interior',\r\n        opportunity: 'medium'\r\n      }\r\n    ];\r\n  }\r\n\r\n  private getSocialMetrics(domain: string): SocialMetrics {\r\n    return {\r\n      facebook: {\r\n        likes: Math.floor(Math.random() * 50000) + 10000,\r\n        shares: Math.floor(Math.random() * 5000) + 1000,\r\n        comments: Math.floor(Math.random() * 2000) + 500\r\n      },\r\n      twitter: {\r\n        followers: Math.floor(Math.random() * 20000) + 5000,\r\n        tweets: Math.floor(Math.random() * 1000) + 200,\r\n        retweets: Math.floor(Math.random() * 500) + 100\r\n      },\r\n      linkedin: {\r\n        followers: Math.floor(Math.random() * 10000) + 2000,\r\n        posts: Math.floor(Math.random() * 200) + 50,\r\n        engagement: Math.floor(Math.random() * 1000) + 200\r\n      },\r\n      instagram: {\r\n        followers: Math.floor(Math.random() * 30000) + 8000,\r\n        posts: Math.floor(Math.random() * 500) + 100,\r\n        engagement: Math.floor(Math.random() * 2000) + 500\r\n      }\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // SISTEMA DE ALERTAS AVANZADO\r\n  // ===================================\r\n\r\n  private async checkAlerts(): Promise<void> {\r\n    try {\r\n      const alerts = await this.detectSEOIssues();\r\n\r\n      // Enviar alertas críticas al sistema de alertas\r\n      const criticalAlerts = alerts.filter(alert => alert.type === 'critical');\r\n      for (const alert of criticalAlerts) {\r\n        await advancedAlertingEngine.createAlert(\r\n          AlertType.PERFORMANCE,\r\n          AlertSeverity.CRITICAL,\r\n          alert.title,\r\n          alert.description,\r\n          {\r\n            category: alert.category,\r\n            url: alert.url,\r\n            severity: alert.severity,\r\n            recommendations: alert.recommendations\r\n          }\r\n        );\r\n      }\r\n\r\n      this.notifyListeners({ type: 'alerts_updated', data: alerts });\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to check SEO alerts', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  private async checkMetricsThresholds(metrics: SEOMetrics): Promise<void> {\r\n    const alerts: SEOAlert[] = [];\r\n\r\n    // Verificar Core Web Vitals\r\n    if (metrics.coreWebVitals.score === 'poor') {\r\n      alerts.push(await this.createAlert(\r\n        'critical',\r\n        'performance',\r\n        'Core Web Vitals críticos',\r\n        `Las métricas de Core Web Vitals están en estado crítico. LCP: ${metrics.coreWebVitals.lcp}ms, FID: ${metrics.coreWebVitals.fid}ms, CLS: ${metrics.coreWebVitals.cls}`,\r\n        ['Optimizar imágenes y recursos', 'Reducir JavaScript que bloquea', 'Mejorar estabilidad del layout'],\r\n        'high',\r\n        9\r\n      ));\r\n    }\r\n\r\n    // Verificar tasa de indexación\r\n    if (metrics.indexationStatus.indexationRate < 90) {\r\n      alerts.push(await this.createAlert(\r\n        'warning',\r\n        'indexation',\r\n        'Baja tasa de indexación',\r\n        `Solo el ${metrics.indexationStatus.indexationRate}% de las páginas están indexadas`,\r\n        ['Revisar robots.txt', 'Verificar sitemap', 'Analizar errores de crawl'],\r\n        'medium',\r\n        7\r\n      ));\r\n    }\r\n\r\n    // Verificar tráfico orgánico\r\n    const previousMetrics = this.getLastMetrics();\r\n    if (previousMetrics && metrics.organicTraffic < previousMetrics.organicTraffic * 0.8) {\r\n      const drop = ((previousMetrics.organicTraffic - metrics.organicTraffic) / previousMetrics.organicTraffic * 100).toFixed(1);\r\n      alerts.push(await this.createAlert(\r\n        'warning',\r\n        'content',\r\n        'Caída en tráfico orgánico',\r\n        `El tráfico orgánico ha caído un ${drop}% respecto al período anterior`,\r\n        ['Analizar cambios en rankings', 'Revisar contenido actualizado', 'Verificar penalizaciones'],\r\n        'high',\r\n        8\r\n      ));\r\n    }\r\n\r\n    if (alerts.length > 0) {\r\n      this.alerts.push(...alerts);\r\n    }\r\n  }\r\n\r\n  private async checkKeywordAlerts(keywords: KeywordMetrics[]): Promise<void> {\r\n    const alerts: SEOAlert[] = [];\r\n\r\n    // Verificar caídas significativas en rankings\r\n    const significantDrops = keywords.filter(k =>\r\n      k.previousPosition && k.position > k.previousPosition + this.config.alertThresholds.rankingDrop\r\n    );\r\n\r\n    if (significantDrops.length > 0) {\r\n      alerts.push(await this.createAlert(\r\n        'warning',\r\n        'content',\r\n        'Caídas significativas en rankings',\r\n        `${significantDrops.length} keywords han caído más de ${this.config.alertThresholds.rankingDrop} posiciones`,\r\n        ['Analizar cambios en contenido', 'Revisar competencia', 'Optimizar páginas afectadas'],\r\n        'medium',\r\n        6\r\n      ));\r\n    }\r\n\r\n    // Verificar keywords que salieron del top 10\r\n    const lostTopPositions = keywords.filter(k =>\r\n      k.previousPosition && k.previousPosition <= 10 && k.position > 10\r\n    );\r\n\r\n    if (lostTopPositions.length > 0) {\r\n      alerts.push(await this.createAlert(\r\n        'critical',\r\n        'content',\r\n        'Keywords perdieron posiciones top 10',\r\n        `${lostTopPositions.length} keywords importantes salieron del top 10`,\r\n        ['Priorizar optimización de contenido', 'Analizar intención de búsqueda', 'Mejorar autoridad de página'],\r\n        'high',\r\n        9\r\n      ));\r\n    }\r\n\r\n    if (alerts.length > 0) {\r\n      this.alerts.push(...alerts);\r\n    }\r\n  }\r\n\r\n  // Detectar problemas SEO avanzados\r\n  async detectSEOIssues(): Promise<SEOAlert[]> {\r\n    const alerts: SEOAlert[] = [];\r\n\r\n    // Análisis técnico\r\n    const technicalIssues = await this.detectTechnicalIssues();\r\n    alerts.push(...technicalIssues);\r\n\r\n    // Análisis de contenido\r\n    const contentIssues = await this.detectContentIssues();\r\n    alerts.push(...contentIssues);\r\n\r\n    // Análisis de performance\r\n    const performanceIssues = await this.detectPerformanceIssues();\r\n    alerts.push(...performanceIssues);\r\n\r\n    // Análisis de mobile\r\n    const mobileIssues = await this.detectMobileIssues();\r\n    alerts.push(...mobileIssues);\r\n\r\n    // Agregar alertas al array del manager\r\n    this.alerts.push(...alerts);\r\n\r\n    return alerts;\r\n  }\r\n\r\n  // Métodos de detección de issues específicos\r\n  private async detectTechnicalIssues(): Promise<SEOAlert[]> {\r\n    const issues: SEOAlert[] = [];\r\n\r\n    // Simular detección de problemas técnicos\r\n    const technicalProblems = [\r\n      {\r\n        type: 'warning' as const,\r\n        category: 'technical' as const,\r\n        title: 'Páginas con tiempo de carga lento',\r\n        description: '3 páginas tienen un LCP superior a 4 segundos',\r\n        affectedPages: ['/products/pintura-premium', '/categories/herramientas', '/checkout'],\r\n        impact: 'high' as const,\r\n        effort: 'medium' as const,\r\n        priority: 8,\r\n        estimatedTrafficImpact: 15,\r\n        estimatedRevenueImpact: 5000\r\n      },\r\n      {\r\n        type: 'info' as const,\r\n        category: 'schema' as const,\r\n        title: 'Schema markup faltante',\r\n        description: 'Algunas páginas de productos no tienen structured data',\r\n        affectedPages: ['/products/pintura-exterior', '/products/rodillos'],\r\n        impact: 'medium' as const,\r\n        effort: 'low' as const,\r\n        priority: 5,\r\n        estimatedTrafficImpact: 8,\r\n        estimatedRevenueImpact: 2000\r\n      }\r\n    ];\r\n\r\n    for (const problem of technicalProblems) {\r\n      issues.push(await this.createAdvancedAlert(problem));\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private async detectContentIssues(): Promise<SEOAlert[]> {\r\n    const issues: SEOAlert[] = [];\r\n\r\n    const contentProblems = [\r\n      {\r\n        type: 'warning' as const,\r\n        category: 'content' as const,\r\n        title: 'Meta descriptions faltantes',\r\n        description: '5 páginas importantes no tienen meta description',\r\n        affectedPages: ['/about', '/shipping', '/returns', '/contact', '/blog'],\r\n        impact: 'medium' as const,\r\n        effort: 'low' as const,\r\n        priority: 6,\r\n        estimatedTrafficImpact: 10,\r\n        estimatedRevenueImpact: 1500\r\n      },\r\n      {\r\n        type: 'info' as const,\r\n        category: 'content' as const,\r\n        title: 'Oportunidades de contenido',\r\n        description: 'Se detectaron 8 keywords con potencial de mejora',\r\n        affectedPages: [],\r\n        impact: 'high' as const,\r\n        effort: 'high' as const,\r\n        priority: 7,\r\n        estimatedTrafficImpact: 25,\r\n        estimatedRevenueImpact: 8000\r\n      }\r\n    ];\r\n\r\n    for (const problem of contentProblems) {\r\n      issues.push(await this.createAdvancedAlert(problem));\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private async detectPerformanceIssues(): Promise<SEOAlert[]> {\r\n    const issues: SEOAlert[] = [];\r\n\r\n    const performanceProblems = [\r\n      {\r\n        type: 'critical' as const,\r\n        category: 'performance' as const,\r\n        title: 'Imágenes sin optimizar',\r\n        description: 'Múltiples imágenes grandes están afectando el LCP',\r\n        affectedPages: ['/products/pintura-interior', '/home'],\r\n        impact: 'high' as const,\r\n        effort: 'medium' as const,\r\n        priority: 9,\r\n        estimatedTrafficImpact: 20,\r\n        estimatedRevenueImpact: 6000\r\n      }\r\n    ];\r\n\r\n    for (const problem of performanceProblems) {\r\n      issues.push(await this.createAdvancedAlert(problem));\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private async detectMobileIssues(): Promise<SEOAlert[]> {\r\n    const issues: SEOAlert[] = [];\r\n\r\n    const mobileProblems = [\r\n      {\r\n        type: 'warning' as const,\r\n        category: 'mobile' as const,\r\n        title: 'Problemas de usabilidad móvil',\r\n        description: 'Algunos elementos son demasiado pequeños para tocar en móvil',\r\n        affectedPages: ['/cart', '/checkout'],\r\n        impact: 'medium' as const,\r\n        effort: 'medium' as const,\r\n        priority: 6,\r\n        estimatedTrafficImpact: 12,\r\n        estimatedRevenueImpact: 3000\r\n      }\r\n    ];\r\n\r\n    for (const problem of mobileProblems) {\r\n      issues.push(await this.createAdvancedAlert(problem));\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private async createAlert(\r\n    type: 'critical' | 'warning' | 'info',\r\n    category: SEOAlert['category'],\r\n    title: string,\r\n    description: string,\r\n    recommendations: string[],\r\n    impact: 'high' | 'medium' | 'low',\r\n    priority: number\r\n  ): Promise<SEOAlert> {\r\n    return {\r\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      type,\r\n      category,\r\n      title,\r\n      description,\r\n      severity: priority,\r\n      timestamp: new Date(),\r\n      resolved: false,\r\n      recommendations,\r\n      impact,\r\n      effort: 'medium',\r\n      priority,\r\n      affectedPages: [],\r\n      estimatedTrafficImpact: 0,\r\n      estimatedRevenueImpact: 0,\r\n      relatedAlerts: [],\r\n      autoResolvable: false,\r\n      resolutionSteps: [],\r\n      lastOccurrence: new Date(),\r\n      frequency: 1,\r\n      tags: [category, impact]\r\n    };\r\n  }\r\n\r\n  private async createAdvancedAlert(problem: any): Promise<SEOAlert> {\r\n    return {\r\n      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      type: problem.type,\r\n      category: problem.category,\r\n      title: problem.title,\r\n      description: problem.description,\r\n      severity: problem.priority,\r\n      timestamp: new Date(),\r\n      resolved: false,\r\n      recommendations: this.getRecommendationsForCategory(problem.category),\r\n      impact: problem.impact,\r\n      effort: problem.effort,\r\n      priority: problem.priority,\r\n      affectedPages: problem.affectedPages,\r\n      estimatedTrafficImpact: problem.estimatedTrafficImpact,\r\n      estimatedRevenueImpact: problem.estimatedRevenueImpact,\r\n      relatedAlerts: [],\r\n      autoResolvable: problem.category === 'schema' || problem.category === 'content',\r\n      resolutionSteps: this.getResolutionSteps(problem.category),\r\n      lastOccurrence: new Date(),\r\n      frequency: 1,\r\n      tags: [problem.category, problem.impact, problem.type]\r\n    };\r\n  }\r\n\r\n  private getRecommendationsForCategory(category: string): string[] {\r\n    const recommendations: Record<string, string[]> = {\r\n      technical: [\r\n        'Optimizar imágenes y recursos',\r\n        'Implementar lazy loading',\r\n        'Revisar recursos que bloquean el renderizado',\r\n        'Configurar compresión GZIP'\r\n      ],\r\n      content: [\r\n        'Crear contenido específico para keywords objetivo',\r\n        'Optimizar meta descriptions',\r\n        'Mejorar estructura de headings',\r\n        'Agregar contenido relevante y único'\r\n      ],\r\n      performance: [\r\n        'Optimizar Core Web Vitals',\r\n        'Reducir tiempo de carga',\r\n        'Implementar CDN',\r\n        'Optimizar JavaScript y CSS'\r\n      ],\r\n      mobile: [\r\n        'Mejorar experiencia móvil',\r\n        'Ajustar tamaños de elementos táctiles',\r\n        'Optimizar viewport',\r\n        'Implementar diseño responsive'\r\n      ],\r\n      schema: [\r\n        'Implementar structured data',\r\n        'Validar markup existente',\r\n        'Agregar schema de productos',\r\n        'Configurar breadcrumbs schema'\r\n      ]\r\n    };\r\n\r\n    return recommendations[category] || ['Revisar y optimizar según mejores prácticas SEO'];\r\n  }\r\n\r\n  private getResolutionSteps(category: string): ResolutionStep[] {\r\n    const steps: Record<string, ResolutionStep[]> = {\r\n      technical: [\r\n        {\r\n          step: 1,\r\n          description: 'Analizar páginas afectadas',\r\n          action: 'Usar herramientas de análisis de performance',\r\n          estimatedTime: 30,\r\n          difficulty: 'easy',\r\n          requiredSkills: ['SEO básico']\r\n        },\r\n        {\r\n          step: 2,\r\n          description: 'Optimizar recursos',\r\n          action: 'Comprimir imágenes y minificar CSS/JS',\r\n          estimatedTime: 120,\r\n          difficulty: 'medium',\r\n          requiredSkills: ['Desarrollo web', 'Optimización']\r\n        }\r\n      ],\r\n      content: [\r\n        {\r\n          step: 1,\r\n          description: 'Auditar contenido existente',\r\n          action: 'Revisar meta tags y contenido de páginas',\r\n          estimatedTime: 60,\r\n          difficulty: 'easy',\r\n          requiredSkills: ['SEO', 'Redacción']\r\n        },\r\n        {\r\n          step: 2,\r\n          description: 'Crear contenido optimizado',\r\n          action: 'Escribir meta descriptions y mejorar contenido',\r\n          estimatedTime: 180,\r\n          difficulty: 'medium',\r\n          requiredSkills: ['SEO', 'Redacción', 'Marketing']\r\n        }\r\n      ]\r\n    };\r\n\r\n    return steps[category] || [];\r\n  }\r\n\r\n  // ===================================\r\n  // GENERACIÓN DE REPORTES AVANZADOS\r\n  // ===================================\r\n\r\n  // Generar reporte SEO completo\r\n  async generateSEOReport(\r\n    period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'custom',\r\n    customDateRange?: { start: Date; end: Date }\r\n  ): Promise<SEOReport> {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n\r\n    if (customDateRange) {\r\n      startDate.setTime(customDateRange.start.getTime());\r\n      endDate.setTime(customDateRange.end.getTime());\r\n    } else {\r\n      switch (period) {\r\n        case 'daily':\r\n          startDate.setDate(endDate.getDate() - 1);\r\n          break;\r\n        case 'weekly':\r\n          startDate.setDate(endDate.getDate() - 7);\r\n          break;\r\n        case 'monthly':\r\n          startDate.setMonth(endDate.getMonth() - 1);\r\n          break;\r\n        case 'quarterly':\r\n          startDate.setMonth(endDate.getMonth() - 3);\r\n          break;\r\n        case 'yearly':\r\n          startDate.setFullYear(endDate.getFullYear() - 1);\r\n          break;\r\n      }\r\n    }\r\n\r\n    const metrics = await this.collectAndProcessMetrics();\r\n    const keywords = await this.analyzeKeywords();\r\n    const alerts = await this.detectSEOIssues();\r\n    const competitors = this.competitors;\r\n\r\n    const report: SEOReport = {\r\n      id: `report-${Date.now()}`,\r\n      period,\r\n      startDate,\r\n      endDate,\r\n      metrics: this.getLastMetrics() || metrics,\r\n      keywords,\r\n      alerts,\r\n      recommendations: await this.generateRecommendations(),\r\n      competitorAnalysis: competitors,\r\n      executiveSummary: await this.generateExecutiveSummary(),\r\n      performanceAnalysis: await this.generatePerformanceAnalysis(),\r\n      keywordAnalysis: await this.generateKeywordAnalysis(keywords),\r\n      technicalAnalysis: await this.generateTechnicalAnalysis(),\r\n      contentAnalysis: await this.generateContentAnalysis(),\r\n      competitiveAnalysis: await this.generateCompetitiveAnalysis(competitors),\r\n      actionPlan: await this.generateActionPlan(),\r\n      generatedBy: 'Enhanced SEO Analytics Manager',\r\n      generatedAt: new Date(),\r\n      version: '2.0.0',\r\n      exportFormats: ['pdf', 'excel', 'csv', 'json'],\r\n      scheduledDelivery: []\r\n    };\r\n\r\n    this.reports.push(report);\r\n    await this.cacheMetrics(`report_${report.id}`, report);\r\n\r\n    logger.info(LogLevel.INFO, 'SEO report generated', {\r\n      reportId: report.id,\r\n      period,\r\n      overallScore: report.executiveSummary.overallScore,\r\n      alertsCount: alerts.length,\r\n      keywordsCount: keywords.length\r\n    }, LogCategory.SEO);\r\n\r\n    return report;\r\n  }\r\n\r\n  // Métodos de generación de análisis específicos\r\n  private async generateExecutiveSummary(): Promise<ExecutiveSummary> {\r\n    const currentMetrics = this.getLastMetrics();\r\n    const overallScore = currentMetrics ? this.calculateOverallSEOScore(currentMetrics) : 85;\r\n\r\n    return {\r\n      overallScore,\r\n      scoreChange: Math.floor(Math.random() * 10) - 5, // -5 a +5\r\n      keyAchievements: [\r\n        'CTR aumentó 12% en la última semana',\r\n        'Posición promedio mejoró 2.3 posiciones',\r\n        'Tráfico orgánico creció 8%',\r\n        'Core Web Vitals mejorados en 15%'\r\n      ],\r\n      majorConcerns: [\r\n        'Algunas páginas tienen LCP alto',\r\n        'Falta schema markup en productos',\r\n        'Meta descriptions incompletas'\r\n      ],\r\n      quickWins: [\r\n        'Agregar meta descriptions faltantes',\r\n        'Implementar schema de productos',\r\n        'Optimizar imágenes principales',\r\n        'Mejorar títulos de páginas'\r\n      ],\r\n      budgetRecommendations: [\r\n        {\r\n          category: 'Contenido',\r\n          description: 'Creación de contenido optimizado para keywords objetivo',\r\n          estimatedCost: 15000,\r\n          expectedROI: 3.5,\r\n          timeframe: '3 meses'\r\n        },\r\n        {\r\n          category: 'Técnico',\r\n          description: 'Optimización de performance y Core Web Vitals',\r\n          estimatedCost: 25000,\r\n          expectedROI: 2.8,\r\n          timeframe: '2 meses'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generatePerformanceAnalysis(): Promise<PerformanceAnalysis> {\r\n    const currentMetrics = this.getLastMetrics();\r\n    const cwv = currentMetrics?.coreWebVitals;\r\n\r\n    return {\r\n      coreWebVitalsScore: cwv?.score === 'good' ? 90 : cwv?.score === 'needs-improvement' ? 70 : 40,\r\n      coreWebVitalsChange: Math.floor(Math.random() * 20) - 10,\r\n      pageSpeedScore: Math.floor(Math.random() * 30) + 70,\r\n      pageSpeedChange: Math.floor(Math.random() * 10) - 5,\r\n      mobileScore: Math.floor(Math.random() * 20) + 80,\r\n      mobileChange: Math.floor(Math.random() * 8) - 4,\r\n      slowestPages: [\r\n        {\r\n          url: '/products/pintura-premium',\r\n          lcp: 4200,\r\n          fid: 150,\r\n          cls: 0.15,\r\n          speedIndex: 3800,\r\n          totalBlockingTime: 300,\r\n          issues: ['Imágenes grandes sin optimizar', 'JavaScript bloqueante']\r\n        },\r\n        {\r\n          url: '/checkout',\r\n          lcp: 3800,\r\n          fid: 120,\r\n          cls: 0.12,\r\n          speedIndex: 3500,\r\n          totalBlockingTime: 250,\r\n          issues: ['Formularios complejos', 'Validaciones síncronas']\r\n        }\r\n      ],\r\n      performanceRecommendations: [\r\n        'Implementar lazy loading para imágenes',\r\n        'Optimizar JavaScript crítico',\r\n        'Usar CDN para recursos estáticos',\r\n        'Implementar service workers'\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generateKeywordAnalysis(keywords: KeywordMetrics[]): Promise<KeywordAnalysis> {\r\n    const totalKeywords = keywords.length;\r\n    const averagePosition = keywords.reduce((sum, k) => sum + k.position, 0) / totalKeywords;\r\n\r\n    return {\r\n      totalKeywords,\r\n      keywordsChange: Math.floor(Math.random() * 20) - 10,\r\n      averagePosition: Number(averagePosition.toFixed(1)),\r\n      positionChange: Math.random() * 4 - 2,\r\n      topGainers: keywords\r\n        .filter(k => k.trend === 'up')\r\n        .sort((a, b) => (a.previousPosition || 50) - a.position - ((b.previousPosition || 50) - b.position))\r\n        .slice(0, 5),\r\n      topLosers: keywords\r\n        .filter(k => k.trend === 'down')\r\n        .sort((a, b) => (b.position - (b.previousPosition || 1)) - (a.position - (a.previousPosition || 1)))\r\n        .slice(0, 5),\r\n      newKeywords: keywords.filter(k => !k.previousPosition).slice(0, 3),\r\n      lostKeywords: [], // Simulated\r\n      opportunityKeywords: keywords\r\n        .filter(k => k.position > 10 && k.position <= 20)\r\n        .sort((a, b) => b.searchVolume - a.searchVolume)\r\n        .slice(0, 10)\r\n    };\r\n  }\r\n\r\n  private async generateTechnicalAnalysis(): Promise<TechnicalAnalysis> {\r\n    return {\r\n      crawlabilityScore: Math.floor(Math.random() * 20) + 80,\r\n      indexabilityScore: Math.floor(Math.random() * 15) + 85,\r\n      structuredDataScore: Math.floor(Math.random() * 25) + 75,\r\n      mobileUsabilityScore: Math.floor(Math.random() * 20) + 80,\r\n      securityScore: Math.floor(Math.random() * 10) + 90,\r\n      technicalIssues: [\r\n        {\r\n          type: 'Missing meta descriptions',\r\n          severity: 'medium',\r\n          count: 5,\r\n          affectedPages: ['/about', '/contact', '/shipping'],\r\n          description: 'Páginas importantes sin meta description',\r\n          fix: 'Agregar meta descriptions únicas y descriptivas'\r\n        },\r\n        {\r\n          type: 'Large images',\r\n          severity: 'high',\r\n          count: 12,\r\n          affectedPages: ['/products/pintura-interior', '/home'],\r\n          description: 'Imágenes grandes que afectan el LCP',\r\n          fix: 'Optimizar y comprimir imágenes'\r\n        }\r\n      ],\r\n      improvements: [\r\n        'Implementar schema markup en todas las páginas de productos',\r\n        'Optimizar robots.txt para mejor crawling',\r\n        'Agregar breadcrumbs estructurados',\r\n        'Mejorar estructura de URLs'\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generateContentAnalysis(): Promise<ContentAnalysis> {\r\n    return {\r\n      totalPages: 150,\r\n      indexedPages: 142,\r\n      duplicateContent: 3,\r\n      thinContent: 8,\r\n      missingMetaTags: 12,\r\n      contentQualityScore: Math.floor(Math.random() * 20) + 75,\r\n      topPerformingContent: [\r\n        {\r\n          url: '/blog/como-elegir-pintura-interior',\r\n          title: 'Cómo elegir la pintura interior perfecta',\r\n          wordCount: 1500,\r\n          readabilityScore: 85,\r\n          organicTraffic: 2500,\r\n          socialShares: 150,\r\n          backlinks: 25,\r\n          conversionRate: 3.2\r\n        },\r\n        {\r\n          url: '/guia/herramientas-pintura',\r\n          title: 'Guía completa de herramientas de pintura',\r\n          wordCount: 2200,\r\n          readabilityScore: 78,\r\n          organicTraffic: 1800,\r\n          socialShares: 89,\r\n          backlinks: 18,\r\n          conversionRate: 2.8\r\n        }\r\n      ],\r\n      contentGaps: [\r\n        'Guías de aplicación de pintura',\r\n        'Comparativas de marcas',\r\n        'Tendencias en decoración',\r\n        'Mantenimiento de herramientas'\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generateCompetitiveAnalysis(competitors: CompetitorAnalysis[]): Promise<CompetitiveAnalysis> {\r\n    return {\r\n      marketShare: Math.floor(Math.random() * 15) + 10, // 10-25%\r\n      visibilityScore: Math.floor(Math.random() * 30) + 60, // 60-90\r\n      competitorComparison: competitors.slice(0, 3).map(comp => ({\r\n        competitor: comp.competitor,\r\n        ourPosition: Math.floor(Math.random() * 10) + 5,\r\n        theirPosition: Math.floor(Math.random() * 8) + 3,\r\n        gap: Math.floor(Math.random() * 5) + 1,\r\n        opportunity: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low'\r\n      })),\r\n      opportunityAnalysis: [\r\n        {\r\n          type: 'keyword',\r\n          description: 'Keywords de cola larga con baja competencia',\r\n          potential: 85,\r\n          difficulty: 35,\r\n          priority: 'high'\r\n        },\r\n        {\r\n          type: 'content',\r\n          description: 'Gaps de contenido en guías técnicas',\r\n          potential: 70,\r\n          difficulty: 50,\r\n          priority: 'medium'\r\n        },\r\n        {\r\n          type: 'backlink',\r\n          description: 'Oportunidades de enlaces en sitios de arquitectura',\r\n          potential: 60,\r\n          difficulty: 70,\r\n          priority: 'medium'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generateActionPlan(): Promise<ActionPlan> {\r\n    return {\r\n      quickWins: [\r\n        {\r\n          id: 'qw-1',\r\n          title: 'Agregar meta descriptions faltantes',\r\n          description: 'Completar meta descriptions en 5 páginas importantes',\r\n          category: 'Content',\r\n          priority: 'high',\r\n          effort: 'low',\r\n          impact: 'medium',\r\n          estimatedTime: 2,\r\n          dependencies: [],\r\n          kpis: ['CTR', 'Impresiones']\r\n        },\r\n        {\r\n          id: 'qw-2',\r\n          title: 'Implementar schema de productos',\r\n          description: 'Agregar structured data a páginas de productos',\r\n          category: 'Technical',\r\n          priority: 'high',\r\n          effort: 'low',\r\n          impact: 'high',\r\n          estimatedTime: 3,\r\n          dependencies: [],\r\n          kpis: ['Rich snippets', 'CTR']\r\n        }\r\n      ],\r\n      shortTerm: [\r\n        {\r\n          id: 'st-1',\r\n          title: 'Optimizar Core Web Vitals',\r\n          description: 'Mejorar LCP, FID y CLS en páginas principales',\r\n          category: 'Performance',\r\n          priority: 'high',\r\n          effort: 'medium',\r\n          impact: 'high',\r\n          estimatedTime: 14,\r\n          dependencies: ['qw-2'],\r\n          kpis: ['LCP', 'FID', 'CLS', 'Page Speed Score']\r\n        }\r\n      ],\r\n      longTerm: [\r\n        {\r\n          id: 'lt-1',\r\n          title: 'Estrategia de contenido SEO',\r\n          description: 'Crear plan de contenido para keywords objetivo',\r\n          category: 'Content',\r\n          priority: 'medium',\r\n          effort: 'high',\r\n          impact: 'high',\r\n          estimatedTime: 90,\r\n          dependencies: ['st-1'],\r\n          kpis: ['Organic Traffic', 'Keyword Rankings', 'Conversions']\r\n        }\r\n      ],\r\n      ongoing: [\r\n        {\r\n          id: 'og-1',\r\n          title: 'Monitoreo y optimización continua',\r\n          description: 'Seguimiento mensual de métricas y ajustes',\r\n          category: 'Monitoring',\r\n          priority: 'medium',\r\n          effort: 'low',\r\n          impact: 'medium',\r\n          estimatedTime: 30, // mensual\r\n          dependencies: [],\r\n          kpis: ['Overall SEO Score', 'Organic Growth']\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private async generateRecommendations(): Promise<SEORecommendation[]> {\r\n    return [\r\n      {\r\n        id: 'rec-1',\r\n        category: 'performance',\r\n        title: 'Optimizar Core Web Vitals',\r\n        description: 'Mejorar LCP, FID y CLS para mejor experiencia de usuario y rankings',\r\n        priority: 'high',\r\n        impact: 'high',\r\n        effort: 'medium',\r\n        estimatedTimeToImplement: 14,\r\n        estimatedTrafficIncrease: 15,\r\n        estimatedRevenueIncrease: 25000,\r\n        implementationSteps: [\r\n          'Auditar páginas con peor performance',\r\n          'Optimizar imágenes y recursos',\r\n          'Implementar lazy loading',\r\n          'Optimizar JavaScript crítico'\r\n        ],\r\n        requiredResources: ['Desarrollador frontend', 'Herramientas de optimización'],\r\n        kpis: ['LCP', 'FID', 'CLS', 'Page Speed Score'],\r\n        relatedRecommendations: ['rec-2'],\r\n        status: 'pending',\r\n        notes: []\r\n      },\r\n      {\r\n        id: 'rec-2',\r\n        category: 'technical',\r\n        title: 'Implementar schema markup completo',\r\n        description: 'Agregar structured data a todas las páginas de productos y categorías',\r\n        priority: 'high',\r\n        impact: 'medium',\r\n        effort: 'low',\r\n        estimatedTimeToImplement: 7,\r\n        estimatedTrafficIncrease: 8,\r\n        estimatedRevenueIncrease: 12000,\r\n        implementationSteps: [\r\n          'Definir schemas necesarios',\r\n          'Implementar en templates',\r\n          'Validar con herramientas de Google',\r\n          'Monitorear rich snippets'\r\n        ],\r\n        requiredResources: ['Desarrollador', 'Herramientas de validación'],\r\n        kpis: ['Rich snippets', 'CTR', 'Impresiones'],\r\n        relatedRecommendations: ['rec-1'],\r\n        status: 'pending',\r\n        notes: []\r\n      }\r\n    ];\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE UTILIDAD Y CACHE\r\n  // ===================================\r\n\r\n  private async cacheMetrics(key: string, data: any): Promise<void> {\r\n    try {\r\n      const cacheKey = `seo_analytics:${key}`;\r\n      const cacheData = { data, timestamp: Date.now() };\r\n\r\n      // Cache en Redis si está disponible\r\n      if (this.redis) {\r\n        await this.redis.setex(cacheKey, this.config.cache.ttl, JSON.stringify(cacheData));\r\n      }\r\n\r\n      // Cache en memoria\r\n      this.cache.set(cacheKey, cacheData);\r\n\r\n      // Limpiar cache si excede el tamaño máximo\r\n      if (this.cache.size > this.config.cache.maxSize) {\r\n        const oldestKey = this.cache.keys().next().value;\r\n        this.cache.delete(oldestKey);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Failed to cache SEO metrics', { key }, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  private async getCachedMetrics(key: string): Promise<any> {\r\n    try {\r\n      const cacheKey = `seo_analytics:${key}`;\r\n\r\n      // Intentar Redis primero\r\n      if (this.redis) {\r\n        const cached = await this.redis.get(cacheKey);\r\n        if (cached) {\r\n          const parsed = JSON.parse(cached);\r\n          if (Date.now() - parsed.timestamp < this.config.cache.ttl * 1000) {\r\n            return parsed.data;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Fallback a cache en memoria\r\n      const memoryCached = this.cache.get(cacheKey);\r\n      if (memoryCached) {\r\n        if (Date.now() - memoryCached.timestamp < this.config.cache.ttl * 1000) {\r\n          return memoryCached.data;\r\n        } else {\r\n          this.cache.delete(cacheKey);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Failed to get cached SEO metrics', { key }, LogCategory.SEO);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Obtener métricas históricas\r\n  getHistoricalMetrics(days: number = 30): SEOMetrics[] {\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(cutoffDate.getDate() - days);\r\n\r\n    return this.metrics.filter(metric => metric.timestamp >= cutoffDate);\r\n  }\r\n\r\n  // Obtener últimas métricas\r\n  getLastMetrics(): SEOMetrics | null {\r\n    return this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null;\r\n  }\r\n\r\n  // Calcular score SEO general mejorado\r\n  private calculateOverallSEOScore(metrics: SEOMetrics): number {\r\n    let score = 0;\r\n    let factors = 0;\r\n\r\n    // Core Web Vitals (30%)\r\n    if (metrics.coreWebVitals.score === 'good') {score += 30;}\r\n    else if (metrics.coreWebVitals.score === 'needs-improvement') {score += 20;}\r\n    else {score += 10;}\r\n    factors += 30;\r\n\r\n    // Indexación (20%)\r\n    score += (metrics.indexationStatus.indexationRate / 100) * 20;\r\n    factors += 20;\r\n\r\n    // CTR (15%)\r\n    const normalizedCTR = Math.min(metrics.ctr / 10, 1); // Normalizar a 0-1\r\n    score += normalizedCTR * 15;\r\n    factors += 15;\r\n\r\n    // Posición promedio (15%)\r\n    const positionScore = Math.max(0, (50 - metrics.avgPosition) / 50);\r\n    score += positionScore * 15;\r\n    factors += 15;\r\n\r\n    // Tráfico orgánico (10%)\r\n    const trafficScore = Math.min(metrics.organicTraffic / 10000, 1); // Normalizar\r\n    score += trafficScore * 10;\r\n    factors += 10;\r\n\r\n    // Alertas críticas (10%)\r\n    const criticalAlerts = this.alerts.filter(a => a.type === 'critical' && !a.resolved).length;\r\n    const alertPenalty = Math.min(criticalAlerts * 2, 10);\r\n    score += Math.max(0, 10 - alertPenalty);\r\n    factors += 10;\r\n\r\n    return Math.round(score);\r\n  }\r\n\r\n  // Obtener keywords por tendencia\r\n  getKeywordsByTrend(trend: 'up' | 'down' | 'stable'): KeywordMetrics[] {\r\n    return this.keywords.filter(keyword => keyword.trend === trend);\r\n  }\r\n\r\n  // Obtener alertas por tipo\r\n  getAlertsByType(type: 'critical' | 'warning' | 'info'): SEOAlert[] {\r\n    return this.alerts.filter(alert => alert.type === type && !alert.resolved);\r\n  }\r\n\r\n  // Obtener alertas no resueltas\r\n  getUnresolvedAlerts(): SEOAlert[] {\r\n    return this.alerts.filter(alert => !alert.resolved);\r\n  }\r\n\r\n  // Resolver alerta mejorado\r\n  async resolveAlert(alertId: string, notes?: string): Promise<boolean> {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      alert.resolved = true;\r\n      if (notes) {\r\n        if (!alert.notes) {\r\n          alert.notes = [];\r\n        }\r\n        alert.notes.push(notes);\r\n      }\r\n\r\n      await this.cacheMetrics('alerts', this.alerts);\r\n      this.notifyListeners({ type: 'alert_resolved', data: alert });\r\n\r\n      logger.info(LogLevel.INFO, 'SEO alert resolved', {\r\n        alertId,\r\n        title: alert.title,\r\n        category: alert.category\r\n      }, LogCategory.SEO);\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Obtener estadísticas de keywords\r\n  getKeywordStats(): {\r\n    total: number;\r\n    topPositions: number;\r\n    improvements: number;\r\n    declines: number;\r\n    averagePosition: number;\r\n  } {\r\n    const total = this.keywords.length;\r\n    const topPositions = this.keywords.filter(k => k.position <= 10).length;\r\n    const improvements = this.keywords.filter(k => k.trend === 'up').length;\r\n    const declines = this.keywords.filter(k => k.trend === 'down').length;\r\n    const averagePosition = total > 0\r\n      ? this.keywords.reduce((sum, k) => sum + k.position, 0) / total\r\n      : 0;\r\n\r\n    return {\r\n      total,\r\n      topPositions,\r\n      improvements,\r\n      declines,\r\n      averagePosition: Number(averagePosition.toFixed(1))\r\n    };\r\n  }\r\n\r\n  // Obtener métricas de performance\r\n  getPerformanceMetrics(): {\r\n    coreWebVitalsScore: string;\r\n    averageLCP: number;\r\n    averageFID: number;\r\n    averageCLS: number;\r\n    performanceIssues: number;\r\n  } {\r\n    const lastMetrics = this.getLastMetrics();\r\n    if (!lastMetrics) {\r\n      return {\r\n        coreWebVitalsScore: 'unknown',\r\n        averageLCP: 0,\r\n        averageFID: 0,\r\n        averageCLS: 0,\r\n        performanceIssues: 0\r\n      };\r\n    }\r\n\r\n    const performanceIssues = this.alerts.filter(\r\n      a => a.category === 'performance' && !a.resolved\r\n    ).length;\r\n\r\n    return {\r\n      coreWebVitalsScore: lastMetrics.coreWebVitals.score,\r\n      averageLCP: lastMetrics.coreWebVitals.lcp,\r\n      averageFID: lastMetrics.coreWebVitals.fid,\r\n      averageCLS: lastMetrics.coreWebVitals.cls,\r\n      performanceIssues\r\n    };\r\n  }\r\n\r\n  // Obtener resumen de competidores\r\n  getCompetitorSummary(): {\r\n    totalCompetitors: number;\r\n    averageDomainAuthority: number;\r\n    keywordOpportunities: number;\r\n    contentGaps: number;\r\n  } {\r\n    const totalCompetitors = this.competitors.length;\r\n    const averageDomainAuthority = totalCompetitors > 0\r\n      ? this.competitors.reduce((sum, c) => sum + c.domainAuthority, 0) / totalCompetitors\r\n      : 0;\r\n\r\n    const keywordOpportunities = this.competitors.reduce((sum, c) => sum + c.keywordGaps.length, 0);\r\n    const contentGaps = this.competitors.reduce((sum, c) => sum + c.contentGaps.length, 0);\r\n\r\n    return {\r\n      totalCompetitors,\r\n      averageDomainAuthority: Number(averageDomainAuthority.toFixed(1)),\r\n      keywordOpportunities,\r\n      contentGaps\r\n    };\r\n  }\r\n\r\n  // Exportar datos para dashboard\r\n  exportDashboardData(): {\r\n    overview: any;\r\n    keywords: KeywordMetrics[];\r\n    alerts: SEOAlert[];\r\n    performance: any;\r\n    competitors: any;\r\n    reports: SEOReport[];\r\n  } {\r\n    const lastMetrics = this.getLastMetrics();\r\n\r\n    return {\r\n      overview: {\r\n        overallScore: lastMetrics ? this.calculateOverallSEOScore(lastMetrics) : 0,\r\n        organicTraffic: lastMetrics?.organicTraffic || 0,\r\n        averagePosition: this.getKeywordStats().averagePosition,\r\n        indexationRate: lastMetrics?.indexationStatus.indexationRate || 0,\r\n        coreWebVitalsScore: lastMetrics?.coreWebVitals.score || 'unknown',\r\n        unresolvedAlerts: this.getUnresolvedAlerts().length,\r\n        lastUpdated: lastMetrics?.timestamp || new Date()\r\n      },\r\n      keywords: this.keywords.slice(0, 20), // Top 20 keywords\r\n      alerts: this.getUnresolvedAlerts().slice(0, 10), // Top 10 alerts\r\n      performance: this.getPerformanceMetrics(),\r\n      competitors: this.getCompetitorSummary(),\r\n      reports: this.reports.slice(-5) // Últimos 5 reportes\r\n    };\r\n  }\r\n\r\n  // Limpiar datos antiguos\r\n  async cleanupOldData(): Promise<void> {\r\n    const now = new Date();\r\n\r\n    // Limpiar métricas antiguas\r\n    const metricsRetentionDate = new Date(now.getTime() - this.config.dataRetention.metricsRetentionDays * 24 * 60 * 60 * 1000);\r\n    this.metrics = this.metrics.filter(m => m.timestamp >= metricsRetentionDate);\r\n\r\n    // Limpiar alertas antiguas\r\n    const alertsRetentionDate = new Date(now.getTime() - this.config.dataRetention.alertsRetentionDays * 24 * 60 * 60 * 1000);\r\n    this.alerts = this.alerts.filter(a => a.timestamp >= alertsRetentionDate);\r\n\r\n    // Limpiar reportes antiguos\r\n    const reportsRetentionDate = new Date(now.getTime() - this.config.dataRetention.reportsRetentionDays * 24 * 60 * 60 * 1000);\r\n    this.reports = this.reports.filter(r => r.generatedAt >= reportsRetentionDate);\r\n\r\n    logger.info(LogLevel.INFO, 'SEO analytics data cleanup completed', {\r\n      metricsCount: this.metrics.length,\r\n      alertsCount: this.alerts.length,\r\n      reportsCount: this.reports.length\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  // Suscribirse a actualizaciones\r\n  subscribe(callback: (data: any) => void): void {\r\n    this.listeners.push(callback);\r\n  }\r\n\r\n  // Desuscribirse de actualizaciones\r\n  unsubscribe(callback: (data: any) => void): void {\r\n    const index = this.listeners.indexOf(callback);\r\n    if (index > -1) {\r\n      this.listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // Notificar a todos los listeners\r\n  private notifyListeners(data: any): void {\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (error) {\r\n        logger.error(LogLevel.ERROR, 'Error in SEO analytics listener', error as Error, LogCategory.SEO);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Destructor para limpiar intervalos\r\n  destroy(): void {\r\n    if (this.metricsInterval) {\r\n      clearInterval(this.metricsInterval);\r\n      this.metricsInterval = null;\r\n    }\r\n    if (this.keywordInterval) {\r\n      clearInterval(this.keywordInterval);\r\n      this.keywordInterval = null;\r\n    }\r\n    if (this.competitorInterval) {\r\n      clearInterval(this.competitorInterval);\r\n      this.competitorInterval = null;\r\n    }\r\n    if (this.alertInterval) {\r\n      clearInterval(this.alertInterval);\r\n      this.alertInterval = null;\r\n    }\r\n\r\n    this.listeners = [];\r\n    this.cache.clear();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced SEO Analytics Manager destroyed', {}, LogCategory.SEO);\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIAS Y EXPORTACIONES\r\n// ===================================\r\n\r\n// Instancia singleton mejorada\r\nexport const enhancedSEOAnalyticsManager = EnhancedSEOAnalyticsManager.getInstance();\r\n\r\n// Mantener compatibilidad con la instancia anterior\r\nexport const seoAnalyticsManager = enhancedSEOAnalyticsManager;\r\n\r\n// Exportar configuración por defecto\r\nexport { DEFAULT_SEO_CONFIG };\r\n\r\n// Exportar tipos principales\r\nexport type {\r\n  SEOAnalyticsConfig,\r\n  SEOMetrics,\r\n  KeywordMetrics,\r\n  CompetitorAnalysis,\r\n  SEOAlert,\r\n  SEOReport,\r\n  SEORecommendation,\r\n  CoreWebVitals,\r\n  IndexationStatus,\r\n  TechnicalSEOMetrics,\r\n  PageMetrics,\r\n  DeviceMetrics,\r\n  GeographicMetrics,\r\n  CompetitorKeywordData,\r\n  SeasonalData,\r\n  CompetitorPage,\r\n  ContentGap,\r\n  BacklinkGap,\r\n  SocialMetrics,\r\n  ResolutionStep,\r\n  ExecutiveSummary,\r\n  PerformanceAnalysis,\r\n  KeywordAnalysis,\r\n  TechnicalAnalysis,\r\n  ContentAnalysis,\r\n  CompetitiveAnalysis,\r\n  ActionPlan,\r\n  ActionItem,\r\n  ScheduledDelivery,\r\n  BudgetRecommendation,\r\n  PagePerformance,\r\n  TechnicalIssue,\r\n  ContentMetrics,\r\n  CompetitorComparison,\r\n  OpportunityAnalysis\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}