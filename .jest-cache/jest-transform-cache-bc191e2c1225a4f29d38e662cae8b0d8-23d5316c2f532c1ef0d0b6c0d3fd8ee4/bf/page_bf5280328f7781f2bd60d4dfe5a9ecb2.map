{"version":3,"names":["cov_1ik80phjql","actualCoverage","s","default","f","TestReportsPage","dynamic","reports","setReports","_react","useState","selectedReport","setSelectedReport","loading","setLoading","error","setError","useEffect","loadAvailableReports","response","fetch","ok","b","data","json","length","loadReport","err","reportName","getStatusIcon","status","_jsxruntime","jsx","_lucidereact","CheckCircle","className","XCircle","Clock","AlertTriangle","getStatusBadge","variants","success","pending","partial","_badge","Badge","variant","toUpperCase","formatDuration","ms","toFixed","calculatePerformanceMetrics","apiTests","averageResponseTime","minResponseTime","maxResponseTime","p95ResponseTime","throughput","errorRate","availability","responseTimes","map","api","responseTime","sort","a","successfulApis","filter","totalApis","Math","round","reduce","floor","Date","now","timestamp","getTime","analyzeErrors","steps","errors","errorsByCategory","failedSteps","step","forEach","category","criticalErrors","severity","totalErrors","errorTrends","increasing","percentage","generateObservations","report","observations","metrics","push","id","type","title","description","context","recommendation","impact","toISOString","completionRate","completedSteps","totalSteps","getSeverityColor","getImpactBadge","low","medium","high","jsxs","RefreshCw","_card","Card","CardHeader","CardTitle","CardContent","endpoint","JSON","stringify","_button","Button","onClick","CardDescription","includes","replace","Fragment","summary","duration","toLocaleString","environment","style","width","min","max","performanceMetrics","qualityMetrics","testCoverage","reliability","maintainabilityIndex","codeQuality","some","index","details","method","statusCode","errorAnalysis","navigation","interaction","observation","currentIndex","findIndex","r","previousReport","currentMetrics","previousMetrics","comparisons","label","current","previous","unit","better","comp","diff","percentChange","isImprovement","abs"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\test-reports\\page.tsx"],"sourcesContent":["/**\r\n * Página de reportes de pruebas\r\n * Dashboard para visualizar resultados de tests automatizados\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle, \r\n  Clock,\r\n  Play,\r\n  Pause,\r\n  RotateCcw,\r\n  Download,\r\n  Filter,\r\n  Search,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Activity\r\n} from 'lucide-react';\r\n\r\n// Forzar renderizado dinámico para evitar problemas con prerendering\r\nexport const dynamic = 'force-dynamic';\r\n\r\ninterface TestStep {\r\n  step: string;\r\n  status: 'success' | 'error' | 'pending';\r\n  timestamp: string;\r\n  duration?: number;\r\n  details?: string;\r\n  response?: {\r\n    status: number;\r\n    data?: any;\r\n  };\r\n  category?: 'navigation' | 'api' | 'interaction' | 'validation';\r\n  severity?: 'low' | 'medium' | 'high' | 'critical';\r\n  screenshot?: string;\r\n}\r\n\r\ninterface ApiTest {\r\n  endpoint: string;\r\n  method: string;\r\n  status: 'success' | 'error';\r\n  responseTime: number;\r\n  statusCode: number;\r\n  timestamp: string;\r\n  payloadSize?: number;\r\n  responseSize?: number;\r\n  retryCount?: number;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  averageResponseTime: number;\r\n  minResponseTime: number;\r\n  maxResponseTime: number;\r\n  p95ResponseTime: number;\r\n  throughput: number;\r\n  errorRate: number;\r\n  availability: number;\r\n}\r\n\r\ninterface QualityMetrics {\r\n  testCoverage: number;\r\n  reliability: number;\r\n  maintainabilityIndex: number;\r\n  codeQuality: number;\r\n}\r\n\r\ninterface ErrorAnalysis {\r\n  totalErrors: number;\r\n  errorsByCategory: Record<string, number>;\r\n  criticalErrors: number;\r\n  errorTrends: {\r\n    increasing: boolean;\r\n    percentage: number;\r\n  };\r\n}\r\n\r\ninterface DetailedObservation {\r\n  id: string;\r\n  type: 'performance' | 'error' | 'quality' | 'security' | 'usability';\r\n  severity: 'info' | 'warning' | 'error' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  context: string;\r\n  recommendation: string;\r\n  impact: 'low' | 'medium' | 'high';\r\n  timestamp: string;\r\n}\r\n\r\ninterface TestReport {\r\n  timestamp: string;\r\n  totalSteps: number;\r\n  completedSteps: number;\r\n  failedSteps: number;\r\n  totalApis: number;\r\n  successfulApis: number;\r\n  failedApis: number;\r\n  steps: TestStep[];\r\n  apiTests: ApiTest[];\r\n  errors: string[];\r\n  summary: {\r\n    status: 'success' | 'partial' | 'failed';\r\n    message: string;\r\n    duration: string;\r\n    environment: string;\r\n  };\r\n  performanceMetrics: PerformanceMetrics;\r\n  qualityMetrics: QualityMetrics;\r\n  errorAnalysis: ErrorAnalysis;\r\n  observations: DetailedObservation[];\r\n  metadata: {\r\n    testSuite: string;\r\n    version: string;\r\n    browser: string;\r\n    viewport: string;\r\n    userAgent: string;\r\n  };\r\n}\r\n\r\nexport default function TestReportsPage() {\r\n  const [reports, setReports] = useState<string[]>([]);\r\n  const [selectedReport, setSelectedReport] = useState<TestReport | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadAvailableReports();\r\n  }, []);\r\n\r\n  const loadAvailableReports = async () => {\r\n    try {\r\n      const response = await fetch('/api/test-reports');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReports(data.reports || []);\r\n        if (data.reports && data.reports.length > 0) {\r\n          loadReport(data.reports[0]);\r\n        }\r\n      } else {\r\n        setError('No se pudieron cargar los reportes');\r\n      }\r\n    } catch (err) {\r\n      setError('Error al cargar los reportes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadReport = async (reportName: string) => {\r\n    try {\r\n      const response = await fetch(`/test-reports/${reportName}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setSelectedReport(data);\r\n      } else {\r\n        setError(`No se pudo cargar el reporte: ${reportName}`);\r\n      }\r\n    } catch (err) {\r\n      setError(`Error al cargar el reporte: ${reportName}`);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'error':\r\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'pending':\r\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      default:\r\n        return <AlertTriangle className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string | undefined) => {\r\n    if (!status) {return null;}\r\n    \r\n    const variants = {\r\n      success: 'default',\r\n      error: 'destructive',\r\n      pending: 'secondary',\r\n      partial: 'outline'\r\n    } as const;\r\n    \r\n    return (\r\n      <Badge variant={variants[status as keyof typeof variants] || 'outline'}>\r\n        {status?.toUpperCase() || 'UNKNOWN'}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const formatDuration = (ms: number) => {\r\n    if (ms < 1000) {return `${ms}ms`;}\r\n    return `${(ms / 1000).toFixed(2)}s`;\r\n  };\r\n\r\n  const calculatePerformanceMetrics = (apiTests: ApiTest[]): PerformanceMetrics => {\r\n    if (!apiTests || apiTests.length === 0) {\r\n      return {\r\n        averageResponseTime: 0,\r\n        minResponseTime: 0,\r\n        maxResponseTime: 0,\r\n        p95ResponseTime: 0,\r\n        throughput: 0,\r\n        errorRate: 0,\r\n        availability: 0\r\n      };\r\n    }\r\n\r\n    const responseTimes = apiTests.map(api => api.responseTime).sort((a, b) => a - b);\r\n    const successfulApis = apiTests.filter(api => api.status === 'success').length;\r\n    const totalApis = apiTests.length;\r\n    \r\n    return {\r\n      averageResponseTime: Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length),\r\n      minResponseTime: responseTimes[0] || 0,\r\n      maxResponseTime: responseTimes[responseTimes.length - 1] || 0,\r\n      p95ResponseTime: Math.round(responseTimes[Math.floor(responseTimes.length * 0.95)] || 0),\r\n      throughput: Math.round((successfulApis / (Date.now() - new Date(apiTests[0]?.timestamp || Date.now()).getTime())) * 1000 * 60), // requests per minute\r\n      errorRate: Math.round(((totalApis - successfulApis) / totalApis) * 100),\r\n      availability: Math.round((successfulApis / totalApis) * 100)\r\n    };\r\n  };\r\n\r\n  const analyzeErrors = (steps: TestStep[], errors: string[]): ErrorAnalysis => {\r\n    const errorsByCategory: Record<string, number> = {\r\n      'navigation': 0,\r\n      'api': 0,\r\n      'interaction': 0,\r\n      'validation': 0,\r\n      'other': 0\r\n    };\r\n\r\n    const failedSteps = steps.filter(step => step.status === 'error');\r\n    failedSteps.forEach(step => {\r\n      const category = step.category || 'other';\r\n      errorsByCategory[category] = (errorsByCategory[category] || 0) + 1;\r\n    });\r\n\r\n    const criticalErrors = failedSteps.filter(step => step.severity === 'critical').length;\r\n\r\n    return {\r\n      totalErrors: errors.length + failedSteps.length,\r\n      errorsByCategory,\r\n      criticalErrors,\r\n      errorTrends: {\r\n        increasing: false, // This would need historical data\r\n        percentage: 0\r\n      }\r\n    };\r\n  };\r\n\r\n  const generateObservations = (report: TestReport): DetailedObservation[] => {\r\n    const observations: DetailedObservation[] = [];\r\n    const metrics = calculatePerformanceMetrics(report.apiTests || []);\r\n    \r\n    // Performance observations\r\n    if (metrics.averageResponseTime > 2000) {\r\n      observations.push({\r\n        id: `perf-${Date.now()}-1`,\r\n        type: 'performance',\r\n        severity: metrics.averageResponseTime > 5000 ? 'critical' : 'warning',\r\n        title: 'Tiempo de respuesta elevado',\r\n        description: `El tiempo promedio de respuesta es ${metrics.averageResponseTime}ms`,\r\n        context: 'APIs del sistema',\r\n        recommendation: 'Optimizar consultas de base de datos y implementar caché',\r\n        impact: metrics.averageResponseTime > 5000 ? 'high' : 'medium',\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    // Error rate observations\r\n    if (metrics.errorRate > 5) {\r\n      observations.push({\r\n        id: `error-${Date.now()}-1`,\r\n        type: 'error',\r\n        severity: metrics.errorRate > 15 ? 'critical' : 'error',\r\n        title: 'Tasa de errores elevada',\r\n        description: `La tasa de errores es del ${metrics.errorRate}%`,\r\n        context: 'Pruebas de APIs',\r\n        recommendation: 'Revisar logs de errores y implementar manejo de excepciones',\r\n        impact: 'high',\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    // Quality observations\r\n    const completionRate = (report.completedSteps / report.totalSteps) * 100;\r\n    if (completionRate < 95) {\r\n      observations.push({\r\n        id: `quality-${Date.now()}-1`,\r\n        type: 'quality',\r\n        severity: completionRate < 80 ? 'critical' : 'warning',\r\n        title: 'Baja tasa de completitud',\r\n        description: `Solo se completó el ${completionRate.toFixed(1)}% de las pruebas`,\r\n        context: 'Pipeline de pruebas',\r\n        recommendation: 'Revisar y estabilizar las pruebas fallidas',\r\n        impact: 'medium',\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    return observations;\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'critical': return 'text-red-600 bg-red-50 border-red-200';\r\n      case 'error': return 'text-red-500 bg-red-50 border-red-200';\r\n      case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n      case 'info': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getImpactBadge = (impact: string) => {\r\n    const variants = {\r\n      low: 'secondary',\r\n      medium: 'outline', \r\n      high: 'destructive'\r\n    } as const;\r\n    \r\n    return variants[impact as keyof typeof variants] || 'secondary';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto p-6\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <RefreshCw className=\"h-8 w-8 animate-spin\" />\r\n          <span className=\"ml-2\">Cargando reportes...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"container mx-auto p-6\">\r\n        <Card className=\"border-red-200\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-red-600\">Error</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p>\r\n              {typeof error === 'string' ? error : \r\n                error?.endpoint ? `${error.endpoint}: ${error.error || 'Error desconocido'}` : \r\n                JSON.stringify(error)\r\n              }\r\n            </p>\r\n            <Button onClick={loadAvailableReports} className=\"mt-4\">\r\n              Reintentar\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Reportes de Pruebas</h1>\r\n          <p className=\"text-muted-foreground\">Visualización interactiva de los resultados de testing</p>\r\n        </div>\r\n        <Button onClick={loadAvailableReports} variant=\"outline\">\r\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n          Actualizar\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Selector de reportes */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Reportes Disponibles</CardTitle>\r\n          <CardDescription>Selecciona un reporte para ver los detalles</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {reports.map((report) => (\r\n              <Button\r\n                key={report}\r\n                variant={selectedReport && report.includes(selectedReport.timestamp) ? \"default\" : \"outline\"}\r\n                onClick={() => loadReport(report)}\r\n                className=\"text-xs\"\r\n              >\r\n                {report.replace('.json', '').replace('purchase-pipeline-', '')}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {selectedReport && (\r\n        <>\r\n          {/* Resumen general */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Estado General</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {getStatusIcon(selectedReport?.summary?.status || 'pending')}\r\n                  {getStatusBadge(selectedReport?.summary?.status || 'pending')}\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  {selectedReport?.summary?.duration || 'N/A'}\r\n                </p>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Ejecutado: {selectedReport?.timestamp ? new Date(selectedReport.timestamp).toLocaleString() : 'N/A'}\r\n                </p>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Entorno: {selectedReport?.summary?.environment || 'N/A'}\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Pasos Completados</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">\r\n                  {selectedReport?.completedSteps || 0}/{selectedReport?.totalSteps || 0}\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\r\n                  <div \r\n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \r\n                    style={{ \r\n                      width: `${selectedReport?.completedSteps && selectedReport?.totalSteps ? \r\n                        ((selectedReport.completedSteps / selectedReport.totalSteps) * 100).toFixed(1) : '0'}%` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  {selectedReport?.completedSteps && selectedReport?.totalSteps ? \r\n                    ((selectedReport.completedSteps / selectedReport.totalSteps) * 100).toFixed(1) : '0'}% completado\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">APIs Exitosas</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">\r\n                  {selectedReport?.successfulApis || 0}/{selectedReport?.totalApis || 0}\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\r\n                  <div \r\n                    className=\"bg-green-600 h-2 rounded-full transition-all duration-300\" \r\n                    style={{ \r\n                      width: `${selectedReport?.successfulApis && selectedReport?.totalApis ? \r\n                        ((selectedReport.successfulApis / selectedReport.totalApis) * 100).toFixed(1) : '0'}%` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  {selectedReport?.successfulApis && selectedReport?.totalApis ? \r\n                    ((selectedReport.successfulApis / selectedReport.totalApis) * 100).toFixed(1) : '0'}% éxito\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Card>\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">Errores</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold text-red-600\">\r\n                  {selectedReport?.errors?.length || 0}\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\r\n                  <div \r\n                    className=\"bg-red-600 h-2 rounded-full transition-all duration-300\" \r\n                    style={{ \r\n                      width: `${selectedReport?.errors?.length ? Math.min((selectedReport.errors.length / Math.max(selectedReport?.totalSteps || 1, 1)) * 100, 100) : 0}%` \r\n                    }}\r\n                  ></div>\r\n                </div>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  {selectedReport?.failedSteps || 0} pasos fallidos\r\n                </p>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  {selectedReport?.errors?.length ? \r\n                    `${Math.min(Math.round((selectedReport.errors.length / Math.max(selectedReport?.totalSteps || 1, 1)) * 100), 100)}% de impacto` : \r\n                    'Sin errores'\r\n                  }\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Métricas de rendimiento */}\r\n          {(() => {\r\n            const performanceMetrics = calculatePerformanceMetrics(selectedReport?.apiTests || []);\r\n            return (\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Métricas de Rendimiento</CardTitle>\r\n                  <CardDescription>Análisis detallado del rendimiento de las APIs</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-blue-600\">\r\n                        {performanceMetrics.averageResponseTime}ms\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Tiempo Promedio</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-green-600\">\r\n                        {performanceMetrics.p95ResponseTime}ms\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">P95 Latencia</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-purple-600\">\r\n                        {performanceMetrics.availability}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Disponibilidad</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-orange-600\">\r\n                        {performanceMetrics.errorRate}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Tasa de Error</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n                    <div>\r\n                      <span className=\"font-medium\">Tiempo Mínimo:</span> {performanceMetrics.minResponseTime}ms\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium\">Tiempo Máximo:</span> {performanceMetrics.maxResponseTime}ms\r\n                    </div>\r\n                    <div>\r\n                      <span className=\"font-medium\">Throughput:</span> {performanceMetrics.throughput} req/min\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n          })()}\r\n\r\n          {/* Métricas de calidad */}\r\n          {(() => {\r\n            const qualityMetrics: QualityMetrics = {\r\n              testCoverage: Math.round((selectedReport?.completedSteps || 0) / Math.max(selectedReport?.totalSteps || 1, 1) * 100),\r\n              reliability: Math.round((selectedReport?.successfulApis || 0) / Math.max(selectedReport?.totalApis || 1, 1) * 100),\r\n              maintainabilityIndex: selectedReport?.errors?.length === 0 ? 95 : Math.max(60, 95 - (selectedReport?.errors?.length || 0) * 10),\r\n              codeQuality: selectedReport?.steps?.some(s => s.severity === 'critical') ? 75 : 85\r\n            };\r\n            \r\n            return (\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Métricas de Calidad</CardTitle>\r\n                  <CardDescription>Evaluación integral de la calidad del sistema</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-green-600\">\r\n                        {qualityMetrics.testCoverage}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Cobertura de Pruebas</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-blue-600\">\r\n                        {qualityMetrics.reliability}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Confiabilidad</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-purple-600\">\r\n                        {qualityMetrics.maintainabilityIndex}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Mantenibilidad</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-yellow-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-yellow-600\">\r\n                        {qualityMetrics.codeQuality}%\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Calidad de Código</p>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n          })()}\r\n\r\n          {/* Detalles de pasos */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Pasos de Ejecución</CardTitle>\r\n              <CardDescription>Detalle de cada paso del pipeline de pruebas</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                {selectedReport?.steps?.map((step, index) => (\r\n                  <div key={index} className=\"flex items-start space-x-3 p-3 rounded-lg border\">\r\n                    <div className=\"flex-shrink-0 mt-1\">\r\n                      {getStatusIcon(step.status)}\r\n                    </div>\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <p className=\"text-sm font-medium\">{step.step}</p>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {step.duration && (\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {formatDuration(step.duration)}\r\n                            </span>\r\n                          )}\r\n                          {step.response && (\r\n                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                              {step.response.status}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {step.details && (\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {typeof step.details === 'object' ? JSON.stringify(step.details, null, 2) : step.details}\r\n                        </p>\r\n                      )}\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        {new Date(step.timestamp).toLocaleString()}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* APIs probadas */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>APIs Probadas</CardTitle>\r\n              <CardDescription>Resultados de las pruebas de endpoints</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2\">\r\n                {selectedReport?.apiTests?.map((api, index) => (\r\n                  <div key={index} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      {getStatusIcon(api.status)}\r\n                      <div>\r\n                        <p className=\"text-sm font-medium\">\r\n                          {api.method} {api.endpoint}\r\n                        </p>\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          {new Date(api.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {api.statusCode}\r\n                      </Badge>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {api.responseTime}ms\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Análisis de errores */}\r\n          {(() => {\r\n            const errorAnalysis = analyzeErrors(selectedReport?.steps || [], selectedReport?.errors || []);\r\n            return errorAnalysis.totalErrors > 0 && (\r\n              <Card className=\"border-red-200\">\r\n                <CardHeader>\r\n                  <CardTitle className=\"text-red-600\">Análisis de Errores</CardTitle>\r\n                  <CardDescription>Categorización y análisis detallado de errores</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-4\">\r\n                    <div className=\"text-center p-3 bg-red-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-red-600\">\r\n                        {errorAnalysis.totalErrors}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Total Errores</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-orange-600\">\r\n                        {errorAnalysis.criticalErrors}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Críticos</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-yellow-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-yellow-600\">\r\n                        {errorAnalysis.errorsByCategory.api || 0}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">API</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-blue-600\">\r\n                        {errorAnalysis.errorsByCategory.navigation || 0}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Navegación</p>\r\n                    </div>\r\n                    <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                      <div className=\"text-2xl font-bold text-purple-600\">\r\n                        {errorAnalysis.errorsByCategory.interaction || 0}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground\">Interacción</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {selectedReport?.errors && selectedReport.errors.length > 0 && (\r\n                    <div className=\"space-y-2\">\r\n                      <h4 className=\"font-medium text-sm mb-2\">Detalles de Errores:</h4>\r\n                      {selectedReport.errors.map((error, index) => (\r\n                        <div key={index} className=\"p-3 bg-red-50 rounded-lg border border-red-200\">\r\n                          <p className=\"text-sm text-red-800\">\r\n                            {typeof error === 'string' ? error : \r\n                              error?.endpoint ? `${error.endpoint}: ${error.error || 'Error desconocido'}` : \r\n                              JSON.stringify(error)\r\n                            }\r\n                          </p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n          })()}\r\n\r\n          {/* Observaciones detalladas */}\r\n          {(() => {\r\n            const observations = generateObservations(selectedReport || {} as TestReport);\r\n            return observations.length > 0 && (\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Observaciones y Recomendaciones</CardTitle>\r\n                  <CardDescription>Análisis automático y recomendaciones de mejora</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    {observations.map((observation) => (\r\n                      <div key={observation.id} className={`p-4 rounded-lg border ${getSeverityColor(observation.severity)}`}>\r\n                        <div className=\"flex items-start justify-between mb-2\">\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <Badge variant={getImpactBadge(observation.impact)}>\r\n                              {observation.impact.toUpperCase()}\r\n                            </Badge>\r\n                            <Badge variant=\"outline\">\r\n                              {observation.type.toUpperCase()}\r\n                            </Badge>\r\n                          </div>\r\n                          <span className=\"text-xs text-muted-foreground\">\r\n                            {new Date(observation.timestamp).toLocaleString()}\r\n                          </span>\r\n                        </div>\r\n                        <h4 className=\"font-semibold text-sm mb-1\">{observation.title}</h4>\r\n                        <p className=\"text-sm mb-2\">{observation.description}</p>\r\n                        <div className=\"text-xs text-muted-foreground mb-2\">\r\n                          <strong>Contexto:</strong> {observation.context}\r\n                        </div>\r\n                        <div className=\"text-xs bg-white bg-opacity-50 p-2 rounded border\">\r\n                          <strong>Recomendación:</strong> {observation.recommendation}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n           })()}\r\n\r\n          {/* Análisis comparativo */}\r\n          {reports.length > 1 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Análisis Comparativo</CardTitle>\r\n                <CardDescription>Comparación con reportes anteriores para identificar tendencias</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {(() => {\r\n                  const currentIndex = reports.findIndex(r => r.id === selectedReport?.id);\r\n                  const previousReport = currentIndex > 0 ? reports[currentIndex - 1] : null;\r\n                  \r\n                  if (!previousReport) {\r\n                    return (\r\n                      <p className=\"text-sm text-muted-foreground\">No hay reportes anteriores para comparar</p>\r\n                    );\r\n                  }\r\n                  \r\n                  const currentMetrics = calculatePerformanceMetrics(selectedReport?.steps || [], selectedReport?.apiTests || []);\r\n                  const previousMetrics = calculatePerformanceMetrics(previousReport?.steps || [], previousReport?.apiTests || []);\r\n                  \r\n                  const comparisons = [\r\n                    {\r\n                      label: 'Tiempo Promedio',\r\n                      current: currentMetrics.averageResponseTime,\r\n                      previous: previousMetrics.averageResponseTime,\r\n                      unit: 'ms',\r\n                      better: 'lower'\r\n                    },\r\n                    {\r\n                      label: 'Disponibilidad',\r\n                      current: currentMetrics.availability,\r\n                      previous: previousMetrics.availability,\r\n                      unit: '%',\r\n                      better: 'higher'\r\n                    },\r\n                    {\r\n                      label: 'Tasa de Error',\r\n                      current: currentMetrics.errorRate,\r\n                      previous: previousMetrics.errorRate,\r\n                      unit: '%',\r\n                      better: 'lower'\r\n                    },\r\n                    {\r\n                      label: 'Pasos Completados',\r\n                      current: selectedReport?.completedSteps || 0,\r\n                      previous: previousReport?.completedSteps || 0,\r\n                      unit: '',\r\n                      better: 'higher'\r\n                    }\r\n                  ];\r\n                  \r\n                  return (\r\n                    <div className=\"space-y-4\">\r\n                      <div className=\"text-sm text-muted-foreground mb-4\">\r\n                        Comparando con reporte anterior: {new Date(previousReport.timestamp).toLocaleString()}\r\n                      </div>\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                        {comparisons.map((comp, index) => {\r\n                          const diff = comp.current - comp.previous;\r\n                          const percentChange = comp.previous !== 0 ? (diff / comp.previous) * 100 : 0;\r\n                          const isImprovement = comp.better === 'higher' ? diff > 0 : diff < 0;\r\n                          \r\n                          return (\r\n                            <div key={index} className=\"p-3 border rounded-lg\">\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <span className=\"text-sm font-medium\">{comp.label}</span>\r\n                                <div className={`flex items-center space-x-1 text-xs ${\r\n                                  isImprovement ? 'text-green-600' : diff === 0 ? 'text-gray-500' : 'text-red-600'\r\n                                }`}>\r\n                                  {isImprovement ? '↗' : diff === 0 ? '→' : '↘'}\r\n                                  <span>\r\n                                    {Math.abs(percentChange).toFixed(1)}%\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                                <span>Anterior: {comp.previous}{comp.unit}</span>\r\n                                <span>Actual: {comp.current}{comp.unit}</span>\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })()}\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n         </>\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}