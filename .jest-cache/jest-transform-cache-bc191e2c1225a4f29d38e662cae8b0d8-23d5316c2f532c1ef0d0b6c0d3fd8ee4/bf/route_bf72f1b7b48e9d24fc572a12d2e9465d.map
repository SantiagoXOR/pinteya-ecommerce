{"version":3,"names":["cov_bo5zyrjha","actualCoverage","s","GET","f","OPTIONS","POST","runtime","request","searchParams","URL","url","get","urls","split","b","_server","NextResponse","json","success","data","message","description","usage","validationCriteria","title","keywords","openGraph","twitter","testUrls","results","_seotestingsuite","enhancedSEOTestingSuite","runTestsByType","resultsByUrl","reduce","acc","testUrl","filter","r","recommendations","generateMetadataRecommendations","_logger","logger","info","LogLevel","INFO","urlsCount","length","testsRun","LogCategory","SEO","summary","totalTests","passed","status","failed","warnings","averageScore","Math","round","sum","score","timestamp","Date","toISOString","error","ERROR","details","Error","body","thresholds","includeRecommendations","Array","isArray","example","titleMinLength","titleMaxLength","descriptionMinLength","descriptionMaxLength","configure","analysis","analyzeMetadataResults","generateDetailedMetadataRecommendations","configuration","failedTitles","testName","includes","failedDescriptions","failedKeywords","failedOpenGraph","push","titleIssues","descriptionIssues","keywordIssues","openGraphIssues","mostCommonIssues","urlsWithIssues","Set","map","affectedUrls","priority","category","issue","solution","headers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\testing\\metadata\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - METADATA TESTING API\r\n// API específica para validación de metadata SEO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { enhancedSEOTestingSuite } from '@/lib/seo/seo-testing-suite';\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\n\r\n// ===================================\r\n// GET - Validar metadata de URLs específicas\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const url = searchParams.get('url');\r\n    const urls = searchParams.get('urls')?.split(',');\r\n\r\n    if (!url && !urls) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          message: 'Metadata Testing API',\r\n          description: 'Validate SEO metadata including titles, descriptions, keywords, and Open Graph tags',\r\n          usage: {\r\n            'GET ?url=/products/example': 'Test metadata for single URL',\r\n            'GET ?urls=/,/shop,/about': 'Test metadata for multiple URLs',\r\n            'POST': 'Batch validate metadata with custom configuration'\r\n          },\r\n          validationCriteria: {\r\n            title: 'Length: 30-60 characters, unique, contains keywords',\r\n            description: 'Length: 120-160 characters, unique, contains call-to-action',\r\n            keywords: '3-5 relevant keywords',\r\n            openGraph: 'og:title, og:description, og:image, og:url',\r\n            twitter: 'twitter:card, twitter:title, twitter:description, twitter:image'\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    const testUrls = urls || [url!];\r\n    const results = await enhancedSEOTestingSuite.runTestsByType('metadata', testUrls);\r\n\r\n    // Agrupar resultados por URL\r\n    const resultsByUrl = testUrls.reduce((acc, testUrl) => {\r\n      acc[testUrl] = results.filter(r => r.url === testUrl);\r\n      return acc;\r\n    }, {} as Record<string, any[]>);\r\n\r\n    // Generar recomendaciones específicas\r\n    const recommendations = generateMetadataRecommendations(results);\r\n\r\n    logger.info(LogLevel.INFO, 'Metadata validation completed', {\r\n      urlsCount: testUrls.length,\r\n      testsRun: results.length\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        results: resultsByUrl,\r\n        summary: {\r\n          totalTests: results.length,\r\n          passed: results.filter(r => r.status === 'passed').length,\r\n          failed: results.filter(r => r.status === 'failed').length,\r\n          warnings: results.filter(r => r.status === 'warning').length,\r\n          averageScore: results.length > 0 \r\n            ? Math.round(results.reduce((sum, r) => sum + r.score, 0) / results.length)\r\n            : 0\r\n        },\r\n        recommendations,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Metadata testing API GET error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to validate metadata',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Validación batch con configuración personalizada\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { urls, thresholds, includeRecommendations = true } = body;\r\n\r\n    if (!urls || !Array.isArray(urls) || urls.length === 0) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'urls array is required and must not be empty',\r\n        example: {\r\n          urls: ['/products/pintura-interior', '/categories/pinturas', '/'],\r\n          thresholds: {\r\n            titleMinLength: 30,\r\n            titleMaxLength: 60,\r\n            descriptionMinLength: 120,\r\n            descriptionMaxLength: 160\r\n          },\r\n          includeRecommendations: true\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Limitar número de URLs\r\n    if (urls.length > 20) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Maximum 20 URLs allowed per batch request'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Configurar umbrales temporalmente si se proporcionan\r\n    if (thresholds) {\r\n      enhancedSEOTestingSuite.configure({ thresholds });\r\n    }\r\n\r\n    // Ejecutar tests de metadata\r\n    const results = await enhancedSEOTestingSuite.runTestsByType('metadata', urls);\r\n\r\n    // Analizar resultados por categoría\r\n    const analysis = analyzeMetadataResults(results);\r\n\r\n    // Generar recomendaciones si se solicitan\r\n    const recommendations = includeRecommendations \r\n      ? generateDetailedMetadataRecommendations(results, analysis)\r\n      : [];\r\n\r\n    logger.info(LogLevel.INFO, 'Batch metadata validation completed', {\r\n      urlsCount: urls.length,\r\n      testsRun: results.length,\r\n      averageScore: analysis.averageScore\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        results,\r\n        analysis,\r\n        recommendations,\r\n        configuration: thresholds || 'default',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Metadata testing API POST error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to perform batch metadata validation',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES DE UTILIDAD\r\n// ===================================\r\n\r\nfunction generateMetadataRecommendations(results: any[]): string[] {\r\n  const recommendations = [];\r\n  \r\n  const failedTitles = results.filter(r => r.testName.includes('Title') && r.status === 'failed');\r\n  const failedDescriptions = results.filter(r => r.testName.includes('Description') && r.status === 'failed');\r\n  const failedKeywords = results.filter(r => r.testName.includes('Keywords') && r.status !== 'passed');\r\n  const failedOpenGraph = results.filter(r => r.testName.includes('Open Graph') && r.status !== 'passed');\r\n\r\n  if (failedTitles.length > 0) {\r\n    recommendations.push(`Fix ${failedTitles.length} title tag issues - ensure 30-60 character length`);\r\n  }\r\n  \r\n  if (failedDescriptions.length > 0) {\r\n    recommendations.push(`Improve ${failedDescriptions.length} meta descriptions - aim for 120-160 characters`);\r\n  }\r\n  \r\n  if (failedKeywords.length > 0) {\r\n    recommendations.push(`Optimize keywords for ${failedKeywords.length} pages - include 3-5 relevant terms`);\r\n  }\r\n  \r\n  if (failedOpenGraph.length > 0) {\r\n    recommendations.push(`Add Open Graph tags to ${failedOpenGraph.length} pages for better social sharing`);\r\n  }\r\n\r\n  if (recommendations.length === 0) {\r\n    recommendations.push('All metadata tests passed - excellent SEO optimization!');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction analyzeMetadataResults(results: any[]): {\r\n  averageScore: number;\r\n  titleIssues: number;\r\n  descriptionIssues: number;\r\n  keywordIssues: number;\r\n  openGraphIssues: number;\r\n  mostCommonIssues: string[];\r\n  urlsWithIssues: string[];\r\n} {\r\n  const averageScore = results.length > 0 \r\n    ? Math.round(results.reduce((sum, r) => sum + r.score, 0) / results.length)\r\n    : 0;\r\n\r\n  const titleIssues = results.filter(r => \r\n    r.testName.includes('Title') && r.status !== 'passed'\r\n  ).length;\r\n\r\n  const descriptionIssues = results.filter(r => \r\n    r.testName.includes('Description') && r.status !== 'passed'\r\n  ).length;\r\n\r\n  const keywordIssues = results.filter(r => \r\n    r.testName.includes('Keywords') && r.status !== 'passed'\r\n  ).length;\r\n\r\n  const openGraphIssues = results.filter(r => \r\n    r.testName.includes('Open Graph') && r.status !== 'passed'\r\n  ).length;\r\n\r\n  const mostCommonIssues = [];\r\n  if (titleIssues > 0) {mostCommonIssues.push('Title optimization needed');}\r\n  if (descriptionIssues > 0) {mostCommonIssues.push('Meta description issues');}\r\n  if (keywordIssues > 0) {mostCommonIssues.push('Keyword optimization required');}\r\n  if (openGraphIssues > 0) {mostCommonIssues.push('Missing Open Graph tags');}\r\n\r\n  const urlsWithIssues = [...new Set(\r\n    results\r\n      .filter(r => r.status !== 'passed')\r\n      .map(r => r.url)\r\n  )];\r\n\r\n  return {\r\n    averageScore,\r\n    titleIssues,\r\n    descriptionIssues,\r\n    keywordIssues,\r\n    openGraphIssues,\r\n    mostCommonIssues,\r\n    urlsWithIssues\r\n  };\r\n}\r\n\r\nfunction generateDetailedMetadataRecommendations(results: any[], analysis: any): Array<{\r\n  priority: 'high' | 'medium' | 'low';\r\n  category: string;\r\n  issue: string;\r\n  solution: string;\r\n  affectedUrls: string[];\r\n}> {\r\n  const recommendations = [];\r\n\r\n  if (analysis.titleIssues > 0) {\r\n    const affectedUrls = results\r\n      .filter(r => r.testName.includes('Title') && r.status !== 'passed')\r\n      .map(r => r.url);\r\n\r\n    recommendations.push({\r\n      priority: 'high' as const,\r\n      category: 'Title Tags',\r\n      issue: `${analysis.titleIssues} pages have title tag issues`,\r\n      solution: 'Optimize title tags to 30-60 characters, include primary keywords, and ensure uniqueness',\r\n      affectedUrls\r\n    });\r\n  }\r\n\r\n  if (analysis.descriptionIssues > 0) {\r\n    const affectedUrls = results\r\n      .filter(r => r.testName.includes('Description') && r.status !== 'passed')\r\n      .map(r => r.url);\r\n\r\n    recommendations.push({\r\n      priority: 'high' as const,\r\n      category: 'Meta Descriptions',\r\n      issue: `${analysis.descriptionIssues} pages have meta description issues`,\r\n      solution: 'Write compelling meta descriptions of 120-160 characters with clear call-to-action',\r\n      affectedUrls\r\n    });\r\n  }\r\n\r\n  if (analysis.openGraphIssues > 0) {\r\n    const affectedUrls = results\r\n      .filter(r => r.testName.includes('Open Graph') && r.status !== 'passed')\r\n      .map(r => r.url);\r\n\r\n    recommendations.push({\r\n      priority: 'medium' as const,\r\n      category: 'Open Graph',\r\n      issue: `${analysis.openGraphIssues} pages missing Open Graph tags`,\r\n      solution: 'Add og:title, og:description, og:image, and og:url tags for better social media sharing',\r\n      affectedUrls\r\n    });\r\n  }\r\n\r\n  if (analysis.keywordIssues > 0) {\r\n    const affectedUrls = results\r\n      .filter(r => r.testName.includes('Keywords') && r.status !== 'passed')\r\n      .map(r => r.url);\r\n\r\n    recommendations.push({\r\n      priority: 'medium' as const,\r\n      category: 'Keywords',\r\n      issue: `${analysis.keywordIssues} pages need keyword optimization`,\r\n      solution: 'Include 3-5 relevant keywords that match user search intent and page content',\r\n      affectedUrls\r\n    });\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n// ===================================\r\n// OPCIONES CORS\r\n// ===================================\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}