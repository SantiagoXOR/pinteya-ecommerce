{"version":3,"names":["EnhancedSEOOptimizationTools","cov_1cff3efqba","f","s","SEOOptimizationTools","enhancedSEOOptimizationTools","DEFAULT_SEO_OPTIMIZATION_CONFIG","enableCompetitorAnalysis","enableABTesting","enableCoreWebVitalsOptimization","enableKeywordResearch","enableContentOptimization","enableTechnicalAudit","competitorAnalysisDepth","abTestDuration","coreWebVitalsThresholds","lcp","good","needsImprovement","fid","cls","fcp","ttfb","inp","cacheEnabled","cacheTTL","externalAPIs","semrush","apiKey","enabled","ahrefs","googlePageSpeed","constructor","config","cache","Map","activeABTests","recommendations","initializeRedis","_logger","logger","info","LogLevel","INFO","enabledFeatures","competitorAnalysis","abTesting","coreWebVitals","keywordResearch","contentOptimization","technicalAudit","LogCategory","SEO","getInstance","instance","b","redis","_redis","getRedisClient","error","warn","WARN","analyzeCompetitors","competitors","Error","results","competitor","cached","getCachedData","push","analysis","performCompetitorAnalysis","setCachedData","_seoanalyticsmanager","enhancedSEOAnalyticsManager","trackSEOMetrics","competitorsAnalyzed","length","timestamp","Date","ERROR","domain","extractDomain","overallScore","Math","floor","random","strengths","slice","weaknesses","opportunities","keywordGaps","analyzeKeywordGaps","contentGaps","analyzeContentGaps","technicalAdvantages","backlinksAnalysis","totalBacklinks","uniqueDomains","domainAuthority","topReferringDomains","authority","backlinks","traffic","anchorTextDistribution","linkTypes","doFollow","noFollow","sponsored","ugc","socialSignals","facebook","likes","shares","comments","twitter","tweets","retweets","linkedin","instagram","posts","totalEngagement","viralityScore","lastAnalyzed","keywords","map","keyword","competitorRanking","ourRanking","searchVolume","difficulty","opportunity","intent","estimatedTraffic","estimatedRevenue","topics","topic","competitorContent","title","url","toLowerCase","replace","wordCount","socialShares","ourContent","exists","undefined","priority","estimatedEffort","createABTest","testConfig","testId","now","toString","substr","abTest","testName","name","status","startDate","variants","variant","index","id","metadata","metrics","impressions","clicks","ctr","conversions","conversionRate","revenue","confidence","isWinner","winningVariant","improvement","significance","recommendation","set","updateABTestMetrics","variantId","test","get","find","v","analyzeABTestResults","controlVariant","testVariants","bestVariant","maxImprovement","forEach","min","max","toFixed","analyzeCoreWebVitals","currentMetrics","targetMetrics","optimizations","generateCoreWebVitalsOptimizations","calculateCoreWebVitalsScore","improvementPotential","calculateImprovementPotential","result","current","target","metric","issue","solution","estimatedImpact","implementationEffort","resources","lcpScore","fidScore","clsScore","round","improvements","reduce","a","optimizeContent","contentType","currentScore","targetScore","suggestions","generateContentSuggestions","keywordOptimization","analyzeKeywordOptimization","readabilityAnalysis","analyzeReadability","suggestionsCount","type","suggested","reason","impact","keywordsByType","product","category","blog","page","primaryKeyword","currentDensity","targetDensity","relatedKeywords","semanticKeywords","score","grade","performTechnicalAudit","issues","generateTechnicalIssues","categories","categorizeTechnicalIssues","calculateTechnicalScore","generateTechnicalRecommendations","issuesCount","possibleIssues","description","effort","criticalIssues","filter","i","errorIssues","crawlability","indexability","performance","mobile","security","structured_data","scores","Object","values","cat","action","expectedImpact","generateAutomatedRecommendations","actionItems","task","timeline","expectedResults","trafficIncrease","rankingImprovement","conversionIncrease","timeframe","createdAt","count","URL","startsWith","hostname","key","JSON","parse","data","setex","stringify","configure","keys","clearCache","del","clear","getUsageStats","size","totalRecommendations","cacheSize","entries","value","destroy"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\seo\\seo-optimization-tools.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENHANCED SEO OPTIMIZATION TOOLS\r\n// Sistema avanzado de herramientas de optimización SEO con análisis de competidores,\r\n// A/B testing de metadata, optimización de Core Web Vitals y recomendaciones automáticas\r\n// ===================================\r\n\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\nimport { getRedisClient } from '@/lib/integrations/redis';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { enhancedSEOAnalyticsManager } from '@/lib/seo/seo-analytics-manager';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS PRINCIPALES\r\n// ===================================\r\n\r\nexport interface SEOOptimizationConfig {\r\n  enableCompetitorAnalysis: boolean;\r\n  enableABTesting: boolean;\r\n  enableCoreWebVitalsOptimization: boolean;\r\n  enableKeywordResearch: boolean;\r\n  enableContentOptimization: boolean;\r\n  enableTechnicalAudit: boolean;\r\n  \r\n  // Configuración de análisis\r\n  competitorAnalysisDepth: 'basic' | 'detailed' | 'comprehensive';\r\n  abTestDuration: number; // días\r\n  coreWebVitalsThresholds: CoreWebVitalsThresholds;\r\n  \r\n  // Configuración de cache\r\n  cacheEnabled: boolean;\r\n  cacheTTL: number; // segundos\r\n  \r\n  // APIs externas (opcional)\r\n  externalAPIs: {\r\n    semrush?: { apiKey: string; enabled: boolean };\r\n    ahrefs?: { apiKey: string; enabled: boolean };\r\n    googlePageSpeed?: { apiKey: string; enabled: boolean };\r\n  };\r\n}\r\n\r\nexport interface CoreWebVitalsThresholds {\r\n  lcp: { good: number; needsImprovement: number }; // Largest Contentful Paint\r\n  fid: { good: number; needsImprovement: number }; // First Input Delay\r\n  cls: { good: number; needsImprovement: number }; // Cumulative Layout Shift\r\n  fcp: { good: number; needsImprovement: number }; // First Contentful Paint\r\n  ttfb: { good: number; needsImprovement: number }; // Time to First Byte\r\n  inp: { good: number; needsImprovement: number }; // Interaction to Next Paint\r\n}\r\n\r\nexport interface CompetitorAnalysisResult {\r\n  competitor: string;\r\n  domain: string;\r\n  overallScore: number;\r\n  strengths: string[];\r\n  weaknesses: string[];\r\n  opportunities: string[];\r\n  keywordGaps: KeywordGap[];\r\n  contentGaps: ContentGap[];\r\n  technicalAdvantages: string[];\r\n  backlinksAnalysis: BacklinksAnalysis;\r\n  socialSignals: SocialSignalsAnalysis;\r\n  lastAnalyzed: Date;\r\n}\r\n\r\nexport interface KeywordGap {\r\n  keyword: string;\r\n  competitorRanking: number;\r\n  ourRanking: number | null;\r\n  searchVolume: number;\r\n  difficulty: number;\r\n  opportunity: 'high' | 'medium' | 'low';\r\n  intent: 'informational' | 'navigational' | 'transactional' | 'commercial';\r\n  estimatedTraffic: number;\r\n  estimatedRevenue: number;\r\n}\r\n\r\nexport interface ContentGap {\r\n  topic: string;\r\n  competitorContent: {\r\n    title: string;\r\n    url: string;\r\n    wordCount: number;\r\n    socialShares: number;\r\n    backlinks: number;\r\n  };\r\n  ourContent: {\r\n    exists: boolean;\r\n    url?: string;\r\n    wordCount?: number;\r\n    socialShares?: number;\r\n    backlinks?: number;\r\n  };\r\n  opportunity: 'create' | 'improve' | 'expand';\r\n  priority: 'high' | 'medium' | 'low';\r\n  estimatedEffort: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport interface BacklinksAnalysis {\r\n  totalBacklinks: number;\r\n  uniqueDomains: number;\r\n  domainAuthority: number;\r\n  topReferringDomains: Array<{\r\n    domain: string;\r\n    authority: number;\r\n    backlinks: number;\r\n    traffic: number;\r\n  }>;\r\n  anchorTextDistribution: Record<string, number>;\r\n  linkTypes: {\r\n    doFollow: number;\r\n    noFollow: number;\r\n    sponsored: number;\r\n    ugc: number;\r\n  };\r\n}\r\n\r\nexport interface SocialSignalsAnalysis {\r\n  facebook: { likes: number; shares: number; comments: number };\r\n  twitter: { tweets: number; retweets: number; likes: number };\r\n  linkedin: { shares: number; likes: number; comments: number };\r\n  instagram: { posts: number; likes: number; comments: number };\r\n  totalEngagement: number;\r\n  viralityScore: number;\r\n}\r\n\r\nexport interface ABTestResult {\r\n  testId: string;\r\n  testName: string;\r\n  status: 'running' | 'completed' | 'paused' | 'cancelled';\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  \r\n  variants: Array<{\r\n    id: string;\r\n    name: string;\r\n    metadata: {\r\n      title?: string;\r\n      description?: string;\r\n      keywords?: string[];\r\n    };\r\n    metrics: {\r\n      impressions: number;\r\n      clicks: number;\r\n      ctr: number;\r\n      conversions: number;\r\n      conversionRate: number;\r\n      revenue: number;\r\n    };\r\n    confidence: number;\r\n    isWinner: boolean;\r\n  }>;\r\n  \r\n  results: {\r\n    winningVariant: string;\r\n    improvement: number;\r\n    significance: number;\r\n    recommendation: string;\r\n  };\r\n}\r\n\r\nexport interface CoreWebVitalsOptimization {\r\n  url: string;\r\n  currentMetrics: {\r\n    lcp: number;\r\n    fid: number;\r\n    cls: number;\r\n    fcp: number;\r\n    ttfb: number;\r\n    inp: number;\r\n  };\r\n  \r\n  targetMetrics: {\r\n    lcp: number;\r\n    fid: number;\r\n    cls: number;\r\n    fcp: number;\r\n    ttfb: number;\r\n    inp: number;\r\n  };\r\n  \r\n  optimizations: Array<{\r\n    metric: string;\r\n    issue: string;\r\n    solution: string;\r\n    priority: 'critical' | 'high' | 'medium' | 'low';\r\n    estimatedImpact: number; // percentage improvement\r\n    implementationEffort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }>;\r\n  \r\n  overallScore: number;\r\n  improvementPotential: number;\r\n}\r\n\r\nexport interface ContentOptimizationSuggestion {\r\n  url: string;\r\n  contentType: 'product' | 'category' | 'blog' | 'page';\r\n  currentScore: number;\r\n  targetScore: number;\r\n  \r\n  suggestions: Array<{\r\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema';\r\n    current: string;\r\n    suggested: string;\r\n    reason: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    difficulty: 'easy' | 'medium' | 'hard';\r\n  }>;\r\n  \r\n  keywordOptimization: {\r\n    primaryKeyword: string;\r\n    currentDensity: number;\r\n    targetDensity: number;\r\n    relatedKeywords: string[];\r\n    semanticKeywords: string[];\r\n  };\r\n  \r\n  readabilityAnalysis: {\r\n    score: number;\r\n    grade: string;\r\n    suggestions: string[];\r\n  };\r\n}\r\n\r\nexport interface TechnicalSEOAuditResult {\r\n  url: string;\r\n  overallScore: number;\r\n  \r\n  issues: Array<{\r\n    category: 'critical' | 'error' | 'warning' | 'notice';\r\n    type: string;\r\n    description: string;\r\n    solution: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    effort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }>;\r\n  \r\n  categories: {\r\n    crawlability: { score: number; issues: number };\r\n    indexability: { score: number; issues: number };\r\n    performance: { score: number; issues: number };\r\n    mobile: { score: number; issues: number };\r\n    security: { score: number; issues: number };\r\n    structured_data: { score: number; issues: number };\r\n  };\r\n  \r\n  recommendations: Array<{\r\n    priority: 'immediate' | 'short_term' | 'long_term';\r\n    action: string;\r\n    expectedImpact: string;\r\n    resources: string[];\r\n  }>;\r\n}\r\n\r\nexport interface AutomatedRecommendation {\r\n  id: string;\r\n  type: 'keyword' | 'content' | 'technical' | 'competitor' | 'performance';\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  title: string;\r\n  description: string;\r\n  \r\n  actionItems: Array<{\r\n    task: string;\r\n    effort: 'low' | 'medium' | 'high';\r\n    impact: 'high' | 'medium' | 'low';\r\n    timeline: string;\r\n    resources: string[];\r\n  }>;\r\n  \r\n  expectedResults: {\r\n    trafficIncrease: number; // percentage\r\n    rankingImprovement: number; // positions\r\n    conversionIncrease: number; // percentage\r\n    timeframe: string;\r\n  };\r\n  \r\n  createdAt: Date;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'dismissed';\r\n}\r\n\r\n// Configuración por defecto\r\nconst DEFAULT_SEO_OPTIMIZATION_CONFIG: SEOOptimizationConfig = {\r\n  enableCompetitorAnalysis: true,\r\n  enableABTesting: true,\r\n  enableCoreWebVitalsOptimization: true,\r\n  enableKeywordResearch: true,\r\n  enableContentOptimization: true,\r\n  enableTechnicalAudit: true,\r\n  \r\n  competitorAnalysisDepth: 'detailed',\r\n  abTestDuration: 14, // 2 semanas\r\n  \r\n  coreWebVitalsThresholds: {\r\n    lcp: { good: 2.5, needsImprovement: 4.0 },\r\n    fid: { good: 100, needsImprovement: 300 },\r\n    cls: { good: 0.1, needsImprovement: 0.25 },\r\n    fcp: { good: 1.8, needsImprovement: 3.0 },\r\n    ttfb: { good: 600, needsImprovement: 1500 },\r\n    inp: { good: 200, needsImprovement: 500 }\r\n  },\r\n  \r\n  cacheEnabled: true,\r\n  cacheTTL: 3600, // 1 hora\r\n  \r\n  externalAPIs: {\r\n    semrush: { apiKey: '', enabled: false },\r\n    ahrefs: { apiKey: '', enabled: false },\r\n    googlePageSpeed: { apiKey: '', enabled: false }\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ENHANCED SEO OPTIMIZATION TOOLS CLASS\r\n// ===================================\r\n\r\nexport class EnhancedSEOOptimizationTools {\r\n  private static instance: EnhancedSEOOptimizationTools;\r\n  private config: SEOOptimizationConfig;\r\n  private redis: any;\r\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\r\n  private activeABTests: Map<string, ABTestResult> = new Map();\r\n  private recommendations: AutomatedRecommendation[] = [];\r\n\r\n  private constructor(config?: Partial<SEOOptimizationConfig>) {\r\n    this.config = { ...DEFAULT_SEO_OPTIMIZATION_CONFIG, ...config };\r\n    this.initializeRedis();\r\n\r\n    logger.info(LogLevel.INFO, 'Enhanced SEO Optimization Tools initialized', {\r\n      enabledFeatures: {\r\n        competitorAnalysis: this.config.enableCompetitorAnalysis,\r\n        abTesting: this.config.enableABTesting,\r\n        coreWebVitals: this.config.enableCoreWebVitalsOptimization,\r\n        keywordResearch: this.config.enableKeywordResearch,\r\n        contentOptimization: this.config.enableContentOptimization,\r\n        technicalAudit: this.config.enableTechnicalAudit\r\n      }\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  public static getInstance(config?: Partial<SEOOptimizationConfig>): EnhancedSEOOptimizationTools {\r\n    if (!EnhancedSEOOptimizationTools.instance) {\r\n      EnhancedSEOOptimizationTools.instance = new EnhancedSEOOptimizationTools(config);\r\n    }\r\n    return EnhancedSEOOptimizationTools.instance;\r\n  }\r\n\r\n  private async initializeRedis(): Promise<void> {\r\n    try {\r\n      this.redis = await getRedisClient();\r\n      logger.info(LogLevel.INFO, 'Redis initialized for SEO optimization tools', {}, LogCategory.SEO);\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Redis not available for SEO optimization tools', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE COMPETIDORES\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar competidores principales\r\n   */\r\n  public async analyzeCompetitors(competitors: string[]): Promise<CompetitorAnalysisResult[]> {\r\n    if (!this.config.enableCompetitorAnalysis) {\r\n      throw new Error('Competitor analysis is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting competitor analysis', { competitors }, LogCategory.SEO);\r\n\r\n      const results: CompetitorAnalysisResult[] = [];\r\n\r\n      for (const competitor of competitors) {\r\n        // Verificar cache\r\n        const cached = await this.getCachedData(`competitor:${competitor}`);\r\n        if (cached) {\r\n          results.push(cached);\r\n          continue;\r\n        }\r\n\r\n        // Realizar análisis completo\r\n        const analysis = await this.performCompetitorAnalysis(competitor);\r\n        results.push(analysis);\r\n\r\n        // Cachear resultado\r\n        await this.setCachedData(`competitor:${competitor}`, analysis);\r\n      }\r\n\r\n      // Integrar con SEO Analytics\r\n      enhancedSEOAnalyticsManager.trackSEOMetrics({\r\n        competitorAnalysis: {\r\n          competitorsAnalyzed: competitors.length,\r\n          timestamp: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'Competitor analysis completed', {\r\n        competitorsAnalyzed: competitors.length\r\n      }, LogCategory.SEO);\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze competitors', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realizar análisis detallado de un competidor\r\n   */\r\n  private async performCompetitorAnalysis(competitor: string): Promise<CompetitorAnalysisResult> {\r\n    const domain = this.extractDomain(competitor);\r\n\r\n    // Simular análisis comprehensivo (en producción se integraría con APIs reales)\r\n    const analysis: CompetitorAnalysisResult = {\r\n      competitor,\r\n      domain,\r\n      overallScore: Math.floor(Math.random() * 40) + 60, // 60-100\r\n\r\n      strengths: [\r\n        'Strong domain authority',\r\n        'Excellent content marketing strategy',\r\n        'High-quality backlink profile',\r\n        'Optimized Core Web Vitals',\r\n        'Comprehensive keyword coverage'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\r\n\r\n      weaknesses: [\r\n        'Limited social media presence',\r\n        'Slow page load times',\r\n        'Poor mobile optimization',\r\n        'Thin content on product pages',\r\n        'Missing structured data'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 1),\r\n\r\n      opportunities: [\r\n        'Untapped long-tail keywords',\r\n        'Content gap in how-to guides',\r\n        'Local SEO optimization',\r\n        'Video content creation',\r\n        'Voice search optimization'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 2),\r\n\r\n      keywordGaps: await this.analyzeKeywordGaps(competitor),\r\n      contentGaps: await this.analyzeContentGaps(competitor),\r\n      technicalAdvantages: [\r\n        'HTTPS implementation',\r\n        'XML sitemap optimization',\r\n        'Clean URL structure',\r\n        'Proper canonical tags'\r\n      ],\r\n\r\n      backlinksAnalysis: {\r\n        totalBacklinks: Math.floor(Math.random() * 50000) + 10000,\r\n        uniqueDomains: Math.floor(Math.random() * 5000) + 1000,\r\n        domainAuthority: Math.floor(Math.random() * 30) + 50,\r\n        topReferringDomains: [\r\n          { domain: 'industry-blog.com', authority: 85, backlinks: 150, traffic: 50000 },\r\n          { domain: 'news-site.com', authority: 78, backlinks: 89, traffic: 75000 },\r\n          { domain: 'partner-site.com', authority: 72, backlinks: 234, traffic: 30000 }\r\n        ],\r\n        anchorTextDistribution: {\r\n          'brand name': 35,\r\n          'generic terms': 25,\r\n          'exact match': 15,\r\n          'partial match': 20,\r\n          'other': 5\r\n        },\r\n        linkTypes: {\r\n          doFollow: 75,\r\n          noFollow: 20,\r\n          sponsored: 3,\r\n          ugc: 2\r\n        }\r\n      },\r\n\r\n      socialSignals: {\r\n        facebook: { likes: 15000, shares: 2500, comments: 800 },\r\n        twitter: { tweets: 5000, retweets: 1200, likes: 8000 },\r\n        linkedin: { shares: 800, likes: 1500, comments: 200 },\r\n        instagram: { posts: 1200, likes: 25000, comments: 1800 },\r\n        totalEngagement: 61900,\r\n        viralityScore: Math.floor(Math.random() * 40) + 60\r\n      },\r\n\r\n      lastAnalyzed: new Date()\r\n    };\r\n\r\n    return analysis;\r\n  }\r\n\r\n  /**\r\n   * Analizar gaps de keywords\r\n   */\r\n  private async analyzeKeywordGaps(competitor: string): Promise<KeywordGap[]> {\r\n    // Simular análisis de keyword gaps\r\n    const keywords = [\r\n      'pintura interior', 'pintura exterior', 'esmalte sintético', 'látex acrílico',\r\n      'pintura antihumedad', 'barniz para madera', 'imprimación', 'rodillos de pintura',\r\n      'pinceles profesionales', 'pistola de pintar'\r\n    ];\r\n\r\n    return keywords.map(keyword => ({\r\n      keyword,\r\n      competitorRanking: Math.floor(Math.random() * 10) + 1,\r\n      ourRanking: Math.random() > 0.3 ? Math.floor(Math.random() * 20) + 11 : null,\r\n      searchVolume: Math.floor(Math.random() * 5000) + 500,\r\n      difficulty: Math.floor(Math.random() * 100),\r\n      opportunity: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\r\n      intent: ['informational', 'navigational', 'transactional', 'commercial'][Math.floor(Math.random() * 4)] as any,\r\n      estimatedTraffic: Math.floor(Math.random() * 1000) + 100,\r\n      estimatedRevenue: Math.floor(Math.random() * 5000) + 500\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Analizar gaps de contenido\r\n   */\r\n  private async analyzeContentGaps(competitor: string): Promise<ContentGap[]> {\r\n    const topics = [\r\n      'Guía de colores para interiores',\r\n      'Cómo preparar superficies antes de pintar',\r\n      'Técnicas de pintura profesional',\r\n      'Mantenimiento de herramientas de pintura',\r\n      'Tendencias en decoración 2024'\r\n    ];\r\n\r\n    return topics.map(topic => ({\r\n      topic,\r\n      competitorContent: {\r\n        title: `${topic} - Guía completa`,\r\n        url: `https://${competitor}/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}`,\r\n        wordCount: Math.floor(Math.random() * 2000) + 1000,\r\n        socialShares: Math.floor(Math.random() * 500) + 50,\r\n        backlinks: Math.floor(Math.random() * 50) + 10\r\n      },\r\n      ourContent: {\r\n        exists: Math.random() > 0.5,\r\n        url: Math.random() > 0.5 ? `/blog/${topic.toLowerCase().replace(/\\s+/g, '-')}` : undefined,\r\n        wordCount: Math.random() > 0.5 ? Math.floor(Math.random() * 1500) + 500 : undefined,\r\n        socialShares: Math.random() > 0.5 ? Math.floor(Math.random() * 200) + 20 : undefined,\r\n        backlinks: Math.random() > 0.5 ? Math.floor(Math.random() * 20) + 5 : undefined\r\n      },\r\n      opportunity: Math.random() > 0.6 ? 'create' : Math.random() > 0.3 ? 'improve' : 'expand',\r\n      priority: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\r\n      estimatedEffort: Math.random() > 0.6 ? 'low' : Math.random() > 0.3 ? 'medium' : 'high'\r\n    }));\r\n  }\r\n\r\n  // ===================================\r\n  // A/B TESTING DE METADATA\r\n  // ===================================\r\n\r\n  /**\r\n   * Crear nuevo A/B test para metadata\r\n   */\r\n  public async createABTest(testConfig: {\r\n    name: string;\r\n    url: string;\r\n    variants: Array<{\r\n      name: string;\r\n      metadata: {\r\n        title?: string;\r\n        description?: string;\r\n        keywords?: string[];\r\n      };\r\n    }>;\r\n  }): Promise<string> {\r\n    if (!this.config.enableABTesting) {\r\n      throw new Error('A/B Testing is disabled');\r\n    }\r\n\r\n    try {\r\n      const testId = `ab_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      const abTest: ABTestResult = {\r\n        testId,\r\n        testName: testConfig.name,\r\n        status: 'running',\r\n        startDate: new Date(),\r\n\r\n        variants: testConfig.variants.map((variant, index) => ({\r\n          id: `variant_${index}`,\r\n          name: variant.name,\r\n          metadata: variant.metadata,\r\n          metrics: {\r\n            impressions: 0,\r\n            clicks: 0,\r\n            ctr: 0,\r\n            conversions: 0,\r\n            conversionRate: 0,\r\n            revenue: 0\r\n          },\r\n          confidence: 0,\r\n          isWinner: false\r\n        })),\r\n\r\n        results: {\r\n          winningVariant: '',\r\n          improvement: 0,\r\n          significance: 0,\r\n          recommendation: ''\r\n        }\r\n      };\r\n\r\n      this.activeABTests.set(testId, abTest);\r\n\r\n      // Cachear en Redis\r\n      await this.setCachedData(`ab_test:${testId}`, abTest);\r\n\r\n      logger.info(LogLevel.INFO, 'A/B Test created', {\r\n        testId,\r\n        testName: testConfig.name,\r\n        variants: testConfig.variants.length\r\n      }, LogCategory.SEO);\r\n\r\n      return testId;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to create A/B test', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualizar métricas de A/B test\r\n   */\r\n  public async updateABTestMetrics(testId: string, variantId: string, metrics: {\r\n    impressions?: number;\r\n    clicks?: number;\r\n    conversions?: number;\r\n    revenue?: number;\r\n  }): Promise<void> {\r\n    try {\r\n      const test = this.activeABTests.get(testId);\r\n      if (!test) {\r\n        throw new Error(`A/B Test ${testId} not found`);\r\n      }\r\n\r\n      const variant = test.variants.find(v => v.id === variantId);\r\n      if (!variant) {\r\n        throw new Error(`Variant ${variantId} not found in test ${testId}`);\r\n      }\r\n\r\n      // Actualizar métricas\r\n      if (metrics.impressions !== undefined) {\r\n        variant.metrics.impressions += metrics.impressions;\r\n      }\r\n      if (metrics.clicks !== undefined) {\r\n        variant.metrics.clicks += metrics.clicks;\r\n      }\r\n      if (metrics.conversions !== undefined) {\r\n        variant.metrics.conversions += metrics.conversions;\r\n      }\r\n      if (metrics.revenue !== undefined) {\r\n        variant.metrics.revenue += metrics.revenue;\r\n      }\r\n\r\n      // Recalcular métricas derivadas\r\n      variant.metrics.ctr = variant.metrics.impressions > 0\r\n        ? (variant.metrics.clicks / variant.metrics.impressions) * 100\r\n        : 0;\r\n\r\n      variant.metrics.conversionRate = variant.metrics.clicks > 0\r\n        ? (variant.metrics.conversions / variant.metrics.clicks) * 100\r\n        : 0;\r\n\r\n      // Actualizar cache\r\n      await this.setCachedData(`ab_test:${testId}`, test);\r\n\r\n      logger.info(LogLevel.INFO, 'A/B Test metrics updated', {\r\n        testId,\r\n        variantId,\r\n        metrics: variant.metrics\r\n      }, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to update A/B test metrics', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analizar resultados de A/B test\r\n   */\r\n  public async analyzeABTestResults(testId: string): Promise<ABTestResult> {\r\n    try {\r\n      const test = this.activeABTests.get(testId);\r\n      if (!test) {\r\n        throw new Error(`A/B Test ${testId} not found`);\r\n      }\r\n\r\n      // Calcular significancia estadística (simplificado)\r\n      const controlVariant = test.variants[0];\r\n      const testVariants = test.variants.slice(1);\r\n\r\n      let bestVariant = controlVariant;\r\n      let maxImprovement = 0;\r\n\r\n      testVariants.forEach(variant => {\r\n        const improvement = ((variant.metrics.conversionRate - controlVariant.metrics.conversionRate)\r\n          / controlVariant.metrics.conversionRate) * 100;\r\n\r\n        if (improvement > maxImprovement) {\r\n          maxImprovement = improvement;\r\n          bestVariant = variant;\r\n        }\r\n\r\n        // Calcular confianza (simplificado)\r\n        variant.confidence = Math.min(95, Math.max(0,\r\n          (variant.metrics.conversions / Math.max(1, variant.metrics.clicks)) * 100\r\n        ));\r\n      });\r\n\r\n      // Marcar ganador\r\n      test.variants.forEach(v => v.isWinner = false);\r\n      bestVariant.isWinner = true;\r\n\r\n      // Actualizar resultados\r\n      test.results = {\r\n        winningVariant: bestVariant.id,\r\n        improvement: maxImprovement,\r\n        significance: bestVariant.confidence,\r\n        recommendation: maxImprovement > 10\r\n          ? `Implement ${bestVariant.name} - shows ${maxImprovement.toFixed(1)}% improvement`\r\n          : 'Continue testing - no significant difference detected'\r\n      };\r\n\r\n      // Actualizar cache\r\n      await this.setCachedData(`ab_test:${testId}`, test);\r\n\r\n      return test;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze A/B test results', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIÓN DE CORE WEB VITALS\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar Core Web Vitals de una URL\r\n   */\r\n  public async analyzeCoreWebVitals(url: string): Promise<CoreWebVitalsOptimization> {\r\n    if (!this.config.enableCoreWebVitalsOptimization) {\r\n      throw new Error('Core Web Vitals optimization is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Analyzing Core Web Vitals', { url }, LogCategory.SEO);\r\n\r\n      // Simular métricas actuales (en producción se usaría PageSpeed Insights API)\r\n      const currentMetrics = {\r\n        lcp: 2.8 + Math.random() * 2, // 2.8-4.8s\r\n        fid: 80 + Math.random() * 200, // 80-280ms\r\n        cls: 0.05 + Math.random() * 0.2, // 0.05-0.25\r\n        fcp: 1.5 + Math.random() * 1.5, // 1.5-3s\r\n        ttfb: 400 + Math.random() * 800, // 400-1200ms\r\n        inp: 150 + Math.random() * 300 // 150-450ms\r\n      };\r\n\r\n      const targetMetrics = {\r\n        lcp: this.config.coreWebVitalsThresholds.lcp.good,\r\n        fid: this.config.coreWebVitalsThresholds.fid.good,\r\n        cls: this.config.coreWebVitalsThresholds.cls.good,\r\n        fcp: this.config.coreWebVitalsThresholds.fcp.good,\r\n        ttfb: this.config.coreWebVitalsThresholds.ttfb.good,\r\n        inp: this.config.coreWebVitalsThresholds.inp.good\r\n      };\r\n\r\n      const optimizations = this.generateCoreWebVitalsOptimizations(currentMetrics, targetMetrics);\r\n\r\n      const overallScore = this.calculateCoreWebVitalsScore(currentMetrics);\r\n      const improvementPotential = this.calculateImprovementPotential(currentMetrics, targetMetrics);\r\n\r\n      const result: CoreWebVitalsOptimization = {\r\n        url,\r\n        currentMetrics,\r\n        targetMetrics,\r\n        optimizations,\r\n        overallScore,\r\n        improvementPotential\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`cwv:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Core Web Vitals analysis completed', {\r\n        url,\r\n        overallScore,\r\n        improvementPotential\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to analyze Core Web Vitals', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar optimizaciones específicas para Core Web Vitals\r\n   */\r\n  private generateCoreWebVitalsOptimizations(current: any, target: any): Array<{\r\n    metric: string;\r\n    issue: string;\r\n    solution: string;\r\n    priority: 'critical' | 'high' | 'medium' | 'low';\r\n    estimatedImpact: number;\r\n    implementationEffort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }> {\r\n    const optimizations = [];\r\n\r\n    // LCP Optimizations\r\n    if (current.lcp > target.lcp) {\r\n      optimizations.push({\r\n        metric: 'LCP',\r\n        issue: `LCP is ${current.lcp.toFixed(2)}s, target is ${target.lcp}s`,\r\n        solution: 'Optimize largest contentful paint by compressing images, using CDN, and preloading critical resources',\r\n        priority: current.lcp > 4.0 ? 'critical' : 'high' as any,\r\n        estimatedImpact: 25,\r\n        implementationEffort: 'medium' as any,\r\n        resources: ['Image optimization tools', 'CDN setup', 'Critical resource preloading']\r\n      });\r\n    }\r\n\r\n    // FID Optimizations\r\n    if (current.fid > target.fid) {\r\n      optimizations.push({\r\n        metric: 'FID',\r\n        issue: `FID is ${current.fid.toFixed(0)}ms, target is ${target.fid}ms`,\r\n        solution: 'Reduce JavaScript execution time and optimize third-party scripts',\r\n        priority: current.fid > 300 ? 'critical' : 'high' as any,\r\n        estimatedImpact: 30,\r\n        implementationEffort: 'high' as any,\r\n        resources: ['JavaScript optimization', 'Code splitting', 'Third-party script audit']\r\n      });\r\n    }\r\n\r\n    // CLS Optimizations\r\n    if (current.cls > target.cls) {\r\n      optimizations.push({\r\n        metric: 'CLS',\r\n        issue: `CLS is ${current.cls.toFixed(3)}, target is ${target.cls}`,\r\n        solution: 'Set explicit dimensions for images and ads, avoid inserting content above existing content',\r\n        priority: current.cls > 0.25 ? 'critical' : 'medium' as any,\r\n        estimatedImpact: 20,\r\n        implementationEffort: 'low' as any,\r\n        resources: ['CSS layout optimization', 'Image dimension attributes', 'Font loading optimization']\r\n      });\r\n    }\r\n\r\n    return optimizations;\r\n  }\r\n\r\n  /**\r\n   * Calcular score general de Core Web Vitals\r\n   */\r\n  private calculateCoreWebVitalsScore(metrics: any): number {\r\n    const lcpScore = metrics.lcp <= 2.5 ? 100 : metrics.lcp <= 4.0 ? 75 : 25;\r\n    const fidScore = metrics.fid <= 100 ? 100 : metrics.fid <= 300 ? 75 : 25;\r\n    const clsScore = metrics.cls <= 0.1 ? 100 : metrics.cls <= 0.25 ? 75 : 25;\r\n\r\n    return Math.round((lcpScore + fidScore + clsScore) / 3);\r\n  }\r\n\r\n  /**\r\n   * Calcular potencial de mejora\r\n   */\r\n  private calculateImprovementPotential(current: any, target: any): number {\r\n    const improvements = [\r\n      Math.max(0, (current.lcp - target.lcp) / current.lcp * 100),\r\n      Math.max(0, (current.fid - target.fid) / current.fid * 100),\r\n      Math.max(0, (current.cls - target.cls) / current.cls * 100)\r\n    ];\r\n\r\n    return Math.round(improvements.reduce((a, b) => a + b, 0) / improvements.length);\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIÓN DE CONTENIDO\r\n  // ===================================\r\n\r\n  /**\r\n   * Analizar y optimizar contenido de una página\r\n   */\r\n  public async optimizeContent(url: string, contentType: 'product' | 'category' | 'blog' | 'page'): Promise<ContentOptimizationSuggestion> {\r\n    if (!this.config.enableContentOptimization) {\r\n      throw new Error('Content optimization is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Analyzing content for optimization', { url, contentType }, LogCategory.SEO);\r\n\r\n      // Simular análisis de contenido actual\r\n      const currentScore = Math.floor(Math.random() * 40) + 40; // 40-80\r\n      const targetScore = 85;\r\n\r\n      const suggestions = this.generateContentSuggestions(contentType, currentScore);\r\n      const keywordOptimization = this.analyzeKeywordOptimization(contentType);\r\n      const readabilityAnalysis = this.analyzeReadability();\r\n\r\n      const result: ContentOptimizationSuggestion = {\r\n        url,\r\n        contentType,\r\n        currentScore,\r\n        targetScore,\r\n        suggestions,\r\n        keywordOptimization,\r\n        readabilityAnalysis\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`content:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Content optimization analysis completed', {\r\n        url,\r\n        currentScore,\r\n        suggestionsCount: suggestions.length\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to optimize content', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar sugerencias de contenido\r\n   */\r\n  private generateContentSuggestions(contentType: string, currentScore: number): Array<{\r\n    type: 'title' | 'description' | 'headings' | 'content' | 'images' | 'links' | 'schema';\r\n    current: string;\r\n    suggested: string;\r\n    reason: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    difficulty: 'easy' | 'medium' | 'hard';\r\n  }> {\r\n    const suggestions = [];\r\n\r\n    if (currentScore < 70) {\r\n      suggestions.push({\r\n        type: 'title' as any,\r\n        current: 'Pintura para Interiores',\r\n        suggested: 'Pintura para Interiores de Alta Calidad - Colores Vibrantes | Pinteya',\r\n        reason: 'Include target keywords and brand name for better SEO',\r\n        impact: 'high' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n\r\n      suggestions.push({\r\n        type: 'description' as any,\r\n        current: 'Venta de pinturas',\r\n        suggested: 'Descubre nuestra amplia gama de pinturas para interiores de alta calidad. Colores vibrantes, acabados duraderos y precios competitivos. ¡Envío gratis!',\r\n        reason: 'More descriptive and includes call-to-action',\r\n        impact: 'high' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n    }\r\n\r\n    if (contentType === 'product') {\r\n      suggestions.push({\r\n        type: 'content' as any,\r\n        current: 'Descripción básica del producto',\r\n        suggested: 'Descripción detallada con beneficios, especificaciones técnicas, casos de uso y testimonios',\r\n        reason: 'Richer content improves user engagement and SEO',\r\n        impact: 'medium' as any,\r\n        difficulty: 'medium' as any\r\n      });\r\n\r\n      suggestions.push({\r\n        type: 'images' as any,\r\n        current: 'Imágenes sin alt text',\r\n        suggested: 'Agregar alt text descriptivo a todas las imágenes',\r\n        reason: 'Alt text improves accessibility and image SEO',\r\n        impact: 'medium' as any,\r\n        difficulty: 'easy' as any\r\n      });\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Analizar optimización de keywords\r\n   */\r\n  private analyzeKeywordOptimization(contentType: string): {\r\n    primaryKeyword: string;\r\n    currentDensity: number;\r\n    targetDensity: number;\r\n    relatedKeywords: string[];\r\n    semanticKeywords: string[];\r\n  } {\r\n    const keywordsByType = {\r\n      product: 'pintura interior',\r\n      category: 'pinturas',\r\n      blog: 'como pintar',\r\n      page: 'pintura profesional'\r\n    };\r\n\r\n    return {\r\n      primaryKeyword: keywordsByType[contentType as keyof typeof keywordsByType] || 'pintura',\r\n      currentDensity: Math.random() * 3 + 0.5, // 0.5-3.5%\r\n      targetDensity: 2.0, // 2%\r\n      relatedKeywords: ['pintura acrílica', 'esmalte sintético', 'látex', 'barniz'],\r\n      semanticKeywords: ['decoración', 'hogar', 'renovación', 'color', 'acabado']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analizar legibilidad del contenido\r\n   */\r\n  private analyzeReadability(): {\r\n    score: number;\r\n    grade: string;\r\n    suggestions: string[];\r\n  } {\r\n    const score = Math.floor(Math.random() * 40) + 50; // 50-90\r\n\r\n    return {\r\n      score,\r\n      grade: score >= 80 ? 'Excelente' : score >= 70 ? 'Bueno' : score >= 60 ? 'Regular' : 'Necesita mejora',\r\n      suggestions: [\r\n        'Usar oraciones más cortas (máximo 20 palabras)',\r\n        'Incluir más subtítulos para dividir el contenido',\r\n        'Usar palabras más simples cuando sea posible',\r\n        'Agregar listas con viñetas para mejorar la escaneabilidad'\r\n      ].slice(0, Math.floor(Math.random() * 3) + 1)\r\n    };\r\n  }\r\n\r\n  // ===================================\r\n  // AUDITORÍA TÉCNICA SEO\r\n  // ===================================\r\n\r\n  /**\r\n   * Realizar auditoría técnica SEO completa\r\n   */\r\n  public async performTechnicalAudit(url: string): Promise<TechnicalSEOAuditResult> {\r\n    if (!this.config.enableTechnicalAudit) {\r\n      throw new Error('Technical SEO audit is disabled');\r\n    }\r\n\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Starting technical SEO audit', { url }, LogCategory.SEO);\r\n\r\n      const issues = this.generateTechnicalIssues();\r\n      const categories = this.categorizeTechnicalIssues(issues);\r\n      const overallScore = this.calculateTechnicalScore(categories);\r\n      const recommendations = this.generateTechnicalRecommendations(issues);\r\n\r\n      const result: TechnicalSEOAuditResult = {\r\n        url,\r\n        overallScore,\r\n        issues,\r\n        categories,\r\n        recommendations\r\n      };\r\n\r\n      // Cachear resultado\r\n      await this.setCachedData(`technical:${url}`, result);\r\n\r\n      logger.info(LogLevel.INFO, 'Technical SEO audit completed', {\r\n        url,\r\n        overallScore,\r\n        issuesCount: issues.length\r\n      }, LogCategory.SEO);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to perform technical audit', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generar issues técnicos simulados\r\n   */\r\n  private generateTechnicalIssues(): Array<{\r\n    category: 'critical' | 'error' | 'warning' | 'notice';\r\n    type: string;\r\n    description: string;\r\n    solution: string;\r\n    impact: 'high' | 'medium' | 'low';\r\n    effort: 'low' | 'medium' | 'high';\r\n    resources: string[];\r\n  }> {\r\n    const possibleIssues = [\r\n      {\r\n        category: 'critical' as any,\r\n        type: 'Missing meta description',\r\n        description: 'Several pages are missing meta descriptions',\r\n        solution: 'Add unique, descriptive meta descriptions to all pages',\r\n        impact: 'high' as any,\r\n        effort: 'low' as any,\r\n        resources: ['SEO writing guide', 'Meta description best practices']\r\n      },\r\n      {\r\n        category: 'error' as any,\r\n        type: 'Duplicate title tags',\r\n        description: 'Multiple pages have identical title tags',\r\n        solution: 'Create unique title tags for each page',\r\n        impact: 'high' as any,\r\n        effort: 'medium' as any,\r\n        resources: ['Title tag optimization guide', 'SEO templates']\r\n      },\r\n      {\r\n        category: 'warning' as any,\r\n        type: 'Large images',\r\n        description: 'Some images are larger than 1MB',\r\n        solution: 'Compress images and use modern formats like WebP',\r\n        impact: 'medium' as any,\r\n        effort: 'low' as any,\r\n        resources: ['Image compression tools', 'WebP conversion guide']\r\n      },\r\n      {\r\n        category: 'notice' as any,\r\n        type: 'Missing structured data',\r\n        description: 'Product pages lack structured data markup',\r\n        solution: 'Implement JSON-LD structured data for products',\r\n        impact: 'medium' as any,\r\n        effort: 'medium' as any,\r\n        resources: ['Schema.org documentation', 'JSON-LD generator']\r\n      }\r\n    ];\r\n\r\n    // Retornar subset aleatorio de issues\r\n    return possibleIssues.slice(0, Math.floor(Math.random() * 3) + 2);\r\n  }\r\n\r\n  /**\r\n   * Categorizar issues técnicos\r\n   */\r\n  private categorizeTechnicalIssues(issues: any[]): {\r\n    crawlability: { score: number; issues: number };\r\n    indexability: { score: number; issues: number };\r\n    performance: { score: number; issues: number };\r\n    mobile: { score: number; issues: number };\r\n    security: { score: number; issues: number };\r\n    structured_data: { score: number; issues: number };\r\n  } {\r\n    const criticalIssues = issues.filter(i => i.category === 'critical').length;\r\n    const errorIssues = issues.filter(i => i.category === 'error').length;\r\n\r\n    return {\r\n      crawlability: { score: Math.max(50, 100 - criticalIssues * 20), issues: criticalIssues },\r\n      indexability: { score: Math.max(60, 100 - errorIssues * 15), issues: errorIssues },\r\n      performance: { score: Math.floor(Math.random() * 30) + 70, issues: Math.floor(Math.random() * 3) },\r\n      mobile: { score: Math.floor(Math.random() * 20) + 80, issues: Math.floor(Math.random() * 2) },\r\n      security: { score: Math.floor(Math.random() * 10) + 90, issues: Math.floor(Math.random() * 1) },\r\n      structured_data: { score: Math.floor(Math.random() * 40) + 60, issues: Math.floor(Math.random() * 3) }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calcular score técnico general\r\n   */\r\n  private calculateTechnicalScore(categories: any): number {\r\n    const scores = Object.values(categories).map((cat: any) => cat.score);\r\n    return Math.round(scores.reduce((a: number, b: number) => a + b, 0) / scores.length);\r\n  }\r\n\r\n  /**\r\n   * Generar recomendaciones técnicas\r\n   */\r\n  private generateTechnicalRecommendations(issues: any[]): Array<{\r\n    priority: 'immediate' | 'short_term' | 'long_term';\r\n    action: string;\r\n    expectedImpact: string;\r\n    resources: string[];\r\n  }> {\r\n    const recommendations = [];\r\n\r\n    const criticalIssues = issues.filter(i => i.category === 'critical');\r\n    if (criticalIssues.length > 0) {\r\n      recommendations.push({\r\n        priority: 'immediate' as any,\r\n        action: 'Fix critical SEO issues affecting crawlability',\r\n        expectedImpact: 'Immediate improvement in search engine indexing',\r\n        resources: ['SEO audit checklist', 'Technical SEO guide']\r\n      });\r\n    }\r\n\r\n    recommendations.push({\r\n      priority: 'short_term' as any,\r\n      action: 'Implement comprehensive structured data markup',\r\n      expectedImpact: 'Enhanced search result appearance and click-through rates',\r\n      resources: ['Schema.org implementation guide', 'Rich snippets testing tool']\r\n    });\r\n\r\n    recommendations.push({\r\n      priority: 'long_term' as any,\r\n      action: 'Optimize Core Web Vitals and overall site performance',\r\n      expectedImpact: 'Better user experience and search rankings',\r\n      resources: ['PageSpeed Insights', 'Web Vitals optimization guide']\r\n    });\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  // ===================================\r\n  // RECOMENDACIONES AUTOMÁTICAS\r\n  // ===================================\r\n\r\n  /**\r\n   * Generar recomendaciones automáticas basadas en análisis\r\n   */\r\n  public async generateAutomatedRecommendations(): Promise<AutomatedRecommendation[]> {\r\n    try {\r\n      logger.info(LogLevel.INFO, 'Generating automated SEO recommendations', {}, LogCategory.SEO);\r\n\r\n      const recommendations: AutomatedRecommendation[] = [];\r\n\r\n      // Recomendación de keywords\r\n      recommendations.push({\r\n        id: `rec_${Date.now()}_keywords`,\r\n        type: 'keyword',\r\n        priority: 'high',\r\n        title: 'Optimizar keywords de cola larga',\r\n        description: 'Se han identificado oportunidades en keywords de cola larga con baja competencia',\r\n\r\n        actionItems: [\r\n          {\r\n            task: 'Investigar keywords de cola larga relacionadas con \"pintura ecológica\"',\r\n            effort: 'low',\r\n            impact: 'high',\r\n            timeline: '1 semana',\r\n            resources: ['Keyword research tools', 'Competitor analysis']\r\n          },\r\n          {\r\n            task: 'Crear contenido optimizado para estas keywords',\r\n            effort: 'medium',\r\n            impact: 'high',\r\n            timeline: '2-3 semanas',\r\n            resources: ['Content creation team', 'SEO writing guidelines']\r\n          }\r\n        ],\r\n\r\n        expectedResults: {\r\n          trafficIncrease: 25,\r\n          rankingImprovement: 5,\r\n          conversionIncrease: 15,\r\n          timeframe: '2-3 meses'\r\n        },\r\n\r\n        createdAt: new Date(),\r\n        status: 'pending'\r\n      });\r\n\r\n      // Recomendación técnica\r\n      recommendations.push({\r\n        id: `rec_${Date.now()}_technical`,\r\n        type: 'technical',\r\n        priority: 'critical',\r\n        title: 'Mejorar Core Web Vitals',\r\n        description: 'Las métricas de Core Web Vitals están por debajo del umbral recomendado',\r\n\r\n        actionItems: [\r\n          {\r\n            task: 'Optimizar imágenes y implementar lazy loading',\r\n            effort: 'medium',\r\n            impact: 'high',\r\n            timeline: '1 semana',\r\n            resources: ['Image optimization tools', 'Development team']\r\n          },\r\n          {\r\n            task: 'Minimizar JavaScript y CSS',\r\n            effort: 'high',\r\n            impact: 'high',\r\n            timeline: '2 semanas',\r\n            resources: ['Build optimization tools', 'Performance audit']\r\n          }\r\n        ],\r\n\r\n        expectedResults: {\r\n          trafficIncrease: 15,\r\n          rankingImprovement: 3,\r\n          conversionIncrease: 20,\r\n          timeframe: '1-2 meses'\r\n        },\r\n\r\n        createdAt: new Date(),\r\n        status: 'pending'\r\n      });\r\n\r\n      this.recommendations = recommendations;\r\n\r\n      logger.info(LogLevel.INFO, 'Automated recommendations generated', {\r\n        count: recommendations.length\r\n      }, LogCategory.SEO);\r\n\r\n      return recommendations;\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to generate automated recommendations', error as Error, LogCategory.SEO);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS DE UTILIDAD Y CACHE\r\n  // ===================================\r\n\r\n  /**\r\n   * Extraer dominio de URL\r\n   */\r\n  private extractDomain(url: string): string {\r\n    try {\r\n      return new URL(url.startsWith('http') ? url : `https://${url}`).hostname;\r\n    } catch {\r\n      return url;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener datos del cache\r\n   */\r\n  private async getCachedData(key: string): Promise<any> {\r\n    if (!this.config.cacheEnabled) {return null;}\r\n\r\n    try {\r\n      // Intentar Redis primero\r\n      if (this.redis) {\r\n        const cached = await this.redis.get(`seo_tools:${key}`);\r\n        if (cached) {\r\n          return JSON.parse(cached);\r\n        }\r\n      }\r\n\r\n      // Fallback a cache en memoria\r\n      const cached = this.cache.get(key);\r\n      if (cached && Date.now() - cached.timestamp < this.config.cacheTTL * 1000) {\r\n        return cached.data;\r\n      }\r\n\r\n      return null;\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error accessing cache', {}, LogCategory.SEO);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guardar datos en cache\r\n   */\r\n  private async setCachedData(key: string, data: any): Promise<void> {\r\n    if (!this.config.cacheEnabled) {return;}\r\n\r\n    try {\r\n      // Cachear en Redis\r\n      if (this.redis) {\r\n        await this.redis.setex(`seo_tools:${key}`, this.config.cacheTTL, JSON.stringify(data));\r\n      }\r\n\r\n      // Cachear en memoria como fallback\r\n      this.cache.set(key, { data, timestamp: Date.now() });\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error caching data', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configurar herramientas\r\n   */\r\n  public configure(config: Partial<SEOOptimizationConfig>): void {\r\n    this.config = { ...this.config, ...config };\r\n    logger.info(LogLevel.INFO, 'SEO Optimization Tools reconfigured', {\r\n      enabledFeatures: Object.keys(config)\r\n    }, LogCategory.SEO);\r\n  }\r\n\r\n  /**\r\n   * Limpiar cache\r\n   */\r\n  public async clearCache(): Promise<void> {\r\n    try {\r\n      // Limpiar Redis\r\n      if (this.redis) {\r\n        const keys = await this.redis.keys('seo_tools:*');\r\n        if (keys.length > 0) {\r\n          await this.redis.del(...keys);\r\n        }\r\n      }\r\n\r\n      // Limpiar cache en memoria\r\n      this.cache.clear();\r\n\r\n      logger.info(LogLevel.INFO, 'SEO tools cache cleared', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.warn(LogLevel.WARN, 'Error clearing cache', {}, LogCategory.SEO);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de uso\r\n   */\r\n  public getUsageStats(): {\r\n    activeABTests: number;\r\n    totalRecommendations: number;\r\n    cacheSize: number;\r\n    enabledFeatures: string[];\r\n  } {\r\n    return {\r\n      activeABTests: this.activeABTests.size,\r\n      totalRecommendations: this.recommendations.length,\r\n      cacheSize: this.cache.size,\r\n      enabledFeatures: Object.entries(this.config)\r\n        .filter(([key, value]) => key.startsWith('enable') && value)\r\n        .map(([key]) => key.replace('enable', ''))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Destruir instancia y limpiar recursos\r\n   */\r\n  public async destroy(): Promise<void> {\r\n    try {\r\n      await this.clearCache();\r\n\r\n      this.activeABTests.clear();\r\n      this.recommendations = [];\r\n\r\n      if (this.redis) {\r\n        this.redis = null;\r\n      }\r\n\r\n      logger.info(LogLevel.INFO, 'Enhanced SEO Optimization Tools destroyed', {}, LogCategory.SEO);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error destroying SEO optimization tools', error as Error, LogCategory.SEO);\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTACIONES\r\n// ===================================\r\n\r\n// Instancia singleton\r\nexport const enhancedSEOOptimizationTools = EnhancedSEOOptimizationTools.getInstance();\r\n\r\n// Exportar clase para uso directo\r\nexport { EnhancedSEOOptimizationTools as SEOOptimizationTools };\r\n\r\n// Exportar todos los tipos\r\nexport type {\r\n  SEOOptimizationConfig,\r\n  CoreWebVitalsThresholds,\r\n  CompetitorAnalysisResult,\r\n  KeywordGap,\r\n  ContentGap,\r\n  BacklinksAnalysis,\r\n  SocialSignalsAnalysis,\r\n  ABTestResult,\r\n  CoreWebVitalsOptimization,\r\n  ContentOptimizationSuggestion,\r\n  TechnicalSEOAuditResult,\r\n  AutomatedRecommendation\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}