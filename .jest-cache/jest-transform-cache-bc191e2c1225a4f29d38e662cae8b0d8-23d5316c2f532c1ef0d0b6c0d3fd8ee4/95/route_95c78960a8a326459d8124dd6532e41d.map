{"version":3,"names":["cov_spz9d1ple","actualCoverage","s","GET","extractCapacity","productName","f","capacityMatch","match","b","value","unit","toLowerCase","generateBaseName","replace","trim","request","context","params","id","parseInt","isNaN","errorResponse","data","success","error","_server","NextResponse","json","status","supabase","_supabase","getSupabaseClient","console","originalProduct","originalError","from","select","eq","single","code","notFoundResponse","handleSupabaseError","baseName","name","productParts","split","searchTerm","length","slice","join","variants","variantsError","ilike","order","ascending","processedVariants","map","variant","price","discounted_price","capacity","stock","is_active","sort","a","aNum","bNum","push","response","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\[id]\\variants\\route.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - API DE VARIANTES DE PRODUCTO\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\nimport { ApiResponse } from '@/types/api';\n\n// Tipo para variante de producto\ninterface ProductVariant {\n  id: number;\n  name: string;\n  price: string;\n  discounted_price: string | null;\n  capacity: string;\n  stock: number;\n  is_active: boolean;\n}\n\n// Función para extraer capacidad del nombre del producto\nfunction extractCapacity(productName: string): string {\n  // Buscar patrones de capacidad más específicos\n  const capacityMatch = productName.match(/(\\d+(?:\\.\\d+)?)\\s*(kg|L|litros?|galones?)/i);\n  if (capacityMatch) {\n    const value = capacityMatch[1];\n    const unit = capacityMatch[2].toLowerCase();\n    \n    // Normalizar unidades\n    if (unit === 'litros' || unit === 'litro') {\n      return `${value}L`;\n    } else if (unit === 'galones' || unit === 'galon') {\n      return `${value}gal`;\n    } else {\n      return `${value}${unit}`;\n    }\n  }\n  \n  return 'Sin especificar';\n}\n\n// Función para generar nombre base del producto\nfunction generateBaseName(productName: string): string {\n  return productName\n    .replace(/\\s*(\\d+L|\\d+\\s*litros?|\\d+\\s*galones?)\\s*/gi, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// ===================================\n// GET /api/products/[id]/variants - Obtener variantes de un producto\n// ===================================\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params;\n    const id = parseInt(params.id, 10);\n    \n    if (isNaN(id) || id <= 0) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'ID de producto inválido',\n      };\n      return NextResponse.json(errorResponse, { status: 400 });\n    }\n    \n    const supabase = getSupabaseClient();\n\n    if (!supabase) {\n      console.error('Cliente de Supabase no disponible en GET /api/products/[id]/variants');\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio de base de datos no disponible',\n      };\n      return NextResponse.json(errorResponse, { status: 503 });\n    }\n\n    // Primero obtener el producto original\n    const { data: originalProduct, error: originalError } = await supabase\n      .from('products')\n      .select('id, name, price, discounted_price, stock, is_active')\n      .eq('id', id)\n      .single();\n\n    if (originalError) {\n      if (originalError.code === 'PGRST116') {\n        const notFoundResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: 'Producto no encontrado',\n        };\n        return NextResponse.json(notFoundResponse, { status: 404 });\n      }\n      handleSupabaseError(originalError, `GET /api/products/${id}/variants`);\n    }\n\n    // Generar nombre base para buscar variantes\n    const baseName = generateBaseName(originalProduct.name);\n    \n    // Extraer marca y tipo del producto (ej: \"Poximix Exterior\" de \"Poximix Exterior 5kg\")\n    const productParts = originalProduct.name.split(' ');\n    let searchTerm = '';\n    \n    if (productParts.length >= 2) {\n      // Para productos como \"Poximix Exterior 5kg\", usar \"Poximix Exterior\"\n      searchTerm = productParts.slice(0, 2).join(' ');\n    } else {\n      // Fallback al nombre base\n      searchTerm = baseName;\n    }\n    \n    // Buscar productos con nombres similares (variantes)\n    const { data: variants, error: variantsError } = await supabase\n      .from('products')\n      .select('id, name, price, discounted_price, stock, is_active')\n      .ilike('name', `${searchTerm}%`)\n      .eq('is_active', true)\n      .order('price', { ascending: true });\n\n    if (variantsError) {\n      handleSupabaseError(variantsError, `GET /api/products/${id}/variants - variants search`);\n    }\n\n    // Filtrar y transformar variantes\n    const processedVariants: ProductVariant[] = (variants || [])\n      .map(variant => ({\n        id: variant.id,\n        name: variant.name,\n        price: variant.price,\n        discounted_price: variant.discounted_price,\n        capacity: extractCapacity(variant.name),\n        stock: variant.stock,\n        is_active: variant.is_active,\n      }))\n      .sort((a, b) => {\n        // Ordenar por capacidad numérica\n        const aNum = parseInt(a.capacity.replace(/[^\\d]/g, '')) || 0;\n        const bNum = parseInt(b.capacity.replace(/[^\\d]/g, '')) || 0;\n        return aNum - bNum;\n      });\n\n    // Si no se encontraron variantes, devolver solo el producto original\n    if (processedVariants.length === 0) {\n      processedVariants.push({\n        id: originalProduct.id,\n        name: originalProduct.name,\n        price: originalProduct.price,\n        discounted_price: originalProduct.discounted_price,\n        capacity: extractCapacity(originalProduct.name),\n        stock: originalProduct.stock,\n        is_active: originalProduct.is_active,\n      });\n    }\n\n    const response: ApiResponse<ProductVariant[]> = {\n      data: processedVariants,\n      success: true,\n      message: `${processedVariants.length} variantes encontradas`,\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error: any) {\n    console.error('Error en GET /api/products/[id]/variants:', error);\n    \n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}"],"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","ignoreList":[]}