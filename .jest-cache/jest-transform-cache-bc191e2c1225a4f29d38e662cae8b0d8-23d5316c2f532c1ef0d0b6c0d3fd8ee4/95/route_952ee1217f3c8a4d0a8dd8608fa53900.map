{"version":3,"names":["cov_20g2tzvd5f","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","id","b","_server","NextResponse","json","error","status","userId","url","URL","format","searchParams","get","includes","userData","collectUserData","requestInfo","_activityLogger","getRequestInfo","logPreferenceActivity","data_types","Object","keys","export_timestamp","Date","toISOString","csv","generateCSV","headers","split","jsonData","export_info","user_id","export_date","version","JSON","stringify","console","data","profile","_supabase","supabaseAdmin","from","select","eq","single","name","email","phone","avatar_url","role","created_at","updated_at","addresses","orders","preferences","sessions","gte","now","activity","securitySettings","security_settings","securityAlerts","security_alerts","cart","csvRows","push","entries","forEach","section","Array","isArray","item","index","key","value","csvValue","String","replace","join","body","email_delivery","exportRequest","insert","requested_at","request_id","update","completed_at","processingError","error_message","success","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\export\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE EXPORTACIÓN DE DATOS PERSONALES (GDPR)\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { logPreferenceActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// GET - Exportar datos personales del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const url = new URL(request.url);\r\n    const format = url.searchParams.get('format') || 'json';\r\n\r\n    // Validar formato\r\n    if (!['json', 'csv'].includes(format)) {\r\n      return NextResponse.json(\r\n        { error: 'Formato no soportado. Use json o csv' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Recopilar todos los datos del usuario\r\n    const userData = await collectUserData(userId);\r\n\r\n    // Registrar actividad\r\n    const requestInfo = getRequestInfo(request);\r\n    await logPreferenceActivity(\r\n      userId,\r\n      'export_data',\r\n      {\r\n        format,\r\n        data_types: Object.keys(userData),\r\n        export_timestamp: new Date().toISOString(),\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    // Generar respuesta según el formato\r\n    if (format === 'csv') {\r\n      const csv = generateCSV(userData);\r\n      return new NextResponse(csv, {\r\n        headers: {\r\n          'Content-Type': 'text/csv',\r\n          'Content-Disposition': `attachment; filename=\"pinteya-data-export-${new Date().toISOString().split('T')[0]}.csv\"`,\r\n        },\r\n      });\r\n    } else {\r\n      // JSON por defecto\r\n      const jsonData = {\r\n        export_info: {\r\n          user_id: userId,\r\n          export_date: new Date().toISOString(),\r\n          format: 'json',\r\n          version: '1.0',\r\n        },\r\n        ...userData,\r\n      };\r\n\r\n      return new NextResponse(JSON.stringify(jsonData, null, 2), {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Disposition': `attachment; filename=\"pinteya-data-export-${new Date().toISOString().split('T')[0]}.json\"`,\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/export:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función para recopilar todos los datos del usuario\r\nasync function collectUserData(userId: string) {\r\n  const userData: any = {};\r\n\r\n  try {\r\n    // 1. Información del perfil\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('users')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    userData.profile = profile ? {\r\n      id: profile.id,\r\n      name: profile.name,\r\n      email: profile.email,\r\n      phone: profile.phone,\r\n      avatar_url: profile.avatar_url,\r\n      role: profile.role,\r\n      created_at: profile.created_at,\r\n      updated_at: profile.updated_at,\r\n    } : null;\r\n\r\n    // 2. Direcciones\r\n    const { data: addresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('*')\r\n      .eq('user_id', userId);\r\n\r\n    userData.addresses = addresses || [];\r\n\r\n    // 3. Órdenes\r\n    const { data: orders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        total_amount,\r\n        status,\r\n        payment_status,\r\n        shipping_address,\r\n        billing_address,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .eq('user_id', userId);\r\n\r\n    userData.orders = orders || [];\r\n\r\n    // 4. Preferencias\r\n    const { data: preferences } = await supabaseAdmin\r\n      .from('user_preferences')\r\n      .select('preferences, created_at, updated_at')\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    userData.preferences = preferences || null;\r\n\r\n    // 5. Sesiones (últimos 90 días)\r\n    const { data: sessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select(`\r\n        device_type,\r\n        device_name,\r\n        browser,\r\n        os,\r\n        ip_address,\r\n        location,\r\n        is_trusted,\r\n        last_activity,\r\n        created_at\r\n      `)\r\n      .eq('user_id', userId)\r\n      .gte('created_at', new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n    userData.sessions = sessions || [];\r\n\r\n    // 6. Actividad (últimos 90 días)\r\n    const { data: activity } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .select(`\r\n        action,\r\n        category,\r\n        description,\r\n        metadata,\r\n        ip_address,\r\n        created_at\r\n      `)\r\n      .eq('user_id', userId)\r\n      .gte('created_at', new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n    userData.activity = activity || [];\r\n\r\n    // 7. Configuración de seguridad\r\n    const { data: securitySettings } = await supabaseAdmin\r\n      .from('user_security_settings')\r\n      .select(`\r\n        two_factor_enabled,\r\n        session_timeout,\r\n        max_concurrent_sessions,\r\n        alert_preferences,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    userData.security_settings = securitySettings || null;\r\n\r\n    // 8. Alertas de seguridad (últimos 90 días)\r\n    const { data: securityAlerts } = await supabaseAdmin\r\n      .from('user_security_alerts')\r\n      .select(`\r\n        type,\r\n        severity,\r\n        title,\r\n        description,\r\n        metadata,\r\n        is_read,\r\n        is_resolved,\r\n        created_at,\r\n        resolved_at\r\n      `)\r\n      .eq('user_id', userId)\r\n      .gte('created_at', new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n    userData.security_alerts = securityAlerts || [];\r\n\r\n    // 9. Carrito (si existe)\r\n    const { data: cart } = await supabaseAdmin\r\n      .from('cart_items')\r\n      .select(`\r\n        product_id,\r\n        quantity,\r\n        price,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .eq('user_id', userId);\r\n\r\n    userData.cart = cart || [];\r\n\r\n    return userData;\r\n  } catch (error) {\r\n    console.error('Error al recopilar datos del usuario:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Función para generar CSV\r\nfunction generateCSV(userData: any): string {\r\n  const csvRows: string[] = [];\r\n  \r\n  // Header\r\n  csvRows.push('Sección,Campo,Valor,Fecha');\r\n\r\n  // Procesar cada sección\r\n  Object.entries(userData).forEach(([section, data]) => {\r\n    if (Array.isArray(data)) {\r\n      data.forEach((item: any, index: number) => {\r\n        Object.entries(item).forEach(([key, value]) => {\r\n          const csvValue = typeof value === 'object' ? JSON.stringify(value) : String(value || '');\r\n          csvRows.push(`\"${section}[${index}]\",\"${key}\",\"${csvValue.replace(/\"/g, '\"\"')}\",\"${item.created_at || ''}\"`);\r\n        });\r\n      });\r\n    } else if (data && typeof data === 'object') {\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        const csvValue = typeof value === 'object' ? JSON.stringify(value) : String(value || '');\r\n        csvRows.push(`\"${section}\",\"${key}\",\"${csvValue.replace(/\"/g, '\"\"')}\",\"${data.created_at || data.updated_at || ''}\"`);\r\n      });\r\n    }\r\n  });\r\n\r\n  return csvRows.join('\\n');\r\n}\r\n\r\n// POST - Solicitar exportación por email (para archivos grandes)\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n    const { format = 'json', email_delivery = true } = body;\r\n\r\n    // Validar formato\r\n    if (!['json', 'csv'].includes(format)) {\r\n      return NextResponse.json(\r\n        { error: 'Formato no soportado. Use json o csv' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear solicitud de exportación\r\n    const { data: exportRequest, error } = await supabaseAdmin\r\n      .from('data_export_requests')\r\n      .insert({\r\n        user_id: userId,\r\n        format,\r\n        status: 'pending',\r\n        email_delivery,\r\n        requested_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al crear solicitud de exportación:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear solicitud de exportación' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad\r\n    const requestInfo = getRequestInfo(request);\r\n    await logPreferenceActivity(\r\n      userId,\r\n      'request_data_export',\r\n      {\r\n        format,\r\n        email_delivery,\r\n        request_id: exportRequest.id,\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    // Aquí se podría agregar a una cola de procesamiento para archivos grandes\r\n    // Por ahora, procesamos inmediatamente\r\n    try {\r\n      const userData = await collectUserData(userId);\r\n      \r\n      // Actualizar estado a completado\r\n      await supabaseAdmin\r\n        .from('data_export_requests')\r\n        .update({\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', exportRequest.id);\r\n\r\n      // Enviar por email (implementación pendiente)\r\n      // await sendDataExportEmail(userId, userData, format);\r\n\r\n    } catch (processingError) {\r\n      console.error('Error al procesar exportación:', processingError);\r\n      \r\n      // Actualizar estado a error\r\n      await supabaseAdmin\r\n        .from('data_export_requests')\r\n        .update({\r\n          status: 'failed',\r\n          error_message: 'Error al procesar la exportación',\r\n        })\r\n        .eq('id', exportRequest.id);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      request_id: exportRequest.id,\r\n      message: email_delivery \r\n        ? 'Solicitud de exportación creada. Recibirás un email con el enlace de descarga.'\r\n        : 'Exportación procesada correctamente.',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/export:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}