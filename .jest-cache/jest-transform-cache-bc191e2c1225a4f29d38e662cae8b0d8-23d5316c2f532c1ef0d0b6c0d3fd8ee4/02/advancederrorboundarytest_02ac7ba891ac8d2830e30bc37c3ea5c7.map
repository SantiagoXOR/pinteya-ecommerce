{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\error-boundary\\advanced-error-boundary.test.tsx"],"sourcesContent":["/**\r\n * @jest-environment jsdom\r\n */\r\n\r\n// ===================================\r\n// ADVANCED ERROR BOUNDARY TESTS\r\n// ===================================\r\n// Tests comprehensivos para el sistema de Error Boundaries\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport { AdvancedErrorBoundary } from '@/lib/error-boundary/advanced-error-boundary';\r\nimport { errorBoundaryManager } from '@/lib/error-boundary/error-boundary-manager';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock del Error Boundary Manager\r\njest.mock('@/lib/error-boundary/error-boundary-manager', () => ({\r\n  errorBoundaryManager: {\r\n    reportError: jest.fn(),\r\n    getConfig: jest.fn(() => ({\r\n      level: 'component',\r\n      enableRetry: true,\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 3000,\r\n      enableReporting: true\r\n    })),\r\n    getHealthStatus: jest.fn(() => ({\r\n      status: 'healthy',\r\n      errorRate: 0,\r\n      criticalErrors: 0,\r\n      recommendations: []\r\n    }))\r\n  }\r\n}));\r\n\r\n// Mock de fetch\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock de console para evitar logs en tests\r\nconst originalConsoleError = console.error;\r\nconst originalConsoleLog = console.log;\r\nconst originalConsoleWarn = console.warn;\r\n\r\nbeforeEach(() => {\r\n  console.error = jest.fn();\r\n  console.log = jest.fn();\r\n  console.warn = jest.fn();\r\n  jest.clearAllMocks();\r\n  (fetch as jest.Mock).mockClear();\r\n});\r\n\r\nafterEach(() => {\r\n  console.error = originalConsoleError;\r\n  console.log = originalConsoleLog;\r\n  console.warn = originalConsoleWarn;\r\n});\r\n\r\n// ===================================\r\n// COMPONENTES DE PRUEBA\r\n// ===================================\r\n\r\nconst ThrowError: React.FC<{ shouldThrow?: boolean; errorType?: string }> = ({ \r\n  shouldThrow = false, \r\n  errorType = 'generic' \r\n}) => {\r\n  if (shouldThrow) {\r\n    switch (errorType) {\r\n      case 'chunk':\r\n        throw new Error('Loading chunk 123 failed');\r\n      case 'network':\r\n        throw new Error('Network request failed');\r\n      case 'react':\r\n        throw new Error('Cannot read property of undefined');\r\n      default:\r\n        throw new Error('Test error');\r\n    }\r\n  }\r\n  return <div data-testid=\"working-component\">Component works!</div>;\r\n};\r\n\r\nconst TestWrapper: React.FC<{ \r\n  children: React.ReactNode;\r\n  errorBoundaryProps?: Partial<ErrorBoundaryProps>;\r\n}> = ({ children, errorBoundaryProps = {} }) => (\r\n  <AdvancedErrorBoundary {...errorBoundaryProps}>\r\n    {children}\r\n  </AdvancedErrorBoundary>\r\n);\r\n\r\n// ===================================\r\n// TESTS BÁSICOS\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Funcionalidad Básica', () => {\r\n  test('renderiza children cuando no hay errores', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <ThrowError shouldThrow={false} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByTestId('working-component')).toBeInTheDocument();\r\n    expect(screen.getByText('Component works!')).toBeInTheDocument();\r\n  });\r\n\r\n  test('captura y muestra error cuando el componente falla', () => {\r\n    render(\r\n      <TestWrapper>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.queryByTestId('working-component')).not.toBeInTheDocument();\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n    expect(screen.getByText(/intentando recuperación automática/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('muestra botón de reintentar cuando está habilitado', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableRetry: true }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByRole('button', { name: /reintentar/i })).toBeInTheDocument();\r\n  });\r\n\r\n  test('no muestra botón de reintentar cuando está deshabilitado', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableRetry: false }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.queryByRole('button', { name: /reintentar/i })).not.toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE CLASIFICACIÓN DE ERRORES\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Clasificación de Errores', () => {\r\n  test('clasifica correctamente errores de chunk loading', () => {\r\n    const errorType = AdvancedErrorBoundary.classifyError(new Error('Loading chunk 123 failed'));\r\n    expect(errorType).toBe('chunk');\r\n  });\r\n\r\n  test('clasifica correctamente errores de red', () => {\r\n    const errorType = AdvancedErrorBoundary.classifyError(new Error('Network request failed'));\r\n    expect(errorType).toBe('network');\r\n  });\r\n\r\n  test('clasifica correctamente errores de React', () => {\r\n    const error = new Error('Cannot read property of undefined');\r\n    error.stack = 'Error at React.Component.render';\r\n    const errorType = AdvancedErrorBoundary.classifyError(error);\r\n    expect(errorType).toBe('component');\r\n  });\r\n\r\n  test('clasifica errores desconocidos como unknown', () => {\r\n    const errorType = AdvancedErrorBoundary.classifyError(new Error('Some random error'));\r\n    expect(errorType).toBe('unknown');\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE ESTRATEGIAS DE RECUPERACIÓN\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Estrategias de Recuperación', () => {\r\n  test('determina estrategia reload para errores de chunk', () => {\r\n    const strategy = AdvancedErrorBoundary.determineRecoveryStrategy(\r\n      new Error('Loading chunk failed'), \r\n      'chunk'\r\n    );\r\n    expect(strategy).toBe('reload');\r\n  });\r\n\r\n  test('determina estrategia retry para errores de red', () => {\r\n    const strategy = AdvancedErrorBoundary.determineRecoveryStrategy(\r\n      new Error('Network failed'), \r\n      'network'\r\n    );\r\n    expect(strategy).toBe('retry');\r\n  });\r\n\r\n  test('determina estrategia fallback para errores de componente', () => {\r\n    const strategy = AdvancedErrorBoundary.determineRecoveryStrategy(\r\n      new Error('Component error'), \r\n      'component'\r\n    );\r\n    expect(strategy).toBe('fallback');\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE REINTENTOS\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Sistema de Reintentos', () => {\r\n  beforeEach(() => {\r\n    jest.useFakeTimers();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  test('permite reintentar manualmente', async () => {\r\n    let shouldThrow = true;\r\n    \r\n    const DynamicComponent = () => {\r\n      if (shouldThrow) {\r\n        throw new Error('Test error');\r\n      }\r\n      return <div data-testid=\"success\">Success!</div>;\r\n    };\r\n\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableRetry: true, maxRetries: 3 }}>\r\n        <DynamicComponent />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Verificar que se muestra el error\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n\r\n    // Simular que el error se resuelve\r\n    shouldThrow = false;\r\n\r\n    // Hacer clic en reintentar\r\n    const retryButton = screen.getByRole('button', { name: /reintentar/i });\r\n    fireEvent.click(retryButton);\r\n\r\n    // Verificar que el componente se recupera\r\n    await waitFor(() => {\r\n      expect(screen.getByTestId('success')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  test('respeta el límite máximo de reintentos', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableRetry: true, maxRetries: 2 }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    const retryButton = screen.getByRole('button', { name: /reintentar/i });\r\n\r\n    // Primer reintento\r\n    fireEvent.click(retryButton);\r\n    expect(screen.getByRole('button', { name: /reintentar/i })).toBeInTheDocument();\r\n\r\n    // Segundo reintento\r\n    fireEvent.click(retryButton);\r\n    expect(screen.getByRole('button', { name: /reintentar/i })).toBeInTheDocument();\r\n\r\n    // Tercer reintento - debería alcanzar el límite\r\n    fireEvent.click(retryButton);\r\n    \r\n    // El botón debería seguir ahí pero el comportamiento interno cambia\r\n    // (esto requeriría acceso al estado interno para verificar completamente)\r\n  });\r\n\r\n  test('implementa backoff exponencial en reintentos automáticos', () => {\r\n    const setTimeoutSpy = jest.spyOn(global, 'setTimeout');\r\n    const onError = jest.fn();\r\n\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{\r\n        enableRetry: true,\r\n        enableAutoRecovery: true,\r\n        retryDelay: 1000,\r\n        onError\r\n      }}>\r\n        <ThrowError shouldThrow={true} errorType=\"network\" />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(onError).toHaveBeenCalled();\r\n\r\n    // Verificar que se programa un reintento automático\r\n    expect(setTimeoutSpy).toHaveBeenCalled();\r\n\r\n    setTimeoutSpy.mockRestore();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE REPORTE DE ERRORES\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Reporte de Errores', () => {\r\n  test('reporta errores al Error Boundary Manager', () => {\r\n    const onError = jest.fn();\r\n\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{\r\n        enableReporting: true,\r\n        onError,\r\n        context: 'test-component'\r\n      }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(onError).toHaveBeenCalled();\r\n    // El reporte se hace en componentDidCatch, que puede ser asíncrono\r\n    expect(onError).toHaveBeenCalledWith(\r\n      expect.any(Error),\r\n      expect.any(Object),\r\n      expect.any(String)\r\n    );\r\n  });\r\n\r\n  test('no reporta errores cuando está deshabilitado', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableReporting: false }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(errorBoundaryManager.reportError).not.toHaveBeenCalled();\r\n  });\r\n\r\n  test('envía reporte a API cuando está habilitado', async () => {\r\n    (fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({ success: true })\r\n    });\r\n\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ enableReporting: true }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    await waitFor(() => {\r\n      expect(fetch).toHaveBeenCalledWith('/api/monitoring/errors', expect.objectContaining({\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }));\r\n    });\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE UI SEGÚN NIVEL\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - UI según Nivel', () => {\r\n  test('muestra UI de página para level=\"page\"', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ level: 'page' }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/¡oops! algo salió mal/i)).toBeInTheDocument();\r\n    expect(screen.getByRole('button', { name: /ir al inicio/i })).toBeInTheDocument();\r\n    expect(screen.getByRole('button', { name: /recargar página/i })).toBeInTheDocument();\r\n  });\r\n\r\n  test('muestra UI de componente para level=\"component\"', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ level: 'component' }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n    expect(screen.queryByText(/¡oops! algo salió mal/i)).not.toBeInTheDocument();\r\n  });\r\n\r\n  test('muestra fallback personalizado cuando se proporciona', () => {\r\n    const CustomFallback = () => <div data-testid=\"custom-fallback\">Custom Error UI</div>;\r\n    \r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ fallback: <CustomFallback /> }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByTestId('custom-fallback')).toBeInTheDocument();\r\n    expect(screen.getByText('Custom Error UI')).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE INTEGRACIÓN\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Integración', () => {\r\n  test('funciona correctamente con múltiples niveles anidados', () => {\r\n    render(\r\n      <TestWrapper errorBoundaryProps={{ level: 'page', context: 'page-boundary' }}>\r\n        <div>\r\n          <TestWrapper errorBoundaryProps={{ level: 'section', context: 'section-boundary' }}>\r\n            <div>\r\n              <TestWrapper errorBoundaryProps={{ level: 'component', context: 'component-boundary' }}>\r\n                <ThrowError shouldThrow={true} />\r\n              </TestWrapper>\r\n            </div>\r\n          </TestWrapper>\r\n        </div>\r\n      </TestWrapper>\r\n    );\r\n\r\n    // El error debería ser capturado por el boundary más cercano (component)\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('maneja errores asincrónicos correctamente', async () => {\r\n    const AsyncComponent = () => {\r\n      React.useEffect(() => {\r\n        setTimeout(() => {\r\n          throw new Error('Async error');\r\n        }, 100);\r\n      }, []);\r\n      \r\n      return <div>Async Component</div>;\r\n    };\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <AsyncComponent />\r\n      </TestWrapper>\r\n    );\r\n\r\n    // Los errores asincrónicos no son capturados por Error Boundaries\r\n    // Este test verifica que el componente se renderiza normalmente\r\n    expect(screen.getByText('Async Component')).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE PERFORMANCE\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Performance', () => {\r\n  test('no afecta el rendimiento cuando no hay errores', () => {\r\n    const startTime = performance.now();\r\n    \r\n    render(\r\n      <TestWrapper>\r\n        <div>\r\n          {Array.from({ length: 100 }, (_, i) => (\r\n            <div key={i}>Item {i}</div>\r\n          ))}\r\n        </div>\r\n      </TestWrapper>\r\n    );\r\n\r\n    const endTime = performance.now();\r\n    const renderTime = endTime - startTime;\r\n\r\n    // El tiempo de renderizado debería ser razonable (menos de 100ms)\r\n    expect(renderTime).toBeLessThan(100);\r\n  });\r\n\r\n  test('limpia timeouts al desmontarse', () => {\r\n    const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');\r\n    \r\n    const { unmount } = render(\r\n      <TestWrapper errorBoundaryProps={{ enableAutoRecovery: true }}>\r\n        <ThrowError shouldThrow={true} />\r\n      </TestWrapper>\r\n    );\r\n\r\n    unmount();\r\n\r\n    expect(clearTimeoutSpy).toHaveBeenCalled();\r\n    clearTimeoutSpy.mockRestore();\r\n  });\r\n});\r\n\r\n// ===================================\r\n// TESTS DE EDGE CASES\r\n// ===================================\r\n\r\ndescribe('AdvancedErrorBoundary - Edge Cases', () => {\r\n  test('maneja errores sin stack trace', () => {\r\n    const errorWithoutStack = new Error('Error without stack');\r\n    delete errorWithoutStack.stack;\r\n\r\n    const ThrowErrorWithoutStack = () => {\r\n      throw errorWithoutStack;\r\n    };\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <ThrowErrorWithoutStack />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('maneja errores con mensajes muy largos', () => {\r\n    const longMessage = 'A'.repeat(1000);\r\n    const ThrowLongError = () => {\r\n      throw new Error(longMessage);\r\n    };\r\n\r\n    render(\r\n      <TestWrapper>\r\n        <ThrowLongError />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('maneja múltiples errores consecutivos', () => {\r\n    let errorCount = 0;\r\n    const MultipleErrorComponent = () => {\r\n      errorCount++;\r\n      throw new Error(`Error ${errorCount}`);\r\n    };\r\n\r\n    const { rerender } = render(\r\n      <TestWrapper>\r\n        <MultipleErrorComponent />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n\r\n    // Simular otro error\r\n    rerender(\r\n      <TestWrapper>\r\n        <MultipleErrorComponent />\r\n      </TestWrapper>\r\n    );\r\n\r\n    expect(screen.getByText(/error en componente/i)).toBeInTheDocument();\r\n  });\r\n});\r\n"],"names":["jest","mock","errorBoundaryManager","reportError","fn","getConfig","level","enableRetry","maxRetries","retryDelay","enableAutoRecovery","recoveryTimeout","enableReporting","getHealthStatus","status","errorRate","criticalErrors","recommendations","global","fetch","originalConsoleError","console","error","originalConsoleLog","log","originalConsoleWarn","warn","beforeEach","clearAllMocks","mockClear","afterEach","ThrowError","shouldThrow","errorType","Error","div","data-testid","TestWrapper","children","errorBoundaryProps","AdvancedErrorBoundary","describe","test","render","expect","screen","getByTestId","toBeInTheDocument","getByText","queryByTestId","not","getByRole","name","queryByRole","classifyError","toBe","stack","strategy","determineRecoveryStrategy","useFakeTimers","useRealTimers","DynamicComponent","retryButton","fireEvent","click","waitFor","setTimeoutSpy","spyOn","onError","toHaveBeenCalled","mockRestore","context","toHaveBeenCalledWith","any","Object","String","mockResolvedValueOnce","ok","json","success","objectContaining","method","headers","queryByText","CustomFallback","fallback","AsyncComponent","React","useEffect","setTimeout","startTime","performance","now","Array","from","length","_","i","endTime","renderTime","toBeLessThan","clearTimeoutSpy","unmount","errorWithoutStack","ThrowErrorWithoutStack","longMessage","repeat","ThrowLongError","errorCount","MultipleErrorComponent","rerender"],"mappings":"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"}