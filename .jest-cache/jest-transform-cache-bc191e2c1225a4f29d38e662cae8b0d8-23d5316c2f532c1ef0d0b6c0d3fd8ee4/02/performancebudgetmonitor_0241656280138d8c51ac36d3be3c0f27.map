{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\performance-budget-monitor.ts"],"sourcesContent":["// ===================================\n// PERFORMANCE BUDGET MONITOR\n// ===================================\n// Sistema de monitoreo de presupuestos de rendimiento\n\nimport { promises as fs } from 'fs'\nimport path from 'path'\n\n// ===================================\n// INTERFACES Y TIPOS\n// ===================================\n\nexport interface PerformanceBudget {\n  name: string\n  type: 'size' | 'count' | 'time'\n  threshold: number\n  warning: number\n  unit: 'bytes' | 'kb' | 'mb' | 'ms' | 'count'\n  category: 'critical' | 'important' | 'optional'\n  description: string\n}\n\nexport interface BudgetViolation {\n  budget: PerformanceBudget\n  actual: number\n  expected: number\n  severity: 'warning' | 'error'\n  impact: 'low' | 'medium' | 'high' | 'critical'\n  recommendation: string\n}\n\nexport interface PerformanceReport {\n  timestamp: string\n  buildId: string\n  violations: BudgetViolation[]\n  metrics: PerformanceMetrics\n  score: number\n  grade: 'A' | 'B' | 'C' | 'D' | 'F'\n  trends: PerformanceTrend[]\n}\n\nexport interface PerformanceMetrics {\n  bundleSize: number\n  firstLoadJS: number\n  totalJS: number\n  css: number\n  images: number\n  fonts: number\n  chunkCount: number\n  duplicateModules: number\n  unusedCode: number\n}\n\nexport interface PerformanceTrend {\n  metric: string\n  current: number\n  previous: number\n  change: number\n  changePercent: number\n  trend: 'improving' | 'degrading' | 'stable'\n}\n\n// ===================================\n// PERFORMANCE BUDGET MONITOR\n// ===================================\n\nexport class PerformanceBudgetMonitor {\n  private static instance: PerformanceBudgetMonitor\n  private budgets: PerformanceBudget[] = []\n  private history: PerformanceReport[] = []\n  private maxHistorySize = 50\n\n  private constructor() {\n    this.initializeDefaultBudgets()\n  }\n\n  public static getInstance(): PerformanceBudgetMonitor {\n    if (!PerformanceBudgetMonitor.instance) {\n      PerformanceBudgetMonitor.instance = new PerformanceBudgetMonitor()\n    }\n    return PerformanceBudgetMonitor.instance\n  }\n\n  // ===================================\n  // CONFIGURACIÓN DE BUDGETS\n  // ===================================\n\n  private initializeDefaultBudgets(): void {\n    this.budgets = [\n      // Budgets de tamaño críticos\n      {\n        name: 'First Load JS',\n        type: 'size',\n        threshold: 128 * 1024, // 128KB\n        warning: 100 * 1024, // 100KB\n        unit: 'bytes',\n        category: 'critical',\n        description: 'JavaScript crítico que se carga inicialmente',\n      },\n      {\n        name: 'Total Bundle Size',\n        type: 'size',\n        threshold: 500 * 1024, // 500KB\n        warning: 400 * 1024, // 400KB\n        unit: 'bytes',\n        category: 'critical',\n        description: 'Tamaño total de todos los bundles JavaScript',\n      },\n      {\n        name: 'CSS Bundle Size',\n        type: 'size',\n        threshold: 50 * 1024, // 50KB\n        warning: 40 * 1024, // 40KB\n        unit: 'bytes',\n        category: 'important',\n        description: 'Tamaño total de archivos CSS',\n      },\n      {\n        name: 'Image Assets',\n        type: 'size',\n        threshold: 200 * 1024, // 200KB\n        warning: 150 * 1024, // 150KB\n        unit: 'bytes',\n        category: 'important',\n        description: 'Tamaño total de imágenes optimizadas',\n      },\n      {\n        name: 'Font Assets',\n        type: 'size',\n        threshold: 100 * 1024, // 100KB\n        warning: 80 * 1024, // 80KB\n        unit: 'bytes',\n        category: 'optional',\n        description: 'Tamaño total de archivos de fuentes',\n      },\n\n      // Budgets de conteo\n      {\n        name: 'Chunk Count',\n        type: 'count',\n        threshold: 20,\n        warning: 15,\n        unit: 'count',\n        category: 'important',\n        description: 'Número total de chunks generados',\n      },\n      {\n        name: 'Duplicate Modules',\n        type: 'count',\n        threshold: 5,\n        warning: 3,\n        unit: 'count',\n        category: 'important',\n        description: 'Módulos duplicados entre chunks',\n      },\n\n      // Budgets de tiempo (para futuras implementaciones)\n      {\n        name: 'Build Time',\n        type: 'time',\n        threshold: 60000, // 60 segundos\n        warning: 45000, // 45 segundos\n        unit: 'ms',\n        category: 'optional',\n        description: 'Tiempo total de build',\n      },\n    ]\n  }\n\n  public addBudget(budget: PerformanceBudget): void {\n    this.budgets.push(budget)\n  }\n\n  public updateBudget(name: string, updates: Partial<PerformanceBudget>): void {\n    const index = this.budgets.findIndex(b => b.name === name)\n    if (index !== -1) {\n      this.budgets[index] = { ...this.budgets[index], ...updates }\n    }\n  }\n\n  public removeBudget(name: string): void {\n    this.budgets = this.budgets.filter(b => b.name !== name)\n  }\n\n  public getBudgets(): PerformanceBudget[] {\n    return [...this.budgets]\n  }\n\n  // ===================================\n  // ANÁLISIS DE PERFORMANCE\n  // ===================================\n\n  public async analyzePerformance(buildPath: string = '.next'): Promise<PerformanceReport> {\n    const metrics = await this.collectMetrics(buildPath)\n    const violations = this.checkBudgetViolations(metrics)\n    const score = this.calculatePerformanceScore(violations, metrics)\n    const grade = this.getPerformanceGrade(score)\n    const trends = this.calculateTrends(metrics)\n\n    const report: PerformanceReport = {\n      timestamp: new Date().toISOString(),\n      buildId: this.generateBuildId(),\n      violations,\n      metrics,\n      score,\n      grade,\n      trends,\n    }\n\n    this.addToHistory(report)\n    return report\n  }\n\n  private async collectMetrics(buildPath: string): Promise<PerformanceMetrics> {\n    try {\n      // En una implementación real, esto analizaría los archivos del build\n      // Por ahora, simulamos métricas realistas\n      const staticPath = path.join(buildPath, 'static')\n\n      return {\n        bundleSize: 450 * 1024, // 450KB\n        firstLoadJS: 95 * 1024, // 95KB\n        totalJS: 380 * 1024, // 380KB\n        css: 35 * 1024, // 35KB\n        images: 120 * 1024, // 120KB\n        fonts: 45 * 1024, // 45KB\n        chunkCount: 12,\n        duplicateModules: 2,\n        unusedCode: 25 * 1024, // 25KB\n      }\n    } catch (error) {\n      console.warn('Could not collect real metrics, using mock data')\n      return this.getMockMetrics()\n    }\n  }\n\n  private getMockMetrics(): PerformanceMetrics {\n    return {\n      bundleSize: 420 * 1024,\n      firstLoadJS: 88 * 1024,\n      totalJS: 350 * 1024,\n      css: 32 * 1024,\n      images: 110 * 1024,\n      fonts: 40 * 1024,\n      chunkCount: 10,\n      duplicateModules: 1,\n      unusedCode: 20 * 1024,\n    }\n  }\n\n  private checkBudgetViolations(metrics: PerformanceMetrics): BudgetViolation[] {\n    const violations: BudgetViolation[] = []\n\n    for (const budget of this.budgets) {\n      const actual = this.getMetricValue(metrics, budget.name)\n      if (actual === null) {\n        continue\n      }\n\n      let violation: BudgetViolation | null = null\n\n      if (actual > budget.threshold) {\n        violation = {\n          budget,\n          actual,\n          expected: budget.threshold,\n          severity: 'error',\n          impact: this.calculateImpact(budget, actual),\n          recommendation: this.generateRecommendation(budget, actual),\n        }\n      } else if (actual > budget.warning) {\n        violation = {\n          budget,\n          actual,\n          expected: budget.warning,\n          severity: 'warning',\n          impact: this.calculateImpact(budget, actual),\n          recommendation: this.generateRecommendation(budget, actual),\n        }\n      }\n\n      if (violation) {\n        violations.push(violation)\n      }\n    }\n\n    return violations.sort((a, b) => {\n      const impactOrder = { critical: 4, high: 3, medium: 2, low: 1 }\n      return impactOrder[b.impact] - impactOrder[a.impact]\n    })\n  }\n\n  private getMetricValue(metrics: PerformanceMetrics, budgetName: string): number | null {\n    const metricMap: Record<string, keyof PerformanceMetrics> = {\n      'First Load JS': 'firstLoadJS',\n      'Total Bundle Size': 'bundleSize',\n      'CSS Bundle Size': 'css',\n      'Image Assets': 'images',\n      'Font Assets': 'fonts',\n      'Chunk Count': 'chunkCount',\n      'Duplicate Modules': 'duplicateModules',\n    }\n\n    const metricKey = metricMap[budgetName]\n    return metricKey ? metrics[metricKey] : null\n  }\n\n  private calculateImpact(\n    budget: PerformanceBudget,\n    actual: number\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    const excess = actual - budget.threshold\n    const excessPercent = (excess / budget.threshold) * 100\n\n    if (budget.category === 'critical') {\n      if (excessPercent > 50) {\n        return 'critical'\n      }\n      if (excessPercent > 25) {\n        return 'high'\n      }\n      if (excessPercent > 10) {\n        return 'medium'\n      }\n      return 'low'\n    }\n\n    if (budget.category === 'important') {\n      if (excessPercent > 75) {\n        return 'high'\n      }\n      if (excessPercent > 50) {\n        return 'medium'\n      }\n      return 'low'\n    }\n\n    return excessPercent > 100 ? 'medium' : 'low'\n  }\n\n  private generateRecommendation(budget: PerformanceBudget, actual: number): string {\n    const excess = actual - budget.threshold\n    const excessKB = Math.round(excess / 1024)\n\n    const recommendations: Record<string, string> = {\n      'First Load JS': `Reducir ${excessKB}KB implementando lazy loading para componentes no críticos`,\n      'Total Bundle Size': `Optimizar bundles dividiendo en chunks más pequeños (${excessKB}KB de exceso)`,\n      'CSS Bundle Size': `Eliminar CSS no utilizado y optimizar imports (${excessKB}KB de exceso)`,\n      'Image Assets': `Optimizar imágenes con formatos modernos (WebP/AVIF) y compresión`,\n      'Font Assets': `Usar font-display: swap y preload para fuentes críticas`,\n      'Chunk Count': `Consolidar chunks pequeños para reducir overhead HTTP`,\n      'Duplicate Modules': `Configurar splitChunks para evitar duplicación de módulos`,\n    }\n\n    return (\n      recommendations[budget.name] || `Optimizar ${budget.name} para cumplir con el presupuesto`\n    )\n  }\n\n  private calculatePerformanceScore(\n    violations: BudgetViolation[],\n    metrics: PerformanceMetrics\n  ): number {\n    let score = 100\n\n    for (const violation of violations) {\n      const penalty = this.calculatePenalty(violation)\n      score -= penalty\n    }\n\n    // Bonus por métricas especialmente buenas\n    if (metrics.firstLoadJS < 80 * 1024) {\n      score += 5\n    } // Bonus por First Load JS < 80KB\n    if (metrics.duplicateModules === 0) {\n      score += 3\n    } // Bonus por no duplicados\n    if (metrics.chunkCount <= 8) {\n      score += 2\n    } // Bonus por chunks optimizados\n\n    return Math.max(0, Math.min(100, score))\n  }\n\n  private calculatePenalty(violation: BudgetViolation): number {\n    const basePenalty = violation.severity === 'error' ? 15 : 8\n    const impactMultiplier = {\n      critical: 2.0,\n      high: 1.5,\n      medium: 1.2,\n      low: 1.0,\n    }\n\n    return basePenalty * impactMultiplier[violation.impact]\n  }\n\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\n    if (score >= 90) {\n      return 'A'\n    }\n    if (score >= 80) {\n      return 'B'\n    }\n    if (score >= 70) {\n      return 'C'\n    }\n    if (score >= 60) {\n      return 'D'\n    }\n    return 'F'\n  }\n\n  private calculateTrends(currentMetrics: PerformanceMetrics): PerformanceTrend[] {\n    if (this.history.length === 0) {\n      return []\n    }\n\n    const previousReport = this.history[this.history.length - 1]\n    const trends: PerformanceTrend[] = []\n\n    const metricKeys: (keyof PerformanceMetrics)[] = [\n      'bundleSize',\n      'firstLoadJS',\n      'totalJS',\n      'css',\n      'chunkCount',\n    ]\n\n    for (const key of metricKeys) {\n      const current = currentMetrics[key]\n      const previous = previousReport.metrics[key]\n      const change = current - previous\n      const changePercent = previous > 0 ? (change / previous) * 100 : 0\n\n      let trend: 'improving' | 'degrading' | 'stable' = 'stable'\n      if (Math.abs(changePercent) > 5) {\n        trend = change < 0 ? 'improving' : 'degrading'\n      }\n\n      trends.push({\n        metric: key,\n        current,\n        previous,\n        change,\n        changePercent,\n        trend,\n      })\n    }\n\n    return trends\n  }\n\n  // ===================================\n  // GESTIÓN DE HISTORIAL\n  // ===================================\n\n  private addToHistory(report: PerformanceReport): void {\n    this.history.push(report)\n\n    if (this.history.length > this.maxHistorySize) {\n      this.history = this.history.slice(-this.maxHistorySize)\n    }\n  }\n\n  public getHistory(): PerformanceReport[] {\n    return [...this.history]\n  }\n\n  public getLatestReport(): PerformanceReport | null {\n    return this.history.length > 0 ? this.history[this.history.length - 1] : null\n  }\n\n  // ===================================\n  // UTILIDADES\n  // ===================================\n\n  private generateBuildId(): string {\n    return `build-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  public async saveReport(report: PerformanceReport, outputPath?: string): Promise<void> {\n    const reportPath = outputPath || path.join(process.cwd(), 'performance-reports')\n\n    try {\n      await fs.mkdir(reportPath, { recursive: true })\n      const filename = `performance-report-${report.buildId}.json`\n      const filepath = path.join(reportPath, filename)\n\n      await fs.writeFile(filepath, JSON.stringify(report, null, 2))\n      console.log(`Performance report saved to: ${filepath}`)\n    } catch (error) {\n      console.error('Failed to save performance report:', error)\n    }\n  }\n\n  public generateTextReport(report: PerformanceReport): string {\n    const { violations, metrics, score, grade, trends } = report\n\n    let textReport = `\n# Performance Budget Report\n**Build ID**: ${report.buildId}\n**Timestamp**: ${new Date(report.timestamp).toLocaleString()}\n**Score**: ${score}/100 (Grade: ${grade})\n\n## Metrics Summary\n- **Bundle Size**: ${Math.round(metrics.bundleSize / 1024)}KB\n- **First Load JS**: ${Math.round(metrics.firstLoadJS / 1024)}KB\n- **Total JS**: ${Math.round(metrics.totalJS / 1024)}KB\n- **CSS**: ${Math.round(metrics.css / 1024)}KB\n- **Chunks**: ${metrics.chunkCount}\n- **Duplicate Modules**: ${metrics.duplicateModules}\n\n## Budget Violations (${violations.length})\n`\n\n    if (violations.length === 0) {\n      textReport += '✅ All performance budgets are within limits!\\n'\n    } else {\n      violations.forEach((violation, i) => {\n        const actualFormatted =\n          violation.budget.unit === 'bytes'\n            ? `${Math.round(violation.actual / 1024)}KB`\n            : `${violation.actual}${violation.budget.unit}`\n\n        const expectedFormatted =\n          violation.budget.unit === 'bytes'\n            ? `${Math.round(violation.expected / 1024)}KB`\n            : `${violation.expected}${violation.budget.unit}`\n\n        textReport += `\n${i + 1}. **${violation.budget.name}** (${violation.severity.toUpperCase()})\n   - Actual: ${actualFormatted}\n   - Expected: ≤ ${expectedFormatted}\n   - Impact: ${violation.impact}\n   - Recommendation: ${violation.recommendation}\n`\n      })\n    }\n\n    if (trends.length > 0) {\n      textReport += '\\n## Trends\\n'\n      trends.forEach(trend => {\n        const icon = trend.trend === 'improving' ? '📈' : trend.trend === 'degrading' ? '📉' : '➡️'\n        const changeText =\n          trend.changePercent > 0\n            ? `+${trend.changePercent.toFixed(1)}%`\n            : `${trend.changePercent.toFixed(1)}%`\n        textReport += `- ${icon} **${trend.metric}**: ${changeText}\\n`\n      })\n    }\n\n    return textReport\n  }\n}\n"],"names":["PerformanceBudgetMonitor","budgets","history","maxHistorySize","initializeDefaultBudgets","getInstance","instance","name","type","threshold","warning","unit","category","description","addBudget","budget","push","updateBudget","updates","index","findIndex","b","removeBudget","filter","getBudgets","analyzePerformance","buildPath","metrics","collectMetrics","violations","checkBudgetViolations","score","calculatePerformanceScore","grade","getPerformanceGrade","trends","calculateTrends","report","timestamp","Date","toISOString","buildId","generateBuildId","addToHistory","staticPath","path","join","bundleSize","firstLoadJS","totalJS","css","images","fonts","chunkCount","duplicateModules","unusedCode","error","console","warn","getMockMetrics","actual","getMetricValue","violation","expected","severity","impact","calculateImpact","recommendation","generateRecommendation","sort","a","impactOrder","critical","high","medium","low","budgetName","metricMap","metricKey","excess","excessPercent","excessKB","Math","round","recommendations","penalty","calculatePenalty","max","min","basePenalty","impactMultiplier","currentMetrics","length","previousReport","metricKeys","key","current","previous","change","changePercent","trend","abs","metric","slice","getHistory","getLatestReport","now","random","toString","substr","saveReport","outputPath","reportPath","process","cwd","fs","mkdir","recursive","filename","filepath","writeFile","JSON","stringify","log","generateTextReport","textReport","toLocaleString","forEach","i","actualFormatted","expectedFormatted","toUpperCase","icon","changeText","toFixed"],"mappings":"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"}