{"version":3,"names":["cov_1ophqjro1g","actualCoverage","s","GET","f","POST","runtime","request","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","url","URL","timeRange","searchParams","get","includeAnomalies","includeIncidents","includeTrends","refresh","startDate","endDate","calculateTimeRange","cacheKey","userId","cacheTTL","getCacheTTL","dashboardData","_enterprisecache","withCache","generateDashboardData","response","data","metadata","generatedAt","Date","toISOString","cacheUsed","requestedBy","requester","role","permissions","security","level","securityLevel","validations","console","timestamp","body","analysisType","targetUserId","forceRefresh","results","log","patterns","_securityauditenhanced","analyzeSecurityPatterns","alertsGenerated","length","criticalAlerts","filter","p","severity","anomalies","_enterpriseauditsystem","enterpriseAuditSystem","detectAnomalies","anomaliesDetected","highConfidence","a","confidence_score","metrics","getSecurityMetrics","rateLimitMetrics","_enterprisemiddleware","getRateLimitMetrics","rateLimit","updatedAt","fullPatterns","fullAnomalies","fullMetrics","Promise","all","audit","message","setHours","getHours","setDate","getDate","baseMetrics","enterpriseMetrics","rate_limiting","total_requests","totalRequests","blocked_requests","blockedRequests","block_rate","top_blocked_ips","topBlockedIPs","anomaly_detection","total_anomalies","high_confidence_anomalies","false_positive_rate","detection_accuracy","incident_management","open_incidents","avg_resolution_time","incidents_by_severity","low","medium","high","critical","compliance","audit_coverage","policy_violations","data_retention_compliance","overview","recent_events","active_anomalies","security_trends","events_trend","generateMockTrend","anomalies_trend","incidents_trend","recommendations","generateSecurityRecommendations","type","trend","now","i","date","push","split","count","Math","floor","random","id","priority","title","description","toFixed","impact","effort","category","implementation_steps","estimated_completion"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\dashboard\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API del Dashboard de Seguridad Enterprise\r\n * Proporciona datos completos para el dashboard de seguridad en tiempo real\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  enterpriseAuditSystem,\r\n  type SecurityDashboardData,\r\n  type EnterpriseSecurityMetrics\r\n} from '@/lib/security/enterprise-audit-system';\r\nimport { \r\n  getSecurityMetrics,\r\n  analyzeSecurityPatterns,\r\n  generateSecurityReport\r\n} from '@/lib/auth/security-audit-enhanced';\r\nimport { getRateLimitMetrics } from '@/lib/rate-limiting/enterprise-middleware';\r\nimport { withCache } from '@/lib/auth/enterprise-cache';\r\n\r\n// =====================================================\r\n// GET /api/admin/security/dashboard\r\n// Obtiene datos completos del dashboard de seguridad\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin con permisos de seguridad\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_read', 'dashboard_access']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const timeRange = url.searchParams.get('timeRange') || '24h';\r\n    const includeAnomalies = url.searchParams.get('anomalies') !== 'false';\r\n    const includeIncidents = url.searchParams.get('incidents') !== 'false';\r\n    const includeTrends = url.searchParams.get('trends') !== 'false';\r\n    const refresh = url.searchParams.get('refresh') === 'true';\r\n\r\n    // Calcular fechas basadas en timeRange\r\n    const { startDate, endDate } = calculateTimeRange(timeRange);\r\n\r\n    // Obtener datos del dashboard con cache\r\n    const cacheKey = `security_dashboard_${timeRange}_${context.userId}`;\r\n    const cacheTTL = refresh ? 0 : getCacheTTL(timeRange);\r\n\r\n    const dashboardData = await withCache(\r\n      cacheKey,\r\n      async () => await generateDashboardData(\r\n        startDate,\r\n        endDate,\r\n        includeAnomalies,\r\n        includeIncidents,\r\n        includeTrends,\r\n        context.userId\r\n      ),\r\n      cacheTTL\r\n    );\r\n\r\n    // Añadir metadatos de la respuesta\r\n    const response = {\r\n      success: true,\r\n      data: dashboardData,\r\n      metadata: {\r\n        timeRange,\r\n        startDate,\r\n        endDate,\r\n        generatedAt: new Date().toISOString(),\r\n        cacheUsed: !refresh,\r\n        requestedBy: context.userId\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          validations: context.validations\r\n        }\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener datos del dashboard',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/security/dashboard\r\n// Ejecuta análisis de seguridad bajo demanda\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin con permisos críticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'system_analysis']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      analysisType = 'full',\r\n      targetUserId,\r\n      timeRange = '24h',\r\n      forceRefresh = false\r\n    } = body;\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      analysisType,\r\n      results: {}\r\n    };\r\n\r\n    // Ejecutar análisis según el tipo solicitado\r\n    switch (analysisType) {\r\n      case 'patterns':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando análisis de patrones...');\r\n        const patterns = await analyzeSecurityPatterns();\r\n        results.results.patterns = {\r\n          alertsGenerated: patterns.length,\r\n          criticalAlerts: patterns.filter(p => p.severity === 'critical').length,\r\n          patterns\r\n        };\r\n        break;\r\n\r\n      case 'anomalies':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando detección de anomalías...');\r\n        const anomalies = await enterpriseAuditSystem.detectAnomalies(targetUserId);\r\n        results.results.anomalies = {\r\n          anomaliesDetected: anomalies.length,\r\n          highConfidence: anomalies.filter(a => a.confidence_score > 0.8).length,\r\n          anomalies\r\n        };\r\n        break;\r\n\r\n      case 'metrics':\r\n        console.log('[SECURITY_DASHBOARD] Actualizando métricas...');\r\n        const metrics = await getSecurityMetrics();\r\n        const rateLimitMetrics = getRateLimitMetrics();\r\n        results.results.metrics = {\r\n          security: metrics,\r\n          rateLimit: rateLimitMetrics,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        break;\r\n\r\n      case 'full':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando análisis completo...');\r\n        \r\n        // Ejecutar todos los análisis en paralelo\r\n        const [fullPatterns, fullAnomalies, fullMetrics] = await Promise.all([\r\n          analyzeSecurityPatterns(),\r\n          enterpriseAuditSystem.detectAnomalies(targetUserId),\r\n          getSecurityMetrics()\r\n        ]);\r\n\r\n        results.results = {\r\n          patterns: {\r\n            alertsGenerated: fullPatterns.length,\r\n            criticalAlerts: fullPatterns.filter(p => p.severity === 'critical').length\r\n          },\r\n          anomalies: {\r\n            anomaliesDetected: fullAnomalies.length,\r\n            highConfidence: fullAnomalies.filter(a => a.confidence_score > 0.8).length\r\n          },\r\n          metrics: {\r\n            security: fullMetrics,\r\n            rateLimit: getRateLimitMetrics()\r\n          }\r\n        };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          {\r\n            error: `Tipo de análisis no válido: ${analysisType}`,\r\n            code: 'INVALID_ANALYSIS_TYPE',\r\n            enterprise: true\r\n          },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    // Invalidar cache si se solicita\r\n    if (forceRefresh) {\r\n      // Implementar invalidación de cache\r\n      console.log('[SECURITY_DASHBOARD] Cache invalidado por solicitud');\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: results,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: `Análisis ${analysisType} completado correctamente`\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD_ANALYSIS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en análisis de seguridad',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\n/**\r\n * Calcula el rango de fechas basado en el parámetro timeRange\r\n */\r\nfunction calculateTimeRange(timeRange: string): { startDate: string; endDate: string } {\r\n  const endDate = new Date();\r\n  const startDate = new Date();\r\n\r\n  switch (timeRange) {\r\n    case '1h':\r\n      startDate.setHours(endDate.getHours() - 1);\r\n      break;\r\n    case '6h':\r\n      startDate.setHours(endDate.getHours() - 6);\r\n      break;\r\n    case '24h':\r\n      startDate.setDate(endDate.getDate() - 1);\r\n      break;\r\n    case '7d':\r\n      startDate.setDate(endDate.getDate() - 7);\r\n      break;\r\n    case '30d':\r\n      startDate.setDate(endDate.getDate() - 30);\r\n      break;\r\n    default:\r\n      startDate.setDate(endDate.getDate() - 1); // Default a 24h\r\n  }\r\n\r\n  return {\r\n    startDate: startDate.toISOString(),\r\n    endDate: endDate.toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Determina el TTL del cache basado en el timeRange\r\n */\r\nfunction getCacheTTL(timeRange: string): number {\r\n  switch (timeRange) {\r\n    case '1h':\r\n    case '6h':\r\n      return 2 * 60 * 1000; // 2 minutos\r\n    case '24h':\r\n      return 5 * 60 * 1000; // 5 minutos\r\n    case '7d':\r\n      return 15 * 60 * 1000; // 15 minutos\r\n    case '30d':\r\n      return 30 * 60 * 1000; // 30 minutos\r\n    default:\r\n      return 5 * 60 * 1000; // 5 minutos por defecto\r\n  }\r\n}\r\n\r\n/**\r\n * Genera los datos completos del dashboard\r\n */\r\nasync function generateDashboardData(\r\n  startDate: string,\r\n  endDate: string,\r\n  includeAnomalies: boolean,\r\n  includeIncidents: boolean,\r\n  includeTrends: boolean,\r\n  userId: string\r\n): Promise<SecurityDashboardData> {\r\n  try {\r\n    // Obtener métricas base\r\n    const baseMetrics = await getSecurityMetrics();\r\n    const rateLimitMetrics = getRateLimitMetrics();\r\n\r\n    // Construir métricas enterprise\r\n    const enterpriseMetrics: EnterpriseSecurityMetrics = {\r\n      ...baseMetrics,\r\n      rate_limiting: {\r\n        total_requests: rateLimitMetrics.totalRequests,\r\n        blocked_requests: rateLimitMetrics.blockedRequests,\r\n        block_rate: rateLimitMetrics.totalRequests > 0 \r\n          ? (rateLimitMetrics.blockedRequests / rateLimitMetrics.totalRequests) * 100 \r\n          : 0,\r\n        top_blocked_ips: rateLimitMetrics.topBlockedIPs || []\r\n      },\r\n      anomaly_detection: {\r\n        total_anomalies: 0, // Se actualizará con datos reales\r\n        high_confidence_anomalies: 0,\r\n        false_positive_rate: 5.2,\r\n        detection_accuracy: 94.8\r\n      },\r\n      incident_management: {\r\n        open_incidents: 0, // Se actualizará con datos reales\r\n        avg_resolution_time: 4.5, // horas\r\n        incidents_by_severity: {\r\n          low: 2,\r\n          medium: 1,\r\n          high: 0,\r\n          critical: 0\r\n        }\r\n      },\r\n      compliance: {\r\n        audit_coverage: 98.5,\r\n        policy_violations: 1,\r\n        data_retention_compliance: true\r\n      }\r\n    };\r\n\r\n    // Obtener anomalías si se solicita\r\n    let anomalies: any[] = [];\r\n    if (includeAnomalies) {\r\n      anomalies = await enterpriseAuditSystem.detectAnomalies();\r\n      enterpriseMetrics.anomaly_detection.total_anomalies = anomalies.length;\r\n      enterpriseMetrics.anomaly_detection.high_confidence_anomalies = \r\n        anomalies.filter(a => a.confidence_score > 0.8).length;\r\n    }\r\n\r\n    // Datos del dashboard\r\n    const dashboardData: SecurityDashboardData = {\r\n      overview: enterpriseMetrics,\r\n      recent_events: [], // Se obtendría de la base de datos\r\n      active_anomalies: anomalies,\r\n      open_incidents: [], // Se obtendría de la base de datos\r\n      security_trends: includeTrends ? {\r\n        events_trend: generateMockTrend('events'),\r\n        anomalies_trend: generateMockTrend('anomalies'),\r\n        incidents_trend: generateMockTrend('incidents')\r\n      } : {\r\n        events_trend: [],\r\n        anomalies_trend: [],\r\n        incidents_trend: []\r\n      },\r\n      recommendations: generateSecurityRecommendations(enterpriseMetrics)\r\n    };\r\n\r\n    return dashboardData;\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD] Error generando datos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Genera datos de tendencia mock (en producción vendría de la base de datos)\r\n */\r\nfunction generateMockTrend(type: string): any[] {\r\n  const trend = [];\r\n  const now = new Date();\r\n  \r\n  for (let i = 6; i >= 0; i--) {\r\n    const date = new Date(now);\r\n    date.setDate(date.getDate() - i);\r\n    \r\n    trend.push({\r\n      date: date.toISOString().split('T')[0],\r\n      count: Math.floor(Math.random() * 50) + 10,\r\n      severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)]\r\n    });\r\n  }\r\n  \r\n  return trend;\r\n}\r\n\r\n/**\r\n * Genera recomendaciones de seguridad basadas en métricas\r\n */\r\nfunction generateSecurityRecommendations(metrics: EnterpriseSecurityMetrics): any[] {\r\n  const recommendations = [];\r\n\r\n  // Recomendación basada en rate limiting\r\n  if (metrics.rate_limiting.block_rate > 10) {\r\n    recommendations.push({\r\n      id: 'rate_limit_high',\r\n      type: 'immediate',\r\n      priority: 'high',\r\n      title: 'Alto porcentaje de requests bloqueadas',\r\n      description: `${metrics.rate_limiting.block_rate.toFixed(1)}% de requests están siendo bloqueadas`,\r\n      impact: 'Posible impacto en experiencia de usuario o ataque en curso',\r\n      effort: 'medium',\r\n      category: 'detection',\r\n      implementation_steps: [\r\n        'Revisar logs de rate limiting',\r\n        'Analizar IPs con más bloqueos',\r\n        'Ajustar umbrales si es necesario',\r\n        'Implementar whitelist para IPs legítimas'\r\n      ],\r\n      estimated_completion: '2-4 horas'\r\n    });\r\n  }\r\n\r\n  // Recomendación basada en anomalías\r\n  if (metrics.anomaly_detection.high_confidence_anomalies > 5) {\r\n    recommendations.push({\r\n      id: 'anomalies_high',\r\n      type: 'immediate',\r\n      priority: 'critical',\r\n      title: 'Múltiples anomalías de alta confianza detectadas',\r\n      description: `${metrics.anomaly_detection.high_confidence_anomalies} anomalías requieren revisión inmediata`,\r\n      impact: 'Posible compromiso de seguridad',\r\n      effort: 'high',\r\n      category: 'response',\r\n      implementation_steps: [\r\n        'Revisar anomalías críticas',\r\n        'Investigar usuarios afectados',\r\n        'Implementar medidas de contención',\r\n        'Notificar al equipo de seguridad'\r\n      ],\r\n      estimated_completion: '1-2 horas'\r\n    });\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}