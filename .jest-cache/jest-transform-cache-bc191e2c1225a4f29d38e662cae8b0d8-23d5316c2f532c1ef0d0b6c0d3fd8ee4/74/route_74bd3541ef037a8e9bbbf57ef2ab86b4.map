{"version":3,"names":["cov_235stvaxnt","actualCoverage","s","GET","f","POST","runtime","generateDynamicTrendingSearches","supabase","limit","b","data","products","error","productsError","from","select","eq","console","warn","getFallbackTrendingSearches","trendingSearches","usedQueries","Set","brands","map","p","brand","filter","Boolean","slice","forEach","index","has","toLowerCase","push","id","query","count","Math","floor","random","category","href","encodeURIComponent","type","add","categories","name","popularProducts","product","productName","sort","a","fallbackSearches","search","request","securityLogger","_securitylogger","createSecurityLogger","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","log","severity","message","context","metadata","endpoint","method","userAgent","headers","get","searchParams","URL","url","parseInt","days","_supabase","getSupabaseClient","startDate","Date","setDate","getDate","gte","toISOString","not","analyticsData","_apitimeouts","withDatabaseTimeout","signal","API_TIMEOUTS","database","length","searchCounts","Map","searchCategories","event","label","trim","set","sortedSearches","Array","entries","charAt","toUpperCase","analyticsError","dynamicSearches","filteredSearches","needed","additionalSearches","response","trending","lastUpdated","success","hasRealData","some","includes","searchesCount","_server","NextResponse","json","logApiError","Error","fallbackResponse","defaultTrendingSearches","nextUrl","logRateLimitExceeded","contentType","status","bodyText","text","requestData","JSON","parse","parseError","userId","sessionId","rpc","p_event_name","p_category","p_action","p_label","substring","p_user_id","p_session_id","p_page","p_user_agent"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\search\\trending\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API: /api/search/trending - Búsquedas populares/trending\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\nexport interface TrendingSearch {\r\n  id: string;\r\n  query: string;\r\n  count: number;\r\n  category?: string;\r\n  href: string;\r\n  type: 'trending';\r\n}\r\n\r\nexport interface TrendingSearchesResponse {\r\n  trending: TrendingSearch[];\r\n  lastUpdated: string;\r\n}\r\n\r\n// Búsquedas trending generadas dinámicamente basadas en productos reales\r\nasync function generateDynamicTrendingSearches(supabase: any, limit: number = 6): Promise<TrendingSearch[]> {\r\n  try {\r\n    // Obtener productos más populares y marcas para generar búsquedas trending realistas\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('name, brand, category_id, categories(name)')\r\n      .eq('is_active', true)\r\n      .limit(20);\r\n\r\n    if (productsError || !products) {\r\n      console.warn('Error obteniendo productos para trending:', productsError);\r\n      return getFallbackTrendingSearches(limit);\r\n    }\r\n\r\n    // Generar búsquedas trending basadas en productos reales\r\n    const trendingSearches: TrendingSearch[] = [];\r\n    const usedQueries = new Set<string>();\r\n\r\n    // Agregar búsquedas por marca\r\n    const brands = [...new Set(products.map(p => p.brand).filter(Boolean))];\r\n    brands.slice(0, 2).forEach((brand, index) => {\r\n      if (brand && !usedQueries.has(brand.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-brand-${index + 1}`,\r\n          query: brand,\r\n          count: Math.floor(Math.random() * 50) + 20, // Rango realista 20-70\r\n          category: \"marcas\",\r\n          href: `/search?q=${encodeURIComponent(brand)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(brand.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar búsquedas por categoría\r\n    const categories = [...new Set(products.map(p => p.categories?.name).filter(Boolean))];\r\n    categories.slice(0, 2).forEach((category, index) => {\r\n      if (category && !usedQueries.has(category.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-category-${index + 1}`,\r\n          query: category,\r\n          count: Math.floor(Math.random() * 40) + 15, // Rango realista 15-55\r\n          category: \"pinturas\",\r\n          href: `/search?q=${encodeURIComponent(category)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(category.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Agregar búsquedas por productos específicos\r\n    const popularProducts = products.slice(0, 2);\r\n    popularProducts.forEach((product, index) => {\r\n      const productName = product.name;\r\n      if (productName && !usedQueries.has(productName.toLowerCase())) {\r\n        trendingSearches.push({\r\n          id: `trending-product-${index + 1}`,\r\n          query: productName,\r\n          count: Math.floor(Math.random() * 30) + 10, // Rango realista 10-40\r\n          category: \"productos\",\r\n          href: `/search?q=${encodeURIComponent(productName)}`,\r\n          type: \"trending\"\r\n        });\r\n        usedQueries.add(productName.toLowerCase());\r\n      }\r\n    });\r\n\r\n    // Ordenar por count descendente y limitar\r\n    return trendingSearches\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, limit);\r\n\r\n  } catch (error) {\r\n    console.error('Error generando trending searches dinámicas:', error);\r\n    return getFallbackTrendingSearches(limit);\r\n  }\r\n}\r\n\r\n// Fallback con datos mínimos (solo si falla todo lo demás)\r\nfunction getFallbackTrendingSearches(limit: number = 6): TrendingSearch[] {\r\n  const fallbackSearches = [\r\n    { query: \"Pintura\", category: \"pinturas\" },\r\n    { query: \"Esmalte\", category: \"pinturas\" },\r\n    { query: \"Látex\", category: \"pinturas\" },\r\n    { query: \"Barniz\", category: \"pinturas\" },\r\n    { query: \"Imprimación\", category: \"pinturas\" },\r\n    { query: \"Rodillos\", category: \"herramientas\" }\r\n  ];\r\n\r\n  return fallbackSearches.slice(0, limit).map((search, index) => ({\r\n    id: `fallback-${index + 1}`,\r\n    query: search.query,\r\n    count: Math.floor(Math.random() * 20) + 5, // Rango mínimo 5-25\r\n    category: search.category,\r\n    href: `/search?q=${encodeURIComponent(search.query.toLowerCase())}`,\r\n    type: \"trending\" as const\r\n  }));\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de búsqueda\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.search,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Trending search API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/search/trending',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    const limit = parseInt(searchParams.get('limit') || '6');\r\n    const days = parseInt(searchParams.get('days') || '7');\r\n    const category = searchParams.get('category');\r\n\r\n    console.log('🔥 API /api/search/trending: Obteniendo búsquedas trending', {\r\n      limit,\r\n      days,\r\n      category\r\n    });\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    let trendingSearches: TrendingSearch[] = [];\r\n\r\n    // Intentar obtener búsquedas trending reales del sistema de analytics\r\n    if (supabase) {\r\n      try {\r\n        const startDate = new Date();\r\n        startDate.setDate(startDate.getDate() - days);\r\n\r\n        // Query para obtener búsquedas más populares de analytics_events\r\n        let query = supabase\r\n          .from('analytics_events')\r\n          .select('label, metadata')\r\n          .eq('category', 'search')\r\n          .eq('action', 'search_query')\r\n          .gte('created_at', startDate.toISOString())\r\n          .not('label', 'is', null);\r\n\r\n        if (category) {\r\n          query = query.eq('metadata->>category', category);\r\n        }\r\n\r\n        const { data: analyticsData, error } = await withDatabaseTimeout(\r\n          async (signal) => await query,\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (!error && analyticsData && analyticsData.length > 0) {\r\n          // Procesar datos de analytics para obtener trending\r\n          const searchCounts = new Map<string, number>();\r\n          const searchCategories = new Map<string, string>();\r\n\r\n          analyticsData.forEach((event) => {\r\n            if (event.label) {\r\n              const query = event.label.toLowerCase().trim();\r\n              if (query.length > 2) { // Solo queries de más de 2 caracteres\r\n                searchCounts.set(query, (searchCounts.get(query) || 0) + 1);\r\n                \r\n                // Extraer categoría del metadata si existe\r\n                if (event.metadata && event.metadata.category) {\r\n                  searchCategories.set(query, event.metadata.category);\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          // Convertir a array y ordenar por popularidad\r\n          const sortedSearches = Array.from(searchCounts.entries())\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, limit);\r\n\r\n          trendingSearches = sortedSearches.map(([query, count], index) => ({\r\n            id: `trending-real-${index + 1}`,\r\n            query: query.charAt(0).toUpperCase() + query.slice(1),\r\n            count,\r\n            category: searchCategories.get(query),\r\n            href: `/search?q=${encodeURIComponent(query)}`,\r\n            type: 'trending' as const\r\n          }));\r\n\r\n        }\r\n      } catch (analyticsError) {\r\n        console.warn('⚠️ Error obteniendo trending de analytics, usando fallback:', analyticsError);\r\n      }\r\n    }\r\n\r\n    // Si no hay datos reales o hay pocos, generar dinámicamente\r\n    if (trendingSearches.length < 3) {\r\n      console.log('🔄 Generando búsquedas trending dinámicas desde productos');\r\n\r\n      try {\r\n        const dynamicSearches = await generateDynamicTrendingSearches(supabase, limit);\r\n\r\n        // Filtrar por categoría si se especifica\r\n        let filteredSearches = dynamicSearches;\r\n        if (category) {\r\n          filteredSearches = dynamicSearches.filter(\r\n            search => search.category === category\r\n          );\r\n        }\r\n\r\n        // Combinar datos reales con dinámicos si es necesario\r\n        const needed = limit - trendingSearches.length;\r\n        const additionalSearches = filteredSearches.slice(0, needed);\r\n\r\n        trendingSearches = [...trendingSearches, ...additionalSearches];\r\n      } catch (error) {\r\n        console.error('Error generando trending dinámicas, usando fallback:', error);\r\n        const fallbackSearches = getFallbackTrendingSearches(limit - trendingSearches.length);\r\n        trendingSearches = [...trendingSearches, ...fallbackSearches];\r\n      }\r\n    }\r\n\r\n    // Limitar al número solicitado\r\n    trendingSearches = trendingSearches.slice(0, limit);\r\n\r\n    const response: ApiResponse<TrendingSearchesResponse> = {\r\n      data: {\r\n        trending: trendingSearches,\r\n        lastUpdated: new Date().toISOString()\r\n      },\r\n      success: true\r\n    };\r\n\r\n        console.log('🔥 Trending searches response:', {\r\n          count: trendingSearches.length,\r\n          hasRealData: trendingSearches.some(s => s.id.includes('real')),\r\n          categories: [...new Set(trendingSearches.map(s => s.category).filter(Boolean))]\r\n        });\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.log({\r\n          type: 'data_access',\r\n          severity: 'low',\r\n          message: 'Trending searches retrieved successfully',\r\n          context: securityLogger.context,\r\n          metadata: {\r\n            searchesCount: trendingSearches.length,\r\n            limit: limit,\r\n            days: days,\r\n            category: category\r\n          }\r\n        });\r\n\r\n        return NextResponse.json(response);\r\n\r\n      } catch (error) {\r\n        console.error('❌ Error en /api/search/trending:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logApiError(\r\n          securityLogger.context,\r\n          error instanceof Error ? error : new Error('Unknown error'),\r\n          {\r\n            endpoint: '/api/search/trending'\r\n          }\r\n        );\r\n\r\n        // En caso de error, devolver búsquedas por defecto\r\n        const fallbackResponse: ApiResponse<TrendingSearchesResponse> = {\r\n          data: {\r\n            trending: defaultTrendingSearches.slice(0, parseInt(request.nextUrl.searchParams.get('limit') || '6')),\r\n            lastUpdated: new Date().toISOString()\r\n          },\r\n          success: true\r\n        };\r\n\r\n        return NextResponse.json(fallbackResponse);\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/search/trending', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// Método POST para registrar una búsqueda (para analytics)\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar que el request tenga contenido\r\n    const contentType = request.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      return NextResponse.json(\r\n        { error: 'Content-Type debe ser application/json' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener el texto del body primero para validar\r\n    const bodyText = await request.text();\r\n    if (!bodyText || bodyText.trim() === '' || bodyText === '\"\"' || bodyText === \"''\") {\r\n      return NextResponse.json(\r\n        { error: 'Body de la request no puede estar vacío' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Parsear JSON de forma segura\r\n    let requestData;\r\n    try {\r\n      requestData = JSON.parse(bodyText);\r\n    } catch (parseError) {\r\n      console.error('Error parsing JSON in POST /api/search/trending:', parseError);\r\n      return NextResponse.json(\r\n        { error: 'JSON inválido en el body de la request' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { query, category, userId, sessionId } = requestData;\r\n\r\n    if (!query || typeof query !== 'string') {\r\n      return NextResponse.json(\r\n        { error: 'Query de búsqueda requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient();\r\n\r\n    if (supabase) {\r\n      // Registrar la búsqueda en analytics usando función optimizada\r\n      const { error } = await supabase.rpc('insert_analytics_event_optimized', {\r\n        p_event_name: 'search',\r\n        p_category: 'search',\r\n        p_action: 'search',\r\n        p_label: query.toLowerCase().trim().substring(0, 50),\r\n        p_user_id: userId,\r\n        p_session_id: sessionId || 'anonymous',\r\n        p_page: '/search',\r\n        p_user_agent: null\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error registrando búsqueda en analytics:', error);\r\n      } else {\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error registrando búsqueda:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}