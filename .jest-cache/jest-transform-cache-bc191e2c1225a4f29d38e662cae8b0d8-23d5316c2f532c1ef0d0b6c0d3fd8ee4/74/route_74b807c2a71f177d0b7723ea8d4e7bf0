ac58d9811fab25e9eda818a07534fe21
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1ophqjro1g() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\dashboard\\route.ts";
  var hash = "c1f5b5f39578edf1eb165eae3d368fe35f045eed";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\dashboard\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 85
        }
      },
      "9": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 93
        }
      },
      "10": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 89
        }
      },
      "11": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 95
        }
      },
      "12": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "13": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "15": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "18": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 47,
          column: 42
        }
      },
      "19": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "20": {
        start: {
          line: 50,
          column: 26
        },
        end: {
          line: 50,
          column: 68
        }
      },
      "21": {
        start: {
          line: 51,
          column: 33
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "22": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "23": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 72
        }
      },
      "24": {
        start: {
          line: 54,
          column: 24
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "25": {
        start: {
          line: 56,
          column: 39
        },
        end: {
          line: 56,
          column: 68
        }
      },
      "26": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 76
        }
      },
      "27": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 61
        }
      },
      "28": {
        start: {
          line: 60,
          column: 30
        },
        end: {
          line: 60,
          column: 213
        }
      },
      "29": {
        start: {
          line: 60,
          column: 88
        },
        end: {
          line: 60,
          column: 202
        }
      },
      "30": {
        start: {
          line: 62,
          column: 25
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 51
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "33": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "34": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "35": {
        start: {
          line: 101,
          column: 27
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "36": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "37": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "38": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 115,
          column: 42
        }
      },
      "39": {
        start: {
          line: 116,
          column: 21
        },
        end: {
          line: 116,
          column: 41
        }
      },
      "40": {
        start: {
          line: 117,
          column: 97
        },
        end: {
          line: 117,
          column: 101
        }
      },
      "41": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "42": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "43": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 87
        }
      },
      "44": {
        start: {
          line: 128,
          column: 33
        },
        end: {
          line: 128,
          column: 92
        }
      },
      "45": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 133,
          column: 18
        }
      },
      "46": {
        start: {
          line: 131,
          column: 57
        },
        end: {
          line: 131,
          column: 82
        }
      },
      "47": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 22
        }
      },
      "48": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 89
        }
      },
      "49": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 137,
          column: 114
        }
      },
      "50": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 142,
          column: 18
        }
      },
      "51": {
        start: {
          line: 140,
          column: 58
        },
        end: {
          line: 140,
          column: 82
        }
      },
      "52": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 22
        }
      },
      "53": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "54": {
        start: {
          line: 146,
          column: 32
        },
        end: {
          line: 146,
          column: 86
        }
      },
      "55": {
        start: {
          line: 147,
          column: 41
        },
        end: {
          line: 147,
          column: 89
        }
      },
      "56": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 152,
          column: 18
        }
      },
      "57": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 22
        }
      },
      "58": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 84
        }
      },
      "59": {
        start: {
          line: 157,
          column: 67
        },
        end: {
          line: 161,
          column: 18
        }
      },
      "60": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 175,
          column: 18
        }
      },
      "61": {
        start: {
          line: 165,
          column: 65
        },
        end: {
          line: 165,
          column: 90
        }
      },
      "62": {
        start: {
          line: 169,
          column: 66
        },
        end: {
          line: 169,
          column: 90
        }
      },
      "63": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "64": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 184,
          column: 19
        }
      },
      "65": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "66": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 79
        }
      },
      "67": {
        start: {
          line: 191,
          column: 25
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "68": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 51
        }
      },
      "69": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 69
        }
      },
      "70": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      },
      "71": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 30
        }
      },
      "72": {
        start: {
          line: 227,
          column: 22
        },
        end: {
          line: 227,
          column: 32
        }
      },
      "73": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "74": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 55
        }
      },
      "75": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "76": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 55
        }
      },
      "77": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 18
        }
      },
      "78": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 53
        }
      },
      "79": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 18
        }
      },
      "80": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 53
        }
      },
      "81": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 18
        }
      },
      "82": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 54
        }
      },
      "83": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 18
        }
      },
      "84": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "85": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 250,
          column: 6
        }
      },
      "86": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "87": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 33
        }
      },
      "88": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 33
        }
      },
      "89": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 34
        }
      },
      "90": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 34
        }
      },
      "91": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 33
        }
      },
      "92": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 335,
          column: 5
        }
      },
      "93": {
        start: {
          line: 274,
          column: 28
        },
        end: {
          line: 274,
          column: 82
        }
      },
      "94": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 81
        }
      },
      "95": {
        start: {
          line: 277,
          column: 34
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "96": {
        start: {
          line: 308,
          column: 24
        },
        end: {
          line: 308,
          column: 26
        }
      },
      "97": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "98": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 93
        }
      },
      "99": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 83
        }
      },
      "100": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 131
        }
      },
      "101": {
        start: {
          line: 312,
          column: 98
        },
        end: {
          line: 312,
          column: 122
        }
      },
      "102": {
        start: {
          line: 315,
          column: 30
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "103": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 29
        }
      },
      "104": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 76
        }
      },
      "105": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 20
        }
      },
      "106": {
        start: {
          line: 340,
          column: 18
        },
        end: {
          line: 340,
          column: 20
        }
      },
      "107": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 26
        }
      },
      "108": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 355,
          column: 5
        }
      },
      "109": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 17
        }
      },
      "110": {
        start: {
          line: 343,
          column: 21
        },
        end: {
          line: 343,
          column: 34
        }
      },
      "111": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 41
        }
      },
      "112": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 354,
          column: 11
        }
      },
      "113": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 356,
          column: 17
        }
      },
      "114": {
        start: {
          line: 361,
          column: 28
        },
        end: {
          line: 361,
          column: 30
        }
      },
      "115": {
        start: {
          line: 363,
          column: 4
        },
        end: {
          line: 381,
          column: 5
        }
      },
      "116": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "117": {
        start: {
          line: 383,
          column: 4
        },
        end: {
          line: 401,
          column: 5
        }
      },
      "118": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 400,
          column: 11
        }
      },
      "119": {
        start: {
          line: 402,
          column: 4
        },
        end: {
          line: 402,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 78
          },
          end: {
            line: 60,
            column: 79
          }
        },
        loc: {
          start: {
            line: 60,
            column: 88
          },
          end: {
            line: 60,
            column: 202
          }
        },
        line: 60
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 98,
            column: 15
          },
          end: {
            line: 98,
            column: 19
          }
        },
        loc: {
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 98
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 52
          },
          end: {
            line: 131,
            column: 53
          }
        },
        loc: {
          start: {
            line: 131,
            column: 57
          },
          end: {
            line: 131,
            column: 82
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 54
          }
        },
        loc: {
          start: {
            line: 140,
            column: 58
          },
          end: {
            line: 140,
            column: 82
          }
        },
        line: 140
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 165,
            column: 60
          },
          end: {
            line: 165,
            column: 61
          }
        },
        loc: {
          start: {
            line: 165,
            column: 65
          },
          end: {
            line: 165,
            column: 90
          }
        },
        line: 165
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 169,
            column: 61
          },
          end: {
            line: 169,
            column: 62
          }
        },
        loc: {
          start: {
            line: 169,
            column: 66
          },
          end: {
            line: 169,
            column: 90
          }
        },
        line: 169
      },
      "11": {
        name: "calculateTimeRange",
        decl: {
          start: {
            line: 225,
            column: 13
          },
          end: {
            line: 225,
            column: 31
          }
        },
        loc: {
          start: {
            line: 225,
            column: 43
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 225
      },
      "12": {
        name: "getCacheTTL",
        decl: {
          start: {
            line: 254,
            column: 13
          },
          end: {
            line: 254,
            column: 24
          }
        },
        loc: {
          start: {
            line: 254,
            column: 36
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 254
      },
      "13": {
        name: "generateDashboardData",
        decl: {
          start: {
            line: 271,
            column: 19
          },
          end: {
            line: 271,
            column: 40
          }
        },
        loc: {
          start: {
            line: 271,
            column: 120
          },
          end: {
            line: 336,
            column: 1
          }
        },
        line: 271
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 312,
            column: 93
          },
          end: {
            line: 312,
            column: 94
          }
        },
        loc: {
          start: {
            line: 312,
            column: 98
          },
          end: {
            line: 312,
            column: 122
          }
        },
        line: 312
      },
      "15": {
        name: "generateMockTrend",
        decl: {
          start: {
            line: 339,
            column: 13
          },
          end: {
            line: 339,
            column: 30
          }
        },
        loc: {
          start: {
            line: 339,
            column: 37
          },
          end: {
            line: 357,
            column: 1
          }
        },
        line: 339
      },
      "16": {
        name: "generateSecurityRecommendations",
        decl: {
          start: {
            line: 360,
            column: 13
          },
          end: {
            line: 360,
            column: 44
          }
        },
        loc: {
          start: {
            line: 360,
            column: 54
          },
          end: {
            line: 403,
            column: 1
          }
        },
        line: 360
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 41
          }
        }, {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 48
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 59
          }
        }, {
          start: {
            line: 50,
            column: 63
          },
          end: {
            line: 50,
            column: 68
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 25
          },
          end: {
            line: 59,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 36
          }
        }, {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 61
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 41
          }
        }, {
          start: {
            line: 112,
            column: 45
          },
          end: {
            line: 112,
            column: 48
          }
        }],
        line: 112
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 117,
            column: 31
          },
          end: {
            line: 117,
            column: 37
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 53
          },
          end: {
            line: 117,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 117,
            column: 65
          },
          end: {
            line: 117,
            column: 70
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 72
          },
          end: {
            line: 117,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 117,
            column: 87
          },
          end: {
            line: 117,
            column: 92
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 134,
            column: 22
          }
        }, {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 143,
            column: 22
          }
        }, {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 153,
            column: 22
          }
        }, {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 176,
            column: 22
          }
        }, {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 184,
            column: 19
          }
        }],
        line: 125
      },
      "10": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "11": {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 231,
            column: 18
          }
        }, {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 18
          }
        }, {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 18
          }
        }, {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 18
          }
        }, {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 18
          }
        }, {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 245,
            column: 53
          }
        }],
        line: 228
      },
      "12": {
        loc: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 256,
            column: 18
          }
        }, {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 258,
            column: 33
          }
        }, {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 260,
            column: 33
          }
        }, {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 262,
            column: 34
          }
        }, {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 264,
            column: 34
          }
        }, {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 266,
            column: 33
          }
        }],
        line: 255
      },
      "13": {
        loc: {
          start: {
            line: 282,
            column: 28
          },
          end: {
            line: 282,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 65
          },
          end: {
            line: 282,
            column: 136
          }
        }, {
          start: {
            line: 282,
            column: 139
          },
          end: {
            line: 282,
            column: 140
          }
        }],
        line: 282
      },
      "14": {
        loc: {
          start: {
            line: 283,
            column: 33
          },
          end: {
            line: 283,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 33
          },
          end: {
            line: 283,
            column: 63
          }
        }, {
          start: {
            line: 283,
            column: 67
          },
          end: {
            line: 283,
            column: 69
          }
        }],
        line: 283
      },
      "15": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "16": {
        loc: {
          start: {
            line: 320,
            column: 29
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 45
          },
          end: {
            line: 324,
            column: 13
          }
        }, {
          start: {
            line: 324,
            column: 16
          },
          end: {
            line: 328,
            column: 13
          }
        }],
        line: 320
      },
      "17": {
        loc: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "18": {
        loc: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0, 0, 0],
      "12": [0, 0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\security\\dashboard\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API del Dashboard de Seguridad Enterprise\r\n * Proporciona datos completos para el dashboard de seguridad en tiempo real\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { \r\n  enterpriseAuditSystem,\r\n  type SecurityDashboardData,\r\n  type EnterpriseSecurityMetrics\r\n} from '@/lib/security/enterprise-audit-system';\r\nimport { \r\n  getSecurityMetrics,\r\n  analyzeSecurityPatterns,\r\n  generateSecurityReport\r\n} from '@/lib/auth/security-audit-enhanced';\r\nimport { getRateLimitMetrics } from '@/lib/rate-limiting/enterprise-middleware';\r\nimport { withCache } from '@/lib/auth/enterprise-cache';\r\n\r\n// =====================================================\r\n// GET /api/admin/security/dashboard\r\n// Obtiene datos completos del dashboard de seguridad\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin con permisos de seguridad\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_read', 'dashboard_access']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Obtener par\xE1metros de consulta\r\n    const url = new URL(request.url);\r\n    const timeRange = url.searchParams.get('timeRange') || '24h';\r\n    const includeAnomalies = url.searchParams.get('anomalies') !== 'false';\r\n    const includeIncidents = url.searchParams.get('incidents') !== 'false';\r\n    const includeTrends = url.searchParams.get('trends') !== 'false';\r\n    const refresh = url.searchParams.get('refresh') === 'true';\r\n\r\n    // Calcular fechas basadas en timeRange\r\n    const { startDate, endDate } = calculateTimeRange(timeRange);\r\n\r\n    // Obtener datos del dashboard con cache\r\n    const cacheKey = `security_dashboard_${timeRange}_${context.userId}`;\r\n    const cacheTTL = refresh ? 0 : getCacheTTL(timeRange);\r\n\r\n    const dashboardData = await withCache(\r\n      cacheKey,\r\n      async () => await generateDashboardData(\r\n        startDate,\r\n        endDate,\r\n        includeAnomalies,\r\n        includeIncidents,\r\n        includeTrends,\r\n        context.userId\r\n      ),\r\n      cacheTTL\r\n    );\r\n\r\n    // A\xF1adir metadatos de la respuesta\r\n    const response = {\r\n      success: true,\r\n      data: dashboardData,\r\n      metadata: {\r\n        timeRange,\r\n        startDate,\r\n        endDate,\r\n        generatedAt: new Date().toISOString(),\r\n        cacheUsed: !refresh,\r\n        requestedBy: context.userId\r\n      },\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          validations: context.validations\r\n        }\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener datos del dashboard',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST /api/admin/security/dashboard\r\n// Ejecuta an\xE1lisis de seguridad bajo demanda\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin con permisos cr\xEDticos\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'security_write', 'system_analysis']);\r\n    \r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    const {\r\n      analysisType = 'full',\r\n      targetUserId,\r\n      timeRange = '24h',\r\n      forceRefresh = false\r\n    } = body;\r\n\r\n    const results: any = {\r\n      timestamp: new Date().toISOString(),\r\n      requestedBy: context.userId,\r\n      analysisType,\r\n      results: {}\r\n    };\r\n\r\n    // Ejecutar an\xE1lisis seg\xFAn el tipo solicitado\r\n    switch (analysisType) {\r\n      case 'patterns':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando an\xE1lisis de patrones...');\r\n        const patterns = await analyzeSecurityPatterns();\r\n        results.results.patterns = {\r\n          alertsGenerated: patterns.length,\r\n          criticalAlerts: patterns.filter(p => p.severity === 'critical').length,\r\n          patterns\r\n        };\r\n        break;\r\n\r\n      case 'anomalies':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando detecci\xF3n de anomal\xEDas...');\r\n        const anomalies = await enterpriseAuditSystem.detectAnomalies(targetUserId);\r\n        results.results.anomalies = {\r\n          anomaliesDetected: anomalies.length,\r\n          highConfidence: anomalies.filter(a => a.confidence_score > 0.8).length,\r\n          anomalies\r\n        };\r\n        break;\r\n\r\n      case 'metrics':\r\n        console.log('[SECURITY_DASHBOARD] Actualizando m\xE9tricas...');\r\n        const metrics = await getSecurityMetrics();\r\n        const rateLimitMetrics = getRateLimitMetrics();\r\n        results.results.metrics = {\r\n          security: metrics,\r\n          rateLimit: rateLimitMetrics,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        break;\r\n\r\n      case 'full':\r\n        console.log('[SECURITY_DASHBOARD] Ejecutando an\xE1lisis completo...');\r\n        \r\n        // Ejecutar todos los an\xE1lisis en paralelo\r\n        const [fullPatterns, fullAnomalies, fullMetrics] = await Promise.all([\r\n          analyzeSecurityPatterns(),\r\n          enterpriseAuditSystem.detectAnomalies(targetUserId),\r\n          getSecurityMetrics()\r\n        ]);\r\n\r\n        results.results = {\r\n          patterns: {\r\n            alertsGenerated: fullPatterns.length,\r\n            criticalAlerts: fullPatterns.filter(p => p.severity === 'critical').length\r\n          },\r\n          anomalies: {\r\n            anomaliesDetected: fullAnomalies.length,\r\n            highConfidence: fullAnomalies.filter(a => a.confidence_score > 0.8).length\r\n          },\r\n          metrics: {\r\n            security: fullMetrics,\r\n            rateLimit: getRateLimitMetrics()\r\n          }\r\n        };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          {\r\n            error: `Tipo de an\xE1lisis no v\xE1lido: ${analysisType}`,\r\n            code: 'INVALID_ANALYSIS_TYPE',\r\n            enterprise: true\r\n          },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    // Invalidar cache si se solicita\r\n    if (forceRefresh) {\r\n      // Implementar invalidaci\xF3n de cache\r\n      console.log('[SECURITY_DASHBOARD] Cache invalidado por solicitud');\r\n    }\r\n\r\n    const response = {\r\n      success: true,\r\n      data: results,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        security: {\r\n          level: context.securityLevel,\r\n          audit: true\r\n        }\r\n      },\r\n      message: `An\xE1lisis ${analysisType} completado correctamente`\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD_ANALYSIS] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno en an\xE1lisis de seguridad',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\n/**\r\n * Calcula el rango de fechas basado en el par\xE1metro timeRange\r\n */\r\nfunction calculateTimeRange(timeRange: string): { startDate: string; endDate: string } {\r\n  const endDate = new Date();\r\n  const startDate = new Date();\r\n\r\n  switch (timeRange) {\r\n    case '1h':\r\n      startDate.setHours(endDate.getHours() - 1);\r\n      break;\r\n    case '6h':\r\n      startDate.setHours(endDate.getHours() - 6);\r\n      break;\r\n    case '24h':\r\n      startDate.setDate(endDate.getDate() - 1);\r\n      break;\r\n    case '7d':\r\n      startDate.setDate(endDate.getDate() - 7);\r\n      break;\r\n    case '30d':\r\n      startDate.setDate(endDate.getDate() - 30);\r\n      break;\r\n    default:\r\n      startDate.setDate(endDate.getDate() - 1); // Default a 24h\r\n  }\r\n\r\n  return {\r\n    startDate: startDate.toISOString(),\r\n    endDate: endDate.toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Determina el TTL del cache basado en el timeRange\r\n */\r\nfunction getCacheTTL(timeRange: string): number {\r\n  switch (timeRange) {\r\n    case '1h':\r\n    case '6h':\r\n      return 2 * 60 * 1000; // 2 minutos\r\n    case '24h':\r\n      return 5 * 60 * 1000; // 5 minutos\r\n    case '7d':\r\n      return 15 * 60 * 1000; // 15 minutos\r\n    case '30d':\r\n      return 30 * 60 * 1000; // 30 minutos\r\n    default:\r\n      return 5 * 60 * 1000; // 5 minutos por defecto\r\n  }\r\n}\r\n\r\n/**\r\n * Genera los datos completos del dashboard\r\n */\r\nasync function generateDashboardData(\r\n  startDate: string,\r\n  endDate: string,\r\n  includeAnomalies: boolean,\r\n  includeIncidents: boolean,\r\n  includeTrends: boolean,\r\n  userId: string\r\n): Promise<SecurityDashboardData> {\r\n  try {\r\n    // Obtener m\xE9tricas base\r\n    const baseMetrics = await getSecurityMetrics();\r\n    const rateLimitMetrics = getRateLimitMetrics();\r\n\r\n    // Construir m\xE9tricas enterprise\r\n    const enterpriseMetrics: EnterpriseSecurityMetrics = {\r\n      ...baseMetrics,\r\n      rate_limiting: {\r\n        total_requests: rateLimitMetrics.totalRequests,\r\n        blocked_requests: rateLimitMetrics.blockedRequests,\r\n        block_rate: rateLimitMetrics.totalRequests > 0 \r\n          ? (rateLimitMetrics.blockedRequests / rateLimitMetrics.totalRequests) * 100 \r\n          : 0,\r\n        top_blocked_ips: rateLimitMetrics.topBlockedIPs || []\r\n      },\r\n      anomaly_detection: {\r\n        total_anomalies: 0, // Se actualizar\xE1 con datos reales\r\n        high_confidence_anomalies: 0,\r\n        false_positive_rate: 5.2,\r\n        detection_accuracy: 94.8\r\n      },\r\n      incident_management: {\r\n        open_incidents: 0, // Se actualizar\xE1 con datos reales\r\n        avg_resolution_time: 4.5, // horas\r\n        incidents_by_severity: {\r\n          low: 2,\r\n          medium: 1,\r\n          high: 0,\r\n          critical: 0\r\n        }\r\n      },\r\n      compliance: {\r\n        audit_coverage: 98.5,\r\n        policy_violations: 1,\r\n        data_retention_compliance: true\r\n      }\r\n    };\r\n\r\n    // Obtener anomal\xEDas si se solicita\r\n    let anomalies: any[] = [];\r\n    if (includeAnomalies) {\r\n      anomalies = await enterpriseAuditSystem.detectAnomalies();\r\n      enterpriseMetrics.anomaly_detection.total_anomalies = anomalies.length;\r\n      enterpriseMetrics.anomaly_detection.high_confidence_anomalies = \r\n        anomalies.filter(a => a.confidence_score > 0.8).length;\r\n    }\r\n\r\n    // Datos del dashboard\r\n    const dashboardData: SecurityDashboardData = {\r\n      overview: enterpriseMetrics,\r\n      recent_events: [], // Se obtendr\xEDa de la base de datos\r\n      active_anomalies: anomalies,\r\n      open_incidents: [], // Se obtendr\xEDa de la base de datos\r\n      security_trends: includeTrends ? {\r\n        events_trend: generateMockTrend('events'),\r\n        anomalies_trend: generateMockTrend('anomalies'),\r\n        incidents_trend: generateMockTrend('incidents')\r\n      } : {\r\n        events_trend: [],\r\n        anomalies_trend: [],\r\n        incidents_trend: []\r\n      },\r\n      recommendations: generateSecurityRecommendations(enterpriseMetrics)\r\n    };\r\n\r\n    return dashboardData;\r\n  } catch (error) {\r\n    console.error('[SECURITY_DASHBOARD] Error generando datos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Genera datos de tendencia mock (en producci\xF3n vendr\xEDa de la base de datos)\r\n */\r\nfunction generateMockTrend(type: string): any[] {\r\n  const trend = [];\r\n  const now = new Date();\r\n  \r\n  for (let i = 6; i >= 0; i--) {\r\n    const date = new Date(now);\r\n    date.setDate(date.getDate() - i);\r\n    \r\n    trend.push({\r\n      date: date.toISOString().split('T')[0],\r\n      count: Math.floor(Math.random() * 50) + 10,\r\n      severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)]\r\n    });\r\n  }\r\n  \r\n  return trend;\r\n}\r\n\r\n/**\r\n * Genera recomendaciones de seguridad basadas en m\xE9tricas\r\n */\r\nfunction generateSecurityRecommendations(metrics: EnterpriseSecurityMetrics): any[] {\r\n  const recommendations = [];\r\n\r\n  // Recomendaci\xF3n basada en rate limiting\r\n  if (metrics.rate_limiting.block_rate > 10) {\r\n    recommendations.push({\r\n      id: 'rate_limit_high',\r\n      type: 'immediate',\r\n      priority: 'high',\r\n      title: 'Alto porcentaje de requests bloqueadas',\r\n      description: `${metrics.rate_limiting.block_rate.toFixed(1)}% de requests est\xE1n siendo bloqueadas`,\r\n      impact: 'Posible impacto en experiencia de usuario o ataque en curso',\r\n      effort: 'medium',\r\n      category: 'detection',\r\n      implementation_steps: [\r\n        'Revisar logs de rate limiting',\r\n        'Analizar IPs con m\xE1s bloqueos',\r\n        'Ajustar umbrales si es necesario',\r\n        'Implementar whitelist para IPs leg\xEDtimas'\r\n      ],\r\n      estimated_completion: '2-4 horas'\r\n    });\r\n  }\r\n\r\n  // Recomendaci\xF3n basada en anomal\xEDas\r\n  if (metrics.anomaly_detection.high_confidence_anomalies > 5) {\r\n    recommendations.push({\r\n      id: 'anomalies_high',\r\n      type: 'immediate',\r\n      priority: 'critical',\r\n      title: 'M\xFAltiples anomal\xEDas de alta confianza detectadas',\r\n      description: `${metrics.anomaly_detection.high_confidence_anomalies} anomal\xEDas requieren revisi\xF3n inmediata`,\r\n      impact: 'Posible compromiso de seguridad',\r\n      effort: 'high',\r\n      category: 'response',\r\n      implementation_steps: [\r\n        'Revisar anomal\xEDas cr\xEDticas',\r\n        'Investigar usuarios afectados',\r\n        'Implementar medidas de contenci\xF3n',\r\n        'Notificar al equipo de seguridad'\r\n      ],\r\n      estimated_completion: '1-2 horas'\r\n    });\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "authResult", "requireAdminAuth", "success", "NextResponse", "json", "error", "code", "enterprise", "status", "context", "url", "URL", "timeRange", "searchParams", "get", "includeAnomalies", "includeIncidents", "includeTrends", "refresh", "startDate", "endDate", "calculateTimeRange", "cacheKey", "userId", "cacheTTL", "getCacheTTL", "dashboardData", "withCache", "generateDashboardData", "response", "data", "metadata", "generatedAt", "Date", "toISOString", "cacheUsed", "requestedBy", "requester", "role", "permissions", "security", "level", "securityLevel", "validations", "console", "timestamp", "body", "analysisType", "targetUserId", "forceRefresh", "results", "log", "patterns", "analyzeSecurityPatterns", "alertsGenerated", "length", "criticalAlerts", "filter", "p", "severity", "anomalies", "enterpriseAuditSystem", "detectAnomalies", "anomaliesDetected", "highConfidence", "a", "confidence_score", "metrics", "getSecurityMetrics", "rateLimitMetrics", "getRateLimitMetrics", "rateLimit", "updatedAt", "fullPatterns", "fullAnomalies", "fullMetrics", "Promise", "all", "audit", "message", "setHours", "getHours", "setDate", "getDate", "baseMetrics", "enterpriseMetrics", "rate_limiting", "total_requests", "totalRequests", "blocked_requests", "blockedRequests", "block_rate", "top_blocked_ips", "topBlockedIPs", "anomaly_detection", "total_anomalies", "high_confidence_anomalies", "false_positive_rate", "detection_accuracy", "incident_management", "open_incidents", "avg_resolution_time", "incidents_by_severity", "low", "medium", "high", "critical", "compliance", "audit_coverage", "policy_violations", "data_retention_compliance", "overview", "recent_events", "active_anomalies", "security_trends", "events_trend", "generateMockTrend", "anomalies_trend", "incidents_trend", "recommendations", "generateSecurityRecommendations", "type", "trend", "now", "i", "date", "push", "split", "count", "Math", "floor", "random", "id", "priority", "title", "description", "toFixed", "impact", "effort", "category", "implementation_steps", "estimated_completion"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c1f5b5f39578edf1eb165eae3d368fe35f045eed"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ophqjro1g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ophqjro1g();
cov_1ophqjro1g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[0]++;
  cov_1ophqjro1g().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ophqjro1g().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1ophqjro1g().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1ophqjro1g().f[1]++;
    cov_1ophqjro1g().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1ophqjro1g().f[2]++;
    cov_1ophqjro1g().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1ophqjro1g().f[3]++;
    cov_1ophqjro1g().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ophqjro1g().s[7]++, require("next/server"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_1ophqjro1g().s[8]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _enterpriseauditsystem =
/* istanbul ignore next */
(cov_1ophqjro1g().s[9]++, require("../../../../../lib/security/enterprise-audit-system"));
const _securityauditenhanced =
/* istanbul ignore next */
(cov_1ophqjro1g().s[10]++, require("../../../../../lib/auth/security-audit-enhanced"));
const _enterprisemiddleware =
/* istanbul ignore next */
(cov_1ophqjro1g().s[11]++, require("../../../../../lib/rate-limiting/enterprise-middleware"));
const _enterprisecache =
/* istanbul ignore next */
(cov_1ophqjro1g().s[12]++, require("../../../../../lib/auth/enterprise-cache"));
const runtime =
/* istanbul ignore next */
(cov_1ophqjro1g().s[13]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[4]++;
  cov_1ophqjro1g().s[14]++;
  try {
    // Verificar autenticaciÃ³n admin con permisos de seguridad
    const authResult =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[15]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_read', 'dashboard_access']));
    /* istanbul ignore next */
    cov_1ophqjro1g().s[16]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1ophqjro1g().b[0][0]++;
      cov_1ophqjro1g().s[17]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[1][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[1][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ophqjro1g().b[0][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[18]++, authResult.context);
    // Obtener parÃ¡metros de consulta
    const url =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[19]++, new URL(request.url));
    const timeRange =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[20]++,
    /* istanbul ignore next */
    (cov_1ophqjro1g().b[2][0]++, url.searchParams.get('timeRange')) ||
    /* istanbul ignore next */
    (cov_1ophqjro1g().b[2][1]++, '24h'));
    const includeAnomalies =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[21]++, url.searchParams.get('anomalies') !== 'false');
    const includeIncidents =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[22]++, url.searchParams.get('incidents') !== 'false');
    const includeTrends =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[23]++, url.searchParams.get('trends') !== 'false');
    const refresh =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[24]++, url.searchParams.get('refresh') === 'true');
    // Calcular fechas basadas en timeRange
    const {
      startDate,
      endDate
    } =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[25]++, calculateTimeRange(timeRange));
    // Obtener datos del dashboard con cache
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[26]++, `security_dashboard_${timeRange}_${context.userId}`);
    const cacheTTL =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[27]++, refresh ?
    /* istanbul ignore next */
    (cov_1ophqjro1g().b[3][0]++, 0) :
    /* istanbul ignore next */
    (cov_1ophqjro1g().b[3][1]++, getCacheTTL(timeRange)));
    const dashboardData =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[28]++, await (0, _enterprisecache.withCache)(cacheKey, async () => {
      /* istanbul ignore next */
      cov_1ophqjro1g().f[5]++;
      cov_1ophqjro1g().s[29]++;
      return await generateDashboardData(startDate, endDate, includeAnomalies, includeIncidents, includeTrends, context.userId);
    }, cacheTTL));
    // AÃ±adir metadatos de la respuesta
    const response =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[30]++, {
      success: true,
      data: dashboardData,
      metadata: {
        timeRange,
        startDate,
        endDate,
        generatedAt: new Date().toISOString(),
        cacheUsed: !refresh,
        requestedBy: context.userId
      },
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        security: {
          level: context.securityLevel,
          validations: context.validations
        }
      }
    });
    /* istanbul ignore next */
    cov_1ophqjro1g().s[31]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1ophqjro1g().s[32]++;
    console.error('[SECURITY_DASHBOARD] Error:', error);
    /* istanbul ignore next */
    cov_1ophqjro1g().s[33]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener datos del dashboard',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[6]++;
  cov_1ophqjro1g().s[34]++;
  try {
    // Verificar autenticaciÃ³n admin con permisos crÃ­ticos
    const authResult =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[35]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'security_write', 'system_analysis']));
    /* istanbul ignore next */
    cov_1ophqjro1g().s[36]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_1ophqjro1g().b[4][0]++;
      cov_1ophqjro1g().s[37]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[5][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[5][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ophqjro1g().b[4][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[38]++, authResult.context);
    const body =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[39]++, await request.json());
    const {
      analysisType =
      /* istanbul ignore next */
      (cov_1ophqjro1g().b[6][0]++, 'full'),
      targetUserId,
      timeRange =
      /* istanbul ignore next */
      (cov_1ophqjro1g().b[7][0]++, '24h'),
      forceRefresh =
      /* istanbul ignore next */
      (cov_1ophqjro1g().b[8][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[40]++, body);
    const results =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[41]++, {
      timestamp: new Date().toISOString(),
      requestedBy: context.userId,
      analysisType,
      results: {}
    });
    // Ejecutar anÃ¡lisis segÃºn el tipo solicitado
    /* istanbul ignore next */
    cov_1ophqjro1g().s[42]++;
    switch (analysisType) {
      case 'patterns':
        /* istanbul ignore next */
        cov_1ophqjro1g().b[9][0]++;
        cov_1ophqjro1g().s[43]++;
        console.log('[SECURITY_DASHBOARD] Ejecutando anÃ¡lisis de patrones...');
        const patterns =
        /* istanbul ignore next */
        (cov_1ophqjro1g().s[44]++, await (0, _securityauditenhanced.analyzeSecurityPatterns)());
        /* istanbul ignore next */
        cov_1ophqjro1g().s[45]++;
        results.results.patterns = {
          alertsGenerated: patterns.length,
          criticalAlerts: patterns.filter(p => {
            /* istanbul ignore next */
            cov_1ophqjro1g().f[7]++;
            cov_1ophqjro1g().s[46]++;
            return p.severity === 'critical';
          }).length,
          patterns
        };
        /* istanbul ignore next */
        cov_1ophqjro1g().s[47]++;
        break;
      case 'anomalies':
        /* istanbul ignore next */
        cov_1ophqjro1g().b[9][1]++;
        cov_1ophqjro1g().s[48]++;
        console.log('[SECURITY_DASHBOARD] Ejecutando detecciÃ³n de anomalÃ­as...');
        const anomalies =
        /* istanbul ignore next */
        (cov_1ophqjro1g().s[49]++, await _enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies(targetUserId));
        /* istanbul ignore next */
        cov_1ophqjro1g().s[50]++;
        results.results.anomalies = {
          anomaliesDetected: anomalies.length,
          highConfidence: anomalies.filter(a => {
            /* istanbul ignore next */
            cov_1ophqjro1g().f[8]++;
            cov_1ophqjro1g().s[51]++;
            return a.confidence_score > 0.8;
          }).length,
          anomalies
        };
        /* istanbul ignore next */
        cov_1ophqjro1g().s[52]++;
        break;
      case 'metrics':
        /* istanbul ignore next */
        cov_1ophqjro1g().b[9][2]++;
        cov_1ophqjro1g().s[53]++;
        console.log('[SECURITY_DASHBOARD] Actualizando mÃ©tricas...');
        const metrics =
        /* istanbul ignore next */
        (cov_1ophqjro1g().s[54]++, await (0, _securityauditenhanced.getSecurityMetrics)());
        const rateLimitMetrics =
        /* istanbul ignore next */
        (cov_1ophqjro1g().s[55]++, (0, _enterprisemiddleware.getRateLimitMetrics)());
        /* istanbul ignore next */
        cov_1ophqjro1g().s[56]++;
        results.results.metrics = {
          security: metrics,
          rateLimit: rateLimitMetrics,
          updatedAt: new Date().toISOString()
        };
        /* istanbul ignore next */
        cov_1ophqjro1g().s[57]++;
        break;
      case 'full':
        /* istanbul ignore next */
        cov_1ophqjro1g().b[9][3]++;
        cov_1ophqjro1g().s[58]++;
        console.log('[SECURITY_DASHBOARD] Ejecutando anÃ¡lisis completo...');
        // Ejecutar todos los anÃ¡lisis en paralelo
        const [fullPatterns, fullAnomalies, fullMetrics] =
        /* istanbul ignore next */
        (cov_1ophqjro1g().s[59]++, await Promise.all([(0, _securityauditenhanced.analyzeSecurityPatterns)(), _enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies(targetUserId), (0, _securityauditenhanced.getSecurityMetrics)()]));
        /* istanbul ignore next */
        cov_1ophqjro1g().s[60]++;
        results.results = {
          patterns: {
            alertsGenerated: fullPatterns.length,
            criticalAlerts: fullPatterns.filter(p => {
              /* istanbul ignore next */
              cov_1ophqjro1g().f[9]++;
              cov_1ophqjro1g().s[61]++;
              return p.severity === 'critical';
            }).length
          },
          anomalies: {
            anomaliesDetected: fullAnomalies.length,
            highConfidence: fullAnomalies.filter(a => {
              /* istanbul ignore next */
              cov_1ophqjro1g().f[10]++;
              cov_1ophqjro1g().s[62]++;
              return a.confidence_score > 0.8;
            }).length
          },
          metrics: {
            security: fullMetrics,
            rateLimit: (0, _enterprisemiddleware.getRateLimitMetrics)()
          }
        };
        /* istanbul ignore next */
        cov_1ophqjro1g().s[63]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1ophqjro1g().b[9][4]++;
        cov_1ophqjro1g().s[64]++;
        return _server.NextResponse.json({
          error: `Tipo de anÃ¡lisis no vÃ¡lido: ${analysisType}`,
          code: 'INVALID_ANALYSIS_TYPE',
          enterprise: true
        }, {
          status: 400
        });
    }
    // Invalidar cache si se solicita
    /* istanbul ignore next */
    cov_1ophqjro1g().s[65]++;
    if (forceRefresh) {
      /* istanbul ignore next */
      cov_1ophqjro1g().b[10][0]++;
      cov_1ophqjro1g().s[66]++;
      // Implementar invalidaciÃ³n de cache
      console.log('[SECURITY_DASHBOARD] Cache invalidado por solicitud');
    } else
    /* istanbul ignore next */
    {
      cov_1ophqjro1g().b[10][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[67]++, {
      success: true,
      data: results,
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        security: {
          level: context.securityLevel,
          audit: true
        }
      },
      message: `AnÃ¡lisis ${analysisType} completado correctamente`
    });
    /* istanbul ignore next */
    cov_1ophqjro1g().s[68]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_1ophqjro1g().s[69]++;
    console.error('[SECURITY_DASHBOARD_ANALYSIS] Error:', error);
    /* istanbul ignore next */
    cov_1ophqjro1g().s[70]++;
    return _server.NextResponse.json({
      error: 'Error interno en anÃ¡lisis de seguridad',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
// =====================================================
// FUNCIONES AUXILIARES
// =====================================================
/**
 * Calcula el rango de fechas basado en el parÃ¡metro timeRange
 */
function calculateTimeRange(timeRange) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[11]++;
  const endDate =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[71]++, new Date());
  const startDate =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[72]++, new Date());
  /* istanbul ignore next */
  cov_1ophqjro1g().s[73]++;
  switch (timeRange) {
    case '1h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][0]++;
      cov_1ophqjro1g().s[74]++;
      startDate.setHours(endDate.getHours() - 1);
      /* istanbul ignore next */
      cov_1ophqjro1g().s[75]++;
      break;
    case '6h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][1]++;
      cov_1ophqjro1g().s[76]++;
      startDate.setHours(endDate.getHours() - 6);
      /* istanbul ignore next */
      cov_1ophqjro1g().s[77]++;
      break;
    case '24h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][2]++;
      cov_1ophqjro1g().s[78]++;
      startDate.setDate(endDate.getDate() - 1);
      /* istanbul ignore next */
      cov_1ophqjro1g().s[79]++;
      break;
    case '7d':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][3]++;
      cov_1ophqjro1g().s[80]++;
      startDate.setDate(endDate.getDate() - 7);
      /* istanbul ignore next */
      cov_1ophqjro1g().s[81]++;
      break;
    case '30d':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][4]++;
      cov_1ophqjro1g().s[82]++;
      startDate.setDate(endDate.getDate() - 30);
      /* istanbul ignore next */
      cov_1ophqjro1g().s[83]++;
      break;
    default:
      /* istanbul ignore next */
      cov_1ophqjro1g().b[11][5]++;
      cov_1ophqjro1g().s[84]++;
      startDate.setDate(endDate.getDate() - 1);
    // Default a 24h
  }
  /* istanbul ignore next */
  cov_1ophqjro1g().s[85]++;
  return {
    startDate: startDate.toISOString(),
    endDate: endDate.toISOString()
  };
}
/**
 * Determina el TTL del cache basado en el timeRange
 */
function getCacheTTL(timeRange) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[12]++;
  cov_1ophqjro1g().s[86]++;
  switch (timeRange) {
    case '1h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][0]++;
    case '6h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][1]++;
      cov_1ophqjro1g().s[87]++;
      return 2 * 60 * 1000;
    // 2 minutos
    case '24h':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][2]++;
      cov_1ophqjro1g().s[88]++;
      return 5 * 60 * 1000;
    // 5 minutos
    case '7d':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][3]++;
      cov_1ophqjro1g().s[89]++;
      return 15 * 60 * 1000;
    // 15 minutos
    case '30d':
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][4]++;
      cov_1ophqjro1g().s[90]++;
      return 30 * 60 * 1000;
    // 30 minutos
    default:
      /* istanbul ignore next */
      cov_1ophqjro1g().b[12][5]++;
      cov_1ophqjro1g().s[91]++;
      return 5 * 60 * 1000;
    // 5 minutos por defecto
  }
}
/**
 * Genera los datos completos del dashboard
 */
async function generateDashboardData(startDate, endDate, includeAnomalies, includeIncidents, includeTrends, userId) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[13]++;
  cov_1ophqjro1g().s[92]++;
  try {
    // Obtener mÃ©tricas base
    const baseMetrics =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[93]++, await (0, _securityauditenhanced.getSecurityMetrics)());
    const rateLimitMetrics =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[94]++, (0, _enterprisemiddleware.getRateLimitMetrics)());
    // Construir mÃ©tricas enterprise
    const enterpriseMetrics =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[95]++, {
      ...baseMetrics,
      rate_limiting: {
        total_requests: rateLimitMetrics.totalRequests,
        blocked_requests: rateLimitMetrics.blockedRequests,
        block_rate: rateLimitMetrics.totalRequests > 0 ?
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[13][0]++, rateLimitMetrics.blockedRequests / rateLimitMetrics.totalRequests * 100) :
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[13][1]++, 0),
        top_blocked_ips:
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[14][0]++, rateLimitMetrics.topBlockedIPs) ||
        /* istanbul ignore next */
        (cov_1ophqjro1g().b[14][1]++, [])
      },
      anomaly_detection: {
        total_anomalies: 0,
        high_confidence_anomalies: 0,
        false_positive_rate: 5.2,
        detection_accuracy: 94.8
      },
      incident_management: {
        open_incidents: 0,
        avg_resolution_time: 4.5,
        incidents_by_severity: {
          low: 2,
          medium: 1,
          high: 0,
          critical: 0
        }
      },
      compliance: {
        audit_coverage: 98.5,
        policy_violations: 1,
        data_retention_compliance: true
      }
    });
    // Obtener anomalÃ­as si se solicita
    let anomalies =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[96]++, []);
    /* istanbul ignore next */
    cov_1ophqjro1g().s[97]++;
    if (includeAnomalies) {
      /* istanbul ignore next */
      cov_1ophqjro1g().b[15][0]++;
      cov_1ophqjro1g().s[98]++;
      anomalies = await _enterpriseauditsystem.enterpriseAuditSystem.detectAnomalies();
      /* istanbul ignore next */
      cov_1ophqjro1g().s[99]++;
      enterpriseMetrics.anomaly_detection.total_anomalies = anomalies.length;
      /* istanbul ignore next */
      cov_1ophqjro1g().s[100]++;
      enterpriseMetrics.anomaly_detection.high_confidence_anomalies = anomalies.filter(a => {
        /* istanbul ignore next */
        cov_1ophqjro1g().f[14]++;
        cov_1ophqjro1g().s[101]++;
        return a.confidence_score > 0.8;
      }).length;
    } else
    /* istanbul ignore next */
    {
      cov_1ophqjro1g().b[15][1]++;
    }
    // Datos del dashboard
    const dashboardData =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[102]++, {
      overview: enterpriseMetrics,
      recent_events: [],
      active_anomalies: anomalies,
      open_incidents: [],
      security_trends: includeTrends ?
      /* istanbul ignore next */
      (cov_1ophqjro1g().b[16][0]++, {
        events_trend: generateMockTrend('events'),
        anomalies_trend: generateMockTrend('anomalies'),
        incidents_trend: generateMockTrend('incidents')
      }) :
      /* istanbul ignore next */
      (cov_1ophqjro1g().b[16][1]++, {
        events_trend: [],
        anomalies_trend: [],
        incidents_trend: []
      }),
      recommendations: generateSecurityRecommendations(enterpriseMetrics)
    });
    /* istanbul ignore next */
    cov_1ophqjro1g().s[103]++;
    return dashboardData;
  } catch (error) {
    /* istanbul ignore next */
    cov_1ophqjro1g().s[104]++;
    console.error('[SECURITY_DASHBOARD] Error generando datos:', error);
    /* istanbul ignore next */
    cov_1ophqjro1g().s[105]++;
    throw error;
  }
}
/**
 * Genera datos de tendencia mock (en producciÃ³n vendrÃ­a de la base de datos)
 */
function generateMockTrend(type) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[15]++;
  const trend =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[106]++, []);
  const now =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[107]++, new Date());
  /* istanbul ignore next */
  cov_1ophqjro1g().s[108]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[109]++, 6); i >= 0; i--) {
    const date =
    /* istanbul ignore next */
    (cov_1ophqjro1g().s[110]++, new Date(now));
    /* istanbul ignore next */
    cov_1ophqjro1g().s[111]++;
    date.setDate(date.getDate() - i);
    /* istanbul ignore next */
    cov_1ophqjro1g().s[112]++;
    trend.push({
      date: date.toISOString().split('T')[0],
      count: Math.floor(Math.random() * 50) + 10,
      severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)]
    });
  }
  /* istanbul ignore next */
  cov_1ophqjro1g().s[113]++;
  return trend;
}
/**
 * Genera recomendaciones de seguridad basadas en mÃ©tricas
 */
function generateSecurityRecommendations(metrics) {
  /* istanbul ignore next */
  cov_1ophqjro1g().f[16]++;
  const recommendations =
  /* istanbul ignore next */
  (cov_1ophqjro1g().s[114]++, []);
  // RecomendaciÃ³n basada en rate limiting
  /* istanbul ignore next */
  cov_1ophqjro1g().s[115]++;
  if (metrics.rate_limiting.block_rate > 10) {
    /* istanbul ignore next */
    cov_1ophqjro1g().b[17][0]++;
    cov_1ophqjro1g().s[116]++;
    recommendations.push({
      id: 'rate_limit_high',
      type: 'immediate',
      priority: 'high',
      title: 'Alto porcentaje de requests bloqueadas',
      description: `${metrics.rate_limiting.block_rate.toFixed(1)}% de requests estÃ¡n siendo bloqueadas`,
      impact: 'Posible impacto en experiencia de usuario o ataque en curso',
      effort: 'medium',
      category: 'detection',
      implementation_steps: ['Revisar logs de rate limiting', 'Analizar IPs con mÃ¡s bloqueos', 'Ajustar umbrales si es necesario', 'Implementar whitelist para IPs legÃ­timas'],
      estimated_completion: '2-4 horas'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1ophqjro1g().b[17][1]++;
  }
  // RecomendaciÃ³n basada en anomalÃ­as
  cov_1ophqjro1g().s[117]++;
  if (metrics.anomaly_detection.high_confidence_anomalies > 5) {
    /* istanbul ignore next */
    cov_1ophqjro1g().b[18][0]++;
    cov_1ophqjro1g().s[118]++;
    recommendations.push({
      id: 'anomalies_high',
      type: 'immediate',
      priority: 'critical',
      title: 'MÃºltiples anomalÃ­as de alta confianza detectadas',
      description: `${metrics.anomaly_detection.high_confidence_anomalies} anomalÃ­as requieren revisiÃ³n inmediata`,
      impact: 'Posible compromiso de seguridad',
      effort: 'high',
      category: 'response',
      implementation_steps: ['Revisar anomalÃ­as crÃ­ticas', 'Investigar usuarios afectados', 'Implementar medidas de contenciÃ³n', 'Notificar al equipo de seguridad'],
      estimated_completion: '1-2 horas'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1ophqjro1g().b[18][1]++;
  }
  cov_1ophqjro1g().s[119]++;
  return recommendations;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,