{"version":3,"names":["cov_2jmf26t0zl","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","ProductImportSchema","_zod","z","object","name","string","min","description","optional","price","number","stock","int","category","brand","sku","is_active","boolean","is_featured","parseCSV","csvText","lines","trim","split","length","b","Error","headers","map","h","replace","rows","i","values","v","row","forEach","header","index","push","normalizeProductData","nombre","descripcion","parseFloat","precio","parseInt","cantidad","categoria","marca","codigo","activo","destacado","findOrCreateCategory","categoryName","data","existingCategory","error","searchError","from","select","ilike","single","id","newCategory","createError","insert","slug","toLowerCase","created_at","Date","toISOString","updated_at","message","request","session","_config","auth","user","_server","NextResponse","json","status","formData","file","get","type","endsWith","text","parseError","details","results","imported_count","failed_count","errors","rowNumber","normalizedData","validationResult","safeParse","success","e","join","productData","categoryId","categoryError","baseSlug","now","Math","random","toString","substr","product","category_id","images","console","log","total_rows","imported","failed","user_id","importInfo","max_products_per_import","supported_formats","required_columns","optional_columns","example_csv"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\import\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: IMPORTACIÓN DE PRODUCTOS CSV\r\n// Ruta: /api/admin/products/import\r\n// Descripción: Importación masiva de productos desde CSV\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nconst ProductImportSchema = z.object({\r\n  name: z.string().min(1, 'Nombre es requerido'),\r\n  description: z.string().optional(),\r\n  price: z.number().min(0, 'Precio debe ser positivo'),\r\n  stock: z.number().int().min(0, 'Stock debe ser un número entero positivo'),\r\n  category: z.string().min(1, 'Categoría es requerida'),\r\n  brand: z.string().optional(),\r\n  sku: z.string().optional(),\r\n  is_active: z.boolean().optional(),\r\n  is_featured: z.boolean().optional()\r\n});\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction parseCSV(csvText: string): any[] {\r\n  const lines = csvText.trim().split('\\n');\r\n  if (lines.length < 2) {\r\n    throw new Error('El archivo CSV debe tener al menos una fila de encabezados y una fila de datos');\r\n  }\r\n\r\n  const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\r\n  const rows = [];\r\n\r\n  for (let i = 1; i < lines.length; i++) {\r\n    const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\r\n    const row: any = {};\r\n    \r\n    headers.forEach((header, index) => {\r\n      row[header] = values[index] || '';\r\n    });\r\n    \r\n    rows.push(row);\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nfunction normalizeProductData(row: any): any {\r\n  return {\r\n    name: row.nombre || row.name || '',\r\n    description: row.descripcion || row.description || '',\r\n    price: parseFloat(row.precio || row.price || '0'),\r\n    stock: parseInt(row.stock || row.cantidad || '0'),\r\n    category: row.categoria || row.category || '',\r\n    brand: row.marca || row.brand || '',\r\n    sku: row.sku || row.codigo || '',\r\n    is_active: row.activo === 'true' || row.is_active === 'true' || true,\r\n    is_featured: row.destacado === 'true' || row.is_featured === 'true' || false\r\n  };\r\n}\r\n\r\nasync function findOrCreateCategory(categoryName: string): Promise<number> {\r\n  // Buscar categoría existente\r\n  const { data: existingCategory, error: searchError } = await supabase\r\n    .from('categories')\r\n    .select('id')\r\n    .ilike('name', categoryName)\r\n    .single();\r\n\r\n  if (existingCategory && !searchError) {\r\n    return existingCategory.id;\r\n  }\r\n\r\n  // Crear nueva categoría\r\n  const { data: newCategory, error: createError } = await supabase\r\n    .from('categories')\r\n    .insert({\r\n      name: categoryName,\r\n      slug: categoryName.toLowerCase().replace(/\\s+/g, '-'),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .select('id')\r\n    .single();\r\n\r\n  if (createError) {\r\n    throw new Error(`Error creando categoría \"${categoryName}\": ${createError.message}`);\r\n  }\r\n\r\n  return newCategory.id;\r\n}\r\n\r\n// =====================================================\r\n// HANDLER POST - IMPORTAR PRODUCTOS\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener archivo del FormData\r\n    const formData = await request.formData();\r\n    const file = formData.get('file') as File;\r\n\r\n    if (!file) {\r\n      return NextResponse.json(\r\n        { error: 'No se proporcionó archivo' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {\r\n      return NextResponse.json(\r\n        { error: 'El archivo debe ser un CSV' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Leer contenido del archivo\r\n    const csvText = await file.text();\r\n    \r\n    // Parsear CSV\r\n    let rows;\r\n    try {\r\n      rows = parseCSV(csvText);\r\n    } catch (parseError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Error parseando CSV',\r\n          details: parseError instanceof Error ? parseError.message : 'Error desconocido'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'El archivo CSV está vacío' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (rows.length > 1000) {\r\n      return NextResponse.json(\r\n        { error: 'Máximo 1000 productos por importación' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Procesar productos\r\n    const results = {\r\n      imported_count: 0,\r\n      failed_count: 0,\r\n      errors: [] as Array<{ row: number; error: string; data?: any }>\r\n    };\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const rowNumber = i + 2; // +2 porque empezamos en fila 1 y hay header\r\n      \r\n      try {\r\n        // Normalizar datos\r\n        const normalizedData = normalizeProductData(rows[i]);\r\n        \r\n        // Validar datos\r\n        const validationResult = ProductImportSchema.safeParse(normalizedData);\r\n        if (!validationResult.success) {\r\n          results.errors.push({\r\n            row: rowNumber,\r\n            error: `Datos inválidos: ${validationResult.error.errors.map(e => e.message).join(', ')}`,\r\n            data: normalizedData\r\n          });\r\n          results.failed_count++;\r\n          continue;\r\n        }\r\n\r\n        const productData = validationResult.data;\r\n\r\n        // Buscar o crear categoría\r\n        let categoryId;\r\n        try {\r\n          categoryId = await findOrCreateCategory(productData.category);\r\n        } catch (categoryError) {\r\n          results.errors.push({\r\n            row: rowNumber,\r\n            error: `Error con categoría: ${categoryError instanceof Error ? categoryError.message : 'Error desconocido'}`,\r\n            data: productData\r\n          });\r\n          results.failed_count++;\r\n          continue;\r\n        }\r\n\r\n        // Generar slug único\r\n        const baseSlug = productData.name\r\n          .toLowerCase()\r\n          .replace(/[^a-z0-9\\s-]/g, '')\r\n          .replace(/\\s+/g, '-')\r\n          .replace(/-+/g, '-')\r\n          .trim();\r\n        \r\n        const slug = `${baseSlug}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\r\n\r\n        // Crear producto\r\n        const { data: product, error: createError } = await supabase\r\n          .from('products')\r\n          .insert({\r\n            name: productData.name,\r\n            slug: slug,\r\n            description: productData.description || '',\r\n            price: productData.price,\r\n            stock: productData.stock,\r\n            category_id: categoryId,\r\n            brand: productData.brand || '',\r\n            sku: productData.sku || '',\r\n            is_active: productData.is_active !== false,\r\n            is_featured: productData.is_featured === true,\r\n            images: {},\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select('id')\r\n          .single();\r\n\r\n        if (createError) {\r\n          results.errors.push({\r\n            row: rowNumber,\r\n            error: `Error creando producto: ${createError.message}`,\r\n            data: productData\r\n          });\r\n          results.failed_count++;\r\n          continue;\r\n        }\r\n\r\n        results.imported_count++;\r\n\r\n      } catch (error) {\r\n        results.errors.push({\r\n          row: rowNumber,\r\n          error: `Error inesperado: ${error instanceof Error ? error.message : 'Error desconocido'}`,\r\n          data: rows[i]\r\n        });\r\n        results.failed_count++;\r\n      }\r\n    }\r\n\r\n    // Log del resultado\r\n    console.log('✅ Importación completada:', {\r\n      total_rows: rows.length,\r\n      imported: results.imported_count,\r\n      failed: results.failed_count,\r\n      user_id: session.user.id\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Importación completada: ${results.imported_count} productos importados, ${results.failed_count} fallidos`,\r\n      data: results\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error en importación de productos:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - INFORMACIÓN DE IMPORTACIÓN\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const importInfo = {\r\n      max_products_per_import: 1000,\r\n      supported_formats: ['CSV'],\r\n      required_columns: ['nombre/name', 'precio/price', 'stock', 'categoria/category'],\r\n      optional_columns: ['descripcion/description', 'marca/brand', 'sku', 'activo/is_active', 'destacado/is_featured'],\r\n      example_csv: `nombre,descripcion,precio,stock,categoria,marca,sku\r\n\"Pintura Látex Blanca\",\"Pintura látex interior blanca 4L\",1500,50,\"Pinturas\",\"Alba\",\"ALB-LAT-BL-4L\"\r\n\"Brocha 2 pulgadas\",\"Brocha profesional para pintura\",250,100,\"Herramientas\",\"ProBrush\",\"PB-2IN\"`\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: importInfo\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error obteniendo información de importación:', error);\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}