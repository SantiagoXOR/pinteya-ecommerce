{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\[id]\\images\\route.ts"],"sourcesContent":["// üñºÔ∏è Enterprise Product Images API\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { composeMiddlewares } from '@/lib/api/middleware-composer'\nimport { withErrorHandler, ApiError, ValidationError, NotFoundError } from '@/lib/api/error-handler'\nimport { withApiLogging, logAdminAction } from '@/lib/api/api-logger'\nimport { withAdminAuth } from '@/lib/auth/api-auth-middleware'\nimport { withValidation } from '@/lib/validation/admin-schemas'\nimport { createClient } from '@supabase/supabase-js'\n\n// Validation schemas\nconst ImageUploadSchema = z.object({\n  file: z.any(), // File object\n  alt_text: z.string().optional(),\n  is_primary: z.boolean().default(false),\n})\n\nconst ImageUpdateSchema = z.object({\n  alt_text: z.string().optional(),\n  is_primary: z.boolean().optional(),\n  display_order: z.number().int().min(0).optional(),\n})\n\nconst ProductParamsSchema = z.object({\n  id: z.string().uuid('ID de producto inv√°lido'),\n})\n\nconst ImageParamsSchema = z.object({\n  id: z.string().uuid('ID de producto inv√°lido'),\n  imageId: z.string().uuid('ID de imagen inv√°lido'),\n})\n\n// Helper function to get Supabase Storage client\nfunction getStorageClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\n\n  return createClient(supabaseUrl, supabaseServiceKey)\n}\n\n// Helper function to validate file\nfunction validateImageFile(file: File) {\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\n  const maxSize = 5 * 1024 * 1024 // 5MB\n\n  if (!allowedTypes.includes(file.type)) {\n    throw new ValidationError('Tipo de archivo no permitido. Use JPG, PNG o WebP')\n  }\n\n  if (file.size > maxSize) {\n    throw new ValidationError('El archivo es demasiado grande. M√°ximo 5MB')\n  }\n}\n\n// Helper function to generate unique filename\nfunction generateImageFilename(originalName: string, productId: string): string {\n  const timestamp = Date.now()\n  const extension = originalName.split('.').pop()\n  const cleanName = originalName.replace(/[^a-zA-Z0-9.-]/g, '_')\n  return `products/${productId}/${timestamp}_${cleanName}`\n}\n\n// Helper function to upload image to Supabase Storage\nasync function uploadImageToStorage(file: File, filename: string) {\n  const supabase = getStorageClient()\n\n  const { data, error } = await supabase.storage.from('product-images').upload(filename, file, {\n    cacheControl: '3600',\n    upsert: false,\n  })\n\n  if (error) {\n    throw new ApiError('Error al subir imagen', 500, 'STORAGE_ERROR', error)\n  }\n\n  // Get public URL\n  const { data: urlData } = supabase.storage.from('product-images').getPublicUrl(filename)\n\n  return {\n    path: data.path,\n    url: urlData.publicUrl,\n  }\n}\n\n// Helper function to delete image from storage\nasync function deleteImageFromStorage(path: string) {\n  const supabase = getStorageClient()\n\n  const { error } = await supabase.storage.from('product-images').remove([path])\n\n  if (error) {\n    console.warn('Error deleting image from storage:', error)\n    // Don't throw error, just log warning\n  }\n}\n\n/**\n * POST /api/admin/products/[id]/images\n * Upload new image for product\n */\nconst postHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase, user } = request as any\n  const productId = params.id\n\n  // Validate params\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId })\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inv√°lido', paramsValidation.error.errors)\n  }\n\n  // Check if product exists\n  const { data: product, error: productError } = await supabase\n    .from('products')\n    .select('id, name')\n    .eq('id', productId)\n    .single()\n\n  if (productError || !product) {\n    throw new NotFoundError('Producto')\n  }\n\n  // Parse form data\n  const formData = await request.formData()\n  const file = formData.get('file') as File\n  const altText = formData.get('alt_text') as string\n  const isPrimary = formData.get('is_primary') === 'true'\n\n  if (!file) {\n    throw new ValidationError('No se proporcion√≥ archivo')\n  }\n\n  // Validate file\n  validateImageFile(file)\n\n  // Generate filename and upload\n  const filename = generateImageFilename(file.name, productId)\n  const uploadResult = await uploadImageToStorage(file, filename)\n\n  // Save image record to database\n  const { data: imageRecord, error: dbError } = await supabase\n    .from('product_images')\n    .insert({\n      product_id: productId,\n      url: uploadResult.url,\n      storage_path: uploadResult.path,\n      alt_text: altText || null,\n      is_primary: isPrimary,\n      file_size: file.size,\n      file_type: file.type,\n      original_filename: file.name,\n      created_at: new Date().toISOString(),\n    })\n    .select()\n    .single()\n\n  if (dbError) {\n    // Clean up uploaded file if database insert fails\n    await deleteImageFromStorage(uploadResult.path)\n    throw new ApiError('Error al guardar imagen en base de datos', 500, 'DATABASE_ERROR', dbError)\n  }\n\n  // If this is set as primary, update other images\n  if (isPrimary) {\n    await supabase\n      .from('product_images')\n      .update({ is_primary: false })\n      .eq('product_id', productId)\n      .neq('id', imageRecord.id)\n  }\n\n  // Log action\n  await logAdminAction(user.id, 'CREATE', 'product_image', imageRecord.id, null, imageRecord)\n\n  return NextResponse.json(\n    {\n      data: imageRecord,\n      success: true,\n      message: 'Imagen subida exitosamente',\n    },\n    { status: 201 }\n  )\n}\n\n/**\n * GET /api/admin/products/[id]/images\n * Get all images for product\n */\nconst getHandler = async (request: NextRequest, { params }: { params: { id: string } }) => {\n  const { supabase } = request as any\n  const productId = params.id\n\n  // Validate params\n  const paramsValidation = ProductParamsSchema.safeParse({ id: productId })\n  if (!paramsValidation.success) {\n    throw new ValidationError('ID de producto inv√°lido', paramsValidation.error.errors)\n  }\n\n  // Get images\n  const { data: images, error } = await supabase\n    .from('product_images')\n    .select('*')\n    .eq('product_id', productId)\n    .order('display_order', { ascending: true })\n    .order('created_at', { ascending: true })\n\n  if (error) {\n    throw new ApiError('Error al obtener im√°genes', 500, 'DATABASE_ERROR', error)\n  }\n\n  return NextResponse.json({\n    data: images,\n    success: true,\n    message: 'Im√°genes obtenidas exitosamente',\n  })\n}\n\n// Apply enterprise middlewares and export handlers\nexport const GET = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_read'])\n)(getHandler)\n\nexport const POST = composeMiddlewares(\n  withErrorHandler,\n  withApiLogging,\n  withAdminAuth(['products_update'])\n)(postHandler)\n"],"names":["GET","POST","ImageUploadSchema","z","object","file","any","alt_text","string","optional","is_primary","boolean","default","ImageUpdateSchema","display_order","number","int","min","ProductParamsSchema","id","uuid","ImageParamsSchema","imageId","getStorageClient","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","createClient","validateImageFile","allowedTypes","maxSize","includes","type","ValidationError","size","generateImageFilename","originalName","productId","timestamp","Date","now","extension","split","pop","cleanName","replace","uploadImageToStorage","filename","supabase","data","error","storage","from","upload","cacheControl","upsert","ApiError","urlData","getPublicUrl","path","url","publicUrl","deleteImageFromStorage","remove","console","warn","postHandler","request","params","user","paramsValidation","safeParse","success","errors","product","productError","select","eq","single","NotFoundError","formData","get","altText","isPrimary","name","uploadResult","imageRecord","dbError","insert","product_id","storage_path","file_size","file_type","original_filename","created_at","toISOString","update","neq","logAdminAction","NextResponse","json","message","status","getHandler","images","order","ascending","composeMiddlewares","withErrorHandler","withApiLogging","withAdminAuth"],"mappings":"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"}