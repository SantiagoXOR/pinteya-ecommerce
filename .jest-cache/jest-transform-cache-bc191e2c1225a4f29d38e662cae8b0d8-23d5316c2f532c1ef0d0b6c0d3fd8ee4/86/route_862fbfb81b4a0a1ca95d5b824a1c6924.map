{"version":3,"names":["cov_2b6bzihqo","actualCoverage","s","DELETE","f","GET","POST","runtime","request","batch","json","b","events","Array","isArray","length","_server","NextResponse","error","status","supabase","_supabase","getSupabaseClient","setImmediate","processEventsBatch","console","success","processed","timestamp","Date","now","headers","insertPromises","map","event","rpc","p_event_name","p_category","category","p_action","action","p_label","label","p_value","value","p_user_id","userId","p_session_id","sessionId","p_page","page","p_user_agent","userAgent","results","Promise","allSettled","successful","filter","r","failed","log","errors","reason","searchParams","URL","url","startDate","get","endDate","eventType","limit","parseInt","query","from","select","count","order","ascending","range","gte","lte","eq","data","pagination","total","totalPages","Math","ceil","daysOld","dryRun","cutoffDate","setDate","getDate","cutoffTimestamp","floor","getTime","head","lt","wouldDelete","toISOString","delete","deleted","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\analytics\\events\\optimized\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API OPTIMIZADA PARA ANALYTICS - PINTEYA E-COMMERCE\r\n * Procesamiento en lotes con inserción masiva optimizada\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\ninterface OptimizedAnalyticsEvent {\r\n  event: string;\r\n  category: string;\r\n  action: string;\r\n  label?: string;\r\n  value?: number;\r\n  userId?: string;\r\n  sessionId: string;\r\n  page: string;\r\n  userAgent?: string;\r\n}\r\n\r\ninterface AnalyticsBatch {\r\n  events: OptimizedAnalyticsEvent[];\r\n  timestamp: number;\r\n  compressed: boolean;\r\n}\r\n\r\n/**\r\n * POST /api/analytics/events/optimized\r\n * Procesar lotes de eventos de analytics de forma optimizada\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const batch: AnalyticsBatch = await request.json();\r\n\r\n    if (!batch.events || !Array.isArray(batch.events) || batch.events.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Batch de eventos inválido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Limitar tamaño del batch para evitar timeouts\r\n    if (batch.events.length > 100) {\r\n      return NextResponse.json(\r\n        { error: 'Batch demasiado grande (máximo 100 eventos)' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Procesar eventos de forma asíncrona para respuesta rápida\r\n    setImmediate(async () => {\r\n      try {\r\n        await processEventsBatch(batch.events, supabase);\r\n      } catch (error) {\r\n        console.error('Error procesando batch de analytics (async):', error);\r\n      }\r\n    });\r\n\r\n    // Respuesta inmediata\r\n    return NextResponse.json(\r\n      { \r\n        success: true, \r\n        processed: batch.events.length,\r\n        timestamp: Date.now()\r\n      },\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Error en API de analytics optimizada:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Procesar batch de eventos usando función optimizada de Supabase\r\n */\r\nasync function processEventsBatch(events: OptimizedAnalyticsEvent[], supabase: any) {\r\n  try {\r\n    // Preparar datos para inserción masiva usando función optimizada\r\n    const insertPromises = events.map(event => \r\n      supabase.rpc('insert_analytics_event_optimized', {\r\n        p_event_name: event.event,\r\n        p_category: event.category,\r\n        p_action: event.action,\r\n        p_label: event.label || null,\r\n        p_value: event.value || null,\r\n        p_user_id: event.userId || null,\r\n        p_session_id: event.sessionId,\r\n        p_page: event.page,\r\n        p_user_agent: event.userAgent || null\r\n      })\r\n    );\r\n\r\n    // Ejecutar todas las inserciones en paralelo\r\n    const results = await Promise.allSettled(insertPromises);\r\n\r\n    // Contar éxitos y errores\r\n    const successful = results.filter(r => r.status === 'fulfilled').length;\r\n    const failed = results.filter(r => r.status === 'rejected').length;\r\n\r\n    console.log(`Analytics batch processed: ${successful} successful, ${failed} failed`);\r\n\r\n    // Log errores para debugging\r\n    if (failed > 0) {\r\n      const errors = results\r\n        .filter(r => r.status === 'rejected')\r\n        .map(r => (r as PromiseRejectedResult).reason);\r\n      \r\n      console.error('Analytics batch errors:', errors);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en processEventsBatch:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/analytics/events/optimized\r\n * Obtener eventos optimizados con filtros\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const startDate = searchParams.get('startDate');\r\n    const endDate = searchParams.get('endDate');\r\n    const eventType = searchParams.get('eventType');\r\n    const category = searchParams.get('category');\r\n    const limit = parseInt(searchParams.get('limit') || '100');\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Usar vista optimizada para compatibilidad\r\n    let query = supabase\r\n      .from('analytics_events_view')\r\n      .select('*', { count: 'exact' })\r\n      .order('created_at', { ascending: false })\r\n      .range((page - 1) * limit, page * limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (startDate) {\r\n      query = query.gte('created_at', startDate);\r\n    }\r\n\r\n    if (endDate) {\r\n      query = query.lte('created_at', endDate);\r\n    }\r\n\r\n    if (eventType) {\r\n      query = query.eq('event_name', eventType);\r\n    }\r\n\r\n    if (category) {\r\n      query = query.eq('category', category);\r\n    }\r\n\r\n    const { data, error, count } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error obteniendo eventos optimizados:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error obteniendo eventos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: data || [],\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: count || 0,\r\n        totalPages: Math.ceil((count || 0) / limit)\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET analytics optimizada:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/analytics/events/optimized\r\n * Limpiar eventos antiguos (solo admins)\r\n */\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const daysOld = parseInt(searchParams.get('daysOld') || '30');\r\n    const dryRun = searchParams.get('dryRun') === 'true';\r\n\r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { error: 'Servicio administrativo no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\r\n    const cutoffTimestamp = Math.floor(cutoffDate.getTime() / 1000);\r\n\r\n    if (dryRun) {\r\n      // Solo contar cuántos registros se eliminarían\r\n      const { count, error } = await supabase\r\n        .from('analytics_events_optimized')\r\n        .select('*', { count: 'exact', head: true })\r\n        .lt('created_at', cutoffTimestamp);\r\n\r\n      if (error) {\r\n        console.error('Error en dry run de limpieza:', error);\r\n        return NextResponse.json(\r\n          { error: 'Error en simulación de limpieza' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        dryRun: true,\r\n        wouldDelete: count || 0,\r\n        cutoffDate: cutoffDate.toISOString()\r\n      });\r\n    }\r\n\r\n    // Eliminar registros antiguos\r\n    const { error } = await supabase\r\n      .from('analytics_events_optimized')\r\n      .delete()\r\n      .lt('created_at', cutoffTimestamp);\r\n\r\n    if (error) {\r\n      console.error('Error eliminando eventos antiguos:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error eliminando eventos antiguos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      deleted: true,\r\n      cutoffDate: cutoffDate.toISOString(),\r\n      message: `Eventos anteriores a ${daysOld} días eliminados`\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en DELETE analytics optimizada:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}