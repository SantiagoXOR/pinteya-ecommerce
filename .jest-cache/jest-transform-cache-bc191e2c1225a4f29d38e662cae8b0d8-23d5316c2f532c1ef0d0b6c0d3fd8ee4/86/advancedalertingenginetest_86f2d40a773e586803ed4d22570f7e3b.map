{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\monitoring\\advanced-alerting-engine.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS - ADVANCED ALERTING ENGINE\r\n// ===================================\r\n\r\nimport { \r\n  AdvancedAlertingEngine,\r\n  AlertType,\r\n  AlertSeverity,\r\n  AlertChannel,\r\n  AlertStatus,\r\n  advancedAlertingEngine\r\n} from '@/lib/monitoring/advanced-alerting-engine';\r\n\r\n// Mock fetch para webhooks\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock logger\r\njest.mock('@/lib/logger', () => ({\r\n  logger: {\r\n    info: jest.fn(),\r\n    warn: jest.fn(),\r\n    error: jest.fn()\r\n  },\r\n  LogCategory: {\r\n    MONITORING: 'monitoring'\r\n  }\r\n}));\r\n\r\ndescribe('AdvancedAlertingEngine', () => {\r\n  let alertingEngine: AdvancedAlertingEngine;\r\n\r\n  beforeEach(() => {\r\n    alertingEngine = AdvancedAlertingEngine.getInstance();\r\n    jest.clearAllMocks();\r\n    (global.fetch as jest.Mock).mockClear();\r\n  });\r\n\r\n  afterEach(() => {\r\n    alertingEngine.destroy();\r\n  });\r\n\r\n  describe('Singleton Pattern', () => {\r\n    it('should return the same instance', () => {\r\n      const instance1 = AdvancedAlertingEngine.getInstance();\r\n      const instance2 = AdvancedAlertingEngine.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n\r\n  describe('Channel Configuration', () => {\r\n    it('should configure Slack channel correctly', () => {\r\n      const config = {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n        }\r\n      };\r\n\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, config);\r\n\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalledWith(\r\n        'monitoring',\r\n        expect.stringContaining('Alert channel configured'),\r\n        expect.objectContaining({\r\n          channel: AlertChannel.SLACK\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should configure email channel correctly', () => {\r\n      const config = {\r\n        channel: AlertChannel.EMAIL,\r\n        enabled: true,\r\n        config: {\r\n          smtpHost: 'smtp.gmail.com',\r\n          smtpPort: 587,\r\n          smtpUser: 'alerts@pinteya.com',\r\n          smtpPassword: 'password',\r\n          recipients: ['admin@pinteya.com']\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.CRITICAL]\r\n        }\r\n      };\r\n\r\n      alertingEngine.configureChannel(AlertChannel.EMAIL, config);\r\n\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should disable channel when enabled is false', () => {\r\n      const config = {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: false,\r\n        config: {},\r\n        filters: {}\r\n      };\r\n\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, config);\r\n\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalledWith(\r\n        'monitoring',\r\n        expect.stringContaining('disabled')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Alert Creation', () => {\r\n    beforeEach(() => {\r\n      // Configurar canal de prueba\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.LOW, AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should create performance alert', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'High response time detected',\r\n        'API response time exceeded 3 seconds',\r\n        {\r\n          endpoint: '/api/products',\r\n          responseTime: 3200,\r\n          threshold: 3000\r\n        }\r\n      );\r\n\r\n      expect(alertId).toBeDefined();\r\n      expect(typeof alertId).toBe('string');\r\n      expect(global.fetch).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should create error alert', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.ERROR,\r\n        AlertSeverity.CRITICAL,\r\n        'Critical error in payment processing',\r\n        'Payment gateway returned 500 error',\r\n        {\r\n          endpoint: '/api/payments',\r\n          errorCode: 500,\r\n          errorMessage: 'Internal server error'\r\n        }\r\n      );\r\n\r\n      expect(alertId).toBeDefined();\r\n      expect(global.fetch).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should create security alert', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.SECURITY,\r\n        AlertSeverity.CRITICAL,\r\n        'Suspicious login activity',\r\n        'Multiple failed login attempts from same IP',\r\n        {\r\n          ip: '192.168.1.100',\r\n          attempts: 10,\r\n          timeWindow: '5 minutes'\r\n        }\r\n      );\r\n\r\n      expect(alertId).toBeDefined();\r\n      expect(global.fetch).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle alert creation failure gracefully', async () => {\r\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Test alert',\r\n        'Test description',\r\n        {}\r\n      );\r\n\r\n      expect(alertId).toBeDefined();\r\n      expect(require('@/lib/logger').logger.error).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Alert Filtering', () => {\r\n    beforeEach(() => {\r\n      // Configurar canal que solo acepta HIGH y CRITICAL\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should send alert when severity matches filter', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'High severity alert',\r\n        'This should be sent',\r\n        {}\r\n      );\r\n\r\n      expect(global.fetch).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not send alert when severity does not match filter', async () => {\r\n      await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.LOW,\r\n        'Low severity alert',\r\n        'This should not be sent',\r\n        {}\r\n      );\r\n\r\n      expect(global.fetch).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should filter by alert type', () => {\r\n      alertingEngine.configureChannel(AlertChannel.EMAIL, {\r\n        channel: AlertChannel.EMAIL,\r\n        enabled: true,\r\n        config: {\r\n          smtpHost: 'smtp.test.com',\r\n          smtpPort: 587,\r\n          smtpUser: 'test@test.com',\r\n          smtpPassword: 'password',\r\n          recipients: ['admin@test.com']\r\n        },\r\n        filters: {\r\n          types: [AlertType.SECURITY, AlertType.ERROR]\r\n        }\r\n      });\r\n\r\n      // Esta configuración debería filtrar solo alertas de seguridad y error\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Alert Deduplication', () => {\r\n    beforeEach(() => {\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.LOW, AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should deduplicate identical alerts', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      // Crear la misma alerta dos veces\r\n      const alert1 = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Duplicate alert test',\r\n        'This is a duplicate alert',\r\n        { endpoint: '/api/test' }\r\n      );\r\n\r\n      const alert2 = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Duplicate alert test',\r\n        'This is a duplicate alert',\r\n        { endpoint: '/api/test' }\r\n      );\r\n\r\n      // Solo debería haber enviado una notificación\r\n      expect(global.fetch).toHaveBeenCalledTimes(1);\r\n      expect(alert1).toBe(alert2); // Deberían ser la misma alerta\r\n    });\r\n\r\n    it('should not deduplicate different alerts', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'First alert',\r\n        'This is the first alert',\r\n        { endpoint: '/api/test1' }\r\n      );\r\n\r\n      await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Second alert',\r\n        'This is the second alert',\r\n        { endpoint: '/api/test2' }\r\n      );\r\n\r\n      // Deberían ser dos notificaciones diferentes\r\n      expect(global.fetch).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Alert Resolution', () => {\r\n    it('should resolve alert successfully', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH]\r\n        }\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Test alert for resolution',\r\n        'This alert will be resolved',\r\n        {}\r\n      );\r\n\r\n      const resolved = await alertingEngine.resolveAlert(alertId, 'Issue fixed');\r\n\r\n      expect(resolved).toBe(true);\r\n      expect(global.fetch).toHaveBeenCalledTimes(2); // Create + resolve\r\n    });\r\n\r\n    it('should return false for non-existent alert', async () => {\r\n      const resolved = await alertingEngine.resolveAlert('non-existent-id', 'Test');\r\n      expect(resolved).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Alert Statistics', () => {\r\n    beforeEach(() => {\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.LOW, AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should return correct statistics', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      // Crear varias alertas\r\n      await alertingEngine.createAlert(AlertType.PERFORMANCE, AlertSeverity.HIGH, 'Alert 1', 'Description 1', {});\r\n      await alertingEngine.createAlert(AlertType.ERROR, AlertSeverity.CRITICAL, 'Alert 2', 'Description 2', {});\r\n      await alertingEngine.createAlert(AlertType.SECURITY, AlertSeverity.MEDIUM, 'Alert 3', 'Description 3', {});\r\n\r\n      const stats = alertingEngine.getAlertStats();\r\n\r\n      expect(stats.totalAlerts).toBe(3);\r\n      expect(stats.activeAlerts).toBe(3);\r\n      expect(stats.resolvedAlerts).toBe(0);\r\n      expect(stats.alertsByType[AlertType.PERFORMANCE]).toBe(1);\r\n      expect(stats.alertsByType[AlertType.ERROR]).toBe(1);\r\n      expect(stats.alertsByType[AlertType.SECURITY]).toBe(1);\r\n      expect(stats.alertsBySeverity[AlertSeverity.HIGH]).toBe(1);\r\n      expect(stats.alertsBySeverity[AlertSeverity.CRITICAL]).toBe(1);\r\n      expect(stats.alertsBySeverity[AlertSeverity.MEDIUM]).toBe(1);\r\n    });\r\n\r\n    it('should update statistics after resolution', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Test alert',\r\n        'Test description',\r\n        {}\r\n      );\r\n\r\n      await alertingEngine.resolveAlert(alertId, 'Resolved');\r\n\r\n      const stats = alertingEngine.getAlertStats();\r\n\r\n      expect(stats.totalAlerts).toBe(1);\r\n      expect(stats.activeAlerts).toBe(0);\r\n      expect(stats.resolvedAlerts).toBe(1);\r\n    });\r\n  });\r\n\r\n  describe('Rate Limiting', () => {\r\n    beforeEach(() => {\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH]\r\n        },\r\n        rateLimiting: {\r\n          maxAlertsPerMinute: 2,\r\n          maxAlertsPerHour: 10\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should respect rate limiting', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      // Crear 3 alertas rápidamente (límite es 2 por minuto)\r\n      await alertingEngine.createAlert(AlertType.PERFORMANCE, AlertSeverity.HIGH, 'Alert 1', 'Description 1', {});\r\n      await alertingEngine.createAlert(AlertType.PERFORMANCE, AlertSeverity.HIGH, 'Alert 2', 'Description 2', {});\r\n      await alertingEngine.createAlert(AlertType.PERFORMANCE, AlertSeverity.HIGH, 'Alert 3', 'Description 3', {});\r\n\r\n      // Solo deberían haberse enviado 2 notificaciones\r\n      expect(global.fetch).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Escalation', () => {\r\n    it('should configure escalation rules', () => {\r\n      const escalationRules = [\r\n        {\r\n          level: 1,\r\n          delay: 300000, // 5 minutos\r\n          channels: [AlertChannel.SLACK]\r\n        },\r\n        {\r\n          level: 2,\r\n          delay: 900000, // 15 minutos\r\n          channels: [AlertChannel.EMAIL]\r\n        },\r\n        {\r\n          level: 3,\r\n          delay: 1800000, // 30 minutos\r\n          channels: [AlertChannel.SMS]\r\n        }\r\n      ];\r\n\r\n      alertingEngine.configureEscalation(escalationRules);\r\n\r\n      expect(require('@/lib/logger').logger.info).toHaveBeenCalledWith(\r\n        'monitoring',\r\n        'Alert escalation rules configured',\r\n        expect.objectContaining({\r\n          levels: 3\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Multiple Channels', () => {\r\n    it('should send to multiple configured channels', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValue({\r\n        ok: true,\r\n        status: 200\r\n      });\r\n\r\n      // Configurar múltiples canales\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH]\r\n        }\r\n      });\r\n\r\n      alertingEngine.configureChannel(AlertChannel.WEBHOOK, {\r\n        channel: AlertChannel.WEBHOOK,\r\n        enabled: true,\r\n        config: {\r\n          url: 'https://api.example.com/alerts',\r\n          headers: { 'Authorization': 'Bearer token' }\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH]\r\n        }\r\n      });\r\n\r\n      await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Multi-channel alert',\r\n        'This should go to multiple channels',\r\n        {}\r\n      );\r\n\r\n      // Debería haber enviado a ambos canales\r\n      expect(global.fetch).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle channel configuration errors', () => {\r\n      expect(() => {\r\n        alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n          channel: AlertChannel.SLACK,\r\n          enabled: true,\r\n          config: {}, // Configuración incompleta\r\n          filters: {}\r\n        });\r\n      }).not.toThrow();\r\n\r\n      expect(require('@/lib/logger').logger.error).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle notification failures gracefully', async () => {\r\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\r\n\r\n      alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n        channel: AlertChannel.SLACK,\r\n        enabled: true,\r\n        config: {\r\n          webhookUrl: 'https://hooks.slack.com/test',\r\n          slackChannel: '#alerts'\r\n        },\r\n        filters: {\r\n          severities: [AlertSeverity.HIGH]\r\n        }\r\n      });\r\n\r\n      const alertId = await alertingEngine.createAlert(\r\n        AlertType.PERFORMANCE,\r\n        AlertSeverity.HIGH,\r\n        'Test alert',\r\n        'Test description',\r\n        {}\r\n      );\r\n\r\n      expect(alertId).toBeDefined();\r\n      expect(require('@/lib/logger').logger.error).toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('AdvancedAlertingEngine Integration', () => {\r\n  let alertingEngine: AdvancedAlertingEngine;\r\n\r\n  beforeEach(() => {\r\n    alertingEngine = AdvancedAlertingEngine.getInstance();\r\n    jest.clearAllMocks();\r\n    (global.fetch as jest.Mock).mockClear();\r\n  });\r\n\r\n  afterEach(() => {\r\n    alertingEngine.destroy();\r\n  });\r\n\r\n  it('should handle high volume of alerts efficiently', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: true,\r\n      status: 200\r\n    });\r\n\r\n    alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n      channel: AlertChannel.SLACK,\r\n      enabled: true,\r\n      config: {\r\n        webhookUrl: 'https://hooks.slack.com/test',\r\n        slackChannel: '#alerts'\r\n      },\r\n      filters: {\r\n        severities: [AlertSeverity.LOW, AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n      }\r\n    });\r\n\r\n    const startTime = Date.now();\r\n\r\n    // Crear 100 alertas\r\n    const promises = [];\r\n    for (let i = 0; i < 100; i++) {\r\n      promises.push(\r\n        alertingEngine.createAlert(\r\n          AlertType.PERFORMANCE,\r\n          AlertSeverity.MEDIUM,\r\n          `Alert ${i}`,\r\n          `Description ${i}`,\r\n          { index: i }\r\n        )\r\n      );\r\n    }\r\n\r\n    await Promise.all(promises);\r\n\r\n    const endTime = Date.now();\r\n    const duration = endTime - startTime;\r\n\r\n    // Debería procesar 100 alertas en menos de 2 segundos\r\n    expect(duration).toBeLessThan(2000);\r\n\r\n    const stats = alertingEngine.getAlertStats();\r\n    expect(stats.totalAlerts).toBe(100);\r\n  });\r\n\r\n  it('should maintain performance under concurrent access', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: true,\r\n      status: 200\r\n    });\r\n\r\n    alertingEngine.configureChannel(AlertChannel.SLACK, {\r\n      channel: AlertChannel.SLACK,\r\n      enabled: true,\r\n      config: {\r\n        webhookUrl: 'https://hooks.slack.com/test',\r\n        slackChannel: '#alerts'\r\n      },\r\n      filters: {\r\n        severities: [AlertSeverity.HIGH]\r\n      }\r\n    });\r\n\r\n    // Simular acceso concurrente\r\n    const promises = [];\r\n    for (let i = 0; i < 50; i++) {\r\n      promises.push(\r\n        alertingEngine.createAlert(\r\n          AlertType.PERFORMANCE,\r\n          AlertSeverity.HIGH,\r\n          `Concurrent Alert ${i}`,\r\n          `Concurrent Description ${i}`,\r\n          { concurrent: true, index: i }\r\n        )\r\n      );\r\n    }\r\n\r\n    const results = await Promise.all(promises);\r\n\r\n    // Todas las alertas deberían haberse creado exitosamente\r\n    expect(results.every(id => typeof id === 'string')).toBe(true);\r\n\r\n    const stats = alertingEngine.getAlertStats();\r\n    expect(stats.totalAlerts).toBe(50);\r\n  });\r\n});\r\n"],"names":["jest","mock","logger","info","fn","warn","error","LogCategory","MONITORING","global","fetch","describe","alertingEngine","beforeEach","AdvancedAlertingEngine","getInstance","clearAllMocks","mockClear","afterEach","destroy","it","instance1","instance2","expect","toBe","config","channel","AlertChannel","SLACK","enabled","webhookUrl","slackChannel","filters","severities","AlertSeverity","HIGH","CRITICAL","configureChannel","require","toHaveBeenCalledWith","stringContaining","objectContaining","EMAIL","smtpHost","smtpPort","smtpUser","smtpPassword","recipients","toHaveBeenCalled","LOW","MEDIUM","mockResolvedValue","ok","status","alertId","createAlert","AlertType","PERFORMANCE","endpoint","responseTime","threshold","toBeDefined","ERROR","errorCode","errorMessage","SECURITY","ip","attempts","timeWindow","mockRejectedValue","Error","not","types","alert1","alert2","toHaveBeenCalledTimes","resolved","resolveAlert","stats","getAlertStats","totalAlerts","activeAlerts","resolvedAlerts","alertsByType","alertsBySeverity","rateLimiting","maxAlertsPerMinute","maxAlertsPerHour","escalationRules","level","delay","channels","SMS","configureEscalation","levels","WEBHOOK","url","headers","toThrow","startTime","Date","now","promises","i","push","index","Promise","all","endTime","duration","toBeLessThan","concurrent","results","every","id"],"mappings":"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"}