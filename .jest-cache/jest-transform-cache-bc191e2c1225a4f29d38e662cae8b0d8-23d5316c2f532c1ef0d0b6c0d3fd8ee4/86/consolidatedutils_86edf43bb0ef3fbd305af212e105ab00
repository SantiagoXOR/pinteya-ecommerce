eee442cf138c9b5525a7527ee6f20170
// =====================================================
// UTILIDADES CONSOLIDADAS - PINTEYA E-COMMERCE
// Descripción: Funciones unificadas de formateo, validación y utilidades
// Basado en: Intl API + Zod + patrones enterprise
// =====================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addressSchema () {
        return addressSchema;
    },
    get debounce () {
        return debounce;
    },
    get dniSchema () {
        return dniSchema;
    },
    get emailSchema () {
        return emailSchema;
    },
    get formatCurrency () {
        return formatCurrency;
    },
    get formatDate () {
        return formatDate;
    },
    get formatDateRelative () {
        return formatDateRelative;
    },
    get formatDateShort () {
        return formatDateShort;
    },
    get formatDateTime () {
        return formatDateTime;
    },
    get formatNumber () {
        return formatNumber;
    },
    get formatOrderStatus () {
        return formatOrderStatus;
    },
    get formatPercentage () {
        return formatPercentage;
    },
    get formatPrice () {
        return formatPrice;
    },
    get formatRelativeTime () {
        return formatRelativeTime;
    },
    get formatShipmentStatus () {
        return formatShipmentStatus;
    },
    get formatTimeAgo () {
        return formatTimeAgo;
    },
    get isValidEmail () {
        return isValidEmail;
    },
    get phoneSchema () {
        return phoneSchema;
    },
    get sanitizeInput () {
        return sanitizeInput;
    },
    get sanitizeName () {
        return sanitizeName;
    },
    get slugify () {
        return slugify;
    },
    get throttle () {
        return throttle;
    },
    get validateDNI () {
        return validateDNI;
    },
    get validateEmail () {
        return validateEmail;
    },
    get validatePhoneNumber () {
        return validatePhoneNumber;
    }
});
const _zod = require("zod");
function formatDate(date, options) {
    try {
        const dateObj = typeof date === 'string' ? new Date(date) : date;
        if (isNaN(dateObj.getTime())) {
            return 'Fecha inválida';
        }
        // Si options es un string (patrón legacy), convertir a formato nativo
        if (typeof options === 'string') {
            const day = dateObj.getDate().toString().padStart(2, '0');
            const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
            const year = dateObj.getFullYear();
            const hours = dateObj.getHours().toString().padStart(2, '0');
            const minutes = dateObj.getMinutes().toString().padStart(2, '0');
            if (options === 'dd/MM/yyyy hh:mm') {
                return `${day}/${month}/${year} ${hours}:${minutes}`;
            }
            return `${day}/${month}/${year}`;
        }
        // Usar Intl.DateTimeFormat para mejor internacionalización
        const defaultOptions = {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            ...options
        };
        return dateObj.toLocaleDateString('es-AR', defaultOptions);
    } catch (error) {
        console.error('Error formatting date:', error);
        return 'Fecha inválida';
    }
}
function formatDateTime(date) {
    return formatDate(date, {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}
function formatDateShort(date) {
    return formatDate(date, {
        month: 'short',
        day: 'numeric'
    });
}
function formatTimeAgo(date) {
    try {
        const dateObj = typeof date === 'string' ? new Date(date) : date;
        if (isNaN(dateObj.getTime())) {
            return 'Fecha inválida';
        }
        const now = new Date();
        const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000);
        if (diffInSeconds < 60) {
            return 'hace menos de un minuto';
        }
        const diffInMinutes = Math.floor(diffInSeconds / 60);
        if (diffInMinutes < 60) {
            return `hace ${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''}`;
        }
        const diffInHours = Math.floor(diffInMinutes / 60);
        if (diffInHours < 24) {
            return `hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;
        }
        const diffInDays = Math.floor(diffInHours / 24);
        if (diffInDays < 7) {
            return `hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;
        }
        const diffInWeeks = Math.floor(diffInDays / 7);
        if (diffInWeeks < 4) {
            return `hace ${diffInWeeks} semana${diffInWeeks > 1 ? 's' : ''}`;
        }
        return formatDate(dateObj, {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
        });
    } catch (error) {
        console.error('Error formatting time ago:', error);
        return 'Fecha inválida';
    }
}
const formatDateRelative = formatTimeAgo;
const formatRelativeTime = formatTimeAgo;
function formatCurrency(amount, currency = 'ARS', options) {
    try {
        // Normalizar el amount a número
        let safeAmount;
        if (typeof amount === 'number' && !isNaN(amount) && isFinite(amount)) {
            safeAmount = amount;
        } else if (typeof amount === 'string') {
            const parsed = parseFloat(amount);
            if (!isNaN(parsed) && isFinite(parsed)) {
                safeAmount = parsed;
            } else {
                safeAmount = 0;
            }
        } else {
            safeAmount = 0;
        }
        const defaultOptions = {
            style: 'currency',
            currency: currency.toUpperCase(),
            minimumFractionDigits: 0,
            maximumFractionDigits: 2,
            ...options
        };
        return new Intl.NumberFormat('es-AR', defaultOptions).format(safeAmount);
    } catch (error) {
        console.error('Error formatting currency:', error);
        return `$${amount || 0}`;
    }
}
function formatPrice(amount) {
    return formatCurrency(amount);
}
function formatNumber(value, options) {
    try {
        const numValue = typeof value === 'string' ? parseFloat(value) : value;
        if (isNaN(numValue)) {
            return '0';
        }
        return new Intl.NumberFormat('es-AR', options).format(numValue);
    } catch (error) {
        console.error('Error formatting number:', error);
        return String(value || 0);
    }
}
function formatPercentage(value, decimals = 1) {
    try {
        return new Intl.NumberFormat('es-AR', {
            style: 'percent',
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(value / 100);
    } catch (error) {
        console.error('Error formatting percentage:', error);
        return `${value}%`;
    }
}
function validateEmail(email) {
    if (!email || typeof email !== 'string') {
        return false;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
}
function isValidEmail(email) {
    return validateEmail(email);
}
function validatePhoneNumber(phone) {
    if (!phone || typeof phone !== 'string') {
        return false;
    }
    // Formato argentino: +54 9 351 123 4567, +54 351 123-4567, 351 123 4567, etc.
    const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
    const phoneRegex = /^(\+54(9)?)?\d{10}$|^\d{10}$/;
    return phoneRegex.test(cleanPhone) && cleanPhone.length >= 10;
}
function validateDNI(dni) {
    if (!dni || typeof dni !== 'string') {
        return false;
    }
    const cleanDNI = dni.replace(/[\s\-\.]/g, '');
    const dniRegex = /^\d{8}$/;
    const cuitRegex = /^\d{11}$/;
    return dniRegex.test(cleanDNI) || cuitRegex.test(cleanDNI);
}
function sanitizeInput(input) {
    if (!input || typeof input !== 'string') {
        return '';
    }
    return input.trim().replace(/[<>]/g, '') // Remover caracteres peligrosos básicos
    .substring(0, 1000); // Limitar longitud
}
function sanitizeName(name) {
    if (!name || typeof name !== 'string') {
        return '';
    }
    return name.trim().replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\s]/g, '') // Solo letras y espacios
    .replace(/\s+/g, ' ') // Normalizar espacios
    .substring(0, 100); // Limitar longitud
}
function slugify(text) {
    if (!text || typeof text !== 'string') {
        return '';
    }
    return text.toLowerCase().trim().replace(/[áàäâ]/g, 'a').replace(/[éèëê]/g, 'e').replace(/[íìïî]/g, 'i').replace(/[óòöô]/g, 'o').replace(/[úùüû]/g, 'u').replace(/ñ/g, 'n').replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
}
function debounce(func, delay) {
    let timeoutId;
    return (...args)=>{
        clearTimeout(timeoutId);
        timeoutId = setTimeout(()=>func(...args), delay);
    };
}
function throttle(func, limit) {
    let inThrottle;
    return (...args)=>{
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}
const addressSchema = _zod.z.object({
    street: _zod.z.string().min(1, 'La calle es requerida'),
    number: _zod.z.string().min(1, 'El número es requerido'),
    apartment: _zod.z.string().optional(),
    neighborhood: _zod.z.string().min(1, 'El barrio es requerido'),
    city: _zod.z.string().min(1, 'La ciudad es requerida'),
    state: _zod.z.string().min(1, 'La provincia es requerida'),
    postal_code: _zod.z.string().min(4, 'El código postal debe tener al menos 4 dígitos'),
    country: _zod.z.string().default('AR'),
    latitude: _zod.z.number().optional(),
    longitude: _zod.z.number().optional(),
    reference: _zod.z.string().optional()
});
const emailSchema = _zod.z.string().email('Email inválido');
const phoneSchema = _zod.z.string().refine(validatePhoneNumber, 'Teléfono inválido');
const dniSchema = _zod.z.string().refine(validateDNI, 'DNI/CUIT inválido');
function formatShipmentStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'secondary'
        },
        confirmed: {
            label: 'Confirmado',
            color: 'default'
        },
        picked_up: {
            label: 'Retirado',
            color: 'default'
        },
        in_transit: {
            label: 'En Tránsito',
            color: 'default'
        },
        out_for_delivery: {
            label: 'En Reparto',
            color: 'default'
        },
        delivered: {
            label: 'Entregado',
            color: 'default'
        },
        exception: {
            label: 'Excepción',
            color: 'destructive'
        },
        cancelled: {
            label: 'Cancelado',
            color: 'destructive'
        },
        returned: {
            label: 'Devuelto',
            color: 'outline'
        }
    };
    return statusMap[status] || {
        label: status,
        color: 'outline'
    };
}
function formatOrderStatus(status) {
    const statusMap = {
        pending: {
            label: 'Pendiente',
            color: 'secondary'
        },
        confirmed: {
            label: 'Confirmado',
            color: 'default'
        },
        processing: {
            label: 'Procesando',
            color: 'default'
        },
        shipped: {
            label: 'Enviado',
            color: 'default'
        },
        delivered: {
            label: 'Entregado',
            color: 'default'
        },
        cancelled: {
            label: 'Cancelado',
            color: 'destructive'
        },
        refunded: {
            label: 'Reembolsado',
            color: 'outline'
        },
        returned: {
            label: 'Devuelto',
            color: 'outline'
        }
    };
    return statusMap[status] || {
        label: status,
        color: 'outline'
    };
}

//# sourceMappingURL=data:application/json;base64,