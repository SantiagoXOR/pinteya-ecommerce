{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useTrendingSearches.ts"],"sourcesContent":["// ===================================\n// HOOK: useTrendingSearches - B√∫squedas populares/trending\n// ===================================\n\nimport { useQuery } from '@tanstack/react-query'\nimport { searchQueryKeys } from '@/lib/query-client'\nimport { TrendingSearch, TrendingSearchesResponse } from '@/app/api/search/trending/route'\nimport { ApiResponse } from '@/types/api'\n\nexport interface UseTrendingSearchesOptions {\n  /** N√∫mero m√°ximo de b√∫squedas trending a obtener */\n  limit?: number\n  /** N√∫mero de d√≠as hacia atr√°s para calcular trending */\n  days?: number\n  /** Filtrar por categor√≠a espec√≠fica */\n  category?: string\n  /** Habilitar/deshabilitar la query */\n  enabled?: boolean\n  /** Intervalo de refetch en milisegundos */\n  refetchInterval?: number\n}\n\nexport interface UseTrendingSearchesReturn {\n  /** B√∫squedas trending */\n  trendingSearches: TrendingSearch[]\n  /** Indica si est√° cargando */\n  isLoading: boolean\n  /** Indica si hay un error */\n  error: Error | null\n  /** Funci√≥n para refrescar los datos */\n  refetch: () => void\n  /** Indica si los datos est√°n obsoletos */\n  isStale: boolean\n  /** Timestamp de la √∫ltima actualizaci√≥n */\n  lastUpdated: string | null\n  /** Funci√≥n para registrar una b√∫squeda */\n  trackSearch: (query: string, category?: string) => Promise<void>\n}\n\n/**\n * Hook para obtener b√∫squedas trending/populares\n *\n * Obtiene las b√∫squedas m√°s populares basadas en datos reales del sistema\n * de analytics, con fallback a datos por defecto.\n */\nexport function useTrendingSearches(\n  options: UseTrendingSearchesOptions = {}\n): UseTrendingSearchesReturn {\n  const {\n    limit = 6,\n    days = 7,\n    category,\n    enabled = true,\n    refetchInterval = 5 * 60 * 1000, // 5 minutos\n  } = options\n\n  // Query para obtener b√∫squedas trending\n  const { data, isLoading, error, refetch, isStale } = useQuery({\n    queryKey: [...searchQueryKeys.trending(), 'params', { limit, days, category }],\n    queryFn: async (): Promise<TrendingSearchesResponse> => {\n      console.log('üî• useTrendingSearches: Iniciando fetch de trending searches', {\n        limit,\n        days,\n        category,\n        enabled,\n      })\n\n      const params = new URLSearchParams()\n      params.set('limit', limit.toString())\n      params.set('days', days.toString())\n\n      if (category) {\n        params.set('category', category)\n      }\n\n      const url = `/api/search/trending?${params.toString()}`\n      console.log('üî• useTrendingSearches: URL construida:', url)\n\n      try {\n        const response = await fetch(url)\n        console.log('üî• useTrendingSearches: Response status:', response.status)\n\n        if (!response.ok) {\n          console.error(\n            'üî• useTrendingSearches: Response not OK:',\n            response.status,\n            response.statusText\n          )\n          throw new Error(`Error fetching trending searches: ${response.status}`)\n        }\n\n        const result: ApiResponse<TrendingSearchesResponse> = await response.json()\n        console.log('üî• useTrendingSearches: Raw API response:', result)\n\n        if (!result.success || !result.data) {\n          console.error('üî• useTrendingSearches: API response error:', result.error)\n          throw new Error(result.error || 'Error obteniendo b√∫squedas trending')\n        }\n\n        console.log('‚úÖ useTrendingSearches: Trending searches fetched successfully', {\n          count: result.data.trending.length,\n          lastUpdated: result.data.lastUpdated,\n          data: result.data.trending,\n        })\n\n        return result.data\n      } catch (fetchError) {\n        console.error('üî• useTrendingSearches: Fetch error:', fetchError)\n        throw fetchError\n      }\n    },\n    enabled,\n    refetchInterval,\n    staleTime: 2 * 60 * 1000, // 2 minutos\n    gcTime: 10 * 60 * 1000, // 10 minutos\n    retry: 2,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n  })\n\n  // Funci√≥n para registrar una b√∫squeda en analytics\n  const trackSearch = async (query: string, searchCategory?: string): Promise<void> => {\n    try {\n      const response = await fetch('/api/search/trending', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          category: searchCategory,\n          userId: null, // Se puede obtener del contexto de auth si est√° disponible\n          sessionId: `session-${Date.now()}`, // Generar session ID simple\n        }),\n      })\n\n      if (!response.ok) {\n        console.warn('‚ö†Ô∏è Error tracking search:', response.status)\n      } else {\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Error tracking search:', error)\n      // No lanzar error para no interrumpir la experiencia del usuario\n    }\n  }\n\n  const result = {\n    trendingSearches: data?.trending || [],\n    isLoading,\n    error: error as Error | null,\n    refetch,\n    isStale,\n    lastUpdated: data?.lastUpdated || null,\n    trackSearch,\n  }\n\n  console.log('üî• useTrendingSearches: Hook result:', {\n    trendingSearchesCount: result.trendingSearches.length,\n    isLoading: result.isLoading,\n    error: result.error,\n    data: data,\n    rawTrending: data?.trending,\n    enabled,\n  })\n\n  return result\n}\n\n/**\n * Hook simplificado para obtener solo las b√∫squedas trending\n */\nexport function useTrendingSearchesSimple(limit: number = 6): TrendingSearch[] {\n  const { trendingSearches } = useTrendingSearches({ limit })\n  return trendingSearches\n}\n\n/**\n * Hook para obtener b√∫squedas trending por categor√≠a\n */\nexport function useTrendingSearchesByCategory(\n  category: string,\n  limit: number = 4\n): TrendingSearch[] {\n  const { trendingSearches } = useTrendingSearches({\n    category,\n    limit,\n    refetchInterval: 10 * 60 * 1000, // 10 minutos para categor√≠as espec√≠ficas\n  })\n  return trendingSearches\n}\n\nexport default useTrendingSearches\n"],"names":["useTrendingSearches","useTrendingSearchesByCategory","useTrendingSearchesSimple","options","limit","days","category","enabled","refetchInterval","data","isLoading","error","refetch","isStale","useQuery","queryKey","searchQueryKeys","trending","queryFn","console","log","params","URLSearchParams","set","toString","url","response","fetch","status","ok","statusText","Error","result","json","success","count","length","lastUpdated","fetchError","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","trackSearch","query","searchCategory","method","headers","body","JSON","stringify","trim","userId","sessionId","Date","now","warn","trendingSearches","trendingSearchesCount","rawTrending"],"mappings":"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"}