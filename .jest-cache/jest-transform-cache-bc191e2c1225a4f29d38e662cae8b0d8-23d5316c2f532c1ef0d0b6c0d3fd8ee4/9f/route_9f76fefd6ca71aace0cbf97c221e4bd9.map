{"version":3,"names":["cov_gu0wolae1","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","searchParams","URL","url","get","date","supabase","_server1","createClient","data","driver","driverError","from","select","eq","single","query","id","gte","lte","routes","routesError","console","allDeliveries","route","shipments","Array","isArray","i","length","shipment","delivery","route_id","route_name","name","tracking_number","slice","customer_name","customer_phone","destination","address","city","postal_code","coordinates","notes","items","estimated_delivery_time","special_instructions","requires_signature","cash_on_delivery","delivery_notes","delivered_at","delivered_by","created_at","updated_at","push","sort","a","Date","getTime","stats","total","pending","filter","d","confirmed","in_transit","delivered","exception","deliveries","driver_id","body","delivery_id","signature_data","photo_evidence","location","routeError","updatedShipments","map","indexOf","updatedShipment","toISOString","delivery_location","updatedRoute","updateError","update","allDelivered","every","completed_at","success","route_completed"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\deliveries\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para gestión de entregas por parte de los drivers\r\n * GET /api/driver/deliveries - Obtener entregas asignadas\r\n * POST /api/driver/deliveries - Actualizar estado de entrega\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const status = searchParams.get('status'); // pending, in_transit, delivered, exception\r\n    const date = searchParams.get('date'); // YYYY-MM-DD\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Construir query para obtener rutas con entregas\r\n    let query = supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('driver_id', driver.id);\r\n\r\n    // Filtrar por fecha si se especifica\r\n    if (date) {\r\n      query = query\r\n        .gte('created_at', `${date}T00:00:00.000Z`)\r\n        .lte('created_at', `${date}T23:59:59.999Z`);\r\n    }\r\n\r\n    const { data: routes, error: routesError } = await query;\r\n\r\n    if (routesError) {\r\n      console.error('Error fetching routes:', routesError);\r\n      return NextResponse.json(\r\n        { error: 'Error obteniendo rutas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Extraer y procesar todas las entregas\r\n    const allDeliveries = [];\r\n    \r\n    for (const route of routes || []) {\r\n      if (route.shipments && Array.isArray(route.shipments)) {\r\n        for (let i = 0; i < route.shipments.length; i++) {\r\n          const shipment = route.shipments[i];\r\n          \r\n          // Filtrar por estado si se especifica\r\n          if (status && shipment.status !== status) {\r\n            continue;\r\n          }\r\n\r\n          const delivery = {\r\n            id: shipment.id || `${route.id}-${i}`,\r\n            route_id: route.id,\r\n            route_name: route.name,\r\n            tracking_number: shipment.tracking_number || `TRK-${route.id.slice(-6)}-${i + 1}`,\r\n            customer_name: shipment.customer_name || `Cliente ${i + 1}`,\r\n            customer_phone: shipment.customer_phone,\r\n            destination: {\r\n              address: shipment.destination?.address || `Dirección ${i + 1}`,\r\n              city: shipment.destination?.city || 'Buenos Aires',\r\n              postal_code: shipment.destination?.postal_code || '1000',\r\n              coordinates: shipment.destination?.coordinates,\r\n              notes: shipment.destination?.notes\r\n            },\r\n            items: shipment.items || [],\r\n            status: shipment.status || 'confirmed',\r\n            estimated_delivery_time: shipment.estimated_delivery_time,\r\n            special_instructions: shipment.special_instructions,\r\n            requires_signature: shipment.requires_signature || false,\r\n            cash_on_delivery: shipment.cash_on_delivery,\r\n            delivery_notes: shipment.delivery_notes,\r\n            delivered_at: shipment.delivered_at,\r\n            delivered_by: shipment.delivered_by,\r\n            created_at: route.created_at,\r\n            updated_at: route.updated_at\r\n          };\r\n\r\n          allDeliveries.push(delivery);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Ordenar por fecha de creación (más recientes primero)\r\n    allDeliveries.sort((a, b) => \r\n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n    );\r\n\r\n    // Estadísticas\r\n    const stats = {\r\n      total: allDeliveries.length,\r\n      pending: allDeliveries.filter(d => d.status === 'pending').length,\r\n      confirmed: allDeliveries.filter(d => d.status === 'confirmed').length,\r\n      in_transit: allDeliveries.filter(d => d.status === 'in_transit').length,\r\n      delivered: allDeliveries.filter(d => d.status === 'delivered').length,\r\n      exception: allDeliveries.filter(d => d.status === 'exception').length\r\n    };\r\n\r\n    return NextResponse.json({\r\n      deliveries: allDeliveries,\r\n      stats,\r\n      driver_id: driver.id\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver deliveries API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { \r\n      delivery_id, \r\n      route_id, \r\n      status, \r\n      delivery_notes, \r\n      signature_data,\r\n      photo_evidence,\r\n      location \r\n    } = body;\r\n\r\n    // Validar parámetros requeridos\r\n    if (!delivery_id || !route_id || !status) {\r\n      return NextResponse.json(\r\n        { error: 'delivery_id, route_id y status son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, name')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener la ruta actual\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('*')\r\n      .eq('id', route_id)\r\n      .eq('driver_id', driver.id)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Actualizar el shipment específico\r\n    const updatedShipments = route.shipments.map((shipment: any) => {\r\n      if (shipment.id === delivery_id || \r\n          `${route_id}-${route.shipments.indexOf(shipment)}` === delivery_id) {\r\n        \r\n        const updatedShipment = {\r\n          ...shipment,\r\n          status,\r\n          delivery_notes,\r\n          updated_at: new Date().toISOString()\r\n        };\r\n\r\n        // Si se marca como entregado, agregar información adicional\r\n        if (status === 'delivered') {\r\n          updatedShipment.delivered_at = new Date().toISOString();\r\n          updatedShipment.delivered_by = driver.name;\r\n          updatedShipment.delivery_location = location;\r\n          \r\n          if (signature_data) {\r\n            updatedShipment.signature_data = signature_data;\r\n          }\r\n          \r\n          if (photo_evidence) {\r\n            updatedShipment.photo_evidence = photo_evidence;\r\n          }\r\n        }\r\n\r\n        return updatedShipment;\r\n      }\r\n      return shipment;\r\n    });\r\n\r\n    // Actualizar la ruta en la base de datos\r\n    const { data: updatedRoute, error: updateError } = await supabase\r\n      .from('optimized_routes')\r\n      .update({\r\n        shipments: updatedShipments,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', route_id)\r\n      .eq('driver_id', driver.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error updating delivery:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error actualizando entrega' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Verificar si todas las entregas están completadas\r\n    const allDelivered = updatedShipments.every(\r\n      (shipment: any) => shipment.status === 'delivered'\r\n    );\r\n\r\n    // Si todas las entregas están completadas, marcar la ruta como completada\r\n    if (allDelivered) {\r\n      await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString()\r\n        })\r\n        .eq('id', route_id);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      delivery_id,\r\n      status,\r\n      route_completed: allDelivered,\r\n      updated_at: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in driver delivery update API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}