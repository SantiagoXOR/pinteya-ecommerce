{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSidebar.ts"],"sourcesContent":["/**\r\n * Hook para manejar el estado y comportamiento de sidebars\r\n * Incluye manejo de eventos para cerrar con click fuera y tecla Escape\r\n */\r\n\r\nimport { useState, useCallback, useEffect, useRef } from 'react';\r\n\r\ninterface UseSidebarReturn {\r\n  isOpen: boolean;\r\n  toggle: () => void;\r\n  open: () => void;\r\n  close: () => void;\r\n}\r\n\r\n/**\r\n * Hook que maneja el estado de un sidebar con funcionalidades de apertura/cierre\r\n * Incluye event listeners para cerrar con click fuera y tecla Escape\r\n * @param initialState - Estado inicial del sidebar (default: false)\r\n * @returns objeto con isOpen, toggle, open, close\r\n */\r\nexport const useSidebar = (initialState: boolean = false): UseSidebarReturn => {\r\n  const [isOpen, setIsOpen] = useState(initialState);\r\n  const sidebarRef = useRef<HTMLElement | null>(null);\r\n\r\n  // Funciones estables con useCallback para evitar re-renders innecesarios\r\n  const open = useCallback(() => {\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  const close = useCallback(() => {\r\n    setIsOpen(false);\r\n  }, []);\r\n\r\n  const toggle = useCallback(() => {\r\n    setIsOpen(prev => !prev);\r\n  }, []);\r\n\r\n  // Manejar click fuera del sidebar\r\n  const handleClickOutside = useCallback((event: MouseEvent) => {\r\n    if (sidebarRef.current && !sidebarRef.current.contains(event.target as Node)) {\r\n      close();\r\n    }\r\n  }, [close]);\r\n\r\n  // Manejar tecla Escape\r\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\r\n    if (event.key === 'Escape') {\r\n      close();\r\n    }\r\n  }, [close]);\r\n\r\n  // Agregar/remover event listeners cuando el sidebar estÃ¡ abierto\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      // Agregar event listeners\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      document.addEventListener('keydown', handleKeyDown);\r\n\r\n      // Cleanup function\r\n      return () => {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n        document.removeEventListener('keydown', handleKeyDown);\r\n      };\r\n    }\r\n  }, [isOpen, handleClickOutside, handleKeyDown]);\r\n\r\n  return {\r\n    isOpen,\r\n    toggle,\r\n    open,\r\n    close\r\n  };\r\n};\r\n\r\nexport default useSidebar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useSidebar","initialState","isOpen","setIsOpen","useState","sidebarRef","useRef","open","useCallback","close","toggle","prev","handleClickOutside","event","current","contains","target","handleKeyDown","key","useEffect","document","addEventListener","removeEventListener"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QAuED;eAAA;;QAtDaA;eAAAA;;;uBAf4C;AAelD,MAAMA,aAAa,CAACC,eAAwB,KAAK;IACtD,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAACH;IACrC,MAAMI,aAAaC,IAAAA,aAAM,EAAqB;IAE9C,yEAAyE;IACzE,MAAMC,OAAOC,IAAAA,kBAAW,EAAC;QACvBL,UAAU;IACZ,GAAG,EAAE;IAEL,MAAMM,QAAQD,IAAAA,kBAAW,EAAC;QACxBL,UAAU;IACZ,GAAG,EAAE;IAEL,MAAMO,SAASF,IAAAA,kBAAW,EAAC;QACzBL,UAAUQ,CAAAA,OAAQ,CAACA;IACrB,GAAG,EAAE;IAEL,kCAAkC;IAClC,MAAMC,qBAAqBJ,IAAAA,kBAAW,EAAC,CAACK;QACtC,IAAIR,WAAWS,OAAO,IAAI,CAACT,WAAWS,OAAO,CAACC,QAAQ,CAACF,MAAMG,MAAM,GAAW;YAC5EP;QACF;IACF,GAAG;QAACA;KAAM;IAEV,uBAAuB;IACvB,MAAMQ,gBAAgBT,IAAAA,kBAAW,EAAC,CAACK;QACjC,IAAIA,MAAMK,GAAG,KAAK,UAAU;YAC1BT;QACF;IACF,GAAG;QAACA;KAAM;IAEV,iEAAiE;IACjEU,IAAAA,gBAAS,EAAC;QACR,IAAIjB,QAAQ;YACV,0BAA0B;YAC1BkB,SAASC,gBAAgB,CAAC,aAAaT;YACvCQ,SAASC,gBAAgB,CAAC,WAAWJ;YAErC,mBAAmB;YACnB,OAAO;gBACLG,SAASE,mBAAmB,CAAC,aAAaV;gBAC1CQ,SAASE,mBAAmB,CAAC,WAAWL;YAC1C;QACF;IACF,GAAG;QAACf;QAAQU;QAAoBK;KAAc;IAE9C,OAAO;QACLf;QACAQ;QACAH;QACAE;IACF;AACF;MAEA,WAAeT"}