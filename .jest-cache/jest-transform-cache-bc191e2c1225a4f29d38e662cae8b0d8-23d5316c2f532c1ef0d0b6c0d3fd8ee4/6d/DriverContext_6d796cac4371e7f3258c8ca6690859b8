4be554b92cd1f2ed5665dfbd9431fc03
/**
 * Contexto global para la aplicación de drivers
 * Maneja estado de ubicación, rutas asignadas y sincronización en tiempo real
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DriverProvider () {
        return DriverProvider;
    },
    get useDriver () {
        return useDriver;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("next-auth/react");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// =====================================================
// REDUCER
// =====================================================
const initialState = {
    driver: null,
    currentRoute: null,
    assignedRoutes: [],
    currentLocation: null,
    isTracking: false,
    isOnline: false,
    notifications: [],
    loading: false,
    error: null
};
function driverReducer(state, action) {
    switch(action.type){
        case 'SET_DRIVER':
            return {
                ...state,
                driver: action.payload
            };
        case 'SET_CURRENT_ROUTE':
            return {
                ...state,
                currentRoute: action.payload
            };
        case 'SET_ASSIGNED_ROUTES':
            return {
                ...state,
                assignedRoutes: action.payload
            };
        case 'UPDATE_LOCATION':
            return {
                ...state,
                currentLocation: action.payload,
                driver: state.driver ? {
                    ...state.driver,
                    current_location: action.payload
                } : null
            };
        case 'SET_TRACKING':
            return {
                ...state,
                isTracking: action.payload
            };
        case 'SET_ONLINE':
            return {
                ...state,
                isOnline: action.payload
            };
        case 'ADD_NOTIFICATION':
            return {
                ...state,
                notifications: [
                    action.payload,
                    ...state.notifications.slice(0, 9)
                ]
            };
        case 'SET_LOADING':
            return {
                ...state,
                loading: action.payload
            };
        case 'SET_ERROR':
            return {
                ...state,
                error: action.payload
            };
        case 'START_ROUTE':
            return {
                ...state,
                currentRoute: state.assignedRoutes.find((r)=>r.id === action.payload) || null,
                assignedRoutes: state.assignedRoutes.map((route)=>route.id === action.payload ? {
                        ...route,
                        status: 'active'
                    } : route)
            };
        case 'COMPLETE_ROUTE':
            return {
                ...state,
                currentRoute: null,
                assignedRoutes: state.assignedRoutes.map((route)=>route.id === action.payload ? {
                        ...route,
                        status: 'completed'
                    } : route)
            };
        default:
            return state;
    }
}
const DriverContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function DriverProvider({ children }) {
    const [state, dispatch] = (0, _react.useReducer)(driverReducer, initialState);
    const { data: session } = (0, _react1.useSession)();
    // Inicializar driver al cargar
    (0, _react.useEffect)(()=>{
        if (session?.user?.email) {
            loadDriverData();
        }
    }, [
        session
    ]);
    // Funciones del contexto
    const loadDriverData = async ()=>{
        dispatch({
            type: 'SET_LOADING',
            payload: true
        });
        try {
            const response = await fetch('/api/driver/profile');
            const data = await response.json();
            if (data.driver) {
                dispatch({
                    type: 'SET_DRIVER',
                    payload: data.driver
                });
                dispatch({
                    type: 'SET_ASSIGNED_ROUTES',
                    payload: data.routes || []
                });
            }
        } catch (error) {
            dispatch({
                type: 'SET_ERROR',
                payload: 'Error cargando datos del driver'
            });
        } finally{
            dispatch({
                type: 'SET_LOADING',
                payload: false
            });
        }
    };
    const startLocationTracking = ()=>{
        if ('geolocation' in navigator) {
            dispatch({
                type: 'SET_TRACKING',
                payload: true
            });
            // Intentar primero con alta precisión
            const tryHighAccuracy = ()=>{
                const watchId = navigator.geolocation.watchPosition((position)=>{
                    const location = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    updateDriverLocation(location);
                }, (error)=>{
                    console.warn('High accuracy geolocation failed, trying standard accuracy:', error);
                    // Si falla con alta precisión, intentar con precisión estándar
                    tryStandardAccuracy();
                }, {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 30000
                });
                window.driverLocationWatchId = watchId;
            };
            // Función de respaldo con precisión estándar
            const tryStandardAccuracy = ()=>{
                const watchId = navigator.geolocation.watchPosition((position)=>{
                    const location = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    updateDriverLocation(location);
                }, (error)=>{
                    console.error('Error tracking location:', error);
                    dispatch({
                        type: 'SET_ERROR',
                        payload: 'Error obteniendo ubicación'
                    });
                }, {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 5000
                });
                window.driverLocationWatchId = watchId;
            };
            // Iniciar con alta precisión
            tryHighAccuracy();
        }
    };
    const stopLocationTracking = ()=>{
        dispatch({
            type: 'SET_TRACKING',
            payload: false
        });
        if (window.driverLocationWatchId) {
            navigator.geolocation.clearWatch(window.driverLocationWatchId);
        }
    };
    const updateDriverLocation = async (location)=>{
        dispatch({
            type: 'UPDATE_LOCATION',
            payload: location
        });
        // Enviar ubicación al servidor
        try {
            await fetch('/api/driver/location', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    location
                })
            });
        } catch (error) {
            console.error('Error updating location:', error);
        }
    };
    const startRoute = (routeId)=>{
        dispatch({
            type: 'START_ROUTE',
            payload: routeId
        });
        startLocationTracking();
    };
    const completeRoute = (routeId)=>{
        dispatch({
            type: 'COMPLETE_ROUTE',
            payload: routeId
        });
        stopLocationTracking();
    };
    const completeDelivery = (shipmentId)=>{
        dispatch({
            type: 'COMPLETE_DELIVERY',
            payload: shipmentId
        });
    };
    const goOnline = ()=>{
        dispatch({
            type: 'SET_ONLINE',
            payload: true
        });
        startLocationTracking();
    };
    const goOffline = ()=>{
        dispatch({
            type: 'SET_ONLINE',
            payload: false
        });
        stopLocationTracking();
    };
    const contextValue = {
        state,
        dispatch,
        startLocationTracking,
        stopLocationTracking,
        updateDriverLocation,
        startRoute,
        completeRoute,
        completeDelivery,
        goOnline,
        goOffline
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(DriverContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useDriver() {
    const context = (0, _react.useContext)(DriverContext);
    if (context === undefined) {
        throw new Error('useDriver must be used within a DriverProvider');
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,