3f362ce770fe60c6d23bf36aa6200386
// ===================================
// PERFORMANCE MONITORING MIDDLEWARE
// Middleware para Next.js que captura mÃ©tricas de rendimiento
// ===================================
"use strict";

/* istanbul ignore next */
function cov_jh89j234t() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\performance-monitoring.ts";
  var hash = "e6b56c5e612b7a903d73fd49b706e3eee4545352";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\performance-monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 24
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 47
        }
      },
      "7": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "8": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 72
        }
      },
      "9": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 30
        }
      },
      "10": {
        start: {
          line: 31,
          column: 18
        },
        end: {
          line: 31,
          column: 23
        }
      },
      "11": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 40,
          column: 14
        }
      },
      "12": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 26
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 37
        }
      },
      "16": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 42,
          column: 32
        }
      },
      "17": {
        start: {
          line: 43,
          column: 37
        },
        end: {
          line: 43,
          column: 44
        }
      },
      "18": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "19": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "20": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 43
        }
      },
      "21": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 48
        }
      },
      "22": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 75
        }
      },
      "23": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 66
        }
      },
      "24": {
        start: {
          line: 55,
          column: 25
        },
        end: {
          line: 55,
          column: 47
        }
      },
      "25": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 38
        }
      },
      "26": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "27": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 29
        }
      },
      "28": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 37
        }
      },
      "29": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 20
        }
      },
      "30": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "31": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 64
        }
      },
      "32": {
        start: {
          line: 84,
          column: 40
        },
        end: {
          line: 84,
          column: 62
        }
      },
      "33": {
        start: {
          line: 88,
          column: 22
        },
        end: {
          line: 88,
          column: 60
        }
      },
      "34": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 89,
          column: 51
        }
      },
      "35": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "36": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "37": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 46
        }
      },
      "38": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 49
        }
      },
      "39": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "40": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "41": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "42": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "43": {
        start: {
          line: 125,
          column: 25
        },
        end: {
          line: 125,
          column: 81
        }
      },
      "44": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 44
        }
      },
      "45": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "46": {
        start: {
          line: 133,
          column: 55
        },
        end: {
          line: 133,
          column: 62
        }
      },
      "47": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "48": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "49": {
        start: {
          line: 144,
          column: 11
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "50": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "51": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "52": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "53": {
        start: {
          line: 158,
          column: 75
        },
        end: {
          line: 158,
          column: 173
        }
      },
      "54": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "55": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "56": {
        start: {
          line: 175,
          column: 20
        },
        end: {
          line: 175,
          column: 30
        }
      },
      "57": {
        start: {
          line: 176,
          column: 30
        },
        end: {
          line: 176,
          column: 107
        }
      },
      "58": {
        start: {
          line: 176,
          column: 76
        },
        end: {
          line: 176,
          column: 106
        }
      },
      "59": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "60": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 184,
          column: 14
        }
      },
      "61": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 186,
          column: 50
        }
      },
      "62": {
        start: {
          line: 187,
          column: 36
        },
        end: {
          line: 187,
          column: 107
        }
      },
      "63": {
        start: {
          line: 187,
          column: 67
        },
        end: {
          line: 187,
          column: 87
        }
      },
      "64": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 69
        }
      },
      "65": {
        start: {
          line: 188,
          column: 49
        },
        end: {
          line: 188,
          column: 68
        }
      },
      "66": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 55
        }
      },
      "67": {
        start: {
          line: 191,
          column: 30
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "68": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "69": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 193,
          column: 47
        }
      },
      "70": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "71": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 43
        }
      },
      "72": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 56
        }
      },
      "73": {
        start: {
          line: 199,
          column: 33
        },
        end: {
          line: 202,
          column: 64
        }
      },
      "74": {
        start: {
          line: 199,
          column: 91
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "75": {
        start: {
          line: 201,
          column: 51
        },
        end: {
          line: 201,
          column: 61
        }
      },
      "76": {
        start: {
          line: 202,
          column: 29
        },
        end: {
          line: 202,
          column: 50
        }
      },
      "77": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 204,
          column: 33
        }
      },
      "78": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "79": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 83
        }
      },
      "80": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "81": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 51
        }
      },
      "82": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "83": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 226,
          column: 76
        }
      },
      "84": {
        start: {
          line: 229,
          column: 62
        },
        end: {
          line: 229,
          column: 83
        }
      },
      "85": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 30
        }
      },
      "86": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "87": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "88": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 41
        }
      },
      "89": {
        start: {
          line: 244,
          column: 17
        },
        end: {
          line: 244,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 43
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        loc: {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 33
      },
      "5": {
        name: "performanceMonitoringMiddleware",
        decl: {
          start: {
            line: 41,
            column: 9
          },
          end: {
            line: 41,
            column: 40
          }
        },
        loc: {
          start: {
            line: 41,
            column: 50
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 41
      },
      "6": {
        name: "shouldSkipMonitoring",
        decl: {
          start: {
            line: 74,
            column: 9
          },
          end: {
            line: 74,
            column: 29
          }
        },
        loc: {
          start: {
            line: 74,
            column: 40
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 74
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 29
          },
          end: {
            line: 84,
            column: 30
          }
        },
        loc: {
          start: {
            line: 84,
            column: 40
          },
          end: {
            line: 84,
            column: 62
          }
        },
        line: 84
      },
      "8": {
        name: "getClientIP",
        decl: {
          start: {
            line: 87,
            column: 9
          },
          end: {
            line: 87,
            column: 20
          }
        },
        loc: {
          start: {
            line: 87,
            column: 30
          },
          end: {
            line: 95,
            column: 1
          }
        },
        line: 87
      },
      "9": {
        name: "trackAPIMetrics",
        decl: {
          start: {
            line: 97,
            column: 9
          },
          end: {
            line: 97,
            column: 24
          }
        },
        loc: {
          start: {
            line: 97,
            column: 34
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 97
      },
      "10": {
        name: "detectPerformanceIssues",
        decl: {
          start: {
            line: 132,
            column: 9
          },
          end: {
            line: 132,
            column: 32
          }
        },
        loc: {
          start: {
            line: 132,
            column: 42
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 132
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 158,
            column: 70
          },
          end: {
            line: 158,
            column: 71
          }
        },
        loc: {
          start: {
            line: 158,
            column: 75
          },
          end: {
            line: 158,
            column: 173
          }
        },
        line: 158
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 54
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 174
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 176,
            column: 71
          },
          end: {
            line: 176,
            column: 72
          }
        },
        loc: {
          start: {
            line: 176,
            column: 76
          },
          end: {
            line: 176,
            column: 106
          }
        },
        line: 176
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 57
          },
          end: {
            line: 187,
            column: 58
          }
        },
        loc: {
          start: {
            line: 187,
            column: 67
          },
          end: {
            line: 187,
            column: 87
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 188,
            column: 44
          },
          end: {
            line: 188,
            column: 45
          }
        },
        loc: {
          start: {
            line: 188,
            column: 49
          },
          end: {
            line: 188,
            column: 68
          }
        },
        line: 188
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 192,
            column: 30
          },
          end: {
            line: 192,
            column: 31
          }
        },
        loc: {
          start: {
            line: 192,
            column: 35
          },
          end: {
            line: 198,
            column: 9
          }
        },
        line: 192
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 199,
            column: 73
          },
          end: {
            line: 199,
            column: 74
          }
        },
        loc: {
          start: {
            line: 199,
            column: 91
          },
          end: {
            line: 202,
            column: 13
          }
        },
        line: 199
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 201,
            column: 38
          },
          end: {
            line: 201,
            column: 39
          }
        },
        loc: {
          start: {
            line: 201,
            column: 51
          },
          end: {
            line: 201,
            column: 61
          }
        },
        line: 201
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 202,
            column: 21
          },
          end: {
            line: 202,
            column: 22
          }
        },
        loc: {
          start: {
            line: 202,
            column: 29
          },
          end: {
            line: 202,
            column: 50
          }
        },
        line: 202
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 205,
            column: 23
          },
          end: {
            line: 205,
            column: 24
          }
        },
        loc: {
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 207,
            column: 9
          }
        },
        line: 205
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 39
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 217
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 226,
            column: 31
          },
          end: {
            line: 226,
            column: 32
          }
        },
        loc: {
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 76
          }
        },
        line: 226
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 229,
            column: 45
          },
          end: {
            line: 229,
            column: 46
          }
        },
        loc: {
          start: {
            line: 229,
            column: 62
          },
          end: {
            line: 229,
            column: 83
          }
        },
        line: 229
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 45
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 235
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 70
          }
        }, {
          start: {
            line: 62,
            column: 74
          },
          end: {
            line: 62,
            column: 77
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 44
          }
        }, {
          start: {
            line: 63,
            column: 48
          },
          end: {
            line: 63,
            column: 57
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 94,
            column: 11
          },
          end: {
            line: 94,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 11
          },
          end: {
            line: 94,
            column: 17
          }
        }, {
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 94,
            column: 35
          }
        }, {
          start: {
            line: 94,
            column: 39
          },
          end: {
            line: 94,
            column: 48
          }
        }],
        line: 94
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        }, {
          start: {
            line: 144,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        }],
        line: 135
      },
      "8": {
        loc: {
          start: {
            line: 144,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 11
          },
          end: {
            line: 155,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "9": {
        loc: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "10": {
        loc: {
          start: {
            line: 158,
            column: 75
          },
          end: {
            line: 158,
            column: 173
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 75
          },
          end: {
            line: 158,
            column: 90
          }
        }, {
          start: {
            line: 158,
            column: 94
          },
          end: {
            line: 158,
            column: 113
          }
        }, {
          start: {
            line: 158,
            column: 117
          },
          end: {
            line: 158,
            column: 136
          }
        }, {
          start: {
            line: 158,
            column: 140
          },
          end: {
            line: 158,
            column: 173
          }
        }],
        line: 158
      },
      "11": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 32
          },
          end: {
            line: 174,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 174,
            column: 45
          },
          end: {
            line: 174,
            column: 52
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "14": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "15": {
        loc: {
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 72
          }
        }, {
          start: {
            line: 206,
            column: 76
          },
          end: {
            line: 206,
            column: 77
          }
        }],
        line: 206
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 27
          },
          end: {
            line: 235,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 235,
            column: 43
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\middleware\\performance-monitoring.ts"],
      sourcesContent: ["// ===================================\r\n// PERFORMANCE MONITORING MIDDLEWARE\r\n// Middleware para Next.js que captura m\xE9tricas de rendimiento\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { productionMonitor } from '../config/production-monitoring';\r\n\r\n// Tipos para m\xE9tricas de API\r\ninterface APIMetrics {\r\n  method: string;\r\n  path: string;\r\n  statusCode: number;\r\n  responseTime: number;\r\n  contentLength?: number;\r\n  userAgent?: string;\r\n  ip?: string;\r\n  timestamp: number;\r\n}\r\n\r\n// Cache para almacenar m\xE9tricas temporalmente\r\nconst metricsCache = new Map<string, APIMetrics>();\r\nconst CACHE_TTL = 60000; // 1 minuto\r\n\r\n// Limpiar cache peri\xF3dicamente\r\nsetInterval(() => {\r\n  const now = Date.now();\r\n  for (const [key, metric] of metricsCache.entries()) {\r\n    if (now - metric.timestamp > CACHE_TTL) {\r\n      metricsCache.delete(key);\r\n    }\r\n  }\r\n}, CACHE_TTL);\r\n\r\nexport function performanceMonitoringMiddleware(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const { method, url, headers } = request;\r\n  const pathname = new URL(url).pathname;\r\n  \r\n  // Skip monitoring for static assets and internal routes\r\n  if (shouldSkipMonitoring(pathname)) {\r\n    return NextResponse.next();\r\n  }\r\n  \r\n  // Crear response con headers de monitoring\r\n  const response = NextResponse.next();\r\n  \r\n  // Agregar headers de performance\r\n  response.headers.set('X-Response-Time', `${Date.now() - startTime}ms`);\r\n  response.headers.set('X-Timestamp', new Date().toISOString());\r\n  \r\n  // Capturar m\xE9tricas despu\xE9s de la respuesta\r\n  const responseTime = Date.now() - startTime;\r\n  const statusCode = response.status;\r\n  \r\n  const metrics: APIMetrics = {\r\n    method,\r\n    path: pathname,\r\n    statusCode,\r\n    responseTime,\r\n    contentLength: parseInt(response.headers.get('content-length') || '0'),\r\n    userAgent: headers.get('user-agent') || undefined,\r\n    ip: getClientIP(request),\r\n    timestamp: Date.now(),\r\n  };\r\n  \r\n  // Enviar m\xE9tricas al sistema de monitoring\r\n  trackAPIMetrics(metrics);\r\n  \r\n  // Detectar problemas de rendimiento\r\n  detectPerformanceIssues(metrics);\r\n  \r\n  return response;\r\n}\r\n\r\n// Funci\xF3n para determinar si se debe omitir el monitoring\r\nfunction shouldSkipMonitoring(pathname: string): boolean {\r\n  const skipPatterns = [\r\n    /^\\/_next\\//,           // Next.js internals\r\n    /^\\/__nextjs_/,        // Next.js dev server\r\n    /\\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot)$/i, // Static assets\r\n    /^\\/api\\/health$/,     // Health check endpoint\r\n    /^\\/favicon/,          // Favicon requests\r\n    /^\\/robots\\.txt$/,     // Robots.txt\r\n    /^\\/sitemap/,          // Sitemap files\r\n  ];\r\n  \r\n  return skipPatterns.some(pattern => pattern.test(pathname));\r\n}\r\n\r\n// Funci\xF3n para obtener la IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  const cfConnectingIP = request.headers.get('cf-connecting-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  return realIP || cfConnectingIP || 'unknown';\r\n}\r\n\r\n// Funci\xF3n para trackear m\xE9tricas de API\r\nfunction trackAPIMetrics(metrics: APIMetrics) {\r\n  try {\r\n    // Enviar al sistema de monitoring de producci\xF3n\r\n    productionMonitor.trackPerformance({\r\n      name: 'api_response_time',\r\n      value: metrics.responseTime,\r\n      category: 'api',\r\n      metadata: {\r\n        method: metrics.method,\r\n        path: metrics.path,\r\n        statusCode: metrics.statusCode,\r\n        contentLength: metrics.contentLength,\r\n        userAgent: metrics.userAgent,\r\n        ip: metrics.ip,\r\n      },\r\n    });\r\n    \r\n    // Trackear errores HTTP\r\n    if (metrics.statusCode >= 400) {\r\n      productionMonitor.trackError(\r\n        new Error(`HTTP ${metrics.statusCode} on ${metrics.method} ${metrics.path}`),\r\n        {\r\n          type: 'http_error',\r\n          statusCode: metrics.statusCode,\r\n          method: metrics.method,\r\n          path: metrics.path,\r\n          responseTime: metrics.responseTime,\r\n          ip: metrics.ip,\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Almacenar en cache para an\xE1lisis\r\n    const cacheKey = `${metrics.method}:${metrics.path}:${metrics.timestamp}`;\r\n    metricsCache.set(cacheKey, metrics);\r\n    \r\n  } catch (error) {\r\n    console.error('Error tracking API metrics:', error);\r\n  }\r\n}\r\n\r\n// Funci\xF3n para detectar problemas de rendimiento\r\nfunction detectPerformanceIssues(metrics: APIMetrics) {\r\n  const { responseTime, statusCode, path, method } = metrics;\r\n  \r\n  // Detectar respuestas lentas\r\n  if (responseTime > 5000) { // 5 segundos\r\n    productionMonitor.trackError(\r\n      new Error(`Slow API response: ${responseTime}ms`),\r\n      {\r\n        type: 'performance_issue',\r\n        severity: 'high',\r\n        responseTime,\r\n        path,\r\n        method,\r\n        threshold: 5000,\r\n      }\r\n    );\r\n  } else if (responseTime > 2000) { // 2 segundos\r\n    productionMonitor.trackPerformance({\r\n      name: 'slow_api_warning',\r\n      value: responseTime,\r\n      category: 'performance_warning',\r\n      metadata: { path, method, threshold: 2000 },\r\n    });\r\n  }\r\n  \r\n  // Detectar errores frecuentes en el mismo endpoint\r\n  if (statusCode >= 500) {\r\n    const recentErrors = Array.from(metricsCache.values())\r\n      .filter(m => \r\n        m.path === path && \r\n        m.method === method && \r\n        m.statusCode >= 500 &&\r\n        Date.now() - m.timestamp < 300000 // \xDAltimos 5 minutos\r\n      );\r\n    \r\n    if (recentErrors.length >= 5) {\r\n      productionMonitor.trackError(\r\n        new Error(`High error rate detected on ${method} ${path}`),\r\n        {\r\n          type: 'high_error_rate',\r\n          severity: 'critical',\r\n          errorCount: recentErrors.length,\r\n          timeWindow: '5min',\r\n          path,\r\n          method,\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// ===================================\r\n// ANALYTICS Y REPORTING\r\n// ===================================\r\n\r\nexport class APIAnalytics {\r\n  // Obtener m\xE9tricas agregadas\r\n  static getAggregatedMetrics(timeWindow: number = 3600000): {\r\n    totalRequests: number;\r\n    averageResponseTime: number;\r\n    errorRate: number;\r\n    slowestEndpoints: Array<{ path: string; avgTime: number }>;\r\n    errorsByStatus: Record<number, number>;\r\n  } {\r\n    const now = Date.now();\r\n    const recentMetrics = Array.from(metricsCache.values())\r\n      .filter(m => now - m.timestamp < timeWindow);\r\n    \r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        averageResponseTime: 0,\r\n        errorRate: 0,\r\n        slowestEndpoints: [],\r\n        errorsByStatus: {},\r\n      };\r\n    }\r\n    \r\n    const totalRequests = recentMetrics.length;\r\n    const averageResponseTime = recentMetrics.reduce((sum, m) => sum + m.responseTime, 0) / totalRequests;\r\n    const errors = recentMetrics.filter(m => m.statusCode >= 400);\r\n    const errorRate = errors.length / totalRequests;\r\n    \r\n    // Agrupar por endpoint para encontrar los m\xE1s lentos\r\n    const endpointTimes = new Map<string, number[]>();\r\n    recentMetrics.forEach(m => {\r\n      const key = `${m.method} ${m.path}`;\r\n      if (!endpointTimes.has(key)) {\r\n        endpointTimes.set(key, []);\r\n      }\r\n      endpointTimes.get(key)!.push(m.responseTime);\r\n    });\r\n    \r\n    const slowestEndpoints = Array.from(endpointTimes.entries())\r\n      .map(([path, times]) => ({\r\n        path,\r\n        avgTime: times.reduce((sum, time) => sum + time, 0) / times.length,\r\n      }))\r\n      .sort((a, b) => b.avgTime - a.avgTime)\r\n      .slice(0, 10);\r\n    \r\n    // Contar errores por c\xF3digo de estado\r\n    const errorsByStatus: Record<number, number> = {};\r\n    errors.forEach(m => {\r\n      errorsByStatus[m.statusCode] = (errorsByStatus[m.statusCode] || 0) + 1;\r\n    });\r\n    \r\n    return {\r\n      totalRequests,\r\n      averageResponseTime,\r\n      errorRate,\r\n      slowestEndpoints,\r\n      errorsByStatus,\r\n    };\r\n  }\r\n  \r\n  // Generar reporte de rendimiento\r\n  static generatePerformanceReport(): string {\r\n    const metrics = this.getAggregatedMetrics();\r\n    \r\n    return `\r\n=== API Performance Report ===\r\nTotal Requests: ${metrics.totalRequests}\r\nAverage Response Time: ${metrics.averageResponseTime.toFixed(2)}ms\r\nError Rate: ${(metrics.errorRate * 100).toFixed(2)}%\r\n\r\nSlowest Endpoints:\r\n${metrics.slowestEndpoints.map(e => `  ${e.path}: ${e.avgTime.toFixed(2)}ms`).join('\\n')}\r\n\r\nErrors by Status Code:\r\n${Object.entries(metrics.errorsByStatus).map(([code, count]) => `  ${code}: ${count}`).join('\\n')}\r\n\r\nGenerated at: ${new Date().toISOString()}\r\n    `.trim();\r\n  }\r\n  \r\n  // Limpiar m\xE9tricas antiguas\r\n  static clearOldMetrics(maxAge: number = 3600000) {\r\n    const now = Date.now();\r\n    for (const [key, metric] of metricsCache.entries()) {\r\n      if (now - metric.timestamp > maxAge) {\r\n        metricsCache.delete(key);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Exportar el middleware como default\r\nexport default performanceMonitoringMiddleware;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["APIAnalytics", "performanceMonitoringMiddleware", "metricsCache", "Map", "CACHE_TTL", "setInterval", "now", "Date", "key", "metric", "entries", "timestamp", "delete", "request", "startTime", "method", "url", "headers", "pathname", "URL", "shouldSkipMonitoring", "NextResponse", "next", "response", "set", "toISOString", "responseTime", "statusCode", "status", "metrics", "path", "contentLength", "parseInt", "get", "userAgent", "undefined", "ip", "getClientIP", "trackAPIMetrics", "detectPerformanceIssues", "skipPatterns", "some", "pattern", "test", "forwarded", "realIP", "cfConnectingIP", "split", "trim", "productionMonitor", "trackPerformance", "name", "value", "category", "metadata", "trackError", "Error", "type", "cacheKey", "error", "console", "severity", "threshold", "recentErrors", "Array", "from", "values", "filter", "m", "length", "errorCount", "timeWindow", "getAggregatedMetrics", "recentMetrics", "totalRequests", "averageResponseTime", "errorRate", "slowestEndpoints", "errorsByStatus", "reduce", "sum", "errors", "endpointTimes", "forEach", "has", "push", "map", "times", "avgTime", "time", "sort", "a", "b", "slice", "generatePerformanceReport", "toFixed", "e", "join", "Object", "code", "count", "clearOldMetrics", "maxAge"],
      mappings: "AAAA,sCAAsC;AACtC,oCAAoC;AACpC,8DAA8D;AAC9D,sCAAsC;;;;;;;;;;;;QAsMzBA;eAAAA;;QA4Fb,sCAAsC;IACtC;eAAA;;QApQgBC;eAAAA;;;wBA7B0B;sCACR;AAclC,8CAA8C;AAC9C,MAAMC,eAAe,IAAIC;AACzB,MAAMC,YAAY,OAAO,WAAW;AAEpC,+BAA+B;AAC/BC,YAAY;IACV,MAAMC,MAAMC,KAAKD,GAAG;IACpB,KAAK,MAAM,CAACE,KAAKC,OAAO,IAAIP,aAAaQ,OAAO,GAAI;QAClD,IAAIJ,MAAMG,OAAOE,SAAS,GAAGP,WAAW;YACtCF,aAAaU,MAAM,CAACJ;QACtB;IACF;AACF,GAAGJ;AAEI,SAASH,gCAAgCY,OAAoB;IAClE,MAAMC,YAAYP,KAAKD,GAAG;IAC1B,MAAM,EAAES,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAE,GAAGJ;IACjC,MAAMK,WAAW,IAAIC,IAAIH,KAAKE,QAAQ;IAEtC,wDAAwD;IACxD,IAAIE,qBAAqBF,WAAW;QAClC,OAAOG,oBAAY,CAACC,IAAI;IAC1B;IAEA,2CAA2C;IAC3C,MAAMC,WAAWF,oBAAY,CAACC,IAAI;IAElC,iCAAiC;IACjCC,SAASN,OAAO,CAACO,GAAG,CAAC,mBAAmB,GAAGjB,KAAKD,GAAG,KAAKQ,UAAU,EAAE,CAAC;IACrES,SAASN,OAAO,CAACO,GAAG,CAAC,eAAe,IAAIjB,OAAOkB,WAAW;IAE1D,4CAA4C;IAC5C,MAAMC,eAAenB,KAAKD,GAAG,KAAKQ;IAClC,MAAMa,aAAaJ,SAASK,MAAM;IAElC,MAAMC,UAAsB;QAC1Bd;QACAe,MAAMZ;QACNS;QACAD;QACAK,eAAeC,SAAST,SAASN,OAAO,CAACgB,GAAG,CAAC,qBAAqB;QAClEC,WAAWjB,QAAQgB,GAAG,CAAC,iBAAiBE;QACxCC,IAAIC,YAAYxB;QAChBF,WAAWJ,KAAKD,GAAG;IACrB;IAEA,2CAA2C;IAC3CgC,gBAAgBT;IAEhB,oCAAoC;IACpCU,wBAAwBV;IAExB,OAAON;AACT;AAEA,0DAA0D;AAC1D,SAASH,qBAAqBF,QAAgB;IAC5C,MAAMsB,eAAe;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,OAAOA,aAAaC,IAAI,CAACC,CAAAA,UAAWA,QAAQC,IAAI,CAACzB;AACnD;AAEA,yCAAyC;AACzC,SAASmB,YAAYxB,OAAoB;IACvC,MAAM+B,YAAY/B,QAAQI,OAAO,CAACgB,GAAG,CAAC;IACtC,MAAMY,SAAShC,QAAQI,OAAO,CAACgB,GAAG,CAAC;IACnC,MAAMa,iBAAiBjC,QAAQI,OAAO,CAACgB,GAAG,CAAC;IAE3C,IAAIW,WAAW;QACb,OAAOA,UAAUG,KAAK,CAAC,IAAI,CAAC,EAAE,CAACC,IAAI;IACrC;IAEA,OAAOH,UAAUC,kBAAkB;AACrC;AAEA,wCAAwC;AACxC,SAASR,gBAAgBT,OAAmB;IAC1C,IAAI;QACF,gDAAgD;QAChDoB,uCAAiB,CAACC,gBAAgB,CAAC;YACjCC,MAAM;YACNC,OAAOvB,QAAQH,YAAY;YAC3B2B,UAAU;YACVC,UAAU;gBACRvC,QAAQc,QAAQd,MAAM;gBACtBe,MAAMD,QAAQC,IAAI;gBAClBH,YAAYE,QAAQF,UAAU;gBAC9BI,eAAeF,QAAQE,aAAa;gBACpCG,WAAWL,QAAQK,SAAS;gBAC5BE,IAAIP,QAAQO,EAAE;YAChB;QACF;QAEA,wBAAwB;QACxB,IAAIP,QAAQF,UAAU,IAAI,KAAK;YAC7BsB,uCAAiB,CAACM,UAAU,CAC1B,IAAIC,MAAM,CAAC,KAAK,EAAE3B,QAAQF,UAAU,CAAC,IAAI,EAAEE,QAAQd,MAAM,CAAC,CAAC,EAAEc,QAAQC,IAAI,EAAE,GAC3E;gBACE2B,MAAM;gBACN9B,YAAYE,QAAQF,UAAU;gBAC9BZ,QAAQc,QAAQd,MAAM;gBACtBe,MAAMD,QAAQC,IAAI;gBAClBJ,cAAcG,QAAQH,YAAY;gBAClCU,IAAIP,QAAQO,EAAE;YAChB;QAEJ;QAEA,mCAAmC;QACnC,MAAMsB,WAAW,GAAG7B,QAAQd,MAAM,CAAC,CAAC,EAAEc,QAAQC,IAAI,CAAC,CAAC,EAAED,QAAQlB,SAAS,EAAE;QACzET,aAAasB,GAAG,CAACkC,UAAU7B;IAE7B,EAAE,OAAO8B,OAAO;QACdC,QAAQD,KAAK,CAAC,+BAA+BA;IAC/C;AACF;AAEA,iDAAiD;AACjD,SAASpB,wBAAwBV,OAAmB;IAClD,MAAM,EAAEH,YAAY,EAAEC,UAAU,EAAEG,IAAI,EAAEf,MAAM,EAAE,GAAGc;IAEnD,6BAA6B;IAC7B,IAAIH,eAAe,MAAM;QACvBuB,uCAAiB,CAACM,UAAU,CAC1B,IAAIC,MAAM,CAAC,mBAAmB,EAAE9B,aAAa,EAAE,CAAC,GAChD;YACE+B,MAAM;YACNI,UAAU;YACVnC;YACAI;YACAf;YACA+C,WAAW;QACb;IAEJ,OAAO,IAAIpC,eAAe,MAAM;QAC9BuB,uCAAiB,CAACC,gBAAgB,CAAC;YACjCC,MAAM;YACNC,OAAO1B;YACP2B,UAAU;YACVC,UAAU;gBAAExB;gBAAMf;gBAAQ+C,WAAW;YAAK;QAC5C;IACF;IAEA,mDAAmD;IACnD,IAAInC,cAAc,KAAK;QACrB,MAAMoC,eAAeC,MAAMC,IAAI,CAAC/D,aAAagE,MAAM,IAChDC,MAAM,CAACC,CAAAA,IACNA,EAAEtC,IAAI,KAAKA,QACXsC,EAAErD,MAAM,KAAKA,UACbqD,EAAEzC,UAAU,IAAI,OAChBpB,KAAKD,GAAG,KAAK8D,EAAEzD,SAAS,GAAG,OAAO,oBAAoB;;QAG1D,IAAIoD,aAAaM,MAAM,IAAI,GAAG;YAC5BpB,uCAAiB,CAACM,UAAU,CAC1B,IAAIC,MAAM,CAAC,4BAA4B,EAAEzC,OAAO,CAAC,EAAEe,MAAM,GACzD;gBACE2B,MAAM;gBACNI,UAAU;gBACVS,YAAYP,aAAaM,MAAM;gBAC/BE,YAAY;gBACZzC;gBACAf;YACF;QAEJ;IACF;AACF;AAMO,MAAMf;IACX,6BAA6B;IAC7B,OAAOwE,qBAAqBD,aAAqB,OAAO,EAMtD;QACA,MAAMjE,MAAMC,KAAKD,GAAG;QACpB,MAAMmE,gBAAgBT,MAAMC,IAAI,CAAC/D,aAAagE,MAAM,IACjDC,MAAM,CAACC,CAAAA,IAAK9D,MAAM8D,EAAEzD,SAAS,GAAG4D;QAEnC,IAAIE,cAAcJ,MAAM,KAAK,GAAG;YAC9B,OAAO;gBACLK,eAAe;gBACfC,qBAAqB;gBACrBC,WAAW;gBACXC,kBAAkB,EAAE;gBACpBC,gBAAgB,CAAC;YACnB;QACF;QAEA,MAAMJ,gBAAgBD,cAAcJ,MAAM;QAC1C,MAAMM,sBAAsBF,cAAcM,MAAM,CAAC,CAACC,KAAKZ,IAAMY,MAAMZ,EAAE1C,YAAY,EAAE,KAAKgD;QACxF,MAAMO,SAASR,cAAcN,MAAM,CAACC,CAAAA,IAAKA,EAAEzC,UAAU,IAAI;QACzD,MAAMiD,YAAYK,OAAOZ,MAAM,GAAGK;QAElC,qDAAqD;QACrD,MAAMQ,gBAAgB,IAAI/E;QAC1BsE,cAAcU,OAAO,CAACf,CAAAA;YACpB,MAAM5D,MAAM,GAAG4D,EAAErD,MAAM,CAAC,CAAC,EAAEqD,EAAEtC,IAAI,EAAE;YACnC,IAAI,CAACoD,cAAcE,GAAG,CAAC5E,MAAM;gBAC3B0E,cAAc1D,GAAG,CAAChB,KAAK,EAAE;YAC3B;YACA0E,cAAcjD,GAAG,CAACzB,KAAM6E,IAAI,CAACjB,EAAE1C,YAAY;QAC7C;QAEA,MAAMmD,mBAAmBb,MAAMC,IAAI,CAACiB,cAAcxE,OAAO,IACtD4E,GAAG,CAAC,CAAC,CAACxD,MAAMyD,MAAM,GAAM,CAAA;gBACvBzD;gBACA0D,SAASD,MAAMR,MAAM,CAAC,CAACC,KAAKS,OAAST,MAAMS,MAAM,KAAKF,MAAMlB,MAAM;YACpE,CAAA,GACCqB,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAEJ,OAAO,GAAGG,EAAEH,OAAO,EACpCK,KAAK,CAAC,GAAG;QAEZ,sCAAsC;QACtC,MAAMf,iBAAyC,CAAC;QAChDG,OAAOE,OAAO,CAACf,CAAAA;YACbU,cAAc,CAACV,EAAEzC,UAAU,CAAC,GAAG,AAACmD,CAAAA,cAAc,CAACV,EAAEzC,UAAU,CAAC,IAAI,CAAA,IAAK;QACvE;QAEA,OAAO;YACL+C;YACAC;YACAC;YACAC;YACAC;QACF;IACF;IAEA,iCAAiC;IACjC,OAAOgB,4BAAoC;QACzC,MAAMjE,UAAU,IAAI,CAAC2C,oBAAoB;QAEzC,OAAO,CAAC;;gBAEI,EAAE3C,QAAQ6C,aAAa,CAAC;uBACjB,EAAE7C,QAAQ8C,mBAAmB,CAACoB,OAAO,CAAC,GAAG;YACpD,EAAE,AAAClE,CAAAA,QAAQ+C,SAAS,GAAG,GAAE,EAAGmB,OAAO,CAAC,GAAG;;;AAGnD,EAAElE,QAAQgD,gBAAgB,CAACS,GAAG,CAACU,CAAAA,IAAK,CAAC,EAAE,EAAEA,EAAElE,IAAI,CAAC,EAAE,EAAEkE,EAAER,OAAO,CAACO,OAAO,CAAC,GAAG,EAAE,CAAC,EAAEE,IAAI,CAAC,MAAM;;;AAGzF,EAAEC,OAAOxF,OAAO,CAACmB,QAAQiD,cAAc,EAAEQ,GAAG,CAAC,CAAC,CAACa,MAAMC,MAAM,GAAK,CAAC,EAAE,EAAED,KAAK,EAAE,EAAEC,OAAO,EAAEH,IAAI,CAAC,MAAM;;cAEpF,EAAE,IAAI1F,OAAOkB,WAAW,GAAG;IACrC,CAAC,CAACuB,IAAI;IACR;IAEA,4BAA4B;IAC5B,OAAOqD,gBAAgBC,SAAiB,OAAO,EAAE;QAC/C,MAAMhG,MAAMC,KAAKD,GAAG;QACpB,KAAK,MAAM,CAACE,KAAKC,OAAO,IAAIP,aAAaQ,OAAO,GAAI;YAClD,IAAIJ,MAAMG,OAAOE,SAAS,GAAG2F,QAAQ;gBACnCpG,aAAaU,MAAM,CAACJ;YACtB;QACF;IACF;AACF;MAGA,WAAeP"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e6b56c5e612b7a903d73fd49b706e3eee4545352"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jh89j234t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jh89j234t();
cov_jh89j234t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_jh89j234t().f[0]++;
  cov_jh89j234t().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_jh89j234t().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_jh89j234t().s[3]++;
_export(exports, {
  get APIAnalytics() {
    /* istanbul ignore next */
    cov_jh89j234t().f[1]++;
    cov_jh89j234t().s[4]++;
    return APIAnalytics;
  },
  get
  // Exportar el middleware como default
  default() {
    /* istanbul ignore next */
    cov_jh89j234t().f[2]++;
    cov_jh89j234t().s[5]++;
    return _default;
  },
  get performanceMonitoringMiddleware() {
    /* istanbul ignore next */
    cov_jh89j234t().f[3]++;
    cov_jh89j234t().s[6]++;
    return performanceMonitoringMiddleware;
  }
});
const _server =
/* istanbul ignore next */
(cov_jh89j234t().s[7]++, require("next/server"));
const _productionmonitoring =
/* istanbul ignore next */
(cov_jh89j234t().s[8]++, require("../config/production-monitoring"));
// Cache para almacenar mÃ©tricas temporalmente
const metricsCache =
/* istanbul ignore next */
(cov_jh89j234t().s[9]++, new Map());
const CACHE_TTL =
/* istanbul ignore next */
(cov_jh89j234t().s[10]++, 60000); // 1 minuto
// Limpiar cache periÃ³dicamente
/* istanbul ignore next */
cov_jh89j234t().s[11]++;
setInterval(() => {
  /* istanbul ignore next */
  cov_jh89j234t().f[4]++;
  const now =
  /* istanbul ignore next */
  (cov_jh89j234t().s[12]++, Date.now());
  /* istanbul ignore next */
  cov_jh89j234t().s[13]++;
  for (const [key, metric] of metricsCache.entries()) {
    /* istanbul ignore next */
    cov_jh89j234t().s[14]++;
    if (now - metric.timestamp > CACHE_TTL) {
      /* istanbul ignore next */
      cov_jh89j234t().b[0][0]++;
      cov_jh89j234t().s[15]++;
      metricsCache.delete(key);
    } else
    /* istanbul ignore next */
    {
      cov_jh89j234t().b[0][1]++;
    }
  }
}, CACHE_TTL);
function performanceMonitoringMiddleware(request) {
  /* istanbul ignore next */
  cov_jh89j234t().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_jh89j234t().s[16]++, Date.now());
  const {
    method,
    url,
    headers
  } =
  /* istanbul ignore next */
  (cov_jh89j234t().s[17]++, request);
  const pathname =
  /* istanbul ignore next */
  (cov_jh89j234t().s[18]++, new URL(url).pathname);
  // Skip monitoring for static assets and internal routes
  /* istanbul ignore next */
  cov_jh89j234t().s[19]++;
  if (shouldSkipMonitoring(pathname)) {
    /* istanbul ignore next */
    cov_jh89j234t().b[1][0]++;
    cov_jh89j234t().s[20]++;
    return _server.NextResponse.next();
  } else
  /* istanbul ignore next */
  {
    cov_jh89j234t().b[1][1]++;
  }
  // Crear response con headers de monitoring
  const response =
  /* istanbul ignore next */
  (cov_jh89j234t().s[21]++, _server.NextResponse.next());
  // Agregar headers de performance
  /* istanbul ignore next */
  cov_jh89j234t().s[22]++;
  response.headers.set('X-Response-Time', `${Date.now() - startTime}ms`);
  /* istanbul ignore next */
  cov_jh89j234t().s[23]++;
  response.headers.set('X-Timestamp', new Date().toISOString());
  // Capturar mÃ©tricas despuÃ©s de la respuesta
  const responseTime =
  /* istanbul ignore next */
  (cov_jh89j234t().s[24]++, Date.now() - startTime);
  const statusCode =
  /* istanbul ignore next */
  (cov_jh89j234t().s[25]++, response.status);
  const metrics =
  /* istanbul ignore next */
  (cov_jh89j234t().s[26]++, {
    method,
    path: pathname,
    statusCode,
    responseTime,
    contentLength: parseInt(
    /* istanbul ignore next */
    (cov_jh89j234t().b[2][0]++, response.headers.get('content-length')) ||
    /* istanbul ignore next */
    (cov_jh89j234t().b[2][1]++, '0')),
    userAgent:
    /* istanbul ignore next */
    (cov_jh89j234t().b[3][0]++, headers.get('user-agent')) ||
    /* istanbul ignore next */
    (cov_jh89j234t().b[3][1]++, undefined),
    ip: getClientIP(request),
    timestamp: Date.now()
  });
  // Enviar mÃ©tricas al sistema de monitoring
  /* istanbul ignore next */
  cov_jh89j234t().s[27]++;
  trackAPIMetrics(metrics);
  // Detectar problemas de rendimiento
  /* istanbul ignore next */
  cov_jh89j234t().s[28]++;
  detectPerformanceIssues(metrics);
  /* istanbul ignore next */
  cov_jh89j234t().s[29]++;
  return response;
}
// FunciÃ³n para determinar si se debe omitir el monitoring
function shouldSkipMonitoring(pathname) {
  /* istanbul ignore next */
  cov_jh89j234t().f[6]++;
  const skipPatterns =
  /* istanbul ignore next */
  (cov_jh89j234t().s[30]++, [/^\/_next\//, /^\/__nextjs_/, /\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot)$/i, /^\/api\/health$/, /^\/favicon/, /^\/robots\.txt$/, /^\/sitemap/]);
  /* istanbul ignore next */
  cov_jh89j234t().s[31]++;
  return skipPatterns.some(pattern => {
    /* istanbul ignore next */
    cov_jh89j234t().f[7]++;
    cov_jh89j234t().s[32]++;
    return pattern.test(pathname);
  });
}
// FunciÃ³n para obtener la IP del cliente
function getClientIP(request) {
  /* istanbul ignore next */
  cov_jh89j234t().f[8]++;
  const forwarded =
  /* istanbul ignore next */
  (cov_jh89j234t().s[33]++, request.headers.get('x-forwarded-for'));
  const realIP =
  /* istanbul ignore next */
  (cov_jh89j234t().s[34]++, request.headers.get('x-real-ip'));
  const cfConnectingIP =
  /* istanbul ignore next */
  (cov_jh89j234t().s[35]++, request.headers.get('cf-connecting-ip'));
  /* istanbul ignore next */
  cov_jh89j234t().s[36]++;
  if (forwarded) {
    /* istanbul ignore next */
    cov_jh89j234t().b[4][0]++;
    cov_jh89j234t().s[37]++;
    return forwarded.split(',')[0].trim();
  } else
  /* istanbul ignore next */
  {
    cov_jh89j234t().b[4][1]++;
  }
  cov_jh89j234t().s[38]++;
  return /* istanbul ignore next */(cov_jh89j234t().b[5][0]++, realIP) ||
  /* istanbul ignore next */
  (cov_jh89j234t().b[5][1]++, cfConnectingIP) ||
  /* istanbul ignore next */
  (cov_jh89j234t().b[5][2]++, 'unknown');
}
// FunciÃ³n para trackear mÃ©tricas de API
function trackAPIMetrics(metrics) {
  /* istanbul ignore next */
  cov_jh89j234t().f[9]++;
  cov_jh89j234t().s[39]++;
  try {
    /* istanbul ignore next */
    cov_jh89j234t().s[40]++;
    // Enviar al sistema de monitoring de producciÃ³n
    _productionmonitoring.productionMonitor.trackPerformance({
      name: 'api_response_time',
      value: metrics.responseTime,
      category: 'api',
      metadata: {
        method: metrics.method,
        path: metrics.path,
        statusCode: metrics.statusCode,
        contentLength: metrics.contentLength,
        userAgent: metrics.userAgent,
        ip: metrics.ip
      }
    });
    // Trackear errores HTTP
    /* istanbul ignore next */
    cov_jh89j234t().s[41]++;
    if (metrics.statusCode >= 400) {
      /* istanbul ignore next */
      cov_jh89j234t().b[6][0]++;
      cov_jh89j234t().s[42]++;
      _productionmonitoring.productionMonitor.trackError(new Error(`HTTP ${metrics.statusCode} on ${metrics.method} ${metrics.path}`), {
        type: 'http_error',
        statusCode: metrics.statusCode,
        method: metrics.method,
        path: metrics.path,
        responseTime: metrics.responseTime,
        ip: metrics.ip
      });
    } else
    /* istanbul ignore next */
    {
      cov_jh89j234t().b[6][1]++;
    }
    // Almacenar en cache para anÃ¡lisis
    const cacheKey =
    /* istanbul ignore next */
    (cov_jh89j234t().s[43]++, `${metrics.method}:${metrics.path}:${metrics.timestamp}`);
    /* istanbul ignore next */
    cov_jh89j234t().s[44]++;
    metricsCache.set(cacheKey, metrics);
  } catch (error) {
    /* istanbul ignore next */
    cov_jh89j234t().s[45]++;
    console.error('Error tracking API metrics:', error);
  }
}
// FunciÃ³n para detectar problemas de rendimiento
function detectPerformanceIssues(metrics) {
  /* istanbul ignore next */
  cov_jh89j234t().f[10]++;
  const {
    responseTime,
    statusCode,
    path,
    method
  } =
  /* istanbul ignore next */
  (cov_jh89j234t().s[46]++, metrics);
  // Detectar respuestas lentas
  /* istanbul ignore next */
  cov_jh89j234t().s[47]++;
  if (responseTime > 5000) {
    /* istanbul ignore next */
    cov_jh89j234t().b[7][0]++;
    cov_jh89j234t().s[48]++;
    _productionmonitoring.productionMonitor.trackError(new Error(`Slow API response: ${responseTime}ms`), {
      type: 'performance_issue',
      severity: 'high',
      responseTime,
      path,
      method,
      threshold: 5000
    });
  } else {
    /* istanbul ignore next */
    cov_jh89j234t().b[7][1]++;
    cov_jh89j234t().s[49]++;
    if (responseTime > 2000) {
      /* istanbul ignore next */
      cov_jh89j234t().b[8][0]++;
      cov_jh89j234t().s[50]++;
      _productionmonitoring.productionMonitor.trackPerformance({
        name: 'slow_api_warning',
        value: responseTime,
        category: 'performance_warning',
        metadata: {
          path,
          method,
          threshold: 2000
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_jh89j234t().b[8][1]++;
    }
  }
  // Detectar errores frecuentes en el mismo endpoint
  /* istanbul ignore next */
  cov_jh89j234t().s[51]++;
  if (statusCode >= 500) {
    /* istanbul ignore next */
    cov_jh89j234t().b[9][0]++;
    const recentErrors =
    /* istanbul ignore next */
    (cov_jh89j234t().s[52]++, Array.from(metricsCache.values()).filter(m => {
      /* istanbul ignore next */
      cov_jh89j234t().f[11]++;
      cov_jh89j234t().s[53]++;
      return /* istanbul ignore next */(cov_jh89j234t().b[10][0]++, m.path === path) &&
      /* istanbul ignore next */
      (cov_jh89j234t().b[10][1]++, m.method === method) &&
      /* istanbul ignore next */
      (cov_jh89j234t().b[10][2]++, m.statusCode >= 500) &&
      /* istanbul ignore next */
      (cov_jh89j234t().b[10][3]++, Date.now() - m.timestamp < 300000);
    } // Ãltimos 5 minutos
    ));
    /* istanbul ignore next */
    cov_jh89j234t().s[54]++;
    if (recentErrors.length >= 5) {
      /* istanbul ignore next */
      cov_jh89j234t().b[11][0]++;
      cov_jh89j234t().s[55]++;
      _productionmonitoring.productionMonitor.trackError(new Error(`High error rate detected on ${method} ${path}`), {
        type: 'high_error_rate',
        severity: 'critical',
        errorCount: recentErrors.length,
        timeWindow: '5min',
        path,
        method
      });
    } else
    /* istanbul ignore next */
    {
      cov_jh89j234t().b[11][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_jh89j234t().b[9][1]++;
  }
}
class APIAnalytics {
  // Obtener mÃ©tricas agregadas
  static getAggregatedMetrics(timeWindow =
  /* istanbul ignore next */
  (cov_jh89j234t().b[12][0]++, 3600000)) {
    /* istanbul ignore next */
    cov_jh89j234t().f[12]++;
    const now =
    /* istanbul ignore next */
    (cov_jh89j234t().s[56]++, Date.now());
    const recentMetrics =
    /* istanbul ignore next */
    (cov_jh89j234t().s[57]++, Array.from(metricsCache.values()).filter(m => {
      /* istanbul ignore next */
      cov_jh89j234t().f[13]++;
      cov_jh89j234t().s[58]++;
      return now - m.timestamp < timeWindow;
    }));
    /* istanbul ignore next */
    cov_jh89j234t().s[59]++;
    if (recentMetrics.length === 0) {
      /* istanbul ignore next */
      cov_jh89j234t().b[13][0]++;
      cov_jh89j234t().s[60]++;
      return {
        totalRequests: 0,
        averageResponseTime: 0,
        errorRate: 0,
        slowestEndpoints: [],
        errorsByStatus: {}
      };
    } else
    /* istanbul ignore next */
    {
      cov_jh89j234t().b[13][1]++;
    }
    const totalRequests =
    /* istanbul ignore next */
    (cov_jh89j234t().s[61]++, recentMetrics.length);
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_jh89j234t().s[62]++, recentMetrics.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_jh89j234t().f[14]++;
      cov_jh89j234t().s[63]++;
      return sum + m.responseTime;
    }, 0) / totalRequests);
    const errors =
    /* istanbul ignore next */
    (cov_jh89j234t().s[64]++, recentMetrics.filter(m => {
      /* istanbul ignore next */
      cov_jh89j234t().f[15]++;
      cov_jh89j234t().s[65]++;
      return m.statusCode >= 400;
    }));
    const errorRate =
    /* istanbul ignore next */
    (cov_jh89j234t().s[66]++, errors.length / totalRequests);
    // Agrupar por endpoint para encontrar los mÃ¡s lentos
    const endpointTimes =
    /* istanbul ignore next */
    (cov_jh89j234t().s[67]++, new Map());
    /* istanbul ignore next */
    cov_jh89j234t().s[68]++;
    recentMetrics.forEach(m => {
      /* istanbul ignore next */
      cov_jh89j234t().f[16]++;
      const key =
      /* istanbul ignore next */
      (cov_jh89j234t().s[69]++, `${m.method} ${m.path}`);
      /* istanbul ignore next */
      cov_jh89j234t().s[70]++;
      if (!endpointTimes.has(key)) {
        /* istanbul ignore next */
        cov_jh89j234t().b[14][0]++;
        cov_jh89j234t().s[71]++;
        endpointTimes.set(key, []);
      } else
      /* istanbul ignore next */
      {
        cov_jh89j234t().b[14][1]++;
      }
      cov_jh89j234t().s[72]++;
      endpointTimes.get(key).push(m.responseTime);
    });
    const slowestEndpoints =
    /* istanbul ignore next */
    (cov_jh89j234t().s[73]++, Array.from(endpointTimes.entries()).map(([path, times]) => {
      /* istanbul ignore next */
      cov_jh89j234t().f[17]++;
      cov_jh89j234t().s[74]++;
      return {
        path,
        avgTime: times.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_jh89j234t().f[18]++;
          cov_jh89j234t().s[75]++;
          return sum + time;
        }, 0) / times.length
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_jh89j234t().f[19]++;
      cov_jh89j234t().s[76]++;
      return b.avgTime - a.avgTime;
    }).slice(0, 10));
    // Contar errores por cÃ³digo de estado
    const errorsByStatus =
    /* istanbul ignore next */
    (cov_jh89j234t().s[77]++, {});
    /* istanbul ignore next */
    cov_jh89j234t().s[78]++;
    errors.forEach(m => {
      /* istanbul ignore next */
      cov_jh89j234t().f[20]++;
      cov_jh89j234t().s[79]++;
      errorsByStatus[m.statusCode] = (
      /* istanbul ignore next */
      (cov_jh89j234t().b[15][0]++, errorsByStatus[m.statusCode]) ||
      /* istanbul ignore next */
      (cov_jh89j234t().b[15][1]++, 0)) + 1;
    });
    /* istanbul ignore next */
    cov_jh89j234t().s[80]++;
    return {
      totalRequests,
      averageResponseTime,
      errorRate,
      slowestEndpoints,
      errorsByStatus
    };
  }
  // Generar reporte de rendimiento
  static generatePerformanceReport() {
    /* istanbul ignore next */
    cov_jh89j234t().f[21]++;
    const metrics =
    /* istanbul ignore next */
    (cov_jh89j234t().s[81]++, this.getAggregatedMetrics());
    /* istanbul ignore next */
    cov_jh89j234t().s[82]++;
    return `
=== API Performance Report ===
Total Requests: ${metrics.totalRequests}
Average Response Time: ${metrics.averageResponseTime.toFixed(2)}ms
Error Rate: ${(metrics.errorRate * 100).toFixed(2)}%

Slowest Endpoints:
${metrics.slowestEndpoints.map(e => {
      /* istanbul ignore next */
      cov_jh89j234t().f[22]++;
      cov_jh89j234t().s[83]++;
      return `  ${e.path}: ${e.avgTime.toFixed(2)}ms`;
    }).join('\n')}

Errors by Status Code:
${Object.entries(metrics.errorsByStatus).map(([code, count]) => {
      /* istanbul ignore next */
      cov_jh89j234t().f[23]++;
      cov_jh89j234t().s[84]++;
      return `  ${code}: ${count}`;
    }).join('\n')}

Generated at: ${new Date().toISOString()}
    `.trim();
  }
  // Limpiar mÃ©tricas antiguas
  static clearOldMetrics(maxAge =
  /* istanbul ignore next */
  (cov_jh89j234t().b[16][0]++, 3600000)) {
    /* istanbul ignore next */
    cov_jh89j234t().f[24]++;
    const now =
    /* istanbul ignore next */
    (cov_jh89j234t().s[85]++, Date.now());
    /* istanbul ignore next */
    cov_jh89j234t().s[86]++;
    for (const [key, metric] of metricsCache.entries()) {
      /* istanbul ignore next */
      cov_jh89j234t().s[87]++;
      if (now - metric.timestamp > maxAge) {
        /* istanbul ignore next */
        cov_jh89j234t().b[17][0]++;
        cov_jh89j234t().s[88]++;
        metricsCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_jh89j234t().b[17][1]++;
      }
    }
  }
}
const _default =
/* istanbul ignore next */
(cov_jh89j234t().s[89]++, performanceMonitoringMiddleware);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,