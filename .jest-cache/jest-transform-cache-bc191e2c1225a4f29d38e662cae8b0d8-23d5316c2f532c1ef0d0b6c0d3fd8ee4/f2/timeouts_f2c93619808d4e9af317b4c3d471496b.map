{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\config\\timeouts.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - TIMEOUT CONFIGURATION\n// ===================================\n\n/**\n * Configuración centralizada de timeouts para toda la aplicación\n * Todos los valores están en milisegundos\n */\n\n/**\n * Timeouts para APIs externas\n */\nexport const EXTERNAL_API_TIMEOUTS = {\n  // MercadoPago\n  MERCADOPAGO: {\n    PAYMENT_CREATION: 15000, // 15 segundos\n    PAYMENT_STATUS: 10000, // 10 segundos\n    WEBHOOK_PROCESSING: 5000, // 5 segundos\n    PREFERENCE_CREATION: 12000, // 12 segundos\n    REFUND_PROCESSING: 20000, // 20 segundos\n  },\n\n  // APIs de terceros generales\n  THIRD_PARTY: {\n    DEFAULT: 10000, // 10 segundos\n    SLOW_OPERATIONS: 30000, // 30 segundos\n    FAST_OPERATIONS: 5000, // 5 segundos\n  },\n\n  // Servicios de email\n  EMAIL: {\n    SEND_EMAIL: 15000, // 15 segundos\n    TEMPLATE_PROCESSING: 8000, // 8 segundos\n  },\n\n  // Servicios de notificaciones\n  NOTIFICATIONS: {\n    PUSH_NOTIFICATION: 10000, // 10 segundos\n    SMS: 12000, // 12 segundos\n    SLACK_WEBHOOK: 8000, // 8 segundos\n  },\n} as const\n\n/**\n * Timeouts para base de datos\n */\nexport const DATABASE_TIMEOUTS = {\n  // Operaciones de lectura\n  READ: {\n    SIMPLE_QUERY: 5000, // 5 segundos\n    COMPLEX_QUERY: 15000, // 15 segundos\n    AGGREGATION: 20000, // 20 segundos\n    SEARCH: 10000, // 10 segundos\n  },\n\n  // Operaciones de escritura\n  WRITE: {\n    INSERT: 8000, // 8 segundos\n    UPDATE: 10000, // 10 segundos\n    DELETE: 12000, // 12 segundos\n    BULK_OPERATIONS: 30000, // 30 segundos\n  },\n\n  // Transacciones\n  TRANSACTION: {\n    SIMPLE: 15000, // 15 segundos\n    COMPLEX: 30000, // 30 segundos\n    MIGRATION: 60000, // 60 segundos\n  },\n\n  // Conexiones\n  CONNECTION: {\n    ACQUIRE: 5000, // 5 segundos\n    IDLE_TIMEOUT: 300000, // 5 minutos\n    LIFETIME: 1800000, // 30 minutos\n  },\n} as const\n\n/**\n * Timeouts para cache\n */\nexport const CACHE_TIMEOUTS = {\n  // Redis\n  REDIS: {\n    CONNECT: 5000, // 5 segundos\n    COMMAND: 3000, // 3 segundos\n    PIPELINE: 10000, // 10 segundos\n  },\n\n  // Cache en memoria\n  MEMORY: {\n    OPERATION: 1000, // 1 segundo\n    CLEANUP: 5000, // 5 segundos\n  },\n\n  // CDN\n  CDN: {\n    PURGE: 30000, // 30 segundos\n    UPLOAD: 60000, // 60 segundos\n  },\n} as const\n\n/**\n * Timeouts para APIs internas\n */\nexport const INTERNAL_API_TIMEOUTS = {\n  // APIs de productos\n  PRODUCTS: {\n    LIST: 8000, // 8 segundos\n    DETAIL: 5000, // 5 segundos\n    SEARCH: 10000, // 10 segundos\n    CREATE: 12000, // 12 segundos\n    UPDATE: 10000, // 10 segundos\n    DELETE: 8000, // 8 segundos\n  },\n\n  // APIs de usuarios\n  USERS: {\n    AUTHENTICATION: 8000, // 8 segundos\n    PROFILE: 5000, // 5 segundos\n    UPDATE_PROFILE: 10000, // 10 segundos\n    PASSWORD_RESET: 15000, // 15 segundos\n  },\n\n  // APIs de órdenes\n  ORDERS: {\n    CREATE: 15000, // 15 segundos\n    LIST: 8000, // 8 segundos\n    DETAIL: 5000, // 5 segundos\n    UPDATE_STATUS: 10000, // 10 segundos\n    CANCEL: 12000, // 12 segundos\n  },\n\n  // APIs de carrito\n  CART: {\n    ADD_ITEM: 5000, // 5 segundos\n    REMOVE_ITEM: 3000, // 3 segundos\n    UPDATE_QUANTITY: 4000, // 4 segundos\n    CLEAR: 3000, // 3 segundos\n    CHECKOUT: 20000, // 20 segundos\n  },\n\n  // APIs de categorías\n  CATEGORIES: {\n    LIST: 5000, // 5 segundos\n    DETAIL: 3000, // 3 segundos\n    CREATE: 8000, // 8 segundos\n    UPDATE: 6000, // 6 segundos\n  },\n\n  // APIs de búsqueda\n  SEARCH: {\n    PRODUCTS: 10000, // 10 segundos\n    SUGGESTIONS: 5000, // 5 segundos\n    TRENDING: 8000, // 8 segundos\n    FILTERS: 6000, // 6 segundos\n  },\n} as const\n\n/**\n * Timeouts para operaciones de archivos\n */\nexport const FILE_TIMEOUTS = {\n  // Upload de archivos\n  UPLOAD: {\n    SMALL_FILE: 30000, // 30 segundos (< 1MB)\n    MEDIUM_FILE: 60000, // 60 segundos (1-10MB)\n    LARGE_FILE: 180000, // 3 minutos (> 10MB)\n  },\n\n  // Procesamiento de imágenes\n  IMAGE_PROCESSING: {\n    RESIZE: 15000, // 15 segundos\n    OPTIMIZATION: 20000, // 20 segundos\n    THUMBNAIL: 10000, // 10 segundos\n  },\n\n  // Operaciones de archivos\n  FILE_OPERATIONS: {\n    READ: 10000, // 10 segundos\n    WRITE: 15000, // 15 segundos\n    DELETE: 5000, // 5 segundos\n    COPY: 20000, // 20 segundos\n  },\n} as const\n\n/**\n * Timeouts para monitoreo y logging\n */\nexport const MONITORING_TIMEOUTS = {\n  // Métricas\n  METRICS: {\n    COLLECTION: 5000, // 5 segundos\n    AGGREGATION: 10000, // 10 segundos\n    EXPORT: 30000, // 30 segundos\n  },\n\n  // Alertas\n  ALERTS: {\n    SEND: 8000, // 8 segundos\n    WEBHOOK: 10000, // 10 segundos\n    EMAIL: 15000, // 15 segundos\n  },\n\n  // Health checks\n  HEALTH_CHECK: {\n    SIMPLE: 3000, // 3 segundos\n    DETAILED: 10000, // 10 segundos\n    EXTERNAL_SERVICES: 15000, // 15 segundos\n  },\n} as const\n\n/**\n * Timeouts para testing\n */\nexport const TEST_TIMEOUTS = {\n  // Tests unitarios\n  UNIT: {\n    DEFAULT: 5000, // 5 segundos\n    ASYNC_OPERATIONS: 10000, // 10 segundos\n  },\n\n  // Tests de integración\n  INTEGRATION: {\n    API_CALLS: 15000, // 15 segundos\n    DATABASE_OPERATIONS: 20000, // 20 segundos\n    EXTERNAL_SERVICES: 30000, // 30 segundos\n  },\n\n  // Tests E2E\n  E2E: {\n    PAGE_LOAD: 30000, // 30 segundos\n    USER_INTERACTION: 10000, // 10 segundos\n    FORM_SUBMISSION: 20000, // 20 segundos\n  },\n} as const\n\n/**\n * Timeouts por ambiente\n */\nexport const ENVIRONMENT_TIMEOUTS = {\n  development: {\n    multiplier: 2, // 2x más tiempo en desarrollo\n    maxTimeout: 60000, // Máximo 60 segundos\n  },\n\n  staging: {\n    multiplier: 1.5, // 1.5x más tiempo en staging\n    maxTimeout: 45000, // Máximo 45 segundos\n  },\n\n  production: {\n    multiplier: 1, // Tiempo normal en producción\n    maxTimeout: 30000, // Máximo 30 segundos\n  },\n} as const\n\n/**\n * Configuración de reintentos\n */\nexport const RETRY_CONFIG = {\n  // Configuración por defecto\n  DEFAULT: {\n    maxRetries: 3,\n    baseDelay: 1000, // 1 segundo\n    maxDelay: 10000, // 10 segundos\n    backoffMultiplier: 2,\n  },\n\n  // APIs críticas\n  CRITICAL: {\n    maxRetries: 5,\n    baseDelay: 500, // 0.5 segundos\n    maxDelay: 5000, // 5 segundos\n    backoffMultiplier: 1.5,\n  },\n\n  // APIs no críticas\n  NON_CRITICAL: {\n    maxRetries: 2,\n    baseDelay: 2000, // 2 segundos\n    maxDelay: 15000, // 15 segundos\n    backoffMultiplier: 3,\n  },\n} as const\n\n/**\n * Utilidades para trabajar con timeouts\n */\nexport class TimeoutUtils {\n  /**\n   * Obtiene timeout ajustado por ambiente\n   */\n  static getEnvironmentTimeout(baseTimeout: number): number {\n    const env = (process.env.NODE_ENV as keyof typeof ENVIRONMENT_TIMEOUTS) || 'development'\n    const config = ENVIRONMENT_TIMEOUTS[env] || ENVIRONMENT_TIMEOUTS.development\n\n    const adjustedTimeout = Math.min(baseTimeout * config.multiplier, config.maxTimeout)\n\n    return Math.round(adjustedTimeout)\n  }\n\n  /**\n   * Crea AbortController con timeout\n   */\n  static createTimeoutController(timeout: number): AbortController {\n    const controller = new AbortController()\n\n    setTimeout(() => {\n      controller.abort()\n    }, timeout)\n\n    return controller\n  }\n\n  /**\n   * Wrapper para promesas con timeout\n   */\n  static withTimeout<T>(promise: Promise<T>, timeout: number, errorMessage?: string): Promise<T> {\n    return Promise.race([\n      promise,\n      new Promise<never>((_, reject) => {\n        setTimeout(() => {\n          reject(new Error(errorMessage || `Operation timed out after ${timeout}ms`))\n        }, timeout)\n      }),\n    ])\n  }\n\n  /**\n   * Implementa retry con backoff exponencial\n   */\n  static async withRetry<T>(\n    operation: () => Promise<T>,\n    config = RETRY_CONFIG.DEFAULT\n  ): Promise<T> {\n    let lastError: Error\n\n    for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\n      try {\n        return await operation()\n      } catch (error) {\n        lastError = error as Error\n\n        if (attempt === config.maxRetries) {\n          throw lastError\n        }\n\n        const delay = Math.min(\n          config.baseDelay * Math.pow(config.backoffMultiplier, attempt),\n          config.maxDelay\n        )\n\n        await new Promise(resolve => setTimeout(resolve, delay))\n      }\n    }\n\n    throw lastError!\n  }\n\n  /**\n   * Obtiene timeout para operación específica\n   */\n  static getTimeout(category: string, operation: string): number {\n    const timeoutMap: Record<string, any> = {\n      'external-api': EXTERNAL_API_TIMEOUTS,\n      database: DATABASE_TIMEOUTS,\n      cache: CACHE_TIMEOUTS,\n      'internal-api': INTERNAL_API_TIMEOUTS,\n      file: FILE_TIMEOUTS,\n      monitoring: MONITORING_TIMEOUTS,\n      test: TEST_TIMEOUTS,\n    }\n\n    const categoryConfig = timeoutMap[category]\n    if (!categoryConfig) {\n      return this.getEnvironmentTimeout(10000) // 10 segundos por defecto\n    }\n\n    // Navegar por la estructura anidada\n    const parts = operation.split('.')\n    let current = categoryConfig\n\n    for (const part of parts) {\n      if (current[part] !== undefined) {\n        current = current[part]\n      } else {\n        return this.getEnvironmentTimeout(10000) // Fallback\n      }\n    }\n\n    return this.getEnvironmentTimeout(typeof current === 'number' ? current : 10000)\n  }\n}\n\n/**\n * Constantes de timeout más utilizadas\n */\nexport const COMMON_TIMEOUTS = {\n  VERY_SHORT: TimeoutUtils.getEnvironmentTimeout(2000), // 2 segundos\n  SHORT: TimeoutUtils.getEnvironmentTimeout(5000), // 5 segundos\n  MEDIUM: TimeoutUtils.getEnvironmentTimeout(10000), // 10 segundos\n  LONG: TimeoutUtils.getEnvironmentTimeout(20000), // 20 segundos\n  VERY_LONG: TimeoutUtils.getEnvironmentTimeout(60000), // 60 segundos\n} as const\n\n/**\n * Configuración por defecto para fetch\n */\nexport const DEFAULT_FETCH_CONFIG = {\n  timeout: COMMON_TIMEOUTS.MEDIUM,\n  retries: RETRY_CONFIG.DEFAULT.maxRetries,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n} as const\n"],"names":["CACHE_TIMEOUTS","COMMON_TIMEOUTS","DATABASE_TIMEOUTS","DEFAULT_FETCH_CONFIG","ENVIRONMENT_TIMEOUTS","EXTERNAL_API_TIMEOUTS","FILE_TIMEOUTS","INTERNAL_API_TIMEOUTS","MONITORING_TIMEOUTS","RETRY_CONFIG","TEST_TIMEOUTS","TimeoutUtils","MERCADOPAGO","PAYMENT_CREATION","PAYMENT_STATUS","WEBHOOK_PROCESSING","PREFERENCE_CREATION","REFUND_PROCESSING","THIRD_PARTY","DEFAULT","SLOW_OPERATIONS","FAST_OPERATIONS","EMAIL","SEND_EMAIL","TEMPLATE_PROCESSING","NOTIFICATIONS","PUSH_NOTIFICATION","SMS","SLACK_WEBHOOK","READ","SIMPLE_QUERY","COMPLEX_QUERY","AGGREGATION","SEARCH","WRITE","INSERT","UPDATE","DELETE","BULK_OPERATIONS","TRANSACTION","SIMPLE","COMPLEX","MIGRATION","CONNECTION","ACQUIRE","IDLE_TIMEOUT","LIFETIME","REDIS","CONNECT","COMMAND","PIPELINE","MEMORY","OPERATION","CLEANUP","CDN","PURGE","UPLOAD","PRODUCTS","LIST","DETAIL","CREATE","USERS","AUTHENTICATION","PROFILE","UPDATE_PROFILE","PASSWORD_RESET","ORDERS","UPDATE_STATUS","CANCEL","CART","ADD_ITEM","REMOVE_ITEM","UPDATE_QUANTITY","CLEAR","CHECKOUT","CATEGORIES","SUGGESTIONS","TRENDING","FILTERS","SMALL_FILE","MEDIUM_FILE","LARGE_FILE","IMAGE_PROCESSING","RESIZE","OPTIMIZATION","THUMBNAIL","FILE_OPERATIONS","COPY","METRICS","COLLECTION","EXPORT","ALERTS","SEND","WEBHOOK","HEALTH_CHECK","DETAILED","EXTERNAL_SERVICES","UNIT","ASYNC_OPERATIONS","INTEGRATION","API_CALLS","DATABASE_OPERATIONS","E2E","PAGE_LOAD","USER_INTERACTION","FORM_SUBMISSION","development","multiplier","maxTimeout","staging","production","maxRetries","baseDelay","maxDelay","backoffMultiplier","CRITICAL","NON_CRITICAL","getEnvironmentTimeout","baseTimeout","env","process","NODE_ENV","config","adjustedTimeout","Math","min","round","createTimeoutController","timeout","controller","AbortController","setTimeout","abort","withTimeout","promise","errorMessage","Promise","race","_","reject","Error","withRetry","operation","lastError","attempt","error","delay","pow","resolve","getTimeout","category","timeoutMap","database","cache","file","monitoring","test","categoryConfig","parts","split","current","part","undefined","VERY_SHORT","SHORT","MEDIUM","LONG","VERY_LONG","retries","headers"],"mappings":"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"}