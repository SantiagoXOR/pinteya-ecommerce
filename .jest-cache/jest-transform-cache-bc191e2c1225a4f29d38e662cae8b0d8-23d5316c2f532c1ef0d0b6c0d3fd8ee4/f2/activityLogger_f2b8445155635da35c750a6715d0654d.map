{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\activity\\activityLogger.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ACTIVITY LOGGER UTILITY\n// ===================================\n\nimport { supabaseAdmin } from '@/lib/integrations/supabase'\n\n// Tipos para actividad\nexport interface ActivityLogData {\n  action: string\n  category: 'auth' | 'profile' | 'order' | 'security' | 'session' | 'preference'\n  description?: string\n  metadata?: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n}\n\nexport interface ActivityLogOptions {\n  skipIfError?: boolean\n  includeTimestamp?: boolean\n}\n\n/**\n * Función utilitaria centralizada para registrar actividad de usuario\n * Puede ser usada desde APIs del servidor o desde el cliente\n */\nexport async function logUserActivity(\n  userId: string,\n  activityData: ActivityLogData,\n  options: ActivityLogOptions = {}\n): Promise<boolean> {\n  try {\n    const { skipIfError = true, includeTimestamp = true } = options\n\n    // Preparar datos de actividad\n    const logData = {\n      user_id: userId,\n      action: activityData.action,\n      category: activityData.category,\n      description: activityData.description,\n      metadata: activityData.metadata,\n      ip_address: activityData.ip_address,\n      user_agent: activityData.user_agent,\n      ...(includeTimestamp && { created_at: new Date().toISOString() }),\n    }\n\n    // Insertar en base de datos\n    const { error } = await supabaseAdmin.from('user_activity').insert(logData)\n\n    if (error) {\n      console.error('Error al registrar actividad:', error)\n      if (!skipIfError) {\n        throw error\n      }\n      return false\n    }\n\n    return true\n  } catch (error) {\n    console.error('Error en logUserActivity:', error)\n    if (!options.skipIfError) {\n      throw error\n    }\n    return false\n  }\n}\n\n/**\n * Función específica para logging de autenticación\n */\nexport async function logAuthActivity(\n  userId: string,\n  action: 'login' | 'logout' | 'register' | 'password_reset' | 'email_verification',\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'auth',\n    description: `Usuario ${action}`,\n    metadata: {\n      timestamp: new Date().toISOString(),\n      ...metadata,\n    },\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función específica para logging de perfil\n */\nexport async function logProfileActivity(\n  userId: string,\n  action:\n    | 'update_profile'\n    | 'upload_avatar'\n    | 'delete_avatar'\n    | 'add_address'\n    | 'update_address'\n    | 'delete_address',\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'profile',\n    description: `Perfil: ${action.replace('_', ' ')}`,\n    metadata,\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función específica para logging de seguridad\n */\nexport async function logSecurityActivity(\n  userId: string,\n  action:\n    | 'enable_2fa'\n    | 'disable_2fa'\n    | 'update_security_settings'\n    | 'suspicious_activity'\n    | 'password_change',\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'security',\n    description: `Seguridad: ${action.replace('_', ' ')}`,\n    metadata: {\n      severity: action === 'suspicious_activity' ? 'high' : 'medium',\n      ...metadata,\n    },\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función específica para logging de sesiones\n */\nexport async function logSessionActivity(\n  userId: string,\n  action: 'session_start' | 'session_end' | 'session_timeout' | 'revoke_session' | 'trust_device',\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'session',\n    description: `Sesión: ${action.replace('_', ' ')}`,\n    metadata: {\n      device_info: metadata?.device_info,\n      session_id: metadata?.session_id,\n      ...metadata,\n    },\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función específica para logging de órdenes\n */\nexport async function logOrderActivity(\n  userId: string,\n  action:\n    | 'create_order'\n    | 'update_order'\n    | 'cancel_order'\n    | 'payment_completed'\n    | 'order_shipped'\n    | 'order_delivered',\n  orderId: string,\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'order',\n    description: `Orden ${orderId}: ${action.replace('_', ' ')}`,\n    metadata: {\n      order_id: orderId,\n      ...metadata,\n    },\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función específica para logging de preferencias\n */\nexport async function logPreferenceActivity(\n  userId: string,\n  action: 'update_notifications' | 'update_display' | 'update_privacy' | 'update_theme',\n  metadata?: Record<string, any>,\n  request?: { ip?: string; userAgent?: string }\n): Promise<boolean> {\n  return logUserActivity(userId, {\n    action,\n    category: 'preference',\n    description: `Preferencias: ${action.replace('_', ' ')}`,\n    metadata,\n    ip_address: request?.ip,\n    user_agent: request?.userAgent,\n  })\n}\n\n/**\n * Función para obtener información del request (para usar en APIs)\n */\nexport function getRequestInfo(request: Request | any): { ip?: string; userAgent?: string } {\n  try {\n    const ip =\n      request.headers?.get?.('x-forwarded-for')?.split(',')[0]?.trim() ||\n      request.headers?.get?.('x-real-ip') ||\n      request.ip ||\n      'unknown'\n\n    const userAgent = request.headers?.get?.('user-agent') || 'unknown'\n\n    return { ip, userAgent }\n  } catch (error) {\n    console.error('Error obteniendo información del request:', error)\n    return { ip: 'unknown', userAgent: 'unknown' }\n  }\n}\n\n/**\n * Función para logging desde el cliente (usando fetch a la API)\n */\nexport async function logActivityFromClient(\n  action: string,\n  category: ActivityLogData['category'],\n  description?: string,\n  metadata?: Record<string, any>\n): Promise<boolean> {\n  try {\n    const response = await fetch('/api/user/activity', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        action,\n        category,\n        description,\n        metadata,\n      }),\n    })\n\n    if (!response.ok) {\n      console.error('Error al registrar actividad desde cliente:', response.statusText)\n      return false\n    }\n\n    const data = await response.json()\n    return data.success || false\n  } catch (error) {\n    console.error('Error en logActivityFromClient:', error)\n    return false\n  }\n}\n\n/**\n * Función para logging masivo (útil para migraciones o importaciones)\n */\nexport async function logBulkActivity(\n  activities: Array<{ userId: string; activityData: ActivityLogData }>,\n  options: ActivityLogOptions = {}\n): Promise<{ success: number; failed: number }> {\n  let success = 0\n  let failed = 0\n\n  for (const { userId, activityData } of activities) {\n    const result = await logUserActivity(userId, activityData, options)\n    if (result) {\n      success++\n    } else {\n      failed++\n    }\n  }\n\n  return { success, failed }\n}\n"],"names":["getRequestInfo","logActivityFromClient","logAuthActivity","logBulkActivity","logOrderActivity","logPreferenceActivity","logProfileActivity","logSecurityActivity","logSessionActivity","logUserActivity","userId","activityData","options","skipIfError","includeTimestamp","logData","user_id","action","category","description","metadata","ip_address","user_agent","created_at","Date","toISOString","error","supabaseAdmin","from","insert","console","request","timestamp","ip","userAgent","replace","severity","device_info","session_id","orderId","order_id","headers","get","split","trim","response","fetch","method","body","JSON","stringify","ok","statusText","data","json","success","activities","failed","result"],"mappings":"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"}