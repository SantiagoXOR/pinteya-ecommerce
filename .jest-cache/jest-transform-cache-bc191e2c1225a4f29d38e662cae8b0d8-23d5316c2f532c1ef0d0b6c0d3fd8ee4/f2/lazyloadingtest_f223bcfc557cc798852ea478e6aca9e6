e834bcdce5b7b138b917a20a7e266aed
// ===================================
// PINTEYA E-COMMERCE - LAZY LOADING PERFORMANCE TEST
// Tests para verificar que el lazy loading funciona correctamente
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// ===================================
// MOCKS
// ===================================
// Mock de performance para medir tiempos de carga
const mockPerformanceNow = _globals.jest.fn();
Object.defineProperty(global, 'performance', {
    value: {
        now: mockPerformanceNow
    },
    writable: true
});
// Mock de console para capturar logs de lazy loading
const mockConsoleLog = _globals.jest.spyOn(console, 'log').mockImplementation(()=>{});
// Mock de dynamic imports
const mockDynamicImport = _globals.jest.fn();
_globals.jest.mock('next/dynamic', ()=>{
    return (importFn, options)=>{
        const LazyComponent = /*#__PURE__*/ _react.default.lazy(()=>{
            mockDynamicImport();
            return importFn();
        });
        return /*#__PURE__*/ _react.default.forwardRef((props, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_react.default.Suspense, {
                fallback: options?.loading?.() || /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                }),
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyComponent, {
                    ...props,
                    ref: ref
                })
            }));
    };
});
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockPerformanceNow.mockReturnValue(1000);
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS DE LAZY LOADING
// ===================================
(0, _globals.describe)('Lazy Loading Performance Tests', ()=>{
    (0, _globals.it)('debe cargar componentes admin bajo demanda', async ()=>{
        _globals.jest.useFakeTimers();
        // Simular tiempo de carga inicial
        mockPerformanceNow.mockReturnValueOnce(1000);
        // Importar componente lazy
        const { LazyAdminDashboard } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/LazyAdminDashboard")));
        // Renderizar componente
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(LazyAdminDashboard, {}));
        // Verificar que muestra skeleton inicialmente
        (0, _globals.expect)(_react1.screen.getByText(/cargando/i) || _react1.screen.getAllByRole('generic').length > 0).toBeTruthy();
        // Simular tiempo después de la carga
        mockPerformanceNow.mockReturnValueOnce(1200);
        // Avanzar timers para que se complete la carga
        _globals.jest.advanceTimersByTime(1000);
        // Verificar que el componente se carga
        await (0, _react1.waitFor)(()=>{
            // El componente debería estar cargado o mostrar contenido
            (0, _globals.expect)(_react1.screen.queryByText(/cargando/i)).toBeFalsy();
        }, {
            timeout: 3000
        });
        _globals.jest.useRealTimers();
    });
    (0, _globals.it)('debe mostrar skeletons apropiados durante la carga', async ()=>{
        const { LazyProductList } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/products/LazyProductComponents")));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(LazyProductList, {}));
        // Verificar que muestra skeleton de productos
        const skeletonElements = _react1.screen.getAllByRole('generic');
        (0, _globals.expect)(skeletonElements.length).toBeGreaterThan(0);
        // Verificar estructura del skeleton
        (0, _globals.expect)(_react1.screen.getByText(/filtros/i) || skeletonElements.length > 4).toBeTruthy();
    });
    (0, _globals.it)('debe manejar errores de carga gracefully', async ()=>{
        // Mock de error en import dinámico
        const originalImport = _globals.jest.requireActual('next/dynamic');
        _globals.jest.doMock('next/dynamic', ()=>{
            return ()=>{
                throw new Error('Failed to load component');
            };
        });
        try {
            const { LazyLogisticsMap } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/logistics/LazyLogisticsComponents")));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(LazyLogisticsMap, {}));
            // Verificar que muestra error boundary
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(_react1.screen.getByText(/error de carga/i) || _react1.screen.getByText(/error/i)).toBeInTheDocument();
            });
        } catch (error) {
            // Error esperado durante el test
            (0, _globals.expect)(error).toBeDefined();
        }
    });
    (0, _globals.it)('debe precargar componentes cuando se solicita', async ()=>{
        const { usePreloadAdminComponents } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/LazyAdminDashboard")));
        // Crear componente de prueba que usa el hook
        function TestComponent() {
            const { preloadAdmin, preloadMonitoring } = usePreloadAdminComponents();
            _react.default.useEffect(()=>{
                preloadAdmin();
                preloadMonitoring();
            }, [
                preloadAdmin,
                preloadMonitoring
            ]);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Test Component"
            });
        }
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Verificar que el componente se renderiza
        (0, _globals.expect)(_react1.screen.getByText('Test Component')).toBeInTheDocument();
        // Los imports dinámicos deberían haberse llamado
        await (0, _react1.waitFor)(()=>{
            // Verificar que se intentó precargar (esto es difícil de testear directamente)
            (0, _globals.expect)(true).toBe(true); // Placeholder - en un entorno real verificaríamos network requests
        });
    });
    (0, _globals.it)('debe tener performance aceptable en carga de componentes', async ()=>{
        const startTime = 1000;
        const endTime = 1200;
        mockPerformanceNow.mockReturnValueOnce(startTime).mockReturnValueOnce(endTime);
        const { LazyCarrierPerformanceTable } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/logistics/LazyLogisticsComponents")));
        const start = performance.now();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(LazyCarrierPerformanceTable, {}));
        const end = performance.now();
        // Verificar que el tiempo de render inicial es rápido (< 200ms)
        const renderTime = end - start;
        (0, _globals.expect)(renderTime).toBeLessThan(200);
    });
    (0, _globals.it)('debe limpiar recursos correctamente al desmontar', async ()=>{
        const { LazyRealTimeDashboard } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/logistics/LazyLogisticsComponents")));
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(LazyRealTimeDashboard, {}));
        // Desmontar componente
        unmount();
        // Verificar que no hay memory leaks (esto es más conceptual en el test)
        (0, _globals.expect)(mockConsoleLog).not.toHaveBeenCalledWith(_globals.expect.stringContaining('memory leak'));
    });
    (0, _globals.it)('debe manejar múltiples componentes lazy simultáneamente', async ()=>{
        const components = await Promise.all([
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/LazyAdminDashboard"))),
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/products/LazyProductComponents"))),
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/logistics/LazyLogisticsComponents")))
        ]);
        const [{ LazyAdminDashboard }, { LazyProductList }, { LazyLogisticsMap }] = components;
        // Renderizar múltiples componentes lazy
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyAdminDashboard, {}),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyProductList, {}),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyLogisticsMap, {})
            ]
        }));
        // Verificar que todos muestran skeletons inicialmente
        const loadingElements = _react1.screen.getAllByText(/cargando/i);
        (0, _globals.expect)(loadingElements.length).toBeGreaterThanOrEqual(0); // Pueden ser skeletons sin texto "cargando"
        // Verificar que no hay conflictos entre componentes
        (0, _globals.expect)(_react1.screen.getByRole('main') || document.body).toBeInTheDocument();
    });
    (0, _globals.it)('debe optimizar bundle size con lazy loading', async ()=>{
        // Este test es más conceptual - verificamos que los imports son dinámicos
        const modulePromises = [
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/LazyAdminDashboard"))),
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/products/LazyProductComponents"))),
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/logistics/LazyLogisticsComponents")))
        ];
        // Verificar que los imports son promesas (lazy)
        modulePromises.forEach((modulePromise)=>{
            (0, _globals.expect)(modulePromise).toBeInstanceOf(Promise);
        });
        // Verificar que se resuelven correctamente
        const modules = await Promise.all(modulePromises);
        modules.forEach((module)=>{
            (0, _globals.expect)(module).toBeDefined();
            (0, _globals.expect)(typeof module).toBe('object');
        });
    });
    (0, _globals.it)('debe funcionar correctamente con Suspense boundaries', async ()=>{
        const { LazyProductForm } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../components/admin/products/LazyProductComponents")));
        // Renderizar con Suspense personalizado
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_react.default.Suspense, {
            fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Custom Loading..."
            }),
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyProductForm, {})
        }));
        // Verificar que muestra el fallback personalizado o el del componente
        (0, _globals.expect)(_react1.screen.getByText(/custom loading/i) || _react1.screen.getByText(/loading/i) || _react1.screen.getAllByRole('generic').length > 0).toBeTruthy();
    });
});

//# sourceMappingURL=data:application/json;base64,