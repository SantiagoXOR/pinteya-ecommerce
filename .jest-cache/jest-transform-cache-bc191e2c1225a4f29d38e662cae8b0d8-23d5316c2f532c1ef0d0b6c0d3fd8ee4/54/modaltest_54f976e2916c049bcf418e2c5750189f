f7e3bd2c1a34e3c926f9814e4eef078c
"use strict";
// Mock para Radix UI Portal
jest.mock('@radix-ui/react-dialog', ()=>({
        ...jest.requireActual('@radix-ui/react-dialog'),
        Portal: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "portal",
                children: children
            })
    }));
jest.mock('@radix-ui/react-alert-dialog', ()=>({
        ...jest.requireActual('@radix-ui/react-alert-dialog'),
        Portal: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "alert-portal",
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _modal = require("../../../components/ui/modal");
const _button = require("../../../components/ui/button");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Modal Components', ()=>{
    describe('Modal', ()=>{
        it('renders with title and description', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                title: "Test Modal",
                description: "Test description",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Modal content"
                })
            }));
            expect(_react.screen.getByText('Test Modal')).toBeInTheDocument();
            expect(_react.screen.getByText('Test description')).toBeInTheDocument();
            expect(_react.screen.getByText('Modal content')).toBeInTheDocument();
        });
        it('calls onOpenChange when close button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const onOpenChange = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                onOpenChange: onOpenChange,
                title: "Test Modal",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Content"
                })
            }));
            const closeButton = _react.screen.getByRole('button', {
                name: /cerrar/i
            });
            await user.click(closeButton);
            expect(onOpenChange).toHaveBeenCalledWith(false);
        });
        it('renders with different sizes', ()=>{
            const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                size: "sm",
                title: "Small Modal",
                children: "Content"
            }));
            expect(_react.screen.getByRole('dialog')).toHaveClass('max-w-sm');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                size: "lg",
                title: "Large Modal",
                children: "Content"
            }));
            expect(_react.screen.getByRole('dialog')).toHaveClass('max-w-lg');
        });
        it('renders with trigger', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                trigger: /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    children: "Open Modal"
                }),
                title: "Triggered Modal",
                children: "Modal content"
            }));
            const trigger = _react.screen.getByRole('button', {
                name: /open modal/i
            });
            await user.click(trigger);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Triggered Modal')).toBeInTheDocument();
            });
        });
    });
    describe('ConfirmModal', ()=>{
        it('renders with correct variant styling', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.ConfirmModal, {
                open: true,
                title: "Confirm Action",
                description: "Are you sure?",
                variant: "destructive",
                confirmText: "Delete",
                cancelText: "Cancel"
            }));
            expect(_react.screen.getByText('Confirm Action')).toBeInTheDocument();
            expect(_react.screen.getByText('Are you sure?')).toBeInTheDocument();
            expect(_react.screen.getByRole('button', {
                name: /delete/i
            })).toBeInTheDocument();
            expect(_react.screen.getByRole('button', {
                name: /cancel/i
            })).toBeInTheDocument();
        });
        it('calls onConfirm when confirm button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const onConfirm = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.ConfirmModal, {
                open: true,
                title: "Confirm",
                onConfirm: onConfirm,
                confirmText: "Confirm"
            }));
            const confirmButton = _react.screen.getByRole('button', {
                name: /confirm/i
            });
            await user.click(confirmButton);
            expect(onConfirm).toHaveBeenCalled();
        });
        it('calls onCancel when cancel button is clicked', async ()=>{
            const user = _userevent.default.setup();
            const onCancel = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.ConfirmModal, {
                open: true,
                title: "Confirm",
                onCancel: onCancel,
                cancelText: "Cancel"
            }));
            const cancelButton = _react.screen.getByRole('button', {
                name: /cancel/i
            });
            await user.click(cancelButton);
            expect(onCancel).toHaveBeenCalled();
        });
        it('shows loading state', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.ConfirmModal, {
                open: true,
                title: "Confirm",
                loading: true,
                confirmText: "Confirm"
            }));
            expect(_react.screen.getByText('Procesando...')).toBeInTheDocument();
            expect(_react.screen.getByRole('button', {
                name: /procesando/i
            })).toBeDisabled();
        });
        it('renders different variants with correct icons', ()=>{
            const variants = [
                'destructive',
                'warning',
                'success',
                'info'
            ];
            variants.forEach((variant)=>{
                const { unmount } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.ConfirmModal, {
                    open: true,
                    title: `${variant} modal`,
                    variant: variant
                }));
                // Verificar que el modal se renderiza (el ícono específico es difícil de testear)
                expect(_react.screen.getByText(`${variant} modal`)).toBeInTheDocument();
                unmount();
            });
        });
    });
    // Test de QuickViewModal eliminado ya que el componente fue removido
    // describe('QuickViewModal', () => {
    //   it('renders with large size by default', () => {
    //     render(
    //       <QuickViewModal open={true}>
    //         <div>Product details</div>
    //       </QuickViewModal>
    //     )
    //     expect(screen.getByText('Product details')).toBeInTheDocument()
    //     expect(screen.getByRole('dialog')).toHaveClass('max-w-4xl')
    //   })
    // })
    describe('AddToCartModal', ()=>{
        it('renders product information', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.AddToCartModal, {
                open: true,
                productName: "Test Product",
                productImage: "/test-image.jpg"
            }));
            expect(_react.screen.getByText('¡Producto agregado al carrito!')).toBeInTheDocument();
            expect(_react.screen.getByText(/test product/i)).toBeInTheDocument();
            expect(_react.screen.getByRole('img')).toHaveAttribute('src', '/test-image.jpg');
        });
        it('calls action handlers', async ()=>{
            const user = _userevent.default.setup();
            const onContinueShopping = jest.fn();
            const onGoToCart = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.AddToCartModal, {
                open: true,
                productName: "Test Product",
                onContinueShopping: onContinueShopping,
                onGoToCart: onGoToCart
            }));
            const continueButton = _react.screen.getByRole('button', {
                name: /seguir comprando/i
            });
            const cartButton = _react.screen.getByRole('button', {
                name: /ver carrito/i
            });
            await user.click(continueButton);
            expect(onContinueShopping).toHaveBeenCalled();
            await user.click(cartButton);
            expect(onGoToCart).toHaveBeenCalled();
        });
    });
    describe('useModal hook', ()=>{
        function TestComponent() {
            const { open, openModal, closeModal, toggleModal } = (0, _modal.useModal)();
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": "modal-state",
                        children: open ? 'open' : 'closed'
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: openModal,
                        children: "Open"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: closeModal,
                        children: "Close"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: toggleModal,
                        children: "Toggle"
                    })
                ]
            });
        }
        it('manages modal state correctly', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const state = _react.screen.getByTestId('modal-state');
            const openButton = _react.screen.getByRole('button', {
                name: /open/i
            });
            const closeButton = _react.screen.getByRole('button', {
                name: /close/i
            });
            const toggleButton = _react.screen.getByRole('button', {
                name: /toggle/i
            });
            // Initial state
            expect(state).toHaveTextContent('closed');
            // Open modal
            await user.click(openButton);
            expect(state).toHaveTextContent('open');
            // Close modal
            await user.click(closeButton);
            expect(state).toHaveTextContent('closed');
            // Toggle modal
            await user.click(toggleButton);
            expect(state).toHaveTextContent('open');
            await user.click(toggleButton);
            expect(state).toHaveTextContent('closed');
        });
        it('accepts default open state', ()=>{
            function TestComponentWithDefault() {
                const { open } = (0, _modal.useModal)(true);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "modal-state",
                    children: open ? 'open' : 'closed'
                });
            }
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponentWithDefault, {}));
            expect(_react.screen.getByTestId('modal-state')).toHaveTextContent('open');
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA attributes', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                title: "Accessible Modal",
                description: "Modal description",
                children: "Content"
            }));
            const dialog = _react.screen.getByRole('dialog');
            expect(dialog).toBeInTheDocument();
            expect(dialog).toHaveAttribute('aria-describedby');
        });
        it('focuses close button when opened', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                title: "Test Modal",
                children: "Content"
            }));
            // El foco debería estar en el modal o en el botón de cerrar
            const closeButton = _react.screen.getByRole('button', {
                name: /cerrar/i
            });
            expect(closeButton).toBeInTheDocument();
        });
        it('supports keyboard navigation', async ()=>{
            const user = _userevent.default.setup();
            const onOpenChange = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_modal.Modal, {
                open: true,
                onOpenChange: onOpenChange,
                title: "Test Modal",
                children: "Content"
            }));
            // Escape key should close modal
            await user.keyboard('{Escape}');
            expect(onOpenChange).toHaveBeenCalledWith(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,