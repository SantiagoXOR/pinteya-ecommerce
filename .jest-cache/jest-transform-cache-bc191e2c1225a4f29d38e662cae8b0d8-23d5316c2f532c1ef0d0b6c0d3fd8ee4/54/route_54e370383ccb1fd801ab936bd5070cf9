0ba9c98bbe2f4ef60de6da8abe0ef9dc
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/integrations/supabase");
const _config = require("../../../../lib/auth/config");
const runtime = 'nodejs';
async function GET(request) {
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            console.error('Cliente administrativo de Supabase no disponible en GET /api/user/orders');
            return _server.NextResponse.json({
                error: 'Servicio de base de datos no disponible'
            }, {
                status: 503
            });
        }
        // Obtener usuario autenticado usando NextAuth.js
        const session = await (0, _config.auth)();
        if (!session?.user?.id) {
            console.error('Usuario no autenticado en GET /api/user/orders');
            return _server.NextResponse.json({
                error: 'Usuario no autenticado'
            }, {
                status: 401
            });
        }
        // Obtener parámetros de consulta
        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page') || '1');
        const limit = parseInt(searchParams.get('limit') || '10');
        const status = searchParams.get('status');
        console.log(`[API] Obteniendo órdenes para usuario: ${session.user.id}`);
        // Construir query base usando directamente el ID del usuario de NextAuth.js
        let query = _supabase.supabaseAdmin.from('orders').select(`
        *,
        order_items (
          id,
          quantity,
          price,
          products (
            id,
            name,
            images
          )
        )
      `).eq('user_id', session.user.id);
        // Filtrar por status si se especifica
        if (status && status !== 'all') {
            query = query.eq('status', status);
        }
        // Aplicar paginación y ordenamiento
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const { data: orders, error, count } = await query.order('created_at', {
            ascending: false
        }).range(from, to);
        if (error) {
            console.error('Error al obtener órdenes:', error);
            return _server.NextResponse.json({
                error: 'Error al obtener órdenes'
            }, {
                status: 500
            });
        }
        // Calcular estadísticas
        const { data: stats } = await _supabase.supabaseAdmin.from('orders').select('status, total').eq('user_id', session.user.id);
        const statistics = {
            total_orders: stats?.length || 0,
            total_spent: stats?.reduce((sum, order)=>sum + parseFloat(order.total), 0) || 0,
            pending_orders: stats?.filter((order)=>order.status === 'pending').length || 0,
            completed_orders: stats?.filter((order)=>order.status === 'delivered').length || 0
        };
        return _server.NextResponse.json({
            success: true,
            data: orders || [],
            pagination: {
                page,
                limit,
                total: count || 0,
                pages: Math.ceil((count || 0) / limit)
            },
            statistics
        });
    } catch (error) {
        console.error('Error en GET /api/user/orders:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,