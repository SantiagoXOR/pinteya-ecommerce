{"version":3,"names":["cov_tyqwf5x4q","actualCoverage","s","GET","f","POST","PUT","runtime","request","authResult","_enterpriseauthutils","requireAdminAuth","success","b","_server","NextResponse","json","error","code","enterprise","status","context","url","URL","limit","parseInt","searchParams","get","offset","search","categoryId","isActive","result","_enterpriserlsutils","executeWithRLS","client","rlsContext","rlsFilters","createRLSFilters","query","from","select","count","Object","entries","forEach","key","value","eq","or","undefined","range","order","ascending","data","products","Error","message","total","pagination","hasMore","enforceRLS","auditLog","rls","enabled","role","permissions","securityLevel","timestamp","Date","toISOString","console","body","requiredFields","field","checkRLSPermission","slug","name","toLowerCase","replace","trim","productData","now","description","price","parseFloat","discounted_price","stock","category_id","brand","is_active","is_featured","images","created_at","updated_at","product","insert","single","operation","productId","updateData","update"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products-rls\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Productos con RLS Enterprise\r\n * Demuestra la integración completa de Row Level Security con utilidades enterprise\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { \r\n  requireAdminAuth,\r\n  withAdminAuth \r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS,\r\n  withRLS,\r\n  createRLSFilters,\r\n  checkRLSPermission\r\n} from '@/lib/auth/enterprise-rls-utils';\r\n\r\n// ===================================\r\n// GET /api/admin/products-rls - Listar productos con RLS\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Autenticación enterprise\r\n    const authResult = await requireAdminAuth(request, ['products_read']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const url = new URL(request.url);\r\n    \r\n    // Parámetros de consulta\r\n    const limit = parseInt(url.searchParams.get('limit') || '20');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n    const search = url.searchParams.get('search') || '';\r\n    const categoryId = url.searchParams.get('categoryId');\r\n    const isActive = url.searchParams.get('active');\r\n\r\n    // Ejecutar consulta con RLS\r\n    const result = await executeWithRLS(\r\n      context,\r\n      async (client, rlsContext) => {\r\n        // Crear filtros RLS automáticos\r\n        const rlsFilters = createRLSFilters(rlsContext, 'products');\r\n        \r\n        let query = client\r\n          .from('products')\r\n          .select(`\r\n            id,\r\n            name,\r\n            slug,\r\n            description,\r\n            price,\r\n            discounted_price,\r\n            stock,\r\n            category_id,\r\n            brand,\r\n            is_active,\r\n            is_featured,\r\n            created_at,\r\n            updated_at,\r\n            categories (\r\n              id,\r\n              name,\r\n              slug\r\n            )\r\n          `, { count: 'exact' });\r\n\r\n        // Aplicar filtros RLS automáticos\r\n        Object.entries(rlsFilters).forEach(([key, value]) => {\r\n          query = query.eq(key, value);\r\n        });\r\n\r\n        // Aplicar filtros de búsqueda\r\n        if (search) {\r\n          query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);\r\n        }\r\n\r\n        if (categoryId) {\r\n          query = query.eq('category_id', parseInt(categoryId));\r\n        }\r\n\r\n        if (isActive !== null && isActive !== undefined) {\r\n          query = query.eq('is_active', isActive === 'true');\r\n        }\r\n\r\n        // Aplicar paginación\r\n        query = query\r\n          .range(offset, offset + limit - 1)\r\n          .order('created_at', { ascending: false });\r\n\r\n        const { data: products, error, count } = await query;\r\n\r\n        if (error) {\r\n          throw new Error(`Error consultando productos: ${error.message}`);\r\n        }\r\n\r\n        return {\r\n          products: products || [],\r\n          total: count || 0,\r\n          pagination: {\r\n            limit,\r\n            offset,\r\n            hasMore: (count || 0) > offset + limit\r\n          }\r\n        };\r\n      },\r\n      {\r\n        enforceRLS: true,\r\n        auditLog: true\r\n      }\r\n    );\r\n\r\n    if (!result.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: result.error,\r\n          code: result.code,\r\n          rls: true,\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: result.data,\r\n      rls: {\r\n        enabled: true,\r\n        context: {\r\n          role: context.role,\r\n          permissions: context.permissions,\r\n          securityLevel: context.securityLevel\r\n        }\r\n      },\r\n      enterprise: true,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('[API] Error en GET /api/admin/products-rls:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        rls: true,\r\n        enterprise: true\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST /api/admin/products-rls - Crear producto con RLS\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const authResult = await requireAdminAuth(request, ['products_create']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n\r\n    // Validar datos del producto\r\n    const requiredFields = ['name', 'price', 'category_id'];\r\n    for (const field of requiredFields) {\r\n      if (!body[field]) {\r\n        return NextResponse.json(\r\n          { \r\n            error: `Campo requerido: ${field}`,\r\n            code: 'MISSING_FIELD',\r\n            enterprise: true\r\n          },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Ejecutar creación con RLS\r\n    const result = await executeWithRLS(\r\n      context,\r\n      async (client, rlsContext) => {\r\n        // Verificar permisos específicos\r\n        if (!checkRLSPermission(rlsContext, 'products_create')) {\r\n          throw new Error('Permisos insuficientes para crear productos');\r\n        }\r\n\r\n        // Crear slug automático\r\n        const slug = body.name\r\n          .toLowerCase()\r\n          .replace(/[^a-z0-9\\s-]/g, '')\r\n          .replace(/\\s+/g, '-')\r\n          .replace(/-+/g, '-')\r\n          .trim();\r\n\r\n        const productData = {\r\n          name: body.name,\r\n          slug: `${slug}-${Date.now()}`, // Asegurar unicidad\r\n          description: body.description || '',\r\n          price: parseFloat(body.price),\r\n          discounted_price: body.discounted_price ? parseFloat(body.discounted_price) : null,\r\n          stock: parseInt(body.stock || '0'),\r\n          category_id: parseInt(body.category_id),\r\n          brand: body.brand || '',\r\n          is_active: body.is_active !== false,\r\n          is_featured: body.is_featured === true,\r\n          images: body.images || {},\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        };\r\n\r\n        const { data: product, error } = await client\r\n          .from('products')\r\n          .insert(productData)\r\n          .select(`\r\n            id,\r\n            name,\r\n            slug,\r\n            description,\r\n            price,\r\n            discounted_price,\r\n            stock,\r\n            category_id,\r\n            brand,\r\n            is_active,\r\n            is_featured,\r\n            created_at,\r\n            updated_at\r\n          `)\r\n          .single();\r\n\r\n        if (error) {\r\n          throw new Error(`Error creando producto: ${error.message}`);\r\n        }\r\n\r\n        return product;\r\n      },\r\n      {\r\n        enforceRLS: true,\r\n        auditLog: true\r\n      }\r\n    );\r\n\r\n    if (!result.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: result.error,\r\n          code: result.code,\r\n          rls: true,\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        product: result.data,\r\n        message: 'Producto creado exitosamente'\r\n      },\r\n      rls: {\r\n        enabled: true,\r\n        operation: 'CREATE',\r\n        context: {\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        }\r\n      },\r\n      enterprise: true,\r\n      timestamp: new Date().toISOString()\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('[API] Error en POST /api/admin/products-rls:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        rls: true,\r\n        enterprise: true\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT /api/admin/products-rls - Actualizar producto con RLS\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const authResult = await requireAdminAuth(request, ['products_update']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n    const body = await request.json();\r\n    const url = new URL(request.url);\r\n    const productId = url.searchParams.get('id');\r\n\r\n    if (!productId) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'ID de producto requerido',\r\n          code: 'MISSING_PRODUCT_ID',\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Ejecutar actualización con RLS\r\n    const result = await executeWithRLS(\r\n      context,\r\n      async (client, rlsContext) => {\r\n        // Verificar permisos específicos\r\n        if (!checkRLSPermission(rlsContext, 'products_update')) {\r\n          throw new Error('Permisos insuficientes para actualizar productos');\r\n        }\r\n\r\n        // Preparar datos de actualización\r\n        const updateData: any = {\r\n          updated_at: new Date().toISOString()\r\n        };\r\n\r\n        // Solo actualizar campos proporcionados\r\n        if (body.name !== undefined) {updateData.name = body.name;}\r\n        if (body.description !== undefined) {updateData.description = body.description;}\r\n        if (body.price !== undefined) {updateData.price = parseFloat(body.price);}\r\n        if (body.discounted_price !== undefined) {\r\n          updateData.discounted_price = body.discounted_price ? parseFloat(body.discounted_price) : null;\r\n        }\r\n        if (body.stock !== undefined) {updateData.stock = parseInt(body.stock);}\r\n        if (body.category_id !== undefined) {updateData.category_id = parseInt(body.category_id);}\r\n        if (body.brand !== undefined) {updateData.brand = body.brand;}\r\n        if (body.is_active !== undefined) {updateData.is_active = body.is_active;}\r\n        if (body.is_featured !== undefined) {updateData.is_featured = body.is_featured;}\r\n        if (body.images !== undefined) {updateData.images = body.images;}\r\n\r\n        const { data: product, error } = await client\r\n          .from('products')\r\n          .update(updateData)\r\n          .eq('id', parseInt(productId))\r\n          .select(`\r\n            id,\r\n            name,\r\n            slug,\r\n            description,\r\n            price,\r\n            discounted_price,\r\n            stock,\r\n            category_id,\r\n            brand,\r\n            is_active,\r\n            is_featured,\r\n            updated_at\r\n          `)\r\n          .single();\r\n\r\n        if (error) {\r\n          throw new Error(`Error actualizando producto: ${error.message}`);\r\n        }\r\n\r\n        return product;\r\n      },\r\n      {\r\n        enforceRLS: true,\r\n        auditLog: true\r\n      }\r\n    );\r\n\r\n    if (!result.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: result.error,\r\n          code: result.code,\r\n          rls: true,\r\n          enterprise: true\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        product: result.data,\r\n        message: 'Producto actualizado exitosamente'\r\n      },\r\n      rls: {\r\n        enabled: true,\r\n        operation: 'UPDATE',\r\n        context: {\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        }\r\n      },\r\n      enterprise: true,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('[API] Error en PUT /api/admin/products-rls:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        rls: true,\r\n        enterprise: true\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}