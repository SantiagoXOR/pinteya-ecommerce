{"version":3,"names":["PendingOrdersList","onStartRoute","onSelectOrder","cov_2xh7v4ki6","f","orders","setOrders","s","_react","useState","stats","setStats","loading","setLoading","selectedOrders","setSelectedOrders","Set","optimizing","setOptimizing","useEffect","fetchPendingOrders","response","fetch","ok","b","Error","result","json","success","data","allOrderIds","map","order","id","error","console","_sonner","toast","toggleOrderSelection","orderId","newSelection","has","delete","add","handleStartOptimizedRoute","selectedOrdersList","filter","length","stops","address","shippingAddress","fullAddress","priority","status","method","headers","body","JSON","stringify","summary","totalStops","Math","round","totalDistance","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","dateString","Date","toLocaleDateString","day","month","year","hour","minute","_jsxruntime","jsx","_card","Card","CardContent","className","jsxs","CardHeader","CardTitle","_lucidereact","Package","totalOrders","totalValue","totalItems","totalWeight","Navigation","size","_button","Button","onClick","disabled","Fragment","CheckCircle","orderNumber","_badge","Badge","variant","total","MapPin","Clock","createdAt","items","notes","AlertCircle"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\PendingOrdersList.tsx"],"sourcesContent":["/**\r\n * Componente para mostrar lista de órdenes pendientes de entrega\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Package, \r\n  MapPin, \r\n  Clock, \r\n  DollarSign, \r\n  Navigation,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Truck,\r\n  Route\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface OrderItem {\r\n  id: number;\r\n  productName: string;\r\n  quantity: number;\r\n  price: number;\r\n  weight: number;\r\n}\r\n\r\ninterface ShippingAddress {\r\n  streetName: string;\r\n  streetNumber: string;\r\n  floor?: string;\r\n  apartment?: string;\r\n  cityName: string;\r\n  stateName: string;\r\n  zipCode: string;\r\n  fullAddress: string;\r\n}\r\n\r\ninterface PendingOrder {\r\n  id: number;\r\n  orderNumber: string;\r\n  total: number;\r\n  status: string;\r\n  paymentStatus: string;\r\n  fulfillmentStatus: string;\r\n  createdAt: string;\r\n  estimatedDelivery?: string;\r\n  shippingAddress: ShippingAddress;\r\n  items: OrderItem[];\r\n  totalItems: number;\r\n  totalWeight: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface PendingOrdersData {\r\n  orders: PendingOrder[];\r\n  stats: {\r\n    totalOrders: number;\r\n    totalValue: number;\r\n    totalItems: number;\r\n    totalWeight: number;\r\n    averageOrderValue: number;\r\n  };\r\n  driver: {\r\n    id: string;\r\n    name: string;\r\n    status: string;\r\n  };\r\n}\r\n\r\ninterface PendingOrdersListProps {\r\n  onStartRoute?: (orders: PendingOrder[]) => void;\r\n  onSelectOrder?: (order: PendingOrder) => void;\r\n}\r\n\r\nexport default function PendingOrdersList({ onStartRoute, onSelectOrder }: PendingOrdersListProps) {\r\n  const [orders, setOrders] = useState<PendingOrder[]>([]);\r\n  const [stats, setStats] = useState<PendingOrdersData['stats'] | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedOrders, setSelectedOrders] = useState<Set<number>>(new Set());\r\n  const [optimizing, setOptimizing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPendingOrders();\r\n  }, []);\r\n\r\n  const fetchPendingOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/driver/pending-orders');\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Error al cargar órdenes pendientes');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        setOrders(result.data.orders);\r\n        setStats(result.data.stats);\r\n        \r\n        // Seleccionar todas las órdenes por defecto\r\n        const allOrderIds = new Set(result.data.orders.map((order: PendingOrder) => order.id));\r\n        setSelectedOrders(allOrderIds);\r\n      } else {\r\n        throw new Error(result.error || 'Error desconocido');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching pending orders:', error);\r\n      toast.error('Error al cargar órdenes pendientes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleOrderSelection = (orderId: number) => {\r\n    const newSelection = new Set(selectedOrders);\r\n    if (newSelection.has(orderId)) {\r\n      newSelection.delete(orderId);\r\n    } else {\r\n      newSelection.add(orderId);\r\n    }\r\n    setSelectedOrders(newSelection);\r\n  };\r\n\r\n  const handleStartOptimizedRoute = async () => {\r\n    const selectedOrdersList = orders.filter(order => selectedOrders.has(order.id));\r\n    \r\n    if (selectedOrdersList.length === 0) {\r\n      toast.error('Selecciona al menos una orden para iniciar la ruta');\r\n      return;\r\n    }\r\n\r\n    setOptimizing(true);\r\n    \r\n    try {\r\n      // Preparar datos para optimización\r\n      const stops = selectedOrdersList.map(order => ({\r\n        orderId: order.id,\r\n        address: order.shippingAddress.fullAddress,\r\n        priority: order.status === 'confirmed' ? 1 : 0\r\n      }));\r\n\r\n      const response = await fetch('/api/driver/optimize-route', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ stops })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al optimizar la ruta');\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        toast.success(`Ruta optimizada: ${result.data.summary.totalStops} paradas, ${Math.round(result.data.summary.totalDistance)}km`);\r\n        \r\n        if (onStartRoute) {\r\n          onStartRoute(selectedOrdersList);\r\n        }\r\n      } else {\r\n        throw new Error(result.error || 'Error en optimización');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error optimizing route:', error);\r\n      toast.error('Error al optimizar la ruta');\r\n    } finally {\r\n      setOptimizing(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('es-AR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n            <span className=\"ml-2\">Cargando órdenes...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Estadísticas del día */}\r\n      {stats && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Package className=\"h-5 w-5\" />\r\n              Resumen del Día\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">{stats.totalOrders}</div>\r\n                <div className=\"text-sm text-gray-600\">Órdenes</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(stats.totalValue)}</div>\r\n                <div className=\"text-sm text-gray-600\">Valor Total</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-orange-600\">{stats.totalItems}</div>\r\n                <div className=\"text-sm text-gray-600\">Productos</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">{Math.round(stats.totalWeight)}kg</div>\r\n                <div className=\"text-sm text-gray-600\">Peso Total</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Controles de ruta */}\r\n      <Card>\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Navigation className=\"h-5 w-5\" />\r\n               <span className=\"font-medium\">\r\n                 {selectedOrders.size} de {orders.length} órdenes seleccionadas\r\n               </span>\r\n            </div>\r\n            <Button \r\n              onClick={handleStartOptimizedRoute}\r\n              disabled={selectedOrders.size === 0 || optimizing}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              {optimizing ? (\r\n                <>\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\r\n                  Optimizando...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Navigation className=\"h-4 w-4\" />\r\n                  Iniciar Recorrido\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Lista de órdenes */}\r\n      <div className=\"space-y-3\">\r\n        {orders.length === 0 ? (\r\n          <Card>\r\n            <CardContent className=\"p-6 text-center\">\r\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-semibold mb-2\">¡No hay entregas pendientes!</h3>\r\n              <p className=\"text-gray-600\">Todas las órdenes del día han sido completadas.</p>\r\n            </CardContent>\r\n          </Card>\r\n        ) : (\r\n          orders.map((order) => (\r\n            <Card \r\n              key={order.id} \r\n              className={`cursor-pointer transition-all ${\r\n                selectedOrders.has(order.id) \r\n                  ? 'ring-2 ring-blue-500 bg-blue-50' \r\n                  : 'hover:shadow-md'\r\n              }`}\r\n              onClick={() => toggleOrderSelection(order.id)}\r\n            >\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"flex items-start justify-between mb-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className={`w-4 h-4 rounded border-2 flex items-center justify-center ${\r\n                      selectedOrders.has(order.id) \r\n                        ? 'bg-blue-500 border-blue-500' \r\n                        : 'border-gray-300'\r\n                    }`}>\r\n                      {selectedOrders.has(order.id) && (\r\n                        <CheckCircle className=\"h-3 w-3 text-white\" />\r\n                      )}\r\n                    </div>\r\n                    <h3 className=\"font-semibold\">{order.orderNumber}</h3>\r\n                    <Badge variant={order.status === 'paid' ? 'default' : 'secondary'}>\r\n                      {order.status === 'paid' ? 'Pagado' : 'Confirmado'}\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div className=\"font-bold text-green-600\">{formatCurrency(order.total)}</div>\r\n                    <div className=\"text-sm text-gray-500\">{order.totalItems} productos</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-start gap-2\">\r\n                    <MapPin className=\"h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0\" />\r\n                    <span className=\"text-sm\">{order.shippingAddress.fullAddress}</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Clock className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm\">Creado: {formatDate(order.createdAt)}</span>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600\">\r\n                    <span>{order.totalWeight}kg</span>\r\n                    <span>•</span>\r\n                    <span>{order.items.length} tipos de productos</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {order.notes && (\r\n                  <div className=\"mt-3 p-2 bg-yellow-50 rounded border-l-4 border-yellow-400\">\r\n                    <div className=\"flex items-start gap-2\">\r\n                      <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\r\n                      <span className=\"text-sm text-yellow-800\">{order.notes}</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}