361b1d4a3cad08f605e54d272956e88d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const CustomSelect = ({ options, onChange })=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [selectedOption, setSelectedOption] = (0, _react.useState)(options[0]);
    const selectRef = (0, _react.useRef)(null);
    // Function to close the dropdown when a click occurs outside the component
    const handleClickOutside = (0, _react.useCallback)((event)=>{
        if (selectRef.current && event.target && !selectRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        // Add a click event listener to the document
        document.addEventListener("click", handleClickOutside);
        // Clean up the event listener when the component unmounts
        return ()=>{
            document.removeEventListener("click", handleClickOutside);
        };
    }, [
        handleClickOutside
    ]);
    const toggleDropdown = (0, _react.useCallback)(()=>{
        setIsOpen((prev)=>!prev);
    }, []);
    const handleOptionClick = (0, _react.useCallback)((option)=>{
        setSelectedOption(option);
        setIsOpen(false);
        // Call onChange if it's defined
        if (onChange) {
            onChange(option.value);
        }
    }, [
        onChange
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "custom-select custom-select-2 flex-shrink-0 relative",
        ref: selectRef,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-selected whitespace-nowrap ${isOpen ? "select-arrow-active" : ""}`,
                onClick: toggleDropdown,
                children: selectedOption.label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-items ${isOpen ? "" : "select-hide"}`,
                children: options.slice(1).map((option, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        onClick: ()=>handleOptionClick(option),
                        className: `select-item ${selectedOption === option ? "same-as-selected" : ""}`,
                        children: option.label
                    }, index))
            })
        ]
    });
};
const _default = CustomSelect;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcU2hvcFdpdGhTaWRlYmFyXFxDdXN0b21TZWxlY3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBDdXN0b21TZWxlY3QgPSAoeyBvcHRpb25zLCBvbkNoYW5nZSB9OiB7IG9wdGlvbnM6IGFueVtdOyBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQgfSkgPT4ge1xyXG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3NlbGVjdGVkT3B0aW9uLCBzZXRTZWxlY3RlZE9wdGlvbl0gPSB1c2VTdGF0ZShvcHRpb25zWzBdKTtcclxuICBjb25zdCBzZWxlY3RSZWYgPSB1c2VSZWY8YW55PihudWxsKTtcclxuXHJcbiAgLy8gRnVuY3Rpb24gdG8gY2xvc2UgdGhlIGRyb3Bkb3duIHdoZW4gYSBjbGljayBvY2N1cnMgb3V0c2lkZSB0aGUgY29tcG9uZW50XHJcbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICBpZiAoc2VsZWN0UmVmLmN1cnJlbnQgJiYgZXZlbnQudGFyZ2V0ICYmICFzZWxlY3RSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcclxuICAgICAgc2V0SXNPcGVuKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyBBZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgZG9jdW1lbnRcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGlja091dHNpZGUpO1xyXG5cclxuICAgIC8vIENsZWFuIHVwIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHNcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGlja091dHNpZGUpO1xyXG4gICAgfTtcclxuICB9LCBbaGFuZGxlQ2xpY2tPdXRzaWRlXSk7XHJcblxyXG4gIGNvbnN0IHRvZ2dsZURyb3Bkb3duID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc2V0SXNPcGVuKChwcmV2KSA9PiAhcHJldik7XHJcbiAgfSwgW10pO1xyXG5cclxuICBjb25zdCBoYW5kbGVPcHRpb25DbGljayA9IHVzZUNhbGxiYWNrKFxyXG4gICAgKG9wdGlvbjogYW55KSA9PiB7XHJcbiAgICAgIHNldFNlbGVjdGVkT3B0aW9uKG9wdGlvbik7XHJcbiAgICAgIHNldElzT3BlbihmYWxzZSk7XHJcbiAgICAgIC8vIENhbGwgb25DaGFuZ2UgaWYgaXQncyBkZWZpbmVkXHJcbiAgICAgIGlmIChvbkNoYW5nZSkge1xyXG4gICAgICAgIG9uQ2hhbmdlKG9wdGlvbi52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBbb25DaGFuZ2VdXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPVwiY3VzdG9tLXNlbGVjdCBjdXN0b20tc2VsZWN0LTIgZmxleC1zaHJpbmstMCByZWxhdGl2ZVwiXHJcbiAgICAgIHJlZj17c2VsZWN0UmVmfVxyXG4gICAgPlxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPXtgc2VsZWN0LXNlbGVjdGVkIHdoaXRlc3BhY2Utbm93cmFwICR7XHJcbiAgICAgICAgICBpc09wZW4gPyBcInNlbGVjdC1hcnJvdy1hY3RpdmVcIiA6IFwiXCJcclxuICAgICAgICB9YH1cclxuICAgICAgICBvbkNsaWNrPXt0b2dnbGVEcm9wZG93bn1cclxuICAgICAgPlxyXG4gICAgICAgIHtzZWxlY3RlZE9wdGlvbi5sYWJlbH1cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgc2VsZWN0LWl0ZW1zICR7aXNPcGVuID8gXCJcIiA6IFwic2VsZWN0LWhpZGVcIn1gfT5cclxuICAgICAgICB7b3B0aW9ucy5zbGljZSgxKS5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAga2V5PXtpbmRleH1cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlT3B0aW9uQ2xpY2sob3B0aW9uKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgc2VsZWN0LWl0ZW0gJHtcclxuICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbiA9PT0gb3B0aW9uID8gXCJzYW1lLWFzLXNlbGVjdGVkXCIgOiBcIlwiXHJcbiAgICAgICAgICAgIH1gfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEN1c3RvbVNlbGVjdDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkN1c3RvbVNlbGVjdCIsIm9wdGlvbnMiLCJvbkNoYW5nZSIsImlzT3BlbiIsInNldElzT3BlbiIsInVzZVN0YXRlIiwic2VsZWN0ZWRPcHRpb24iLCJzZXRTZWxlY3RlZE9wdGlvbiIsInNlbGVjdFJlZiIsInVzZVJlZiIsImhhbmRsZUNsaWNrT3V0c2lkZSIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJjdXJyZW50IiwidGFyZ2V0IiwiY29udGFpbnMiLCJ1c2VFZmZlY3QiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG9nZ2xlRHJvcGRvd24iLCJwcmV2IiwiaGFuZGxlT3B0aW9uQ2xpY2siLCJvcHRpb24iLCJ2YWx1ZSIsImRpdiIsImNsYXNzTmFtZSIsInJlZiIsIm9uQ2xpY2siLCJsYWJlbCIsInNsaWNlIiwibWFwIiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7K0JBc0VBOzs7ZUFBQTs7OzsrREF0RWdFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFaEUsTUFBTUEsZUFBZSxDQUFDLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFzRDtJQUM3RixNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBQ3JDLE1BQU0sQ0FBQ0MsZ0JBQWdCQyxrQkFBa0IsR0FBR0YsSUFBQUEsZUFBUSxFQUFDSixPQUFPLENBQUMsRUFBRTtJQUMvRCxNQUFNTyxZQUFZQyxJQUFBQSxhQUFNLEVBQU07SUFFOUIsMkVBQTJFO0lBQzNFLE1BQU1DLHFCQUFxQkMsSUFBQUEsa0JBQVcsRUFBQyxDQUFDQztRQUN0QyxJQUFJSixVQUFVSyxPQUFPLElBQUlELE1BQU1FLE1BQU0sSUFBSSxDQUFDTixVQUFVSyxPQUFPLENBQUNFLFFBQVEsQ0FBQ0gsTUFBTUUsTUFBTSxHQUFXO1lBQzFGVixVQUFVO1FBQ1o7SUFDRixHQUFHLEVBQUU7SUFFTFksSUFBQUEsZ0JBQVMsRUFBQztRQUNSLDZDQUE2QztRQUM3Q0MsU0FBU0MsZ0JBQWdCLENBQUMsU0FBU1I7UUFFbkMsMERBQTBEO1FBQzFELE9BQU87WUFDTE8sU0FBU0UsbUJBQW1CLENBQUMsU0FBU1Q7UUFDeEM7SUFDRixHQUFHO1FBQUNBO0tBQW1CO0lBRXZCLE1BQU1VLGlCQUFpQlQsSUFBQUEsa0JBQVcsRUFBQztRQUNqQ1AsVUFBVSxDQUFDaUIsT0FBUyxDQUFDQTtJQUN2QixHQUFHLEVBQUU7SUFFTCxNQUFNQyxvQkFBb0JYLElBQUFBLGtCQUFXLEVBQ25DLENBQUNZO1FBQ0NoQixrQkFBa0JnQjtRQUNsQm5CLFVBQVU7UUFDVixnQ0FBZ0M7UUFDaEMsSUFBSUYsVUFBVTtZQUNaQSxTQUFTcUIsT0FBT0MsS0FBSztRQUN2QjtJQUNGLEdBQ0E7UUFBQ3RCO0tBQVM7SUFHWixxQkFDRSxzQkFBQ3VCO1FBQ0NDLFdBQVU7UUFDVkMsS0FBS25COzswQkFFTCxxQkFBQ2lCO2dCQUNDQyxXQUFXLENBQUMsa0NBQWtDLEVBQzVDdkIsU0FBUyx3QkFBd0IsSUFDakM7Z0JBQ0Z5QixTQUFTUjswQkFFUmQsZUFBZXVCLEtBQUs7OzBCQUV2QixxQkFBQ0o7Z0JBQUlDLFdBQVcsQ0FBQyxhQUFhLEVBQUV2QixTQUFTLEtBQUssZUFBZTswQkFDMURGLFFBQVE2QixLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDLENBQUNSLFFBQVFTLHNCQUM3QixxQkFBQ1A7d0JBRUNHLFNBQVMsSUFBTU4sa0JBQWtCQzt3QkFDakNHLFdBQVcsQ0FBQyxZQUFZLEVBQ3RCcEIsbUJBQW1CaUIsU0FBUyxxQkFBcUIsSUFDakQ7a0NBRURBLE9BQU9NLEtBQUs7dUJBTlJHOzs7O0FBWWpCO01BRUEsV0FBZWhDIn0=