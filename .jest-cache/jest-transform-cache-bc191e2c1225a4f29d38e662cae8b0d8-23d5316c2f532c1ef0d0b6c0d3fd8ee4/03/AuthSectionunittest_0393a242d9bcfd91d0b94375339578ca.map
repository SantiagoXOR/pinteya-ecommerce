{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\unit\\AuthSection.unit.test.tsx"],"sourcesContent":["/**\r\n * Test simplificado para AuthSection con NextAuth\r\n * Enfocado en validar la funcionalidad core sin complejidades\r\n */\r\n\r\nimport React from 'react'\r\nimport { render, screen, fireEvent } from '@testing-library/react'\r\nimport { useSession, signIn } from 'next-auth/react'\r\nimport AuthSection from '../../AuthSection'\r\n\r\n// Mock NextAuth\r\njest.mock('next-auth/react', () => ({\r\n  useSession: jest.fn(),\r\n  signIn: jest.fn()\r\n}))\r\n\r\nconst mockUseSession = useSession as jest.MockedFunction<typeof useSession>\r\nconst mockSignIn = signIn as jest.MockedFunction<typeof signIn>\r\n\r\n// Mock user data\r\nconst mockUser = {\r\n  id: 'user_123',\r\n  name: 'Juan Pérez',\r\n  email: 'juan@example.com'\r\n}\r\n\r\ndescribe('AuthSection - Simplified Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('Unauthenticated State', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'unauthenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should render sign in button when unauthenticated', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toBeInTheDocument()\r\n      expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30')\r\n    })\r\n\r\n    it('should render Google icon in button', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const svg = screen.getByRole('button').querySelector('svg')\r\n      expect(svg).toBeInTheDocument()\r\n      expect(svg).toHaveClass('w-5', 'h-5')\r\n    })\r\n\r\n    it('should call signIn when button is clicked', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      fireEvent.click(button)\r\n      \r\n      expect(mockSignIn).toHaveBeenCalledWith('google')\r\n    })\r\n\r\n    it('should have correct CSS classes for translucent button', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toHaveClass(\r\n        'relative',\r\n        'bg-white/20',\r\n        'hover:bg-white/30',\r\n        'backdrop-blur-sm',\r\n        'border-2',\r\n        'border-white/30',\r\n        'rounded-full'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Authenticated State', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: { user: mockUser },\r\n        status: 'authenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should render admin link when authenticated', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const adminLink = screen.getByRole('link')\r\n      expect(adminLink).toBeInTheDocument()\r\n      expect(adminLink).toHaveAttribute('href', '/admin')\r\n    })\r\n\r\n    it('should render user avatar when authenticated', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const avatar = screen.getByText('J') // First letter of Juan\r\n      expect(avatar).toBeInTheDocument()\r\n    })\r\n\r\n    it('should have admin button with correct styling', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const adminLink = screen.getByRole('link')\r\n      expect(adminLink).toHaveClass(\r\n        'bg-orange-600',\r\n        'hover:bg-orange-700',\r\n        'text-white'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Loading State', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'loading'\r\n      } as any)\r\n    })\r\n\r\n    it('should render loading skeleton', () => {\r\n      render(<AuthSection />)\r\n\r\n      const skeleton = screen.getByText((content, element) => {\r\n        return element?.classList.contains('animate-pulse') || false\r\n      })\r\n      expect(skeleton).toHaveClass('animate-pulse')\r\n    })\r\n  })\r\n\r\n  describe('Variants', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'unauthenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should render mobile variant correctly', () => {\r\n      render(<AuthSection variant=\"mobile\" />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toHaveClass('hover:scale-110')\r\n    })\r\n\r\n    it('should render topbar variant with text', () => {\r\n      render(<AuthSection variant=\"topbar\" />)\r\n      \r\n      const button = screen.getByText('Iniciar Sesión')\r\n      expect(button).toBeInTheDocument()\r\n      expect(button).toHaveClass('text-gray-800')\r\n    })\r\n\r\n    it('should render default variant correctly', () => {\r\n      render(<AuthSection variant=\"default\" />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toHaveClass('hover:scale-105')\r\n    })\r\n  })\r\n\r\n  describe('Accessibility', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'unauthenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should be keyboard accessible', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toBeInTheDocument()\r\n      \r\n      // Button should be focusable\r\n      button.focus()\r\n      expect(document.activeElement).toBe(button)\r\n    })\r\n\r\n    it('should have proper button role', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Visual Consistency', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'unauthenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should maintain consistent icon size across variants', () => {\r\n      const variants = ['default', 'mobile'] as const\r\n      \r\n      variants.forEach(variant => {\r\n        const { unmount } = render(<AuthSection variant={variant} />)\r\n        \r\n        const svg = screen.getByRole('button').querySelector('svg')\r\n        expect(svg).toHaveClass('w-5', 'h-5')\r\n        \r\n        unmount()\r\n      })\r\n    })\r\n\r\n    it('should have hover effects', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toHaveClass('hover:bg-white/30')\r\n    })\r\n\r\n    it('should have transform effects', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const button = screen.getByRole('button')\r\n      expect(button).toHaveClass('transform', 'hover:scale-105')\r\n    })\r\n  })\r\n\r\n  describe('Google Branding', () => {\r\n    beforeEach(() => {\r\n      mockUseSession.mockReturnValue({\r\n        data: null,\r\n        status: 'unauthenticated'\r\n      } as any)\r\n    })\r\n\r\n    it('should have Google colors in SVG paths', () => {\r\n      render(<AuthSection />)\r\n      \r\n      const svg = screen.getByRole('button').querySelector('svg')\r\n      const paths = svg?.querySelectorAll('path')\r\n      \r\n      expect(paths).toHaveLength(4)\r\n      \r\n      // Check for Google brand colors\r\n      const colors = Array.from(paths || []).map(path => path.getAttribute('fill'))\r\n      expect(colors).toContain('#4285F4') // Google Blue\r\n      expect(colors).toContain('#34A853') // Google Green\r\n      expect(colors).toContain('#FBBC05') // Google Yellow\r\n      expect(colors).toContain('#EA4335') // Google Red\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","useSession","fn","signIn","mockUseSession","mockSignIn","mockUser","id","name","email","describe","beforeEach","clearAllMocks","mockReturnValue","data","status","it","render","AuthSection","button","screen","getByRole","expect","toBeInTheDocument","toHaveClass","svg","querySelector","fireEvent","click","toHaveBeenCalledWith","user","adminLink","toHaveAttribute","avatar","getByText","skeleton","content","element","classList","contains","variant","focus","document","activeElement","toBe","variants","forEach","unmount","paths","querySelectorAll","toHaveLength","colors","Array","from","map","path","getAttribute","toContain"],"mappings":"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"}