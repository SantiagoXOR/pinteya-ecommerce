1a7e704b46185227a633ed994d3b5310
// ===================================
// TESTS PARA HOOK DE AUTENTICACIÓN
// Tests unitarios e integración para useAuth
// ===================================
"use strict";
// Mocks
jest.mock('next-auth/react');
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn()
        }
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _useAuth = require("../../hooks/useAuth");
const _react1 = require("next-auth/react");
const _navigation = require("next/navigation");
const _react2 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    refresh: jest.fn()
};
// Wrapper para React Query
const createWrapper = ()=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
};
describe('useAuth Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue(mockRouter);
        _react1.useSession.mockReturnValue({
            data: {
                user: {
                    id: 'test-user-id',
                    email: 'test@example.com',
                    name: 'Test User',
                    image: 'https://example.com/avatar.jpg'
                },
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
            },
            status: 'authenticated'
        });
    });
    describe('Autenticación con NextAuth', ()=>{
        it('debe iniciar sesión exitosamente', async ()=>{
            ;
            _react1.signIn.mockResolvedValue({
                ok: true,
                error: null
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn('google', {
                    callbackUrl: '/dashboard'
                });
            });
            expect(_react1.signIn).toHaveBeenCalledWith('google', {
                callbackUrl: '/dashboard',
                redirect: true
            });
        });
        it('debe cerrar sesión exitosamente', async ()=>{
            ;
            _react1.signOut.mockResolvedValue({
                url: '/api/auth/signin'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signOut({
                    callbackUrl: '/'
                });
            });
            expect(_react1.signOut).toHaveBeenCalledWith({
                callbackUrl: '/',
                redirect: true
            });
        });
        it('debe retornar información del usuario autenticado', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.user).toEqual({
                id: 'test-user-id',
                email: 'test@example.com',
                name: 'Test User',
                image: 'https://example.com/avatar.jpg'
            });
            expect(result.current.isSignedIn).toBe(true);
            expect(result.current.isLoaded).toBe(true);
        });
        it('debe manejar estado de carga', ()=>{
            ;
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isLoaded).toBe(false);
            expect(result.current.isSignedIn).toBe(false);
            expect(result.current.user).toBeNull();
        });
        it('debe manejar estado no autenticado', ()=>{
            ;
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isLoaded).toBe(true);
            expect(result.current.isSignedIn).toBe(false);
            expect(result.current.user).toBeNull();
        });
    });
    describe('Hooks de utilidad', ()=>{
        it('useIsAdmin debe retornar false para usuario normal', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            // useIsAdmin está incluido en el hook useAuth
            expect(result.current.user?.email).toBe('test@example.com');
        });
        it('useRequireAuth debe redirigir si no está autenticado', async ()=>{
            ;
            _react1.useSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            expect(result.current.isSignedIn).toBe(false);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debe manejar error en signIn', async ()=>{
            ;
            _react1.signIn.mockResolvedValue({
                ok: false,
                error: 'Authentication failed'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                await result.current.signIn('google');
            });
            expect(_react1.signIn).toHaveBeenCalledWith('google', {
                callbackUrl: '/admin',
                redirect: true
            });
        });
        it('debe manejar error en signOut', async ()=>{
            ;
            _react1.signOut.mockRejectedValue(new Error('Sign out failed'));
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.signOut();
                } catch (error) {
                    expect(error).toBeInstanceOf(Error);
                }
            });
            expect(_react1.signOut).toHaveBeenCalled();
        });
    });
    describe('Integración con Router', ()=>{
        it('debe usar el router correctamente', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)(), {
                wrapper: createWrapper()
            });
            // El hook debe tener acceso al router
            expect(result.current).toBeDefined();
            expect(typeof result.current.signIn).toBe('function');
            expect(typeof result.current.signOut).toBe('function');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlQXV0aC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVEVTVFMgUEFSQSBIT09LIERFIEFVVEVOVElDQUNJw5NOXG4vLyBUZXN0cyB1bml0YXJpb3MgZSBpbnRlZ3JhY2nDs24gcGFyYSB1c2VBdXRoXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknXG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9ob29rcy91c2VBdXRoJ1xuaW1wb3J0IHsgdXNlU2Vzc2lvbiwgc2lnbkluLCBzaWduT3V0IH0gZnJvbSAnbmV4dC1hdXRoL3JlYWN0J1xuaW1wb3J0IHsgdG9hc3QgfSBmcm9tICdzb25uZXInXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbi8vIE1vY2tzXG5qZXN0Lm1vY2soJ25leHQtYXV0aC9yZWFjdCcpXG5qZXN0Lm1vY2soJ3Nvbm5lcicsICgpID0+ICh7XG4gIHRvYXN0OiB7XG4gICAgc3VjY2VzczogamVzdC5mbigpLFxuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgbG9hZGluZzogamVzdC5mbigpLFxuICB9LFxufSkpXG5cbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlUm91dGVyOiBqZXN0LmZuKCksXG59KSlcblxuY29uc3QgbW9ja1JvdXRlciA9IHtcbiAgcHVzaDogamVzdC5mbigpLFxuICByZXBsYWNlOiBqZXN0LmZuKCksXG4gIHJlZnJlc2g6IGplc3QuZm4oKSxcbn1cblxuLy8gV3JhcHBlciBwYXJhIFJlYWN0IFF1ZXJ5XG5jb25zdCBjcmVhdGVXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCh7XG4gICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgcmV0cnk6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICB9KVxuXG4gIHJldHVybiAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PntjaGlsZHJlbn08L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gIClcbn1cblxuZGVzY3JpYmUoJ3VzZUF1dGggSG9vaycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgICA7KHVzZVJvdXRlciBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShtb2NrUm91dGVyKVxuXG4gICAgLy8gTW9jayBkZWZhdWx0IE5leHRBdXRoIHNlc3Npb25cbiAgICA7KHVzZVNlc3Npb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgICAgaW1hZ2U6ICdodHRwczovL2V4YW1wbGUuY29tL2F2YXRhci5qcGcnLFxuICAgICAgICB9LFxuICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICBzdGF0dXM6ICdhdXRoZW50aWNhdGVkJyxcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdBdXRlbnRpY2FjacOzbiBjb24gTmV4dEF1dGgnLCAoKSA9PiB7XG4gICAgaXQoJ2RlYmUgaW5pY2lhciBzZXNpw7NuIGV4aXRvc2FtZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIDsoc2lnbkluIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyBvazogdHJ1ZSwgZXJyb3I6IG51bGwgfSlcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXV0aCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnNpZ25JbignZ29vZ2xlJywgeyBjYWxsYmFja1VybDogJy9kYXNoYm9hcmQnIH0pXG4gICAgICB9KVxuXG4gICAgICBleHBlY3Qoc2lnbkluKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZ29vZ2xlJywge1xuICAgICAgICBjYWxsYmFja1VybDogJy9kYXNoYm9hcmQnLFxuICAgICAgICByZWRpcmVjdDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdkZWJlIGNlcnJhciBzZXNpw7NuIGV4aXRvc2FtZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIDsoc2lnbk91dCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgdXJsOiAnL2FwaS9hdXRoL3NpZ25pbicgfSlcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXV0aCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LnNpZ25PdXQoeyBjYWxsYmFja1VybDogJy8nIH0pXG4gICAgICB9KVxuXG4gICAgICBleHBlY3Qoc2lnbk91dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBjYWxsYmFja1VybDogJy8nLFxuICAgICAgICByZWRpcmVjdDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdkZWJlIHJldG9ybmFyIGluZm9ybWFjacOzbiBkZWwgdXN1YXJpbyBhdXRlbnRpY2FkbycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUF1dGgoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXG4gICAgICB9KVxuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXNlcikudG9FcXVhbCh7XG4gICAgICAgIGlkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgIGltYWdlOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9hdmF0YXIuanBnJyxcbiAgICAgIH0pXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaWduZWRJbikudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGVkKS50b0JlKHRydWUpXG4gICAgfSlcblxuICAgIGl0KCdkZWJlIG1hbmVqYXIgZXN0YWRvIGRlIGNhcmdhJywgKCkgPT4ge1xuICAgICAgOyh1c2VTZXNzaW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgc3RhdHVzOiAnbG9hZGluZycsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBdXRoKCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpLFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGVkKS50b0JlKGZhbHNlKVxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzU2lnbmVkSW4pLnRvQmUoZmFsc2UpXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXNlcikudG9CZU51bGwoKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZSBtYW5lamFyIGVzdGFkbyBubyBhdXRlbnRpY2FkbycsICgpID0+IHtcbiAgICAgIDsodXNlU2Vzc2lvbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHN0YXR1czogJ3VuYXV0aGVudGljYXRlZCcsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBdXRoKCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpLFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGVkKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNTaWduZWRJbikudG9CZShmYWxzZSlcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC51c2VyKS50b0JlTnVsbCgpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnSG9va3MgZGUgdXRpbGlkYWQnLCAoKSA9PiB7XG4gICAgaXQoJ3VzZUlzQWRtaW4gZGViZSByZXRvcm5hciBmYWxzZSBwYXJhIHVzdWFyaW8gbm9ybWFsJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXV0aCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcbiAgICAgIH0pXG5cbiAgICAgIC8vIHVzZUlzQWRtaW4gZXN0w6EgaW5jbHVpZG8gZW4gZWwgaG9vayB1c2VBdXRoXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudXNlcj8uZW1haWwpLnRvQmUoJ3Rlc3RAZXhhbXBsZS5jb20nKVxuICAgIH0pXG5cbiAgICBpdCgndXNlUmVxdWlyZUF1dGggZGViZSByZWRpcmlnaXIgc2kgbm8gZXN0w6EgYXV0ZW50aWNhZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICA7KHVzZVNlc3Npb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBzdGF0dXM6ICd1bmF1dGhlbnRpY2F0ZWQnLFxuICAgICAgfSlcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXV0aCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcbiAgICAgIH0pXG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc1NpZ25lZEluKS50b0JlKGZhbHNlKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ01hbmVqbyBkZSBlcnJvcmVzJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIG1hbmVqYXIgZXJyb3IgZW4gc2lnbkluJywgYXN5bmMgKCkgPT4ge1xuICAgICAgOyhzaWduSW4gYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IG9rOiBmYWxzZSwgZXJyb3I6ICdBdXRoZW50aWNhdGlvbiBmYWlsZWQnIH0pXG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUF1dGgoKSwge1xuICAgICAgICB3cmFwcGVyOiBjcmVhdGVXcmFwcGVyKCksXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5zaWduSW4oJ2dvb2dsZScpXG4gICAgICB9KVxuXG4gICAgICBleHBlY3Qoc2lnbkluKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZ29vZ2xlJywge1xuICAgICAgICBjYWxsYmFja1VybDogJy9hZG1pbicsXG4gICAgICAgIHJlZGlyZWN0OiB0cnVlLFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ2RlYmUgbWFuZWphciBlcnJvciBlbiBzaWduT3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgOyhzaWduT3V0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdTaWduIG91dCBmYWlsZWQnKSlcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXV0aCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IGNyZWF0ZVdyYXBwZXIoKSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuc2lnbk91dCgpXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihFcnJvcilcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHNpZ25PdXQpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0ludGVncmFjacOzbiBjb24gUm91dGVyJywgKCkgPT4ge1xuICAgIGl0KCdkZWJlIHVzYXIgZWwgcm91dGVyIGNvcnJlY3RhbWVudGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBdXRoKCksIHtcbiAgICAgICAgd3JhcHBlcjogY3JlYXRlV3JhcHBlcigpLFxuICAgICAgfSlcblxuICAgICAgLy8gRWwgaG9vayBkZWJlIHRlbmVyIGFjY2VzbyBhbCByb3V0ZXJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudCkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5zaWduSW4pLnRvQmUoJ2Z1bmN0aW9uJylcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQuc2lnbk91dCkudG9CZSgnZnVuY3Rpb24nKVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidG9hc3QiLCJzdWNjZXNzIiwiZm4iLCJlcnJvciIsImxvYWRpbmciLCJ1c2VSb3V0ZXIiLCJtb2NrUm91dGVyIiwicHVzaCIsInJlcGxhY2UiLCJyZWZyZXNoIiwiY3JlYXRlV3JhcHBlciIsInF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZWZhdWx0T3B0aW9ucyIsInF1ZXJpZXMiLCJyZXRyeSIsImNoaWxkcmVuIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNsaWVudCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJ1c2VTZXNzaW9uIiwiZGF0YSIsInVzZXIiLCJpZCIsImVtYWlsIiwibmFtZSIsImltYWdlIiwiZXhwaXJlcyIsIkRhdGUiLCJub3ciLCJ0b0lTT1N0cmluZyIsInN0YXR1cyIsIml0Iiwic2lnbkluIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJvayIsInJlc3VsdCIsInJlbmRlckhvb2siLCJ1c2VBdXRoIiwid3JhcHBlciIsImFjdCIsImN1cnJlbnQiLCJjYWxsYmFja1VybCIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicmVkaXJlY3QiLCJzaWduT3V0IiwidXJsIiwidG9FcXVhbCIsImlzU2lnbmVkSW4iLCJ0b0JlIiwiaXNMb2FkZWQiLCJ0b0JlTnVsbCIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJ0b0JlSW5zdGFuY2VPZiIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0JlRGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLG1DQUFtQztBQUNuQyw2Q0FBNkM7QUFDN0Msc0NBQXNDOztBQVV0QyxRQUFRO0FBQ1JBLEtB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