{"version":3,"names":["default","cov_53rqxgt4b","f","s","_default","useSearch","defaultTrendingSearches","id","type","title","href","options","b","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","onSearch","onSuggestionSelect","router","_navigation","useRouter","debounceRef","_react","useRef","safetyTimeoutRef","optionsRef","recentSearchesRef","errorHandler","_useSearchErrorHandler","useSearchErrorHandler","onError","error","console","onRetrySuccess","toastHandler","showRetrySuccessToast","onRetryFailed","attempts","showRetryFailedToast","_useSearchToast","useSearchToast","defaultDuration","maxToasts","current","state","setState","useState","query","results","suggestions","isLoading","hasSearched","recentSearches","setRecentSearches","useEffect","performSearch","useCallback","searchQuery","clearTimeout","trim","defaultSuggestions","slice","map","search","index","encodeURIComponent","prev","setTimeout","response","_products","searchProducts","success","data","Array","isArray","productSuggestions","product","name","subtitle","category","image","images","previews","badge","stock","searchWithDebounce","_usedebounce","useDebouncedCallback","log","maxWait","leading","trailing","executeSearch","updated","filter","localStorage","setItem","JSON","stringify","warn","executeWithRetry","resultCount","length","clearError","showSuccessToast","showNoResultsToast","searchParams","URLSearchParams","set","push","toString","errorMessage","showWarningToast","searchError","handleError","message","showErrorToast","retryCount","selectSuggestion","suggestion","clearSearch","initialize","stored","getItem","includes","removeItem","parsed","parse","cleanup","cancel","currentError","isRetrying","toasts","retryManually","removeToast","clearToasts"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearch.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearch - Sistema de búsqueda centralizado\r\n// ===================================\r\n\r\nimport React, { useState, useCallback, useRef } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { ProductWithCategory } from '@/types/api';\r\nimport { useSearchErrorHandler } from './useSearchErrorHandler';\r\nimport { useSearchToast } from './useSearchToast';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchState {\r\n  query: string;\r\n  results: ProductWithCategory[];\r\n  suggestions: SearchSuggestion[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  hasSearched: boolean;\r\n}\r\n\r\nexport interface SearchSuggestion {\r\n  id: string;\r\n  type: 'product' | 'category' | 'recent' | 'trending';\r\n  title: string;\r\n  subtitle?: string;\r\n  image?: string;\r\n  badge?: string;\r\n  href: string;\r\n}\r\n\r\nexport interface UseSearchOptions {\r\n  /** Tiempo de debounce en milisegundos */\r\n  debounceMs?: number;\r\n  /** Número máximo de sugerencias */\r\n  maxSuggestions?: number;\r\n  /** Límite de resultados de búsqueda */\r\n  searchLimit?: number;\r\n  /** Guardar búsquedas recientes */\r\n  saveRecentSearches?: boolean;\r\n  /** Callback cuando se realiza una búsqueda */\r\n  onSearch?: (query: string, results: ProductWithCategory[]) => void;\r\n  /** Callback cuando se selecciona una sugerencia */\r\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n// ===================================\r\n// BÚSQUEDAS TRENDING POR DEFECTO\r\n// ===================================\r\n\r\nconst defaultTrendingSearches: SearchSuggestion[] = [\r\n  {\r\n    id: \"trending-1\",\r\n    type: \"trending\",\r\n    title: \"Pintura látex\",\r\n    href: \"/search?q=pintura+latex\",\r\n  },\r\n  {\r\n    id: \"trending-2\",\r\n    type: \"trending\",\r\n    title: \"Sherwin Williams\",\r\n    href: \"/search?q=sherwin+williams\",\r\n  },\r\n  {\r\n    id: \"trending-3\",\r\n    type: \"trending\",\r\n    title: \"Rodillos premium\",\r\n    href: \"/search?q=rodillos+premium\",\r\n  },\r\n  {\r\n    id: \"trending-4\",\r\n    type: \"trending\",\r\n    title: \"Pinceles\",\r\n    href: \"/search?q=pinceles\",\r\n  },\r\n];\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearch(options: UseSearchOptions = {}) {\r\n  const {\r\n    debounceMs = 150,\r\n    maxSuggestions = 8,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    onSearch,\r\n    onSuggestionSelect\r\n  } = options;\r\n\r\n  const router = useRouter();\r\n  const debounceRef = useRef<NodeJS.Timeout>();\r\n  const safetyTimeoutRef = useRef<NodeJS.Timeout>(); // Timeout de seguridad para evitar loading permanente\r\n  const optionsRef = useRef(options); // Ref para opciones estables\r\n  const recentSearchesRef = useRef<string[]>([]); // Ref para búsquedas recientes\r\n\r\n  // Hooks para manejo de errores y toast notifications\r\n  const errorHandler = useSearchErrorHandler({\r\n    onError: (error) => {\r\n      console.error('Error de búsqueda:', error);\r\n    },\r\n    onRetrySuccess: () => {\r\n      toastHandler.showRetrySuccessToast();\r\n    },\r\n    onRetryFailed: (error, attempts) => {\r\n      toastHandler.showRetryFailedToast(attempts);\r\n    },\r\n  });\r\n\r\n  const toastHandler = useSearchToast({\r\n    defaultDuration: 4000,\r\n    maxToasts: 2,\r\n  });\r\n\r\n  // Actualizar ref cuando cambien las opciones\r\n  optionsRef.current = options;\r\n\r\n  // Estado principal\r\n  const [state, setState] = useState<SearchState>({\r\n    query: '',\r\n    results: [],\r\n    suggestions: [],\r\n    isLoading: false,\r\n    error: null,\r\n    hasSearched: false,\r\n  });\r\n\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n\r\n  // Sincronizar referencia con estado para evitar dependencias en useCallback\r\n  React.useEffect(() => {\r\n    recentSearchesRef.current = recentSearches;\r\n  }, [recentSearches]);\r\n\r\n  // ===================================\r\n  // FUNCIONES AUXILIARES SIMPLIFICADAS\r\n  // ===================================\r\n\r\n  // ===================================\r\n  // FUNCIONES PRINCIPALES CON USE-DEBOUNCE\r\n  // ===================================\r\n\r\n  /**\r\n   * Función de búsqueda interna optimizada\r\n   */\r\n  const performSearch = useCallback(async (searchQuery: string) => {\r\n\r\n    // Limpiar timeout de seguridad anterior\r\n    if (safetyTimeoutRef.current) {\r\n      clearTimeout(safetyTimeoutRef.current);\r\n    }\r\n\r\n    // Si la query está vacía, mostrar sugerencias por defecto\r\n    if (!searchQuery.trim()) {\r\n      const defaultSuggestions = [\r\n        ...defaultTrendingSearches.slice(0, 4),\r\n        ...recentSearchesRef.current.slice(0, 3).map((search, index) => ({\r\n          id: `recent-${index}`,\r\n          type: 'recent' as const,\r\n          title: search,\r\n          href: `/search?q=${encodeURIComponent(search)}`,\r\n        }))\r\n      ].slice(0, maxSuggestions);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        query: searchQuery,\r\n        suggestions: defaultSuggestions,\r\n        isLoading: false,\r\n      }));\r\n      return;\r\n    }\r\n\r\n    // Timeout de seguridad para evitar loading permanente (5 segundos)\r\n    safetyTimeoutRef.current = setTimeout(() => {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: 'Tiempo de espera agotado. Intenta nuevamente.',\r\n      }));\r\n    }, 5000);\r\n\r\n    // Ejecutar búsqueda directamente (el debounce se maneja en searchWithDebounce)\r\n    try {\r\n\r\n      const response = await searchProducts(searchQuery, maxSuggestions);\r\n\r\n      // Limpiar timeout de seguridad ya que la API respondió\r\n      if (safetyTimeoutRef.current) {\r\n        clearTimeout(safetyTimeoutRef.current);\r\n      }\r\n\r\n        if (response.success && response.data && Array.isArray(response.data)) {\r\n          const productSuggestions = response.data.map(product => ({\r\n            id: `product-${product.id}`,\r\n            type: 'product' as const,\r\n            title: product.name,\r\n            subtitle: product.category?.name || 'Sin categoría',\r\n            image: product.images?.previews?.[0] || '/images/products/placeholder.jpg',\r\n            badge: product.stock > 0 ? 'En stock' : 'Sin stock',\r\n            href: `/shop-details/${product.id}`,\r\n          }));\r\n\r\n\r\n          setState(prev => ({\r\n            ...prev,\r\n            query: searchQuery, // Actualizar query cuando hay resultados exitosos\r\n            suggestions: productSuggestions,\r\n            isLoading: false,\r\n            error: null,\r\n          }));\r\n        } else {\r\n          setState(prev => ({\r\n            ...prev,\r\n            query: searchQuery, // Actualizar query incluso cuando no hay resultados\r\n            suggestions: [],\r\n            isLoading: false,\r\n            error: response.error || 'No se encontraron resultados',\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ useSearch: Error en búsqueda:', error);\r\n\r\n        // Limpiar timeout de seguridad\r\n        if (safetyTimeoutRef.current) {\r\n          clearTimeout(safetyTimeoutRef.current);\r\n        }\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          query: searchQuery, // Actualizar query incluso en caso de error\r\n          suggestions: [],\r\n          isLoading: false,\r\n          error: 'Error en la búsqueda. Intenta nuevamente.',\r\n        }));\r\n      }\r\n  }, [maxSuggestions]); // Solo maxSuggestions es necesario como dependencia\r\n\r\n  /**\r\n   * Función de búsqueda con debounce optimizado usando use-debounce\r\n   */\r\n  const searchWithDebounce = useDebouncedCallback(\r\n    (searchQuery: string) => {\r\n      console.log('🔍 useSearch: searchWithDebounce (use-debounce) llamado con:', searchQuery);\r\n\r\n      // Actualizar estado de loading inmediatamente\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: !!searchQuery.trim(),\r\n        error: null,\r\n      }));\r\n\r\n      // Ejecutar búsqueda\r\n      performSearch(searchQuery);\r\n    },\r\n    debounceMs,\r\n    {\r\n      maxWait: 2000,\r\n      leading: false,\r\n      trailing: true,\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Ejecuta una búsqueda completa y navega a resultados\r\n   */\r\n  const executeSearch = useCallback(async (searchQuery: string, category?: string) => {\r\n    if (!searchQuery.trim()) {return;}\r\n\r\n    try {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n\r\n      // Guardar en historial\r\n      if (saveRecentSearches && searchQuery.trim()) {\r\n        const updated = [\r\n          searchQuery.trim(),\r\n          ...recentSearchesRef.current.filter(s => s !== searchQuery.trim())\r\n        ].slice(0, 5);\r\n\r\n        setRecentSearches(updated);\r\n        try {\r\n          localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));\r\n        } catch (error) {\r\n          console.warn('Error guardando búsqueda reciente:', error);\r\n        }\r\n      }\r\n\r\n      // Realizar búsqueda con manejo robusto de errores\r\n      const response = await errorHandler.executeWithRetry(\r\n        () => searchProducts(searchQuery.trim(), searchLimit),\r\n        `búsqueda de \"${searchQuery.trim()}\"`\r\n      );\r\n\r\n      if (response.success && response.data) {\r\n        const resultCount = response.data.length;\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          results: response.data || [],\r\n          isLoading: false,\r\n          hasSearched: true,\r\n          error: null,\r\n        }));\r\n\r\n        // Limpiar errores previos\r\n        errorHandler.clearError();\r\n\r\n        // Mostrar toast de éxito si hay resultados\r\n        if (resultCount > 0) {\r\n          toastHandler.showSuccessToast(searchQuery.trim(), resultCount);\r\n        } else {\r\n          toastHandler.showNoResultsToast(searchQuery.trim());\r\n        }\r\n\r\n        // Callback personalizado\r\n        optionsRef.current.onSearch?.(searchQuery.trim(), response.data || []);\r\n\r\n        // Navegar a resultados\r\n        const searchParams = new URLSearchParams();\r\n        searchParams.set('q', searchQuery.trim());\r\n        if (category) {\r\n          searchParams.set('category', category);\r\n        }\r\n\r\n        router.push(`/search?${searchParams.toString()}`);\r\n      } else {\r\n        const errorMessage = response.error || 'No se encontraron resultados';\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          results: [],\r\n          isLoading: false,\r\n          hasSearched: true,\r\n          error: errorMessage,\r\n        }));\r\n\r\n        // Mostrar toast de advertencia para respuestas sin éxito\r\n        toastHandler.showWarningToast('Búsqueda sin resultados', errorMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error ejecutando búsqueda:', error);\r\n\r\n      // Manejar error con el error handler\r\n      const searchError = errorHandler.handleError(error);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        results: [],\r\n        isLoading: false,\r\n        hasSearched: true,\r\n        error: searchError.message,\r\n      }));\r\n\r\n      // Mostrar toast de error\r\n      toastHandler.showErrorToast(searchError, errorHandler.retryCount, () => {\r\n        executeSearch(searchQuery.trim(), category);\r\n      });\r\n    }\r\n  }, [searchLimit, saveRecentSearches, router, errorHandler, toastHandler]); // Remover recentSearches de dependencias para evitar bucle infinito\r\n\r\n  /**\r\n   * Maneja la selección de una sugerencia\r\n   */\r\n  const selectSuggestion = useCallback((suggestion: SearchSuggestion) => {\r\n    // Guardar en historial si es producto o categoría\r\n    if ((suggestion.type === 'product' || suggestion.type === 'category') && saveRecentSearches) {\r\n      const updated = [\r\n        suggestion.title,\r\n        ...recentSearchesRef.current.filter(s => s !== suggestion.title)\r\n      ].slice(0, 5);\r\n\r\n      setRecentSearches(updated);\r\n      try {\r\n        localStorage.setItem('pinteya-recent-searches', JSON.stringify(updated));\r\n      } catch (error) {\r\n        console.warn('Error guardando búsqueda reciente:', error);\r\n      }\r\n    }\r\n\r\n    // Actualizar estado\r\n    setState(prev => ({\r\n      ...prev,\r\n      query: suggestion.title,\r\n    }));\r\n\r\n    // Callback personalizado\r\n    optionsRef.current.onSuggestionSelect?.(suggestion);\r\n\r\n    // Navegar\r\n    router.push(suggestion.href);\r\n  }, [saveRecentSearches, router]); // Remover recentSearches de dependencias para evitar bucle infinito\r\n\r\n  /**\r\n   * Limpia el estado de búsqueda\r\n   */\r\n  const clearSearch = useCallback(() => {\r\n\r\n    // Limpiar todos los timeouts\r\n    if (debounceRef.current) {\r\n      clearTimeout(debounceRef.current);\r\n    }\r\n    if (safetyTimeoutRef.current) {\r\n      clearTimeout(safetyTimeoutRef.current);\r\n    }\r\n\r\n    // Resetear estado completamente (sin sugerencias por defecto para tests)\r\n    setState({\r\n      query: '',\r\n      results: [],\r\n      suggestions: [],\r\n      isLoading: false,\r\n      error: null,\r\n      hasSearched: false,\r\n    });\r\n  }, []); // Remover dependencia circular\r\n\r\n  /**\r\n   * Inicializa el hook (cargar búsquedas recientes)\r\n   */\r\n  const initialize = useCallback(() => {\r\n    if (saveRecentSearches) {\r\n      try {\r\n        const stored = localStorage.getItem('pinteya-recent-searches');\r\n        if (stored && stored.trim() !== '' && stored !== '\"\"' && stored !== \"''\") {\r\n          // Validar que no esté corrupto\r\n          if (stored.includes('\"\"') && stored.length < 5) {\r\n            console.warn('Detected corrupted recent searches data, cleaning up');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n            return;\r\n          }\r\n\r\n          const parsed = JSON.parse(stored);\r\n          // Verificar que sea un array válido\r\n          if (Array.isArray(parsed)) {\r\n            setRecentSearches(parsed);\r\n          } else {\r\n            console.warn('Invalid recent searches format, resetting');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error cargando búsquedas recientes:', error);\r\n        // Limpiar datos corruptos\r\n        localStorage.removeItem('pinteya-recent-searches');\r\n      }\r\n    }\r\n  }, [saveRecentSearches]);\r\n\r\n  // ===================================\r\n  // CLEANUP\r\n  // ===================================\r\n\r\n  const cleanup = useCallback(() => {\r\n    // Cancelar debounce de use-debounce\r\n    searchWithDebounce.cancel();\r\n\r\n    // Limpiar timeouts manuales restantes\r\n    if (debounceRef.current) {\r\n      clearTimeout(debounceRef.current);\r\n    }\r\n    if (safetyTimeoutRef.current) {\r\n      clearTimeout(safetyTimeoutRef.current);\r\n    }\r\n  }, [searchWithDebounce]);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    ...state,\r\n    recentSearches,\r\n\r\n    // Estado de errores y toasts\r\n    searchError: errorHandler.currentError,\r\n    isRetrying: errorHandler.isRetrying,\r\n    retryCount: errorHandler.retryCount,\r\n    toasts: toastHandler.toasts,\r\n\r\n    // Funciones principales\r\n    searchWithDebounce,\r\n    executeSearch,\r\n    selectSuggestion,\r\n    clearSearch,\r\n    initialize,\r\n    cleanup,\r\n\r\n    // Funciones de manejo de errores\r\n    clearError: errorHandler.clearError,\r\n    retryManually: errorHandler.retryManually,\r\n\r\n    // Funciones de toast\r\n    removeToast: toastHandler.removeToast,\r\n    clearToasts: toastHandler.clearToasts,\r\n  };\r\n}\r\n\r\nexport default useSearch;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}