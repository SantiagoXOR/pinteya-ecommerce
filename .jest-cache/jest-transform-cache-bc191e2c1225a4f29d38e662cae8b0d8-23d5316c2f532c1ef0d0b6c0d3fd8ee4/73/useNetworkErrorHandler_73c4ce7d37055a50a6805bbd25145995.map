{"version":3,"names":["useNetworkErrorDebug","cov_1zlqxxd53x","f","s","useNetworkErrorHandler","useNetworkErrorSuppression","options","b","enableLogging","enableRetry","maxRetries","retryDelay","queryClient","_reactquery","useQueryClient","classifyError","_react","useCallback","error","timestamp","Date","now","type","code","name","message","includes","status","originalError","url","config","method","handleNetworkError","context","networkError","console","debug","warn","group","groupEnd","setTimeout","invalidateQueries","refetchQueries","setupGlobalErrorHandling","originalConsoleError","args","join","lowerMessage","toLowerCase","handleUnhandledRejection","event","reason","preventDefault","window","addEventListener","removeEventListener","useEffect","cleanup","createFetchWrapper","baseUrl","fullUrl","response","fetch","signal","AbortSignal","timeout","ok","Error","statusText"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useNetworkErrorHandler.ts"],"sourcesContent":["// ===================================\r\n// HOOK: Network Error Handler\r\n// ===================================\r\n\r\nimport { useEffect, useCallback } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\ninterface NetworkErrorHandlerOptions {\r\n  enableLogging?: boolean;\r\n  enableRetry?: boolean;\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n}\r\n\r\ninterface NetworkError {\r\n  type: 'network' | 'timeout' | 'abort' | 'server' | 'unknown';\r\n  originalError: any;\r\n  timestamp: number;\r\n  url?: string;\r\n  method?: string;\r\n}\r\n\r\nexport function useNetworkErrorHandler(options: NetworkErrorHandlerOptions = {}) {\r\n  const {\r\n    enableLogging = true,\r\n    enableRetry = true,\r\n    maxRetries = 3,\r\n    retryDelay = 1000\r\n  } = options;\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  // Funci√≥n para clasificar errores de red\r\n  const classifyError = useCallback((error: any): NetworkError => {\r\n    const timestamp = Date.now();\r\n    \r\n    // Detectar tipo de error\r\n    let type: NetworkError['type'] = 'unknown';\r\n    \r\n    if (error?.code === 'ERR_ABORTED' || error?.name === 'AbortError') {\r\n      type = 'abort';\r\n    } else if (error?.code === 'ERR_NETWORK' || error?.message?.includes('network')) {\r\n      type = 'network';\r\n    } else if (error?.code === 'TIMEOUT' || error?.message?.includes('timeout')) {\r\n      type = 'timeout';\r\n    } else if (error?.status >= 500) {\r\n      type = 'server';\r\n    }\r\n\r\n    return {\r\n      type,\r\n      originalError: error,\r\n      timestamp,\r\n      url: error?.config?.url || error?.url,\r\n      method: error?.config?.method || error?.method\r\n    };\r\n  }, []);\r\n\r\n  // Funci√≥n para manejar errores de red\r\n  const handleNetworkError = useCallback((error: any, context?: any) => {\r\n    const networkError = classifyError(error);\r\n\r\n    // Para errores de abort, usar console.debug en lugar de console.error para evitar bucles\r\n    if (networkError.type === 'abort') {\r\n      if (enableLogging) {\r\n        console.debug('üîá Suppressed abort error:', {\r\n          type: networkError.type,\r\n          url: networkError.url,\r\n          method: networkError.method,\r\n          originalError: networkError.originalError,\r\n          context\r\n        });\r\n        console.warn('üö´ Request was aborted - this is usually intentional');\r\n      }\r\n      return; // Salir temprano para errores de abort\r\n    }\r\n\r\n    if (enableLogging) {\r\n      console.group('üåê Network Error Handler');\r\n      console.error('Error Type:', networkError.type);\r\n      console.error('URL:', networkError.url);\r\n      console.error('Method:', networkError.method);\r\n      console.error('Original Error:', networkError.originalError);\r\n      console.error('Context:', context);\r\n      console.groupEnd();\r\n    }\r\n\r\n    // Manejar diferentes tipos de errores\r\n    switch (networkError.type) {\r\n\r\n      case 'network':\r\n        // Errores de red - invalidar queries para refetch\r\n        if (enableRetry) {\r\n          setTimeout(() => {\r\n            queryClient.invalidateQueries();\r\n          }, retryDelay);\r\n        }\r\n        break;\r\n\r\n      case 'timeout':\r\n        // Timeouts - reintentar con delay\r\n        if (enableRetry) {\r\n          setTimeout(() => {\r\n            queryClient.refetchQueries({ type: 'active' });\r\n          }, retryDelay * 2);\r\n        }\r\n        break;\r\n\r\n      case 'server':\r\n        // Errores de servidor - reintentar despu√©s de un delay m√°s largo\r\n        if (enableRetry) {\r\n          setTimeout(() => {\r\n            queryClient.invalidateQueries();\r\n          }, retryDelay * 3);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        // Errores desconocidos - log para debugging\r\n        if (enableLogging) {\r\n          console.warn('‚ùì Unknown error type:', error);\r\n        }\r\n        break;\r\n    }\r\n\r\n    return networkError;\r\n  }, [classifyError, enableLogging, enableRetry, retryDelay, queryClient]);\r\n\r\n  // Funci√≥n para interceptar errores de abort y console.error\r\n  const setupGlobalErrorHandling = useCallback(() => {\r\n    // Interceptar console.error para filtrar AbortErrors\r\n    const originalConsoleError = console.error;\r\n    console.error = (...args) => {\r\n      const message = args.join(' ');\r\n      const lowerMessage = message.toLowerCase();\r\n\r\n      // Filtrar errores de AbortError espec√≠ficos\r\n      if (lowerMessage.includes('aborterror') ||\r\n          lowerMessage.includes('signal is aborted') ||\r\n          lowerMessage.includes('err_aborted') ||\r\n          message.includes('‚ùå Error obteniendo productos: AbortError') ||\r\n          message.includes('Error obteniendo productos: AbortError') ||\r\n          (lowerMessage.includes('error') && lowerMessage.includes('abort'))) {\r\n        if (enableLogging) {\r\n          console.debug('üîá Suppressed AbortError from console.error:', ...args);\r\n        }\r\n        return;\r\n      }\r\n      originalConsoleError(...args);\r\n    };\r\n\r\n    // Solo interceptar errores de unhandled promise rejections para AbortError\r\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\r\n      if (event.reason?.name === 'AbortError' ||\r\n          event.reason?.code === 'ERR_ABORTED' ||\r\n          event.reason?.message?.includes('aborted')) {\r\n        // Prevenir que los errores de abort aparezcan en la consola\r\n        event.preventDefault();\r\n        if (enableLogging) {\r\n          console.debug('üîá Suppressed AbortError from unhandledrejection');\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      console.error = originalConsoleError;\r\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\r\n    };\r\n  }, [enableLogging]);\r\n\r\n  // Setup global error handling on mount\r\n  useEffect(() => {\r\n    const cleanup = setupGlobalErrorHandling();\r\n    return cleanup;\r\n  }, [setupGlobalErrorHandling]);\r\n\r\n  // Funci√≥n para crear un wrapper de fetch con manejo de errores\r\n  const createFetchWrapper = useCallback((baseUrl?: string) => {\r\n    return async (url: string, options: RequestInit = {}) => {\r\n      const fullUrl = baseUrl ? `${baseUrl}${url}` : url;\r\n      \r\n      try {\r\n        const response = await fetch(fullUrl, {\r\n          ...options,\r\n          // Agregar timeout por defecto\r\n          signal: options.signal || AbortSignal.timeout(10000)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        const networkError = handleNetworkError(error, { \r\n          type: 'wrapper', \r\n          url: fullUrl, \r\n          options \r\n        });\r\n        \r\n        // Re-throw el error para que pueda ser manejado por el c√≥digo que llama\r\n        throw networkError.originalError;\r\n      }\r\n    };\r\n  }, [handleNetworkError]);\r\n\r\n  return {\r\n    handleNetworkError,\r\n    classifyError,\r\n    createFetchWrapper,\r\n    setupGlobalErrorHandling\r\n  };\r\n}\r\n\r\n// Hook simplificado para uso b√°sico\r\nexport function useNetworkErrorSuppression() {\r\n  return useNetworkErrorHandler({\r\n    enableLogging: false,\r\n    enableRetry: false\r\n  });\r\n}\r\n\r\n// Hook para desarrollo con logging detallado\r\nexport function useNetworkErrorDebug() {\r\n  return useNetworkErrorHandler({\r\n    enableLogging: true,\r\n    enableRetry: true,\r\n    maxRetries: 5,\r\n    retryDelay: 500\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}