{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\optimization\\bundle-optimization-manager.ts"],"sourcesContent":["// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n// Sistema avanzado de optimización de bundles para Pinteya E-commerce\r\n\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface BundleAnalysis {\r\n  totalSize: number;\r\n  gzippedSize: number;\r\n  chunks: ChunkInfo[];\r\n  dependencies: DependencyInfo[];\r\n  recommendations: OptimizationRecommendation[];\r\n  performance: PerformanceMetrics;\r\n}\r\n\r\nexport interface ChunkInfo {\r\n  name: string;\r\n  size: number;\r\n  gzippedSize: number;\r\n  modules: ModuleInfo[];\r\n  type: 'vendor' | 'app' | 'shared' | 'dynamic';\r\n  loadPriority: 'critical' | 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport interface ModuleInfo {\r\n  name: string;\r\n  size: number;\r\n  path: string;\r\n  imports: string[];\r\n  exports: string[];\r\n  isTreeShakeable: boolean;\r\n}\r\n\r\nexport interface DependencyInfo {\r\n  name: string;\r\n  version: string;\r\n  size: number;\r\n  usage: 'critical' | 'important' | 'optional' | 'unused';\r\n  alternatives?: string[];\r\n  optimizationPotential: number;\r\n}\r\n\r\nexport interface OptimizationRecommendation {\r\n  type: 'code-splitting' | 'tree-shaking' | 'dependency-replacement' | 'lazy-loading' | 'compression';\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  estimatedSavings: number;\r\n  implementation: string;\r\n  effort: 'low' | 'medium' | 'high';\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  firstLoadJS: number;\r\n  totalJS: number;\r\n  css: number;\r\n  images: number;\r\n  fonts: number;\r\n  other: number;\r\n  score: number;\r\n  grade: 'A' | 'B' | 'C' | 'D' | 'F';\r\n}\r\n\r\nexport interface BundleOptimizationConfig {\r\n  maxChunkSize: number;\r\n  maxFirstLoadSize: number;\r\n  enableTreeShaking: boolean;\r\n  enableCodeSplitting: boolean;\r\n  enableCompression: boolean;\r\n  enableLazyLoading: boolean;\r\n  performanceBudgets: PerformanceBudgets;\r\n}\r\n\r\nexport interface PerformanceBudgets {\r\n  maxBundleSize: number;\r\n  maxFirstLoadJS: number;\r\n  maxCSS: number;\r\n  maxImages: number;\r\n  warningThreshold: number;\r\n  errorThreshold: number;\r\n}\r\n\r\n// ===================================\r\n// BUNDLE OPTIMIZATION MANAGER\r\n// ===================================\r\n\r\nexport class BundleOptimizationManager {\r\n  private static instance: BundleOptimizationManager;\r\n  private config: BundleOptimizationConfig;\r\n  private analysisCache: Map<string, BundleAnalysis> = new Map();\r\n\r\n  private constructor() {\r\n    this.config = this.getDefaultConfig();\r\n  }\r\n\r\n  public static getInstance(): BundleOptimizationManager {\r\n    if (!BundleOptimizationManager.instance) {\r\n      BundleOptimizationManager.instance = new BundleOptimizationManager();\r\n    }\r\n    return BundleOptimizationManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACIÓN\r\n  // ===================================\r\n\r\n  private getDefaultConfig(): BundleOptimizationConfig {\r\n    return {\r\n      maxChunkSize: 250 * 1024, // 250KB\r\n      maxFirstLoadSize: 128 * 1024, // 128KB\r\n      enableTreeShaking: true,\r\n      enableCodeSplitting: true,\r\n      enableCompression: true,\r\n      enableLazyLoading: true,\r\n      performanceBudgets: {\r\n        maxBundleSize: 500 * 1024, // 500KB\r\n        maxFirstLoadJS: 128 * 1024, // 128KB\r\n        maxCSS: 50 * 1024, // 50KB\r\n        maxImages: 200 * 1024, // 200KB\r\n        warningThreshold: 0.8, // 80%\r\n        errorThreshold: 1.0 // 100%\r\n      }\r\n    };\r\n  }\r\n\r\n  public updateConfig(newConfig: Partial<BundleOptimizationConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  // ===================================\r\n  // ANÁLISIS DE BUNDLES\r\n  // ===================================\r\n\r\n  public async analyzeBundles(buildPath: string = '.next'): Promise<BundleAnalysis> {\r\n    const cacheKey = `${buildPath}-${Date.now()}`;\r\n    \r\n    if (this.analysisCache.has(cacheKey)) {\r\n      return this.analysisCache.get(cacheKey)!;\r\n    }\r\n\r\n    try {\r\n      const analysis = await this.performBundleAnalysis(buildPath);\r\n      this.analysisCache.set(cacheKey, analysis);\r\n      \r\n      // Limpiar cache antiguo\r\n      if (this.analysisCache.size > 5) {\r\n        const firstKey = this.analysisCache.keys().next().value;\r\n        this.analysisCache.delete(firstKey);\r\n      }\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing bundles:', error);\r\n      throw new Error(`Bundle analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  private async performBundleAnalysis(buildPath: string): Promise<BundleAnalysis> {\r\n    const staticPath = path.join(buildPath, 'static');\r\n    const chunks = await this.analyzeChunks(staticPath);\r\n    const dependencies = await this.analyzeDependencies();\r\n    const performance = this.calculatePerformanceMetrics(chunks);\r\n    const recommendations = this.generateRecommendations(chunks, dependencies, performance);\r\n\r\n    const totalSize = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n    const gzippedSize = chunks.reduce((sum, chunk) => sum + chunk.gzippedSize, 0);\r\n\r\n    return {\r\n      totalSize,\r\n      gzippedSize,\r\n      chunks,\r\n      dependencies,\r\n      recommendations,\r\n      performance\r\n    };\r\n  }\r\n\r\n  private async analyzeChunks(staticPath: string): Promise<ChunkInfo[]> {\r\n    const chunks: ChunkInfo[] = [];\r\n\r\n    try {\r\n      // Simular análisis de chunks (en implementación real usaríamos webpack-bundle-analyzer)\r\n      const mockChunks = [\r\n        {\r\n          name: 'main',\r\n          size: 85 * 1024,\r\n          gzippedSize: 28 * 1024,\r\n          type: 'app' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'vendors',\r\n          size: 180 * 1024,\r\n          gzippedSize: 65 * 1024,\r\n          type: 'vendor' as const,\r\n          loadPriority: 'critical' as const\r\n        },\r\n        {\r\n          name: 'admin',\r\n          size: 120 * 1024,\r\n          gzippedSize: 42 * 1024,\r\n          type: 'dynamic' as const,\r\n          loadPriority: 'medium' as const\r\n        }\r\n      ];\r\n\r\n      for (const mockChunk of mockChunks) {\r\n        chunks.push({\r\n          ...mockChunk,\r\n          modules: await this.analyzeChunkModules(mockChunk.name)\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Could not analyze chunks from filesystem, using mock data');\r\n    }\r\n\r\n    return chunks;\r\n  }\r\n\r\n  private async analyzeChunkModules(chunkName: string): Promise<ModuleInfo[]> {\r\n    // Simular análisis de módulos\r\n    return [\r\n      {\r\n        name: `${chunkName}-module-1`,\r\n        size: 15 * 1024,\r\n        path: `src/components/${chunkName}`,\r\n        imports: ['react', 'next'],\r\n        exports: ['default'],\r\n        isTreeShakeable: true\r\n      }\r\n    ];\r\n  }\r\n\r\n  private async analyzeDependencies(): Promise<DependencyInfo[]> {\r\n    try {\r\n      const packageJsonPath = path.join(process.cwd(), 'package.json');\r\n      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));\r\n      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };\r\n\r\n      return Object.entries(dependencies).map(([name, version]) => ({\r\n        name,\r\n        version: version as string,\r\n        size: this.estimateDependencySize(name),\r\n        usage: this.analyzeDependencyUsage(name),\r\n        alternatives: this.suggestAlternatives(name),\r\n        optimizationPotential: this.calculateOptimizationPotential(name)\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Could not analyze dependencies:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private estimateDependencySize(name: string): number {\r\n    // Estimaciones basadas en dependencias comunes\r\n    const sizeMap: Record<string, number> = {\r\n      'react': 45 * 1024,\r\n      'react-dom': 130 * 1024,\r\n      'next': 200 * 1024,\r\n      'framer-motion': 180 * 1024,\r\n      'recharts': 250 * 1024,\r\n      'maplibre-gl': 400 * 1024,\r\n      'lodash-es': 70 * 1024,\r\n      '@radix-ui/react-dialog': 25 * 1024\r\n    };\r\n\r\n    return sizeMap[name] || 20 * 1024; // Default 20KB\r\n  }\r\n\r\n  private analyzeDependencyUsage(name: string): 'critical' | 'important' | 'optional' | 'unused' {\r\n    const criticalDeps = ['react', 'react-dom', 'next'];\r\n    const importantDeps = ['@supabase/supabase-js', 'zod', 'next-auth'];\r\n    \r\n    if (criticalDeps.includes(name)) {return 'critical';}\r\n    if (importantDeps.includes(name)) {return 'important';}\r\n    return 'optional';\r\n  }\r\n\r\n  private suggestAlternatives(name: string): string[] {\r\n    const alternatives: Record<string, string[]> = {\r\n      'lodash-es': ['ramda', 'native-methods'],\r\n      'moment': ['date-fns', 'dayjs'],\r\n      'recharts': ['chart.js', 'victory'],\r\n      'framer-motion': ['react-spring', 'lottie-react']\r\n    };\r\n\r\n    return alternatives[name] || [];\r\n  }\r\n\r\n  private calculateOptimizationPotential(name: string): number {\r\n    // Porcentaje de optimización potencial\r\n    const optimizationMap: Record<string, number> = {\r\n      'lodash-es': 60, // Tree shaking potential\r\n      'framer-motion': 40, // Code splitting potential\r\n      'recharts': 50, // Lazy loading potential\r\n      'maplibre-gl': 30 // Compression potential\r\n    };\r\n\r\n    return optimizationMap[name] || 10;\r\n  }\r\n\r\n  private calculatePerformanceMetrics(chunks: ChunkInfo[]): PerformanceMetrics {\r\n    const firstLoadJS = chunks\r\n      .filter(chunk => chunk.loadPriority === 'critical')\r\n      .reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    const totalJS = chunks.reduce((sum, chunk) => sum + chunk.size, 0);\r\n\r\n    // Calcular score basado en performance budgets\r\n    const score = this.calculatePerformanceScore(firstLoadJS, totalJS);\r\n    const grade = this.getPerformanceGrade(score);\r\n\r\n    return {\r\n      firstLoadJS,\r\n      totalJS,\r\n      css: 25 * 1024, // Estimado\r\n      images: 150 * 1024, // Estimado\r\n      fonts: 30 * 1024, // Estimado\r\n      other: 20 * 1024, // Estimado\r\n      score,\r\n      grade\r\n    };\r\n  }\r\n\r\n  private calculatePerformanceScore(firstLoadJS: number, totalJS: number): number {\r\n    const { performanceBudgets } = this.config;\r\n    \r\n    const firstLoadRatio = firstLoadJS / performanceBudgets.maxFirstLoadJS;\r\n    const totalRatio = totalJS / performanceBudgets.maxBundleSize;\r\n    \r\n    const penalty = Math.max(firstLoadRatio - 1, 0) + Math.max(totalRatio - 1, 0);\r\n    return Math.max(100 - (penalty * 50), 0);\r\n  }\r\n\r\n  private getPerformanceGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\r\n    if (score >= 90) {return 'A';}\r\n    if (score >= 80) {return 'B';}\r\n    if (score >= 70) {return 'C';}\r\n    if (score >= 60) {return 'D';}\r\n    return 'F';\r\n  }\r\n\r\n  private generateRecommendations(\r\n    chunks: ChunkInfo[],\r\n    dependencies: DependencyInfo[],\r\n    performance: PerformanceMetrics\r\n  ): OptimizationRecommendation[] {\r\n    const recommendations: OptimizationRecommendation[] = [];\r\n\r\n    // Recomendaciones basadas en tamaño de chunks\r\n    const largeChunks = chunks.filter(chunk => chunk.size > this.config.maxChunkSize);\r\n    for (const chunk of largeChunks) {\r\n      recommendations.push({\r\n        type: 'code-splitting',\r\n        priority: 'high',\r\n        description: `Chunk '${chunk.name}' es demasiado grande (${Math.round(chunk.size / 1024)}KB)`,\r\n        estimatedSavings: chunk.size * 0.3,\r\n        implementation: `Dividir ${chunk.name} en chunks más pequeños usando dynamic imports`,\r\n        effort: 'medium'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en dependencias\r\n    const heavyDeps = dependencies.filter(dep => dep.size > 100 * 1024 && dep.optimizationPotential > 30);\r\n    for (const dep of heavyDeps) {\r\n      recommendations.push({\r\n        type: 'dependency-replacement',\r\n        priority: 'medium',\r\n        description: `Dependencia '${dep.name}' es pesada y tiene potencial de optimización`,\r\n        estimatedSavings: dep.size * (dep.optimizationPotential / 100),\r\n        implementation: `Considerar alternativas: ${dep.alternatives?.join(', ') || 'tree shaking'}`,\r\n        effort: 'high'\r\n      });\r\n    }\r\n\r\n    // Recomendaciones basadas en performance\r\n    if (performance.firstLoadJS > this.config.performanceBudgets.maxFirstLoadJS) {\r\n      recommendations.push({\r\n        type: 'lazy-loading',\r\n        priority: 'critical',\r\n        description: 'First Load JS excede el presupuesto de performance',\r\n        estimatedSavings: performance.firstLoadJS - this.config.performanceBudgets.maxFirstLoadJS,\r\n        implementation: 'Implementar lazy loading para componentes no críticos',\r\n        effort: 'low'\r\n      });\r\n    }\r\n\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n    });\r\n  }\r\n\r\n  // ===================================\r\n  // OPTIMIZACIONES AUTOMÁTICAS\r\n  // ===================================\r\n\r\n  public async applyOptimizations(recommendations: OptimizationRecommendation[]): Promise<void> {\r\n    for (const recommendation of recommendations) {\r\n      if (recommendation.effort === 'low') {\r\n        await this.applyLowEffortOptimization(recommendation);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async applyLowEffortOptimization(recommendation: OptimizationRecommendation): Promise<void> {\r\n    switch (recommendation.type) {\r\n      case 'lazy-loading':\r\n        await this.implementLazyLoading();\r\n        break;\r\n      case 'compression':\r\n        await this.enableCompression();\r\n        break;\r\n      default:\r\n        console.log(`Optimization ${recommendation.type} requires manual implementation`);\r\n    }\r\n  }\r\n\r\n  private async implementLazyLoading(): Promise<void> {\r\n    // Implementar lazy loading automático para componentes pesados\r\n    console.log('Implementing automatic lazy loading...');\r\n  }\r\n\r\n  private async enableCompression(): Promise<void> {\r\n    // Habilitar compresión automática\r\n    console.log('Enabling compression...');\r\n  }\r\n\r\n  // ===================================\r\n  // REPORTES Y MÉTRICAS\r\n  // ===================================\r\n\r\n  public generateOptimizationReport(analysis: BundleAnalysis): string {\r\n    const report = `\r\n# Bundle Optimization Report\r\n\r\n## Performance Metrics\r\n- **Score**: ${analysis.performance.score}/100 (Grade: ${analysis.performance.grade})\r\n- **First Load JS**: ${Math.round(analysis.performance.firstLoadJS / 1024)}KB\r\n- **Total JS**: ${Math.round(analysis.performance.totalJS / 1024)}KB\r\n- **Total Bundle Size**: ${Math.round(analysis.totalSize / 1024)}KB\r\n- **Gzipped Size**: ${Math.round(analysis.gzippedSize / 1024)}KB\r\n\r\n## Chunks Analysis\r\n${analysis.chunks.map(chunk => `\r\n- **${chunk.name}**: ${Math.round(chunk.size / 1024)}KB (${chunk.type}, ${chunk.loadPriority} priority)\r\n`).join('')}\r\n\r\n## Top Recommendations\r\n${analysis.recommendations.slice(0, 5).map((rec, i) => `\r\n${i + 1}. **${rec.type}** (${rec.priority} priority)\r\n   - ${rec.description}\r\n   - Estimated savings: ${Math.round(rec.estimatedSavings / 1024)}KB\r\n   - Implementation: ${rec.implementation}\r\n`).join('')}\r\n\r\n## Dependencies Analysis\r\n- **Total Dependencies**: ${analysis.dependencies.length}\r\n- **Heavy Dependencies**: ${analysis.dependencies.filter(d => d.size > 100 * 1024).length}\r\n- **Optimization Potential**: ${Math.round(analysis.dependencies.reduce((sum, d) => sum + d.optimizationPotential, 0) / analysis.dependencies.length)}%\r\n`;\r\n\r\n    return report;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["BundleOptimizationManager","analysisCache","Map","config","getDefaultConfig","getInstance","instance","maxChunkSize","maxFirstLoadSize","enableTreeShaking","enableCodeSplitting","enableCompression","enableLazyLoading","performanceBudgets","maxBundleSize","maxFirstLoadJS","maxCSS","maxImages","warningThreshold","errorThreshold","updateConfig","newConfig","analyzeBundles","buildPath","cacheKey","Date","now","has","get","analysis","performBundleAnalysis","set","size","firstKey","keys","next","value","delete","error","console","Error","message","staticPath","path","join","chunks","analyzeChunks","dependencies","analyzeDependencies","performance","calculatePerformanceMetrics","recommendations","generateRecommendations","totalSize","reduce","sum","chunk","gzippedSize","mockChunks","name","type","loadPriority","mockChunk","push","modules","analyzeChunkModules","warn","chunkName","imports","exports","isTreeShakeable","packageJsonPath","process","cwd","packageJson","JSON","parse","fs","readFile","devDependencies","Object","entries","map","version","estimateDependencySize","usage","analyzeDependencyUsage","alternatives","suggestAlternatives","optimizationPotential","calculateOptimizationPotential","sizeMap","criticalDeps","importantDeps","includes","optimizationMap","firstLoadJS","filter","totalJS","score","calculatePerformanceScore","grade","getPerformanceGrade","css","images","fonts","other","firstLoadRatio","totalRatio","penalty","Math","max","largeChunks","priority","description","round","estimatedSavings","implementation","effort","heavyDeps","dep","sort","a","b","priorityOrder","critical","high","medium","low","applyOptimizations","recommendation","applyLowEffortOptimization","implementLazyLoading","log","generateOptimizationReport","report","slice","rec","i","length","d"],"mappings":"AAAA,sCAAsC;AACtC,8BAA8B;AAC9B,sCAAsC;AACtC,sEAAsE;;;;;+BAwFzDA;;;eAAAA;;;oBAtFkB;6DACd;;;;;;AAqFV,MAAMA;IAKX,aAAsB;aAFdC,gBAA6C,IAAIC;QAGvD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,gBAAgB;IACrC;IAEA,OAAcC,cAAyC;QACrD,IAAI,CAACL,0BAA0BM,QAAQ,EAAE;YACvCN,0BAA0BM,QAAQ,GAAG,IAAIN;QAC3C;QACA,OAAOA,0BAA0BM,QAAQ;IAC3C;IAEA,sCAAsC;IACtC,gBAAgB;IAChB,sCAAsC;IAE9BF,mBAA6C;QACnD,OAAO;YACLG,cAAc,MAAM;YACpBC,kBAAkB,MAAM;YACxBC,mBAAmB;YACnBC,qBAAqB;YACrBC,mBAAmB;YACnBC,mBAAmB;YACnBC,oBAAoB;gBAClBC,eAAe,MAAM;gBACrBC,gBAAgB,MAAM;gBACtBC,QAAQ,KAAK;gBACbC,WAAW,MAAM;gBACjBC,kBAAkB;gBAClBC,gBAAgB,IAAI,OAAO;YAC7B;QACF;IACF;IAEOC,aAAaC,SAA4C,EAAQ;QACtE,IAAI,CAAClB,MAAM,GAAG;YAAE,GAAG,IAAI,CAACA,MAAM;YAAE,GAAGkB,SAAS;QAAC;IAC/C;IAEA,sCAAsC;IACtC,sBAAsB;IACtB,sCAAsC;IAEtC,MAAaC,eAAeC,YAAoB,OAAO,EAA2B;QAChF,MAAMC,WAAW,GAAGD,UAAU,CAAC,EAAEE,KAAKC,GAAG,IAAI;QAE7C,IAAI,IAAI,CAACzB,aAAa,CAAC0B,GAAG,CAACH,WAAW;YACpC,OAAO,IAAI,CAACvB,aAAa,CAAC2B,GAAG,CAACJ;QAChC;QAEA,IAAI;YACF,MAAMK,WAAW,MAAM,IAAI,CAACC,qBAAqB,CAACP;YAClD,IAAI,CAACtB,aAAa,CAAC8B,GAAG,CAACP,UAAUK;YAEjC,wBAAwB;YACxB,IAAI,IAAI,CAAC5B,aAAa,CAAC+B,IAAI,GAAG,GAAG;gBAC/B,MAAMC,WAAW,IAAI,CAAChC,aAAa,CAACiC,IAAI,GAAGC,IAAI,GAAGC,KAAK;gBACvD,IAAI,CAACnC,aAAa,CAACoC,MAAM,CAACJ;YAC5B;YAEA,OAAOJ;QACT,EAAE,OAAOS,OAAO;YACdC,QAAQD,KAAK,CAAC,4BAA4BA;YAC1C,MAAM,IAAIE,MAAM,CAAC,wBAAwB,EAAEF,iBAAiBE,QAAQF,MAAMG,OAAO,GAAG,iBAAiB;QACvG;IACF;IAEA,MAAcX,sBAAsBP,SAAiB,EAA2B;QAC9E,MAAMmB,aAAaC,aAAI,CAACC,IAAI,CAACrB,WAAW;QACxC,MAAMsB,SAAS,MAAM,IAAI,CAACC,aAAa,CAACJ;QACxC,MAAMK,eAAe,MAAM,IAAI,CAACC,mBAAmB;QACnD,MAAMC,cAAc,IAAI,CAACC,2BAA2B,CAACL;QACrD,MAAMM,kBAAkB,IAAI,CAACC,uBAAuB,CAACP,QAAQE,cAAcE;QAE3E,MAAMI,YAAYR,OAAOS,MAAM,CAAC,CAACC,KAAKC,QAAUD,MAAMC,MAAMxB,IAAI,EAAE;QAClE,MAAMyB,cAAcZ,OAAOS,MAAM,CAAC,CAACC,KAAKC,QAAUD,MAAMC,MAAMC,WAAW,EAAE;QAE3E,OAAO;YACLJ;YACAI;YACAZ;YACAE;YACAI;YACAF;QACF;IACF;IAEA,MAAcH,cAAcJ,UAAkB,EAAwB;QACpE,MAAMG,SAAsB,EAAE;QAE9B,IAAI;YACF,wFAAwF;YACxF,MAAMa,aAAa;gBACjB;oBACEC,MAAM;oBACN3B,MAAM,KAAK;oBACXyB,aAAa,KAAK;oBAClBG,MAAM;oBACNC,cAAc;gBAChB;gBACA;oBACEF,MAAM;oBACN3B,MAAM,MAAM;oBACZyB,aAAa,KAAK;oBAClBG,MAAM;oBACNC,cAAc;gBAChB;gBACA;oBACEF,MAAM;oBACN3B,MAAM,MAAM;oBACZyB,aAAa,KAAK;oBAClBG,MAAM;oBACNC,cAAc;gBAChB;aACD;YAED,KAAK,MAAMC,aAAaJ,WAAY;gBAClCb,OAAOkB,IAAI,CAAC;oBACV,GAAGD,SAAS;oBACZE,SAAS,MAAM,IAAI,CAACC,mBAAmB,CAACH,UAAUH,IAAI;gBACxD;YACF;QACF,EAAE,OAAOrB,OAAO;YACdC,QAAQ2B,IAAI,CAAC;QACf;QAEA,OAAOrB;IACT;IAEA,MAAcoB,oBAAoBE,SAAiB,EAAyB;QAC1E,8BAA8B;QAC9B,OAAO;YACL;gBACER,MAAM,GAAGQ,UAAU,SAAS,CAAC;gBAC7BnC,MAAM,KAAK;gBACXW,MAAM,CAAC,eAAe,EAAEwB,WAAW;gBACnCC,SAAS;oBAAC;oBAAS;iBAAO;gBAC1BC,SAAS;oBAAC;iBAAU;gBACpBC,iBAAiB;YACnB;SACD;IACH;IAEA,MAActB,sBAAiD;QAC7D,IAAI;YACF,MAAMuB,kBAAkB5B,aAAI,CAACC,IAAI,CAAC4B,QAAQC,GAAG,IAAI;YACjD,MAAMC,cAAcC,KAAKC,KAAK,CAAC,MAAMC,YAAE,CAACC,QAAQ,CAACP,iBAAiB;YAClE,MAAMxB,eAAe;gBAAE,GAAG2B,YAAY3B,YAAY;gBAAE,GAAG2B,YAAYK,eAAe;YAAC;YAEnF,OAAOC,OAAOC,OAAO,CAAClC,cAAcmC,GAAG,CAAC,CAAC,CAACvB,MAAMwB,QAAQ,GAAM,CAAA;oBAC5DxB;oBACAwB,SAASA;oBACTnD,MAAM,IAAI,CAACoD,sBAAsB,CAACzB;oBAClC0B,OAAO,IAAI,CAACC,sBAAsB,CAAC3B;oBACnC4B,cAAc,IAAI,CAACC,mBAAmB,CAAC7B;oBACvC8B,uBAAuB,IAAI,CAACC,8BAA8B,CAAC/B;gBAC7D,CAAA;QACF,EAAE,OAAOrB,OAAO;YACdC,QAAQ2B,IAAI,CAAC,mCAAmC5B;YAChD,OAAO,EAAE;QACX;IACF;IAEQ8C,uBAAuBzB,IAAY,EAAU;QACnD,+CAA+C;QAC/C,MAAMgC,UAAkC;YACtC,SAAS,KAAK;YACd,aAAa,MAAM;YACnB,QAAQ,MAAM;YACd,iBAAiB,MAAM;YACvB,YAAY,MAAM;YAClB,eAAe,MAAM;YACrB,aAAa,KAAK;YAClB,0BAA0B,KAAK;QACjC;QAEA,OAAOA,OAAO,CAAChC,KAAK,IAAI,KAAK,MAAM,eAAe;IACpD;IAEQ2B,uBAAuB3B,IAAY,EAAoD;QAC7F,MAAMiC,eAAe;YAAC;YAAS;YAAa;SAAO;QACnD,MAAMC,gBAAgB;YAAC;YAAyB;YAAO;SAAY;QAEnE,IAAID,aAAaE,QAAQ,CAACnC,OAAO;YAAC,OAAO;QAAW;QACpD,IAAIkC,cAAcC,QAAQ,CAACnC,OAAO;YAAC,OAAO;QAAY;QACtD,OAAO;IACT;IAEQ6B,oBAAoB7B,IAAY,EAAY;QAClD,MAAM4B,eAAyC;YAC7C,aAAa;gBAAC;gBAAS;aAAiB;YACxC,UAAU;gBAAC;gBAAY;aAAQ;YAC/B,YAAY;gBAAC;gBAAY;aAAU;YACnC,iBAAiB;gBAAC;gBAAgB;aAAe;QACnD;QAEA,OAAOA,YAAY,CAAC5B,KAAK,IAAI,EAAE;IACjC;IAEQ+B,+BAA+B/B,IAAY,EAAU;QAC3D,uCAAuC;QACvC,MAAMoC,kBAA0C;YAC9C,aAAa;YACb,iBAAiB;YACjB,YAAY;YACZ,eAAe,GAAG,wBAAwB;QAC5C;QAEA,OAAOA,eAAe,CAACpC,KAAK,IAAI;IAClC;IAEQT,4BAA4BL,MAAmB,EAAsB;QAC3E,MAAMmD,cAAcnD,OACjBoD,MAAM,CAACzC,CAAAA,QAASA,MAAMK,YAAY,KAAK,YACvCP,MAAM,CAAC,CAACC,KAAKC,QAAUD,MAAMC,MAAMxB,IAAI,EAAE;QAE5C,MAAMkE,UAAUrD,OAAOS,MAAM,CAAC,CAACC,KAAKC,QAAUD,MAAMC,MAAMxB,IAAI,EAAE;QAEhE,+CAA+C;QAC/C,MAAMmE,QAAQ,IAAI,CAACC,yBAAyB,CAACJ,aAAaE;QAC1D,MAAMG,QAAQ,IAAI,CAACC,mBAAmB,CAACH;QAEvC,OAAO;YACLH;YACAE;YACAK,KAAK,KAAK;YACVC,QAAQ,MAAM;YACdC,OAAO,KAAK;YACZC,OAAO,KAAK;YACZP;YACAE;QACF;IACF;IAEQD,0BAA0BJ,WAAmB,EAAEE,OAAe,EAAU;QAC9E,MAAM,EAAErF,kBAAkB,EAAE,GAAG,IAAI,CAACV,MAAM;QAE1C,MAAMwG,iBAAiBX,cAAcnF,mBAAmBE,cAAc;QACtE,MAAM6F,aAAaV,UAAUrF,mBAAmBC,aAAa;QAE7D,MAAM+F,UAAUC,KAAKC,GAAG,CAACJ,iBAAiB,GAAG,KAAKG,KAAKC,GAAG,CAACH,aAAa,GAAG;QAC3E,OAAOE,KAAKC,GAAG,CAAC,MAAOF,UAAU,IAAK;IACxC;IAEQP,oBAAoBH,KAAa,EAA+B;QACtE,IAAIA,SAAS,IAAI;YAAC,OAAO;QAAI;QAC7B,IAAIA,SAAS,IAAI;YAAC,OAAO;QAAI;QAC7B,IAAIA,SAAS,IAAI;YAAC,OAAO;QAAI;QAC7B,IAAIA,SAAS,IAAI;YAAC,OAAO;QAAI;QAC7B,OAAO;IACT;IAEQ/C,wBACNP,MAAmB,EACnBE,YAA8B,EAC9BE,WAA+B,EACD;QAC9B,MAAME,kBAAgD,EAAE;QAExD,8CAA8C;QAC9C,MAAM6D,cAAcnE,OAAOoD,MAAM,CAACzC,CAAAA,QAASA,MAAMxB,IAAI,GAAG,IAAI,CAAC7B,MAAM,CAACI,YAAY;QAChF,KAAK,MAAMiD,SAASwD,YAAa;YAC/B7D,gBAAgBY,IAAI,CAAC;gBACnBH,MAAM;gBACNqD,UAAU;gBACVC,aAAa,CAAC,OAAO,EAAE1D,MAAMG,IAAI,CAAC,uBAAuB,EAAEmD,KAAKK,KAAK,CAAC3D,MAAMxB,IAAI,GAAG,MAAM,GAAG,CAAC;gBAC7FoF,kBAAkB5D,MAAMxB,IAAI,GAAG;gBAC/BqF,gBAAgB,CAAC,QAAQ,EAAE7D,MAAMG,IAAI,CAAC,8CAA8C,CAAC;gBACrF2D,QAAQ;YACV;QACF;QAEA,0CAA0C;QAC1C,MAAMC,YAAYxE,aAAakD,MAAM,CAACuB,CAAAA,MAAOA,IAAIxF,IAAI,GAAG,MAAM,QAAQwF,IAAI/B,qBAAqB,GAAG;QAClG,KAAK,MAAM+B,OAAOD,UAAW;YAC3BpE,gBAAgBY,IAAI,CAAC;gBACnBH,MAAM;gBACNqD,UAAU;gBACVC,aAAa,CAAC,aAAa,EAAEM,IAAI7D,IAAI,CAAC,6CAA6C,CAAC;gBACpFyD,kBAAkBI,IAAIxF,IAAI,GAAIwF,CAAAA,IAAI/B,qBAAqB,GAAG,GAAE;gBAC5D4B,gBAAgB,CAAC,yBAAyB,EAAEG,IAAIjC,YAAY,EAAE3C,KAAK,SAAS,gBAAgB;gBAC5F0E,QAAQ;YACV;QACF;QAEA,yCAAyC;QACzC,IAAIrE,YAAY+C,WAAW,GAAG,IAAI,CAAC7F,MAAM,CAACU,kBAAkB,CAACE,cAAc,EAAE;YAC3EoC,gBAAgBY,IAAI,CAAC;gBACnBH,MAAM;gBACNqD,UAAU;gBACVC,aAAa;gBACbE,kBAAkBnE,YAAY+C,WAAW,GAAG,IAAI,CAAC7F,MAAM,CAACU,kBAAkB,CAACE,cAAc;gBACzFsG,gBAAgB;gBAChBC,QAAQ;YACV;QACF;QAEA,OAAOnE,gBAAgBsE,IAAI,CAAC,CAACC,GAAGC;YAC9B,MAAMC,gBAAgB;gBAAEC,UAAU;gBAAGC,MAAM;gBAAGC,QAAQ;gBAAGC,KAAK;YAAE;YAChE,OAAOJ,aAAa,CAACD,EAAEV,QAAQ,CAAC,GAAGW,aAAa,CAACF,EAAET,QAAQ,CAAC;QAC9D;IACF;IAEA,sCAAsC;IACtC,6BAA6B;IAC7B,sCAAsC;IAEtC,MAAagB,mBAAmB9E,eAA6C,EAAiB;QAC5F,KAAK,MAAM+E,kBAAkB/E,gBAAiB;YAC5C,IAAI+E,eAAeZ,MAAM,KAAK,OAAO;gBACnC,MAAM,IAAI,CAACa,0BAA0B,CAACD;YACxC;QACF;IACF;IAEA,MAAcC,2BAA2BD,cAA0C,EAAiB;QAClG,OAAQA,eAAetE,IAAI;YACzB,KAAK;gBACH,MAAM,IAAI,CAACwE,oBAAoB;gBAC/B;YACF,KAAK;gBACH,MAAM,IAAI,CAACzH,iBAAiB;gBAC5B;YACF;gBACE4B,QAAQ8F,GAAG,CAAC,CAAC,aAAa,EAAEH,eAAetE,IAAI,CAAC,+BAA+B,CAAC;QACpF;IACF;IAEA,MAAcwE,uBAAsC;QAClD,+DAA+D;QAC/D7F,QAAQ8F,GAAG,CAAC;IACd;IAEA,MAAc1H,oBAAmC;QAC/C,kCAAkC;QAClC4B,QAAQ8F,GAAG,CAAC;IACd;IAEA,sCAAsC;IACtC,sBAAsB;IACtB,sCAAsC;IAE/BC,2BAA2BzG,QAAwB,EAAU;QAClE,MAAM0G,SAAS,CAAC;;;;aAIP,EAAE1G,SAASoB,WAAW,CAACkD,KAAK,CAAC,aAAa,EAAEtE,SAASoB,WAAW,CAACoD,KAAK,CAAC;qBAC/D,EAAES,KAAKK,KAAK,CAACtF,SAASoB,WAAW,CAAC+C,WAAW,GAAG,MAAM;gBAC3D,EAAEc,KAAKK,KAAK,CAACtF,SAASoB,WAAW,CAACiD,OAAO,GAAG,MAAM;yBACzC,EAAEY,KAAKK,KAAK,CAACtF,SAASwB,SAAS,GAAG,MAAM;oBAC7C,EAAEyD,KAAKK,KAAK,CAACtF,SAAS4B,WAAW,GAAG,MAAM;;;AAG9D,EAAE5B,SAASgB,MAAM,CAACqC,GAAG,CAAC1B,CAAAA,QAAS,CAAC;IAC5B,EAAEA,MAAMG,IAAI,CAAC,IAAI,EAAEmD,KAAKK,KAAK,CAAC3D,MAAMxB,IAAI,GAAG,MAAM,IAAI,EAAEwB,MAAMI,IAAI,CAAC,EAAE,EAAEJ,MAAMK,YAAY,CAAC;AAC7F,CAAC,EAAEjB,IAAI,CAAC,IAAI;;;AAGZ,EAAEf,SAASsB,eAAe,CAACqF,KAAK,CAAC,GAAG,GAAGtD,GAAG,CAAC,CAACuD,KAAKC,IAAM,CAAC;AACxD,EAAEA,IAAI,EAAE,IAAI,EAAED,IAAI7E,IAAI,CAAC,IAAI,EAAE6E,IAAIxB,QAAQ,CAAC;KACrC,EAAEwB,IAAIvB,WAAW,CAAC;wBACC,EAAEJ,KAAKK,KAAK,CAACsB,IAAIrB,gBAAgB,GAAG,MAAM;qBAC7C,EAAEqB,IAAIpB,cAAc,CAAC;AAC1C,CAAC,EAAEzE,IAAI,CAAC,IAAI;;;0BAGc,EAAEf,SAASkB,YAAY,CAAC4F,MAAM,CAAC;0BAC/B,EAAE9G,SAASkB,YAAY,CAACkD,MAAM,CAAC2C,CAAAA,IAAKA,EAAE5G,IAAI,GAAG,MAAM,MAAM2G,MAAM,CAAC;8BAC5D,EAAE7B,KAAKK,KAAK,CAACtF,SAASkB,YAAY,CAACO,MAAM,CAAC,CAACC,KAAKqF,IAAMrF,MAAMqF,EAAEnD,qBAAqB,EAAE,KAAK5D,SAASkB,YAAY,CAAC4F,MAAM,EAAE;AACtJ,CAAC;QAEG,OAAOJ;IACT;AACF"}