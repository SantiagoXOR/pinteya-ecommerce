5b598b216ca9bac922de567c4cd666fb
/**
 * Hook para manejar la lógica de un carousel de hero con autoplay
 * Incluye navegación automática, manual, pausa en hover y controles completos
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get useHeroCarousel () {
        return useHeroCarousel;
    }
});
const _react = require("react");
const useHeroCarousel = ({ images, autoPlayInterval = 5000, pauseOnHover = true })=>{
    const [currentIndex, setCurrentIndex] = (0, _react.useState)(0);
    const [isPlaying, setIsPlaying] = (0, _react.useState)(true);
    const [isPaused, setIsPaused] = (0, _react.useState)(false);
    const [isHovering, setIsHovering] = (0, _react.useState)(false);
    const intervalRef = (0, _react.useRef)(null);
    // Función para ir al siguiente slide
    const goToNext = (0, _react.useCallback)(()=>{
        if (images.length <= 1) {
            return;
        } // No navegar si solo hay una imagen
        setCurrentIndex((prevIndex)=>(prevIndex + 1) % images.length);
    }, [
        images.length
    ]);
    // Función para ir al slide anterior
    const goToPrevious = (0, _react.useCallback)(()=>{
        if (images.length <= 1) {
            return;
        } // No navegar si solo hay una imagen
        setCurrentIndex((prevIndex)=>prevIndex === 0 ? images.length - 1 : prevIndex - 1);
    }, [
        images.length
    ]);
    // Función para ir a un slide específico
    const goToSlide = (0, _react.useCallback)((index)=>{
        if (index >= 0 && index < images.length) {
            setCurrentIndex(index);
        }
    }, [
        images.length
    ]);
    // Función para pausar el autoplay
    const pause = (0, _react.useCallback)(()=>{
        setIsPlaying(false);
        setIsPaused(true);
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }
    }, []);
    // Función para reanudar el autoplay
    const resume = (0, _react.useCallback)(()=>{
        setIsPlaying(true);
        setIsPaused(false);
    }, []);
    // Función para manejar hover
    const setHover = (0, _react.useCallback)((hovering)=>{
        setIsHovering(hovering);
        if (pauseOnHover) {
            if (hovering) {
                pause();
            } else {
                resume();
            }
        }
    }, [
        pauseOnHover,
        pause,
        resume
    ]);
    // Efecto para manejar el autoplay
    (0, _react.useEffect)(()=>{
        // No iniciar autoplay si hay una sola imagen o menos
        if (images.length <= 1) {
            setIsPlaying(false);
            return;
        }
        // Limpiar intervalo existente
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }
        // Iniciar nuevo intervalo si está reproduciendo y no está pausado
        if (isPlaying && !isPaused && (!pauseOnHover || !isHovering)) {
            intervalRef.current = setInterval(()=>{
                goToNext();
            }, autoPlayInterval);
        }
        // Cleanup
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
                intervalRef.current = null;
            }
        };
    }, [
        isPlaying,
        isPaused,
        isHovering,
        pauseOnHover,
        autoPlayInterval,
        goToNext,
        images.length
    ]);
    // Cleanup al desmontar
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, []);
    return {
        currentIndex,
        isPlaying,
        isPaused,
        goToSlide,
        goToNext,
        goToPrevious,
        pause,
        resume,
        setHover
    };
};
const _default = useHeroCarousel;

//# sourceMappingURL=data:application/json;base64,