93e7d5dd110f619b40eb725148aab6f2
// ===================================
// PINTEYA E-COMMERCE - ORDERS DEV PERSISTENCE HOOK
// Hook para persistir estado de órdenes durante Fast Refresh en desarrollo
// ===================================
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useOrdersDevPersistence () {
        return useOrdersDevPersistence;
    },
    get useOrdersDevState () {
        return useOrdersDevState;
    }
});
const _react = require("react");
// ===================================
// STORAGE GLOBAL PARA DESARROLLO
// ===================================
// Usar Map global para persistir entre Fast Refresh
const globalDevStorage = new Map();
// ===================================
// UTILIDADES
// ===================================
function isValidPersistedState(state) {
    return state && typeof state === 'object' && Array.isArray(state.orders) && typeof state.lastFetchTime === 'number' && typeof state.hasData === 'boolean';
}
function isStateExpired(state, maxAge) {
    return Date.now() - state.lastFetchTime > maxAge;
}
function useOrdersDevPersistence(options) {
    const optionsRef = (0, _react.useRef)(options);
    optionsRef.current = options;
    const getPersistedState = (0, _react.useCallback)(()=>{
        if (!optionsRef.current.enabled || process.env.NODE_ENV !== 'development') {
            return null;
        }
        try {
            const state = globalDevStorage.get(optionsRef.current.storageKey);
            if (!state || !isValidPersistedState(state)) {
                return null;
            }
            if (isStateExpired(state, optionsRef.current.maxAge)) {
                globalDevStorage.delete(optionsRef.current.storageKey);
                return null;
            }
            return state;
        } catch (error) {
            console.warn('[useOrdersDevPersistence] Error getting persisted state:', error);
            return null;
        }
    }, []);
    const persistState = (0, _react.useCallback)((newState)=>{
        if (!optionsRef.current.enabled || process.env.NODE_ENV !== 'development') {
            return;
        }
        try {
            const currentState = globalDevStorage.get(optionsRef.current.storageKey);
            const updatedState = {
                orders: [],
                pagination: null,
                analytics: null,
                filters: {},
                lastFetchTime: Date.now(),
                hasData: false,
                ...currentState,
                ...newState
            };
            globalDevStorage.set(optionsRef.current.storageKey, updatedState);
            if (process.env.NODE_ENV === 'development') {
                console.log('[useOrdersDevPersistence] State persisted:', {
                    key: optionsRef.current.storageKey,
                    ordersCount: updatedState.orders.length,
                    hasData: updatedState.hasData,
                    age: Date.now() - updatedState.lastFetchTime
                });
            }
        } catch (error) {
            console.warn('[useOrdersDevPersistence] Error persisting state:', error);
        }
    }, []);
    const clearPersistedState = (0, _react.useCallback)(()=>{
        if (!optionsRef.current.enabled || process.env.NODE_ENV !== 'development') {
            return;
        }
        globalDevStorage.delete(optionsRef.current.storageKey);
        if (process.env.NODE_ENV === 'development') {
            console.log('[useOrdersDevPersistence] Persisted state cleared');
        }
    }, []);
    const hasValidPersistedData = (0, _react.useCallback)(()=>{
        const state = getPersistedState();
        return state !== null && state.hasData && state.orders.length > 0;
    }, [
        getPersistedState
    ]);
    // Cleanup al desmontar (solo en producción o cuando se deshabilita)
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (!optionsRef.current.enabled || process.env.NODE_ENV !== 'development') {
                clearPersistedState();
            }
        };
    }, [
        clearPersistedState
    ]);
    return {
        getPersistedState,
        persistState,
        clearPersistedState,
        hasValidPersistedData
    };
}
function useOrdersDevState(storageKey = 'orders-dev-state') {
    return useOrdersDevPersistence({
        enabled: true,
        maxAge: 5 * 60 * 1000,
        storageKey
    });
}

//# sourceMappingURL=data:application/json;base64,