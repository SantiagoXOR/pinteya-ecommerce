{"version":3,"names":["cov_uv8nynb65","actualCoverage","s","GET","f","PUT","runtime","request","session","_config","auth","user","b","_server","NextResponse","json","error","status","userEmail","email","data","_supabase","supabaseAdmin","from","select","eq","single","securitySettings","id","code","console","defaultSettings","user_id","two_factor_enabled","login_alerts","suspicious_activity_alerts","new_device_alerts","password_change_alerts","trusted_devices_only","session_timeout","max_concurrent_sessions","newSettings","createError","insert","success","settings","alerts","order","ascending","limit","stats","getSecurityStats","body","updateData","updated_at","Date","toISOString","updatedSettings","update","logSecurityActivity","changes","ip_address","getClientIP","message","userId","count","activeSessions","head","unresolvedAlerts","lastSuspiciousActivity","thirtyDaysAgo","now","recentSessions","gte","uniqueDevices","Set","map","device_name","size","created_at","uniqueDevicesLast30Days","action","metadata","category","forwarded","headers","get","realIP","split","trim","ip"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\security\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE CONFIGURACIÓN DE SEGURIDAD\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para configuración de seguridad\r\nexport interface SecuritySettings {\r\n  id: string;\r\n  user_id: string;\r\n  two_factor_enabled: boolean;\r\n  login_alerts: boolean;\r\n  suspicious_activity_alerts: boolean;\r\n  new_device_alerts: boolean;\r\n  password_change_alerts: boolean;\r\n  trusted_devices_only: boolean;\r\n  session_timeout: number; // en minutos\r\n  max_concurrent_sessions: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface SecurityAlert {\r\n  id: string;\r\n  user_id: string;\r\n  type: 'login' | 'suspicious_activity' | 'new_device' | 'password_change' | 'session_timeout';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  metadata?: Record<string, any>;\r\n  is_read: boolean;\r\n  is_resolved: boolean;\r\n  created_at: string;\r\n}\r\n\r\n// GET - Obtener configuración de seguridad del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener configuración de seguridad\r\n    const { data: securitySettings, error } = await supabaseAdmin\r\n      .from('user_security_settings')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\r\n      console.error('Error al obtener configuración de seguridad:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener configuración de seguridad' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si no existe configuración, crear una por defecto\r\n    if (!securitySettings) {\r\n      const defaultSettings: Omit<SecuritySettings, 'id' | 'created_at' | 'updated_at'> = {\r\n        user_id: user.id,\r\n        two_factor_enabled: false,\r\n        login_alerts: true,\r\n        suspicious_activity_alerts: true,\r\n        new_device_alerts: true,\r\n        password_change_alerts: true,\r\n        trusted_devices_only: false,\r\n        session_timeout: 30, // 30 días\r\n        max_concurrent_sessions: 5,\r\n      };\r\n\r\n      const { data: newSettings, error: createError } = await supabaseAdmin\r\n        .from('user_security_settings')\r\n        .insert(defaultSettings)\r\n        .select()\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear configuración por defecto:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear configuración de seguridad' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        settings: newSettings,\r\n      });\r\n    }\r\n\r\n    // Obtener alertas de seguridad recientes\r\n    const { data: alerts } = await supabaseAdmin\r\n      .from('user_security_alerts')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .eq('is_resolved', false)\r\n      .order('created_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    // Obtener estadísticas de seguridad\r\n    const stats = await getSecurityStats(user.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      settings: securitySettings,\r\n      alerts: alerts || [],\r\n      stats,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/security:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Actualizar configuración de seguridad\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      two_factor_enabled,\r\n      login_alerts,\r\n      suspicious_activity_alerts,\r\n      new_device_alerts,\r\n      password_change_alerts,\r\n      trusted_devices_only,\r\n      session_timeout,\r\n      max_concurrent_sessions,\r\n    } = body;\r\n\r\n    // Validar datos\r\n    if (session_timeout && (session_timeout < 1 || session_timeout > 43200)) { // máximo 30 días\r\n      return NextResponse.json(\r\n        { error: 'Timeout de sesión debe estar entre 1 y 43200 minutos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (max_concurrent_sessions && (max_concurrent_sessions < 1 || max_concurrent_sessions > 20)) {\r\n      return NextResponse.json(\r\n        { error: 'Máximo de sesiones concurrentes debe estar entre 1 y 20' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Preparar datos de actualización\r\n    const updateData: any = {\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (typeof two_factor_enabled === 'boolean') {\r\n      updateData.two_factor_enabled = two_factor_enabled;\r\n    }\r\n    if (typeof login_alerts === 'boolean') {\r\n      updateData.login_alerts = login_alerts;\r\n    }\r\n    if (typeof suspicious_activity_alerts === 'boolean') {\r\n      updateData.suspicious_activity_alerts = suspicious_activity_alerts;\r\n    }\r\n    if (typeof new_device_alerts === 'boolean') {\r\n      updateData.new_device_alerts = new_device_alerts;\r\n    }\r\n    if (typeof password_change_alerts === 'boolean') {\r\n      updateData.password_change_alerts = password_change_alerts;\r\n    }\r\n    if (typeof trusted_devices_only === 'boolean') {\r\n      updateData.trusted_devices_only = trusted_devices_only;\r\n    }\r\n    if (session_timeout) {\r\n      updateData.session_timeout = session_timeout;\r\n    }\r\n    if (max_concurrent_sessions) {\r\n      updateData.max_concurrent_sessions = max_concurrent_sessions;\r\n    }\r\n\r\n    // Actualizar configuración\r\n    const { data: updatedSettings, error } = await supabaseAdmin\r\n      .from('user_security_settings')\r\n      .update(updateData)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar configuración de seguridad:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar configuración de seguridad' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad\r\n    await logSecurityActivity(user.id, 'security_settings_updated', {\r\n      changes: updateData,\r\n      ip_address: getClientIP(request),\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      settings: updatedSettings,\r\n      message: 'Configuración de seguridad actualizada exitosamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/security:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función auxiliar para obtener estadísticas de seguridad\r\nasync function getSecurityStats(userId: string) {\r\n  try {\r\n    // Contar sesiones activas\r\n    const { count: activeSessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('user_id', userId);\r\n\r\n    // Contar alertas no resueltas\r\n    const { count: unresolvedAlerts } = await supabaseAdmin\r\n      .from('user_security_alerts')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('user_id', userId)\r\n      .eq('is_resolved', false);\r\n\r\n    // Última actividad sospechosa\r\n    const { data: lastSuspiciousActivity } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .select('created_at')\r\n      .eq('user_id', userId)\r\n      .eq('category', 'security')\r\n      .order('created_at', { ascending: false })\r\n      .limit(1);\r\n\r\n    // Dispositivos únicos (últimos 30 días)\r\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\r\n    const { data: recentSessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('device_name, ip_address')\r\n      .eq('user_id', userId)\r\n      .gte('last_activity', thirtyDaysAgo);\r\n\r\n    const uniqueDevices = new Set(\r\n      recentSessions?.map(s => `${s.device_name}-${s.ip_address}`)\r\n    ).size;\r\n\r\n    return {\r\n      activeSessions: activeSessions || 0,\r\n      unresolvedAlerts: unresolvedAlerts || 0,\r\n      lastSuspiciousActivity: lastSuspiciousActivity?.[0]?.created_at || null,\r\n      uniqueDevicesLast30Days: uniqueDevices || 0,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas de seguridad:', error);\r\n    return {\r\n      activeSessions: 0,\r\n      unresolvedAlerts: 0,\r\n      lastSuspiciousActivity: null,\r\n      uniqueDevicesLast30Days: 0,\r\n    };\r\n  }\r\n}\r\n\r\n// Función auxiliar para registrar actividad de seguridad\r\nasync function logSecurityActivity(\r\n  userId: string, \r\n  action: string, \r\n  metadata: any\r\n) {\r\n  try {\r\n    await supabaseAdmin\r\n      .from('user_activity')\r\n      .insert({\r\n        user_id: userId,\r\n        action,\r\n        category: 'security',\r\n        metadata,\r\n        created_at: new Date().toISOString(),\r\n      });\r\n  } catch (error) {\r\n    console.error('Error al registrar actividad de seguridad:', error);\r\n  }\r\n}\r\n\r\n// Función auxiliar para obtener IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  if (realIP) {\r\n    return realIP;\r\n  }\r\n  \r\n  return request.ip || 'unknown';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}