{"version":3,"names":["cov_1mlpxp5z2p","actualCoverage","s","useProductFilters","DEFAULT_FILTERS","categories","brands","priceMin","undefined","priceMax","search","sortBy","page","limit","options","b","f","syncWithUrl","defaultSort","defaultLimit","debounceMs","onFiltersChange","router","_navigation","useRouter","searchParams","useSearchParams","isLoading","setIsLoading","_react","useState","filters","setFilters","useEffect","urlFilters","get","split","filter","Boolean","Number","updateUrl","useCallback","newFilters","params","URLSearchParams","length","set","join","toString","trim","newQuery","currentQuery","window","location","slice","newUrl","pathname","push","scroll","updateFilters","updates","prev","hasOwnProperty","Object","keys","setTimeout","updateCategories","updateBrands","updatePriceRange","updateSearch","updateSort","updatePage","updateLimit","clearFilters","clearedFilters","applyFilters","hasActiveFilters","useMemo","totalActiveFilters","count"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProductFilters.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useProductFilters - Optimizado para Performance\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\nimport { ProductFilters } from '@/types/api';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface ProductFilterState {\r\n  categories: string[];\r\n  brands: string[];\r\n  priceMin?: number;\r\n  priceMax?: number;\r\n  search?: string;\r\n  sortBy: string;\r\n  page: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface UseProductFiltersOptions {\r\n  syncWithUrl?: boolean;\r\n  defaultSort?: string;\r\n  defaultLimit?: number;\r\n  debounceMs?: number;\r\n  onFiltersChange?: (filters: ProductFilterState) => void;\r\n}\r\n\r\nexport interface UseProductFiltersReturn {\r\n  filters: ProductFilterState;\r\n  updateCategories: (categories: string[]) => void;\r\n  updateBrands: (brands: string[]) => void;\r\n  updatePriceRange: (min?: number, max?: number) => void;\r\n  updateSearch: (search: string) => void;\r\n  updateSort: (sort: string) => void;\r\n  updatePage: (page: number) => void;\r\n  updateLimit: (limit: number) => void;\r\n  clearFilters: () => void;\r\n  applyFilters: () => void;\r\n  hasActiveFilters: boolean;\r\n  totalActiveFilters: number;\r\n  isLoading: boolean;\r\n}\r\n\r\n// ===================================\r\n// CONSTANTES\r\n// ===================================\r\n\r\nconst DEFAULT_FILTERS: ProductFilterState = {\r\n  categories: [],\r\n  brands: [],\r\n  priceMin: undefined,\r\n  priceMax: undefined,\r\n  search: '',\r\n  sortBy: 'created_at',\r\n  page: 1,\r\n  limit: 12,\r\n};\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useProductFilters(options: UseProductFiltersOptions = {}): UseProductFiltersReturn {\r\n  const {\r\n    syncWithUrl = true,\r\n    defaultSort = 'created_at',\r\n    defaultLimit = 12,\r\n    debounceMs = 300,\r\n    onFiltersChange,\r\n  } = options;\r\n\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Estado de filtros optimizado\r\n  const [filters, setFilters] = useState<ProductFilterState>(() => ({\r\n    ...DEFAULT_FILTERS,\r\n    sortBy: defaultSort,\r\n    limit: defaultLimit,\r\n  }));\r\n\r\n  // Inicializar y sincronizar filtros desde URL\r\n  useEffect(() => {\r\n    if (!syncWithUrl || !searchParams) {return;}\r\n\r\n    const urlFilters: ProductFilterState = {\r\n      categories: searchParams.get('categories')?.split(',').filter(Boolean) || [],\r\n      brands: searchParams.get('brands')?.split(',').filter(Boolean) || [],\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || '',\r\n      sortBy: searchParams.get('sortBy') || defaultSort,\r\n      page: Number(searchParams.get('page')) || 1,\r\n      limit: Number(searchParams.get('limit')) || defaultLimit,\r\n    };\r\n\r\n    setFilters(urlFilters);\r\n  }, [searchParams, syncWithUrl, defaultSort, defaultLimit]); // Actualizar cuando cambien los searchParams\r\n\r\n  // Función optimizada para actualizar URL\r\n  const updateUrl = useCallback((newFilters: ProductFilterState) => {\r\n    if (!syncWithUrl) {return;}\r\n\r\n    const params = new URLSearchParams();\r\n\r\n    // Solo agregar parámetros que tienen valores\r\n    if (newFilters.categories.length > 0) {\r\n      params.set('categories', newFilters.categories.join(','));\r\n    }\r\n    if (newFilters.brands.length > 0) {\r\n      params.set('brands', newFilters.brands.join(','));\r\n    }\r\n    if (newFilters.priceMin !== undefined) {\r\n      params.set('priceMin', newFilters.priceMin.toString());\r\n    }\r\n    if (newFilters.priceMax !== undefined) {\r\n      params.set('priceMax', newFilters.priceMax.toString());\r\n    }\r\n    if (newFilters.search && newFilters.search.trim()) {\r\n      params.set('search', newFilters.search.trim());\r\n    }\r\n    if (newFilters.sortBy !== defaultSort) {\r\n      params.set('sortBy', newFilters.sortBy);\r\n    }\r\n    if (newFilters.page > 1) {\r\n      params.set('page', newFilters.page.toString());\r\n    }\r\n    if (newFilters.limit !== defaultLimit) {\r\n      params.set('limit', newFilters.limit.toString());\r\n    }\r\n\r\n    const newQuery = params.toString();\r\n    const currentQuery = window.location.search.slice(1);\r\n\r\n    if (newQuery !== currentQuery) {\r\n      const newUrl = newQuery \r\n        ? `${window.location.pathname}?${newQuery}`\r\n        : window.location.pathname;\r\n\r\n      router.push(newUrl, { scroll: false });\r\n    }\r\n  }, [syncWithUrl, router, defaultSort, defaultLimit]);\r\n\r\n  // Función optimizada para actualizar filtros\r\n  const updateFilters = useCallback((updates: Partial<ProductFilterState>) => {\r\n    setFilters(prev => {\r\n      const newFilters = { ...prev, ...updates };\r\n      \r\n      // Reset page cuando cambian otros filtros (excepto page)\r\n      if (!updates.hasOwnProperty('page') && Object.keys(updates).length > 0) {\r\n        newFilters.page = 1;\r\n      }\r\n\r\n      // Actualizar URL de forma asíncrona\r\n      setTimeout(() => updateUrl(newFilters), 0);\r\n      \r\n      // Callback opcional\r\n      onFiltersChange?.(newFilters);\r\n      \r\n      return newFilters;\r\n    });\r\n  }, [updateUrl, onFiltersChange]);\r\n\r\n  // Handlers memoizados para evitar re-renders\r\n  const updateCategories = useCallback((categories: string[]) => {\r\n    updateFilters({ categories });\r\n  }, [updateFilters]);\r\n\r\n  const updateBrands = useCallback((brands: string[]) => {\r\n    updateFilters({ brands });\r\n  }, [updateFilters]);\r\n\r\n  const updatePriceRange = useCallback((priceMin?: number, priceMax?: number) => {\r\n    updateFilters({ priceMin, priceMax });\r\n  }, [updateFilters]);\r\n\r\n  const updateSearch = useCallback((search: string) => {\r\n    updateFilters({ search });\r\n  }, [updateFilters]);\r\n\r\n  const updateSort = useCallback((sortBy: string) => {\r\n    updateFilters({ sortBy });\r\n  }, [updateFilters]);\r\n\r\n  const updatePage = useCallback((page: number) => {\r\n    updateFilters({ page });\r\n  }, [updateFilters]);\r\n\r\n  const updateLimit = useCallback((limit: number) => {\r\n    updateFilters({ limit });\r\n  }, [updateFilters]);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    const clearedFilters = {\r\n      ...DEFAULT_FILTERS,\r\n      sortBy: defaultSort,\r\n      limit: defaultLimit,\r\n    };\r\n    setFilters(clearedFilters);\r\n    updateUrl(clearedFilters);\r\n  }, [defaultSort, defaultLimit, updateUrl]);\r\n\r\n  const applyFilters = useCallback(() => {\r\n    // Forzar actualización de URL\r\n    updateUrl(filters);\r\n    onFiltersChange?.(filters);\r\n  }, [filters, updateUrl, onFiltersChange]);\r\n\r\n  // Computed values memoizados\r\n  const hasActiveFilters = useMemo(() => {\r\n    return (\r\n      filters.categories.length > 0 ||\r\n      filters.brands.length > 0 ||\r\n      filters.priceMin !== undefined ||\r\n      filters.priceMax !== undefined ||\r\n      (filters.search && filters.search.trim() !== '') ||\r\n      filters.sortBy !== defaultSort ||\r\n      filters.page > 1\r\n    );\r\n  }, [filters, defaultSort]);\r\n\r\n  const totalActiveFilters = useMemo(() => {\r\n    let count = 0;\r\n    count += filters.categories.length;\r\n    count += filters.brands.length;\r\n    if (filters.priceMin !== undefined || filters.priceMax !== undefined) {count += 1;}\r\n    if (filters.search && filters.search.trim() !== '') {count += 1;}\r\n    return count;\r\n  }, [filters]);\r\n\r\n  return {\r\n    filters,\r\n    updateCategories,\r\n    updateBrands,\r\n    updatePriceRange,\r\n    updateSearch,\r\n    updateSort,\r\n    updatePage,\r\n    updateLimit,\r\n    clearFilters,\r\n    applyFilters,\r\n    hasActiveFilters,\r\n    totalActiveFilters,\r\n    isLoading,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}