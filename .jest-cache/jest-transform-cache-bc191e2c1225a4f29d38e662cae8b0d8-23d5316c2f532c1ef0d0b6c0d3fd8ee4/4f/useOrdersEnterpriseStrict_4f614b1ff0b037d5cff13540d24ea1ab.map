{"version":3,"names":["cov_3yn7trxgi","actualCoverage","s","useOrderDetailStrict","f","useOrdersEnterpriseStrict","debounce","func","wait","timeout","args","clearTimeout","setTimeout","DEFAULT_OPTIONS","autoFetch","refetchInterval","maxRetries","enableCache","cacheTimeout","initialFilters","b","options","toast","_usetoast","useToast","apiMonitoring","_apimonitoring","useApiMonitoring","opts","_react","useMemo","recordDiscrepancy","useCallback","recordRenderingIssue","cache","_useOrdersCache","useOrdersCache","maxSize","cleanupInterval","minRequestInterval","devPersistence","_useOrdersDevPersistence","useOrdersDevState","state","_useOrdersState","useOrdersState","api","_useOrdersApi","useOrdersApi","retryCountRef","useRef","refetchIntervalRef","debounceTimeoutRef","fetchOrdersInternal","fetchOrdersImmediate","newFilters","console","log","filters","requestKey","JSON","stringify","hasFiltersChanged","isLoading","updateFilters","setLoading","current","attemptFetch","attempt","currentFilters","getLastFilters","result","_apistrict","isStrictApiResponse","data","expectedCount","pagination","total","actualCount","orders","length","endpoint","URLSearchParams","page","toString","limit","status","payment_status","fulfillment_status","sort_by","sort_order","expectedPageCount","Math","min","setOrders","setPagination","setAnalytics","analytics","process","env","NODE_ENV","persistState","hasData","lastFetchTime","Date","now","code","delay","pow","Promise","resolve","setError","error","title","description","variant","fetchOrders","debounceMs","refreshOrders","clearCache","clearError","retryLastRequest","lastFilters","hasRestoredRef","useEffect","hasValidPersistedData","persistedState","getPersistedState","ordersCount","filtersRef","isInitialMount","hasChanged","abortCurrentRequest","clearInterval","lastFetch","orderId","order","setOrder","useState","setIsLoading","fetchOrder","response","fetch","credentials","json","validatedResponse","toStrictOrdersResponse","isStrictApiError","orderData","err","errorMessage","Error","message","refetch"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useOrdersEnterpriseStrict.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - STRICT ORDERS HOOK (REFACTORED)\r\n// Hook orquestador para gestión de órdenes con validación estricta\r\n// ===================================\r\n\r\nimport { useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  StrictOrdersListResponse,\r\n  StrictApiError,\r\n  ApiResult,\r\n  createStrictApiError,\r\n  StrictOrderEnterprise,\r\n  StrictPagination,\r\n  isStrictApiError,\r\n  isStrictApiResponse\r\n} from '@/types/api-strict';\r\nimport { OrderStatus, PaymentStatus, FulfillmentStatus } from '@/types/orders-enterprise';\r\nimport { useApiMonitoring } from '@/utils/api-monitoring';\r\nimport { useOrdersCache } from './useOrdersCache';\r\nimport { useOrdersApi } from './useOrdersApi';\r\nimport { useOrdersState, StrictOrdersState, StrictOrdersActions } from './useOrdersState';\r\nimport { useOrdersDevState } from './useOrdersDevPersistence';\r\n\r\n// Función de debounce para evitar peticiones múltiples\r\nfunction debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n// ===================================\r\n// TIPOS DE FILTROS ESTRICTOS\r\n// ===================================\r\n\r\nexport interface StrictOrderFilters {\r\n  readonly search?: string;\r\n  readonly status?: OrderStatus | 'all';\r\n  readonly payment_status?: PaymentStatus | 'all';\r\n  readonly fulfillment_status?: FulfillmentStatus | 'all';\r\n  readonly date_from?: string;\r\n  readonly date_to?: string;\r\n  readonly page?: number;\r\n  readonly limit?: number;\r\n  readonly sort_by?: 'created_at' | 'updated_at' | 'total' | 'order_number';\r\n  readonly sort_order?: 'asc' | 'desc';\r\n}\r\n\r\n// Tipos movidos a useOrdersState.ts\r\n\r\nexport interface UseOrdersEnterpriseStrictReturn extends StrictOrdersState, StrictOrdersActions {\r\n  readonly fetchOrders: (filters?: Partial<StrictOrderFilters>) => Promise<void>;\r\n  readonly refreshOrders: () => Promise<void>;\r\n  readonly retryLastRequest: () => Promise<void>;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DEL HOOK\r\n// ===================================\r\n\r\ninterface UseOrdersEnterpriseStrictOptions {\r\n  readonly autoFetch?: boolean;\r\n  readonly refetchInterval?: number;\r\n  readonly maxRetries?: number;\r\n  readonly timeout?: number;\r\n  readonly enableCache?: boolean;\r\n  readonly cacheTimeout?: number;\r\n}\r\n\r\nconst DEFAULT_OPTIONS: Required<UseOrdersEnterpriseStrictOptions> = {\r\n  autoFetch: true,\r\n  refetchInterval: 0, // 0 = disabled\r\n  maxRetries: 3,\r\n  timeout: 10000, // 10 seconds\r\n  enableCache: true,\r\n  cacheTimeout: 5 * 60 * 1000 // 5 minutes\r\n};\r\n\r\n// Constantes DEFAULT movidas a useOrdersState.ts\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DEL HOOK ORQUESTADOR\r\n// ===================================\r\n\r\n// Funciones de cache movidas a useOrdersCache.ts\r\n\r\n// Funciones de cache movidas a useOrdersCache.ts\r\n\r\n// Todas las funciones de cache movidas a useOrdersCache.ts\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useOrdersEnterpriseStrict(\r\n  initialFilters: Partial<StrictOrderFilters> = {},\r\n  options: Partial<UseOrdersEnterpriseStrictOptions> = {}\r\n): UseOrdersEnterpriseStrictReturn {\r\n  const { toast } = useToast();\r\n  const apiMonitoring = useApiMonitoring();\r\n  const opts = useMemo(() => ({ ...DEFAULT_OPTIONS, ...options }), [options]);\r\n\r\n  // Memoizar las funciones de monitoreo para evitar recreaciones\r\n  const recordDiscrepancy = useCallback(apiMonitoring.recordDiscrepancy, []);\r\n  const recordRenderingIssue = useCallback(apiMonitoring.recordRenderingIssue, []);\r\n\r\n  // ===================================\r\n  // HOOKS ESPECIALIZADOS\r\n  // ===================================\r\n\r\n  // Hook de cache\r\n  const cache = useOrdersCache({\r\n    enableCache: opts.enableCache,\r\n    cacheTimeout: opts.cacheTimeout,\r\n    maxSize: 50,\r\n    cleanupInterval: 10 * 60 * 1000,\r\n    minRequestInterval: 1000\r\n  });\r\n\r\n  // Hook de persistencia para desarrollo (Fast Refresh)\r\n  const devPersistence = useOrdersDevState('orders-enterprise-dev');\r\n\r\n  // Hook de estado\r\n  const state = useOrdersState(initialFilters);\r\n\r\n  // Hook de API\r\n  const api = useOrdersApi({\r\n    timeout: opts.timeout,\r\n    maxRetries: opts.maxRetries,\r\n    enableCache: opts.enableCache,\r\n    cache\r\n  });\r\n  \r\n  // Referencias para control de requests (simplificadas)\r\n  const retryCountRef = useRef(0);\r\n  const refetchIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // ===================================\r\n  // FUNCIONES DE FETCH SIMPLIFICADAS\r\n  // ===================================\r\n\r\n  // Usar el hook de API directamente\r\n  const fetchOrdersInternal = api.fetchOrdersInternal;\r\n\r\n  // ===================================\r\n  // FUNCIONES DE FETCH PÚBLICAS\r\n  // ===================================\r\n\r\n  // Lógica de fetch movida a useOrdersApi.ts\r\n\r\n  // ===================================\r\n  // FUNCIÓN DE FETCH PÚBLICA CON RETRY\r\n  // ===================================\r\n\r\n  // Función interna sin debounce para uso directo\r\n  const fetchOrdersImmediate = useCallback(async (newFilters: Partial<StrictOrderFilters> = {}): Promise<void> => {\r\n    console.log('[useOrdersEnterpriseStrict] fetchOrdersImmediate called with filters:', newFilters);\r\n    console.log('[useOrdersEnterpriseStrict] Current state filters:', state.filters);\r\n    \r\n    // Generar clave única para esta petición\r\n    const requestKey = JSON.stringify({ ...state.filters, ...newFilters });\r\n    console.log('[useOrdersEnterpriseStrict] Request key:', requestKey);\r\n\r\n    // Evitar peticiones duplicadas\r\n    if (state.hasFiltersChanged({ ...state.filters, ...newFilters }) && state.isLoading) {\r\n      console.log('[useOrdersEnterpriseStrict] Skipping duplicate request');\r\n      return;\r\n    }\r\n\r\n    // Actualizar filtros y estado de carga\r\n    console.log('[useOrdersEnterpriseStrict] Updating filters and setting loading to true');\r\n    state.updateFilters(newFilters);\r\n    state.setLoading(true);\r\n    retryCountRef.current = 0;\r\n\r\n    const attemptFetch = async (attempt: number): Promise<void> => {\r\n      const currentFilters = state.getLastFilters();\r\n      console.log('[useOrdersEnterpriseStrict] attemptFetch - attempt:', attempt, 'filters:', currentFilters);\r\n      \r\n      const result = await fetchOrdersInternal(currentFilters, attempt > 0);\r\n      console.log('[useOrdersEnterpriseStrict] API result:', result);\r\n\r\n      if (isStrictApiResponse(result)) {\r\n        console.log('[useOrdersEnterpriseStrict] Valid API response received:', result.data);\r\n        // Monitoreo automático de discrepancias\r\n        const expectedCount = result.data.pagination.total;\r\n        const actualCount = result.data.orders.length;\r\n        const endpoint = `/api/admin/orders?${new URLSearchParams({\r\n          page: currentFilters.page?.toString() || '1',\r\n          limit: currentFilters.limit?.toString() || '20',\r\n          ...(currentFilters.status && { status: currentFilters.status }),\r\n          ...(currentFilters.payment_status && { payment_status: currentFilters.payment_status }),\r\n          ...(currentFilters.fulfillment_status && { fulfillment_status: currentFilters.fulfillment_status }),\r\n          ...(currentFilters.sort_by && { sort_by: currentFilters.sort_by }),\r\n          ...(currentFilters.sort_order && { sort_order: currentFilters.sort_order })\r\n        }).toString()}`;\r\n\r\n        // Solo registrar discrepancia si hay una diferencia real (no por paginación)\r\n        const expectedPageCount = Math.min(currentFilters.limit || 20, expectedCount - ((currentFilters.page || 1) - 1) * (currentFilters.limit || 20));\r\n        if (actualCount < expectedPageCount && expectedPageCount > 0) {\r\n          recordDiscrepancy(endpoint, expectedPageCount, actualCount);\r\n        }\r\n\r\n        // Actualizar estado usando el hook especializado\r\n        state.setOrders(result.data.orders);\r\n        state.setPagination(result.data.pagination);\r\n        state.setAnalytics(result.data.analytics || null);\r\n        retryCountRef.current = 0;\r\n\r\n        // ✅ PERSISTIR ESTADO PARA DESARROLLO (Fast Refresh)\r\n        if (process.env.NODE_ENV === 'development') {\r\n          devPersistence.persistState({\r\n            orders: result.data.orders,\r\n            pagination: result.data.pagination,\r\n            analytics: result.data.analytics || null,\r\n            filters: currentFilters,\r\n            hasData: true,\r\n            lastFetchTime: Date.now()\r\n          });\r\n        }\r\n      } else {\r\n        // Es un error\r\n        if (attempt < opts.maxRetries && result.code !== 'REQUEST_CANCELLED') {\r\n          retryCountRef.current = attempt + 1;\r\n          // Esperar antes del retry (exponential backoff)\r\n          const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          return attemptFetch(attempt + 1);\r\n        }\r\n\r\n        // Máximo de reintentos alcanzado o error no recuperable\r\n        state.setError(result.error);\r\n\r\n        // Registrar problema de renderizado por error de API\r\n        recordRenderingIssue(\r\n          'useOrdersEnterpriseStrict',\r\n          0,\r\n          0,\r\n          currentFilters,\r\n          result.error\r\n        );\r\n\r\n        // Mostrar toast de error\r\n        if (result.code !== 'REQUEST_CANCELLED') {\r\n          toast({\r\n            title: 'Error al cargar órdenes',\r\n            description: result.error,\r\n            variant: 'destructive'\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    await attemptFetch(0);\r\n  }, [fetchOrdersInternal, opts.maxRetries, toast, recordDiscrepancy, recordRenderingIssue, state]);\r\n\r\n  // Función fetchOrders con debouncing para evitar peticiones múltiples\r\n  const fetchOrders = useCallback((newFilters: Partial<StrictOrderFilters> = {}): Promise<void> => {\r\n    return new Promise<void>((resolve) => {\r\n      // Limpiar timeout anterior si existe\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n      \r\n      // Configurar nuevo timeout con debounce\r\n      const debounceMs = process.env.NODE_ENV === 'development' ? 300 : 150;\r\n      debounceTimeoutRef.current = setTimeout(async () => {\r\n        try {\r\n          await fetchOrdersImmediate(newFilters);\r\n          resolve();\r\n        } catch (error) {\r\n          console.error('Error in debounced fetchOrders:', error);\r\n          resolve(); // Resolver incluso en caso de error para evitar promesas colgadas\r\n        }\r\n      }, debounceMs);\r\n    });\r\n  }, [fetchOrdersImmediate]);\r\n\r\n  // ===================================\r\n  // OTRAS ACCIONES\r\n  // ===================================\r\n\r\n  const refreshOrders = useCallback(async (): Promise<void> => {\r\n    // Limpiar cache para forzar refresh\r\n    if (opts.enableCache) {\r\n      cache.clearCache();\r\n    }\r\n    await fetchOrders();\r\n  }, [fetchOrders, opts.enableCache, cache]);\r\n\r\n  // Usar las funciones del hook de estado directamente\r\n  const updateFilters = state.updateFilters;\r\n  const clearError = state.clearError;\r\n\r\n  const retryLastRequest = useCallback(async (): Promise<void> => {\r\n    const lastFilters = state.getLastFilters();\r\n    if (lastFilters) {\r\n      await fetchOrders(lastFilters);\r\n    }\r\n  }, [fetchOrders, state]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // ===================================\r\n  // RESTAURACIÓN DE ESTADO PERSISTIDO (DESARROLLO)\r\n  // ===================================\r\n\r\n  const hasRestoredRef = useRef(false);\r\n  useEffect(() => {\r\n    if (!hasRestoredRef.current && process.env.NODE_ENV === 'development') {\r\n      hasRestoredRef.current = true;\r\n\r\n      // Intentar restaurar estado persistido\r\n      if (devPersistence.hasValidPersistedData()) {\r\n        const persistedState = devPersistence.getPersistedState();\r\n        if (persistedState) {\r\n          console.log('[useOrdersEnterpriseStrict] Restoring persisted state:', {\r\n            ordersCount: persistedState.orders.length,\r\n            hasData: persistedState.hasData\r\n          });\r\n\r\n          // Restaurar estado\r\n          state.setOrders(persistedState.orders);\r\n          state.setPagination(persistedState.pagination);\r\n          state.setAnalytics(persistedState.analytics);\r\n          state.updateFilters(persistedState.filters);\r\n\r\n          return; // No hacer auto-fetch si tenemos datos persistidos\r\n        }\r\n      }\r\n    }\r\n\r\n    // Auto-fetch inicial solo si no hay datos persistidos\r\n    if (opts.autoFetch && !hasRestoredRef.current) {\r\n      fetchOrders();\r\n    }\r\n  }, [opts.autoFetch]); // Solo ejecutar una vez al montar\r\n\r\n  // Escuchar cambios en filtros con debouncing optimizado\r\n  const filtersRef = useRef(state.filters);\r\n  const isInitialMount = useRef(true);\r\n  \r\n  useEffect(() => {\r\n    // Evitar fetch en el primer render (ya se hace en auto-fetch)\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n      filtersRef.current = state.filters;\r\n      return;\r\n    }\r\n\r\n    // Solo hacer fetch si los filtros han cambiado realmente\r\n    const hasChanged = JSON.stringify(filtersRef.current) !== JSON.stringify(state.filters);\r\n    \r\n    if (hasChanged) {\r\n      filtersRef.current = state.filters;\r\n      fetchOrders();\r\n    }\r\n  }, [state.filters, fetchOrders]); // Dependencias mínimas y estables\r\n\r\n  // Refetch interval - TEMPORALMENTE DESHABILITADO para evitar refresco infinito\r\n  useEffect(() => {\r\n    // NOTA: Refetch interval deshabilitado temporalmente para solucionar refresco infinito\r\n    // TODO: Reimplementar con useRef para fetchOrders o usar React Query\r\n    /*\r\n    if (opts.refetchInterval > 0) {\r\n      refetchIntervalRef.current = setInterval(() => {\r\n        if (!state.isLoading) {\r\n          fetchOrders();\r\n        }\r\n      }, opts.refetchInterval);\r\n\r\n      return () => {\r\n        if (refetchIntervalRef.current) {\r\n          clearInterval(refetchIntervalRef.current);\r\n        }\r\n      };\r\n    }\r\n    */\r\n  }, [opts.refetchInterval]);\r\n\r\n  // Limpieza automática de cache movida a useOrdersCache.ts\r\n\r\n  // Cleanup al desmontar - OPTIMIZADO: Sin dependencias inestables\r\n  useEffect(() => {\r\n    return () => {\r\n      // Cancelar peticiones en progreso usando el hook de API\r\n      api.abortCurrentRequest();\r\n\r\n      // Limpiar intervalos y timeouts\r\n      if (refetchIntervalRef.current) {\r\n        clearInterval(refetchIntervalRef.current);\r\n      }\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('[useOrdersEnterpriseStrict] Hook cleanup completed');\r\n      }\r\n    };\r\n  }, []); // ✅ CORREGIDO: Sin dependencias para evitar remontajes por Fast Refresh\r\n\r\n  // ===================================\r\n  // RETORNO DEL HOOK\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    orders: state.orders,\r\n    pagination: state.pagination,\r\n    filters: state.filters,\r\n    analytics: state.analytics,\r\n    isLoading: state.isLoading,\r\n    error: state.error,\r\n    lastFetch: state.lastFetch,\r\n    \r\n    // Acciones\r\n    fetchOrders,\r\n    refreshOrders,\r\n    updateFilters,\r\n    clearError,\r\n    retryLastRequest\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HOOK PARA ORDEN INDIVIDUAL\r\n// ===================================\r\n\r\nexport function useOrderDetailStrict(orderId: string | null) {\r\n  const { toast } = useToast();\r\n  const [order, setOrder] = useState<StrictOrderEnterprise | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchOrder = useCallback(async () => {\r\n    if (!orderId) {return;}\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(`/api/admin/orders/${orderId}`, {\r\n        credentials: 'include' // ✅ AGREGADO: Incluir cookies de sesión NextAuth.js\r\n      });\r\n      const data = await response.json();\r\n\r\n      const validatedResponse = toStrictOrdersResponse(data);\r\n      \r\n      if (isStrictApiError(validatedResponse)) {\r\n        setError(validatedResponse.error);\r\n        toast({\r\n          title: 'Error al cargar orden',\r\n          description: validatedResponse.error,\r\n          variant: 'destructive'\r\n        });\r\n      } else {\r\n        // Para orden individual, extraer la primera orden\r\n        const orderData = validatedResponse.data.orders[0] || null;\r\n        setOrder(orderData);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast({\r\n        title: 'Error al cargar orden',\r\n        description: errorMessage,\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [orderId, toast]);\r\n\r\n  useEffect(() => {\r\n    fetchOrder();\r\n  }, [fetchOrder]);\r\n\r\n  return {\r\n    order,\r\n    isLoading,\r\n    error,\r\n    refetch: fetchOrder\r\n  };\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES EXPORTADAS\r\n// ===================================\r\n\r\n/**\r\n * Utilidades de cache movidas a useOrdersCache.ts\r\n * Estas funciones están disponibles a través del hook useOrdersCache\r\n */\r\n\r\n// Las utilidades de cache ahora están disponibles a través del hook useOrdersCache:\r\n// - cache.clearCache()\r\n// - cache.getCacheStats()\r\n// - cache.getPendingRequest()\r\n// - cache.setPendingRequest()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}