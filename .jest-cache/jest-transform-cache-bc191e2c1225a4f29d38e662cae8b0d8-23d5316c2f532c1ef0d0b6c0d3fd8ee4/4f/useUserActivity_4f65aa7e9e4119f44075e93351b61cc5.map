{"version":3,"names":["cov_1t7wpicbm2","actualCoverage","s","useActivityCategories","f","useActivityFormatter","useUserActivity","activities","setActivities","_react","useState","isLoading","setIsLoading","error","setError","filters","setFilters","limit","offset","pagination","setPagination","total","hasMore","stats","setStats","byCategory","byDay","totalActivities","fetchActivities","useCallback","newFilters","currentFilters","b","searchParams","URLSearchParams","category","set","action","startDate","endDate","toString","response","fetch","method","headers","ok","Error","data","json","success","prev","err","errorMessage","message","_sonner","toast","loadMore","logActivity","description","metadata","body","JSON","stringify","errorData","activity","console","refreshActivities","refreshFilters","updateFilters","updatedFilters","useEffect","categories","value","label","color","getCategoryInfo","find","cat","formatAction","actionMap","formatTimeAgo","dateString","date","Date","now","diffInSeconds","Math","floor","getTime","minutes","hours","days"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useUserActivity.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\n\r\n// Tipos para actividad\r\nexport interface UserActivity {\r\n  id: string;\r\n  user_id: string;\r\n  action: string;\r\n  category: 'auth' | 'profile' | 'order' | 'security' | 'session' | 'preference';\r\n  description?: string;\r\n  metadata?: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface ActivityFilters {\r\n  category?: string;\r\n  action?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  limit?: number;\r\n  offset?: number;\r\n}\r\n\r\ninterface ActivityResponse {\r\n  success: boolean;\r\n  activities: UserActivity[];\r\n  pagination: {\r\n    total: number;\r\n    limit: number;\r\n    offset: number;\r\n    hasMore: boolean;\r\n  };\r\n  stats: {\r\n    byCategory: Record<string, number>;\r\n    byDay: Record<string, number>;\r\n    totalActivities: number;\r\n  };\r\n}\r\n\r\ninterface UseUserActivityReturn {\r\n  // Estado\r\n  activities: UserActivity[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Paginación\r\n  pagination: {\r\n    total: number;\r\n    limit: number;\r\n    offset: number;\r\n    hasMore: boolean;\r\n  };\r\n  \r\n  // Estadísticas\r\n  stats: {\r\n    byCategory: Record<string, number>;\r\n    byDay: Record<string, number>;\r\n    totalActivities: number;\r\n  };\r\n  \r\n  // Funciones\r\n  fetchActivities: (filters?: ActivityFilters) => Promise<void>;\r\n  loadMore: () => Promise<void>;\r\n  logActivity: (action: string, category: UserActivity['category'], description?: string, metadata?: Record<string, any>) => Promise<boolean>;\r\n  refreshActivities: () => Promise<void>;\r\n  \r\n  // Filtros\r\n  filters: ActivityFilters;\r\n  setFilters: (filters: ActivityFilters) => void;\r\n}\r\n\r\nexport function useUserActivity(): UseUserActivityReturn {\r\n  const [activities, setActivities] = useState<UserActivity[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [filters, setFilters] = useState<ActivityFilters>({\r\n    limit: 20,\r\n    offset: 0,\r\n  });\r\n  const [pagination, setPagination] = useState({\r\n    total: 0,\r\n    limit: 20,\r\n    offset: 0,\r\n    hasMore: false,\r\n  });\r\n  const [stats, setStats] = useState({\r\n    byCategory: {},\r\n    byDay: {},\r\n    totalActivities: 0,\r\n  });\r\n\r\n  // Función para obtener actividades\r\n  const fetchActivities = useCallback(async (newFilters?: ActivityFilters) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    const currentFilters = newFilters || filters;\r\n\r\n    try {\r\n      const searchParams = new URLSearchParams();\r\n      \r\n      if (currentFilters.category) searchParams.set('category', currentFilters.category);\r\n      if (currentFilters.action) searchParams.set('action', currentFilters.action);\r\n      if (currentFilters.startDate) searchParams.set('startDate', currentFilters.startDate);\r\n      if (currentFilters.endDate) searchParams.set('endDate', currentFilters.endDate);\r\n      if (currentFilters.limit) searchParams.set('limit', currentFilters.limit.toString());\r\n      if (currentFilters.offset) searchParams.set('offset', currentFilters.offset.toString());\r\n\r\n      const response = await fetch(`/api/user/activity?${searchParams.toString()}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener actividades');\r\n      }\r\n\r\n      const data: ActivityResponse = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Si es una nueva búsqueda (offset 0), reemplazar actividades\r\n        // Si es cargar más (offset > 0), agregar a las existentes\r\n        if (currentFilters.offset === 0) {\r\n          setActivities(data.activities);\r\n        } else {\r\n          setActivities(prev => [...prev, ...data.activities]);\r\n        }\r\n        \r\n        setPagination(data.pagination);\r\n        setStats(data.stats);\r\n      } else {\r\n        throw new Error('Error en la respuesta del servidor');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      toast.error('Error al cargar actividades: ' + errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [filters]);\r\n\r\n  // Función para cargar más actividades\r\n  const loadMore = useCallback(async () => {\r\n    if (!pagination.hasMore || isLoading) return;\r\n\r\n    const newFilters = {\r\n      ...filters,\r\n      offset: pagination.offset + pagination.limit,\r\n    };\r\n\r\n    await fetchActivities(newFilters);\r\n  }, [filters, pagination, isLoading, fetchActivities]);\r\n\r\n  // Función para registrar nueva actividad\r\n  const logActivity = useCallback(async (\r\n    action: string,\r\n    category: UserActivity['category'],\r\n    description?: string,\r\n    metadata?: Record<string, any>\r\n  ): Promise<boolean> => {\r\n    try {\r\n      const response = await fetch('/api/user/activity', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          action,\r\n          category,\r\n          description,\r\n          metadata,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Error al registrar actividad');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        // Agregar la nueva actividad al inicio de la lista\r\n        setActivities(prev => [data.activity, ...prev]);\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Error al registrar actividad');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      console.error('Error al registrar actividad:', errorMessage);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Función para refrescar actividades\r\n  const refreshActivities = useCallback(async () => {\r\n    const refreshFilters = { ...filters, offset: 0 };\r\n    await fetchActivities(refreshFilters);\r\n  }, [filters, fetchActivities]);\r\n\r\n  // Actualizar filtros y recargar\r\n  const updateFilters = useCallback((newFilters: ActivityFilters) => {\r\n    const updatedFilters = { ...newFilters, offset: 0 };\r\n    setFilters(updatedFilters);\r\n    fetchActivities(updatedFilters);\r\n  }, [fetchActivities]);\r\n\r\n  // Cargar actividades al montar el componente\r\n  useEffect(() => {\r\n    fetchActivities();\r\n  }, []);\r\n\r\n  return {\r\n    // Estado\r\n    activities,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Paginación\r\n    pagination,\r\n    \r\n    // Estadísticas\r\n    stats,\r\n    \r\n    // Funciones\r\n    fetchActivities,\r\n    loadMore,\r\n    logActivity,\r\n    refreshActivities,\r\n    \r\n    // Filtros\r\n    filters,\r\n    setFilters: updateFilters,\r\n  };\r\n}\r\n\r\n// Hook auxiliar para categorías de actividad\r\nexport function useActivityCategories() {\r\n  const categories = [\r\n    { value: 'auth', label: 'Autenticación', color: 'blue' },\r\n    { value: 'profile', label: 'Perfil', color: 'green' },\r\n    { value: 'order', label: 'Órdenes', color: 'purple' },\r\n    { value: 'security', label: 'Seguridad', color: 'red' },\r\n    { value: 'session', label: 'Sesiones', color: 'orange' },\r\n    { value: 'preference', label: 'Preferencias', color: 'gray' },\r\n  ];\r\n\r\n  const getCategoryInfo = useCallback((category: string) => {\r\n    return categories.find(cat => cat.value === category) || {\r\n      value: category,\r\n      label: category,\r\n      color: 'gray'\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    categories,\r\n    getCategoryInfo,\r\n  };\r\n}\r\n\r\n// Hook para formatear actividades\r\nexport function useActivityFormatter() {\r\n  const formatAction = useCallback((action: string) => {\r\n    const actionMap: Record<string, string> = {\r\n      'login': 'Inicio de sesión',\r\n      'logout': 'Cierre de sesión',\r\n      'profile_updated': 'Perfil actualizado',\r\n      'avatar_changed': 'Avatar cambiado',\r\n      'password_changed': 'Contraseña cambiada',\r\n      'session_created': 'Nueva sesión iniciada',\r\n      'session_terminated': 'Sesión terminada',\r\n      'security_settings_updated': 'Configuración de seguridad actualizada',\r\n      'order_created': 'Orden creada',\r\n      'order_updated': 'Orden actualizada',\r\n      'preferences_updated': 'Preferencias actualizadas',\r\n    };\r\n\r\n    return actionMap[action] || action;\r\n  }, []);\r\n\r\n  const formatTimeAgo = useCallback((dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n\r\n    if (diffInSeconds < 60) {\r\n      return 'Hace unos segundos';\r\n    } else if (diffInSeconds < 3600) {\r\n      const minutes = Math.floor(diffInSeconds / 60);\r\n      return `Hace ${minutes} minuto${minutes > 1 ? 's' : ''}`;\r\n    } else if (diffInSeconds < 86400) {\r\n      const hours = Math.floor(diffInSeconds / 3600);\r\n      return `Hace ${hours} hora${hours > 1 ? 's' : ''}`;\r\n    } else {\r\n      const days = Math.floor(diffInSeconds / 86400);\r\n      return `Hace ${days} día${days > 1 ? 's' : ''}`;\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    formatAction,\r\n    formatTimeAgo,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}