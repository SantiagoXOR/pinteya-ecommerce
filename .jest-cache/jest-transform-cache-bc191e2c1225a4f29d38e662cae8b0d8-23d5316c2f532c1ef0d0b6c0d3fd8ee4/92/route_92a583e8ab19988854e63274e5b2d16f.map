{"version":3,"names":["cov_2qknwetrc5","actualCoverage","s","GET","f","POST","runtime","request","securityLogger","_securitylogger","createSecurityLogger","rateLimitResult","_ratelimiter","withRateLimit","RATE_LIMIT_CONFIGS","products","log","type","severity","message","context","metadata","endpoint","method","userAgent","headers","get","searchParams","URL","url","queryParams","search","b","undefined","filters","supabase","_supabase","getSupabaseClient","console","error","errorResponse","data","success","_server","NextResponse","json","status","baseQuery","from","select","order","query","ilike","categories","_apitimeouts","withDatabaseTimeout","signal","abortSignal","API_TIMEOUTS","database","logApiError","Error","operation","processedCategories","map","category","products_count","count","categoriesCount","length","hasSearch","searchTerm","response","logRateLimitExceeded","requireAdminAuth","Promise","resolve","then","_interop_require_wildcard","require","authResult","code","enterprise","timestamp","Date","toISOString","body","categoryData","_validations","validateData","CategorySchema","slug","name","toLowerCase","replace","insert","single","handleSupabaseError"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE CATEGORÍAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { validateData, CategoryFiltersSchema, CategorySchema } from '@/lib/validations';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { Category } from '@/types/database';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET /api/categories - Obtener categorías\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de categorías\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.products, // Usar config de productos para categorías\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Categories API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/categories',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      search: searchParams.get('search') || undefined,\r\n    };\r\n\r\n    // Validar parámetros (simplificado para la estructura actual)\r\n    const filters = {\r\n      search: queryParams.search,\r\n    };\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query base - simplificado para la estructura actual\r\n    const baseQuery = supabase\r\n      .from('categories')\r\n      .select(`\r\n        *,\r\n        products_count:products(count)\r\n      `)\r\n      .order('name');\r\n\r\n    // Aplicar filtros\r\n    let query = baseQuery;\r\n    if (filters.search) {\r\n      query = query.ilike('name', `%${filters.search}%`);\r\n    }\r\n\r\n    // Ejecutar query con timeout de base de datos\r\n    const { data: categories, error } = await withDatabaseTimeout(\r\n      async (signal) => {\r\n        return await query.abortSignal(signal);\r\n      },\r\n      API_TIMEOUTS.database\r\n    );\r\n\r\n    if (error) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        new Error(`Database error: ${error.message}`),\r\n        {\r\n          endpoint: '/api/categories',\r\n          operation: 'select_categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error obteniendo categorías',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Procesar datos para incluir conteo de productos\r\n    const processedCategories = categories?.map(category => ({\r\n      ...category,\r\n      products_count: category.products_count?.[0]?.count || 0,\r\n    })) || [];\r\n\r\n    // Log de operación exitosa\r\n    securityLogger.log({\r\n      type: 'data_access',\r\n      severity: 'low',\r\n      message: 'Categories retrieved successfully',\r\n      context: securityLogger.context,\r\n      metadata: {\r\n        categoriesCount: processedCategories.length,\r\n        hasSearch: !!filters.search,\r\n        searchTerm: filters.search\r\n      }\r\n    });\r\n\r\n    const response: ApiResponse<Category[]> = {\r\n      data: processedCategories,\r\n      success: true,\r\n      message: `${processedCategories.length} categorías encontradas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        error instanceof Error ? error : new Error('Unknown error'),\r\n        {\r\n          endpoint: '/api/categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error interno del servidor',\r\n      };\r\n\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n  });\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/categories', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// POST /api/categories - Crear categoría (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // ENTERPRISE: Usar nueva autenticación enterprise para admin\r\n    const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils');\r\n\r\n    const authResult = await requireAdminAuth(request, ['categories_create']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    const body = await request.json();\r\n    \r\n    // Validar datos de la categoría\r\n    const categoryData = validateData(CategorySchema, body);\r\n    \r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio administrativo no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Crear slug si no se proporciona\r\n    if (!categoryData.slug) {\r\n      categoryData.slug = categoryData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    // Insertar categoría\r\n    const { data: category, error } = await supabase\r\n      .from('categories')\r\n      .insert(categoryData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/categories');\r\n    }\r\n\r\n    const response: ApiResponse<Category> = {\r\n      data: category,\r\n      success: true,\r\n      message: 'Categoría creada exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/categories:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}