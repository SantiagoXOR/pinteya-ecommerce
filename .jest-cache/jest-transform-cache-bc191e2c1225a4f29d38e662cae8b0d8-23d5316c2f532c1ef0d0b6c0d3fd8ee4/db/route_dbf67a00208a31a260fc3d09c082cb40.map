{"version":3,"names":["GET","cov_sfs7leawp","f","s","POST","request","context","params","session","_auth","auth","user","b","errorResponse","data","success","error","_server","NextResponse","json","status","orderId","id","supabase","_supabase","getSupabaseClient","console","order","orderError","from","select","eq","userId","single","paymentInfo","mercadoPagoStatus","payment_id","paymentResult","_mercadopago","getPaymentInfo","status_detail","transaction_amount","currency_id","date_created","date_approved","payment_method","payment_method_id","type","payment_type_id","installments","responseData","total","created_at","updated_at","external_reference","items","order_items","map","item","quantity","price","product","name","image","images","previews","payment","successResponse","message","userId1","body","merchant_order_id","newStatus","update","Date","toISOString","order_id","payment_status","amount"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\status\\[id]\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - PAYMENT STATUS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { getPaymentInfo } from '@/lib/integrations/mercadopago';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\ninterface RouteParams {\r\n  params: Promise<{\r\n    id: string;\r\n  }>;\r\n}\r\n\r\nexport async function GET(request: NextRequest, context: RouteParams) {\r\n  const params = await context.params;\r\n  try {\r\n    // Autenticación con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const orderId = params.id;\r\n\r\n    // Inicializar Supabase con cliente administrativo\r\n    const supabase = getSupabaseClient(true);\r\n\r\n    // Verificar que el cliente esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/payments/status/[id]');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Obtener la orden y verificar que pertenece al usuario\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select(`\r\n        *,\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          price,\r\n          product:products (\r\n            id,\r\n            name,\r\n            images\r\n          )\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Orden no encontrada',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    let paymentInfo = null;\r\n    let mercadoPagoStatus = null;\r\n\r\n    // Si hay un payment_id, obtener información de MercadoPago\r\n    if (order.payment_id) {\r\n      const paymentResult = await getPaymentInfo(order.payment_id);\r\n\r\n      if (paymentResult.success && 'data' in paymentResult) {\r\n        paymentInfo = paymentResult.data;\r\n        mercadoPagoStatus = {\r\n          id: paymentInfo.id,\r\n          status: paymentInfo.status,\r\n          status_detail: paymentInfo.status_detail,\r\n          transaction_amount: paymentInfo.transaction_amount,\r\n          currency_id: paymentInfo.currency_id,\r\n          date_created: paymentInfo.date_created,\r\n          date_approved: paymentInfo.date_approved,\r\n          payment_method: {\r\n            id: paymentInfo.payment_method_id,\r\n            type: paymentInfo.payment_type_id,\r\n          },\r\n          installments: paymentInfo.installments,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Preparar respuesta\r\n    const responseData = {\r\n      order: {\r\n        id: order.id,\r\n        status: order.status,\r\n        total: order.total,\r\n        created_at: order.created_at,\r\n        updated_at: order.updated_at,\r\n        external_reference: order.external_reference,\r\n        items: order.order_items?.map((item: {\r\n          id: string;\r\n          quantity: number;\r\n          price: number;\r\n          product: {\r\n            id: string;\r\n            name: string;\r\n            images: string[] | null;\r\n          };\r\n        }) => ({\r\n          id: item.id,\r\n          quantity: item.quantity,\r\n          price: item.price,\r\n          product: {\r\n            id: item.product.id,\r\n            name: item.product.name,\r\n            image: item.product.images?.previews?.[0] || null,\r\n          },\r\n        })) || [],\r\n      },\r\n      payment: mercadoPagoStatus,\r\n    };\r\n\r\n    const successResponse: ApiResponse<typeof responseData> = {\r\n      data: responseData,\r\n      success: true,\r\n      message: 'Estado de pago obtenido exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(successResponse, { status: 200 });\r\n\r\n  } catch (error: unknown) {\r\n    console.error('Error getting payment status:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n    \r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// Endpoint para verificar estado desde el frontend después de redirección\r\nexport async function POST(request: NextRequest, context: RouteParams) {\r\n  const params = await context.params;\r\n  try {\r\n    // TODO: Reactivar cuando Clerk funcione\r\n    // const { userId } = auth();\r\n    // if (!session?.user) {\r\n    //   const errorResponse: ApiResponse<null> = {\r\n    //     data: null,\r\n    //     success: false,\r\n    //     error: 'Usuario no autenticado',\r\n    //   };\r\n    //   return NextResponse.json(errorResponse, { status: 401 });\r\n    // }\r\n\r\n    // Usar usuario temporal por ahora\r\n    const userId = '00000000-0000-4000-8000-000000000000';\r\n    const orderId = params.id;\r\n    const body = await request.json();\r\n    const { payment_id, status, merchant_order_id } = body;\r\n\r\n    // Inicializar Supabase con cliente administrativo\r\n    const supabase = getSupabaseClient(true);\r\n\r\n    // Verificar que el cliente esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en POST /api/payments/status/[id]');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Verificar que la orden pertenece al usuario\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('*')\r\n      .eq('id', orderId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Orden no encontrada',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 404 });\r\n    }\r\n\r\n    // Si se proporciona payment_id, obtener información actualizada\r\n    if (payment_id) {\r\n      const paymentResult = await getPaymentInfo(payment_id);\r\n\r\n      if (paymentResult.success && 'data' in paymentResult) {\r\n        const payment = paymentResult.data;\r\n        \r\n        // Mapear estado de MercadoPago\r\n        let newStatus: string;\r\n        switch (payment.status) {\r\n          case 'approved':\r\n            newStatus = 'paid';\r\n            break;\r\n          case 'pending':\r\n          case 'in_process':\r\n            newStatus = 'pending';\r\n            break;\r\n          case 'rejected':\r\n          case 'cancelled':\r\n            newStatus = 'cancelled';\r\n            break;\r\n          default:\r\n            newStatus = order.status; // Mantener estado actual\r\n        }\r\n\r\n        // Actualizar orden si el estado cambió\r\n        if (newStatus !== order.status) {\r\n          await supabase\r\n            .from('orders')\r\n            .update({\r\n              status: newStatus,\r\n              payment_id: payment_id,\r\n              updated_at: new Date().toISOString(),\r\n            })\r\n            .eq('id', orderId);\r\n        }\r\n\r\n        const successResponse: ApiResponse<any> = {\r\n          data: {\r\n            order_id: orderId,\r\n            status: newStatus,\r\n            payment_status: payment.status,\r\n            amount: payment.transaction_amount,\r\n          },\r\n          success: true,\r\n          message: 'Estado actualizado exitosamente',\r\n        };\r\n\r\n        return NextResponse.json(successResponse, { status: 200 });\r\n      }\r\n    }\r\n\r\n    // Si no hay payment_id o falló la consulta, retornar estado actual\r\n    const successResponse: ApiResponse<any> = {\r\n      data: {\r\n        order_id: orderId,\r\n        status: order.status,\r\n        payment_status: status || 'unknown',\r\n      },\r\n      success: true,\r\n      message: 'Estado actual de la orden',\r\n    };\r\n\r\n    return NextResponse.json(successResponse, { status: 200 });\r\n\r\n  } catch (error: unknown) {\r\n    console.error('Error updating payment status:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n    \r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n"],"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","ignoreList":[]}