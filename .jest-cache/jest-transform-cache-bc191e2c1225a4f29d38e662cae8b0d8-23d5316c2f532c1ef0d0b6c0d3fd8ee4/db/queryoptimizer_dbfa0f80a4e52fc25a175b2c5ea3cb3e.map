{"version":3,"names":["OptimizedQueries","cov_awcod1iwy","f","s","QUERY_CONFIGS","QueryOptimizer","queryOptimizer","PRODUCTS","cache","cacheTTL","batchSize","timeout","retries","ORDERS","USERS","ANALYTICS","constructor","getInstance","instance","b","executeQuery","queryName","queryFn","config","startTime","Date","now","finalConfig","cacheConfig","ttl","prefix","serialize","cached","_cachemanager","cacheManager","get","_logger","logger","info","LogCategory","API","result","executeWithTimeout","set","catch","error","warn","duration","timeoutMs","Promise","race","_","reject","setTimeout","Error","executeBatch","queries","results","allSettled","map","name","fn","index","status","value","reason","invalidateQueryCache","pattern","invalidatePattern","getProducts","filters","cacheKey","JSON","stringify","_supabase","supabaseAdmin","query","from","select","category","eq","brand","limit","offset","range","data","message","getUserOrders","userId","order","ascending","getProductStats","totalResult","categoryResult","topProductsResult","all","count","head","not","totalProducts","productsByCategory","reduce","acc","item","categoryName","categories","existing","find","c","push","topProducts","productId","product_id","p","id","sales","quantity","products","sort","a","slice","invalidateProductsCache","invalidateUserOrdersCache"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\query-optimizer.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - QUERY OPTIMIZER\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from './supabase';\r\nimport { cacheManager, CACHE_CONFIGS } from './cache-manager';\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\n\r\n// Configuración de optimización\r\ninterface QueryConfig {\r\n  cache?: boolean;\r\n  cacheTTL?: number;\r\n  batchSize?: number;\r\n  timeout?: number;\r\n  retries?: number;\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const QUERY_CONFIGS = {\r\n  // Para consultas de productos (frecuentes)\r\n  PRODUCTS: {\r\n    cache: true,\r\n    cacheTTL: 900, // 15 minutos\r\n    batchSize: 50,\r\n    timeout: 5000,\r\n    retries: 2,\r\n  },\r\n  \r\n  // Para consultas de órdenes (menos frecuentes)\r\n  ORDERS: {\r\n    cache: true,\r\n    cacheTTL: 300, // 5 minutos\r\n    batchSize: 20,\r\n    timeout: 10000,\r\n    retries: 3,\r\n  },\r\n  \r\n  // Para consultas de usuarios (muy frecuentes)\r\n  USERS: {\r\n    cache: true,\r\n    cacheTTL: 1800, // 30 minutos\r\n    batchSize: 100,\r\n    timeout: 3000,\r\n    retries: 1,\r\n  },\r\n  \r\n  // Para consultas analíticas (menos críticas)\r\n  ANALYTICS: {\r\n    cache: true,\r\n    cacheTTL: 3600, // 1 hora\r\n    batchSize: 10,\r\n    timeout: 30000,\r\n    retries: 1,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para optimización de queries\r\n */\r\nexport class QueryOptimizer {\r\n  private static instance: QueryOptimizer;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): QueryOptimizer {\r\n    if (!QueryOptimizer.instance) {\r\n      QueryOptimizer.instance = new QueryOptimizer();\r\n    }\r\n    return QueryOptimizer.instance;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una query optimizada con cache\r\n   */\r\n  async executeQuery<T>(\r\n    queryName: string,\r\n    queryFn: () => Promise<T>,\r\n    config: QueryConfig = {}\r\n  ): Promise<T> {\r\n    const startTime = Date.now();\r\n    const finalConfig = { ...QUERY_CONFIGS.PRODUCTS, ...config };\r\n\r\n    try {\r\n      // Si cache está habilitado, intentar obtener del cache\r\n      if (finalConfig.cache) {\r\n        const cacheConfig = {\r\n          ttl: finalConfig.cacheTTL || 900,\r\n          prefix: 'query',\r\n          serialize: true,\r\n        };\r\n\r\n        const cached = await cacheManager.get<T>(queryName, cacheConfig);\r\n        if (cached !== null) {\r\n          logger.info(LogCategory.API, 'Query cache hit');\r\n          return cached;\r\n        }\r\n      }\r\n\r\n      // Ejecutar query con timeout\r\n      const result = await this.executeWithTimeout(queryFn, finalConfig.timeout || 5000);\r\n\r\n      // Guardar en cache si está habilitado\r\n      if (finalConfig.cache) {\r\n        const cacheConfig = {\r\n          ttl: finalConfig.cacheTTL || 900,\r\n          prefix: 'query',\r\n          serialize: true,\r\n        };\r\n\r\n        cacheManager.set(queryName, result, cacheConfig).catch(error => {\r\n          logger.warn(LogCategory.API, 'Failed to cache query result');\r\n        });\r\n      }\r\n\r\n      const duration = Date.now() - startTime;\r\n      logger.info(LogCategory.API, 'Query executed successfully');\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      logger.error(LogCategory.API, 'Query execution failed', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta query con timeout\r\n   */\r\n  private async executeWithTimeout<T>(\r\n    queryFn: () => Promise<T>,\r\n    timeoutMs: number\r\n  ): Promise<T> {\r\n    return Promise.race([\r\n      queryFn(),\r\n      new Promise<never>((_, reject) =>\r\n        setTimeout(() => reject(new Error(`Query timeout after ${timeoutMs}ms`)), timeoutMs)\r\n      ),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta múltiples queries en batch\r\n   */\r\n  async executeBatch<T>(\r\n    queries: Array<{\r\n      name: string;\r\n      fn: () => Promise<T>;\r\n      config?: QueryConfig;\r\n    }>\r\n  ): Promise<Array<{ name: string; result?: T; error?: Error }>> {\r\n    const results = await Promise.allSettled(\r\n      queries.map(async ({ name, fn, config }) => ({\r\n        name,\r\n        result: await this.executeQuery(name, fn, config),\r\n      }))\r\n    );\r\n\r\n    return results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        return {\r\n          name: queries[index].name,\r\n          error: result.reason,\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Invalida cache de queries por patrón\r\n   */\r\n  async invalidateQueryCache(pattern: string): Promise<void> {\r\n    try {\r\n      const cacheConfig = {\r\n        ttl: 0,\r\n        prefix: 'query',\r\n        serialize: true,\r\n      };\r\n\r\n      await cacheManager.invalidatePattern(pattern, cacheConfig);\r\n      \r\n      logger.info(LogCategory.API, 'Query cache invalidated');\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Failed to invalidate query cache', error as Error);\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const queryOptimizer = QueryOptimizer.getInstance();\r\n\r\n/**\r\n * Funciones optimizadas para consultas comunes\r\n */\r\nexport const OptimizedQueries = {\r\n  /**\r\n   * Obtiene productos con cache optimizado\r\n   */\r\n  async getProducts(filters: {\r\n    category?: string;\r\n    brand?: string;\r\n    limit?: number;\r\n    offset?: number;\r\n  } = {}): Promise<any[]> {\r\n    const cacheKey = `products:${JSON.stringify(filters)}`;\r\n    \r\n    return queryOptimizer.executeQuery(\r\n      cacheKey,\r\n      async () => {\r\n        if (!supabaseAdmin) {\r\n          throw new Error('Supabase admin client not available');\r\n        }\r\n\r\n        let query = supabaseAdmin\r\n          .from('products')\r\n          .select('*');\r\n\r\n        if (filters.category) {\r\n          query = query.eq('category_id', filters.category);\r\n        }\r\n\r\n        if (filters.brand) {\r\n          query = query.eq('brand', filters.brand);\r\n        }\r\n\r\n        if (filters.limit) {\r\n          query = query.limit(filters.limit);\r\n        }\r\n\r\n        if (filters.offset) {\r\n          query = query.range(filters.offset, (filters.offset + (filters.limit || 10)) - 1);\r\n        }\r\n\r\n        const { data, error } = await query;\r\n\r\n        if (error) {\r\n          throw new Error(`Products query failed: ${error.message}`);\r\n        }\r\n\r\n        return data || [];\r\n      },\r\n      QUERY_CONFIGS.PRODUCTS\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Obtiene órdenes de un usuario con cache\r\n   */\r\n  async getUserOrders(userId: string, limit: number = 10): Promise<any[]> {\r\n    const cacheKey = `user_orders:${userId}:${limit}`;\r\n    \r\n    return queryOptimizer.executeQuery(\r\n      cacheKey,\r\n      async () => {\r\n        if (!supabaseAdmin) {\r\n          throw new Error('Supabase admin client not available');\r\n        }\r\n\r\n        const { data, error } = await supabaseAdmin\r\n          .from('orders')\r\n          .select(`\r\n            *,\r\n            order_items (\r\n              *,\r\n              products (\r\n                id,\r\n                name,\r\n                price,\r\n                image_url\r\n              )\r\n            )\r\n          `)\r\n          .eq('user_id', userId)\r\n          .order('created_at', { ascending: false })\r\n          .limit(limit);\r\n\r\n        if (error) {\r\n          throw new Error(`User orders query failed: ${error.message}`);\r\n        }\r\n\r\n        return data || [];\r\n      },\r\n      QUERY_CONFIGS.ORDERS\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Obtiene estadísticas de productos\r\n   */\r\n  async getProductStats(): Promise<{\r\n    totalProducts: number;\r\n    productsByCategory: Array<{ category: string; count: number }>;\r\n    topProducts: Array<{ id: string; name: string; sales: number }>;\r\n  }> {\r\n    const cacheKey = 'product_stats';\r\n    \r\n    return queryOptimizer.executeQuery(\r\n      cacheKey,\r\n      async () => {\r\n        if (!supabaseAdmin) {\r\n          throw new Error('Supabase admin client not available');\r\n        }\r\n\r\n        // Ejecutar múltiples queries en paralelo\r\n        const [totalResult, categoryResult, topProductsResult] = await Promise.all([\r\n          supabaseAdmin\r\n            .from('products')\r\n            .select('id', { count: 'exact', head: true }),\r\n          \r\n          supabaseAdmin\r\n            .from('products')\r\n            .select('category_id, categories(name)')\r\n            .not('category_id', 'is', null),\r\n          \r\n          supabaseAdmin\r\n            .from('order_items')\r\n            .select(`\r\n              product_id,\r\n              quantity,\r\n              products(id, name)\r\n            `)\r\n            .limit(10)\r\n        ]);\r\n\r\n        if (totalResult.error) {\r\n          throw new Error(`Total products query failed: ${totalResult.error.message}`);\r\n        }\r\n\r\n        if (categoryResult.error) {\r\n          throw new Error(`Category stats query failed: ${categoryResult.error.message}`);\r\n        }\r\n\r\n        if (topProductsResult.error) {\r\n          throw new Error(`Top products query failed: ${topProductsResult.error.message}`);\r\n        }\r\n\r\n        // Procesar resultados\r\n        const totalProducts = totalResult.count || 0;\r\n\r\n        const productsByCategory = categoryResult.data?.reduce((acc: any[], item: any) => {\r\n          const categoryName = item.categories?.name || 'Sin categoría';\r\n          const existing = acc.find(c => c.category === categoryName);\r\n          if (existing) {\r\n            existing.count++;\r\n          } else {\r\n            acc.push({ category: categoryName, count: 1 });\r\n          }\r\n          return acc;\r\n        }, []) || [];\r\n\r\n        const topProducts = topProductsResult.data?.reduce((acc: any[], item: any) => {\r\n          const productId = item.product_id;\r\n          const existing = acc.find(p => p.id === productId);\r\n          if (existing) {\r\n            existing.sales += item.quantity;\r\n          } else {\r\n            acc.push({\r\n              id: productId,\r\n              name: item.products?.name || 'Producto desconocido',\r\n              sales: item.quantity,\r\n            });\r\n          }\r\n          return acc;\r\n        }, [])?.sort((a: any, b: any) => b.sales - a.sales).slice(0, 5) || [];\r\n\r\n        return {\r\n          totalProducts,\r\n          productsByCategory,\r\n          topProducts,\r\n        };\r\n      },\r\n      QUERY_CONFIGS.ANALYTICS\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de productos\r\n   */\r\n  async invalidateProductsCache(): Promise<void> {\r\n    await queryOptimizer.invalidateQueryCache('products:*');\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de órdenes de un usuario\r\n   */\r\n  async invalidateUserOrdersCache(userId: string): Promise<void> {\r\n    await queryOptimizer.invalidateQueryCache(`user_orders:${userId}:*`);\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}