{"version":3,"names":["AlertLevel","cov_1gwtlw1wry","f","s","BusinessMetricCategory","EnterpriseMetricsCollector","MetricType","enterpriseMetrics","recordBusinessMetric","recordPerformanceMetric","recordSecurityMetric","recordUserExperienceMetric","CacheUtils","window","b","require","error","console","warn","constructor","alertRules","Map","activeAlerts","metricsBuffer","flushInterval","initializeDefaultAlerts","startMetricsFlush","getInstance","instance","recordMetric","name","value","type","category","tags","metadata","metric","id","generateMetricId","timestamp","Date","toISOString","push","checkAlerts","_logger","logger","debug","LogLevel","DEBUG","LogCategory","SYSTEM","ERROR","Error","message","operation","duration","success","toString","event","severity","userId","setAlertRule","rule","set","info","INFO","metricName","threshold","level","values","enabled","existingAlert","Array","from","find","alert","ruleId","resolvedAt","cooldownEnd","triggeredAt","setMinutes","getMinutes","cooldownMinutes","triggered","evaluateCondition","condition","triggerAlert","alertLevel","convertToAlertSystemLevel","_alertsystem","enterpriseAlertSystem","description","localAlert","WARN","alertId","executeAlertAction","action","config","url","fetch","method","headers","body","JSON","stringify","to","channel","getAggregatedMetrics","period","startTime","endTime","cacheKey","fetchData","supabase","_supabase","getSupabaseClient","data","rpc","metric_name","period_interval","start_time","end_time","cacheMetricsAggregation","flushMetrics","length","metrics","insert","map","metricsCount","actions","setInterval","storeAlert","rule_id","triggered_at","resolved_at","now","Math","random","substr","WARNING","CRITICAL","EMERGENCY","generateAlertId","destroy","clearInterval","bind"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-metrics.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE METRICS SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { enterpriseAlertSystem, AlertLevel as AlertSystemLevel } from './alert-system';\r\n\r\n// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\r\nlet CacheUtils: any = null;\r\nif (typeof window === 'undefined') {\r\n  // Solo en servidor\r\n  try {\r\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\r\n  } catch (error) {\r\n    console.warn('[EnterpriseMetrics] CacheUtils not available:', error);\r\n  }\r\n}\r\n\r\n// Tipos de métricas enterprise\r\nexport enum MetricType {\r\n  COUNTER = 'counter',           // Contador incremental\r\n  GAUGE = 'gauge',              // Valor actual\r\n  HISTOGRAM = 'histogram',       // Distribución de valores\r\n  TIMER = 'timer',              // Medición de tiempo\r\n  RATE = 'rate'                 // Tasa por unidad de tiempo\r\n}\r\n\r\n// Categorías de métricas de negocio\r\nexport enum BusinessMetricCategory {\r\n  PERFORMANCE = 'performance',\r\n  SECURITY = 'security',\r\n  BUSINESS = 'business',\r\n  INFRASTRUCTURE = 'infrastructure',\r\n  USER_EXPERIENCE = 'user_experience'\r\n}\r\n\r\n// Niveles de alerta\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning',\r\n  CRITICAL = 'critical',\r\n  EMERGENCY = 'emergency'\r\n}\r\n\r\n// Métrica enterprise\r\nexport interface EnterpriseMetric {\r\n  id: string;\r\n  name: string;\r\n  type: MetricType;\r\n  category: BusinessMetricCategory;\r\n  value: number;\r\n  timestamp: string;\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n  aggregationPeriod?: string; // '1m', '5m', '1h', '1d'\r\n}\r\n\r\n// Configuración de alerta\r\nexport interface AlertRule {\r\n  id: string;\r\n  metricName: string;\r\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  level: AlertLevel;\r\n  enabled: boolean;\r\n  cooldownMinutes: number;\r\n  description: string;\r\n  actions: AlertAction[];\r\n}\r\n\r\n// Acción de alerta\r\nexport interface AlertAction {\r\n  type: 'email' | 'webhook' | 'log' | 'slack';\r\n  config: Record<string, any>;\r\n}\r\n\r\n// Alerta activa\r\nexport interface ActiveAlert {\r\n  id: string;\r\n  ruleId: string;\r\n  metricName: string;\r\n  level: AlertLevel;\r\n  message: string;\r\n  value: number;\r\n  threshold: number;\r\n  triggeredAt: string;\r\n  resolvedAt?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Agregación temporal\r\nexport interface MetricAggregation {\r\n  period: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  count: number;\r\n  sum: number;\r\n  avg: number;\r\n  min: number;\r\n  max: number;\r\n  p50: number;\r\n  p95: number;\r\n  p99: number;\r\n}\r\n\r\n/**\r\n * Sistema de Métricas Enterprise con agregación temporal y alertas\r\n */\r\nexport class EnterpriseMetricsCollector {\r\n  private static instance: EnterpriseMetricsCollector;\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\r\n  private metricsBuffer: EnterpriseMetric[] = [];\r\n  private flushInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultAlerts();\r\n    this.startMetricsFlush();\r\n  }\r\n\r\n  static getInstance(): EnterpriseMetricsCollector {\r\n    if (!EnterpriseMetricsCollector.instance) {\r\n      EnterpriseMetricsCollector.instance = new EnterpriseMetricsCollector();\r\n    }\r\n    return EnterpriseMetricsCollector.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra una métrica enterprise\r\n   */\r\n  async recordMetric(\r\n    name: string,\r\n    value: number,\r\n    type: MetricType = MetricType.GAUGE,\r\n    category: BusinessMetricCategory = BusinessMetricCategory.PERFORMANCE,\r\n    tags: Record<string, string> = {},\r\n    metadata?: Record<string, any>\r\n  ): Promise<void> {\r\n    try {\r\n      const metric: EnterpriseMetric = {\r\n        id: this.generateMetricId(),\r\n        name,\r\n        type,\r\n        category,\r\n        value,\r\n        timestamp: new Date().toISOString(),\r\n        tags,\r\n        metadata\r\n      };\r\n\r\n      // Agregar a buffer para flush batch\r\n      this.metricsBuffer.push(metric);\r\n\r\n      // Verificar alertas\r\n      await this.checkAlerts(metric);\r\n\r\n      // Log para debugging\r\n      logger.debug(LogLevel.DEBUG, `Metric recorded: ${name}`, {\r\n        value,\r\n        type,\r\n        category,\r\n        tags\r\n      }, LogCategory.SYSTEM);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to record metric: ${name}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        value,\r\n        type\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Métricas de performance específicas\r\n   */\r\n  async recordPerformanceMetric(\r\n    operation: string,\r\n    duration: number,\r\n    success: boolean,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `performance.${operation}.duration`,\r\n      duration,\r\n      MetricType.TIMER,\r\n      BusinessMetricCategory.PERFORMANCE,\r\n      { ...tags, success: success.toString() }\r\n    );\r\n\r\n    await this.recordMetric(\r\n      `performance.${operation}.count`,\r\n      1,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.PERFORMANCE,\r\n      { ...tags, success: success.toString() }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Métricas de negocio específicas\r\n   */\r\n  async recordBusinessMetric(\r\n    event: string,\r\n    value: number = 1,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `business.${event}`,\r\n      value,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.BUSINESS,\r\n      tags\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Métricas de seguridad específicas\r\n   */\r\n  async recordSecurityMetric(\r\n    event: string,\r\n    severity: 'low' | 'medium' | 'high' | 'critical',\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `security.${event}`,\r\n      1,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.SECURITY,\r\n      { ...tags, severity }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Métricas de experiencia de usuario\r\n   */\r\n  async recordUserExperienceMetric(\r\n    metric: string,\r\n    value: number,\r\n    userId?: string,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `ux.${metric}`,\r\n      value,\r\n      MetricType.GAUGE,\r\n      BusinessMetricCategory.USER_EXPERIENCE,\r\n      { ...tags, userId: userId || 'anonymous' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de alerta\r\n   */\r\n  setAlertRule(rule: AlertRule): void {\r\n    this.alertRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\r\n      metricName: rule.metricName,\r\n      threshold: rule.threshold,\r\n      level: rule.level\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Verifica alertas para una métrica\r\n   */\r\n  private async checkAlerts(metric: EnterpriseMetric): Promise<void> {\r\n    for (const rule of this.alertRules.values()) {\r\n      if (!rule.enabled || rule.metricName !== metric.name) {\r\n        continue;\r\n      }\r\n\r\n      // Verificar si ya hay una alerta activa en cooldown\r\n      const existingAlert = Array.from(this.activeAlerts.values())\r\n        .find(alert => alert.ruleId === rule.id && !alert.resolvedAt);\r\n\r\n      if (existingAlert) {\r\n        const cooldownEnd = new Date(existingAlert.triggeredAt);\r\n        cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\r\n        \r\n        if (new Date() < cooldownEnd) {\r\n          continue; // Aún en cooldown\r\n        }\r\n      }\r\n\r\n      // Evaluar condición\r\n      const triggered = this.evaluateCondition(metric.value, rule.condition, rule.threshold);\r\n\r\n      if (triggered) {\r\n        await this.triggerAlert(rule, metric);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evalúa condición de alerta\r\n   */\r\n  private evaluateCondition(value: number, condition: string, threshold: number): boolean {\r\n    switch (condition) {\r\n      case 'gt': return value > threshold;\r\n      case 'gte': return value >= threshold;\r\n      case 'lt': return value < threshold;\r\n      case 'lte': return value <= threshold;\r\n      case 'eq': return value === threshold;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispara una alerta usando el sistema enterprise\r\n   */\r\n  private async triggerAlert(rule: AlertRule, metric: EnterpriseMetric): Promise<void> {\r\n    // Convertir nivel de alerta al sistema enterprise\r\n    const alertLevel = this.convertToAlertSystemLevel(rule.level);\r\n\r\n    // Usar el sistema de alertas enterprise\r\n    const alert = await enterpriseAlertSystem.triggerAlert(\r\n      rule.id,\r\n      rule.metricName,\r\n      metric.value,\r\n      `${rule.description} - Value: ${metric.value}, Threshold: ${rule.threshold}`\r\n    );\r\n\r\n    if (alert) {\r\n      // Mantener referencia local para compatibilidad\r\n      const localAlert: ActiveAlert = {\r\n        id: alert.id,\r\n        ruleId: alert.ruleId,\r\n        metricName: alert.metricName,\r\n        level: rule.level,\r\n        message: alert.message,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggeredAt: alert.triggeredAt,\r\n        metadata: {\r\n          metric: metric,\r\n          rule: rule\r\n        }\r\n      };\r\n\r\n      this.activeAlerts.set(alert.id, localAlert);\r\n\r\n      // Log alerta\r\n      logger.warn(LogLevel.WARN, `Alert triggered via enterprise system: ${rule.id}`, {\r\n        alertId: alert.id,\r\n        level: alert.level,\r\n        metricName: alert.metricName,\r\n        value: alert.value,\r\n        threshold: alert.threshold\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta acción de alerta\r\n   */\r\n  private async executeAlertAction(action: AlertAction, alert: ActiveAlert): Promise<void> {\r\n    try {\r\n      switch (action.type) {\r\n        case 'log':\r\n          logger.error(LogLevel.ERROR, `ALERT: ${alert.message}`, {\r\n            alertId: alert.id,\r\n            level: alert.level\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n\r\n        case 'webhook':\r\n          if (action.config.url) {\r\n            await fetch(action.config.url, {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(alert)\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'email':\r\n          // TODO: Implementar envío de email\r\n          logger.info(LogLevel.INFO, `Email alert would be sent to: ${action.config.to}`, {\r\n            alertId: alert.id\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n\r\n        case 'slack':\r\n          // TODO: Implementar notificación Slack\r\n          logger.info(LogLevel.INFO, `Slack alert would be sent to: ${action.config.channel}`, {\r\n            alertId: alert.id\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to execute alert action: ${action.type}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas agregadas\r\n   */\r\n  async getAggregatedMetrics(\r\n    metricName: string,\r\n    period: '1m' | '5m' | '1h' | '1d' | '7d',\r\n    startTime: string,\r\n    endTime: string\r\n  ): Promise<MetricAggregation[]> {\r\n    const cacheKey = `metrics:aggregated:${metricName}:${period}:${startTime}:${endTime}`;\r\n    \r\n    // ✅ CACHE CONDICIONAL: Solo usar cache en servidor\r\n    const fetchData = async () => {\r\n      const supabase = getSupabaseClient(true);\r\n\r\n      if (!supabase) {\r\n        throw new Error('Supabase client not available');\r\n      }\r\n\r\n      // Query con agregación SQL\r\n      const { data, error } = await supabase.rpc('aggregate_metrics', {\r\n        metric_name: metricName,\r\n        period_interval: period,\r\n        start_time: startTime,\r\n        end_time: endTime\r\n      });\r\n\r\n      if (error) {\r\n        throw new Error(`Failed to aggregate metrics: ${error.message}`);\r\n      }\r\n\r\n      return data || [];\r\n    };\r\n\r\n    // Usar cache solo si está disponible (servidor)\r\n    if (CacheUtils && typeof window === 'undefined') {\r\n      return CacheUtils.cacheMetricsAggregation(cacheKey, fetchData);\r\n    } else {\r\n      return fetchData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush métricas a base de datos\r\n   */\r\n  private async flushMetrics(): Promise<void> {\r\n    if (this.metricsBuffer.length === 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const metrics = [...this.metricsBuffer];\r\n      this.metricsBuffer = [];\r\n\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {\r\n        logger.error(LogLevel.ERROR, 'Supabase client not available for metrics flush', {}, LogCategory.SYSTEM);\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('enterprise_metrics')\r\n        .insert(metrics.map(metric => ({\r\n          id: metric.id,\r\n          name: metric.name,\r\n          type: metric.type,\r\n          category: metric.category,\r\n          value: metric.value,\r\n          timestamp: metric.timestamp,\r\n          tags: metric.tags,\r\n          metadata: metric.metadata\r\n        })));\r\n\r\n      if (error) {\r\n        logger.error(LogLevel.ERROR, 'Failed to flush metrics to database', {\r\n          error: error.message,\r\n          metricsCount: metrics.length\r\n        }, LogCategory.SYSTEM);\r\n      } else {\r\n        logger.debug(LogLevel.DEBUG, `Flushed ${metrics.length} metrics to database`, {}, LogCategory.SYSTEM);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error during metrics flush', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicializa alertas por defecto\r\n   */\r\n  private initializeDefaultAlerts(): void {\r\n    // Alerta de response time alto\r\n    this.setAlertRule({\r\n      id: 'high_response_time',\r\n      metricName: 'performance.api.duration',\r\n      condition: 'gt',\r\n      threshold: 5000, // 5 segundos\r\n      level: AlertLevel.WARNING,\r\n      enabled: true,\r\n      cooldownMinutes: 5,\r\n      description: 'API response time is too high',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n\r\n    // Alerta de error rate alto\r\n    this.setAlertRule({\r\n      id: 'high_error_rate',\r\n      metricName: 'performance.api.error_rate',\r\n      condition: 'gt',\r\n      threshold: 0.05, // 5%\r\n      level: AlertLevel.CRITICAL,\r\n      enabled: true,\r\n      cooldownMinutes: 2,\r\n      description: 'API error rate is too high',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n\r\n    // Alerta de violaciones de seguridad\r\n    this.setAlertRule({\r\n      id: 'security_violations',\r\n      metricName: 'security.violation',\r\n      condition: 'gte',\r\n      threshold: 1,\r\n      level: AlertLevel.EMERGENCY,\r\n      enabled: true,\r\n      cooldownMinutes: 1,\r\n      description: 'Security violation detected',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicia flush automático de métricas\r\n   */\r\n  private startMetricsFlush(): void {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushMetrics();\r\n    }, 30000); // Flush cada 30 segundos\r\n  }\r\n\r\n  /**\r\n   * Almacena alerta en base de datos\r\n   */\r\n  private async storeAlert(alert: ActiveAlert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase.from('enterprise_alerts').insert({\r\n        id: alert.id,\r\n        rule_id: alert.ruleId,\r\n        metric_name: alert.metricName,\r\n        level: alert.level,\r\n        message: alert.message,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggered_at: alert.triggeredAt,\r\n        resolved_at: alert.resolvedAt,\r\n        metadata: alert.metadata\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera ID único para métrica\r\n   */\r\n  private generateMetricId(): string {\r\n    return `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Convierte nivel de alerta al sistema enterprise\r\n   */\r\n  private convertToAlertSystemLevel(level: AlertLevel): AlertSystemLevel {\r\n    switch (level) {\r\n      case AlertLevel.INFO:\r\n        return AlertSystemLevel.INFO;\r\n      case AlertLevel.WARNING:\r\n        return AlertSystemLevel.WARNING;\r\n      case AlertLevel.CRITICAL:\r\n        return AlertSystemLevel.CRITICAL;\r\n      case AlertLevel.EMERGENCY:\r\n        return AlertSystemLevel.EMERGENCY;\r\n      default:\r\n        return AlertSystemLevel.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera ID único para alerta\r\n   */\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n      this.flushInterval = null;\r\n    }\r\n    this.flushMetrics(); // Flush final\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseMetrics = EnterpriseMetricsCollector.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const recordPerformanceMetric = enterpriseMetrics.recordPerformanceMetric.bind(enterpriseMetrics);\r\nexport const recordBusinessMetric = enterpriseMetrics.recordBusinessMetric.bind(enterpriseMetrics);\r\nexport const recordSecurityMetric = enterpriseMetrics.recordSecurityMetric.bind(enterpriseMetrics);\r\nexport const recordUserExperienceMetric = enterpriseMetrics.recordUserExperienceMetric.bind(enterpriseMetrics);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}