{"version":3,"names":["cov_22krm8ym0f","actualCoverage","s","GET","f","runtime","request","authResult","_adminauth","getAuthenticatedAdmin","b","isAdmin","userId","_server","NextResponse","json","success","error","status","cacheKey","cachedMetrics","_cachemanager","CacheUtils","get","data","cached","performanceMetrics","businessMetrics","securityMetrics","infrastructureMetrics","activeAlerts","Promise","all","getPerformanceMetrics","getBusinessMetrics","getSecurityMetrics","getInfrastructureMetrics","getActiveAlerts","dashboardData","metrics","performance","business","security","infrastructure","alerts","trends","getMetricTrends","timestamp","Date","toISOString","set","_logger","logger","info","LogLevel","INFO","metricsCount","Object","keys","length","alertsCount","LogCategory","SYSTEM","ERROR","Error","message","supabase","_supabase","getSupabaseClient","fiveMinutesAgo","now","from","select","in","gte","order","ascending","responseTime","errorRate","throughput","uptime","responseTimeMetrics","filter","m","name","errorRateMetrics","throughputMetrics","uptimeMetrics","reduce","sum","value","today","split","orders","ordersError","lt","completedOrders","o","totalRevenue","total_amount","ordersToday","conversionRate","activeUsers","Math","floor","random","oneHourAgo","securityEvents","eq","events","blockedRequests","e","result","authFailures","riskLevel","criticalBreakerState","_circuitbreaker","mercadoPagoCriticalBreaker","getState","standardBreakerState","mercadoPagoStandardBreaker","webhookBreakerState","webhookProcessingBreaker","overallStatus","includes","circuitBreakerStatus","cacheHitRate","databaseConnections","memoryUsage","is","limit","map","alert","id","level","triggered_at","metric","metric_name","threshold","groupedTrends","forEach","trend","push"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MONITORING METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\r\nimport { enterpriseMetrics } from '@/lib/monitoring/enterprise-metrics';\r\nimport { \r\n  mercadoPagoCriticalBreaker, \r\n  mercadoPagoStandardBreaker, \r\n  webhookProcessingBreaker \r\n} from '@/lib/integrations/mercadopago/circuit-breaker';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { CacheUtils } from '@/lib/cache-manager';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\ninterface DashboardMetrics {\r\n  performance: {\r\n    responseTime: number;\r\n    errorRate: number;\r\n    throughput: number;\r\n    uptime: number;\r\n  };\r\n  business: {\r\n    totalRevenue: number;\r\n    ordersToday: number;\r\n    conversionRate: number;\r\n    activeUsers: number;\r\n  };\r\n  security: {\r\n    securityEvents: number;\r\n    blockedRequests: number;\r\n    authFailures: number;\r\n    riskLevel: 'low' | 'medium' | 'high' | 'critical';\r\n  };\r\n  infrastructure: {\r\n    circuitBreakerStatus: 'closed' | 'open' | 'half-open';\r\n    cacheHitRate: number;\r\n    databaseConnections: number;\r\n    memoryUsage: number;\r\n  };\r\n}\r\n\r\ninterface ActiveAlert {\r\n  id: string;\r\n  level: 'info' | 'warning' | 'critical' | 'emergency';\r\n  message: string;\r\n  timestamp: string;\r\n  metric: string;\r\n  value: number;\r\n  threshold: number;\r\n}\r\n\r\n/**\r\n * GET /api/admin/monitoring/metrics\r\n * Obtiene métricas en tiempo real para el dashboard\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Usar cache para evitar sobrecarga\r\n    const cacheKey = 'dashboard:metrics:realtime';\r\n    const cachedMetrics = await CacheUtils.get(cacheKey);\r\n    \r\n    if (cachedMetrics) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: cachedMetrics,\r\n        cached: true\r\n      });\r\n    }\r\n\r\n    // Obtener métricas en paralelo\r\n    const [\r\n      performanceMetrics,\r\n      businessMetrics,\r\n      securityMetrics,\r\n      infrastructureMetrics,\r\n      activeAlerts\r\n    ] = await Promise.all([\r\n      getPerformanceMetrics(),\r\n      getBusinessMetrics(),\r\n      getSecurityMetrics(),\r\n      getInfrastructureMetrics(),\r\n      getActiveAlerts()\r\n    ]);\r\n\r\n    const dashboardData = {\r\n      metrics: {\r\n        performance: performanceMetrics,\r\n        business: businessMetrics,\r\n        security: securityMetrics,\r\n        infrastructure: infrastructureMetrics\r\n      },\r\n      alerts: activeAlerts,\r\n      trends: await getMetricTrends(),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Cache por 30 segundos\r\n    await CacheUtils.set(cacheKey, dashboardData, 30);\r\n\r\n    logger.info(LogLevel.INFO, 'Dashboard metrics retrieved', {\r\n      userId: authResult.userId,\r\n      metricsCount: Object.keys(dashboardData.metrics).length,\r\n      alertsCount: activeAlerts.length\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: dashboardData\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to get dashboard metrics', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene métricas de performance\r\n */\r\nasync function getPerformanceMetrics() {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Supabase client not available');\r\n  }\r\n\r\n  // Obtener métricas de los últimos 5 minutos\r\n  const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();\r\n\r\n  const { data: metrics, error } = await supabase\r\n    .from('enterprise_metrics')\r\n    .select('name, value, timestamp')\r\n    .in('name', [\r\n      'performance.api.duration',\r\n      'performance.api.error_rate',\r\n      'performance.api.throughput',\r\n      'performance.system.uptime'\r\n    ])\r\n    .gte('timestamp', fiveMinutesAgo)\r\n    .order('timestamp', { ascending: false });\r\n\r\n  if (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to fetch performance metrics', { error: error.message }, LogCategory.SYSTEM);\r\n    // Valores por defecto en caso de error\r\n    return {\r\n      responseTime: 0,\r\n      errorRate: 0,\r\n      throughput: 0,\r\n      uptime: 0.99\r\n    };\r\n  }\r\n\r\n  // Calcular promedios\r\n  const responseTimeMetrics = metrics?.filter(m => m.name === 'performance.api.duration') || [];\r\n  const errorRateMetrics = metrics?.filter(m => m.name === 'performance.api.error_rate') || [];\r\n  const throughputMetrics = metrics?.filter(m => m.name === 'performance.api.throughput') || [];\r\n  const uptimeMetrics = metrics?.filter(m => m.name === 'performance.system.uptime') || [];\r\n\r\n  return {\r\n    responseTime: responseTimeMetrics.length > 0 \r\n      ? responseTimeMetrics.reduce((sum, m) => sum + m.value, 0) / responseTimeMetrics.length \r\n      : 285,\r\n    errorRate: errorRateMetrics.length > 0 \r\n      ? errorRateMetrics.reduce((sum, m) => sum + m.value, 0) / errorRateMetrics.length \r\n      : 0.004,\r\n    throughput: throughputMetrics.length > 0 \r\n      ? throughputMetrics.reduce((sum, m) => sum + m.value, 0) / throughputMetrics.length \r\n      : 120,\r\n    uptime: uptimeMetrics.length > 0 \r\n      ? uptimeMetrics[0].value \r\n      : 0.9997\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene métricas de negocio\r\n */\r\nasync function getBusinessMetrics() {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Supabase client not available');\r\n  }\r\n\r\n  const today = new Date().toISOString().split('T')[0];\r\n\r\n  // Obtener órdenes del día\r\n  const { data: orders, error: ordersError } = await supabase\r\n    .from('orders')\r\n    .select('total_amount, status, created_at')\r\n    .gte('created_at', `${today}T00:00:00Z`)\r\n    .lt('created_at', `${today}T23:59:59Z`);\r\n\r\n  if (ordersError) {\r\n    logger.error(LogLevel.ERROR, 'Failed to fetch business metrics', { error: ordersError.message }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  const completedOrders = orders?.filter(o => o.status === 'completed') || [];\r\n  const totalRevenue = completedOrders.reduce((sum, order) => sum + (order.total_amount || 0), 0);\r\n\r\n  // Métricas simuladas para demo (en producción vendrían de analytics reales)\r\n  return {\r\n    totalRevenue,\r\n    ordersToday: completedOrders.length,\r\n    conversionRate: 0.034, // 3.4%\r\n    activeUsers: Math.floor(Math.random() * 50) + 20 // Simulado\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene métricas de seguridad\r\n */\r\nasync function getSecurityMetrics() {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Supabase client not available');\r\n  }\r\n\r\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();\r\n\r\n  // Obtener eventos de auditoría de seguridad\r\n  const { data: securityEvents, error } = await supabase\r\n    .from('audit_events')\r\n    .select('category, severity, result')\r\n    .eq('category', 'security_violation')\r\n    .gte('timestamp', oneHourAgo);\r\n\r\n  if (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to fetch security metrics', { error: error.message }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  const events = securityEvents || [];\r\n  const blockedRequests = events.filter(e => e.result === 'blocked').length;\r\n  const authFailures = events.filter(e => e.result === 'failure').length;\r\n  \r\n  // Determinar nivel de riesgo\r\n  let riskLevel: 'low' | 'medium' | 'high' | 'critical' = 'low';\r\n  if (events.length > 10) {riskLevel = 'critical';}\r\n  else if (events.length > 5) {riskLevel = 'high';}\r\n  else if (events.length > 2) {riskLevel = 'medium';}\r\n\r\n  return {\r\n    securityEvents: events.length,\r\n    blockedRequests,\r\n    authFailures,\r\n    riskLevel\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene métricas de infraestructura\r\n */\r\nasync function getInfrastructureMetrics() {\r\n  // Estado de circuit breakers\r\n  const criticalBreakerState = mercadoPagoCriticalBreaker.getState();\r\n  const standardBreakerState = mercadoPagoStandardBreaker.getState();\r\n  const webhookBreakerState = webhookProcessingBreaker.getState();\r\n\r\n  // Determinar estado general (el más crítico)\r\n  let overallStatus: 'closed' | 'open' | 'half-open' = 'closed';\r\n  if ([criticalBreakerState, standardBreakerState, webhookBreakerState].includes('open')) {\r\n    overallStatus = 'open';\r\n  } else if ([criticalBreakerState, standardBreakerState, webhookBreakerState].includes('half-open')) {\r\n    overallStatus = 'half-open';\r\n  }\r\n\r\n  // Métricas simuladas (en producción vendrían de monitoreo real)\r\n  return {\r\n    circuitBreakerStatus: overallStatus,\r\n    cacheHitRate: 0.87, // 87%\r\n    databaseConnections: Math.floor(Math.random() * 10) + 5,\r\n    memoryUsage: 0.65 // 65%\r\n  };\r\n}\r\n\r\n/**\r\n * Obtiene alertas activas\r\n */\r\nasync function getActiveAlerts(): Promise<ActiveAlert[]> {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    return [];\r\n  }\r\n\r\n  const { data: alerts, error } = await supabase\r\n    .from('enterprise_alerts')\r\n    .select('*')\r\n    .is('resolved_at', null)\r\n    .order('triggered_at', { ascending: false })\r\n    .limit(10);\r\n\r\n  if (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to fetch active alerts', { error: error.message }, LogCategory.SYSTEM);\r\n    return [];\r\n  }\r\n\r\n  return (alerts || []).map(alert => ({\r\n    id: alert.id,\r\n    level: alert.level,\r\n    message: alert.message,\r\n    timestamp: alert.triggered_at,\r\n    metric: alert.metric_name,\r\n    value: alert.value,\r\n    threshold: alert.threshold\r\n  }));\r\n}\r\n\r\n/**\r\n * Obtiene tendencias de métricas\r\n */\r\nasync function getMetricTrends() {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    return {};\r\n  }\r\n\r\n  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();\r\n\r\n  const { data: trends, error } = await supabase\r\n    .from('enterprise_metrics')\r\n    .select('name, value, timestamp')\r\n    .in('name', [\r\n      'performance.api.duration',\r\n      'performance.api.error_rate',\r\n      'business.revenue',\r\n      'security.events'\r\n    ])\r\n    .gte('timestamp', oneHourAgo)\r\n    .order('timestamp', { ascending: true });\r\n\r\n  if (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to fetch metric trends', { error: error.message }, LogCategory.SYSTEM);\r\n    return {};\r\n  }\r\n\r\n  // Agrupar por nombre de métrica\r\n  const groupedTrends: Record<string, Array<{ timestamp: string; value: number }>> = {};\r\n  \r\n  (trends || []).forEach(trend => {\r\n    if (!groupedTrends[trend.name]) {\r\n      groupedTrends[trend.name] = [];\r\n    }\r\n    groupedTrends[trend.name].push({\r\n      timestamp: trend.timestamp,\r\n      value: trend.value\r\n    });\r\n  });\r\n\r\n  return groupedTrends;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}