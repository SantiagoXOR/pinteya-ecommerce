{"version":3,"names":["cov_x131n6mo2","actualCoverage","s","default","f","_default","errorBoundaryManager","ErrorBoundaryManager","constructor","errors","Map","patterns","configs","listeners","initializeDefaultConfigs","setupGlobalErrorHandlers","getInstance","instance","b","set","level","enableRetry","maxRetries","retryDelay","enableAutoRecovery","recoveryTimeout","enableReporting","getConfig","get","updateConfig","config","currentConfig","reportError","error","errorInfo","context","errorMetrics","errorId","timestamp","Date","now","errorType","classifyError","component","retryCount","resolved","userImpact","assessUserImpact","detectErrorPattern","notifyListeners","shouldReportExternally","reportToExternalSystems","console","log","markErrorResolved","resolutionTime","message","toLowerCase","stack","includes","name","patternKey","existing","frequency","lastOccurrence","affectedComponents","push","pattern","suggestedFix","getSuggestedFix","undefined","Array","from","values","find","p","window","enterpriseMonitoring","__enterprise_monitoring","trackError","fetch","method","headers","body","JSON","stringify","componentStack","addEventListener","event","handleGlobalError","reason","target","handleResourceError","type","Math","random","toString","substr","resourceType","tagName","src","href","warn","setTimeout","location","reload","addErrorListener","listener","removeErrorListener","index","indexOf","splice","forEach","listenerError","getErrorMetrics","totalErrors","length","errorsByType","groupBy","errorsByComponent","errorsByImpact","sort","a","recentErrors","slice","array","key","reduce","acc","item","value","String","clearOldErrors","maxAge","cutoff","entries","delete","getHealthStatus","filter","e","criticalErrors","errorRate","status","recommendations","frequentPatterns"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-boundary\\error-boundary-manager.ts"],"sourcesContent":["// ===================================\r\n// ERROR BOUNDARY MANAGER\r\n// ===================================\r\n// Sistema centralizado de gestión de Error Boundaries\r\n\r\nimport { ErrorInfo } from 'react';\r\n\r\n// ===================================\r\n// INTERFACES Y TIPOS\r\n// ===================================\r\n\r\nexport interface ErrorBoundaryConfig {\r\n  level: 'page' | 'section' | 'component';\r\n  enableRetry: boolean;\r\n  maxRetries: number;\r\n  retryDelay: number;\r\n  enableAutoRecovery: boolean;\r\n  recoveryTimeout: number;\r\n  enableReporting: boolean;\r\n  fallbackComponent?: React.ComponentType<any>;\r\n}\r\n\r\nexport interface ErrorMetrics {\r\n  errorId: string;\r\n  timestamp: number;\r\n  errorType: string;\r\n  component: string;\r\n  level: string;\r\n  retryCount: number;\r\n  resolved: boolean;\r\n  resolutionTime?: number;\r\n  userImpact: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport interface ErrorPattern {\r\n  pattern: string;\r\n  frequency: number;\r\n  lastOccurrence: number;\r\n  affectedComponents: string[];\r\n  suggestedFix?: string;\r\n}\r\n\r\n// ===================================\r\n// ERROR BOUNDARY MANAGER\r\n// ===================================\r\n\r\nclass ErrorBoundaryManager {\r\n  private static instance: ErrorBoundaryManager;\r\n  private errors: Map<string, ErrorMetrics> = new Map();\r\n  private patterns: Map<string, ErrorPattern> = new Map();\r\n  private configs: Map<string, ErrorBoundaryConfig> = new Map();\r\n  private listeners: Array<(error: ErrorMetrics) => void> = [];\r\n\r\n  private constructor() {\r\n    this.initializeDefaultConfigs();\r\n    this.setupGlobalErrorHandlers();\r\n  }\r\n\r\n  static getInstance(): ErrorBoundaryManager {\r\n    if (!ErrorBoundaryManager.instance) {\r\n      ErrorBoundaryManager.instance = new ErrorBoundaryManager();\r\n    }\r\n    return ErrorBoundaryManager.instance;\r\n  }\r\n\r\n  // ===================================\r\n  // CONFIGURACIÓN\r\n  // ===================================\r\n\r\n  private initializeDefaultConfigs() {\r\n    // Configuración para páginas\r\n    this.configs.set('page', {\r\n      level: 'page',\r\n      enableRetry: true,\r\n      maxRetries: 2,\r\n      retryDelay: 2000,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 5000,\r\n      enableReporting: true\r\n    });\r\n\r\n    // Configuración para secciones\r\n    this.configs.set('section', {\r\n      level: 'section',\r\n      enableRetry: true,\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 3000,\r\n      enableReporting: true\r\n    });\r\n\r\n    // Configuración para componentes\r\n    this.configs.set('component', {\r\n      level: 'component',\r\n      enableRetry: true,\r\n      maxRetries: 5,\r\n      retryDelay: 500,\r\n      enableAutoRecovery: true,\r\n      recoveryTimeout: 2000,\r\n      enableReporting: false // Solo reportar errores críticos\r\n    });\r\n  }\r\n\r\n  getConfig(level: string): ErrorBoundaryConfig {\r\n    return this.configs.get(level) || this.configs.get('component')!;\r\n  }\r\n\r\n  updateConfig(level: string, config: Partial<ErrorBoundaryConfig>) {\r\n    const currentConfig = this.getConfig(level);\r\n    this.configs.set(level, { ...currentConfig, ...config });\r\n  }\r\n\r\n  // ===================================\r\n  // GESTIÓN DE ERRORES\r\n  // ===================================\r\n\r\n  reportError(\r\n    error: Error,\r\n    errorInfo: ErrorInfo,\r\n    context: {\r\n      errorId: string;\r\n      level: string;\r\n      component: string;\r\n      retryCount: number;\r\n    }\r\n  ) {\r\n    const errorMetrics: ErrorMetrics = {\r\n      errorId: context.errorId,\r\n      timestamp: Date.now(),\r\n      errorType: this.classifyError(error),\r\n      component: context.component,\r\n      level: context.level,\r\n      retryCount: context.retryCount,\r\n      resolved: false,\r\n      userImpact: this.assessUserImpact(context.level, error)\r\n    };\r\n\r\n    // Almacenar métricas\r\n    this.errors.set(context.errorId, errorMetrics);\r\n\r\n    // Detectar patrones\r\n    this.detectErrorPattern(error, context.component);\r\n\r\n    // Notificar listeners\r\n    this.notifyListeners(errorMetrics);\r\n\r\n    // Reportar a sistemas externos si es necesario\r\n    if (this.shouldReportExternally(errorMetrics)) {\r\n      this.reportToExternalSystems(errorMetrics, error, errorInfo);\r\n    }\r\n\r\n    console.log('📊 Error reported to ErrorBoundaryManager:', errorMetrics);\r\n  }\r\n\r\n  markErrorResolved(errorId: string, resolutionTime?: number) {\r\n    const error = this.errors.get(errorId);\r\n    if (error) {\r\n      error.resolved = true;\r\n      error.resolutionTime = resolutionTime || Date.now() - error.timestamp;\r\n      this.errors.set(errorId, error);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // CLASIFICACIÓN Y ANÁLISIS\r\n  // ===================================\r\n\r\n  private classifyError(error: Error): string {\r\n    const message = error.message.toLowerCase();\r\n    const stack = error.stack?.toLowerCase() || '';\r\n\r\n    // Errores de chunk loading\r\n    if (message.includes('loading chunk') || message.includes('loading css chunk')) {\r\n      return 'ChunkLoadError';\r\n    }\r\n\r\n    // Errores de red\r\n    if (message.includes('network') || message.includes('fetch') || message.includes('timeout')) {\r\n      return 'NetworkError';\r\n    }\r\n\r\n    // Errores de React\r\n    if (stack.includes('react') || message.includes('render')) {\r\n      return 'ReactError';\r\n    }\r\n\r\n    // Errores de JavaScript\r\n    if (error.name === 'TypeError') {return 'TypeError';}\r\n    if (error.name === 'ReferenceError') {return 'ReferenceError';}\r\n    if (error.name === 'SyntaxError') {return 'SyntaxError';}\r\n\r\n    return 'UnknownError';\r\n  }\r\n\r\n  private assessUserImpact(level: string, error: Error): ErrorMetrics['userImpact'] {\r\n    // Impacto crítico para errores de página\r\n    if (level === 'page') {return 'critical';}\r\n\r\n    // Impacto alto para errores de sección\r\n    if (level === 'section') {return 'high';}\r\n\r\n    // Evaluar por tipo de error\r\n    const errorType = this.classifyError(error);\r\n    switch (errorType) {\r\n      case 'ChunkLoadError':\r\n        return 'high'; // Impide la carga de funcionalidad\r\n      case 'NetworkError':\r\n        return 'medium'; // Puede afectar datos\r\n      case 'ReactError':\r\n        return level === 'component' ? 'low' : 'medium';\r\n      default:\r\n        return 'low';\r\n    }\r\n  }\r\n\r\n  private detectErrorPattern(error: Error, component: string) {\r\n    const patternKey = `${error.name}:${component}`;\r\n    const existing = this.patterns.get(patternKey);\r\n\r\n    if (existing) {\r\n      existing.frequency++;\r\n      existing.lastOccurrence = Date.now();\r\n      if (!existing.affectedComponents.includes(component)) {\r\n        existing.affectedComponents.push(component);\r\n      }\r\n    } else {\r\n      this.patterns.set(patternKey, {\r\n        pattern: patternKey,\r\n        frequency: 1,\r\n        lastOccurrence: Date.now(),\r\n        affectedComponents: [component],\r\n        suggestedFix: this.getSuggestedFix(error)\r\n      });\r\n    }\r\n  }\r\n\r\n  private getSuggestedFix(error: Error): string | undefined {\r\n    const errorType = this.classifyError(error);\r\n    \r\n    switch (errorType) {\r\n      case 'ChunkLoadError':\r\n        return 'Consider implementing chunk retry logic or reducing bundle size';\r\n      case 'NetworkError':\r\n        return 'Implement network retry with exponential backoff';\r\n      case 'TypeError':\r\n        return 'Add null/undefined checks and proper type validation';\r\n      case 'ReactError':\r\n        return 'Review component lifecycle and state management';\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // REPORTE EXTERNO\r\n  // ===================================\r\n\r\n  private shouldReportExternally(errorMetrics: ErrorMetrics): boolean {\r\n    // Reportar errores críticos y de alto impacto\r\n    if (errorMetrics.userImpact === 'critical' || errorMetrics.userImpact === 'high') {\r\n      return true;\r\n    }\r\n\r\n    // Reportar errores frecuentes\r\n    const pattern = Array.from(this.patterns.values())\r\n      .find(p => p.pattern.includes(errorMetrics.errorType));\r\n    \r\n    if (pattern && pattern.frequency >= 5) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private async reportToExternalSystems(\r\n    errorMetrics: ErrorMetrics,\r\n    error: Error,\r\n    errorInfo: ErrorInfo\r\n  ) {\r\n    try {\r\n      // Reportar al sistema de monitoreo enterprise\r\n      if (typeof window !== 'undefined') {\r\n        const enterpriseMonitoring = (window as any).__enterprise_monitoring;\r\n        if (enterpriseMonitoring) {\r\n          enterpriseMonitoring.trackError(error, {\r\n            context: 'error_boundary',\r\n            component: errorMetrics.component,\r\n            level: errorMetrics.level,\r\n            errorId: errorMetrics.errorId\r\n          });\r\n        }\r\n      }\r\n\r\n      // Reportar a API de errores\r\n      await fetch('/api/monitoring/errors', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          errorMetrics,\r\n          error: {\r\n            name: error.name,\r\n            message: error.message,\r\n            stack: error.stack\r\n          },\r\n          errorInfo: {\r\n            componentStack: errorInfo.componentStack\r\n          }\r\n        })\r\n      });\r\n\r\n    } catch (reportError) {\r\n      console.error('❌ Failed to report to external systems:', reportError);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // MANEJO GLOBAL DE ERRORES\r\n  // ===================================\r\n\r\n  private setupGlobalErrorHandlers() {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    // Manejar errores JavaScript no capturados\r\n    window.addEventListener('error', (event) => {\r\n      this.handleGlobalError(event.error, 'global_javascript_error');\r\n    });\r\n\r\n    // Manejar promesas rechazadas no capturadas\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.handleGlobalError(event.reason, 'unhandled_promise_rejection');\r\n    });\r\n\r\n    // Manejar errores de recursos (imágenes, scripts, etc.)\r\n    window.addEventListener('error', (event) => {\r\n      if (event.target !== window) {\r\n        this.handleResourceError(event);\r\n      }\r\n    }, true);\r\n  }\r\n\r\n  private handleGlobalError(error: any, type: string) {\r\n    const errorId = `global_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const errorMetrics: ErrorMetrics = {\r\n      errorId,\r\n      timestamp: Date.now(),\r\n      errorType: type,\r\n      component: 'global',\r\n      level: 'page',\r\n      retryCount: 0,\r\n      resolved: false,\r\n      userImpact: 'high'\r\n    };\r\n\r\n    this.errors.set(errorId, errorMetrics);\r\n    this.notifyListeners(errorMetrics);\r\n\r\n    console.error(`🌐 Global error (${type}):`, error);\r\n  }\r\n\r\n  private handleResourceError(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    const resourceType = target.tagName?.toLowerCase() || 'unknown';\r\n    const src = (target as any).src || (target as any).href || 'unknown';\r\n\r\n    console.warn(`📦 Resource loading error (${resourceType}):`, src);\r\n\r\n    // Intentar recargar recursos críticos\r\n    if (resourceType === 'script' && src.includes('chunk')) {\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 2000);\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // LISTENERS Y MÉTRICAS\r\n  // ===================================\r\n\r\n  addErrorListener(listener: (error: ErrorMetrics) => void) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  removeErrorListener(listener: (error: ErrorMetrics) => void) {\r\n    const index = this.listeners.indexOf(listener);\r\n    if (index > -1) {\r\n      this.listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private notifyListeners(error: ErrorMetrics) {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener(error);\r\n      } catch (listenerError) {\r\n        console.error('❌ Error in error listener:', listenerError);\r\n      }\r\n    });\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTRICAS Y REPORTES\r\n  // ===================================\r\n\r\n  getErrorMetrics(): {\r\n    totalErrors: number;\r\n    errorsByType: Record<string, number>;\r\n    errorsByComponent: Record<string, number>;\r\n    errorsByImpact: Record<string, number>;\r\n    patterns: ErrorPattern[];\r\n    recentErrors: ErrorMetrics[];\r\n  } {\r\n    const errors = Array.from(this.errors.values());\r\n    const patterns = Array.from(this.patterns.values());\r\n\r\n    return {\r\n      totalErrors: errors.length,\r\n      errorsByType: this.groupBy(errors, 'errorType'),\r\n      errorsByComponent: this.groupBy(errors, 'component'),\r\n      errorsByImpact: this.groupBy(errors, 'userImpact'),\r\n      patterns: patterns.sort((a, b) => b.frequency - a.frequency),\r\n      recentErrors: errors\r\n        .sort((a, b) => b.timestamp - a.timestamp)\r\n        .slice(0, 10)\r\n    };\r\n  }\r\n\r\n  private groupBy<T>(array: T[], key: keyof T): Record<string, number> {\r\n    return array.reduce((acc, item) => {\r\n      const value = String(item[key]);\r\n      acc[value] = (acc[value] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n  }\r\n\r\n  clearOldErrors(maxAge: number = 24 * 60 * 60 * 1000) { // 24 horas por defecto\r\n    const cutoff = Date.now() - maxAge;\r\n    \r\n    for (const [errorId, error] of this.errors.entries()) {\r\n      if (error.timestamp < cutoff) {\r\n        this.errors.delete(errorId);\r\n      }\r\n    }\r\n\r\n    for (const [patternKey, pattern] of this.patterns.entries()) {\r\n      if (pattern.lastOccurrence < cutoff) {\r\n        this.patterns.delete(patternKey);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // UTILIDADES\r\n  // ===================================\r\n\r\n  getHealthStatus(): {\r\n    status: 'healthy' | 'degraded' | 'critical';\r\n    errorRate: number;\r\n    criticalErrors: number;\r\n    recommendations: string[];\r\n  } {\r\n    const errors = Array.from(this.errors.values());\r\n    const recentErrors = errors.filter(e => e.timestamp > Date.now() - 60000); // Últimos 60 segundos\r\n    const criticalErrors = errors.filter(e => e.userImpact === 'critical').length;\r\n    \r\n    const errorRate = recentErrors.length;\r\n    let status: 'healthy' | 'degraded' | 'critical' = 'healthy';\r\n    const recommendations: string[] = [];\r\n\r\n    if (criticalErrors > 0) {\r\n      status = 'critical';\r\n      recommendations.push('Resolver errores críticos inmediatamente');\r\n    } else if (errorRate > 5) {\r\n      status = 'degraded';\r\n      recommendations.push('Alta tasa de errores detectada');\r\n    }\r\n\r\n    // Analizar patrones frecuentes\r\n    const frequentPatterns = Array.from(this.patterns.values())\r\n      .filter(p => p.frequency >= 3);\r\n    \r\n    if (frequentPatterns.length > 0) {\r\n      recommendations.push('Revisar patrones de errores frecuentes');\r\n      if (status === 'healthy') {status = 'degraded';}\r\n    }\r\n\r\n    return {\r\n      status,\r\n      errorRate,\r\n      criticalErrors,\r\n      recommendations\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORT\r\n// ===================================\r\n\r\nexport const errorBoundaryManager = ErrorBoundaryManager.getInstance();\r\nexport default ErrorBoundaryManager;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}