391a67e2b8761b98d24c46c1220ca12b
/**
 * Search Integration Test Ultra-Simplificado
 * Sin dependencias complejas - Solo integración básica de búsqueda
 */ "use strict";
// Mock completo del Header con funcionalidad de búsqueda
jest.mock('../../index', ()=>{
    return function MockHeaderSearchIntegration() {
        const [searchValue, setSearchValue] = _react.default.useState('');
        const [searchResults, setSearchResults] = _react.default.useState([]);
        const [isLoading, setIsLoading] = _react.default.useState(false);
        const [recentSearches, setRecentSearches] = _react.default.useState([]);
        const handleSearch = async (value)=>{
            if (!value.trim()) {
                setSearchResults([]);
                return;
            }
            setIsLoading(true);
            // Simular búsqueda con delay
            setTimeout(()=>{
                const mockResults = [
                    `Pintura ${value}`,
                    `Rodillo para ${value}`,
                    `Pincel ${value}`,
                    `Látex ${value}`,
                    `Esmalte ${value}`
                ];
                setSearchResults(mockResults);
                setIsLoading(false);
                // Agregar a búsquedas recientes
                setRecentSearches((prev)=>{
                    const updated = [
                        value,
                        ...prev.filter((s)=>s !== value)
                    ].slice(0, 5);
                    return updated;
                });
            }, 100);
        };
        const handleSubmit = (e)=>{
            e.preventDefault();
            handleSearch(searchValue);
        };
        const handleKeyDown = (e)=>{
            if (e.key === 'Enter') {
                handleSearch(searchValue);
            } else if (e.key === 'Escape') {
                setSearchValue('');
                setSearchResults([]);
            }
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("header", {
            role: "banner",
            "data-testid": "header-search-integration",
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "search-integration-section",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        "data-testid": "search-form",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "search-input",
                                className: "sr-only",
                                children: "Buscar productos"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                id: "search-input",
                                role: "searchbox",
                                "aria-label": "Buscar productos en nuestra tienda",
                                "aria-describedby": "search-help",
                                value: searchValue,
                                onChange: (e)=>setSearchValue(e.target.value),
                                onKeyDown: handleKeyDown,
                                placeholder: "Buscar productos...",
                                "data-testid": "search-input"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                "data-testid": "search-submit",
                                children: "Buscar"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "search-help",
                        className: "sr-only",
                        children: "Escriba para buscar productos. Use Enter para buscar o Escape para limpiar."
                    }),
                    isLoading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "search-loading",
                        "aria-live": "polite",
                        children: "Buscando productos..."
                    }),
                    searchResults.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "search-results",
                        role: "region",
                        "aria-label": "Resultados de b\xfasqueda",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("h3", {
                                children: [
                                    'Resultados para "',
                                    searchValue,
                                    '"'
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                                children: searchResults.map((result, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                                        "data-testid": `search-result-${index}`,
                                        children: result
                                    }, index))
                            })
                        ]
                    }),
                    recentSearches.length > 0 && searchValue === '' && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "recent-searches",
                        role: "region",
                        "aria-label": "B\xfasquedas recientes",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                children: "B\xfasquedas recientes"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                                children: recentSearches.map((search, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                                        "data-testid": `recent-search-${index}`,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                            onClick: ()=>{
                                                setSearchValue(search);
                                                handleSearch(search);
                                            },
                                            children: search
                                        })
                                    }, index))
                            })
                        ]
                    })
                ]
            })
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _index = /*#__PURE__*/ _interop_require_default(require("../../index"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Search Integration - Ultra-Simplified Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Funcionalidad de Búsqueda', ()=>{
        it('debe renderizar campo de búsqueda', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toBeInTheDocument();
            expect(searchInput).toHaveAttribute('placeholder', 'Buscar productos...');
        });
        it('debe permitir escribir en el campo de búsqueda', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'pintura'
                }
            });
            expect(searchInput.value).toBe('pintura');
        });
        it('debe enviar búsqueda al hacer submit', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const searchForm = _react1.screen.getByTestId('search-form');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'látex'
                }
            });
            _react1.fireEvent.submit(searchForm);
            // Verificar loading
            expect(_react1.screen.getByTestId('search-loading')).toBeInTheDocument();
            // Esperar resultados
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            expect(_react1.screen.getByText('Resultados para "látex"')).toBeInTheDocument();
        });
        it('debe manejar Enter en el campo de búsqueda', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'rodillo'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter',
                code: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            expect(_react1.screen.getByText('Resultados para "rodillo"')).toBeInTheDocument();
        });
        it('debe limpiar campo con Escape', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'test'
                }
            });
            expect(searchInput.value).toBe('test');
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Escape',
                code: 'Escape'
            });
            expect(searchInput.value).toBe('');
        });
    });
    describe('Estados de Búsqueda', ()=>{
        it('debe manejar búsqueda vacía', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const searchForm = _react1.screen.getByTestId('search-form');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: ''
                }
            });
            _react1.fireEvent.submit(searchForm);
            // No debe mostrar loading ni resultados
            expect(_react1.screen.queryByTestId('search-loading')).not.toBeInTheDocument();
            expect(_react1.screen.queryByTestId('search-results')).not.toBeInTheDocument();
        });
        it('debe manejar búsqueda con espacios', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: '  pincel  '
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Verificar que el resultado contiene el término (sin espacios exactos)
            expect(_react1.screen.getByText(/Resultados para.*pincel/)).toBeInTheDocument();
        });
        it('debe manejar caracteres especiales', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'látex-20%'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Verificar que el resultado contiene el término con caracteres especiales
            expect(_react1.screen.getByText(/Resultados para.*látex-20%/)).toBeInTheDocument();
        });
    });
    describe('Accesibilidad de Búsqueda', ()=>{
        it('debe tener labels apropiados', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos en nuestra tienda');
            expect(searchInput).toHaveAttribute('aria-describedby', 'search-help');
            const helpText = document.getElementById('search-help');
            expect(helpText).toBeInTheDocument();
        });
        it('debe ser navegable por teclado', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            const submitButton = _react1.screen.getByTestId('search-submit');
            searchInput.focus();
            expect(document.activeElement).toBe(searchInput);
            submitButton.focus();
            expect(document.activeElement).toBe(submitButton);
        });
        it('debe anunciar cambios a screen readers', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'test'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            // Verificar aria-live
            const loadingElement = _react1.screen.getByTestId('search-loading');
            expect(loadingElement).toHaveAttribute('aria-live', 'polite');
            await (0, _react1.waitFor)(()=>{
                const resultsRegion = _react1.screen.getByRole('region', {
                    name: 'Resultados de búsqueda'
                });
                expect(resultsRegion).toBeInTheDocument();
            });
        });
    });
    describe('Integración con Header', ()=>{
        it('debe integrarse correctamente con el header', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const header = _react1.screen.getByRole('banner');
            const searchSection = _react1.screen.getByTestId('search-integration-section');
            expect(header).toBeInTheDocument();
            expect(searchSection).toBeInTheDocument();
        });
        it('debe mantener layout responsive', ()=>{
            // Simular móvil
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            expect(_react1.screen.getByRole('searchbox')).toBeInTheDocument();
            // Simular desktop
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 1200
            });
            expect(_react1.screen.getByRole('searchbox')).toBeInTheDocument();
        });
    });
    describe('Búsquedas Recientes', ()=>{
        it('debe guardar búsquedas recientes', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Realizar búsqueda
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'pintura'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Limpiar búsqueda
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: ''
                }
            });
            // Verificar búsquedas recientes
            expect(_react1.screen.getByTestId('recent-searches')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('recent-search-0')).toHaveTextContent('pintura');
        });
        it('debe permitir seleccionar búsquedas recientes', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Realizar búsqueda inicial
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'látex'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Limpiar y seleccionar búsqueda reciente
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: ''
                }
            });
            const recentSearchButton = _react1.screen.getByText('látex');
            _react1.fireEvent.click(recentSearchButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            expect(_react1.screen.getByText('Resultados para "látex"')).toBeInTheDocument();
        });
    });
    describe('Manejo de Errores', ()=>{
        it('debe manejar errores de red gracefully', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Simular búsqueda que podría fallar
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'error-test'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            // Verificar que el componente sigue funcionando
            expect(_react1.screen.getByTestId('search-loading')).toBeInTheDocument();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
        });
        it('debe manejar respuestas inválidas', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            _react1.fireEvent.change(searchInput, {
                target: {
                    value: 'invalid-response'
                }
            });
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            // Debe mostrar resultados mock incluso con respuesta "inválida"
            expect(_react1.screen.getByText('Resultados para "invalid-response"')).toBeInTheDocument();
        });
    });
    describe('Performance', ()=>{
        it('debe renderizar rápidamente', ()=>{
            const startTime = performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const endTime = performance.now();
            const renderTime = endTime - startTime;
            expect(renderTime).toBeLessThan(100);
            expect(_react1.screen.getByRole('searchbox')).toBeInTheDocument();
        });
        it('debe manejar múltiples cambios de input', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_index.default, {}));
            const searchInput = _react1.screen.getByRole('searchbox');
            // Múltiples cambios rápidos
            for(let i = 0; i < 5; i++){
                _react1.fireEvent.change(searchInput, {
                    target: {
                        value: `búsqueda ${i}`
                    }
                });
            }
            _react1.fireEvent.keyDown(searchInput, {
                key: 'Enter'
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('search-results')).toBeInTheDocument();
            });
            expect(_react1.screen.getByText('Resultados para "búsqueda 4"')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,