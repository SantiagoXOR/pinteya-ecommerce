{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\Header\\__tests__\\integration\\SearchIntegration.test.tsx"],"sourcesContent":["/**\r\n * Search Integration Test Ultra-Simplificado\r\n * Sin dependencias complejas - Solo integración básica de búsqueda\r\n */\r\n\r\nimport React from 'react'\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\n\r\n// Mock completo del Header con funcionalidad de búsqueda\r\njest.mock('../../index', () => {\r\n  return function MockHeaderSearchIntegration() {\r\n    const [searchValue, setSearchValue] = React.useState('')\r\n    const [searchResults, setSearchResults] = React.useState<string[]>([])\r\n    const [isLoading, setIsLoading] = React.useState(false)\r\n    const [recentSearches, setRecentSearches] = React.useState<string[]>([])\r\n    \r\n    const handleSearch = async (value: string) => {\r\n      if (!value.trim()) {\r\n        setSearchResults([])\r\n        return\r\n      }\r\n      \r\n      setIsLoading(true)\r\n      \r\n      // Simular búsqueda con delay\r\n      setTimeout(() => {\r\n        const mockResults = [\r\n          `Pintura ${value}`,\r\n          `Rodillo para ${value}`,\r\n          `Pincel ${value}`,\r\n          `Látex ${value}`,\r\n          `Esmalte ${value}`\r\n        ]\r\n        setSearchResults(mockResults)\r\n        setIsLoading(false)\r\n        \r\n        // Agregar a búsquedas recientes\r\n        setRecentSearches(prev => {\r\n          const updated = [value, ...prev.filter(s => s !== value)].slice(0, 5)\r\n          return updated\r\n        })\r\n      }, 100)\r\n    }\r\n    \r\n    const handleSubmit = (e: React.FormEvent) => {\r\n      e.preventDefault()\r\n      handleSearch(searchValue)\r\n    }\r\n    \r\n    const handleKeyDown = (e: React.KeyboardEvent) => {\r\n      if (e.key === 'Enter') {\r\n        handleSearch(searchValue)\r\n      } else if (e.key === 'Escape') {\r\n        setSearchValue('')\r\n        setSearchResults([])\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <header role=\"banner\" data-testid=\"header-search-integration\">\r\n        <div data-testid=\"search-integration-section\">\r\n          <form onSubmit={handleSubmit} data-testid=\"search-form\">\r\n            <label htmlFor=\"search-input\" className=\"sr-only\">\r\n              Buscar productos\r\n            </label>\r\n            <input \r\n              id=\"search-input\"\r\n              role=\"searchbox\"\r\n              aria-label=\"Buscar productos en nuestra tienda\"\r\n              aria-describedby=\"search-help\"\r\n              value={searchValue}\r\n              onChange={(e) => setSearchValue(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              placeholder=\"Buscar productos...\"\r\n              data-testid=\"search-input\"\r\n            />\r\n            <button type=\"submit\" data-testid=\"search-submit\">\r\n              Buscar\r\n            </button>\r\n          </form>\r\n          \r\n          <div id=\"search-help\" className=\"sr-only\">\r\n            Escriba para buscar productos. Use Enter para buscar o Escape para limpiar.\r\n          </div>\r\n          \r\n          {isLoading && (\r\n            <div data-testid=\"search-loading\" aria-live=\"polite\">\r\n              Buscando productos...\r\n            </div>\r\n          )}\r\n          \r\n          {searchResults.length > 0 && (\r\n            <div data-testid=\"search-results\" role=\"region\" aria-label=\"Resultados de búsqueda\">\r\n              <h3>Resultados para \"{searchValue}\"</h3>\r\n              <ul>\r\n                {searchResults.map((result, index) => (\r\n                  <li key={index} data-testid={`search-result-${index}`}>\r\n                    {result}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n          \r\n          {recentSearches.length > 0 && searchValue === '' && (\r\n            <div data-testid=\"recent-searches\" role=\"region\" aria-label=\"Búsquedas recientes\">\r\n              <h4>Búsquedas recientes</h4>\r\n              <ul>\r\n                {recentSearches.map((search, index) => (\r\n                  <li key={index} data-testid={`recent-search-${index}`}>\r\n                    <button \r\n                      onClick={() => {\r\n                        setSearchValue(search)\r\n                        handleSearch(search)\r\n                      }}\r\n                    >\r\n                      {search}\r\n                    </button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n})\r\n\r\nimport Header from '../../index'\r\n\r\ndescribe('Search Integration - Ultra-Simplified Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('Funcionalidad de Búsqueda', () => {\r\n    it('debe renderizar campo de búsqueda', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      expect(searchInput).toBeInTheDocument()\r\n      expect(searchInput).toHaveAttribute('placeholder', 'Buscar productos...')\r\n    })\r\n\r\n    it('debe permitir escribir en el campo de búsqueda', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'pintura' } })\r\n      expect(searchInput.value).toBe('pintura')\r\n    })\r\n\r\n    it('debe enviar búsqueda al hacer submit', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      const searchForm = screen.getByTestId('search-form')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'látex' } })\r\n      fireEvent.submit(searchForm)\r\n      \r\n      // Verificar loading\r\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\r\n      \r\n      // Esperar resultados\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      expect(screen.getByText('Resultados para \"látex\"')).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe manejar Enter en el campo de búsqueda', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'rodillo' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter', code: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      expect(screen.getByText('Resultados para \"rodillo\"')).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe limpiar campo con Escape', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox') as HTMLInputElement\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'test' } })\r\n      expect(searchInput.value).toBe('test')\r\n      \r\n      fireEvent.keyDown(searchInput, { key: 'Escape', code: 'Escape' })\r\n      expect(searchInput.value).toBe('')\r\n    })\r\n  })\r\n\r\n  describe('Estados de Búsqueda', () => {\r\n    it('debe manejar búsqueda vacía', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      const searchForm = screen.getByTestId('search-form')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: '' } })\r\n      fireEvent.submit(searchForm)\r\n      \r\n      // No debe mostrar loading ni resultados\r\n      expect(screen.queryByTestId('search-loading')).not.toBeInTheDocument()\r\n      expect(screen.queryByTestId('search-results')).not.toBeInTheDocument()\r\n    })\r\n\r\n    it('debe manejar búsqueda con espacios', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: '  pincel  ' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n\r\n      // Verificar que el resultado contiene el término (sin espacios exactos)\r\n      expect(screen.getByText(/Resultados para.*pincel/)).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe manejar caracteres especiales', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'látex-20%' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n\r\n      // Verificar que el resultado contiene el término con caracteres especiales\r\n      expect(screen.getByText(/Resultados para.*látex-20%/)).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Accesibilidad de Búsqueda', () => {\r\n    it('debe tener labels apropiados', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      expect(searchInput).toHaveAttribute('aria-label', 'Buscar productos en nuestra tienda')\r\n      expect(searchInput).toHaveAttribute('aria-describedby', 'search-help')\r\n      \r\n      const helpText = document.getElementById('search-help')\r\n      expect(helpText).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe ser navegable por teclado', () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      const submitButton = screen.getByTestId('search-submit')\r\n      \r\n      searchInput.focus()\r\n      expect(document.activeElement).toBe(searchInput)\r\n      \r\n      submitButton.focus()\r\n      expect(document.activeElement).toBe(submitButton)\r\n    })\r\n\r\n    it('debe anunciar cambios a screen readers', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'test' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      // Verificar aria-live\r\n      const loadingElement = screen.getByTestId('search-loading')\r\n      expect(loadingElement).toHaveAttribute('aria-live', 'polite')\r\n      \r\n      await waitFor(() => {\r\n        const resultsRegion = screen.getByRole('region', { name: 'Resultados de búsqueda' })\r\n        expect(resultsRegion).toBeInTheDocument()\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Integración con Header', () => {\r\n    it('debe integrarse correctamente con el header', () => {\r\n      render(<Header />)\r\n      \r\n      const header = screen.getByRole('banner')\r\n      const searchSection = screen.getByTestId('search-integration-section')\r\n      \r\n      expect(header).toBeInTheDocument()\r\n      expect(searchSection).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe mantener layout responsive', () => {\r\n      // Simular móvil\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 375,\r\n      })\r\n\r\n      render(<Header />)\r\n      \r\n      expect(screen.getByRole('searchbox')).toBeInTheDocument()\r\n      \r\n      // Simular desktop\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 1200,\r\n      })\r\n\r\n      expect(screen.getByRole('searchbox')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Búsquedas Recientes', () => {\r\n    it('debe guardar búsquedas recientes', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      // Realizar búsqueda\r\n      fireEvent.change(searchInput, { target: { value: 'pintura' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Limpiar búsqueda\r\n      fireEvent.change(searchInput, { target: { value: '' } })\r\n      \r\n      // Verificar búsquedas recientes\r\n      expect(screen.getByTestId('recent-searches')).toBeInTheDocument()\r\n      expect(screen.getByTestId('recent-search-0')).toHaveTextContent('pintura')\r\n    })\r\n\r\n    it('debe permitir seleccionar búsquedas recientes', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      // Realizar búsqueda inicial\r\n      fireEvent.change(searchInput, { target: { value: 'látex' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Limpiar y seleccionar búsqueda reciente\r\n      fireEvent.change(searchInput, { target: { value: '' } })\r\n      \r\n      const recentSearchButton = screen.getByText('látex')\r\n      fireEvent.click(recentSearchButton)\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      expect(screen.getByText('Resultados para \"látex\"')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Manejo de Errores', () => {\r\n    it('debe manejar errores de red gracefully', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      // Simular búsqueda que podría fallar\r\n      fireEvent.change(searchInput, { target: { value: 'error-test' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      // Verificar que el componente sigue funcionando\r\n      expect(screen.getByTestId('search-loading')).toBeInTheDocument()\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n    })\r\n\r\n    it('debe manejar respuestas inválidas', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      fireEvent.change(searchInput, { target: { value: 'invalid-response' } })\r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      // Debe mostrar resultados mock incluso con respuesta \"inválida\"\r\n      expect(screen.getByText('Resultados para \"invalid-response\"')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  describe('Performance', () => {\r\n    it('debe renderizar rápidamente', () => {\r\n      const startTime = performance.now()\r\n      \r\n      render(<Header />)\r\n      \r\n      const endTime = performance.now()\r\n      const renderTime = endTime - startTime\r\n      \r\n      expect(renderTime).toBeLessThan(100)\r\n      expect(screen.getByRole('searchbox')).toBeInTheDocument()\r\n    })\r\n\r\n    it('debe manejar múltiples cambios de input', async () => {\r\n      render(<Header />)\r\n      \r\n      const searchInput = screen.getByRole('searchbox')\r\n      \r\n      // Múltiples cambios rápidos\r\n      for (let i = 0; i < 5; i++) {\r\n        fireEvent.change(searchInput, { target: { value: `búsqueda ${i}` } })\r\n      }\r\n      \r\n      fireEvent.keyDown(searchInput, { key: 'Enter' })\r\n      \r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('search-results')).toBeInTheDocument()\r\n      })\r\n      \r\n      expect(screen.getByText('Resultados para \"búsqueda 4\"')).toBeInTheDocument()\r\n    })\r\n  })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","MockHeaderSearchIntegration","searchValue","setSearchValue","React","useState","searchResults","setSearchResults","isLoading","setIsLoading","recentSearches","setRecentSearches","handleSearch","value","trim","setTimeout","mockResults","prev","updated","filter","s","slice","handleSubmit","e","preventDefault","handleKeyDown","key","header","role","data-testid","div","form","onSubmit","label","htmlFor","className","input","id","aria-label","aria-describedby","onChange","target","onKeyDown","placeholder","button","type","aria-live","length","h3","ul","map","result","index","li","h4","search","onClick","describe","beforeEach","clearAllMocks","it","render","Header","searchInput","screen","getByRole","expect","toBeInTheDocument","toHaveAttribute","fireEvent","change","toBe","searchForm","getByTestId","submit","waitFor","getByText","keyDown","code","queryByTestId","not","helpText","document","getElementById","submitButton","focus","activeElement","loadingElement","resultsRegion","name","searchSection","Object","defineProperty","window","writable","configurable","toHaveTextContent","recentSearchButton","click","startTime","performance","now","endTime","renderTime","toBeLessThan","i"],"mappings":"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"}