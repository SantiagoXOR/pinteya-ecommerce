{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\proactive-monitoring.ts"],"sourcesContent":["'use client'\n\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger'\nimport { EnterpriseAlertSystem } from './alert-system'\nimport { EnterpriseMetricsCollector } from './enterprise-metrics'\nimport { emailService } from '../notifications/email'\nimport { slackService } from '../notifications/slack'\n\nexport interface ErrorPattern {\n  id: string\n  name: string\n  pattern: RegExp | string\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  threshold: number // N칰mero de ocurrencias antes de alertar\n  timeWindow: number // Ventana de tiempo en minutos\n  description: string\n  isActive: boolean\n}\n\nexport interface SystemHealth {\n  status: 'healthy' | 'warning' | 'critical' | 'down'\n  uptime: number\n  responseTime: number\n  errorRate: number\n  memoryUsage: number\n  cpuUsage: number\n  activeConnections: number\n  lastCheck: Date\n  issues: HealthIssue[]\n}\n\nexport interface HealthIssue {\n  id: string\n  type: 'performance' | 'error' | 'resource' | 'security'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  message: string\n  details: Record<string, any>\n  firstDetected: Date\n  lastSeen: Date\n  count: number\n}\n\nexport interface MonitoringConfig {\n  enabled: boolean\n  checkInterval: number // en segundos\n  errorThreshold: number\n  responseTimeThreshold: number\n  memoryThreshold: number\n  cpuThreshold: number\n  enableAutoRecovery: boolean\n  notificationChannels: string[]\n}\n\nexport class ProactiveMonitoringService {\n  private static instance: ProactiveMonitoringService\n  private alertSystem: EnterpriseAlertSystem\n  private metricsCollector: EnterpriseMetricsCollector\n  private errorPatterns: Map<string, ErrorPattern> = new Map()\n  private errorCounts: Map<string, { count: number; firstSeen: Date; lastSeen: Date }> = new Map()\n  private healthChecks: Map<string, () => Promise<any>> = new Map()\n  private monitoringInterval: NodeJS.Timeout | null = null\n  private config: MonitoringConfig\n\n  static getInstance(): ProactiveMonitoringService {\n    if (!ProactiveMonitoringService.instance) {\n      ProactiveMonitoringService.instance = new ProactiveMonitoringService()\n    }\n    return ProactiveMonitoringService.instance\n  }\n\n  constructor() {\n    // Solo inicializar en el servidor\n    if (typeof window === 'undefined') {\n      this.alertSystem = EnterpriseAlertSystem.getInstance()\n      this.metricsCollector = EnterpriseMetricsCollector.getInstance()\n    }\n    this.config = {\n      enabled: true,\n      checkInterval: 30, // 30 segundos\n      errorThreshold: 5, // 5% error rate\n      responseTimeThreshold: 2000, // 2 segundos\n      memoryThreshold: 80, // 80% memoria\n      cpuThreshold: 70, // 70% CPU\n      enableAutoRecovery: true,\n      notificationChannels: ['email', 'slack'],\n    }\n    this.initializeDefaultPatterns()\n  }\n\n  private initializeDefaultPatterns(): void {\n    const defaultPatterns: ErrorPattern[] = [\n      {\n        id: 'database_connection_error',\n        name: 'Database Connection Error',\n        pattern: /database.*connection.*failed|connection.*timeout|pool.*exhausted/i,\n        severity: 'critical',\n        threshold: 3,\n        timeWindow: 5,\n        description: 'Errores de conexi칩n a la base de datos',\n        isActive: true,\n      },\n      {\n        id: 'payment_processing_error',\n        name: 'Payment Processing Error',\n        pattern: /payment.*failed|transaction.*error|mercadopago.*error/i,\n        severity: 'high',\n        threshold: 5,\n        timeWindow: 10,\n        description: 'Errores en el procesamiento de pagos',\n        isActive: true,\n      },\n      {\n        id: 'authentication_error',\n        name: 'Authentication Error',\n        pattern: /auth.*failed|unauthorized|invalid.*token|session.*expired/i,\n        severity: 'medium',\n        threshold: 10,\n        timeWindow: 15,\n        description: 'Errores de autenticaci칩n',\n        isActive: true,\n      },\n      {\n        id: 'api_rate_limit',\n        name: 'API Rate Limit Exceeded',\n        pattern: /rate.*limit.*exceeded|too.*many.*requests|429/i,\n        severity: 'medium',\n        threshold: 20,\n        timeWindow: 5,\n        description: 'L칤mite de velocidad de API excedido',\n        isActive: true,\n      },\n      {\n        id: 'server_error',\n        name: 'Internal Server Error',\n        pattern: /internal.*server.*error|500.*error|unhandled.*exception/i,\n        severity: 'high',\n        threshold: 5,\n        timeWindow: 10,\n        description: 'Errores internos del servidor',\n        isActive: true,\n      },\n    ]\n\n    defaultPatterns.forEach(pattern => {\n      this.errorPatterns.set(pattern.id, pattern)\n    })\n  }\n\n  /**\n   * Inicia el monitoreo proactivo\n   */\n  start(): void {\n    // Solo ejecutar en el servidor\n    if (typeof window !== 'undefined') {\n      return\n    }\n\n    if (!this.config.enabled) {\n      logger.info(LogLevel.INFO, 'Proactive monitoring is disabled', {}, LogCategory.SYSTEM)\n      return\n    }\n\n    if (this.monitoringInterval) {\n      this.stop()\n    }\n\n    this.monitoringInterval = setInterval(() => {\n      this.performHealthCheck()\n    }, this.config.checkInterval * 1000)\n\n    logger.info(\n      LogLevel.INFO,\n      'Proactive monitoring started',\n      {\n        interval: this.config.checkInterval,\n        patterns: this.errorPatterns.size,\n      },\n      LogCategory.SYSTEM\n    )\n  }\n\n  /**\n   * Detiene el monitoreo proactivo\n   */\n  stop(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval)\n      this.monitoringInterval = null\n      logger.info(LogLevel.INFO, 'Proactive monitoring stopped', {}, LogCategory.SYSTEM)\n    }\n  }\n\n  /**\n   * Registra un error para an치lisis\n   */\n  async reportError(error: Error | string, context?: Record<string, any>): Promise<void> {\n    const errorMessage = error instanceof Error ? error.message : error\n    const errorStack = error instanceof Error ? error.stack : undefined\n\n    // Solo procesar en el servidor\n    if (typeof window === 'undefined') {\n      // Analizar patrones de error\n      for (const [patternId, pattern] of this.errorPatterns) {\n        if (!pattern.isActive) {\n          continue\n        }\n\n        const regex =\n          pattern.pattern instanceof RegExp ? pattern.pattern : new RegExp(pattern.pattern, 'i')\n        if (regex.test(errorMessage)) {\n          await this.handlePatternMatch(patternId, pattern, errorMessage, context)\n        }\n      }\n\n      // Registrar m칠tricas si est치 disponible\n      if (this.metricsCollector) {\n        await this.metricsCollector.recordMetric('errors_total', 1, undefined, undefined, {\n          type: 'application_error',\n          ...context,\n        })\n      }\n    }\n\n    // Log del error\n    logger.error(\n      LogLevel.ERROR,\n      'Error reported to monitoring',\n      {\n        error: errorMessage,\n        stack: errorStack,\n        context,\n      },\n      LogCategory.SYSTEM\n    )\n  }\n\n  private async handlePatternMatch(\n    patternId: string,\n    pattern: ErrorPattern,\n    errorMessage: string,\n    context?: Record<string, any>\n  ): Promise<void> {\n    const now = new Date()\n    const key = `${patternId}_${Math.floor(now.getTime() / (pattern.timeWindow * 60 * 1000))}`\n\n    const existing = this.errorCounts.get(key)\n    if (existing) {\n      existing.count++\n      existing.lastSeen = now\n    } else {\n      this.errorCounts.set(key, {\n        count: 1,\n        firstSeen: now,\n        lastSeen: now,\n      })\n    }\n\n    const errorCount = this.errorCounts.get(key)!\n\n    // Verificar si se alcanz칩 el umbral (solo en servidor)\n    if (errorCount.count >= pattern.threshold && this.alertSystem) {\n      await this.triggerAlert(pattern, errorCount, errorMessage, context)\n\n      // Limpiar contador para evitar spam de alertas\n      this.errorCounts.delete(key)\n    }\n  }\n\n  private async triggerAlert(\n    pattern: ErrorPattern,\n    errorCount: { count: number; firstSeen: Date; lastSeen: Date },\n    errorMessage: string,\n    context?: Record<string, any>\n  ): Promise<void> {\n    const alert = {\n      id: `pattern_${pattern.id}_${Date.now()}`,\n      title: `Error Pattern Detected: ${pattern.name}`,\n      message: `Pattern \"${pattern.name}\" detected ${errorCount.count} times in ${pattern.timeWindow} minutes`,\n      severity: pattern.severity,\n      details: {\n        pattern: pattern.name,\n        description: pattern.description,\n        count: errorCount.count,\n        threshold: pattern.threshold,\n        timeWindow: pattern.timeWindow,\n        firstSeen: errorCount.firstSeen.toISOString(),\n        lastSeen: errorCount.lastSeen.toISOString(),\n        lastError: errorMessage,\n        context,\n      },\n    }\n\n    // Enviar notificaciones\n    if (this.config.notificationChannels.includes('email')) {\n      await this.sendEmailAlert(alert)\n    }\n\n    if (this.config.notificationChannels.includes('slack')) {\n      await this.sendSlackAlert(alert)\n    }\n\n    logger.warn(LogLevel.WARN, 'Error pattern alert triggered', alert, LogCategory.SYSTEM)\n  }\n\n  private async sendEmailAlert(alert: any): Promise<void> {\n    try {\n      await emailService.sendNotification({\n        to: ['admin@example.com'], // Configurar emails de admin\n        subject: `游뚿 ${alert.title}`,\n        template: 'error-pattern-alert',\n        data: alert,\n        priority: alert.severity === 'critical' ? 'high' : 'normal',\n      })\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to send email alert', { error }, LogCategory.SYSTEM)\n    }\n  }\n\n  private async sendSlackAlert(alert: any): Promise<void> {\n    try {\n      await slackService.sendErrorAlert({\n        error: alert.message,\n        context: alert.title,\n        timestamp: new Date(),\n        severity: alert.severity,\n      })\n    } catch (error) {\n      logger.error(LogLevel.ERROR, 'Failed to send Slack alert', { error }, LogCategory.SYSTEM)\n    }\n  }\n\n  /**\n   * Realiza verificaci칩n de salud del sistema\n   */\n  private async performHealthCheck(): Promise<void> {\n    try {\n      const health = await this.getSystemHealth()\n\n      // Verificar umbrales cr칤ticos\n      if (health.status === 'critical' || health.status === 'down') {\n        await this.handleCriticalHealth(health)\n      } else if (health.status === 'warning') {\n        await this.handleWarningHealth(health)\n      }\n\n      // Actualizar m칠tricas si est치 disponible\n      if (this.metricsCollector) {\n        await this.metricsCollector.recordMetric(\n          'system_health_score',\n          this.calculateHealthScore(health)\n        )\n        await this.metricsCollector.recordMetric('system_response_time', health.responseTime)\n        await this.metricsCollector.recordMetric('system_error_rate', health.errorRate)\n        await this.metricsCollector.recordMetric('system_memory_usage', health.memoryUsage)\n        await this.metricsCollector.recordMetric('system_cpu_usage', health.cpuUsage)\n      }\n    } catch (error) {\n      logger.error(\n        LogLevel.ERROR,\n        'Health check failed',\n        {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        },\n        LogCategory.SYSTEM\n      )\n    }\n  }\n\n  private async getSystemHealth(): Promise<SystemHealth> {\n    const issues: HealthIssue[] = []\n    let status: SystemHealth['status'] = 'healthy'\n\n    // Simular verificaciones de salud (en producci칩n, estas ser칤an verificaciones reales)\n    const responseTime = Math.random() * 1000 + 200 // 200-1200ms\n    const errorRate = Math.random() * 5 // 0-5%\n    const memoryUsage = Math.random() * 40 + 40 // 40-80%\n    const cpuUsage = Math.random() * 30 + 20 // 20-50%\n    const activeConnections = Math.floor(Math.random() * 100) + 50\n\n    // Verificar umbrales\n    if (responseTime > this.config.responseTimeThreshold) {\n      issues.push({\n        id: 'high_response_time',\n        type: 'performance',\n        severity: 'medium',\n        message: 'High response time detected',\n        details: { responseTime, threshold: this.config.responseTimeThreshold },\n        firstDetected: new Date(),\n        lastSeen: new Date(),\n        count: 1,\n      })\n      status = 'warning'\n    }\n\n    if (errorRate > this.config.errorThreshold) {\n      issues.push({\n        id: 'high_error_rate',\n        type: 'error',\n        severity: 'high',\n        message: 'High error rate detected',\n        details: { errorRate, threshold: this.config.errorThreshold },\n        firstDetected: new Date(),\n        lastSeen: new Date(),\n        count: 1,\n      })\n      status = 'critical'\n    }\n\n    if (memoryUsage > this.config.memoryThreshold) {\n      issues.push({\n        id: 'high_memory_usage',\n        type: 'resource',\n        severity: 'medium',\n        message: 'High memory usage detected',\n        details: { memoryUsage, threshold: this.config.memoryThreshold },\n        firstDetected: new Date(),\n        lastSeen: new Date(),\n        count: 1,\n      })\n      if (status === 'healthy') {\n        status = 'warning'\n      }\n    }\n\n    return {\n      status,\n      uptime:\n        typeof process !== 'undefined' && process.uptime ? process.uptime() : Date.now() / 1000,\n      responseTime,\n      errorRate,\n      memoryUsage,\n      cpuUsage,\n      activeConnections,\n      lastCheck: new Date(),\n      issues,\n    }\n  }\n\n  private calculateHealthScore(health: SystemHealth): number {\n    let score = 100\n\n    health.issues.forEach(issue => {\n      switch (issue.severity) {\n        case 'critical':\n          score -= 30\n          break\n        case 'high':\n          score -= 20\n          break\n        case 'medium':\n          score -= 10\n          break\n        case 'low':\n          score -= 5\n          break\n      }\n    })\n\n    return Math.max(0, score)\n  }\n\n  private async handleCriticalHealth(health: SystemHealth): Promise<void> {\n    logger.error(LogLevel.ERROR, 'Critical system health detected', { health }, LogCategory.SYSTEM)\n\n    // Enviar alertas cr칤ticas\n    await this.sendSlackAlert({\n      title: '游뚿 CRITICAL: System Health Alert',\n      message: 'System health is critical - immediate attention required',\n      severity: 'critical',\n      details: health,\n    })\n\n    // Auto-recovery si est치 habilitado\n    if (this.config.enableAutoRecovery) {\n      await this.attemptAutoRecovery(health)\n    }\n  }\n\n  private async handleWarningHealth(health: SystemHealth): Promise<void> {\n    logger.warn(LogLevel.WARN, 'System health warning', { health }, LogCategory.SYSTEM)\n  }\n\n  private async attemptAutoRecovery(health: SystemHealth): Promise<void> {\n    logger.info(LogLevel.INFO, 'Attempting auto-recovery', { health }, LogCategory.SYSTEM)\n\n    // Implementar l칩gica de auto-recuperaci칩n\n    // Por ejemplo: reiniciar servicios, limpiar cache, etc.\n  }\n\n  /**\n   * Configuraci칩n del servicio\n   */\n  updateConfig(newConfig: Partial<MonitoringConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n\n    if (this.config.enabled && !this.monitoringInterval) {\n      this.start()\n    } else if (!this.config.enabled && this.monitoringInterval) {\n      this.stop()\n    }\n  }\n\n  getConfig(): MonitoringConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * Gesti칩n de patrones de error\n   */\n  addErrorPattern(pattern: ErrorPattern): void {\n    this.errorPatterns.set(pattern.id, pattern)\n    logger.info(LogLevel.INFO, 'Error pattern added', { patternId: pattern.id }, LogCategory.SYSTEM)\n  }\n\n  removeErrorPattern(patternId: string): void {\n    this.errorPatterns.delete(patternId)\n    logger.info(LogLevel.INFO, 'Error pattern removed', { patternId }, LogCategory.SYSTEM)\n  }\n\n  getErrorPatterns(): ErrorPattern[] {\n    return Array.from(this.errorPatterns.values())\n  }\n\n  /**\n   * Obtener estad칤sticas de monitoreo\n   */\n  async getMonitoringStats(): Promise<{\n    totalErrors: number\n    activePatterns: number\n    recentAlerts: number\n    systemHealth: SystemHealth\n  }> {\n    const totalErrors = Array.from(this.errorCounts.values()).reduce(\n      (sum, count) => sum + count.count,\n      0\n    )\n\n    const activePatterns = Array.from(this.errorPatterns.values()).filter(p => p.isActive).length\n\n    const recentAlerts = this.alertSystem\n      ? Array.from(this.errorCounts.values()).filter(\n          count => Date.now() - count.lastSeen.getTime() < 24 * 60 * 60 * 1000\n        ).length\n      : 0\n\n    const systemHealth = await this.getSystemHealth()\n\n    return {\n      totalErrors,\n      activePatterns,\n      recentAlerts,\n      systemHealth,\n    }\n  }\n}\n\n// Instancia singleton\nexport const proactiveMonitoring = ProactiveMonitoringService.getInstance()\n\n// Funciones de conveniencia\nexport const reportError = (error: Error | string, context?: Record<string, any>) =>\n  proactiveMonitoring.reportError(error, context)\n\nexport const startMonitoring = () => proactiveMonitoring.start()\nexport const stopMonitoring = () => proactiveMonitoring.stop()\n"],"names":["ProactiveMonitoringService","proactiveMonitoring","reportError","startMonitoring","stopMonitoring","getInstance","instance","errorPatterns","Map","errorCounts","healthChecks","monitoringInterval","window","alertSystem","EnterpriseAlertSystem","metricsCollector","EnterpriseMetricsCollector","config","enabled","checkInterval","errorThreshold","responseTimeThreshold","memoryThreshold","cpuThreshold","enableAutoRecovery","notificationChannels","initializeDefaultPatterns","defaultPatterns","id","name","pattern","severity","threshold","timeWindow","description","isActive","forEach","set","start","logger","info","LogLevel","INFO","LogCategory","SYSTEM","stop","setInterval","performHealthCheck","interval","patterns","size","clearInterval","error","context","errorMessage","Error","message","errorStack","stack","undefined","patternId","regex","RegExp","test","handlePatternMatch","recordMetric","type","ERROR","now","Date","key","Math","floor","getTime","existing","get","count","lastSeen","firstSeen","errorCount","triggerAlert","delete","alert","title","details","toISOString","lastError","includes","sendEmailAlert","sendSlackAlert","warn","WARN","emailService","sendNotification","to","subject","template","data","priority","slackService","sendErrorAlert","timestamp","health","getSystemHealth","status","handleCriticalHealth","handleWarningHealth","calculateHealthScore","responseTime","errorRate","memoryUsage","cpuUsage","issues","random","activeConnections","push","firstDetected","uptime","process","lastCheck","score","issue","max","attemptAutoRecovery","updateConfig","newConfig","getConfig","addErrorPattern","removeErrorPattern","getErrorPatterns","Array","from","values","getMonitoringStats","totalErrors","reduce","sum","activePatterns","filter","p","length","recentAlerts","systemHealth"],"mappings":"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"}