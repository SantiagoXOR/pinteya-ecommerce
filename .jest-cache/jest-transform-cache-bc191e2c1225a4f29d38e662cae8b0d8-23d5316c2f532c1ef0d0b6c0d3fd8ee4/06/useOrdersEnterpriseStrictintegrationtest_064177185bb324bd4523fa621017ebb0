bfb721f7d39cbdf406543d170f958385
// ===================================
// PINTEYA E-COMMERCE - USEORDERSENTERPRISE INTEGRATION TESTS
// Tests de integración para el hook principal de órdenes
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useOrdersEnterpriseStrict = require("../../../hooks/admin/useOrdersEnterpriseStrict");
// ===================================
// MOCKS GLOBALES
// ===================================
// Mock de fetch
const mockFetch = _globals.jest.fn();
global.fetch = mockFetch;
// Mock de localStorage
const mockLocalStorage = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn(),
    length: 0,
    key: _globals.jest.fn()
};
Object.defineProperty(window, 'localStorage', {
    value: mockLocalStorage
});
// Mock de AbortController
const mockAbort = _globals.jest.fn();
global.AbortController = _globals.jest.fn(()=>({
        abort: mockAbort,
        signal: {
            aborted: false
        }
    }));
// ===================================
// DATOS DE PRUEBA
// ===================================
const mockOrdersResponse = {
    orders: [
        {
            id: '1',
            order_number: 'ORD-001',
            status: 'pending',
            total: 100
        },
        {
            id: '2',
            order_number: 'ORD-002',
            status: 'confirmed',
            total: 200
        }
    ],
    pagination: {
        page: 1,
        totalPages: 5,
        hasNextPage: true
    },
    analytics: {
        totalOrders: 2,
        totalRevenue: 300
    }
};
const initialFilters = {
    page: 1,
    limit: 20,
    sort_by: 'created_at',
    sort_order: 'desc'
};
const options = {
    autoFetch: true,
    maxRetries: 3,
    timeout: 10000,
    enableCache: true
};
// ===================================
// SETUP Y CLEANUP
// ===================================
(0, _globals.beforeEach)(()=>{
    _globals.jest.clearAllMocks();
    mockLocalStorage.getItem.mockReturnValue(null);
    // Mock de respuesta exitosa por defecto
    mockFetch.mockResolvedValue({
        ok: true,
        status: 200,
        json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse),
        headers: new Headers(),
        statusText: 'OK'
    });
});
(0, _globals.afterEach)(()=>{
    _globals.jest.clearAllTimers();
});
// ===================================
// TESTS DE INTEGRACIÓN
// ===================================
(0, _globals.describe)('useOrdersEnterpriseStrict Integration', ()=>{
    (0, _globals.it)('debe inicializarse correctamente con todos los hooks', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Verificar estado inicial
        (0, _globals.expect)(result.current.orders).toEqual([]);
        (0, _globals.expect)(result.current.pagination).toBeNull();
        (0, _globals.expect)(result.current.analytics).toBeNull();
        (0, _globals.expect)(result.current.filters).toEqual(initialFilters);
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.error).toBeNull();
        // Verificar funciones disponibles
        (0, _globals.expect)(result.current.fetchOrders).toBeDefined();
        (0, _globals.expect)(result.current.updateFilters).toBeDefined();
        (0, _globals.expect)(result.current.refreshOrders).toBeDefined();
        (0, _globals.expect)(result.current.clearError).toBeDefined();
        (0, _globals.expect)(result.current.retryLastRequest).toBeDefined();
    });
    (0, _globals.it)('debe realizar fetch automático al inicializar cuando autoFetch está habilitado', async ()=>{
        (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, {
                ...options,
                autoFetch: true
            }));
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/admin/orders?page=1&limit=20&sort_by=created_at&sort_order=desc', _globals.expect.any(Object));
        });
    });
    (0, _globals.it)('debe NO realizar fetch automático cuando autoFetch está deshabilitado', async ()=>{
        (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, {
                ...options,
                autoFetch: false
            }));
        // Esperar un poco para asegurar que no se haga fetch
        await new Promise((resolve)=>setTimeout(resolve, 100));
        (0, _globals.expect)(mockFetch).not.toHaveBeenCalled();
    });
    (0, _globals.it)('debe manejar el flujo completo de fetch exitoso', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.orders).toEqual(mockOrdersResponse.orders);
            (0, _globals.expect)(result.current.pagination).toEqual(mockOrdersResponse.pagination);
            (0, _globals.expect)(result.current.analytics).toEqual(mockOrdersResponse.analytics);
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            (0, _globals.expect)(result.current.error).toBeNull();
        });
    });
    (0, _globals.it)('debe manejar errores de fetch correctamente', async ()=>{
        const errorMessage = 'Network error';
        mockFetch.mockRejectedValue(new Error(errorMessage));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.error).toBeTruthy();
            (0, _globals.expect)(result.current.error?.message).toBe(errorMessage);
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            (0, _globals.expect)(result.current.orders).toEqual([]);
        });
    });
    (0, _globals.it)('debe usar cache cuando está disponible', async ()=>{
        // Configurar cache con datos válidos
        const cacheData = {
            data: mockOrdersResponse,
            timestamp: Date.now() - 30000,
            filters: initialFilters
        };
        mockLocalStorage.getItem.mockReturnValue(JSON.stringify(cacheData));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, {
                ...options,
                enableCache: true
            }));
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        // Debe usar datos del cache sin hacer fetch
        (0, _globals.expect)(result.current.orders).toEqual(mockOrdersResponse.orders);
        (0, _globals.expect)(mockFetch).not.toHaveBeenCalled();
    });
    (0, _globals.it)('debe actualizar filtros y refetch automáticamente', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        const newFilters = {
            page: 2,
            status: 'confirmed'
        };
        await (0, _react.act)(async ()=>{
            result.current.updateFilters(newFilters);
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.filters).toEqual({
                ...initialFilters,
                ...newFilters
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith(_globals.expect.stringContaining('page=2'), _globals.expect.any(Object));
        });
    });
    (0, _globals.it)('debe implementar retry logic en caso de fallo', async ()=>{
        // Fallar las primeras 2 llamadas, exitosa en la 3ra
        mockFetch.mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
            ok: true,
            status: 200,
            json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse)
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, {
                ...options,
                maxRetries: 3
            }));
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3);
            (0, _globals.expect)(result.current.orders).toEqual(mockOrdersResponse.orders);
            (0, _globals.expect)(result.current.error).toBeNull();
        });
    });
    (0, _globals.it)('debe manejar refresh correctamente', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Fetch inicial
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        // Limpiar mocks para el refresh
        _globals.jest.clearAllMocks();
        // Refresh
        await (0, _react.act)(async ()=>{
            result.current.refreshOrders();
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(1);
        });
    });
    (0, _globals.it)('debe limpiar errores correctamente', async ()=>{
        mockFetch.mockRejectedValue(new Error('Test error'));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Generar error
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        (0, _globals.expect)(result.current.error).toBeTruthy();
        // Limpiar error
        (0, _react.act)(()=>{
            result.current.clearError();
        });
        (0, _globals.expect)(result.current.error).toBeNull();
    });
    (0, _globals.it)('debe implementar retry de último request', async ()=>{
        mockFetch.mockRejectedValue(new Error('Network error'));
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Fetch que falla
        await (0, _react.act)(async ()=>{
            await result.current.fetchOrders();
        });
        (0, _globals.expect)(result.current.error).toBeTruthy();
        // Configurar fetch exitoso para retry
        mockFetch.mockResolvedValue({
            ok: true,
            status: 200,
            json: _globals.jest.fn().mockResolvedValue(mockOrdersResponse)
        });
        // Retry
        await (0, _react.act)(async ()=>{
            await result.current.retryLastRequest();
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.orders).toEqual(mockOrdersResponse.orders);
            (0, _globals.expect)(result.current.error).toBeNull();
        });
    });
    (0, _globals.it)('debe abortar requests al desmontar', ()=>{
        const { unmount } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Iniciar un request
        (0, _react.act)(()=>{
        // El fetch se inicia automáticamente con autoFetch
        });
        // Desmontar
        unmount();
        // Debe haber abortado el request
        (0, _globals.expect)(mockAbort).toHaveBeenCalled();
    });
    (0, _globals.it)('debe manejar múltiples actualizaciones de filtros sin race conditions', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Múltiples actualizaciones rápidas
        await (0, _react.act)(async ()=>{
            result.current.updateFilters({
                page: 2
            });
            result.current.updateFilters({
                page: 3
            });
            result.current.updateFilters({
                page: 4
            });
        });
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.filters.page).toBe(4);
        });
    });
    (0, _globals.it)('debe mantener consistencia de estado durante operaciones asíncronas', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useOrdersEnterpriseStrict.useOrdersEnterpriseStrict)(initialFilters, options));
        // Iniciar fetch
        (0, _react.act)(()=>{
            result.current.fetchOrders();
        });
        // Verificar estado de loading
        (0, _globals.expect)(result.current.isLoading).toBe(true);
        // Esperar a que termine
        await (0, _react.waitFor)(()=>{
            (0, _globals.expect)(result.current.isLoading).toBe(false);
        });
        // Verificar estado final
        (0, _globals.expect)(result.current.orders).toEqual(mockOrdersResponse.orders);
    });
});

//# sourceMappingURL=data:application/json;base64,