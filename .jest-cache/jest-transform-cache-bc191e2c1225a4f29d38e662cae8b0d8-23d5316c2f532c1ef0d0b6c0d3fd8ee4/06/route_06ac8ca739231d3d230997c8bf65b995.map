{"version":3,"names":["cov_2j9aud3tx0","actualCoverage","s","GET","f","runtime","request","_supabase","supabaseAdmin","b","console","error","_server","NextResponse","json","status","session","_config","auth","user","errorResponse","data","success","userEmail","email","from","select","eq","single","orders","id","recentOrders","order","ascending","limit","addresses","totalOrders","length","totalSpent","reduce","sum","parseFloat","total","pendingOrders","filter","completedOrders","shippedOrders","monthlySpending","calculateMonthlySpending","topProducts","in","map","o","productStats","calculateTopProducts","dashboardData","name","created_at","statistics","total_orders","total_spent","pending_orders","completed_orders","shipped_orders","total_addresses","recent_orders","monthly_spending","top_products","dashboard","monthlyData","now","Date","i","date","getFullYear","getMonth","key","String","padStart","forEach","orderDate","hasOwnProperty","Object","entries","month","amount","orderItems","productMap","item","productId","product_id","product","products","total_quantity","quantity","values","sort","a","slice"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\dashboard\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE DASHBOARD DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\n// ===================================\r\n// GET - Obtener estadísticas del dashboard\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/dashboard');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n\r\n    // Obtener usuario por email (NextAuth.js)\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('*')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener estadísticas de órdenes\r\n    const { data: orders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, total, status, created_at')\r\n      .eq('user_id', user.id);\r\n\r\n    // Obtener órdenes recientes con detalles\r\n    const { data: recentOrders } = await supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        total,\r\n        status,\r\n        created_at,\r\n        order_items (\r\n          quantity,\r\n          products (\r\n            name,\r\n            images\r\n          )\r\n        )\r\n      `)\r\n      .eq('user_id', user.id)\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    // Obtener direcciones\r\n    const { data: addresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('*')\r\n      .eq('user_id', user.id);\r\n\r\n    // Calcular estadísticas\r\n    const totalOrders = orders?.length || 0;\r\n    const totalSpent = orders?.reduce((sum, order) => sum + parseFloat(order.total), 0) || 0;\r\n    const pendingOrders = orders?.filter(order => order.status === 'pending').length || 0;\r\n    const completedOrders = orders?.filter(order => order.status === 'delivered').length || 0;\r\n    const shippedOrders = orders?.filter(order => order.status === 'shipped').length || 0;\r\n\r\n    // Calcular gasto por mes (últimos 6 meses)\r\n    const monthlySpending = calculateMonthlySpending(orders || []);\r\n\r\n    // Productos más comprados\r\n    const { data: topProducts } = await supabaseAdmin\r\n      .from('order_items')\r\n      .select(`\r\n        product_id,\r\n        quantity,\r\n        products (\r\n          name,\r\n          images,\r\n          price\r\n        )\r\n      `)\r\n      .in('order_id', orders?.map(o => o.id) || []);\r\n\r\n    const productStats = calculateTopProducts(topProducts || []);\r\n\r\n    const dashboardData = {\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        created_at: user.created_at,\r\n      },\r\n      statistics: {\r\n        total_orders: totalOrders,\r\n        total_spent: totalSpent,\r\n        pending_orders: pendingOrders,\r\n        completed_orders: completedOrders,\r\n        shipped_orders: shippedOrders,\r\n        total_addresses: addresses?.length || 0,\r\n      },\r\n      recent_orders: recentOrders || [],\r\n      monthly_spending: monthlySpending,\r\n      top_products: productStats,\r\n      addresses: addresses || [],\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      dashboard: dashboardData,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/dashboard:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// Función auxiliar para calcular gasto mensual\r\n// ===================================\r\nfunction calculateMonthlySpending(orders: any[]) {\r\n  const monthlyData: { [key: string]: number } = {};\r\n  const now = new Date();\r\n\r\n  // Inicializar últimos 6 meses\r\n  for (let i = 5; i >= 0; i--) {\r\n    const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\r\n    const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n    monthlyData[key] = 0;\r\n  }\r\n\r\n  // Sumar gastos por mes\r\n  orders.forEach(order => {\r\n    const orderDate = new Date(order.created_at);\r\n    const key = `${orderDate.getFullYear()}-${String(orderDate.getMonth() + 1).padStart(2, '0')}`;\r\n    if (monthlyData.hasOwnProperty(key)) {\r\n      monthlyData[key] += parseFloat(order.total);\r\n    }\r\n  });\r\n\r\n  return Object.entries(monthlyData).map(([month, amount]) => ({\r\n    month,\r\n    amount,\r\n  }));\r\n}\r\n\r\n// ===================================\r\n// Función auxiliar para calcular productos más comprados\r\n// ===================================\r\nfunction calculateTopProducts(orderItems: any[]) {\r\n  const productMap: { [key: string]: any } = {};\r\n\r\n  orderItems.forEach(item => {\r\n    const productId = item.product_id;\r\n    if (!productMap[productId]) {\r\n      productMap[productId] = {\r\n        product: item.products,\r\n        total_quantity: 0,\r\n        total_orders: 0,\r\n      };\r\n    }\r\n    productMap[productId].total_quantity += item.quantity;\r\n    productMap[productId].total_orders += 1;\r\n  });\r\n\r\n  return Object.values(productMap)\r\n    .sort((a: any, b: any) => b.total_quantity - a.total_quantity)\r\n    .slice(0, 5);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}