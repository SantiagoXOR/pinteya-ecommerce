{"version":3,"names":["cov_f0z4zmao0","actualCoverage","s","POST","f","runtime","request","logs","push","testOrderData","items","id","name","price","quantity","image","payer","surname","email","phone","identification","type","number","shipping","cost","address","street_name","street_number","zip_code","city_name","state_name","external_reference","Date","now","JSON","stringify","itemsTotal","reduce","sum","item","shippingCost","totalAmount","supabase","_supabase","getSupabaseClient","b","_server","NextResponse","json","error","status","data","order","orderError","from","insert","user_id","payment_status","total","shipping_address","payer_info","select","single","orderItems","map","order_id","product_id","parseInt","product_name","itemsError","length","mockPreference","init_point","total_amount","updatedOrder","updateError","update","payment_preference_id","updated_at","toISOString","eq","success","message","preference","totals","webhook_test_data","payment_id","webhook_url","test_payload","action","api_version","date_created","live_mode","stack"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\test-order-creation\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - TEST ORDER CREATION\r\n// Endpoint para crear órdenes de prueba y validar el flujo completo\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  \r\n  try {\r\n    logs.push('[TEST_ORDER] Iniciando creación de orden de prueba...');\r\n\r\n    // Datos de prueba para la orden\r\n    const testOrderData = {\r\n      items: [\r\n        {\r\n          id: \"43\",\r\n          name: \"Pincel Persianero N°20\",\r\n          price: 1150,\r\n          quantity: 2,\r\n          image: \"/products/pincel-persianero-20.jpg\"\r\n        },\r\n        {\r\n          id: \"87\", \r\n          name: \"Lija al Agua Grano 40\",\r\n          price: 850,\r\n          quantity: 1,\r\n          image: \"/products/lija-agua-40.jpg\"\r\n        }\r\n      ],\r\n      payer: {\r\n        name: \"Juan\",\r\n        surname: \"Pérez\",\r\n        email: \"juan.perez@test.com\",\r\n        phone: \"+54 11 1234-5678\",\r\n        identification: {\r\n          type: \"DNI\",\r\n          number: \"12345678\"\r\n        }\r\n      },\r\n      shipping: {\r\n        cost: 500,\r\n        address: {\r\n          street_name: \"Av. Corrientes\",\r\n          street_number: 1234,\r\n          zip_code: \"1043\",\r\n          city_name: \"Buenos Aires\",\r\n          state_name: \"CABA\"\r\n        }\r\n      },\r\n      external_reference: `test_order_${Date.now()}`\r\n    };\r\n\r\n    logs.push('[TEST_ORDER] Datos de orden preparados: ' + JSON.stringify(testOrderData, null, 2));\r\n\r\n    // Calcular totales\r\n    const itemsTotal = testOrderData.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    const shippingCost = testOrderData.shipping.cost;\r\n    const totalAmount = itemsTotal + shippingCost;\r\n\r\n    logs.push(`[TEST_ORDER] Totales calculados: items=${itemsTotal}, shipping=${shippingCost}, total=${totalAmount}`);\r\n\r\n    // Conectar a Supabase\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      logs.push('[TEST_ORDER] ERROR: Cliente de Supabase no disponible');\r\n      return NextResponse.json({ error: 'Supabase not available', logs }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[TEST_ORDER] Cliente de Supabase OK');\r\n\r\n    // Crear orden en base de datos\r\n    logs.push('[TEST_ORDER] Creando orden en base de datos...');\r\n    \r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .insert({\r\n        user_id: '00000000-0000-4000-8000-000000000000', // Usuario de prueba\r\n        status: 'pending',\r\n        payment_status: 'pending',\r\n        total: totalAmount,\r\n        shipping_address: JSON.stringify(testOrderData.shipping.address),\r\n        external_reference: testOrderData.external_reference,\r\n        payer_info: testOrderData.payer,\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (orderError) {\r\n      logs.push('[TEST_ORDER] ERROR creando orden: ' + JSON.stringify(orderError));\r\n      return NextResponse.json({ error: 'Order creation failed', logs, orderError }, { status: 500 });\r\n    }\r\n\r\n    logs.push('[TEST_ORDER] Orden creada exitosamente: ' + JSON.stringify(order));\r\n\r\n    // Crear items de la orden\r\n    logs.push('[TEST_ORDER] Creando items de la orden...');\r\n    \r\n    const orderItems = testOrderData.items.map(item => ({\r\n      order_id: order.id,\r\n      product_id: parseInt(item.id),\r\n      quantity: item.quantity,\r\n      price: item.price,\r\n      product_name: item.name,\r\n    }));\r\n\r\n    const { data: items, error: itemsError } = await supabase\r\n      .from('order_items')\r\n      .insert(orderItems)\r\n      .select();\r\n\r\n    if (itemsError) {\r\n      logs.push('[TEST_ORDER] ERROR creando items: ' + JSON.stringify(itemsError));\r\n      // No es crítico, continuamos\r\n    } else {\r\n      logs.push('[TEST_ORDER] Items creados exitosamente: ' + items?.length + ' items');\r\n    }\r\n\r\n    // Simular creación de preferencia de MercadoPago\r\n    const mockPreference = {\r\n      id: `test_preference_${Date.now()}`,\r\n      init_point: `https://sandbox.mercadopago.com.ar/checkout/v1/redirect?pref_id=test_preference_${Date.now()}`,\r\n      external_reference: testOrderData.external_reference,\r\n      items: testOrderData.items,\r\n      total_amount: totalAmount\r\n    };\r\n\r\n    logs.push('[TEST_ORDER] Preferencia simulada creada: ' + JSON.stringify(mockPreference));\r\n\r\n    // Actualizar orden con preference_id\r\n    const { data: updatedOrder, error: updateError } = await supabase\r\n      .from('orders')\r\n      .update({\r\n        payment_preference_id: mockPreference.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      logs.push('[TEST_ORDER] WARNING: Error actualizando preference_id: ' + JSON.stringify(updateError));\r\n    } else {\r\n      logs.push('[TEST_ORDER] Orden actualizada con preference_id');\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Orden de prueba creada exitosamente',\r\n      logs,\r\n      data: {\r\n        order: updatedOrder || order,\r\n        items: items || [],\r\n        preference: mockPreference,\r\n        totals: {\r\n          items: itemsTotal,\r\n          shipping: shippingCost,\r\n          total: totalAmount\r\n        },\r\n        webhook_test_data: {\r\n          payment_id: \"test_payment_\" + order.id,\r\n          external_reference: testOrderData.external_reference,\r\n          webhook_url: \"https://www.pinteya.com/api/payments/webhook\",\r\n          test_payload: {\r\n            action: \"payment.updated\",\r\n            api_version: \"v1\",\r\n            data: {\r\n              id: \"test_payment_\" + order.id\r\n            },\r\n            date_created: new Date().toISOString(),\r\n            id: \"test_payment_\" + order.id,\r\n            live_mode: false,\r\n            type: \"payment\",\r\n            user_id: 452711838\r\n          }\r\n        }\r\n      }\r\n    }, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    logs.push('[TEST_ORDER] EXCEPTION: ' + error.message);\r\n    logs.push('[TEST_ORDER] STACK: ' + error.stack);\r\n\r\n    return NextResponse.json({\r\n      error: 'Test order creation failed',\r\n      message: error.message,\r\n      logs,\r\n      stack: error.stack\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}