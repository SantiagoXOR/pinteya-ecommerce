b43b1d86e9089709eb9ba498ee9ea6bc
/**
 * Test simplificado para AuthSection con NextAuth
 * Enfocado en validar la funcionalidad core sin complejidades
 */ "use strict";
// Mock NextAuth
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn(),
        signIn: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _AuthSection = /*#__PURE__*/ _interop_require_default(require("../../AuthSection"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseSession = _react2.useSession;
const mockSignIn = _react2.signIn;
// Mock user data
const mockUser = {
    id: 'user_123',
    name: 'Juan Pérez',
    email: 'juan@example.com'
};
describe('AuthSection - Simplified Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Unauthenticated State', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('should render sign in button when unauthenticated', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('bg-white/20', 'hover:bg-white/30');
        });
        it('should render Google icon in button', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const svg = _react1.screen.getByRole('button').querySelector('svg');
            expect(svg).toBeInTheDocument();
            expect(svg).toHaveClass('w-5', 'h-5');
        });
        it('should call signIn when button is clicked', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            _react1.fireEvent.click(button);
            expect(mockSignIn).toHaveBeenCalledWith('google');
        });
        it('should have correct CSS classes for translucent button', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('relative', 'bg-white/20', 'hover:bg-white/30', 'backdrop-blur-sm', 'border-2', 'border-white/30', 'rounded-full');
        });
    });
    describe('Authenticated State', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: {
                    user: mockUser
                },
                status: 'authenticated'
            });
        });
        it('should render admin link when authenticated', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const adminLink = _react1.screen.getByRole('link');
            expect(adminLink).toBeInTheDocument();
            expect(adminLink).toHaveAttribute('href', '/admin');
        });
        it('should render user avatar when authenticated', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const avatar = _react1.screen.getByText('J') // First letter of Juan
            ;
            expect(avatar).toBeInTheDocument();
        });
        it('should have admin button with correct styling', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const adminLink = _react1.screen.getByRole('link');
            expect(adminLink).toHaveClass('bg-orange-600', 'hover:bg-orange-700', 'text-white');
        });
    });
    describe('Loading State', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
        });
        it('should render loading skeleton', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const skeleton = _react1.screen.getByText((content, element)=>{
                return element?.classList.contains('animate-pulse') || false;
            });
            expect(skeleton).toHaveClass('animate-pulse');
        });
    });
    describe('Variants', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('should render mobile variant correctly', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "mobile"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('hover:scale-110');
        });
        it('should render topbar variant with text', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "topbar"
            }));
            const button = _react1.screen.getByText('Iniciar Sesión');
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('text-gray-800');
        });
        it('should render default variant correctly', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                variant: "default"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('hover:scale-105');
        });
    });
    describe('Accessibility', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('should be keyboard accessible', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
            // Button should be focusable
            button.focus();
            expect(document.activeElement).toBe(button);
        });
        it('should have proper button role', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeInTheDocument();
        });
    });
    describe('Visual Consistency', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('should maintain consistent icon size across variants', ()=>{
            const variants = [
                'default',
                'mobile'
            ];
            variants.forEach((variant)=>{
                const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {
                    variant: variant
                }));
                const svg = _react1.screen.getByRole('button').querySelector('svg');
                expect(svg).toHaveClass('w-5', 'h-5');
                unmount();
            });
        });
        it('should have hover effects', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('hover:bg-white/30');
        });
        it('should have transform effects', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('transform', 'hover:scale-105');
        });
    });
    describe('Google Branding', ()=>{
        beforeEach(()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
        });
        it('should have Google colors in SVG paths', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthSection.default, {}));
            const svg = _react1.screen.getByRole('button').querySelector('svg');
            const paths = svg?.querySelectorAll('path');
            expect(paths).toHaveLength(4);
            // Check for Google brand colors
            const colors = Array.from(paths || []).map((path)=>path.getAttribute('fill'));
            expect(colors).toContain('#4285F4'); // Google Blue
            expect(colors).toContain('#34A853'); // Google Green
            expect(colors).toContain('#FBBC05'); // Google Yellow
            expect(colors).toContain('#EA4335'); // Google Red
        });
    });
});

//# sourceMappingURL=data:application/json;base64,