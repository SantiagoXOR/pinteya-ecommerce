{"version":3,"names":["CacheWarmingSystem","cov_2hzya20w9l","f","s","CacheWarmingUtils","WARMUP_CONFIGS","WarmupStrategy","cacheWarmingSystem","CRITICAL_SYSTEM","strategy","priority","batchSize","concurrency","timeout","retryPolicy","maxRetries","backoffMultiplier","initialDelay","POPULAR_PRODUCTS","schedule","enabled","interval","timezone","conditions","maxServerLoad","timeWindows","start","end","MAIN_CATEGORIES","FREQUENT_SEARCHES","minCacheHitRate","ACTIVE_USERS","constructor","tasks","Map","activeJobs","scheduledJobs","stats","totalTasks","activeTasks","completedTasks","failedTasks","totalDuration","avgDuration","cacheHitImprovement","lastRun","initializePredefinedTasks","getInstance","instance","b","registerTask","id","name","description","config","fetcher","fetchPopularProducts","bind","cacheKey","strategyName","estimatedDuration","successCount","errorCount","fetchMainCategories","fetchSystemConfig","fetchFrequentSearches","task","set","size","scheduleTask","executeTask","_logger","logger","info","LogCategory","CACHE","taskId","get","Error","has","warn","checkConditions","startTime","Date","now","jobPromise","executeTaskWithRetry","result","duration","error","delete","lastError","attempt","executeSingleTask","delay","Math","pow","Promise","resolve","setTimeout","timeoutPromise","_","reject","dataPromise","data","race","_advancedcachestrategymanager","advancedCacheStrategyManager","execute","dataSize","JSON","stringify","length","success","timestamp","message","existingJob","clearInterval","setInterval","catch","nextRun","serverLoad","getServerLoad","currentTime","getHours","toString","padStart","getMinutes","isInTimeWindow","some","window","hitRate","getCacheHitRate","random","metrics","getAllMetrics","totalRequests","Object","values","reduce","sum","m","totalHits","hits","executeStrategy","strategyTasks","Array","from","filter","results","allSettled","map","index","status","value","reason","getStats","getTasks","getTask","removeTask","scheduledJob","stopAll","forEach","job","clear","_supabase","supabase","select","eq","order","ascending","limit","siteName","currency","features","cart","wishlist","reviews","notifications","limits","maxCartItems","maxWishlistItems","maxImageSize","query","count","warmupPage","pagePath","push","key","startsWith","warmupPromises","warmupForUser","userId","warmupCritical"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\cache-warming-system.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE WARMING SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { multiLayerCacheManager } from './multi-layer-cache-manager';\r\nimport { advancedCacheStrategyManager } from './advanced-cache-strategy-manager';\r\nimport { supabase } from '../supabase';\r\n\r\n/**\r\n * Estrategias de precalentamiento\r\n */\r\nexport enum WarmupStrategy {\r\n  IMMEDIATE = 'immediate',        // Inmediato al iniciar\r\n  SCHEDULED = 'scheduled',        // Programado por horarios\r\n  LAZY = 'lazy',                 // Bajo demanda\r\n  PREDICTIVE = 'predictive',     // Basado en predicciones\r\n  POPULAR = 'popular',           // Basado en popularidad\r\n  CRITICAL = 'critical'          // Solo datos críticos\r\n}\r\n\r\n/**\r\n * Configuración de precalentamiento\r\n */\r\nexport interface WarmupConfig {\r\n  strategy: WarmupStrategy;\r\n  priority: 'low' | 'normal' | 'high' | 'critical';\r\n  schedule?: {\r\n    enabled: boolean;\r\n    cron?: string;\r\n    interval?: number;\r\n    timezone?: string;\r\n  };\r\n  conditions?: {\r\n    minCacheHitRate?: number;\r\n    maxServerLoad?: number;\r\n    timeWindows?: Array<{ start: string; end: string }>;\r\n  };\r\n  retryPolicy?: {\r\n    maxRetries: number;\r\n    backoffMultiplier: number;\r\n    initialDelay: number;\r\n  };\r\n  batchSize?: number;\r\n  concurrency?: number;\r\n  timeout?: number;\r\n}\r\n\r\n/**\r\n * Tarea de precalentamiento\r\n */\r\nexport interface WarmupTask {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  config: WarmupConfig;\r\n  fetcher: () => Promise<any>;\r\n  cacheKey: string;\r\n  strategyName: string;\r\n  dependencies?: string[];\r\n  estimatedDuration?: number;\r\n  lastRun?: number;\r\n  nextRun?: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  avgDuration: number;\r\n}\r\n\r\n/**\r\n * Resultado de precalentamiento\r\n */\r\nexport interface WarmupResult {\r\n  taskId: string;\r\n  success: boolean;\r\n  duration: number;\r\n  cacheKey: string;\r\n  dataSize: number;\r\n  error?: string;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * Estadísticas de precalentamiento\r\n */\r\nexport interface WarmupStats {\r\n  totalTasks: number;\r\n  activeTasks: number;\r\n  completedTasks: number;\r\n  failedTasks: number;\r\n  totalDuration: number;\r\n  avgDuration: number;\r\n  cacheHitImprovement: number;\r\n  lastRun: number;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas de precalentamiento\r\n */\r\nexport const WARMUP_CONFIGS: Record<string, WarmupConfig> = {\r\n  // Datos críticos del sistema\r\n  CRITICAL_SYSTEM: {\r\n    strategy: WarmupStrategy.IMMEDIATE,\r\n    priority: 'critical',\r\n    batchSize: 5,\r\n    concurrency: 2,\r\n    timeout: 30000,\r\n    retryPolicy: {\r\n      maxRetries: 3,\r\n      backoffMultiplier: 2,\r\n      initialDelay: 1000\r\n    }\r\n  },\r\n\r\n  // Productos populares\r\n  POPULAR_PRODUCTS: {\r\n    strategy: WarmupStrategy.SCHEDULED,\r\n    priority: 'high',\r\n    schedule: {\r\n      enabled: true,\r\n      interval: 3600000, // 1 hora\r\n      timezone: 'America/Argentina/Buenos_Aires'\r\n    },\r\n    batchSize: 20,\r\n    concurrency: 5,\r\n    timeout: 15000,\r\n    conditions: {\r\n      maxServerLoad: 0.7,\r\n      timeWindows: [\r\n        { start: '02:00', end: '06:00' }, // Madrugada\r\n        { start: '14:00', end: '16:00' }  // Siesta\r\n      ]\r\n    }\r\n  },\r\n\r\n  // Categorías principales\r\n  MAIN_CATEGORIES: {\r\n    strategy: WarmupStrategy.SCHEDULED,\r\n    priority: 'normal',\r\n    schedule: {\r\n      enabled: true,\r\n      interval: 7200000, // 2 horas\r\n      timezone: 'America/Argentina/Buenos_Aires'\r\n    },\r\n    batchSize: 10,\r\n    concurrency: 3,\r\n    timeout: 10000\r\n  },\r\n\r\n  // Búsquedas frecuentes\r\n  FREQUENT_SEARCHES: {\r\n    strategy: WarmupStrategy.PREDICTIVE,\r\n    priority: 'normal',\r\n    batchSize: 15,\r\n    concurrency: 4,\r\n    timeout: 12000,\r\n    conditions: {\r\n      minCacheHitRate: 0.6\r\n    }\r\n  },\r\n\r\n  // Datos de usuario activos\r\n  ACTIVE_USERS: {\r\n    strategy: WarmupStrategy.LAZY,\r\n    priority: 'low',\r\n    batchSize: 10,\r\n    concurrency: 2,\r\n    timeout: 8000\r\n  }\r\n};\r\n\r\n/**\r\n * Sistema de precalentamiento de cache\r\n */\r\nexport class CacheWarmingSystem {\r\n  private static instance: CacheWarmingSystem;\r\n  private tasks = new Map<string, WarmupTask>();\r\n  private activeJobs = new Map<string, Promise<WarmupResult>>();\r\n  private scheduledJobs = new Map<string, NodeJS.Timeout>();\r\n  private stats: WarmupStats = {\r\n    totalTasks: 0,\r\n    activeTasks: 0,\r\n    completedTasks: 0,\r\n    failedTasks: 0,\r\n    totalDuration: 0,\r\n    avgDuration: 0,\r\n    cacheHitImprovement: 0,\r\n    lastRun: 0\r\n  };\r\n\r\n  private constructor() {\r\n    this.initializePredefinedTasks();\r\n  }\r\n\r\n  static getInstance(): CacheWarmingSystem {\r\n    if (!CacheWarmingSystem.instance) {\r\n      CacheWarmingSystem.instance = new CacheWarmingSystem();\r\n    }\r\n    return CacheWarmingSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa tareas predefinidas\r\n   */\r\n  private initializePredefinedTasks(): void {\r\n    // Tarea para productos populares\r\n    this.registerTask({\r\n      id: 'popular-products',\r\n      name: 'Productos Populares',\r\n      description: 'Precalienta cache de productos más vendidos',\r\n      config: WARMUP_CONFIGS.POPULAR_PRODUCTS,\r\n      fetcher: this.fetchPopularProducts.bind(this),\r\n      cacheKey: 'products:popular',\r\n      strategyName: 'PRODUCT_DATA',\r\n      estimatedDuration: 5000,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      avgDuration: 0\r\n    });\r\n\r\n    // Tarea para categorías principales\r\n    this.registerTask({\r\n      id: 'main-categories',\r\n      name: 'Categorías Principales',\r\n      description: 'Precalienta cache de categorías principales',\r\n      config: WARMUP_CONFIGS.MAIN_CATEGORIES,\r\n      fetcher: this.fetchMainCategories.bind(this),\r\n      cacheKey: 'categories:main',\r\n      strategyName: 'PRODUCT_DATA',\r\n      estimatedDuration: 3000,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      avgDuration: 0\r\n    });\r\n\r\n    // Tarea para configuración del sistema\r\n    this.registerTask({\r\n      id: 'system-config',\r\n      name: 'Configuración del Sistema',\r\n      description: 'Precalienta configuraciones críticas del sistema',\r\n      config: WARMUP_CONFIGS.CRITICAL_SYSTEM,\r\n      fetcher: this.fetchSystemConfig.bind(this),\r\n      cacheKey: 'system:config',\r\n      strategyName: 'CRITICAL_SYSTEM_DATA',\r\n      estimatedDuration: 2000,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      avgDuration: 0\r\n    });\r\n\r\n    // Tarea para búsquedas frecuentes\r\n    this.registerTask({\r\n      id: 'frequent-searches',\r\n      name: 'Búsquedas Frecuentes',\r\n      description: 'Precalienta resultados de búsquedas más frecuentes',\r\n      config: WARMUP_CONFIGS.FREQUENT_SEARCHES,\r\n      fetcher: this.fetchFrequentSearches.bind(this),\r\n      cacheKey: 'search:frequent',\r\n      strategyName: 'SEARCH_RESULTS',\r\n      estimatedDuration: 4000,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      avgDuration: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra una nueva tarea de precalentamiento\r\n   */\r\n  registerTask(task: WarmupTask): void {\r\n    this.tasks.set(task.id, task);\r\n    this.stats.totalTasks = this.tasks.size;\r\n    \r\n    // Programar tarea si es necesario\r\n    if (task.config.schedule?.enabled) {\r\n      this.scheduleTask(task);\r\n    }\r\n    \r\n    // Ejecutar inmediatamente si es estrategia immediate\r\n    if (task.config.strategy === WarmupStrategy.IMMEDIATE) {\r\n      this.executeTask(task.id);\r\n    }\r\n    \r\n    logger.info(LogCategory.CACHE, `Tarea de precalentamiento registrada: ${task.name}`);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una tarea de precalentamiento\r\n   */\r\n  async executeTask(taskId: string): Promise<WarmupResult> {\r\n    const task = this.tasks.get(taskId);\r\n    if (!task) {\r\n      throw new Error(`Tarea no encontrada: ${taskId}`);\r\n    }\r\n\r\n    // Verificar si ya está ejecutándose\r\n    if (this.activeJobs.has(taskId)) {\r\n      logger.warn(LogCategory.CACHE, `Tarea ya en ejecución: ${taskId}`);\r\n      return this.activeJobs.get(taskId)!;\r\n    }\r\n\r\n    // Verificar condiciones\r\n    if (!await this.checkConditions(task.config)) {\r\n      throw new Error(`Condiciones no cumplidas para tarea: ${taskId}`);\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    this.stats.activeTasks++;\r\n\r\n    const jobPromise = this.executeTaskWithRetry(task);\r\n    this.activeJobs.set(taskId, jobPromise);\r\n\r\n    try {\r\n      const result = await jobPromise;\r\n      \r\n      // Actualizar estadísticas de la tarea\r\n      task.successCount++;\r\n      task.lastRun = Date.now();\r\n      task.avgDuration = ((task.avgDuration * (task.successCount - 1)) + result.duration) / task.successCount;\r\n      \r\n      // Actualizar estadísticas globales\r\n      this.stats.completedTasks++;\r\n      this.stats.totalDuration += result.duration;\r\n      this.stats.avgDuration = this.stats.totalDuration / this.stats.completedTasks;\r\n      this.stats.lastRun = Date.now();\r\n      \r\n      logger.info(LogCategory.CACHE, `Tarea completada: ${task.name} (${result.duration}ms)`);\r\n      return result;\r\n      \r\n    } catch (error) {\r\n      // Actualizar estadísticas de error\r\n      task.errorCount++;\r\n      this.stats.failedTasks++;\r\n      \r\n      logger.error(LogCategory.CACHE, `Error en tarea: ${task.name}`, error as Error);\r\n      throw error;\r\n      \r\n    } finally {\r\n      this.activeJobs.delete(taskId);\r\n      this.stats.activeTasks--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta tarea con reintentos\r\n   */\r\n  private async executeTaskWithRetry(task: WarmupTask): Promise<WarmupResult> {\r\n    const { retryPolicy } = task.config;\r\n    let lastError: Error | null = null;\r\n    \r\n    const maxRetries = retryPolicy?.maxRetries || 1;\r\n    const backoffMultiplier = retryPolicy?.backoffMultiplier || 2;\r\n    const initialDelay = retryPolicy?.initialDelay || 1000;\r\n\r\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\r\n      try {\r\n        return await this.executeSingleTask(task);\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt < maxRetries - 1) {\r\n          const delay = initialDelay * Math.pow(backoffMultiplier, attempt);\r\n          logger.warn(LogCategory.CACHE, `Reintentando tarea ${task.name} en ${delay}ms (intento ${attempt + 1}/${maxRetries})`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una sola tarea\r\n   */\r\n  private async executeSingleTask(task: WarmupTask): Promise<WarmupResult> {\r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Ejecutar fetcher con timeout\r\n      const timeoutPromise = new Promise((_, reject) => {\r\n        setTimeout(() => reject(new Error('Timeout')), task.config.timeout || 30000);\r\n      });\r\n      \r\n      const dataPromise = task.fetcher();\r\n      const data = await Promise.race([dataPromise, timeoutPromise]);\r\n      \r\n      // Guardar en cache usando la estrategia especificada\r\n      await advancedCacheStrategyManager.execute(\r\n        task.cacheKey,\r\n        () => Promise.resolve(data),\r\n        task.strategyName\r\n      );\r\n      \r\n      const duration = Date.now() - startTime;\r\n      const dataSize = JSON.stringify(data).length;\r\n      \r\n      return {\r\n        taskId: task.id,\r\n        success: true,\r\n        duration,\r\n        cacheKey: task.cacheKey,\r\n        dataSize,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      \r\n      return {\r\n        taskId: task.id,\r\n        success: false,\r\n        duration,\r\n        cacheKey: task.cacheKey,\r\n        dataSize: 0,\r\n        error: (error as Error).message,\r\n        timestamp: Date.now()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa una tarea\r\n   */\r\n  private scheduleTask(task: WarmupTask): void {\r\n    const { schedule } = task.config;\r\n    if (!schedule?.enabled) {return;}\r\n\r\n    // Limpiar programación anterior si existe\r\n    const existingJob = this.scheduledJobs.get(task.id);\r\n    if (existingJob) {\r\n      clearInterval(existingJob);\r\n    }\r\n\r\n    // Programar nueva ejecución\r\n    if (schedule.interval) {\r\n      const interval = setInterval(() => {\r\n        this.executeTask(task.id).catch(error => {\r\n          logger.error(LogCategory.CACHE, `Error en tarea programada: ${task.name}`, error);\r\n        });\r\n      }, schedule.interval);\r\n      \r\n      this.scheduledJobs.set(task.id, interval);\r\n      \r\n      // Calcular próxima ejecución\r\n      task.nextRun = Date.now() + schedule.interval;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica condiciones para ejecutar tarea\r\n   */\r\n  private async checkConditions(config: WarmupConfig): Promise<boolean> {\r\n    const { conditions } = config;\r\n    if (!conditions) {return true;}\r\n\r\n    // Verificar carga del servidor\r\n    if (conditions.maxServerLoad) {\r\n      const serverLoad = await this.getServerLoad();\r\n      if (serverLoad > conditions.maxServerLoad) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Verificar ventanas de tiempo\r\n    if (conditions.timeWindows) {\r\n      const now = new Date();\r\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n      \r\n      const isInTimeWindow = conditions.timeWindows.some(window => {\r\n        return currentTime >= window.start && currentTime <= window.end;\r\n      });\r\n      \r\n      if (!isInTimeWindow) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Verificar hit rate mínimo\r\n    if (conditions.minCacheHitRate) {\r\n      const hitRate = await this.getCacheHitRate();\r\n      if (hitRate < conditions.minCacheHitRate) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Obtiene carga del servidor (placeholder)\r\n   */\r\n  private async getServerLoad(): Promise<number> {\r\n    // Implementar lógica real de monitoreo de carga\r\n    return Math.random() * 0.8; // Placeholder\r\n  }\r\n\r\n  /**\r\n   * Obtiene hit rate del cache\r\n   */\r\n  private async getCacheHitRate(): Promise<number> {\r\n    const metrics = advancedCacheStrategyManager.getAllMetrics();\r\n    const totalRequests = Object.values(metrics).reduce((sum, m) => sum + m.totalRequests, 0);\r\n    const totalHits = Object.values(metrics).reduce((sum, m) => sum + m.hits, 0);\r\n    \r\n    return totalRequests > 0 ? totalHits / totalRequests : 0;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todas las tareas de una estrategia\r\n   */\r\n  async executeStrategy(strategy: WarmupStrategy): Promise<WarmupResult[]> {\r\n    const strategyTasks = Array.from(this.tasks.values())\r\n      .filter(task => task.config.strategy === strategy);\r\n\r\n    const results = await Promise.allSettled(\r\n      strategyTasks.map(task => this.executeTask(task.id))\r\n    );\r\n\r\n    return results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        return {\r\n          taskId: strategyTasks[index].id,\r\n          success: false,\r\n          duration: 0,\r\n          cacheKey: strategyTasks[index].cacheKey,\r\n          dataSize: 0,\r\n          error: result.reason.message,\r\n          timestamp: Date.now()\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas del sistema\r\n   */\r\n  getStats(): WarmupStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las tareas\r\n   */\r\n  getTasks(): WarmupTask[] {\r\n    return Array.from(this.tasks.values());\r\n  }\r\n\r\n  /**\r\n   * Obtiene una tarea específica\r\n   */\r\n  getTask(taskId: string): WarmupTask | undefined {\r\n    return this.tasks.get(taskId);\r\n  }\r\n\r\n  /**\r\n   * Elimina una tarea\r\n   */\r\n  removeTask(taskId: string): boolean {\r\n    const task = this.tasks.get(taskId);\r\n    if (!task) {return false;}\r\n\r\n    // Limpiar programación\r\n    const scheduledJob = this.scheduledJobs.get(taskId);\r\n    if (scheduledJob) {\r\n      clearInterval(scheduledJob);\r\n      this.scheduledJobs.delete(taskId);\r\n    }\r\n\r\n    // Eliminar tarea\r\n    this.tasks.delete(taskId);\r\n    this.stats.totalTasks = this.tasks.size;\r\n    \r\n    logger.info(LogCategory.CACHE, `Tarea eliminada: ${task.name}`);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Detiene todas las tareas\r\n   */\r\n  stopAll(): void {\r\n    this.scheduledJobs.forEach((job) => {\r\n      clearInterval(job);\r\n    });\r\n    this.scheduledJobs.clear();\r\n    \r\n    logger.info(LogCategory.CACHE, 'Todas las tareas de precalentamiento detenidas');\r\n  }\r\n\r\n  // ===================================\r\n  // FETCHERS PREDEFINIDOS\r\n  // ===================================\r\n\r\n  /**\r\n   * Obtiene productos populares\r\n   */\r\n  private async fetchPopularProducts(): Promise<any> {\r\n    const { data, error } = await supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        price,\r\n        image_url,\r\n        category:categories(name),\r\n        inventory:inventory(stock)\r\n      `)\r\n      .eq('featured', true)\r\n      .order('sales_count', { ascending: false })\r\n      .limit(20);\r\n\r\n    if (error) {throw error;}\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Obtiene categorías principales\r\n   */\r\n  private async fetchMainCategories(): Promise<any> {\r\n    const { data, error } = await supabase\r\n      .from('categories')\r\n      .select('*')\r\n      .eq('parent_id', null)\r\n      .order('order_index');\r\n\r\n    if (error) {throw error;}\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Obtiene configuración del sistema\r\n   */\r\n  private async fetchSystemConfig(): Promise<any> {\r\n    // Simular configuración del sistema\r\n    return {\r\n      siteName: 'Pinteya E-commerce',\r\n      currency: 'ARS',\r\n      timezone: 'America/Argentina/Buenos_Aires',\r\n      features: {\r\n        cart: true,\r\n        wishlist: true,\r\n        reviews: true,\r\n        notifications: true\r\n      },\r\n      limits: {\r\n        maxCartItems: 50,\r\n        maxWishlistItems: 100,\r\n        maxImageSize: 5242880 // 5MB\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Obtiene búsquedas frecuentes\r\n   */\r\n  private async fetchFrequentSearches(): Promise<any> {\r\n    // Simular búsquedas frecuentes\r\n    return [\r\n      { query: 'pintura', count: 150 },\r\n      { query: 'herramientas', count: 120 },\r\n      { query: 'taladro', count: 95 },\r\n      { query: 'martillo', count: 80 },\r\n      { query: 'destornillador', count: 75 }\r\n    ];\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheWarmingSystem = CacheWarmingSystem.getInstance();\r\n\r\n/**\r\n * Utilidades para precalentamiento de cache\r\n */\r\nexport const CacheWarmingUtils = {\r\n  /**\r\n   * Precalienta cache para una página específica\r\n   */\r\n  async warmupPage(pagePath: string): Promise<void> {\r\n    const tasks: Array<{ key: string; fetcher: () => Promise<any>; strategy: string }> = [];\r\n\r\n    if (pagePath === '/') {\r\n      tasks.push(\r\n        { key: 'home:featured-products', fetcher: () => cacheWarmingSystem['fetchPopularProducts'](), strategy: 'PRODUCT_DATA' },\r\n        { key: 'home:main-categories', fetcher: () => cacheWarmingSystem['fetchMainCategories'](), strategy: 'PRODUCT_DATA' }\r\n      );\r\n    } else if (pagePath.startsWith('/shop')) {\r\n      tasks.push(\r\n        { key: 'shop:products', fetcher: () => cacheWarmingSystem['fetchPopularProducts'](), strategy: 'PRODUCT_DATA' },\r\n        { key: 'shop:categories', fetcher: () => cacheWarmingSystem['fetchMainCategories'](), strategy: 'PRODUCT_DATA' }\r\n      );\r\n    }\r\n\r\n    const warmupPromises = tasks.map(task =>\r\n      advancedCacheStrategyManager.execute(task.key, task.fetcher, task.strategy)\r\n    );\r\n\r\n    await Promise.allSettled(warmupPromises);\r\n  },\r\n\r\n  /**\r\n   * Precalienta cache basado en usuario\r\n   */\r\n  async warmupForUser(userId: string): Promise<void> {\r\n    // Implementar lógica específica del usuario\r\n    logger.info(LogCategory.CACHE, `Precalentando cache para usuario: ${userId}`);\r\n  },\r\n\r\n  /**\r\n   * Precalienta cache crítico\r\n   */\r\n  async warmupCritical(): Promise<void> {\r\n    await cacheWarmingSystem.executeStrategy(WarmupStrategy.CRITICAL);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}