524853b2ae182ab1ddbeec22e852adee
// ===================================
// PINTEYA E-COMMERCE - SISTEMA DE ALERTAS AUTOMÁTICAS
// ===================================
"use strict";

/* istanbul ignore next */
function cov_2r33frwgm8() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\alertSystem.ts";
  var hash = "ebc0b019957f20a7733633690df725b77d8a7547";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\alertSystem.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "8": {
        start: {
          line: 28,
          column: 18
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "9": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 55
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "11": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 69
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 79
        }
      },
      "14": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "15": {
        start: {
          line: 43,
          column: 43
        },
        end: {
          line: 52,
          column: 32
        }
      },
      "16": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "17": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 76
        }
      },
      "18": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 28
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 53
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 25
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 58
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "24": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 69,
          column: 84
        }
      },
      "25": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "26": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 77,
          column: 17
        }
      },
      "27": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 76,
          column: 23
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 70
        }
      },
      "29": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 63
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 55
        }
      },
      "31": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 75
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "33": {
        start: {
          line: 90,
          column: 45
        },
        end: {
          line: 90,
          column: 240
        }
      },
      "34": {
        start: {
          line: 91,
          column: 36
        },
        end: {
          line: 91,
          column: 56
        }
      },
      "35": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "37": {
        start: {
          line: 94,
          column: 39
        },
        end: {
          line: 94,
          column: 90
        }
      },
      "38": {
        start: {
          line: 94,
          column: 63
        },
        end: {
          line: 94,
          column: 73
        }
      },
      "39": {
        start: {
          line: 95,
          column: 33
        },
        end: {
          line: 95,
          column: 86
        }
      },
      "40": {
        start: {
          line: 95,
          column: 57
        },
        end: {
          line: 95,
          column: 69
        }
      },
      "41": {
        start: {
          line: 96,
          column: 38
        },
        end: {
          line: 96,
          column: 98
        }
      },
      "42": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 97,
          column: 74
        }
      },
      "43": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "44": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "45": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 72
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "47": {
        start: {
          line: 114,
          column: 45
        },
        end: {
          line: 114,
          column: 240
        }
      },
      "48": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "49": {
        start: {
          line: 116,
          column: 34
        },
        end: {
          line: 116,
          column: 85
        }
      },
      "50": {
        start: {
          line: 116,
          column: 66
        },
        end: {
          line: 116,
          column: 78
        }
      },
      "51": {
        start: {
          line: 117,
          column: 38
        },
        end: {
          line: 117,
          column: 90
        }
      },
      "52": {
        start: {
          line: 117,
          column: 70
        },
        end: {
          line: 117,
          column: 83
        }
      },
      "53": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "54": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 124,
          column: 23
        }
      },
      "55": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 78
        }
      },
      "56": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "57": {
        start: {
          line: 135,
          column: 43
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "58": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "59": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "60": {
        start: {
          line: 147,
          column: 46
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "61": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "62": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "63": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 77
        }
      },
      "64": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "65": {
        start: {
          line: 171,
          column: 40
        },
        end: {
          line: 171,
          column: 154
        }
      },
      "66": {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 172,
          column: 81
        }
      },
      "67": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "68": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 23
        }
      },
      "69": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 36
        }
      },
      "70": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "71": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "72": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 189,
          column: 23
        }
      },
      "73": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "74": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 203,
          column: 19
        }
      },
      "75": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "76": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 58
        }
      },
      "77": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 78
        }
      },
      "78": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 231,
          column: 6
        }
      },
      "79": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 60
        }
      },
      "80": {
        start: {
          line: 240,
          column: 23
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "81": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 53
        }
      },
      "82": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "83": {
        start: {
          line: 255,
          column: 30
        },
        end: {
          line: 257,
          column: 54
        }
      },
      "84": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 26
        }
      },
      "85": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 71
        }
      },
      "86": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 25
        }
      },
      "87": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "88": {
        start: {
          line: 267,
          column: 30
        },
        end: {
          line: 270,
          column: 54
        }
      },
      "89": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 26
        }
      },
      "90": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 62
        }
      },
      "91": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 25
        }
      },
      "92": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "93": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 282,
          column: 36
        }
      },
      "94": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "95": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 63
        }
      },
      "96": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "97": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 55
        }
      },
      "98": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "99": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 61
        }
      },
      "100": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "101": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 69
        }
      },
      "102": {
        start: {
          line: 297,
          column: 26
        },
        end: {
          line: 297,
          column: 45
        }
      },
      "103": {
        start: {
          line: 298,
          column: 27
        },
        end: {
          line: 298,
          column: 46
        }
      },
      "104": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 60
        }
      },
      "105": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "106": {
        start: {
          line: 304,
          column: 51
        },
        end: {
          line: 304,
          column: 62
        }
      },
      "107": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "108": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 306,
          column: 66
        }
      },
      "109": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 310,
          column: 18
        }
      },
      "110": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 315,
          column: 14
        }
      },
      "111": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 60
        }
      },
      "112": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "113": {
        start: {
          line: 326,
          column: 24
        },
        end: {
          line: 326,
          column: 57
        }
      },
      "114": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 327,
          column: 66
        }
      },
      "115": {
        start: {
          line: 330,
          column: 24
        },
        end: {
          line: 330,
          column: 57
        }
      },
      "116": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 331,
          column: 95
        }
      },
      "117": {
        start: {
          line: 333,
          column: 17
        },
        end: {
          line: 333,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 37
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 31
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 37
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 81
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 41
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 54
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 66
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 57
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 88
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 94,
            column: 58
          },
          end: {
            line: 94,
            column: 59
          }
        },
        loc: {
          start: {
            line: 94,
            column: 63
          },
          end: {
            line: 94,
            column: 73
          }
        },
        line: 94
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 95,
            column: 52
          },
          end: {
            line: 95,
            column: 53
          }
        },
        loc: {
          start: {
            line: 95,
            column: 57
          },
          end: {
            line: 95,
            column: 69
          }
        },
        line: 95
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 50
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 112
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 116,
            column: 62
          }
        },
        loc: {
          start: {
            line: 116,
            column: 66
          },
          end: {
            line: 116,
            column: 78
          }
        },
        line: 116
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 65
          },
          end: {
            line: 117,
            column: 66
          }
        },
        loc: {
          start: {
            line: 117,
            column: 70
          },
          end: {
            line: 117,
            column: 83
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 42
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 132
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 40
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 168
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 32
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 214
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 41
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 234
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 239
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 43
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 253
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 40
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 265
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 46
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 278
      },
      "23": {
        name: "processUserSecurityAlerts",
        decl: {
          start: {
            line: 325,
            column: 15
          },
          end: {
            line: 325,
            column: 40
          }
        },
        loc: {
          start: {
            line: 325,
            column: 62
          },
          end: {
            line: 328,
            column: 1
          }
        },
        line: 325
      },
      "24": {
        name: "createSecurityAlert",
        decl: {
          start: {
            line: 329,
            column: 15
          },
          end: {
            line: 329,
            column: 34
          }
        },
        loc: {
          start: {
            line: 329,
            column: 94
          },
          end: {
            line: 332,
            column: 1
          }
        },
        line: 329
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 66
          },
          end: {
            line: 41,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 41,
            column: 77
          },
          end: {
            line: 41,
            column: 79
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 30
          }
        }, {
          start: {
            line: 93,
            column: 34
          },
          end: {
            line: 93,
            column: 59
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 53
          }
        }, {
          start: {
            line: 96,
            column: 57
          },
          end: {
            line: 96,
            column: 98
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 97,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 32
          },
          end: {
            line: 97,
            column: 41
          }
        }, {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 97,
            column: 74
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 33
          }
        }, {
          start: {
            line: 98,
            column: 37
          },
          end: {
            line: 98,
            column: 44
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 166
          },
          end: {
            line: 99,
            column: 208
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 166
          },
          end: {
            line: 99,
            column: 181
          }
        }, {
          start: {
            line: 99,
            column: 185
          },
          end: {
            line: 99,
            column: 208
          }
        }],
        line: 99
      },
      "11": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "12": {
        loc: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 30
          }
        }, {
          start: {
            line: 115,
            column: 34
          },
          end: {
            line: 115,
            column: 59
          }
        }],
        line: 115
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 33
          }
        }, {
          start: {
            line: 118,
            column: 37
          },
          end: {
            line: 118,
            column: 54
          }
        }],
        line: 118
      },
      "15": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "16": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 139,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 139,
            column: 28
          }
        }, {
          start: {
            line: 139,
            column: 32
          },
          end: {
            line: 139,
            column: 56
          }
        }],
        line: 139
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 156,
            column: 31
          }
        }, {
          start: {
            line: 156,
            column: 35
          },
          end: {
            line: 156,
            column: 62
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 172,
            column: 38
          },
          end: {
            line: 172,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 38
          },
          end: {
            line: 172,
            column: 75
          }
        }, {
          start: {
            line: 172,
            column: 79
          },
          end: {
            line: 172,
            column: 81
          }
        }],
        line: 172
      },
      "20": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "21": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "22": {
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 179,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 179,
            column: 45
          }
        }, {
          start: {
            line: 179,
            column: 49
          },
          end: {
            line: 179,
            column: 74
          }
        }],
        line: 179
      },
      "23": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "24": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "25": {
        loc: {
          start: {
            line: 250,
            column: 15
          },
          end: {
            line: 250,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 15
          },
          end: {
            line: 250,
            column: 27
          }
        }, {
          start: {
            line: 250,
            column: 31
          },
          end: {
            line: 250,
            column: 52
          }
        }],
        line: 250
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 278,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 278,
            column: 42
          },
          end: {
            line: 278,
            column: 44
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "28": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "29": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "30": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "31": {
        loc: {
          start: {
            line: 297,
            column: 26
          },
          end: {
            line: 297,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 26
          },
          end: {
            line: 297,
            column: 39
          }
        }, {
          start: {
            line: 297,
            column: 43
          },
          end: {
            line: 297,
            column: 45
          }
        }],
        line: 297
      },
      "32": {
        loc: {
          start: {
            line: 298,
            column: 27
          },
          end: {
            line: 298,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 27
          },
          end: {
            line: 298,
            column: 41
          }
        }, {
          start: {
            line: 298,
            column: 45
          },
          end: {
            line: 298,
            column: 46
          }
        }],
        line: 298
      },
      "33": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "34": {
        loc: {
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 30
          }
        }, {
          start: {
            line: 313,
            column: 34
          },
          end: {
            line: 313,
            column: 36
          }
        }],
        line: 313
      },
      "35": {
        loc: {
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 314,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 314,
            column: 28
          }
        }, {
          start: {
            line: 314,
            column: 32
          },
          end: {
            line: 314,
            column: 33
          }
        }],
        line: 314
      },
      "36": {
        loc: {
          start: {
            line: 329,
            column: 79
          },
          end: {
            line: 329,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 329,
            column: 90
          },
          end: {
            line: 329,
            column: 92
          }
        }],
        line: 329
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\alertSystem.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - SISTEMA DE ALERTAS AUTOM\xC1TICAS\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { AnomalyDetector } from './anomalyDetection';\r\n\r\n// Tipos para el sistema de alertas\r\nexport interface SecurityAlert {\r\n  id: string;\r\n  user_id: string;\r\n  type: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  metadata: Record<string, any>;\r\n  is_read: boolean;\r\n  is_resolved: boolean;\r\n  created_at: string;\r\n  resolved_at?: string;\r\n}\r\n\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  enabled: boolean;\r\n  conditions: Record<string, any>;\r\n  actions: string[];\r\n}\r\n\r\nexport interface AlertNotification {\r\n  type: 'email' | 'push' | 'sms';\r\n  recipient: string;\r\n  subject: string;\r\n  message: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Clase principal del sistema de alertas\r\nexport class SecurityAlertSystem {\r\n  private static instance: SecurityAlertSystem;\r\n  private anomalyDetector: AnomalyDetector;\r\n\r\n  public static getInstance(): SecurityAlertSystem {\r\n    if (!SecurityAlertSystem.instance) {\r\n      SecurityAlertSystem.instance = new SecurityAlertSystem();\r\n    }\r\n    return SecurityAlertSystem.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.anomalyDetector = AnomalyDetector.getInstance();\r\n  }\r\n\r\n  // Crear una nueva alerta de seguridad\r\n  async createAlert(\r\n    userId: string,\r\n    type: string,\r\n    severity: SecurityAlert['severity'],\r\n    title: string,\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): Promise<SecurityAlert | null> {\r\n    try {\r\n      const { data: alert, error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .insert({\r\n          user_id: userId,\r\n          type,\r\n          severity,\r\n          title,\r\n          description,\r\n          metadata,\r\n          is_read: false,\r\n          is_resolved: false,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error al crear alerta de seguridad:', error);\r\n        return null;\r\n      }\r\n\r\n      // Enviar notificaciones seg\xFAn la severidad\r\n      await this.sendAlertNotifications(alert);\r\n\r\n      return alert;\r\n    } catch (error) {\r\n      console.error('Error en createAlert:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Procesar alertas autom\xE1ticas para un usuario\r\n  async processAutomaticAlerts(userId: string, sessionData: any): Promise<void> {\r\n    try {\r\n      // Detectar anomal\xEDas\r\n      const anomalies = await this.anomalyDetector.analyzeSession(sessionData);\r\n\r\n      for (const anomaly of anomalies) {\r\n        if (anomaly.isAnomalous) {\r\n          await this.createAlert(\r\n            userId,\r\n            anomaly.type,\r\n            anomaly.severity,\r\n            this.getAlertTitle(anomaly.type),\r\n            anomaly.description,\r\n            {\r\n              ...anomaly.metadata,\r\n              detection_time: new Date().toISOString(),\r\n              session_data: sessionData,\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // Verificar otras condiciones de alerta\r\n      await this.checkLoginFromNewLocation(userId, sessionData);\r\n      await this.checkMultipleConcurrentSessions(userId);\r\n      await this.checkSuspiciousActivity(userId);\r\n    } catch (error) {\r\n      console.error('Error al procesar alertas autom\xE1ticas:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar login desde nueva ubicaci\xF3n\r\n  private async checkLoginFromNewLocation(userId: string, sessionData: any): Promise<void> {\r\n    try {\r\n      const { data: recentSessions } = await supabaseAdmin\r\n        .from('user_sessions')\r\n        .select('location, ip_address')\r\n        .eq('user_id', userId)\r\n        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())\r\n        .limit(10);\r\n\r\n      const currentLocation = sessionData.location;\r\n      const currentIP = sessionData.ipAddress;\r\n\r\n      if (recentSessions && recentSessions.length > 0) {\r\n        const knownLocations = recentSessions.map(s => s.location).filter(Boolean);\r\n        const knownIPs = recentSessions.map(s => s.ip_address).filter(Boolean);\r\n\r\n        const isNewLocation = currentLocation && !knownLocations.includes(currentLocation);\r\n        const isNewIP = currentIP && !knownIPs.includes(currentIP);\r\n\r\n        if (isNewLocation || isNewIP) {\r\n          await this.createAlert(\r\n            userId,\r\n            'new_location_login',\r\n            'medium',\r\n            'Acceso desde nueva ubicaci\xF3n',\r\n            `Se detect\xF3 un acceso desde una nueva ubicaci\xF3n: ${currentLocation || 'Ubicaci\xF3n desconocida'}`,\r\n            {\r\n              new_location: currentLocation,\r\n              new_ip: currentIP,\r\n              known_locations: knownLocations,\r\n              known_ips: knownIPs,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar nueva ubicaci\xF3n:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar m\xFAltiples sesiones concurrentes\r\n  private async checkMultipleConcurrentSessions(userId: string): Promise<void> {\r\n    try {\r\n      const { data: activeSessions } = await supabaseAdmin\r\n        .from('user_sessions')\r\n        .select('id, ip_address, device_name, location')\r\n        .eq('user_id', userId)\r\n        .gte('last_activity', new Date(Date.now() - 30 * 60 * 1000).toISOString()); // \xDAltimos 30 minutos\r\n\r\n      if (activeSessions && activeSessions.length > 3) {\r\n        const uniqueIPs = new Set(activeSessions.map(s => s.ip_address)).size;\r\n        const uniqueDevices = new Set(activeSessions.map(s => s.device_name)).size;\r\n\r\n        if (uniqueIPs > 2 || uniqueDevices > 3) {\r\n          await this.createAlert(\r\n            userId,\r\n            'multiple_concurrent_sessions',\r\n            'high',\r\n            'M\xFAltiples sesiones activas detectadas',\r\n            `Se detectaron ${activeSessions.length} sesiones activas desde ${uniqueIPs} ubicaciones diferentes`,\r\n            {\r\n              total_sessions: activeSessions.length,\r\n              unique_ips: uniqueIPs,\r\n              unique_devices: uniqueDevices,\r\n              sessions: activeSessions,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar sesiones concurrentes:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar actividad sospechosa\r\n  private async checkSuspiciousActivity(userId: string): Promise<void> {\r\n    try {\r\n      // Verificar intentos de login fallidos recientes\r\n      const { data: failedLogins } = await supabaseAdmin\r\n        .from('user_activity')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .eq('action', 'login_failed')\r\n        .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // \xDAltima hora\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (failedLogins && failedLogins.length >= 5) {\r\n        await this.createAlert(\r\n          userId,\r\n          'suspicious_login_attempts',\r\n          'high',\r\n          'M\xFAltiples intentos de acceso fallidos',\r\n          `Se detectaron ${failedLogins.length} intentos de acceso fallidos en la \xFAltima hora`,\r\n          {\r\n            failed_attempts: failedLogins.length,\r\n            time_window: '1 hour',\r\n            attempts: failedLogins.slice(0, 5), // Solo los primeros 5\r\n          }\r\n        );\r\n      }\r\n\r\n      // Verificar cambios cr\xEDticos de configuraci\xF3n\r\n      const { data: criticalChanges } = await supabaseAdmin\r\n        .from('user_activity')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .in('action', ['password_change', 'email_change', 'enable_2fa', 'disable_2fa'])\r\n        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // \xDAltimas 24 horas\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (criticalChanges && criticalChanges.length >= 3) {\r\n        await this.createAlert(\r\n          userId,\r\n          'multiple_critical_changes',\r\n          'medium',\r\n          'M\xFAltiples cambios cr\xEDticos detectados',\r\n          `Se realizaron ${criticalChanges.length} cambios cr\xEDticos en las \xFAltimas 24 horas`,\r\n          {\r\n            changes_count: criticalChanges.length,\r\n            time_window: '24 hours',\r\n            changes: criticalChanges,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar actividad sospechosa:', error);\r\n    }\r\n  }\r\n\r\n  // Enviar notificaciones de alerta\r\n  private async sendAlertNotifications(alert: SecurityAlert): Promise<void> {\r\n    try {\r\n      // Obtener preferencias de notificaci\xF3n del usuario\r\n      const { data: userPrefs } = await supabaseAdmin\r\n        .from('user_preferences')\r\n        .select('preferences')\r\n        .eq('user_id', alert.user_id)\r\n        .single();\r\n\r\n      const notificationPrefs = userPrefs?.preferences?.notifications || {};\r\n\r\n      // Solo enviar si las alertas de seguridad est\xE1n habilitadas\r\n      if (!notificationPrefs.securityAlerts) {\r\n        return;\r\n      }\r\n\r\n      const notifications: AlertNotification[] = [];\r\n\r\n      // Email para alertas cr\xEDticas y altas\r\n      if (alert.severity === 'critical' || alert.severity === 'high') {\r\n        if (notificationPrefs.emailNotifications) {\r\n          notifications.push({\r\n            type: 'email',\r\n            recipient: alert.user_id,\r\n            subject: `\uD83D\uDD12 Alerta de Seguridad: ${alert.title}`,\r\n            message: this.generateEmailMessage(alert),\r\n            metadata: { alert_id: alert.id },\r\n          });\r\n        }\r\n      }\r\n\r\n      // Push notifications para todas las alertas\r\n      if (notificationPrefs.pushNotifications) {\r\n        notifications.push({\r\n          type: 'push',\r\n          recipient: alert.user_id,\r\n          subject: alert.title,\r\n          message: alert.description,\r\n          metadata: { alert_id: alert.id, severity: alert.severity },\r\n        });\r\n      }\r\n\r\n      // Enviar notificaciones (implementaci\xF3n pendiente)\r\n      for (const notification of notifications) {\r\n        await this.sendNotification(notification);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al enviar notificaciones de alerta:', error);\r\n    }\r\n  }\r\n\r\n  // Generar mensaje de email para alerta\r\n  private generateEmailMessage(alert: SecurityAlert): string {\r\n    return `\r\n      Hola,\r\n\r\n      Se ha detectado una alerta de seguridad en tu cuenta de Pinteya:\r\n\r\n      Tipo: ${alert.title}\r\n      Severidad: ${alert.severity.toUpperCase()}\r\n      Descripci\xF3n: ${alert.description}\r\n      Fecha: ${new Date(alert.created_at).toLocaleString('es-AR')}\r\n\r\n      Te recomendamos revisar tu cuenta y tomar las medidas necesarias si no reconoces esta actividad.\r\n\r\n      Puedes revisar todas tus alertas de seguridad en: ${process.env.NEXT_PUBLIC_APP_URL}/dashboard/security\r\n\r\n      Saludos,\r\n      Equipo de Seguridad de Pinteya\r\n    `;\r\n  }\r\n\r\n  // Enviar notificaci\xF3n (placeholder para implementaci\xF3n futura)\r\n  private async sendNotification(notification: AlertNotification): Promise<void> {\r\n    // Aqu\xED se implementar\xEDa el env\xEDo real de notificaciones\r\n    console.log('Enviando notificaci\xF3n:', notification);\r\n  }\r\n\r\n  // Obtener t\xEDtulo de alerta seg\xFAn el tipo\r\n  private getAlertTitle(type: string): string {\r\n    const titles: Record<string, string> = {\r\n      'new_location_login': 'Acceso desde nueva ubicaci\xF3n',\r\n      'multiple_concurrent_sessions': 'M\xFAltiples sesiones activas',\r\n      'suspicious_login_attempts': 'Intentos de acceso sospechosos',\r\n      'multiple_critical_changes': 'M\xFAltiples cambios cr\xEDticos',\r\n      'unusual_time_access': 'Acceso en horario inusual',\r\n      'impossible_travel': 'Viaje imposible detectado',\r\n      'device_anomaly': 'Dispositivo an\xF3malo detectado',\r\n      'ip_reputation_alert': 'IP con reputaci\xF3n sospechosa',\r\n    };\r\n\r\n    return titles[type] || 'Alerta de seguridad';\r\n  }\r\n\r\n  // Marcar alerta como le\xEDda\r\n  async markAlertAsRead(alertId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .update({ is_read: true })\r\n        .eq('id', alertId)\r\n        .eq('user_id', userId);\r\n\r\n      return !error;\r\n    } catch (error) {\r\n      console.error('Error al marcar alerta como le\xEDda:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Resolver alerta\r\n  async resolveAlert(alertId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .update({ \r\n          is_resolved: true,\r\n          resolved_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', alertId)\r\n        .eq('user_id', userId);\r\n\r\n      return !error;\r\n    } catch (error) {\r\n      console.error('Error al resolver alerta:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Obtener alertas de un usuario\r\n  async getUserAlerts(\r\n    userId: string,\r\n    filters: {\r\n      severity?: string;\r\n      type?: string;\r\n      is_read?: boolean;\r\n      is_resolved?: boolean;\r\n      limit?: number;\r\n      offset?: number;\r\n    } = {}\r\n  ): Promise<{ alerts: SecurityAlert[]; total: number }> {\r\n    try {\r\n      let query = supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .select('*', { count: 'exact' })\r\n        .eq('user_id', userId);\r\n\r\n      // Aplicar filtros\r\n      if (filters.severity) {\r\n        query = query.eq('severity', filters.severity);\r\n      }\r\n      if (filters.type) {\r\n        query = query.eq('type', filters.type);\r\n      }\r\n      if (filters.is_read !== undefined) {\r\n        query = query.eq('is_read', filters.is_read);\r\n      }\r\n      if (filters.is_resolved !== undefined) {\r\n        query = query.eq('is_resolved', filters.is_resolved);\r\n      }\r\n\r\n      // Paginaci\xF3n\r\n      const limit = filters.limit || 50;\r\n      const offset = filters.offset || 0;\r\n      query = query.range(offset, offset + limit - 1);\r\n\r\n      // Ordenar por fecha de creaci\xF3n (m\xE1s recientes primero)\r\n      query = query.order('created_at', { ascending: false });\r\n\r\n      const { data: alerts, error, count } = await query;\r\n\r\n      if (error) {\r\n        console.error('Error al obtener alertas:', error);\r\n        return { alerts: [], total: 0 };\r\n      }\r\n\r\n      return { alerts: alerts || [], total: count || 0 };\r\n    } catch (error) {\r\n      console.error('Error en getUserAlerts:', error);\r\n      return { alerts: [], total: 0 };\r\n    }\r\n  }\r\n}\r\n\r\n// Funci\xF3n auxiliar para procesar alertas autom\xE1ticas\r\nexport async function processUserSecurityAlerts(userId: string, sessionData: any): Promise<void> {\r\n  const alertSystem = SecurityAlertSystem.getInstance();\r\n  await alertSystem.processAutomaticAlerts(userId, sessionData);\r\n}\r\n\r\n// Funci\xF3n auxiliar para crear alerta manual\r\nexport async function createSecurityAlert(\r\n  userId: string,\r\n  type: string,\r\n  severity: SecurityAlert['severity'],\r\n  title: string,\r\n  description: string,\r\n  metadata: Record<string, any> = {}\r\n): Promise<SecurityAlert | null> {\r\n  const alertSystem = SecurityAlertSystem.getInstance();\r\n  return await alertSystem.createAlert(userId, type, severity, title, description, metadata);\r\n}\r\n\r\nexport default SecurityAlertSystem;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["SecurityAlertSystem", "createSecurityAlert", "processUserSecurityAlerts", "getInstance", "instance", "anomalyDetector", "AnomalyDetector", "createAlert", "userId", "type", "severity", "title", "description", "metadata", "data", "alert", "error", "supabaseAdmin", "from", "insert", "user_id", "is_read", "is_resolved", "select", "single", "console", "sendAlertNotifications", "processAutomaticAlerts", "sessionData", "anomalies", "analyzeSession", "anomaly", "isAnomalous", "getAlertTitle", "detection_time", "Date", "toISOString", "session_data", "checkLoginFromNewLocation", "checkMultipleConcurrentSessions", "checkSuspiciousActivity", "recentSessions", "eq", "gte", "now", "limit", "currentLocation", "location", "currentIP", "ipAddress", "length", "knownLocations", "map", "s", "filter", "Boolean", "knownIPs", "ip_address", "isNewLocation", "includes", "isNewIP", "new_location", "new_ip", "known_locations", "known_ips", "activeSessions", "uniqueIPs", "Set", "size", "uniqueDevices", "device_name", "total_sessions", "unique_ips", "unique_devices", "sessions", "failedLogins", "order", "ascending", "failed_attempts", "time_window", "attempts", "slice", "criticalChanges", "in", "changes_count", "changes", "userPrefs", "notificationPrefs", "preferences", "notifications", "securityAlerts", "emailNotifications", "push", "recipient", "subject", "message", "generateEmailMessage", "alert_id", "id", "pushNotifications", "notification", "sendNotification", "toUpperCase", "created_at", "toLocaleString", "process", "env", "NEXT_PUBLIC_APP_URL", "log", "titles", "markAlertAsRead", "alertId", "update", "resolveAlert", "resolved_at", "getUserAlerts", "filters", "query", "count", "undefined", "offset", "range", "alerts", "total", "alertSystem"],
      mappings: "AAAA,sCAAsC;AACtC,sDAAsD;AACtD,sCAAsC;;;;;;;;;;;;QAuCzBA;eAAAA;;QAyZSC;eAAAA;;QAYtB;eAAA;;QAlBsBC;eAAAA;;;0BAxbQ;kCACE;AAoCzB,MAAMF;IAIX,OAAcG,cAAmC;QAC/C,IAAI,CAACH,oBAAoBI,QAAQ,EAAE;YACjCJ,oBAAoBI,QAAQ,GAAG,IAAIJ;QACrC;QACA,OAAOA,oBAAoBI,QAAQ;IACrC;IAEA,aAAc;QACZ,IAAI,CAACC,eAAe,GAAGC,iCAAe,CAACH,WAAW;IACpD;IAEA,sCAAsC;IACtC,MAAMI,YACJC,MAAc,EACdC,IAAY,EACZC,QAAmC,EACnCC,KAAa,EACbC,WAAmB,EACnBC,WAAgC,CAAC,CAAC,EACH;QAC/B,IAAI;YACF,MAAM,EAAEC,MAAMC,KAAK,EAAEC,KAAK,EAAE,GAAG,MAAMC,uBAAa,CAC/CC,IAAI,CAAC,wBACLC,MAAM,CAAC;gBACNC,SAASZ;gBACTC;gBACAC;gBACAC;gBACAC;gBACAC;gBACAQ,SAAS;gBACTC,aAAa;YACf,GACCC,MAAM,GACNC,MAAM;YAET,IAAIR,OAAO;gBACTS,QAAQT,KAAK,CAAC,uCAAuCA;gBACrD,OAAO;YACT;YAEA,2CAA2C;YAC3C,MAAM,IAAI,CAACU,sBAAsB,CAACX;YAElC,OAAOA;QACT,EAAE,OAAOC,OAAO;YACdS,QAAQT,KAAK,CAAC,yBAAyBA;YACvC,OAAO;QACT;IACF;IAEA,+CAA+C;IAC/C,MAAMW,uBAAuBnB,MAAc,EAAEoB,WAAgB,EAAiB;QAC5E,IAAI;YACF,qBAAqB;YACrB,MAAMC,YAAY,MAAM,IAAI,CAACxB,eAAe,CAACyB,cAAc,CAACF;YAE5D,KAAK,MAAMG,WAAWF,UAAW;gBAC/B,IAAIE,QAAQC,WAAW,EAAE;oBACvB,MAAM,IAAI,CAACzB,WAAW,CACpBC,QACAuB,QAAQtB,IAAI,EACZsB,QAAQrB,QAAQ,EAChB,IAAI,CAACuB,aAAa,CAACF,QAAQtB,IAAI,GAC/BsB,QAAQnB,WAAW,EACnB;wBACE,GAAGmB,QAAQlB,QAAQ;wBACnBqB,gBAAgB,IAAIC,OAAOC,WAAW;wBACtCC,cAAcT;oBAChB;gBAEJ;YACF;YAEA,wCAAwC;YACxC,MAAM,IAAI,CAACU,yBAAyB,CAAC9B,QAAQoB;YAC7C,MAAM,IAAI,CAACW,+BAA+B,CAAC/B;YAC3C,MAAM,IAAI,CAACgC,uBAAuB,CAAChC;QACrC,EAAE,OAAOQ,OAAO;YACdS,QAAQT,KAAK,CAAC,0CAA0CA;QAC1D;IACF;IAEA,wCAAwC;IACxC,MAAcsB,0BAA0B9B,MAAc,EAAEoB,WAAgB,EAAiB;QACvF,IAAI;YACF,MAAM,EAAEd,MAAM2B,cAAc,EAAE,GAAG,MAAMxB,uBAAa,CACjDC,IAAI,CAAC,iBACLK,MAAM,CAAC,wBACPmB,EAAE,CAAC,WAAWlC,QACdmC,GAAG,CAAC,cAAc,IAAIR,KAAKA,KAAKS,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK,MAAMR,WAAW,IAC7ES,KAAK,CAAC;YAET,MAAMC,kBAAkBlB,YAAYmB,QAAQ;YAC5C,MAAMC,YAAYpB,YAAYqB,SAAS;YAEvC,IAAIR,kBAAkBA,eAAeS,MAAM,GAAG,GAAG;gBAC/C,MAAMC,iBAAiBV,eAAeW,GAAG,CAACC,CAAAA,IAAKA,EAAEN,QAAQ,EAAEO,MAAM,CAACC;gBAClE,MAAMC,WAAWf,eAAeW,GAAG,CAACC,CAAAA,IAAKA,EAAEI,UAAU,EAAEH,MAAM,CAACC;gBAE9D,MAAMG,gBAAgBZ,mBAAmB,CAACK,eAAeQ,QAAQ,CAACb;gBAClE,MAAMc,UAAUZ,aAAa,CAACQ,SAASG,QAAQ,CAACX;gBAEhD,IAAIU,iBAAiBE,SAAS;oBAC5B,MAAM,IAAI,CAACrD,WAAW,CACpBC,QACA,sBACA,UACA,gCACA,CAAC,gDAAgD,EAAEsC,mBAAmB,yBAAyB,EAC/F;wBACEe,cAAcf;wBACdgB,QAAQd;wBACRe,iBAAiBZ;wBACjBa,WAAWR;oBACb;gBAEJ;YACF;QACF,EAAE,OAAOxC,OAAO;YACdS,QAAQT,KAAK,CAAC,uCAAuCA;QACvD;IACF;IAEA,4CAA4C;IAC5C,MAAcuB,gCAAgC/B,MAAc,EAAiB;QAC3E,IAAI;YACF,MAAM,EAAEM,MAAMmD,cAAc,EAAE,GAAG,MAAMhD,uBAAa,CACjDC,IAAI,CAAC,iBACLK,MAAM,CAAC,yCACPmB,EAAE,CAAC,WAAWlC,QACdmC,GAAG,CAAC,iBAAiB,IAAIR,KAAKA,KAAKS,GAAG,KAAK,KAAK,KAAK,MAAMR,WAAW,KAAK,qBAAqB;YAEnG,IAAI6B,kBAAkBA,eAAef,MAAM,GAAG,GAAG;gBAC/C,MAAMgB,YAAY,IAAIC,IAAIF,eAAeb,GAAG,CAACC,CAAAA,IAAKA,EAAEI,UAAU,GAAGW,IAAI;gBACrE,MAAMC,gBAAgB,IAAIF,IAAIF,eAAeb,GAAG,CAACC,CAAAA,IAAKA,EAAEiB,WAAW,GAAGF,IAAI;gBAE1E,IAAIF,YAAY,KAAKG,gBAAgB,GAAG;oBACtC,MAAM,IAAI,CAAC9D,WAAW,CACpBC,QACA,gCACA,QACA,yCACA,CAAC,cAAc,EAAEyD,eAAef,MAAM,CAAC,wBAAwB,EAAEgB,UAAU,uBAAuB,CAAC,EACnG;wBACEK,gBAAgBN,eAAef,MAAM;wBACrCsB,YAAYN;wBACZO,gBAAgBJ;wBAChBK,UAAUT;oBACZ;gBAEJ;YACF;QACF,EAAE,OAAOjD,OAAO;YACdS,QAAQT,KAAK,CAAC,6CAA6CA;QAC7D;IACF;IAEA,iCAAiC;IACjC,MAAcwB,wBAAwBhC,MAAc,EAAiB;QACnE,IAAI;YACF,iDAAiD;YACjD,MAAM,EAAEM,MAAM6D,YAAY,EAAE,GAAG,MAAM1D,uBAAa,CAC/CC,IAAI,CAAC,iBACLK,MAAM,CAAC,KACPmB,EAAE,CAAC,WAAWlC,QACdkC,EAAE,CAAC,UAAU,gBACbC,GAAG,CAAC,cAAc,IAAIR,KAAKA,KAAKS,GAAG,KAAK,KAAK,KAAK,MAAMR,WAAW,IAAI,cAAc;aACrFwC,KAAK,CAAC,cAAc;gBAAEC,WAAW;YAAM;YAE1C,IAAIF,gBAAgBA,aAAazB,MAAM,IAAI,GAAG;gBAC5C,MAAM,IAAI,CAAC3C,WAAW,CACpBC,QACA,6BACA,QACA,yCACA,CAAC,cAAc,EAAEmE,aAAazB,MAAM,CAAC,8CAA8C,CAAC,EACpF;oBACE4B,iBAAiBH,aAAazB,MAAM;oBACpC6B,aAAa;oBACbC,UAAUL,aAAaM,KAAK,CAAC,GAAG;gBAClC;YAEJ;YAEA,8CAA8C;YAC9C,MAAM,EAAEnE,MAAMoE,eAAe,EAAE,GAAG,MAAMjE,uBAAa,CAClDC,IAAI,CAAC,iBACLK,MAAM,CAAC,KACPmB,EAAE,CAAC,WAAWlC,QACd2E,EAAE,CAAC,UAAU;gBAAC;gBAAmB;gBAAgB;gBAAc;aAAc,EAC7ExC,GAAG,CAAC,cAAc,IAAIR,KAAKA,KAAKS,GAAG,KAAK,KAAK,KAAK,KAAK,MAAMR,WAAW,IAAI,mBAAmB;aAC/FwC,KAAK,CAAC,cAAc;gBAAEC,WAAW;YAAM;YAE1C,IAAIK,mBAAmBA,gBAAgBhC,MAAM,IAAI,GAAG;gBAClD,MAAM,IAAI,CAAC3C,WAAW,CACpBC,QACA,6BACA,UACA,yCACA,CAAC,cAAc,EAAE0E,gBAAgBhC,MAAM,CAAC,yCAAyC,CAAC,EAClF;oBACEkC,eAAeF,gBAAgBhC,MAAM;oBACrC6B,aAAa;oBACbM,SAASH;gBACX;YAEJ;QACF,EAAE,OAAOlE,OAAO;YACdS,QAAQT,KAAK,CAAC,4CAA4CA;QAC5D;IACF;IAEA,kCAAkC;IAClC,MAAcU,uBAAuBX,KAAoB,EAAiB;QACxE,IAAI;YACF,mDAAmD;YACnD,MAAM,EAAED,MAAMwE,SAAS,EAAE,GAAG,MAAMrE,uBAAa,CAC5CC,IAAI,CAAC,oBACLK,MAAM,CAAC,eACPmB,EAAE,CAAC,WAAW3B,MAAMK,OAAO,EAC3BI,MAAM;YAET,MAAM+D,oBAAoBD,WAAWE,aAAaC,iBAAiB,CAAC;YAEpE,4DAA4D;YAC5D,IAAI,CAACF,kBAAkBG,cAAc,EAAE;gBACrC;YACF;YAEA,MAAMD,gBAAqC,EAAE;YAE7C,sCAAsC;YACtC,IAAI1E,MAAML,QAAQ,KAAK,cAAcK,MAAML,QAAQ,KAAK,QAAQ;gBAC9D,IAAI6E,kBAAkBI,kBAAkB,EAAE;oBACxCF,cAAcG,IAAI,CAAC;wBACjBnF,MAAM;wBACNoF,WAAW9E,MAAMK,OAAO;wBACxB0E,SAAS,CAAC,wBAAwB,EAAE/E,MAAMJ,KAAK,EAAE;wBACjDoF,SAAS,IAAI,CAACC,oBAAoB,CAACjF;wBACnCF,UAAU;4BAAEoF,UAAUlF,MAAMmF,EAAE;wBAAC;oBACjC;gBACF;YACF;YAEA,4CAA4C;YAC5C,IAAIX,kBAAkBY,iBAAiB,EAAE;gBACvCV,cAAcG,IAAI,CAAC;oBACjBnF,MAAM;oBACNoF,WAAW9E,MAAMK,OAAO;oBACxB0E,SAAS/E,MAAMJ,KAAK;oBACpBoF,SAAShF,MAAMH,WAAW;oBAC1BC,UAAU;wBAAEoF,UAAUlF,MAAMmF,EAAE;wBAAExF,UAAUK,MAAML,QAAQ;oBAAC;gBAC3D;YACF;YAEA,mDAAmD;YACnD,KAAK,MAAM0F,gBAAgBX,cAAe;gBACxC,MAAM,IAAI,CAACY,gBAAgB,CAACD;YAC9B;QACF,EAAE,OAAOpF,OAAO;YACdS,QAAQT,KAAK,CAAC,6CAA6CA;QAC7D;IACF;IAEA,uCAAuC;IAC/BgF,qBAAqBjF,KAAoB,EAAU;QACzD,OAAO,CAAC;;;;;YAKA,EAAEA,MAAMJ,KAAK,CAAC;iBACT,EAAEI,MAAML,QAAQ,CAAC4F,WAAW,GAAG;mBAC7B,EAAEvF,MAAMH,WAAW,CAAC;aAC1B,EAAE,IAAIuB,KAAKpB,MAAMwF,UAAU,EAAEC,cAAc,CAAC,SAAS;;;;wDAIV,EAAEC,QAAQC,GAAG,CAACC,mBAAmB,CAAC;;;;IAItF,CAAC;IACH;IAEA,+DAA+D;IAC/D,MAAcN,iBAAiBD,YAA+B,EAAiB;QAC7E,wDAAwD;QACxD3E,QAAQmF,GAAG,CAAC,0BAA0BR;IACxC;IAEA,yCAAyC;IACjCnE,cAAcxB,IAAY,EAAU;QAC1C,MAAMoG,SAAiC;YACrC,sBAAsB;YACtB,gCAAgC;YAChC,6BAA6B;YAC7B,6BAA6B;YAC7B,uBAAuB;YACvB,qBAAqB;YACrB,kBAAkB;YAClB,uBAAuB;QACzB;QAEA,OAAOA,MAAM,CAACpG,KAAK,IAAI;IACzB;IAEA,2BAA2B;IAC3B,MAAMqG,gBAAgBC,OAAe,EAAEvG,MAAc,EAAoB;QACvE,IAAI;YACF,MAAM,EAAEQ,KAAK,EAAE,GAAG,MAAMC,uBAAa,CAClCC,IAAI,CAAC,wBACL8F,MAAM,CAAC;gBAAE3F,SAAS;YAAK,GACvBqB,EAAE,CAAC,MAAMqE,SACTrE,EAAE,CAAC,WAAWlC;YAEjB,OAAO,CAACQ;QACV,EAAE,OAAOA,OAAO;YACdS,QAAQT,KAAK,CAAC,sCAAsCA;YACpD,OAAO;QACT;IACF;IAEA,kBAAkB;IAClB,MAAMiG,aAAaF,OAAe,EAAEvG,MAAc,EAAoB;QACpE,IAAI;YACF,MAAM,EAAEQ,KAAK,EAAE,GAAG,MAAMC,uBAAa,CAClCC,IAAI,CAAC,wBACL8F,MAAM,CAAC;gBACN1F,aAAa;gBACb4F,aAAa,IAAI/E,OAAOC,WAAW;YACrC,GACCM,EAAE,CAAC,MAAMqE,SACTrE,EAAE,CAAC,WAAWlC;YAEjB,OAAO,CAACQ;QACV,EAAE,OAAOA,OAAO;YACdS,QAAQT,KAAK,CAAC,6BAA6BA;YAC3C,OAAO;QACT;IACF;IAEA,gCAAgC;IAChC,MAAMmG,cACJ3G,MAAc,EACd4G,UAOI,CAAC,CAAC,EAC+C;QACrD,IAAI;YACF,IAAIC,QAAQpG,uBAAa,CACtBC,IAAI,CAAC,wBACLK,MAAM,CAAC,KAAK;gBAAE+F,OAAO;YAAQ,GAC7B5E,EAAE,CAAC,WAAWlC;YAEjB,kBAAkB;YAClB,IAAI4G,QAAQ1G,QAAQ,EAAE;gBACpB2G,QAAQA,MAAM3E,EAAE,CAAC,YAAY0E,QAAQ1G,QAAQ;YAC/C;YACA,IAAI0G,QAAQ3G,IAAI,EAAE;gBAChB4G,QAAQA,MAAM3E,EAAE,CAAC,QAAQ0E,QAAQ3G,IAAI;YACvC;YACA,IAAI2G,QAAQ/F,OAAO,KAAKkG,WAAW;gBACjCF,QAAQA,MAAM3E,EAAE,CAAC,WAAW0E,QAAQ/F,OAAO;YAC7C;YACA,IAAI+F,QAAQ9F,WAAW,KAAKiG,WAAW;gBACrCF,QAAQA,MAAM3E,EAAE,CAAC,eAAe0E,QAAQ9F,WAAW;YACrD;YAEA,aAAa;YACb,MAAMuB,QAAQuE,QAAQvE,KAAK,IAAI;YAC/B,MAAM2E,SAASJ,QAAQI,MAAM,IAAI;YACjCH,QAAQA,MAAMI,KAAK,CAACD,QAAQA,SAAS3E,QAAQ;YAE7C,wDAAwD;YACxDwE,QAAQA,MAAMzC,KAAK,CAAC,cAAc;gBAAEC,WAAW;YAAM;YAErD,MAAM,EAAE/D,MAAM4G,MAAM,EAAE1G,KAAK,EAAEsG,KAAK,EAAE,GAAG,MAAMD;YAE7C,IAAIrG,OAAO;gBACTS,QAAQT,KAAK,CAAC,6BAA6BA;gBAC3C,OAAO;oBAAE0G,QAAQ,EAAE;oBAAEC,OAAO;gBAAE;YAChC;YAEA,OAAO;gBAAED,QAAQA,UAAU,EAAE;gBAAEC,OAAOL,SAAS;YAAE;QACnD,EAAE,OAAOtG,OAAO;YACdS,QAAQT,KAAK,CAAC,2BAA2BA;YACzC,OAAO;gBAAE0G,QAAQ,EAAE;gBAAEC,OAAO;YAAE;QAChC;IACF;AACF;AAGO,eAAezH,0BAA0BM,MAAc,EAAEoB,WAAgB;IAC9E,MAAMgG,cAAc5H,oBAAoBG,WAAW;IACnD,MAAMyH,YAAYjG,sBAAsB,CAACnB,QAAQoB;AACnD;AAGO,eAAe3B,oBACpBO,MAAc,EACdC,IAAY,EACZC,QAAmC,EACnCC,KAAa,EACbC,WAAmB,EACnBC,WAAgC,CAAC,CAAC;IAElC,MAAM+G,cAAc5H,oBAAoBG,WAAW;IACnD,OAAO,MAAMyH,YAAYrH,WAAW,CAACC,QAAQC,MAAMC,UAAUC,OAAOC,aAAaC;AACnF;MAEA,WAAeb"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ebc0b019957f20a7733633690df725b77d8a7547"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2r33frwgm8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2r33frwgm8();
cov_2r33frwgm8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2r33frwgm8().f[0]++;
  cov_2r33frwgm8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2r33frwgm8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2r33frwgm8().s[3]++;
_export(exports, {
  get SecurityAlertSystem() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[1]++;
    cov_2r33frwgm8().s[4]++;
    return SecurityAlertSystem;
  },
  get createSecurityAlert() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[2]++;
    cov_2r33frwgm8().s[5]++;
    return createSecurityAlert;
  },
  get default() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[3]++;
    cov_2r33frwgm8().s[6]++;
    return _default;
  },
  get processUserSecurityAlerts() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[4]++;
    cov_2r33frwgm8().s[7]++;
    return processUserSecurityAlerts;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_2r33frwgm8().s[8]++, require("../integrations/supabase"));
const _anomalyDetection =
/* istanbul ignore next */
(cov_2r33frwgm8().s[9]++, require("./anomalyDetection"));
class SecurityAlertSystem {
  static getInstance() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[5]++;
    cov_2r33frwgm8().s[10]++;
    if (!SecurityAlertSystem.instance) {
      /* istanbul ignore next */
      cov_2r33frwgm8().b[0][0]++;
      cov_2r33frwgm8().s[11]++;
      SecurityAlertSystem.instance = new SecurityAlertSystem();
    } else
    /* istanbul ignore next */
    {
      cov_2r33frwgm8().b[0][1]++;
    }
    cov_2r33frwgm8().s[12]++;
    return SecurityAlertSystem.instance;
  }
  constructor() {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[6]++;
    cov_2r33frwgm8().s[13]++;
    this.anomalyDetector = _anomalyDetection.AnomalyDetector.getInstance();
  }
  // Crear una nueva alerta de seguridad
  async createAlert(userId, type, severity, title, description, metadata =
  /* istanbul ignore next */
  (cov_2r33frwgm8().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[7]++;
    cov_2r33frwgm8().s[14]++;
    try {
      const {
        data: alert,
        error
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[15]++, await _supabase.supabaseAdmin.from('user_security_alerts').insert({
        user_id: userId,
        type,
        severity,
        title,
        description,
        metadata,
        is_read: false,
        is_resolved: false
      }).select().single());
      /* istanbul ignore next */
      cov_2r33frwgm8().s[16]++;
      if (error) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[2][0]++;
        cov_2r33frwgm8().s[17]++;
        console.error('Error al crear alerta de seguridad:', error);
        /* istanbul ignore next */
        cov_2r33frwgm8().s[18]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[2][1]++;
      }
      // Enviar notificaciones según la severidad
      cov_2r33frwgm8().s[19]++;
      await this.sendAlertNotifications(alert);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[20]++;
      return alert;
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[21]++;
      console.error('Error en createAlert:', error);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[22]++;
      return null;
    }
  }
  // Procesar alertas automáticas para un usuario
  async processAutomaticAlerts(userId, sessionData) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[8]++;
    cov_2r33frwgm8().s[23]++;
    try {
      // Detectar anomalías
      const anomalies =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[24]++, await this.anomalyDetector.analyzeSession(sessionData));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[25]++;
      for (const anomaly of anomalies) {
        /* istanbul ignore next */
        cov_2r33frwgm8().s[26]++;
        if (anomaly.isAnomalous) {
          /* istanbul ignore next */
          cov_2r33frwgm8().b[3][0]++;
          cov_2r33frwgm8().s[27]++;
          await this.createAlert(userId, anomaly.type, anomaly.severity, this.getAlertTitle(anomaly.type), anomaly.description, {
            ...anomaly.metadata,
            detection_time: new Date().toISOString(),
            session_data: sessionData
          });
        } else
        /* istanbul ignore next */
        {
          cov_2r33frwgm8().b[3][1]++;
        }
      }
      // Verificar otras condiciones de alerta
      /* istanbul ignore next */
      cov_2r33frwgm8().s[28]++;
      await this.checkLoginFromNewLocation(userId, sessionData);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[29]++;
      await this.checkMultipleConcurrentSessions(userId);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[30]++;
      await this.checkSuspiciousActivity(userId);
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[31]++;
      console.error('Error al procesar alertas automáticas:', error);
    }
  }
  // Verificar login desde nueva ubicación
  async checkLoginFromNewLocation(userId, sessionData) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[9]++;
    cov_2r33frwgm8().s[32]++;
    try {
      const {
        data: recentSessions
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[33]++, await _supabase.supabaseAdmin.from('user_sessions').select('location, ip_address').eq('user_id', userId).gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()).limit(10));
      const currentLocation =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[34]++, sessionData.location);
      const currentIP =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[35]++, sessionData.ipAddress);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[5][0]++, recentSessions) &&
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[5][1]++, recentSessions.length > 0)) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[4][0]++;
        const knownLocations =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[37]++, recentSessions.map(s => {
          /* istanbul ignore next */
          cov_2r33frwgm8().f[10]++;
          cov_2r33frwgm8().s[38]++;
          return s.location;
        }).filter(Boolean));
        const knownIPs =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[39]++, recentSessions.map(s => {
          /* istanbul ignore next */
          cov_2r33frwgm8().f[11]++;
          cov_2r33frwgm8().s[40]++;
          return s.ip_address;
        }).filter(Boolean));
        const isNewLocation =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[41]++,
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[6][0]++, currentLocation) &&
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[6][1]++, !knownLocations.includes(currentLocation)));
        const isNewIP =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[42]++,
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[7][0]++, currentIP) &&
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[7][1]++, !knownIPs.includes(currentIP)));
        /* istanbul ignore next */
        cov_2r33frwgm8().s[43]++;
        if (
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[9][0]++, isNewLocation) ||
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[9][1]++, isNewIP)) {
          /* istanbul ignore next */
          cov_2r33frwgm8().b[8][0]++;
          cov_2r33frwgm8().s[44]++;
          await this.createAlert(userId, 'new_location_login', 'medium', 'Acceso desde nueva ubicación', `Se detectó un acceso desde una nueva ubicación: ${
          /* istanbul ignore next */
          (cov_2r33frwgm8().b[10][0]++, currentLocation) ||
          /* istanbul ignore next */
          (cov_2r33frwgm8().b[10][1]++, 'Ubicación desconocida')}`, {
            new_location: currentLocation,
            new_ip: currentIP,
            known_locations: knownLocations,
            known_ips: knownIPs
          });
        } else
        /* istanbul ignore next */
        {
          cov_2r33frwgm8().b[8][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[4][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[45]++;
      console.error('Error al verificar nueva ubicación:', error);
    }
  }
  // Verificar múltiples sesiones concurrentes
  async checkMultipleConcurrentSessions(userId) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[12]++;
    cov_2r33frwgm8().s[46]++;
    try {
      const {
        data: activeSessions
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[47]++, await _supabase.supabaseAdmin.from('user_sessions').select('id, ip_address, device_name, location').eq('user_id', userId).gte('last_activity', new Date(Date.now() - 30 * 60 * 1000).toISOString())); // Últimos 30 minutos
      /* istanbul ignore next */
      cov_2r33frwgm8().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[12][0]++, activeSessions) &&
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[12][1]++, activeSessions.length > 3)) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[11][0]++;
        const uniqueIPs =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[49]++, new Set(activeSessions.map(s => {
          /* istanbul ignore next */
          cov_2r33frwgm8().f[13]++;
          cov_2r33frwgm8().s[50]++;
          return s.ip_address;
        })).size);
        const uniqueDevices =
        /* istanbul ignore next */
        (cov_2r33frwgm8().s[51]++, new Set(activeSessions.map(s => {
          /* istanbul ignore next */
          cov_2r33frwgm8().f[14]++;
          cov_2r33frwgm8().s[52]++;
          return s.device_name;
        })).size);
        /* istanbul ignore next */
        cov_2r33frwgm8().s[53]++;
        if (
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[14][0]++, uniqueIPs > 2) ||
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[14][1]++, uniqueDevices > 3)) {
          /* istanbul ignore next */
          cov_2r33frwgm8().b[13][0]++;
          cov_2r33frwgm8().s[54]++;
          await this.createAlert(userId, 'multiple_concurrent_sessions', 'high', 'Múltiples sesiones activas detectadas', `Se detectaron ${activeSessions.length} sesiones activas desde ${uniqueIPs} ubicaciones diferentes`, {
            total_sessions: activeSessions.length,
            unique_ips: uniqueIPs,
            unique_devices: uniqueDevices,
            sessions: activeSessions
          });
        } else
        /* istanbul ignore next */
        {
          cov_2r33frwgm8().b[13][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[11][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[55]++;
      console.error('Error al verificar sesiones concurrentes:', error);
    }
  }
  // Verificar actividad sospechosa
  async checkSuspiciousActivity(userId) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[15]++;
    cov_2r33frwgm8().s[56]++;
    try {
      // Verificar intentos de login fallidos recientes
      const {
        data: failedLogins
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[57]++, await _supabase.supabaseAdmin.from('user_activity').select('*').eq('user_id', userId).eq('action', 'login_failed').gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // Última hora
      .order('created_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[16][0]++, failedLogins) &&
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[16][1]++, failedLogins.length >= 5)) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[15][0]++;
        cov_2r33frwgm8().s[59]++;
        await this.createAlert(userId, 'suspicious_login_attempts', 'high', 'Múltiples intentos de acceso fallidos', `Se detectaron ${failedLogins.length} intentos de acceso fallidos en la última hora`, {
          failed_attempts: failedLogins.length,
          time_window: '1 hour',
          attempts: failedLogins.slice(0, 5)
        });
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[15][1]++;
      }
      // Verificar cambios críticos de configuración
      const {
        data: criticalChanges
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[60]++, await _supabase.supabaseAdmin.from('user_activity').select('*').eq('user_id', userId).in('action', ['password_change', 'email_change', 'enable_2fa', 'disable_2fa']).gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // Últimas 24 horas
      .order('created_at', {
        ascending: false
      }));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[18][0]++, criticalChanges) &&
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[18][1]++, criticalChanges.length >= 3)) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[17][0]++;
        cov_2r33frwgm8().s[62]++;
        await this.createAlert(userId, 'multiple_critical_changes', 'medium', 'Múltiples cambios críticos detectados', `Se realizaron ${criticalChanges.length} cambios críticos en las últimas 24 horas`, {
          changes_count: criticalChanges.length,
          time_window: '24 hours',
          changes: criticalChanges
        });
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[17][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[63]++;
      console.error('Error al verificar actividad sospechosa:', error);
    }
  }
  // Enviar notificaciones de alerta
  async sendAlertNotifications(alert) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[16]++;
    cov_2r33frwgm8().s[64]++;
    try {
      // Obtener preferencias de notificación del usuario
      const {
        data: userPrefs
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[65]++, await _supabase.supabaseAdmin.from('user_preferences').select('preferences').eq('user_id', alert.user_id).single());
      const notificationPrefs =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[66]++,
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[19][0]++, userPrefs?.preferences?.notifications) ||
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[19][1]++, {}));
      // Solo enviar si las alertas de seguridad están habilitadas
      /* istanbul ignore next */
      cov_2r33frwgm8().s[67]++;
      if (!notificationPrefs.securityAlerts) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[20][0]++;
        cov_2r33frwgm8().s[68]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[20][1]++;
      }
      const notifications =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[69]++, []);
      // Email para alertas críticas y altas
      /* istanbul ignore next */
      cov_2r33frwgm8().s[70]++;
      if (
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[22][0]++, alert.severity === 'critical') ||
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[22][1]++, alert.severity === 'high')) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[21][0]++;
        cov_2r33frwgm8().s[71]++;
        if (notificationPrefs.emailNotifications) {
          /* istanbul ignore next */
          cov_2r33frwgm8().b[23][0]++;
          cov_2r33frwgm8().s[72]++;
          notifications.push({
            type: 'email',
            recipient: alert.user_id,
            subject: `🔒 Alerta de Seguridad: ${alert.title}`,
            message: this.generateEmailMessage(alert),
            metadata: {
              alert_id: alert.id
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_2r33frwgm8().b[23][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[21][1]++;
      }
      // Push notifications para todas las alertas
      cov_2r33frwgm8().s[73]++;
      if (notificationPrefs.pushNotifications) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[24][0]++;
        cov_2r33frwgm8().s[74]++;
        notifications.push({
          type: 'push',
          recipient: alert.user_id,
          subject: alert.title,
          message: alert.description,
          metadata: {
            alert_id: alert.id,
            severity: alert.severity
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[24][1]++;
      }
      // Enviar notificaciones (implementación pendiente)
      cov_2r33frwgm8().s[75]++;
      for (const notification of notifications) {
        /* istanbul ignore next */
        cov_2r33frwgm8().s[76]++;
        await this.sendNotification(notification);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[77]++;
      console.error('Error al enviar notificaciones de alerta:', error);
    }
  }
  // Generar mensaje de email para alerta
  generateEmailMessage(alert) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[17]++;
    cov_2r33frwgm8().s[78]++;
    return `
      Hola,

      Se ha detectado una alerta de seguridad en tu cuenta de Pinteya:

      Tipo: ${alert.title}
      Severidad: ${alert.severity.toUpperCase()}
      Descripción: ${alert.description}
      Fecha: ${new Date(alert.created_at).toLocaleString('es-AR')}

      Te recomendamos revisar tu cuenta y tomar las medidas necesarias si no reconoces esta actividad.

      Puedes revisar todas tus alertas de seguridad en: ${process.env.NEXT_PUBLIC_APP_URL}/dashboard/security

      Saludos,
      Equipo de Seguridad de Pinteya
    `;
  }
  // Enviar notificación (placeholder para implementación futura)
  async sendNotification(notification) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[18]++;
    cov_2r33frwgm8().s[79]++;
    // Aquí se implementaría el envío real de notificaciones
    console.log('Enviando notificación:', notification);
  }
  // Obtener título de alerta según el tipo
  getAlertTitle(type) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[19]++;
    const titles =
    /* istanbul ignore next */
    (cov_2r33frwgm8().s[80]++, {
      'new_location_login': 'Acceso desde nueva ubicación',
      'multiple_concurrent_sessions': 'Múltiples sesiones activas',
      'suspicious_login_attempts': 'Intentos de acceso sospechosos',
      'multiple_critical_changes': 'Múltiples cambios críticos',
      'unusual_time_access': 'Acceso en horario inusual',
      'impossible_travel': 'Viaje imposible detectado',
      'device_anomaly': 'Dispositivo anómalo detectado',
      'ip_reputation_alert': 'IP con reputación sospechosa'
    });
    /* istanbul ignore next */
    cov_2r33frwgm8().s[81]++;
    return /* istanbul ignore next */(cov_2r33frwgm8().b[25][0]++, titles[type]) ||
    /* istanbul ignore next */
    (cov_2r33frwgm8().b[25][1]++, 'Alerta de seguridad');
  }
  // Marcar alerta como leída
  async markAlertAsRead(alertId, userId) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[20]++;
    cov_2r33frwgm8().s[82]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[83]++, await _supabase.supabaseAdmin.from('user_security_alerts').update({
        is_read: true
      }).eq('id', alertId).eq('user_id', userId));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[84]++;
      return !error;
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[85]++;
      console.error('Error al marcar alerta como leída:', error);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[86]++;
      return false;
    }
  }
  // Resolver alerta
  async resolveAlert(alertId, userId) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[21]++;
    cov_2r33frwgm8().s[87]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[88]++, await _supabase.supabaseAdmin.from('user_security_alerts').update({
        is_resolved: true,
        resolved_at: new Date().toISOString()
      }).eq('id', alertId).eq('user_id', userId));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[89]++;
      return !error;
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[90]++;
      console.error('Error al resolver alerta:', error);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[91]++;
      return false;
    }
  }
  // Obtener alertas de un usuario
  async getUserAlerts(userId, filters =
  /* istanbul ignore next */
  (cov_2r33frwgm8().b[26][0]++, {})) {
    /* istanbul ignore next */
    cov_2r33frwgm8().f[22]++;
    cov_2r33frwgm8().s[92]++;
    try {
      let query =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[93]++, _supabase.supabaseAdmin.from('user_security_alerts').select('*', {
        count: 'exact'
      }).eq('user_id', userId));
      // Aplicar filtros
      /* istanbul ignore next */
      cov_2r33frwgm8().s[94]++;
      if (filters.severity) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[27][0]++;
        cov_2r33frwgm8().s[95]++;
        query = query.eq('severity', filters.severity);
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[27][1]++;
      }
      cov_2r33frwgm8().s[96]++;
      if (filters.type) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[28][0]++;
        cov_2r33frwgm8().s[97]++;
        query = query.eq('type', filters.type);
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[28][1]++;
      }
      cov_2r33frwgm8().s[98]++;
      if (filters.is_read !== undefined) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[29][0]++;
        cov_2r33frwgm8().s[99]++;
        query = query.eq('is_read', filters.is_read);
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[29][1]++;
      }
      cov_2r33frwgm8().s[100]++;
      if (filters.is_resolved !== undefined) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[30][0]++;
        cov_2r33frwgm8().s[101]++;
        query = query.eq('is_resolved', filters.is_resolved);
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[30][1]++;
      }
      // Paginación
      const limit =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[102]++,
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[31][0]++, filters.limit) ||
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[31][1]++, 50));
      const offset =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[103]++,
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[32][0]++, filters.offset) ||
      /* istanbul ignore next */
      (cov_2r33frwgm8().b[32][1]++, 0));
      /* istanbul ignore next */
      cov_2r33frwgm8().s[104]++;
      query = query.range(offset, offset + limit - 1);
      // Ordenar por fecha de creación (más recientes primero)
      /* istanbul ignore next */
      cov_2r33frwgm8().s[105]++;
      query = query.order('created_at', {
        ascending: false
      });
      const {
        data: alerts,
        error,
        count
      } =
      /* istanbul ignore next */
      (cov_2r33frwgm8().s[106]++, await query);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[107]++;
      if (error) {
        /* istanbul ignore next */
        cov_2r33frwgm8().b[33][0]++;
        cov_2r33frwgm8().s[108]++;
        console.error('Error al obtener alertas:', error);
        /* istanbul ignore next */
        cov_2r33frwgm8().s[109]++;
        return {
          alerts: [],
          total: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_2r33frwgm8().b[33][1]++;
      }
      cov_2r33frwgm8().s[110]++;
      return {
        alerts:
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[34][0]++, alerts) ||
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[34][1]++, []),
        total:
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[35][0]++, count) ||
        /* istanbul ignore next */
        (cov_2r33frwgm8().b[35][1]++, 0)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2r33frwgm8().s[111]++;
      console.error('Error en getUserAlerts:', error);
      /* istanbul ignore next */
      cov_2r33frwgm8().s[112]++;
      return {
        alerts: [],
        total: 0
      };
    }
  }
}
async function processUserSecurityAlerts(userId, sessionData) {
  /* istanbul ignore next */
  cov_2r33frwgm8().f[23]++;
  const alertSystem =
  /* istanbul ignore next */
  (cov_2r33frwgm8().s[113]++, SecurityAlertSystem.getInstance());
  /* istanbul ignore next */
  cov_2r33frwgm8().s[114]++;
  await alertSystem.processAutomaticAlerts(userId, sessionData);
}
async function createSecurityAlert(userId, type, severity, title, description, metadata =
/* istanbul ignore next */
(cov_2r33frwgm8().b[36][0]++, {})) {
  /* istanbul ignore next */
  cov_2r33frwgm8().f[24]++;
  const alertSystem =
  /* istanbul ignore next */
  (cov_2r33frwgm8().s[115]++, SecurityAlertSystem.getInstance());
  /* istanbul ignore next */
  cov_2r33frwgm8().s[116]++;
  return await alertSystem.createAlert(userId, type, severity, title, description, metadata);
}
const _default =
/* istanbul ignore next */
(cov_2r33frwgm8().s[117]++, SecurityAlertSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,