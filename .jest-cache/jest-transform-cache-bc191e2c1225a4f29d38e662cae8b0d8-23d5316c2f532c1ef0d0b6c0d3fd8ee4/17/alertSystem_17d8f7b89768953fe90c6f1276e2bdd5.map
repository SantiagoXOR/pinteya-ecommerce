{"version":3,"names":["SecurityAlertSystem","cov_2r33frwgm8","f","s","createSecurityAlert","default","_default","processUserSecurityAlerts","getInstance","instance","b","constructor","anomalyDetector","_anomalyDetection","AnomalyDetector","createAlert","userId","type","severity","title","description","metadata","data","alert","error","_supabase","supabaseAdmin","from","insert","user_id","is_read","is_resolved","select","single","console","sendAlertNotifications","processAutomaticAlerts","sessionData","anomalies","analyzeSession","anomaly","isAnomalous","getAlertTitle","detection_time","Date","toISOString","session_data","checkLoginFromNewLocation","checkMultipleConcurrentSessions","checkSuspiciousActivity","recentSessions","eq","gte","now","limit","currentLocation","location","currentIP","ipAddress","length","knownLocations","map","filter","Boolean","knownIPs","ip_address","isNewLocation","includes","isNewIP","new_location","new_ip","known_locations","known_ips","activeSessions","uniqueIPs","Set","size","uniqueDevices","device_name","total_sessions","unique_ips","unique_devices","sessions","failedLogins","order","ascending","failed_attempts","time_window","attempts","slice","criticalChanges","in","changes_count","changes","userPrefs","notificationPrefs","preferences","notifications","securityAlerts","emailNotifications","push","recipient","subject","message","generateEmailMessage","alert_id","id","pushNotifications","notification","sendNotification","toUpperCase","created_at","toLocaleString","process","env","NEXT_PUBLIC_APP_URL","log","titles","markAlertAsRead","alertId","update","resolveAlert","resolved_at","getUserAlerts","filters","query","count","undefined","offset","range","alerts","total","alertSystem"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\alertSystem.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SISTEMA DE ALERTAS AUTOMÁTICAS\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { AnomalyDetector } from './anomalyDetection';\r\n\r\n// Tipos para el sistema de alertas\r\nexport interface SecurityAlert {\r\n  id: string;\r\n  user_id: string;\r\n  type: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  metadata: Record<string, any>;\r\n  is_read: boolean;\r\n  is_resolved: boolean;\r\n  created_at: string;\r\n  resolved_at?: string;\r\n}\r\n\r\nexport interface AlertRule {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  enabled: boolean;\r\n  conditions: Record<string, any>;\r\n  actions: string[];\r\n}\r\n\r\nexport interface AlertNotification {\r\n  type: 'email' | 'push' | 'sms';\r\n  recipient: string;\r\n  subject: string;\r\n  message: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Clase principal del sistema de alertas\r\nexport class SecurityAlertSystem {\r\n  private static instance: SecurityAlertSystem;\r\n  private anomalyDetector: AnomalyDetector;\r\n\r\n  public static getInstance(): SecurityAlertSystem {\r\n    if (!SecurityAlertSystem.instance) {\r\n      SecurityAlertSystem.instance = new SecurityAlertSystem();\r\n    }\r\n    return SecurityAlertSystem.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.anomalyDetector = AnomalyDetector.getInstance();\r\n  }\r\n\r\n  // Crear una nueva alerta de seguridad\r\n  async createAlert(\r\n    userId: string,\r\n    type: string,\r\n    severity: SecurityAlert['severity'],\r\n    title: string,\r\n    description: string,\r\n    metadata: Record<string, any> = {}\r\n  ): Promise<SecurityAlert | null> {\r\n    try {\r\n      const { data: alert, error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .insert({\r\n          user_id: userId,\r\n          type,\r\n          severity,\r\n          title,\r\n          description,\r\n          metadata,\r\n          is_read: false,\r\n          is_resolved: false,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error al crear alerta de seguridad:', error);\r\n        return null;\r\n      }\r\n\r\n      // Enviar notificaciones según la severidad\r\n      await this.sendAlertNotifications(alert);\r\n\r\n      return alert;\r\n    } catch (error) {\r\n      console.error('Error en createAlert:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Procesar alertas automáticas para un usuario\r\n  async processAutomaticAlerts(userId: string, sessionData: any): Promise<void> {\r\n    try {\r\n      // Detectar anomalías\r\n      const anomalies = await this.anomalyDetector.analyzeSession(sessionData);\r\n\r\n      for (const anomaly of anomalies) {\r\n        if (anomaly.isAnomalous) {\r\n          await this.createAlert(\r\n            userId,\r\n            anomaly.type,\r\n            anomaly.severity,\r\n            this.getAlertTitle(anomaly.type),\r\n            anomaly.description,\r\n            {\r\n              ...anomaly.metadata,\r\n              detection_time: new Date().toISOString(),\r\n              session_data: sessionData,\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n      // Verificar otras condiciones de alerta\r\n      await this.checkLoginFromNewLocation(userId, sessionData);\r\n      await this.checkMultipleConcurrentSessions(userId);\r\n      await this.checkSuspiciousActivity(userId);\r\n    } catch (error) {\r\n      console.error('Error al procesar alertas automáticas:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar login desde nueva ubicación\r\n  private async checkLoginFromNewLocation(userId: string, sessionData: any): Promise<void> {\r\n    try {\r\n      const { data: recentSessions } = await supabaseAdmin\r\n        .from('user_sessions')\r\n        .select('location, ip_address')\r\n        .eq('user_id', userId)\r\n        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())\r\n        .limit(10);\r\n\r\n      const currentLocation = sessionData.location;\r\n      const currentIP = sessionData.ipAddress;\r\n\r\n      if (recentSessions && recentSessions.length > 0) {\r\n        const knownLocations = recentSessions.map(s => s.location).filter(Boolean);\r\n        const knownIPs = recentSessions.map(s => s.ip_address).filter(Boolean);\r\n\r\n        const isNewLocation = currentLocation && !knownLocations.includes(currentLocation);\r\n        const isNewIP = currentIP && !knownIPs.includes(currentIP);\r\n\r\n        if (isNewLocation || isNewIP) {\r\n          await this.createAlert(\r\n            userId,\r\n            'new_location_login',\r\n            'medium',\r\n            'Acceso desde nueva ubicación',\r\n            `Se detectó un acceso desde una nueva ubicación: ${currentLocation || 'Ubicación desconocida'}`,\r\n            {\r\n              new_location: currentLocation,\r\n              new_ip: currentIP,\r\n              known_locations: knownLocations,\r\n              known_ips: knownIPs,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar nueva ubicación:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar múltiples sesiones concurrentes\r\n  private async checkMultipleConcurrentSessions(userId: string): Promise<void> {\r\n    try {\r\n      const { data: activeSessions } = await supabaseAdmin\r\n        .from('user_sessions')\r\n        .select('id, ip_address, device_name, location')\r\n        .eq('user_id', userId)\r\n        .gte('last_activity', new Date(Date.now() - 30 * 60 * 1000).toISOString()); // Últimos 30 minutos\r\n\r\n      if (activeSessions && activeSessions.length > 3) {\r\n        const uniqueIPs = new Set(activeSessions.map(s => s.ip_address)).size;\r\n        const uniqueDevices = new Set(activeSessions.map(s => s.device_name)).size;\r\n\r\n        if (uniqueIPs > 2 || uniqueDevices > 3) {\r\n          await this.createAlert(\r\n            userId,\r\n            'multiple_concurrent_sessions',\r\n            'high',\r\n            'Múltiples sesiones activas detectadas',\r\n            `Se detectaron ${activeSessions.length} sesiones activas desde ${uniqueIPs} ubicaciones diferentes`,\r\n            {\r\n              total_sessions: activeSessions.length,\r\n              unique_ips: uniqueIPs,\r\n              unique_devices: uniqueDevices,\r\n              sessions: activeSessions,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar sesiones concurrentes:', error);\r\n    }\r\n  }\r\n\r\n  // Verificar actividad sospechosa\r\n  private async checkSuspiciousActivity(userId: string): Promise<void> {\r\n    try {\r\n      // Verificar intentos de login fallidos recientes\r\n      const { data: failedLogins } = await supabaseAdmin\r\n        .from('user_activity')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .eq('action', 'login_failed')\r\n        .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // Última hora\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (failedLogins && failedLogins.length >= 5) {\r\n        await this.createAlert(\r\n          userId,\r\n          'suspicious_login_attempts',\r\n          'high',\r\n          'Múltiples intentos de acceso fallidos',\r\n          `Se detectaron ${failedLogins.length} intentos de acceso fallidos en la última hora`,\r\n          {\r\n            failed_attempts: failedLogins.length,\r\n            time_window: '1 hour',\r\n            attempts: failedLogins.slice(0, 5), // Solo los primeros 5\r\n          }\r\n        );\r\n      }\r\n\r\n      // Verificar cambios críticos de configuración\r\n      const { data: criticalChanges } = await supabaseAdmin\r\n        .from('user_activity')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .in('action', ['password_change', 'email_change', 'enable_2fa', 'disable_2fa'])\r\n        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // Últimas 24 horas\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (criticalChanges && criticalChanges.length >= 3) {\r\n        await this.createAlert(\r\n          userId,\r\n          'multiple_critical_changes',\r\n          'medium',\r\n          'Múltiples cambios críticos detectados',\r\n          `Se realizaron ${criticalChanges.length} cambios críticos en las últimas 24 horas`,\r\n          {\r\n            changes_count: criticalChanges.length,\r\n            time_window: '24 hours',\r\n            changes: criticalChanges,\r\n          }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar actividad sospechosa:', error);\r\n    }\r\n  }\r\n\r\n  // Enviar notificaciones de alerta\r\n  private async sendAlertNotifications(alert: SecurityAlert): Promise<void> {\r\n    try {\r\n      // Obtener preferencias de notificación del usuario\r\n      const { data: userPrefs } = await supabaseAdmin\r\n        .from('user_preferences')\r\n        .select('preferences')\r\n        .eq('user_id', alert.user_id)\r\n        .single();\r\n\r\n      const notificationPrefs = userPrefs?.preferences?.notifications || {};\r\n\r\n      // Solo enviar si las alertas de seguridad están habilitadas\r\n      if (!notificationPrefs.securityAlerts) {\r\n        return;\r\n      }\r\n\r\n      const notifications: AlertNotification[] = [];\r\n\r\n      // Email para alertas críticas y altas\r\n      if (alert.severity === 'critical' || alert.severity === 'high') {\r\n        if (notificationPrefs.emailNotifications) {\r\n          notifications.push({\r\n            type: 'email',\r\n            recipient: alert.user_id,\r\n            subject: `🔒 Alerta de Seguridad: ${alert.title}`,\r\n            message: this.generateEmailMessage(alert),\r\n            metadata: { alert_id: alert.id },\r\n          });\r\n        }\r\n      }\r\n\r\n      // Push notifications para todas las alertas\r\n      if (notificationPrefs.pushNotifications) {\r\n        notifications.push({\r\n          type: 'push',\r\n          recipient: alert.user_id,\r\n          subject: alert.title,\r\n          message: alert.description,\r\n          metadata: { alert_id: alert.id, severity: alert.severity },\r\n        });\r\n      }\r\n\r\n      // Enviar notificaciones (implementación pendiente)\r\n      for (const notification of notifications) {\r\n        await this.sendNotification(notification);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al enviar notificaciones de alerta:', error);\r\n    }\r\n  }\r\n\r\n  // Generar mensaje de email para alerta\r\n  private generateEmailMessage(alert: SecurityAlert): string {\r\n    return `\r\n      Hola,\r\n\r\n      Se ha detectado una alerta de seguridad en tu cuenta de Pinteya:\r\n\r\n      Tipo: ${alert.title}\r\n      Severidad: ${alert.severity.toUpperCase()}\r\n      Descripción: ${alert.description}\r\n      Fecha: ${new Date(alert.created_at).toLocaleString('es-AR')}\r\n\r\n      Te recomendamos revisar tu cuenta y tomar las medidas necesarias si no reconoces esta actividad.\r\n\r\n      Puedes revisar todas tus alertas de seguridad en: ${process.env.NEXT_PUBLIC_APP_URL}/dashboard/security\r\n\r\n      Saludos,\r\n      Equipo de Seguridad de Pinteya\r\n    `;\r\n  }\r\n\r\n  // Enviar notificación (placeholder para implementación futura)\r\n  private async sendNotification(notification: AlertNotification): Promise<void> {\r\n    // Aquí se implementaría el envío real de notificaciones\r\n    console.log('Enviando notificación:', notification);\r\n  }\r\n\r\n  // Obtener título de alerta según el tipo\r\n  private getAlertTitle(type: string): string {\r\n    const titles: Record<string, string> = {\r\n      'new_location_login': 'Acceso desde nueva ubicación',\r\n      'multiple_concurrent_sessions': 'Múltiples sesiones activas',\r\n      'suspicious_login_attempts': 'Intentos de acceso sospechosos',\r\n      'multiple_critical_changes': 'Múltiples cambios críticos',\r\n      'unusual_time_access': 'Acceso en horario inusual',\r\n      'impossible_travel': 'Viaje imposible detectado',\r\n      'device_anomaly': 'Dispositivo anómalo detectado',\r\n      'ip_reputation_alert': 'IP con reputación sospechosa',\r\n    };\r\n\r\n    return titles[type] || 'Alerta de seguridad';\r\n  }\r\n\r\n  // Marcar alerta como leída\r\n  async markAlertAsRead(alertId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .update({ is_read: true })\r\n        .eq('id', alertId)\r\n        .eq('user_id', userId);\r\n\r\n      return !error;\r\n    } catch (error) {\r\n      console.error('Error al marcar alerta como leída:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Resolver alerta\r\n  async resolveAlert(alertId: string, userId: string): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .update({ \r\n          is_resolved: true,\r\n          resolved_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', alertId)\r\n        .eq('user_id', userId);\r\n\r\n      return !error;\r\n    } catch (error) {\r\n      console.error('Error al resolver alerta:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Obtener alertas de un usuario\r\n  async getUserAlerts(\r\n    userId: string,\r\n    filters: {\r\n      severity?: string;\r\n      type?: string;\r\n      is_read?: boolean;\r\n      is_resolved?: boolean;\r\n      limit?: number;\r\n      offset?: number;\r\n    } = {}\r\n  ): Promise<{ alerts: SecurityAlert[]; total: number }> {\r\n    try {\r\n      let query = supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .select('*', { count: 'exact' })\r\n        .eq('user_id', userId);\r\n\r\n      // Aplicar filtros\r\n      if (filters.severity) {\r\n        query = query.eq('severity', filters.severity);\r\n      }\r\n      if (filters.type) {\r\n        query = query.eq('type', filters.type);\r\n      }\r\n      if (filters.is_read !== undefined) {\r\n        query = query.eq('is_read', filters.is_read);\r\n      }\r\n      if (filters.is_resolved !== undefined) {\r\n        query = query.eq('is_resolved', filters.is_resolved);\r\n      }\r\n\r\n      // Paginación\r\n      const limit = filters.limit || 50;\r\n      const offset = filters.offset || 0;\r\n      query = query.range(offset, offset + limit - 1);\r\n\r\n      // Ordenar por fecha de creación (más recientes primero)\r\n      query = query.order('created_at', { ascending: false });\r\n\r\n      const { data: alerts, error, count } = await query;\r\n\r\n      if (error) {\r\n        console.error('Error al obtener alertas:', error);\r\n        return { alerts: [], total: 0 };\r\n      }\r\n\r\n      return { alerts: alerts || [], total: count || 0 };\r\n    } catch (error) {\r\n      console.error('Error en getUserAlerts:', error);\r\n      return { alerts: [], total: 0 };\r\n    }\r\n  }\r\n}\r\n\r\n// Función auxiliar para procesar alertas automáticas\r\nexport async function processUserSecurityAlerts(userId: string, sessionData: any): Promise<void> {\r\n  const alertSystem = SecurityAlertSystem.getInstance();\r\n  await alertSystem.processAutomaticAlerts(userId, sessionData);\r\n}\r\n\r\n// Función auxiliar para crear alerta manual\r\nexport async function createSecurityAlert(\r\n  userId: string,\r\n  type: string,\r\n  severity: SecurityAlert['severity'],\r\n  title: string,\r\n  description: string,\r\n  metadata: Record<string, any> = {}\r\n): Promise<SecurityAlert | null> {\r\n  const alertSystem = SecurityAlertSystem.getInstance();\r\n  return await alertSystem.createAlert(userId, type, severity, title, description, metadata);\r\n}\r\n\r\nexport default SecurityAlertSystem;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}