{"version":3,"names":["AndreaniApi","cov_lqa19m9vg","f","s","CorreoArgentinoApi","CourierAPI","CourierAPIFactory","OCAApi","constructor","config","lastRequest","rateLimit","now","Date","timeSinceLastRequest","minInterval","window","requests","b","delay","Promise","resolve","setTimeout","request","endpoint","options","url","baseUrl","headers","apiKey","lastError","attempt","retries","controller","AbortController","timeoutId","abort","timeout","response","fetch","signal","clearTimeout","ok","Error","status","statusText","json","error","Math","pow","environment","name","getQuote","method","body","JSON","stringify","PesoTotal","package","weight","VolumenTotal","calculateVolume","dimensions","CodigoPostalOrigen","origin","postalCode","CodigoPostalDestino","destination","CantidadPaquetes","Cuit","parseOCAQuotes","console","trackShipment","trackingNumber","Pieza","NroDocumentoCliente","parseOCATracking","createShipment","shipmentData","cancelShipment","length","width","height","Tarifas","map","tarifa","courier","serviceType","Producto","cost","parseFloat","Total","estimatedDays","parseInt","PlazoEntrega","estimatedDelivery","calculateDeliveryDate","restrictions","Restricciones","events","Eventos","push","evento","timestamp","Fecha","mapOCAStatus","Estado","description","Descripcion","location","city","Sucursal","Ciudad","state","Provincia","facility","Nombre","lastUpdate","toISOString","ocaStatus","statusMap","days","date","setDate","getDate","split","cpOrigen","cpDestino","peso","volumen","valorDeclarado","declaredValue","parseAndreaniQuotes","parseAndreaniTracking","cotizaciones","cotizacion","producto","descripcion","tarifaConIva","plazoEntrega","trazas","traza","fecha","mapAndreaniStatus","estado","sucursal","localidad","provincia","andreaniStatus","instances","Map","getCourierAPI","key","has","api","set","get","getMultipleQuotes","couriers","promises","results","allSettled","filter","result","flatMap","value","trackMultipleShipments","trackingRequests"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\courier-apis.ts"],"sourcesContent":["// =====================================================\r\n// INTEGRACIÓN: APIS DE COURIERS ARGENTINOS\r\n// Descripción: Conectores para OCA, Andreani, Correo Argentino y MercadoEnvíos\r\n// Basado en: APIs REST + Webhooks + Rate Limiting\r\n// =====================================================\r\n\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// INTERFACES COMUNES\r\n// =====================================================\r\n\r\nexport interface CourierAPIConfig {\r\n  name: string;\r\n  baseUrl: string;\r\n  apiKey: string;\r\n  environment: 'sandbox' | 'production';\r\n  rateLimit: {\r\n    requests: number;\r\n    window: number; // milliseconds\r\n  };\r\n  timeout: number;\r\n  retries: number;\r\n}\r\n\r\nexport interface TrackingResponse {\r\n  courier: string;\r\n  trackingNumber: string;\r\n  status: string;\r\n  events: TrackingEvent[];\r\n  estimatedDelivery?: string;\r\n  lastUpdate: string;\r\n}\r\n\r\nexport interface TrackingEvent {\r\n  timestamp: string;\r\n  status: string;\r\n  description: string;\r\n  location?: {\r\n    city: string;\r\n    state: string;\r\n    coordinates?: [number, number];\r\n  };\r\n  facility?: string;\r\n}\r\n\r\nexport interface ShippingQuoteRequest {\r\n  origin: {\r\n    postalCode: string;\r\n    city: string;\r\n    state: string;\r\n  };\r\n  destination: {\r\n    postalCode: string;\r\n    city: string;\r\n    state: string;\r\n  };\r\n  package: {\r\n    weight: number;\r\n    dimensions: {\r\n      length: number;\r\n      width: number;\r\n      height: number;\r\n    };\r\n    declaredValue?: number;\r\n  };\r\n  serviceType?: string;\r\n}\r\n\r\nexport interface ShippingQuote {\r\n  courier: string;\r\n  serviceType: string;\r\n  cost: number;\r\n  estimatedDays: number;\r\n  estimatedDelivery: string;\r\n  restrictions?: string[];\r\n}\r\n\r\n// =====================================================\r\n// CLASE BASE PARA COURIERS\r\n// =====================================================\r\n\r\nexport abstract class CourierAPI {\r\n  protected config: CourierAPIConfig;\r\n  protected lastRequest: number = 0;\r\n  \r\n  constructor(config: CourierAPIConfig) {\r\n    this.config = config;\r\n  }\r\n  \r\n  // Rate limiting\r\n  protected async rateLimit(): Promise<void> {\r\n    const now = Date.now();\r\n    const timeSinceLastRequest = now - this.lastRequest;\r\n    const minInterval = this.config.rateLimit.window / this.config.rateLimit.requests;\r\n    \r\n    if (timeSinceLastRequest < minInterval) {\r\n      const delay = minInterval - timeSinceLastRequest;\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n    \r\n    this.lastRequest = Date.now();\r\n  }\r\n  \r\n  // HTTP request con retry\r\n  protected async request<T>(\r\n    endpoint: string, \r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    await this.rateLimit();\r\n    \r\n    const url = `${this.config.baseUrl}${endpoint}`;\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${this.config.apiKey}`,\r\n      ...options.headers\r\n    };\r\n    \r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt <= this.config.retries; attempt++) {\r\n      try {\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\r\n        \r\n        const response = await fetch(url, {\r\n          ...options,\r\n          headers,\r\n          signal: controller.signal\r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n        \r\n        return await response.json();\r\n        \r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt < this.config.retries) {\r\n          const delay = Math.pow(2, attempt) * 1000; // Exponential backoff\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  }\r\n  \r\n  // Métodos abstractos que deben implementar los couriers\r\n  abstract getQuote(request: ShippingQuoteRequest): Promise<ShippingQuote[]>;\r\n  abstract trackShipment(trackingNumber: string): Promise<TrackingResponse>;\r\n  abstract createShipment(shipmentData: any): Promise<any>;\r\n  abstract cancelShipment(trackingNumber: string): Promise<boolean>;\r\n}\r\n\r\n// =====================================================\r\n// OCA (ORGANIZACIÓN COORDINADORA ARGENTINA)\r\n// =====================================================\r\n\r\nexport class OCAApi extends CourierAPI {\r\n  constructor(apiKey: string, environment: 'sandbox' | 'production' = 'sandbox') {\r\n    super({\r\n      name: 'OCA',\r\n      baseUrl: environment === 'production' \r\n        ? 'https://webservice.oca.com.ar/oep_tracking/Oep_Track.asmx'\r\n        : 'https://webservice.oca.com.ar/oep_tracking_test/Oep_Track.asmx',\r\n      apiKey,\r\n      environment,\r\n      rateLimit: { requests: 100, window: 60000 }, // 100 req/min\r\n      timeout: 30000,\r\n      retries: 3\r\n    });\r\n  }\r\n  \r\n  async getQuote(request: ShippingQuoteRequest): Promise<ShippingQuote[]> {\r\n    try {\r\n      const response = await this.request<any>('/Tarifar_Envio_Corporativo', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          PesoTotal: request.package.weight,\r\n          VolumenTotal: this.calculateVolume(request.package.dimensions),\r\n          CodigoPostalOrigen: request.origin.postalCode,\r\n          CodigoPostalDestino: request.destination.postalCode,\r\n          CantidadPaquetes: 1,\r\n          Cuit: this.config.apiKey\r\n        })\r\n      });\r\n      \r\n      return this.parseOCAQuotes(response);\r\n      \r\n    } catch (error) {\r\n      console.error('Error getting OCA quote:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async trackShipment(trackingNumber: string): Promise<TrackingResponse> {\r\n    try {\r\n      const response = await this.request<any>('/Tracking_Pieza', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          Pieza: trackingNumber,\r\n          NroDocumentoCliente: this.config.apiKey\r\n        })\r\n      });\r\n      \r\n      return this.parseOCATracking(response, trackingNumber);\r\n      \r\n    } catch (error) {\r\n      console.error('Error tracking OCA shipment:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async createShipment(shipmentData: any): Promise<any> {\r\n    // Implementar creación de envío OCA\r\n    throw new Error('OCA createShipment not implemented yet');\r\n  }\r\n  \r\n  async cancelShipment(trackingNumber: string): Promise<boolean> {\r\n    // Implementar cancelación OCA\r\n    throw new Error('OCA cancelShipment not implemented yet');\r\n  }\r\n  \r\n  private calculateVolume(dimensions: { length: number; width: number; height: number }): number {\r\n    return dimensions.length * dimensions.width * dimensions.height;\r\n  }\r\n  \r\n  private parseOCAQuotes(response: any): ShippingQuote[] {\r\n    // Parsear respuesta de OCA a formato estándar\r\n    if (!response.Tarifas) {return [];}\r\n    \r\n    return response.Tarifas.map((tarifa: any) => ({\r\n      courier: 'OCA',\r\n      serviceType: tarifa.Producto,\r\n      cost: parseFloat(tarifa.Total),\r\n      estimatedDays: parseInt(tarifa.PlazoEntrega),\r\n      estimatedDelivery: this.calculateDeliveryDate(parseInt(tarifa.PlazoEntrega)),\r\n      restrictions: tarifa.Restricciones ? [tarifa.Restricciones] : []\r\n    }));\r\n  }\r\n  \r\n  private parseOCATracking(response: any, trackingNumber: string): TrackingResponse {\r\n    const events: TrackingEvent[] = [];\r\n    \r\n    if (response.Eventos) {\r\n      events.push(...response.Eventos.map((evento: any) => ({\r\n        timestamp: evento.Fecha,\r\n        status: this.mapOCAStatus(evento.Estado),\r\n        description: evento.Descripcion,\r\n        location: {\r\n          city: evento.Sucursal?.Ciudad || '',\r\n          state: evento.Sucursal?.Provincia || ''\r\n        },\r\n        facility: evento.Sucursal?.Nombre\r\n      })));\r\n    }\r\n    \r\n    return {\r\n      courier: 'OCA',\r\n      trackingNumber,\r\n      status: events.length > 0 ? events[0].status : 'unknown',\r\n      events,\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  private mapOCAStatus(ocaStatus: string): string {\r\n    const statusMap: Record<string, string> = {\r\n      'En Origen': 'picked_up',\r\n      'En Tránsito': 'in_transit',\r\n      'En Destino': 'out_for_delivery',\r\n      'Entregado': 'delivered',\r\n      'No Entregado': 'exception'\r\n    };\r\n    \r\n    return statusMap[ocaStatus] || 'unknown';\r\n  }\r\n  \r\n  private calculateDeliveryDate(days: number): string {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + days);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// ANDREANI\r\n// =====================================================\r\n\r\nexport class AndreaniApi extends CourierAPI {\r\n  constructor(apiKey: string, environment: 'sandbox' | 'production' = 'sandbox') {\r\n    super({\r\n      name: 'Andreani',\r\n      baseUrl: environment === 'production' \r\n        ? 'https://apis.andreani.com/v2'\r\n        : 'https://apis.andreani.com/v2', // Mismo endpoint para ambos\r\n      apiKey,\r\n      environment,\r\n      rateLimit: { requests: 200, window: 60000 }, // 200 req/min\r\n      timeout: 25000,\r\n      retries: 3\r\n    });\r\n  }\r\n  \r\n  async getQuote(request: ShippingQuoteRequest): Promise<ShippingQuote[]> {\r\n    try {\r\n      const response = await this.request<any>('/cotizaciones', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          cpOrigen: request.origin.postalCode,\r\n          cpDestino: request.destination.postalCode,\r\n          peso: request.package.weight,\r\n          volumen: this.calculateVolume(request.package.dimensions),\r\n          valorDeclarado: request.package.declaredValue || 0\r\n        })\r\n      });\r\n      \r\n      return this.parseAndreaniQuotes(response);\r\n      \r\n    } catch (error) {\r\n      console.error('Error getting Andreani quote:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async trackShipment(trackingNumber: string): Promise<TrackingResponse> {\r\n    try {\r\n      const response = await this.request<any>(`/envios/${trackingNumber}/trazas`);\r\n      \r\n      return this.parseAndreaniTracking(response, trackingNumber);\r\n      \r\n    } catch (error) {\r\n      console.error('Error tracking Andreani shipment:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async createShipment(shipmentData: any): Promise<any> {\r\n    // Implementar creación de envío Andreani\r\n    throw new Error('Andreani createShipment not implemented yet');\r\n  }\r\n  \r\n  async cancelShipment(trackingNumber: string): Promise<boolean> {\r\n    // Implementar cancelación Andreani\r\n    throw new Error('Andreani cancelShipment not implemented yet');\r\n  }\r\n  \r\n  private calculateVolume(dimensions: { length: number; width: number; height: number }): number {\r\n    return (dimensions.length * dimensions.width * dimensions.height) / 1000000; // cm³ to m³\r\n  }\r\n  \r\n  private parseAndreaniQuotes(response: any): ShippingQuote[] {\r\n    if (!response.cotizaciones) {return [];}\r\n    \r\n    return response.cotizaciones.map((cotizacion: any) => ({\r\n      courier: 'Andreani',\r\n      serviceType: cotizacion.producto.descripcion,\r\n      cost: parseFloat(cotizacion.tarifaConIva),\r\n      estimatedDays: parseInt(cotizacion.plazoEntrega),\r\n      estimatedDelivery: this.calculateDeliveryDate(parseInt(cotizacion.plazoEntrega)),\r\n      restrictions: []\r\n    }));\r\n  }\r\n  \r\n  private parseAndreaniTracking(response: any, trackingNumber: string): TrackingResponse {\r\n    const events: TrackingEvent[] = [];\r\n    \r\n    if (response.trazas) {\r\n      events.push(...response.trazas.map((traza: any) => ({\r\n        timestamp: traza.fecha,\r\n        status: this.mapAndreaniStatus(traza.estado),\r\n        description: traza.descripcion,\r\n        location: {\r\n          city: traza.sucursal?.localidad || '',\r\n          state: traza.sucursal?.provincia || ''\r\n        },\r\n        facility: traza.sucursal?.descripcion\r\n      })));\r\n    }\r\n    \r\n    return {\r\n      courier: 'Andreani',\r\n      trackingNumber,\r\n      status: events.length > 0 ? events[0].status : 'unknown',\r\n      events,\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  private mapAndreaniStatus(andreaniStatus: string): string {\r\n    const statusMap: Record<string, string> = {\r\n      'Admitido': 'confirmed',\r\n      'En tránsito': 'in_transit',\r\n      'En reparto': 'out_for_delivery',\r\n      'Entregado': 'delivered',\r\n      'No entregado': 'exception'\r\n    };\r\n    \r\n    return statusMap[andreaniStatus] || 'unknown';\r\n  }\r\n  \r\n  private calculateDeliveryDate(days: number): string {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + days);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// CORREO ARGENTINO\r\n// =====================================================\r\n\r\nexport class CorreoArgentinoApi extends CourierAPI {\r\n  constructor(apiKey: string, environment: 'sandbox' | 'production' = 'sandbox') {\r\n    super({\r\n      name: 'Correo Argentino',\r\n      baseUrl: environment === 'production' \r\n        ? 'https://api.correoargentino.com.ar/v1'\r\n        : 'https://api-test.correoargentino.com.ar/v1',\r\n      apiKey,\r\n      environment,\r\n      rateLimit: { requests: 150, window: 60000 }, // 150 req/min\r\n      timeout: 30000,\r\n      retries: 3\r\n    });\r\n  }\r\n  \r\n  async getQuote(request: ShippingQuoteRequest): Promise<ShippingQuote[]> {\r\n    // Implementar cotización Correo Argentino\r\n    return [{\r\n      courier: 'Correo Argentino',\r\n      serviceType: 'Encomienda Clásica',\r\n      cost: 1500 + (request.package.weight * 200), // Simulado\r\n      estimatedDays: 5,\r\n      estimatedDelivery: this.calculateDeliveryDate(5),\r\n      restrictions: []\r\n    }];\r\n  }\r\n  \r\n  async trackShipment(trackingNumber: string): Promise<TrackingResponse> {\r\n    // Implementar tracking Correo Argentino\r\n    return {\r\n      courier: 'Correo Argentino',\r\n      trackingNumber,\r\n      status: 'in_transit',\r\n      events: [{\r\n        timestamp: new Date().toISOString(),\r\n        status: 'in_transit',\r\n        description: 'En tránsito hacia destino',\r\n        location: {\r\n          city: 'Buenos Aires',\r\n          state: 'Buenos Aires'\r\n        }\r\n      }],\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  async createShipment(shipmentData: any): Promise<any> {\r\n    throw new Error('Correo Argentino createShipment not implemented yet');\r\n  }\r\n  \r\n  async cancelShipment(trackingNumber: string): Promise<boolean> {\r\n    throw new Error('Correo Argentino cancelShipment not implemented yet');\r\n  }\r\n  \r\n  private calculateDeliveryDate(days: number): string {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + days);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// FACTORY PARA COURIERS\r\n// =====================================================\r\n\r\nexport class CourierAPIFactory {\r\n  private static instances: Map<string, CourierAPI> = new Map();\r\n  \r\n  static getCourierAPI(\r\n    courier: 'oca' | 'andreani' | 'correo_argentino',\r\n    apiKey: string,\r\n    environment: 'sandbox' | 'production' = 'sandbox'\r\n  ): CourierAPI {\r\n    \r\n    const key = `${courier}_${environment}`;\r\n    \r\n    if (!this.instances.has(key)) {\r\n      let api: CourierAPI;\r\n      \r\n      switch (courier) {\r\n        case 'oca':\r\n          api = new OCAApi(apiKey, environment);\r\n          break;\r\n        case 'andreani':\r\n          api = new AndreaniApi(apiKey, environment);\r\n          break;\r\n        case 'correo_argentino':\r\n          api = new CorreoArgentinoApi(apiKey, environment);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported courier: ${courier}`);\r\n      }\r\n      \r\n      this.instances.set(key, api);\r\n    }\r\n    \r\n    return this.instances.get(key)!;\r\n  }\r\n  \r\n  static async getMultipleQuotes(\r\n    request: ShippingQuoteRequest,\r\n    couriers: Array<{\r\n      name: 'oca' | 'andreani' | 'correo_argentino';\r\n      apiKey: string;\r\n      environment?: 'sandbox' | 'production';\r\n    }>\r\n  ): Promise<ShippingQuote[]> {\r\n    \r\n    const promises = couriers.map(async (courier) => {\r\n      try {\r\n        const api = this.getCourierAPI(courier.name, courier.apiKey, courier.environment);\r\n        return await api.getQuote(request);\r\n      } catch (error) {\r\n        console.error(`Error getting quote from ${courier.name}:`, error);\r\n        return [];\r\n      }\r\n    });\r\n    \r\n    const results = await Promise.allSettled(promises);\r\n    \r\n    return results\r\n      .filter((result): result is PromiseFulfilledResult<ShippingQuote[]> => \r\n        result.status === 'fulfilled'\r\n      )\r\n      .flatMap(result => result.value);\r\n  }\r\n  \r\n  static async trackMultipleShipments(\r\n    trackingRequests: Array<{\r\n      courier: 'oca' | 'andreani' | 'correo_argentino';\r\n      trackingNumber: string;\r\n      apiKey: string;\r\n      environment?: 'sandbox' | 'production';\r\n    }>\r\n  ): Promise<TrackingResponse[]> {\r\n    \r\n    const promises = trackingRequests.map(async (request) => {\r\n      try {\r\n        const api = this.getCourierAPI(request.courier, request.apiKey, request.environment);\r\n        return await api.trackShipment(request.trackingNumber);\r\n      } catch (error) {\r\n        console.error(`Error tracking ${request.courier} shipment:`, error);\r\n        return null;\r\n      }\r\n    });\r\n    \r\n    const results = await Promise.allSettled(promises);\r\n    \r\n    return results\r\n      .filter((result): result is PromiseFulfilledResult<TrackingResponse | null> => \r\n        result.status === 'fulfilled' && result.value !== null\r\n      )\r\n      .map(result => result.value!);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}