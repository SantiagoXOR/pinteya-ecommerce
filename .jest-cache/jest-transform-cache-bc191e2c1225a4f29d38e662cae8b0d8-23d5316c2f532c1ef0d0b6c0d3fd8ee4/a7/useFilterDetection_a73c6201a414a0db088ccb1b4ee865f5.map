{"version":3,"names":["cov_p289n7t0y","actualCoverage","s","default","f","_default","generateFilterDescription","useFilterDetection","useHasActiveFilters","searchParams","filterSummary","_react","useMemo","b","filters","totalFilters","searchQuery","get","trim","search","category","brand","minPriceStr","maxPriceStr","minPrice","parseFloat","isNaN","maxPrice","pageStr","page","parseInt","sortBy","sortOrder","hasActiveFilters","parts","push","join"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useFilterDetection.ts"],"sourcesContent":["'use client';\r\n\r\nimport { useMemo } from 'react';\r\nimport { ReadonlyURLSearchParams } from 'next/navigation';\r\n\r\n/**\r\n * Interface para el resumen de filtros activos\r\n */\r\nexport interface FilterSummary {\r\n  search?: string;\r\n  category?: string;\r\n  brand?: string;\r\n  minPrice?: number;\r\n  maxPrice?: number;\r\n  page?: number;\r\n  sortBy?: string;\r\n  sortOrder?: 'asc' | 'desc';\r\n  totalFilters: number;\r\n}\r\n\r\n/**\r\n * Hook para detectar filtros activos en los parámetros de URL\r\n * Determina si la página debe mostrar la vista filtrada o el homepage normal\r\n */\r\nexport function useFilterDetection(searchParams: ReadonlyURLSearchParams | null) {\r\n  const filterSummary = useMemo<FilterSummary | null>(() => {\r\n    if (!searchParams) {return null;}\r\n\r\n    const filters: Partial<FilterSummary> = {};\r\n    let totalFilters = 0;\r\n\r\n    // Detectar parámetro de búsqueda (search o q)\r\n    const searchQuery = searchParams.get('search') || searchParams.get('q');\r\n    if (searchQuery && searchQuery.trim()) {\r\n      filters.search = searchQuery.trim();\r\n      totalFilters++;\r\n    }\r\n\r\n    // Detectar filtro de categoría\r\n    const category = searchParams.get('category');\r\n    if (category && category.trim()) {\r\n      filters.category = category.trim();\r\n      totalFilters++;\r\n    }\r\n\r\n    // Detectar filtro de marca\r\n    const brand = searchParams.get('brand');\r\n    if (brand && brand.trim()) {\r\n      filters.brand = brand.trim();\r\n      totalFilters++;\r\n    }\r\n\r\n    // Detectar filtros de precio\r\n    const minPriceStr = searchParams.get('minPrice');\r\n    const maxPriceStr = searchParams.get('maxPrice');\r\n    \r\n    if (minPriceStr) {\r\n      const minPrice = parseFloat(minPriceStr);\r\n      if (!isNaN(minPrice) && minPrice > 0) {\r\n        filters.minPrice = minPrice;\r\n        totalFilters++;\r\n      }\r\n    }\r\n\r\n    if (maxPriceStr) {\r\n      const maxPrice = parseFloat(maxPriceStr);\r\n      if (!isNaN(maxPrice) && maxPrice > 0) {\r\n        filters.maxPrice = maxPrice;\r\n        totalFilters++;\r\n      }\r\n    }\r\n\r\n    // Detectar paginación (no cuenta como filtro para la vista, pero se incluye)\r\n    const pageStr = searchParams.get('page');\r\n    if (pageStr) {\r\n      const page = parseInt(pageStr, 10);\r\n      if (!isNaN(page) && page > 0) {\r\n        filters.page = page;\r\n        // La paginación no cuenta como filtro activo para cambiar la vista\r\n      }\r\n    }\r\n\r\n    // Detectar ordenamiento (no cuenta como filtro para la vista, pero se incluye)\r\n    const sortBy = searchParams.get('sortBy');\r\n    const sortOrder = searchParams.get('sortOrder');\r\n    \r\n    if (sortBy && sortBy.trim()) {\r\n      filters.sortBy = sortBy.trim();\r\n      // El ordenamiento no cuenta como filtro activo para cambiar la vista\r\n    }\r\n\r\n    if (sortOrder && (sortOrder === 'asc' || sortOrder === 'desc')) {\r\n      filters.sortOrder = sortOrder;\r\n      // El ordenamiento no cuenta como filtro activo para cambiar la vista\r\n    }\r\n\r\n    // Solo retornar summary si hay filtros activos\r\n    if (totalFilters === 0) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      ...filters,\r\n      totalFilters\r\n    } as FilterSummary;\r\n  }, [searchParams]);\r\n\r\n  // Determinar si hay filtros activos (excluyendo page, sortBy, sortOrder)\r\n  const hasActiveFilters = useMemo(() => {\r\n    return filterSummary !== null && filterSummary.totalFilters > 0;\r\n  }, [filterSummary]);\r\n\r\n  return {\r\n    hasActiveFilters,\r\n    filterSummary\r\n  };\r\n}\r\n\r\n/**\r\n * Hook simplificado para solo verificar si hay filtros activos\r\n */\r\nexport function useHasActiveFilters(searchParams: ReadonlyURLSearchParams | null): boolean {\r\n  const { hasActiveFilters } = useFilterDetection(searchParams);\r\n  return hasActiveFilters;\r\n}\r\n\r\n/**\r\n * Función utilitaria para generar un texto descriptivo de los filtros activos\r\n */\r\nexport function generateFilterDescription(filterSummary: FilterSummary | null): string {\r\n  if (!filterSummary || filterSummary.totalFilters === 0) {\r\n    return '';\r\n  }\r\n\r\n  const parts: string[] = [];\r\n\r\n  if (filterSummary.search) {\r\n    parts.push(`búsqueda: \"${filterSummary.search}\"`);\r\n  }\r\n\r\n  if (filterSummary.category) {\r\n    parts.push(`categoría: ${filterSummary.category}`);\r\n  }\r\n\r\n  if (filterSummary.brand) {\r\n    parts.push(`marca: ${filterSummary.brand}`);\r\n  }\r\n\r\n  if (filterSummary.minPrice || filterSummary.maxPrice) {\r\n    if (filterSummary.minPrice && filterSummary.maxPrice) {\r\n      parts.push(`precio: $${filterSummary.minPrice} - $${filterSummary.maxPrice}`);\r\n    } else if (filterSummary.minPrice) {\r\n      parts.push(`precio mínimo: $${filterSummary.minPrice}`);\r\n    } else if (filterSummary.maxPrice) {\r\n      parts.push(`precio máximo: $${filterSummary.maxPrice}`);\r\n    }\r\n  }\r\n\r\n  return parts.join(', ');\r\n}\r\n\r\nexport default useFilterDetection;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}