c8dfd3e1d273ffbe24d2876707d78a1a
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_25wkcbcvbx() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\route.ts";
  var hash = "eafbd2a1a6999b88039dff0dd421199f58c3e4bf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 78
        }
      },
      "9": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 79
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "11": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "12": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "13": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 82
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "17": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 51,
          column: 35
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "19": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "20": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 58,
          column: 68
        }
      },
      "21": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 72
        }
      },
      "22": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 95
        }
      },
      "23": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 31
        }
      },
      "24": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "25": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 73
        }
      },
      "26": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "27": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "28": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "29": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "30": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 51
        }
      },
      "31": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "32": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "33": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "34": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 122,
          column: 82
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "36": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 128,
          column: 15
        }
      },
      "37": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 130,
          column: 45
        }
      },
      "38": {
        start: {
          line: 131,
          column: 21
        },
        end: {
          line: 131,
          column: 41
        }
      },
      "39": {
        start: {
          line: 132,
          column: 46
        },
        end: {
          line: 132,
          column: 50
        }
      },
      "40": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "41": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "42": {
        start: {
          line: 140,
          column: 21
        },
        end: {
          line: 140,
          column: 25
        }
      },
      "43": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "44": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "45": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "46": {
        start: {
          line: 151,
          column: 48
        },
        end: {
          line: 155,
          column: 36
        }
      },
      "47": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "48": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 161,
          column: 23
        }
      },
      "49": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 166,
          column: 23
        }
      },
      "50": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 171,
          column: 18
        }
      },
      "51": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 176,
          column: 19
        }
      },
      "52": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "53": {
        start: {
          line: 180,
          column: 48
        },
        end: {
          line: 180,
          column: 95
        }
      },
      "54": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "55": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 185,
          column: 23
        }
      },
      "56": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 190,
          column: 23
        }
      },
      "57": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 195,
          column: 18
        }
      },
      "58": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "59": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 22
        }
      },
      "60": {
        start: {
          line: 202,
          column: 39
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "61": {
        start: {
          line: 203,
          column: 59
        },
        end: {
          line: 205,
          column: 18
        }
      },
      "62": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 212,
          column: 17
        }
      },
      "63": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 211,
          column: 23
        }
      },
      "64": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 215,
          column: 18
        }
      },
      "65": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 22
        }
      },
      "66": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 222,
          column: 19
        }
      },
      "67": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 233,
          column: 11
        }
      },
      "68": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "69": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "70": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 71
        }
      },
      "71": {
        start: {
          line: 247,
          column: 13
        },
        end: {
          line: 247,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "getHandler",
        decl: {
          start: {
            line: 30,
            column: 19
          },
          end: {
            line: 30,
            column: 29
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "postHandler",
        decl: {
          start: {
            line: 119,
            column: 19
          },
          end: {
            line: 119,
            column: 30
          }
        },
        loc: {
          start: {
            line: 119,
            column: 40
          },
          end: {
            line: 245,
            column: 1
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 41,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 41,
            column: 58
          }
        }, {
          start: {
            line: 41,
            column: 62
          },
          end: {
            line: 41,
            column: 71
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 41
          }
        }, {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 48
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 58,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 58,
            column: 59
          }
        }, {
          start: {
            line: 58,
            column: 63
          },
          end: {
            line: 58,
            column: 68
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 66
          }
        }, {
          start: {
            line: 98,
            column: 70
          },
          end: {
            line: 98,
            column: 71
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 45
          }
        }, {
          start: {
            line: 99,
            column: 49
          },
          end: {
            line: 99,
            column: 50
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 57
          }
        }, {
          start: {
            line: 104,
            column: 60
          },
          end: {
            line: 104,
            column: 75
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 19
          },
          end: {
            line: 105,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 44
          },
          end: {
            line: 105,
            column: 55
          }
        }, {
          start: {
            line: 105,
            column: 58
          },
          end: {
            line: 105,
            column: 67
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 41
          }
        }, {
          start: {
            line: 127,
            column: 45
          },
          end: {
            line: 127,
            column: 48
          }
        }],
        line: 127
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 177,
            column: 22
          }
        }, {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 200,
            column: 22
          }
        }, {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 216,
            column: 22
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 222,
            column: 19
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "14": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "15": {
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 39
          },
          end: {
            line: 202,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 39
          },
          end: {
            line: 202,
            column: 63
          }
        }, {
          start: {
            line: 202,
            column: 67
          },
          end: {
            line: 202,
            column: 69
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 212,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 212,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "18": {
        loc: {
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 35
          }
        }, {
          start: {
            line: 214,
            column: 39
          },
          end: {
            line: 214,
            column: 43
          }
        }],
        line: 214
      },
      "19": {
        loc: {
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 236,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 44
          },
          end: {
            line: 236,
            column: 57
          }
        }, {
          start: {
            line: 236,
            column: 60
          },
          end: {
            line: 236,
            column: 75
          }
        }],
        line: 236
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de monitoreo para panel administrativo\r\n * Proporciona m\xE9tricas de performance y alertas de seguridad\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/supabase-auth-utils';\r\nimport { \r\n  getPerformanceMetrics, \r\n  getActiveAlerts,\r\n  withPerformanceMonitoring,\r\n  logStructured \r\n} from '@/lib/monitoring/admin-monitoring';\r\n\r\n/**\r\n * GET /api/admin/monitoring\r\n * Obtener m\xE9tricas de monitoreo y alertas\r\n */\r\nasync function getHandler(request: NextRequest) {\r\n  try {\r\n    logStructured('info', 'Admin monitoring API called', {\r\n      endpoint: '/api/admin/monitoring',\r\n      method: 'GET'\r\n    });\r\n\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request);\r\n\r\n    if (!authResult.success) {\r\n      logStructured('warn', 'Unauthorized access to monitoring API', {\r\n        error: authResult.error,\r\n        ip: request.headers.get('x-forwarded-for') || 'unknown'\r\n      });\r\n\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: 'AUTH_FAILED',\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user } = authResult;\r\n    logStructured('info', 'Admin monitoring access granted', {\r\n      userId: user?.id,\r\n      email: user?.email\r\n    });\r\n\r\n    // Obtener par\xE1metros de query\r\n    const url = new URL(request.url);\r\n    const timeframe = url.searchParams.get('timeframe') as '1h' | '24h' | '7d' || '24h';\r\n    const includeAlerts = url.searchParams.get('alerts') !== 'false';\r\n\r\n    // Obtener m\xE9tricas de performance\r\n    const performanceMetrics = await getPerformanceMetrics(timeframe);\r\n\r\n    // Obtener alertas activas si se solicitan\r\n    let activeAlerts = null;\r\n    if (includeAlerts) {\r\n      activeAlerts = await getActiveAlerts();\r\n    }\r\n\r\n    // Calcular estad\xEDsticas adicionales\r\n    const now = new Date();\r\n    const systemStatus = {\r\n      uptime: process.uptime(),\r\n      memory: process.memoryUsage(),\r\n      timestamp: now.toISOString(),\r\n      version: '2.0.0'\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        performance: performanceMetrics,\r\n        alerts: activeAlerts,\r\n        system: systemStatus,\r\n        timeframe,\r\n        requestedBy: {\r\n          userId: user?.id,\r\n          email: user?.email,\r\n          timestamp: now.toISOString()\r\n        }\r\n      },\r\n      meta: {\r\n        api: 'admin-monitoring',\r\n        version: '2.0.0',\r\n        timestamp: now.toISOString()\r\n      }\r\n    };\r\n\r\n    logStructured('info', 'Admin monitoring data retrieved successfully', {\r\n      userId: user?.id,\r\n      timeframe,\r\n      alertsIncluded: includeAlerts,\r\n      metricsCount: performanceMetrics?.stats?.totalRequests || 0,\r\n      alertsCount: activeAlerts?.length || 0\r\n    });\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    logStructured('error', 'Error in admin monitoring API', {\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR',\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring\r\n * Resolver alertas o ejecutar acciones de monitoreo\r\n */\r\nasync function postHandler(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user, supabase } = authResult;\r\n    const body = await request.json();\r\n\r\n    const { action, alertId, metadata } = body;\r\n\r\n    if (!action) {\r\n      return NextResponse.json(\r\n        { error: 'Acci\xF3n requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let result = null;\r\n\r\n    switch (action) {\r\n      case 'resolve_alert':\r\n        if (!alertId) {\r\n          return NextResponse.json(\r\n            { error: 'ID de alerta requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Resolver alerta en base de datos\r\n        const { error: resolveError } = await supabase\r\n          .from('admin_security_alerts')\r\n          .update({\r\n            resolved: true,\r\n            resolved_by: user?.id,\r\n            resolved_at: new Date().toISOString()\r\n          })\r\n          .eq('id', alertId);\r\n\r\n        if (resolveError) {\r\n          logStructured('error', 'Error resolving alert', {\r\n            alertId,\r\n            error: resolveError.message,\r\n            userId: user?.id\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al resolver alerta' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { alertId, resolved: true };\r\n        \r\n        logStructured('info', 'Alert resolved by admin', {\r\n          alertId,\r\n          userId: user?.id,\r\n          email: user?.email\r\n        });\r\n        break;\r\n\r\n      case 'cleanup_metrics':\r\n        // Ejecutar limpieza de m\xE9tricas antiguas\r\n        const { error: cleanupError } = await supabase.rpc('cleanup_old_admin_metrics');\r\n\r\n        if (cleanupError) {\r\n          logStructured('error', 'Error cleaning up metrics', {\r\n            error: cleanupError.message,\r\n            userId: user?.id\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al limpiar m\xE9tricas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { cleaned: true, timestamp: new Date().toISOString() };\r\n        \r\n        logStructured('info', 'Metrics cleanup executed by admin', {\r\n          userId: user?.id,\r\n          email: user?.email\r\n        });\r\n        break;\r\n\r\n      case 'get_performance_stats':\r\n        const timeframeHours = metadata?.timeframeHours || 24;\r\n        \r\n        const { data: stats, error: statsError } = await supabase\r\n          .rpc('get_admin_performance_stats', { timeframe_hours: timeframeHours });\r\n\r\n        if (statsError) {\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener estad\xEDsticas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { stats: stats[0] || null };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Acci\xF3n no v\xE1lida' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      action,\r\n      result,\r\n      timestamp: new Date().toISOString(),\r\n      executedBy: {\r\n        userId: user?.id,\r\n        email: user?.email\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logStructured('error', 'Error in admin monitoring POST', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Aplicar middleware de monitoreo de performance\r\nexport const GET = withPerformanceMonitoring(getHandler);\r\nexport const POST = withPerformanceMonitoring(postHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "getHandler", "request", "logStructured", "endpoint", "method", "authResult", "requireAdminAuth", "success", "error", "ip", "headers", "get", "NextResponse", "json", "code", "timestamp", "Date", "toISOString", "status", "user", "userId", "id", "email", "url", "URL", "timeframe", "searchParams", "includeAlerts", "performanceMetrics", "getPerformanceMetrics", "activeAlerts", "getActiveAlerts", "now", "systemStatus", "uptime", "process", "memory", "memoryUsage", "version", "response", "data", "performance", "alerts", "system", "requestedBy", "meta", "api", "alertsIncluded", "metricsCount", "stats", "totalRequests", "alertsCount", "length", "Error", "message", "stack", "undefined", "postHandler", "supabase", "body", "action", "alertId", "metadata", "result", "resolveError", "from", "update", "resolved", "resolved_by", "resolved_at", "eq", "cleanupError", "rpc", "cleaned", "timeframeHours", "statsError", "timeframe_hours", "executedBy", "withPerformanceMonitoring"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eafbd2a1a6999b88039dff0dd421199f58c3e4bf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25wkcbcvbx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25wkcbcvbx();
cov_25wkcbcvbx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_25wkcbcvbx().f[0]++;
  cov_25wkcbcvbx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_25wkcbcvbx().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_25wkcbcvbx().f[1]++;
    cov_25wkcbcvbx().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_25wkcbcvbx().f[2]++;
    cov_25wkcbcvbx().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_25wkcbcvbx().f[3]++;
    cov_25wkcbcvbx().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[7]++, require("next/server"));
const _supabaseauthutils =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[8]++, require("../../../../lib/auth/supabase-auth-utils"));
const _adminmonitoring =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[9]++, require("../../../../lib/monitoring/admin-monitoring"));
const runtime =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[10]++, 'nodejs');
/**
 * GET /api/admin/monitoring
 * Obtener mÃ©tricas de monitoreo y alertas
 */
async function getHandler(request) {
  /* istanbul ignore next */
  cov_25wkcbcvbx().f[4]++;
  cov_25wkcbcvbx().s[11]++;
  try {
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[12]++;
    (0, _adminmonitoring.logStructured)('info', 'Admin monitoring API called', {
      endpoint: '/api/admin/monitoring',
      method: 'GET'
    });
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[13]++, await (0, _supabaseauthutils.requireAdminAuth)(request));
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[14]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_25wkcbcvbx().b[0][0]++;
      cov_25wkcbcvbx().s[15]++;
      (0, _adminmonitoring.logStructured)('warn', 'Unauthorized access to monitoring API', {
        error: authResult.error,
        ip:
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[1][0]++, request.headers.get('x-forwarded-for')) ||
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[1][1]++, 'unknown')
      });
      /* istanbul ignore next */
      cov_25wkcbcvbx().s[16]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: 'AUTH_FAILED',
        timestamp: new Date().toISOString()
      }, {
        status:
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[2][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[2][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_25wkcbcvbx().b[0][1]++;
    }
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[17]++, authResult);
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[18]++;
    (0, _adminmonitoring.logStructured)('info', 'Admin monitoring access granted', {
      userId: user?.id,
      email: user?.email
    });
    // Obtener parÃ¡metros de query
    const url =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[19]++, new URL(request.url));
    const timeframe =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[20]++,
    /* istanbul ignore next */
    (cov_25wkcbcvbx().b[3][0]++, url.searchParams.get('timeframe')) ||
    /* istanbul ignore next */
    (cov_25wkcbcvbx().b[3][1]++, '24h'));
    const includeAlerts =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[21]++, url.searchParams.get('alerts') !== 'false');
    // Obtener mÃ©tricas de performance
    const performanceMetrics =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[22]++, await (0, _adminmonitoring.getPerformanceMetrics)(timeframe));
    // Obtener alertas activas si se solicitan
    let activeAlerts =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[23]++, null);
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[24]++;
    if (includeAlerts) {
      /* istanbul ignore next */
      cov_25wkcbcvbx().b[4][0]++;
      cov_25wkcbcvbx().s[25]++;
      activeAlerts = await (0, _adminmonitoring.getActiveAlerts)();
    } else
    /* istanbul ignore next */
    {
      cov_25wkcbcvbx().b[4][1]++;
    }
    // Calcular estadÃ­sticas adicionales
    const now =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[26]++, new Date());
    const systemStatus =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[27]++, {
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      timestamp: now.toISOString(),
      version: '2.0.0'
    });
    const response =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[28]++, {
      success: true,
      data: {
        performance: performanceMetrics,
        alerts: activeAlerts,
        system: systemStatus,
        timeframe,
        requestedBy: {
          userId: user?.id,
          email: user?.email,
          timestamp: now.toISOString()
        }
      },
      meta: {
        api: 'admin-monitoring',
        version: '2.0.0',
        timestamp: now.toISOString()
      }
    });
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[29]++;
    (0, _adminmonitoring.logStructured)('info', 'Admin monitoring data retrieved successfully', {
      userId: user?.id,
      timeframe,
      alertsIncluded: includeAlerts,
      metricsCount:
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[5][0]++, performanceMetrics?.stats?.totalRequests) ||
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[5][1]++, 0),
      alertsCount:
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[6][0]++, activeAlerts?.length) ||
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[6][1]++, 0)
    });
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[30]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[31]++;
    (0, _adminmonitoring.logStructured)('error', 'Error in admin monitoring API', {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[7][1]++, 'Unknown error'),
      stack: error instanceof Error ?
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[8][0]++, error.stack) :
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[8][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[32]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor',
      code: 'INTERNAL_ERROR',
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
/**
 * POST /api/admin/monitoring
 * Resolver alertas o ejecutar acciones de monitoreo
 */
async function postHandler(request) {
  /* istanbul ignore next */
  cov_25wkcbcvbx().f[5]++;
  cov_25wkcbcvbx().s[33]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[34]++, await (0, _supabaseauthutils.requireAdminAuth)(request));
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[35]++;
    if (!authResult.success) {
      /* istanbul ignore next */
      cov_25wkcbcvbx().b[9][0]++;
      cov_25wkcbcvbx().s[36]++;
      return _server.NextResponse.json({
        error: authResult.error
      }, {
        status:
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[10][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[10][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_25wkcbcvbx().b[9][1]++;
    }
    const {
      user,
      supabase
    } =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[37]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[38]++, await request.json());
    const {
      action,
      alertId,
      metadata
    } =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[39]++, body);
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[40]++;
    if (!action) {
      /* istanbul ignore next */
      cov_25wkcbcvbx().b[11][0]++;
      cov_25wkcbcvbx().s[41]++;
      return _server.NextResponse.json({
        error: 'AcciÃ³n requerida'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_25wkcbcvbx().b[11][1]++;
    }
    let result =
    /* istanbul ignore next */
    (cov_25wkcbcvbx().s[42]++, null);
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[43]++;
    switch (action) {
      case 'resolve_alert':
        /* istanbul ignore next */
        cov_25wkcbcvbx().b[12][0]++;
        cov_25wkcbcvbx().s[44]++;
        if (!alertId) {
          /* istanbul ignore next */
          cov_25wkcbcvbx().b[13][0]++;
          cov_25wkcbcvbx().s[45]++;
          return _server.NextResponse.json({
            error: 'ID de alerta requerido'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_25wkcbcvbx().b[13][1]++;
        }
        // Resolver alerta en base de datos
        const {
          error: resolveError
        } =
        /* istanbul ignore next */
        (cov_25wkcbcvbx().s[46]++, await supabase.from('admin_security_alerts').update({
          resolved: true,
          resolved_by: user?.id,
          resolved_at: new Date().toISOString()
        }).eq('id', alertId));
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[47]++;
        if (resolveError) {
          /* istanbul ignore next */
          cov_25wkcbcvbx().b[14][0]++;
          cov_25wkcbcvbx().s[48]++;
          (0, _adminmonitoring.logStructured)('error', 'Error resolving alert', {
            alertId,
            error: resolveError.message,
            userId: user?.id
          });
          /* istanbul ignore next */
          cov_25wkcbcvbx().s[49]++;
          return _server.NextResponse.json({
            error: 'Error al resolver alerta'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_25wkcbcvbx().b[14][1]++;
        }
        cov_25wkcbcvbx().s[50]++;
        result = {
          alertId,
          resolved: true
        };
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[51]++;
        (0, _adminmonitoring.logStructured)('info', 'Alert resolved by admin', {
          alertId,
          userId: user?.id,
          email: user?.email
        });
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[52]++;
        break;
      case 'cleanup_metrics':
        /* istanbul ignore next */
        cov_25wkcbcvbx().b[12][1]++;
        // Ejecutar limpieza de mÃ©tricas antiguas
        const {
          error: cleanupError
        } =
        /* istanbul ignore next */
        (cov_25wkcbcvbx().s[53]++, await supabase.rpc('cleanup_old_admin_metrics'));
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[54]++;
        if (cleanupError) {
          /* istanbul ignore next */
          cov_25wkcbcvbx().b[15][0]++;
          cov_25wkcbcvbx().s[55]++;
          (0, _adminmonitoring.logStructured)('error', 'Error cleaning up metrics', {
            error: cleanupError.message,
            userId: user?.id
          });
          /* istanbul ignore next */
          cov_25wkcbcvbx().s[56]++;
          return _server.NextResponse.json({
            error: 'Error al limpiar mÃ©tricas'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_25wkcbcvbx().b[15][1]++;
        }
        cov_25wkcbcvbx().s[57]++;
        result = {
          cleaned: true,
          timestamp: new Date().toISOString()
        };
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[58]++;
        (0, _adminmonitoring.logStructured)('info', 'Metrics cleanup executed by admin', {
          userId: user?.id,
          email: user?.email
        });
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[59]++;
        break;
      case 'get_performance_stats':
        /* istanbul ignore next */
        cov_25wkcbcvbx().b[12][2]++;
        const timeframeHours =
        /* istanbul ignore next */
        (cov_25wkcbcvbx().s[60]++,
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[16][0]++, metadata?.timeframeHours) ||
        /* istanbul ignore next */
        (cov_25wkcbcvbx().b[16][1]++, 24));
        const {
          data: stats,
          error: statsError
        } =
        /* istanbul ignore next */
        (cov_25wkcbcvbx().s[61]++, await supabase.rpc('get_admin_performance_stats', {
          timeframe_hours: timeframeHours
        }));
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[62]++;
        if (statsError) {
          /* istanbul ignore next */
          cov_25wkcbcvbx().b[17][0]++;
          cov_25wkcbcvbx().s[63]++;
          return _server.NextResponse.json({
            error: 'Error al obtener estadÃ­sticas'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_25wkcbcvbx().b[17][1]++;
        }
        cov_25wkcbcvbx().s[64]++;
        result = {
          stats:
          /* istanbul ignore next */
          (cov_25wkcbcvbx().b[18][0]++, stats[0]) ||
          /* istanbul ignore next */
          (cov_25wkcbcvbx().b[18][1]++, null)
        };
        /* istanbul ignore next */
        cov_25wkcbcvbx().s[65]++;
        break;
      default:
        /* istanbul ignore next */
        cov_25wkcbcvbx().b[12][3]++;
        cov_25wkcbcvbx().s[66]++;
        return _server.NextResponse.json({
          error: 'AcciÃ³n no vÃ¡lida'
        }, {
          status: 400
        });
    }
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[67]++;
    return _server.NextResponse.json({
      success: true,
      action,
      result,
      timestamp: new Date().toISOString(),
      executedBy: {
        userId: user?.id,
        email: user?.email
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[68]++;
    (0, _adminmonitoring.logStructured)('error', 'Error in admin monitoring POST', {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25wkcbcvbx().b[19][1]++, 'Unknown error')
    });
    /* istanbul ignore next */
    cov_25wkcbcvbx().s[69]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor',
      code: 'INTERNAL_ERROR'
    }, {
      status: 500
    });
  }
}
const GET =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[70]++, (0, _adminmonitoring.withPerformanceMonitoring)(getHandler));
const POST =
/* istanbul ignore next */
(cov_25wkcbcvbx().s[71]++, (0, _adminmonitoring.withPerformanceMonitoring)(postHandler));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,