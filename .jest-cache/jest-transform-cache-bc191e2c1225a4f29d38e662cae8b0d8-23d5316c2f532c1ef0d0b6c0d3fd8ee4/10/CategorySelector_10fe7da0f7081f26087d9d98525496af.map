{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\products\\CategorySelector.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { ChevronDown, Plus, Search, Folder, FolderOpen } from 'lucide-react';\r\nimport { cn } from '@/lib/core/utils';\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  parent_id?: string;\r\n  level: number;\r\n  children?: Category[];\r\n}\r\n\r\ninterface CategorySelectorProps {\r\n  value?: string;\r\n  onChange: (categoryId: string) => void;\r\n  error?: string;\r\n  placeholder?: string;\r\n  allowCreate?: boolean;\r\n  className?: string;\r\n}\r\n\r\n// API function to fetch categories\r\nasync function fetchCategories(): Promise<Category[]> {\r\n  const response = await fetch('/api/categories');\r\n  if (!response.ok) {\r\n    throw new Error('Error fetching categories');\r\n  }\r\n  const data = await response.json();\r\n  return data.data || [];\r\n}\r\n\r\n// Build category tree\r\nfunction buildCategoryTree(categories: Category[]): Category[] {\r\n  const categoryMap = new Map<string, Category>();\r\n  const rootCategories: Category[] = [];\r\n\r\n  // Create map of all categories\r\n  categories.forEach(category => {\r\n    categoryMap.set(category.id, { ...category, children: [] });\r\n  });\r\n\r\n  // Build tree structure\r\n  categories.forEach(category => {\r\n    const categoryNode = categoryMap.get(category.id)!;\r\n    \r\n    if (category.parent_id) {\r\n      const parent = categoryMap.get(category.parent_id);\r\n      if (parent) {\r\n        parent.children!.push(categoryNode);\r\n      }\r\n    } else {\r\n      rootCategories.push(categoryNode);\r\n    }\r\n  });\r\n\r\n  return rootCategories;\r\n}\r\n\r\n// Flatten categories for search\r\nfunction flattenCategories(categories: Category[], level = 0): Category[] {\r\n  const flattened: Category[] = [];\r\n  \r\n  categories.forEach(category => {\r\n    flattened.push({ ...category, level });\r\n    if (category.children && category.children.length > 0) {\r\n      flattened.push(...flattenCategories(category.children, level + 1));\r\n    }\r\n  });\r\n  \r\n  return flattened;\r\n}\r\n\r\nexport function CategorySelector({\r\n  value,\r\n  onChange,\r\n  error,\r\n  placeholder = \"Selecciona una categoría\",\r\n  allowCreate = false,\r\n  className\r\n}: CategorySelectorProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\r\n\r\n  // Fetch categories\r\n  const { data: categories = [], isLoading, error: fetchError } = useQuery({\r\n    queryKey: ['categories'],\r\n    queryFn: fetchCategories,\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n\r\n  const categoryTree = buildCategoryTree(categories);\r\n  const flatCategories = flattenCategories(categoryTree);\r\n  \r\n  // Find selected category\r\n  const selectedCategory = flatCategories.find(cat => cat.id === value);\r\n\r\n  // Filter categories based on search\r\n  const filteredCategories = searchTerm\r\n    ? flatCategories.filter(category =>\r\n        category.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      )\r\n    : categoryTree;\r\n\r\n  const toggleExpanded = (categoryId: string) => {\r\n    const newExpanded = new Set(expandedCategories);\r\n    if (newExpanded.has(categoryId)) {\r\n      newExpanded.delete(categoryId);\r\n    } else {\r\n      newExpanded.add(categoryId);\r\n    }\r\n    setExpandedCategories(newExpanded);\r\n  };\r\n\r\n  const handleSelect = (categoryId: string) => {\r\n    onChange(categoryId);\r\n    setIsOpen(false);\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const renderCategoryTree = (categories: Category[], level = 0) => {\r\n    return categories.map(category => (\r\n      <div key={category.id}>\r\n        <div\r\n          className={cn(\r\n            \"flex items-center justify-between px-3 py-2 hover:bg-gray-50 cursor-pointer\",\r\n            value === category.id && \"bg-blaze-orange-50 text-blaze-orange-700\"\r\n          )}\r\n          style={{ paddingLeft: `${12 + level * 20}px` }}\r\n          onClick={() => handleSelect(category.id)}\r\n        >\r\n          <div className=\"flex items-center space-x-2 flex-1\">\r\n            {category.children && category.children.length > 0 ? (\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleExpanded(category.id);\r\n                }}\r\n                className=\"p-1 hover:bg-gray-200 rounded\"\r\n              >\r\n                {expandedCategories.has(category.id) ? (\r\n                  <FolderOpen className=\"w-4 h-4 text-gray-500\" />\r\n                ) : (\r\n                  <Folder className=\"w-4 h-4 text-gray-500\" />\r\n                )}\r\n              </button>\r\n            ) : (\r\n              <div className=\"w-6 h-6 flex items-center justify-center\">\r\n                <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\r\n              </div>\r\n            )}\r\n            \r\n            <span className=\"text-sm font-medium\">{category.name}</span>\r\n          </div>\r\n          \r\n          {value === category.id && (\r\n            <div className=\"w-2 h-2 bg-blaze-orange-600 rounded-full\"></div>\r\n          )}\r\n        </div>\r\n        \r\n        {category.children && \r\n         category.children.length > 0 && \r\n         expandedCategories.has(category.id) && (\r\n          <div>\r\n            {renderCategoryTree(category.children, level + 1)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderFlatList = (categories: Category[]) => {\r\n    return categories.map(category => (\r\n      <div\r\n        key={category.id}\r\n        className={cn(\r\n          \"flex items-center px-3 py-2 hover:bg-gray-50 cursor-pointer\",\r\n          value === category.id && \"bg-blaze-orange-50 text-blaze-orange-700\"\r\n        )}\r\n        onClick={() => handleSelect(category.id)}\r\n      >\r\n        <div className=\"flex items-center space-x-2 flex-1\">\r\n          <div style={{ marginLeft: `${category.level * 16}px` }}>\r\n            <span className=\"text-sm\">\r\n              {'—'.repeat(category.level)} {category.name}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {value === category.id && (\r\n          <div className=\"w-2 h-2 bg-blaze-orange-600 rounded-full\"></div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  if (fetchError) {\r\n    return (\r\n      <div className=\"text-red-600 text-sm\">\r\n        Error al cargar categorías\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"relative\", className)}>\r\n      {/* Selector Button */}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className={cn(\r\n          \"w-full flex items-center justify-between px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blaze-orange-500 focus:border-transparent\",\r\n          error ? \"border-red-300\" : \"border-gray-300\",\r\n          isLoading && \"opacity-50 cursor-not-allowed\"\r\n        )}\r\n        disabled={isLoading}\r\n      >\r\n        <span className={cn(\r\n          \"text-sm\",\r\n          selectedCategory ? \"text-gray-900\" : \"text-gray-500\"\r\n        )}>\r\n          {isLoading ? 'Cargando...' : selectedCategory?.name || placeholder}\r\n        </span>\r\n        <ChevronDown className={cn(\r\n          \"w-4 h-4 text-gray-400 transition-transform\",\r\n          isOpen && \"transform rotate-180\"\r\n        )} />\r\n      </button>\r\n\r\n      {/* Error Message */}\r\n      {error && (\r\n        <p className=\"text-red-600 text-sm mt-1\">{error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}</p>\r\n      )}\r\n\r\n      {/* Dropdown */}\r\n      {isOpen && (\r\n        <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-80 overflow-hidden\">\r\n          {/* Search */}\r\n          <div className=\"p-3 border-b border-gray-200\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar categorías...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blaze-orange-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Categories List */}\r\n          <div className=\"max-h-60 overflow-y-auto\">\r\n            {categories.length === 0 ? (\r\n              <div className=\"p-4 text-center text-gray-500 text-sm\">\r\n                No hay categorías disponibles\r\n              </div>\r\n            ) : searchTerm ? (\r\n              renderFlatList(filteredCategories as Category[])\r\n            ) : (\r\n              renderCategoryTree(categoryTree)\r\n            )}\r\n          </div>\r\n\r\n          {/* Create New Category */}\r\n          {allowCreate && (\r\n            <div className=\"border-t border-gray-200 p-3\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"flex items-center space-x-2 text-sm text-blaze-orange-600 hover:text-blaze-orange-700\"\r\n                onClick={() => {\r\n                  // TODO: Implement create category modal\r\n                  console.log('Create new category');\r\n                }}\r\n              >\r\n                <Plus className=\"w-4 h-4\" />\r\n                <span>Crear nueva categoría</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Overlay */}\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 z-40\"\r\n          onClick={() => setIsOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["CategorySelector","fetchCategories","response","fetch","ok","Error","data","json","buildCategoryTree","categories","categoryMap","Map","rootCategories","forEach","category","set","id","children","categoryNode","get","parent_id","parent","push","flattenCategories","level","flattened","length","value","onChange","error","placeholder","allowCreate","className","isOpen","setIsOpen","useState","searchTerm","setSearchTerm","expandedCategories","setExpandedCategories","Set","isLoading","fetchError","useQuery","queryKey","queryFn","staleTime","categoryTree","flatCategories","selectedCategory","find","cat","filteredCategories","filter","name","toLowerCase","includes","toggleExpanded","categoryId","newExpanded","has","delete","add","handleSelect","renderCategoryTree","map","div","cn","style","paddingLeft","onClick","button","e","stopPropagation","FolderOpen","Folder","span","renderFlatList","marginLeft","repeat","type","disabled","ChevronDown","p","message","toString","Search","input","target","console","log","Plus"],"mappings":"AAAA;;;;;+BA4EgBA;;;eAAAA;;;;uBA1EoB;4BACX;6BACqC;uBAC3C;AAoBnB,mCAAmC;AACnC,eAAeC;IACb,MAAMC,WAAW,MAAMC,MAAM;IAC7B,IAAI,CAACD,SAASE,EAAE,EAAE;QAChB,MAAM,IAAIC,MAAM;IAClB;IACA,MAAMC,OAAO,MAAMJ,SAASK,IAAI;IAChC,OAAOD,KAAKA,IAAI,IAAI,EAAE;AACxB;AAEA,sBAAsB;AACtB,SAASE,kBAAkBC,UAAsB;IAC/C,MAAMC,cAAc,IAAIC;IACxB,MAAMC,iBAA6B,EAAE;IAErC,+BAA+B;IAC/BH,WAAWI,OAAO,CAACC,CAAAA;QACjBJ,YAAYK,GAAG,CAACD,SAASE,EAAE,EAAE;YAAE,GAAGF,QAAQ;YAAEG,UAAU,EAAE;QAAC;IAC3D;IAEA,uBAAuB;IACvBR,WAAWI,OAAO,CAACC,CAAAA;QACjB,MAAMI,eAAeR,YAAYS,GAAG,CAACL,SAASE,EAAE;QAEhD,IAAIF,SAASM,SAAS,EAAE;YACtB,MAAMC,SAASX,YAAYS,GAAG,CAACL,SAASM,SAAS;YACjD,IAAIC,QAAQ;gBACVA,OAAOJ,QAAQ,CAAEK,IAAI,CAACJ;YACxB;QACF,OAAO;YACLN,eAAeU,IAAI,CAACJ;QACtB;IACF;IAEA,OAAON;AACT;AAEA,gCAAgC;AAChC,SAASW,kBAAkBd,UAAsB,EAAEe,QAAQ,CAAC;IAC1D,MAAMC,YAAwB,EAAE;IAEhChB,WAAWI,OAAO,CAACC,CAAAA;QACjBW,UAAUH,IAAI,CAAC;YAAE,GAAGR,QAAQ;YAAEU;QAAM;QACpC,IAAIV,SAASG,QAAQ,IAAIH,SAASG,QAAQ,CAACS,MAAM,GAAG,GAAG;YACrDD,UAAUH,IAAI,IAAIC,kBAAkBT,SAASG,QAAQ,EAAEO,QAAQ;QACjE;IACF;IAEA,OAAOC;AACT;AAEO,SAASzB,iBAAiB,EAC/B2B,KAAK,EACLC,QAAQ,EACRC,KAAK,EACLC,cAAc,0BAA0B,EACxCC,cAAc,KAAK,EACnBC,SAAS,EACa;IACtB,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAC;IACrC,MAAM,CAACC,YAAYC,cAAc,GAAGF,IAAAA,eAAQ,EAAC;IAC7C,MAAM,CAACG,oBAAoBC,sBAAsB,GAAGJ,IAAAA,eAAQ,EAAc,IAAIK;IAE9E,mBAAmB;IACnB,MAAM,EAAElC,MAAMG,aAAa,EAAE,EAAEgC,SAAS,EAAEZ,OAAOa,UAAU,EAAE,GAAGC,IAAAA,oBAAQ,EAAC;QACvEC,UAAU;YAAC;SAAa;QACxBC,SAAS5C;QACT6C,WAAW,IAAI,KAAK;IACtB;IAEA,MAAMC,eAAevC,kBAAkBC;IACvC,MAAMuC,iBAAiBzB,kBAAkBwB;IAEzC,yBAAyB;IACzB,MAAME,mBAAmBD,eAAeE,IAAI,CAACC,CAAAA,MAAOA,IAAInC,EAAE,KAAKW;IAE/D,oCAAoC;IACpC,MAAMyB,qBAAqBhB,aACvBY,eAAeK,MAAM,CAACvC,CAAAA,WACpBA,SAASwC,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAACpB,WAAWmB,WAAW,OAE7DR;IAEJ,MAAMU,iBAAiB,CAACC;QACtB,MAAMC,cAAc,IAAInB,IAAIF;QAC5B,IAAIqB,YAAYC,GAAG,CAACF,aAAa;YAC/BC,YAAYE,MAAM,CAACH;QACrB,OAAO;YACLC,YAAYG,GAAG,CAACJ;QAClB;QACAnB,sBAAsBoB;IACxB;IAEA,MAAMI,eAAe,CAACL;QACpB9B,SAAS8B;QACTxB,UAAU;QACVG,cAAc;IAChB;IAEA,MAAM2B,qBAAqB,CAACvD,YAAwBe,QAAQ,CAAC;QAC3D,OAAOf,WAAWwD,GAAG,CAACnD,CAAAA,yBACpB,sBAACoD;;kCACC,sBAACA;wBACClC,WAAWmC,IAAAA,SAAE,EACX,+EACAxC,UAAUb,SAASE,EAAE,IAAI;wBAE3BoD,OAAO;4BAAEC,aAAa,GAAG,KAAK7C,QAAQ,GAAG,EAAE,CAAC;wBAAC;wBAC7C8C,SAAS,IAAMP,aAAajD,SAASE,EAAE;;0CAEvC,sBAACkD;gCAAIlC,WAAU;;oCACZlB,SAASG,QAAQ,IAAIH,SAASG,QAAQ,CAACS,MAAM,GAAG,kBAC/C,qBAAC6C;wCACCD,SAAS,CAACE;4CACRA,EAAEC,eAAe;4CACjBhB,eAAe3C,SAASE,EAAE;wCAC5B;wCACAgB,WAAU;kDAETM,mBAAmBsB,GAAG,CAAC9C,SAASE,EAAE,kBACjC,qBAAC0D,uBAAU;4CAAC1C,WAAU;2DAEtB,qBAAC2C,mBAAM;4CAAC3C,WAAU;;uDAItB,qBAACkC;wCAAIlC,WAAU;kDACb,cAAA,qBAACkC;4CAAIlC,WAAU;;;kDAInB,qBAAC4C;wCAAK5C,WAAU;kDAAuBlB,SAASwC,IAAI;;;;4BAGrD3B,UAAUb,SAASE,EAAE,kBACpB,qBAACkD;gCAAIlC,WAAU;;;;oBAIlBlB,SAASG,QAAQ,IACjBH,SAASG,QAAQ,CAACS,MAAM,GAAG,KAC3BY,mBAAmBsB,GAAG,CAAC9C,SAASE,EAAE,mBACjC,qBAACkD;kCACEF,mBAAmBlD,SAASG,QAAQ,EAAEO,QAAQ;;;eA1C3CV,SAASE,EAAE;IA+CzB;IAEA,MAAM6D,iBAAiB,CAACpE;QACtB,OAAOA,WAAWwD,GAAG,CAACnD,CAAAA,yBACpB,sBAACoD;gBAEClC,WAAWmC,IAAAA,SAAE,EACX,+DACAxC,UAAUb,SAASE,EAAE,IAAI;gBAE3BsD,SAAS,IAAMP,aAAajD,SAASE,EAAE;;kCAEvC,qBAACkD;wBAAIlC,WAAU;kCACb,cAAA,qBAACkC;4BAAIE,OAAO;gCAAEU,YAAY,GAAGhE,SAASU,KAAK,GAAG,GAAG,EAAE,CAAC;4BAAC;sCACnD,cAAA,sBAACoD;gCAAK5C,WAAU;;oCACb,IAAI+C,MAAM,CAACjE,SAASU,KAAK;oCAAE;oCAAEV,SAASwC,IAAI;;;;;oBAKhD3B,UAAUb,SAASE,EAAE,kBACpB,qBAACkD;wBAAIlC,WAAU;;;eAhBZlB,SAASE,EAAE;IAoBtB;IAEA,IAAI0B,YAAY;QACd,qBACE,qBAACwB;YAAIlC,WAAU;sBAAuB;;IAI1C;IAEA,qBACE,sBAACkC;QAAIlC,WAAWmC,IAAAA,SAAE,EAAC,YAAYnC;;0BAE7B,sBAACuC;gBACCS,MAAK;gBACLV,SAAS,IAAMpC,UAAU,CAACD;gBAC1BD,WAAWmC,IAAAA,SAAE,EACX,6JACAtC,QAAQ,mBAAmB,mBAC3BY,aAAa;gBAEfwC,UAAUxC;;kCAEV,qBAACmC;wBAAK5C,WAAWmC,IAAAA,SAAE,EACjB,WACAlB,mBAAmB,kBAAkB;kCAEpCR,YAAY,gBAAgBQ,kBAAkBK,QAAQxB;;kCAEzD,qBAACoD,wBAAW;wBAAClD,WAAWmC,IAAAA,SAAE,EACxB,8CACAlC,UAAU;;;;YAKbJ,uBACC,qBAACsD;gBAAEnD,WAAU;0BAA6BH,iBAAiBxB,QAAQwB,MAAMuD,OAAO,GAAGvD,OAAOwD,cAAc;;YAIzGpD,wBACC,sBAACiC;gBAAIlC,WAAU;;kCAEb,qBAACkC;wBAAIlC,WAAU;kCACb,cAAA,sBAACkC;4BAAIlC,WAAU;;8CACb,qBAACsD,mBAAM;oCAACtD,WAAU;;8CAClB,qBAACuD;oCACCP,MAAK;oCACLlD,aAAY;oCACZH,OAAOS;oCACPR,UAAU,CAAC4C,IAAMnC,cAAcmC,EAAEgB,MAAM,CAAC7D,KAAK;oCAC7CK,WAAU;;;;;kCAMhB,qBAACkC;wBAAIlC,WAAU;kCACZvB,WAAWiB,MAAM,KAAK,kBACrB,qBAACwC;4BAAIlC,WAAU;sCAAwC;6BAGrDI,aACFyC,eAAezB,sBAEfY,mBAAmBjB;;oBAKtBhB,6BACC,qBAACmC;wBAAIlC,WAAU;kCACb,cAAA,sBAACuC;4BACCS,MAAK;4BACLhD,WAAU;4BACVsC,SAAS;gCACP,wCAAwC;gCACxCmB,QAAQC,GAAG,CAAC;4BACd;;8CAEA,qBAACC,iBAAI;oCAAC3D,WAAU;;8CAChB,qBAAC4C;8CAAK;;;;;;;YAQf3C,wBACC,qBAACiC;gBACClC,WAAU;gBACVsC,SAAS,IAAMpC,UAAU;;;;AAKnC"}