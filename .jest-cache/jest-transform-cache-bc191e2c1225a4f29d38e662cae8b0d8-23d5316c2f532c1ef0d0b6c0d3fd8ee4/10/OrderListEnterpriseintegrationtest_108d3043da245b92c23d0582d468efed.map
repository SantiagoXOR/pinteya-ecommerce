{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\components\\OrderListEnterprise.integration.test.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - INTEGRATION TESTS\r\n// Pruebas de integración para OrderListEnterprise\r\n// ===================================\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\r\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\r\nimport { jest } from '@jest/globals';\r\nimport { OrderListEnterprise } from '@/components/admin/orders/OrderListEnterprise';\r\nimport { OrderEnterprise, OrderStatus } from '@/types/orders-enterprise';\r\nimport { ApiResponse } from '@/types/api-strict';\r\n\r\n// ===================================\r\n// MOCKS\r\n// ===================================\r\n\r\n// Mock del fetch global\r\nconst mockFetch = jest.fn();\r\nglobal.fetch = mockFetch;\r\n\r\n// Mock de toast\r\nconst mockToast = jest.fn();\r\njest.mock('@/hooks/use-toast', () => ({\r\n  useToast: () => ({ toast: mockToast })\r\n}));\r\n\r\n// Mock de performance para monitoreo\r\nconst mockPerformanceNow = jest.fn();\r\nObject.defineProperty(global, 'performance', {\r\n  value: {\r\n    now: mockPerformanceNow,\r\n    memory: {\r\n      usedJSHeapSize: 50 * 1024 * 1024 // 50MB\r\n    }\r\n  },\r\n  writable: true\r\n});\r\n\r\n// Mock de localStorage\r\nconst mockLocalStorage = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn()\r\n};\r\nObject.defineProperty(global, 'localStorage', {\r\n  value: mockLocalStorage,\r\n  writable: true\r\n});\r\n\r\n// Mock de console\r\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\r\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {});\r\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\n// ===================================\r\n// DATOS DE PRUEBA\r\n// ===================================\r\n\r\nconst mockOrders: OrderEnterprise[] = [\r\n  {\r\n    id: 'order-1',\r\n    orderNumber: 'ORD-2024-001',\r\n    status: 'pending' as OrderStatus,\r\n    previousStatus: null,\r\n    statusHistory: [{\r\n      status: 'pending' as OrderStatus,\r\n      timestamp: new Date().toISOString(),\r\n      reason: 'Order created',\r\n      userId: 'user-1'\r\n    }],\r\n    customerId: 'customer-1',\r\n    customerEmail: 'customer1@example.com',\r\n    customerPhone: '+1234567890',\r\n    items: [{\r\n      id: 'item-1',\r\n      productId: 'product-1',\r\n      productName: 'Test Product 1',\r\n      quantity: 2,\r\n      unitPrice: 29.99,\r\n      totalPrice: 59.98,\r\n      sku: 'TEST-SKU-001'\r\n    }],\r\n    subtotal: 59.98,\r\n    taxAmount: 4.80,\r\n    shippingAmount: 9.99,\r\n    discountAmount: 0,\r\n    totalAmount: 74.77,\r\n    currency: 'USD',\r\n    shippingAddress: {\r\n      street: '123 Test St',\r\n      city: 'Test City',\r\n      state: 'TS',\r\n      zipCode: '12345',\r\n      country: 'US'\r\n    },\r\n    billingAddress: {\r\n      street: '123 Test St',\r\n      city: 'Test City',\r\n      state: 'TS',\r\n      zipCode: '12345',\r\n      country: 'US'\r\n    },\r\n    paymentMethod: 'credit_card',\r\n    paymentStatus: 'pending',\r\n    shippingMethod: 'standard',\r\n    estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n    notes: 'Test order notes',\r\n    tags: ['test'],\r\n    metadata: {\r\n      source: 'web'\r\n    },\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  },\r\n  {\r\n    id: 'order-2',\r\n    orderNumber: 'ORD-2024-002',\r\n    status: 'processing' as OrderStatus,\r\n    previousStatus: 'pending' as OrderStatus,\r\n    statusHistory: [\r\n      {\r\n        status: 'pending' as OrderStatus,\r\n        timestamp: new Date(Date.now() - 3600000).toISOString(),\r\n        reason: 'Order created',\r\n        userId: 'user-1'\r\n      },\r\n      {\r\n        status: 'processing' as OrderStatus,\r\n        timestamp: new Date().toISOString(),\r\n        reason: 'Payment confirmed',\r\n        userId: 'user-1'\r\n      }\r\n    ],\r\n    customerId: 'customer-2',\r\n    customerEmail: 'customer2@example.com',\r\n    customerPhone: '+1234567891',\r\n    items: [{\r\n      id: 'item-2',\r\n      productId: 'product-2',\r\n      productName: 'Test Product 2',\r\n      quantity: 1,\r\n      unitPrice: 49.99,\r\n      totalPrice: 49.99,\r\n      sku: 'TEST-SKU-002'\r\n    }],\r\n    subtotal: 49.99,\r\n    taxAmount: 4.00,\r\n    shippingAmount: 9.99,\r\n    discountAmount: 5.00,\r\n    totalAmount: 58.98,\r\n    currency: 'USD',\r\n    shippingAddress: {\r\n      street: '456 Test Ave',\r\n      city: 'Test City',\r\n      state: 'TS',\r\n      zipCode: '12346',\r\n      country: 'US'\r\n    },\r\n    billingAddress: {\r\n      street: '456 Test Ave',\r\n      city: 'Test City',\r\n      state: 'TS',\r\n      zipCode: '12346',\r\n      country: 'US'\r\n    },\r\n    paymentMethod: 'paypal',\r\n    paymentStatus: 'paid',\r\n    shippingMethod: 'express',\r\n    estimatedDelivery: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\r\n    notes: 'Express delivery requested',\r\n    tags: ['express', 'vip'],\r\n    metadata: {\r\n      source: 'mobile',\r\n      campaign: 'summer-sale'\r\n    },\r\n    createdAt: new Date(Date.now() - 3600000).toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  }\r\n];\r\n\r\nconst mockApiResponse: ApiResponse<OrderEnterprise[]> = {\r\n  success: true,\r\n  data: mockOrders,\r\n  message: 'Orders retrieved successfully',\r\n  timestamp: new Date().toISOString(),\r\n  requestId: 'req-123',\r\n  pagination: {\r\n    page: 1,\r\n    limit: 10,\r\n    total: 2,\r\n    totalPages: 1\r\n  }\r\n};\r\n\r\n// ===================================\r\n// SETUP Y CLEANUP\r\n// ===================================\r\n\r\nbeforeEach(() => {\r\n  jest.clearAllMocks();\r\n  mockPerformanceNow.mockReturnValue(1000);\r\n  mockLocalStorage.getItem.mockReturnValue(null);\r\n\r\n  // Mock exitoso por defecto\r\n  mockFetch.mockResolvedValue({\r\n    ok: true,\r\n    status: 200,\r\n    json: async () => mockApiResponse\r\n  });\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllTimers();\r\n});\r\n\r\n// ===================================\r\n// TESTS DE INTEGRACIÓN\r\n// ===================================\r\n\r\ndescribe('OrderListEnterprise - Integración', () => {\r\n  describe('Renderizado inicial', () => {\r\n    it('debe renderizar correctamente con datos', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      // Verificar que se muestra el loading inicialmente\r\n      expect(screen.getByText(/cargando/i)).toBeInTheDocument();\r\n\r\n      // Esperar a que se carguen los datos\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n        expect(screen.getByText('ORD-2024-002')).toBeInTheDocument();\r\n      });\r\n\r\n      // Verificar que se muestran los estados correctos\r\n      expect(screen.getByText('Pendiente')).toBeInTheDocument();\r\n      expect(screen.getByText('Procesando')).toBeInTheDocument();\r\n    });\r\n\r\n    it('debe mostrar mensaje de error cuando falla la carga', async () => {\r\n      mockFetch.mockRejectedValue(new Error('Network error'));\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith(\r\n          expect.objectContaining({\r\n            title: expect.stringContaining('Error'),\r\n            variant: 'destructive'\r\n          })\r\n        );\r\n      });\r\n    });\r\n\r\n    it('debe mostrar mensaje cuando no hay órdenes', async () => {\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({\r\n          ...mockApiResponse,\r\n          data: [],\r\n          pagination: {\r\n            ...mockApiResponse.pagination,\r\n            total: 0\r\n          }\r\n        })\r\n      });\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/no se encontraron órdenes/i)).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Sistema de filtros', () => {\r\n    it('debe filtrar por estado correctamente', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      // Esperar a que se carguen los datos iniciales\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Aplicar filtro por estado\r\n      const statusFilter = screen.getByLabelText(/estado/i);\r\n      fireEvent.change(statusFilter, { target: { value: 'pending' } });\r\n\r\n      // Verificar que se hace la petición con el filtro\r\n      await waitFor(() => {\r\n        expect(mockFetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('status=pending'),\r\n          expect.any(Object)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('debe filtrar por rango de fechas', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Aplicar filtro de fecha\r\n      const dateFromInput = screen.getByLabelText(/fecha desde/i);\r\n      fireEvent.change(dateFromInput, { \r\n        target: { value: '2024-01-01' } \r\n      });\r\n\r\n      await waitFor(() => {\r\n        expect(mockFetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('dateFrom=2024-01-01'),\r\n          expect.any(Object)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('debe manejar errores en filtros', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Simular error en filtro\r\n      mockFetch.mockRejectedValueOnce(new Error('Filter error'));\r\n\r\n      const statusFilter = screen.getByLabelText(/estado/i);\r\n      fireEvent.change(statusFilter, { target: { value: 'invalid' } });\r\n\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith(\r\n          expect.objectContaining({\r\n            title: expect.stringContaining('Error'),\r\n            variant: 'destructive'\r\n          })\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Sistema de paginación', () => {\r\n    it('debe cambiar de página correctamente', async () => {\r\n      // Mock con múltiples páginas\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({\r\n          ...mockApiResponse,\r\n          pagination: {\r\n            page: 1,\r\n            limit: 10,\r\n            total: 25,\r\n            totalPages: 3\r\n          }\r\n        })\r\n      });\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Cambiar a página 2\r\n      const nextPageButton = screen.getByLabelText(/página siguiente/i);\r\n      fireEvent.click(nextPageButton);\r\n\r\n      await waitFor(() => {\r\n        expect(mockFetch).toHaveBeenCalledWith(\r\n          expect.stringContaining('page=2'),\r\n          expect.any(Object)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('debe manejar errores en paginación', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Simular error en cambio de página\r\n      mockFetch.mockRejectedValueOnce(new Error('Pagination error'));\r\n\r\n      const nextPageButton = screen.getByLabelText(/página siguiente/i);\r\n      fireEvent.click(nextPageButton);\r\n\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalledWith(\r\n          expect.objectContaining({\r\n            title: expect.stringContaining('Error'),\r\n            variant: 'destructive'\r\n          })\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Selección de órdenes', () => {\r\n    it('debe permitir seleccionar órdenes individuales', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Seleccionar primera orden\r\n      const firstCheckbox = screen.getAllByRole('checkbox')[1]; // [0] es \"select all\"\r\n      fireEvent.click(firstCheckbox);\r\n\r\n      expect(firstCheckbox).toBeChecked();\r\n    });\r\n\r\n    it('debe permitir seleccionar todas las órdenes', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Seleccionar todas\r\n      const selectAllCheckbox = screen.getAllByRole('checkbox')[0];\r\n      fireEvent.click(selectAllCheckbox);\r\n\r\n      // Verificar que todas las órdenes están seleccionadas\r\n      const checkboxes = screen.getAllByRole('checkbox');\r\n      checkboxes.slice(1).forEach(checkbox => {\r\n        expect(checkbox).toBeChecked();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Sistema de monitoreo', () => {\r\n    it('debe trackear renders correctamente', async () => {\r\n      mockPerformanceNow\r\n        .mockReturnValueOnce(1000)\r\n        .mockReturnValueOnce(1010); // 10ms render\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Verificar que se está loggeando el monitoreo\r\n      expect(mockConsoleLog).toHaveBeenCalled();\r\n    });\r\n\r\n    it('debe detectar renders lentos', async () => {\r\n      mockPerformanceNow\r\n        .mockReturnValueOnce(1000)\r\n        .mockReturnValueOnce(1100); // 100ms render (lento)\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Verificar que se detecta el render lento\r\n      expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n        expect.stringContaining('Slow render detected')\r\n      );\r\n    });\r\n\r\n    it('debe trackear errores en el monitoreo', async () => {\r\n      mockFetch.mockRejectedValue(new Error('API Error'));\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(mockToast).toHaveBeenCalled();\r\n      });\r\n\r\n      // Verificar que el error se trackea en el monitoreo\r\n      expect(mockConsoleError).toHaveBeenCalledWith(\r\n        expect.stringContaining('Error tracked')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Validación de tipos estricta', () => {\r\n    it('debe manejar datos inválidos correctamente', async () => {\r\n      const invalidResponse = {\r\n        success: true,\r\n        data: [{\r\n          id: 'order-invalid',\r\n          // Faltan campos requeridos\r\n        }],\r\n        message: 'Success'\r\n      };\r\n\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => invalidResponse\r\n      });\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        // Debería mostrar mensaje de error por datos inválidos\r\n        expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n          expect.stringContaining('Invalid data')\r\n        );\r\n      });\r\n    });\r\n\r\n    it('debe validar estructura de respuesta API', async () => {\r\n      const malformedResponse = {\r\n        // Falta campo 'success'\r\n        data: mockOrders\r\n      };\r\n\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => malformedResponse\r\n      });\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(mockConsoleWarn).toHaveBeenCalledWith(\r\n          expect.stringContaining('API response validation failed')\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Acciones masivas', () => {\r\n    it('debe permitir acciones en órdenes seleccionadas', async () => {\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Seleccionar órdenes\r\n      const checkboxes = screen.getAllByRole('checkbox');\r\n      fireEvent.click(checkboxes[1]); // Seleccionar primera orden\r\n      fireEvent.click(checkboxes[2]); // Seleccionar segunda orden\r\n\r\n      // Verificar que aparecen las acciones masivas\r\n      expect(screen.getByText(/acciones seleccionadas/i)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Actualización en tiempo real', () => {\r\n    it('debe refrescar datos automáticamente', async () => {\r\n      jest.useFakeTimers();\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      const initialCallCount = mockFetch.mock.calls.length;\r\n\r\n      // Avanzar tiempo para trigger refresh automático\r\n      act(() => {\r\n        jest.advanceTimersByTime(30000); // 30 segundos\r\n      });\r\n\r\n      await waitFor(() => {\r\n        expect(mockFetch.mock.calls.length).toBeGreaterThan(initialCallCount);\r\n      });\r\n\r\n      jest.useRealTimers();\r\n    });\r\n  });\r\n\r\n  describe('Responsive design', () => {\r\n    it('debe adaptarse a pantallas móviles', async () => {\r\n      // Simular viewport móvil\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 375\r\n      });\r\n\r\n      render(<OrderListEnterprise />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('ORD-2024-001')).toBeInTheDocument();\r\n      });\r\n\r\n      // Verificar que se muestra la vista móvil\r\n      expect(screen.getByTestId('mobile-order-list')).toBeInTheDocument();\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mockFetch","jest","fn","global","fetch","mockToast","mock","useToast","toast","mockPerformanceNow","Object","defineProperty","value","now","memory","usedJSHeapSize","writable","mockLocalStorage","getItem","setItem","removeItem","clear","mockConsoleError","spyOn","console","mockImplementation","mockConsoleWarn","mockConsoleLog","mockOrders","id","orderNumber","status","previousStatus","statusHistory","timestamp","Date","toISOString","reason","userId","customerId","customerEmail","customerPhone","items","productId","productName","quantity","unitPrice","totalPrice","sku","subtotal","taxAmount","shippingAmount","discountAmount","totalAmount","currency","shippingAddress","street","city","state","zipCode","country","billingAddress","paymentMethod","paymentStatus","shippingMethod","estimatedDelivery","notes","tags","metadata","source","createdAt","updatedAt","campaign","mockApiResponse","success","data","message","requestId","pagination","page","limit","total","totalPages","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","json","afterEach","clearAllTimers","describe","it","render","OrderListEnterprise","expect","screen","getByText","toBeInTheDocument","waitFor","mockRejectedValue","Error","toHaveBeenCalledWith","objectContaining","title","stringContaining","variant","statusFilter","getByLabelText","fireEvent","change","target","any","dateFromInput","mockRejectedValueOnce","nextPageButton","click","firstCheckbox","getAllByRole","toBeChecked","selectAllCheckbox","checkboxes","slice","forEach","checkbox","mockReturnValueOnce","toHaveBeenCalled","invalidResponse","malformedResponse","useFakeTimers","initialCallCount","calls","length","act","advanceTimersByTime","toBeGreaterThan","useRealTimers","window","configurable","getByTestId"],"mappings":"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"}