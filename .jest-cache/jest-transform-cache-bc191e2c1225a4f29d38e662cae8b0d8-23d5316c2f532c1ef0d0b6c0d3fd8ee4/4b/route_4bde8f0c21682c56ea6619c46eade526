95bb81c465f18def741965852279b9cc
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _adminauth = require("../../../../lib/auth/admin-auth");
const _enterpriseauthutils = require("../../../../lib/auth/enterprise-auth-utils");
const _enterprisecache = require("../../../../lib/auth/enterprise-cache");
const _securityauditenhanced = require("../../../../lib/auth/security-audit-enhanced");
const _ratelimiter = require("../../../../lib/rate-limiting/rate-limiter");
const _securitylogger = require("../../../../lib/logging/security-logger");
const _apitimeouts = require("../../../../lib/config/api-timeouts");
const runtime = 'nodejs';
async function GET(request) {
    // Aplicar rate limiting para APIs de autenticación
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.auth, async ()=>{
        // Crear logger de seguridad
        const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
        try {
            // Log del acceso al API de seguridad
            securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'read');
            const url = new URL(request.url);
            const action = url.searchParams.get('action') || 'metrics';
            const userId = url.searchParams.get('userId');
            const severity = url.searchParams.get('severity');
            // ENTERPRISE: Autenticación enterprise con permisos específicos de seguridad
            const enterpriseResult = await (0, _apitimeouts.withTimeout)(()=>(0, _enterpriseauthutils.requireAdminAuth)(request, [
                    'security_read',
                    'admin_access'
                ]), _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000, 'Autenticación enterprise');
            if (!enterpriseResult.success) {
                // Log del intento de acceso no autorizado
                securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'read');
                const errorResponse = {
                    data: null,
                    success: false,
                    error: enterpriseResult.error || 'Permisos de administrador requeridos',
                    enterprise: true,
                    code: enterpriseResult.code
                };
                return _server.NextResponse.json(errorResponse, {
                    status: enterpriseResult.status || 403
                });
            }
            const context = enterpriseResult.context;
            // LEGACY: Mantener compatibilidad con método anterior
            const legacyResult = await (0, _adminauth.getAuthenticatedUser)(request);
            console.log('🔍 Security API: Enterprise vs Legacy auth comparison:', {
                enterprise: enterpriseResult.success,
                legacy: legacyResult.isAdmin,
                agree: enterpriseResult.success === legacyResult.isAdmin
            });
            switch(action){
                case 'metrics':
                    // ENTERPRISE: Obtener métricas de seguridad con cache
                    const metrics = await (0, _enterprisecache.withCache)(`security_metrics_${context.userId}`, ()=>(0, _securityauditenhanced.getSecurityMetrics)(), 2 * 60 * 1000 // 2 minutos de cache
                    );
                    const metricsResponse = {
                        data: {
                            metrics,
                            cache: (0, _enterprisecache.getCacheStats)(),
                            enterprise: {
                                user: context.userId,
                                role: context.role,
                                permissions: context.permissions
                            }
                        },
                        success: true,
                        message: 'Métricas de seguridad obtenidas (enterprise)',
                        enterprise: true
                    };
                    return _server.NextResponse.json(metricsResponse);
                case 'alerts':
                    // ENTERPRISE: Obtener alertas activas con cache
                    const alerts = await (0, _enterprisecache.withCache)(`security_alerts_${userId || 'all'}_${severity || 'all'}`, ()=>(0, _securityauditenhanced.getActiveSecurityAlerts)(userId || undefined, severity), 1 * 60 * 1000 // 1 minuto de cache
                    );
                    const alertsResponse = {
                        data: {
                            alerts,
                            count: alerts.length,
                            cache: (0, _enterprisecache.getCacheStats)(),
                            enterprise: {
                                filtered_by_user: userId,
                                filtered_by_severity: severity,
                                requester: context.userId
                            }
                        },
                        success: true,
                        message: 'Alertas de seguridad obtenidas'
                    };
                    return _server.NextResponse.json(alertsResponse);
                case 'analyze':
                    // Ejecutar análisis de patrones
                    const timeWindow = parseInt(url.searchParams.get('timeWindow') || '24');
                    const analysisAlerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(userId || undefined, timeWindow);
                    const analysisResponse = {
                        data: {
                            alerts: analysisAlerts,
                            count: analysisAlerts.length
                        },
                        success: true,
                        message: `Análisis completado: ${analysisAlerts.length} alertas generadas`
                    };
                    return _server.NextResponse.json(analysisResponse);
                case 'health':
                    // Ejecutar verificación de salud de seguridad
                    const healthCheck = await (0, _securityauditenhanced.runSecurityHealthCheck)();
                    const healthResponse = {
                        data: healthCheck,
                        success: true,
                        message: `Estado de seguridad: ${healthCheck.status}`
                    };
                    return _server.NextResponse.json(healthResponse);
                case 'report':
                    // Generar reporte de seguridad
                    const startDateStr = url.searchParams.get('startDate');
                    const endDateStr = url.searchParams.get('endDate');
                    if (!startDateStr || !endDateStr) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'startDate y endDate son requeridos para generar reporte'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const startDate = new Date(startDateStr);
                    const endDate = new Date(endDateStr);
                    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'Fechas inválidas'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
                    const reportResponse = {
                        data: {
                            report
                        },
                        success: true,
                        message: 'Reporte de seguridad generado'
                    };
                    return _server.NextResponse.json(reportResponse);
                case 'export':
                    // Exportar eventos de seguridad
                    const exportStartStr = url.searchParams.get('startDate');
                    const exportEndStr = url.searchParams.get('endDate');
                    const format = url.searchParams.get('format') || 'json';
                    if (!exportStartStr || !exportEndStr) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'startDate y endDate son requeridos para exportar'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const exportStart = new Date(exportStartStr);
                    const exportEnd = new Date(exportEndStr);
                    const exportData = await (0, _securityauditenhanced.exportSecurityEvents)(exportStart, exportEnd, format);
                    // Retornar como archivo descargable
                    const headers = new Headers();
                    headers.set('Content-Type', format === 'json' ? 'application/json' : 'text/csv');
                    headers.set('Content-Disposition', `attachment; filename="security-events-${exportStartStr}-${exportEndStr}.${format}"`);
                    return new Response(exportData, {
                        headers
                    });
                default:
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: `Acción no válida: ${action}`
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
            }
        } catch (error) {
            // Log del error de seguridad
            securityLogger.logApiError(securityLogger.context, error, {
                endpoint: '/api/auth/security',
                method: 'GET',
                action: request.url
            });
            const errorResponse = {
                data: null,
                success: false,
                error: 'Error interno del servidor'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
    });
    return rateLimitResult;
}
async function POST(request) {
    // Aplicar rate limiting para APIs de autenticación (acciones administrativas)
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.admin, async ()=>{
        // Crear logger de seguridad
        const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
        try {
            // Log del acceso al API de seguridad (POST)
            securityLogger.logApiAccess(securityLogger.context, 'auth/security', 'write');
            const body = await (0, _apitimeouts.withTimeout)(()=>request.json(), _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000, 'Lectura del body de la request');
            const { action, alertId, status, notes, assignedTo } = body;
            if (!action) {
                const errorResponse = {
                    data: null,
                    success: false,
                    error: 'Acción es requerida'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
            }
            // Verificar autenticación y permisos de admin
            const authResult = await (0, _apitimeouts.withTimeout)(()=>(0, _adminauth.getAuthenticatedUser)(request), _apitimeouts.ENDPOINT_TIMEOUTS['/api/auth']?.request || 15000, 'Verificación de autenticación');
            if (!authResult.userId || !authResult.isAdmin) {
                // Log del intento de acceso no autorizado
                securityLogger.logPermissionDenied(securityLogger.context, 'auth/security', 'write');
                const errorResponse = {
                    data: null,
                    success: false,
                    error: 'Permisos de administrador requeridos'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 403
                });
            }
            switch(action){
                case 'update_alert':
                    // Actualizar estado de alerta
                    if (!alertId) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'alertId es requerido'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const updateResult = await (0, _securityauditenhanced.updateSecurityAlert)(alertId, {
                        status,
                        assigned_to: assignedTo,
                        resolution_notes: notes
                    });
                    const updateResponse = {
                        data: {
                            success: updateResult
                        },
                        success: updateResult,
                        message: updateResult ? 'Alerta actualizada' : 'Error actualizando alerta'
                    };
                    return _server.NextResponse.json(updateResponse, {
                        status: updateResult ? 200 : 500
                    });
                case 'resolve_alert':
                    // Resolver alerta
                    if (!alertId || !notes) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'alertId y notes son requeridos'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const resolveResult = await (0, _securityauditenhanced.resolveSecurityAlert)(alertId, notes, authResult.userId);
                    const resolveResponse = {
                        data: {
                            success: resolveResult
                        },
                        success: resolveResult,
                        message: resolveResult ? 'Alerta resuelta' : 'Error resolviendo alerta'
                    };
                    return _server.NextResponse.json(resolveResponse, {
                        status: resolveResult ? 200 : 500
                    });
                case 'false_positive':
                    // Marcar como falso positivo
                    if (!alertId || !notes) {
                        const errorResponse = {
                            data: null,
                            success: false,
                            error: 'alertId y notes son requeridos'
                        };
                        return _server.NextResponse.json(errorResponse, {
                            status: 400
                        });
                    }
                    const fpResult = await (0, _securityauditenhanced.markAlertAsFalsePositive)(alertId, notes, authResult.userId);
                    const fpResponse = {
                        data: {
                            success: fpResult
                        },
                        success: fpResult,
                        message: fpResult ? 'Alerta marcada como falso positivo' : 'Error marcando alerta'
                    };
                    return _server.NextResponse.json(fpResponse, {
                        status: fpResult ? 200 : 500
                    });
                case 'cleanup':
                    // Limpiar eventos antiguos
                    const daysToKeep = body.daysToKeep || 90;
                    const cleanupCount = await (0, _securityauditenhanced.cleanupOldSecurityEvents)(daysToKeep);
                    const cleanupResponse = {
                        data: {
                            deletedCount: cleanupCount
                        },
                        success: true,
                        message: `Limpieza completada: ${cleanupCount} eventos eliminados`
                    };
                    return _server.NextResponse.json(cleanupResponse);
                case 'force_analysis':
                    // Forzar análisis de seguridad
                    const forceUserId = body.userId;
                    const forceTimeWindow = body.timeWindow || 24;
                    const forceAlerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(forceUserId, forceTimeWindow);
                    const forceResponse = {
                        data: {
                            alerts: forceAlerts,
                            count: forceAlerts.length
                        },
                        success: true,
                        message: `Análisis forzado completado: ${forceAlerts.length} alertas generadas`
                    };
                    return _server.NextResponse.json(forceResponse);
                default:
                    const errorResponse = {
                        data: null,
                        success: false,
                        error: `Acción no válida: ${action}`
                    };
                    return _server.NextResponse.json(errorResponse, {
                        status: 400
                    });
            }
        } catch (error) {
            // Log del error de seguridad
            securityLogger.logApiError(securityLogger.context, error, {
                endpoint: '/api/auth/security',
                method: 'POST',
                action: request.url
            });
            const errorResponse = {
                data: null,
                success: false,
                error: 'Error interno del servidor'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
    });
    return rateLimitResult;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXGF1dGhcXHNlY3VyaXR5XFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb25maWd1cmFjacOzbiBwYXJhIE5vZGUuanMgUnVudGltZVxyXG5leHBvcnQgY29uc3QgcnVudGltZSA9ICdub2RlanMnO1xyXG5cclxuLyoqXHJcbiAqIEFQSSBFbnRlcnByaXNlIGRlIEF1ZGl0b3LDrWEgZGUgU2VndXJpZGFkIE1lam9yYWRhXHJcbiAqIFJlZmFjdG9yaXphZGEgY29uIHV0aWxpZGFkZXMgZW50ZXJwcmlzZSArIFJMUyArIHZhbGlkYWNpb25lcyByb2J1c3Rhc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IGdldEF1dGhlbnRpY2F0ZWRVc2VyIH0gZnJvbSAnQC9saWIvYXV0aC9hZG1pbi1hdXRoJztcclxuaW1wb3J0IHtcclxuICByZXF1aXJlQWRtaW5BdXRoXHJcbn0gZnJvbSAnQC9saWIvYXV0aC9lbnRlcnByaXNlLWF1dGgtdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGV4ZWN1dGVXaXRoUkxTXHJcbn0gZnJvbSAnQC9saWIvYXV0aC9lbnRlcnByaXNlLXJscy11dGlscyc7XHJcbmltcG9ydCB7XHJcbiAgd2l0aENhY2hlLFxyXG4gIGdldENhY2hlU3RhdHNcclxufSBmcm9tICdAL2xpYi9hdXRoL2VudGVycHJpc2UtY2FjaGUnO1xyXG5pbXBvcnQge1xyXG4gIGFuYWx5emVTZWN1cml0eVBhdHRlcm5zLFxyXG4gIGdldFNlY3VyaXR5TWV0cmljcyxcclxuICBnZW5lcmF0ZVNlY3VyaXR5UmVwb3J0LFxyXG4gIGdldEFjdGl2ZVNlY3VyaXR5QWxlcnRzLFxyXG4gIHVwZGF0ZVNlY3VyaXR5QWxlcnQsXHJcbiAgcmVzb2x2ZVNlY3VyaXR5QWxlcnQsXHJcbiAgbWFya0FsZXJ0QXNGYWxzZVBvc2l0aXZlLFxyXG4gIHJ1blNlY3VyaXR5SGVhbHRoQ2hlY2ssXHJcbiAgY2xlYW51cE9sZFNlY3VyaXR5RXZlbnRzLFxyXG4gIGV4cG9ydFNlY3VyaXR5RXZlbnRzXHJcbn0gZnJvbSAnQC9saWIvYXV0aC9zZWN1cml0eS1hdWRpdC1lbmhhbmNlZCc7XHJcbmltcG9ydCB7IEFwaVJlc3BvbnNlIH0gZnJvbSAnQC90eXBlcy9hcGknO1xyXG5pbXBvcnQgeyB3aXRoUmF0ZUxpbWl0LCBSQVRFX0xJTUlUX0NPTkZJR1MgfSBmcm9tICdAL2xpYi9yYXRlLWxpbWl0aW5nL3JhdGUtbGltaXRlcic7XHJcbmltcG9ydCB7IGNyZWF0ZVNlY3VyaXR5TG9nZ2VyIH0gZnJvbSAnQC9saWIvbG9nZ2luZy9zZWN1cml0eS1sb2dnZXInO1xyXG5pbXBvcnQgeyB3aXRoVGltZW91dCwgRU5EUE9JTlRfVElNRU9VVFMgfSBmcm9tICdAL2xpYi9jb25maWcvYXBpLXRpbWVvdXRzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEdFVCAvYXBpL2F1dGgvc2VjdXJpdHlcclxuLy8gT2J0aWVuZSBtw6l0cmljYXMsIGFsZXJ0YXMgbyBlamVjdXRhIGFuw6FsaXNpc1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIC8vIEFwbGljYXIgcmF0ZSBsaW1pdGluZyBwYXJhIEFQSXMgZGUgYXV0ZW50aWNhY2nDs25cclxuICBjb25zdCByYXRlTGltaXRSZXN1bHQgPSBhd2FpdCB3aXRoUmF0ZUxpbWl0KFxyXG4gICAgcmVxdWVzdCxcclxuICAgIFJBVEVfTElNSVRfQ09ORklHUy5hdXRoLFxyXG4gICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBDcmVhciBsb2dnZXIgZGUgc2VndXJpZGFkXHJcbiAgICAgIGNvbnN0IHNlY3VyaXR5TG9nZ2VyID0gY3JlYXRlU2VjdXJpdHlMb2dnZXIocmVxdWVzdCk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIExvZyBkZWwgYWNjZXNvIGFsIEFQSSBkZSBzZWd1cmlkYWRcclxuICAgICAgICBzZWN1cml0eUxvZ2dlci5sb2dBcGlBY2Nlc3Moc2VjdXJpdHlMb2dnZXIuY29udGV4dCwgJ2F1dGgvc2VjdXJpdHknLCAncmVhZCcpO1xyXG5cclxuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgICAgICBjb25zdCBhY3Rpb24gPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnYWN0aW9uJykgfHwgJ21ldHJpY3MnO1xyXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCd1c2VySWQnKTtcclxuICAgICAgICBjb25zdCBzZXZlcml0eSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzZXZlcml0eScpIGFzIGFueTtcclxuXHJcbiAgICAgICAgLy8gRU5URVJQUklTRTogQXV0ZW50aWNhY2nDs24gZW50ZXJwcmlzZSBjb24gcGVybWlzb3MgZXNwZWPDrWZpY29zIGRlIHNlZ3VyaWRhZFxyXG4gICAgICAgIGNvbnN0IGVudGVycHJpc2VSZXN1bHQgPSBhd2FpdCB3aXRoVGltZW91dChcclxuICAgICAgICAgICgpID0+IHJlcXVpcmVBZG1pbkF1dGgocmVxdWVzdCwgWydzZWN1cml0eV9yZWFkJywgJ2FkbWluX2FjY2VzcyddKSxcclxuICAgICAgICAgIEVORFBPSU5UX1RJTUVPVVRTWycvYXBpL2F1dGgnXT8ucmVxdWVzdCB8fCAxNTAwMCxcclxuICAgICAgICAgICdBdXRlbnRpY2FjacOzbiBlbnRlcnByaXNlJ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmICghZW50ZXJwcmlzZVJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAvLyBMb2cgZGVsIGludGVudG8gZGUgYWNjZXNvIG5vIGF1dG9yaXphZG9cclxuICAgICAgICAgIHNlY3VyaXR5TG9nZ2VyLmxvZ1Blcm1pc3Npb25EZW5pZWQoc2VjdXJpdHlMb2dnZXIuY29udGV4dCwgJ2F1dGgvc2VjdXJpdHknLCAncmVhZCcpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGVudGVycHJpc2VSZXN1bHQuZXJyb3IgfHwgJ1Blcm1pc29zIGRlIGFkbWluaXN0cmFkb3IgcmVxdWVyaWRvcycsXHJcbiAgICAgICAgICAgIGVudGVycHJpc2U6IHRydWUsXHJcbiAgICAgICAgICAgIGNvZGU6IGVudGVycHJpc2VSZXN1bHQuY29kZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogZW50ZXJwcmlzZVJlc3VsdC5zdGF0dXMgfHwgNDAzIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0gZW50ZXJwcmlzZVJlc3VsdC5jb250ZXh0ITtcclxuXHJcbiAgICAvLyBMRUdBQ1k6IE1hbnRlbmVyIGNvbXBhdGliaWxpZGFkIGNvbiBtw6l0b2RvIGFudGVyaW9yXHJcbiAgICBjb25zdCBsZWdhY3lSZXN1bHQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkVXNlcihyZXF1ZXN0KTtcclxuICAgIGNvbnNvbGUubG9nKCfwn5SNIFNlY3VyaXR5IEFQSTogRW50ZXJwcmlzZSB2cyBMZWdhY3kgYXV0aCBjb21wYXJpc29uOicsIHtcclxuICAgICAgZW50ZXJwcmlzZTogZW50ZXJwcmlzZVJlc3VsdC5zdWNjZXNzLFxyXG4gICAgICBsZWdhY3k6IGxlZ2FjeVJlc3VsdC5pc0FkbWluLFxyXG4gICAgICBhZ3JlZTogZW50ZXJwcmlzZVJlc3VsdC5zdWNjZXNzID09PSBsZWdhY3lSZXN1bHQuaXNBZG1pblxyXG4gICAgfSk7XHJcblxyXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgY2FzZSAnbWV0cmljcyc6XHJcbiAgICAgICAgLy8gRU5URVJQUklTRTogT2J0ZW5lciBtw6l0cmljYXMgZGUgc2VndXJpZGFkIGNvbiBjYWNoZVxyXG4gICAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCB3aXRoQ2FjaGUoXHJcbiAgICAgICAgICBgc2VjdXJpdHlfbWV0cmljc18ke2NvbnRleHQudXNlcklkfWAsXHJcbiAgICAgICAgICAoKSA9PiBnZXRTZWN1cml0eU1ldHJpY3MoKSxcclxuICAgICAgICAgIDIgKiA2MCAqIDEwMDAgLy8gMiBtaW51dG9zIGRlIGNhY2hlXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWV0cmljc1Jlc3BvbnNlOiBBcGlSZXNwb25zZTxhbnk+ID0ge1xyXG4gICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBtZXRyaWNzLFxyXG4gICAgICAgICAgICBjYWNoZTogZ2V0Q2FjaGVTdGF0cygpLFxyXG4gICAgICAgICAgICBlbnRlcnByaXNlOiB7XHJcbiAgICAgICAgICAgICAgdXNlcjogY29udGV4dC51c2VySWQsXHJcbiAgICAgICAgICAgICAgcm9sZTogY29udGV4dC5yb2xlLFxyXG4gICAgICAgICAgICAgIHBlcm1pc3Npb25zOiBjb250ZXh0LnBlcm1pc3Npb25zXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ03DqXRyaWNhcyBkZSBzZWd1cmlkYWQgb2J0ZW5pZGFzIChlbnRlcnByaXNlKScsXHJcbiAgICAgICAgICBlbnRlcnByaXNlOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24obWV0cmljc1Jlc3BvbnNlKTtcclxuXHJcbiAgICAgIGNhc2UgJ2FsZXJ0cyc6XHJcbiAgICAgICAgLy8gRU5URVJQUklTRTogT2J0ZW5lciBhbGVydGFzIGFjdGl2YXMgY29uIGNhY2hlXHJcbiAgICAgICAgY29uc3QgYWxlcnRzID0gYXdhaXQgd2l0aENhY2hlKFxyXG4gICAgICAgICAgYHNlY3VyaXR5X2FsZXJ0c18ke3VzZXJJZCB8fCAnYWxsJ31fJHtzZXZlcml0eSB8fCAnYWxsJ31gLFxyXG4gICAgICAgICAgKCkgPT4gZ2V0QWN0aXZlU2VjdXJpdHlBbGVydHModXNlcklkIHx8IHVuZGVmaW5lZCwgc2V2ZXJpdHkpLFxyXG4gICAgICAgICAgMSAqIDYwICogMTAwMCAvLyAxIG1pbnV0byBkZSBjYWNoZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsZXJ0c1Jlc3BvbnNlOiBBcGlSZXNwb25zZTxhbnk+ID0ge1xyXG4gICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBhbGVydHMsXHJcbiAgICAgICAgICAgIGNvdW50OiBhbGVydHMubGVuZ3RoLFxyXG4gICAgICAgICAgICBjYWNoZTogZ2V0Q2FjaGVTdGF0cygpLFxyXG4gICAgICAgICAgICBlbnRlcnByaXNlOiB7XHJcbiAgICAgICAgICAgICAgZmlsdGVyZWRfYnlfdXNlcjogdXNlcklkLFxyXG4gICAgICAgICAgICAgIGZpbHRlcmVkX2J5X3NldmVyaXR5OiBzZXZlcml0eSxcclxuICAgICAgICAgICAgICByZXF1ZXN0ZXI6IGNvbnRleHQudXNlcklkXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ0FsZXJ0YXMgZGUgc2VndXJpZGFkIG9idGVuaWRhcydcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihhbGVydHNSZXNwb25zZSk7XHJcblxyXG4gICAgICBjYXNlICdhbmFseXplJzpcclxuICAgICAgICAvLyBFamVjdXRhciBhbsOhbGlzaXMgZGUgcGF0cm9uZXNcclxuICAgICAgICBjb25zdCB0aW1lV2luZG93ID0gcGFyc2VJbnQodXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3RpbWVXaW5kb3cnKSB8fCAnMjQnKTtcclxuICAgICAgICBjb25zdCBhbmFseXNpc0FsZXJ0cyA9IGF3YWl0IGFuYWx5emVTZWN1cml0eVBhdHRlcm5zKHVzZXJJZCB8fCB1bmRlZmluZWQsIHRpbWVXaW5kb3cpO1xyXG4gICAgICAgIGNvbnN0IGFuYWx5c2lzUmVzcG9uc2U6IEFwaVJlc3BvbnNlPGFueT4gPSB7XHJcbiAgICAgICAgICBkYXRhOiB7IGFsZXJ0czogYW5hbHlzaXNBbGVydHMsIGNvdW50OiBhbmFseXNpc0FsZXJ0cy5sZW5ndGggfSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICBtZXNzYWdlOiBgQW7DoWxpc2lzIGNvbXBsZXRhZG86ICR7YW5hbHlzaXNBbGVydHMubGVuZ3RofSBhbGVydGFzIGdlbmVyYWRhc2BcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihhbmFseXNpc1Jlc3BvbnNlKTtcclxuXHJcbiAgICAgIGNhc2UgJ2hlYWx0aCc6XHJcbiAgICAgICAgLy8gRWplY3V0YXIgdmVyaWZpY2FjacOzbiBkZSBzYWx1ZCBkZSBzZWd1cmlkYWRcclxuICAgICAgICBjb25zdCBoZWFsdGhDaGVjayA9IGF3YWl0IHJ1blNlY3VyaXR5SGVhbHRoQ2hlY2soKTtcclxuICAgICAgICBjb25zdCBoZWFsdGhSZXNwb25zZTogQXBpUmVzcG9uc2U8YW55PiA9IHtcclxuICAgICAgICAgIGRhdGE6IGhlYWx0aENoZWNrLFxyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6IGBFc3RhZG8gZGUgc2VndXJpZGFkOiAke2hlYWx0aENoZWNrLnN0YXR1c31gXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oaGVhbHRoUmVzcG9uc2UpO1xyXG5cclxuICAgICAgY2FzZSAncmVwb3J0JzpcclxuICAgICAgICAvLyBHZW5lcmFyIHJlcG9ydGUgZGUgc2VndXJpZGFkXHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlU3RyID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0RGF0ZScpO1xyXG4gICAgICAgIGNvbnN0IGVuZERhdGVTdHIgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnZW5kRGF0ZScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghc3RhcnREYXRlU3RyIHx8ICFlbmREYXRlU3RyKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlOiBBcGlSZXNwb25zZTxudWxsPiA9IHtcclxuICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9yOiAnc3RhcnREYXRlIHkgZW5kRGF0ZSBzb24gcmVxdWVyaWRvcyBwYXJhIGdlbmVyYXIgcmVwb3J0ZSdcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZVN0cik7XHJcbiAgICAgICAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKGVuZERhdGVTdHIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc05hTihzdGFydERhdGUuZ2V0VGltZSgpKSB8fCBpc05hTihlbmREYXRlLmdldFRpbWUoKSkpIHtcclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6ICdGZWNoYXMgaW52w6FsaWRhcydcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IGdlbmVyYXRlU2VjdXJpdHlSZXBvcnQoc3RhcnREYXRlLCBlbmREYXRlKTtcclxuICAgICAgICBjb25zdCByZXBvcnRSZXNwb25zZTogQXBpUmVzcG9uc2U8YW55PiA9IHtcclxuICAgICAgICAgIGRhdGE6IHsgcmVwb3J0IH0sXHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgbWVzc2FnZTogJ1JlcG9ydGUgZGUgc2VndXJpZGFkIGdlbmVyYWRvJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlcG9ydFJlc3BvbnNlKTtcclxuXHJcbiAgICAgIGNhc2UgJ2V4cG9ydCc6XHJcbiAgICAgICAgLy8gRXhwb3J0YXIgZXZlbnRvcyBkZSBzZWd1cmlkYWRcclxuICAgICAgICBjb25zdCBleHBvcnRTdGFydFN0ciA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzdGFydERhdGUnKTtcclxuICAgICAgICBjb25zdCBleHBvcnRFbmRTdHIgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnZW5kRGF0ZScpO1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdCA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdmb3JtYXQnKSBhcyAnanNvbicgfCAnY3N2JyB8fCAnanNvbic7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFleHBvcnRTdGFydFN0ciB8fCAhZXhwb3J0RW5kU3RyKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlOiBBcGlSZXNwb25zZTxudWxsPiA9IHtcclxuICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9yOiAnc3RhcnREYXRlIHkgZW5kRGF0ZSBzb24gcmVxdWVyaWRvcyBwYXJhIGV4cG9ydGFyJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNDAwIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZXhwb3J0U3RhcnQgPSBuZXcgRGF0ZShleHBvcnRTdGFydFN0cik7XHJcbiAgICAgICAgY29uc3QgZXhwb3J0RW5kID0gbmV3IERhdGUoZXhwb3J0RW5kU3RyKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBleHBvcnREYXRhID0gYXdhaXQgZXhwb3J0U2VjdXJpdHlFdmVudHMoZXhwb3J0U3RhcnQsIGV4cG9ydEVuZCwgZm9ybWF0KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBSZXRvcm5hciBjb21vIGFyY2hpdm8gZGVzY2FyZ2FibGVcclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcclxuICAgICAgICBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgZm9ybWF0ID09PSAnanNvbicgPyAnYXBwbGljYXRpb24vanNvbicgOiAndGV4dC9jc3YnKTtcclxuICAgICAgICBoZWFkZXJzLnNldCgnQ29udGVudC1EaXNwb3NpdGlvbicsIGBhdHRhY2htZW50OyBmaWxlbmFtZT1cInNlY3VyaXR5LWV2ZW50cy0ke2V4cG9ydFN0YXJ0U3RyfS0ke2V4cG9ydEVuZFN0cn0uJHtmb3JtYXR9XCJgKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGV4cG9ydERhdGEsIHsgaGVhZGVycyB9KTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGBBY2Npw7NuIG5vIHbDoWxpZGE6ICR7YWN0aW9ufWBcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vIExvZyBkZWwgZXJyb3IgZGUgc2VndXJpZGFkXHJcbiAgICAgICAgc2VjdXJpdHlMb2dnZXIubG9nQXBpRXJyb3Ioc2VjdXJpdHlMb2dnZXIuY29udGV4dCwgZXJyb3IgYXMgRXJyb3IsIHtcclxuICAgICAgICAgIGVuZHBvaW50OiAnL2FwaS9hdXRoL3NlY3VyaXR5JyxcclxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICBhY3Rpb246IHJlcXVlc3QudXJsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGRlbCBzZXJ2aWRvcidcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNTAwIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJhdGVMaW1pdFJlc3VsdDtcclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gUE9TVCAvYXBpL2F1dGgvc2VjdXJpdHlcclxuLy8gQWNjaW9uZXMgc29icmUgYWxlcnRhcyB5IG1hbnRlbmltaWVudG9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgLy8gQXBsaWNhciByYXRlIGxpbWl0aW5nIHBhcmEgQVBJcyBkZSBhdXRlbnRpY2FjacOzbiAoYWNjaW9uZXMgYWRtaW5pc3RyYXRpdmFzKVxyXG4gIGNvbnN0IHJhdGVMaW1pdFJlc3VsdCA9IGF3YWl0IHdpdGhSYXRlTGltaXQoXHJcbiAgICByZXF1ZXN0LFxyXG4gICAgUkFURV9MSU1JVF9DT05GSUdTLmFkbWluLFxyXG4gICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBDcmVhciBsb2dnZXIgZGUgc2VndXJpZGFkXHJcbiAgICAgIGNvbnN0IHNlY3VyaXR5TG9nZ2VyID0gY3JlYXRlU2VjdXJpdHlMb2dnZXIocmVxdWVzdCk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIExvZyBkZWwgYWNjZXNvIGFsIEFQSSBkZSBzZWd1cmlkYWQgKFBPU1QpXHJcbiAgICAgICAgc2VjdXJpdHlMb2dnZXIubG9nQXBpQWNjZXNzKHNlY3VyaXR5TG9nZ2VyLmNvbnRleHQsICdhdXRoL3NlY3VyaXR5JywgJ3dyaXRlJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB3aXRoVGltZW91dChcclxuICAgICAgICAgICgpID0+IHJlcXVlc3QuanNvbigpLFxyXG4gICAgICAgICAgRU5EUE9JTlRfVElNRU9VVFNbJy9hcGkvYXV0aCddPy5yZXF1ZXN0IHx8IDE1MDAwLFxyXG4gICAgICAgICAgJ0xlY3R1cmEgZGVsIGJvZHkgZGUgbGEgcmVxdWVzdCdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCB7IGFjdGlvbiwgYWxlcnRJZCwgc3RhdHVzLCBub3RlcywgYXNzaWduZWRUbyB9ID0gYm9keTtcclxuXHJcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6ICdBY2Npw7NuIGVzIHJlcXVlcmlkYSdcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZlcmlmaWNhciBhdXRlbnRpY2FjacOzbiB5IHBlcm1pc29zIGRlIGFkbWluXHJcbiAgICAgICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IHdpdGhUaW1lb3V0KFxyXG4gICAgICAgICAgKCkgPT4gZ2V0QXV0aGVudGljYXRlZFVzZXIocmVxdWVzdCksXHJcbiAgICAgICAgICBFTkRQT0lOVF9USU1FT1VUU1snL2FwaS9hdXRoJ10/LnJlcXVlc3QgfHwgMTUwMDAsXHJcbiAgICAgICAgICAnVmVyaWZpY2FjacOzbiBkZSBhdXRlbnRpY2FjacOzbidcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoIWF1dGhSZXN1bHQudXNlcklkIHx8ICFhdXRoUmVzdWx0LmlzQWRtaW4pIHtcclxuICAgICAgICAgIC8vIExvZyBkZWwgaW50ZW50byBkZSBhY2Nlc28gbm8gYXV0b3JpemFkb1xyXG4gICAgICAgICAgc2VjdXJpdHlMb2dnZXIubG9nUGVybWlzc2lvbkRlbmllZChzZWN1cml0eUxvZ2dlci5jb250ZXh0LCAnYXV0aC9zZWN1cml0eScsICd3cml0ZScpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6ICdQZXJtaXNvcyBkZSBhZG1pbmlzdHJhZG9yIHJlcXVlcmlkb3MnXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA0MDMgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgJ3VwZGF0ZV9hbGVydCc6XHJcbiAgICAgICAgLy8gQWN0dWFsaXphciBlc3RhZG8gZGUgYWxlcnRhXHJcbiAgICAgICAgaWYgKCFhbGVydElkKSB7XHJcbiAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlOiBBcGlSZXNwb25zZTxudWxsPiA9IHtcclxuICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9yOiAnYWxlcnRJZCBlcyByZXF1ZXJpZG8nXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB1cGRhdGVSZXN1bHQgPSBhd2FpdCB1cGRhdGVTZWN1cml0eUFsZXJ0KGFsZXJ0SWQsIHtcclxuICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICAgIGFzc2lnbmVkX3RvOiBhc3NpZ25lZFRvLFxyXG4gICAgICAgICAgcmVzb2x1dGlvbl9ub3Rlczogbm90ZXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgdXBkYXRlUmVzcG9uc2U6IEFwaVJlc3BvbnNlPGFueT4gPSB7XHJcbiAgICAgICAgICBkYXRhOiB7IHN1Y2Nlc3M6IHVwZGF0ZVJlc3VsdCB9LFxyXG4gICAgICAgICAgc3VjY2VzczogdXBkYXRlUmVzdWx0LFxyXG4gICAgICAgICAgbWVzc2FnZTogdXBkYXRlUmVzdWx0ID8gJ0FsZXJ0YSBhY3R1YWxpemFkYScgOiAnRXJyb3IgYWN0dWFsaXphbmRvIGFsZXJ0YSdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih1cGRhdGVSZXNwb25zZSwgeyBcclxuICAgICAgICAgIHN0YXR1czogdXBkYXRlUmVzdWx0ID8gMjAwIDogNTAwIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgY2FzZSAncmVzb2x2ZV9hbGVydCc6XHJcbiAgICAgICAgLy8gUmVzb2x2ZXIgYWxlcnRhXHJcbiAgICAgICAgaWYgKCFhbGVydElkIHx8ICFub3Rlcykge1xyXG4gICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XHJcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogJ2FsZXJ0SWQgeSBub3RlcyBzb24gcmVxdWVyaWRvcydcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZXJyb3JSZXNwb25zZSwgeyBzdGF0dXM6IDQwMCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVSZXN1bHQgPSBhd2FpdCByZXNvbHZlU2VjdXJpdHlBbGVydChcclxuICAgICAgICAgIGFsZXJ0SWQsIFxyXG4gICAgICAgICAgbm90ZXMsIFxyXG4gICAgICAgICAgYXV0aFJlc3VsdC51c2VySWRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCByZXNvbHZlUmVzcG9uc2U6IEFwaVJlc3BvbnNlPGFueT4gPSB7XHJcbiAgICAgICAgICBkYXRhOiB7IHN1Y2Nlc3M6IHJlc29sdmVSZXN1bHQgfSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IHJlc29sdmVSZXN1bHQsXHJcbiAgICAgICAgICBtZXNzYWdlOiByZXNvbHZlUmVzdWx0ID8gJ0FsZXJ0YSByZXN1ZWx0YScgOiAnRXJyb3IgcmVzb2x2aWVuZG8gYWxlcnRhJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc29sdmVSZXNwb25zZSwgeyBcclxuICAgICAgICAgIHN0YXR1czogcmVzb2x2ZVJlc3VsdCA/IDIwMCA6IDUwMCBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIGNhc2UgJ2ZhbHNlX3Bvc2l0aXZlJzpcclxuICAgICAgICAvLyBNYXJjYXIgY29tbyBmYWxzbyBwb3NpdGl2b1xyXG4gICAgICAgIGlmICghYWxlcnRJZCB8fCAhbm90ZXMpIHtcclxuICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6ICdhbGVydElkIHkgbm90ZXMgc29uIHJlcXVlcmlkb3MnXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmcFJlc3VsdCA9IGF3YWl0IG1hcmtBbGVydEFzRmFsc2VQb3NpdGl2ZShcclxuICAgICAgICAgIGFsZXJ0SWQsIFxyXG4gICAgICAgICAgbm90ZXMsIFxyXG4gICAgICAgICAgYXV0aFJlc3VsdC51c2VySWRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBmcFJlc3BvbnNlOiBBcGlSZXNwb25zZTxhbnk+ID0ge1xyXG4gICAgICAgICAgZGF0YTogeyBzdWNjZXNzOiBmcFJlc3VsdCB9LFxyXG4gICAgICAgICAgc3VjY2VzczogZnBSZXN1bHQsXHJcbiAgICAgICAgICBtZXNzYWdlOiBmcFJlc3VsdCA/ICdBbGVydGEgbWFyY2FkYSBjb21vIGZhbHNvIHBvc2l0aXZvJyA6ICdFcnJvciBtYXJjYW5kbyBhbGVydGEnXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oZnBSZXNwb25zZSwgeyBcclxuICAgICAgICAgIHN0YXR1czogZnBSZXN1bHQgPyAyMDAgOiA1MDAgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBjYXNlICdjbGVhbnVwJzpcclxuICAgICAgICAvLyBMaW1waWFyIGV2ZW50b3MgYW50aWd1b3NcclxuICAgICAgICBjb25zdCBkYXlzVG9LZWVwID0gYm9keS5kYXlzVG9LZWVwIHx8IDkwO1xyXG4gICAgICAgIGNvbnN0IGNsZWFudXBDb3VudCA9IGF3YWl0IGNsZWFudXBPbGRTZWN1cml0eUV2ZW50cyhkYXlzVG9LZWVwKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xlYW51cFJlc3BvbnNlOiBBcGlSZXNwb25zZTxhbnk+ID0ge1xyXG4gICAgICAgICAgZGF0YTogeyBkZWxldGVkQ291bnQ6IGNsZWFudXBDb3VudCB9LFxyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6IGBMaW1waWV6YSBjb21wbGV0YWRhOiAke2NsZWFudXBDb3VudH0gZXZlbnRvcyBlbGltaW5hZG9zYFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGNsZWFudXBSZXNwb25zZSk7XHJcblxyXG4gICAgICBjYXNlICdmb3JjZV9hbmFseXNpcyc6XHJcbiAgICAgICAgLy8gRm9yemFyIGFuw6FsaXNpcyBkZSBzZWd1cmlkYWRcclxuICAgICAgICBjb25zdCBmb3JjZVVzZXJJZCA9IGJvZHkudXNlcklkO1xyXG4gICAgICAgIGNvbnN0IGZvcmNlVGltZVdpbmRvdyA9IGJvZHkudGltZVdpbmRvdyB8fCAyNDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBmb3JjZUFsZXJ0cyA9IGF3YWl0IGFuYWx5emVTZWN1cml0eVBhdHRlcm5zKGZvcmNlVXNlcklkLCBmb3JjZVRpbWVXaW5kb3cpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGZvcmNlUmVzcG9uc2U6IEFwaVJlc3BvbnNlPGFueT4gPSB7XHJcbiAgICAgICAgICBkYXRhOiB7IGFsZXJ0czogZm9yY2VBbGVydHMsIGNvdW50OiBmb3JjZUFsZXJ0cy5sZW5ndGggfSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICBtZXNzYWdlOiBgQW7DoWxpc2lzIGZvcnphZG8gY29tcGxldGFkbzogJHtmb3JjZUFsZXJ0cy5sZW5ndGh9IGFsZXJ0YXMgZ2VuZXJhZGFzYFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGZvcmNlUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XHJcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcjogYEFjY2nDs24gbm8gdsOhbGlkYTogJHthY3Rpb259YFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNDAwIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgLy8gTG9nIGRlbCBlcnJvciBkZSBzZWd1cmlkYWRcclxuICAgICAgICBzZWN1cml0eUxvZ2dlci5sb2dBcGlFcnJvcihzZWN1cml0eUxvZ2dlci5jb250ZXh0LCBlcnJvciBhcyBFcnJvciwge1xyXG4gICAgICAgICAgZW5kcG9pbnQ6ICcvYXBpL2F1dGgvc2VjdXJpdHknLFxyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBhY3Rpb246IHJlcXVlc3QudXJsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xyXG4gICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGRlbCBzZXJ2aWRvcidcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNTAwIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJhdGVMaW1pdFJlc3VsdDtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkdFVCIsIlBPU1QiLCJydW50aW1lIiwicmVxdWVzdCIsInJhdGVMaW1pdFJlc3VsdCIsIndpdGhSYXRlTGltaXQiLCJSQVRFX0xJTUlUX0NPTkZJR1MiLCJhdXRoIiwic2VjdXJpdHlMb2dnZXIiLCJjcmVhdGVTZWN1cml0eUxvZ2dlciIsImxvZ0FwaUFjY2VzcyIsImNvbnRleHQiLCJ1cmwiLCJVUkwiLCJhY3Rpb24iLCJzZWFyY2hQYXJhbXMiLCJnZXQiLCJ1c2VySWQiLCJzZXZlcml0eSIsImVudGVycHJpc2VSZXN1bHQiLCJ3aXRoVGltZW91dCIsInJlcXVpcmVBZG1pbkF1dGgiLCJFTkRQT0lOVF9USU1FT1VUUyIsInN1Y2Nlc3MiLCJsb2dQZXJtaXNzaW9uRGVuaWVkIiwiZXJyb3JSZXNwb25zZSIsImRhdGEiLCJlcnJvciIsImVudGVycHJpc2UiLCJjb2RlIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInN0YXR1cyIsImxlZ2FjeVJlc3VsdCIsImdldEF1dGhlbnRpY2F0ZWRVc2VyIiwiY29uc29sZSIsImxvZyIsImxlZ2FjeSIsImlzQWRtaW4iLCJhZ3JlZSIsIm1ldHJpY3MiLCJ3aXRoQ2FjaGUiLCJnZXRTZWN1cml0eU1ldHJpY3MiLCJtZXRyaWNzUmVzcG9uc2UiLCJjYWNoZSIsImdldENhY2hlU3RhdHMiLCJ1c2VyIiwicm9sZSIsInBlcm1pc3Npb25zIiwibWVzc2FnZSIsImFsZXJ0cyIsImdldEFjdGl2ZVNlY3VyaXR5QWxlcnRzIiwidW5kZWZpbmVkIiwiYWxlcnRzUmVzcG9uc2UiLCJjb3VudCIsImxlbmd0aCIsImZpbHRlcmVkX2J5X3VzZXIiLCJmaWx0ZXJlZF9ieV9zZXZlcml0eSIsInJlcXVlc3RlciIsInRpbWVXaW5kb3ciLCJwYXJzZUludCIsImFuYWx5c2lzQWxlcnRzIiwiYW5hbHl6ZVNlY3VyaXR5UGF0dGVybnMiLCJhbmFseXNpc1Jlc3BvbnNlIiwiaGVhbHRoQ2hlY2siLCJydW5TZWN1cml0eUhlYWx0aENoZWNrIiwiaGVhbHRoUmVzcG9uc2UiLCJzdGFydERhdGVTdHIiLCJlbmREYXRlU3RyIiwic3RhcnREYXRlIiwiRGF0ZSIsImVuZERhdGUiLCJpc05hTiIsImdldFRpbWUiLCJyZXBvcnQiLCJnZW5lcmF0ZVNlY3VyaXR5UmVwb3J0IiwicmVwb3J0UmVzcG9uc2UiLCJleHBvcnRTdGFydFN0ciIsImV4cG9ydEVuZFN0ciIsImZvcm1hdCIsImV4cG9ydFN0YXJ0IiwiZXhwb3J0RW5kIiwiZXhwb3J0RGF0YSIsImV4cG9ydFNlY3VyaXR5RXZlbnRzIiwiaGVhZGVycyIsIkhlYWRlcnMiLCJzZXQiLCJSZXNwb25zZSIsImxvZ0FwaUVycm9yIiwiZW5kcG9pbnQiLCJtZXRob2QiLCJhZG1pbiIsImJvZHkiLCJhbGVydElkIiwibm90ZXMiLCJhc3NpZ25lZFRvIiwiYXV0aFJlc3VsdCIsInVwZGF0ZVJlc3VsdCIsInVwZGF0ZVNlY3VyaXR5QWxlcnQiLCJhc3NpZ25lZF90byIsInJlc29sdXRpb25fbm90ZXMiLCJ1cGRhdGVSZXNwb25zZSIsInJlc29sdmVSZXN1bHQiLCJyZXNvbHZlU2VjdXJpdHlBbGVydCIsInJlc29sdmVSZXNwb25zZSIsImZwUmVzdWx0IiwibWFya0FsZXJ0QXNGYWxzZVBvc2l0aXZlIiwiZnBSZXNwb25zZSIsImRheXNUb0tlZXAiLCJjbGVhbnVwQ291bnQiLCJjbGVhbnVwT2xkU2VjdXJpdHlFdmVudHMiLCJjbGVhbnVwUmVzcG9uc2UiLCJkZWxldGVkQ291bnQiLCJmb3JjZVVzZXJJZCIsImZvcmNlVGltZVdpbmRvdyIsImZvcmNlQWxlcnRzIiwiZm9yY2VSZXNwb25zZSJdLCJtYXBwaW5ncyI6IkFBQUEscUNBQXFDOzs7Ozs7Ozs7Ozs7UUEwQ2ZBO2VBQUFBOztRQXNOQUM7ZUFBQUE7O1FBL1BUQztlQUFBQTs7O3dCQU82QjsyQkFDTDtxQ0FHOUI7aUNBT0E7dUNBWUE7NkJBRTJDO2dDQUNiOzZCQUNVO0FBbEN4QyxNQUFNQSxVQUFVO0FBeUNoQixlQUFlRixJQUFJRyxPQUFvQjtJQUM1QyxtREFBbUQ7SUFDbkQsTUFBTUMsa0JBQWtCLE1BQU1DLElBQUFBLDBCQUFhLEVBQ3pDRixTQUNBRywrQkFBa0IsQ0FBQ0MsSUFBSSxFQUN2QjtRQUNFLDRCQUE0QjtRQUM1QixNQUFNQyxpQkFBaUJDLElBQUFBLG9DQUFvQixFQUFDTjtRQUU1QyxJQUFJO1lBQ0YscUNBQXFDO1lBQ3JDSyxlQUFlRSxZQUFZLENBQUNGLGVBQWVHLE9BQU8sRUFBRSxpQkFBaUI7WUFFckUsTUFBTUMsTUFBTSxJQUFJQyxJQUFJVixRQUFRUyxHQUFHO1lBQy9CLE1BQU1FLFNBQVNGLElBQUlHLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLGFBQWE7WUFDakQsTUFBTUMsU0FBU0wsSUFBSUcsWUFBWSxDQUFDQyxHQUFHLENBQUM7WUFDcEMsTUFBTUUsV0FBV04sSUFBSUcsWUFBWSxDQUFDQyxHQUFHLENBQUM7WUFFdEMsNkVBQTZFO1lBQzdFLE1BQU1HLG1CQUFtQixNQUFNQyxJQUFBQSx3QkFBVyxFQUN4QyxJQUFNQyxJQUFBQSxxQ0FBZ0IsRUFBQ2xCLFNBQVM7b0JBQUM7b0JBQWlCO2lC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