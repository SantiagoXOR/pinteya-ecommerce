533f643b5698167ed361494cb5cebf81
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _card = require("../card");
describe('ProductCard with E-commerce Components', ()=>{
    const defaultProps = {
        title: 'Pintura Sherwin Williams',
        price: 8500,
        originalPrice: 10000,
        stock: 12,
        onAddToCart: jest.fn()
    };
    it('renders legacy version when useNewComponents is false', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: false
        }));
        // Verifica que use el formato legacy de precios
        expect(_react.screen.getByText('$8.500')).toBeInTheDocument();
        expect(_react.screen.getByText('$10.000')).toBeInTheDocument();
        // Verifica mensaje de stock legacy
        expect(_react.screen.queryByText(/Solo quedan/)).not.toBeInTheDocument();
    });
    it('renders new components when useNewComponents is true', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showExactStock: true,
            stockUnit: "latas"
        }));
        // Verifica que use PriceDisplay (formato con separadores de miles)
        expect(_react.screen.getByText('$ 8.500,00')).toBeInTheDocument();
        // Verifica que use StockIndicator
        expect(_react.screen.getByText(/12 latas disponibles/)).toBeInTheDocument();
    });
    it('shows installments when enabled', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showInstallments: true,
            installments: {
                quantity: 6,
                amount: 1417,
                interestFree: true
            }
        }));
        // Verifica información de cuotas (ahora en una sola línea en variant compact)
        expect(_react.screen.getByText(/6x de.*\$ 14,17.*sin interés/)).toBeInTheDocument();
    });
    it('shows free shipping badge when enabled', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showFreeShipping: true
        }));
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument();
    });
    it('shows low stock warning with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 3,
            useNewComponents: true,
            showExactStock: true,
            lowStockThreshold: 5,
            stockUnit: "unidades"
        }));
        // Verifica que muestre stock bajo
        expect(_react.screen.getByText(/3 unidades disponibles/)).toBeInTheDocument();
    });
    it('shows out of stock with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 0,
            useNewComponents: true
        }));
        expect(_react.screen.getAllByText('Sin stock')[0]).toBeInTheDocument();
    });
    it('handles different stock units correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 5,
            useNewComponents: true,
            showExactStock: true,
            stockUnit: "litros"
        }));
        expect(_react.screen.getByText(/5 litros disponibles/)).toBeInTheDocument();
    });
    it('shows discount percentage with new PriceDisplay', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true
        }));
        // PriceDisplay calcula automáticamente el descuento
        // (10000-8500)/10000 * 100 = 15%
        expect(_react.screen.getByText('-15%')).toBeInTheDocument();
    });
    it('maintains backward compatibility with legacy props', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            badge: "Env\xedo gratis",
            discount: "15%",
            useNewComponents: false
        }));
        // Verifica que los props legacy sigan funcionando
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument();
        expect(_react.screen.getByText('15%')).toBeInTheDocument();
    });
    it('applies compact variant for PriceDisplay in ProductCard', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true
        }));
        // Verifica que PriceDisplay use variante compact
        expect(container.querySelector('.flex-col.gap-0\\.5')).toBeInTheDocument();
    });
    it('uses minimal variant for StockIndicator in ProductCard', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 10,
            useNewComponents: true,
            showExactStock: true
        }));
        // StockIndicator debería estar presente con información de stock
        expect(_react.screen.getByText(/10 unidades disponibles/)).toBeInTheDocument();
    });
    it('handles zero price correctly with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            price: 0,
            originalPrice: undefined,
            useNewComponents: true
        }));
        expect(_react.screen.getByText('$ 0,00')).toBeInTheDocument();
    });
    it('handles large prices correctly with new components', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            price: 123456,
            useNewComponents: true
        }));
        // Verifica formato con separadores de miles
        expect(_react.screen.getByText('$ 123.456,00')).toBeInTheDocument();
    });
    it('shows pre-order option when stock is 0 and allowPreOrder is enabled', ()=>{
        // Nota: Esta funcionalidad requeriría agregar allowPreOrder prop al ProductCard
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            stock: 0,
            useNewComponents: true
        }));
        // Por ahora solo verifica que muestre sin stock
        expect(_react.screen.getAllByText('Sin stock')[0]).toBeInTheDocument();
    });
    it('integrates all new components together', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_card.ProductCard, {
            ...defaultProps,
            useNewComponents: true,
            showInstallments: true,
            installments: {
                quantity: 12,
                amount: 708,
                interestFree: true
            },
            showFreeShipping: true,
            showExactStock: true,
            stockUnit: "latas",
            lowStockThreshold: 10
        }));
        // Verifica que todos los componentes estén presentes
        expect(_react.screen.getByText('$ 8.500,00')).toBeInTheDocument(); // PriceDisplay
        expect(_react.screen.getByText(/12x de/)).toBeInTheDocument(); // Installments
        expect(_react.screen.getByAltText('Envío gratis')).toBeInTheDocument(); // Free shipping
        expect(_react.screen.getByText(/12 latas disponibles/)).toBeInTheDocument(); // StockIndicator
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcdWlcXF9fdGVzdHNfX1xccHJvZHVjdC1jYXJkLWVjb21tZXJjZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXHJcbmltcG9ydCB7IFByb2R1Y3RDYXJkIH0gZnJvbSAnLi4vY2FyZCdcclxuXHJcbmRlc2NyaWJlKCdQcm9kdWN0Q2FyZCB3aXRoIEUtY29tbWVyY2UgQ29tcG9uZW50cycsICgpID0+IHtcclxuICBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICB0aXRsZTogJ1BpbnR1cmEgU2hlcndpbiBXaWxsaWFtcycsXHJcbiAgICBwcmljZTogODUwMCxcclxuICAgIG9yaWdpbmFsUHJpY2U6IDEwMDAwLFxyXG4gICAgc3RvY2s6IDEyLFxyXG4gICAgb25BZGRUb0NhcnQ6IGplc3QuZm4oKSxcclxuICB9XHJcblxyXG4gIGl0KCdyZW5kZXJzIGxlZ2FjeSB2ZXJzaW9uIHdoZW4gdXNlTmV3Q29tcG9uZW50cyBpcyBmYWxzZScsICgpID0+IHtcclxuICAgIHJlbmRlcihcclxuICAgICAgPFByb2R1Y3RDYXJkIFxyXG4gICAgICAgIHsuLi5kZWZhdWx0UHJvcHN9XHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17ZmFsc2V9XHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIC8vIFZlcmlmaWNhIHF1ZSB1c2UgZWwgZm9ybWF0byBsZWdhY3kgZGUgcHJlY2lvc1xyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJyQ4LjUwMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnJDEwLjAwMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpXHJcbiAgICBcclxuICAgIC8vIFZlcmlmaWNhIG1lbnNhamUgZGUgc3RvY2sgbGVnYWN5XHJcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KC9Tb2xvIHF1ZWRhbi8pKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdyZW5kZXJzIG5ldyBjb21wb25lbnRzIHdoZW4gdXNlTmV3Q29tcG9uZW50cyBpcyB0cnVlJywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKFxyXG4gICAgICA8UHJvZHVjdENhcmQgXHJcbiAgICAgICAgey4uLmRlZmF1bHRQcm9wc31cclxuICAgICAgICB1c2VOZXdDb21wb25lbnRzPXt0cnVlfVxyXG4gICAgICAgIHNob3dFeGFjdFN0b2NrPXt0cnVlfVxyXG4gICAgICAgIHN0b2NrVW5pdD1cImxhdGFzXCJcclxuICAgICAgLz5cclxuICAgIClcclxuICAgIFxyXG4gICAgLy8gVmVyaWZpY2EgcXVlIHVzZSBQcmljZURpc3BsYXkgKGZvcm1hdG8gY29uIHNlcGFyYWRvcmVzIGRlIG1pbGVzKVxyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJyQgOC41MDAsMDAnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gICAgXHJcbiAgICAvLyBWZXJpZmljYSBxdWUgdXNlIFN0b2NrSW5kaWNhdG9yXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMTIgbGF0YXMgZGlzcG9uaWJsZXMvKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdzaG93cyBpbnN0YWxsbWVudHMgd2hlbiBlbmFibGVkJywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKFxyXG4gICAgICA8UHJvZHVjdENhcmQgXHJcbiAgICAgICAgey4uLmRlZmF1bHRQcm9wc31cclxuICAgICAgICB1c2VOZXdDb21wb25lbnRzPXt0cnVlfVxyXG4gICAgICAgIHNob3dJbnN0YWxsbWVudHM9e3RydWV9XHJcbiAgICAgICAgaW5zdGFsbG1lbnRzPXt7XHJcbiAgICAgICAgICBxdWFudGl0eTogNixcclxuICAgICAgICAgIGFtb3VudDogMTQxNyxcclxuICAgICAgICAgIGludGVyZXN0RnJlZTogdHJ1ZVxyXG4gICAgICAgIH19XHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIC8vIFZlcmlmaWNhIGluZm9ybWFjacOzbiBkZSBjdW90YXMgKGFob3JhIGVuIHVuYSBzb2xhIGzDrW5lYSBlbiB2YXJpYW50IGNvbXBhY3QpXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvNnggZGUuKlxcJCAxNCwxNy4qc2luIGludGVyw6lzLykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnc2hvd3MgZnJlZSBzaGlwcGluZyBiYWRnZSB3aGVuIGVuYWJsZWQnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZFxyXG4gICAgICAgIHsuLi5kZWZhdWx0UHJvcHN9XHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17dHJ1ZX1cclxuICAgICAgICBzaG93RnJlZVNoaXBwaW5nPXt0cnVlfVxyXG4gICAgICAvPlxyXG4gICAgKVxyXG5cclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlBbHRUZXh0KCdFbnbDrW8gZ3JhdGlzJykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnc2hvd3MgbG93IHN0b2NrIHdhcm5pbmcgd2l0aCBuZXcgY29tcG9uZW50cycsICgpID0+IHtcclxuICAgIHJlbmRlcihcclxuICAgICAgPFByb2R1Y3RDYXJkIFxyXG4gICAgICAgIHsuLi5kZWZhdWx0UHJvcHN9XHJcbiAgICAgICAgc3RvY2s9ezN9XHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17dHJ1ZX1cclxuICAgICAgICBzaG93RXhhY3RTdG9jaz17dHJ1ZX1cclxuICAgICAgICBsb3dTdG9ja1RocmVzaG9sZD17NX1cclxuICAgICAgICBzdG9ja1VuaXQ9XCJ1bmlkYWRlc1wiXHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIC8vIFZlcmlmaWNhIHF1ZSBtdWVzdHJlIHN0b2NrIGJham9cclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC8zIHVuaWRhZGVzIGRpc3BvbmlibGVzLykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnc2hvd3Mgb3V0IG9mIHN0b2NrIHdpdGggbmV3IGNvbXBvbmVudHMnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHN0b2NrPXswfVxyXG4gICAgICAgIHVzZU5ld0NvbXBvbmVudHM9e3RydWV9XHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QWxsQnlUZXh0KCdTaW4gc3RvY2snKVswXSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdoYW5kbGVzIGRpZmZlcmVudCBzdG9jayB1bml0cyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHN0b2NrPXs1fVxyXG4gICAgICAgIHVzZU5ld0NvbXBvbmVudHM9e3RydWV9XHJcbiAgICAgICAgc2hvd0V4YWN0U3RvY2s9e3RydWV9XHJcbiAgICAgICAgc3RvY2tVbml0PVwibGl0cm9zXCJcclxuICAgICAgLz5cclxuICAgIClcclxuICAgIFxyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoLzUgbGl0cm9zIGRpc3BvbmlibGVzLykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnc2hvd3MgZGlzY291bnQgcGVyY2VudGFnZSB3aXRoIG5ldyBQcmljZURpc3BsYXknLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHVzZU5ld0NvbXBvbmVudHM9e3RydWV9XHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIC8vIFByaWNlRGlzcGxheSBjYWxjdWxhIGF1dG9tw6F0aWNhbWVudGUgZWwgZGVzY3VlbnRvXHJcbiAgICAvLyAoMTAwMDAtODUwMCkvMTAwMDAgKiAxMDAgPSAxNSVcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCctMTUlJykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnbWFpbnRhaW5zIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgcHJvcHMnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZFxyXG4gICAgICAgIHsuLi5kZWZhdWx0UHJvcHN9XHJcbiAgICAgICAgYmFkZ2U9XCJFbnbDrW8gZ3JhdGlzXCJcclxuICAgICAgICBkaXNjb3VudD1cIjE1JVwiXHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17ZmFsc2V9XHJcbiAgICAgIC8+XHJcbiAgICApXHJcblxyXG4gICAgLy8gVmVyaWZpY2EgcXVlIGxvcyBwcm9wcyBsZWdhY3kgc2lnYW4gZnVuY2lvbmFuZG9cclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlBbHRUZXh0KCdFbnbDrW8gZ3JhdGlzJykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcxNSUnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdhcHBsaWVzIGNvbXBhY3QgdmFyaWFudCBmb3IgUHJpY2VEaXNwbGF5IGluIFByb2R1Y3RDYXJkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcihcclxuICAgICAgPFByb2R1Y3RDYXJkIFxyXG4gICAgICAgIHsuLi5kZWZhdWx0UHJvcHN9XHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17dHJ1ZX1cclxuICAgICAgLz5cclxuICAgIClcclxuICAgIFxyXG4gICAgLy8gVmVyaWZpY2EgcXVlIFByaWNlRGlzcGxheSB1c2UgdmFyaWFudGUgY29tcGFjdFxyXG4gICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZmxleC1jb2wuZ2FwLTBcXFxcLjUnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCd1c2VzIG1pbmltYWwgdmFyaWFudCBmb3IgU3RvY2tJbmRpY2F0b3IgaW4gUHJvZHVjdENhcmQnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHN0b2NrPXsxMH1cclxuICAgICAgICB1c2VOZXdDb21wb25lbnRzPXt0cnVlfVxyXG4gICAgICAgIHNob3dFeGFjdFN0b2NrPXt0cnVlfVxyXG4gICAgICAvPlxyXG4gICAgKVxyXG4gICAgXHJcbiAgICAvLyBTdG9ja0luZGljYXRvciBkZWJlcsOtYSBlc3RhciBwcmVzZW50ZSBjb24gaW5mb3JtYWNpw7NuIGRlIHN0b2NrXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMTAgdW5pZGFkZXMgZGlzcG9uaWJsZXMvKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdoYW5kbGVzIHplcm8gcHJpY2UgY29ycmVjdGx5IHdpdGggbmV3IGNvbXBvbmVudHMnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHByaWNlPXswfVxyXG4gICAgICAgIG9yaWdpbmFsUHJpY2U9e3VuZGVmaW5lZH1cclxuICAgICAgICB1c2VOZXdDb21wb25lbnRzPXt0cnVlfVxyXG4gICAgICAvPlxyXG4gICAgKVxyXG4gICAgXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnJCAwLDAwJykpLnRvQmVJblRoZURvY3VtZW50KClcclxuICB9KVxyXG5cclxuICBpdCgnaGFuZGxlcyBsYXJnZSBwcmljZXMgY29ycmVjdGx5IHdpdGggbmV3IGNvbXBvbmVudHMnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHByaWNlPXsxMjM0NTZ9XHJcbiAgICAgICAgdXNlTmV3Q29tcG9uZW50cz17dHJ1ZX1cclxuICAgICAgLz5cclxuICAgIClcclxuICAgIFxyXG4gICAgLy8gVmVyaWZpY2EgZm9ybWF0byBjb24gc2VwYXJhZG9yZXMgZGUgbWlsZXNcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCckIDEyMy40NTYsMDAnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdzaG93cyBwcmUtb3JkZXIgb3B0aW9uIHdoZW4gc3RvY2sgaXMgMCBhbmQgYWxsb3dQcmVPcmRlciBpcyBlbmFibGVkJywgKCkgPT4ge1xyXG4gICAgLy8gTm90YTogRXN0YSBmdW5jaW9uYWxpZGFkIHJlcXVlcmlyw61hIGFncmVnYXIgYWxsb3dQcmVPcmRlciBwcm9wIGFsIFByb2R1Y3RDYXJkXHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm9kdWN0Q2FyZCBcclxuICAgICAgICB7Li4uZGVmYXVsdFByb3BzfVxyXG4gICAgICAgIHN0b2NrPXswfVxyXG4gICAgICAgIHVzZU5ld0NvbXBvbmVudHM9e3RydWV9XHJcbiAgICAgIC8+XHJcbiAgICApXHJcbiAgICBcclxuICAgIC8vIFBvciBhaG9yYSBzb2xvIHZlcmlmaWNhIHF1ZSBtdWVzdHJlIHNpbiBzdG9ja1xyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRBbGxCeVRleHQoJ1NpbiBzdG9jaycpWzBdKS50b0JlSW5UaGVEb2N1bWVudCgpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ2ludGVncmF0ZXMgYWxsIG5ldyBjb21wb25lbnRzIHRvZ2V0aGVyJywgKCkgPT4ge1xyXG4gICAgcmVuZGVyKFxyXG4gICAgICA8UHJvZHVjdENhcmQgXHJcbiAgICAgICAgey4uLmRlZmF1bHRQcm9wc31cclxuICAgICAgICB1c2VOZXdDb21wb25lbnRzPXt0cnVlfVxyXG4gICAgICAgIHNob3dJbnN0YWxsbWVudHM9e3RydWV9XHJcbiAgICAgICAgaW5zdGFsbG1lbnRzPXt7XHJcbiAgICAgICAgICBxdWFudGl0eTogMTIsXHJcbiAgICAgICAgICBhbW91bnQ6IDcwOCxcclxuICAgICAgICAgIGludGVyZXN0RnJlZTogdHJ1ZVxyXG4gICAgICAgIH19XHJcbiAgICAgICAgc2hvd0ZyZWVTaGlwcGluZz17dHJ1ZX1cclxuICAgICAgICBzaG93RXhhY3RTdG9jaz17dHJ1ZX1cclxuICAgICAgICBzdG9ja1VuaXQ9XCJsYXRhc1wiXHJcbiAgICAgICAgbG93U3RvY2tUaHJlc2hvbGQ9ezEwfVxyXG4gICAgICAvPlxyXG4gICAgKVxyXG4gICAgXHJcbiAgICAvLyBWZXJpZmljYSBxdWUgdG9kb3MgbG9zIGNvbXBvbmVudGVzIGVzdMOpbiBwcmVzZW50ZXNcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCckIDguNTAwLDAwJykpLnRvQmVJblRoZURvY3VtZW50KCkgLy8gUHJpY2VEaXNwbGF5XHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMTJ4IGRlLykpLnRvQmVJblRoZURvY3VtZW50KCkgLy8gSW5zdGFsbG1lbnRzXHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5QWx0VGV4dCgnRW52w61vIGdyYXRpcycpKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIEZyZWUgc2hpcHBpbmdcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC8xMiBsYXRhcyBkaXNwb25pYmxlcy8pKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIFN0b2NrSW5kaWNhdG9yXHJcbiAgfSlcclxufSlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiZGVmYXVsdFByb3BzIiwidGl0bGUiLCJwcmljZSIsIm9yaWdpbmFsUHJpY2UiLCJzdG9jayIsIm9uQWRkVG9DYXJ0IiwiamVzdCIsImZuIiwiaXQiLCJyZW5kZXIiLCJQcm9kdWN0Q2FyZCIsInVzZU5ld0NvbXBvbmVudHMiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInF1ZXJ5QnlUZXh0Iiwibm90Iiwic2hvd0V4YWN0U3RvY2siLCJzdG9ja1VuaXQiLCJzaG93SW5zdGFsbG1lbnRzIiwiaW5zdGFsbG1lbnRzIiwicXVhbnRpdHkiLCJhbW91bnQiLCJpbnRlcmVzdEZyZWUiLCJzaG93RnJlZVNoaXBwaW5nIiwiZ2V0QnlBbHRUZXh0IiwibG93U3RvY2tUaHJlc2hvbGQiLCJnZXRBbGxCeVRleHQiLCJiYWRnZSIsImRpc2NvdW50IiwiY29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7dUJBQStCO3NCQUNIO0FBRTVCQSxTQUFTLDBDQUEwQztJQUNqRCxNQUFNQyxlQUFlO1FBQ25CQyxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsZUFBZTtRQUNmQyxPQUFPO1FBQ1BDLGFBQWFDLEtBQUtDLEVBQUU7SUFDdEI7SUFFQUMsR0FBRyx5REFBeUQ7UUFDMURDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLGlCQUFXO1lBQ1QsR0FBR1YsWUFBWTtZQUNoQlcsa0JBQWtCOztRQUl0QixnREFBZ0Q7UUFDaERDLE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLFdBQVdDLGlCQUFpQjtRQUNwREgsT0FBT0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsWUFBWUMsaUJBQWlCO1FBRXJELG1DQUFtQztRQUNuQ0gsT0FBT0MsYUFBTSxDQUFDRyxXQUFXLENBQUMsZ0JBQWdCQyxHQUFH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