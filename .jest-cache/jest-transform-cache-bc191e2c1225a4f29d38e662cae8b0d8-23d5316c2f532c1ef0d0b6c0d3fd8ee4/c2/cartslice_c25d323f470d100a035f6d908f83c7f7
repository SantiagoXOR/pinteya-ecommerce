e781c955e786a9a14af7d8c936dfa212
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get addItemToCart () {
        return addItemToCart;
    },
    get cart () {
        return cart;
    },
    get default () {
        return _default;
    },
    get hydrateCart () {
        return hydrateCart;
    },
    get removeAllItemsFromCart () {
        return removeAllItemsFromCart;
    },
    get removeItemFromCart () {
        return removeItemFromCart;
    },
    get replaceCart () {
        return replaceCart;
    },
    get selectCartItems () {
        return selectCartItems;
    },
    get selectTotalPrice () {
        return selectTotalPrice;
    },
    get updateCartItemQuantity () {
        return updateCartItemQuantity;
    }
});
const _toolkit = require("@reduxjs/toolkit");
const _cartPersistence = require("../middleware/cartPersistence");
// Función para obtener el estado inicial con persistencia
const getInitialState = ()=>{
    // En el servidor, siempre retornar estado vacío
    if (typeof window === 'undefined') {
        return {
            items: []
        };
    }
    // En el cliente, intentar cargar desde localStorage
    try {
        const persistedItems = (0, _cartPersistence.loadCartFromStorage)();
        return {
            items: persistedItems
        };
    } catch (error) {
        console.warn('Error loading persisted cart:', error);
        return {
            items: []
        };
    }
};
const initialState = getInitialState();
const cart = (0, _toolkit.createSlice)({
    name: "cart",
    initialState,
    reducers: {
        addItemToCart: (state, action)=>{
            const { id, title, price, quantity, discountedPrice, imgs } = action.payload;
            const existingItem = state.items.find((item)=>item.id === id);
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                state.items.push({
                    id,
                    title,
                    price,
                    quantity,
                    discountedPrice,
                    imgs
                });
            }
        },
        removeItemFromCart: (state, action)=>{
            const itemId = action.payload;
            state.items = state.items.filter((item)=>item.id !== itemId);
        },
        updateCartItemQuantity: (state, action)=>{
            const { id, quantity } = action.payload;
            const existingItem = state.items.find((item)=>item.id === id);
            if (existingItem) {
                existingItem.quantity = quantity;
            }
        },
        removeAllItemsFromCart: (state)=>{
            state.items = [];
        },
        // Acción para hidratar el carrito desde localStorage
        hydrateCart: (state, action)=>{
            state.items = action.payload;
        },
        // Acción para reemplazar todo el carrito (útil para migración de usuarios)
        replaceCart: (state, action)=>{
            state.items = action.payload;
        }
    }
});
const selectCartItems = (state)=>state.cartReducer.items;
const selectTotalPrice = (0, _toolkit.createSelector)([
    selectCartItems
], (items)=>{
    return items.reduce((total, item)=>{
        return total + item.discountedPrice * item.quantity;
    }, 0);
});
const { addItemToCart, removeItemFromCart, updateCartItemQuantity, removeAllItemsFromCart, hydrateCart, replaceCart } = cart.actions;
const _default = cart.reducer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xccmVkdXhcXGZlYXR1cmVzXFxjYXJ0LXNsaWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbiB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IFJvb3RTdGF0ZSB9IGZyb20gXCIuLi9zdG9yZVwiO1xyXG5pbXBvcnQgeyBsb2FkQ2FydEZyb21TdG9yYWdlIH0gZnJvbSBcIi4uL21pZGRsZXdhcmUvY2FydFBlcnNpc3RlbmNlXCI7XHJcblxyXG50eXBlIEluaXRpYWxTdGF0ZSA9IHtcclxuICBpdGVtczogQ2FydEl0ZW1bXTtcclxufTtcclxuXHJcbnR5cGUgQ2FydEl0ZW0gPSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIHByaWNlOiBudW1iZXI7XHJcbiAgZGlzY291bnRlZFByaWNlOiBudW1iZXI7XHJcbiAgcXVhbnRpdHk6IG51bWJlcjtcclxuICBpbWdzPzoge1xyXG4gICAgdGh1bWJuYWlsczogc3RyaW5nW107XHJcbiAgICBwcmV2aWV3czogc3RyaW5nW107XHJcbiAgfTtcclxufTtcclxuXHJcbi8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciBlbCBlc3RhZG8gaW5pY2lhbCBjb24gcGVyc2lzdGVuY2lhXHJcbmNvbnN0IGdldEluaXRpYWxTdGF0ZSA9ICgpOiBJbml0aWFsU3RhdGUgPT4ge1xyXG4gIC8vIEVuIGVsIHNlcnZpZG9yLCBzaWVtcHJlIHJldG9ybmFyIGVzdGFkbyB2YWPDrW9cclxuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHJldHVybiB7IGl0ZW1zOiBbXSB9O1xyXG4gIH1cclxuXHJcbiAgLy8gRW4gZWwgY2xpZW50ZSwgaW50ZW50YXIgY2FyZ2FyIGRlc2RlIGxvY2FsU3RvcmFnZVxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwZXJzaXN0ZWRJdGVtcyA9IGxvYWRDYXJ0RnJvbVN0b3JhZ2UoKTtcclxuICAgIHJldHVybiB7IGl0ZW1zOiBwZXJzaXN0ZWRJdGVtcyB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGxvYWRpbmcgcGVyc2lzdGVkIGNhcnQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHsgaXRlbXM6IFtdIH07XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlOiBJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYXJ0ID0gY3JlYXRlU2xpY2Uoe1xyXG4gIG5hbWU6IFwiY2FydFwiLFxyXG4gIGluaXRpYWxTdGF0ZSxcclxuICByZWR1Y2Vyczoge1xyXG4gICAgYWRkSXRlbVRvQ2FydDogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248Q2FydEl0ZW0+KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgaWQsIHRpdGxlLCBwcmljZSwgcXVhbnRpdHksIGRpc2NvdW50ZWRQcmljZSwgaW1ncyB9ID1cclxuICAgICAgICBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xyXG4gICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSArPSBxdWFudGl0eTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICBwcmljZSxcclxuICAgICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgICAgZGlzY291bnRlZFByaWNlLFxyXG4gICAgICAgICAgaW1ncyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZUl0ZW1Gcm9tQ2FydDogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyPikgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtSWQgPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgc3RhdGUuaXRlbXMgPSBzdGF0ZS5pdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgIT09IGl0ZW1JZCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQ2FydEl0ZW1RdWFudGl0eTogKFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgYWN0aW9uOiBQYXlsb2FkQWN0aW9uPHsgaWQ6IG51bWJlcjsgcXVhbnRpdHk6IG51bWJlciB9PlxyXG4gICAgKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgaWQsIHF1YW50aXR5IH0gPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gc3RhdGUuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xyXG4gICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSA9IHF1YW50aXR5O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZUFsbEl0ZW1zRnJvbUNhcnQ6IChzdGF0ZSkgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IFtdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBY2Npw7NuIHBhcmEgaGlkcmF0YXIgZWwgY2Fycml0byBkZXNkZSBsb2NhbFN0b3JhZ2VcclxuICAgIGh5ZHJhdGVDYXJ0OiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxDYXJ0SXRlbVtdPikgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBBY2Npw7NuIHBhcmEgcmVlbXBsYXphciB0b2RvIGVsIGNhcnJpdG8gKMO6dGlsIHBhcmEgbWlncmFjacOzbiBkZSB1c3VhcmlvcylcclxuICAgIHJlcGxhY2VDYXJ0OiAoc3RhdGUsIGFjdGlvbjogUGF5bG9hZEFjdGlvbjxDYXJ0SXRlbVtdPikgPT4ge1xyXG4gICAgICBzdGF0ZS5pdGVtcyA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RDYXJ0SXRlbXMgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gc3RhdGUuY2FydFJlZHVjZXIuaXRlbXM7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0VG90YWxQcmljZSA9IGNyZWF0ZVNlbGVjdG9yKFtzZWxlY3RDYXJ0SXRlbXNdLCAoaXRlbXMpID0+IHtcclxuICByZXR1cm4gaXRlbXMucmVkdWNlKCh0b3RhbDogbnVtYmVyLCBpdGVtOiBDYXJ0SXRlbSkgPT4ge1xyXG4gICAgcmV0dXJuIHRvdGFsICsgaXRlbS5kaXNjb3VudGVkUHJpY2UgKiBpdGVtLnF1YW50aXR5O1xyXG4gIH0sIDApO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgYWRkSXRlbVRvQ2FydCxcclxuICByZW1vdmVJdGVtRnJvbUNhcnQsXHJcbiAgdXBkYXRlQ2FydEl0ZW1RdWFudGl0eSxcclxuICByZW1vdmVBbGxJdGVtc0Zyb21DYXJ0LFxyXG4gIGh5ZHJhdGVDYXJ0LFxyXG4gIHJlcGxhY2VDYXJ0LFxyXG59ID0gY2FydC5hY3Rpb25zO1xyXG5leHBvcnQgZGVmYXVsdCBjYXJ0LnJlZHVjZXI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJhZGRJdGVtVG9DYXJ0IiwiY2FydCIsImh5ZHJhdGVDYXJ0IiwicmVtb3ZlQWxsSXRlbXNGcm9tQ2FydCIsInJlbW92ZUl0ZW1Gcm9tQ2FydCIsInJlcGxhY2VDYXJ0Iiwic2VsZWN0Q2FydEl0ZW1zIiwic2VsZWN0VG90YWxQcmljZSIsInVwZGF0ZUNhcnRJdGVtUXVhbnRpdHkiLCJnZXRJbml0aWFsU3RhdGUiLCJ3aW5kb3ciLCJpdGVtcyIsInBlcnNpc3RlZEl0ZW1zIiwibG9hZENhcnRGcm9tU3RvcmFnZSIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJpbml0aWFsU3RhdGUiLCJjcmVhdGVTbGljZSIsIm5hbWUiLCJyZWR1Y2VycyIsInN0YXRlIiwiYWN0aW9uIiwiaWQiLCJ0aXRsZSIsInByaWNlIiwicXVhbnRpdHkiLCJkaXNjb3VudGVkUHJpY2UiLCJpbWdzIiwicGF5bG9hZCIsImV4aXN0aW5nSXRlbSIsImZpbmQiLCJpdGVtIiwicHVzaCIsIml0ZW1JZCIsImZpbHRlciIsImNhcnRSZWR1Y2VyIiwiY3JlYXRlU2VsZWN0b3IiLCJyZWR1Y2UiLCJ0b3RhbCIsImFjdGlvbnMiLCJyZWR1Y2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztRQXNHRUE7ZUFBQUE7O1FBL0RXQztlQUFBQTs7UUFzRWI7ZUFBQTs7UUFIRUM7ZUFBQUE7O1FBREFDO2VBQUFBOztRQUZBQztlQUFBQTs7UUFJQUM7ZUFBQUE7O1FBZFdDO2VBQUFBOztRQUVBQztlQUFBQTs7UUFTWEM7ZUFBQUE7Ozt5QkF4R3lEO2lDQUV2QjtBQWtCcEMsMERBQTBEO0FBQzFELE1BQU1DLGtCQUFrQjtJQUN0QixnREFBZ0Q7SUFDaEQsSUFBSSxPQUFPQyxXQUFXLGFBQWE7UUFDakMsT0FBTztZQUFFQyxPQUFPLEVBQUU7UUFBQztJQUNyQjtJQUVBLG9EQUFvRDtJQUNwRCxJQUFJO1FBQ0YsTUFBTUMsaUJBQWlCQyxJQUFBQSxvQ0FBbUI7UUFDMUMsT0FBTztZQUFFRixPQUFPQztRQUFlO0lBQ2pDLEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRQyxJQUFJLENBQUMsaUNBQWlDRjtRQUM5QyxPQUFPO1lBQUVILE9BQU8sRUFBRTtRQUFDO0lBQ3JCO0FBQ0Y7QUFFQSxNQUFNTSxlQUE2QlI7QUFFNUIsTUFBTVIsT0FBT2lCLElBQUFBLG9CQUFXLEVBQUM7SUFDOUJDLE1BQU07SUFDTkY7SUFDQUcsVUFBVTtRQUNScEIsZUFBZSxDQUFDcUIsT0FBT0M7WUFDckIsTUFBTSxFQUFFQyxFQUFFLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLGVBQWUsRUFBRUMsSUFBSSxFQUFFLEdBQ3pETixPQUFPTyxPQUFPO1lBQ2hCLE1BQU1DLGVBQWVULE1BQU1WLEtBQUssQ0FBQ29CLElBQUksQ0FBQyxDQUFDQyxPQUFTQSxLQUFLVCxFQUFFLEtBQUtBO1lBRTVELElBQUlPLGNBQWM7Z0JBQ2hCQSxhQUFhSixRQUFRLElBQUlBO1lBQzNCLE9BQU87Z0JBQ0xMLE1BQU1WLEtBQUssQ0FBQ3NCLElBQUksQ0FBQztvQkFDZlY7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztnQkFDRjtZQUNGO1FBQ0Y7UUFDQXhCLG9CQUFvQixDQUFDaUIsT0FBT0M7WUFDMUIsTUFBTVksU0FBU1osT0FBT08sT0FBTztZQUM3QlIsTUFBTVYsS0FBSyxHQUFHVSxNQUFNVixLQUFLLENBQUN3QixNQUFNLENBQUMsQ0FBQ0gsT0FBU0EsS0FBS1QsRUFBRSxLQUFLVztRQUN6RDtRQUNBMUIsd0JBQXdCLENBQ3RCYSxPQUNBQztZQUVBLE1BQU0sRUFBRUMsRUFBRSxFQUFFRyxRQUFRLEVBQUUsR0FBR0osT0FBT08sT0FBTztZQUN2QyxNQUFNQyxlQUFlVCxNQUFNVixLQUFLLENBQUNvQixJQUFJLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS1QsRUFBRSxLQUFLQTtZQUU1RCxJQUFJTyxjQUFjO2dCQUNoQkEsYUFBYUosUUFBUSxHQUFHQTtZQUMxQjtRQUNGO1FBRUF2Qix3QkFBd0IsQ0FBQ2tCO1lBQ3ZCQSxNQUFNVixLQUFLLEdBQUcsRUFBRTtRQUNsQjtRQUVBLHFEQUFxRDtRQUNyRFQsYUFBYSxDQUFDbUIsT0FBT0M7WUFDbkJELE1BQU1WLEtBQUssR0FBR1csT0FBT08sT0FBTztRQUM5QjtRQUVBLDJFQUEyRTtRQUMzRXhCLGFBQWEsQ0FBQ2dCLE9BQU9DO1lBQ25CRCxNQUFNVixLQUFLLEdBQUdXLE9BQU9PLE9BQU87UUFDOUI7SUFDRjtBQUNGO0FBRU8sTUFBTXZCLGtCQUFrQixDQUFDZSxRQUFxQkEsTUFBTWUsV0FBVyxDQUFDekIsS0FBSztBQUVyRSxNQUFNSixtQkFBbUI4QixJQUFBQSx1QkFBYyxFQUFDO0lBQUMvQjtDQUFnQixFQUFFLENBQUNLO0lBQ2pFLE9BQU9BLE1BQU0yQixNQUFNLENBQUMsQ0FBQ0MsT0FBZVA7UUFDbEMsT0FBT08sUUFBUVAsS0FBS0wsZUFBZSxHQUFHSyxLQUFLTixRQUFRO0lBQ3JELEdBQUc7QUFDTDtBQUVPLE1BQU0sRUFDWDFCLGFBQWEsRUFDYkksa0JBQWtCLEVBQ2xCSSxzQkFBc0IsRUFDdEJMLHNCQUFzQixFQUN0QkQsV0FBVyxFQUNYRyxXQUFXLEVBQ1osR0FBR0osS0FBS3VDLE9BQU87TUFDaEIsV0FBZXZDLEtBQUt3QyxPQUFPIn0=