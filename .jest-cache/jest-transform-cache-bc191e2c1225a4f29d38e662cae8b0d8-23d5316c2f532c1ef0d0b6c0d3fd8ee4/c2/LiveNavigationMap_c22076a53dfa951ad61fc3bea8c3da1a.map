{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\LiveNavigationMap.tsx"],"sourcesContent":["/**\n * Componente de navegaci√≥n GPS en tiempo real para drivers\n */\n\n'use client'\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport { GoogleMap, DirectionsRenderer, Marker, InfoWindow } from '@react-google-maps/api'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Navigation, MapPin, CheckCircle, Clock, AlertTriangle, Phone, Package } from 'lucide-react'\nimport { toast } from 'sonner'\n\ninterface DeliveryStop {\n  orderId: number\n  orderNumber: string\n  address: string\n  coordinates?: {\n    lat: number\n    lng: number\n  }\n  sequence: number\n  status: 'pending' | 'current' | 'completed'\n  estimatedArrival?: string\n  total: number\n  items: number\n  notes?: string\n}\n\ninterface LiveNavigationMapProps {\n  stops: DeliveryStop[]\n  onCompleteDelivery: (orderId: number) => void\n  onNavigationUpdate?: (currentLocation: { lat: number; lng: number }) => void\n}\n\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px',\n}\n\nconst defaultCenter = {\n  lat: -31.4201,\n  lng: -64.1888,\n}\n\nexport default function LiveNavigationMap({\n  stops,\n  onCompleteDelivery,\n  onNavigationUpdate,\n}: LiveNavigationMapProps) {\n  const [currentLocation, setCurrentLocation] = useState<{ lat: number; lng: number } | null>(null)\n  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null)\n  const [currentStopIndex, setCurrentStopIndex] = useState(0)\n  const [selectedStop, setSelectedStop] = useState<DeliveryStop | null>(null)\n  const [isNavigating, setIsNavigating] = useState(false)\n  const [watchId, setWatchId] = useState<number | null>(null)\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false)\n  const mapRef = useRef<google.maps.Map | null>(null)\n\n  useEffect(() => {\n    // Verificar si Google Maps est√° cargado\n    const checkGoogleMaps = () => {\n      if (window.google && window.google.maps) {\n        setIsGoogleMapsLoaded(true)\n      } else {\n        setTimeout(checkGoogleMaps, 100)\n      }\n    }\n    checkGoogleMaps()\n  }, [])\n\n  useEffect(() => {\n    // Solicitar ubicaci√≥n actual\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const location = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          }\n          setCurrentLocation(location)\n          if (onNavigationUpdate) {\n            onNavigationUpdate(location)\n          }\n        },\n        error => {\n          console.error('Error getting location:', error)\n          toast.error('No se pudo obtener la ubicaci√≥n actual')\n          // Usar ubicaci√≥n por defecto (C√≥rdoba)\n          setCurrentLocation(defaultCenter)\n        }\n      )\n    }\n  }, [onNavigationUpdate])\n\n  useEffect(() => {\n    if (currentLocation && stops.length > 0) {\n      calculateRoute()\n    }\n  }, [currentLocation, stops, currentStopIndex])\n\n  const calculateRoute = async () => {\n    if (!currentLocation || !window.google || !window.google.maps) return\n\n    const directionsService = new google.maps.DirectionsService()\n    const currentStop = stops.find(stop => stop.status === 'current')\n\n    if (!currentStop || !currentStop.coordinates) {\n      setDirections(null)\n      return\n    }\n\n    console.log('üó∫Ô∏è Calculando ruta GPS desde:', currentLocation, 'hacia:', currentStop.coordinates)\n\n    try {\n      const result = await directionsService.route({\n        origin: currentLocation,\n        destination: currentStop.coordinates,\n        travelMode: google.maps.TravelMode.DRIVING,\n        optimizeWaypoints: false,\n        avoidHighways: false,\n        avoidTolls: false,\n        unitSystem: google.maps.UnitSystem.METRIC,\n        language: 'es',\n        region: 'AR',\n      })\n\n      console.log('‚úÖ Ruta GPS calculada exitosamente:', result)\n      setDirections(result)\n\n      // Extraer informaci√≥n de navegaci√≥n\n      const route = result.routes[0]\n      const leg = route.legs[0]\n\n      console.log('üìä Informaci√≥n de ruta:', {\n        distance: leg.distance?.text,\n        duration: leg.duration?.text,\n        steps: leg.steps.length,\n      })\n    } catch (error) {\n      console.error('‚ùå Error calculating route:', error)\n      toast.error('Error al calcular la ruta GPS')\n    }\n  }\n  const startNavigation = () => {\n    if (!navigator.geolocation) {\n      toast.error('Geolocalizaci√≥n no disponible')\n      return\n    }\n\n    setIsNavigating(true)\n\n    const id = navigator.geolocation.watchPosition(\n      position => {\n        const location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        }\n        setCurrentLocation(location)\n\n        if (onNavigationUpdate) {\n          onNavigationUpdate(location)\n        }\n\n        // Verificar si llegamos cerca del destino actual\n        const currentStop = stops.find(\n          stop =>\n            stop.status === 'current' ||\n            (stop.status === 'pending' && stop.sequence === currentStopIndex + 1)\n        )\n\n        if (currentStop && currentStop.coordinates) {\n          const distance = calculateDistance(location, currentStop.coordinates)\n          if (distance < 0.1) {\n            // 100 metros\n            toast.success(`Has llegado a ${currentStop.address}`)\n          }\n        }\n      },\n      error => {\n        console.error('Error watching location:', error)\n        toast.error('Error al seguir la ubicaci√≥n')\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000,\n      }\n    )\n\n    setWatchId(id)\n    toast.success('Navegaci√≥n iniciada')\n  }\n\n  const stopNavigation = () => {\n    if (watchId) {\n      navigator.geolocation.clearWatch(watchId)\n      setWatchId(null)\n    }\n    setIsNavigating(false)\n    toast.info('Navegaci√≥n detenida')\n  }\n\n  const handleCompleteDelivery = async (stop: DeliveryStop) => {\n    try {\n      const response = await fetch('/api/driver/complete-delivery', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          orderId: stop.orderId,\n          deliveryLocation: currentLocation,\n          deliveryTime: new Date().toISOString(),\n          deliveryNotes: `Entregado en ${stop.address}`,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al completar la entrega')\n      }\n\n      const result = await response.json()\n\n      if (result.success) {\n        toast.success(`Entrega completada: ${stop.orderNumber}`)\n        onCompleteDelivery(stop.orderId)\n        setCurrentStopIndex(prev => prev + 1)\n        setSelectedStop(null)\n      } else {\n        throw new Error(result.error || 'Error desconocido')\n      }\n    } catch (error) {\n      console.error('Error completing delivery:', error)\n      toast.error('Error al completar la entrega')\n    }\n  }\n\n  const calculateDistance = (\n    pos1: { lat: number; lng: number },\n    pos2: { lat: number; lng: number }\n  ) => {\n    const R = 6371 // Radio de la Tierra en km\n    const dLat = ((pos2.lat - pos1.lat) * Math.PI) / 180\n    const dLon = ((pos2.lng - pos1.lng) * Math.PI) / 180\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((pos1.lat * Math.PI) / 180) *\n        Math.cos((pos2.lat * Math.PI) / 180) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    return R * c\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-AR', {\n      style: 'currency',\n      currency: 'ARS',\n    }).format(amount)\n  }\n\n  return (\n    <div className='space-y-4'>\n      {/* Controles de navegaci√≥n */}\n      <Card>\n        <CardHeader>\n          <CardTitle className='flex items-center justify-between'>\n            <div className='flex items-center gap-2'>\n              <Navigation className='h-5 w-5' />\n              <span className='font-medium'>\n                {selectedOrders.size} de {orders.length} √≥rdenes seleccionadas\n              </span>\n            </div>\n            <div className='flex gap-2'>\n              {!isNavigating ? (\n                <Button onClick={startNavigation} size='sm'>\n                  Iniciar Navegaci√≥n\n                </Button>\n              ) : (\n                <Button onClick={stopNavigation} variant='outline' size='sm'>\n                  Detener\n                </Button>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className='flex items-center justify-between text-sm'>\n            <span>Paradas restantes: {stops.filter(s => s.status === 'pending').length}</span>\n            <span>Completadas: {stops.filter(s => s.status === 'completed').length}</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mapa */}\n      <Card>\n        <CardContent className='p-0'>\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            center={currentLocation || defaultCenter}\n            zoom={13}\n            onLoad={map => {\n              mapRef.current = map\n            }}\n          >\n            {/* Mostrar ruta */}\n            {directions && (\n              <DirectionsRenderer\n                directions={directions}\n                options={{\n                  suppressMarkers: false,\n                  polylineOptions: {\n                    strokeColor: '#2563eb',\n                    strokeWeight: 4,\n                  },\n                }}\n              />\n            )}\n\n            {/* Marcador de ubicaci√≥n actual */}\n            {currentLocation && window.google && window.google.maps && (\n              <Marker\n                position={currentLocation}\n                icon={{\n                  url: '/icons/current-location.png',\n                  scaledSize: new google.maps.Size(30, 30),\n                }}\n                title='Tu ubicaci√≥n'\n              />\n            )}\n\n            {/* Marcadores de paradas */}\n            {window.google &&\n              window.google.maps &&\n              stops.map(stop => (\n                <Marker\n                  key={stop.orderId}\n                  position={stop.coordinates || { lat: 0, lng: 0 }}\n                  onClick={() => setSelectedStop(stop)}\n                  icon={{\n                    url:\n                      stop.status === 'completed'\n                        ? '/icons/marker-green.png'\n                        : stop.status === 'current'\n                          ? '/icons/marker-blue.png'\n                          : '/icons/marker-red.png',\n                    scaledSize: new google.maps.Size(25, 25),\n                  }}\n                  title={`${stop.orderNumber} - ${stop.address}`}\n                />\n              ))}\n\n            {/* Info window para parada seleccionada */}\n            {selectedStop && selectedStop.coordinates && (\n              <InfoWindow\n                position={selectedStop.coordinates}\n                onCloseClick={() => setSelectedStop(null)}\n              >\n                <div className='p-2 max-w-xs'>\n                  <h3 className='font-semibold'>{selectedStop.orderNumber}</h3>\n                  <p className='text-sm text-gray-600'>{selectedStop.address}</p>\n                  <p className='text-sm'>Total: {formatCurrency(selectedStop.total)}</p>\n                  <p className='text-sm'>Items: {selectedStop.items}</p>\n                  {selectedStop.status === 'pending' && (\n                    <Button\n                      size='sm'\n                      className='mt-2 w-full'\n                      onClick={() => handleCompleteDelivery(selectedStop)}\n                    >\n                      <CheckCircle className='h-4 w-4 mr-1' />\n                      Completar Entrega\n                    </Button>\n                  )}\n                </div>\n              </InfoWindow>\n            )}\n          </GoogleMap>\n        </CardContent>\n      </Card>\n\n      {/* Lista de paradas */}\n      <Card>\n        <CardHeader>\n          <CardTitle className='flex items-center gap-2'>\n            <Navigation className='h-5 w-5' />\n            Paradas del Recorrido\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className='space-y-3'>\n            {stops.map((stop, index) => (\n              <div\n                key={stop.orderId}\n                className={`p-3 rounded-lg border ${\n                  stop.status === 'completed'\n                    ? 'bg-green-50 border-green-200'\n                    : stop.status === 'current'\n                      ? 'bg-blue-50 border-blue-200'\n                      : 'bg-gray-50 border-gray-200'\n                }`}\n              >\n                <div className='flex items-center justify-between'>\n                  <div className='flex items-center gap-3'>\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                        stop.status === 'completed'\n                          ? 'bg-green-500 text-white'\n                          : stop.status === 'current'\n                            ? 'bg-blue-500 text-white'\n                            : 'bg-gray-300 text-gray-700'\n                      }`}\n                    >\n                      {stop.sequence}\n                    </div>\n                    <div>\n                      <p className='font-medium'>{stop.orderNumber}</p>\n                      <p className='text-sm text-gray-600'>{stop.address}</p>\n                      <p className='text-sm'>\n                        {formatCurrency(stop.total)} ‚Ä¢ {stop.items} items\n                      </p>\n                    </div>\n                  </div>\n                  <div className='flex items-center gap-2'>\n                    <Badge\n                      variant={\n                        stop.status === 'completed'\n                          ? 'default'\n                          : stop.status === 'current'\n                            ? 'secondary'\n                            : 'outline'\n                      }\n                    >\n                      {stop.status === 'completed'\n                        ? 'Completada'\n                        : stop.status === 'current'\n                          ? 'Actual'\n                          : 'Pendiente'}\n                    </Badge>\n                    {stop.status === 'pending' && (\n                      <Button\n                        size='sm'\n                        variant='outline'\n                        onClick={() => handleCompleteDelivery(stop)}\n                      >\n                        <CheckCircle className='h-4 w-4' />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"],"names":["LiveNavigationMap","mapContainerStyle","width","height","defaultCenter","lat","lng","stops","onCompleteDelivery","onNavigationUpdate","currentLocation","setCurrentLocation","useState","directions","setDirections","currentStopIndex","setCurrentStopIndex","selectedStop","setSelectedStop","isNavigating","setIsNavigating","watchId","setWatchId","isGoogleMapsLoaded","setIsGoogleMapsLoaded","mapRef","useRef","useEffect","checkGoogleMaps","window","google","maps","setTimeout","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","longitude","error","console","toast","length","calculateRoute","directionsService","DirectionsService","currentStop","find","stop","status","coordinates","log","result","route","origin","destination","travelMode","TravelMode","DRIVING","optimizeWaypoints","avoidHighways","avoidTolls","unitSystem","UnitSystem","METRIC","language","region","routes","leg","legs","distance","text","duration","steps","startNavigation","id","watchPosition","sequence","calculateDistance","success","address","enableHighAccuracy","timeout","maximumAge","stopNavigation","clearWatch","info","handleCompleteDelivery","response","fetch","method","headers","body","JSON","stringify","orderId","deliveryLocation","deliveryTime","Date","toISOString","deliveryNotes","ok","Error","json","orderNumber","prev","pos1","pos2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","formatCurrency","amount","Intl","NumberFormat","style","currency","format","div","className","Card","CardHeader","CardTitle","Navigation","span","selectedOrders","size","orders","Button","onClick","variant","CardContent","filter","s","GoogleMap","center","zoom","onLoad","map","current","DirectionsRenderer","options","suppressMarkers","polylineOptions","strokeColor","strokeWeight","Marker","icon","url","scaledSize","Size","title","InfoWindow","onCloseClick","h3","p","total","items","CheckCircle","index","Badge"],"mappings":"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"}