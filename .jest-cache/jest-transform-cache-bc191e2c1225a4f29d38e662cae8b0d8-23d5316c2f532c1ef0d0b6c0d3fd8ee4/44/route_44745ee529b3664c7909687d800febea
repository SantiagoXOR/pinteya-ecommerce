d70afc0bbf87b7f0b5cd80a137f1a077
// ===================================
// PINTEYA E-COMMERCE - API DE VARIANTES DE PRODUCTO
// ===================================
"use strict";

/* istanbul ignore next */
function cov_spz9d1ple() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\[id]\\variants\\route.ts";
  var hash = "53253703c71b598451b884c8e6708c7347e2dbeb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\[id]\\variants\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 19
        }
      },
      "3": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "4": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "5": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 19,
          column: 89
        }
      },
      "6": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "7": {
        start: {
          line: 21,
          column: 22
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "8": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "10": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 31
        }
      },
      "11": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 33
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "14": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 29
        }
      },
      "15": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 111
        }
      },
      "16": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "17": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "18": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 41,
          column: 42
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "20": {
        start: {
          line: 43,
          column: 34
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "22": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 59
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 98
        }
      },
      "25": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "26": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "27": {
        start: {
          line: 65,
          column: 64
        },
        end: {
          line: 65,
          column: 179
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "30": {
        start: {
          line: 68,
          column: 41
        },
        end: {
          line: 72,
          column: 17
        }
      },
      "31": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "32": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 98
        }
      },
      "33": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 80,
          column: 63
        }
      },
      "34": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 60
        }
      },
      "35": {
        start: {
          line: 83,
          column: 25
        },
        end: {
          line: 83,
          column: 27
        }
      },
      "36": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "37": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "38": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "39": {
        start: {
          line: 92,
          column: 57
        },
        end: {
          line: 94,
          column: 10
        }
      },
      "40": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "41": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 116
        }
      },
      "42": {
        start: {
          line: 99,
          column: 34
        },
        end: {
          line: 112,
          column: 10
        }
      },
      "43": {
        start: {
          line: 99,
          column: 67
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "44": {
        start: {
          line: 109,
          column: 25
        },
        end: {
          line: 109,
          column: 72
        }
      },
      "45": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "46": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 31
        }
      },
      "47": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "48": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "49": {
        start: {
          line: 125,
          column: 25
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "50": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 51
        }
      },
      "51": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 74
        }
      },
      "52": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "53": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 10
          }
        },
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "extractCapacity",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 24
          }
        },
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "generateBaseName",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 25
          }
        },
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 18
          }
        },
        loc: {
          start: {
            line: 38,
            column: 37
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 55
          },
          end: {
            line: 99,
            column: 56
          }
        },
        loc: {
          start: {
            line: 99,
            column: 67
          },
          end: {
            line: 107,
            column: 13
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 22
          }
        },
        loc: {
          start: {
            line: 107,
            column: 29
          },
          end: {
            line: 112,
            column: 9
          }
        },
        line: 107
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 30,
            column: 9
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 29
          }
        }, {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 24,
            column: 49
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 30,
            column: 9
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 19
          },
          end: {
            line: 26,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 19
          },
          end: {
            line: 26,
            column: 37
          }
        }, {
          start: {
            line: 26,
            column: 41
          },
          end: {
            line: 26,
            column: 57
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 21
          }
        }, {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 42,
            column: 32
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 90,
            column: 9
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 43
          }
        }, {
          start: {
            line: 99,
            column: 47
          },
          end: {
            line: 99,
            column: 49
          }
        }],
        line: 99
      },
      "13": {
        loc: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 67
          }
        }, {
          start: {
            line: 109,
            column: 71
          },
          end: {
            line: 109,
            column: 72
          }
        }],
        line: 109
      },
      "14": {
        loc: {
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 67
          }
        }, {
          start: {
            line: 110,
            column: 71
          },
          end: {
            line: 110,
            column: 72
          }
        }],
        line: 110
      },
      "15": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "16": {
        loc: {
          start: {
            line: 136,
            column: 19
          },
          end: {
            line: 136,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 19
          },
          end: {
            line: 136,
            column: 32
          }
        }, {
          start: {
            line: 136,
            column: 36
          },
          end: {
            line: 136,
            column: 64
          }
        }],
        line: 136
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\products\\[id]\\variants\\route.ts"],
      sourcesContent: ["// ===================================\n// PINTEYA E-COMMERCE - API DE VARIANTES DE PRODUCTO\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\nimport { ApiResponse } from '@/types/api';\n\n// Tipo para variante de producto\ninterface ProductVariant {\n  id: number;\n  name: string;\n  price: string;\n  discounted_price: string | null;\n  capacity: string;\n  stock: number;\n  is_active: boolean;\n}\n\n// Funci\xF3n para extraer capacidad del nombre del producto\nfunction extractCapacity(productName: string): string {\n  // Buscar patrones de capacidad m\xE1s espec\xEDficos\n  const capacityMatch = productName.match(/(\\d+(?:\\.\\d+)?)\\s*(kg|L|litros?|galones?)/i);\n  if (capacityMatch) {\n    const value = capacityMatch[1];\n    const unit = capacityMatch[2].toLowerCase();\n    \n    // Normalizar unidades\n    if (unit === 'litros' || unit === 'litro') {\n      return `${value}L`;\n    } else if (unit === 'galones' || unit === 'galon') {\n      return `${value}gal`;\n    } else {\n      return `${value}${unit}`;\n    }\n  }\n  \n  return 'Sin especificar';\n}\n\n// Funci\xF3n para generar nombre base del producto\nfunction generateBaseName(productName: string): string {\n  return productName\n    .replace(/\\s*(\\d+L|\\d+\\s*litros?|\\d+\\s*galones?)\\s*/gi, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// ===================================\n// GET /api/products/[id]/variants - Obtener variantes de un producto\n// ===================================\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const params = await context.params;\n    const id = parseInt(params.id, 10);\n    \n    if (isNaN(id) || id <= 0) {\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'ID de producto inv\xE1lido',\n      };\n      return NextResponse.json(errorResponse, { status: 400 });\n    }\n    \n    const supabase = getSupabaseClient();\n\n    if (!supabase) {\n      console.error('Cliente de Supabase no disponible en GET /api/products/[id]/variants');\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio de base de datos no disponible',\n      };\n      return NextResponse.json(errorResponse, { status: 503 });\n    }\n\n    // Primero obtener el producto original\n    const { data: originalProduct, error: originalError } = await supabase\n      .from('products')\n      .select('id, name, price, discounted_price, stock, is_active')\n      .eq('id', id)\n      .single();\n\n    if (originalError) {\n      if (originalError.code === 'PGRST116') {\n        const notFoundResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: 'Producto no encontrado',\n        };\n        return NextResponse.json(notFoundResponse, { status: 404 });\n      }\n      handleSupabaseError(originalError, `GET /api/products/${id}/variants`);\n    }\n\n    // Generar nombre base para buscar variantes\n    const baseName = generateBaseName(originalProduct.name);\n    \n    // Extraer marca y tipo del producto (ej: \"Poximix Exterior\" de \"Poximix Exterior 5kg\")\n    const productParts = originalProduct.name.split(' ');\n    let searchTerm = '';\n    \n    if (productParts.length >= 2) {\n      // Para productos como \"Poximix Exterior 5kg\", usar \"Poximix Exterior\"\n      searchTerm = productParts.slice(0, 2).join(' ');\n    } else {\n      // Fallback al nombre base\n      searchTerm = baseName;\n    }\n    \n    // Buscar productos con nombres similares (variantes)\n    const { data: variants, error: variantsError } = await supabase\n      .from('products')\n      .select('id, name, price, discounted_price, stock, is_active')\n      .ilike('name', `${searchTerm}%`)\n      .eq('is_active', true)\n      .order('price', { ascending: true });\n\n    if (variantsError) {\n      handleSupabaseError(variantsError, `GET /api/products/${id}/variants - variants search`);\n    }\n\n    // Filtrar y transformar variantes\n    const processedVariants: ProductVariant[] = (variants || [])\n      .map(variant => ({\n        id: variant.id,\n        name: variant.name,\n        price: variant.price,\n        discounted_price: variant.discounted_price,\n        capacity: extractCapacity(variant.name),\n        stock: variant.stock,\n        is_active: variant.is_active,\n      }))\n      .sort((a, b) => {\n        // Ordenar por capacidad num\xE9rica\n        const aNum = parseInt(a.capacity.replace(/[^\\d]/g, '')) || 0;\n        const bNum = parseInt(b.capacity.replace(/[^\\d]/g, '')) || 0;\n        return aNum - bNum;\n      });\n\n    // Si no se encontraron variantes, devolver solo el producto original\n    if (processedVariants.length === 0) {\n      processedVariants.push({\n        id: originalProduct.id,\n        name: originalProduct.name,\n        price: originalProduct.price,\n        discounted_price: originalProduct.discounted_price,\n        capacity: extractCapacity(originalProduct.name),\n        stock: originalProduct.stock,\n        is_active: originalProduct.is_active,\n      });\n    }\n\n    const response: ApiResponse<ProductVariant[]> = {\n      data: processedVariants,\n      success: true,\n      message: `${processedVariants.length} variantes encontradas`,\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error: any) {\n    console.error('Error en GET /api/products/[id]/variants:', error);\n    \n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    };\n\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n}"],
      names: ["GET", "extractCapacity", "productName", "capacityMatch", "match", "value", "unit", "toLowerCase", "generateBaseName", "replace", "trim", "request", "context", "params", "id", "parseInt", "isNaN", "errorResponse", "data", "success", "error", "NextResponse", "json", "status", "supabase", "getSupabaseClient", "console", "originalProduct", "originalError", "from", "select", "eq", "single", "code", "notFoundResponse", "handleSupabaseError", "baseName", "name", "productParts", "split", "searchTerm", "length", "slice", "join", "variants", "variantsError", "ilike", "order", "ascending", "processedVariants", "map", "variant", "price", "discounted_price", "capacity", "stock", "is_active", "sort", "a", "b", "aNum", "bNum", "push", "response", "message"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53253703c71b598451b884c8e6708c7347e2dbeb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_spz9d1ple = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_spz9d1ple();
cov_spz9d1ple().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_spz9d1ple().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_spz9d1ple().f[0]++;
    cov_spz9d1ple().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_spz9d1ple().s[3]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_spz9d1ple().s[4]++, require("../../../../../lib/integrations/supabase"));
// Función para extraer capacidad del nombre del producto
function extractCapacity(productName) {
  /* istanbul ignore next */
  cov_spz9d1ple().f[1]++;
  // Buscar patrones de capacidad más específicos
  const capacityMatch =
  /* istanbul ignore next */
  (cov_spz9d1ple().s[5]++, productName.match(/(\d+(?:\.\d+)?)\s*(kg|L|litros?|galones?)/i));
  /* istanbul ignore next */
  cov_spz9d1ple().s[6]++;
  if (capacityMatch) {
    /* istanbul ignore next */
    cov_spz9d1ple().b[0][0]++;
    const value =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[7]++, capacityMatch[1]);
    const unit =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[8]++, capacityMatch[2].toLowerCase());
    // Normalizar unidades
    /* istanbul ignore next */
    cov_spz9d1ple().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_spz9d1ple().b[2][0]++, unit === 'litros') ||
    /* istanbul ignore next */
    (cov_spz9d1ple().b[2][1]++, unit === 'litro')) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[1][0]++;
      cov_spz9d1ple().s[10]++;
      return `${value}L`;
    } else {
      /* istanbul ignore next */
      cov_spz9d1ple().b[1][1]++;
      cov_spz9d1ple().s[11]++;
      if (
      /* istanbul ignore next */
      (cov_spz9d1ple().b[4][0]++, unit === 'galones') ||
      /* istanbul ignore next */
      (cov_spz9d1ple().b[4][1]++, unit === 'galon')) {
        /* istanbul ignore next */
        cov_spz9d1ple().b[3][0]++;
        cov_spz9d1ple().s[12]++;
        return `${value}gal`;
      } else {
        /* istanbul ignore next */
        cov_spz9d1ple().b[3][1]++;
        cov_spz9d1ple().s[13]++;
        return `${value}${unit}`;
      }
    }
  } else
  /* istanbul ignore next */
  {
    cov_spz9d1ple().b[0][1]++;
  }
  cov_spz9d1ple().s[14]++;
  return 'Sin especificar';
}
// Función para generar nombre base del producto
function generateBaseName(productName) {
  /* istanbul ignore next */
  cov_spz9d1ple().f[2]++;
  cov_spz9d1ple().s[15]++;
  return productName.replace(/\s*(\d+L|\d+\s*litros?|\d+\s*galones?)\s*/gi, ' ').replace(/\s+/g, ' ').trim();
}
async function GET(request, context) {
  /* istanbul ignore next */
  cov_spz9d1ple().f[3]++;
  cov_spz9d1ple().s[16]++;
  try {
    const params =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[17]++, await context.params);
    const id =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[18]++, parseInt(params.id, 10));
    /* istanbul ignore next */
    cov_spz9d1ple().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_spz9d1ple().b[6][0]++, isNaN(id)) ||
    /* istanbul ignore next */
    (cov_spz9d1ple().b[6][1]++, id <= 0)) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[5][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_spz9d1ple().s[20]++, {
        data: null,
        success: false,
        error: 'ID de producto inválido'
      });
      /* istanbul ignore next */
      cov_spz9d1ple().s[21]++;
      return _server.NextResponse.json(errorResponse, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_spz9d1ple().b[5][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[22]++, (0, _supabase.getSupabaseClient)());
    /* istanbul ignore next */
    cov_spz9d1ple().s[23]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[7][0]++;
      cov_spz9d1ple().s[24]++;
      console.error('Cliente de Supabase no disponible en GET /api/products/[id]/variants');
      const errorResponse =
      /* istanbul ignore next */
      (cov_spz9d1ple().s[25]++, {
        data: null,
        success: false,
        error: 'Servicio de base de datos no disponible'
      });
      /* istanbul ignore next */
      cov_spz9d1ple().s[26]++;
      return _server.NextResponse.json(errorResponse, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_spz9d1ple().b[7][1]++;
    }
    // Primero obtener el producto original
    const {
      data: originalProduct,
      error: originalError
    } =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[27]++, await supabase.from('products').select('id, name, price, discounted_price, stock, is_active').eq('id', id).single());
    /* istanbul ignore next */
    cov_spz9d1ple().s[28]++;
    if (originalError) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[8][0]++;
      cov_spz9d1ple().s[29]++;
      if (originalError.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_spz9d1ple().b[9][0]++;
        const notFoundResponse =
        /* istanbul ignore next */
        (cov_spz9d1ple().s[30]++, {
          data: null,
          success: false,
          error: 'Producto no encontrado'
        });
        /* istanbul ignore next */
        cov_spz9d1ple().s[31]++;
        return _server.NextResponse.json(notFoundResponse, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_spz9d1ple().b[9][1]++;
      }
      cov_spz9d1ple().s[32]++;
      (0, _supabase.handleSupabaseError)(originalError, `GET /api/products/${id}/variants`);
    } else
    /* istanbul ignore next */
    {
      cov_spz9d1ple().b[8][1]++;
    }
    // Generar nombre base para buscar variantes
    const baseName =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[33]++, generateBaseName(originalProduct.name));
    // Extraer marca y tipo del producto (ej: "Poximix Exterior" de "Poximix Exterior 5kg")
    const productParts =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[34]++, originalProduct.name.split(' '));
    let searchTerm =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[35]++, '');
    /* istanbul ignore next */
    cov_spz9d1ple().s[36]++;
    if (productParts.length >= 2) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[10][0]++;
      cov_spz9d1ple().s[37]++;
      // Para productos como "Poximix Exterior 5kg", usar "Poximix Exterior"
      searchTerm = productParts.slice(0, 2).join(' ');
    } else {
      /* istanbul ignore next */
      cov_spz9d1ple().b[10][1]++;
      cov_spz9d1ple().s[38]++;
      // Fallback al nombre base
      searchTerm = baseName;
    }
    // Buscar productos con nombres similares (variantes)
    const {
      data: variants,
      error: variantsError
    } =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[39]++, await supabase.from('products').select('id, name, price, discounted_price, stock, is_active').ilike('name', `${searchTerm}%`).eq('is_active', true).order('price', {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_spz9d1ple().s[40]++;
    if (variantsError) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[11][0]++;
      cov_spz9d1ple().s[41]++;
      (0, _supabase.handleSupabaseError)(variantsError, `GET /api/products/${id}/variants - variants search`);
    } else
    /* istanbul ignore next */
    {
      cov_spz9d1ple().b[11][1]++;
    }
    // Filtrar y transformar variantes
    const processedVariants =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[42]++, (
    /* istanbul ignore next */
    (cov_spz9d1ple().b[12][0]++, variants) ||
    /* istanbul ignore next */
    (cov_spz9d1ple().b[12][1]++, [])).map(variant => {
      /* istanbul ignore next */
      cov_spz9d1ple().f[4]++;
      cov_spz9d1ple().s[43]++;
      return {
        id: variant.id,
        name: variant.name,
        price: variant.price,
        discounted_price: variant.discounted_price,
        capacity: extractCapacity(variant.name),
        stock: variant.stock,
        is_active: variant.is_active
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_spz9d1ple().f[5]++;
      // Ordenar por capacidad numérica
      const aNum =
      /* istanbul ignore next */
      (cov_spz9d1ple().s[44]++,
      /* istanbul ignore next */
      (cov_spz9d1ple().b[13][0]++, parseInt(a.capacity.replace(/[^\d]/g, ''))) ||
      /* istanbul ignore next */
      (cov_spz9d1ple().b[13][1]++, 0));
      const bNum =
      /* istanbul ignore next */
      (cov_spz9d1ple().s[45]++,
      /* istanbul ignore next */
      (cov_spz9d1ple().b[14][0]++, parseInt(b.capacity.replace(/[^\d]/g, ''))) ||
      /* istanbul ignore next */
      (cov_spz9d1ple().b[14][1]++, 0));
      /* istanbul ignore next */
      cov_spz9d1ple().s[46]++;
      return aNum - bNum;
    }));
    // Si no se encontraron variantes, devolver solo el producto original
    /* istanbul ignore next */
    cov_spz9d1ple().s[47]++;
    if (processedVariants.length === 0) {
      /* istanbul ignore next */
      cov_spz9d1ple().b[15][0]++;
      cov_spz9d1ple().s[48]++;
      processedVariants.push({
        id: originalProduct.id,
        name: originalProduct.name,
        price: originalProduct.price,
        discounted_price: originalProduct.discounted_price,
        capacity: extractCapacity(originalProduct.name),
        stock: originalProduct.stock,
        is_active: originalProduct.is_active
      });
    } else
    /* istanbul ignore next */
    {
      cov_spz9d1ple().b[15][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[49]++, {
      data: processedVariants,
      success: true,
      message: `${processedVariants.length} variantes encontradas`
    });
    /* istanbul ignore next */
    cov_spz9d1ple().s[50]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_spz9d1ple().s[51]++;
    console.error('Error en GET /api/products/[id]/variants:', error);
    const errorResponse =
    /* istanbul ignore next */
    (cov_spz9d1ple().s[52]++, {
      data: null,
      success: false,
      error:
      /* istanbul ignore next */
      (cov_spz9d1ple().b[16][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_spz9d1ple().b[16][1]++, 'Error interno del servidor')
    });
    /* istanbul ignore next */
    cov_spz9d1ple().s[53]++;
    return _server.NextResponse.json(errorResponse, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfc3B6OWQxcGxlIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwiZXh0cmFjdENhcGFjaXR5IiwicHJvZHVjdE5hbWUiLCJmIiwiY2FwYWNpdHlNYXRjaCIsIm1hdGNoIiwiYiIsInZhbHVlIiwidW5pdCIsInRvTG93ZXJDYXNlIiwiZ2VuZXJhdGVCYXNlTmFtZSIsInJlcGxhY2UiLCJ0cmltIiwicmVxdWVzdCIsImNvbnRleHQiLCJwYXJhbXMiLCJpZCIsInBhcnNlSW50IiwiaXNOYU4iLCJlcnJvclJlc3BvbnNlIiwiZGF0YSIsInN1Y2Nlc3MiLCJlcnJvciIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwic3VwYWJhc2UiLCJfc3VwYWJhc2UiLCJnZXRTdXBhYmFzZUNsaWVudCIsImNvbnNvbGUiLCJvcmlnaW5hbFByb2R1Y3QiLCJvcmlnaW5hbEVycm9yIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiY29kZSIsIm5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVTdXBhYmFzZUVycm9yIiwiYmFzZU5hbWUiLCJuYW1lIiwicHJvZHVjdFBhcnRzIiwic3BsaXQiLCJzZWFyY2hUZXJtIiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwidmFyaWFudHMiLCJ2YXJpYW50c0Vycm9yIiwiaWxpa2UiLCJvcmRlciIsImFzY2VuZGluZyIsInByb2Nlc3NlZFZhcmlhbnRzIiwibWFwIiwidmFyaWFudCIsInByaWNlIiwiZGlzY291bnRlZF9wcmljZSIsImNhcGFjaXR5Iiwic3RvY2siLCJpc19hY3RpdmUiLCJzb3J0IiwiYSIsImFOdW0iLCJiTnVtIiwicHVzaCIsInJlc3BvbnNlIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXHByb2R1Y3RzXFxbaWRdXFx2YXJpYW50c1xccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBJTlRFWUEgRS1DT01NRVJDRSAtIEFQSSBERSBWQVJJQU5URVMgREUgUFJPRFVDVE9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZXRTdXBhYmFzZUNsaWVudCwgaGFuZGxlU3VwYWJhc2VFcnJvciB9IGZyb20gJ0AvbGliL2ludGVncmF0aW9ucy9zdXBhYmFzZSc7XG5pbXBvcnQgeyBBcGlSZXNwb25zZSB9IGZyb20gJ0AvdHlwZXMvYXBpJztcblxuLy8gVGlwbyBwYXJhIHZhcmlhbnRlIGRlIHByb2R1Y3RvXG5pbnRlcmZhY2UgUHJvZHVjdFZhcmlhbnQge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIHByaWNlOiBzdHJpbmc7XG4gIGRpc2NvdW50ZWRfcHJpY2U6IHN0cmluZyB8IG51bGw7XG4gIGNhcGFjaXR5OiBzdHJpbmc7XG4gIHN0b2NrOiBudW1iZXI7XG4gIGlzX2FjdGl2ZTogYm9vbGVhbjtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBleHRyYWVyIGNhcGFjaWRhZCBkZWwgbm9tYnJlIGRlbCBwcm9kdWN0b1xuZnVuY3Rpb24gZXh0cmFjdENhcGFjaXR5KHByb2R1Y3ROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBCdXNjYXIgcGF0cm9uZXMgZGUgY2FwYWNpZGFkIG3DoXMgZXNwZWPDrWZpY29zXG4gIGNvbnN0IGNhcGFjaXR5TWF0Y2ggPSBwcm9kdWN0TmFtZS5tYXRjaCgvKFxcZCsoPzpcXC5cXGQrKT8pXFxzKihrZ3xMfGxpdHJvcz98Z2Fsb25lcz8pL2kpO1xuICBpZiAoY2FwYWNpdHlNYXRjaCkge1xuICAgIGNvbnN0IHZhbHVlID0gY2FwYWNpdHlNYXRjaFsxXTtcbiAgICBjb25zdCB1bml0ID0gY2FwYWNpdHlNYXRjaFsyXS50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIC8vIE5vcm1hbGl6YXIgdW5pZGFkZXNcbiAgICBpZiAodW5pdCA9PT0gJ2xpdHJvcycgfHwgdW5pdCA9PT0gJ2xpdHJvJykge1xuICAgICAgcmV0dXJuIGAke3ZhbHVlfUxgO1xuICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gJ2dhbG9uZXMnIHx8IHVuaXQgPT09ICdnYWxvbicpIHtcbiAgICAgIHJldHVybiBgJHt2YWx1ZX1nYWxgO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7dmFsdWV9JHt1bml0fWA7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gJ1NpbiBlc3BlY2lmaWNhcic7XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgZ2VuZXJhciBub21icmUgYmFzZSBkZWwgcHJvZHVjdG9cbmZ1bmN0aW9uIGdlbmVyYXRlQmFzZU5hbWUocHJvZHVjdE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBwcm9kdWN0TmFtZVxuICAgIC5yZXBsYWNlKC9cXHMqKFxcZCtMfFxcZCtcXHMqbGl0cm9zP3xcXGQrXFxzKmdhbG9uZXM/KVxccyovZ2ksICcgJylcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgLnRyaW0oKTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEdFVCAvYXBpL3Byb2R1Y3RzL1tpZF0vdmFyaWFudHMgLSBPYnRlbmVyIHZhcmlhbnRlcyBkZSB1biBwcm9kdWN0b1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICBjb250ZXh0OiB7IHBhcmFtczogUHJvbWlzZTx7IGlkOiBzdHJpbmcgfT4gfVxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyYW1zID0gYXdhaXQgY29udGV4dC5wYXJhbXM7XG4gICAgY29uc3QgaWQgPSBwYXJzZUludChwYXJhbXMuaWQsIDEwKTtcbiAgICBcbiAgICBpZiAoaXNOYU4oaWQpIHx8IGlkIDw9IDApIHtcbiAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdJRCBkZSBwcm9kdWN0byBpbnbDoWxpZG8nLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBzdXBhYmFzZSA9IGdldFN1cGFiYXNlQ2xpZW50KCk7XG5cbiAgICBpZiAoIXN1cGFiYXNlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDbGllbnRlIGRlIFN1cGFiYXNlIG5vIGRpc3BvbmlibGUgZW4gR0VUIC9hcGkvcHJvZHVjdHMvW2lkXS92YXJpYW50cycpO1xuICAgICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1NlcnZpY2lvIGRlIGJhc2UgZGUgZGF0b3Mgbm8gZGlzcG9uaWJsZScsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA1MDMgfSk7XG4gICAgfVxuXG4gICAgLy8gUHJpbWVybyBvYnRlbmVyIGVsIHByb2R1Y3RvIG9yaWdpbmFsXG4gICAgY29uc3QgeyBkYXRhOiBvcmlnaW5hbFByb2R1Y3QsIGVycm9yOiBvcmlnaW5hbEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3Byb2R1Y3RzJylcbiAgICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBwcmljZSwgZGlzY291bnRlZF9wcmljZSwgc3RvY2ssIGlzX2FjdGl2ZScpXG4gICAgICAuZXEoJ2lkJywgaWQpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAob3JpZ2luYWxFcnJvcikge1xuICAgICAgaWYgKG9yaWdpbmFsRXJyb3IuY29kZSA9PT0gJ1BHUlNUMTE2Jykge1xuICAgICAgICBjb25zdCBub3RGb3VuZFJlc3BvbnNlOiBBcGlSZXNwb25zZTxudWxsPiA9IHtcbiAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnUHJvZHVjdG8gbm8gZW5jb250cmFkbycsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihub3RGb3VuZFJlc3BvbnNlLCB7IHN0YXR1czogNDA0IH0pO1xuICAgICAgfVxuICAgICAgaGFuZGxlU3VwYWJhc2VFcnJvcihvcmlnaW5hbEVycm9yLCBgR0VUIC9hcGkvcHJvZHVjdHMvJHtpZH0vdmFyaWFudHNgKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmFyIG5vbWJyZSBiYXNlIHBhcmEgYnVzY2FyIHZhcmlhbnRlc1xuICAgIGNvbnN0IGJhc2VOYW1lID0gZ2VuZXJhdGVCYXNlTmFtZShvcmlnaW5hbFByb2R1Y3QubmFtZSk7XG4gICAgXG4gICAgLy8gRXh0cmFlciBtYXJjYSB5IHRpcG8gZGVsIHByb2R1Y3RvIChlajogXCJQb3hpbWl4IEV4dGVyaW9yXCIgZGUgXCJQb3hpbWl4IEV4dGVyaW9yIDVrZ1wiKVxuICAgIGNvbnN0IHByb2R1Y3RQYXJ0cyA9IG9yaWdpbmFsUHJvZHVjdC5uYW1lLnNwbGl0KCcgJyk7XG4gICAgbGV0IHNlYXJjaFRlcm0gPSAnJztcbiAgICBcbiAgICBpZiAocHJvZHVjdFBhcnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAvLyBQYXJhIHByb2R1Y3RvcyBjb21vIFwiUG94aW1peCBFeHRlcmlvciA1a2dcIiwgdXNhciBcIlBveGltaXggRXh0ZXJpb3JcIlxuICAgICAgc2VhcmNoVGVybSA9IHByb2R1Y3RQYXJ0cy5zbGljZSgwLCAyKS5qb2luKCcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrIGFsIG5vbWJyZSBiYXNlXG4gICAgICBzZWFyY2hUZXJtID0gYmFzZU5hbWU7XG4gICAgfVxuICAgIFxuICAgIC8vIEJ1c2NhciBwcm9kdWN0b3MgY29uIG5vbWJyZXMgc2ltaWxhcmVzICh2YXJpYW50ZXMpXG4gICAgY29uc3QgeyBkYXRhOiB2YXJpYW50cywgZXJyb3I6IHZhcmlhbnRzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgncHJvZHVjdHMnKVxuICAgICAgLnNlbGVjdCgnaWQsIG5hbWUsIHByaWNlLCBkaXNjb3VudGVkX3ByaWNlLCBzdG9jaywgaXNfYWN0aXZlJylcbiAgICAgIC5pbGlrZSgnbmFtZScsIGAke3NlYXJjaFRlcm19JWApXG4gICAgICAuZXEoJ2lzX2FjdGl2ZScsIHRydWUpXG4gICAgICAub3JkZXIoJ3ByaWNlJywgeyBhc2NlbmRpbmc6IHRydWUgfSk7XG5cbiAgICBpZiAodmFyaWFudHNFcnJvcikge1xuICAgICAgaGFuZGxlU3VwYWJhc2VFcnJvcih2YXJpYW50c0Vycm9yLCBgR0VUIC9hcGkvcHJvZHVjdHMvJHtpZH0vdmFyaWFudHMgLSB2YXJpYW50cyBzZWFyY2hgKTtcbiAgICB9XG5cbiAgICAvLyBGaWx0cmFyIHkgdHJhbnNmb3JtYXIgdmFyaWFudGVzXG4gICAgY29uc3QgcHJvY2Vzc2VkVmFyaWFudHM6IFByb2R1Y3RWYXJpYW50W10gPSAodmFyaWFudHMgfHwgW10pXG4gICAgICAubWFwKHZhcmlhbnQgPT4gKHtcbiAgICAgICAgaWQ6IHZhcmlhbnQuaWQsXG4gICAgICAgIG5hbWU6IHZhcmlhbnQubmFtZSxcbiAgICAgICAgcHJpY2U6IHZhcmlhbnQucHJpY2UsXG4gICAgICAgIGRpc2NvdW50ZWRfcHJpY2U6IHZhcmlhbnQuZGlzY291bnRlZF9wcmljZSxcbiAgICAgICAgY2FwYWNpdHk6IGV4dHJhY3RDYXBhY2l0eSh2YXJpYW50Lm5hbWUpLFxuICAgICAgICBzdG9jazogdmFyaWFudC5zdG9jayxcbiAgICAgICAgaXNfYWN0aXZlOiB2YXJpYW50LmlzX2FjdGl2ZSxcbiAgICAgIH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgLy8gT3JkZW5hciBwb3IgY2FwYWNpZGFkIG51bcOpcmljYVxuICAgICAgICBjb25zdCBhTnVtID0gcGFyc2VJbnQoYS5jYXBhY2l0eS5yZXBsYWNlKC9bXlxcZF0vZywgJycpKSB8fCAwO1xuICAgICAgICBjb25zdCBiTnVtID0gcGFyc2VJbnQoYi5jYXBhY2l0eS5yZXBsYWNlKC9bXlxcZF0vZywgJycpKSB8fCAwO1xuICAgICAgICByZXR1cm4gYU51bSAtIGJOdW07XG4gICAgICB9KTtcblxuICAgIC8vIFNpIG5vIHNlIGVuY29udHJhcm9uIHZhcmlhbnRlcywgZGV2b2x2ZXIgc29sbyBlbCBwcm9kdWN0byBvcmlnaW5hbFxuICAgIGlmIChwcm9jZXNzZWRWYXJpYW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHByb2Nlc3NlZFZhcmlhbnRzLnB1c2goe1xuICAgICAgICBpZDogb3JpZ2luYWxQcm9kdWN0LmlkLFxuICAgICAgICBuYW1lOiBvcmlnaW5hbFByb2R1Y3QubmFtZSxcbiAgICAgICAgcHJpY2U6IG9yaWdpbmFsUHJvZHVjdC5wcmljZSxcbiAgICAgICAgZGlzY291bnRlZF9wcmljZTogb3JpZ2luYWxQcm9kdWN0LmRpc2NvdW50ZWRfcHJpY2UsXG4gICAgICAgIGNhcGFjaXR5OiBleHRyYWN0Q2FwYWNpdHkob3JpZ2luYWxQcm9kdWN0Lm5hbWUpLFxuICAgICAgICBzdG9jazogb3JpZ2luYWxQcm9kdWN0LnN0b2NrLFxuICAgICAgICBpc19hY3RpdmU6IG9yaWdpbmFsUHJvZHVjdC5pc19hY3RpdmUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZTogQXBpUmVzcG9uc2U8UHJvZHVjdFZhcmlhbnRbXT4gPSB7XG4gICAgICBkYXRhOiBwcm9jZXNzZWRWYXJpYW50cyxcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiBgJHtwcm9jZXNzZWRWYXJpYW50cy5sZW5ndGh9IHZhcmlhbnRlcyBlbmNvbnRyYWRhc2AsXG4gICAgfTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSk7XG5cbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIEdFVCAvYXBpL3Byb2R1Y3RzL1tpZF0vdmFyaWFudHM6JywgZXJyb3IpO1xuICAgIFxuICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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