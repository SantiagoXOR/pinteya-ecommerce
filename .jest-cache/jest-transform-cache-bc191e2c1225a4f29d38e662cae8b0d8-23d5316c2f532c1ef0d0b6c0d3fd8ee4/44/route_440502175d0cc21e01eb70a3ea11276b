50ff639ba592af22164d44f9941f6263
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_19r05trsv9() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\unified\\route.ts";
  var hash = "655e29b2fd3d702519451a8d3c450b7cefe120b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\unified\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "9": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 52
        }
      },
      "10": {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "11": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 85
        }
      },
      "12": {
        start: {
          line: 28,
          column: 28
        },
        end: {
          line: 28,
          column: 83
        }
      },
      "13": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 76
        }
      },
      "14": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "15": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "16": {
        start: {
          line: 56,
          column: 22
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "17": {
        start: {
          line: 60,
          column: 30
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "18": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "19": {
        start: {
          line: 75,
          column: 34
        },
        end: {
          line: 75,
          column: 76
        }
      },
      "20": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "21": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "22": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "23": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 51
        }
      },
      "24": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 86,
          column: 51
        }
      },
      "25": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "26": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 88,
          column: 70
        }
      },
      "27": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "29": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 98,
          column: 6
        }
      },
      "30": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 39
        }
      },
      "31": {
        start: {
          line: 107,
          column: 53
        },
        end: {
          line: 107,
          column: 59
        }
      },
      "32": {
        start: {
          line: 109,
          column: 21
        },
        end: {
          line: 114,
          column: 6
        }
      },
      "33": {
        start: {
          line: 116,
          column: 39
        },
        end: {
          line: 116,
          column: 76
        }
      },
      "34": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 74
        }
      },
      "35": {
        start: {
          line: 117,
          column: 56
        },
        end: {
          line: 117,
          column: 73
        }
      },
      "36": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "37": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 30
        }
      },
      "38": {
        start: {
          line: 123,
          column: 56
        },
        end: {
          line: 133,
          column: 10
        }
      },
      "39": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "40": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 83
        }
      },
      "41": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 36
        }
      },
      "42": {
        start: {
          line: 140,
          column: 38
        },
        end: {
          line: 140,
          column: 114
        }
      },
      "43": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "44": {
        start: {
          line: 143,
          column: 61
        },
        end: {
          line: 154,
          column: 17
        }
      },
      "45": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "46": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 81
        }
      },
      "47": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "48": {
        start: {
          line: 165,
          column: 36
        },
        end: {
          line: 165,
          column: 116
        }
      },
      "49": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "50": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 78
        }
      },
      "51": {
        start: {
          line: 170,
          column: 58
        },
        end: {
          line: 188,
          column: 17
        }
      },
      "52": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "53": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 77
        }
      },
      "54": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 10
        }
      },
      "55": {
        start: {
          line: 200,
          column: 66
        },
        end: {
          line: 200,
          column: 72
        }
      },
      "56": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 83
        }
      },
      "57": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 205,
          column: 5
        }
      },
      "58": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 81
        }
      },
      "59": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 38
        }
      },
      "60": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "61": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 86
        }
      },
      "62": {
        start: {
          line: 212,
          column: 19
        },
        end: {
          line: 321,
          column: 6
        }
      },
      "63": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "64": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 85
        }
      },
      "65": {
        start: {
          line: 218,
          column: 43
        },
        end: {
          line: 218,
          column: 95
        }
      },
      "66": {
        start: {
          line: 219,
          column: 27
        },
        end: {
          line: 219,
          column: 78
        }
      },
      "67": {
        start: {
          line: 219,
          column: 60
        },
        end: {
          line: 219,
          column: 77
        }
      },
      "68": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "69": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "70": {
        start: {
          line: 225,
          column: 60
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "71": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "72": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 87
        }
      },
      "73": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 40
        }
      },
      "74": {
        start: {
          line: 245,
          column: 42
        },
        end: {
          line: 245,
          column: 116
        }
      },
      "75": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "76": {
        start: {
          line: 248,
          column: 65
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "77": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "78": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 85
        }
      },
      "79": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 275,
          column: 14
        }
      },
      "80": {
        start: {
          line: 278,
          column: 40
        },
        end: {
          line: 278,
          column: 118
        }
      },
      "81": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "82": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 82
        }
      },
      "83": {
        start: {
          line: 283,
          column: 62
        },
        end: {
          line: 306,
          column: 21
        }
      },
      "84": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "85": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "86": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 315,
          column: 14
        }
      },
      "87": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "88": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 74
        }
      },
      "89": {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 325,
          column: 23
        }
      },
      "90": {
        start: {
          line: 328,
          column: 4
        },
        end: {
          line: 415,
          column: 5
        }
      },
      "91": {
        start: {
          line: 329,
          column: 21
        },
        end: {
          line: 329,
          column: 41
        }
      },
      "92": {
        start: {
          line: 330,
          column: 23
        },
        end: {
          line: 330,
          column: 56
        }
      },
      "93": {
        start: {
          line: 331,
          column: 26
        },
        end: {
          line: 331,
          column: 50
        }
      },
      "94": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 75
        }
      },
      "95": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "96": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "97": {
        start: {
          line: 344,
          column: 35
        },
        end: {
          line: 344,
          column: 112
        }
      },
      "98": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "99": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "100": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 364,
          column: 9
        }
      },
      "101": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 70
        }
      },
      "102": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "103": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 78
        }
      },
      "104": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 56
        }
      },
      "105": {
        start: {
          line: 365,
          column: 55
        },
        end: {
          line: 365,
          column: 61
        }
      },
      "106": {
        start: {
          line: 367,
          column: 25
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "107": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "108": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 399,
          column: 14
        }
      },
      "109": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "110": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 72
        }
      },
      "111": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 414,
          column: 11
        }
      },
      "112": {
        start: {
          line: 418,
          column: 4
        },
        end: {
          line: 501,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "validatePassword",
        decl: {
          start: {
            line: 73,
            column: 9
          },
          end: {
            line: 73,
            column: 25
          }
        },
        loc: {
          start: {
            line: 73,
            column: 69
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 73
      },
      "5": {
        name: "validateSecurityKey",
        decl: {
          start: {
            line: 100,
            column: 9
          },
          end: {
            line: 100,
            column: 28
          }
        },
        loc: {
          start: {
            line: 100,
            column: 40
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 100
      },
      "6": {
        name: "createAdminUserBasic",
        decl: {
          start: {
            line: 106,
            column: 15
          },
          end: {
            line: 106,
            column: 35
          }
        },
        loc: {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 117,
            column: 51
          },
          end: {
            line: 117,
            column: 52
          }
        },
        loc: {
          start: {
            line: 117,
            column: 56
          },
          end: {
            line: 117,
            column: 73
          }
        },
        line: 117
      },
      "8": {
        name: "createAdminUserEnterprise",
        decl: {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 40
          }
        },
        loc: {
          start: {
            line: 199,
            column: 58
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 212,
            column: 74
          },
          end: {
            line: 212,
            column: 75
          }
        },
        loc: {
          start: {
            line: 212,
            column: 102
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 212
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 55
          },
          end: {
            line: 219,
            column: 56
          }
        },
        loc: {
          start: {
            line: 219,
            column: 60
          },
          end: {
            line: 219,
            column: 77
          }
        },
        line: 219
      },
      "11": {
        name: "POST",
        decl: {
          start: {
            line: 327,
            column: 15
          },
          end: {
            line: 327,
            column: 19
          }
        },
        loc: {
          start: {
            line: 327,
            column: 29
          },
          end: {
            line: 416,
            column: 1
          }
        },
        line: 327
      },
      "12": {
        name: "GET",
        decl: {
          start: {
            line: 417,
            column: 15
          },
          end: {
            line: 417,
            column: 18
          }
        },
        loc: {
          start: {
            line: 417,
            column: 21
          },
          end: {
            line: 502,
            column: 1
          }
        },
        line: 417
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 73,
            column: 42
          },
          end: {
            line: 73,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 73,
            column: 62
          },
          end: {
            line: 73,
            column: 67
          }
        }],
        line: 73
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 34
          },
          end: {
            line: 75,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 34
          },
          end: {
            line: 75,
            column: 55
          }
        }, {
          start: {
            line: 75,
            column: 59
          },
          end: {
            line: 75,
            column: 76
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 80,
            column: 92
          },
          end: {
            line: 80,
            column: 145
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 116
          },
          end: {
            line: 80,
            column: 140
          }
        }, {
          start: {
            line: 80,
            column: 143
          },
          end: {
            line: 80,
            column: 145
          }
        }],
        line: 80
      },
      "4": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "5": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 25
          }
        }, {
          start: {
            line: 89,
            column: 29
          },
          end: {
            line: 89,
            column: 42
          }
        }, {
          start: {
            line: 89,
            column: 46
          },
          end: {
            line: 89,
            column: 57
          }
        }, {
          start: {
            line: 89,
            column: 61
          },
          end: {
            line: 89,
            column: 76
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        }, {
          start: {
            line: 121,
            column: 11
          },
          end: {
            line: 138,
            column: 5
          }
        }],
        line: 119
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        }, {
          start: {
            line: 163,
            column: 11
          },
          end: {
            line: 197,
            column: 5
          }
        }],
        line: 141
      },
      "10": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "13": {
        loc: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "14": {
        loc: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 208,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 208,
            column: 53
          }
        }, {
          start: {
            line: 208,
            column: 57
          },
          end: {
            line: 208,
            column: 81
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "17": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 243,
            column: 9
          }
        }],
        line: 221
      },
      "18": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "19": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: 276,
            column: 15
          },
          end: {
            line: 316,
            column: 9
          }
        }],
        line: 246
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "22": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "23": {
        loc: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "24": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "25": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "26": {
        loc: {
          start: {
            line: 348,
            column: 22
          },
          end: {
            line: 348,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 53
          },
          end: {
            line: 348,
            column: 81
          }
        }, {
          start: {
            line: 348,
            column: 84
          },
          end: {
            line: 348,
            column: 99
          }
        }],
        line: 348
      },
      "27": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 364,
            column: 9
          }
        }, {
          start: {
            line: 362,
            column: 15
          },
          end: {
            line: 364,
            column: 9
          }
        }],
        line: 356
      },
      "28": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "29": {
        loc: {
          start: {
            line: 369,
            column: 46
          },
          end: {
            line: 369,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 369,
            column: 69
          },
          end: {
            line: 369,
            column: 77
          }
        }, {
          start: {
            line: 369,
            column: 80
          },
          end: {
            line: 369,
            column: 93
          }
        }],
        line: 369
      },
      "30": {
        loc: {
          start: {
            line: 379,
            column: 37
          },
          end: {
            line: 379,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 37
          },
          end: {
            line: 379,
            column: 56
          }
        }, {
          start: {
            line: 379,
            column: 60
          },
          end: {
            line: 379,
            column: 91
          }
        }],
        line: 379
      },
      "31": {
        loc: {
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "32": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 393,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 393,
            column: 40
          }
        }, {
          start: {
            line: 393,
            column: 44
          },
          end: {
            line: 393,
            column: 51
          }
        }],
        line: 393
      },
      "33": {
        loc: {
          start: {
            line: 402,
            column: 20
          },
          end: {
            line: 402,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 43
          },
          end: {
            line: 402,
            column: 46
          }
        }, {
          start: {
            line: 402,
            column: 49
          },
          end: {
            line: 402,
            column: 52
          }
        }],
        line: 402
      },
      "34": {
        loc: {
          start: {
            line: 407,
            column: 19
          },
          end: {
            line: 407,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 19
          },
          end: {
            line: 407,
            column: 32
          }
        }, {
          start: {
            line: 407,
            column: 36
          },
          end: {
            line: 407,
            column: 64
          }
        }],
        line: 407
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\unified\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API Unificada para Creaci\xF3n de Usuario Administrador\r\n// Combina funcionalidad b\xE1sica y enterprise en un solo endpoint\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { \r\n  requireCriticalAuth \r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS,\r\n  checkRLSPermission\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  invalidateUserCache\r\n} from '@/lib/auth/enterprise-cache';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nconst CreateAdminUserSchema = z.object({\r\n  securityKey: z.string().min(1, 'Clave de seguridad requerida'),\r\n  email: z.string().email('Formato de email inv\xE1lido'),\r\n  password: z.string().min(8, 'Contrase\xF1a debe tener al menos 8 caracteres'),\r\n  firstName: z.string().default('Admin'),\r\n  lastName: z.string().default('User'),\r\n  permissions: z.array(z.string()).default([\r\n    'admin_access', \r\n    'user_management', \r\n    'products_create', \r\n    'products_update', \r\n    'products_delete'\r\n  ]),\r\n  mode: z.enum(['basic', 'enterprise']).default('basic'),\r\n  enforceComplexPassword: z.boolean().default(false)\r\n});\r\n\r\ntype CreateAdminUserRequest = z.infer<typeof CreateAdminUserSchema>;\r\n\r\n// ===================================\r\n// CONFIGURACI\xD3N DE SEGURIDAD\r\n// ===================================\r\n\r\nconst SECURITY_KEYS = {\r\n  basic: 'CREATE_ADMIN_PINTEYA_2025',\r\n  enterprise: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025'\r\n};\r\n\r\nconst PASSWORD_REQUIREMENTS = {\r\n  basic: {\r\n    minLength: 8,\r\n    requireComplexity: false\r\n  },\r\n  enterprise: {\r\n    minLength: 12,\r\n    requireComplexity: true\r\n  }\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES DE VALIDACI\xD3N\r\n// ===================================\r\n\r\nfunction validatePassword(password: string, mode: 'basic' | 'enterprise', enforceComplexity: boolean = false) {\r\n  const requirements = PASSWORD_REQUIREMENTS[mode];\r\n  const shouldCheckComplexity = mode === 'enterprise' || enforceComplexity;\r\n\r\n  // Validar longitud m\xEDnima\r\n  if (password.length < requirements.minLength) {\r\n    return {\r\n      valid: false,\r\n      error: `La contrase\xF1a debe tener al menos ${requirements.minLength} caracteres${mode === 'enterprise' ? ' para admin enterprise' : ''}`\r\n    };\r\n  }\r\n\r\n  // Validar complejidad si es requerida\r\n  if (shouldCheckComplexity) {\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n    if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\r\n      return {\r\n        valid: false,\r\n        error: 'La contrase\xF1a debe contener may\xFAsculas, min\xFAsculas, n\xFAmeros y caracteres especiales'\r\n      };\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n}\r\n\r\nfunction validateSecurityKey(key: string, mode: 'basic' | 'enterprise') {\r\n  return key === SECURITY_KEYS[mode];\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES DE CREACI\xD3N\r\n// ===================================\r\n\r\nasync function createAdminUserBasic(params: CreateAdminUserRequest) {\r\n  const { email, password, firstName, lastName } = params;\r\n\r\n  // Usar cliente b\xE1sico de Supabase\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Verificar si el usuario ya existe en auth.users\r\n  const { data: existingAuthUser } = await supabase.auth.admin.listUsers();\r\n  const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n  let authUser;\r\n\r\n  if (userExists) {\r\n    authUser = userExists;\r\n  } else {\r\n    // Crear usuario en Supabase Auth\r\n    const { data: newAuthUser, error: authError } = await supabase.auth.admin.createUser({\r\n      email,\r\n      password,\r\n      email_confirm: true,\r\n      user_metadata: {\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        role: 'admin',\r\n        created_via: 'basic_api'\r\n      }\r\n    });\r\n\r\n    if (authError) {\r\n      throw new Error(`Error creando usuario en Auth: ${authError.message}`);\r\n    }\r\n\r\n    authUser = newAuthUser.user;\r\n  }\r\n\r\n  // Verificar si el perfil ya existe\r\n  const { data: existingProfile } = await supabase\r\n    .from('user_profiles')\r\n    .select('*')\r\n    .eq('email', email)\r\n    .single();\r\n\r\n  if (existingProfile) {\r\n    // Actualizar el perfil existente\r\n    const { data: updatedProfile, error: updateError } = await supabase\r\n      .from('user_profiles')\r\n      .update({\r\n        supabase_user_id: authUser.id,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('email', email)\r\n      .select(`\r\n        *,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .single();\r\n\r\n    if (updateError) {\r\n      throw new Error(`Error actualizando perfil: ${updateError.message}`);\r\n    }\r\n\r\n    return {\r\n      action: 'updated',\r\n      authUser,\r\n      profile: updatedProfile\r\n    };\r\n  } else {\r\n    // Obtener rol de admin\r\n    const { data: adminRole } = await supabase\r\n      .from('user_roles')\r\n      .select('id')\r\n      .eq('role_name', 'admin')\r\n      .single();\r\n\r\n    if (!adminRole) {\r\n      throw new Error('Rol de admin no encontrado en la base de datos');\r\n    }\r\n\r\n    // Crear nuevo perfil\r\n    const { data: newProfile, error: profileError } = await supabase\r\n      .from('user_profiles')\r\n      .insert({\r\n        supabase_user_id: authUser.id,\r\n        email,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        role_id: adminRole.id,\r\n        is_active: true,\r\n        metadata: { \r\n          created_by: 'admin_setup', \r\n          is_super_admin: true,\r\n          created_via: 'basic_api'\r\n        }\r\n      })\r\n      .select(`\r\n        *,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .single();\r\n\r\n    if (profileError) {\r\n      throw new Error(`Error creando perfil: ${profileError.message}`);\r\n    }\r\n\r\n    return {\r\n      action: 'created',\r\n      authUser,\r\n      profile: newProfile\r\n    };\r\n  }\r\n}\r\n\r\nasync function createAdminUserEnterprise(params: CreateAdminUserRequest, request: NextRequest) {\r\n  const { email, password, firstName, lastName, permissions } = params;\r\n\r\n  // Autenticaci\xF3n cr\xEDtica enterprise\r\n  const authResult = await requireCriticalAuth(request);\r\n\r\n  if (!authResult.success) {\r\n    throw new Error(`Autenticaci\xF3n enterprise fallida: ${authResult.error}`);\r\n  }\r\n\r\n  const context = authResult.context!;\r\n\r\n  // Verificar permisos espec\xEDficos\r\n  if (!context.permissions.includes('admin_create') && context.role !== 'admin') {\r\n    throw new Error('Permisos insuficientes para crear usuarios administradores');\r\n  }\r\n\r\n  // Ejecutar con RLS y auditor\xEDa\r\n  const result = await executeWithRLS(\r\n    context,\r\n    async (client, rlsContext) => {\r\n      // Verificar permisos RLS\r\n      if (!checkRLSPermission(rlsContext, 'admin_create')) {\r\n        throw new Error('Permisos RLS insuficientes para crear administradores');\r\n      }\r\n\r\n      // Verificar si el usuario ya existe\r\n      const { data: existingAuthUser } = await supabaseAdmin.auth.admin.listUsers();\r\n      const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n      let authUser;\r\n\r\n      if (userExists) {\r\n        authUser = userExists;\r\n      } else {\r\n        // Crear usuario con metadata enterprise\r\n        const { data: newAuthUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n          email,\r\n          password,\r\n          email_confirm: true,\r\n          user_metadata: {\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            role: 'admin',\r\n            created_by: context.userId,\r\n            enterprise_admin: true,\r\n            security_level: 'critical',\r\n            created_via: 'enterprise_api'\r\n          }\r\n        });\r\n\r\n        if (authError) {\r\n          throw new Error(`Error creando usuario en Auth: ${authError.message}`);\r\n        }\r\n\r\n        authUser = newAuthUser.user;\r\n      }\r\n\r\n      // Verificar si el perfil ya existe\r\n      const { data: existingProfile } = await client\r\n        .from('user_profiles')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single();\r\n\r\n      if (existingProfile) {\r\n        // Actualizar perfil con datos enterprise\r\n        const { data: updatedProfile, error: updateError } = await client\r\n          .from('user_profiles')\r\n          .update({\r\n            supabase_user_id: authUser.id,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            permissions: permissions,\r\n            metadata: {\r\n              ...existingProfile.metadata,\r\n              updated_by: context.userId,\r\n              enterprise_admin: true,\r\n              last_admin_update: new Date().toISOString()\r\n            },\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('email', email)\r\n          .select(`\r\n            *,\r\n            user_roles (\r\n              role_name,\r\n              permissions\r\n            )\r\n          `)\r\n          .single();\r\n\r\n        if (updateError) {\r\n          throw new Error(`Error actualizando perfil: ${updateError.message}`);\r\n        }\r\n\r\n        return {\r\n          action: 'updated',\r\n          authUser,\r\n          profile: updatedProfile,\r\n          context\r\n        };\r\n      } else {\r\n        // Obtener rol de admin\r\n        const { data: adminRole } = await client\r\n          .from('user_roles')\r\n          .select('id')\r\n          .eq('role_name', 'admin')\r\n          .single();\r\n\r\n        if (!adminRole) {\r\n          throw new Error('Rol de admin no encontrado en la base de datos');\r\n        }\r\n\r\n        // Crear nuevo perfil enterprise\r\n        const { data: newProfile, error: profileError } = await client\r\n          .from('user_profiles')\r\n          .insert({\r\n            supabase_user_id: authUser.id,\r\n            email,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            role_id: adminRole.id,\r\n            permissions: permissions,\r\n            is_active: true,\r\n            is_verified: true,\r\n            metadata: {\r\n              created_by: context.userId,\r\n              enterprise_admin: true,\r\n              security_level: 'critical',\r\n              created_via: 'enterprise_api'\r\n            },\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select(`\r\n            *,\r\n            user_roles (\r\n              role_name,\r\n              permissions\r\n            )\r\n          `)\r\n          .single();\r\n\r\n        if (profileError) {\r\n          throw new Error(`Error creando perfil: ${profileError.message}`);\r\n        }\r\n\r\n        return {\r\n          action: 'created',\r\n          authUser,\r\n          profile: newProfile,\r\n          context\r\n        };\r\n      }\r\n    },\r\n    {\r\n      enforceRLS: true,\r\n      auditLog: true,\r\n      adminOverride: true\r\n    }\r\n  );\r\n\r\n  if (!result.success) {\r\n    throw new Error(`Error en operaci\xF3n enterprise: ${result.error}`);\r\n  }\r\n\r\n  return result.data!;\r\n}\r\n\r\n// ===================================\r\n// ENDPOINTS\r\n// ===================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const params = CreateAdminUserSchema.parse(body);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`\uD83D\uDD10 Unified Admin User Creation: Mode ${params.mode}`);\r\n\r\n    // Validar clave de seguridad\r\n    if (!validateSecurityKey(params.securityKey, params.mode)) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Clave de seguridad ${params.mode} incorrecta`,\r\n          code: 'INVALID_SECURITY_KEY',\r\n          mode: params.mode\r\n        },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Validar contrase\xF1a\r\n    const passwordValidation = validatePassword(\r\n      params.password, \r\n      params.mode, \r\n      params.enforceComplexPassword\r\n    );\r\n\r\n    if (!passwordValidation.valid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: passwordValidation.error,\r\n          code: params.mode === 'enterprise' ? 'PASSWORD_COMPLEXITY_FAILED' : 'WEAK_PASSWORD',\r\n          mode: params.mode\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let result;\r\n\r\n    // Ejecutar seg\xFAn el modo\r\n    if (params.mode === 'enterprise') {\r\n      result = await createAdminUserEnterprise(params, request);\r\n      \r\n      // Invalidar cache en modo enterprise\r\n      if (result.authUser) {\r\n        invalidateUserCache(result.authUser.id);\r\n      }\r\n    } else {\r\n      result = await createAdminUserBasic(params);\r\n    }\r\n\r\n    const { action, authUser, profile, context } = result;\r\n\r\n    // Respuesta unificada\r\n    const response = {\r\n      success: true,\r\n      message: `Usuario administrador ${action === 'created' ? 'creado' : 'actualizado'} correctamente`,\r\n      data: {\r\n        action,\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: {\r\n            id: profile.id,\r\n            name: `${profile.first_name} ${profile.last_name}`,\r\n            role: profile.user_roles?.role_name,\r\n            permissions: profile.permissions || profile.user_roles?.permissions,\r\n            is_active: profile.is_active,\r\n            created_at: profile.created_at\r\n          }\r\n        }\r\n      },\r\n      meta: {\r\n        mode: params.mode,\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        timestamp\r\n      }\r\n    };\r\n\r\n    // Agregar informaci\xF3n enterprise si aplica\r\n    if (params.mode === 'enterprise' && context) {\r\n      response['enterprise'] = {\r\n        security_level: 'critical',\r\n        rls_enabled: true,\r\n        created_by: context.userId,\r\n        permissions_granted: params.permissions\r\n      };\r\n    }\r\n\r\n    return NextResponse.json(response, { \r\n      status: action === 'created' ? 201 : 200 \r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('\u274C Error en Unified Admin User Creation:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: error.message || 'Error interno del servidor',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        mode: 'unknown',\r\n        unified: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    message: 'API Unificada para crear usuario administrador',\r\n    unified: true,\r\n    modes: {\r\n      basic: {\r\n        description: 'Creaci\xF3n b\xE1sica de admin sin autenticaci\xF3n previa',\r\n        security_key: 'CREATE_ADMIN_PINTEYA_2025',\r\n        password_requirements: {\r\n          min_length: 8,\r\n          complexity: 'optional'\r\n        },\r\n        features: ['Basic user creation', 'Simple validation', 'Standard profiles']\r\n      },\r\n      enterprise: {\r\n        description: 'Creaci\xF3n enterprise con autenticaci\xF3n cr\xEDtica y RLS',\r\n        security_key: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\r\n        password_requirements: {\r\n          min_length: 12,\r\n          complexity: 'required',\r\n          must_contain: ['uppercase', 'lowercase', 'numbers', 'special_chars']\r\n        },\r\n        features: [\r\n          'Enterprise authentication with critical security level',\r\n          'Row Level Security (RLS) enforcement',\r\n          'Robust password validation',\r\n          'Audit logging',\r\n          'Cache invalidation',\r\n          'Comprehensive error handling'\r\n        ]\r\n      }\r\n    },\r\n    usage: {\r\n      method: 'POST',\r\n      required_fields: ['securityKey', 'email', 'password'],\r\n      optional_fields: ['firstName', 'lastName', 'permissions', 'mode', 'enforceComplexPassword'],\r\n      examples: {\r\n        basic: {\r\n          securityKey: 'CREATE_ADMIN_PINTEYA_2025',\r\n          email: 'admin@example.com',\r\n          password: 'password123',\r\n          mode: 'basic'\r\n        },\r\n        enterprise: {\r\n          securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\r\n          email: 'admin@example.com',\r\n          password: 'ComplexPass123!',\r\n          mode: 'enterprise',\r\n          firstName: 'Admin',\r\n          lastName: 'User',\r\n          permissions: ['admin_access', 'user_management']\r\n        }\r\n      }\r\n    },\r\n    migration: {\r\n      from: [\r\n        '/api/admin/create-admin-user',\r\n        '/api/admin/create-admin-user-enterprise'\r\n      ],\r\n      to: '/api/admin/create-admin-user/unified',\r\n      backward_compatible: true\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "CreateAdminUserSchema", "z", "object", "securityKey", "string", "min", "email", "password", "firstName", "default", "lastName", "permissions", "array", "mode", "enum", "enforceComplexPassword", "boolean", "SECURITY_KEYS", "basic", "enterprise", "PASSWORD_REQUIREMENTS", "minLength", "requireComplexity", "validatePassword", "enforceComplexity", "requirements", "shouldCheckComplexity", "length", "valid", "error", "hasUpperCase", "test", "hasLowerCase", "hasNumbers", "hasSpecialChar", "validateSecurityKey", "key", "createAdminUserBasic", "params", "supabase", "createClient", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY", "auth", "autoRefreshToken", "persistSession", "data", "existingAuthUser", "admin", "listUsers", "userExists", "users", "find", "u", "authUser", "newAuthUser", "authError", "createUser", "email_confirm", "user_metadata", "first_name", "last_name", "role", "created_via", "Error", "message", "user", "existingProfile", "from", "select", "eq", "single", "updatedProfile", "updateError", "update", "supabase_user_id", "id", "updated_at", "Date", "toISOString", "action", "profile", "adminRole", "newProfile", "profileError", "insert", "role_id", "is_active", "metadata", "created_by", "is_super_admin", "createAdminUserEnterprise", "request", "authResult", "requireCriticalAuth", "success", "context", "includes", "result", "executeWithRLS", "client", "rlsContext", "checkRLSPermission", "supabaseAdmin", "userId", "enterprise_admin", "security_level", "updated_by", "last_admin_update", "is_verified", "created_at", "enforceRLS", "auditLog", "adminOverride", "body", "json", "parse", "timestamp", "console", "log", "NextResponse", "code", "status", "passwordValidation", "invalidateUserCache", "response", "auth_id", "name", "user_roles", "role_name", "meta", "api_version", "unified", "rls_enabled", "permissions_granted", "modes", "description", "security_key", "password_requirements", "min_length", "complexity", "features", "must_contain", "usage", "method", "required_fields", "optional_fields", "examples", "migration", "to", "backward_compatible"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "655e29b2fd3d702519451a8d3c450b7cefe120b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19r05trsv9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19r05trsv9();
cov_19r05trsv9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[0]++;
  cov_19r05trsv9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_19r05trsv9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_19r05trsv9().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_19r05trsv9().f[1]++;
    cov_19r05trsv9().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_19r05trsv9().f[2]++;
    cov_19r05trsv9().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_19r05trsv9().f[3]++;
    cov_19r05trsv9().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_19r05trsv9().s[7]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_19r05trsv9().s[8]++, require("zod"));
const _supabasejs =
/* istanbul ignore next */
(cov_19r05trsv9().s[9]++, require("@supabase/supabase-js"));
const _supabase =
/* istanbul ignore next */
(cov_19r05trsv9().s[10]++, require("../../../../../lib/integrations/supabase"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_19r05trsv9().s[11]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _enterpriserlsutils =
/* istanbul ignore next */
(cov_19r05trsv9().s[12]++, require("../../../../../lib/auth/enterprise-rls-utils"));
const _enterprisecache =
/* istanbul ignore next */
(cov_19r05trsv9().s[13]++, require("../../../../../lib/auth/enterprise-cache"));
const runtime =
/* istanbul ignore next */
(cov_19r05trsv9().s[14]++, 'nodejs');
// ===================================
// SCHEMAS DE VALIDACIÃN
// ===================================
const CreateAdminUserSchema =
/* istanbul ignore next */
(cov_19r05trsv9().s[15]++, _zod.z.object({
  securityKey: _zod.z.string().min(1, 'Clave de seguridad requerida'),
  email: _zod.z.string().email('Formato de email invÃ¡lido'),
  password: _zod.z.string().min(8, 'ContraseÃ±a debe tener al menos 8 caracteres'),
  firstName: _zod.z.string().default('Admin'),
  lastName: _zod.z.string().default('User'),
  permissions: _zod.z.array(_zod.z.string()).default(['admin_access', 'user_management', 'products_create', 'products_update', 'products_delete']),
  mode: _zod.z.enum(['basic', 'enterprise']).default('basic'),
  enforceComplexPassword: _zod.z.boolean().default(false)
}));
// ===================================
// CONFIGURACIÃN DE SEGURIDAD
// ===================================
const SECURITY_KEYS =
/* istanbul ignore next */
(cov_19r05trsv9().s[16]++, {
  basic: 'CREATE_ADMIN_PINTEYA_2025',
  enterprise: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025'
});
const PASSWORD_REQUIREMENTS =
/* istanbul ignore next */
(cov_19r05trsv9().s[17]++, {
  basic: {
    minLength: 8,
    requireComplexity: false
  },
  enterprise: {
    minLength: 12,
    requireComplexity: true
  }
});
// ===================================
// UTILIDADES DE VALIDACIÃN
// ===================================
function validatePassword(password, mode, enforceComplexity =
/* istanbul ignore next */
(cov_19r05trsv9().b[0][0]++, false)) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[4]++;
  const requirements =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[18]++, PASSWORD_REQUIREMENTS[mode]);
  const shouldCheckComplexity =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[19]++,
  /* istanbul ignore next */
  (cov_19r05trsv9().b[1][0]++, mode === 'enterprise') ||
  /* istanbul ignore next */
  (cov_19r05trsv9().b[1][1]++, enforceComplexity));
  // Validar longitud mÃ­nima
  /* istanbul ignore next */
  cov_19r05trsv9().s[20]++;
  if (password.length < requirements.minLength) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[2][0]++;
    cov_19r05trsv9().s[21]++;
    return {
      valid: false,
      error: `La contraseÃ±a debe tener al menos ${requirements.minLength} caracteres${mode === 'enterprise' ?
      /* istanbul ignore next */
      (cov_19r05trsv9().b[3][0]++, ' para admin enterprise') :
      /* istanbul ignore next */
      (cov_19r05trsv9().b[3][1]++, '')}`
    };
  } else
  /* istanbul ignore next */
  {
    cov_19r05trsv9().b[2][1]++;
  }
  // Validar complejidad si es requerida
  cov_19r05trsv9().s[22]++;
  if (shouldCheckComplexity) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[4][0]++;
    const hasUpperCase =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[23]++, /[A-Z]/.test(password));
    const hasLowerCase =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[24]++, /[a-z]/.test(password));
    const hasNumbers =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[25]++, /\d/.test(password));
    const hasSpecialChar =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[26]++, /[!@#$%^&*(),.?":{}|<>]/.test(password));
    /* istanbul ignore next */
    cov_19r05trsv9().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_19r05trsv9().b[6][0]++, !hasUpperCase) ||
    /* istanbul ignore next */
    (cov_19r05trsv9().b[6][1]++, !hasLowerCase) ||
    /* istanbul ignore next */
    (cov_19r05trsv9().b[6][2]++, !hasNumbers) ||
    /* istanbul ignore next */
    (cov_19r05trsv9().b[6][3]++, !hasSpecialChar)) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[5][0]++;
      cov_19r05trsv9().s[28]++;
      return {
        valid: false,
        error: 'La contraseÃ±a debe contener mayÃºsculas, minÃºsculas, nÃºmeros y caracteres especiales'
      };
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[5][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_19r05trsv9().b[4][1]++;
  }
  cov_19r05trsv9().s[29]++;
  return {
    valid: true
  };
}
function validateSecurityKey(key, mode) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[5]++;
  cov_19r05trsv9().s[30]++;
  return key === SECURITY_KEYS[mode];
}
// ===================================
// FUNCIONES DE CREACIÃN
// ===================================
async function createAdminUserBasic(params) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[6]++;
  const {
    email,
    password,
    firstName,
    lastName
  } =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[31]++, params);
  // Usar cliente bÃ¡sico de Supabase
  const supabase =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[32]++, (0, _supabasejs.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }));
  // Verificar si el usuario ya existe en auth.users
  const {
    data: existingAuthUser
  } =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[33]++, await supabase.auth.admin.listUsers());
  const userExists =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[34]++, existingAuthUser.users.find(u => {
    /* istanbul ignore next */
    cov_19r05trsv9().f[7]++;
    cov_19r05trsv9().s[35]++;
    return u.email === email;
  }));
  let authUser;
  /* istanbul ignore next */
  cov_19r05trsv9().s[36]++;
  if (userExists) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[7][0]++;
    cov_19r05trsv9().s[37]++;
    authUser = userExists;
  } else {
    /* istanbul ignore next */
    cov_19r05trsv9().b[7][1]++;
    // Crear usuario en Supabase Auth
    const {
      data: newAuthUser,
      error: authError
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[38]++, await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: {
        first_name: firstName,
        last_name: lastName,
        role: 'admin',
        created_via: 'basic_api'
      }
    }));
    /* istanbul ignore next */
    cov_19r05trsv9().s[39]++;
    if (authError) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[8][0]++;
      cov_19r05trsv9().s[40]++;
      throw new Error(`Error creando usuario en Auth: ${authError.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[8][1]++;
    }
    cov_19r05trsv9().s[41]++;
    authUser = newAuthUser.user;
  }
  // Verificar si el perfil ya existe
  const {
    data: existingProfile
  } =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[42]++, await supabase.from('user_profiles').select('*').eq('email', email).single());
  /* istanbul ignore next */
  cov_19r05trsv9().s[43]++;
  if (existingProfile) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[9][0]++;
    // Actualizar el perfil existente
    const {
      data: updatedProfile,
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[44]++, await supabase.from('user_profiles').update({
      supabase_user_id: authUser.id,
      first_name: firstName,
      last_name: lastName,
      updated_at: new Date().toISOString()
    }).eq('email', email).select(`
        *,
        user_roles (
          role_name,
          permissions
        )
      `).single());
    /* istanbul ignore next */
    cov_19r05trsv9().s[45]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[10][0]++;
      cov_19r05trsv9().s[46]++;
      throw new Error(`Error actualizando perfil: ${updateError.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[10][1]++;
    }
    cov_19r05trsv9().s[47]++;
    return {
      action: 'updated',
      authUser,
      profile: updatedProfile
    };
  } else {
    /* istanbul ignore next */
    cov_19r05trsv9().b[9][1]++;
    // Obtener rol de admin
    const {
      data: adminRole
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[48]++, await supabase.from('user_roles').select('id').eq('role_name', 'admin').single());
    /* istanbul ignore next */
    cov_19r05trsv9().s[49]++;
    if (!adminRole) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[11][0]++;
      cov_19r05trsv9().s[50]++;
      throw new Error('Rol de admin no encontrado en la base de datos');
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[11][1]++;
    }
    // Crear nuevo perfil
    const {
      data: newProfile,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[51]++, await supabase.from('user_profiles').insert({
      supabase_user_id: authUser.id,
      email,
      first_name: firstName,
      last_name: lastName,
      role_id: adminRole.id,
      is_active: true,
      metadata: {
        created_by: 'admin_setup',
        is_super_admin: true,
        created_via: 'basic_api'
      }
    }).select(`
        *,
        user_roles (
          role_name,
          permissions
        )
      `).single());
    /* istanbul ignore next */
    cov_19r05trsv9().s[52]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[12][0]++;
      cov_19r05trsv9().s[53]++;
      throw new Error(`Error creando perfil: ${profileError.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[12][1]++;
    }
    cov_19r05trsv9().s[54]++;
    return {
      action: 'created',
      authUser,
      profile: newProfile
    };
  }
}
async function createAdminUserEnterprise(params, request) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[8]++;
  const {
    email,
    password,
    firstName,
    lastName,
    permissions
  } =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[55]++, params);
  // AutenticaciÃ³n crÃ­tica enterprise
  const authResult =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[56]++, await (0, _enterpriseauthutils.requireCriticalAuth)(request));
  /* istanbul ignore next */
  cov_19r05trsv9().s[57]++;
  if (!authResult.success) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[13][0]++;
    cov_19r05trsv9().s[58]++;
    throw new Error(`AutenticaciÃ³n enterprise fallida: ${authResult.error}`);
  } else
  /* istanbul ignore next */
  {
    cov_19r05trsv9().b[13][1]++;
  }
  const context =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[59]++, authResult.context);
  // Verificar permisos especÃ­ficos
  /* istanbul ignore next */
  cov_19r05trsv9().s[60]++;
  if (
  /* istanbul ignore next */
  (cov_19r05trsv9().b[15][0]++, !context.permissions.includes('admin_create')) &&
  /* istanbul ignore next */
  (cov_19r05trsv9().b[15][1]++, context.role !== 'admin')) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[14][0]++;
    cov_19r05trsv9().s[61]++;
    throw new Error('Permisos insuficientes para crear usuarios administradores');
  } else
  /* istanbul ignore next */
  {
    cov_19r05trsv9().b[14][1]++;
  }
  // Ejecutar con RLS y auditorÃ­a
  const result =
  /* istanbul ignore next */
  (cov_19r05trsv9().s[62]++, await (0, _enterpriserlsutils.executeWithRLS)(context, async (client, rlsContext) => {
    /* istanbul ignore next */
    cov_19r05trsv9().f[9]++;
    cov_19r05trsv9().s[63]++;
    // Verificar permisos RLS
    if (!(0, _enterpriserlsutils.checkRLSPermission)(rlsContext, 'admin_create')) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[16][0]++;
      cov_19r05trsv9().s[64]++;
      throw new Error('Permisos RLS insuficientes para crear administradores');
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[16][1]++;
    }
    // Verificar si el usuario ya existe
    const {
      data: existingAuthUser
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[65]++, await _supabase.supabaseAdmin.auth.admin.listUsers());
    const userExists =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[66]++, existingAuthUser.users.find(u => {
      /* istanbul ignore next */
      cov_19r05trsv9().f[10]++;
      cov_19r05trsv9().s[67]++;
      return u.email === email;
    }));
    let authUser;
    /* istanbul ignore next */
    cov_19r05trsv9().s[68]++;
    if (userExists) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[17][0]++;
      cov_19r05trsv9().s[69]++;
      authUser = userExists;
    } else {
      /* istanbul ignore next */
      cov_19r05trsv9().b[17][1]++;
      // Crear usuario con metadata enterprise
      const {
        data: newAuthUser,
        error: authError
      } =
      /* istanbul ignore next */
      (cov_19r05trsv9().s[70]++, await _supabase.supabaseAdmin.auth.admin.createUser({
        email,
        password,
        email_confirm: true,
        user_metadata: {
          first_name: firstName,
          last_name: lastName,
          role: 'admin',
          created_by: context.userId,
          enterprise_admin: true,
          security_level: 'critical',
          created_via: 'enterprise_api'
        }
      }));
      /* istanbul ignore next */
      cov_19r05trsv9().s[71]++;
      if (authError) {
        /* istanbul ignore next */
        cov_19r05trsv9().b[18][0]++;
        cov_19r05trsv9().s[72]++;
        throw new Error(`Error creando usuario en Auth: ${authError.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_19r05trsv9().b[18][1]++;
      }
      cov_19r05trsv9().s[73]++;
      authUser = newAuthUser.user;
    }
    // Verificar si el perfil ya existe
    const {
      data: existingProfile
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[74]++, await client.from('user_profiles').select('*').eq('email', email).single());
    /* istanbul ignore next */
    cov_19r05trsv9().s[75]++;
    if (existingProfile) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[19][0]++;
      // Actualizar perfil con datos enterprise
      const {
        data: updatedProfile,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_19r05trsv9().s[76]++, await client.from('user_profiles').update({
        supabase_user_id: authUser.id,
        first_name: firstName,
        last_name: lastName,
        permissions: permissions,
        metadata: {
          ...existingProfile.metadata,
          updated_by: context.userId,
          enterprise_admin: true,
          last_admin_update: new Date().toISOString()
        },
        updated_at: new Date().toISOString()
      }).eq('email', email).select(`
            *,
            user_roles (
              role_name,
              permissions
            )
          `).single());
      /* istanbul ignore next */
      cov_19r05trsv9().s[77]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_19r05trsv9().b[20][0]++;
        cov_19r05trsv9().s[78]++;
        throw new Error(`Error actualizando perfil: ${updateError.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_19r05trsv9().b[20][1]++;
      }
      cov_19r05trsv9().s[79]++;
      return {
        action: 'updated',
        authUser,
        profile: updatedProfile,
        context
      };
    } else {
      /* istanbul ignore next */
      cov_19r05trsv9().b[19][1]++;
      // Obtener rol de admin
      const {
        data: adminRole
      } =
      /* istanbul ignore next */
      (cov_19r05trsv9().s[80]++, await client.from('user_roles').select('id').eq('role_name', 'admin').single());
      /* istanbul ignore next */
      cov_19r05trsv9().s[81]++;
      if (!adminRole) {
        /* istanbul ignore next */
        cov_19r05trsv9().b[21][0]++;
        cov_19r05trsv9().s[82]++;
        throw new Error('Rol de admin no encontrado en la base de datos');
      } else
      /* istanbul ignore next */
      {
        cov_19r05trsv9().b[21][1]++;
      }
      // Crear nuevo perfil enterprise
      const {
        data: newProfile,
        error: profileError
      } =
      /* istanbul ignore next */
      (cov_19r05trsv9().s[83]++, await client.from('user_profiles').insert({
        supabase_user_id: authUser.id,
        email,
        first_name: firstName,
        last_name: lastName,
        role_id: adminRole.id,
        permissions: permissions,
        is_active: true,
        is_verified: true,
        metadata: {
          created_by: context.userId,
          enterprise_admin: true,
          security_level: 'critical',
          created_via: 'enterprise_api'
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }).select(`
            *,
            user_roles (
              role_name,
              permissions
            )
          `).single());
      /* istanbul ignore next */
      cov_19r05trsv9().s[84]++;
      if (profileError) {
        /* istanbul ignore next */
        cov_19r05trsv9().b[22][0]++;
        cov_19r05trsv9().s[85]++;
        throw new Error(`Error creando perfil: ${profileError.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_19r05trsv9().b[22][1]++;
      }
      cov_19r05trsv9().s[86]++;
      return {
        action: 'created',
        authUser,
        profile: newProfile,
        context
      };
    }
  }, {
    enforceRLS: true,
    auditLog: true,
    adminOverride: true
  }));
  /* istanbul ignore next */
  cov_19r05trsv9().s[87]++;
  if (!result.success) {
    /* istanbul ignore next */
    cov_19r05trsv9().b[23][0]++;
    cov_19r05trsv9().s[88]++;
    throw new Error(`Error en operaciÃ³n enterprise: ${result.error}`);
  } else
  /* istanbul ignore next */
  {
    cov_19r05trsv9().b[23][1]++;
  }
  cov_19r05trsv9().s[89]++;
  return result.data;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_19r05trsv9().f[11]++;
  cov_19r05trsv9().s[90]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[91]++, await request.json());
    const params =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[92]++, CreateAdminUserSchema.parse(body));
    const timestamp =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[93]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_19r05trsv9().s[94]++;
    console.log(`ğ Unified Admin User Creation: Mode ${params.mode}`);
    // Validar clave de seguridad
    /* istanbul ignore next */
    cov_19r05trsv9().s[95]++;
    if (!validateSecurityKey(params.securityKey, params.mode)) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[24][0]++;
      cov_19r05trsv9().s[96]++;
      return _server.NextResponse.json({
        error: `Clave de seguridad ${params.mode} incorrecta`,
        code: 'INVALID_SECURITY_KEY',
        mode: params.mode
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[24][1]++;
    }
    // Validar contraseÃ±a
    const passwordValidation =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[97]++, validatePassword(params.password, params.mode, params.enforceComplexPassword));
    /* istanbul ignore next */
    cov_19r05trsv9().s[98]++;
    if (!passwordValidation.valid) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[25][0]++;
      cov_19r05trsv9().s[99]++;
      return _server.NextResponse.json({
        error: passwordValidation.error,
        code: params.mode === 'enterprise' ?
        /* istanbul ignore next */
        (cov_19r05trsv9().b[26][0]++, 'PASSWORD_COMPLEXITY_FAILED') :
        /* istanbul ignore next */
        (cov_19r05trsv9().b[26][1]++, 'WEAK_PASSWORD'),
        mode: params.mode
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[25][1]++;
    }
    let result;
    // Ejecutar segÃºn el modo
    /* istanbul ignore next */
    cov_19r05trsv9().s[100]++;
    if (params.mode === 'enterprise') {
      /* istanbul ignore next */
      cov_19r05trsv9().b[27][0]++;
      cov_19r05trsv9().s[101]++;
      result = await createAdminUserEnterprise(params, request);
      // Invalidar cache en modo enterprise
      /* istanbul ignore next */
      cov_19r05trsv9().s[102]++;
      if (result.authUser) {
        /* istanbul ignore next */
        cov_19r05trsv9().b[28][0]++;
        cov_19r05trsv9().s[103]++;
        (0, _enterprisecache.invalidateUserCache)(result.authUser.id);
      } else
      /* istanbul ignore next */
      {
        cov_19r05trsv9().b[28][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_19r05trsv9().b[27][1]++;
      cov_19r05trsv9().s[104]++;
      result = await createAdminUserBasic(params);
    }
    const {
      action,
      authUser,
      profile,
      context
    } =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[105]++, result);
    // Respuesta unificada
    const response =
    /* istanbul ignore next */
    (cov_19r05trsv9().s[106]++, {
      success: true,
      message: `Usuario administrador ${action === 'created' ?
      /* istanbul ignore next */
      (cov_19r05trsv9().b[29][0]++, 'creado') :
      /* istanbul ignore next */
      (cov_19r05trsv9().b[29][1]++, 'actualizado')} correctamente`,
      data: {
        action,
        user: {
          auth_id: authUser.id,
          email: authUser.email,
          profile: {
            id: profile.id,
            name: `${profile.first_name} ${profile.last_name}`,
            role: profile.user_roles?.role_name,
            permissions:
            /* istanbul ignore next */
            (cov_19r05trsv9().b[30][0]++, profile.permissions) ||
            /* istanbul ignore next */
            (cov_19r05trsv9().b[30][1]++, profile.user_roles?.permissions),
            is_active: profile.is_active,
            created_at: profile.created_at
          }
        }
      },
      meta: {
        mode: params.mode,
        api_version: '1.0.0',
        unified: true,
        timestamp
      }
    });
    // Agregar informaciÃ³n enterprise si aplica
    /* istanbul ignore next */
    cov_19r05trsv9().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_19r05trsv9().b[32][0]++, params.mode === 'enterprise') &&
    /* istanbul ignore next */
    (cov_19r05trsv9().b[32][1]++, context)) {
      /* istanbul ignore next */
      cov_19r05trsv9().b[31][0]++;
      cov_19r05trsv9().s[108]++;
      response['enterprise'] = {
        security_level: 'critical',
        rls_enabled: true,
        created_by: context.userId,
        permissions_granted: params.permissions
      };
    } else
    /* istanbul ignore next */
    {
      cov_19r05trsv9().b[31][1]++;
    }
    cov_19r05trsv9().s[109]++;
    return _server.NextResponse.json(response, {
      status: action === 'created' ?
      /* istanbul ignore next */
      (cov_19r05trsv9().b[33][0]++, 201) :
      /* istanbul ignore next */
      (cov_19r05trsv9().b[33][1]++, 200)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_19r05trsv9().s[110]++;
    console.error('â Error en Unified Admin User Creation:', error);
    /* istanbul ignore next */
    cov_19r05trsv9().s[111]++;
    return _server.NextResponse.json({
      error:
      /* istanbul ignore next */
      (cov_19r05trsv9().b[34][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_19r05trsv9().b[34][1]++, 'Error interno del servidor'),
      code: 'INTERNAL_SERVER_ERROR',
      mode: 'unknown',
      unified: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_19r05trsv9().f[12]++;
  cov_19r05trsv9().s[112]++;
  return _server.NextResponse.json({
    message: 'API Unificada para crear usuario administrador',
    unified: true,
    modes: {
      basic: {
        description: 'CreaciÃ³n bÃ¡sica de admin sin autenticaciÃ³n previa',
        security_key: 'CREATE_ADMIN_PINTEYA_2025',
        password_requirements: {
          min_length: 8,
          complexity: 'optional'
        },
        features: ['Basic user creation', 'Simple validation', 'Standard profiles']
      },
      enterprise: {
        description: 'CreaciÃ³n enterprise con autenticaciÃ³n crÃ­tica y RLS',
        security_key: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',
        password_requirements: {
          min_length: 12,
          complexity: 'required',
          must_contain: ['uppercase', 'lowercase', 'numbers', 'special_chars']
        },
        features: ['Enterprise authentication with critical security level', 'Row Level Security (RLS) enforcement', 'Robust password validation', 'Audit logging', 'Cache invalidation', 'Comprehensive error handling']
      }
    },
    usage: {
      method: 'POST',
      required_fields: ['securityKey', 'email', 'password'],
      optional_fields: ['firstName', 'lastName', 'permissions', 'mode', 'enforceComplexPassword'],
      examples: {
        basic: {
          securityKey: 'CREATE_ADMIN_PINTEYA_2025',
          email: 'admin@example.com',
          password: 'password123',
          mode: 'basic'
        },
        enterprise: {
          securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',
          email: 'admin@example.com',
          password: 'ComplexPass123!',
          mode: 'enterprise',
          firstName: 'Admin',
          lastName: 'User',
          permissions: ['admin_access', 'user_management']
        }
      }
    },
    migration: {
      from: ['/api/admin/create-admin-user', '/api/admin/create-admin-user-enterprise'],
      to: '/api/admin/create-admin-user/unified',
      backward_compatible: true
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,