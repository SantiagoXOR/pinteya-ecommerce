{"version":3,"names":["cov_19r05trsv9","actualCoverage","s","GET","f","POST","runtime","CreateAdminUserSchema","_zod","z","object","securityKey","string","min","email","password","firstName","default","lastName","permissions","array","mode","enum","enforceComplexPassword","boolean","SECURITY_KEYS","basic","enterprise","PASSWORD_REQUIREMENTS","minLength","requireComplexity","validatePassword","enforceComplexity","b","requirements","shouldCheckComplexity","length","valid","error","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChar","validateSecurityKey","key","createAdminUserBasic","params","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","data","existingAuthUser","admin","listUsers","userExists","users","find","u","authUser","newAuthUser","authError","createUser","email_confirm","user_metadata","first_name","last_name","role","created_via","Error","message","user","existingProfile","from","select","eq","single","updatedProfile","updateError","update","supabase_user_id","id","updated_at","Date","toISOString","action","profile","adminRole","newProfile","profileError","insert","role_id","is_active","metadata","created_by","is_super_admin","createAdminUserEnterprise","request","authResult","_enterpriseauthutils","requireCriticalAuth","success","context","includes","result","_enterpriserlsutils","executeWithRLS","client","rlsContext","checkRLSPermission","_supabase","supabaseAdmin","userId","enterprise_admin","security_level","updated_by","last_admin_update","is_verified","created_at","enforceRLS","auditLog","adminOverride","body","json","parse","timestamp","console","log","_server","NextResponse","code","status","passwordValidation","_enterprisecache","invalidateUserCache","response","auth_id","name","user_roles","role_name","meta","api_version","unified","rls_enabled","permissions_granted","modes","description","security_key","password_requirements","min_length","complexity","features","must_contain","usage","method","required_fields","optional_fields","examples","migration","to","backward_compatible"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\create-admin-user\\unified\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API Unificada para Creación de Usuario Administrador\r\n// Combina funcionalidad básica y enterprise en un solo endpoint\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { \r\n  requireCriticalAuth \r\n} from '@/lib/auth/enterprise-auth-utils';\r\nimport {\r\n  executeWithRLS,\r\n  checkRLSPermission\r\n} from '@/lib/auth/enterprise-rls-utils';\r\nimport {\r\n  invalidateUserCache\r\n} from '@/lib/auth/enterprise-cache';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst CreateAdminUserSchema = z.object({\r\n  securityKey: z.string().min(1, 'Clave de seguridad requerida'),\r\n  email: z.string().email('Formato de email inválido'),\r\n  password: z.string().min(8, 'Contraseña debe tener al menos 8 caracteres'),\r\n  firstName: z.string().default('Admin'),\r\n  lastName: z.string().default('User'),\r\n  permissions: z.array(z.string()).default([\r\n    'admin_access', \r\n    'user_management', \r\n    'products_create', \r\n    'products_update', \r\n    'products_delete'\r\n  ]),\r\n  mode: z.enum(['basic', 'enterprise']).default('basic'),\r\n  enforceComplexPassword: z.boolean().default(false)\r\n});\r\n\r\ntype CreateAdminUserRequest = z.infer<typeof CreateAdminUserSchema>;\r\n\r\n// ===================================\r\n// CONFIGURACIÓN DE SEGURIDAD\r\n// ===================================\r\n\r\nconst SECURITY_KEYS = {\r\n  basic: 'CREATE_ADMIN_PINTEYA_2025',\r\n  enterprise: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025'\r\n};\r\n\r\nconst PASSWORD_REQUIREMENTS = {\r\n  basic: {\r\n    minLength: 8,\r\n    requireComplexity: false\r\n  },\r\n  enterprise: {\r\n    minLength: 12,\r\n    requireComplexity: true\r\n  }\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES DE VALIDACIÓN\r\n// ===================================\r\n\r\nfunction validatePassword(password: string, mode: 'basic' | 'enterprise', enforceComplexity: boolean = false) {\r\n  const requirements = PASSWORD_REQUIREMENTS[mode];\r\n  const shouldCheckComplexity = mode === 'enterprise' || enforceComplexity;\r\n\r\n  // Validar longitud mínima\r\n  if (password.length < requirements.minLength) {\r\n    return {\r\n      valid: false,\r\n      error: `La contraseña debe tener al menos ${requirements.minLength} caracteres${mode === 'enterprise' ? ' para admin enterprise' : ''}`\r\n    };\r\n  }\r\n\r\n  // Validar complejidad si es requerida\r\n  if (shouldCheckComplexity) {\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n    if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\r\n      return {\r\n        valid: false,\r\n        error: 'La contraseña debe contener mayúsculas, minúsculas, números y caracteres especiales'\r\n      };\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n}\r\n\r\nfunction validateSecurityKey(key: string, mode: 'basic' | 'enterprise') {\r\n  return key === SECURITY_KEYS[mode];\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES DE CREACIÓN\r\n// ===================================\r\n\r\nasync function createAdminUserBasic(params: CreateAdminUserRequest) {\r\n  const { email, password, firstName, lastName } = params;\r\n\r\n  // Usar cliente básico de Supabase\r\n  const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Verificar si el usuario ya existe en auth.users\r\n  const { data: existingAuthUser } = await supabase.auth.admin.listUsers();\r\n  const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n  let authUser;\r\n\r\n  if (userExists) {\r\n    authUser = userExists;\r\n  } else {\r\n    // Crear usuario en Supabase Auth\r\n    const { data: newAuthUser, error: authError } = await supabase.auth.admin.createUser({\r\n      email,\r\n      password,\r\n      email_confirm: true,\r\n      user_metadata: {\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        role: 'admin',\r\n        created_via: 'basic_api'\r\n      }\r\n    });\r\n\r\n    if (authError) {\r\n      throw new Error(`Error creando usuario en Auth: ${authError.message}`);\r\n    }\r\n\r\n    authUser = newAuthUser.user;\r\n  }\r\n\r\n  // Verificar si el perfil ya existe\r\n  const { data: existingProfile } = await supabase\r\n    .from('user_profiles')\r\n    .select('*')\r\n    .eq('email', email)\r\n    .single();\r\n\r\n  if (existingProfile) {\r\n    // Actualizar el perfil existente\r\n    const { data: updatedProfile, error: updateError } = await supabase\r\n      .from('user_profiles')\r\n      .update({\r\n        supabase_user_id: authUser.id,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('email', email)\r\n      .select(`\r\n        *,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .single();\r\n\r\n    if (updateError) {\r\n      throw new Error(`Error actualizando perfil: ${updateError.message}`);\r\n    }\r\n\r\n    return {\r\n      action: 'updated',\r\n      authUser,\r\n      profile: updatedProfile\r\n    };\r\n  } else {\r\n    // Obtener rol de admin\r\n    const { data: adminRole } = await supabase\r\n      .from('user_roles')\r\n      .select('id')\r\n      .eq('role_name', 'admin')\r\n      .single();\r\n\r\n    if (!adminRole) {\r\n      throw new Error('Rol de admin no encontrado en la base de datos');\r\n    }\r\n\r\n    // Crear nuevo perfil\r\n    const { data: newProfile, error: profileError } = await supabase\r\n      .from('user_profiles')\r\n      .insert({\r\n        supabase_user_id: authUser.id,\r\n        email,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        role_id: adminRole.id,\r\n        is_active: true,\r\n        metadata: { \r\n          created_by: 'admin_setup', \r\n          is_super_admin: true,\r\n          created_via: 'basic_api'\r\n        }\r\n      })\r\n      .select(`\r\n        *,\r\n        user_roles (\r\n          role_name,\r\n          permissions\r\n        )\r\n      `)\r\n      .single();\r\n\r\n    if (profileError) {\r\n      throw new Error(`Error creando perfil: ${profileError.message}`);\r\n    }\r\n\r\n    return {\r\n      action: 'created',\r\n      authUser,\r\n      profile: newProfile\r\n    };\r\n  }\r\n}\r\n\r\nasync function createAdminUserEnterprise(params: CreateAdminUserRequest, request: NextRequest) {\r\n  const { email, password, firstName, lastName, permissions } = params;\r\n\r\n  // Autenticación crítica enterprise\r\n  const authResult = await requireCriticalAuth(request);\r\n\r\n  if (!authResult.success) {\r\n    throw new Error(`Autenticación enterprise fallida: ${authResult.error}`);\r\n  }\r\n\r\n  const context = authResult.context!;\r\n\r\n  // Verificar permisos específicos\r\n  if (!context.permissions.includes('admin_create') && context.role !== 'admin') {\r\n    throw new Error('Permisos insuficientes para crear usuarios administradores');\r\n  }\r\n\r\n  // Ejecutar con RLS y auditoría\r\n  const result = await executeWithRLS(\r\n    context,\r\n    async (client, rlsContext) => {\r\n      // Verificar permisos RLS\r\n      if (!checkRLSPermission(rlsContext, 'admin_create')) {\r\n        throw new Error('Permisos RLS insuficientes para crear administradores');\r\n      }\r\n\r\n      // Verificar si el usuario ya existe\r\n      const { data: existingAuthUser } = await supabaseAdmin.auth.admin.listUsers();\r\n      const userExists = existingAuthUser.users.find(u => u.email === email);\r\n\r\n      let authUser;\r\n\r\n      if (userExists) {\r\n        authUser = userExists;\r\n      } else {\r\n        // Crear usuario con metadata enterprise\r\n        const { data: newAuthUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n          email,\r\n          password,\r\n          email_confirm: true,\r\n          user_metadata: {\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            role: 'admin',\r\n            created_by: context.userId,\r\n            enterprise_admin: true,\r\n            security_level: 'critical',\r\n            created_via: 'enterprise_api'\r\n          }\r\n        });\r\n\r\n        if (authError) {\r\n          throw new Error(`Error creando usuario en Auth: ${authError.message}`);\r\n        }\r\n\r\n        authUser = newAuthUser.user;\r\n      }\r\n\r\n      // Verificar si el perfil ya existe\r\n      const { data: existingProfile } = await client\r\n        .from('user_profiles')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single();\r\n\r\n      if (existingProfile) {\r\n        // Actualizar perfil con datos enterprise\r\n        const { data: updatedProfile, error: updateError } = await client\r\n          .from('user_profiles')\r\n          .update({\r\n            supabase_user_id: authUser.id,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            permissions: permissions,\r\n            metadata: {\r\n              ...existingProfile.metadata,\r\n              updated_by: context.userId,\r\n              enterprise_admin: true,\r\n              last_admin_update: new Date().toISOString()\r\n            },\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('email', email)\r\n          .select(`\r\n            *,\r\n            user_roles (\r\n              role_name,\r\n              permissions\r\n            )\r\n          `)\r\n          .single();\r\n\r\n        if (updateError) {\r\n          throw new Error(`Error actualizando perfil: ${updateError.message}`);\r\n        }\r\n\r\n        return {\r\n          action: 'updated',\r\n          authUser,\r\n          profile: updatedProfile,\r\n          context\r\n        };\r\n      } else {\r\n        // Obtener rol de admin\r\n        const { data: adminRole } = await client\r\n          .from('user_roles')\r\n          .select('id')\r\n          .eq('role_name', 'admin')\r\n          .single();\r\n\r\n        if (!adminRole) {\r\n          throw new Error('Rol de admin no encontrado en la base de datos');\r\n        }\r\n\r\n        // Crear nuevo perfil enterprise\r\n        const { data: newProfile, error: profileError } = await client\r\n          .from('user_profiles')\r\n          .insert({\r\n            supabase_user_id: authUser.id,\r\n            email,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            role_id: adminRole.id,\r\n            permissions: permissions,\r\n            is_active: true,\r\n            is_verified: true,\r\n            metadata: {\r\n              created_by: context.userId,\r\n              enterprise_admin: true,\r\n              security_level: 'critical',\r\n              created_via: 'enterprise_api'\r\n            },\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select(`\r\n            *,\r\n            user_roles (\r\n              role_name,\r\n              permissions\r\n            )\r\n          `)\r\n          .single();\r\n\r\n        if (profileError) {\r\n          throw new Error(`Error creando perfil: ${profileError.message}`);\r\n        }\r\n\r\n        return {\r\n          action: 'created',\r\n          authUser,\r\n          profile: newProfile,\r\n          context\r\n        };\r\n      }\r\n    },\r\n    {\r\n      enforceRLS: true,\r\n      auditLog: true,\r\n      adminOverride: true\r\n    }\r\n  );\r\n\r\n  if (!result.success) {\r\n    throw new Error(`Error en operación enterprise: ${result.error}`);\r\n  }\r\n\r\n  return result.data!;\r\n}\r\n\r\n// ===================================\r\n// ENDPOINTS\r\n// ===================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const params = CreateAdminUserSchema.parse(body);\r\n    const timestamp = new Date().toISOString();\r\n\r\n    console.log(`🔐 Unified Admin User Creation: Mode ${params.mode}`);\r\n\r\n    // Validar clave de seguridad\r\n    if (!validateSecurityKey(params.securityKey, params.mode)) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Clave de seguridad ${params.mode} incorrecta`,\r\n          code: 'INVALID_SECURITY_KEY',\r\n          mode: params.mode\r\n        },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Validar contraseña\r\n    const passwordValidation = validatePassword(\r\n      params.password, \r\n      params.mode, \r\n      params.enforceComplexPassword\r\n    );\r\n\r\n    if (!passwordValidation.valid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: passwordValidation.error,\r\n          code: params.mode === 'enterprise' ? 'PASSWORD_COMPLEXITY_FAILED' : 'WEAK_PASSWORD',\r\n          mode: params.mode\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let result;\r\n\r\n    // Ejecutar según el modo\r\n    if (params.mode === 'enterprise') {\r\n      result = await createAdminUserEnterprise(params, request);\r\n      \r\n      // Invalidar cache en modo enterprise\r\n      if (result.authUser) {\r\n        invalidateUserCache(result.authUser.id);\r\n      }\r\n    } else {\r\n      result = await createAdminUserBasic(params);\r\n    }\r\n\r\n    const { action, authUser, profile, context } = result;\r\n\r\n    // Respuesta unificada\r\n    const response = {\r\n      success: true,\r\n      message: `Usuario administrador ${action === 'created' ? 'creado' : 'actualizado'} correctamente`,\r\n      data: {\r\n        action,\r\n        user: {\r\n          auth_id: authUser.id,\r\n          email: authUser.email,\r\n          profile: {\r\n            id: profile.id,\r\n            name: `${profile.first_name} ${profile.last_name}`,\r\n            role: profile.user_roles?.role_name,\r\n            permissions: profile.permissions || profile.user_roles?.permissions,\r\n            is_active: profile.is_active,\r\n            created_at: profile.created_at\r\n          }\r\n        }\r\n      },\r\n      meta: {\r\n        mode: params.mode,\r\n        api_version: '1.0.0',\r\n        unified: true,\r\n        timestamp\r\n      }\r\n    };\r\n\r\n    // Agregar información enterprise si aplica\r\n    if (params.mode === 'enterprise' && context) {\r\n      response['enterprise'] = {\r\n        security_level: 'critical',\r\n        rls_enabled: true,\r\n        created_by: context.userId,\r\n        permissions_granted: params.permissions\r\n      };\r\n    }\r\n\r\n    return NextResponse.json(response, { \r\n      status: action === 'created' ? 201 : 200 \r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('❌ Error en Unified Admin User Creation:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: error.message || 'Error interno del servidor',\r\n        code: 'INTERNAL_SERVER_ERROR',\r\n        mode: 'unknown',\r\n        unified: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    message: 'API Unificada para crear usuario administrador',\r\n    unified: true,\r\n    modes: {\r\n      basic: {\r\n        description: 'Creación básica de admin sin autenticación previa',\r\n        security_key: 'CREATE_ADMIN_PINTEYA_2025',\r\n        password_requirements: {\r\n          min_length: 8,\r\n          complexity: 'optional'\r\n        },\r\n        features: ['Basic user creation', 'Simple validation', 'Standard profiles']\r\n      },\r\n      enterprise: {\r\n        description: 'Creación enterprise con autenticación crítica y RLS',\r\n        security_key: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\r\n        password_requirements: {\r\n          min_length: 12,\r\n          complexity: 'required',\r\n          must_contain: ['uppercase', 'lowercase', 'numbers', 'special_chars']\r\n        },\r\n        features: [\r\n          'Enterprise authentication with critical security level',\r\n          'Row Level Security (RLS) enforcement',\r\n          'Robust password validation',\r\n          'Audit logging',\r\n          'Cache invalidation',\r\n          'Comprehensive error handling'\r\n        ]\r\n      }\r\n    },\r\n    usage: {\r\n      method: 'POST',\r\n      required_fields: ['securityKey', 'email', 'password'],\r\n      optional_fields: ['firstName', 'lastName', 'permissions', 'mode', 'enforceComplexPassword'],\r\n      examples: {\r\n        basic: {\r\n          securityKey: 'CREATE_ADMIN_PINTEYA_2025',\r\n          email: 'admin@example.com',\r\n          password: 'password123',\r\n          mode: 'basic'\r\n        },\r\n        enterprise: {\r\n          securityKey: 'CREATE_ADMIN_PINTEYA_ENTERPRISE_2025',\r\n          email: 'admin@example.com',\r\n          password: 'ComplexPass123!',\r\n          mode: 'enterprise',\r\n          firstName: 'Admin',\r\n          lastName: 'User',\r\n          permissions: ['admin_access', 'user_management']\r\n        }\r\n      }\r\n    },\r\n    migration: {\r\n      from: [\r\n        '/api/admin/create-admin-user',\r\n        '/api/admin/create-admin-user-enterprise'\r\n      ],\r\n      to: '/api/admin/create-admin-user/unified',\r\n      backward_compatible: true\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2ZsB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MA+GAC,IAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,GAAA;;MA/GAE,KAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,IAAA;;MA1ZTC,QAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,OAAA;;;;;kCAO6B;;;kCACxB;;;kCACW;;;mCACC;;;mCAGvB;;;mCAIA;;;mCAGA;AApBA,MAAMA,OAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,QAAU;AAsBvB;AACA;AACA;AAEA,MAAMK,qBAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,QAAwBM,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EACrCC,WAAA,EAAaH,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;EAC/BC,KAAA,EAAON,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,KAAK,CAAC;EACxBC,QAAA,EAAUP,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;EAC5BG,SAAA,EAAWR,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGK,OAAO,CAAC;EAC9BC,QAAA,EAAUV,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGK,OAAO,CAAC;EAC7BE,WAAA,EAAaX,IAAA,CAAAC,CAAC,CAACW,KAAK,CAACZ,IAAA,CAAAC,CAAC,CAACG,MAAM,IAAIK,OAAO,CAAC,CACvC,gBACA,mBACA,mBACA,mBACA,kBACD;EACDI,IAAA,EAAMb,IAAA,CAAAC,CAAC,CAACa,IAAI,CAAC,CAAC,SAAS,aAAa,EAAEL,OAAO,CAAC;EAC9CM,sBAAA,EAAwBf,IAAA,CAAAC,CAAC,CAACe,OAAO,GAAGP,OAAO,CAAC;AAC9C;AAIA;AACA;AACA;AAEA,MAAMQ,aAAA;AAAA;AAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAgB;EACpBwB,KAAA,EAAO;EACPC,UAAA,EAAY;AACd;AAEA,MAAMC,qBAAA;AAAA;AAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAwB;EAC5BwB,KAAA,EAAO;IACLG,SAAA,EAAW;IACXC,iBAAA,EAAmB;EACrB;EACAH,UAAA,EAAY;IACVE,SAAA,EAAW;IACXC,iBAAA,EAAmB;EACrB;AACF;AAEA;AACA;AACA;AAEA,SAASC,iBAAiBhB,QAAgB,EAAEM,IAA4B,EAAEW,iBAAA;AAAA;AAAA,CAAAhC,cAAA,GAAAiC,CAAA,UAA6B,KAAK;EAAA;EAAAjC,cAAA,GAAAI,CAAA;EAC1G,MAAM8B,YAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAe0B,qBAAqB,CAACP,IAAA,CAAK;EAChD,MAAMc,qBAAA;EAAA;EAAA,CAAAnC,cAAA,GAAAE,CAAA;EAAwB;EAAA,CAAAF,cAAA,GAAAiC,CAAA,UAAAZ,IAAA,KAAS;EAAA;EAAA,CAAArB,cAAA,GAAAiC,CAAA,UAAgBD,iBAAA;EAEvD;EAAA;EAAAhC,cAAA,GAAAE,CAAA;EACA,IAAIa,QAAA,CAASqB,MAAM,GAAGF,YAAA,CAAaL,SAAS,EAAE;IAAA;IAAA7B,cAAA,GAAAiC,CAAA;IAAAjC,cAAA,GAAAE,CAAA;IAC5C,OAAO;MACLmC,KAAA,EAAO;MACPC,KAAA,EAAO,qCAAqCJ,YAAA,CAAaL,SAAS,cAAcR,IAAA,KAAS;MAAA;MAAA,CAAArB,cAAA,GAAAiC,CAAA,UAAe;MAAA;MAAA,CAAAjC,cAAA,GAAAiC,CAAA,UAA2B;IACrI;EACF;EAAA;EAAA;IAAAjC,cAAA,GAAAiC,CAAA;EAAA;EAEA;EAAAjC,cAAA,GAAAE,CAAA;EACA,IAAIiC,qBAAA,EAAuB;IAAA;IAAAnC,cAAA,GAAAiC,CAAA;IACzB,MAAMM,YAAA;IAAA;IAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAe,QAAQsC,IAAI,CAACzB,QAAA;IAClC,MAAM0B,YAAA;IAAA;IAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAe,QAAQsC,IAAI,CAACzB,QAAA;IAClC,MAAM2B,UAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAa,KAAKsC,IAAI,CAACzB,QAAA;IAC7B,MAAM4B,cAAA;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAiB,yBAAyBsC,IAAI,CAACzB,QAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAErD;IAAI;IAAA,CAAAF,cAAA,GAAAiC,CAAA,WAACM,YAAA;IAAA;IAAA,CAAAvC,cAAA,GAAAiC,CAAA,UAAgB,CAACQ,YAAA;IAAA;IAAA,CAAAzC,cAAA,GAAAiC,CAAA,UAAgB,CAACS,UAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAiC,CAAA,UAAc,CAACU,cAAA,GAAgB;MAAA;MAAA3C,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACpE,OAAO;QACLmC,KAAA,EAAO;QACPC,KAAA,EAAO;MACT;IACF;IAAA;IAAA;MAAAtC,cAAA,GAAAiC,CAAA;IAAA;EACF;EAAA;EAAA;IAAAjC,cAAA,GAAAiC,CAAA;EAAA;EAAAjC,cAAA,GAAAE,CAAA;EAEA,OAAO;IAAEmC,KAAA,EAAO;EAAK;AACvB;AAEA,SAASO,oBAAoBC,GAAW,EAAExB,IAA4B;EAAA;EAAArB,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACpE,OAAO2C,GAAA,KAAQpB,aAAa,CAACJ,IAAA,CAAK;AACpC;AAEA;AACA;AACA;AAEA,eAAeyB,qBAAqBC,MAA8B;EAAA;EAAA/C,cAAA,GAAAI,CAAA;EAChE,MAAM;IAAEU,KAAK;IAAEC,QAAQ;IAAEC,SAAS;IAAEE;EAAQ,CAAE;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAG6C,MAAA;EAEjD;EACA,MAAMC,QAAA;EAAA;EAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAW,IAAA+C,WAAA,CAAAC,YAAY,EAC3BC,OAAA,CAAQC,GAAG,CAACC,wBAAwB,EACpCF,OAAA,CAAQC,GAAG,CAACE,yBAAyB,EACrC;IACEC,IAAA,EAAM;MACJC,gBAAA,EAAkB;MAClBC,cAAA,EAAgB;IAClB;EACF;EAGF;EACA,MAAM;IAAEC,IAAA,EAAMC;EAAgB,CAAE;EAAA;EAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CAASO,IAAI,CAACK,KAAK,CAACC,SAAS;EACtE,MAAMC,UAAA;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAayD,gBAAA,CAAiBI,KAAK,CAACC,IAAI,CAACC,CAAA,IAAK;IAAA;IAAAjE,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAAA,OAAA+D,CAAA,CAAEnD,KAAK,KAAKA,KAAA;EAAA;EAEhE,IAAIoD,QAAA;EAAA;EAAAlE,cAAA,GAAAE,CAAA;EAEJ,IAAI4D,UAAA,EAAY;IAAA;IAAA9D,cAAA,GAAAiC,CAAA;IAAAjC,cAAA,GAAAE,CAAA;IACdgE,QAAA,GAAWJ,UAAA;EACb,OAAO;IAAA;IAAA9D,cAAA,GAAAiC,CAAA;IACL;IACA,MAAM;MAAEyB,IAAA,EAAMS,WAAW;MAAE7B,KAAA,EAAO8B;IAAS,CAAE;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CAASO,IAAI,CAACK,KAAK,CAACS,UAAU,CAAC;MACnFvD,KAAA;MACAC,QAAA;MACAuD,aAAA,EAAe;MACfC,aAAA,EAAe;QACbC,UAAA,EAAYxD,SAAA;QACZyD,SAAA,EAAWvD,QAAA;QACXwD,IAAA,EAAM;QACNC,WAAA,EAAa;MACf;IACF;IAAA;IAAA3E,cAAA,GAAAE,CAAA;IAEA,IAAIkE,SAAA,EAAW;MAAA;MAAApE,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACb,MAAM,IAAI0E,KAAA,CAAM,kCAAkCR,SAAA,CAAUS,OAAO,EAAE;IACvE;IAAA;IAAA;MAAA7E,cAAA,GAAAiC,CAAA;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IAEAgE,QAAA,GAAWC,WAAA,CAAYW,IAAI;EAC7B;EAEA;EACA,MAAM;IAAEpB,IAAA,EAAMqB;EAAe,CAAE;EAAA;EAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CACrCgC,IAAI,CAAC,iBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,SAASpE,KAAA,EACZqE,MAAM;EAAA;EAAAnF,cAAA,GAAAE,CAAA;EAET,IAAI6E,eAAA,EAAiB;IAAA;IAAA/E,cAAA,GAAAiC,CAAA;IACnB;IACA,MAAM;MAAEyB,IAAA,EAAM0B,cAAc;MAAE9C,KAAA,EAAO+C;IAAW,CAAE;IAAA;IAAA,CAAArF,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CACxDgC,IAAI,CAAC,iBACLM,MAAM,CAAC;MACNC,gBAAA,EAAkBrB,QAAA,CAASsB,EAAE;MAC7BhB,UAAA,EAAYxD,SAAA;MACZyD,SAAA,EAAWvD,QAAA;MACXuE,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;IACpC,GACCT,EAAE,CAAC,SAASpE,KAAA,EACZmE,MAAM,CAAC;;;;;;OAMP,EACAE,MAAM;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IAET,IAAImF,WAAA,EAAa;MAAA;MAAArF,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACf,MAAM,IAAI0E,KAAA,CAAM,8BAA8BS,WAAA,CAAYR,OAAO,EAAE;IACrE;IAAA;IAAA;MAAA7E,cAAA,GAAAiC,CAAA;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IAEA,OAAO;MACL0F,MAAA,EAAQ;MACR1B,QAAA;MACA2B,OAAA,EAAST;IACX;EACF,OAAO;IAAA;IAAApF,cAAA,GAAAiC,CAAA;IACL;IACA,MAAM;MAAEyB,IAAA,EAAMoC;IAAS,CAAE;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CAC/BgC,IAAI,CAAC,cACLC,MAAM,CAAC,MACPC,EAAE,CAAC,aAAa,SAChBC,MAAM;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IAET,IAAI,CAAC4F,SAAA,EAAW;MAAA;MAAA9F,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACd,MAAM,IAAI0E,KAAA,CAAM;IAClB;IAAA;IAAA;MAAA5E,cAAA,GAAAiC,CAAA;IAAA;IAEA;IACA,MAAM;MAAEyB,IAAA,EAAMqC,UAAU;MAAEzD,KAAA,EAAO0D;IAAY,CAAE;IAAA;IAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAG,MAAM8C,QAAA,CACrDgC,IAAI,CAAC,iBACLiB,MAAM,CAAC;MACNV,gBAAA,EAAkBrB,QAAA,CAASsB,EAAE;MAC7B1E,KAAA;MACA0D,UAAA,EAAYxD,SAAA;MACZyD,SAAA,EAAWvD,QAAA;MACXgF,OAAA,EAASJ,SAAA,CAAUN,EAAE;MACrBW,SAAA,EAAW;MACXC,QAAA,EAAU;QACRC,UAAA,EAAY;QACZC,cAAA,EAAgB;QAChB3B,WAAA,EAAa;MACf;IACF,GACCM,MAAM,CAAC;;;;;;OAMP,EACAE,MAAM;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IAET,IAAI8F,YAAA,EAAc;MAAA;MAAAhG,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MAChB,MAAM,IAAI0E,KAAA,CAAM,yBAAyBoB,YAAA,CAAanB,OAAO,EAAE;IACjE;IAAA;IAAA;MAAA7E,cAAA,GAAAiC,CAAA;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IAEA,OAAO;MACL0F,MAAA,EAAQ;MACR1B,QAAA;MACA2B,OAAA,EAASE;IACX;EACF;AACF;AAEA,eAAeQ,0BAA0BxD,MAA8B,EAAEyD,OAAoB;EAAA;EAAAxG,cAAA,GAAAI,CAAA;EAC3F,MAAM;IAAEU,KAAK;IAAEC,QAAQ;IAAEC,SAAS;IAAEE,QAAQ;IAAEC;EAAW,CAAE;EAAA;EAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAG6C,MAAA;EAE9D;EACA,MAAM0D,UAAA;EAAA;EAAA,CAAAzG,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAwG,oBAAA,CAAAC,mBAAmB,EAACH,OAAA;EAAA;EAAAxG,cAAA,GAAAE,CAAA;EAE7C,IAAI,CAACuG,UAAA,CAAWG,OAAO,EAAE;IAAA;IAAA5G,cAAA,GAAAiC,CAAA;IAAAjC,cAAA,GAAAE,CAAA;IACvB,MAAM,IAAI0E,KAAA,CAAM,qCAAqC6B,UAAA,CAAWnE,KAAK,EAAE;EACzE;EAAA;EAAA;IAAAtC,cAAA,GAAAiC,CAAA;EAAA;EAEA,MAAM4E,OAAA;EAAA;EAAA,CAAA7G,cAAA,GAAAE,CAAA,QAAUuG,UAAA,CAAWI,OAAO;EAElC;EAAA;EAAA7G,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAAiC,CAAA,YAAC4E,OAAA,CAAQ1F,WAAW,CAAC2F,QAAQ,CAAC;EAAA;EAAA,CAAA9G,cAAA,GAAAiC,CAAA,WAAmB4E,OAAA,CAAQnC,IAAI,KAAK,UAAS;IAAA;IAAA1E,cAAA,GAAAiC,CAAA;IAAAjC,cAAA,GAAAE,CAAA;IAC7E,MAAM,IAAI0E,KAAA,CAAM;EAClB;EAAA;EAAA;IAAA5E,cAAA,GAAAiC,CAAA;EAAA;EAEA;EACA,MAAM8E,MAAA;EAAA;EAAA,CAAA/G,cAAA,GAAAE,CAAA,QAAS,MAAM,IAAA8G,mBAAA,CAAAC,cAAc,EACjCJ,OAAA,EACA,OAAOK,MAAA,EAAQC,UAAA;IAAA;IAAAnH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACb;IACA,IAAI,CAAC,IAAA8G,mBAAA,CAAAI,kBAAkB,EAACD,UAAA,EAAY,iBAAiB;MAAA;MAAAnH,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACnD,MAAM,IAAI0E,KAAA,CAAM;IAClB;IAAA;IAAA;MAAA5E,cAAA,GAAAiC,CAAA;IAAA;IAEA;IACA,MAAM;MAAEyB,IAAA,EAAMC;IAAgB,CAAE;IAAA;IAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAG,MAAMmH,SAAA,CAAAC,aAAa,CAAC/D,IAAI,CAACK,KAAK,CAACC,SAAS;IAC3E,MAAMC,UAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAayD,gBAAA,CAAiBI,KAAK,CAACC,IAAI,CAACC,CAAA,IAAK;MAAA;MAAAjE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAA+D,CAAA,CAAEnD,KAAK,KAAKA,KAAA;IAAA;IAEhE,IAAIoD,QAAA;IAAA;IAAAlE,cAAA,GAAAE,CAAA;IAEJ,IAAI4D,UAAA,EAAY;MAAA;MAAA9D,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACdgE,QAAA,GAAWJ,UAAA;IACb,OAAO;MAAA;MAAA9D,cAAA,GAAAiC,CAAA;MACL;MACA,MAAM;QAAEyB,IAAA,EAAMS,WAAW;QAAE7B,KAAA,EAAO8B;MAAS,CAAE;MAAA;MAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG,MAAMmH,SAAA,CAAAC,aAAa,CAAC/D,IAAI,CAACK,KAAK,CAACS,UAAU,CAAC;QACxFvD,KAAA;QACAC,QAAA;QACAuD,aAAA,EAAe;QACfC,aAAA,EAAe;UACbC,UAAA,EAAYxD,SAAA;UACZyD,SAAA,EAAWvD,QAAA;UACXwD,IAAA,EAAM;UACN2B,UAAA,EAAYQ,OAAA,CAAQU,MAAM;UAC1BC,gBAAA,EAAkB;UAClBC,cAAA,EAAgB;UAChB9C,WAAA,EAAa;QACf;MACF;MAAA;MAAA3E,cAAA,GAAAE,CAAA;MAEA,IAAIkE,SAAA,EAAW;QAAA;QAAApE,cAAA,GAAAiC,CAAA;QAAAjC,cAAA,GAAAE,CAAA;QACb,MAAM,IAAI0E,KAAA,CAAM,kCAAkCR,SAAA,CAAUS,OAAO,EAAE;MACvE;MAAA;MAAA;QAAA7E,cAAA,GAAAiC,CAAA;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAEAgE,QAAA,GAAWC,WAAA,CAAYW,IAAI;IAC7B;IAEA;IACA,MAAM;MAAEpB,IAAA,EAAMqB;IAAe,CAAE;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAG,MAAMgH,MAAA,CACrClC,IAAI,CAAC,iBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,SAASpE,KAAA,EACZqE,MAAM;IAAA;IAAAnF,cAAA,GAAAE,CAAA;IAET,IAAI6E,eAAA,EAAiB;MAAA;MAAA/E,cAAA,GAAAiC,CAAA;MACnB;MACA,MAAM;QAAEyB,IAAA,EAAM0B,cAAc;QAAE9C,KAAA,EAAO+C;MAAW,CAAE;MAAA;MAAA,CAAArF,cAAA,GAAAE,CAAA,QAAG,MAAMgH,MAAA,CACxDlC,IAAI,CAAC,iBACLM,MAAM,CAAC;QACNC,gBAAA,EAAkBrB,QAAA,CAASsB,EAAE;QAC7BhB,UAAA,EAAYxD,SAAA;QACZyD,SAAA,EAAWvD,QAAA;QACXC,WAAA,EAAaA,WAAA;QACbiF,QAAA,EAAU;UACR,GAAGrB,eAAA,CAAgBqB,QAAQ;UAC3BsB,UAAA,EAAYb,OAAA,CAAQU,MAAM;UAC1BC,gBAAA,EAAkB;UAClBG,iBAAA,EAAmB,IAAIjC,IAAA,GAAOC,WAAW;QAC3C;QACAF,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;MACpC,GACCT,EAAE,CAAC,SAASpE,KAAA,EACZmE,MAAM,CAAC;;;;;;WAMP,EACAE,MAAM;MAAA;MAAAnF,cAAA,GAAAE,CAAA;MAET,IAAImF,WAAA,EAAa;QAAA;QAAArF,cAAA,GAAAiC,CAAA;QAAAjC,cAAA,GAAAE,CAAA;QACf,MAAM,IAAI0E,KAAA,CAAM,8BAA8BS,WAAA,CAAYR,OAAO,EAAE;MACrE;MAAA;MAAA;QAAA7E,cAAA,GAAAiC,CAAA;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAEA,OAAO;QACL0F,MAAA,EAAQ;QACR1B,QAAA;QACA2B,OAAA,EAAST,cAAA;QACTyB;MACF;IACF,OAAO;MAAA;MAAA7G,cAAA,GAAAiC,CAAA;MACL;MACA,MAAM;QAAEyB,IAAA,EAAMoC;MAAS,CAAE;MAAA;MAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAG,MAAMgH,MAAA,CAC/BlC,IAAI,CAAC,cACLC,MAAM,CAAC,MACPC,EAAE,CAAC,aAAa,SAChBC,MAAM;MAAA;MAAAnF,cAAA,GAAAE,CAAA;MAET,IAAI,CAAC4F,SAAA,EAAW;QAAA;QAAA9F,cAAA,GAAAiC,CAAA;QAAAjC,cAAA,GAAAE,CAAA;QACd,MAAM,IAAI0E,KAAA,CAAM;MAClB;MAAA;MAAA;QAAA5E,cAAA,GAAAiC,CAAA;MAAA;MAEA;MACA,MAAM;QAAEyB,IAAA,EAAMqC,UAAU;QAAEzD,KAAA,EAAO0D;MAAY,CAAE;MAAA;MAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAG,MAAMgH,MAAA,CACrDlC,IAAI,CAAC,iBACLiB,MAAM,CAAC;QACNV,gBAAA,EAAkBrB,QAAA,CAASsB,EAAE;QAC7B1E,KAAA;QACA0D,UAAA,EAAYxD,SAAA;QACZyD,SAAA,EAAWvD,QAAA;QACXgF,OAAA,EAASJ,SAAA,CAAUN,EAAE;QACrBrE,WAAA,EAAaA,WAAA;QACbgF,SAAA,EAAW;QACXyB,WAAA,EAAa;QACbxB,QAAA,EAAU;UACRC,UAAA,EAAYQ,OAAA,CAAQU,MAAM;UAC1BC,gBAAA,EAAkB;UAClBC,cAAA,EAAgB;UAChB9C,WAAA,EAAa;QACf;QACAkD,UAAA,EAAY,IAAInC,IAAA,GAAOC,WAAW;QAClCF,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;MACpC,GACCV,MAAM,CAAC;;;;;;WAMP,EACAE,MAAM;MAAA;MAAAnF,cAAA,GAAAE,CAAA;MAET,IAAI8F,YAAA,EAAc;QAAA;QAAAhG,cAAA,GAAAiC,CAAA;QAAAjC,cAAA,GAAAE,CAAA;QAChB,MAAM,IAAI0E,KAAA,CAAM,yBAAyBoB,YAAA,CAAanB,OAAO,EAAE;MACjE;MAAA;MAAA;QAAA7E,cAAA,GAAAiC,CAAA;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAEA,OAAO;QACL0F,MAAA,EAAQ;QACR1B,QAAA;QACA2B,OAAA,EAASE,UAAA;QACTc;MACF;IACF;EACF,GACA;IACEiB,UAAA,EAAY;IACZC,QAAA,EAAU;IACVC,aAAA,EAAe;EACjB;EAAA;EAAAhI,cAAA,GAAAE,CAAA;EAGF,IAAI,CAAC6G,MAAA,CAAOH,OAAO,EAAE;IAAA;IAAA5G,cAAA,GAAAiC,CAAA;IAAAjC,cAAA,GAAAE,CAAA;IACnB,MAAM,IAAI0E,KAAA,CAAM,kCAAkCmC,MAAA,CAAOzE,KAAK,EAAE;EAClE;EAAA;EAAA;IAAAtC,cAAA,GAAAiC,CAAA;EAAA;EAAAjC,cAAA,GAAAE,CAAA;EAEA,OAAO6G,MAAA,CAAOrD,IAAI;AACpB;AAMO,eAAerD,KAAKmG,OAAoB;EAAA;EAAAxG,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAM+H,IAAA;IAAA;IAAA,CAAAjI,cAAA,GAAAE,CAAA,QAAO,MAAMsG,OAAA,CAAQ0B,IAAI;IAC/B,MAAMnF,MAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAASK,qBAAA,CAAsB4H,KAAK,CAACF,IAAA;IAC3C,MAAMG,SAAA;IAAA;IAAA,CAAApI,cAAA,GAAAE,CAAA,QAAY,IAAIwF,IAAA,GAAOC,WAAW;IAAA;IAAA3F,cAAA,GAAAE,CAAA;IAExCmI,OAAA,CAAQC,GAAG,CAAC,wCAAwCvF,MAAA,CAAO1B,IAAI,EAAE;IAEjE;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC0C,mBAAA,CAAoBG,MAAA,CAAOpC,WAAW,EAAEoC,MAAA,CAAO1B,IAAI,GAAG;MAAA;MAAArB,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACzD,OAAOqI,OAAA,CAAAC,YAAY,CAACN,IAAI,CACtB;QACE5F,KAAA,EAAO,sBAAsBS,MAAA,CAAO1B,IAAI,aAAa;QACrDoH,IAAA,EAAM;QACNpH,IAAA,EAAM0B,MAAA,CAAO1B;MACf,GACA;QAAEqH,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA1I,cAAA,GAAAiC,CAAA;IAAA;IAEA;IACA,MAAM0G,kBAAA;IAAA;IAAA,CAAA3I,cAAA,GAAAE,CAAA,QAAqB6B,gBAAA,CACzBgB,MAAA,CAAOhC,QAAQ,EACfgC,MAAA,CAAO1B,IAAI,EACX0B,MAAA,CAAOxB,sBAAsB;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IAG/B,IAAI,CAACyI,kBAAA,CAAmBtG,KAAK,EAAE;MAAA;MAAArC,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MAC7B,OAAOqI,OAAA,CAAAC,YAAY,CAACN,IAAI,CACtB;QACE5F,KAAA,EAAOqG,kBAAA,CAAmBrG,KAAK;QAC/BmG,IAAA,EAAM1F,MAAA,CAAO1B,IAAI,KAAK;QAAA;QAAA,CAAArB,cAAA,GAAAiC,CAAA,WAAe;QAAA;QAAA,CAAAjC,cAAA,GAAAiC,CAAA,WAA+B;QACpEZ,IAAA,EAAM0B,MAAA,CAAO1B;MACf,GACA;QAAEqH,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA1I,cAAA,GAAAiC,CAAA;IAAA;IAEA,IAAI8E,MAAA;IAEJ;IAAA;IAAA/G,cAAA,GAAAE,CAAA;IACA,IAAI6C,MAAA,CAAO1B,IAAI,KAAK,cAAc;MAAA;MAAArB,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MAChC6G,MAAA,GAAS,MAAMR,yBAAA,CAA0BxD,MAAA,EAAQyD,OAAA;MAEjD;MAAA;MAAAxG,cAAA,GAAAE,CAAA;MACA,IAAI6G,MAAA,CAAO7C,QAAQ,EAAE;QAAA;QAAAlE,cAAA,GAAAiC,CAAA;QAAAjC,cAAA,GAAAE,CAAA;QACnB,IAAA0I,gBAAA,CAAAC,mBAAmB,EAAC9B,MAAA,CAAO7C,QAAQ,CAACsB,EAAE;MACxC;MAAA;MAAA;QAAAxF,cAAA,GAAAiC,CAAA;MAAA;IACF,OAAO;MAAA;MAAAjC,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MACL6G,MAAA,GAAS,MAAMjE,oBAAA,CAAqBC,MAAA;IACtC;IAEA,MAAM;MAAE6C,MAAM;MAAE1B,QAAQ;MAAE2B,OAAO;MAAEgB;IAAO,CAAE;IAAA;IAAA,CAAA7G,cAAA,GAAAE,CAAA,SAAG6G,MAAA;IAE/C;IACA,MAAM+B,QAAA;IAAA;IAAA,CAAA9I,cAAA,GAAAE,CAAA,SAAW;MACf0G,OAAA,EAAS;MACT/B,OAAA,EAAS,yBAAyBe,MAAA,KAAW;MAAA;MAAA,CAAA5F,cAAA,GAAAiC,CAAA,WAAY;MAAA;MAAA,CAAAjC,cAAA,GAAAiC,CAAA,WAAW,8BAA6B;MACjGyB,IAAA,EAAM;QACJkC,MAAA;QACAd,IAAA,EAAM;UACJiE,OAAA,EAAS7E,QAAA,CAASsB,EAAE;UACpB1E,KAAA,EAAOoD,QAAA,CAASpD,KAAK;UACrB+E,OAAA,EAAS;YACPL,EAAA,EAAIK,OAAA,CAAQL,EAAE;YACdwD,IAAA,EAAM,GAAGnD,OAAA,CAAQrB,UAAU,IAAIqB,OAAA,CAAQpB,SAAS,EAAE;YAClDC,IAAA,EAAMmB,OAAA,CAAQoD,UAAU,EAAEC,SAAA;YAC1B/H,WAAA;YAAa;YAAA,CAAAnB,cAAA,GAAAiC,CAAA,WAAA4D,OAAA,CAAQ1E,WAAW;YAAA;YAAA,CAAAnB,cAAA,GAAAiC,CAAA,WAAI4D,OAAA,CAAQoD,UAAU,EAAE9H,WAAA;YACxDgF,SAAA,EAAWN,OAAA,CAAQM,SAAS;YAC5B0B,UAAA,EAAYhC,OAAA,CAAQgC;UACtB;QACF;MACF;MACAsB,IAAA,EAAM;QACJ9H,IAAA,EAAM0B,MAAA,CAAO1B,IAAI;QACjB+H,WAAA,EAAa;QACbC,OAAA,EAAS;QACTjB;MACF;IACF;IAEA;IAAA;IAAApI,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAiC,CAAA,WAAAc,MAAA,CAAO1B,IAAI,KAAK;IAAA;IAAA,CAAArB,cAAA,GAAAiC,CAAA,WAAgB4E,OAAA,GAAS;MAAA;MAAA7G,cAAA,GAAAiC,CAAA;MAAAjC,cAAA,GAAAE,CAAA;MAC3C4I,QAAQ,CAAC,aAAa,GAAG;QACvBrB,cAAA,EAAgB;QAChB6B,WAAA,EAAa;QACbjD,UAAA,EAAYQ,OAAA,CAAQU,MAAM;QAC1BgC,mBAAA,EAAqBxG,MAAA,CAAO5B;MAC9B;IACF;IAAA;IAAA;MAAAnB,cAAA,GAAAiC,CAAA;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IAEA,OAAOqI,OAAA,CAAAC,YAAY,CAACN,IAAI,CAACY,QAAA,EAAU;MACjCJ,MAAA,EAAQ9C,MAAA,KAAW;MAAA;MAAA,CAAA5F,cAAA,GAAAiC,CAAA,WAAY;MAAA;MAAA,CAAAjC,cAAA,GAAAiC,CAAA,WAAM;IACvC;EAEF,EAAE,OAAOK,KAAA,EAAY;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IACnBmI,OAAA,CAAQ/F,KAAK,CAAC,2CAA2CA,KAAA;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAEzD,OAAOqI,OAAA,CAAAC,YAAY,CAACN,IAAI,CACtB;MACE5F,KAAA;MAAO;MAAA,CAAAtC,cAAA,GAAAiC,CAAA,WAAAK,KAAA,CAAMuC,OAAO;MAAA;MAAA,CAAA7E,cAAA,GAAAiC,CAAA,WAAI;MACxBwG,IAAA,EAAM;MACNpH,IAAA,EAAM;MACNgI,OAAA,EAAS;MACTjB,SAAA,EAAW,IAAI1C,IAAA,GAAOC,WAAW;IACnC,GACA;MAAE+C,MAAA,EAAQ;IAAI;EAElB;AACF;AAEO,eAAevI,IAAA;EAAA;EAAAH,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACpB,OAAOqI,OAAA,CAAAC,YAAY,CAACN,IAAI,CAAC;IACvBrD,OAAA,EAAS;IACTwE,OAAA,EAAS;IACTG,KAAA,EAAO;MACL9H,KAAA,EAAO;QACL+H,WAAA,EAAa;QACbC,YAAA,EAAc;QACdC,qBAAA,EAAuB;UACrBC,UAAA,EAAY;UACZC,UAAA,EAAY;QACd;QACAC,QAAA,EAAU,CAAC,uBAAuB,qBAAqB;MACzD;MACAnI,UAAA,EAAY;QACV8H,WAAA,EAAa;QACbC,YAAA,EAAc;QACdC,qBAAA,EAAuB;UACrBC,UAAA,EAAY;UACZC,UAAA,EAAY;UACZE,YAAA,EAAc,CAAC,aAAa,aAAa,WAAW;QACtD;QACAD,QAAA,EAAU,CACR,0DACA,wCACA,8BACA,iBACA,sBACA;MAEJ;IACF;IACAE,KAAA,EAAO;MACLC,MAAA,EAAQ;MACRC,eAAA,EAAiB,CAAC,eAAe,SAAS,WAAW;MACrDC,eAAA,EAAiB,CAAC,aAAa,YAAY,eAAe,QAAQ,yBAAyB;MAC3FC,QAAA,EAAU;QACR1I,KAAA,EAAO;UACLf,WAAA,EAAa;UACbG,KAAA,EAAO;UACPC,QAAA,EAAU;UACVM,IAAA,EAAM;QACR;QACAM,UAAA,EAAY;UACVhB,WAAA,EAAa;UACbG,KAAA,EAAO;UACPC,QAAA,EAAU;UACVM,IAAA,EAAM;UACNL,SAAA,EAAW;UACXE,QAAA,EAAU;UACVC,WAAA,EAAa,CAAC,gBAAgB;QAChC;MACF;IACF;IACAkJ,SAAA,EAAW;MACTrF,IAAA,EAAM,CACJ,gCACA,0CACD;MACDsF,EAAA,EAAI;MACJC,mBAAA,EAAqB;IACvB;EACF;AACF","ignoreList":[]}