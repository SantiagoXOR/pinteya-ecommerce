{"version":3,"names":["cov_16eawlmaev","actualCoverage","s","OPTIONS","f","POST","runtime","createOrderSchema","_zod","z","object","customerInfo","firstName","string","min","lastName","email","phone","shippingAddress","streetAddress","apartment","optional","city","state","zipCode","country","default","observations","items","array","id","name","price","number","quantity","image","paymentMethod","enum","shippingMethod","totals","subtotal","shipping","discount","total","orderNotes","request","body","json","validatedData","parse","orderId","Date","now","Math","random","toString","substr","order","status","createdAt","toISOString","updatedAt","trackingNumber","estimatedDelivery","calculateEstimatedDelivery","console","log","customer","length","b","paymentStatus","paymentUrl","response","success","data","message","_server","NextResponse","error","ZodError","details","errors","daysToAdd","estimatedDate","getTime","headers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\orders\\create\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\n// Schema de validaci√≥n para crear una orden\r\nconst createOrderSchema = z.object({\r\n  customerInfo: z.object({\r\n    firstName: z.string().min(1, 'Nombre es requerido'),\r\n    lastName: z.string().min(1, 'Apellido es requerido'),\r\n    email: z.string().email('Email inv√°lido'),\r\n    phone: z.string().min(1, 'Tel√©fono es requerido'),\r\n  }),\r\n  shippingAddress: z.object({\r\n    streetAddress: z.string().min(1, 'Direcci√≥n es requerida'),\r\n    apartment: z.string().optional(),\r\n    city: z.string().min(1, 'Ciudad es requerida'),\r\n    state: z.string().min(1, 'Provincia es requerida'),\r\n    zipCode: z.string().min(1, 'C√≥digo postal es requerido'),\r\n    country: z.string().default('Argentina'),\r\n    observations: z.string().optional(),\r\n  }),\r\n  items: z.array(z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    price: z.number(),\r\n    quantity: z.number(),\r\n    image: z.string().optional(),\r\n  })),\r\n  paymentMethod: z.enum(['mercadopago', 'bank', 'cash']),\r\n  shippingMethod: z.enum(['free', 'express', 'pickup']),\r\n  totals: z.object({\r\n    subtotal: z.number(),\r\n    shipping: z.number(),\r\n    discount: z.number().default(0),\r\n    total: z.number(),\r\n  }),\r\n  orderNotes: z.string().optional(),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    \r\n    // Validar datos de entrada\r\n    const validatedData = createOrderSchema.parse(body);\r\n    \r\n    // Generar ID √∫nico para la orden\r\n    const orderId = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Crear objeto de orden\r\n    const order = {\r\n      id: orderId,\r\n      status: 'pending',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      ...validatedData,\r\n      trackingNumber: null,\r\n      estimatedDelivery: calculateEstimatedDelivery(validatedData.shippingMethod),\r\n    };\r\n    \r\n    // En un entorno real, aqu√≠ guardar√≠as en la base de datos\r\n    // Por ahora, simularemos el guardado\r\n    console.log('üì¶ Nueva orden creada:', {\r\n      orderId: order.id,\r\n      customer: `${order.customerInfo.firstName} ${order.customerInfo.lastName}`,\r\n      total: order.totals.total,\r\n      items: order.items.length,\r\n      observations: order.shippingAddress.observations || 'Sin observaciones'\r\n    });\r\n    \r\n    // Simular procesamiento de pago seg√∫n el m√©todo\r\n    let paymentStatus = 'pending';\r\n    let paymentUrl = null;\r\n    \r\n    switch (validatedData.paymentMethod) {\r\n      case 'mercadopago':\r\n        // En un entorno real, aqu√≠ crear√≠as la preferencia de MercadoPago\r\n        paymentUrl = `https://mercadopago.com/checkout/${orderId}`;\r\n        paymentStatus = 'pending';\r\n        break;\r\n      case 'bank':\r\n        paymentStatus = 'awaiting_transfer';\r\n        break;\r\n      case 'cash':\r\n        paymentStatus = 'cash_on_delivery';\r\n        break;\r\n    }\r\n    \r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        order: {\r\n          ...order,\r\n          paymentStatus,\r\n          paymentUrl,\r\n        }\r\n      },\r\n      message: 'Orden creada exitosamente'\r\n    };\r\n    \r\n    return NextResponse.json(response, { status: 201 });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creando orden:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Datos de entrada inv√°lidos',\r\n        details: error.errors\r\n      }, { status: 400 });\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Funci√≥n auxiliar para calcular fecha estimada de entrega\r\nfunction calculateEstimatedDelivery(shippingMethod: string): string {\r\n  const now = new Date();\r\n  let daysToAdd = 7; // Por defecto 7 d√≠as\r\n  \r\n  switch (shippingMethod) {\r\n    case 'express':\r\n      daysToAdd = 2;\r\n      break;\r\n    case 'free':\r\n      daysToAdd = 7;\r\n      break;\r\n    case 'pickup':\r\n      daysToAdd = 1;\r\n      break;\r\n  }\r\n  \r\n  const estimatedDate = new Date(now.getTime() + (daysToAdd * 24 * 60 * 60 * 1000));\r\n  return estimatedDate.toISOString();\r\n}\r\n\r\n// M√©todo OPTIONS para CORS\r\nexport async function OPTIONS() {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}