88339037273fbd66d06649d8b37f3fd7
/**
 * Dashboard de Seguridad
 * Proporciona una interfaz unificada para monitoreo y gestión de seguridad
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get SecurityDashboard () {
        return SecurityDashboard;
    },
    get getSecurityDashboard () {
        return getSecurityDashboard;
    },
    get startGlobalSecurityDashboard () {
        return startGlobalSecurityDashboard;
    },
    get stopGlobalSecurityDashboard () {
        return stopGlobalSecurityDashboard;
    }
});
const _securityauditenhanced = require("./security-audit-enhanced");
class SecurityDashboard {
    constructor(config = {}){
        this.config = {
            refreshInterval: 30,
            alertThresholds: {
                criticalEvents: 1,
                authFailures: 10,
                suspiciousActivities: 5,
                securityScore: 70
            },
            autoAnalysis: true,
            notifications: {
                email: false,
                slack: false
            },
            ...config
        };
        this.lastUpdate = new Date();
    }
    /**
   * Inicia el dashboard de seguridad
   */ async start() {
        try {
            console.log('[SECURITY DASHBOARD] Iniciando dashboard de seguridad...');
            // Cargar datos iniciales
            await this.refreshData();
            // Iniciar monitoreo automático si está habilitado
            if (this.config.autoAnalysis) {
                this.monitoringInterval = (0, _securityauditenhanced.startSecurityMonitoring)(5); // cada 5 minutos
            }
            // Iniciar refresh automático de datos
            this.refreshInterval = setInterval(async ()=>{
                await this.refreshData();
            }, this.config.refreshInterval * 1000);
            console.log('[SECURITY DASHBOARD] Dashboard iniciado exitosamente');
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error iniciando dashboard:', error);
            throw error;
        }
    }
    /**
   * Detiene el dashboard de seguridad
   */ stop() {
        console.log('[SECURITY DASHBOARD] Deteniendo dashboard...');
        if (this.monitoringInterval) {
            (0, _securityauditenhanced.stopSecurityMonitoring)(this.monitoringInterval);
            this.monitoringInterval = undefined;
        }
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = undefined;
        }
        console.log('[SECURITY DASHBOARD] Dashboard detenido');
    }
    /**
   * Actualiza los datos del dashboard
   */ async refreshData() {
        try {
            console.log('[SECURITY DASHBOARD] Actualizando datos...');
            // Obtener datos en paralelo
            const [metrics, alerts, healthCheck] = await Promise.all([
                (0, _securityauditenhanced.getSecurityMetrics)(),
                (0, _securityauditenhanced.getActiveSecurityAlerts)(),
                (0, _securityauditenhanced.runSecurityHealthCheck)()
            ]);
            // Calcular actividad reciente (comparar con datos anteriores)
            const recentActivity = {
                totalEvents: metrics.total_events_24h,
                criticalEvents: metrics.critical_events_24h,
                newAlerts: alerts.filter((a)=>new Date(a.first_occurrence) > new Date(Date.now() - 24 * 60 * 60 * 1000)).length,
                resolvedAlerts: 0
            };
            // Generar tendencias (simuladas por ahora)
            const trends = {
                eventsLast7Days: await this.getEventsTrend(7),
                alertsLast7Days: await this.getAlertsTrend(7),
                securityScoreTrend: await this.getSecurityScoreTrend(7)
            };
            this.cachedData = {
                metrics,
                alerts,
                healthCheck: {
                    status: healthCheck.status,
                    issues: healthCheck.issues,
                    recommendations: healthCheck.recommendations
                },
                recentActivity,
                trends
            };
            this.lastUpdate = new Date();
            // Verificar umbrales y generar alertas si es necesario
            await this.checkThresholds(metrics, alerts);
            console.log('[SECURITY DASHBOARD] Datos actualizados exitosamente');
            return this.cachedData;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error actualizando datos:', error);
            throw error;
        }
    }
    /**
   * Obtiene los datos actuales del dashboard
   */ async getData(forceRefresh = false) {
        if (forceRefresh || !this.cachedData || Date.now() - this.lastUpdate.getTime() > this.config.refreshInterval * 1000) {
            return await this.refreshData();
        }
        return this.cachedData;
    }
    /**
   * Ejecuta un análisis manual de seguridad
   */ async runManualAnalysis(userId) {
        try {
            console.log('[SECURITY DASHBOARD] Ejecutando análisis manual...');
            const alerts = await (0, _securityauditenhanced.analyzeSecurityPatterns)(userId);
            // Actualizar datos después del análisis
            await this.refreshData();
            console.log(`[SECURITY DASHBOARD] Análisis completado: ${alerts.length} alertas generadas`);
            return alerts;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error en análisis manual:', error);
            throw error;
        }
    }
    /**
   * Genera un reporte de seguridad
   */ async generateReport(startDate, endDate) {
        try {
            console.log('[SECURITY DASHBOARD] Generando reporte de seguridad...');
            const report = await (0, _securityauditenhanced.generateSecurityReport)(startDate, endDate);
            console.log('[SECURITY DASHBOARD] Reporte generado exitosamente');
            return report;
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error generando reporte:', error);
            throw error;
        }
    }
    /**
   * Obtiene el estado actual del dashboard
   */ getStatus() {
        return {
            isRunning: !!this.refreshInterval,
            lastUpdate: this.lastUpdate,
            config: this.config,
            uptime: Date.now() - this.lastUpdate.getTime()
        };
    }
    /**
   * Actualiza la configuración del dashboard
   */ updateConfig(newConfig) {
        this.config = {
            ...this.config,
            ...newConfig
        };
        console.log('[SECURITY DASHBOARD] Configuración actualizada');
    }
    // =====================================================
    // MÉTODOS PRIVADOS
    // =====================================================
    /**
   * Verifica umbrales y genera notificaciones
   */ async checkThresholds(metrics, alerts) {
        const issues = [];
        if (metrics.critical_events_24h >= this.config.alertThresholds.criticalEvents) {
            issues.push(`Eventos críticos: ${metrics.critical_events_24h} (umbral: ${this.config.alertThresholds.criticalEvents})`);
        }
        if (metrics.auth_failures_24h >= this.config.alertThresholds.authFailures) {
            issues.push(`Fallos de autenticación: ${metrics.auth_failures_24h} (umbral: ${this.config.alertThresholds.authFailures})`);
        }
        if (metrics.suspicious_activities_24h >= this.config.alertThresholds.suspiciousActivities) {
            issues.push(`Actividades sospechosas: ${metrics.suspicious_activities_24h} (umbral: ${this.config.alertThresholds.suspiciousActivities})`);
        }
        if (metrics.security_score <= this.config.alertThresholds.securityScore) {
            issues.push(`Score de seguridad bajo: ${metrics.security_score} (umbral: ${this.config.alertThresholds.securityScore})`);
        }
        if (issues.length > 0) {
            console.warn('[SECURITY DASHBOARD] Umbrales excedidos:', issues);
            await this.sendNotifications(issues);
        }
    }
    /**
   * Envía notificaciones según la configuración
   */ async sendNotifications(issues) {
        try {
            if (this.config.notifications.webhook) {
                // Enviar webhook
                const payload = {
                    timestamp: new Date().toISOString(),
                    source: 'security-dashboard',
                    level: 'warning',
                    message: 'Umbrales de seguridad excedidos',
                    issues
                };
                await fetch(this.config.notifications.webhook, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });
            }
            // TODO: Implementar notificaciones por email y Slack
            if (this.config.notifications.email) {
                console.log('[SECURITY DASHBOARD] Enviando notificación por email...');
            }
            if (this.config.notifications.slack) {
                console.log('[SECURITY DASHBOARD] Enviando notificación por Slack...');
            }
        } catch (error) {
            console.error('[SECURITY DASHBOARD] Error enviando notificaciones:', error);
        }
    }
    /**
   * Obtiene tendencia de eventos (simulada)
   */ async getEventsTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 100));
    }
    /**
   * Obtiene tendencia de alertas (simulada)
   */ async getAlertsTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 10));
    }
    /**
   * Obtiene tendencia del score de seguridad (simulada)
   */ async getSecurityScoreTrend(days) {
        // TODO: Implementar consulta real a la base de datos
        return Array(days).fill(0).map(()=>Math.floor(Math.random() * 40) + 60);
    }
}
// =====================================================
// INSTANCIA SINGLETON DEL DASHBOARD
// =====================================================
let dashboardInstance = null;
function getSecurityDashboard(config) {
    if (!dashboardInstance) {
        dashboardInstance = new SecurityDashboard(config);
    }
    return dashboardInstance;
}
async function startGlobalSecurityDashboard(config) {
    const dashboard = getSecurityDashboard(config);
    await dashboard.start();
    return dashboard;
}
function stopGlobalSecurityDashboard() {
    if (dashboardInstance) {
        dashboardInstance.stop();
        dashboardInstance = null;
    }
}

//# sourceMappingURL=data:application/json;base64,