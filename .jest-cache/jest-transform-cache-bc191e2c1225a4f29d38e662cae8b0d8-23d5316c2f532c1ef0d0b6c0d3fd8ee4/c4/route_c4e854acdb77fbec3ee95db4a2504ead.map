{"version":3,"names":["cov_8dffxm58a","actualCoverage","s","POST","f","runtime","BulkStatusUpdateSchema","_zod","z","object","order_ids","array","string","uuid","min","max","status","enum","reason","notify_customers","boolean","default","BulkExportSchema","format","filters","optional","payment_status","date_from","date_to","include_items","stateTransitions","pending","confirmed","processing","shipped","delivered","cancelled","refunded","returned","validateStateTransition","currentStatus","newStatus","b","includes","validateAdminAuth","session","_config","auth","user","error","isAdmin","email","userId","id","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","request","startTime","Date","now","rateLimitResult","_ratelimiting","checkRateLimit","success","response","_server","NextResponse","json","_ratelimiter","addRateLimitHeaders","authResult","searchParams","URL","url","operation","get","handleBulkStatusUpdate","handleBulkExport","responseTime","_metrics","metricsCollector","recordApiCall","API","body","validationResult","safeParse","details","errors","data","currentOrders","fetchError","_supabase","supabaseAdmin","from","select","in","DATABASE","length","validOrders","invalidOrders","order","push","order_number","current_status","invalid_orders","validOrderIds","map","updatedOrders","updateError","update","updated_at","toISOString","historyEntries","order_id","previous_status","new_status","changed_by","metadata","JSON","stringify","bulk_operation","total_orders","insert","historyError","WARN","updated_orders","summary","total_requested","successfully_updated","failed_updates","INFO","totalRequested","successfullyUpdated","failedUpdates","adminId","query","eq","gte","lte","orders","ascending","limit","recordRequest","export_info","total_records","generated_at","filters_applied","totalRecords","includeItems"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\bulk\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN BULK ORDERS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst BulkStatusUpdateSchema = z.object({\r\n  order_ids: z.array(z.string().uuid()).min(1, 'Al menos una orden es requerida').max(100, 'Máximo 100 órdenes por operación'),\r\n  status: z.enum(['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded']),\r\n  reason: z.string().min(1, 'Razón del cambio es requerida').max(500, 'Razón muy larga'),\r\n  notify_customers: z.boolean().default(false),\r\n});\r\n\r\nconst BulkExportSchema = z.object({\r\n  format: z.enum(['csv', 'json']).default('csv'),\r\n  filters: z.object({\r\n    status: z.string().optional(),\r\n    payment_status: z.string().optional(),\r\n    date_from: z.string().optional(),\r\n    date_to: z.string().optional(),\r\n  }).optional(),\r\n  include_items: z.boolean().default(true),\r\n});\r\n\r\n// ===================================\r\n// VALIDACIONES DE TRANSICIÓN DE ESTADOS\r\n// ===================================\r\n\r\nconst stateTransitions: Record<string, string[]> = {\r\n  pending: ['confirmed', 'cancelled'],\r\n  confirmed: ['processing', 'cancelled'],\r\n  processing: ['shipped', 'cancelled'],\r\n  shipped: ['delivered', 'returned'],\r\n  delivered: ['returned'],\r\n  cancelled: [],\r\n  refunded: [],\r\n  returned: ['refunded']\r\n};\r\n\r\nfunction validateStateTransition(currentStatus: string, newStatus: string): boolean {\r\n  if (currentStatus === newStatus) {return false;}\r\n  return stateTransitions[currentStatus]?.includes(newStatus) || false;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no encontrado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Operaciones masivas\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Rate limiting más estricto para operaciones masivas\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      10, // Máximo 10 operaciones masivas por hora\r\n      3600000, // 1 hora\r\n      'admin-bulk-operations'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: 'Demasiadas operaciones masivas. Límite: 10 por hora' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if ('error' in authResult) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status }\r\n      );\r\n    }\r\n\r\n    // Obtener tipo de operación\r\n    const { searchParams } = new URL(request.url);\r\n    const operation = searchParams.get('operation');\r\n\r\n    if (operation === 'status_update') {\r\n      return await handleBulkStatusUpdate(request, authResult);\r\n    } else if (operation === 'export') {\r\n      return await handleBulkExport(request, authResult);\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: 'Operación no válida. Operaciones disponibles: status_update, export' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-bulk-operations', responseTime, 500);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/orders/bulk', { error });\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// ACTUALIZACIÓN MASIVA DE ESTADOS\r\n// ===================================\r\nasync function handleBulkStatusUpdate(request: NextRequest, authResult: any) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = BulkStatusUpdateSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de operación masiva inválidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { order_ids, status: newStatus, reason, notify_customers } = validationResult.data;\r\n\r\n    // Obtener órdenes actuales para validar transiciones\r\n    const { data: currentOrders, error: fetchError } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('id, status, order_number')\r\n      .in('id', order_ids);\r\n\r\n    if (fetchError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al obtener órdenes para bulk update', { fetchError });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener órdenes' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (!currentOrders || currentOrders.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'No se encontraron órdenes con los IDs proporcionados' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Validar transiciones para cada orden\r\n    const validOrders = [];\r\n    const invalidOrders = [];\r\n\r\n    for (const order of currentOrders) {\r\n      if (validateStateTransition(order.status, newStatus)) {\r\n        validOrders.push(order);\r\n      } else {\r\n        invalidOrders.push({\r\n          id: order.id,\r\n          order_number: order.order_number,\r\n          current_status: order.status,\r\n          reason: `Transición no permitida: ${order.status} → ${newStatus}`\r\n        });\r\n      }\r\n    }\r\n\r\n    if (validOrders.length === 0) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Ninguna orden puede cambiar al estado solicitado',\r\n          invalid_orders: invalidOrders\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar órdenes válidas\r\n    const validOrderIds = validOrders.map(order => order.id);\r\n    const { data: updatedOrders, error: updateError } = await supabaseAdmin\r\n      .from('orders')\r\n      .update({\r\n        status: newStatus,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .in('id', validOrderIds)\r\n      .select();\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error en actualización masiva', { updateError });\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar órdenes' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar cambios en historial\r\n    const historyEntries = validOrders.map(order => ({\r\n      order_id: order.id,\r\n      previous_status: order.status,\r\n      new_status: newStatus,\r\n      changed_by: authResult.user.id,\r\n      reason: `Cambio masivo: ${reason}`,\r\n      metadata: JSON.stringify({\r\n        bulk_operation: true,\r\n        total_orders: validOrders.length,\r\n      }),\r\n    }));\r\n\r\n    try {\r\n      await supabaseAdmin\r\n        .from('order_status_history')\r\n        .insert(historyEntries);\r\n    } catch (historyError) {\r\n      logger.log(LogLevel.WARN, LogCategory.DATABASE, 'No se pudo registrar historial masivo', { historyError });\r\n    }\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-bulk-status-update', responseTime, 200);\r\n\r\n    const response: ApiResponse<{\r\n      updated_orders: typeof updatedOrders;\r\n      invalid_orders: typeof invalidOrders;\r\n      summary: {\r\n        total_requested: number;\r\n        successfully_updated: number;\r\n        failed_updates: number;\r\n      };\r\n    }> = {\r\n      data: {\r\n        updated_orders: updatedOrders,\r\n        invalid_orders: invalidOrders,\r\n        summary: {\r\n          total_requested: order_ids.length,\r\n          successfully_updated: validOrders.length,\r\n          failed_updates: invalidOrders.length,\r\n        },\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Actualización masiva de estados completada', {\r\n      totalRequested: order_ids.length,\r\n      successfullyUpdated: validOrders.length,\r\n      failedUpdates: invalidOrders.length,\r\n      newStatus,\r\n      adminId: authResult.user.id,\r\n      responseTime,\r\n    });\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-bulk-status-update', responseTime, 500);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en bulk status update', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// EXPORTACIÓN MASIVA DE DATOS\r\n// ===================================\r\nasync function handleBulkExport(request: NextRequest, authResult: any) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = BulkExportSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { error: 'Parámetros de exportación inválidos', details: validationResult.error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { format, filters, include_items } = validationResult.data;\r\n\r\n    // Construir query base\r\n    let query = supabaseAdmin\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        order_number,\r\n        status,\r\n        payment_status,\r\n        total,\r\n        currency,\r\n        created_at,\r\n        updated_at,\r\n        shipping_address,\r\n        notes,\r\n        user_profiles!orders_user_id_fkey (\r\n          name,\r\n          email,\r\n          phone\r\n        )\r\n        ${include_items ? `,\r\n        order_items (\r\n          quantity,\r\n          unit_price,\r\n          total_price,\r\n          products (\r\n            name,\r\n            sku\r\n          )\r\n        )` : ''}\r\n      `);\r\n\r\n    // Aplicar filtros\r\n    if (filters?.status) {\r\n      query = query.eq('status', filters.status);\r\n    }\r\n\r\n    if (filters?.payment_status) {\r\n      query = query.eq('payment_status', filters.payment_status);\r\n    }\r\n\r\n    if (filters?.date_from) {\r\n      query = query.gte('created_at', filters.date_from);\r\n    }\r\n\r\n    if (filters?.date_to) {\r\n      query = query.lte('created_at', filters.date_to);\r\n    }\r\n\r\n    // Limitar a 1000 órdenes máximo para evitar timeouts\r\n    const { data: orders, error } = await query\r\n      .order('created_at', { ascending: false })\r\n      .limit(1000);\r\n\r\n    if (error) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error al exportar órdenes', { error });\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener datos para exportación' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Métricas de performance\r\n    const responseTime = Date.now() - startTime;\r\n    await metricsCollector.recordRequest('admin-bulk-export', 'GET', 200, responseTime);\r\n\r\n    const response: ApiResponse<{\r\n      orders: typeof orders;\r\n      export_info: {\r\n        format: string;\r\n        total_records: number;\r\n        generated_at: string;\r\n        filters_applied: typeof filters;\r\n      };\r\n    }> = {\r\n      data: {\r\n        orders,\r\n        export_info: {\r\n          format,\r\n          total_records: orders?.length || 0,\r\n          generated_at: new Date().toISOString(),\r\n          filters_applied: filters,\r\n        },\r\n      },\r\n      success: true,\r\n      error: null,\r\n    };\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Exportación masiva completada', {\r\n      format,\r\n      totalRecords: orders?.length || 0,\r\n      includeItems: include_items,\r\n      adminId: authResult.user.id,\r\n      responseTime,\r\n    });\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    metricsCollector.recordApiCall('admin-bulk-export', responseTime, 500);\r\n    \r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en bulk export', { error });\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}