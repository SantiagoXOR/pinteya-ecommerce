fe7393316c69d431e523e471f8355d92
// ===================================
// PINTEYA E-COMMERCE - RENDER MONITORING SYSTEM
// Sistema de monitoreo en tiempo real para detectar problemas de renderizado
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get clearAllAlerts () {
        return clearAllAlerts;
    },
    get exportMonitoringData () {
        return exportMonitoringData;
    },
    get getActiveAlerts () {
        return getActiveAlerts;
    },
    get getComponentMetrics () {
        return getComponentMetrics;
    },
    get useGlobalMonitoring () {
        return useGlobalMonitoring;
    },
    get useRenderMonitoring () {
        return useRenderMonitoring;
    },
    get withRenderMonitoring () {
        return withRenderMonitoring;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _usetoast = require("../use-toast");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// ===================================
// CONFIGURACIÓN POR DEFECTO
// ===================================
const DEFAULT_THRESHOLDS = {
    slowRenderThreshold: 16,
    maxRenderCount: 60,
    memoryThreshold: 100,
    errorThreshold: 5
};
const DEFAULT_OPTIONS = {
    enabled: process.env.NODE_ENV === 'development',
    thresholds: DEFAULT_THRESHOLDS,
    enableToasts: true,
    enableConsoleLogging: true,
    enableLocalStorage: true,
    sampleRate: 1.0
};
// ===================================
// ALMACENAMIENTO GLOBAL
// ===================================
class MonitoringStore {
    static getInstance() {
        if (!MonitoringStore.instance) {
            MonitoringStore.instance = new MonitoringStore();
        }
        return MonitoringStore.instance;
    }
    addListener(listener) {
        this.listeners.add(listener);
        return ()=>this.listeners.delete(listener);
    }
    notifyListeners() {
        // Debounce para evitar loops infinitos
        if (this.notifyTimeout) {
            clearTimeout(this.notifyTimeout);
        }
        this.notifyTimeout = setTimeout(()=>{
            const state = this.getState();
            this.listeners.forEach((listener)=>listener(state));
            this.notifyTimeout = null;
        }, 16); // 16ms = ~60fps
    }
    getState() {
        const totalRenders = Array.from(this.metrics.values()).reduce((sum, metric)=>sum + metric.renderCount, 0);
        const averageRenderTime = Array.from(this.metrics.values()).reduce((sum, metric, _, arr)=>sum + metric.averageRenderTime / arr.length, 0);
        return {
            isEnabled: true,
            metrics: new Map(this.metrics),
            alerts: [
                ...this.alerts
            ],
            globalStats: {
                totalComponents: this.metrics.size,
                totalRenders,
                averageRenderTime,
                activeAlerts: this.alerts.filter((alert)=>!alert.resolved).length
            }
        };
    }
    updateMetrics(componentName, metrics) {
        const existing = this.metrics.get(componentName);
        const updated = {
            componentName,
            renderCount: 0,
            averageRenderTime: 0,
            lastRenderTime: 0,
            slowRenders: 0,
            errorCount: 0,
            timestamp: Date.now(),
            ...existing,
            ...metrics
        };
        this.metrics.set(componentName, updated);
        this.notifyListeners();
    }
    addAlert(alert) {
        const newAlert = {
            ...alert,
            id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            timestamp: Date.now(),
            resolved: false
        };
        this.alerts.unshift(newAlert);
        // Mantener solo las últimas 100 alertas
        if (this.alerts.length > 100) {
            this.alerts = this.alerts.slice(0, 100);
        }
        this.notifyListeners();
    }
    resolveAlert(alertId) {
        const alert = this.alerts.find((a)=>a.id === alertId);
        if (alert) {
            ;
            alert.resolved = true;
            this.notifyListeners();
        }
    }
    clearAlerts() {
        this.alerts = [];
        this.notifyListeners();
    }
    exportData() {
        return JSON.stringify({
            metrics: Array.from(this.metrics.entries()),
            alerts: this.alerts,
            timestamp: Date.now()
        }, null, 2);
    }
    constructor(){
        this.metrics = new Map();
        this.alerts = [];
        this.listeners = new Set();
        this.notifyTimeout = null;
    }
}
const monitoringStore = MonitoringStore.getInstance();
// ===================================
// UTILIDADES DE PERFORMANCE
// ===================================
function measureRenderTime(fn) {
    const start = performance.now();
    const result = fn();
    const duration = performance.now() - start;
    return {
        result,
        duration
    };
}
function getMemoryUsage() {
    if ('memory' in performance) {
        return performance.memory.usedJSHeapSize / 1024 / 1024 // MB
        ;
    }
    return 0;
}
function shouldSample(sampleRate) {
    return Math.random() < sampleRate;
}
function useRenderMonitoring(options) {
    const opts = {
        ...DEFAULT_OPTIONS,
        ...options
    };
    const { toast } = (0, _usetoast.useToast)();
    // Referencias para tracking
    const renderCountRef = (0, _react.useRef)(0);
    const renderTimesRef = (0, _react.useRef)([]);
    const lastRenderTimeRef = (0, _react.useRef)(0);
    const slowRendersRef = (0, _react.useRef)(0);
    const errorCountRef = (0, _react.useRef)(0);
    const mountTimeRef = (0, _react.useRef)(Date.now());
    // Estado local
    const [monitoringState, setMonitoringState] = (0, _react.useState)(monitoringStore.getState());
    // ===================================
    // FUNCIONES DE ANÁLISIS
    // ===================================
    const analyzePerformance = (0, _react.useCallback)((renderTime)=>{
        const { componentName, thresholds } = opts;
        // Detectar render lento
        if (renderTime > thresholds.slowRenderThreshold) {
            slowRendersRef.current++;
            monitoringStore.addAlert({
                type: 'performance',
                severity: renderTime > thresholds.slowRenderThreshold * 2 ? 'high' : 'medium',
                message: `Render lento detectado: ${renderTime.toFixed(2)}ms (umbral: ${thresholds.slowRenderThreshold}ms)`,
                componentName,
                metrics: {
                    lastRenderTime: renderTime
                }
            });
            if (opts.enableConsoleLogging) {
                console.warn(`[RenderMonitoring] Slow render in ${componentName}: ${renderTime.toFixed(2)}ms`);
            }
        }
        // Detectar posible render loop
        const now = Date.now();
        const oneMinuteAgo = now - 60000;
        const recentRenders = renderTimesRef.current.filter((time)=>time > oneMinuteAgo).length;
        if (recentRenders > thresholds.maxRenderCount) {
            monitoringStore.addAlert({
                type: 'render-loop',
                severity: 'critical',
                message: `Posible render loop: ${recentRenders} renders en el último minuto (máximo: ${thresholds.maxRenderCount})`,
                componentName,
                metrics: {
                    renderCount: recentRenders
                }
            });
            if (opts.enableToasts) {
                toast({
                    title: 'Render Loop Detectado',
                    description: `${componentName}: ${recentRenders} renders/min`,
                    variant: 'destructive'
                });
            }
        }
        // Detectar uso excesivo de memoria
        const memoryUsage = getMemoryUsage();
        if (memoryUsage > thresholds.memoryThreshold) {
            monitoringStore.addAlert({
                type: 'memory',
                severity: 'high',
                message: `Uso de memoria elevado: ${memoryUsage.toFixed(2)}MB (umbral: ${thresholds.memoryThreshold}MB)`,
                componentName,
                metrics: {
                    memoryUsage
                }
            });
        }
    }, [
        opts,
        toast
    ]);
    // ===================================
    // FUNCIÓN DE TRACKING DE RENDER
    // ===================================
    const trackRender = (0, _react.useCallback)(()=>{
        if (!opts.enabled || !shouldSample(opts.sampleRate)) {
            return;
        }
        const renderTime = performance.now() - lastRenderTimeRef.current;
        renderCountRef.current++;
        renderTimesRef.current.push(Date.now());
        // Mantener solo los últimos 100 renders
        if (renderTimesRef.current.length > 100) {
            renderTimesRef.current = renderTimesRef.current.slice(-100);
        }
        // Calcular promedio de tiempo de render
        const recentTimes = renderTimesRef.current.slice(-10) // Últimos 10 renders
        ;
        const averageRenderTime = recentTimes.reduce((sum, time, i, arr)=>{
            if (i === 0) {
                return 0;
            }
            return sum + (time - arr[i - 1]) / (arr.length - 1);
        }, 0);
        // Actualizar métricas
        const metrics = {
            renderCount: renderCountRef.current,
            averageRenderTime,
            lastRenderTime: renderTime,
            slowRenders: slowRendersRef.current,
            errorCount: errorCountRef.current,
            memoryUsage: getMemoryUsage(),
            timestamp: Date.now()
        };
        monitoringStore.updateMetrics(opts.componentName, metrics);
        // Analizar performance
        analyzePerformance(renderTime);
        // Guardar en localStorage si está habilitado
        if (opts.enableLocalStorage) {
            try {
                localStorage.setItem(`render-monitoring-${opts.componentName}`, JSON.stringify(metrics));
            } catch (error) {
            // Ignorar errores de localStorage
            }
        }
        lastRenderTimeRef.current = performance.now();
    }, [
        opts,
        analyzePerformance
    ]);
    // ===================================
    // FUNCIÓN DE TRACKING DE ERRORES
    // ===================================
    const trackError = (0, _react.useCallback)((error, errorInfo)=>{
        if (!opts.enabled) {
            return;
        }
        errorCountRef.current++;
        monitoringStore.addAlert({
            type: 'error',
            severity: 'high',
            message: `Error en componente: ${error.message}`,
            componentName: opts.componentName,
            metrics: {
                errorCount: errorCountRef.current
            }
        });
        if (opts.enableConsoleLogging) {
            console.error(`[RenderMonitoring] Error in ${opts.componentName}:`, error, errorInfo);
        }
        if (opts.enableToasts) {
            toast({
                title: 'Error de Componente',
                description: `${opts.componentName}: ${error.message}`,
                variant: 'destructive'
            });
        }
    }, [
        opts,
        toast
    ]);
    // ===================================
    // EFECTOS
    // ===================================
    // Suscribirse a cambios del store
    (0, _react.useEffect)(()=>{
        const unsubscribe = monitoringStore.addListener(setMonitoringState);
        return unsubscribe;
    }, []);
    // Track render en cada render del componente
    (0, _react.useEffect)(()=>{
        trackRender();
    });
    // Cleanup al desmontar
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (opts.enableConsoleLogging) {
                const totalTime = Date.now() - mountTimeRef.current;
                console.log(`[RenderMonitoring] ${opts.componentName} unmounted after ${totalTime}ms, ` + `${renderCountRef.current} renders, ` + `${slowRendersRef.current} slow renders, ` + `${errorCountRef.current} errors`);
            }
        };
    }, [
        opts
    ]);
    // ===================================
    // API PÚBLICA
    // ===================================
    return {
        // Estado
        isEnabled: opts.enabled,
        metrics: monitoringState.metrics.get(opts.componentName),
        globalStats: monitoringState.globalStats,
        alerts: monitoringState.alerts.filter((alert)=>alert.componentName === opts.componentName),
        // Funciones
        trackError,
        trackRender,
        // Utilidades
        exportData: ()=>monitoringStore.exportData(),
        clearAlerts: ()=>monitoringStore.clearAlerts(),
        resolveAlert: (alertId)=>monitoringStore.resolveAlert(alertId)
    };
}
function useGlobalMonitoring() {
    const [state, setState] = (0, _react.useState)(monitoringStore.getState());
    (0, _react.useEffect)(()=>{
        const unsubscribe = monitoringStore.addListener(setState);
        return unsubscribe;
    }, []);
    return {
        ...state,
        exportData: ()=>monitoringStore.exportData(),
        clearAlerts: ()=>monitoringStore.clearAlerts(),
        resolveAlert: (alertId)=>monitoringStore.resolveAlert(alertId)
    };
}
function withRenderMonitoring(Component, options) {
    const componentName = Component.displayName || Component.name || 'UnknownComponent';
    const WrappedComponent = (props)=>{
        const { trackError } = useRenderMonitoring({
            ...options,
            componentName
        });
        // Error boundary simple
        (0, _react.useEffect)(()=>{
            const handleError = (event)=>{
                trackError(new Error(event.message));
            };
            window.addEventListener('error', handleError);
            return ()=>window.removeEventListener('error', handleError);
        }, [
            trackError
        ]);
        return _react.default.createElement(Component, props);
    };
    WrappedComponent.displayName = `withRenderMonitoring(${componentName})`;
    return WrappedComponent;
}
function getComponentMetrics(componentName) {
    return monitoringStore.getState().metrics.get(componentName);
}
function getActiveAlerts() {
    return monitoringStore.getState().alerts.filter((alert)=>!alert.resolved);
}
function exportMonitoringData() {
    return monitoringStore.exportData();
}
function clearAllAlerts() {
    monitoringStore.clearAlerts();
}

//# sourceMappingURL=data:application/json;base64,