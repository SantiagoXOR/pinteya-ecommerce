030303a2c51c71d107ec5db515edf1cc
"use strict";

/* istanbul ignore next */
function cov_2anwg1p8e5() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\route.ts";
  var hash = "9476cc159203a0896e7793a42c7a36ba8103f888";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "9": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "10": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 89
        }
      },
      "12": {
        start: {
          line: 34,
          column: 43
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 74
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "16": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "17": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 82
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "19": {
        start: {
          line: 45,
          column: 43
        },
        end: {
          line: 47,
          column: 23
        }
      },
      "20": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "21": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 107
        }
      },
      "22": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 52,
          column: 48
        }
      },
      "23": {
        start: {
          line: 54,
          column: 15
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "24": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 56,
          column: 56
        }
      },
      "25": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 78
        }
      },
      "26": {
        start: {
          line: 57,
          column: 70
        },
        end: {
          line: 57,
          column: 77
        }
      },
      "27": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 103
        }
      },
      "28": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 78
        }
      },
      "29": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "30": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 84
        }
      },
      "31": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 68
        }
      },
      "32": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "33": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "34": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 110
        }
      },
      "35": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "36": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 47
        }
      },
      "37": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "38": {
        start: {
          line: 84,
          column: 34
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "40": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 43
        }
      },
      "41": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 35
        }
      },
      "42": {
        start: {
          line: 96,
          column: 31
        },
        end: {
          line: 96,
          column: 119
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "44": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "45": {
        start: {
          line: 105,
          column: 41
        },
        end: {
          line: 105,
          column: 157
        }
      },
      "46": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "47": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 64
        }
      },
      "48": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "49": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "50": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 71
        }
      },
      "51": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "52": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 223,
          column: 5
        }
      },
      "53": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "54": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 110
        }
      },
      "55": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "56": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 43
        }
      },
      "57": {
        start: {
          line: 140,
          column: 24
        },
        end: {
          line: 140,
          column: 47
        }
      },
      "58": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "59": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "60": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "61": {
        start: {
          line: 151,
          column: 26
        },
        end: {
          line: 151,
          column: 35
        }
      },
      "62": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 41
        }
      },
      "63": {
        start: {
          line: 154,
          column: 120
        },
        end: {
          line: 154,
          column: 124
        }
      },
      "64": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "65": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "66": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 39
        }
      },
      "67": {
        start: {
          line: 164,
          column: 31
        },
        end: {
          line: 164,
          column: 122
        }
      },
      "68": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "69": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "70": {
        start: {
          line: 173,
          column: 42
        },
        end: {
          line: 173,
          column: 159
        }
      },
      "71": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "72": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "73": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "74": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 59
        }
      },
      "75": {
        start: {
          line: 188,
          column: 27
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "76": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 67
        }
      },
      "77": {
        start: {
          line: 199,
          column: 36
        },
        end: {
          line: 199,
          column: 67
        }
      },
      "78": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 70
        }
      },
      "79": {
        start: {
          line: 200,
          column: 37
        },
        end: {
          line: 200,
          column: 70
        }
      },
      "80": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 94
        }
      },
      "81": {
        start: {
          line: 201,
          column: 45
        },
        end: {
          line: 201,
          column: 94
        }
      },
      "82": {
        start: {
          line: 202,
          column: 48
        },
        end: {
          line: 202,
          column: 157
        }
      },
      "83": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "84": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 67
        }
      },
      "85": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "86": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "87": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 71
        }
      },
      "88": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "89": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 321,
          column: 5
        }
      },
      "90": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "91": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 113
        }
      },
      "92": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 234,
          column: 15
        }
      },
      "93": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 236,
          column: 43
        }
      },
      "94": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 238,
          column: 47
        }
      },
      "95": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "96": {
        start: {
          line: 240,
          column: 34
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "97": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "98": {
        start: {
          line: 249,
          column: 26
        },
        end: {
          line: 249,
          column: 35
        }
      },
      "99": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "100": {
        start: {
          line: 252,
          column: 49
        },
        end: {
          line: 252,
          column: 148
        }
      },
      "101": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 61
        }
      },
      "102": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 64
        }
      },
      "103": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "104": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 80
        }
      },
      "105": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "106": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "107": {
        start: {
          line: 268,
          column: 63
        },
        end: {
          line: 268,
          column: 192
        }
      },
      "108": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 74
        }
      },
      "109": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 69
        }
      },
      "110": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "111": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 88
        }
      },
      "112": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 277,
          column: 15
        }
      },
      "113": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 53
        }
      },
      "114": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 69
        }
      },
      "115": {
        start: {
          line: 283,
          column: 26
        },
        end: {
          line: 283,
          column: 107
        }
      },
      "116": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "117": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 76
        }
      },
      "118": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 290,
          column: 15
        }
      },
      "119": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "120": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 105
        }
      },
      "121": {
        start: {
          line: 296,
          column: 49
        },
        end: {
          line: 298,
          column: 23
        }
      },
      "122": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "123": {
        start: {
          line: 300,
          column: 37
        },
        end: {
          line: 300,
          column: 61
        }
      },
      "124": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 103
        }
      },
      "125": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 304,
          column: 42
        }
      },
      "126": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 79
        }
      },
      "127": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 47
        }
      },
      "128": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 313,
          column: 11
        }
      },
      "129": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 74
        }
      },
      "130": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "ensureOneDefaultAddress",
        decl: {
          start: {
            line: 30,
            column: 19
          },
          end: {
            line: 30,
            column: 42
          }
        },
        loc: {
          start: {
            line: 30,
            column: 52
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 57,
            column: 63
          }
        },
        loc: {
          start: {
            line: 57,
            column: 70
          },
          end: {
            line: 57,
            column: 77
          }
        },
        line: 57
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 18
          }
        },
        loc: {
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 70
      },
      "7": {
        name: "PUT",
        decl: {
          start: {
            line: 127,
            column: 15
          },
          end: {
            line: 127,
            column: 18
          }
        },
        loc: {
          start: {
            line: 127,
            column: 37
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 127
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 225,
            column: 15
          },
          end: {
            line: 225,
            column: 21
          }
        },
        loc: {
          start: {
            line: 225,
            column: 40
          },
          end: {
            line: 322,
            column: 1
          }
        },
        line: 225
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 65,
            column: 9
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 28
          }
        }, {
          start: {
            line: 48,
            column: 32
          },
          end: {
            line: 48,
            column: 55
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 15
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 65,
            column: 9
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 17
          }
        }, {
          start: {
            line: 155,
            column: 21
          },
          end: {
            line: 155,
            column: 28
          }
        }, {
          start: {
            line: 155,
            column: 32
          },
          end: {
            line: 155,
            column: 37
          }
        }, {
          start: {
            line: 155,
            column: 41
          },
          end: {
            line: 155,
            column: 53
          }
        }],
        line: 155
      },
      "13": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "14": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "15": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 19
          },
          end: {
            line: 192,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 19
          },
          end: {
            line: 192,
            column: 24
          }
        }, {
          start: {
            line: 192,
            column: 28
          },
          end: {
            line: 192,
            column: 30
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 28
          }
        }, {
          start: {
            line: 194,
            column: 32
          },
          end: {
            line: 194,
            column: 43
          }
        }],
        line: 194
      },
      "18": {
        loc: {
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 195,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 195,
            column: 34
          }
        }, {
          start: {
            line: 195,
            column: 38
          },
          end: {
            line: 195,
            column: 43
          }
        }],
        line: 195
      },
      "19": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "20": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 200,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 200,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "21": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 94
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 94
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "22": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "23": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "24": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "25": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "26": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "27": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "28": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "29": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "30": {
        loc: {
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 299,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 16
          },
          end: {
            line: 299,
            column: 34
          }
        }, {
          start: {
            line: 299,
            column: 38
          },
          end: {
            line: 299,
            column: 67
          }
        }],
        line: 299
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\addresses\\[id]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/auth';\r\nimport { ApiResponse } from '@/types/api';\r\n\r\ntype RouteContext = {\r\n  params: {\r\n    id: string;\r\n  };\r\n};\r\n\r\n// ===================================\r\n// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS\r\n// ===================================\r\n\r\n/**\r\n * Asegura que el usuario tenga exactamente una direcci\xF3n predeterminada\r\n */\r\nasync function ensureOneDefaultAddress(userId: string) {\r\n  try {\r\n    console.log('\uD83D\uDD0D Verificando direcciones predeterminadas para usuario:', userId);\r\n\r\n    // Obtener todas las direcciones predeterminadas del usuario\r\n    const { data: defaultAddresses } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, created_at')\r\n      .eq('user_id', userId)\r\n      .eq('is_default', true)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (!defaultAddresses) {\r\n      console.log('\u274C Error al obtener direcciones predeterminadas');\r\n      return;\r\n    }\r\n\r\n    const defaultCount = defaultAddresses.length;\r\n    console.log(`\uD83D\uDD0D Encontradas ${defaultCount} direcciones predeterminadas`);\r\n\r\n    if (defaultCount === 0) {\r\n      // No hay direcciones predeterminadas, marcar la m\xE1s reciente\r\n      const { data: allAddresses } = await supabaseAdmin\r\n        .from('user_addresses')\r\n        .select('id')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (allAddresses && allAddresses.length > 0) {\r\n        console.log('\uD83D\uDD04 Marcando direcci\xF3n m\xE1s reciente como predeterminada:', allAddresses[0].id);\r\n        await supabaseAdmin\r\n          .from('user_addresses')\r\n          .update({ is_default: true })\r\n          .eq('id', allAddresses[0].id);\r\n      }\r\n    } else if (defaultCount > 1) {\r\n      // Hay m\xFAltiples direcciones predeterminadas, mantener solo la m\xE1s reciente\r\n      const keepDefaultId = defaultAddresses[0].id;\r\n      const idsToUpdate = defaultAddresses.slice(1).map(addr => addr.id);\r\n\r\n      console.log(`\uD83D\uDD04 Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);\r\n      console.log('\uD83D\uDD04 Manteniendo como predeterminada:', keepDefaultId);\r\n\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .in('id', idsToUpdate);\r\n    } else {\r\n      console.log('\u2705 Usuario tiene exactamente una direcci\xF3n predeterminada');\r\n    }\r\n  } catch (error) {\r\n    console.error('\u274C Error en ensureOneDefaultAddress:', error);\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener una direcci\xF3n espec\xEDfica\r\n// ===================================\r\nexport async function GET(\r\n  request: NextRequest,\r\n  context: { params: Promise<RouteContext['params']> }\r\n) {\r\n  try {\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/addresses/[id]');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const params = await context.params;\r\n    const addressId = params.id;\r\n\r\n    // Obtener usuario\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('clerk_id', userId)\r\n      .single();\r\n\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener direcci\xF3n\r\n    const { data: address, error } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('*')\r\n      .eq('id', addressId)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al obtener direcci\xF3n:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener direcci\xF3n' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      address,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/addresses/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar direcci\xF3n\r\n// ===================================\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  context: { params: Promise<RouteContext['params']> }\r\n) {\r\n  try {\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/addresses/[id]');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    const params = await context.params;\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const addressId = params.id;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const {\r\n      name,\r\n      street,\r\n      city,\r\n      postal_code,\r\n      state,\r\n      country,\r\n      is_default,\r\n      latitude,\r\n      longitude,\r\n      validation_status\r\n    } = body;\r\n\r\n    if (!name || !street || !city || !postal_code) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre, direcci\xF3n, ciudad y c\xF3digo postal son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario\r\n    const userId = session.user.id;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la direcci\xF3n pertenece al usuario\r\n    const { data: existingAddress } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id')\r\n      .eq('id', addressId)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (!existingAddress) {\r\n      return NextResponse.json(\r\n        { error: 'Direcci\xF3n no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Si es direcci\xF3n por defecto, quitar el default de las otras\r\n    if (is_default) {\r\n      await supabaseAdmin\r\n        .from('user_addresses')\r\n        .update({ is_default: false })\r\n        .eq('user_id', user.id)\r\n        .neq('id', addressId);\r\n    }\r\n\r\n    // Actualizar direcci\xF3n\r\n    const updateData: any = {\r\n      name,\r\n      street,\r\n      city,\r\n      state: state || '',\r\n      postal_code,\r\n      country: country || 'Argentina',\r\n      is_default: is_default || false,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Incluir campos de validaci\xF3n si est\xE1n presentes\r\n    if (latitude !== undefined) updateData.latitude = latitude;\r\n    if (longitude !== undefined) updateData.longitude = longitude;\r\n    if (validation_status !== undefined) updateData.validation_status = validation_status;\r\n\r\n    const { data: updatedAddress, error } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .update(updateData)\r\n      .eq('id', addressId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar direcci\xF3n:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar direcci\xF3n' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      address: updatedAddress,\r\n      message: 'Direcci\xF3n actualizada correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/addresses/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Eliminar direcci\xF3n\r\n// ===================================\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  context: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar que el cliente administrativo est\xE9 disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en DELETE /api/user/addresses/[id]');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    const params = await context.params;\r\n\r\n    // Autenticaci\xF3n con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const addressId = params.id;\r\n\r\n    // Obtener usuario\r\n    console.log('\uD83D\uDD0D DELETE - Buscando usuario con id:', session.user.id);\r\n    const { data: user, error: userError } = await supabaseAdmin\r\n      .from('user_profiles')\r\n      .select('id')\r\n      .eq('id', session.user.id)\r\n      .single();\r\n\r\n    console.log('\uD83D\uDD0D DELETE - Usuario encontrado:', user);\r\n    console.log('\uD83D\uDD0D DELETE - Error de usuario:', userError);\r\n\r\n    if (!user) {\r\n      console.log('\u274C DELETE - Usuario no encontrado en la base de datos');\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la direcci\xF3n pertenece al usuario\r\n    console.log('\uD83D\uDD0D DELETE - Buscando direcci\xF3n:', { addressId, userId: user.id });\r\n    const { data: existingAddress, error: addressError } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .select('id, is_default')\r\n      .eq('id', addressId)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    console.log('\uD83D\uDD0D DELETE - Direcci\xF3n encontrada:', existingAddress);\r\n    console.log('\uD83D\uDD0D DELETE - Error de direcci\xF3n:', addressError);\r\n\r\n    if (!existingAddress) {\r\n      console.log('\u274C DELETE - Direcci\xF3n no encontrada o no pertenece al usuario');\r\n      return NextResponse.json(\r\n        { error: 'Direcci\xF3n no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar si se est\xE1 eliminando la \xFAnica direcci\xF3n predeterminada\r\n    const wasDefault = existingAddress.is_default;\r\n\r\n    // Eliminar direcci\xF3n\r\n    console.log('\uD83D\uDDD1\uFE0F DELETE - Eliminando direcci\xF3n:', addressId);\r\n    const { error } = await supabaseAdmin\r\n      .from('user_addresses')\r\n      .delete()\r\n      .eq('id', addressId);\r\n\r\n    if (error) {\r\n      console.error('\u274C DELETE - Error al eliminar direcci\xF3n:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar direcci\xF3n' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si se elimin\xF3 la direcci\xF3n predeterminada, marcar otra como predeterminada\r\n    if (wasDefault) {\r\n      console.log('\uD83D\uDD04 DELETE - Se elimin\xF3 la direcci\xF3n predeterminada, buscando otra para marcar');\r\n\r\n      // Buscar la direcci\xF3n m\xE1s reciente del usuario para marcarla como predeterminada\r\n      const { data: remainingAddresses } = await supabaseAdmin\r\n        .from('user_addresses')\r\n        .select('id')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (remainingAddresses && remainingAddresses.length > 0) {\r\n        const newDefaultId = remainingAddresses[0].id;\r\n        console.log('\uD83D\uDD04 DELETE - Marcando direcci\xF3n como nueva predeterminada:', newDefaultId);\r\n\r\n        await supabaseAdmin\r\n          .from('user_addresses')\r\n          .update({ is_default: true })\r\n          .eq('id', newDefaultId);\r\n      }\r\n    }\r\n\r\n    console.log('\u2705 DELETE - Direcci\xF3n eliminada exitosamente:', addressId);\r\n\r\n    // Asegurar que el usuario tenga exactamente una direcci\xF3n predeterminada\r\n    await ensureOneDefaultAddress(user.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Direcci\xF3n eliminada correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/user/addresses/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["DELETE", "GET", "PUT", "ensureOneDefaultAddress", "userId", "console", "log", "data", "defaultAddresses", "supabaseAdmin", "from", "select", "eq", "order", "ascending", "defaultCount", "length", "allAddresses", "limit", "id", "update", "is_default", "keepDefaultId", "idsToUpdate", "slice", "map", "addr", "in", "error", "request", "context", "NextResponse", "json", "status", "session", "auth", "user", "errorResponse", "success", "params", "addressId", "single", "address", "body", "name", "street", "city", "postal_code", "state", "country", "latitude", "longitude", "validation_status", "existingAddress", "neq", "updateData", "updated_at", "Date", "toISOString", "undefined", "updatedAddress", "message", "userError", "addressError", "wasDefault", "delete", "remainingAddresses", "newDefaultId"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9476cc159203a0896e7793a42c7a36ba8103f888"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2anwg1p8e5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2anwg1p8e5();
cov_2anwg1p8e5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2anwg1p8e5().f[0]++;
  cov_2anwg1p8e5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2anwg1p8e5().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_2anwg1p8e5().f[1]++;
    cov_2anwg1p8e5().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_2anwg1p8e5().f[2]++;
    cov_2anwg1p8e5().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_2anwg1p8e5().f[3]++;
    cov_2anwg1p8e5().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2anwg1p8e5().s[7]++, require("next/server"));
const _supabase =
/* istanbul ignore next */
(cov_2anwg1p8e5().s[8]++, require("../../../../../lib/integrations/supabase"));
const _auth =
/* istanbul ignore next */
(cov_2anwg1p8e5().s[9]++, require("../../../../../auth"));
// ===================================
// FUNCIONES HELPER PARA DIRECCIONES PREDETERMINADAS
// ===================================
/**
 * Asegura que el usuario tenga exactamente una dirección predeterminada
 */
async function ensureOneDefaultAddress(userId1) {
  /* istanbul ignore next */
  cov_2anwg1p8e5().f[4]++;
  cov_2anwg1p8e5().s[10]++;
  try {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[11]++;
    console.log('🔍 Verificando direcciones predeterminadas para usuario:', userId1);
    // Obtener todas las direcciones predeterminadas del usuario
    const {
      data: defaultAddresses
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[12]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, created_at').eq('user_id', userId1).eq('is_default', true).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[13]++;
    if (!defaultAddresses) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[0][0]++;
      cov_2anwg1p8e5().s[14]++;
      console.log('❌ Error al obtener direcciones predeterminadas');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[0][1]++;
    }
    const defaultCount =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[16]++, defaultAddresses.length);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[17]++;
    console.log(`🔍 Encontradas ${defaultCount} direcciones predeterminadas`);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[18]++;
    if (defaultCount === 0) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[1][0]++;
      // No hay direcciones predeterminadas, marcar la más reciente
      const {
        data: allAddresses
      } =
      /* istanbul ignore next */
      (cov_2anwg1p8e5().s[19]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('user_id', userId1).order('created_at', {
        ascending: false
      }).limit(1));
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[3][0]++, allAddresses) &&
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[3][1]++, allAddresses.length > 0)) {
        /* istanbul ignore next */
        cov_2anwg1p8e5().b[2][0]++;
        cov_2anwg1p8e5().s[21]++;
        console.log('🔄 Marcando dirección más reciente como predeterminada:', allAddresses[0].id);
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[22]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: true
        }).eq('id', allAddresses[0].id);
      } else
      /* istanbul ignore next */
      {
        cov_2anwg1p8e5().b[2][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[1][1]++;
      cov_2anwg1p8e5().s[23]++;
      if (defaultCount > 1) {
        /* istanbul ignore next */
        cov_2anwg1p8e5().b[4][0]++;
        // Hay múltiples direcciones predeterminadas, mantener solo la más reciente
        const keepDefaultId =
        /* istanbul ignore next */
        (cov_2anwg1p8e5().s[24]++, defaultAddresses[0].id);
        const idsToUpdate =
        /* istanbul ignore next */
        (cov_2anwg1p8e5().s[25]++, defaultAddresses.slice(1).map(addr => {
          /* istanbul ignore next */
          cov_2anwg1p8e5().f[5]++;
          cov_2anwg1p8e5().s[26]++;
          return addr.id;
        }));
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[27]++;
        console.log(`🔄 Desmarcando ${idsToUpdate.length} direcciones predeterminadas duplicadas`);
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[28]++;
        console.log('🔄 Manteniendo como predeterminada:', keepDefaultId);
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[29]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: false
        }).in('id', idsToUpdate);
      } else {
        /* istanbul ignore next */
        cov_2anwg1p8e5().b[4][1]++;
        cov_2anwg1p8e5().s[30]++;
        console.log('✅ Usuario tiene exactamente una dirección predeterminada');
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[31]++;
    console.error('❌ Error en ensureOneDefaultAddress:', error);
  }
}
async function GET(request, context) {
  /* istanbul ignore next */
  cov_2anwg1p8e5().f[6]++;
  cov_2anwg1p8e5().s[32]++;
  try {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[33]++;
    // Verificar que el cliente administrativo esté disponible
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[5][0]++;
      cov_2anwg1p8e5().s[34]++;
      console.error('Cliente administrativo de Supabase no disponible en GET /api/user/addresses/[id]');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[35]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[5][1]++;
    }
    // Autenticación con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[36]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[37]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[6][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_2anwg1p8e5().s[38]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[39]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[6][1]++;
    }
    const params =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[40]++, await context.params);
    const addressId =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[41]++, params.id);
    // Obtener usuario
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[42]++, await _supabase.supabaseAdmin.from('users').select('id').eq('clerk_id', userId).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[43]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[7][0]++;
      cov_2anwg1p8e5().s[44]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[7][1]++;
    }
    // Obtener dirección
    const {
      data: address,
      error
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[45]++, await _supabase.supabaseAdmin.from('user_addresses').select('*').eq('id', addressId).eq('user_id', user.id).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[46]++;
    if (error) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[8][0]++;
      cov_2anwg1p8e5().s[47]++;
      console.error('Error al obtener dirección:', error);
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[48]++;
      return _server.NextResponse.json({
        error: 'Error al obtener dirección'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[8][1]++;
    }
    cov_2anwg1p8e5().s[49]++;
    return _server.NextResponse.json({
      success: true,
      address
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[50]++;
    console.error('Error en GET /api/user/addresses/[id]:', error);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[51]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PUT(request, context) {
  /* istanbul ignore next */
  cov_2anwg1p8e5().f[7]++;
  cov_2anwg1p8e5().s[52]++;
  try {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[53]++;
    // Verificar que el cliente administrativo esté disponible
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[9][0]++;
      cov_2anwg1p8e5().s[54]++;
      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/addresses/[id]');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[55]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[9][1]++;
    }
    const params =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[56]++, await context.params);
    // Autenticación con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[57]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[58]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[10][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_2anwg1p8e5().s[59]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[60]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[10][1]++;
    }
    const addressId =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[61]++, params.id);
    const body =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[62]++, await request.json());
    // Validar datos requeridos
    const {
      name,
      street,
      city,
      postal_code,
      state,
      country,
      is_default,
      latitude,
      longitude,
      validation_status
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[63]++, body);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_2anwg1p8e5().b[12][0]++, !name) ||
    /* istanbul ignore next */
    (cov_2anwg1p8e5().b[12][1]++, !street) ||
    /* istanbul ignore next */
    (cov_2anwg1p8e5().b[12][2]++, !city) ||
    /* istanbul ignore next */
    (cov_2anwg1p8e5().b[12][3]++, !postal_code)) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[11][0]++;
      cov_2anwg1p8e5().s[65]++;
      return _server.NextResponse.json({
        error: 'Nombre, dirección, ciudad y código postal son requeridos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[11][1]++;
    }
    // Obtener usuario
    const userId1 =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[66]++, session.user.id);
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[67]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', userId1).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[68]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[13][0]++;
      cov_2anwg1p8e5().s[69]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[13][1]++;
    }
    // Verificar que la dirección pertenece al usuario
    const {
      data: existingAddress
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[70]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('id', addressId).eq('user_id', user.id).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[71]++;
    if (!existingAddress) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[14][0]++;
      cov_2anwg1p8e5().s[72]++;
      return _server.NextResponse.json({
        error: 'Dirección no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[14][1]++;
    }
    // Si es dirección por defecto, quitar el default de las otras
    cov_2anwg1p8e5().s[73]++;
    if (is_default) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[15][0]++;
      cov_2anwg1p8e5().s[74]++;
      await _supabase.supabaseAdmin.from('user_addresses').update({
        is_default: false
      }).eq('user_id', user.id).neq('id', addressId);
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[15][1]++;
    }
    // Actualizar dirección
    const updateData =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[75]++, {
      name,
      street,
      city,
      state:
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[16][0]++, state) ||
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[16][1]++, ''),
      postal_code,
      country:
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[17][0]++, country) ||
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[17][1]++, 'Argentina'),
      is_default:
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[18][0]++, is_default) ||
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[18][1]++, false),
      updated_at: new Date().toISOString()
    });
    // Incluir campos de validación si están presentes
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[76]++;
    if (latitude !== undefined) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[19][0]++;
      cov_2anwg1p8e5().s[77]++;
      updateData.latitude = latitude;
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[19][1]++;
    }
    cov_2anwg1p8e5().s[78]++;
    if (longitude !== undefined) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[20][0]++;
      cov_2anwg1p8e5().s[79]++;
      updateData.longitude = longitude;
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[20][1]++;
    }
    cov_2anwg1p8e5().s[80]++;
    if (validation_status !== undefined) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[21][0]++;
      cov_2anwg1p8e5().s[81]++;
      updateData.validation_status = validation_status;
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[21][1]++;
    }
    const {
      data: updatedAddress,
      error
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[82]++, await _supabase.supabaseAdmin.from('user_addresses').update(updateData).eq('id', addressId).select().single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[83]++;
    if (error) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[22][0]++;
      cov_2anwg1p8e5().s[84]++;
      console.error('Error al actualizar dirección:', error);
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[85]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar dirección'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[22][1]++;
    }
    cov_2anwg1p8e5().s[86]++;
    return _server.NextResponse.json({
      success: true,
      address: updatedAddress,
      message: 'Dirección actualizada correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[87]++;
    console.error('Error en PUT /api/user/addresses/[id]:', error);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[88]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, context) {
  /* istanbul ignore next */
  cov_2anwg1p8e5().f[8]++;
  cov_2anwg1p8e5().s[89]++;
  try {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[90]++;
    // Verificar que el cliente administrativo esté disponible
    if (!_supabase.supabaseAdmin) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[23][0]++;
      cov_2anwg1p8e5().s[91]++;
      console.error('Cliente administrativo de Supabase no disponible en DELETE /api/user/addresses/[id]');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[92]++;
      return _server.NextResponse.json({
        error: 'Servicio de base de datos no disponible'
      }, {
        status: 503
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[23][1]++;
    }
    const params =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[93]++, await context.params);
    // Autenticación con Clerk
    const session =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[94]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[95]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[24][0]++;
      const errorResponse =
      /* istanbul ignore next */
      (cov_2anwg1p8e5().s[96]++, {
        data: null,
        success: false,
        error: 'Usuario no autenticado'
      });
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[97]++;
      return _server.NextResponse.json(errorResponse, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[24][1]++;
    }
    const addressId =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[98]++, params.id);
    // Obtener usuario
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[99]++;
    console.log('🔍 DELETE - Buscando usuario con id:', session.user.id);
    const {
      data: user,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[100]++, await _supabase.supabaseAdmin.from('user_profiles').select('id').eq('id', session.user.id).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[101]++;
    console.log('🔍 DELETE - Usuario encontrado:', user);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[102]++;
    console.log('🔍 DELETE - Error de usuario:', userError);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[103]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[25][0]++;
      cov_2anwg1p8e5().s[104]++;
      console.log('❌ DELETE - Usuario no encontrado en la base de datos');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[105]++;
      return _server.NextResponse.json({
        error: 'Usuario no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[25][1]++;
    }
    // Verificar que la dirección pertenece al usuario
    cov_2anwg1p8e5().s[106]++;
    console.log('🔍 DELETE - Buscando dirección:', {
      addressId,
      userId: user.id
    });
    const {
      data: existingAddress,
      error: addressError
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[107]++, await _supabase.supabaseAdmin.from('user_addresses').select('id, is_default').eq('id', addressId).eq('user_id', user.id).single());
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[108]++;
    console.log('🔍 DELETE - Dirección encontrada:', existingAddress);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[109]++;
    console.log('🔍 DELETE - Error de dirección:', addressError);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[110]++;
    if (!existingAddress) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[26][0]++;
      cov_2anwg1p8e5().s[111]++;
      console.log('❌ DELETE - Dirección no encontrada o no pertenece al usuario');
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[112]++;
      return _server.NextResponse.json({
        error: 'Dirección no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[26][1]++;
    }
    // Verificar si se está eliminando la única dirección predeterminada
    const wasDefault =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[113]++, existingAddress.is_default);
    // Eliminar dirección
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[114]++;
    console.log('🗑️ DELETE - Eliminando dirección:', addressId);
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2anwg1p8e5().s[115]++, await _supabase.supabaseAdmin.from('user_addresses').delete().eq('id', addressId));
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[116]++;
    if (error) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[27][0]++;
      cov_2anwg1p8e5().s[117]++;
      console.error('❌ DELETE - Error al eliminar dirección:', error);
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[118]++;
      return _server.NextResponse.json({
        error: 'Error al eliminar dirección'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[27][1]++;
    }
    // Si se eliminó la dirección predeterminada, marcar otra como predeterminada
    cov_2anwg1p8e5().s[119]++;
    if (wasDefault) {
      /* istanbul ignore next */
      cov_2anwg1p8e5().b[28][0]++;
      cov_2anwg1p8e5().s[120]++;
      console.log('🔄 DELETE - Se eliminó la dirección predeterminada, buscando otra para marcar');
      // Buscar la dirección más reciente del usuario para marcarla como predeterminada
      const {
        data: remainingAddresses
      } =
      /* istanbul ignore next */
      (cov_2anwg1p8e5().s[121]++, await _supabase.supabaseAdmin.from('user_addresses').select('id').eq('user_id', user.id).order('created_at', {
        ascending: false
      }).limit(1));
      /* istanbul ignore next */
      cov_2anwg1p8e5().s[122]++;
      if (
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[30][0]++, remainingAddresses) &&
      /* istanbul ignore next */
      (cov_2anwg1p8e5().b[30][1]++, remainingAddresses.length > 0)) {
        /* istanbul ignore next */
        cov_2anwg1p8e5().b[29][0]++;
        const newDefaultId =
        /* istanbul ignore next */
        (cov_2anwg1p8e5().s[123]++, remainingAddresses[0].id);
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[124]++;
        console.log('🔄 DELETE - Marcando dirección como nueva predeterminada:', newDefaultId);
        /* istanbul ignore next */
        cov_2anwg1p8e5().s[125]++;
        await _supabase.supabaseAdmin.from('user_addresses').update({
          is_default: true
        }).eq('id', newDefaultId);
      } else
      /* istanbul ignore next */
      {
        cov_2anwg1p8e5().b[29][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2anwg1p8e5().b[28][1]++;
    }
    cov_2anwg1p8e5().s[126]++;
    console.log('✅ DELETE - Dirección eliminada exitosamente:', addressId);
    // Asegurar que el usuario tenga exactamente una dirección predeterminada
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[127]++;
    await ensureOneDefaultAddress(user.id);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[128]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Dirección eliminada correctamente'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[129]++;
    console.error('Error en DELETE /api/user/addresses/[id]:', error);
    /* istanbul ignore next */
    cov_2anwg1p8e5().s[130]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,