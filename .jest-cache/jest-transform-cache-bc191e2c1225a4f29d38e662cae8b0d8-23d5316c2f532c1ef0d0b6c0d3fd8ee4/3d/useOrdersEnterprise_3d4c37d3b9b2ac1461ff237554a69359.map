{"version":3,"names":["useOrdersEnterprise","initialFilters","cov_29libvtw51","f","queryClient","s","_reactquery","useQueryClient","filters","setFilters","_react","useState","page","limit","sort_by","sort_order","data","ordersData","isLoading","ordersLoading","error","ordersError","refetch","refetchOrders","useQuery","queryKey","queryFn","params","URLSearchParams","Object","entries","forEach","key","value","b","undefined","append","toString","response","fetch","ok","Error","status","statusText","json","staleTime","refetchOnWindowFocus","statsData","statsLoading","statsError","analyticsData","analyticsLoading","analyticsError","updateOrderStatusMutation","useMutation","mutationFn","orderId","notes","method","headers","body","JSON","stringify","onSuccess","invalidateQueries","bulkOperationMutation","orderIds","operation","order_ids","updateFilters","useCallback","newFilters","prev","resetFilters","updateOrderStatus","mutateAsync","bulkUpdateStatus","derivedMetrics","totalPages","pagination","total_pages","totalOrders","total_count","currentPage","hasNextPage","hasPrevPage","completionRate","completed_orders","total_orders","toFixed","cancellationRate","cancelled_orders","revenueGrowth","daily_orders","calculateGrowthRate","orders","stats","analytics","isLoadingOrders","isLoadingStats","isLoadingAnalytics","isUpdatingStatus","isPending","isBulkOperating","totalItems","hasNext","hasPrev","goToPage","nextPage","prevPage","dailyOrders","length","recent","slice","previous","recentAvg","reduce","sum","day","revenue","previousAvg"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useOrdersEnterprise.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: useOrdersEnterprise\r\n// Descripción: Hook personalizado para gestión enterprise de órdenes\r\n// Conecta con APIs reales del backend\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\nexport interface OrderItem {\r\n  id: string;\r\n  product_id: number;\r\n  product_name: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  total_price: number;\r\n  products?: {\r\n    id: number;\r\n    name: string;\r\n    images: string[];\r\n  };\r\n}\r\n\r\nexport interface Order {\r\n  id: string;\r\n  order_number: string;\r\n  status: OrderStatus;\r\n  payment_status: PaymentStatus;\r\n  total: number;\r\n  currency: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  shipping_address?: any;\r\n  notes?: string;\r\n  payer_info?: {\r\n    name?: string;\r\n    surname?: string;\r\n    email?: string;\r\n    phone?: string;\r\n  };\r\n  user_profiles?: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  order_items: OrderItem[];\r\n}\r\n\r\nexport type OrderStatus = \r\n  | 'pending' \r\n  | 'confirmed' \r\n  | 'processing' \r\n  | 'shipped' \r\n  | 'delivered' \r\n  | 'cancelled' \r\n  | 'refunded';\r\n\r\nexport type PaymentStatus = \r\n  | 'pending' \r\n  | 'paid' \r\n  | 'failed' \r\n  | 'refunded';\r\n\r\nexport interface OrderFilters {\r\n  page: number;\r\n  limit: number;\r\n  status?: OrderStatus;\r\n  payment_status?: PaymentStatus;\r\n  search?: string;\r\n  date_from?: string;\r\n  date_to?: string;\r\n  sort_by?: 'created_at' | 'total' | 'status';\r\n  sort_order?: 'asc' | 'desc';\r\n}\r\n\r\nexport interface OrderStats {\r\n  total_orders: number;\r\n  pending_orders: number;\r\n  completed_orders: number;\r\n  cancelled_orders: number;\r\n  total_revenue: number;\r\n  average_order_value: number;\r\n  orders_today: number;\r\n  revenue_today: number;\r\n}\r\n\r\nexport interface OrderAnalytics {\r\n  daily_orders: Array<{ date: string; count: number; revenue: number }>;\r\n  status_distribution: Array<{ status: string; count: number; percentage: number }>;\r\n  payment_methods: Array<{ method: string; count: number; revenue: number }>;\r\n  top_products: Array<{ product_name: string; quantity_sold: number; revenue: number }>;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useOrdersEnterprise(initialFilters?: Partial<OrderFilters>) {\r\n  const queryClient = useQueryClient();\r\n\r\n  // Hook inicializado correctamente\r\n\r\n  // Estado local para filtros\r\n  const [filters, setFilters] = useState<OrderFilters>({\r\n    page: 1,\r\n    limit: 25,\r\n    sort_by: 'created_at',\r\n    sort_order: 'desc',\r\n    ...initialFilters\r\n  });\r\n\r\n  // Filtros configurados\r\n\r\n  // =====================================================\r\n  // QUERIES\r\n  // =====================================================\r\n\r\n  // Query para lista de órdenes\r\n  const {\r\n    data: ordersData,\r\n    isLoading: ordersLoading,\r\n    error: ordersError,\r\n    refetch: refetchOrders\r\n  } = useQuery({\r\n    queryKey: ['admin-orders', filters],\r\n    queryFn: async () => {\r\n      const params = new URLSearchParams();\r\n      // Procesando filtros para la consulta\r\n\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        // Procesando parámetro de filtro\r\n        // FILTRAR OBJETOS: Solo agregar valores primitivos (string, number, boolean)\r\n        if (value !== undefined && value !== null && value !== '' && typeof value !== 'object') {\r\n          params.append(key, value.toString());\r\n          // Parámetro agregado\r\n        } else {\r\n          // Parámetro filtrado\r\n        }\r\n      });\r\n\r\n      // Consulta preparada\r\n\r\n      const response = await fetch(`/api/admin/orders?${params}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 30000, // 30 segundos\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // Query para estadísticas\r\n  const {\r\n    data: statsData,\r\n    isLoading: statsLoading,\r\n    error: statsError\r\n  } = useQuery({\r\n    queryKey: ['admin-orders-stats'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/admin/orders/stats');\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 60000, // 1 minuto\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // Query para analytics\r\n  const {\r\n    data: analyticsData,\r\n    isLoading: analyticsLoading,\r\n    error: analyticsError\r\n  } = useQuery({\r\n    queryKey: ['admin-orders-analytics'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/admin/orders/analytics');\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 300000, // 5 minutos\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // =====================================================\r\n  // MUTATIONS\r\n  // =====================================================\r\n\r\n  // Mutation para actualizar estado de orden\r\n  const updateOrderStatusMutation = useMutation({\r\n    mutationFn: async ({ orderId, status, notes }: { \r\n      orderId: string; \r\n      status: OrderStatus; \r\n      notes?: string;\r\n    }) => {\r\n      const response = await fetch(`/api/admin/orders/${orderId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status, notes })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-orders'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-orders-stats'] });\r\n    }\r\n  });\r\n\r\n  // Mutation para operaciones masivas\r\n  const bulkOperationMutation = useMutation({\r\n    mutationFn: async ({ \r\n      orderIds, \r\n      operation, \r\n      data \r\n    }: { \r\n      orderIds: string[]; \r\n      operation: 'update_status' | 'cancel' | 'refund'; \r\n      data?: any;\r\n    }) => {\r\n      const response = await fetch('/api/admin/orders/bulk', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ order_ids: orderIds, operation, data })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-orders'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-orders-stats'] });\r\n    }\r\n  });\r\n\r\n  // =====================================================\r\n  // FUNCIONES AUXILIARES\r\n  // =====================================================\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<OrderFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n  }, []);\r\n\r\n  const resetFilters = useCallback(() => {\r\n    setFilters({\r\n      page: 1,\r\n      limit: 25,\r\n      sort_by: 'created_at',\r\n      sort_order: 'desc'\r\n    });\r\n  }, []);\r\n\r\n  const updateOrderStatus = useCallback((\r\n    orderId: string, \r\n    status: OrderStatus, \r\n    notes?: string\r\n  ) => {\r\n    return updateOrderStatusMutation.mutateAsync({ orderId, status, notes });\r\n  }, [updateOrderStatusMutation]);\r\n\r\n  const bulkUpdateStatus = useCallback((\r\n    orderIds: string[], \r\n    status: OrderStatus\r\n  ) => {\r\n    return bulkOperationMutation.mutateAsync({\r\n      orderIds,\r\n      operation: 'update_status',\r\n      data: { status }\r\n    });\r\n  }, [bulkOperationMutation]);\r\n\r\n  // =====================================================\r\n  // MÉTRICAS DERIVADAS\r\n  // =====================================================\r\n\r\n  const derivedMetrics = {\r\n    totalPages: ordersData?.pagination?.total_pages || 0,\r\n    totalOrders: ordersData?.pagination?.total_count || 0,\r\n    currentPage: filters.page,\r\n    hasNextPage: filters.page < (ordersData?.pagination?.total_pages || 0),\r\n    hasPrevPage: filters.page > 1,\r\n    \r\n    // Estadísticas calculadas\r\n    completionRate: statsData?.data ? \r\n      ((statsData.data.completed_orders / statsData.data.total_orders) * 100).toFixed(1) : '0',\r\n    \r\n    cancellationRate: statsData?.data ? \r\n      ((statsData.data.cancelled_orders / statsData.data.total_orders) * 100).toFixed(1) : '0',\r\n    \r\n    revenueGrowth: analyticsData?.data?.daily_orders ? \r\n      calculateGrowthRate(analyticsData.data.daily_orders) : 0\r\n  };\r\n\r\n  // =====================================================\r\n  // RETURN\r\n  // =====================================================\r\n\r\n  return {\r\n    // Datos\r\n    orders: ordersData?.data || [],\r\n    stats: statsData?.data || null,\r\n    analytics: analyticsData?.data || null,\r\n    \r\n    // Estados de carga\r\n    isLoading: ordersLoading || statsLoading,\r\n    isLoadingOrders: ordersLoading,\r\n    isLoadingStats: statsLoading,\r\n    isLoadingAnalytics: analyticsLoading,\r\n    \r\n    // Errores\r\n    error: ordersError || statsError || analyticsError,\r\n    ordersError,\r\n    statsError,\r\n    analyticsError,\r\n    \r\n    // Filtros y paginación\r\n    filters,\r\n    updateFilters,\r\n    resetFilters,\r\n    \r\n    // Acciones\r\n    updateOrderStatus,\r\n    bulkUpdateStatus,\r\n    refetchOrders,\r\n    \r\n    // Estados de mutations\r\n    isUpdatingStatus: updateOrderStatusMutation.isPending,\r\n    isBulkOperating: bulkOperationMutation.isPending,\r\n    \r\n    // Métricas derivadas\r\n    derivedMetrics,\r\n    \r\n    // Paginación helpers\r\n    pagination: {\r\n      currentPage: filters.page,\r\n      totalPages: derivedMetrics.totalPages,\r\n      totalItems: derivedMetrics.totalOrders,\r\n      hasNext: derivedMetrics.hasNextPage,\r\n      hasPrev: derivedMetrics.hasPrevPage,\r\n      goToPage: (page: number) => updateFilters({ page }),\r\n      nextPage: () => derivedMetrics.hasNextPage && updateFilters({ page: filters.page + 1 }),\r\n      prevPage: () => derivedMetrics.hasPrevPage && updateFilters({ page: filters.page - 1 })\r\n    }\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction calculateGrowthRate(dailyOrders: Array<{ date: string; revenue: number }>): number {\r\n  if (dailyOrders.length < 2) {return 0;}\r\n  \r\n  const recent = dailyOrders.slice(-7); // Últimos 7 días\r\n  const previous = dailyOrders.slice(-14, -7); // 7 días anteriores\r\n  \r\n  const recentAvg = recent.reduce((sum, day) => sum + day.revenue, 0) / recent.length;\r\n  const previousAvg = previous.reduce((sum, day) => sum + day.revenue, 0) / previous.length;\r\n  \r\n  if (previousAvg === 0) {return 0;}\r\n  \r\n  return ((recentAvg - previousAvg) / previousAvg) * 100;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}