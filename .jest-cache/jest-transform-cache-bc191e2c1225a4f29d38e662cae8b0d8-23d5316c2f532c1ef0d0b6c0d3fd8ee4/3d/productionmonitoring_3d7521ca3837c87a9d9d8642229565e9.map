{"version":3,"names":["cov_2ave7gvw2x","actualCoverage","s","ProductionMonitor","f","productionMonitor","productionMonitoringConfig","useProductionMonitoring","webVitals","LCP","good","needsImprovement","FID","CLS","performance","bundleSize","firstLoadJS","buildTime","apiResponseTime","endpoints","metrics","alerts","healthCheck","analytics","enabled","process","env","NODE_ENV","channels","thresholds","errorRate","responseTime","memoryUsage","retention","logs","constructor","config","b","metricsBuffer","flushInterval","startAutoFlush","trackWebVital","name","value","id","metric","timestamp","Date","now","rating","getRating","addMetric","sendAlert","trackPerformance","enrichedMetric","sessionId","getSessionId","userAgent","navigator","checkPerformanceBudget","trackError","error","context","errorMetric","message","stack","severity","getErrorSeverity","checks","api","checkApiHealth","database","checkDatabaseHealth","memory","checkMemoryUsage","checkPerformanceHealth","healthyChecks","Object","values","filter","Boolean","length","totalChecks","keys","status","push","flushMetrics","fetch","method","headers","body","JSON","stringify","console","unshift","setInterval","performance1","type","alert","getAlertSeverity","forEach","channel","sendToChannel","warn","catch","window","sessionStorage","getItem","Math","random","toString","substring","setItem","includes","response","timeout","ok","usageRatio","usedJSHeapSize","jsHeapSizeLimit","recentMetrics","m","destroy","clearInterval","bind"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\config\\production-monitoring.ts"],"sourcesContent":["// ===================================\r\n// PRODUCTION MONITORING CONFIGURATION\r\n// Sistema completo de monitoreo para producci√≥n\r\n// ===================================\r\n\r\nexport interface ProductionMonitoringConfig {\r\n  // Core Web Vitals thresholds\r\n  webVitals: {\r\n    LCP: { good: number; needsImprovement: number };\r\n    FID: { good: number; needsImprovement: number };\r\n    CLS: { good: number; needsImprovement: number };\r\n  };\r\n  \r\n  // Performance budgets\r\n  performance: {\r\n    bundleSize: number; // KB\r\n    firstLoadJS: number; // KB\r\n    buildTime: number; // ms\r\n    apiResponseTime: number; // ms\r\n  };\r\n  \r\n  // Monitoring endpoints\r\n  endpoints: {\r\n    metrics: string;\r\n    alerts: string;\r\n    healthCheck: string;\r\n    analytics: string;\r\n  };\r\n  \r\n  // Alert configuration\r\n  alerts: {\r\n    enabled: boolean;\r\n    channels: string[];\r\n    thresholds: {\r\n      errorRate: number;\r\n      responseTime: number;\r\n      memoryUsage: number;\r\n    };\r\n  };\r\n  \r\n  // Data retention\r\n  retention: {\r\n    metrics: number; // days\r\n    logs: number; // days\r\n    analytics: number; // days\r\n  };\r\n}\r\n\r\nexport const productionMonitoringConfig: ProductionMonitoringConfig = {\r\n  webVitals: {\r\n    LCP: { good: 2500, needsImprovement: 4000 },\r\n    FID: { good: 100, needsImprovement: 300 },\r\n    CLS: { good: 0.1, needsImprovement: 0.25 },\r\n  },\r\n  \r\n  performance: {\r\n    bundleSize: 4096, // 4MB\r\n    firstLoadJS: 600, // 600KB\r\n    buildTime: 45000, // 45s\r\n    apiResponseTime: 2000, // 2s\r\n  },\r\n  \r\n  endpoints: {\r\n    metrics: '/api/admin/performance/metrics',\r\n    alerts: '/api/admin/monitoring/alerts',\r\n    healthCheck: '/api/health',\r\n    analytics: '/api/analytics/events',\r\n  },\r\n  \r\n  alerts: {\r\n    enabled: process.env.NODE_ENV === 'production',\r\n    channels: ['console', 'webhook'],\r\n    thresholds: {\r\n      errorRate: 0.05, // 5%\r\n      responseTime: 2000, // 2s\r\n      memoryUsage: 0.85, // 85%\r\n    },\r\n  },\r\n  \r\n  retention: {\r\n    metrics: 30, // 30 days\r\n    logs: 7, // 7 days\r\n    analytics: 90, // 90 days\r\n  },\r\n};\r\n\r\n// ===================================\r\n// MONITORING UTILITIES\r\n// ===================================\r\n\r\nexport class ProductionMonitor {\r\n  private config: ProductionMonitoringConfig;\r\n  private metricsBuffer: any[] = [];\r\n  private flushInterval: NodeJS.Timeout | null = null;\r\n  \r\n  constructor(config: ProductionMonitoringConfig = productionMonitoringConfig) {\r\n    this.config = config;\r\n    this.startAutoFlush();\r\n  }\r\n  \r\n  // Core Web Vitals tracking\r\n  trackWebVital(name: string, value: number, id: string) {\r\n    const metric = {\r\n      name,\r\n      value,\r\n      id,\r\n      timestamp: Date.now(),\r\n      rating: this.getRating(name, value),\r\n    };\r\n    \r\n    this.addMetric(metric);\r\n    \r\n    // Send alert if poor performance\r\n    if (metric.rating === 'poor') {\r\n      this.sendAlert(`Poor ${name} detected: ${value}`, 'performance');\r\n    }\r\n  }\r\n  \r\n  // Performance metrics tracking\r\n  trackPerformance(metric: {\r\n    name: string;\r\n    value: number;\r\n    category: string;\r\n    metadata?: Record<string, any>;\r\n  }) {\r\n    const enrichedMetric = {\r\n      ...metric,\r\n      timestamp: Date.now(),\r\n      sessionId: this.getSessionId(),\r\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'server',\r\n    };\r\n    \r\n    this.addMetric(enrichedMetric);\r\n    \r\n    // Check against performance budgets\r\n    this.checkPerformanceBudget(enrichedMetric);\r\n  }\r\n  \r\n  // Error tracking\r\n  trackError(error: Error, context?: Record<string, any>) {\r\n    const errorMetric = {\r\n      name: 'error',\r\n      message: error.message,\r\n      stack: error.stack,\r\n      context,\r\n      timestamp: Date.now(),\r\n      severity: this.getErrorSeverity(error),\r\n    };\r\n    \r\n    this.addMetric(errorMetric);\r\n    this.sendAlert(`Error: ${error.message}`, 'error');\r\n  }\r\n  \r\n  // Health check\r\n  async healthCheck(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    checks: Record<string, boolean>;\r\n    timestamp: number;\r\n  }> {\r\n    const checks = {\r\n      api: await this.checkApiHealth(),\r\n      database: await this.checkDatabaseHealth(),\r\n      memory: this.checkMemoryUsage(),\r\n      performance: this.checkPerformanceHealth(),\r\n    };\r\n    \r\n    const healthyChecks = Object.values(checks).filter(Boolean).length;\r\n    const totalChecks = Object.keys(checks).length;\r\n    \r\n    let status: 'healthy' | 'degraded' | 'unhealthy';\r\n    if (healthyChecks === totalChecks) {\r\n      status = 'healthy';\r\n    } else if (healthyChecks >= totalChecks * 0.7) {\r\n      status = 'degraded';\r\n    } else {\r\n      status = 'unhealthy';\r\n    }\r\n    \r\n    return {\r\n      status,\r\n      checks,\r\n      timestamp: Date.now(),\r\n    };\r\n  }\r\n  \r\n  // Private methods\r\n  private addMetric(metric: any) {\r\n    this.metricsBuffer.push(metric);\r\n    \r\n    // Flush if buffer is full\r\n    if (this.metricsBuffer.length >= 50) {\r\n      this.flushMetrics();\r\n    }\r\n  }\r\n  \r\n  private async flushMetrics() {\r\n    if (this.metricsBuffer.length === 0) {return;}\r\n    \r\n    const metrics = [...this.metricsBuffer];\r\n    this.metricsBuffer = [];\r\n    \r\n    try {\r\n      await fetch(this.config.endpoints.metrics, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ metrics }),\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to flush metrics:', error);\r\n      // Re-add metrics to buffer for retry\r\n      this.metricsBuffer.unshift(...metrics);\r\n    }\r\n  }\r\n  \r\n  private startAutoFlush() {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushMetrics();\r\n    }, 30000); // 30 seconds\r\n  }\r\n  \r\n  private getRating(name: string, value: number): 'good' | 'needs-improvement' | 'poor' {\r\n    const thresholds = this.config.webVitals[name as keyof typeof this.config.webVitals];\r\n    if (!thresholds) {return 'good';}\r\n    \r\n    if (value <= thresholds.good) {return 'good';}\r\n    if (value <= thresholds.needsImprovement) {return 'needs-improvement';}\r\n    return 'poor';\r\n  }\r\n  \r\n  private checkPerformanceBudget(metric: any) {\r\n    const { performance } = this.config;\r\n    \r\n    if (metric.name === 'bundleSize' && metric.value > performance.bundleSize) {\r\n      this.sendAlert(`Bundle size exceeded: ${metric.value}KB > ${performance.bundleSize}KB`, 'budget');\r\n    }\r\n    \r\n    if (metric.name === 'apiResponseTime' && metric.value > performance.apiResponseTime) {\r\n      this.sendAlert(`API response time exceeded: ${metric.value}ms > ${performance.apiResponseTime}ms`, 'budget');\r\n    }\r\n  }\r\n  \r\n  private sendAlert(message: string, type: string) {\r\n    if (!this.config.alerts.enabled) {return;}\r\n    \r\n    const alert = {\r\n      message,\r\n      type,\r\n      timestamp: Date.now(),\r\n      severity: this.getAlertSeverity(type),\r\n    };\r\n    \r\n    // Send to configured channels\r\n    this.config.alerts.channels.forEach(channel => {\r\n      this.sendToChannel(channel, alert);\r\n    });\r\n  }\r\n  \r\n  private sendToChannel(channel: string, alert: any) {\r\n    switch (channel) {\r\n      case 'console':\r\n        console.warn(`[ALERT] ${alert.message}`);\r\n        break;\r\n      case 'webhook':\r\n        // Send to webhook endpoint\r\n        fetch(this.config.endpoints.alerts, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(alert),\r\n        }).catch(console.error);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  private getSessionId(): string {\r\n    if (typeof window !== 'undefined') {\r\n      let sessionId = sessionStorage.getItem('monitoring-session-id');\r\n      if (!sessionId) {\r\n        sessionId = Math.random().toString(36).substring(2, 15);\r\n        sessionStorage.setItem('monitoring-session-id', sessionId);\r\n      }\r\n      return sessionId;\r\n    }\r\n    return 'server';\r\n  }\r\n  \r\n  private getErrorSeverity(error: Error): 'low' | 'medium' | 'high' | 'critical' {\r\n    if (error.message.includes('Network') || error.message.includes('fetch')) {\r\n      return 'medium';\r\n    }\r\n    if (error.message.includes('TypeError') || error.message.includes('ReferenceError')) {\r\n      return 'high';\r\n    }\r\n    if (error.message.includes('ChunkLoadError') || error.message.includes('Loading')) {\r\n      return 'critical';\r\n    }\r\n    return 'low';\r\n  }\r\n  \r\n  private getAlertSeverity(type: string): 'info' | 'warning' | 'error' | 'critical' {\r\n    switch (type) {\r\n      case 'performance': return 'warning';\r\n      case 'error': return 'error';\r\n      case 'budget': return 'warning';\r\n      default: return 'info';\r\n    }\r\n  }\r\n  \r\n  private async checkApiHealth(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(this.config.endpoints.healthCheck, {\r\n        method: 'GET',\r\n        timeout: 5000,\r\n      } as any);\r\n      return response.ok;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  private async checkDatabaseHealth(): Promise<boolean> {\r\n    try {\r\n      // Simple database check - could be enhanced\r\n      const response = await fetch('/api/health/database', {\r\n        method: 'GET',\r\n        timeout: 5000,\r\n      } as any);\r\n      return response.ok;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  private checkMemoryUsage(): boolean {\r\n    if (typeof performance !== 'undefined' && 'memory' in performance) {\r\n      const memory = (performance as any).memory;\r\n      const usageRatio = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\r\n      return usageRatio < this.config.alerts.thresholds.memoryUsage;\r\n    }\r\n    return true; // Assume healthy if can't measure\r\n  }\r\n  \r\n  private checkPerformanceHealth(): boolean {\r\n    // Check recent performance metrics\r\n    const recentMetrics = this.metricsBuffer.filter(\r\n      metric => Date.now() - metric.timestamp < 300000 // 5 minutes\r\n    );\r\n    \r\n    const errorRate = recentMetrics.filter(m => m.name === 'error').length / recentMetrics.length;\r\n    return errorRate < this.config.alerts.thresholds.errorRate;\r\n  }\r\n  \r\n  // Cleanup\r\n  destroy() {\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n    }\r\n    this.flushMetrics(); // Final flush\r\n  }\r\n}\r\n\r\n// Global monitor instance\r\nexport const productionMonitor = new ProductionMonitor();\r\n\r\n// React hook for easy integration\r\nexport function useProductionMonitoring() {\r\n  return {\r\n    trackWebVital: productionMonitor.trackWebVital.bind(productionMonitor),\r\n    trackPerformance: productionMonitor.trackPerformance.bind(productionMonitor),\r\n    trackError: productionMonitor.trackError.bind(productionMonitor),\r\n    healthCheck: productionMonitor.healthCheck.bind(productionMonitor),\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}