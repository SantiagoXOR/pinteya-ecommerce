743d300fe78639f57fb14679988f4e5a
// ===================================
// PINTEYA E-COMMERCE - LOGGING ESTRUCTURADO DE SEGURIDAD
// ===================================
// Sistema de logging estructurado para eventos de seguridad
// con contexto enriquecido y formato consistente
"use strict";

/* istanbul ignore next */
function cov_20bcbv3fi5() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\logging\\security-logger.ts";
  var hash = "03ccfb838a0d9f14a36af5c7145d939f2aae8e62";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\logging\\security-logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 29,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 24
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 38
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 27
        }
      },
      "8": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "9": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 60
        }
      },
      "10": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 34,
          column: 105
        }
      },
      "11": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 36,
          column: 123
        }
      },
      "12": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "13": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "14": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 94
        }
      },
      "15": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "16": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 30
        }
      },
      "17": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 30
        }
      },
      "18": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "19": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "20": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "21": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 67
        }
      },
      "22": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "23": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 91,
          column: 50
        }
      },
      "24": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 43
        }
      },
      "25": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 42
        }
      },
      "26": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "27": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "28": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 51
        }
      },
      "29": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "30": {
        start: {
          line: 102,
          column: 27
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "31": {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 35
        }
      },
      "32": {
        start: {
          line: 109,
          column: 26
        },
        end: {
          line: 109,
          column: 48
        }
      },
      "33": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 92
        }
      },
      "34": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 34
        }
      },
      "35": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "36": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "37": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "38": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "39": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "40": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "41": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 195,
          column: 53
        }
      },
      "42": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "43": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 230,
          column: 6
        }
      },
      "44": {
        start: {
          line: 206,
          column: 50
        },
        end: {
          line: 209,
          column: 33
        }
      },
      "45": {
        start: {
          line: 210,
          column: 47
        },
        end: {
          line: 213,
          column: 24
        }
      },
      "46": {
        start: {
          line: 214,
          column: 54
        },
        end: {
          line: 217,
          column: 32
        }
      },
      "47": {
        start: {
          line: 218,
          column: 56
        },
        end: {
          line: 221,
          column: 32
        }
      },
      "48": {
        start: {
          line: 222,
          column: 49
        },
        end: {
          line: 225,
          column: 32
        }
      },
      "49": {
        start: {
          line: 226,
          column: 45
        },
        end: {
          line: 229,
          column: 31
        }
      },
      "50": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 273,
          column: 1
        }
      },
      "51": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "52": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "53": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "54": {
        start: {
          line: 274,
          column: 17
        },
        end: {
          line: 274,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 34
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "extractSecurityContext",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 31
          }
        },
        loc: {
          start: {
            line: 30,
            column: 65
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 26
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 51
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 83
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 15
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 95
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 47
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 118
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 44
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 130
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 51
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 143
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 53
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 168
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 42
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 181
      },
      "16": {
        name: "createSecurityLogger",
        decl: {
          start: {
            line: 196,
            column: 9
          },
          end: {
            line: 196,
            column: 29
          }
        },
        loc: {
          start: {
            line: 196,
            column: 58
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 196
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 206,
            column: 24
          },
          end: {
            line: 206,
            column: 25
          }
        },
        loc: {
          start: {
            line: 206,
            column: 50
          },
          end: {
            line: 209,
            column: 33
          }
        },
        line: 206
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 210,
            column: 30
          },
          end: {
            line: 210,
            column: 31
          }
        },
        loc: {
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 213,
            column: 24
          }
        },
        line: 210
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 214,
            column: 29
          },
          end: {
            line: 214,
            column: 30
          }
        },
        loc: {
          start: {
            line: 214,
            column: 54
          },
          end: {
            line: 217,
            column: 32
          }
        },
        line: 214
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 32
          }
        },
        loc: {
          start: {
            line: 218,
            column: 56
          },
          end: {
            line: 221,
            column: 32
          }
        },
        line: 218
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 222,
            column: 24
          },
          end: {
            line: 222,
            column: 25
          }
        },
        loc: {
          start: {
            line: 222,
            column: 49
          },
          end: {
            line: 225,
            column: 32
          }
        },
        line: 222
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 226,
            column: 21
          },
          end: {
            line: 226,
            column: 22
          }
        },
        loc: {
          start: {
            line: 226,
            column: 45
          },
          end: {
            line: 229,
            column: 31
          }
        },
        line: 226
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 233,
            column: 10
          },
          end: {
            line: 233,
            column: 11
          }
        },
        loc: {
          start: {
            line: 233,
            column: 35
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 233
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 246,
            column: 10
          },
          end: {
            line: 246,
            column: 11
          }
        },
        loc: {
          start: {
            line: 246,
            column: 35
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 246
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 259,
            column: 11
          },
          end: {
            line: 259,
            column: 12
          }
        },
        loc: {
          start: {
            line: 259,
            column: 43
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 259
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 30,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 30,
            column: 61
          },
          end: {
            line: 30,
            column: 63
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 34,
            column: 57
          }
        }, {
          start: {
            line: 34,
            column: 60
          },
          end: {
            line: 34,
            column: 105
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 60
          },
          end: {
            line: 34,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 60
          },
          end: {
            line: 34,
            column: 92
          }
        }, {
          start: {
            line: 34,
            column: 96
          },
          end: {
            line: 34,
            column: 105
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 22
          },
          end: {
            line: 36,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 22
          },
          end: {
            line: 36,
            column: 57
          }
        }, {
          start: {
            line: 36,
            column: 61
          },
          end: {
            line: 36,
            column: 123
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 52
          }
        }, {
          start: {
            line: 39,
            column: 56
          },
          end: {
            line: 39,
            column: 65
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 19
          },
          end: {
            line: 65,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 33
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 25
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 46
          },
          end: {
            line: 67,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 87
          },
          end: {
            line: 67,
            column: 88
          }
        }, {
          start: {
            line: 67,
            column: 91
          },
          end: {
            line: 67,
            column: 92
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 72,
            column: 30
          }
        }, {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 74,
            column: 30
          }
        }, {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 31
          }
        }, {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 78,
            column: 31
          }
        }, {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 80,
            column: 30
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 84,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 84,
            column: 55
          }
        }, {
          start: {
            line: 84,
            column: 59
          },
          end: {
            line: 84,
            column: 67
          }
        }],
        line: 84
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 45
          }
        }, {
          start: {
            line: 91,
            column: 49
          },
          end: {
            line: 91,
            column: 50
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 120,
            column: 18
          },
          end: {
            line: 120,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 28
          },
          end: {
            line: 120,
            column: 42
          }
        }, {
          start: {
            line: 120,
            column: 45
          },
          end: {
            line: 120,
            column: 59
          }
        }],
        line: 120
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 22
          },
          end: {
            line: 121,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 32
          },
          end: {
            line: 121,
            column: 37
          }
        }, {
          start: {
            line: 121,
            column: 40
          },
          end: {
            line: 121,
            column: 48
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 21
          },
          end: {
            line: 122,
            column: 164
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 31
          },
          end: {
            line: 122,
            column: 98
          }
        }, {
          start: {
            line: 122,
            column: 101
          },
          end: {
            line: 122,
            column: 164
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 64
          },
          end: {
            line: 122,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 64
          },
          end: {
            line: 122,
            column: 78
          }
        }, {
          start: {
            line: 122,
            column: 82
          },
          end: {
            line: 122,
            column: 96
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 122,
            column: 130
          },
          end: {
            line: 122,
            column: 162
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 130
          },
          end: {
            line: 122,
            column: 144
          }
        }, {
          start: {
            line: 122,
            column: 148
          },
          end: {
            line: 122,
            column: 162
          }
        }],
        line: 122
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 202,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 30
          },
          end: {
            line: 197,
            column: 80
          }
        }, {
          start: {
            line: 197,
            column: 83
          },
          end: {
            line: 202,
            column: 5
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 233,
            column: 20
          },
          end: {
            line: 233,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 233,
            column: 30
          },
          end: {
            line: 233,
            column: 32
          }
        }],
        line: 233
      },
      "19": {
        loc: {
          start: {
            line: 246,
            column: 20
          },
          end: {
            line: 246,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 246,
            column: 30
          },
          end: {
            line: 246,
            column: 32
          }
        }],
        line: 246
      },
      "20": {
        loc: {
          start: {
            line: 259,
            column: 28
          },
          end: {
            line: 259,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 259,
            column: 38
          },
          end: {
            line: 259,
            column: 40
          }
        }],
        line: 259
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\logging\\security-logger.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - LOGGING ESTRUCTURADO DE SEGURIDAD\r\n// ===================================\r\n// Sistema de logging estructurado para eventos de seguridad\r\n// con contexto enriquecido y formato consistente\r\n\r\nimport { NextRequest } from 'next/server';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface SecurityLogContext {\r\n  userId?: string;\r\n  sessionId?: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  endpoint: string;\r\n  method: string;\r\n  timestamp: string;\r\n  requestId?: string;\r\n}\r\n\r\nexport interface SecurityEvent {\r\n  type: SecurityEventType;\r\n  severity: SecuritySeverity;\r\n  message: string;\r\n  context: SecurityLogContext;\r\n  metadata?: Record<string, any>;\r\n  error?: Error;\r\n}\r\n\r\nexport type SecurityEventType = \r\n  | 'auth_attempt'\r\n  | 'auth_success'\r\n  | 'auth_failure'\r\n  | 'rate_limit_exceeded'\r\n  | 'permission_denied'\r\n  | 'suspicious_activity'\r\n  | 'data_access'\r\n  | 'admin_action'\r\n  | 'api_error'\r\n  | 'validation_error'\r\n  | 'security_scan'\r\n  | 'unauthorized_access';\r\n\r\nexport type SecuritySeverity = 'low' | 'medium' | 'high' | 'critical';\r\n\r\nexport interface SecurityLogger {\r\n  log(event: SecurityEvent): void;\r\n  logAuthAttempt(context: SecurityLogContext, success: boolean, metadata?: Record<string, any>): void;\r\n  logRateLimitExceeded(context: SecurityLogContext, metadata?: Record<string, any>): void;\r\n  logPermissionDenied(context: SecurityLogContext, resource: string, action: string): void;\r\n  logSuspiciousActivity(context: SecurityLogContext, reason: string, metadata?: Record<string, any>): void;\r\n  logAdminAction(context: SecurityLogContext, action: string, metadata?: Record<string, any>): void;\r\n  logApiError(context: SecurityLogContext, error: Error, metadata?: Record<string, any>): void;\r\n}\r\n\r\n// ===================================\r\n// EXTRACTOR DE CONTEXTO DE REQUEST\r\n// ===================================\r\n\r\nexport function extractSecurityContext(\r\n  request: NextRequest,\r\n  additionalContext: Partial<SecurityLogContext> = {}\r\n): SecurityLogContext {\r\n  const url = new URL(request.url);\r\n  \r\n  // Extraer IP de headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const ip = forwarded \r\n    ? forwarded.split(',')[0].trim() \r\n    : request.headers.get('x-real-ip') || 'unknown';\r\n  \r\n  // Generar request ID \xFAnico\r\n  const requestId = request.headers.get('x-request-id') || \r\n    `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  return {\r\n    ip,\r\n    userAgent: request.headers.get('user-agent') || 'unknown',\r\n    endpoint: url.pathname,\r\n    method: request.method,\r\n    timestamp: new Date().toISOString(),\r\n    requestId,\r\n    ...additionalContext,\r\n  };\r\n}\r\n\r\n// ===================================\r\n// IMPLEMENTACI\xD3N DEL LOGGER\r\n// ===================================\r\n\r\nclass SecurityLoggerImpl implements SecurityLogger {\r\n  private formatLogEntry(event: SecurityEvent): string {\r\n    const logEntry = {\r\n      timestamp: event.context.timestamp,\r\n      level: this.mapSeverityToLevel(event.severity),\r\n      type: 'SECURITY',\r\n      event_type: event.type,\r\n      severity: event.severity,\r\n      message: event.message,\r\n      context: event.context,\r\n      metadata: event.metadata,\r\n      error: event.error ? {\r\n        name: event.error.name,\r\n        message: event.error.message,\r\n        stack: event.error.stack,\r\n      } : undefined,\r\n    };\r\n    \r\n    return JSON.stringify(logEntry, null, process.env.NODE_ENV === 'development' ? 2 : 0);\r\n  }\r\n  \r\n  private mapSeverityToLevel(severity: SecuritySeverity): string {\r\n    switch (severity) {\r\n      case 'low': return 'info';\r\n      case 'medium': return 'warn';\r\n      case 'high': return 'error';\r\n      case 'critical': return 'error';\r\n      default: return 'info';\r\n    }\r\n  }\r\n  \r\n  private shouldLog(severity: SecuritySeverity): boolean {\r\n    const logLevel = process.env.SECURITY_LOG_LEVEL || 'medium';\r\n    \r\n    const levels = { low: 1, medium: 2, high: 3, critical: 4 };\r\n    const currentLevel = levels[logLevel as SecuritySeverity] || 2;\r\n    const eventLevel = levels[severity];\r\n    \r\n    return eventLevel >= currentLevel;\r\n  }\r\n  \r\n  log(event: SecurityEvent): void {\r\n    if (!this.shouldLog(event.severity)) {\r\n      return;\r\n    }\r\n    \r\n    const logEntry = this.formatLogEntry(event);\r\n    \r\n    // En desarrollo, usar console con colores\r\n    if (process.env.NODE_ENV === 'development') {\r\n      const colors = {\r\n        low: '\\x1b[36m',      // cyan\r\n        medium: '\\x1b[33m',   // yellow\r\n        high: '\\x1b[31m',     // red\r\n        critical: '\\x1b[35m', // magenta\r\n      };\r\n      \r\n      const reset = '\\x1b[0m';\r\n      const color = colors[event.severity];\r\n      \r\n      console.log(`${color}[SECURITY:${event.type.toUpperCase()}]${reset}`, logEntry);\r\n    } else {\r\n      // En producci\xF3n, usar console.log est\xE1ndar para integraci\xF3n con sistemas de logging\r\n      console.log(logEntry);\r\n    }\r\n    \r\n    // TODO: Integrar con servicio de logging externo (DataDog, LogRocket, etc.)\r\n    // await this.sendToExternalLogger(logEntry);\r\n  }\r\n  \r\n  logAuthAttempt(\r\n    context: SecurityLogContext, \r\n    success: boolean, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: success ? 'auth_success' : 'auth_failure',\r\n      severity: success ? 'low' : 'medium',\r\n      message: success \r\n        ? `Authentication successful for ${context.userId || 'unknown user'}` \r\n        : `Authentication failed for ${context.userId || 'unknown user'}`,\r\n      context,\r\n      metadata: {\r\n        success,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logRateLimitExceeded(\r\n    context: SecurityLogContext, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'rate_limit_exceeded',\r\n      severity: 'medium',\r\n      message: `Rate limit exceeded for ${context.endpoint}`,\r\n      context,\r\n      metadata: {\r\n        endpoint: context.endpoint,\r\n        ip: context.ip,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logPermissionDenied(\r\n    context: SecurityLogContext, \r\n    resource: string, \r\n    action: string\r\n  ): void {\r\n    this.log({\r\n      type: 'permission_denied',\r\n      severity: 'high',\r\n      message: `Permission denied: ${action} on ${resource}`,\r\n      context,\r\n      metadata: {\r\n        resource,\r\n        action,\r\n        userId: context.userId,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logSuspiciousActivity(\r\n    context: SecurityLogContext, \r\n    reason: string, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'suspicious_activity',\r\n      severity: 'high',\r\n      message: `Suspicious activity detected: ${reason}`,\r\n      context,\r\n      metadata: {\r\n        reason,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logAdminAction(\r\n    context: SecurityLogContext, \r\n    action: string, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'admin_action',\r\n      severity: 'medium',\r\n      message: `Admin action performed: ${action}`,\r\n      context,\r\n      metadata: {\r\n        action,\r\n        adminUserId: context.userId,\r\n        ...metadata,\r\n      },\r\n    });\r\n  }\r\n  \r\n  logApiError(\r\n    context: SecurityLogContext, \r\n    error: Error, \r\n    metadata?: Record<string, any>\r\n  ): void {\r\n    this.log({\r\n      type: 'api_error',\r\n      severity: 'medium',\r\n      message: `API error in ${context.endpoint}: ${error.message}`,\r\n      context,\r\n      error,\r\n      metadata,\r\n    });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL Y FACTORY\r\n// ===================================\r\n\r\nconst globalSecurityLogger = new SecurityLoggerImpl();\r\n\r\n/**\r\n * Crea un logger de seguridad con contexto pre-configurado\r\n */\r\nexport function createSecurityLogger(\r\n  request?: NextRequest,\r\n  additionalContext?: Partial<SecurityLogContext>\r\n): SecurityLogger & { context: SecurityLogContext } {\r\n  const context = request \r\n    ? extractSecurityContext(request, additionalContext)\r\n    : {\r\n        endpoint: 'unknown',\r\n        method: 'unknown',\r\n        timestamp: new Date().toISOString(),\r\n        ...additionalContext,\r\n      } as SecurityLogContext;\r\n  \r\n  return {\r\n    context,\r\n    log: globalSecurityLogger.log.bind(globalSecurityLogger),\r\n    logAuthAttempt: (ctx, success, metadata) => \r\n      globalSecurityLogger.logAuthAttempt({ ...context, ...ctx }, success, metadata),\r\n    logRateLimitExceeded: (ctx, metadata) => \r\n      globalSecurityLogger.logRateLimitExceeded({ ...context, ...ctx }, metadata),\r\n    logPermissionDenied: (ctx, resource, action) => \r\n      globalSecurityLogger.logPermissionDenied({ ...context, ...ctx }, resource, action),\r\n    logSuspiciousActivity: (ctx, reason, metadata) => \r\n      globalSecurityLogger.logSuspiciousActivity({ ...context, ...ctx }, reason, metadata),\r\n    logAdminAction: (ctx, action, metadata) => \r\n      globalSecurityLogger.logAdminAction({ ...context, ...ctx }, action, metadata),\r\n    logApiError: (ctx, error, metadata) => \r\n      globalSecurityLogger.logApiError({ ...context, ...ctx }, error, metadata),\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HELPERS Y UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Helper para logging r\xE1pido de eventos de seguridad\r\n */\r\nexport const securityLog = {\r\n  info: (message: string, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'security_scan',\r\n      severity: 'low',\r\n      message,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n  \r\n  warn: (message: string, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'suspicious_activity',\r\n      severity: 'medium',\r\n      message,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n  \r\n  error: (message: string, error?: Error, context: Partial<SecurityLogContext> = {}) => {\r\n    globalSecurityLogger.log({\r\n      type: 'api_error',\r\n      severity: 'high',\r\n      message,\r\n      error,\r\n      context: {\r\n        endpoint: 'system',\r\n        method: 'SYSTEM',\r\n        timestamp: new Date().toISOString(),\r\n        ...context,\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nexport default globalSecurityLogger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["createSecurityLogger", "extractSecurityContext", "securityLog", "request", "additionalContext", "url", "URL", "forwarded", "headers", "get", "ip", "split", "trim", "requestId", "Date", "now", "Math", "random", "toString", "substr", "userAgent", "endpoint", "pathname", "method", "timestamp", "toISOString", "SecurityLoggerImpl", "formatLogEntry", "event", "logEntry", "context", "level", "mapSeverityToLevel", "severity", "type", "event_type", "message", "metadata", "error", "name", "stack", "undefined", "JSON", "stringify", "process", "env", "NODE_ENV", "shouldLog", "logLevel", "SECURITY_LOG_LEVEL", "levels", "low", "medium", "high", "critical", "currentLevel", "eventLevel", "log", "colors", "reset", "color", "console", "toUpperCase", "logAuthAttempt", "success", "userId", "logRateLimitExceeded", "logPermissionDenied", "resource", "action", "logSuspiciousActivity", "reason", "logAdminAction", "adminUserId", "logApiError", "globalSecurityLogger", "bind", "ctx", "info", "warn"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "03ccfb838a0d9f14a36af5c7145d939f2aae8e62"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20bcbv3fi5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20bcbv3fi5();
cov_20bcbv3fi5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_20bcbv3fi5().f[0]++;
  cov_20bcbv3fi5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_20bcbv3fi5().s[3]++;
_export(exports, {
  get createSecurityLogger() {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[1]++;
    cov_20bcbv3fi5().s[4]++;
    return createSecurityLogger;
  },
  get default() {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[2]++;
    cov_20bcbv3fi5().s[5]++;
    return _default;
  },
  get extractSecurityContext() {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[3]++;
    cov_20bcbv3fi5().s[6]++;
    return extractSecurityContext;
  },
  get securityLog() {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[4]++;
    cov_20bcbv3fi5().s[7]++;
    return securityLog;
  }
});
function extractSecurityContext(request, additionalContext =
/* istanbul ignore next */
(cov_20bcbv3fi5().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_20bcbv3fi5().f[5]++;
  const url =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().s[8]++, new URL(request.url));
  // Extraer IP de headers
  const forwarded =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().s[9]++, request.headers.get('x-forwarded-for'));
  const ip =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().s[10]++, forwarded ?
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[1][0]++, forwarded.split(',')[0].trim()) :
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[1][1]++,
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[2][0]++, request.headers.get('x-real-ip')) ||
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[2][1]++, 'unknown')));
  // Generar request ID único
  const requestId =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().s[11]++,
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[3][0]++, request.headers.get('x-request-id')) ||
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[3][1]++, `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`));
  /* istanbul ignore next */
  cov_20bcbv3fi5().s[12]++;
  return {
    ip,
    userAgent:
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[4][0]++, request.headers.get('user-agent')) ||
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[4][1]++, 'unknown'),
    endpoint: url.pathname,
    method: request.method,
    timestamp: new Date().toISOString(),
    requestId,
    ...additionalContext
  };
}
// ===================================
// IMPLEMENTACIÓN DEL LOGGER
// ===================================
class SecurityLoggerImpl {
  formatLogEntry(event) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[6]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[13]++, {
      timestamp: event.context.timestamp,
      level: this.mapSeverityToLevel(event.severity),
      type: 'SECURITY',
      event_type: event.type,
      severity: event.severity,
      message: event.message,
      context: event.context,
      metadata: event.metadata,
      error: event.error ?
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[5][0]++, {
        name: event.error.name,
        message: event.error.message,
        stack: event.error.stack
      }) :
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[5][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_20bcbv3fi5().s[14]++;
    return JSON.stringify(logEntry, null, process.env.NODE_ENV === 'development' ?
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[6][0]++, 2) :
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[6][1]++, 0));
  }
  mapSeverityToLevel(severity) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[7]++;
    cov_20bcbv3fi5().s[15]++;
    switch (severity) {
      case 'low':
        /* istanbul ignore next */
        cov_20bcbv3fi5().b[7][0]++;
        cov_20bcbv3fi5().s[16]++;
        return 'info';
      case 'medium':
        /* istanbul ignore next */
        cov_20bcbv3fi5().b[7][1]++;
        cov_20bcbv3fi5().s[17]++;
        return 'warn';
      case 'high':
        /* istanbul ignore next */
        cov_20bcbv3fi5().b[7][2]++;
        cov_20bcbv3fi5().s[18]++;
        return 'error';
      case 'critical':
        /* istanbul ignore next */
        cov_20bcbv3fi5().b[7][3]++;
        cov_20bcbv3fi5().s[19]++;
        return 'error';
      default:
        /* istanbul ignore next */
        cov_20bcbv3fi5().b[7][4]++;
        cov_20bcbv3fi5().s[20]++;
        return 'info';
    }
  }
  shouldLog(severity) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[8]++;
    const logLevel =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[21]++,
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[8][0]++, process.env.SECURITY_LOG_LEVEL) ||
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[8][1]++, 'medium'));
    const levels =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[22]++, {
      low: 1,
      medium: 2,
      high: 3,
      critical: 4
    });
    const currentLevel =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[23]++,
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[9][0]++, levels[logLevel]) ||
    /* istanbul ignore next */
    (cov_20bcbv3fi5().b[9][1]++, 2));
    const eventLevel =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[24]++, levels[severity]);
    /* istanbul ignore next */
    cov_20bcbv3fi5().s[25]++;
    return eventLevel >= currentLevel;
  }
  log(event) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[9]++;
    cov_20bcbv3fi5().s[26]++;
    if (!this.shouldLog(event.severity)) {
      /* istanbul ignore next */
      cov_20bcbv3fi5().b[10][0]++;
      cov_20bcbv3fi5().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_20bcbv3fi5().b[10][1]++;
    }
    const logEntry =
    /* istanbul ignore next */
    (cov_20bcbv3fi5().s[28]++, this.formatLogEntry(event));
    // En desarrollo, usar console con colores
    /* istanbul ignore next */
    cov_20bcbv3fi5().s[29]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_20bcbv3fi5().b[11][0]++;
      const colors =
      /* istanbul ignore next */
      (cov_20bcbv3fi5().s[30]++, {
        low: '\x1b[36m',
        medium: '\x1b[33m',
        high: '\x1b[31m',
        critical: '\x1b[35m'
      });
      const reset =
      /* istanbul ignore next */
      (cov_20bcbv3fi5().s[31]++, '\x1b[0m');
      const color =
      /* istanbul ignore next */
      (cov_20bcbv3fi5().s[32]++, colors[event.severity]);
      /* istanbul ignore next */
      cov_20bcbv3fi5().s[33]++;
      console.log(`${color}[SECURITY:${event.type.toUpperCase()}]${reset}`, logEntry);
    } else {
      /* istanbul ignore next */
      cov_20bcbv3fi5().b[11][1]++;
      cov_20bcbv3fi5().s[34]++;
      // En producción, usar console.log estándar para integración con sistemas de logging
      console.log(logEntry);
    }
    // TODO: Integrar con servicio de logging externo (DataDog, LogRocket, etc.)
    // await this.sendToExternalLogger(logEntry);
  }
  logAuthAttempt(context, success, metadata) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[10]++;
    cov_20bcbv3fi5().s[35]++;
    this.log({
      type: success ?
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[12][0]++, 'auth_success') :
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[12][1]++, 'auth_failure'),
      severity: success ?
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[13][0]++, 'low') :
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[13][1]++, 'medium'),
      message: success ?
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[14][0]++, `Authentication successful for ${
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[15][0]++, context.userId) ||
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[15][1]++, 'unknown user')}`) :
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[14][1]++, `Authentication failed for ${
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[16][0]++, context.userId) ||
      /* istanbul ignore next */
      (cov_20bcbv3fi5().b[16][1]++, 'unknown user')}`),
      context,
      metadata: {
        success,
        ...metadata
      }
    });
  }
  logRateLimitExceeded(context, metadata) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[11]++;
    cov_20bcbv3fi5().s[36]++;
    this.log({
      type: 'rate_limit_exceeded',
      severity: 'medium',
      message: `Rate limit exceeded for ${context.endpoint}`,
      context,
      metadata: {
        endpoint: context.endpoint,
        ip: context.ip,
        ...metadata
      }
    });
  }
  logPermissionDenied(context, resource, action) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[12]++;
    cov_20bcbv3fi5().s[37]++;
    this.log({
      type: 'permission_denied',
      severity: 'high',
      message: `Permission denied: ${action} on ${resource}`,
      context,
      metadata: {
        resource,
        action,
        userId: context.userId
      }
    });
  }
  logSuspiciousActivity(context, reason, metadata) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[13]++;
    cov_20bcbv3fi5().s[38]++;
    this.log({
      type: 'suspicious_activity',
      severity: 'high',
      message: `Suspicious activity detected: ${reason}`,
      context,
      metadata: {
        reason,
        ...metadata
      }
    });
  }
  logAdminAction(context, action, metadata) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[14]++;
    cov_20bcbv3fi5().s[39]++;
    this.log({
      type: 'admin_action',
      severity: 'medium',
      message: `Admin action performed: ${action}`,
      context,
      metadata: {
        action,
        adminUserId: context.userId,
        ...metadata
      }
    });
  }
  logApiError(context, error, metadata) {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[15]++;
    cov_20bcbv3fi5().s[40]++;
    this.log({
      type: 'api_error',
      severity: 'medium',
      message: `API error in ${context.endpoint}: ${error.message}`,
      context,
      error,
      metadata
    });
  }
}
// ===================================
// INSTANCIA GLOBAL Y FACTORY
// ===================================
const globalSecurityLogger =
/* istanbul ignore next */
(cov_20bcbv3fi5().s[41]++, new SecurityLoggerImpl());
function createSecurityLogger(request, additionalContext) {
  /* istanbul ignore next */
  cov_20bcbv3fi5().f[16]++;
  const context =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().s[42]++, request ?
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[17][0]++, extractSecurityContext(request, additionalContext)) :
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[17][1]++, {
    endpoint: 'unknown',
    method: 'unknown',
    timestamp: new Date().toISOString(),
    ...additionalContext
  }));
  /* istanbul ignore next */
  cov_20bcbv3fi5().s[43]++;
  return {
    context,
    log: globalSecurityLogger.log.bind(globalSecurityLogger),
    logAuthAttempt: (ctx, success, metadata) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[17]++;
      cov_20bcbv3fi5().s[44]++;
      return globalSecurityLogger.logAuthAttempt({
        ...context,
        ...ctx
      }, success, metadata);
    },
    logRateLimitExceeded: (ctx, metadata) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[18]++;
      cov_20bcbv3fi5().s[45]++;
      return globalSecurityLogger.logRateLimitExceeded({
        ...context,
        ...ctx
      }, metadata);
    },
    logPermissionDenied: (ctx, resource, action) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[19]++;
      cov_20bcbv3fi5().s[46]++;
      return globalSecurityLogger.logPermissionDenied({
        ...context,
        ...ctx
      }, resource, action);
    },
    logSuspiciousActivity: (ctx, reason, metadata) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[20]++;
      cov_20bcbv3fi5().s[47]++;
      return globalSecurityLogger.logSuspiciousActivity({
        ...context,
        ...ctx
      }, reason, metadata);
    },
    logAdminAction: (ctx, action, metadata) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[21]++;
      cov_20bcbv3fi5().s[48]++;
      return globalSecurityLogger.logAdminAction({
        ...context,
        ...ctx
      }, action, metadata);
    },
    logApiError: (ctx, error, metadata) => {
      /* istanbul ignore next */
      cov_20bcbv3fi5().f[22]++;
      cov_20bcbv3fi5().s[49]++;
      return globalSecurityLogger.logApiError({
        ...context,
        ...ctx
      }, error, metadata);
    }
  };
}
const securityLog =
/* istanbul ignore next */
(cov_20bcbv3fi5().s[50]++, {
  info: (message, context =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[18][0]++, {})) => {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[23]++;
    cov_20bcbv3fi5().s[51]++;
    globalSecurityLogger.log({
      type: 'security_scan',
      severity: 'low',
      message,
      context: {
        endpoint: 'system',
        method: 'SYSTEM',
        timestamp: new Date().toISOString(),
        ...context
      }
    });
  },
  warn: (message, context =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[19][0]++, {})) => {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[24]++;
    cov_20bcbv3fi5().s[52]++;
    globalSecurityLogger.log({
      type: 'suspicious_activity',
      severity: 'medium',
      message,
      context: {
        endpoint: 'system',
        method: 'SYSTEM',
        timestamp: new Date().toISOString(),
        ...context
      }
    });
  },
  error: (message, error, context =
  /* istanbul ignore next */
  (cov_20bcbv3fi5().b[20][0]++, {})) => {
    /* istanbul ignore next */
    cov_20bcbv3fi5().f[25]++;
    cov_20bcbv3fi5().s[53]++;
    globalSecurityLogger.log({
      type: 'api_error',
      severity: 'high',
      message,
      error,
      context: {
        endpoint: 'system',
        method: 'SYSTEM',
        timestamp: new Date().toISOString(),
        ...context
      }
    });
  }
});
const _default =
/* istanbul ignore next */
(cov_20bcbv3fi5().s[54]++, globalSecurityLogger);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,