{"version":3,"names":["useBrands","cov_ywnlkvkhz","f","s","useFilterMetadata","useMainCategories","usePaintOptions","usePriceRange","fetchFilterMetadata","response","fetch","method","headers","ok","b","errorText","text","console","error","status","statusText","Error","result","json","success","log","categories","data","length","brands","paintTypes","finishes","priceRange","_reactquery","useQuery","queryKey","queryFn","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnMount","isLoading","max"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useFilterMetadata.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - HOOK FILTER METADATA\r\n// ===================================\r\n\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface CategoryWithSubs {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  image_url: string | null;\r\n  subcategories: {\r\n    id: number;\r\n    name: string;\r\n    slug: string;\r\n    parent_id: number;\r\n    image_url: string | null;\r\n  }[];\r\n}\r\n\r\nexport interface FilterMetadata {\r\n  categories: CategoryWithSubs[];\r\n  brands: string[];\r\n  paintTypes: string[];\r\n  finishes: string[];\r\n  priceRange: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  stats: {\r\n    totalCategories: number;\r\n    totalSubcategories: number;\r\n    totalBrands: number;\r\n    totalProducts: number;\r\n  };\r\n}\r\n\r\nexport interface FilterMetadataResponse {\r\n  success: boolean;\r\n  data: FilterMetadata;\r\n  error?: string;\r\n}\r\n\r\n// ===================================\r\n// FUNCIÓN DE FETCH\r\n// ===================================\r\n\r\nconst fetchFilterMetadata = async (): Promise<FilterMetadata> => {\r\n  \r\n  const response = await fetch('/api/filters/metadata', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error('❌ useFilterMetadata: API error:', {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      error: errorText\r\n    });\r\n    throw new Error(`Failed to fetch filter metadata: ${response.status} ${response.statusText}`);\r\n  }\r\n\r\n  const result: FilterMetadataResponse = await response.json();\r\n  \r\n  if (!result.success) {\r\n    console.error('❌ useFilterMetadata: API returned error:', result.error);\r\n    throw new Error(result.error || 'Failed to fetch filter metadata');\r\n  }\r\n\r\n  console.log('✅ useFilterMetadata: Metadata fetched successfully:', {\r\n    categories: result.data.categories.length,\r\n    brands: result.data.brands.length,\r\n    paintTypes: result.data.paintTypes.length,\r\n    finishes: result.data.finishes.length,\r\n    priceRange: result.data.priceRange\r\n  });\r\n\r\n  return result.data;\r\n};\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport const useFilterMetadata = () => {\r\n  return useQuery({\r\n    queryKey: ['filterMetadata'],\r\n    queryFn: fetchFilterMetadata,\r\n    staleTime: 5 * 60 * 1000, // 5 minutos\r\n    gcTime: 10 * 60 * 1000, // 10 minutos (antes cacheTime)\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n    refetchOnWindowFocus: false,\r\n    refetchOnMount: false,\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOKS AUXILIARES\r\n// ===================================\r\n\r\n/**\r\n * Hook para obtener solo las categorías principales\r\n */\r\nexport const useMainCategories = () => {\r\n  const { data, isLoading, error } = useFilterMetadata();\r\n  \r\n  return {\r\n    categories: data?.categories || [],\r\n    isLoading,\r\n    error\r\n  };\r\n};\r\n\r\n/**\r\n * Hook para obtener solo las marcas\r\n */\r\nexport const useBrands = () => {\r\n  const { data, isLoading, error } = useFilterMetadata();\r\n  \r\n  return {\r\n    brands: data?.brands || [],\r\n    isLoading,\r\n    error\r\n  };\r\n};\r\n\r\n/**\r\n * Hook para obtener tipos de pintura y acabados\r\n */\r\nexport const usePaintOptions = () => {\r\n  const { data, isLoading, error } = useFilterMetadata();\r\n  \r\n  return {\r\n    paintTypes: data?.paintTypes || [],\r\n    finishes: data?.finishes || [],\r\n    isLoading,\r\n    error\r\n  };\r\n};\r\n\r\n/**\r\n * Hook para obtener rango de precios\r\n */\r\nexport const usePriceRange = () => {\r\n  const { data, isLoading, error } = useFilterMetadata();\r\n  \r\n  return {\r\n    priceRange: data?.priceRange || { min: 0, max: 100000 },\r\n    isLoading,\r\n    error\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}