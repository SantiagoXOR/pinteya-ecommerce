6bfebf03ffd49c48aac5b8395c2987e0
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE METRICS SYSTEM
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AlertLevel () {
        return AlertLevel;
    },
    get BusinessMetricCategory () {
        return BusinessMetricCategory;
    },
    get EnterpriseMetricsCollector () {
        return EnterpriseMetricsCollector;
    },
    get MetricType () {
        return MetricType;
    },
    get enterpriseMetrics () {
        return enterpriseMetrics;
    },
    get recordBusinessMetric () {
        return recordBusinessMetric;
    },
    get recordPerformanceMetric () {
        return recordPerformanceMetric;
    },
    get recordSecurityMetric () {
        return recordSecurityMetric;
    },
    get recordUserExperienceMetric () {
        return recordUserExperienceMetric;
    }
});
const _logger = require("../enterprise/logger");
const _supabase = require("../integrations/supabase");
const _alertsystem = require("./alert-system");
// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente
let CacheUtils = null;
if (typeof window === 'undefined') {
    // Solo en servidor
    try {
        CacheUtils = require('@/lib/cache-manager').CacheUtils;
    } catch (error) {
        console.warn('[EnterpriseMetrics] CacheUtils not available:', error);
    }
}
var MetricType = /*#__PURE__*/ function(MetricType) {
    MetricType["COUNTER"] = "counter";
    MetricType["GAUGE"] = "gauge";
    MetricType["HISTOGRAM"] = "histogram";
    MetricType["TIMER"] = "timer";
    MetricType["RATE"] = "rate";
    return MetricType;
}({});
var BusinessMetricCategory = /*#__PURE__*/ function(BusinessMetricCategory) {
    BusinessMetricCategory["PERFORMANCE"] = "performance";
    BusinessMetricCategory["SECURITY"] = "security";
    BusinessMetricCategory["BUSINESS"] = "business";
    BusinessMetricCategory["INFRASTRUCTURE"] = "infrastructure";
    BusinessMetricCategory["USER_EXPERIENCE"] = "user_experience";
    return BusinessMetricCategory;
}({});
var AlertLevel = /*#__PURE__*/ function(AlertLevel) {
    AlertLevel["INFO"] = "info";
    AlertLevel["WARNING"] = "warning";
    AlertLevel["CRITICAL"] = "critical";
    AlertLevel["EMERGENCY"] = "emergency";
    return AlertLevel;
}({});
class EnterpriseMetricsCollector {
    constructor(){
        this.alertRules = new Map();
        this.activeAlerts = new Map();
        this.metricsBuffer = [];
        this.flushInterval = null;
        this.initializeDefaultAlerts();
        this.startMetricsFlush();
    }
    static getInstance() {
        if (!EnterpriseMetricsCollector.instance) {
            EnterpriseMetricsCollector.instance = new EnterpriseMetricsCollector();
        }
        return EnterpriseMetricsCollector.instance;
    }
    /**
   * Registra una métrica enterprise
   */ async recordMetric(name, value, type = "gauge", category = "performance", tags = {}, metadata) {
        try {
            const metric = {
                id: this.generateMetricId(),
                name,
                type,
                category,
                value,
                timestamp: new Date().toISOString(),
                tags,
                metadata
            };
            // Agregar a buffer para flush batch
            this.metricsBuffer.push(metric);
            // Verificar alertas
            await this.checkAlerts(metric);
            // Log para debugging
            _logger.logger.debug(_logger.LogLevel.DEBUG, `Metric recorded: ${name}`, {
                value,
                type,
                category,
                tags
            }, _logger.LogCategory.SYSTEM);
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, `Failed to record metric: ${name}`, {
                error: error instanceof Error ? error.message : 'Unknown error',
                value,
                type
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Métricas de performance específicas
   */ async recordPerformanceMetric(operation, duration, success, tags = {}) {
        await this.recordMetric(`performance.${operation}.duration`, duration, "timer", "performance", {
            ...tags,
            success: success.toString()
        });
        await this.recordMetric(`performance.${operation}.count`, 1, "counter", "performance", {
            ...tags,
            success: success.toString()
        });
    }
    /**
   * Métricas de negocio específicas
   */ async recordBusinessMetric(event, value = 1, tags = {}) {
        await this.recordMetric(`business.${event}`, value, "counter", "business", tags);
    }
    /**
   * Métricas de seguridad específicas
   */ async recordSecurityMetric(event, severity, tags = {}) {
        await this.recordMetric(`security.${event}`, 1, "counter", "security", {
            ...tags,
            severity
        });
    }
    /**
   * Métricas de experiencia de usuario
   */ async recordUserExperienceMetric(metric, value, userId, tags = {}) {
        await this.recordMetric(`ux.${metric}`, value, "gauge", "user_experience", {
            ...tags,
            userId: userId || 'anonymous'
        });
    }
    /**
   * Configura una regla de alerta
   */ setAlertRule(rule) {
        this.alertRules.set(rule.id, rule);
        _logger.logger.info(_logger.LogLevel.INFO, `Alert rule configured: ${rule.id}`, {
            metricName: rule.metricName,
            threshold: rule.threshold,
            level: rule.level
        }, _logger.LogCategory.SYSTEM);
    }
    /**
   * Verifica alertas para una métrica
   */ async checkAlerts(metric) {
        for (const rule of this.alertRules.values()){
            if (!rule.enabled || rule.metricName !== metric.name) {
                continue;
            }
            // Verificar si ya hay una alerta activa en cooldown
            const existingAlert = Array.from(this.activeAlerts.values()).find((alert)=>alert.ruleId === rule.id && !alert.resolvedAt);
            if (existingAlert) {
                const cooldownEnd = new Date(existingAlert.triggeredAt);
                cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);
                if (new Date() < cooldownEnd) {
                    continue; // Aún en cooldown
                }
            }
            // Evaluar condición
            const triggered = this.evaluateCondition(metric.value, rule.condition, rule.threshold);
            if (triggered) {
                await this.triggerAlert(rule, metric);
            }
        }
    }
    /**
   * Evalúa condición de alerta
   */ evaluateCondition(value, condition, threshold) {
        switch(condition){
            case 'gt':
                return value > threshold;
            case 'gte':
                return value >= threshold;
            case 'lt':
                return value < threshold;
            case 'lte':
                return value <= threshold;
            case 'eq':
                return value === threshold;
            default:
                return false;
        }
    }
    /**
   * Dispara una alerta usando el sistema enterprise
   */ async triggerAlert(rule, metric) {
        // Convertir nivel de alerta al sistema enterprise
        const alertLevel = this.convertToAlertSystemLevel(rule.level);
        // Usar el sistema de alertas enterprise
        const alert = await _alertsystem.enterpriseAlertSystem.triggerAlert(rule.id, rule.metricName, metric.value, `${rule.description} - Value: ${metric.value}, Threshold: ${rule.threshold}`);
        if (alert) {
            // Mantener referencia local para compatibilidad
            const localAlert = {
                id: alert.id,
                ruleId: alert.ruleId,
                metricName: alert.metricName,
                level: rule.level,
                message: alert.message,
                value: alert.value,
                threshold: alert.threshold,
                triggeredAt: alert.triggeredAt,
                metadata: {
                    metric: metric,
                    rule: rule
                }
            };
            this.activeAlerts.set(alert.id, localAlert);
            // Log alerta
            _logger.logger.warn(_logger.LogLevel.WARN, `Alert triggered via enterprise system: ${rule.id}`, {
                alertId: alert.id,
                level: alert.level,
                metricName: alert.metricName,
                value: alert.value,
                threshold: alert.threshold
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Ejecuta acción de alerta
   */ async executeAlertAction(action, alert) {
        try {
            switch(action.type){
                case 'log':
                    _logger.logger.error(_logger.LogLevel.ERROR, `ALERT: ${alert.message}`, {
                        alertId: alert.id,
                        level: alert.level
                    }, _logger.LogCategory.SYSTEM);
                    break;
                case 'webhook':
                    if (action.config.url) {
                        await fetch(action.config.url, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(alert)
                        });
                    }
                    break;
                case 'email':
                    // TODO: Implementar envío de email
                    _logger.logger.info(_logger.LogLevel.INFO, `Email alert would be sent to: ${action.config.to}`, {
                        alertId: alert.id
                    }, _logger.LogCategory.SYSTEM);
                    break;
                case 'slack':
                    // TODO: Implementar notificación Slack
                    _logger.logger.info(_logger.LogLevel.INFO, `Slack alert would be sent to: ${action.config.channel}`, {
                        alertId: alert.id
                    }, _logger.LogCategory.SYSTEM);
                    break;
            }
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, `Failed to execute alert action: ${action.type}`, {
                error: error instanceof Error ? error.message : 'Unknown error',
                alertId: alert.id
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Obtiene métricas agregadas
   */ async getAggregatedMetrics(metricName, period, startTime, endTime) {
        const cacheKey = `metrics:aggregated:${metricName}:${period}:${startTime}:${endTime}`;
        // ✅ CACHE CONDICIONAL: Solo usar cache en servidor
        const fetchData = async ()=>{
            const supabase = (0, _supabase.getSupabaseClient)(true);
            if (!supabase) {
                throw new Error('Supabase client not available');
            }
            // Query con agregación SQL
            const { data, error } = await supabase.rpc('aggregate_metrics', {
                metric_name: metricName,
                period_interval: period,
                start_time: startTime,
                end_time: endTime
            });
            if (error) {
                throw new Error(`Failed to aggregate metrics: ${error.message}`);
            }
            return data || [];
        };
        // Usar cache solo si está disponible (servidor)
        if (CacheUtils && typeof window === 'undefined') {
            return CacheUtils.cacheMetricsAggregation(cacheKey, fetchData);
        } else {
            return fetchData();
        }
    }
    /**
   * Flush métricas a base de datos
   */ async flushMetrics() {
        if (this.metricsBuffer.length === 0) {
            return;
        }
        try {
            const metrics = [
                ...this.metricsBuffer
            ];
            this.metricsBuffer = [];
            const supabase = (0, _supabase.getSupabaseClient)(true);
            if (!supabase) {
                _logger.logger.error(_logger.LogLevel.ERROR, 'Supabase client not available for metrics flush', {}, _logger.LogCategory.SYSTEM);
                return;
            }
            const { error } = await supabase.from('enterprise_metrics').insert(metrics.map((metric)=>({
                    id: metric.id,
                    name: metric.name,
                    type: metric.type,
                    category: metric.category,
                    value: metric.value,
                    timestamp: metric.timestamp,
                    tags: metric.tags,
                    metadata: metric.metadata
                })));
            if (error) {
                _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to flush metrics to database', {
                    error: error.message,
                    metricsCount: metrics.length
                }, _logger.LogCategory.SYSTEM);
            } else {
                _logger.logger.debug(_logger.LogLevel.DEBUG, `Flushed ${metrics.length} metrics to database`, {}, _logger.LogCategory.SYSTEM);
            }
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Error during metrics flush', {
                error: error instanceof Error ? error.message : 'Unknown error'
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Inicializa alertas por defecto
   */ initializeDefaultAlerts() {
        // Alerta de response time alto
        this.setAlertRule({
            id: 'high_response_time',
            metricName: 'performance.api.duration',
            condition: 'gt',
            threshold: 5000,
            level: "warning",
            enabled: true,
            cooldownMinutes: 5,
            description: 'API response time is too high',
            actions: [
                {
                    type: 'log',
                    config: {}
                }
            ]
        });
        // Alerta de error rate alto
        this.setAlertRule({
            id: 'high_error_rate',
            metricName: 'performance.api.error_rate',
            condition: 'gt',
            threshold: 0.05,
            level: "critical",
            enabled: true,
            cooldownMinutes: 2,
            description: 'API error rate is too high',
            actions: [
                {
                    type: 'log',
                    config: {}
                }
            ]
        });
        // Alerta de violaciones de seguridad
        this.setAlertRule({
            id: 'security_violations',
            metricName: 'security.violation',
            condition: 'gte',
            threshold: 1,
            level: "emergency",
            enabled: true,
            cooldownMinutes: 1,
            description: 'Security violation detected',
            actions: [
                {
                    type: 'log',
                    config: {}
                }
            ]
        });
    }
    /**
   * Inicia flush automático de métricas
   */ startMetricsFlush() {
        this.flushInterval = setInterval(()=>{
            this.flushMetrics();
        }, 30000); // Flush cada 30 segundos
    }
    /**
   * Almacena alerta en base de datos
   */ async storeAlert(alert) {
        try {
            const supabase = (0, _supabase.getSupabaseClient)(true);
            if (!supabase) {
                return;
            }
            await supabase.from('enterprise_alerts').insert({
                id: alert.id,
                rule_id: alert.ruleId,
                metric_name: alert.metricName,
                level: alert.level,
                message: alert.message,
                value: alert.value,
                threshold: alert.threshold,
                triggered_at: alert.triggeredAt,
                resolved_at: alert.resolvedAt,
                metadata: alert.metadata
            });
        } catch (error) {
            _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to store alert', {
                error: error instanceof Error ? error.message : 'Unknown error',
                alertId: alert.id
            }, _logger.LogCategory.SYSTEM);
        }
    }
    /**
   * Genera ID único para métrica
   */ generateMetricId() {
        return `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * Convierte nivel de alerta al sistema enterprise
   */ convertToAlertSystemLevel(level) {
        switch(level){
            case "info":
                return _alertsystem.AlertLevel.INFO;
            case "warning":
                return _alertsystem.AlertLevel.WARNING;
            case "critical":
                return _alertsystem.AlertLevel.CRITICAL;
            case "emergency":
                return _alertsystem.AlertLevel.EMERGENCY;
            default:
                return _alertsystem.AlertLevel.INFO;
        }
    }
    /**
   * Genera ID único para alerta
   */ generateAlertId() {
        return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * Limpia recursos
   */ destroy() {
        if (this.flushInterval) {
            clearInterval(this.flushInterval);
            this.flushInterval = null;
        }
        this.flushMetrics(); // Flush final
    }
}
const enterpriseMetrics = EnterpriseMetricsCollector.getInstance();
const recordPerformanceMetric = enterpriseMetrics.recordPerformanceMetric.bind(enterpriseMetrics);
const recordBusinessMetric = enterpriseMetrics.recordBusinessMetric.bind(enterpriseMetrics);
const recordSecurityMetric = enterpriseMetrics.recordSecurityMetric.bind(enterpriseMetrics);
const recordUserExperienceMetric = enterpriseMetrics.recordUserExperienceMetric.bind(enterpriseMetrics);

//# sourceMappingURL=data:application/json;base64,