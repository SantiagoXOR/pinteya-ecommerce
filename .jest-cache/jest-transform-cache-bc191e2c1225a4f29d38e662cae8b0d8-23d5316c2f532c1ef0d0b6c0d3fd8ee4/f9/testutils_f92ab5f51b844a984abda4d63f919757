b485e356b7e2ea6af70bddff27ea245a
// ===================================
// PINTEYA E-COMMERCE - TEST UTILITIES
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AllTheProviders () {
        return AllTheProviders;
    },
    get cleanupQueryClient () {
        return cleanupQueryClient;
    },
    get createHookWrapper () {
        return createHookWrapper;
    },
    get createMockLocalStorage () {
        return createMockLocalStorage;
    },
    get createMockSessionStorage () {
        return createMockSessionStorage;
    },
    get createTestQueryClient () {
        return createTestQueryClient;
    },
    get render () {
        return renderWithProviders;
    },
    get renderWithProviders () {
        return renderWithProviders;
    },
    get waitForQueryToSettle () {
        return waitForQueryToSettle;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("@tanstack/react-query");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                gcTime: 0,
                staleTime: 0
            },
            mutations: {
                retry: false
            }
        },
        logger: {
            log: ()=>{},
            warn: ()=>{},
            error: ()=>{}
        }
    });
const AllTheProviders = ({ children, queryClient = createTestQueryClient() })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
const renderWithProviders = (ui, options = {})=>{
    const { queryClient, ...renderOptions } = options;
    const Wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(AllTheProviders, {
            queryClient: queryClient,
            children: children
        });
    return (0, _react1.render)(ui, {
        wrapper: Wrapper,
        ...renderOptions
    });
};
const createHookWrapper = (queryClient)=>{
    const client = queryClient || createTestQueryClient();
    return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: client,
            children: children
        });
};
const createMockLocalStorage = ()=>{
    const store = {};
    return {
        getItem: jest.fn((key)=>store[key] || null),
        setItem: jest.fn((key, value)=>{
            store[key] = value;
        }),
        removeItem: jest.fn((key)=>{
            delete store[key];
        }),
        clear: jest.fn(()=>{
            Object.keys(store).forEach((key)=>delete store[key]);
        }),
        length: Object.keys(store).length,
        key: jest.fn((index)=>Object.keys(store)[index] || null)
    };
};
const createMockSessionStorage = ()=>createMockLocalStorage();
const waitForQueryToSettle = async (queryClient)=>{
    await queryClient.getQueryCache().clear();
    await queryClient.getMutationCache().clear();
};
const cleanupQueryClient = (queryClient)=>{
    queryClient.clear();
    queryClient.getQueryCache().clear();
    queryClient.getMutationCache().clear();
};

//# sourceMappingURL=data:application/json;base64,