{"version":3,"names":["cov_25wkcbcvbx","actualCoverage","s","GET","f","POST","runtime","getHandler","request","_adminmonitoring","logStructured","endpoint","method","authResult","_supabaseauthutils","requireAdminAuth","success","b","error","ip","headers","get","_server","NextResponse","json","code","timestamp","Date","toISOString","status","user","userId","id","email","url","URL","timeframe","searchParams","includeAlerts","performanceMetrics","getPerformanceMetrics","activeAlerts","getActiveAlerts","now","systemStatus","uptime","process","memory","memoryUsage","version","response","data","performance","alerts","system","requestedBy","meta","api","alertsIncluded","metricsCount","stats","totalRequests","alertsCount","length","Error","message","stack","undefined","postHandler","supabase","body","action","alertId","metadata","result","resolveError","from","update","resolved","resolved_by","resolved_at","eq","cleanupError","rpc","cleaned","timeframeHours","statsError","timeframe_hours","executedBy","withPerformanceMonitoring"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de monitoreo para panel administrativo\r\n * Proporciona métricas de performance y alertas de seguridad\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/supabase-auth-utils';\r\nimport { \r\n  getPerformanceMetrics, \r\n  getActiveAlerts,\r\n  withPerformanceMonitoring,\r\n  logStructured \r\n} from '@/lib/monitoring/admin-monitoring';\r\n\r\n/**\r\n * GET /api/admin/monitoring\r\n * Obtener métricas de monitoreo y alertas\r\n */\r\nasync function getHandler(request: NextRequest) {\r\n  try {\r\n    logStructured('info', 'Admin monitoring API called', {\r\n      endpoint: '/api/admin/monitoring',\r\n      method: 'GET'\r\n    });\r\n\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request);\r\n\r\n    if (!authResult.success) {\r\n      logStructured('warn', 'Unauthorized access to monitoring API', {\r\n        error: authResult.error,\r\n        ip: request.headers.get('x-forwarded-for') || 'unknown'\r\n      });\r\n\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: 'AUTH_FAILED',\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user } = authResult;\r\n    logStructured('info', 'Admin monitoring access granted', {\r\n      userId: user?.id,\r\n      email: user?.email\r\n    });\r\n\r\n    // Obtener parámetros de query\r\n    const url = new URL(request.url);\r\n    const timeframe = url.searchParams.get('timeframe') as '1h' | '24h' | '7d' || '24h';\r\n    const includeAlerts = url.searchParams.get('alerts') !== 'false';\r\n\r\n    // Obtener métricas de performance\r\n    const performanceMetrics = await getPerformanceMetrics(timeframe);\r\n\r\n    // Obtener alertas activas si se solicitan\r\n    let activeAlerts = null;\r\n    if (includeAlerts) {\r\n      activeAlerts = await getActiveAlerts();\r\n    }\r\n\r\n    // Calcular estadísticas adicionales\r\n    const now = new Date();\r\n    const systemStatus = {\r\n      uptime: process.uptime(),\r\n      memory: process.memoryUsage(),\r\n      timestamp: now.toISOString(),\r\n      version: '2.0.0'\r\n    };\r\n\r\n    const response = {\r\n      success: true,\r\n      data: {\r\n        performance: performanceMetrics,\r\n        alerts: activeAlerts,\r\n        system: systemStatus,\r\n        timeframe,\r\n        requestedBy: {\r\n          userId: user?.id,\r\n          email: user?.email,\r\n          timestamp: now.toISOString()\r\n        }\r\n      },\r\n      meta: {\r\n        api: 'admin-monitoring',\r\n        version: '2.0.0',\r\n        timestamp: now.toISOString()\r\n      }\r\n    };\r\n\r\n    logStructured('info', 'Admin monitoring data retrieved successfully', {\r\n      userId: user?.id,\r\n      timeframe,\r\n      alertsIncluded: includeAlerts,\r\n      metricsCount: performanceMetrics?.stats?.totalRequests || 0,\r\n      alertsCount: activeAlerts?.length || 0\r\n    });\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    logStructured('error', 'Error in admin monitoring API', {\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR',\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring\r\n * Resolver alertas o ejecutar acciones de monitoreo\r\n */\r\nasync function postHandler(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user, supabase } = authResult;\r\n    const body = await request.json();\r\n\r\n    const { action, alertId, metadata } = body;\r\n\r\n    if (!action) {\r\n      return NextResponse.json(\r\n        { error: 'Acción requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let result = null;\r\n\r\n    switch (action) {\r\n      case 'resolve_alert':\r\n        if (!alertId) {\r\n          return NextResponse.json(\r\n            { error: 'ID de alerta requerido' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Resolver alerta en base de datos\r\n        const { error: resolveError } = await supabase\r\n          .from('admin_security_alerts')\r\n          .update({\r\n            resolved: true,\r\n            resolved_by: user?.id,\r\n            resolved_at: new Date().toISOString()\r\n          })\r\n          .eq('id', alertId);\r\n\r\n        if (resolveError) {\r\n          logStructured('error', 'Error resolving alert', {\r\n            alertId,\r\n            error: resolveError.message,\r\n            userId: user?.id\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al resolver alerta' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { alertId, resolved: true };\r\n        \r\n        logStructured('info', 'Alert resolved by admin', {\r\n          alertId,\r\n          userId: user?.id,\r\n          email: user?.email\r\n        });\r\n        break;\r\n\r\n      case 'cleanup_metrics':\r\n        // Ejecutar limpieza de métricas antiguas\r\n        const { error: cleanupError } = await supabase.rpc('cleanup_old_admin_metrics');\r\n\r\n        if (cleanupError) {\r\n          logStructured('error', 'Error cleaning up metrics', {\r\n            error: cleanupError.message,\r\n            userId: user?.id\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al limpiar métricas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { cleaned: true, timestamp: new Date().toISOString() };\r\n        \r\n        logStructured('info', 'Metrics cleanup executed by admin', {\r\n          userId: user?.id,\r\n          email: user?.email\r\n        });\r\n        break;\r\n\r\n      case 'get_performance_stats':\r\n        const timeframeHours = metadata?.timeframeHours || 24;\r\n        \r\n        const { data: stats, error: statsError } = await supabase\r\n          .rpc('get_admin_performance_stats', { timeframe_hours: timeframeHours });\r\n\r\n        if (statsError) {\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener estadísticas' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        result = { stats: stats[0] || null };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Acción no válida' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      action,\r\n      result,\r\n      timestamp: new Date().toISOString(),\r\n      executedBy: {\r\n        userId: user?.id,\r\n        email: user?.email\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logStructured('error', 'Error in admin monitoring POST', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Aplicar middleware de monitoreo de performance\r\nexport const GET = withPerformanceMonitoring(getHandler);\r\nexport const POST = withPerformanceMonitoring(postHandler);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}