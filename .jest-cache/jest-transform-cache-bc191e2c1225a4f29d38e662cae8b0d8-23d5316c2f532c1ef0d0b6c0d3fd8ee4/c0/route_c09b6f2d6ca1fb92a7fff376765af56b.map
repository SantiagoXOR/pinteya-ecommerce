{"version":3,"names":["cov_2hqkc6g8a","actualCoverage","s","GET","f","POST","runtime","request","startTime","Date","now","clientIP","b","headers","get","userAgent","session","_config","auth","user","_server","NextResponse","json","success","error","status","rateLimitResult","_ratelimiter","checkRateLimit","RATE_LIMIT_CONFIGS","PAYMENT_API","_logger","logger","warn","LogCategory","API","userId","response","addRateLimitHeaders","body","payment_id","amount","reason","metadata","info","PAYMENT","supabase","_supabase","getSupabaseClient","data","order","orderError","from","select","eq","single","payment_status","refundAmount","total_amount","refundResult","processRefund","update","updated_at","toISOString","id","insert","order_id","refund_id","created_at","refundInsertError","_metrics","metricsCollector","recordRequest","processingTime","timestamp","processing_time","performance","LogLevel","ERROR","operation","duration","statusCode","message","QUERY_API","url","URL","limit","parseInt","searchParams","offset","query","ascending","range","refunds","Error","count","length","toString","pagination","total","paymentId","client","_mercadopago","createMercadoPagoClient","payment","_mercadopago1","Payment","refundId","Math","random","substr","refundResponse"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\refunds\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO REFUNDS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { createMercadoPagoClient } from '@/lib/integrations/mercadopago';\r\nimport { Payment } from 'mercadopago';\r\n\r\ninterface RefundRequest {\r\n  payment_id: string;\r\n  amount?: number;\r\n  reason?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface RefundResponse {\r\n  id: string;\r\n  payment_id: string;\r\n  amount: number;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  reason?: string;\r\n  created_at: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * POST /api/payments/refunds\r\n * Procesa reembolsos según documentación oficial de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.PAYMENT_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for refunds', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n      return response;\r\n    }\r\n\r\n    const body: RefundRequest = await request.json();\r\n    const { payment_id, amount, reason, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!payment_id) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'payment_id es requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund request started', {\r\n      userId,\r\n      payment_id,\r\n      amount,\r\n      reason,\r\n      clientIP,\r\n    });\r\n\r\n    // Verificar que el pago existe y pertenece al usuario\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuración de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, total_amount, payment_status, external_reference')\r\n      .eq('external_reference', payment_id)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Pago no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (order.payment_status !== 'approved') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Solo se pueden reembolsar pagos aprobados' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar monto del reembolso\r\n    const refundAmount = amount || order.total_amount;\r\n    if (refundAmount > order.total_amount) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'El monto del reembolso no puede ser mayor al pago original' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Procesar reembolso con MercadoPago\r\n    const refundResult = await processRefund(payment_id, refundAmount, reason, metadata);\r\n\r\n    // Actualizar estado en base de datos\r\n    await supabase\r\n      .from('orders')\r\n      .update({ \r\n        payment_status: refundResult.status === 'approved' ? 'refunded' : 'refund_pending',\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id);\r\n\r\n    // Registrar reembolso en tabla de refunds (si existe)\r\n    try {\r\n      await supabase\r\n        .from('refunds')\r\n        .insert({\r\n          order_id: order.id,\r\n          payment_id,\r\n          refund_id: refundResult.id,\r\n          amount: refundAmount,\r\n          status: refundResult.status,\r\n          reason: reason || 'Reembolso solicitado por el cliente',\r\n          metadata: metadata || {},\r\n          created_at: new Date().toISOString(),\r\n        });\r\n    } catch (refundInsertError) {\r\n      // Si la tabla refunds no existe, solo loggeamos el warning\r\n      logger.warn(LogCategory.PAYMENT, 'Refunds table not found, skipping insert', {\r\n        payment_id,\r\n        refund_id: refundResult.id,\r\n      });\r\n    }\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, payment_id, amount: refundAmount }\r\n    );\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund processed successfully', {\r\n      userId,\r\n      payment_id,\r\n      refund_id: refundResult.id,\r\n      amount: refundAmount,\r\n      status: refundResult.status,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refundResult,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refund processing failed', {\r\n      operation: 'refund-processing-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/payments/refunds\r\n * Lista reembolsos del usuario\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const url = new URL(request.url);\r\n    const limit = parseInt(url.searchParams.get('limit') || '10');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n    const status = url.searchParams.get('status');\r\n\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuración de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('refunds')\r\n      .select(`\r\n        *,\r\n        orders (\r\n          id,\r\n          total_amount,\r\n          created_at\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    const { data: refunds, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error al obtener reembolsos: ${error.message}`);\r\n    }\r\n\r\n    // Registrar métricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, count: (refunds?.length || 0).toString() }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Refunds list retrieved', {\r\n      userId,\r\n      count: refunds?.length || 0,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refunds || [],\r\n      pagination: {\r\n        limit,\r\n        offset,\r\n        total: refunds?.length || 0,\r\n      },\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refunds list failed', {\r\n      operation: 'refunds-list-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Procesa reembolso con MercadoPago\r\n */\r\nasync function processRefund(\r\n  paymentId: string,\r\n  amount: number,\r\n  reason?: string,\r\n  metadata?: Record<string, any>\r\n): Promise<RefundResponse> {\r\n  try {\r\n    // Crear cliente de MercadoPago\r\n    const client = createMercadoPagoClient();\r\n    const payment = new Payment(client);\r\n\r\n    // En una implementación real, aquí se haría la llamada a la API de MercadoPago\r\n    // Por ahora simulamos el reembolso\r\n    const refundId = `refund_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Simular respuesta de MercadoPago\r\n    const refundResponse: RefundResponse = {\r\n      id: refundId,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'approved', // En producción esto vendría de MercadoPago\r\n      reason: reason || 'Reembolso solicitado',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n\r\n    logger.info(LogCategory.PAYMENT, 'MercadoPago refund simulated', {\r\n      payment_id: paymentId,\r\n      refund_id: refundId,\r\n      amount,\r\n      status: refundResponse.status,\r\n    });\r\n\r\n    return refundResponse;\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.PAYMENT, 'MercadoPago refund failed', error as Error);\r\n\r\n    // En caso de error, devolver estado pendiente\r\n    return {\r\n      id: `refund_error_${Date.now()}`,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'pending',\r\n      reason: 'Error al procesar reembolso, se procesará manualmente',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}