{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-boundary\\error-boundary-manager.ts"],"sourcesContent":["// ===================================\n// ERROR BOUNDARY MANAGER\n// ===================================\n// Sistema centralizado de gestión de Error Boundaries\n\nimport { ErrorInfo } from 'react'\n\n// ===================================\n// INTERFACES Y TIPOS\n// ===================================\n\nexport interface ErrorBoundaryConfig {\n  level: 'page' | 'section' | 'component'\n  enableRetry: boolean\n  maxRetries: number\n  retryDelay: number\n  enableAutoRecovery: boolean\n  recoveryTimeout: number\n  enableReporting: boolean\n  fallbackComponent?: React.ComponentType<any>\n}\n\nexport interface ErrorMetrics {\n  errorId: string\n  timestamp: number\n  errorType: string\n  component: string\n  level: string\n  retryCount: number\n  resolved: boolean\n  resolutionTime?: number\n  userImpact: 'low' | 'medium' | 'high' | 'critical'\n  vercelRequestId?: string\n  correlationId?: string\n  buildId?: string\n  nextjsVersion?: string\n  metadataErrors?: string[]\n}\n\nexport interface ErrorPattern {\n  pattern: string\n  frequency: number\n  lastOccurrence: number\n  affectedComponents: string[]\n  suggestedFix?: string\n}\n\n// ===================================\n// ERROR BOUNDARY MANAGER\n// ===================================\n\nclass ErrorBoundaryManager {\n  private static instance: ErrorBoundaryManager\n  private errors: Map<string, ErrorMetrics> = new Map()\n  private patterns: Map<string, ErrorPattern> = new Map()\n  private configs: Map<string, ErrorBoundaryConfig> = new Map()\n  private listeners: Array<(error: ErrorMetrics) => void> = []\n\n  private constructor() {\n    this.initializeDefaultConfigs()\n    this.setupGlobalErrorHandlers()\n  }\n\n  static getInstance(): ErrorBoundaryManager {\n    if (!ErrorBoundaryManager.instance) {\n      ErrorBoundaryManager.instance = new ErrorBoundaryManager()\n    }\n    return ErrorBoundaryManager.instance\n  }\n\n  // ===================================\n  // CONFIGURACIÓN\n  // ===================================\n\n  private initializeDefaultConfigs() {\n    // Configuración para páginas\n    this.configs.set('page', {\n      level: 'page',\n      enableRetry: true,\n      maxRetries: 2,\n      retryDelay: 2000,\n      enableAutoRecovery: true,\n      recoveryTimeout: 5000,\n      enableReporting: true,\n    })\n\n    // Configuración para secciones\n    this.configs.set('section', {\n      level: 'section',\n      enableRetry: true,\n      maxRetries: 3,\n      retryDelay: 1000,\n      enableAutoRecovery: true,\n      recoveryTimeout: 3000,\n      enableReporting: true,\n    })\n\n    // Configuración para componentes\n    this.configs.set('component', {\n      level: 'component',\n      enableRetry: true,\n      maxRetries: 5,\n      retryDelay: 500,\n      enableAutoRecovery: true,\n      recoveryTimeout: 2000,\n      enableReporting: false, // Solo reportar errores críticos\n    })\n  }\n\n  getConfig(level: string): ErrorBoundaryConfig {\n    return this.configs.get(level) || this.configs.get('component')!\n  }\n\n  updateConfig(level: string, config: Partial<ErrorBoundaryConfig>) {\n    const currentConfig = this.getConfig(level)\n    this.configs.set(level, { ...currentConfig, ...config })\n  }\n\n  // ===================================\n  // GESTIÓN DE ERRORES\n  // ===================================\n\n  reportError(\n    error: Error,\n    errorInfo: ErrorInfo,\n    context: {\n      errorId: string\n      level: string\n      component: string\n      retryCount: number\n      vercelRequestId?: string\n      buildId?: string\n    }\n  ) {\n    const errorType = this.classifyError(error)\n    const userImpact = this.assessUserImpact(context.level, error)\n\n    // Extraer Vercel Request ID de headers si está disponible\n    const vercelRequestId = context.vercelRequestId || this.extractVercelRequestId()\n\n    // Generar correlation ID para vincular errores relacionados\n    const correlationId = this.generateCorrelationId(error, context.component)\n\n    const errorMetrics: ErrorMetrics = {\n      errorId: context.errorId,\n      timestamp: Date.now(),\n      errorType,\n      component: context.component,\n      level: context.level,\n      retryCount: context.retryCount,\n      resolved: false,\n      userImpact,\n      vercelRequestId,\n      correlationId,\n      buildId: context.buildId || process.env.VERCEL_GIT_COMMIT_SHA,\n      nextjsVersion: this.getNextJSVersion(),\n      metadataErrors: this.extractMetadataErrors(error),\n    }\n\n    this.errors.set(context.errorId, errorMetrics)\n    this.detectErrorPattern(error, context.component)\n    this.notifyListeners(errorMetrics)\n\n    // Reportar a sistemas externos si es necesario\n    if (this.shouldReportExternally(errorMetrics)) {\n      this.reportToExternalSystems(errorMetrics, error, errorInfo)\n    }\n  }\n\n  private extractVercelRequestId(): string | undefined {\n    if (typeof window !== 'undefined') {\n      // En el cliente, intentar obtener de headers de respuesta\n      return undefined\n    }\n\n    // En el servidor, obtener de headers de request\n    try {\n      const headers = require('next/headers')\n      const headersList = headers.headers()\n      return headersList.get('x-vercel-id') || headersList.get('x-request-id')\n    } catch {\n      return undefined\n    }\n  }\n\n  private generateCorrelationId(error: Error, component: string): string {\n    const errorSignature = `${error.name}_${component}_${error.message.substring(0, 50)}`\n    return Buffer.from(errorSignature).toString('base64').substring(0, 16)\n  }\n\n  private getNextJSVersion(): string {\n    try {\n      const packageJson = require('../../../package.json')\n      return packageJson.dependencies?.next || 'unknown'\n    } catch {\n      return 'unknown'\n    }\n  }\n\n  private extractMetadataErrors(error: Error): string[] {\n    const metadataErrors: string[] = []\n    const errorMessage = error.message.toLowerCase()\n\n    if (\n      errorMessage.includes('metadata') ||\n      errorMessage.includes('viewport') ||\n      errorMessage.includes('themecolor')\n    ) {\n      if (errorMessage.includes('viewport')) {\n        metadataErrors.push('metadata_viewport')\n      }\n      if (errorMessage.includes('themecolor')) {\n        metadataErrors.push('metadata_themeColor')\n      }\n      if (errorMessage.includes('unsupported')) {\n        metadataErrors.push('unsupported_metadata')\n      }\n    }\n\n    return metadataErrors\n  }\n\n  markErrorResolved(errorId: string, resolutionTime?: number) {\n    const error = this.errors.get(errorId)\n    if (error) {\n      error.resolved = true\n      error.resolutionTime = resolutionTime || Date.now() - error.timestamp\n      this.errors.set(errorId, error)\n    }\n  }\n\n  // ===================================\n  // CLASIFICACIÓN Y ANÁLISIS\n  // ===================================\n\n  private classifyError(error: Error): string {\n    const message = error.message.toLowerCase()\n    const stack = error.stack?.toLowerCase() || ''\n\n    // Errores de chunk loading\n    if (message.includes('loading chunk') || message.includes('loading css chunk')) {\n      return 'ChunkLoadError'\n    }\n\n    // Errores de red\n    if (message.includes('network') || message.includes('fetch') || message.includes('timeout')) {\n      return 'NetworkError'\n    }\n\n    // Errores de React\n    if (stack.includes('react') || message.includes('render')) {\n      return 'ReactError'\n    }\n\n    // Errores de JavaScript\n    if (error.name === 'TypeError') {\n      return 'TypeError'\n    }\n    if (error.name === 'ReferenceError') {\n      return 'ReferenceError'\n    }\n    if (error.name === 'SyntaxError') {\n      return 'SyntaxError'\n    }\n\n    return 'UnknownError'\n  }\n\n  private assessUserImpact(level: string, error: Error): ErrorMetrics['userImpact'] {\n    // Impacto crítico para errores de página\n    if (level === 'page') {\n      return 'critical'\n    }\n\n    // Impacto alto para errores de sección\n    if (level === 'section') {\n      return 'high'\n    }\n\n    // Evaluar por tipo de error\n    const errorType = this.classifyError(error)\n    switch (errorType) {\n      case 'ChunkLoadError':\n        return 'high' // Impide la carga de funcionalidad\n      case 'NetworkError':\n        return 'medium' // Puede afectar datos\n      case 'ReactError':\n        return level === 'component' ? 'low' : 'medium'\n      default:\n        return 'low'\n    }\n  }\n\n  private detectErrorPattern(error: Error, component: string) {\n    const patternKey = `${error.name}:${component}`\n    const existing = this.patterns.get(patternKey)\n\n    if (existing) {\n      existing.frequency++\n      existing.lastOccurrence = Date.now()\n      if (!existing.affectedComponents.includes(component)) {\n        existing.affectedComponents.push(component)\n      }\n    } else {\n      this.patterns.set(patternKey, {\n        pattern: patternKey,\n        frequency: 1,\n        lastOccurrence: Date.now(),\n        affectedComponents: [component],\n        suggestedFix: this.getSuggestedFix(error),\n      })\n    }\n  }\n\n  private getSuggestedFix(error: Error): string | undefined {\n    const errorType = this.classifyError(error)\n\n    switch (errorType) {\n      case 'ChunkLoadError':\n        return 'Consider implementing chunk retry logic or reducing bundle size'\n      case 'NetworkError':\n        return 'Implement network retry with exponential backoff'\n      case 'TypeError':\n        return 'Add null/undefined checks and proper type validation'\n      case 'ReactError':\n        return 'Review component lifecycle and state management'\n      default:\n        return undefined\n    }\n  }\n\n  // ===================================\n  // REPORTE EXTERNO\n  // ===================================\n\n  private shouldReportExternally(errorMetrics: ErrorMetrics): boolean {\n    // Reportar errores críticos y de alto impacto\n    if (errorMetrics.userImpact === 'critical' || errorMetrics.userImpact === 'high') {\n      return true\n    }\n\n    // Reportar errores frecuentes\n    const pattern = Array.from(this.patterns.values()).find(p =>\n      p.pattern.includes(errorMetrics.errorType)\n    )\n\n    if (pattern && pattern.frequency >= 5) {\n      return true\n    }\n\n    return false\n  }\n\n  private async reportToExternalSystems(\n    errorMetrics: ErrorMetrics,\n    error: Error,\n    errorInfo: ErrorInfo\n  ) {\n    try {\n      // Importar logger de forma dinámica para evitar dependencias circulares\n      const { logger, LogLevel, LogCategory, logVercel, logNextJS } = await import(\n        '../enterprise/logger'\n      )\n\n      // Log específico para errores de Next.js/Vercel\n      if (errorMetrics.metadataErrors && errorMetrics.metadataErrors.length > 0) {\n        logNextJS(\n          LogLevel.ERROR,\n          'Next.js Metadata Error Detected',\n          {\n            errorType: errorMetrics.metadataErrors[0] as any,\n            route: typeof window !== 'undefined' ? window.location.pathname : undefined,\n            requestId: errorMetrics.errorId,\n            vercelRequestId: errorMetrics.vercelRequestId,\n            correlationId: errorMetrics.correlationId,\n            buildId: errorMetrics.buildId,\n            nextjsVersion: errorMetrics.nextjsVersion,\n            buildWarnings: errorMetrics.metadataErrors,\n          },\n          {\n            userId: errorMetrics.errorId.split('_')[0],\n            sessionId: this.getSessionId(),\n          }\n        )\n      }\n\n      // Log para Vercel si tenemos Request ID\n      if (errorMetrics.vercelRequestId) {\n        logVercel(LogLevel.ERROR, 'Vercel Request Error Correlation', {\n          errorType: 'runtime_error',\n          requestId: errorMetrics.errorId,\n          vercelRequestId: errorMetrics.vercelRequestId,\n          correlationId: errorMetrics.correlationId,\n          buildId: errorMetrics.buildId,\n        })\n      }\n\n      // Log general del error\n      logger.error(LogCategory.SECURITY, `Error Boundary Triggered: ${error.message}`, error, {\n        requestId: errorMetrics.errorId,\n        userId: errorMetrics.correlationId,\n      })\n\n      // Reportar a Supabase Analytics si está disponible\n      if (typeof window !== 'undefined' && (window as any).supabase) {\n        await this.reportToSupabaseAnalytics(errorMetrics, error)\n      }\n    } catch (reportError) {\n      console.error('❌ Failed to report to external systems:', reportError)\n    }\n  }\n\n  private async reportToSupabaseAnalytics(errorMetrics: ErrorMetrics, error: Error) {\n    try {\n      const { supabase } = await import('../integrations/supabase/client')\n\n      await supabase.from('analytics_events').insert({\n        event_name: 'error_boundary_triggered',\n        category: 'error',\n        action: 'error_caught',\n        label: errorMetrics.component,\n        value: errorMetrics.retryCount,\n        metadata: {\n          errorId: errorMetrics.errorId,\n          errorType: errorMetrics.errorType,\n          userImpact: errorMetrics.userImpact,\n          vercelRequestId: errorMetrics.vercelRequestId,\n          correlationId: errorMetrics.correlationId,\n          buildId: errorMetrics.buildId,\n          nextjsVersion: errorMetrics.nextjsVersion,\n          metadataErrors: errorMetrics.metadataErrors,\n          errorMessage: error.message,\n          errorStack: error.stack?.substring(0, 1000), // Limitar tamaño del stack\n        },\n        page: typeof window !== 'undefined' ? window.location.pathname : undefined,\n        user_agent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      })\n    } catch (analyticsError) {\n      console.error('Failed to report to Supabase Analytics:', analyticsError)\n    }\n  }\n\n  private getSessionId(): string {\n    if (typeof window !== 'undefined') {\n      let sessionId = sessionStorage.getItem('error_session_id')\n      if (!sessionId) {\n        sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`\n        sessionStorage.setItem('error_session_id', sessionId)\n      }\n      return sessionId\n    }\n    return `server_session_${Date.now()}`\n  }\n\n  // ===================================\n  // MANEJO GLOBAL DE ERRORES\n  // ===================================\n\n  private setupGlobalErrorHandlers() {\n    if (typeof window === 'undefined') {\n      return\n    }\n\n    // Manejar errores JavaScript no capturados\n    window.addEventListener('error', event => {\n      this.handleGlobalError(event.error, 'global_javascript_error')\n    })\n\n    // Manejar promesas rechazadas no capturadas\n    window.addEventListener('unhandledrejection', event => {\n      this.handleGlobalError(event.reason, 'unhandled_promise_rejection')\n    })\n\n    // Manejar errores de recursos (imágenes, scripts, etc.)\n    window.addEventListener(\n      'error',\n      event => {\n        if (event.target !== window) {\n          this.handleResourceError(event)\n        }\n      },\n      true\n    )\n  }\n\n  private handleGlobalError(error: any, type: string) {\n    const errorId = `global_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    const errorMetrics: ErrorMetrics = {\n      errorId,\n      timestamp: Date.now(),\n      errorType: type,\n      component: 'global',\n      level: 'page',\n      retryCount: 0,\n      resolved: false,\n      userImpact: 'high',\n    }\n\n    this.errors.set(errorId, errorMetrics)\n    this.notifyListeners(errorMetrics)\n\n    console.error(`🌐 Global error (${type}):`, error)\n  }\n\n  private handleResourceError(event: Event) {\n    const target = event.target as HTMLElement\n    const resourceType = target.tagName?.toLowerCase() || 'unknown'\n    const src = (target as any).src || (target as any).href || 'unknown'\n\n    console.warn(`📦 Resource loading error (${resourceType}):`, src)\n\n    // Intentar recargar recursos críticos\n    if (resourceType === 'script' && src.includes('chunk')) {\n      setTimeout(() => {\n        window.location.reload()\n      }, 2000)\n    }\n  }\n\n  // ===================================\n  // LISTENERS Y MÉTRICAS\n  // ===================================\n\n  addErrorListener(listener: (error: ErrorMetrics) => void) {\n    this.listeners.push(listener)\n  }\n\n  removeErrorListener(listener: (error: ErrorMetrics) => void) {\n    const index = this.listeners.indexOf(listener)\n    if (index > -1) {\n      this.listeners.splice(index, 1)\n    }\n  }\n\n  private notifyListeners(error: ErrorMetrics) {\n    this.listeners.forEach(listener => {\n      try {\n        listener(error)\n      } catch (listenerError) {\n        console.error('❌ Error in error listener:', listenerError)\n      }\n    })\n  }\n\n  // ===================================\n  // MÉTRICAS Y REPORTES\n  // ===================================\n\n  getErrorMetrics(): {\n    totalErrors: number\n    errorsByType: Record<string, number>\n    errorsByComponent: Record<string, number>\n    errorsByImpact: Record<string, number>\n    patterns: ErrorPattern[]\n    recentErrors: ErrorMetrics[]\n  } {\n    const errors = Array.from(this.errors.values())\n    const patterns = Array.from(this.patterns.values())\n\n    return {\n      totalErrors: errors.length,\n      errorsByType: this.groupBy(errors, 'errorType'),\n      errorsByComponent: this.groupBy(errors, 'component'),\n      errorsByImpact: this.groupBy(errors, 'userImpact'),\n      patterns: patterns.sort((a, b) => b.frequency - a.frequency),\n      recentErrors: errors.sort((a, b) => b.timestamp - a.timestamp).slice(0, 10),\n    }\n  }\n\n  private groupBy<T>(array: T[], key: keyof T): Record<string, number> {\n    return array.reduce(\n      (acc, item) => {\n        const value = String(item[key])\n        acc[value] = (acc[value] || 0) + 1\n        return acc\n      },\n      {} as Record<string, number>\n    )\n  }\n\n  clearOldErrors(maxAge: number = 24 * 60 * 60 * 1000) {\n    // 24 horas por defecto\n    const cutoff = Date.now() - maxAge\n\n    for (const [errorId, error] of this.errors.entries()) {\n      if (error.timestamp < cutoff) {\n        this.errors.delete(errorId)\n      }\n    }\n\n    for (const [patternKey, pattern] of this.patterns.entries()) {\n      if (pattern.lastOccurrence < cutoff) {\n        this.patterns.delete(patternKey)\n      }\n    }\n  }\n\n  // ===================================\n  // UTILIDADES\n  // ===================================\n\n  getHealthStatus(): {\n    status: 'healthy' | 'degraded' | 'critical'\n    errorRate: number\n    criticalErrors: number\n    recommendations: string[]\n  } {\n    const errors = Array.from(this.errors.values())\n    const recentErrors = errors.filter(e => e.timestamp > Date.now() - 60000) // Últimos 60 segundos\n    const criticalErrors = errors.filter(e => e.userImpact === 'critical').length\n\n    const errorRate = recentErrors.length\n    let status: 'healthy' | 'degraded' | 'critical' = 'healthy'\n    const recommendations: string[] = []\n\n    if (criticalErrors > 0) {\n      status = 'critical'\n      recommendations.push('Resolver errores críticos inmediatamente')\n    } else if (errorRate > 5) {\n      status = 'degraded'\n      recommendations.push('Alta tasa de errores detectada')\n    }\n\n    // Analizar patrones frecuentes\n    const frequentPatterns = Array.from(this.patterns.values()).filter(p => p.frequency >= 3)\n\n    if (frequentPatterns.length > 0) {\n      recommendations.push('Revisar patrones de errores frecuentes')\n      if (status === 'healthy') {\n        status = 'degraded'\n      }\n    }\n\n    return {\n      status,\n      errorRate,\n      criticalErrors,\n      recommendations,\n    }\n  }\n}\n\n// ===================================\n// EXPORT\n// ===================================\n\nexport const errorBoundaryManager = ErrorBoundaryManager.getInstance()\nexport default ErrorBoundaryManager\n"],"names":["errorBoundaryManager","ErrorBoundaryManager","errors","Map","patterns","configs","listeners","initializeDefaultConfigs","setupGlobalErrorHandlers","getInstance","instance","set","level","enableRetry","maxRetries","retryDelay","enableAutoRecovery","recoveryTimeout","enableReporting","getConfig","get","updateConfig","config","currentConfig","reportError","error","errorInfo","context","errorType","classifyError","userImpact","assessUserImpact","vercelRequestId","extractVercelRequestId","correlationId","generateCorrelationId","component","errorMetrics","errorId","timestamp","Date","now","retryCount","resolved","buildId","process","env","VERCEL_GIT_COMMIT_SHA","nextjsVersion","getNextJSVersion","metadataErrors","extractMetadataErrors","detectErrorPattern","notifyListeners","shouldReportExternally","reportToExternalSystems","window","undefined","headers","require","headersList","errorSignature","name","message","substring","Buffer","from","toString","packageJson","dependencies","next","errorMessage","toLowerCase","includes","push","markErrorResolved","resolutionTime","stack","patternKey","existing","frequency","lastOccurrence","affectedComponents","pattern","suggestedFix","getSuggestedFix","Array","values","find","p","logger","LogLevel","LogCategory","logVercel","logNextJS","length","ERROR","route","location","pathname","requestId","buildWarnings","userId","split","sessionId","getSessionId","SECURITY","supabase","reportToSupabaseAnalytics","console","insert","event_name","category","action","label","value","metadata","errorStack","page","user_agent","navigator","userAgent","analyticsError","sessionStorage","getItem","Math","random","setItem","addEventListener","event","handleGlobalError","reason","target","handleResourceError","type","substr","resourceType","tagName","src","href","warn","setTimeout","reload","addErrorListener","listener","removeErrorListener","index","indexOf","splice","forEach","listenerError","getErrorMetrics","totalErrors","errorsByType","groupBy","errorsByComponent","errorsByImpact","sort","a","b","recentErrors","slice","array","key","reduce","acc","item","String","clearOldErrors","maxAge","cutoff","entries","delete","getHealthStatus","filter","e","criticalErrors","errorRate","status","recommendations","frequentPatterns"],"mappings":"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"}