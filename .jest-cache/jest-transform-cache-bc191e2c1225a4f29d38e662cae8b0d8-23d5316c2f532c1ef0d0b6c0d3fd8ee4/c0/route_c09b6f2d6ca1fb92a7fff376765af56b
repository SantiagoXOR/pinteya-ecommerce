121d2f5a72b39b2fb1efac1b272b9395
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2hqkc6g8a() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\refunds\\route.ts";
  var hash = "fa916b05a3e05ea4eb807251a5ab1043e172882f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\refunds\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "9": {
        start: {
          line: 25,
          column: 18
        },
        end: {
          line: 25,
          column: 66
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 60
        }
      },
      "11": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 71
        }
      },
      "12": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "13": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "14": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "15": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "16": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 32
        }
      },
      "17": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 72
        }
      },
      "18": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "19": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "20": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 49
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "23": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 124
        }
      },
      "24": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "25": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "26": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "27": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 122
        }
      },
      "28": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "29": {
        start: {
          line: 63,
          column: 21
        },
        end: {
          line: 63,
          column: 41
        }
      },
      "30": {
        start: {
          line: 64,
          column: 57
        },
        end: {
          line: 64,
          column: 61
        }
      },
      "31": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "32": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "33": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "34": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "35": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "36": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "37": {
        start: {
          line: 91,
          column: 51
        },
        end: {
          line: 91,
          column: 189
        }
      },
      "38": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "39": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "40": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "42": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "43": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "44": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "45": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 119,
          column: 92
        }
      },
      "46": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 30
        }
      },
      "47": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "48": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "49": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "50": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 149,
          column: 11
        }
      },
      "51": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "52": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "53": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 118
        }
      },
      "54": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 24
        }
      },
      "55": {
        start: {
          line: 167,
          column: 31
        },
        end: {
          line: 167,
          column: 53
        }
      },
      "56": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "57": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "58": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "59": {
        start: {
          line: 188,
          column: 22
        },
        end: {
          line: 188,
          column: 32
        }
      },
      "60": {
        start: {
          line: 189,
          column: 21
        },
        end: {
          line: 189,
          column: 72
        }
      },
      "61": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "62": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 192,
          column: 49
        }
      },
      "63": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "64": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "65": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 122
        }
      },
      "66": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "67": {
        start: {
          line: 204,
          column: 29
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "68": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 120
        }
      },
      "69": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 28
        }
      },
      "70": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 40
        }
      },
      "71": {
        start: {
          line: 215,
          column: 22
        },
        end: {
          line: 215,
          column: 69
        }
      },
      "72": {
        start: {
          line: 216,
          column: 23
        },
        end: {
          line: 216,
          column: 70
        }
      },
      "73": {
        start: {
          line: 217,
          column: 23
        },
        end: {
          line: 217,
          column: 53
        }
      },
      "74": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 218,
          column: 59
        }
      },
      "75": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "76": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "77": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 237,
          column: 44
        }
      },
      "78": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "79": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 47
        }
      },
      "80": {
        start: {
          line: 241,
          column: 41
        },
        end: {
          line: 241,
          column: 52
        }
      },
      "81": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "82": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "83": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "84": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "85": {
        start: {
          line: 255,
          column: 25
        },
        end: {
          line: 265,
          column: 10
        }
      },
      "86": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 116
        }
      },
      "87": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "88": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 269,
          column: 53
        }
      },
      "89": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "90": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "91": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "92": {
        start: {
          line: 290,
          column: 23
        },
        end: {
          line: 290,
          column: 66
        }
      },
      "93": {
        start: {
          line: 291,
          column: 24
        },
        end: {
          line: 291,
          column: 57
        }
      },
      "94": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 294,
          column: 90
        }
      },
      "95": {
        start: {
          line: 296,
          column: 31
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "96": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "97": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 30
        }
      },
      "98": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 94
        }
      },
      "99": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 323,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 19
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 187,
            column: 15
          },
          end: {
            line: 187,
            column: 18
          }
        },
        loc: {
          start: {
            line: 187,
            column: 28
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 187
      },
      "6": {
        name: "processRefund",
        decl: {
          start: {
            line: 287,
            column: 19
          },
          end: {
            line: 287,
            column: 32
          }
        },
        loc: {
          start: {
            line: 287,
            column: 70
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 287
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 59
          }
        }, {
          start: {
            line: 34,
            column: 63
          },
          end: {
            line: 34,
            column: 72
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 35,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 35,
            column: 55
          }
        }, {
          start: {
            line: 35,
            column: 59
          },
          end: {
            line: 35,
            column: 68
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 22
          }
        }, {
          start: {
            line: 92,
            column: 26
          },
          end: {
            line: 92,
            column: 32
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "9": {
        loc: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 35
          }
        }, {
          start: {
            line: 109,
            column: 39
          },
          end: {
            line: 109,
            column: 57
          }
        }],
        line: 109
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 65
          },
          end: {
            line: 122,
            column: 75
          }
        }, {
          start: {
            line: 122,
            column: 78
          },
          end: {
            line: 122,
            column: 94
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 30
          }
        }, {
          start: {
            line: 133,
            column: 34
          },
          end: {
            line: 133,
            column: 71
          }
        }],
        line: 133
      },
      "13": {
        loc: {
          start: {
            line: 134,
            column: 26
          },
          end: {
            line: 134,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 26
          },
          end: {
            line: 134,
            column: 34
          }
        }, {
          start: {
            line: 134,
            column: 38
          },
          end: {
            line: 134,
            column: 40
          }
        }],
        line: 134
      },
      "14": {
        loc: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 59
          }
        }, {
          start: {
            line: 189,
            column: 63
          },
          end: {
            line: 189,
            column: 72
          }
        }],
        line: 189
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "16": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "17": {
        loc: {
          start: {
            line: 215,
            column: 31
          },
          end: {
            line: 215,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 31
          },
          end: {
            line: 215,
            column: 60
          }
        }, {
          start: {
            line: 215,
            column: 64
          },
          end: {
            line: 215,
            column: 68
          }
        }],
        line: 215
      },
      "18": {
        loc: {
          start: {
            line: 216,
            column: 32
          },
          end: {
            line: 216,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 32
          },
          end: {
            line: 216,
            column: 62
          }
        }, {
          start: {
            line: 216,
            column: 66
          },
          end: {
            line: 216,
            column: 69
          }
        }],
        line: 216
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "21": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 248,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 248,
            column: 35
          }
        }, {
          start: {
            line: 248,
            column: 39
          },
          end: {
            line: 248,
            column: 40
          }
        }],
        line: 248
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 252,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 19
          },
          end: {
            line: 252,
            column: 34
          }
        }, {
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 39
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 257,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 257,
            column: 25
          }
        }, {
          start: {
            line: 257,
            column: 29
          },
          end: {
            line: 257,
            column: 31
          }
        }],
        line: 257
      },
      "25": {
        loc: {
          start: {
            line: 261,
            column: 23
          },
          end: {
            line: 261,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 23
          },
          end: {
            line: 261,
            column: 38
          }
        }, {
          start: {
            line: 261,
            column: 42
          },
          end: {
            line: 261,
            column: 43
          }
        }],
        line: 261
      },
      "26": {
        loc: {
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 26
          }
        }, {
          start: {
            line: 301,
            column: 30
          },
          end: {
            line: 301,
            column: 52
          }
        }],
        line: 301
      },
      "27": {
        loc: {
          start: {
            line: 303,
            column: 22
          },
          end: {
            line: 303,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 22
          },
          end: {
            line: 303,
            column: 30
          }
        }, {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 303,
            column: 36
          }
        }],
        line: 303
      },
      "28": {
        loc: {
          start: {
            line: 322,
            column: 22
          },
          end: {
            line: 322,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 22
          },
          end: {
            line: 322,
            column: 30
          }
        }, {
          start: {
            line: 322,
            column: 34
          },
          end: {
            line: 322,
            column: 36
          }
        }],
        line: 322
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\payments\\refunds\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO REFUNDS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit, addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\nimport { createMercadoPagoClient } from '@/lib/integrations/mercadopago';\r\nimport { Payment } from 'mercadopago';\r\n\r\ninterface RefundRequest {\r\n  payment_id: string;\r\n  amount?: number;\r\n  reason?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface RefundResponse {\r\n  id: string;\r\n  payment_id: string;\r\n  amount: number;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  reason?: string;\r\n  created_at: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * POST /api/payments/refunds\r\n * Procesa reembolsos seg\xFAn documentaci\xF3n oficial de MercadoPago\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n  const userAgent = request.headers.get('user-agent') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.PAYMENT_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      logger.warn(LogCategory.API, 'Rate limit exceeded for refunds', {\r\n        clientIP,\r\n        userId,\r\n      });\r\n\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n      return response;\r\n    }\r\n\r\n    const body: RefundRequest = await request.json();\r\n    const { payment_id, amount, reason, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!payment_id) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'payment_id es requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund request started', {\r\n      userId,\r\n      payment_id,\r\n      amount,\r\n      reason,\r\n      clientIP,\r\n    });\r\n\r\n    // Verificar que el pago existe y pertenece al usuario\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuraci\xF3n de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, total_amount, payment_status, external_reference')\r\n      .eq('external_reference', payment_id)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Pago no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (order.payment_status !== 'approved') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Solo se pueden reembolsar pagos aprobados' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validar monto del reembolso\r\n    const refundAmount = amount || order.total_amount;\r\n    if (refundAmount > order.total_amount) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'El monto del reembolso no puede ser mayor al pago original' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Procesar reembolso con MercadoPago\r\n    const refundResult = await processRefund(payment_id, refundAmount, reason, metadata);\r\n\r\n    // Actualizar estado en base de datos\r\n    await supabase\r\n      .from('orders')\r\n      .update({ \r\n        payment_status: refundResult.status === 'approved' ? 'refunded' : 'refund_pending',\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', order.id);\r\n\r\n    // Registrar reembolso en tabla de refunds (si existe)\r\n    try {\r\n      await supabase\r\n        .from('refunds')\r\n        .insert({\r\n          order_id: order.id,\r\n          payment_id,\r\n          refund_id: refundResult.id,\r\n          amount: refundAmount,\r\n          status: refundResult.status,\r\n          reason: reason || 'Reembolso solicitado por el cliente',\r\n          metadata: metadata || {},\r\n          created_at: new Date().toISOString(),\r\n        });\r\n    } catch (refundInsertError) {\r\n      // Si la tabla refunds no existe, solo loggeamos el warning\r\n      logger.warn(LogCategory.PAYMENT, 'Refunds table not found, skipping insert', {\r\n        payment_id,\r\n        refund_id: refundResult.id,\r\n      });\r\n    }\r\n\r\n    // Registrar m\xE9tricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, payment_id, amount: refundAmount }\r\n    );\r\n\r\n    logger.info(LogCategory.PAYMENT, 'Refund processed successfully', {\r\n      userId,\r\n      payment_id,\r\n      refund_id: refundResult.id,\r\n      amount: refundAmount,\r\n      status: refundResult.status,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refundResult,\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.PAYMENT_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refund processing failed', {\r\n      operation: 'refund-processing-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n      userAgent,\r\n    });\r\n\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'POST',\r\n      500,\r\n      processingTime,\r\n      { error: (error as Error).message }\r\n    );\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/payments/refunds\r\n * Lista reembolsos del usuario\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.QUERY_API\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { success: false, error: 'Demasiadas solicitudes' },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n      return response;\r\n    }\r\n\r\n    // Obtener par\xE1metros de consulta\r\n    const url = new URL(request.url);\r\n    const limit = parseInt(url.searchParams.get('limit') || '10');\r\n    const offset = parseInt(url.searchParams.get('offset') || '0');\r\n    const status = url.searchParams.get('status');\r\n\r\n    const supabase = getSupabaseClient();\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error de configuraci\xF3n de base de datos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Construir query\r\n    let query = supabase\r\n      .from('refunds')\r\n      .select(`\r\n        *,\r\n        orders (\r\n          id,\r\n          total_amount,\r\n          created_at\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    const { data: refunds, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Error al obtener reembolsos: ${error.message}`);\r\n    }\r\n\r\n    // Registrar m\xE9tricas\r\n    await metricsCollector.recordRequest(\r\n      '/api/payments/refunds',\r\n      'GET',\r\n      200,\r\n      Date.now() - startTime,\r\n      { userId, count: (refunds?.length || 0).toString() }\r\n    );\r\n\r\n    logger.info(LogCategory.API, 'Refunds list retrieved', {\r\n      userId,\r\n      count: refunds?.length || 0,\r\n      processingTime: Date.now() - startTime,\r\n    });\r\n\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      data: refunds || [],\r\n      pagination: {\r\n        limit,\r\n        offset,\r\n        total: refunds?.length || 0,\r\n      },\r\n      timestamp: Date.now(),\r\n      processing_time: Date.now() - startTime,\r\n    });\r\n\r\n    addRateLimitHeaders(response, rateLimitResult, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    return response;\r\n\r\n  } catch (error) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Refunds list failed', {\r\n      operation: 'refunds-list-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Procesa reembolso con MercadoPago\r\n */\r\nasync function processRefund(\r\n  paymentId: string,\r\n  amount: number,\r\n  reason?: string,\r\n  metadata?: Record<string, any>\r\n): Promise<RefundResponse> {\r\n  try {\r\n    // Crear cliente de MercadoPago\r\n    const client = createMercadoPagoClient();\r\n    const payment = new Payment(client);\r\n\r\n    // En una implementaci\xF3n real, aqu\xED se har\xEDa la llamada a la API de MercadoPago\r\n    // Por ahora simulamos el reembolso\r\n    const refundId = `refund_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Simular respuesta de MercadoPago\r\n    const refundResponse: RefundResponse = {\r\n      id: refundId,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'approved', // En producci\xF3n esto vendr\xEDa de MercadoPago\r\n      reason: reason || 'Reembolso solicitado',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n\r\n    logger.info(LogCategory.PAYMENT, 'MercadoPago refund simulated', {\r\n      payment_id: paymentId,\r\n      refund_id: refundId,\r\n      amount,\r\n      status: refundResponse.status,\r\n    });\r\n\r\n    return refundResponse;\r\n\r\n  } catch (error) {\r\n    logger.error(LogCategory.PAYMENT, 'MercadoPago refund failed', error as Error);\r\n\r\n    // En caso de error, devolver estado pendiente\r\n    return {\r\n      id: `refund_error_${Date.now()}`,\r\n      payment_id: paymentId,\r\n      amount,\r\n      status: 'pending',\r\n      reason: 'Error al procesar reembolso, se procesar\xE1 manualmente',\r\n      created_at: new Date().toISOString(),\r\n      metadata: metadata || {},\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "startTime", "Date", "now", "clientIP", "headers", "get", "userAgent", "session", "auth", "user", "NextResponse", "json", "success", "error", "status", "rateLimitResult", "checkRateLimit", "RATE_LIMIT_CONFIGS", "PAYMENT_API", "logger", "warn", "LogCategory", "API", "userId", "response", "addRateLimitHeaders", "body", "payment_id", "amount", "reason", "metadata", "info", "PAYMENT", "supabase", "getSupabaseClient", "data", "order", "orderError", "from", "select", "eq", "single", "payment_status", "refundAmount", "total_amount", "refundResult", "processRefund", "update", "updated_at", "toISOString", "id", "insert", "order_id", "refund_id", "created_at", "refundInsertError", "metricsCollector", "recordRequest", "processingTime", "timestamp", "processing_time", "performance", "LogLevel", "ERROR", "operation", "duration", "statusCode", "message", "QUERY_API", "url", "URL", "limit", "parseInt", "searchParams", "offset", "query", "ascending", "range", "refunds", "Error", "count", "length", "toString", "pagination", "total", "paymentId", "client", "createMercadoPagoClient", "payment", "Payment", "refundId", "Math", "random", "substr", "refundResponse"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fa916b05a3e05ea4eb807251a5ab1043e172882f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hqkc6g8a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hqkc6g8a();
cov_2hqkc6g8a().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2hqkc6g8a().f[0]++;
  cov_2hqkc6g8a().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2hqkc6g8a().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2hqkc6g8a().f[1]++;
    cov_2hqkc6g8a().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2hqkc6g8a().f[2]++;
    cov_2hqkc6g8a().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2hqkc6g8a().f[3]++;
    cov_2hqkc6g8a().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[7]++, require("next/server"));
const _config =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[8]++, require("../../../../lib/auth/config"));
const _supabase =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[9]++, require("../../../../lib/integrations/supabase"));
const _logger =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[10]++, require("../../../../lib/enterprise/logger"));
const _ratelimiter =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[11]++, require("../../../../lib/enterprise/rate-limiter"));
const _metrics =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[12]++, require("../../../../lib/enterprise/metrics"));
const _mercadopago =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[13]++, require("../../../../lib/integrations/mercadopago"));
const _mercadopago1 =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[14]++, require("mercadopago"));
const runtime =
/* istanbul ignore next */
(cov_2hqkc6g8a().s[15]++, 'nodejs');
async function POST(request) {
  /* istanbul ignore next */
  cov_2hqkc6g8a().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2hqkc6g8a().s[16]++, Date.now());
  const clientIP =
  /* istanbul ignore next */
  (cov_2hqkc6g8a().s[17]++,
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[0][0]++, request.headers.get('x-forwarded-for')) ||
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[0][1]++, 'unknown'));
  const userAgent =
  /* istanbul ignore next */
  (cov_2hqkc6g8a().s[18]++,
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[1][0]++, request.headers.get('user-agent')) ||
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[1][1]++, 'unknown'));
  /* istanbul ignore next */
  cov_2hqkc6g8a().s[19]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[20]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[21]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[2][0]++;
      cov_2hqkc6g8a().s[22]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[2][1]++;
    }
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[23]++, await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[24]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[3][0]++;
      cov_2hqkc6g8a().s[25]++;
      _logger.logger.warn(_logger.LogCategory.API, 'Rate limit exceeded for refunds', {
        clientIP,
        userId
      });
      const response =
      /* istanbul ignore next */
      (cov_2hqkc6g8a().s[26]++, _server.NextResponse.json({
        success: false,
        error: 'Demasiadas solicitudes'
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[27]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API);
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[28]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[3][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[29]++, await request.json());
    const {
      payment_id,
      amount,
      reason,
      metadata
    } =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[30]++, body);
    // Validar datos requeridos
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[31]++;
    if (!payment_id) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[4][0]++;
      cov_2hqkc6g8a().s[32]++;
      return _server.NextResponse.json({
        success: false,
        error: 'payment_id es requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[4][1]++;
    }
    cov_2hqkc6g8a().s[33]++;
    _logger.logger.info(_logger.LogCategory.PAYMENT, 'Refund request started', {
      userId,
      payment_id,
      amount,
      reason,
      clientIP
    });
    // Verificar que el pago existe y pertenece al usuario
    const supabase =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[34]++, (0, _supabase.getSupabaseClient)());
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[35]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[5][0]++;
      cov_2hqkc6g8a().s[36]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error de configuraciÃ³n de base de datos'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[5][1]++;
    }
    const {
      data: order,
      error: orderError
    } =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[37]++, await supabase.from('orders').select('id, total_amount, payment_status, external_reference').eq('external_reference', payment_id).single());
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[7][0]++, orderError) ||
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[7][1]++, !order)) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[6][0]++;
      cov_2hqkc6g8a().s[39]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Pago no encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[6][1]++;
    }
    cov_2hqkc6g8a().s[40]++;
    if (order.payment_status !== 'approved') {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[8][0]++;
      cov_2hqkc6g8a().s[41]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Solo se pueden reembolsar pagos aprobados'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[8][1]++;
    }
    // Validar monto del reembolso
    const refundAmount =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[42]++,
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[9][0]++, amount) ||
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[9][1]++, order.total_amount));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[43]++;
    if (refundAmount > order.total_amount) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[10][0]++;
      cov_2hqkc6g8a().s[44]++;
      return _server.NextResponse.json({
        success: false,
        error: 'El monto del reembolso no puede ser mayor al pago original'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[10][1]++;
    }
    // Procesar reembolso con MercadoPago
    const refundResult =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[45]++, await processRefund(payment_id, refundAmount, reason, metadata));
    // Actualizar estado en base de datos
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[46]++;
    await supabase.from('orders').update({
      payment_status: refundResult.status === 'approved' ?
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[11][0]++, 'refunded') :
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[11][1]++, 'refund_pending'),
      updated_at: new Date().toISOString()
    }).eq('id', order.id);
    // Registrar reembolso en tabla de refunds (si existe)
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[47]++;
    try {
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[48]++;
      await supabase.from('refunds').insert({
        order_id: order.id,
        payment_id,
        refund_id: refundResult.id,
        amount: refundAmount,
        status: refundResult.status,
        reason:
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[12][0]++, reason) ||
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[12][1]++, 'Reembolso solicitado por el cliente'),
        metadata:
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[13][0]++, metadata) ||
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[13][1]++, {}),
        created_at: new Date().toISOString()
      });
    } catch (refundInsertError) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[49]++;
      // Si la tabla refunds no existe, solo loggeamos el warning
      _logger.logger.warn(_logger.LogCategory.PAYMENT, 'Refunds table not found, skipping insert', {
        payment_id,
        refund_id: refundResult.id
      });
    }
    // Registrar mÃ©tricas
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[50]++;
    await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'POST', 200, Date.now() - startTime, {
      userId,
      payment_id,
      amount: refundAmount
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[51]++;
    _logger.logger.info(_logger.LogCategory.PAYMENT, 'Refund processed successfully', {
      userId,
      payment_id,
      refund_id: refundResult.id,
      amount: refundAmount,
      status: refundResult.status,
      processingTime: Date.now() - startTime
    });
    const response =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[52]++, _server.NextResponse.json({
      success: true,
      data: refundResult,
      timestamp: Date.now(),
      processing_time: Date.now() - startTime
    }));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[53]++;
    (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.PAYMENT_API);
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[54]++;
    return response;
  } catch (error) {
    const processingTime =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[55]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[56]++;
    _logger.logger.performance(_logger.LogLevel.ERROR, 'Refund processing failed', {
      operation: 'refund-processing-api',
      duration: processingTime,
      statusCode: 500
    }, {
      clientIP,
      userAgent
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[57]++;
    await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'POST', 500, processingTime, {
      error: error.message
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[58]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2hqkc6g8a().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_2hqkc6g8a().s[59]++, Date.now());
  const clientIP =
  /* istanbul ignore next */
  (cov_2hqkc6g8a().s[60]++,
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[14][0]++, request.headers.get('x-forwarded-for')) ||
  /* istanbul ignore next */
  (cov_2hqkc6g8a().b[14][1]++, 'unknown'));
  /* istanbul ignore next */
  cov_2hqkc6g8a().s[61]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[62]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[63]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[15][0]++;
      cov_2hqkc6g8a().s[64]++;
      return _server.NextResponse.json({
        success: false,
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[15][1]++;
    }
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[65]++, await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[66]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[16][0]++;
      const response =
      /* istanbul ignore next */
      (cov_2hqkc6g8a().s[67]++, _server.NextResponse.json({
        success: false,
        error: 'Demasiadas solicitudes'
      }, {
        status: 429
      }));
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[68]++;
      (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
      /* istanbul ignore next */
      cov_2hqkc6g8a().s[69]++;
      return response;
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[16][1]++;
    }
    // Obtener parÃ¡metros de consulta
    const url =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[70]++, new URL(request.url));
    const limit =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[71]++, parseInt(
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[17][0]++, url.searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[17][1]++, '10')));
    const offset =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[72]++, parseInt(
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[18][0]++, url.searchParams.get('offset')) ||
    /* istanbul ignore next */
    (cov_2hqkc6g8a().b[18][1]++, '0')));
    const status =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[73]++, url.searchParams.get('status'));
    const supabase =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[74]++, (0, _supabase.getSupabaseClient)());
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[75]++;
    if (!supabase) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[19][0]++;
      cov_2hqkc6g8a().s[76]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Error de configuraciÃ³n de base de datos'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[19][1]++;
    }
    // Construir query
    let query =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[77]++, supabase.from('refunds').select(`
        *,
        orders (
          id,
          total_amount,
          created_at
        )
      `).order('created_at', {
      ascending: false
    }).range(offset, offset + limit - 1));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[78]++;
    if (status) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[20][0]++;
      cov_2hqkc6g8a().s[79]++;
      query = query.eq('status', status);
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[20][1]++;
    }
    const {
      data: refunds,
      error
    } =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[80]++, await query);
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[81]++;
    if (error) {
      /* istanbul ignore next */
      cov_2hqkc6g8a().b[21][0]++;
      cov_2hqkc6g8a().s[82]++;
      throw new Error(`Error al obtener reembolsos: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2hqkc6g8a().b[21][1]++;
    }
    // Registrar mÃ©tricas
    cov_2hqkc6g8a().s[83]++;
    await _metrics.metricsCollector.recordRequest('/api/payments/refunds', 'GET', 200, Date.now() - startTime, {
      userId,
      count: (
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[22][0]++, refunds?.length) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[22][1]++, 0)).toString()
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[84]++;
    _logger.logger.info(_logger.LogCategory.API, 'Refunds list retrieved', {
      userId,
      count:
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[23][0]++, refunds?.length) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[23][1]++, 0),
      processingTime: Date.now() - startTime
    });
    const response =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[85]++, _server.NextResponse.json({
      success: true,
      data:
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[24][0]++, refunds) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[24][1]++, []),
      pagination: {
        limit,
        offset,
        total:
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[25][0]++, refunds?.length) ||
        /* istanbul ignore next */
        (cov_2hqkc6g8a().b[25][1]++, 0)
      },
      timestamp: Date.now(),
      processing_time: Date.now() - startTime
    }));
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[86]++;
    (0, _ratelimiter.addRateLimitHeaders)(response, rateLimitResult, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API);
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[87]++;
    return response;
  } catch (error) {
    const processingTime =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[88]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[89]++;
    _logger.logger.performance(_logger.LogLevel.ERROR, 'Refunds list failed', {
      operation: 'refunds-list-api',
      duration: processingTime,
      statusCode: 500
    }, {
      clientIP
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[90]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
/**
 * Procesa reembolso con MercadoPago
 */
async function processRefund(paymentId, amount, reason, metadata) {
  /* istanbul ignore next */
  cov_2hqkc6g8a().f[6]++;
  cov_2hqkc6g8a().s[91]++;
  try {
    // Crear cliente de MercadoPago
    const client =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[92]++, (0, _mercadopago.createMercadoPagoClient)());
    const payment =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[93]++, new _mercadopago1.Payment(client));
    // En una implementaciÃ³n real, aquÃ­ se harÃ­a la llamada a la API de MercadoPago
    // Por ahora simulamos el reembolso
    const refundId =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[94]++, `refund_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    // Simular respuesta de MercadoPago
    const refundResponse =
    /* istanbul ignore next */
    (cov_2hqkc6g8a().s[95]++, {
      id: refundId,
      payment_id: paymentId,
      amount,
      status: 'approved',
      reason:
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[26][0]++, reason) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[26][1]++, 'Reembolso solicitado'),
      created_at: new Date().toISOString(),
      metadata:
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[27][0]++, metadata) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[27][1]++, {})
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[96]++;
    _logger.logger.info(_logger.LogCategory.PAYMENT, 'MercadoPago refund simulated', {
      payment_id: paymentId,
      refund_id: refundId,
      amount,
      status: refundResponse.status
    });
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[97]++;
    return refundResponse;
  } catch (error) {
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[98]++;
    _logger.logger.error(_logger.LogCategory.PAYMENT, 'MercadoPago refund failed', error);
    // En caso de error, devolver estado pendiente
    /* istanbul ignore next */
    cov_2hqkc6g8a().s[99]++;
    return {
      id: `refund_error_${Date.now()}`,
      payment_id: paymentId,
      amount,
      status: 'pending',
      reason: 'Error al procesar reembolso, se procesarÃ¡ manualmente',
      created_at: new Date().toISOString(),
      metadata:
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[28][0]++, metadata) ||
      /* istanbul ignore next */
      (cov_2hqkc6g8a().b[28][1]++, {})
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,