c60ecd327a0820270a576ff946ef1a31
// ===================================
// TESTS: Hook useBrandFilter
// ===================================
"use strict";
// Mock de la API de marcas
jest.mock('@/lib/api/brands', ()=>({
        getBrands: jest.fn(()=>Promise.resolve({
                success: true,
                data: [
                    {
                        name: 'El Galgo',
                        products_count: 5
                    },
                    {
                        name: 'Plavicon',
                        products_count: 8
                    },
                    {
                        name: 'Akapol',
                        products_count: 3
                    },
                    {
                        name: 'Sinteplast',
                        products_count: 2
                    }
                ]
            }))
    }));
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush
            }),
        useSearchParams: ()=>({
                get: jest.fn(()=>null),
                toString: jest.fn(()=>'')
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useBrandFilter = require("../../hooks/useBrandFilter");
// Mock de Next.js router
const mockPush = jest.fn();
describe('useBrandFilter Hook', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Funcionalidad básica', ()=>{
        it('debería cargar marcas automáticamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            expect(result.current.isLoading).toBe(true);
            expect(result.current.brands).toEqual([]);
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.brands).toHaveLength(4);
            expect(result.current.brands[0]).toEqual({
                name: 'El Galgo',
                products_count: 5
            });
        });
        it('debería permitir deshabilitar carga automática', ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    autoLoad: false
                }));
            expect(result.current.isLoading).toBe(false);
            expect(result.current.brands).toEqual([]);
        });
        it('debería manejar selección de marcas', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo',
                    'Plavicon'
                ]);
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo',
                'Plavicon'
            ]);
        });
        it('debería alternar marcas correctamente', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Agregar marca
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo'
            ]);
            // Quitar marca
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            expect(result.current.selectedBrands).toEqual([]);
            // Agregar múltiples marcas
            (0, _react.act)(()=>{
                result.current.toggleBrand('El Galgo');
            });
            (0, _react.act)(()=>{
                result.current.toggleBrand('Plavicon');
            });
            expect(result.current.selectedBrands).toEqual([
                'El Galgo',
                'Plavicon'
            ]);
        });
        it('debería limpiar todas las marcas', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo',
                    'Plavicon',
                    'Akapol'
                ]);
            });
            expect(result.current.selectedBrands).toHaveLength(3);
            (0, _react.act)(()=>{
                result.current.clearBrands();
            });
            expect(result.current.selectedBrands).toEqual([]);
        });
    });
    describe('Manejo de errores', ()=>{
        it('debería manejar errores de API', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            mockGetBrands.mockRejectedValueOnce(new Error('Error de red'));
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.error).toBe('Error de red');
            expect(result.current.brands).toEqual([]);
        });
        it('debería manejar respuesta de API sin éxito', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            mockGetBrands.mockResolvedValueOnce({
                success: false,
                error: 'Error del servidor'
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(result.current.error).toBe('Error del servidor');
            expect(result.current.brands).toEqual([]);
        });
    });
    describe('Búsqueda de marcas', ()=>{
        it('debería buscar marcas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Mock respuesta de búsqueda
            mockGetBrands.mockResolvedValueOnce({
                success: true,
                data: [
                    {
                        name: 'El Galgo',
                        products_count: 5
                    }
                ]
            });
            (0, _react.act)(()=>{
                result.current.searchBrands('galgo');
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(mockGetBrands).toHaveBeenCalledWith({
                search: 'galgo',
                minProducts: 1
            });
        });
    });
    describe('Refetch', ()=>{
        it('debería recargar marcas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)());
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Limpiar llamadas anteriores
            mockGetBrands.mockClear();
            (0, _react.act)(()=>{
                result.current.refetch();
            });
            expect(result.current.isLoading).toBe(true);
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            expect(mockGetBrands).toHaveBeenCalledTimes(1);
        });
    });
    describe('Callback onBrandsChange', ()=>{
        it('debería llamar callback cuando cambian las marcas', async ()=>{
            const onBrandsChange = jest.fn();
            const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    onBrandsChange
                }));
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            (0, _react.act)(()=>{
                result.current.setSelectedBrands([
                    'El Galgo'
                ]);
            });
            expect(onBrandsChange).toHaveBeenCalledWith([
                'El Galgo'
            ]);
            (0, _react.act)(()=>{
                result.current.toggleBrand('Plavicon');
            });
            expect(onBrandsChange).toHaveBeenCalledWith([
                'El Galgo',
                'Plavicon'
            ]);
        });
    });
    describe('Configuración de minProducts', ()=>{
        it('debería usar minProducts en las consultas', async ()=>{
            const mockGetBrands = require('@/lib/api/brands').getBrands;
            (0, _react.renderHook)(()=>(0, _useBrandFilter.useBrandFilter)({
                    minProducts: 5
                }));
            await (0, _react.waitFor)(()=>{
                expect(mockGetBrands).toHaveBeenCalledWith({
                    minProducts: 5
                });
            });
        });
    });
});
describe('useSimpleBrandFilter Hook', ()=>{
    it('debería manejar selección simple de marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        expect(result.current.selectedBrands).toEqual([]);
        (0, _react.act)(()=>{
            result.current.setSelectedBrands([
                'El Galgo'
            ]);
        });
        expect(result.current.selectedBrands).toEqual([
            'El Galgo'
        ]);
    });
    it('debería alternar marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        (0, _react.act)(()=>{
            result.current.toggleBrand('El Galgo');
        });
        expect(result.current.selectedBrands).toEqual([
            'El Galgo'
        ]);
        (0, _react.act)(()=>{
            result.current.toggleBrand('El Galgo');
        });
        expect(result.current.selectedBrands).toEqual([]);
    });
    it('debería limpiar marcas', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useBrandFilter.useSimpleBrandFilter)());
        (0, _react.act)(()=>{
            result.current.setSelectedBrands([
                'El Galgo',
                'Plavicon'
            ]);
        });
        expect(result.current.selectedBrands).toHaveLength(2);
        (0, _react.act)(()=>{
            result.current.clearBrands();
        });
        expect(result.current.selectedBrands).toEqual([]);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcX190ZXN0c19fXFxob29rc1xcdXNlQnJhbmRGaWx0ZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBURVNUUzogSG9vayB1c2VCcmFuZEZpbHRlclxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XHJcbmltcG9ydCB7IHVzZUJyYW5kRmlsdGVyLCB1c2VTaW1wbGVCcmFuZEZpbHRlciB9IGZyb20gJ0AvaG9va3MvdXNlQnJhbmRGaWx0ZXInO1xyXG5cclxuLy8gTW9jayBkZSBsYSBBUEkgZGUgbWFyY2FzXHJcbmplc3QubW9jaygnQC9saWIvYXBpL2JyYW5kcycsICgpID0+ICh7XHJcbiAgZ2V0QnJhbmRzOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgZGF0YTogW1xyXG4gICAgICB7IG5hbWU6ICdFbCBHYWxnbycsIHByb2R1Y3RzX2NvdW50OiA1IH0sXHJcbiAgICAgIHsgbmFtZTogJ1BsYXZpY29uJywgcHJvZHVjdHNfY291bnQ6IDggfSxcclxuICAgICAgeyBuYW1lOiAnQWthcG9sJywgcHJvZHVjdHNfY291bnQ6IDMgfSxcclxuICAgICAgeyBuYW1lOiAnU2ludGVwbGFzdCcsIHByb2R1Y3RzX2NvdW50OiAyIH0sXHJcbiAgICBdXHJcbiAgfSkpXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgZGUgTmV4dC5qcyByb3V0ZXJcclxuY29uc3QgbW9ja1B1c2ggPSBqZXN0LmZuKCk7XHJcbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcclxuICB1c2VSb3V0ZXI6ICgpID0+ICh7XHJcbiAgICBwdXNoOiBtb2NrUHVzaCxcclxuICB9KSxcclxuICB1c2VTZWFyY2hQYXJhbXM6ICgpID0+ICh7XHJcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gbnVsbCksXHJcbiAgICB0b1N0cmluZzogamVzdC5mbigoKSA9PiAnJyksXHJcbiAgfSksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCd1c2VCcmFuZEZpbHRlciBIb29rJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdGdW5jaW9uYWxpZGFkIGLDoXNpY2EnLCAoKSA9PiB7XHJcbiAgICBpdCgnZGViZXLDrWEgY2FyZ2FyIG1hcmNhcyBhdXRvbcOhdGljYW1lbnRlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VCcmFuZEZpbHRlcigpKTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5icmFuZHMpLnRvRXF1YWwoW10pO1xyXG5cclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJyYW5kcykudG9IYXZlTGVuZ3RoKDQpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYnJhbmRzWzBdKS50b0VxdWFsKHtcclxuICAgICAgICBuYW1lOiAnRWwgR2FsZ28nLFxyXG4gICAgICAgIHByb2R1Y3RzX2NvdW50OiA1XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RlYmVyw61hIHBlcm1pdGlyIGRlc2hhYmlsaXRhciBjYXJnYSBhdXRvbcOhdGljYScsICgpID0+IHtcclxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQnJhbmRGaWx0ZXIoeyBhdXRvTG9hZDogZmFsc2UgfSkpO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5icmFuZHMpLnRvRXF1YWwoW10pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RlYmVyw61hIG1hbmVqYXIgc2VsZWNjacOzbiBkZSBtYXJjYXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUJyYW5kRmlsdGVyKCkpO1xyXG5cclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICByZXN1bHQuY3VycmVudC5zZXRTZWxlY3RlZEJyYW5kcyhbJ0VsIEdhbGdvJywgJ1BsYXZpY29uJ10pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbJ0VsIEdhbGdvJywgJ1BsYXZpY29uJ10pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RlYmVyw61hIGFsdGVybmFyIG1hcmNhcyBjb3JyZWN0YW1lbnRlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VCcmFuZEZpbHRlcigpKTtcclxuXHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEFncmVnYXIgbWFyY2FcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICByZXN1bHQuY3VycmVudC50b2dnbGVCcmFuZCgnRWwgR2FsZ28nKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRCcmFuZHMpLnRvRXF1YWwoWydFbCBHYWxnbyddKTtcclxuXHJcbiAgICAgIC8vIFF1aXRhciBtYXJjYVxyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnRvZ2dsZUJyYW5kKCdFbCBHYWxnbycpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbXSk7XHJcblxyXG4gICAgICAvLyBBZ3JlZ2FyIG3Dumx0aXBsZXMgbWFyY2FzXHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQudG9nZ2xlQnJhbmQoJ0VsIEdhbGdvJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnRvZ2dsZUJyYW5kKCdQbGF2aWNvbicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbJ0VsIEdhbGdvJywgJ1BsYXZpY29uJ10pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RlYmVyw61hIGxpbXBpYXIgdG9kYXMgbGFzIG1hcmNhcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQnJhbmRGaWx0ZXIoKSk7XHJcblxyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKGZhbHNlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNldFNlbGVjdGVkQnJhbmRzKFsnRWwgR2FsZ28nLCAnUGxhdmljb24nLCAnQWthcG9sJ10pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9IYXZlTGVuZ3RoKDMpO1xyXG5cclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICByZXN1bHQuY3VycmVudC5jbGVhckJyYW5kcygpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbXSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ01hbmVqbyBkZSBlcnJvcmVzJywgKCkgPT4ge1xyXG4gICAgaXQoJ2RlYmVyw61hIG1hbmVqYXIgZXJyb3JlcyBkZSBBUEknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tHZXRCcmFuZHMgPSByZXF1aXJlKCdAL2xpYi9hcGkvYnJhbmRzJykuZ2V0QnJhbmRzO1xyXG4gICAgICBtb2NrR2V0QnJhbmRzLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0Vycm9yIGRlIHJlZCcpKTtcclxuXHJcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUJyYW5kRmlsdGVyKCkpO1xyXG5cclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm9yKS50b0JlKCdFcnJvciBkZSByZWQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJyYW5kcykudG9FcXVhbChbXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZGViZXLDrWEgbWFuZWphciByZXNwdWVzdGEgZGUgQVBJIHNpbiDDqXhpdG8nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tHZXRCcmFuZHMgPSByZXF1aXJlKCdAL2xpYi9hcGkvYnJhbmRzJykuZ2V0QnJhbmRzO1xyXG4gICAgICBtb2NrR2V0QnJhbmRzLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6ICdFcnJvciBkZWwgc2Vydmlkb3InXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQnJhbmRGaWx0ZXIoKSk7XHJcblxyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKGZhbHNlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ0Vycm9yIGRlbCBzZXJ2aWRvcicpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYnJhbmRzKS50b0VxdWFsKFtdKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQsO6c3F1ZWRhIGRlIG1hcmNhcycsICgpID0+IHtcclxuICAgIGl0KCdkZWJlcsOtYSBidXNjYXIgbWFyY2FzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrR2V0QnJhbmRzID0gcmVxdWlyZSgnQC9saWIvYXBpL2JyYW5kcycpLmdldEJyYW5kcztcclxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQnJhbmRGaWx0ZXIoKSk7XHJcblxyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKGZhbHNlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBNb2NrIHJlc3B1ZXN0YSBkZSBiw7pzcXVlZGFcclxuICAgICAgbW9ja0dldEJyYW5kcy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgZGF0YTogW3sgbmFtZTogJ0VsIEdhbGdvJywgcHJvZHVjdHNfY291bnQ6IDUgfV1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNlYXJjaEJyYW5kcygnZ2FsZ28nKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlKGZhbHNlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBleHBlY3QobW9ja0dldEJyYW5kcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgIHNlYXJjaDogJ2dhbGdvJyxcclxuICAgICAgICBtaW5Qcm9kdWN0czogMVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnUmVmZXRjaCcsICgpID0+IHtcclxuICAgIGl0KCdkZWJlcsOtYSByZWNhcmdhciBtYXJjYXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tHZXRCcmFuZHMgPSByZXF1aXJlKCdAL2xpYi9hcGkvYnJhbmRzJykuZ2V0QnJhbmRzO1xyXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VCcmFuZEZpbHRlcigpKTtcclxuXHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIExpbXBpYXIgbGxhbWFkYXMgYW50ZXJpb3Jlc1xyXG4gICAgICBtb2NrR2V0QnJhbmRzLm1vY2tDbGVhcigpO1xyXG5cclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICByZXN1bHQuY3VycmVudC5yZWZldGNoKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZSh0cnVlKTtcclxuXHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChtb2NrR2V0QnJhbmRzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0NhbGxiYWNrIG9uQnJhbmRzQ2hhbmdlJywgKCkgPT4ge1xyXG4gICAgaXQoJ2RlYmVyw61hIGxsYW1hciBjYWxsYmFjayBjdWFuZG8gY2FtYmlhbiBsYXMgbWFyY2FzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBvbkJyYW5kc0NoYW5nZSA9IGplc3QuZm4oKTtcclxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gXHJcbiAgICAgICAgdXNlQnJhbmRGaWx0ZXIoeyBvbkJyYW5kc0NoYW5nZSB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICByZXN1bHQuY3VycmVudC5zZXRTZWxlY3RlZEJyYW5kcyhbJ0VsIEdhbGdvJ10pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGV4cGVjdChvbkJyYW5kc0NoYW5nZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoWydFbCBHYWxnbyddKTtcclxuXHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQudG9nZ2xlQnJhbmQoJ1BsYXZpY29uJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZXhwZWN0KG9uQnJhbmRzQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ0VsIEdhbGdvJywgJ1BsYXZpY29uJ10pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdDb25maWd1cmFjacOzbiBkZSBtaW5Qcm9kdWN0cycsICgpID0+IHtcclxuICAgIGl0KCdkZWJlcsOtYSB1c2FyIG1pblByb2R1Y3RzIGVuIGxhcyBjb25zdWx0YXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vY2tHZXRCcmFuZHMgPSByZXF1aXJlKCdAL2xpYi9hcGkvYnJhbmRzJykuZ2V0QnJhbmRzO1xyXG4gICAgICBcclxuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VCcmFuZEZpbHRlcih7IG1pblByb2R1Y3RzOiA1IH0pKTtcclxuXHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChtb2NrR2V0QnJhbmRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IG1pblByb2R1Y3RzOiA1IH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCd1c2VTaW1wbGVCcmFuZEZpbHRlciBIb29rJywgKCkgPT4ge1xyXG4gIGl0KCdkZWJlcsOtYSBtYW5lamFyIHNlbGVjY2nDs24gc2ltcGxlIGRlIG1hcmNhcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNpbXBsZUJyYW5kRmlsdGVyKCkpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbXSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0U2VsZWN0ZWRCcmFuZHMoWydFbCBHYWxnbyddKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbJ0VsIEdhbGdvJ10pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGViZXLDrWEgYWx0ZXJuYXIgbWFyY2FzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlU2ltcGxlQnJhbmRGaWx0ZXIoKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVzdWx0LmN1cnJlbnQudG9nZ2xlQnJhbmQoJ0VsIEdhbGdvJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRCcmFuZHMpLnRvRXF1YWwoWydFbCBHYWxnbyddKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC50b2dnbGVCcmFuZCgnRWwgR2FsZ28nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5zZWxlY3RlZEJyYW5kcykudG9FcXVhbChbXSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdkZWJlcsOtYSBsaW1waWFyIG1hcmNhcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVNpbXBsZUJyYW5kRmlsdGVyKCkpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LnNldFNlbGVjdGVkQnJhbmRzKFsnRWwgR2FsZ28nLCAnUGxhdmljb24nXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc2VsZWN0ZWRCcmFuZHMpLnRvSGF2ZUxlbmd0aCgyKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5jbGVhckJyYW5kcygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnNlbGVjdGVkQnJhbmRzKS50b0VxdWFsKFtdKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImdldEJyYW5kcyIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzdWNjZXNzIiwiZGF0YSIsIm5hbWUiLCJwcm9kdWN0c19jb3VudCIsInVzZVJvdXRlciIsInB1c2giLCJtb2NrUHVzaCIsInVzZVNlYXJjaFBhcmFtcyIsImdldCIsInRvU3RyaW5nIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZUJyYW5kRmlsdGVyIiwiZXhwZWN0IiwiY3VycmVudCIsImlzTG9hZGluZyIsInRvQmUiLCJicmFuZHMiLCJ0b0VxdWFsIiwid2FpdEZvciIsInRvSGF2ZUxlbmd0aCIsImF1dG9Mb2FkIiwiYWN0Iiwic2V0U2VsZWN0ZWRCcmFuZHMiLCJzZWxlY3RlZEJyYW5kcyIsInRvZ2dsZUJyYW5kIiwiY2xlYXJCcmFuZHMiLCJtb2NrR2V0QnJhbmRzIiwicmVxdWlyZSIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwiZXJyb3IiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJzZWFyY2hCcmFuZHMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInNlYXJjaCIsIm1pblByb2R1Y3RzIiwibW9ja0NsZWFyIiwicmVmZXRjaCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIm9uQnJhbmRzQ2hhbmdlIiwidXNlU2ltcGxlQnJhbmRGaWx0ZXIiXSwibWFwcGluZ3MiOiJBQUFB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