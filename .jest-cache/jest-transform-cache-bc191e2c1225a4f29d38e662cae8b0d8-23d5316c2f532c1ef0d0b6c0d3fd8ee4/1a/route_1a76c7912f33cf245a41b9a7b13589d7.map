{"version":3,"names":["cov_18ez0roro2","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","validateSimpleAuth","b","NODE_ENV","BYPASS_AUTH","success","user","id","email","error","request","startTime","Date","now","console","log","authResult","_server","NextResponse","json","status","searchParams","URL","url","page","parseInt","get","limit","search","query","from","select","count","eq","or","to","range","order","ascending","data","orders","ordersError","length","userIds","map","user_id","filter","Boolean","userProfiles","profiles","profilesError","in","statsData","statsError","stats","totalOrders","pendingOrders","confirmedOrders","shippedOrders","deliveredOrders","cancelledOrders","totalRevenue","averageOrderValue","o","reduce","sum","total","formattedOrders","userProfile","find","profile","orderNumber","external_reference","toString","slice","customer","name","first_name","last_name","trim","paymentId","payment_id","shippingAddress","shipping_address","createdAt","created_at","updatedAt","updated_at","responseTime","analytics","total_orders","pending_orders","completed_orders","total_revenue","today_revenue","pagination","totalPages","Math","ceil","hasNextPage","hasPreviousPage","meta","timestamp","toISOString","details","Error","message","body","insert","single"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders-simple\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: √ìRDENES ADMIN SIMPLIFICADA (DESARROLLO)\r\n// Descripci√≥n: Versi√≥n simplificada sin Redis ni m√©tricas complejas\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// =====================================================\r\n// CONFIGURACI√ìN SIMPLIFICADA\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// VALIDACI√ìN DE AUTH SIMPLIFICADA\r\n// =====================================================\r\n\r\nasync function validateSimpleAuth() {\r\n  // En desarrollo, permitir acceso directo\r\n  if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n    return { \r\n      success: true, \r\n      user: { \r\n        id: 'dev-admin', \r\n        email: 'santiago@xor.com.ar' \r\n      } \r\n    };\r\n  }\r\n  \r\n  return { success: false, error: 'No autorizado' };\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - LISTAR √ìRDENES\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    console.log('üîç [Orders Simple API] Iniciando GET request');\r\n    \r\n    // Validar autenticaci√≥n\r\n    const authResult = await validateSimpleAuth();\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    console.log('‚úÖ [Orders Simple API] Autenticaci√≥n exitosa');\r\n\r\n    // Obtener par√°metros de query\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const status = searchParams.get('status');\r\n    const search = searchParams.get('search');\r\n\r\n    console.log('üìã [Orders Simple API] Par√°metros:', { page, limit, status, search });\r\n\r\n    // Construir query base (sin join autom√°tico)\r\n    let query = supabase\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        user_id,\r\n        status,\r\n        total,\r\n        payment_id,\r\n        shipping_address,\r\n        external_reference,\r\n        created_at,\r\n        updated_at\r\n      `, { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (status && status !== 'all') {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    if (search) {\r\n      query = query.or(`external_reference.ilike.%${search}%,user_id.ilike.%${search}%`);\r\n    }\r\n\r\n    // Aplicar paginaci√≥n\r\n    const from = (page - 1) * limit;\r\n    const to = from + limit - 1;\r\n    query = query.range(from, to);\r\n\r\n    // Ordenar por fecha de creaci√≥n (m√°s recientes primero)\r\n    query = query.order('created_at', { ascending: false });\r\n\r\n    console.log('üîç [Orders Simple API] Ejecutando query...');\r\n\r\n    // Ejecutar query\r\n    const { data: orders, error: ordersError, count } = await query;\r\n\r\n    if (ordersError) {\r\n      console.error('‚ùå [Orders Simple API] Error en query:', ordersError);\r\n      throw ordersError;\r\n    }\r\n\r\n    console.log(`‚úÖ [Orders Simple API] Query exitosa: ${orders?.length || 0} √≥rdenes encontradas`);\r\n\r\n    // Obtener datos de usuarios para hacer join manual\r\n    console.log('üë• [Orders Simple API] Obteniendo datos de usuarios...');\r\n\r\n    const userIds = orders?.map(order => order.user_id).filter(Boolean) || [];\r\n    let userProfiles = [];\r\n\r\n    if (userIds.length > 0) {\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('user_profiles')\r\n        .select('id, email, first_name, last_name')\r\n        .in('id', userIds);\r\n\r\n      if (!profilesError && profiles) {\r\n        userProfiles = profiles;\r\n        console.log(`‚úÖ [Orders Simple API] ${profiles.length} perfiles de usuario obtenidos`);\r\n      } else {\r\n        console.log('‚ö†Ô∏è [Orders Simple API] Error obteniendo perfiles:', profilesError);\r\n      }\r\n    }\r\n\r\n    // Calcular estad√≠sticas b√°sicas\r\n    console.log('üìä [Orders Simple API] Calculando estad√≠sticas...');\r\n    \r\n    const { data: statsData, error: statsError } = await supabase\r\n      .from('orders')\r\n      .select('status, total');\r\n\r\n    let stats = {\r\n      totalOrders: count || 0,\r\n      pendingOrders: 0,\r\n      confirmedOrders: 0,\r\n      shippedOrders: 0,\r\n      deliveredOrders: 0,\r\n      cancelledOrders: 0,\r\n      totalRevenue: 0,\r\n      averageOrderValue: 0\r\n    };\r\n\r\n    if (!statsError && statsData) {\r\n      stats = {\r\n        totalOrders: count || 0,\r\n        pendingOrders: statsData.filter(o => o.status === 'pending').length,\r\n        confirmedOrders: statsData.filter(o => o.status === 'confirmed').length,\r\n        shippedOrders: statsData.filter(o => o.status === 'shipped').length,\r\n        deliveredOrders: statsData.filter(o => o.status === 'delivered').length,\r\n        cancelledOrders: statsData.filter(o => o.status === 'cancelled').length,\r\n        totalRevenue: statsData.reduce((sum, o) => sum + (o.total || 0), 0),\r\n        averageOrderValue: statsData.length > 0 ? statsData.reduce((sum, o) => sum + (o.total || 0), 0) / statsData.length : 0\r\n      };\r\n    }\r\n\r\n    console.log('üìä [Orders Simple API] Estad√≠sticas calculadas:', stats);\r\n\r\n    // Formatear respuesta con join manual\r\n    const formattedOrders = orders?.map(order => {\r\n      // Buscar el perfil de usuario correspondiente\r\n      const userProfile = userProfiles.find(profile => profile.id === order.user_id);\r\n\r\n      return {\r\n        id: order.id,\r\n        orderNumber: order.external_reference || `ORD-${order.id.toString().slice(-8)}`,\r\n        customer: {\r\n          id: userProfile?.id || order.user_id,\r\n          name: userProfile ? `${userProfile.first_name || ''} ${userProfile.last_name || ''}`.trim() : 'Usuario no encontrado',\r\n          email: userProfile?.email || 'Email no disponible'\r\n        },\r\n        status: order.status,\r\n        total: order.total,\r\n        paymentId: order.payment_id,\r\n        shippingAddress: order.shipping_address,\r\n        createdAt: order.created_at,\r\n        updatedAt: order.updated_at\r\n      };\r\n    }) || [];\r\n\r\n    const responseTime = Date.now() - startTime;\r\n    \r\n    console.log(`‚úÖ [Orders Simple API] Respuesta exitosa en ${responseTime}ms`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        orders: formattedOrders,\r\n        analytics: {\r\n          total_orders: stats.totalOrders,\r\n          pending_orders: stats.pendingOrders,\r\n          completed_orders: stats.confirmedOrders + stats.deliveredOrders,\r\n          total_revenue: stats.totalRevenue,\r\n          today_revenue: 0 // Placeholder, se puede calcular despu√©s\r\n        },\r\n        pagination: {\r\n          page,\r\n          limit,\r\n          total: count || 0,\r\n          totalPages: Math.ceil((count || 0) / limit),\r\n          hasNextPage: page < Math.ceil((count || 0) / limit),\r\n          hasPreviousPage: page > 1\r\n        }\r\n      },\r\n      meta: {\r\n        responseTime,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    const responseTime = Date.now() - startTime;\r\n    \r\n    console.error('‚ùå [Orders Simple API] Error:', error);\r\n\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n        meta: {\r\n          responseTime,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER POST - CREAR ORDEN (SIMPLIFICADO)\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Validar autenticaci√≥n\r\n    const authResult = await validateSimpleAuth();\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    \r\n    // Crear orden b√°sica\r\n    const { data: order, error } = await supabase\r\n      .from('orders')\r\n      .insert({\r\n        user_id: body.user_id || 'dev-user',\r\n        status: body.status || 'pending',\r\n        total: body.total || 0,\r\n        payment_id: body.payment_id || 'dev-payment',\r\n        shipping_address: body.shipping_address || {},\r\n        external_reference: body.external_reference || `DEV-${Date.now()}`\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: order\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå [Orders Simple API] Error en POST:', error);\r\n\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error creando orden',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}