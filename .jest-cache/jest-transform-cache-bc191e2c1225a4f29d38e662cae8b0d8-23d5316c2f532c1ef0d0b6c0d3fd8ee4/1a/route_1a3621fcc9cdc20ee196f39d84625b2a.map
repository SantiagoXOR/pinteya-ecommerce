{"version":3,"names":["DELETE","cov_2mnobogmkd","f","s","GET","PUT","request","params","session","_auth","auth","user","b","_server","NextResponse","json","error","status","userEmail","email","data","_supabase","supabaseAdmin","from","select","eq","single","userSession","id","success","console","fetchError","currentIP","getClientIP","currentUserAgent","headers","get","ip_address","user_agent","deleteError","delete","logSecurityActivity","session_id","device_name","message","body","is_trusted","location","updateData","last_activity","Date","toISOString","updatedSession","updateError","update","forwarded","realIP","split","trim","ip","userId","action","metadata","insert","user_id","category","created_at"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\sessions\\[id]\\route.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - API DE GESTIÓN DE SESIÓN ESPECÍFICA\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\n// GET - Obtener información de una sesión específica\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: RouteParams\r\n) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener la sesión específica\r\n    const { data: userSession, error } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*')\r\n      .eq('id', params.id)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (error || !userSession) {\r\n      return NextResponse.json(\r\n        { error: 'Sesión no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      session: userSession,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/sessions/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE - Cerrar una sesión específica\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  { params }: RouteParams\r\n) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la sesión pertenece al usuario\r\n    const { data: userSession, error: fetchError } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*')\r\n      .eq('id', params.id)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (fetchError || !userSession) {\r\n      return NextResponse.json(\r\n        { error: 'Sesión no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que no sea la sesión actual\r\n    const currentIP = getClientIP(request);\r\n    const currentUserAgent = request.headers.get('user-agent') || '';\r\n    \r\n    if (userSession.ip_address === currentIP && \r\n        userSession.user_agent === currentUserAgent) {\r\n      return NextResponse.json(\r\n        { error: 'No puedes cerrar tu sesión actual' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Eliminar la sesión\r\n    const { error: deleteError } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .delete()\r\n      .eq('id', params.id)\r\n      .eq('user_id', user.id);\r\n\r\n    if (deleteError) {\r\n      console.error('Error al eliminar sesión:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al cerrar sesión' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad de seguridad\r\n    await logSecurityActivity(user.id, 'session_terminated', {\r\n      session_id: params.id,\r\n      device_name: userSession.device_name,\r\n      ip_address: userSession.ip_address,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Sesión cerrada exitosamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/user/sessions/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Actualizar información de una sesión (marcar como confiable, etc.)\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: RouteParams\r\n) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { is_trusted, location } = body;\r\n\r\n    // Verificar que la sesión pertenece al usuario\r\n    const { data: userSession, error: fetchError } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*')\r\n      .eq('id', params.id)\r\n      .eq('user_id', user.id)\r\n      .single();\r\n\r\n    if (fetchError || !userSession) {\r\n      return NextResponse.json(\r\n        { error: 'Sesión no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Actualizar la sesión\r\n    const updateData: any = {\r\n      last_activity: new Date().toISOString(),\r\n    };\r\n\r\n    if (typeof is_trusted === 'boolean') {\r\n      updateData.is_trusted = is_trusted;\r\n    }\r\n\r\n    if (location) {\r\n      updateData.location = location;\r\n    }\r\n\r\n    const { data: updatedSession, error: updateError } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .update(updateData)\r\n      .eq('id', params.id)\r\n      .eq('user_id', user.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (updateError) {\r\n      console.error('Error al actualizar sesión:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar sesión' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      session: updatedSession,\r\n      message: 'Sesión actualizada exitosamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/sessions/[id]:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función auxiliar para obtener IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  if (realIP) {\r\n    return realIP;\r\n  }\r\n  \r\n  return request.ip || 'unknown';\r\n}\r\n\r\n// Función auxiliar para registrar actividad de seguridad\r\nasync function logSecurityActivity(\r\n  userId: string, \r\n  action: string, \r\n  metadata: any\r\n) {\r\n  try {\r\n    await supabaseAdmin\r\n      .from('user_activity')\r\n      .insert({\r\n        user_id: userId,\r\n        action,\r\n        category: 'security',\r\n        metadata,\r\n        created_at: new Date().toISOString(),\r\n      });\r\n  } catch (error) {\r\n    console.error('Error al registrar actividad de seguridad:', error);\r\n  }\r\n}\r\n"],"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","ignoreList":[]}