{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\navigation\\directions\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para obtener direcciones de navegación usando Google Maps Directions API\r\n * POST /api/driver/navigation/directions\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { origin, destination, waypoints = [], travelMode = 'DRIVING' } = body;\r\n\r\n    // Validar parámetros\r\n    if (!origin || !destination) {\r\n      return NextResponse.json(\r\n        { error: 'Origen y destino son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!process.env.GOOGLE_MAPS_API_KEY) {\r\n      return NextResponse.json(\r\n        { error: 'Google Maps API key no configurada' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Construir URL para Google Directions API\r\n    const baseUrl = 'https://maps.googleapis.com/maps/api/directions/json';\r\n    const params = new URLSearchParams({\r\n      origin: `${origin.lat},${origin.lng}`,\r\n      destination: `${destination.lat},${destination.lng}`,\r\n      mode: travelMode.toLowerCase(),\r\n      key: process.env.GOOGLE_MAPS_API_KEY,\r\n      language: 'es',\r\n      region: 'AR',\r\n      units: 'metric',\r\n      alternatives: 'false',\r\n      avoid: 'tolls'\r\n    });\r\n\r\n    // Agregar waypoints si existen\r\n    if (waypoints.length > 0) {\r\n      const waypointsStr = waypoints\r\n        .map((wp: any) => `${wp.lat},${wp.lng}`)\r\n        .join('|');\r\n      params.append('waypoints', `optimize:true|${waypointsStr}`);\r\n    }\r\n\r\n    // Hacer petición a Google Directions API\r\n    const response = await fetch(`${baseUrl}?${params}`);\r\n    const data = await response.json();\r\n\r\n    if (data.status !== 'OK') {\r\n      console.error('Google Directions API error:', data);\r\n      return NextResponse.json(\r\n        { error: `Error de Google Maps: ${data.status}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const route = data.routes[0];\r\n    if (!route) {\r\n      return NextResponse.json(\r\n        { error: 'No se encontró ruta' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Procesar instrucciones de navegación\r\n    const instructions = [];\r\n    let totalDistance = 0;\r\n    let totalDuration = 0;\r\n\r\n    for (const leg of route.legs) {\r\n      totalDistance += leg.distance.value;\r\n      totalDuration += leg.duration.value;\r\n\r\n      for (const step of leg.steps) {\r\n        instructions.push({\r\n          instruction: step.html_instructions.replace(/<[^>]*>/g, ''), // Remover HTML\r\n          distance: step.distance.text,\r\n          duration: step.duration.text,\r\n          maneuver: step.maneuver || 'straight',\r\n          coordinates: {\r\n            lat: step.start_location.lat,\r\n            lng: step.start_location.lng\r\n          },\r\n          end_coordinates: {\r\n            lat: step.end_location.lat,\r\n            lng: step.end_location.lng\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Respuesta estructurada\r\n    const navigationData = {\r\n      route: {\r\n        overview_polyline: route.overview_polyline.points,\r\n        bounds: route.bounds,\r\n        legs: route.legs.map(leg => ({\r\n          distance: leg.distance,\r\n          duration: leg.duration,\r\n          start_address: leg.start_address,\r\n          end_address: leg.end_address,\r\n          start_location: leg.start_location,\r\n          end_location: leg.end_location\r\n        }))\r\n      },\r\n      instructions,\r\n      summary: {\r\n        total_distance: {\r\n          value: totalDistance,\r\n          text: `${(totalDistance / 1000).toFixed(1)} km`\r\n        },\r\n        total_duration: {\r\n          value: totalDuration,\r\n          text: formatDuration(totalDuration)\r\n        },\r\n        waypoints_order: route.waypoint_order || []\r\n      },\r\n      metadata: {\r\n        generated_at: new Date().toISOString(),\r\n        travel_mode: travelMode,\r\n        language: 'es',\r\n        region: 'AR'\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(navigationData);\r\n\r\n  } catch (error) {\r\n    console.error('Error in navigation directions API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Formatear duración en segundos a formato legible\r\n */\r\nfunction formatDuration(seconds: number): string {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes}m`;\r\n  } else {\r\n    return `${minutes}m`;\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de la URL\r\n    const { searchParams } = new URL(request.url);\r\n    const origin = searchParams.get('origin');\r\n    const destination = searchParams.get('destination');\r\n\r\n    if (!origin || !destination) {\r\n      return NextResponse.json(\r\n        { error: 'Parámetros origin y destination requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Redirigir a POST con los parámetros\r\n    const [originLat, originLng] = origin.split(',').map(Number);\r\n    const [destLat, destLng] = destination.split(',').map(Number);\r\n\r\n    const body = {\r\n      origin: { lat: originLat, lng: originLng },\r\n      destination: { lat: destLat, lng: destLng }\r\n    };\r\n\r\n    // Simular POST request\r\n    const postRequest = new NextRequest(request.url, {\r\n      method: 'POST',\r\n      headers: request.headers,\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    return await POST(postRequest);\r\n\r\n  } catch (error) {\r\n    console.error('Error in navigation directions GET:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","session","auth","user","email","NextResponse","json","error","status","body","origin","destination","waypoints","travelMode","process","env","GOOGLE_MAPS_API_KEY","baseUrl","params","URLSearchParams","lat","lng","mode","toLowerCase","key","language","region","units","alternatives","avoid","length","waypointsStr","map","wp","join","append","response","fetch","data","console","route","routes","instructions","totalDistance","totalDuration","leg","legs","distance","value","duration","step","steps","push","instruction","html_instructions","replace","text","maneuver","coordinates","start_location","end_coordinates","end_location","navigationData","overview_polyline","points","bounds","start_address","end_address","summary","total_distance","toFixed","total_duration","formatDuration","waypoints_order","waypoint_order","metadata","generated_at","Date","toISOString","travel_mode","seconds","hours","Math","floor","minutes","searchParams","URL","url","get","originLat","originLng","split","Number","destLat","destLng","postRequest","NextRequest","method","headers","JSON","stringify"],"mappings":"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"}