{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE CATEGORÍAS\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase';\r\nimport { validateData, CategoryFiltersSchema, CategorySchema } from '@/lib/validations';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { Category } from '@/types/database';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET /api/categories - Obtener categorías\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de categorías\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.products, // Usar config de productos para categorías\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'data_access',\r\n        severity: 'low',\r\n        message: 'Categories API accessed',\r\n        context: securityLogger.context,\r\n        metadata: {\r\n          endpoint: '/api/categories',\r\n          method: 'GET',\r\n          userAgent: request.headers.get('user-agent')\r\n        }\r\n      });\r\n\r\n      try {\r\n        const { searchParams } = new URL(request.url);\r\n    \r\n    // Extraer parámetros de query\r\n    const queryParams = {\r\n      search: searchParams.get('search') || undefined,\r\n    };\r\n\r\n    // Validar parámetros (simplificado para la estructura actual)\r\n    const filters = {\r\n      search: queryParams.search,\r\n    };\r\n    \r\n    const supabase = getSupabaseClient();\r\n\r\n    // Verificar que el cliente de Supabase esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente de Supabase no disponible en GET /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio de base de datos no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Construir query base - simplificado para la estructura actual\r\n    const baseQuery = supabase\r\n      .from('categories')\r\n      .select(`\r\n        *,\r\n        products_count:products(count)\r\n      `)\r\n      .order('name');\r\n\r\n    // Aplicar filtros\r\n    let query = baseQuery;\r\n    if (filters.search) {\r\n      query = query.ilike('name', `%${filters.search}%`);\r\n    }\r\n\r\n    // Ejecutar query con timeout de base de datos\r\n    const { data: categories, error } = await withDatabaseTimeout(\r\n      async (signal) => {\r\n        return await query.abortSignal(signal);\r\n      },\r\n      API_TIMEOUTS.database\r\n    );\r\n\r\n    if (error) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        new Error(`Database error: ${error.message}`),\r\n        {\r\n          endpoint: '/api/categories',\r\n          operation: 'select_categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error obteniendo categorías',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n\r\n    // Procesar datos para incluir conteo de productos\r\n    const processedCategories = categories?.map(category => ({\r\n      ...category,\r\n      products_count: category.products_count?.[0]?.count || 0,\r\n    })) || [];\r\n\r\n    // Log de operación exitosa\r\n    securityLogger.log({\r\n      type: 'data_access',\r\n      severity: 'low',\r\n      message: 'Categories retrieved successfully',\r\n      context: securityLogger.context,\r\n      metadata: {\r\n        categoriesCount: processedCategories.length,\r\n        hasSearch: !!filters.search,\r\n        searchTerm: filters.search\r\n      }\r\n    });\r\n\r\n    const response: ApiResponse<Category[]> = {\r\n      data: processedCategories,\r\n      success: true,\r\n      message: `${processedCategories.length} categorías encontradas`,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error en GET /api/categories:', error);\r\n\r\n      // Log de error de seguridad\r\n      securityLogger.logApiError(\r\n        securityLogger.context,\r\n        error instanceof Error ? error : new Error('Unknown error'),\r\n        {\r\n          endpoint: '/api/categories'\r\n        }\r\n      );\r\n\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: error.message || 'Error interno del servidor',\r\n      };\r\n\r\n      return NextResponse.json(errorResponse, { status: 500 });\r\n    }\r\n  });\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/categories', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// POST /api/categories - Crear categoría (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // ENTERPRISE: Usar nueva autenticación enterprise para admin\r\n    const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils');\r\n\r\n    const authResult = await requireAdminAuth(request, ['categories_create']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    const body = await request.json();\r\n    \r\n    // Validar datos de la categoría\r\n    const categoryData = validateData(CategorySchema, body);\r\n    \r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabase) {\r\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories');\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Servicio administrativo no disponible',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 503 });\r\n    }\r\n\r\n    // Crear slug si no se proporciona\r\n    if (!categoryData.slug) {\r\n      categoryData.slug = categoryData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n    }\r\n\r\n    // Insertar categoría\r\n    const { data: category, error } = await supabase\r\n      .from('categories')\r\n      .insert(categoryData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'POST /api/categories');\r\n    }\r\n\r\n    const response: ApiResponse<Category> = {\r\n      data: category,\r\n      success: true,\r\n      message: 'Categoría creada exitosamente',\r\n    };\r\n\r\n    return NextResponse.json(response, { status: 201 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error en POST /api/categories:', error);\r\n    \r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","POST","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","products","log","type","severity","message","context","metadata","endpoint","method","userAgent","headers","get","searchParams","URL","url","queryParams","search","undefined","filters","supabase","getSupabaseClient","console","error","errorResponse","data","success","NextResponse","json","status","baseQuery","from","select","order","query","ilike","categories","withDatabaseTimeout","signal","abortSignal","API_TIMEOUTS","database","logApiError","Error","operation","processedCategories","map","category","products_count","count","categoriesCount","length","hasSearch","searchTerm","response","logRateLimitExceeded","requireAdminAuth","authResult","code","enterprise","timestamp","Date","toISOString","body","categoryData","validateData","CategorySchema","slug","name","toLowerCase","replace","insert","single","handleSupabaseError"],"mappings":"AAAA,qCAAqC;;;;;;;;;;;;QA8BfA;eAAAA;;QA4JAC;eAAAA;;QAzLTC;eAAAA;;;wBAM6B;0BACa;6BACa;6BAU7D;6BAKA;gCAC8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxB9B,MAAMA,UAAU;AA6BhB,eAAeF,IAAIG,OAAoB;IAC5C,yCAAyC;IACzC,MAAMC,iBAAiBC,IAAAA,oCAAoB,EAACF;IAE5C,gDAAgD;IAChD,MAAMG,kBAAkB,MAAMC,IAAAA,0BAAa,EACzCJ,SACAK,+BAAkB,CAACC,QAAQ,EAC3B;QACE,yBAAyB;QACzBL,eAAeM,GAAG,CAAC;YACjBC,MAAM;YACNC,UAAU;YACVC,SAAS;YACTC,SAASV,eAAeU,OAAO;YAC/BC,UAAU;gBACRC,UAAU;gBACVC,QAAQ;gBACRC,WAAWf,QAAQgB,OAAO,CAACC,GAAG,CAAC;YACjC;QACF;QAEA,IAAI;YACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAInB,QAAQoB,GAAG;YAEhD,8BAA8B;YAC9B,MAAMC,cAAc;gBAClBC,QAAQJ,aAAaD,GAAG,CAAC,aAAaM;YACxC;YAEA,8DAA8D;YAC9D,MAAMC,UAAU;gBACdF,QAAQD,YAAYC,MAAM;YAC5B;YAEA,MAAMG,WAAWC,IAAAA,2BAAiB;YAElC,uDAAuD;YACvD,IAAI,CAACD,UAAU;gBACbE,QAAQC,KAAK,CAAC;gBACd,MAAMC,gBAAmC;oBACvCC,MAAM;oBACNC,SAAS;oBACTH,OAAO;gBACT;gBACA,OAAOI,oBAAY,CAACC,IAAI,CAACJ,eAAe;oBAAEK,QAAQ;gBAAI;YACxD;YAEA,gEAAgE;YAChE,MAAMC,YAAYV,SACfW,IAAI,CAAC,cACLC,MAAM,CAAC,CAAC;;;MAGT,CAAC,EACAC,KAAK,CAAC;YAET,kBAAkB;YAClB,IAAIC,QAAQJ;YACZ,IAAIX,QAAQF,MAAM,EAAE;gBAClBiB,QAAQA,MAAMC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAEhB,QAAQF,MAAM,CAAC,CAAC,CAAC;YACnD;YAEA,8CAA8C;YAC9C,MAAM,EAAEQ,MAAMW,UAAU,EAAEb,KAAK,EAAE,GAAG,MAAMc,IAAAA,gCAAmB,EAC3D,OAAOC;gBACL,OAAO,MAAMJ,MAAMK,WAAW,CAACD;YACjC,GACAE,yBAAY,CAACC,QAAQ;YAGvB,IAAIlB,OAAO;gBACTD,QAAQC,KAAK,CAAC,iCAAiCA;gBAE/C,4BAA4B;gBAC5B3B,eAAe8C,WAAW,CACxB9C,eAAeU,OAAO,EACtB,IAAIqC,MAAM,CAAC,gBAAgB,EAAEpB,MAAMlB,OAAO,EAAE,GAC5C;oBACEG,UAAU;oBACVoC,WAAW;gBACb;gBAGF,MAAMpB,gBAAmC;oBACvCC,MAAM;oBACNC,SAAS;oBACTH,OAAOA,MAAMlB,OAAO,IAAI;gBAC1B;gBACA,OAAOsB,oBAAY,CAACC,IAAI,CAACJ,eAAe;oBAAEK,QAAQ;gBAAI;YACxD;YAEA,kDAAkD;YAClD,MAAMgB,sBAAsBT,YAAYU,IAAIC,CAAAA,WAAa,CAAA;oBACvD,GAAGA,QAAQ;oBACXC,gBAAgBD,SAASC,cAAc,EAAE,CAAC,EAAE,EAAEC,SAAS;gBACzD,CAAA,MAAO,EAAE;YAET,2BAA2B;YAC3BrD,eAAeM,GAAG,CAAC;gBACjBC,MAAM;gBACNC,UAAU;gBACVC,SAAS;gBACTC,SAASV,eAAeU,OAAO;gBAC/BC,UAAU;oBACR2C,iBAAiBL,oBAAoBM,MAAM;oBAC3CC,WAAW,CAAC,CAACjC,QAAQF,MAAM;oBAC3BoC,YAAYlC,QAAQF,MAAM;gBAC5B;YACF;YAEA,MAAMqC,WAAoC;gBACxC7B,MAAMoB;gBACNnB,SAAS;gBACTrB,SAAS,GAAGwC,oBAAoBM,MAAM,CAAC,uBAAuB,CAAC;YACjE;YAEA,OAAOxB,oBAAY,CAACC,IAAI,CAAC0B;QAEzB,EAAE,OAAO/B,OAAY;YACnBD,QAAQC,KAAK,CAAC,iCAAiCA;YAE/C,4BAA4B;YAC5B3B,eAAe8C,WAAW,CACxB9C,eAAeU,OAAO,EACtBiB,iBAAiBoB,QAAQpB,QAAQ,IAAIoB,MAAM,kBAC3C;gBACEnC,UAAU;YACZ;YAGF,MAAMgB,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTH,OAAOA,MAAMlB,OAAO,IAAI;YAC1B;YAEA,OAAOsB,oBAAY,CAACC,IAAI,CAACJ,eAAe;gBAAEK,QAAQ;YAAI;QACxD;IACF;IAEA,8BAA8B;IAC9B,IAAI/B,2BAA2B6B,oBAAY,EAAE;QAC3C/B,eAAe2D,oBAAoB,CACjC3D,eAAeU,OAAO,EACtB;YAAEE,UAAU;YAAmBC,QAAQ;QAAM;QAE/C,OAAOX;IACT;IAEA,OAAOA;AACT;AAKO,eAAeL,KAAKE,OAAoB;IAC7C,IAAI;QACF,6DAA6D;QAC7D,MAAM,EAAE6D,gBAAgB,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE1C,MAAMC,aAAa,MAAMD,iBAAiB7D,SAAS;YAAC;SAAoB;QAExE,IAAI,CAAC8D,WAAW/B,OAAO,EAAE;YACvB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBACEL,OAAOkC,WAAWlC,KAAK;gBACvBmC,MAAMD,WAAWC,IAAI;gBACrBC,YAAY;gBACZC,WAAW,IAAIC,OAAOC,WAAW;YACnC,GACA;gBAAEjC,QAAQ4B,WAAW5B,MAAM,IAAI;YAAI;QAEvC;QAEA,MAAMvB,UAAUmD,WAAWnD,OAAO;QAElC,MAAMyD,OAAO,MAAMpE,QAAQiC,IAAI;QAE/B,gCAAgC;QAChC,MAAMoC,eAAeC,IAAAA,yBAAY,EAACC,2BAAc,EAAEH;QAElD,MAAM3C,WAAWC,IAAAA,2BAAiB,EAAC,OAAO,qBAAqB;QAE/D,0DAA0D;QAC1D,IAAI,CAACD,UAAU;YACbE,QAAQC,KAAK,CAAC;YACd,MAAMC,gBAAmC;gBACvCC,MAAM;gBACNC,SAAS;gBACTH,OAAO;YACT;YACA,OAAOI,oBAAY,CAACC,IAAI,CAACJ,eAAe;gBAAEK,QAAQ;YAAI;QACxD;QAEA,kCAAkC;QAClC,IAAI,CAACmC,aAAaG,IAAI,EAAE;YACtBH,aAAaG,IAAI,GAAGH,aAAaI,IAAI,CAClCC,WAAW,GACXC,OAAO,CAAC,eAAe,KACvBA,OAAO,CAAC,YAAY;QACzB;QAEA,qBAAqB;QACrB,MAAM,EAAE7C,MAAMsB,QAAQ,EAAExB,KAAK,EAAE,GAAG,MAAMH,SACrCW,IAAI,CAAC,cACLwC,MAAM,CAACP,cACPhC,MAAM,GACNwC,MAAM;QAET,IAAIjD,OAAO;YACTkD,IAAAA,6BAAmB,EAAClD,OAAO;QAC7B;QAEA,MAAM+B,WAAkC;YACtC7B,MAAMsB;YACNrB,SAAS;YACTrB,SAAS;QACX;QAEA,OAAOsB,oBAAY,CAACC,IAAI,CAAC0B,UAAU;YAAEzB,QAAQ;QAAI;IAEnD,EAAE,OAAON,OAAY;QACnBD,QAAQC,KAAK,CAAC,kCAAkCA;QAEhD,MAAMC,gBAAmC;YACvCC,MAAM;YACNC,SAAS;YACTH,OAAOA,MAAMlB,OAAO,IAAI;QAC1B;QAEA,OAAOsB,oBAAY,CAACC,IAAI,CAACJ,eAAe;YAAEK,QAAQ;QAAI;IACxD;AACF"}