{"version":3,"names":["cov_1ps80i1rao","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","SecurityDashboard","getSecurityDashboard","startGlobalSecurityDashboard","stopGlobalSecurityDashboard","constructor","config","refreshInterval","alertThresholds","criticalEvents","authFailures","suspiciousActivities","securityScore","autoAnalysis","notifications","email","slack","lastUpdate","Date","console","log","refreshData","monitoringInterval","_securityauditenhanced","startSecurityMonitoring","setInterval","error","stop","stopSecurityMonitoring","clearInterval","metrics","alerts","healthCheck","Promise","all","getSecurityMetrics","getActiveSecurityAlerts","runSecurityHealthCheck","recentActivity","totalEvents","total_events_24h","critical_events_24h","newAlerts","filter","a","first_occurrence","now","length","resolvedAlerts","trends","eventsLast7Days","getEventsTrend","alertsLast7Days","getAlertsTrend","securityScoreTrend","getSecurityScoreTrend","cachedData","status","issues","recommendations","checkThresholds","getData","forceRefresh","getTime","runManualAnalysis","userId","analyzeSecurityPatterns","generateReport","startDate","endDate","report","generateSecurityReport","getStatus","isRunning","uptime","updateConfig","newConfig","push","auth_failures_24h","suspicious_activities_24h","security_score","warn","sendNotifications","webhook","payload","timestamp","toISOString","source","level","message","fetch","method","headers","body","JSON","stringify","days","Array","fill","map","Math","floor","random","dashboardInstance","dashboard"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-dashboard.ts"],"sourcesContent":["/**\r\n * Dashboard de Seguridad\r\n * Proporciona una interfaz unificada para monitoreo y gestión de seguridad\r\n */\r\n\r\nimport {\r\n  getSecurityMetrics,\r\n  getActiveSecurityAlerts,\r\n  analyzeSecurityPatterns,\r\n  runSecurityHealthCheck,\r\n  generateSecurityReport,\r\n  startSecurityMonitoring,\r\n  stopSecurityMonitoring,\r\n  type SecurityMetrics,\r\n  type SecurityAlert,\r\n  type SecurityReport\r\n} from './security-audit-enhanced';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES DEL DASHBOARD\r\n// =====================================================\r\n\r\nexport interface SecurityDashboardData {\r\n  metrics: SecurityMetrics;\r\n  alerts: SecurityAlert[];\r\n  healthCheck: {\r\n    status: 'healthy' | 'warning' | 'critical';\r\n    issues: string[];\r\n    recommendations: string[];\r\n  };\r\n  recentActivity: {\r\n    totalEvents: number;\r\n    criticalEvents: number;\r\n    newAlerts: number;\r\n    resolvedAlerts: number;\r\n  };\r\n  trends: {\r\n    eventsLast7Days: number[];\r\n    alertsLast7Days: number[];\r\n    securityScoreTrend: number[];\r\n  };\r\n}\r\n\r\nexport interface SecurityDashboardConfig {\r\n  refreshInterval: number; // en segundos\r\n  alertThresholds: {\r\n    criticalEvents: number;\r\n    authFailures: number;\r\n    suspiciousActivities: number;\r\n    securityScore: number;\r\n  };\r\n  autoAnalysis: boolean;\r\n  notifications: {\r\n    email: boolean;\r\n    slack: boolean;\r\n    webhook?: string;\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// CLASE PRINCIPAL DEL DASHBOARD\r\n// =====================================================\r\n\r\nexport class SecurityDashboard {\r\n  private config: SecurityDashboardConfig;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private refreshInterval?: NodeJS.Timeout;\r\n  private lastUpdate: Date;\r\n  private cachedData?: SecurityDashboardData;\r\n\r\n  constructor(config: Partial<SecurityDashboardConfig> = {}) {\r\n    this.config = {\r\n      refreshInterval: 30, // 30 segundos por defecto\r\n      alertThresholds: {\r\n        criticalEvents: 1,\r\n        authFailures: 10,\r\n        suspiciousActivities: 5,\r\n        securityScore: 70\r\n      },\r\n      autoAnalysis: true,\r\n      notifications: {\r\n        email: false,\r\n        slack: false\r\n      },\r\n      ...config\r\n    };\r\n    this.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Inicia el dashboard de seguridad\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Iniciando dashboard de seguridad...');\r\n\r\n      // Cargar datos iniciales\r\n      await this.refreshData();\r\n\r\n      // Iniciar monitoreo automático si está habilitado\r\n      if (this.config.autoAnalysis) {\r\n        this.monitoringInterval = startSecurityMonitoring(5); // cada 5 minutos\r\n      }\r\n\r\n      // Iniciar refresh automático de datos\r\n      this.refreshInterval = setInterval(async () => {\r\n        await this.refreshData();\r\n      }, this.config.refreshInterval * 1000);\r\n\r\n      console.log('[SECURITY DASHBOARD] Dashboard iniciado exitosamente');\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error iniciando dashboard:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detiene el dashboard de seguridad\r\n   */\r\n  stop(): void {\r\n    console.log('[SECURITY DASHBOARD] Deteniendo dashboard...');\r\n\r\n    if (this.monitoringInterval) {\r\n      stopSecurityMonitoring(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n      this.refreshInterval = undefined;\r\n    }\r\n\r\n    console.log('[SECURITY DASHBOARD] Dashboard detenido');\r\n  }\r\n\r\n  /**\r\n   * Actualiza los datos del dashboard\r\n   */\r\n  async refreshData(): Promise<SecurityDashboardData> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Actualizando datos...');\r\n\r\n      // Obtener datos en paralelo\r\n      const [metrics, alerts, healthCheck] = await Promise.all([\r\n        getSecurityMetrics(),\r\n        getActiveSecurityAlerts(),\r\n        runSecurityHealthCheck()\r\n      ]);\r\n\r\n      // Calcular actividad reciente (comparar con datos anteriores)\r\n      const recentActivity = {\r\n        totalEvents: metrics.total_events_24h,\r\n        criticalEvents: metrics.critical_events_24h,\r\n        newAlerts: alerts.filter(a => \r\n          new Date(a.first_occurrence) > new Date(Date.now() - 24 * 60 * 60 * 1000)\r\n        ).length,\r\n        resolvedAlerts: 0 // TODO: implementar cuando se tenga histórico\r\n      };\r\n\r\n      // Generar tendencias (simuladas por ahora)\r\n      const trends = {\r\n        eventsLast7Days: await this.getEventsTrend(7),\r\n        alertsLast7Days: await this.getAlertsTrend(7),\r\n        securityScoreTrend: await this.getSecurityScoreTrend(7)\r\n      };\r\n\r\n      this.cachedData = {\r\n        metrics,\r\n        alerts,\r\n        healthCheck: {\r\n          status: healthCheck.status,\r\n          issues: healthCheck.issues,\r\n          recommendations: healthCheck.recommendations\r\n        },\r\n        recentActivity,\r\n        trends\r\n      };\r\n\r\n      this.lastUpdate = new Date();\r\n\r\n      // Verificar umbrales y generar alertas si es necesario\r\n      await this.checkThresholds(metrics, alerts);\r\n\r\n      console.log('[SECURITY DASHBOARD] Datos actualizados exitosamente');\r\n      return this.cachedData;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error actualizando datos:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene los datos actuales del dashboard\r\n   */\r\n  async getData(forceRefresh: boolean = false): Promise<SecurityDashboardData> {\r\n    if (forceRefresh || !this.cachedData || \r\n        Date.now() - this.lastUpdate.getTime() > this.config.refreshInterval * 1000) {\r\n      return await this.refreshData();\r\n    }\r\n    return this.cachedData;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un análisis manual de seguridad\r\n   */\r\n  async runManualAnalysis(userId?: string): Promise<SecurityAlert[]> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Ejecutando análisis manual...');\r\n      \r\n      const alerts = await analyzeSecurityPatterns(userId);\r\n      \r\n      // Actualizar datos después del análisis\r\n      await this.refreshData();\r\n      \r\n      console.log(`[SECURITY DASHBOARD] Análisis completado: ${alerts.length} alertas generadas`);\r\n      return alerts;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error en análisis manual:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera un reporte de seguridad\r\n   */\r\n  async generateReport(startDate: Date, endDate: Date): Promise<SecurityReport> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Generando reporte de seguridad...');\r\n      \r\n      const report = await generateSecurityReport(startDate, endDate);\r\n      \r\n      console.log('[SECURITY DASHBOARD] Reporte generado exitosamente');\r\n      return report;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error generando reporte:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado actual del dashboard\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean;\r\n    lastUpdate: Date;\r\n    config: SecurityDashboardConfig;\r\n    uptime: number;\r\n  } {\r\n    return {\r\n      isRunning: !!this.refreshInterval,\r\n      lastUpdate: this.lastUpdate,\r\n      config: this.config,\r\n      uptime: Date.now() - this.lastUpdate.getTime()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Actualiza la configuración del dashboard\r\n   */\r\n  updateConfig(newConfig: Partial<SecurityDashboardConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('[SECURITY DASHBOARD] Configuración actualizada');\r\n  }\r\n\r\n  // =====================================================\r\n  // MÉTODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  /**\r\n   * Verifica umbrales y genera notificaciones\r\n   */\r\n  private async checkThresholds(metrics: SecurityMetrics, alerts: SecurityAlert[]): Promise<void> {\r\n    const issues: string[] = [];\r\n\r\n    if (metrics.critical_events_24h >= this.config.alertThresholds.criticalEvents) {\r\n      issues.push(`Eventos críticos: ${metrics.critical_events_24h} (umbral: ${this.config.alertThresholds.criticalEvents})`);\r\n    }\r\n\r\n    if (metrics.auth_failures_24h >= this.config.alertThresholds.authFailures) {\r\n      issues.push(`Fallos de autenticación: ${metrics.auth_failures_24h} (umbral: ${this.config.alertThresholds.authFailures})`);\r\n    }\r\n\r\n    if (metrics.suspicious_activities_24h >= this.config.alertThresholds.suspiciousActivities) {\r\n      issues.push(`Actividades sospechosas: ${metrics.suspicious_activities_24h} (umbral: ${this.config.alertThresholds.suspiciousActivities})`);\r\n    }\r\n\r\n    if (metrics.security_score <= this.config.alertThresholds.securityScore) {\r\n      issues.push(`Score de seguridad bajo: ${metrics.security_score} (umbral: ${this.config.alertThresholds.securityScore})`);\r\n    }\r\n\r\n    if (issues.length > 0) {\r\n      console.warn('[SECURITY DASHBOARD] Umbrales excedidos:', issues);\r\n      await this.sendNotifications(issues);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía notificaciones según la configuración\r\n   */\r\n  private async sendNotifications(issues: string[]): Promise<void> {\r\n    try {\r\n      if (this.config.notifications.webhook) {\r\n        // Enviar webhook\r\n        const payload = {\r\n          timestamp: new Date().toISOString(),\r\n          source: 'security-dashboard',\r\n          level: 'warning',\r\n          message: 'Umbrales de seguridad excedidos',\r\n          issues\r\n        };\r\n\r\n        await fetch(this.config.notifications.webhook, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n      }\r\n\r\n      // TODO: Implementar notificaciones por email y Slack\r\n      if (this.config.notifications.email) {\r\n        console.log('[SECURITY DASHBOARD] Enviando notificación por email...');\r\n      }\r\n\r\n      if (this.config.notifications.slack) {\r\n        console.log('[SECURITY DASHBOARD] Enviando notificación por Slack...');\r\n      }\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error enviando notificaciones:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia de eventos (simulada)\r\n   */\r\n  private async getEventsTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 100));\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia de alertas (simulada)\r\n   */\r\n  private async getAlertsTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 10));\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia del score de seguridad (simulada)\r\n   */\r\n  private async getSecurityScoreTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 40) + 60);\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON DEL DASHBOARD\r\n// =====================================================\r\n\r\nlet dashboardInstance: SecurityDashboard | null = null;\r\n\r\n/**\r\n * Obtiene la instancia singleton del dashboard\r\n */\r\nexport function getSecurityDashboard(config?: Partial<SecurityDashboardConfig>): SecurityDashboard {\r\n  if (!dashboardInstance) {\r\n    dashboardInstance = new SecurityDashboard(config);\r\n  }\r\n  return dashboardInstance;\r\n}\r\n\r\n/**\r\n * Inicia el dashboard global de seguridad\r\n */\r\nexport async function startGlobalSecurityDashboard(config?: Partial<SecurityDashboardConfig>): Promise<SecurityDashboard> {\r\n  const dashboard = getSecurityDashboard(config);\r\n  await dashboard.start();\r\n  return dashboard;\r\n}\r\n\r\n/**\r\n * Detiene el dashboard global de seguridad\r\n */\r\nexport function stopGlobalSecurityDashboard(): void {\r\n  if (dashboardInstance) {\r\n    dashboardInstance.stop();\r\n    dashboardInstance = null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}