{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\SearchAutocompleteIntegrated.tsx"],"sourcesContent":["// ===================================\n// COMPONENTE: SearchAutocompleteIntegrated - Integraci칩n completa con useSearch\n// ===================================\n\nimport React, { useCallback, useState, useEffect } from 'react'\nimport {\n  SearchAutocomplete,\n  SearchAutocompleteProps,\n  SearchSuggestion,\n} from './search-autocomplete'\nimport { useSearchOptimized } from '@/hooks/useSearchOptimized'\nimport { useTrendingSearches } from '@/hooks/useTrendingSearches'\nimport { useRecentSearches } from '@/hooks/useRecentSearches'\nimport { SEARCH_CONSTANTS } from '@/constants/shop'\n\nexport interface SearchAutocompleteIntegratedProps\n  extends Omit<\n    SearchAutocompleteProps,\n    'query' | 'suggestions' | 'isLoading' | 'error' | 'searchWithDebounce' | 'onClear'\n  > {\n  // Configuraci칩n del hook useSearch\n  debounceMs?: number\n  maxSuggestions?: number\n  searchLimit?: number\n  saveRecentSearches?: boolean\n\n  // Callbacks adicionales\n  onSearchExecuted?: (query: string, results: any[]) => void\n  onSuggestionSelected?: (suggestion: SearchSuggestion) => void\n}\n\n/**\n * SearchAutocompleteIntegrated - Componente que integra SearchAutocomplete con useSearch\n *\n * Este componente proporciona una experiencia de b칰squeda completa sin necesidad\n * de manejar manualmente el estado del hook useSearch.\n */\nexport const SearchAutocompleteIntegrated = React.memo(\n  React.forwardRef<HTMLInputElement, SearchAutocompleteIntegratedProps>(\n    (\n      {\n        debounceMs = 100,\n        maxSuggestions = 6,\n        searchLimit = 12,\n        saveRecentSearches = true,\n        showTrendingSearches = true,\n        showRecentSearches = true,\n        onSearchExecuted,\n        onSuggestionSelected,\n        onSearch,\n        onSuggestionSelect,\n        ...props\n      },\n      ref\n    ) => {\n      // Estado de hidrataci칩n del cliente y contexto\n      const [isClient, setIsClient] = useState(false)\n      const [isContextReady, setIsContextReady] = useState(false)\n\n      // Hook de b칰squeda optimizado con TanStack Query - SIEMPRE llamado\n      const searchHookResult = useSearchOptimized({\n        debounceMs,\n        maxSuggestions,\n        searchLimit,\n        saveRecentSearches,\n        onSearch: (query, results) => {\n          onSearchExecuted?.(query, results)\n          onSearch?.(query)\n        },\n        onSuggestionSelect: suggestion => {\n          onSuggestionSelected?.(suggestion)\n          onSuggestionSelect?.(suggestion)\n        },\n      })\n\n      // Verificar que estamos en el cliente y el contexto est치 listo\n      useEffect(() => {\n        setIsClient(true)\n        // Peque침o delay para asegurar que el contexto de React Query est칠 completamente inicializado\n        const timer = setTimeout(() => {\n          setIsContextReady(true)\n        }, 100)\n\n        return () => clearTimeout(timer)\n      }, [])\n\n      // Hooks adicionales para trending y recent searches - SIEMPRE llamados\n      const trendingHookResult = useTrendingSearches({\n        limit: 4,\n        enabled: showTrendingSearches && isClient && isContextReady,\n      })\n\n      const recentHookResult = useRecentSearches({\n        maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\n        enablePersistence: showRecentSearches && isClient && isContextReady,\n        expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS,\n      })\n\n      // Valores por defecto para SSR\n      const defaultValues = {\n        query: '',\n        results: [],\n        suggestions: [],\n        isLoading: false,\n        error: null,\n        searchWithDebounce: () => {},\n        executeSearch: () => {},\n        selectSuggestion: () => {},\n        clearSearch: () => {},\n        trendingSearches: [],\n        recentSearches: [],\n        getRecentSearches: () => [],\n      }\n\n      // Usar valores del hook solo si estamos en el cliente\n      const {\n        query,\n        results,\n        suggestions: searchSuggestions,\n        isLoading,\n        error,\n        searchWithDebounce,\n        executeSearch,\n        selectSuggestion,\n        clearSearch,\n      } = isClient ? searchHookResult : defaultValues\n\n      const { trendingSearches } = isClient ? trendingHookResult : { trendingSearches: [] }\n\n      const { recentSearches, getRecentSearches } = isClient\n        ? recentHookResult\n        : { recentSearches: [], getRecentSearches: () => [] }\n\n      // Generar sugerencias combinadas\n      const suggestions = React.useMemo(() => {\n        if (!isClient) return []\n\n        console.log('游댌 SearchAutocompleteIntegrated - Generando sugerencias:', {\n          query: query?.trim(),\n          hasQuery: !!query?.trim(),\n          searchSuggestions:\n            searchSuggestions && Array.isArray(searchSuggestions) ? searchSuggestions.length : 0,\n          trendingSearches:\n            trendingSearches && Array.isArray(trendingSearches) ? trendingSearches.length : 0,\n          recentSearches:\n            recentSearches && Array.isArray(recentSearches) ? recentSearches.length : 0,\n          showTrendingSearches,\n          showRecentSearches,\n        })\n\n        // Si hay query, usar las sugerencias del hook optimizado\n        if (query?.trim()) {\n          console.log('游댌 Usando searchSuggestions porque hay query:', searchSuggestions)\n          return searchSuggestions || []\n        }\n\n        // Si no hay query, mostrar trending y recent searches como el componente original\n        const defaultSuggestions: SearchSuggestion[] = []\n\n        console.log('游댌 Generando sugerencias por defecto (sin query)')\n\n        // Agregar b칰squedas recientes\n        if (\n          showRecentSearches &&\n          recentSearches &&\n          Array.isArray(recentSearches) &&\n          recentSearches.length > 0\n        ) {\n          const recentSuggestions = getRecentSearches(3).map((search, index) => ({\n            id: `recent-${index}`,\n            type: 'recent' as const,\n            title: search,\n            href: `/search?q=${encodeURIComponent(search)}`,\n          }))\n          console.log('游댌 Agregando b칰squedas recientes:', recentSuggestions)\n          defaultSuggestions.push(...recentSuggestions)\n        }\n\n        // Agregar b칰squedas trending reales\n        if (\n          showTrendingSearches &&\n          trendingSearches &&\n          Array.isArray(trendingSearches) &&\n          trendingSearches.length > 0\n        ) {\n          const trendingSuggestions = trendingSearches.map(trending => ({\n            id: trending.id,\n            type: 'trending' as const,\n            title: trending.query,\n            href: trending.href,\n            badge: trending.count ? `${trending.count}` : undefined,\n          }))\n          console.log('游댌 Agregando b칰squedas trending:', trendingSuggestions)\n          defaultSuggestions.push(...trendingSuggestions.slice(0, 4))\n        }\n\n        const finalSuggestions = defaultSuggestions.slice(0, maxSuggestions)\n        console.log('游댌 Sugerencias finales generadas:', finalSuggestions)\n\n        return finalSuggestions\n      }, [\n        isClient,\n        query,\n        searchSuggestions,\n        showRecentSearches,\n        showTrendingSearches,\n        recentSearches,\n        trendingSearches,\n        getRecentSearches,\n        maxSuggestions,\n      ])\n\n      // Debugging del estado del hook\n      if (isClient && process.env.NODE_ENV === 'development') {\n        console.log('游댌 SearchAutocompleteIntegrated: Hook state:', {\n          query,\n          suggestions: suggestions?.length || 0,\n          suggestionsDetailed: suggestions?.map(s => ({ type: s.type, title: s.title })) || [],\n          isLoading,\n          error,\n          results: results?.length || 0,\n          trendingSearches: trendingSearches?.length || 0,\n          recentSearches: recentSearches?.length || 0,\n        })\n      }\n\n      // Manejar env칤o de b칰squeda\n      const handleSearch = (query: string) => {\n        if (isClient) {\n          executeSearch(query)\n        }\n      }\n\n      // Manejar selecci칩n de sugerencia\n      const handleSuggestionSelect = (suggestion: SearchSuggestion) => {\n        if (isClient) {\n          selectSuggestion(suggestion)\n        }\n      }\n\n      // Manejar limpieza\n      const handleClear = () => {\n        if (isClient) {\n          clearSearch()\n        }\n      }\n\n      return (\n        <SearchAutocomplete\n          ref={ref}\n          {...props}\n          // Estado del hook optimizado\n          query={query}\n          suggestions={suggestions}\n          isLoading={isLoading}\n          error={error}\n          showTrendingSearches={showTrendingSearches}\n          showRecentSearches={showRecentSearches}\n          // Callbacks integrados\n          onSearch={handleSearch}\n          onSuggestionSelect={handleSuggestionSelect}\n          searchWithDebounce={searchWithDebounce}\n          onClear={handleClear}\n        />\n      )\n    }\n  )\n)\n\nSearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated'\n\nexport default SearchAutocompleteIntegrated\n"],"names":["SearchAutocompleteIntegrated","React","memo","forwardRef","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","showTrendingSearches","showRecentSearches","onSearchExecuted","onSuggestionSelected","onSearch","onSuggestionSelect","props","ref","isClient","setIsClient","useState","isContextReady","setIsContextReady","searchHookResult","useSearchOptimized","query","results","suggestion","useEffect","timer","setTimeout","clearTimeout","trendingHookResult","useTrendingSearches","limit","enabled","recentHookResult","useRecentSearches","maxSearches","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","defaultValues","suggestions","isLoading","error","searchWithDebounce","executeSearch","selectSuggestion","clearSearch","trendingSearches","recentSearches","getRecentSearches","searchSuggestions","useMemo","console","log","trim","hasQuery","Array","isArray","length","defaultSuggestions","recentSuggestions","map","search","index","id","type","title","href","encodeURIComponent","push","trendingSuggestions","trending","badge","count","undefined","slice","finalSuggestions","process","env","NODE_ENV","suggestionsDetailed","s","handleSearch","handleSuggestionSelect","handleClear","SearchAutocomplete","onClear","displayName"],"mappings":"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"}