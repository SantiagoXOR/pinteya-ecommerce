{"version":3,"names":["CategorySelector","fetchCategories","cov_1gudpud4bv","f","response","s","fetch","ok","b","Error","data","json","buildCategoryTree","categories","categoryMap","Map","rootCategories","forEach","category","set","id","children","categoryNode","get","parent_id","parent","push","flattenCategories","level","flattened","length","value","onChange","error","placeholder","allowCreate","className","isOpen","setIsOpen","_react","useState","searchTerm","setSearchTerm","expandedCategories","setExpandedCategories","Set","isLoading","fetchError","_reactquery","useQuery","queryKey","queryFn","staleTime","categoryTree","flatCategories","selectedCategory","find","cat","filteredCategories","filter","name","toLowerCase","includes","toggleExpanded","categoryId","newExpanded","has","delete","add","handleSelect","renderCategoryTree","map","_jsxruntime","jsxs","_utils","cn","style","paddingLeft","onClick","jsx","e","stopPropagation","_lucidereact","FolderOpen","Folder","renderFlatList","marginLeft","repeat","type","disabled","ChevronDown","message","toString","Search","target","console","log","Plus"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\products\\CategorySelector.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { ChevronDown, Plus, Search, Folder, FolderOpen } from 'lucide-react';\r\nimport { cn } from '@/lib/core/utils';\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  parent_id?: string;\r\n  level: number;\r\n  children?: Category[];\r\n}\r\n\r\ninterface CategorySelectorProps {\r\n  value?: string;\r\n  onChange: (categoryId: string) => void;\r\n  error?: string;\r\n  placeholder?: string;\r\n  allowCreate?: boolean;\r\n  className?: string;\r\n}\r\n\r\n// API function to fetch categories\r\nasync function fetchCategories(): Promise<Category[]> {\r\n  const response = await fetch('/api/categories');\r\n  if (!response.ok) {\r\n    throw new Error('Error fetching categories');\r\n  }\r\n  const data = await response.json();\r\n  return data.data || [];\r\n}\r\n\r\n// Build category tree\r\nfunction buildCategoryTree(categories: Category[]): Category[] {\r\n  const categoryMap = new Map<string, Category>();\r\n  const rootCategories: Category[] = [];\r\n\r\n  // Create map of all categories\r\n  categories.forEach(category => {\r\n    categoryMap.set(category.id, { ...category, children: [] });\r\n  });\r\n\r\n  // Build tree structure\r\n  categories.forEach(category => {\r\n    const categoryNode = categoryMap.get(category.id)!;\r\n    \r\n    if (category.parent_id) {\r\n      const parent = categoryMap.get(category.parent_id);\r\n      if (parent) {\r\n        parent.children!.push(categoryNode);\r\n      }\r\n    } else {\r\n      rootCategories.push(categoryNode);\r\n    }\r\n  });\r\n\r\n  return rootCategories;\r\n}\r\n\r\n// Flatten categories for search\r\nfunction flattenCategories(categories: Category[], level = 0): Category[] {\r\n  const flattened: Category[] = [];\r\n  \r\n  categories.forEach(category => {\r\n    flattened.push({ ...category, level });\r\n    if (category.children && category.children.length > 0) {\r\n      flattened.push(...flattenCategories(category.children, level + 1));\r\n    }\r\n  });\r\n  \r\n  return flattened;\r\n}\r\n\r\nexport function CategorySelector({\r\n  value,\r\n  onChange,\r\n  error,\r\n  placeholder = \"Selecciona una categoría\",\r\n  allowCreate = false,\r\n  className\r\n}: CategorySelectorProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\r\n\r\n  // Fetch categories\r\n  const { data: categories = [], isLoading, error: fetchError } = useQuery({\r\n    queryKey: ['categories'],\r\n    queryFn: fetchCategories,\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n\r\n  const categoryTree = buildCategoryTree(categories);\r\n  const flatCategories = flattenCategories(categoryTree);\r\n  \r\n  // Find selected category\r\n  const selectedCategory = flatCategories.find(cat => cat.id === value);\r\n\r\n  // Filter categories based on search\r\n  const filteredCategories = searchTerm\r\n    ? flatCategories.filter(category =>\r\n        category.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      )\r\n    : categoryTree;\r\n\r\n  const toggleExpanded = (categoryId: string) => {\r\n    const newExpanded = new Set(expandedCategories);\r\n    if (newExpanded.has(categoryId)) {\r\n      newExpanded.delete(categoryId);\r\n    } else {\r\n      newExpanded.add(categoryId);\r\n    }\r\n    setExpandedCategories(newExpanded);\r\n  };\r\n\r\n  const handleSelect = (categoryId: string) => {\r\n    onChange(categoryId);\r\n    setIsOpen(false);\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const renderCategoryTree = (categories: Category[], level = 0) => {\r\n    return categories.map(category => (\r\n      <div key={category.id}>\r\n        <div\r\n          className={cn(\r\n            \"flex items-center justify-between px-3 py-2 hover:bg-gray-50 cursor-pointer\",\r\n            value === category.id && \"bg-blaze-orange-50 text-blaze-orange-700\"\r\n          )}\r\n          style={{ paddingLeft: `${12 + level * 20}px` }}\r\n          onClick={() => handleSelect(category.id)}\r\n        >\r\n          <div className=\"flex items-center space-x-2 flex-1\">\r\n            {category.children && category.children.length > 0 ? (\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleExpanded(category.id);\r\n                }}\r\n                className=\"p-1 hover:bg-gray-200 rounded\"\r\n              >\r\n                {expandedCategories.has(category.id) ? (\r\n                  <FolderOpen className=\"w-4 h-4 text-gray-500\" />\r\n                ) : (\r\n                  <Folder className=\"w-4 h-4 text-gray-500\" />\r\n                )}\r\n              </button>\r\n            ) : (\r\n              <div className=\"w-6 h-6 flex items-center justify-center\">\r\n                <div className=\"w-2 h-2 bg-gray-300 rounded-full\"></div>\r\n              </div>\r\n            )}\r\n            \r\n            <span className=\"text-sm font-medium\">{category.name}</span>\r\n          </div>\r\n          \r\n          {value === category.id && (\r\n            <div className=\"w-2 h-2 bg-blaze-orange-600 rounded-full\"></div>\r\n          )}\r\n        </div>\r\n        \r\n        {category.children && \r\n         category.children.length > 0 && \r\n         expandedCategories.has(category.id) && (\r\n          <div>\r\n            {renderCategoryTree(category.children, level + 1)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderFlatList = (categories: Category[]) => {\r\n    return categories.map(category => (\r\n      <div\r\n        key={category.id}\r\n        className={cn(\r\n          \"flex items-center px-3 py-2 hover:bg-gray-50 cursor-pointer\",\r\n          value === category.id && \"bg-blaze-orange-50 text-blaze-orange-700\"\r\n        )}\r\n        onClick={() => handleSelect(category.id)}\r\n      >\r\n        <div className=\"flex items-center space-x-2 flex-1\">\r\n          <div style={{ marginLeft: `${category.level * 16}px` }}>\r\n            <span className=\"text-sm\">\r\n              {'—'.repeat(category.level)} {category.name}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        {value === category.id && (\r\n          <div className=\"w-2 h-2 bg-blaze-orange-600 rounded-full\"></div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  if (fetchError) {\r\n    return (\r\n      <div className=\"text-red-600 text-sm\">\r\n        Error al cargar categorías\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"relative\", className)}>\r\n      {/* Selector Button */}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className={cn(\r\n          \"w-full flex items-center justify-between px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blaze-orange-500 focus:border-transparent\",\r\n          error ? \"border-red-300\" : \"border-gray-300\",\r\n          isLoading && \"opacity-50 cursor-not-allowed\"\r\n        )}\r\n        disabled={isLoading}\r\n      >\r\n        <span className={cn(\r\n          \"text-sm\",\r\n          selectedCategory ? \"text-gray-900\" : \"text-gray-500\"\r\n        )}>\r\n          {isLoading ? 'Cargando...' : selectedCategory?.name || placeholder}\r\n        </span>\r\n        <ChevronDown className={cn(\r\n          \"w-4 h-4 text-gray-400 transition-transform\",\r\n          isOpen && \"transform rotate-180\"\r\n        )} />\r\n      </button>\r\n\r\n      {/* Error Message */}\r\n      {error && (\r\n        <p className=\"text-red-600 text-sm mt-1\">{error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}</p>\r\n      )}\r\n\r\n      {/* Dropdown */}\r\n      {isOpen && (\r\n        <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-80 overflow-hidden\">\r\n          {/* Search */}\r\n          <div className=\"p-3 border-b border-gray-200\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar categorías...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blaze-orange-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Categories List */}\r\n          <div className=\"max-h-60 overflow-y-auto\">\r\n            {categories.length === 0 ? (\r\n              <div className=\"p-4 text-center text-gray-500 text-sm\">\r\n                No hay categorías disponibles\r\n              </div>\r\n            ) : searchTerm ? (\r\n              renderFlatList(filteredCategories as Category[])\r\n            ) : (\r\n              renderCategoryTree(categoryTree)\r\n            )}\r\n          </div>\r\n\r\n          {/* Create New Category */}\r\n          {allowCreate && (\r\n            <div className=\"border-t border-gray-200 p-3\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"flex items-center space-x-2 text-sm text-blaze-orange-600 hover:text-blaze-orange-700\"\r\n                onClick={() => {\r\n                  // TODO: Implement create category modal\r\n                  console.log('Create new category');\r\n                }}\r\n              >\r\n                <Plus className=\"w-4 h-4\" />\r\n                <span>Crear nueva categoría</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Overlay */}\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 z-40\"\r\n          onClick={() => setIsOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}