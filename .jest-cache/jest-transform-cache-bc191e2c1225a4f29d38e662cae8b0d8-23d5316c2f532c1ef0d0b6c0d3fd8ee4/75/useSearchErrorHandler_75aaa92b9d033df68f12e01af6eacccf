5519aeb73f5428cf91bd0f08a2538fb0
// ===================================
// HOOK: useSearchErrorHandler - Manejo robusto de errores de bÃºsqueda
// ===================================
"use strict";

/* istanbul ignore next */
function cov_2osvgg30i2() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts";
  var hash = "5c8df1e1ac2d6b964efe469d1d783471829ed08c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "6": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "7": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "8": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "9": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "10": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 46,
          column: 10
        }
      },
      "11": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "12": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "13": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "14": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "15": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "16": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "17": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "18": {
        start: {
          line: 88,
          column: 18
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "19": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 44
        }
      },
      "20": {
        start: {
          line: 92,
          column: 90
        },
        end: {
          line: 92,
          column: 97
        }
      },
      "21": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 98,
          column: 6
        }
      },
      "22": {
        start: {
          line: 93,
          column: 49
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "23": {
        start: {
          line: 99,
          column: 44
        },
        end: {
          line: 99,
          column: 70
        }
      },
      "24": {
        start: {
          line: 100,
          column: 40
        },
        end: {
          line: 100,
          column: 63
        }
      },
      "25": {
        start: {
          line: 101,
          column: 40
        },
        end: {
          line: 101,
          column: 67
        }
      },
      "26": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 113,
          column: 6
        }
      },
      "27": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 48
        }
      },
      "28": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 37
        }
      },
      "29": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 25
        }
      },
      "30": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 31
        }
      },
      "31": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "32": {
        start: {
          line: 116,
          column: 31
        },
        end: {
          line: 162,
          column: 6
        }
      },
      "33": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "34": {
        start: {
          line: 118,
          column: 26
        },
        end: {
          line: 118,
          column: 27
        }
      },
      "35": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "36": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 43
        }
      },
      "37": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "38": {
        start: {
          line: 122,
          column: 31
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "39": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "40": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 42
        }
      },
      "41": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 37
        }
      },
      "42": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 41
        }
      },
      "43": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 39
        }
      },
      "44": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 30
        }
      },
      "45": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 34
        }
      },
      "46": {
        start: {
          line: 133,
          column: 36
        },
        end: {
          line: 133,
          column: 56
        }
      },
      "47": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "48": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 49
        }
      },
      "49": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 37
        }
      },
      "50": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 41
        }
      },
      "51": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 43
        }
      },
      "52": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 32
        }
      },
      "53": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "54": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "55": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 47
        }
      },
      "56": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 41
        }
      },
      "57": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "58": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 32
        }
      },
      "59": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 66
        }
      },
      "60": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 140
        }
      },
      "61": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 73
        }
      },
      "62": {
        start: {
          line: 153,
          column: 45
        },
        end: {
          line: 153,
          column: 71
        }
      },
      "63": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 24
        }
      },
      "64": {
        start: {
          line: 165,
          column: 25
        },
        end: {
          line: 169,
          column: 10
        }
      },
      "65": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 30
        }
      },
      "66": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 25
        }
      },
      "67": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 29
        }
      },
      "68": {
        start: {
          line: 172,
          column: 28
        },
        end: {
          line: 178,
          column: 6
        }
      },
      "69": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "70": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 59
        }
      },
      "71": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 192,
          column: 6
        }
      },
      "72": {
        start: {
          line: 194,
          column: 17
        },
        end: {
          line: 194,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "classifyError",
        decl: {
          start: {
            line: 37,
            column: 13
          },
          end: {
            line: 37,
            column: 26
          }
        },
        loc: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 37
      },
      "4": {
        name: "calculateDelay",
        decl: {
          start: {
            line: 87,
            column: 13
          },
          end: {
            line: 87,
            column: 27
          }
        },
        loc: {
          start: {
            line: 87,
            column: 45
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 87
      },
      "5": {
        name: "useSearchErrorHandler",
        decl: {
          start: {
            line: 91,
            column: 9
          },
          end: {
            line: 91,
            column: 30
          }
        },
        loc: {
          start: {
            line: 91,
            column: 45
          },
          end: {
            line: 193,
            column: 1
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 93,
            column: 44
          },
          end: {
            line: 93,
            column: 45
          }
        },
        loc: {
          start: {
            line: 93,
            column: 49
          },
          end: {
            line: 96,
            column: 9
          }
        },
        line: 93
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 104,
            column: 50
          },
          end: {
            line: 104,
            column: 51
          }
        },
        loc: {
          start: {
            line: 104,
            column: 59
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 104
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 116,
            column: 56
          }
        },
        loc: {
          start: {
            line: 116,
            column: 102
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 153,
            column: 34
          },
          end: {
            line: 153,
            column: 35
          }
        },
        loc: {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 153,
            column: 71
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 165,
            column: 49
          },
          end: {
            line: 165,
            column: 50
          }
        },
        loc: {
          start: {
            line: 165,
            column: 53
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 165
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 172,
            column: 52
          },
          end: {
            line: 172,
            column: 53
          }
        },
        loc: {
          start: {
            line: 172,
            column: 71
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 172
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 34
          }
        }, {
          start: {
            line: 40,
            column: 38
          },
          end: {
            line: 40,
            column: 69
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 35
          }
        }, {
          start: {
            line: 49,
            column: 39
          },
          end: {
            line: 49,
            column: 72
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 27
          }
        }, {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 49
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 71,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 21
          },
          end: {
            line: 71,
            column: 34
          }
        }, {
          start: {
            line: 71,
            column: 38
          },
          end: {
            line: 71,
            column: 73
          }
        }],
        line: 71
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 17
          },
          end: {
            line: 80,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 17
          },
          end: {
            line: 80,
            column: 30
          }
        }, {
          start: {
            line: 80,
            column: 34
          },
          end: {
            line: 80,
            column: 73
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 31
          },
          end: {
            line: 91,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 41
          },
          end: {
            line: 91,
            column: 43
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 25
          },
          end: {
            line: 92,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 43
          },
          end: {
            line: 92,
            column: 45
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 116,
            column: 73
          },
          end: {
            line: 116,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 116,
            column: 89
          },
          end: {
            line: 116,
            column: 99
          }
        }],
        line: 116
      },
      "12": {
        loc: {
          start: {
            line: 121,
            column: 30
          },
          end: {
            line: 121,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 44
          },
          end: {
            line: 121,
            column: 55
          }
        }, {
          start: {
            line: 121,
            column: 58
          },
          end: {
            line: 121,
            column: 59
          }
        }],
        line: 121
      },
      "13": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "14": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts"],
      sourcesContent: ["// ===================================\r\n// HOOK: useSearchErrorHandler - Manejo robusto de errores de b\xFAsqueda\r\n// ===================================\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchError {\r\n  type: 'network' | 'server' | 'validation' | 'timeout' | 'unknown';\r\n  message: string;\r\n  code?: string;\r\n  retryable: boolean;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface RetryConfig {\r\n  maxRetries: number;\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n  backoffFactor: number;\r\n}\r\n\r\nexport interface UseSearchErrorHandlerOptions {\r\n  retryConfig?: Partial<RetryConfig>;\r\n  onError?: (error: SearchError) => void;\r\n  onRetrySuccess?: () => void;\r\n  onRetryFailed?: (error: SearchError, attempts: number) => void;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACI\xD3N POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_RETRY_CONFIG: RetryConfig = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 10000,\r\n  backoffFactor: 2,\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Clasifica el tipo de error basado en el error original\r\n */\r\nfunction classifyError(error: any): SearchError {\r\n  const timestamp = Date.now();\r\n  \r\n  // Error de red\r\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n    return {\r\n      type: 'network',\r\n      message: 'Error de conexi\xF3n. Verifica tu conexi\xF3n a internet.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de timeout\r\n  if (error.name === 'AbortError' || error.message.includes('timeout')) {\r\n    return {\r\n      type: 'timeout',\r\n      message: 'La b\xFAsqueda tard\xF3 demasiado. Intenta nuevamente.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error del servidor\r\n  if (error.status >= 500) {\r\n    return {\r\n      type: 'server',\r\n      message: 'Error del servidor. Intenta nuevamente en unos momentos.',\r\n      code: error.status?.toString(),\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de validaci\xF3n\r\n  if (error.status >= 400 && error.status < 500) {\r\n    return {\r\n      type: 'validation',\r\n      message: error.message || 'Par\xE1metros de b\xFAsqueda inv\xE1lidos.',\r\n      code: error.status?.toString(),\r\n      retryable: false,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error desconocido\r\n  return {\r\n    type: 'unknown',\r\n    message: error.message || 'Error inesperado durante la b\xFAsqueda.',\r\n    retryable: true,\r\n    timestamp,\r\n  };\r\n}\r\n\r\n/**\r\n * Calcula el delay para el siguiente retry con backoff exponencial\r\n */\r\nfunction calculateDelay(attempt: number, config: RetryConfig): number {\r\n  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\r\n  return Math.min(delay, config.maxDelay);\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchErrorHandler(options: UseSearchErrorHandlerOptions = {}) {\r\n  const {\r\n    retryConfig: userRetryConfig = {},\r\n    onError,\r\n    onRetrySuccess,\r\n    onRetryFailed,\r\n  } = options;\r\n\r\n  const retryConfig = useMemo(() => ({\r\n    ...DEFAULT_RETRY_CONFIG,\r\n    ...userRetryConfig\r\n  }), [userRetryConfig]);\r\n  \r\n  const [currentError, setCurrentError] = useState<SearchError | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [isRetrying, setIsRetrying] = useState(false);\r\n\r\n  /**\r\n   * Maneja un error de b\xFAsqueda\r\n   */\r\n  const handleError = useCallback((error: any): SearchError => {\r\n    const searchError = classifyError(error);\r\n    setCurrentError(searchError);\r\n    setRetryCount(0);\r\n    \r\n    // Callback personalizado\r\n    onError?.(searchError);\r\n    \r\n    return searchError;\r\n  }, [onError]);\r\n\r\n  /**\r\n   * Ejecuta una operaci\xF3n con retry autom\xE1tico\r\n   */\r\n  const executeWithRetry = useCallback(async <T>(\r\n    operation: () => Promise<T>,\r\n    operationName: string = 'b\xFAsqueda'\r\n  ): Promise<T> => {\r\n    let lastError: any;\r\n\r\n    for (let attempt = 1; attempt <= retryConfig.maxRetries + 1; attempt++) {\r\n      try {\r\n        setIsRetrying(attempt > 1);\r\n        setRetryCount(attempt > 1 ? attempt - 1 : 0);\r\n\r\n        const result = await operation();\r\n\r\n        // \xC9xito\r\n        if (attempt > 1) {\r\n          setCurrentError(null);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onRetrySuccess?.();\r\n        }\r\n\r\n        return result;\r\n\r\n      } catch (error) {\r\n        lastError = error;\r\n        const searchError = classifyError(error);\r\n\r\n        // Si no es retryable, fallar inmediatamente\r\n        if (!searchError.retryable) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onError?.(searchError);\r\n          throw error;\r\n        }\r\n\r\n        // Si hemos agotado los intentos\r\n        if (attempt > retryConfig.maxRetries) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(attempt - 1);\r\n          setIsRetrying(false);\r\n          onRetryFailed?.(searchError, attempt - 1);\r\n          throw error;\r\n        }\r\n\r\n        // Preparar para retry\r\n        const delay = calculateDelay(attempt, retryConfig);\r\n\r\n        console.warn(`${operationName} fall\xF3 (intento ${attempt}/${retryConfig.maxRetries}). Reintentando en ${delay}ms...`, error);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }, [retryConfig, onError, onRetrySuccess, onRetryFailed]);\r\n\r\n  /**\r\n   * Limpia el estado de error\r\n   */\r\n  const clearError = useCallback(() => {\r\n    setCurrentError(null);\r\n    setRetryCount(0);\r\n    setIsRetrying(false);\r\n  }, []);\r\n\r\n  /**\r\n   * Retry manual\r\n   */\r\n  const retryManually = useCallback(async <T>(\r\n    operation: () => Promise<T>\r\n  ): Promise<T> => {\r\n    clearError();\r\n    return executeWithRetry(operation, 'retry manual');\r\n  }, [executeWithRetry, clearError]);\r\n\r\n  return {\r\n    // Estado\r\n    currentError,\r\n    retryCount,\r\n    isRetrying,\r\n    hasError: currentError !== null,\r\n    \r\n    // Funciones\r\n    handleError,\r\n    executeWithRetry,\r\n    clearError,\r\n    retryManually,\r\n    \r\n    // Configuraci\xF3n\r\n    retryConfig,\r\n  };\r\n}\r\n\r\nexport default useSearchErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["useSearchErrorHandler", "DEFAULT_RETRY_CONFIG", "maxRetries", "baseDelay", "maxDelay", "backoffFactor", "classifyError", "error", "timestamp", "Date", "now", "name", "message", "includes", "type", "retryable", "status", "code", "toString", "calculateDelay", "attempt", "config", "delay", "Math", "pow", "min", "options", "retryConfig", "userRetryConfig", "onError", "onRetrySuccess", "onRetryFailed", "useMemo", "currentError", "setCurrentError", "useState", "retryCount", "setRetryCount", "isRetrying", "setIsRetrying", "handleError", "useCallback", "searchError", "executeWithRetry", "operation", "operationName", "lastError", "result", "console", "warn", "Promise", "resolve", "setTimeout", "clearError", "retryManually", "hasError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c8df1e1ac2d6b964efe469d1d783471829ed08c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2osvgg30i2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2osvgg30i2();
cov_2osvgg30i2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2osvgg30i2().f[0]++;
  cov_2osvgg30i2().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2osvgg30i2().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2osvgg30i2().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[1]++;
    cov_2osvgg30i2().s[4]++;
    return _default;
  },
  get useSearchErrorHandler() {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[2]++;
    cov_2osvgg30i2().s[5]++;
    return useSearchErrorHandler;
  }
});
const _react =
/* istanbul ignore next */
(cov_2osvgg30i2().s[6]++, require("react"));
// ===================================
// CONFIGURACIÃN POR DEFECTO
// ===================================
const DEFAULT_RETRY_CONFIG =
/* istanbul ignore next */
(cov_2osvgg30i2().s[7]++, {
  maxRetries: 3,
  baseDelay: 1000,
  maxDelay: 10000,
  backoffFactor: 2
});
// ===================================
// UTILIDADES
// ===================================
/**
 * Clasifica el tipo de error basado en el error original
 */
function classifyError(error) {
  /* istanbul ignore next */
  cov_2osvgg30i2().f[3]++;
  const timestamp =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[8]++, Date.now());
  // Error de red
  /* istanbul ignore next */
  cov_2osvgg30i2().s[9]++;
  if (
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[1][0]++, error.name === 'TypeError') &&
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[1][1]++, error.message.includes('fetch'))) {
    /* istanbul ignore next */
    cov_2osvgg30i2().b[0][0]++;
    cov_2osvgg30i2().s[10]++;
    return {
      type: 'network',
      message: 'Error de conexiÃ³n. Verifica tu conexiÃ³n a internet.',
      retryable: true,
      timestamp
    };
  } else
  /* istanbul ignore next */
  {
    cov_2osvgg30i2().b[0][1]++;
  }
  // Error de timeout
  cov_2osvgg30i2().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[3][0]++, error.name === 'AbortError') ||
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[3][1]++, error.message.includes('timeout'))) {
    /* istanbul ignore next */
    cov_2osvgg30i2().b[2][0]++;
    cov_2osvgg30i2().s[12]++;
    return {
      type: 'timeout',
      message: 'La bÃºsqueda tardÃ³ demasiado. Intenta nuevamente.',
      retryable: true,
      timestamp
    };
  } else
  /* istanbul ignore next */
  {
    cov_2osvgg30i2().b[2][1]++;
  }
  // Error del servidor
  cov_2osvgg30i2().s[13]++;
  if (error.status >= 500) {
    /* istanbul ignore next */
    cov_2osvgg30i2().b[4][0]++;
    cov_2osvgg30i2().s[14]++;
    return {
      type: 'server',
      message: 'Error del servidor. Intenta nuevamente en unos momentos.',
      code: error.status?.toString(),
      retryable: true,
      timestamp
    };
  } else
  /* istanbul ignore next */
  {
    cov_2osvgg30i2().b[4][1]++;
  }
  // Error de validaciÃ³n
  cov_2osvgg30i2().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[6][0]++, error.status >= 400) &&
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[6][1]++, error.status < 500)) {
    /* istanbul ignore next */
    cov_2osvgg30i2().b[5][0]++;
    cov_2osvgg30i2().s[16]++;
    return {
      type: 'validation',
      message:
      /* istanbul ignore next */
      (cov_2osvgg30i2().b[7][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_2osvgg30i2().b[7][1]++, 'ParÃ¡metros de bÃºsqueda invÃ¡lidos.'),
      code: error.status?.toString(),
      retryable: false,
      timestamp
    };
  } else
  /* istanbul ignore next */
  {
    cov_2osvgg30i2().b[5][1]++;
  }
  // Error desconocido
  cov_2osvgg30i2().s[17]++;
  return {
    type: 'unknown',
    message:
    /* istanbul ignore next */
    (cov_2osvgg30i2().b[8][0]++, error.message) ||
    /* istanbul ignore next */
    (cov_2osvgg30i2().b[8][1]++, 'Error inesperado durante la bÃºsqueda.'),
    retryable: true,
    timestamp
  };
}
/**
 * Calcula el delay para el siguiente retry con backoff exponencial
 */
function calculateDelay(attempt, config) {
  /* istanbul ignore next */
  cov_2osvgg30i2().f[4]++;
  const delay =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[18]++, config.baseDelay * Math.pow(config.backoffFactor, attempt - 1));
  /* istanbul ignore next */
  cov_2osvgg30i2().s[19]++;
  return Math.min(delay, config.maxDelay);
}
function useSearchErrorHandler(options =
/* istanbul ignore next */
(cov_2osvgg30i2().b[9][0]++, {})) {
  /* istanbul ignore next */
  cov_2osvgg30i2().f[5]++;
  const {
    retryConfig: userRetryConfig =
    /* istanbul ignore next */
    (cov_2osvgg30i2().b[10][0]++, {}),
    onError,
    onRetrySuccess,
    onRetryFailed
  } =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[20]++, options);
  const retryConfig =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[21]++, (0, _react.useMemo)(() => {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[6]++;
    cov_2osvgg30i2().s[22]++;
    return {
      ...DEFAULT_RETRY_CONFIG,
      ...userRetryConfig
    };
  }, [userRetryConfig]));
  const [currentError, setCurrentError] =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[23]++, (0, _react.useState)(null));
  const [retryCount, setRetryCount] =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[24]++, (0, _react.useState)(0));
  const [isRetrying, setIsRetrying] =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[25]++, (0, _react.useState)(false));
  /**
  * Maneja un error de bÃºsqueda
  */
  const handleError =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[26]++, (0, _react.useCallback)(error => {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[7]++;
    const searchError =
    /* istanbul ignore next */
    (cov_2osvgg30i2().s[27]++, classifyError(error));
    /* istanbul ignore next */
    cov_2osvgg30i2().s[28]++;
    setCurrentError(searchError);
    /* istanbul ignore next */
    cov_2osvgg30i2().s[29]++;
    setRetryCount(0);
    // Callback personalizado
    /* istanbul ignore next */
    cov_2osvgg30i2().s[30]++;
    onError?.(searchError);
    /* istanbul ignore next */
    cov_2osvgg30i2().s[31]++;
    return searchError;
  }, [onError]));
  /**
  * Ejecuta una operaciÃ³n con retry automÃ¡tico
  */
  const executeWithRetry =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[32]++, (0, _react.useCallback)(async (operation, operationName =
  /* istanbul ignore next */
  (cov_2osvgg30i2().b[11][0]++, 'bÃºsqueda')) => {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[8]++;
    let lastError;
    /* istanbul ignore next */
    cov_2osvgg30i2().s[33]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_2osvgg30i2().s[34]++, 1); attempt <= retryConfig.maxRetries + 1; attempt++) {
      /* istanbul ignore next */
      cov_2osvgg30i2().s[35]++;
      try {
        /* istanbul ignore next */
        cov_2osvgg30i2().s[36]++;
        setIsRetrying(attempt > 1);
        /* istanbul ignore next */
        cov_2osvgg30i2().s[37]++;
        setRetryCount(attempt > 1 ?
        /* istanbul ignore next */
        (cov_2osvgg30i2().b[12][0]++, attempt - 1) :
        /* istanbul ignore next */
        (cov_2osvgg30i2().b[12][1]++, 0));
        const result =
        /* istanbul ignore next */
        (cov_2osvgg30i2().s[38]++, await operation());
        // Ãxito
        /* istanbul ignore next */
        cov_2osvgg30i2().s[39]++;
        if (attempt > 1) {
          /* istanbul ignore next */
          cov_2osvgg30i2().b[13][0]++;
          cov_2osvgg30i2().s[40]++;
          setCurrentError(null);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[41]++;
          setRetryCount(0);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[42]++;
          setIsRetrying(false);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[43]++;
          onRetrySuccess?.();
        } else
        /* istanbul ignore next */
        {
          cov_2osvgg30i2().b[13][1]++;
        }
        cov_2osvgg30i2().s[44]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_2osvgg30i2().s[45]++;
        lastError = error;
        const searchError =
        /* istanbul ignore next */
        (cov_2osvgg30i2().s[46]++, classifyError(error));
        // Si no es retryable, fallar inmediatamente
        /* istanbul ignore next */
        cov_2osvgg30i2().s[47]++;
        if (!searchError.retryable) {
          /* istanbul ignore next */
          cov_2osvgg30i2().b[14][0]++;
          cov_2osvgg30i2().s[48]++;
          setCurrentError(searchError);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[49]++;
          setRetryCount(0);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[50]++;
          setIsRetrying(false);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[51]++;
          onError?.(searchError);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[52]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_2osvgg30i2().b[14][1]++;
        }
        // Si hemos agotado los intentos
        cov_2osvgg30i2().s[53]++;
        if (attempt > retryConfig.maxRetries) {
          /* istanbul ignore next */
          cov_2osvgg30i2().b[15][0]++;
          cov_2osvgg30i2().s[54]++;
          setCurrentError(searchError);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[55]++;
          setRetryCount(attempt - 1);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[56]++;
          setIsRetrying(false);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[57]++;
          onRetryFailed?.(searchError, attempt - 1);
          /* istanbul ignore next */
          cov_2osvgg30i2().s[58]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_2osvgg30i2().b[15][1]++;
        }
        // Preparar para retry
        const delay =
        /* istanbul ignore next */
        (cov_2osvgg30i2().s[59]++, calculateDelay(attempt, retryConfig));
        /* istanbul ignore next */
        cov_2osvgg30i2().s[60]++;
        console.warn(`${operationName} fallÃ³ (intento ${attempt}/${retryConfig.maxRetries}). Reintentando en ${delay}ms...`, error);
        /* istanbul ignore next */
        cov_2osvgg30i2().s[61]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_2osvgg30i2().f[9]++;
          cov_2osvgg30i2().s[62]++;
          return setTimeout(resolve, delay);
        });
      }
    }
    /* istanbul ignore next */
    cov_2osvgg30i2().s[63]++;
    throw lastError;
  }, [retryConfig, onError, onRetrySuccess, onRetryFailed]));
  /**
  * Limpia el estado de error
  */
  const clearError =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[64]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[10]++;
    cov_2osvgg30i2().s[65]++;
    setCurrentError(null);
    /* istanbul ignore next */
    cov_2osvgg30i2().s[66]++;
    setRetryCount(0);
    /* istanbul ignore next */
    cov_2osvgg30i2().s[67]++;
    setIsRetrying(false);
  }, []));
  /**
  * Retry manual
  */
  const retryManually =
  /* istanbul ignore next */
  (cov_2osvgg30i2().s[68]++, (0, _react.useCallback)(async operation => {
    /* istanbul ignore next */
    cov_2osvgg30i2().f[11]++;
    cov_2osvgg30i2().s[69]++;
    clearError();
    /* istanbul ignore next */
    cov_2osvgg30i2().s[70]++;
    return executeWithRetry(operation, 'retry manual');
  }, [executeWithRetry, clearError]));
  /* istanbul ignore next */
  cov_2osvgg30i2().s[71]++;
  return {
    // Estado
    currentError,
    retryCount,
    isRetrying,
    hasError: currentError !== null,
    // Funciones
    handleError,
    executeWithRetry,
    clearError,
    retryManually,
    // ConfiguraciÃ³n
    retryConfig
  };
}
const _default =
/* istanbul ignore next */
(cov_2osvgg30i2().s[72]++, useSearchErrorHandler);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,