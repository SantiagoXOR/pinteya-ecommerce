{"version":3,"names":["GET","cov_1m69zw6ysz","f","s","PATCH","validateAdmin","session","_auth","auth","b","user","error","status","supabase","_server1","createAdminClient","data","userProfile","userError","from","select","eq","email","single","roleData","roleError","role_id","role_name","success","userId","id","console","request","params","validation","_server","NextResponse","json","routeId","body","driver_id","createClient","route","routeError","driver","driverError","shipmentsCount","Array","isArray","shipments","length","max_capacity","activeRoutes","activeRoutesError","updatedRoute","updateError","update","updated_at","Date","toISOString","message","name","currentDriverId","otherActiveRoutes","availableDrivers","driversError","gte","order","ascending","enrichedDrivers","map","compatibility_score","Math","round","random","capacity_utilization","estimated_completion","now","estimated_time","sort","a","shipments_count","total_distance","available_drivers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\[id]\\assign-driver\\route.ts"],"sourcesContent":["// =====================================================\r\n// API: ASIGNAR DRIVER A RUTA\r\n// Ruta: /api/admin/logistics/routes/[id]/assign-driver\r\n// Descripción: Asignar conductor a una ruta específica\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient, createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/auth';\r\n\r\n// =====================================================\r\n// VALIDACIÓN DE ADMIN\r\n// =====================================================\r\n\r\nasync function validateAdmin() {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user) {\r\n      return { error: 'No autenticado', status: 401 };\r\n    }\r\n\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar si el usuario es admin\r\n    const { data: userProfile, error: userError } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, role_id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (userError || !userProfile) {\r\n      return { error: 'Usuario no encontrado', status: 404 };\r\n    }\r\n\r\n    // Obtener el rol del usuario\r\n    const { data: roleData, error: roleError } = await supabase\r\n      .from('user_roles')\r\n      .select('role_name')\r\n      .eq('id', userProfile.role_id)\r\n      .single();\r\n\r\n    if (roleError || !roleData || roleData.role_name !== 'admin') {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { success: true, userId: session.user.id, email: userProfile.email, supabase };\r\n  } catch (error) {\r\n    console.error('Error en validación de admin:', error);\r\n    return { error: 'Error interno del servidor', status: 500 };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH: ASIGNAR DRIVER A RUTA\r\n// =====================================================\r\n\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const routeId = params.id;\r\n    const body = await request.json();\r\n    const { driver_id } = body;\r\n\r\n    if (!routeId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que la ruta existe\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, status, shipments, total_distance, estimated_time')\r\n      .eq('id', routeId)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Si se está asignando un driver\r\n    if (driver_id) {\r\n      // Verificar que el driver existe y está disponible\r\n      const { data: driver, error: driverError } = await supabase\r\n        .from('logistics_drivers')\r\n        .select('id, name, status, max_capacity, vehicle_type')\r\n        .eq('id', driver_id)\r\n        .single();\r\n\r\n      if (driverError || !driver) {\r\n        return NextResponse.json(\r\n          { error: 'Driver no encontrado' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      if (driver.status !== 'available') {\r\n        return NextResponse.json(\r\n          { error: 'El driver no está disponible' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Verificar capacidad del vehículo\r\n      const shipmentsCount = Array.isArray(route.shipments) ? route.shipments.length : 0;\r\n      if (shipmentsCount > driver.max_capacity) {\r\n        return NextResponse.json(\r\n          { \r\n            error: `El vehículo del driver tiene capacidad para ${driver.max_capacity} envíos, pero la ruta tiene ${shipmentsCount}` \r\n          },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Verificar que el driver no tenga otras rutas activas\r\n      const { data: activeRoutes, error: activeRoutesError } = await supabase\r\n        .from('optimized_routes')\r\n        .select('id')\r\n        .eq('driver_id', driver_id)\r\n        .eq('status', 'active');\r\n\r\n      if (activeRoutesError) {\r\n        console.error('Error al verificar rutas activas:', activeRoutesError);\r\n        return NextResponse.json(\r\n          { error: 'Error al verificar disponibilidad del driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      if (activeRoutes && activeRoutes.length > 0) {\r\n        return NextResponse.json(\r\n          { error: 'El driver ya tiene rutas activas asignadas' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Asignar driver a la ruta\r\n      const { data: updatedRoute, error: updateError } = await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          driver_id: driver_id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', routeId)\r\n        .select(`\r\n          *,\r\n          driver:driver_id (\r\n            id,\r\n            name,\r\n            phone,\r\n            vehicle_type,\r\n            license_plate,\r\n            status\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error al asignar driver:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al asignar driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      // Actualizar estado del driver a busy si la ruta está activa\r\n      if (route.status === 'active') {\r\n        await supabase\r\n          .from('logistics_drivers')\r\n          .update({ status: 'busy' })\r\n          .eq('id', driver_id);\r\n      }\r\n\r\n      return NextResponse.json({\r\n        ...updatedRoute,\r\n        message: `Driver ${driver.name} asignado exitosamente a la ruta`\r\n      });\r\n\r\n    } else {\r\n      // Desasignar driver (driver_id = null)\r\n      \r\n      // Obtener el driver actual para liberarlo\r\n      const currentDriverId = route.driver_id;\r\n      \r\n      // Desasignar driver de la ruta\r\n      const { data: updatedRoute, error: updateError } = await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          driver_id: null,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', routeId)\r\n        .select()\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error al desasignar driver:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al desasignar driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      // Si había un driver asignado, verificar si puede volver a available\r\n      if (currentDriverId) {\r\n        // Verificar si el driver tiene otras rutas activas\r\n        const { data: otherActiveRoutes } = await supabase\r\n          .from('optimized_routes')\r\n          .select('id')\r\n          .eq('driver_id', currentDriverId)\r\n          .eq('status', 'active');\r\n\r\n        // Si no tiene otras rutas activas, marcarlo como available\r\n        if (!otherActiveRoutes || otherActiveRoutes.length === 0) {\r\n          await supabase\r\n            .from('logistics_drivers')\r\n            .update({ status: 'available' })\r\n            .eq('id', currentDriverId);\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        ...updatedRoute,\r\n        message: 'Driver desasignado exitosamente de la ruta'\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en PATCH /api/admin/logistics/routes/[id]/assign-driver:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER DRIVERS DISPONIBLES PARA LA RUTA\r\n// =====================================================\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const routeId = params.id;\r\n\r\n    if (!routeId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información de la ruta\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, shipments, total_distance, estimated_time')\r\n      .eq('id', routeId)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const shipmentsCount = Array.isArray(route.shipments) ? route.shipments.length : 0;\r\n\r\n    // Obtener drivers disponibles con capacidad suficiente\r\n    const { data: availableDrivers, error: driversError } = await supabase\r\n      .from('logistics_drivers')\r\n      .select(`\r\n        id,\r\n        name,\r\n        phone,\r\n        vehicle_type,\r\n        license_plate,\r\n        status,\r\n        max_capacity,\r\n        current_location\r\n      `)\r\n      .eq('status', 'available')\r\n      .gte('max_capacity', shipmentsCount)\r\n      .order('name', { ascending: true });\r\n\r\n    if (driversError) {\r\n      console.error('Error al obtener drivers disponibles:', driversError);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener drivers disponibles' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Enriquecer datos con información de compatibilidad\r\n    const enrichedDrivers = availableDrivers?.map(driver => ({\r\n      ...driver,\r\n      compatibility_score: Math.round(\r\n        (driver.max_capacity >= shipmentsCount ? 50 : 0) +\r\n        (driver.status === 'available' ? 30 : 0) +\r\n        (Math.random() * 20) // Factor aleatorio para simular otros criterios\r\n      ),\r\n      capacity_utilization: Math.round((shipmentsCount / driver.max_capacity) * 100),\r\n      estimated_completion: new Date(\r\n        Date.now() + route.estimated_time * 60 * 1000\r\n      ).toISOString()\r\n    })) || [];\r\n\r\n    // Ordenar por score de compatibilidad\r\n    enrichedDrivers.sort((a, b) => b.compatibility_score - a.compatibility_score);\r\n\r\n    return NextResponse.json({\r\n      route: {\r\n        id: route.id,\r\n        shipments_count: shipmentsCount,\r\n        total_distance: route.total_distance,\r\n        estimated_time: route.estimated_time\r\n      },\r\n      available_drivers: enrichedDrivers\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/logistics/routes/[id]/assign-driver:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}