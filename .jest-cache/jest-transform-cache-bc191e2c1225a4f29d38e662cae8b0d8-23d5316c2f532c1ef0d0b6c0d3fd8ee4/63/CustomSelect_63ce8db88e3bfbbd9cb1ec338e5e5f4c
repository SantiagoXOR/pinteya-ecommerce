512b7816ff24e05505362ed230981f28
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const CustomSelect = ({ options, onChange })=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [selectedOption, setSelectedOption] = (0, _react.useState)(options[0]);
    const selectRef = (0, _react.useRef)(null);
    // Function to close the dropdown when a click occurs outside the component
    const handleClickOutside = (0, _react.useCallback)((event)=>{
        if (selectRef.current && event.target && !selectRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        // Add a click event listener to the document
        document.addEventListener('click', handleClickOutside);
        // Clean up the event listener when the component unmounts
        return ()=>{
            document.removeEventListener('click', handleClickOutside);
        };
    }, [
        handleClickOutside
    ]);
    const toggleDropdown = (0, _react.useCallback)(()=>{
        setIsOpen((prev)=>!prev);
    }, []);
    const handleOptionClick = (0, _react.useCallback)((option)=>{
        setSelectedOption(option);
        setIsOpen(false);
        // Call onChange if it's defined
        if (onChange) {
            onChange(option.value);
        }
    }, [
        onChange
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "custom-select custom-select-2 flex-shrink-0 relative",
        ref: selectRef,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-selected whitespace-nowrap ${isOpen ? 'select-arrow-active' : ''}`,
                onClick: toggleDropdown,
                children: selectedOption.label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `select-items ${isOpen ? '' : 'select-hide'}`,
                children: options.slice(1).map((option, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        onClick: ()=>handleOptionClick(option),
                        className: `select-item ${selectedOption === option ? 'same-as-selected' : ''}`,
                        children: option.label
                    }, index))
            })
        ]
    });
};
const _default = CustomSelect;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcY29tcG9uZW50c1xcU2hvcFdpdGhTaWRlYmFyXFxDdXN0b21TZWxlY3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IEN1c3RvbVNlbGVjdCA9ICh7XG4gIG9wdGlvbnMsXG4gIG9uQ2hhbmdlLFxufToge1xuICBvcHRpb25zOiBhbnlbXVxuICBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWRcbn0pID0+IHtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbc2VsZWN0ZWRPcHRpb24sIHNldFNlbGVjdGVkT3B0aW9uXSA9IHVzZVN0YXRlKG9wdGlvbnNbMF0pXG4gIGNvbnN0IHNlbGVjdFJlZiA9IHVzZVJlZjxhbnk+KG51bGwpXG5cbiAgLy8gRnVuY3Rpb24gdG8gY2xvc2UgdGhlIGRyb3Bkb3duIHdoZW4gYSBjbGljayBvY2N1cnMgb3V0c2lkZSB0aGUgY29tcG9uZW50XG4gIGNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9IHVzZUNhbGxiYWNrKChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGlmIChzZWxlY3RSZWYuY3VycmVudCAmJiBldmVudC50YXJnZXQgJiYgIXNlbGVjdFJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgc2V0SXNPcGVuKGZhbHNlKVxuICAgIH1cbiAgfSwgW10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgZG9jdW1lbnRcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrT3V0c2lkZSlcblxuICAgIC8vIENsZWFuIHVwIHRoZSBldmVudCBsaXN0ZW5lciB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHNcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGlja091dHNpZGUpXG4gICAgfVxuICB9LCBbaGFuZGxlQ2xpY2tPdXRzaWRlXSlcblxuICBjb25zdCB0b2dnbGVEcm9wZG93biA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJc09wZW4ocHJldiA9PiAhcHJldilcbiAgfSwgW10pXG5cbiAgY29uc3QgaGFuZGxlT3B0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIHNldFNlbGVjdGVkT3B0aW9uKG9wdGlvbilcbiAgICAgIHNldElzT3BlbihmYWxzZSlcbiAgICAgIC8vIENhbGwgb25DaGFuZ2UgaWYgaXQncyBkZWZpbmVkXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2Uob3B0aW9uLnZhbHVlKVxuICAgICAgfVxuICAgIH0sXG4gICAgW29uQ2hhbmdlXVxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0nY3VzdG9tLXNlbGVjdCBjdXN0b20tc2VsZWN0LTIgZmxleC1zaHJpbmstMCByZWxhdGl2ZScgcmVmPXtzZWxlY3RSZWZ9PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2BzZWxlY3Qtc2VsZWN0ZWQgd2hpdGVzcGFjZS1ub3dyYXAgJHtpc09wZW4gPyAnc2VsZWN0LWFycm93LWFjdGl2ZScgOiAnJ31gfVxuICAgICAgICBvbkNsaWNrPXt0b2dnbGVEcm9wZG93bn1cbiAgICAgID5cbiAgICAgICAge3NlbGVjdGVkT3B0aW9uLmxhYmVsfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YHNlbGVjdC1pdGVtcyAke2lzT3BlbiA/ICcnIDogJ3NlbGVjdC1oaWRlJ31gfT5cbiAgICAgICAge29wdGlvbnMuc2xpY2UoMSkubWFwKChvcHRpb24sIGluZGV4KSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZU9wdGlvbkNsaWNrKG9wdGlvbil9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BzZWxlY3QtaXRlbSAke3NlbGVjdGVkT3B0aW9uID09PSBvcHRpb24gPyAnc2FtZS1hcy1zZWxlY3RlZCcgOiAnJ31gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tU2VsZWN0XG4iXSwibmFtZXMiOlsiQ3VzdG9tU2VsZWN0Iiwib3B0aW9ucyIsIm9uQ2hhbmdlIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwidXNlU3RhdGUiLCJzZWxlY3RlZE9wdGlvbiIsInNldFNlbGVjdGVkT3B0aW9uIiwic2VsZWN0UmVmIiwidXNlUmVmIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwidXNlQ2FsbGJhY2siLCJldmVudCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJjb250YWlucyIsInVzZUVmZmVjdCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVEcm9wZG93biIsInByZXYiLCJoYW5kbGVPcHRpb25DbGljayIsIm9wdGlvbiIsInZhbHVlIiwiZGl2IiwiY2xhc3NOYW1lIiwicmVmIiwib25DbGljayIsImxhYmVsIiwic2xpY2UiLCJtYXAiLCJpbmRleCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRUE7OztlQUFBOzs7OytEQXJFZ0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoRSxNQUFNQSxlQUFlLENBQUMsRUFDcEJDLE9BQU8sRUFDUEMsUUFBUSxFQUlUO0lBQ0MsTUFBTSxDQUFDQyxRQUFRQyxVQUFVLEdBQUdDLElBQUFBLGVBQVEsRUFBQztJQUNyQyxNQUFNLENBQUNDLGdCQUFnQkMsa0JBQWtCLEdBQUdGLElBQUFBLGVBQVEsRUFBQ0osT0FBTyxDQUFDLEVBQUU7SUFDL0QsTUFBTU8sWUFBWUMsSUFBQUEsYUFBTSxFQUFNO0lBRTlCLDJFQUEyRTtJQUMzRSxNQUFNQyxxQkFBcUJDLElBQUFBLGtCQUFXLEVBQUMsQ0FBQ0M7UUFDdEMsSUFBSUosVUFBVUssT0FBTyxJQUFJRCxNQUFNRSxNQUFNLElBQUksQ0FBQ04sVUFBVUssT0FBTyxDQUFDRSxRQUFRLENBQUNILE1BQU1FLE1BQU0sR0FBVztZQUMxRlYsVUFBVTtRQUNaO0lBQ0YsR0FBRyxFQUFFO0lBRUxZLElBQUFBLGdCQUFTLEVBQUM7UUFDUiw2Q0FBNkM7UUFDN0NDLFNBQVNDLGdCQUFnQixDQUFDLFNBQVNSO1FBRW5DLDBEQUEwRDtRQUMxRCxPQUFPO1lBQ0xPLFNBQVNFLG1CQUFtQixDQUFDLFNBQVNUO1FBQ3hDO0lBQ0YsR0FBRztRQUFDQTtLQUFtQjtJQUV2QixNQUFNVSxpQkFBaUJULElBQUFBLGtCQUFXLEVBQUM7UUFDakNQLFVBQVVpQixDQUFBQSxPQUFRLENBQUNBO0lBQ3JCLEdBQUcsRUFBRTtJQUVMLE1BQU1DLG9CQUFvQlgsSUFBQUEsa0JBQVcsRUFDbkMsQ0FBQ1k7UUFDQ2hCLGtCQUFrQmdCO1FBQ2xCbkIsVUFBVTtRQUNWLGdDQUFnQztRQUNoQyxJQUFJRixVQUFVO1lBQ1pBLFNBQVNxQixPQUFPQyxLQUFLO1FBQ3ZCO0lBQ0YsR0FDQTtRQUFDdEI7S0FBUztJQUdaLHFCQUNFLHNCQUFDdUI7UUFBSUMsV0FBVTtRQUF1REMsS0FBS25COzswQkFDekUscUJBQUNpQjtnQkFDQ0MsV0FBVyxDQUFDLGtDQUFrQyxFQUFFdkIsU0FBUyx3QkFBd0IsSUFBSTtnQkFDckZ5QixTQUFTUjswQkFFUmQsZUFBZXVCLEtBQUs7OzBCQUV2QixxQkFBQ0o7Z0JBQUlDLFdBQVcsQ0FBQyxhQUFhLEVBQUV2QixTQUFTLEtBQUssZUFBZTswQkFDMURGLFFBQVE2QixLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDLENBQUNSLFFBQVFTLHNCQUM3QixxQkFBQ1A7d0JBRUNHLFNBQVMsSUFBTU4sa0JBQWtCQzt3QkFDakNHLFdBQVcsQ0FBQyxZQUFZLEVBQUVwQixtQkFBbUJpQixTQUFTLHFCQUFxQixJQUFJO2tDQUU5RUEsT0FBT00sS0FBSzt1QkFKUkc7Ozs7QUFVakI7TUFFQSxXQUFlaEMifQ==