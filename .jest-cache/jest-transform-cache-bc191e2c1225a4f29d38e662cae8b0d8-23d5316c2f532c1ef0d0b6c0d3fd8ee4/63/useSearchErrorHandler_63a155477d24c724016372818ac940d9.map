{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchErrorHandler.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchErrorHandler - Manejo robusto de errores de búsqueda\r\n// ===================================\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchError {\r\n  type: 'network' | 'server' | 'validation' | 'timeout' | 'unknown';\r\n  message: string;\r\n  code?: string;\r\n  retryable: boolean;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface RetryConfig {\r\n  maxRetries: number;\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n  backoffFactor: number;\r\n}\r\n\r\nexport interface UseSearchErrorHandlerOptions {\r\n  retryConfig?: Partial<RetryConfig>;\r\n  onError?: (error: SearchError) => void;\r\n  onRetrySuccess?: () => void;\r\n  onRetryFailed?: (error: SearchError, attempts: number) => void;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_RETRY_CONFIG: RetryConfig = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 10000,\r\n  backoffFactor: 2,\r\n};\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\n/**\r\n * Clasifica el tipo de error basado en el error original\r\n */\r\nfunction classifyError(error: any): SearchError {\r\n  const timestamp = Date.now();\r\n  \r\n  // Error de red\r\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n    return {\r\n      type: 'network',\r\n      message: 'Error de conexión. Verifica tu conexión a internet.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de timeout\r\n  if (error.name === 'AbortError' || error.message.includes('timeout')) {\r\n    return {\r\n      type: 'timeout',\r\n      message: 'La búsqueda tardó demasiado. Intenta nuevamente.',\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error del servidor\r\n  if (error.status >= 500) {\r\n    return {\r\n      type: 'server',\r\n      message: 'Error del servidor. Intenta nuevamente en unos momentos.',\r\n      code: error.status?.toString(),\r\n      retryable: true,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error de validación\r\n  if (error.status >= 400 && error.status < 500) {\r\n    return {\r\n      type: 'validation',\r\n      message: error.message || 'Parámetros de búsqueda inválidos.',\r\n      code: error.status?.toString(),\r\n      retryable: false,\r\n      timestamp,\r\n    };\r\n  }\r\n  \r\n  // Error desconocido\r\n  return {\r\n    type: 'unknown',\r\n    message: error.message || 'Error inesperado durante la búsqueda.',\r\n    retryable: true,\r\n    timestamp,\r\n  };\r\n}\r\n\r\n/**\r\n * Calcula el delay para el siguiente retry con backoff exponencial\r\n */\r\nfunction calculateDelay(attempt: number, config: RetryConfig): number {\r\n  const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\r\n  return Math.min(delay, config.maxDelay);\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchErrorHandler(options: UseSearchErrorHandlerOptions = {}) {\r\n  const {\r\n    retryConfig: userRetryConfig = {},\r\n    onError,\r\n    onRetrySuccess,\r\n    onRetryFailed,\r\n  } = options;\r\n\r\n  const retryConfig = useMemo(() => ({\r\n    ...DEFAULT_RETRY_CONFIG,\r\n    ...userRetryConfig\r\n  }), [userRetryConfig]);\r\n  \r\n  const [currentError, setCurrentError] = useState<SearchError | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [isRetrying, setIsRetrying] = useState(false);\r\n\r\n  /**\r\n   * Maneja un error de búsqueda\r\n   */\r\n  const handleError = useCallback((error: any): SearchError => {\r\n    const searchError = classifyError(error);\r\n    setCurrentError(searchError);\r\n    setRetryCount(0);\r\n    \r\n    // Callback personalizado\r\n    onError?.(searchError);\r\n    \r\n    return searchError;\r\n  }, [onError]);\r\n\r\n  /**\r\n   * Ejecuta una operación con retry automático\r\n   */\r\n  const executeWithRetry = useCallback(async <T>(\r\n    operation: () => Promise<T>,\r\n    operationName: string = 'búsqueda'\r\n  ): Promise<T> => {\r\n    let lastError: any;\r\n\r\n    for (let attempt = 1; attempt <= retryConfig.maxRetries + 1; attempt++) {\r\n      try {\r\n        setIsRetrying(attempt > 1);\r\n        setRetryCount(attempt > 1 ? attempt - 1 : 0);\r\n\r\n        const result = await operation();\r\n\r\n        // Éxito\r\n        if (attempt > 1) {\r\n          setCurrentError(null);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onRetrySuccess?.();\r\n        }\r\n\r\n        return result;\r\n\r\n      } catch (error) {\r\n        lastError = error;\r\n        const searchError = classifyError(error);\r\n\r\n        // Si no es retryable, fallar inmediatamente\r\n        if (!searchError.retryable) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(0);\r\n          setIsRetrying(false);\r\n          onError?.(searchError);\r\n          throw error;\r\n        }\r\n\r\n        // Si hemos agotado los intentos\r\n        if (attempt > retryConfig.maxRetries) {\r\n          setCurrentError(searchError);\r\n          setRetryCount(attempt - 1);\r\n          setIsRetrying(false);\r\n          onRetryFailed?.(searchError, attempt - 1);\r\n          throw error;\r\n        }\r\n\r\n        // Preparar para retry\r\n        const delay = calculateDelay(attempt, retryConfig);\r\n\r\n        console.warn(`${operationName} falló (intento ${attempt}/${retryConfig.maxRetries}). Reintentando en ${delay}ms...`, error);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }, [retryConfig, onError, onRetrySuccess, onRetryFailed]);\r\n\r\n  /**\r\n   * Limpia el estado de error\r\n   */\r\n  const clearError = useCallback(() => {\r\n    setCurrentError(null);\r\n    setRetryCount(0);\r\n    setIsRetrying(false);\r\n  }, []);\r\n\r\n  /**\r\n   * Retry manual\r\n   */\r\n  const retryManually = useCallback(async <T>(\r\n    operation: () => Promise<T>\r\n  ): Promise<T> => {\r\n    clearError();\r\n    return executeWithRetry(operation, 'retry manual');\r\n  }, [executeWithRetry, clearError]);\r\n\r\n  return {\r\n    // Estado\r\n    currentError,\r\n    retryCount,\r\n    isRetrying,\r\n    hasError: currentError !== null,\r\n    \r\n    // Funciones\r\n    handleError,\r\n    executeWithRetry,\r\n    clearError,\r\n    retryManually,\r\n    \r\n    // Configuración\r\n    retryConfig,\r\n  };\r\n}\r\n\r\nexport default useSearchErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useSearchErrorHandler","DEFAULT_RETRY_CONFIG","maxRetries","baseDelay","maxDelay","backoffFactor","classifyError","error","timestamp","Date","now","name","message","includes","type","retryable","status","code","toString","calculateDelay","attempt","config","delay","Math","pow","min","options","retryConfig","userRetryConfig","onError","onRetrySuccess","onRetryFailed","useMemo","currentError","setCurrentError","useState","retryCount","setRetryCount","isRetrying","setIsRetrying","handleError","useCallback","searchError","executeWithRetry","operation","operationName","lastError","result","console","warn","Promise","resolve","setTimeout","clearError","retryManually","hasError"],"mappings":"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"}