{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\security-dashboard.ts"],"sourcesContent":["/**\r\n * Dashboard de Seguridad\r\n * Proporciona una interfaz unificada para monitoreo y gestión de seguridad\r\n */\r\n\r\nimport {\r\n  getSecurityMetrics,\r\n  getActiveSecurityAlerts,\r\n  analyzeSecurityPatterns,\r\n  runSecurityHealthCheck,\r\n  generateSecurityReport,\r\n  startSecurityMonitoring,\r\n  stopSecurityMonitoring,\r\n  type SecurityMetrics,\r\n  type SecurityAlert,\r\n  type SecurityReport\r\n} from './security-audit-enhanced';\r\n\r\n// =====================================================\r\n// TIPOS Y INTERFACES DEL DASHBOARD\r\n// =====================================================\r\n\r\nexport interface SecurityDashboardData {\r\n  metrics: SecurityMetrics;\r\n  alerts: SecurityAlert[];\r\n  healthCheck: {\r\n    status: 'healthy' | 'warning' | 'critical';\r\n    issues: string[];\r\n    recommendations: string[];\r\n  };\r\n  recentActivity: {\r\n    totalEvents: number;\r\n    criticalEvents: number;\r\n    newAlerts: number;\r\n    resolvedAlerts: number;\r\n  };\r\n  trends: {\r\n    eventsLast7Days: number[];\r\n    alertsLast7Days: number[];\r\n    securityScoreTrend: number[];\r\n  };\r\n}\r\n\r\nexport interface SecurityDashboardConfig {\r\n  refreshInterval: number; // en segundos\r\n  alertThresholds: {\r\n    criticalEvents: number;\r\n    authFailures: number;\r\n    suspiciousActivities: number;\r\n    securityScore: number;\r\n  };\r\n  autoAnalysis: boolean;\r\n  notifications: {\r\n    email: boolean;\r\n    slack: boolean;\r\n    webhook?: string;\r\n  };\r\n}\r\n\r\n// =====================================================\r\n// CLASE PRINCIPAL DEL DASHBOARD\r\n// =====================================================\r\n\r\nexport class SecurityDashboard {\r\n  private config: SecurityDashboardConfig;\r\n  private monitoringInterval?: NodeJS.Timeout;\r\n  private refreshInterval?: NodeJS.Timeout;\r\n  private lastUpdate: Date;\r\n  private cachedData?: SecurityDashboardData;\r\n\r\n  constructor(config: Partial<SecurityDashboardConfig> = {}) {\r\n    this.config = {\r\n      refreshInterval: 30, // 30 segundos por defecto\r\n      alertThresholds: {\r\n        criticalEvents: 1,\r\n        authFailures: 10,\r\n        suspiciousActivities: 5,\r\n        securityScore: 70\r\n      },\r\n      autoAnalysis: true,\r\n      notifications: {\r\n        email: false,\r\n        slack: false\r\n      },\r\n      ...config\r\n    };\r\n    this.lastUpdate = new Date();\r\n  }\r\n\r\n  /**\r\n   * Inicia el dashboard de seguridad\r\n   */\r\n  async start(): Promise<void> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Iniciando dashboard de seguridad...');\r\n\r\n      // Cargar datos iniciales\r\n      await this.refreshData();\r\n\r\n      // Iniciar monitoreo automático si está habilitado\r\n      if (this.config.autoAnalysis) {\r\n        this.monitoringInterval = startSecurityMonitoring(5); // cada 5 minutos\r\n      }\r\n\r\n      // Iniciar refresh automático de datos\r\n      this.refreshInterval = setInterval(async () => {\r\n        await this.refreshData();\r\n      }, this.config.refreshInterval * 1000);\r\n\r\n      console.log('[SECURITY DASHBOARD] Dashboard iniciado exitosamente');\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error iniciando dashboard:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detiene el dashboard de seguridad\r\n   */\r\n  stop(): void {\r\n    console.log('[SECURITY DASHBOARD] Deteniendo dashboard...');\r\n\r\n    if (this.monitoringInterval) {\r\n      stopSecurityMonitoring(this.monitoringInterval);\r\n      this.monitoringInterval = undefined;\r\n    }\r\n\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n      this.refreshInterval = undefined;\r\n    }\r\n\r\n    console.log('[SECURITY DASHBOARD] Dashboard detenido');\r\n  }\r\n\r\n  /**\r\n   * Actualiza los datos del dashboard\r\n   */\r\n  async refreshData(): Promise<SecurityDashboardData> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Actualizando datos...');\r\n\r\n      // Obtener datos en paralelo\r\n      const [metrics, alerts, healthCheck] = await Promise.all([\r\n        getSecurityMetrics(),\r\n        getActiveSecurityAlerts(),\r\n        runSecurityHealthCheck()\r\n      ]);\r\n\r\n      // Calcular actividad reciente (comparar con datos anteriores)\r\n      const recentActivity = {\r\n        totalEvents: metrics.total_events_24h,\r\n        criticalEvents: metrics.critical_events_24h,\r\n        newAlerts: alerts.filter(a => \r\n          new Date(a.first_occurrence) > new Date(Date.now() - 24 * 60 * 60 * 1000)\r\n        ).length,\r\n        resolvedAlerts: 0 // TODO: implementar cuando se tenga histórico\r\n      };\r\n\r\n      // Generar tendencias (simuladas por ahora)\r\n      const trends = {\r\n        eventsLast7Days: await this.getEventsTrend(7),\r\n        alertsLast7Days: await this.getAlertsTrend(7),\r\n        securityScoreTrend: await this.getSecurityScoreTrend(7)\r\n      };\r\n\r\n      this.cachedData = {\r\n        metrics,\r\n        alerts,\r\n        healthCheck: {\r\n          status: healthCheck.status,\r\n          issues: healthCheck.issues,\r\n          recommendations: healthCheck.recommendations\r\n        },\r\n        recentActivity,\r\n        trends\r\n      };\r\n\r\n      this.lastUpdate = new Date();\r\n\r\n      // Verificar umbrales y generar alertas si es necesario\r\n      await this.checkThresholds(metrics, alerts);\r\n\r\n      console.log('[SECURITY DASHBOARD] Datos actualizados exitosamente');\r\n      return this.cachedData;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error actualizando datos:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene los datos actuales del dashboard\r\n   */\r\n  async getData(forceRefresh: boolean = false): Promise<SecurityDashboardData> {\r\n    if (forceRefresh || !this.cachedData || \r\n        Date.now() - this.lastUpdate.getTime() > this.config.refreshInterval * 1000) {\r\n      return await this.refreshData();\r\n    }\r\n    return this.cachedData;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un análisis manual de seguridad\r\n   */\r\n  async runManualAnalysis(userId?: string): Promise<SecurityAlert[]> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Ejecutando análisis manual...');\r\n      \r\n      const alerts = await analyzeSecurityPatterns(userId);\r\n      \r\n      // Actualizar datos después del análisis\r\n      await this.refreshData();\r\n      \r\n      console.log(`[SECURITY DASHBOARD] Análisis completado: ${alerts.length} alertas generadas`);\r\n      return alerts;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error en análisis manual:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera un reporte de seguridad\r\n   */\r\n  async generateReport(startDate: Date, endDate: Date): Promise<SecurityReport> {\r\n    try {\r\n      console.log('[SECURITY DASHBOARD] Generando reporte de seguridad...');\r\n      \r\n      const report = await generateSecurityReport(startDate, endDate);\r\n      \r\n      console.log('[SECURITY DASHBOARD] Reporte generado exitosamente');\r\n      return report;\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error generando reporte:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado actual del dashboard\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean;\r\n    lastUpdate: Date;\r\n    config: SecurityDashboardConfig;\r\n    uptime: number;\r\n  } {\r\n    return {\r\n      isRunning: !!this.refreshInterval,\r\n      lastUpdate: this.lastUpdate,\r\n      config: this.config,\r\n      uptime: Date.now() - this.lastUpdate.getTime()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Actualiza la configuración del dashboard\r\n   */\r\n  updateConfig(newConfig: Partial<SecurityDashboardConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('[SECURITY DASHBOARD] Configuración actualizada');\r\n  }\r\n\r\n  // =====================================================\r\n  // MÉTODOS PRIVADOS\r\n  // =====================================================\r\n\r\n  /**\r\n   * Verifica umbrales y genera notificaciones\r\n   */\r\n  private async checkThresholds(metrics: SecurityMetrics, alerts: SecurityAlert[]): Promise<void> {\r\n    const issues: string[] = [];\r\n\r\n    if (metrics.critical_events_24h >= this.config.alertThresholds.criticalEvents) {\r\n      issues.push(`Eventos críticos: ${metrics.critical_events_24h} (umbral: ${this.config.alertThresholds.criticalEvents})`);\r\n    }\r\n\r\n    if (metrics.auth_failures_24h >= this.config.alertThresholds.authFailures) {\r\n      issues.push(`Fallos de autenticación: ${metrics.auth_failures_24h} (umbral: ${this.config.alertThresholds.authFailures})`);\r\n    }\r\n\r\n    if (metrics.suspicious_activities_24h >= this.config.alertThresholds.suspiciousActivities) {\r\n      issues.push(`Actividades sospechosas: ${metrics.suspicious_activities_24h} (umbral: ${this.config.alertThresholds.suspiciousActivities})`);\r\n    }\r\n\r\n    if (metrics.security_score <= this.config.alertThresholds.securityScore) {\r\n      issues.push(`Score de seguridad bajo: ${metrics.security_score} (umbral: ${this.config.alertThresholds.securityScore})`);\r\n    }\r\n\r\n    if (issues.length > 0) {\r\n      console.warn('[SECURITY DASHBOARD] Umbrales excedidos:', issues);\r\n      await this.sendNotifications(issues);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía notificaciones según la configuración\r\n   */\r\n  private async sendNotifications(issues: string[]): Promise<void> {\r\n    try {\r\n      if (this.config.notifications.webhook) {\r\n        // Enviar webhook\r\n        const payload = {\r\n          timestamp: new Date().toISOString(),\r\n          source: 'security-dashboard',\r\n          level: 'warning',\r\n          message: 'Umbrales de seguridad excedidos',\r\n          issues\r\n        };\r\n\r\n        await fetch(this.config.notifications.webhook, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n      }\r\n\r\n      // TODO: Implementar notificaciones por email y Slack\r\n      if (this.config.notifications.email) {\r\n        console.log('[SECURITY DASHBOARD] Enviando notificación por email...');\r\n      }\r\n\r\n      if (this.config.notifications.slack) {\r\n        console.log('[SECURITY DASHBOARD] Enviando notificación por Slack...');\r\n      }\r\n    } catch (error) {\r\n      console.error('[SECURITY DASHBOARD] Error enviando notificaciones:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia de eventos (simulada)\r\n   */\r\n  private async getEventsTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 100));\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia de alertas (simulada)\r\n   */\r\n  private async getAlertsTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 10));\r\n  }\r\n\r\n  /**\r\n   * Obtiene tendencia del score de seguridad (simulada)\r\n   */\r\n  private async getSecurityScoreTrend(days: number): Promise<number[]> {\r\n    // TODO: Implementar consulta real a la base de datos\r\n    return Array(days).fill(0).map(() => Math.floor(Math.random() * 40) + 60);\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// INSTANCIA SINGLETON DEL DASHBOARD\r\n// =====================================================\r\n\r\nlet dashboardInstance: SecurityDashboard | null = null;\r\n\r\n/**\r\n * Obtiene la instancia singleton del dashboard\r\n */\r\nexport function getSecurityDashboard(config?: Partial<SecurityDashboardConfig>): SecurityDashboard {\r\n  if (!dashboardInstance) {\r\n    dashboardInstance = new SecurityDashboard(config);\r\n  }\r\n  return dashboardInstance;\r\n}\r\n\r\n/**\r\n * Inicia el dashboard global de seguridad\r\n */\r\nexport async function startGlobalSecurityDashboard(config?: Partial<SecurityDashboardConfig>): Promise<SecurityDashboard> {\r\n  const dashboard = getSecurityDashboard(config);\r\n  await dashboard.start();\r\n  return dashboard;\r\n}\r\n\r\n/**\r\n * Detiene el dashboard global de seguridad\r\n */\r\nexport function stopGlobalSecurityDashboard(): void {\r\n  if (dashboardInstance) {\r\n    dashboardInstance.stop();\r\n    dashboardInstance = null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["SecurityDashboard","getSecurityDashboard","startGlobalSecurityDashboard","stopGlobalSecurityDashboard","config","refreshInterval","alertThresholds","criticalEvents","authFailures","suspiciousActivities","securityScore","autoAnalysis","notifications","email","slack","lastUpdate","Date","start","console","log","refreshData","monitoringInterval","startSecurityMonitoring","setInterval","error","stop","stopSecurityMonitoring","undefined","clearInterval","metrics","alerts","healthCheck","Promise","all","getSecurityMetrics","getActiveSecurityAlerts","runSecurityHealthCheck","recentActivity","totalEvents","total_events_24h","critical_events_24h","newAlerts","filter","a","first_occurrence","now","length","resolvedAlerts","trends","eventsLast7Days","getEventsTrend","alertsLast7Days","getAlertsTrend","securityScoreTrend","getSecurityScoreTrend","cachedData","status","issues","recommendations","checkThresholds","getData","forceRefresh","getTime","runManualAnalysis","userId","analyzeSecurityPatterns","generateReport","startDate","endDate","report","generateSecurityReport","getStatus","isRunning","uptime","updateConfig","newConfig","push","auth_failures_24h","suspicious_activities_24h","security_score","warn","sendNotifications","webhook","payload","timestamp","toISOString","source","level","message","fetch","method","headers","body","JSON","stringify","days","Array","fill","map","Math","floor","random","dashboardInstance","dashboard"],"mappings":"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"}