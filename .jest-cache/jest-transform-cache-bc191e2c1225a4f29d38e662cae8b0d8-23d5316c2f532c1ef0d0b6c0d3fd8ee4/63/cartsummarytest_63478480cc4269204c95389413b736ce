45b3703b1702b94c6565a0e65bcfa97d
"use strict";
// Mock de los componentes del Design System
jest.mock('../price-display', ()=>({
        PriceDisplay: ({ amount, originalAmount, className })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "price-display",
                className: className,
                children: [
                    "$",
                    (amount / 100).toFixed(2),
                    originalAmount && ` (was $${(originalAmount / 100).toFixed(2)})`
                ]
            })
    }));
jest.mock('../shipping-info', ()=>({
        ShippingInfo: ({ options, selectedOption })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "shipping-info",
                children: [
                    "Shipping: ",
                    selectedOption
                ]
            })
    }));
jest.mock('../product-card-enhanced', ()=>({
        EnhancedProductCard: ({ title, context })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "enhanced-product-card",
                children: [
                    title,
                    " - ",
                    context
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _cartsummary = require("../cart-summary");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockCartItems = [
    {
        id: 1,
        title: 'Pintura Sherwin Williams 4L',
        price: 10000,
        discountedPrice: 8500,
        quantity: 2,
        image: '/test-image.jpg',
        category: 'pinturas'
    },
    {
        id: 2,
        title: 'Esmalte Petrilac 1L',
        price: 2300,
        discountedPrice: 2300,
        quantity: 1,
        category: 'esmaltes'
    }
];
describe('CartSummary', ()=>{
    const defaultProps = {
        cartItems: mockCartItems,
        totalPrice: 19300,
        shippingCost: 2500,
        discount: 0,
        finalTotal: 21800
    };
    it('renders cart summary with items', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText('Resumen del Pedido')).toBeInTheDocument();
        expect(_react1.screen.getByText('2 items')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pintura Sherwin Williams 4L')).toBeInTheDocument();
        expect(_react1.screen.getByText('Esmalte Petrilac 1L')).toBeInTheDocument();
    });
    it('shows empty cart message when no items', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            cartItems: []
        }));
        expect(_react1.screen.getByText('No hay productos en el carrito')).toBeInTheDocument();
    });
    it('displays price calculations correctly', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText('Subtotal')).toBeInTheDocument();
        expect(_react1.screen.getByText('Envío')).toBeInTheDocument();
        expect(_react1.screen.getByText('Total')).toBeInTheDocument();
    });
    it('shows free shipping badge when applicable', ()=>{
        const propsWithFreeShipping = {
            ...defaultProps,
            totalPrice: 60000,
            shippingCost: 0
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...propsWithFreeShipping
        }));
        // Buscar específicamente el badge de envío gratis
        expect(_react1.screen.getByText('Gratis', {
            selector: '.bg-success'
        })).toBeInTheDocument();
    });
    it('displays discount when applied', ()=>{
        const propsWithDiscount = {
            ...defaultProps,
            discount: 1000,
            appliedCoupon: {
                code: 'PROMO10',
                discount: 1000,
                type: 'fixed'
            }
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...propsWithDiscount
        }));
        expect(_react1.screen.getByText('Descuento')).toBeInTheDocument();
        expect(_react1.screen.getByText('PROMO10')).toBeInTheDocument();
    });
    it('calls onCheckout when checkout button is clicked', ()=>{
        const mockOnCheckout = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            onCheckout: mockOnCheckout
        }));
        const checkoutButton = _react1.screen.getByText('Proceder al Pago');
        _react1.fireEvent.click(checkoutButton);
        expect(mockOnCheckout).toHaveBeenCalledTimes(1);
    });
    it('renders in compact variant', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            variant: "compact"
        }));
        // En variante compact, debería tener altura máxima reducida
        const itemsContainer = _react1.screen.getByText('Pintura Sherwin Williams 4L').closest('.max-h-40');
        expect(itemsContainer).toBeInTheDocument();
    });
    it('shows product cards when enabled', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            showProductCards: true,
            productCardContext: "checkout"
        }));
        expect(_react1.screen.getAllByTestId('enhanced-product-card')).toHaveLength(2);
        expect(_react1.screen.getByText('Pintura Sherwin Williams 4L - checkout')).toBeInTheDocument();
    });
    it('shows shipping details in detailed variant', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            variant: "detailed",
            showShippingDetails: true
        }));
        expect(_react1.screen.getByTestId('shipping-info')).toBeInTheDocument();
    });
    it('disables checkout button when cart is empty', ()=>{
        const mockOnCheckout = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            cartItems: [],
            onCheckout: mockOnCheckout
        }));
        // El botón de checkout no debería aparecer cuando el carrito está vacío
        expect(_react1.screen.queryByText('Proceder al Pago')).not.toBeInTheDocument();
    });
    it('calculates final total correctly when not provided', ()=>{
        const propsWithoutFinalTotal = {
            cartItems: mockCartItems,
            totalPrice: 19300,
            shippingCost: 2500,
            discount: 1000
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...propsWithoutFinalTotal
        }));
        // Debería calcular: 19300 + 2500 - 1000 = 20800
        expect(_react1.screen.getByText('Total')).toBeInTheDocument();
    });
    it('shows benefits section when not compact', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...defaultProps,
            variant: "default"
        }));
        expect(_react1.screen.getByText('Compra protegida')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tu dinero está protegido con MercadoPago')).toBeInTheDocument();
    });
    it('handles single item correctly', ()=>{
        const singleItemProps = {
            ...defaultProps,
            cartItems: [
                mockCartItems[0]
            ]
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_cartsummary.CartSummary, {
            ...singleItemProps
        }));
        expect(_react1.screen.getByText('1 item')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,