{"version":3,"names":["cov_1uhltqlpy4","actualCoverage","s","useCategoryFilters","f","selectedCategories","setSelectedCategories","_react","useState","isFiltering","setIsFiltering","searchParams","_navigation","useSearchParams","router","useRouter","pathname","usePathname","useEffect","categoriesFromUrl","get","b","categories","split","filter","Boolean","length","updateUrl","useCallback","params","URLSearchParams","toString","set","join","delete","newUrl","replace","scroll","handleCategoryChange","clearFilters","isCategorySelected","categorySlug","includes","toggleCategory","isSelected","newSelection","slug"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useCategoryFilters.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport { useSearchParams, useRouter, usePathname } from \"next/navigation\";\r\n\r\nexport interface CategoryFiltersState {\r\n  selectedCategories: string[];\r\n  isFiltering: boolean;\r\n}\r\n\r\nexport const useCategoryFilters = () => {\r\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\r\n  const [isFiltering, setIsFiltering] = useState(false);\r\n  \r\n  const searchParams = useSearchParams();\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n\r\n  // Inicializar desde URL al cargar\r\n  useEffect(() => {\r\n    const categoriesFromUrl = searchParams.get('categories');\r\n    if (categoriesFromUrl) {\r\n      const categories = categoriesFromUrl.split(',').filter(Boolean);\r\n      setSelectedCategories(categories);\r\n      setIsFiltering(categories.length > 0);\r\n    }\r\n  }, [searchParams]);\r\n\r\n  // Actualizar URL cuando cambian las categorías\r\n  const updateUrl = useCallback((categories: string[]) => {\r\n    const params = new URLSearchParams(searchParams.toString());\r\n    \r\n    if (categories.length > 0) {\r\n      params.set('categories', categories.join(','));\r\n    } else {\r\n      params.delete('categories');\r\n    }\r\n\r\n    const newUrl = `${pathname}?${params.toString()}`;\r\n    router.replace(newUrl, { scroll: false });\r\n  }, [searchParams, pathname, router]);\r\n\r\n  // Cambiar categorías seleccionadas\r\n  const handleCategoryChange = useCallback((categories: string[]) => {\r\n    setSelectedCategories(categories);\r\n    setIsFiltering(categories.length > 0);\r\n    updateUrl(categories);\r\n  }, [updateUrl]);\r\n\r\n  // Limpiar todos los filtros\r\n  const clearFilters = useCallback(() => {\r\n    setSelectedCategories([]);\r\n    setIsFiltering(false);\r\n    updateUrl([]);\r\n  }, [updateUrl]);\r\n\r\n  // Verificar si una categoría está seleccionada\r\n  const isCategorySelected = useCallback((categorySlug: string) => {\r\n    return selectedCategories.includes(categorySlug);\r\n  }, [selectedCategories]);\r\n\r\n  // Toggle de una categoría específica\r\n  const toggleCategory = useCallback((categorySlug: string) => {\r\n    const isSelected = selectedCategories.includes(categorySlug);\r\n    let newSelection: string[];\r\n\r\n    if (isSelected) {\r\n      newSelection = selectedCategories.filter(slug => slug !== categorySlug);\r\n    } else {\r\n      newSelection = [...selectedCategories, categorySlug];\r\n    }\r\n\r\n    handleCategoryChange(newSelection);\r\n  }, [selectedCategories, handleCategoryChange]);\r\n\r\n  return {\r\n    selectedCategories,\r\n    isFiltering,\r\n    handleCategoryChange,\r\n    clearFilters,\r\n    isCategorySelected,\r\n    toggleCategory,\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}