{"version":3,"names":["default","cov_268thsp1ut","f","s","_default","useSearchToast","DEFAULT_DURATION","MAX_TOASTS","generateToastId","Date","now","Math","random","toString","substr","getErrorToastContent","error","retryCount","b","baseTitle","type","title","description","options","defaultDuration","maxToasts","toasts","setToasts","_react","useState","removeToast","useCallback","id","prev","filter","toast","addToast","newToast","duration","updated","slice","setTimeout","clearToasts","showSuccessToast","query","resultCount","showErrorToast","onRetry","retryable","action","label","onClick","undefined","showWarningToast","message","showInfoToast","showNoResultsToast","showRetryToast","attempt","maxAttempts","showRetrySuccessToast","showRetryFailedToast","attempts","hasToasts","length"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchToast.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchToast - Toast notifications para búsquedas\r\n// ===================================\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport type { SearchError } from './useSearchErrorHandler';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface ToastNotification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  description?: string;\r\n  duration?: number;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\nexport interface UseSearchToastOptions {\r\n  defaultDuration?: number;\r\n  maxToasts?: number;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\n\r\nconst DEFAULT_DURATION = 5000;\r\nconst MAX_TOASTS = 3;\r\n\r\n// ===================================\r\n// UTILIDADES\r\n// ===================================\r\n\r\nfunction generateToastId(): string {\r\n  return `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nfunction getErrorToastContent(error: SearchError, retryCount: number = 0) {\r\n  const baseTitle = 'Error en la búsqueda';\r\n  \r\n  switch (error.type) {\r\n    case 'network':\r\n      return {\r\n        title: 'Sin conexión',\r\n        description: retryCount > 0 \r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Verifica tu conexión a internet',\r\n      };\r\n      \r\n    case 'timeout':\r\n      return {\r\n        title: 'Búsqueda lenta',\r\n        description: retryCount > 0\r\n          ? `Reintentando búsqueda... (${retryCount}/3)`\r\n          : 'La búsqueda tardó demasiado',\r\n      };\r\n      \r\n    case 'server':\r\n      return {\r\n        title: 'Error del servidor',\r\n        description: retryCount > 0\r\n          ? `Reintentando conexión... (${retryCount}/3)`\r\n          : 'Problema temporal del servidor',\r\n      };\r\n      \r\n    case 'validation':\r\n      return {\r\n        title: 'Búsqueda inválida',\r\n        description: 'Verifica los términos de búsqueda',\r\n      };\r\n      \r\n    default:\r\n      return {\r\n        title: baseTitle,\r\n        description: retryCount > 0\r\n          ? `Reintentando... (${retryCount}/3)`\r\n          : 'Error inesperado',\r\n      };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchToast(options: UseSearchToastOptions = {}) {\r\n  const {\r\n    defaultDuration = DEFAULT_DURATION,\r\n    maxToasts = MAX_TOASTS,\r\n  } = options;\r\n\r\n  const [toasts, setToasts] = useState<ToastNotification[]>([]);\r\n\r\n  /**\r\n   * Remueve un toast específico\r\n   */\r\n  const removeToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  }, []);\r\n\r\n  /**\r\n   * Agrega un nuevo toast\r\n   */\r\n  const addToast = useCallback((toast: Omit<ToastNotification, 'id'>): string => {\r\n    const id = generateToastId();\r\n    const newToast: ToastNotification = {\r\n      ...toast,\r\n      id,\r\n      duration: toast.duration ?? defaultDuration,\r\n    };\r\n\r\n    setToasts(prev => {\r\n      const updated = [newToast, ...prev];\r\n      // Limitar número máximo de toasts\r\n      return updated.slice(0, maxToasts);\r\n    });\r\n\r\n    // Auto-remove después del duration\r\n    if (newToast.duration && newToast.duration > 0) {\r\n      setTimeout(() => {\r\n        removeToast(id);\r\n      }, newToast.duration);\r\n    }\r\n\r\n    return id;\r\n  }, [defaultDuration, maxToasts, removeToast]);\r\n\r\n  /**\r\n   * Limpia todos los toasts\r\n   */\r\n  const clearToasts = useCallback(() => {\r\n    setToasts([]);\r\n  }, []);\r\n\r\n  /**\r\n   * Toast de éxito para búsquedas\r\n   */\r\n  const showSuccessToast = useCallback((query: string, resultCount: number) => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '¡Búsqueda exitosa!',\r\n      description: `Se encontraron ${resultCount} productos para \"${query}\"`,\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de error para búsquedas\r\n   */\r\n  const showErrorToast = useCallback((\r\n    error: SearchError, \r\n    retryCount: number = 0,\r\n    onRetry?: () => void\r\n  ) => {\r\n    const { title, description } = getErrorToastContent(error, retryCount);\r\n    \r\n    return addToast({\r\n      type: 'error',\r\n      title,\r\n      description,\r\n      duration: error.retryable ? 4000 : 6000,\r\n      action: error.retryable && onRetry ? {\r\n        label: 'Reintentar',\r\n        onClick: onRetry,\r\n      } : undefined,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast de advertencia para búsquedas\r\n   */\r\n  const showWarningToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast informativo\r\n   */\r\n  const showInfoToast = useCallback((message: string, description?: string) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: message,\r\n      description,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para cuando no hay resultados\r\n   */\r\n  const showNoResultsToast = useCallback((query: string) => {\r\n    return addToast({\r\n      type: 'warning',\r\n      title: 'Sin resultados',\r\n      description: `No se encontraron productos para \"${query}\"`,\r\n      duration: 4000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry en progreso\r\n   */\r\n  const showRetryToast = useCallback((attempt: number, maxAttempts: number) => {\r\n    return addToast({\r\n      type: 'info',\r\n      title: 'Reintentando búsqueda...',\r\n      description: `Intento ${attempt} de ${maxAttempts}`,\r\n      duration: 2000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry exitoso\r\n   */\r\n  const showRetrySuccessToast = useCallback(() => {\r\n    return addToast({\r\n      type: 'success',\r\n      title: '¡Conexión restaurada!',\r\n      description: 'La búsqueda se completó exitosamente',\r\n      duration: 3000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  /**\r\n   * Toast para retry fallido\r\n   */\r\n  const showRetryFailedToast = useCallback((attempts: number) => {\r\n    return addToast({\r\n      type: 'error',\r\n      title: 'Búsqueda fallida',\r\n      description: `No se pudo completar después de ${attempts} intentos`,\r\n      duration: 6000,\r\n    });\r\n  }, [addToast]);\r\n\r\n  return {\r\n    // Estado\r\n    toasts,\r\n    hasToasts: toasts.length > 0,\r\n    \r\n    // Funciones generales\r\n    addToast,\r\n    removeToast,\r\n    clearToasts,\r\n    \r\n    // Funciones específicas para búsquedas\r\n    showSuccessToast,\r\n    showErrorToast,\r\n    showWarningToast,\r\n    showInfoToast,\r\n    showNoResultsToast,\r\n    showRetryToast,\r\n    showRetrySuccessToast,\r\n    showRetryFailedToast,\r\n  };\r\n}\r\n\r\nexport default useSearchToast;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}