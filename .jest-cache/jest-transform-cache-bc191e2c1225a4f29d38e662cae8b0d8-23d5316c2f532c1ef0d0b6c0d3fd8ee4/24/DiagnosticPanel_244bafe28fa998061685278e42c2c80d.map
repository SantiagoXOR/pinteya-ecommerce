{"version":3,"names":["DiagnosticPanel","cov_h3yaaywib","f","results","setResults","s","_react","useState","isRunning","setIsRunning","runDiagnostics","diagnostics","ordersResponse","fetch","ok","b","ordersData","json","push","name","status","message","data","length","details","statusText","text","error","productsResponse","productsData","logisticsResponse","logisticsData","Error","toString","authResponse","authData","user","email","useEffect","getStatusIcon","_jsxruntime","jsx","_lucidereact","CheckCircle","className","XCircle","AlertTriangle","getStatusBadge","_badge","Badge","variant","successCount","filter","r","errorCount","warningCount","jsxs","_card","Card","CardHeader","CardTitle","Code","CardDescription","_button","Button","onClick","disabled","RefreshCw","CardContent","map","result","index","JSON","stringify","Database"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\admin\\DiagnosticPanel.tsx"],"sourcesContent":["// =====================================================\r\n// COMPONENTE: DiagnosticPanel\r\n// Descripción: Panel de diagnóstico para debugging del admin\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertTriangle, \r\n  RefreshCw,\r\n  Database,\r\n  Server,\r\n  Code\r\n} from 'lucide-react';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\ninterface DiagnosticResult {\r\n  name: string;\r\n  status: 'success' | 'error' | 'warning';\r\n  message: string;\r\n  details?: any;\r\n}\r\n\r\n// =====================================================\r\n// COMPONENTE PRINCIPAL\r\n// =====================================================\r\n\r\nexport function DiagnosticPanel() {\r\n  const [results, setResults] = useState<DiagnosticResult[]>([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  // =====================================================\r\n  // FUNCIONES DE DIAGNÓSTICO\r\n  // =====================================================\r\n\r\n  const runDiagnostics = async () => {\r\n    setIsRunning(true);\r\n    const diagnostics: DiagnosticResult[] = [];\r\n\r\n    try {\r\n      // 1. Verificar API de órdenes\r\n      try {\r\n        const ordersResponse = await fetch('/api/admin/orders?limit=1');\r\n        if (ordersResponse.ok) {\r\n          const ordersData = await ordersResponse.json();\r\n          diagnostics.push({\r\n            name: 'API Órdenes',\r\n            status: 'success',\r\n            message: `API responde correctamente. ${ordersData.data?.length || 0} órdenes encontradas`,\r\n            details: ordersData\r\n          });\r\n        } else {\r\n          diagnostics.push({\r\n            name: 'API Órdenes',\r\n            status: 'error',\r\n            message: `Error ${ordersResponse.status}: ${ordersResponse.statusText}`,\r\n            details: await ordersResponse.text()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        diagnostics.push({\r\n          name: 'API Órdenes',\r\n          status: 'error',\r\n          message: `Error de conexión: ${error}`,\r\n          details: error\r\n        });\r\n      }\r\n\r\n      // 2. Verificar API de productos\r\n      try {\r\n        const productsResponse = await fetch('/api/admin/products?limit=1');\r\n        if (productsResponse.ok) {\r\n          const productsData = await productsResponse.json();\r\n          diagnostics.push({\r\n            name: 'API Productos',\r\n            status: 'success',\r\n            message: `API responde correctamente. ${productsData.data?.length || 0} productos encontrados`,\r\n            details: productsData\r\n          });\r\n        } else {\r\n          diagnostics.push({\r\n            name: 'API Productos',\r\n            status: 'error',\r\n            message: `Error ${productsResponse.status}: ${productsResponse.statusText}`,\r\n            details: await productsResponse.text()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        diagnostics.push({\r\n          name: 'API Productos',\r\n          status: 'error',\r\n          message: `Error de conexión: ${error}`,\r\n          details: error\r\n        });\r\n      }\r\n\r\n      // 3. Verificar API de logística\r\n      try {\r\n        const logisticsResponse = await fetch('/api/admin/logistics/dashboard');\r\n        if (logisticsResponse.ok) {\r\n          const logisticsData = await logisticsResponse.json();\r\n          diagnostics.push({\r\n            name: 'API Logística',\r\n            status: 'success',\r\n            message: 'API de logística responde correctamente',\r\n            details: logisticsData\r\n          });\r\n        } else {\r\n          diagnostics.push({\r\n            name: 'API Logística',\r\n            status: 'error',\r\n            message: `Error ${logisticsResponse.status}: ${logisticsResponse.statusText}`,\r\n            details: await logisticsResponse.text()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        diagnostics.push({\r\n          name: 'API Logística',\r\n          status: 'error',\r\n          message: `Error de conexión: ${error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}`,\r\n          details: error\r\n        });\r\n      }\r\n\r\n      // 4. Verificar autenticación\r\n      try {\r\n        const authResponse = await fetch('/api/auth/session');\r\n        if (authResponse.ok) {\r\n          const authData = await authResponse.json();\r\n          diagnostics.push({\r\n            name: 'Autenticación',\r\n            status: authData.user ? 'success' : 'warning',\r\n            message: authData.user ? `Usuario autenticado: ${authData.user.email}` : 'No hay usuario autenticado',\r\n            details: authData\r\n          });\r\n        } else {\r\n          diagnostics.push({\r\n            name: 'Autenticación',\r\n            status: 'error',\r\n            message: `Error verificando autenticación: ${authResponse.status}`,\r\n            details: await authResponse.text()\r\n          });\r\n        }\r\n      } catch (error) {\r\n        diagnostics.push({\r\n          name: 'Autenticación',\r\n          status: 'error',\r\n          message: `Error de conexión: ${error}`,\r\n          details: error\r\n        });\r\n      }\r\n\r\n      // 5. Verificar React Query\r\n      try {\r\n        diagnostics.push({\r\n          name: 'React Query',\r\n          status: 'success',\r\n          message: 'React Query está disponible',\r\n          details: 'Cliente configurado correctamente'\r\n        });\r\n      } catch (error) {\r\n        diagnostics.push({\r\n          name: 'React Query',\r\n          status: 'error',\r\n          message: `Error con React Query: ${error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}`,\r\n          details: error instanceof Error ? error.message : error?.toString() || 'Error desconocido'\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      diagnostics.push({\r\n        name: 'Diagnóstico General',\r\n        status: 'error',\r\n        message: `Error ejecutando diagnósticos: ${error instanceof Error ? error.message : error?.toString() || 'Error desconocido'}`,\r\n        details: error instanceof Error ? error.message : error?.toString() || 'Error desconocido'\r\n      });\r\n    }\r\n\r\n    setResults(diagnostics);\r\n    setIsRunning(false);\r\n  };\r\n\r\n  // Ejecutar diagnósticos al montar\r\n  useEffect(() => {\r\n    runDiagnostics();\r\n  }, []);\r\n\r\n  // =====================================================\r\n  // HELPERS\r\n  // =====================================================\r\n\r\n  const getStatusIcon = (status: DiagnosticResult['status']) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\r\n      case 'error':\r\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: DiagnosticResult['status']) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Éxito</Badge>;\r\n      case 'error':\r\n        return <Badge variant=\"destructive\">Error</Badge>;\r\n      case 'warning':\r\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Advertencia</Badge>;\r\n    }\r\n  };\r\n\r\n  const successCount = results.filter(r => r.status === 'success').length;\r\n  const errorCount = results.filter(r => r.status === 'error').length;\r\n  const warningCount = results.filter(r => r.status === 'warning').length;\r\n\r\n  // =====================================================\r\n  // RENDER\r\n  // =====================================================\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Code className=\"w-5 h-5\" />\r\n                Panel de Diagnóstico Enterprise\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Verificación del estado de APIs y componentes del panel administrativo\r\n              </CardDescription>\r\n            </div>\r\n            <Button \r\n              onClick={runDiagnostics} \r\n              disabled={isRunning}\r\n              variant=\"outline\"\r\n            >\r\n              <RefreshCw className={`w-4 h-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\r\n              {isRunning ? 'Ejecutando...' : 'Ejecutar Diagnósticos'}\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent>\r\n          {/* Resumen */}\r\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{successCount}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Exitosos</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-yellow-600\">{warningCount}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Advertencias</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-red-600\">{errorCount}</div>\r\n              <div className=\"text-sm text-muted-foreground\">Errores</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Resultados */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Resultados del Diagnóstico</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {results.map((result, index) => (\r\n              <div key={index} className=\"flex items-start gap-3 p-4 border rounded-lg\">\r\n                {getStatusIcon(result.status)}\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-2 mb-1\">\r\n                    <h4 className=\"font-medium\">{result.name}</h4>\r\n                    {getStatusBadge(result.status)}\r\n                  </div>\r\n                  <p className=\"text-sm text-muted-foreground mb-2\">{result.message}</p>\r\n                  {result.details && (\r\n                    <details className=\"text-xs\">\r\n                      <summary className=\"cursor-pointer text-blue-600 hover:text-blue-800\">\r\n                        Ver detalles\r\n                      </summary>\r\n                      <pre className=\"mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto\">\r\n                        {JSON.stringify(result.details, null, 2)}\r\n                      </pre>\r\n                    </details>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {results.length === 0 && !isRunning && (\r\n              <div className=\"text-center py-8 text-muted-foreground\">\r\n                <Database className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\r\n                <p>No hay resultados de diagnóstico disponibles</p>\r\n                <Button onClick={runDiagnostics} className=\"mt-4\">\r\n                  Ejecutar Diagnósticos\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {isRunning && (\r\n              <div className=\"text-center py-8\">\r\n                <RefreshCw className=\"w-8 h-8 mx-auto mb-4 animate-spin text-blue-500\" />\r\n                <p className=\"text-muted-foreground\">Ejecutando diagnósticos...</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}