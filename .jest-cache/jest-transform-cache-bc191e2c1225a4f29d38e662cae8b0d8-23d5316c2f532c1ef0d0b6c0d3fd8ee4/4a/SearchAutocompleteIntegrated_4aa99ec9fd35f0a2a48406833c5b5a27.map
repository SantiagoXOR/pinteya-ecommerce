{"version":3,"names":["SearchAutocompleteIntegrated","cov_1mu1j4fv3x","f","s","default","_default","_react","memo","forwardRef","debounceMs","b","maxSuggestions","searchLimit","saveRecentSearches","showTrendingSearches","showRecentSearches","onSearchExecuted","onSuggestionSelected","onSearch","onSuggestionSelect","props","ref","isClient","setIsClient","useState","isContextReady","setIsContextReady","searchHookResult","_useSearchOptimized","useSearchOptimized","query","results","suggestion","useEffect","timer","setTimeout","clearTimeout","trendingHookResult","_useTrendingSearches","useTrendingSearches","limit","enabled","recentHookResult","_useRecentSearches","useRecentSearches","maxSearches","_shop","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","defaultValues","suggestions","isLoading","error","searchWithDebounce","executeSearch","selectSuggestion","clearSearch","trendingSearches","recentSearches","getRecentSearches","searchSuggestions","useMemo","console","log","trim","hasQuery","Array","isArray","length","defaultSuggestions","recentSuggestions","map","search","index","id","type","title","href","encodeURIComponent","push","trendingSuggestions","trending","badge","count","undefined","slice","finalSuggestions","process","env","NODE_ENV","suggestionsDetailed","handleSearch","handleSuggestionSelect","handleClear","_jsxruntime","jsx","_searchautocomplete","SearchAutocomplete","onClear","displayName"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\ui\\SearchAutocompleteIntegrated.tsx"],"sourcesContent":["// ===================================\r\n// COMPONENTE: SearchAutocompleteIntegrated - Integraci칩n completa con useSearch\r\n// ===================================\r\n\r\nimport React, { useCallback, useState, useEffect } from 'react';\r\nimport { SearchAutocomplete, SearchAutocompleteProps, SearchSuggestion } from './search-autocomplete';\r\nimport { useSearchOptimized } from '@/hooks/useSearchOptimized';\r\nimport { useTrendingSearches } from '@/hooks/useTrendingSearches';\r\nimport { useRecentSearches } from '@/hooks/useRecentSearches';\r\nimport { SEARCH_CONSTANTS } from '@/constants/shop';\r\n\r\nexport interface SearchAutocompleteIntegratedProps \r\n  extends Omit<SearchAutocompleteProps, 'query' | 'suggestions' | 'isLoading' | 'error' | 'searchWithDebounce' | 'onClear'> {\r\n  // Configuraci칩n del hook useSearch\r\n  debounceMs?: number;\r\n  maxSuggestions?: number;\r\n  searchLimit?: number;\r\n  saveRecentSearches?: boolean;\r\n  \r\n  // Callbacks adicionales\r\n  onSearchExecuted?: (query: string, results: any[]) => void;\r\n  onSuggestionSelected?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n/**\r\n * SearchAutocompleteIntegrated - Componente que integra SearchAutocomplete con useSearch\r\n * \r\n * Este componente proporciona una experiencia de b칰squeda completa sin necesidad\r\n * de manejar manualmente el estado del hook useSearch.\r\n */\r\nexport const SearchAutocompleteIntegrated = React.memo(React.forwardRef<HTMLInputElement, SearchAutocompleteIntegratedProps>(\r\n  ({\r\n    debounceMs = 100,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    showTrendingSearches = true,\r\n    showRecentSearches = true,\r\n    onSearchExecuted,\r\n    onSuggestionSelected,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n    ...props\r\n  }, ref) => {\r\n    \r\n    // Estado de hidrataci칩n del cliente y contexto\r\n    const [isClient, setIsClient] = useState(false);\r\n    const [isContextReady, setIsContextReady] = useState(false);\r\n    \r\n    // Hook de b칰squeda optimizado con TanStack Query - SIEMPRE llamado\r\n    const searchHookResult = useSearchOptimized({\r\n      debounceMs,\r\n      maxSuggestions,\r\n      searchLimit,\r\n      saveRecentSearches,\r\n      onSearch: (query, results) => {\r\n        onSearchExecuted?.(query, results);\r\n        onSearch?.(query);\r\n      },\r\n      onSuggestionSelect: (suggestion) => {\r\n        onSuggestionSelected?.(suggestion);\r\n        onSuggestionSelect?.(suggestion);\r\n      }\r\n    });\r\n\r\n    // Verificar que estamos en el cliente y el contexto est치 listo\r\n    useEffect(() => {\r\n      setIsClient(true);\r\n      // Peque침o delay para asegurar que el contexto de React Query est칠 completamente inicializado\r\n      const timer = setTimeout(() => {\r\n        setIsContextReady(true);\r\n      }, 100);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    // Hooks adicionales para trending y recent searches - SIEMPRE llamados\r\n    const trendingHookResult = useTrendingSearches({\r\n      limit: 4,\r\n      enabled: showTrendingSearches && isClient && isContextReady\r\n    });\r\n\r\n    const recentHookResult = useRecentSearches({\r\n      maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\r\n      enablePersistence: showRecentSearches && isClient && isContextReady,\r\n      expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS\r\n    });\r\n\r\n    // Valores por defecto para SSR\r\n    const defaultValues = {\r\n      query: '',\r\n      results: [],\r\n      suggestions: [],\r\n      isLoading: false,\r\n      error: null,\r\n      searchWithDebounce: () => {},\r\n      executeSearch: () => {},\r\n      selectSuggestion: () => {},\r\n      clearSearch: () => {},\r\n      trendingSearches: [],\r\n      recentSearches: [],\r\n      getRecentSearches: () => []\r\n    };\r\n\r\n    // Usar valores del hook solo si estamos en el cliente\r\n    const {\r\n      query,\r\n      results,\r\n      suggestions: searchSuggestions,\r\n      isLoading,\r\n      error,\r\n      searchWithDebounce,\r\n      executeSearch,\r\n      selectSuggestion,\r\n      clearSearch,\r\n    } = isClient ? searchHookResult : defaultValues;\r\n\r\n    const { trendingSearches } = isClient ? trendingHookResult : { trendingSearches: [] };\r\n\r\n    const {\r\n      recentSearches,\r\n      getRecentSearches\r\n    } = isClient ? recentHookResult : { recentSearches: [], getRecentSearches: () => [] };\r\n\r\n    // Generar sugerencias combinadas\r\n    const suggestions = React.useMemo(() => {\r\n      if (!isClient) return [];\r\n      \r\n      console.log('游댌 SearchAutocompleteIntegrated - Generando sugerencias:', {\r\n        query: query?.trim(),\r\n        hasQuery: !!query?.trim(),\r\n        searchSuggestions: (searchSuggestions && Array.isArray(searchSuggestions)) ? searchSuggestions.length : 0,\r\n        trendingSearches: (trendingSearches && Array.isArray(trendingSearches)) ? trendingSearches.length : 0,\r\n        recentSearches: (recentSearches && Array.isArray(recentSearches)) ? recentSearches.length : 0,\r\n        showTrendingSearches,\r\n        showRecentSearches\r\n      });\r\n\r\n      // Si hay query, usar las sugerencias del hook optimizado\r\n      if (query?.trim()) {\r\n        console.log('游댌 Usando searchSuggestions porque hay query:', searchSuggestions);\r\n        return searchSuggestions || [];\r\n      }\r\n\r\n      // Si no hay query, mostrar trending y recent searches como el componente original\r\n      const defaultSuggestions: SearchSuggestion[] = [];\r\n\r\n      console.log('游댌 Generando sugerencias por defecto (sin query)');\r\n\r\n      // Agregar b칰squedas recientes\r\n      if (showRecentSearches && recentSearches && Array.isArray(recentSearches) && recentSearches.length > 0) {\r\n        const recentSuggestions = getRecentSearches(3).map((search, index) => ({\r\n          id: `recent-${index}`,\r\n          type: 'recent' as const,\r\n          title: search,\r\n          href: `/search?q=${encodeURIComponent(search)}`,\r\n        }));\r\n        console.log('游댌 Agregando b칰squedas recientes:', recentSuggestions);\r\n        defaultSuggestions.push(...recentSuggestions);\r\n      }\r\n\r\n      // Agregar b칰squedas trending reales\r\n      if (showTrendingSearches && trendingSearches && Array.isArray(trendingSearches) && trendingSearches.length > 0) {\r\n        const trendingSuggestions = trendingSearches.map(trending => ({\r\n          id: trending.id,\r\n          type: 'trending' as const,\r\n          title: trending.query,\r\n          href: trending.href,\r\n          badge: trending.count ? `${trending.count}` : undefined\r\n        }));\r\n        console.log('游댌 Agregando b칰squedas trending:', trendingSuggestions);\r\n        defaultSuggestions.push(...trendingSuggestions.slice(0, 4));\r\n      }\r\n\r\n      const finalSuggestions = defaultSuggestions.slice(0, maxSuggestions);\r\n      console.log('游댌 Sugerencias finales generadas:', finalSuggestions);\r\n      \r\n      return finalSuggestions;\r\n    }, [isClient, query, searchSuggestions, showRecentSearches, showTrendingSearches, recentSearches, trendingSearches, getRecentSearches, maxSuggestions]);\r\n\r\n    // Debugging del estado del hook\r\n    if (isClient && process.env.NODE_ENV === 'development') {\r\n      console.log('游댌 SearchAutocompleteIntegrated: Hook state:', {\r\n        query,\r\n        suggestions: suggestions?.length || 0,\r\n        suggestionsDetailed: suggestions?.map(s => ({ type: s.type, title: s.title })) || [],\r\n        isLoading,\r\n        error,\r\n        results: results?.length || 0,\r\n        trendingSearches: trendingSearches?.length || 0,\r\n        recentSearches: recentSearches?.length || 0\r\n      });\r\n    }\r\n\r\n    // Manejar env칤o de b칰squeda\r\n    const handleSearch = (query: string) => {\r\n      if (isClient) {\r\n        executeSearch(query);\r\n      }\r\n    };\r\n\r\n    // Manejar selecci칩n de sugerencia\r\n    const handleSuggestionSelect = (suggestion: SearchSuggestion) => {\r\n      if (isClient) {\r\n        selectSuggestion(suggestion);\r\n      }\r\n    };\r\n\r\n    // Manejar limpieza\r\n    const handleClear = () => {\r\n      if (isClient) {\r\n        clearSearch();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <SearchAutocomplete\r\n        ref={ref}\r\n        {...props}\r\n        // Estado del hook optimizado\r\n        query={query}\r\n        suggestions={suggestions}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        showTrendingSearches={showTrendingSearches}\r\n        showRecentSearches={showRecentSearches}\r\n        // Callbacks integrados\r\n        onSearch={handleSearch}\r\n        onSuggestionSelect={handleSuggestionSelect}\r\n        searchWithDebounce={searchWithDebounce}\r\n        onClear={handleClear}\r\n      />\r\n    );\r\n  }\r\n));\r\n\r\nSearchAutocompleteIntegrated.displayName = 'SearchAutocompleteIntegrated';\r\n\r\nexport default SearchAutocompleteIntegrated;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}