0a259af279c8cec3ca272c44ed3d78f7
'use client';
"use strict";

/* istanbul ignore next */
function cov_2rm5l7d1nt() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProactiveMonitoring.ts";
  var hash = "c35a22a1b02afc5dadff6fe38ea421c23b568fda";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProactiveMonitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "7": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 78
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "10": {
        start: {
          line: 27,
          column: 44
        },
        end: {
          line: 27,
          column: 71
        }
      },
      "11": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 56
        }
      },
      "12": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 29,
          column: 106
        }
      },
      "13": {
        start: {
          line: 30,
          column: 46
        },
        end: {
          line: 30,
          column: 70
        }
      },
      "14": {
        start: {
          line: 31,
          column: 34
        },
        end: {
          line: 31,
          column: 61
        }
      },
      "15": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "16": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "18": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "20": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "21": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 44,
          column: 17
        }
      },
      "22": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 27
        }
      },
      "23": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 43
        }
      },
      "24": {
        start: {
          line: 46,
          column: 19
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "25": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "26": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "27": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "28": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "29": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 55,
          column: 86
        }
      },
      "30": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 37
        }
      },
      "31": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 51
        }
      },
      "32": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 88
        }
      },
      "33": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 39
        }
      },
      "34": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "35": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 64,
          column: 101
        }
      },
      "36": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 35
        }
      },
      "37": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 68,
          column: 43
        }
      },
      "38": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 30
        }
      },
      "39": {
        start: {
          line: 73,
          column: 28
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "40": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "41": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 61
        }
      },
      "42": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 34
        }
      },
      "43": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 27
        }
      },
      "44": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 118
        }
      },
      "45": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 98
        }
      },
      "46": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 35
        }
      },
      "47": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "48": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "49": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "50": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 60
        }
      },
      "51": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 35
        }
      },
      "52": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 27
        }
      },
      "53": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 118
        }
      },
      "54": {
        start: {
          line: 94,
          column: 33
        },
        end: {
          line: 94,
          column: 97
        }
      },
      "55": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 35
        }
      },
      "56": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "57": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "58": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "59": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 72
        }
      },
      "60": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 33
        }
      },
      "61": {
        start: {
          line: 107,
          column: 33
        },
        end: {
          line: 107,
          column: 94
        }
      },
      "62": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 35
        }
      },
      "63": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "64": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "65": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "66": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 77
        }
      },
      "67": {
        start: {
          line: 117,
          column: 34
        },
        end: {
          line: 117,
          column: 86
        }
      },
      "68": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 37
        }
      },
      "69": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "70": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 27
        }
      },
      "71": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 43
        }
      },
      "72": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 95
        }
      },
      "73": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 35
        }
      },
      "74": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 129,
          column: 43
        }
      },
      "75": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 148,
          column: 10
        }
      },
      "76": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "77": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 78
        }
      },
      "78": {
        start: {
          line: 135,
          column: 36
        },
        end: {
          line: 135,
          column: 95
        }
      },
      "79": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 46
        }
      },
      "80": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 27
        }
      },
      "81": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 43
        }
      },
      "82": {
        start: {
          line: 142,
          column: 33
        },
        end: {
          line: 142,
          column: 99
        }
      },
      "83": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 35
        }
      },
      "84": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 43
        }
      },
      "85": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "86": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "87": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 83
        }
      },
      "88": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 152,
          column: 95
        }
      },
      "89": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 46
        }
      },
      "90": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 27
        }
      },
      "91": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 157,
          column: 43
        }
      },
      "92": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 159,
          column: 102
        }
      },
      "93": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 35
        }
      },
      "94": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 43
        }
      },
      "95": {
        start: {
          line: 166,
          column: 25
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "96": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "97": {
        start: {
          line: 168,
          column: 29
        },
        end: {
          line: 168,
          column: 96
        }
      },
      "98": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 31
        }
      },
      "99": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 27
        }
      },
      "100": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 172,
          column: 95
        }
      },
      "101": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 35
        }
      },
      "102": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 43
        }
      },
      "103": {
        start: {
          line: 179,
          column: 28
        },
        end: {
          line: 186,
          column: 6
        }
      },
      "104": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "105": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 29
        }
      },
      "106": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 41
        }
      },
      "107": {
        start: {
          line: 187,
          column: 27
        },
        end: {
          line: 203,
          column: 6
        }
      },
      "108": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 40
        }
      },
      "109": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "110": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 40
        }
      },
      "111": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 41
        }
      },
      "112": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 38
        }
      },
      "113": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 38
        }
      },
      "114": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 39
        }
      },
      "115": {
        start: {
          line: 204,
          column: 26
        },
        end: {
          line: 220,
          column: 6
        }
      },
      "116": {
        start: {
          line: 205,
          column: 23
        },
        end: {
          line: 205,
          column: 40
        }
      },
      "117": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "118": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 27
        }
      },
      "119": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 28
        }
      },
      "120": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 28
        }
      },
      "121": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 27
        }
      },
      "122": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 27
        }
      },
      "123": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 241,
          column: 6
        }
      },
      "124": {
        start: {
          line: 244,
          column: 32
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "125": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "126": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 72
        }
      },
      "127": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 250,
          column: 43
        }
      },
      "128": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 255,
          column: 6
        }
      },
      "129": {
        start: {
          line: 258,
          column: 32
        },
        end: {
          line: 258,
          column: 58
        }
      },
      "130": {
        start: {
          line: 259,
          column: 34
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "131": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 277,
          column: 11
        }
      },
      "132": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "133": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "134": {
        start: {
          line: 263,
          column: 30
        },
        end: {
          line: 263,
          column: 97
        }
      },
      "135": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 46
        }
      },
      "136": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 268,
          column: 47
        }
      },
      "137": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 34
        }
      },
      "138": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 21
        }
      },
      "139": {
        start: {
          line: 275,
          column: 25
        },
        end: {
          line: 275,
          column: 55
        }
      },
      "140": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 43
        }
      },
      "141": {
        start: {
          line: 276,
          column: 19
        },
        end: {
          line: 276,
          column: 42
        }
      },
      "142": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 281,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "useProactiveMonitoring",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 31
          }
        },
        loc: {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 242,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 27
          }
        },
        loc: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 38,
            column: 26
          },
          end: {
            line: 38,
            column: 27
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 38
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 42,
            column: 38
          }
        },
        loc: {
          start: {
            line: 42,
            column: 41
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 42
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 16
          }
        },
        loc: {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 42
          }
        },
        line: 46
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 50,
            column: 29
          }
        },
        loc: {
          start: {
            line: 50,
            column: 38
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 50
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 73,
            column: 52
          },
          end: {
            line: 73,
            column: 53
          }
        },
        loc: {
          start: {
            line: 73,
            column: 56
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 73
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 87,
            column: 51
          },
          end: {
            line: 87,
            column: 52
          }
        },
        loc: {
          start: {
            line: 87,
            column: 55
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 87
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 101,
            column: 54
          },
          end: {
            line: 101,
            column: 55
          }
        },
        loc: {
          start: {
            line: 101,
            column: 78
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 101
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 114,
            column: 49
          },
          end: {
            line: 114,
            column: 50
          }
        },
        loc: {
          start: {
            line: 114,
            column: 62
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 114
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 132,
            column: 52
          },
          end: {
            line: 132,
            column: 53
          }
        },
        loc: {
          start: {
            line: 132,
            column: 63
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 132
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 149,
            column: 56
          }
        },
        loc: {
          start: {
            line: 149,
            column: 68
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 149
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 166,
            column: 49
          },
          end: {
            line: 166,
            column: 50
          }
        },
        loc: {
          start: {
            line: 166,
            column: 59
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 166
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 179,
            column: 52
          },
          end: {
            line: 179,
            column: 53
          }
        },
        loc: {
          start: {
            line: 179,
            column: 56
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 179
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 187,
            column: 51
          },
          end: {
            line: 187,
            column: 52
          }
        },
        loc: {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 187
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 204,
            column: 50
          },
          end: {
            line: 204,
            column: 51
          }
        },
        loc: {
          start: {
            line: 204,
            column: 54
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 204
      },
      "20": {
        name: "useErrorReporting",
        decl: {
          start: {
            line: 243,
            column: 9
          },
          end: {
            line: 243,
            column: 26
          }
        },
        loc: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 243
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 244,
            column: 56
          },
          end: {
            line: 244,
            column: 57
          }
        },
        loc: {
          start: {
            line: 244,
            column: 80
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 244
      },
      "22": {
        name: "useSystemHealth",
        decl: {
          start: {
            line: 257,
            column: 9
          },
          end: {
            line: 257,
            column: 24
          }
        },
        loc: {
          start: {
            line: 257,
            column: 27
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 257
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 260,
            column: 26
          },
          end: {
            line: 260,
            column: 27
          }
        },
        loc: {
          start: {
            line: 260,
            column: 30
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 260
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 28
          }
        },
        loc: {
          start: {
            line: 261,
            column: 37
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 261
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 276,
            column: 15
          },
          end: {
            line: 276,
            column: 16
          }
        },
        loc: {
          start: {
            line: 276,
            column: 19
          },
          end: {
            line: 276,
            column: 42
          }
        },
        line: 276
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 33
          },
          end: {
            line: 64,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 56
          },
          end: {
            line: 64,
            column: 67
          }
        }, {
          start: {
            line: 64,
            column: 70
          },
          end: {
            line: 64,
            column: 101
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 80,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 56
          },
          end: {
            line: 80,
            column: 67
          }
        }, {
          start: {
            line: 80,
            column: 70
          },
          end: {
            line: 80,
            column: 98
          }
        }],
        line: 80
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 94,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 56
          },
          end: {
            line: 94,
            column: 67
          }
        }, {
          start: {
            line: 94,
            column: 70
          },
          end: {
            line: 94,
            column: 97
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 107,
            column: 33
          },
          end: {
            line: 107,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 56
          },
          end: {
            line: 107,
            column: 67
          }
        }, {
          start: {
            line: 107,
            column: 70
          },
          end: {
            line: 107,
            column: 94
          }
        }],
        line: 107
      },
      "5": {
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 125,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 56
          },
          end: {
            line: 125,
            column: 67
          }
        }, {
          start: {
            line: 125,
            column: 70
          },
          end: {
            line: 125,
            column: 95
          }
        }],
        line: 125
      },
      "6": {
        loc: {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 142,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 56
          },
          end: {
            line: 142,
            column: 67
          }
        }, {
          start: {
            line: 142,
            column: 70
          },
          end: {
            line: 142,
            column: 99
          }
        }],
        line: 142
      },
      "7": {
        loc: {
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 159,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 56
          },
          end: {
            line: 159,
            column: 67
          }
        }, {
          start: {
            line: 159,
            column: 70
          },
          end: {
            line: 159,
            column: 102
          }
        }],
        line: 159
      },
      "8": {
        loc: {
          start: {
            line: 172,
            column: 33
          },
          end: {
            line: 172,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 56
          },
          end: {
            line: 172,
            column: 67
          }
        }, {
          start: {
            line: 172,
            column: 70
          },
          end: {
            line: 172,
            column: 95
          }
        }],
        line: 172
      },
      "9": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 191,
            column: 40
          }
        }, {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 193,
            column: 41
          }
        }, {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 195,
            column: 38
          }
        }, {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 197,
            column: 38
          }
        }, {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 199,
            column: 39
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 208,
            column: 27
          }
        }, {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 210,
            column: 28
          }
        }, {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 212,
            column: 28
          }
        }, {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 214,
            column: 27
          }
        }, {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 216,
            column: 27
          }
        }],
        line: 206
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0, 0],
      "11": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProactiveMonitoring.ts"],
      sourcesContent: ["'use client'\r\n\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport {\r\n  proactiveMonitoring,\r\n  reportError,\r\n  SystemHealth,\r\n  ErrorPattern,\r\n  MonitoringConfig\r\n} from '../lib/monitoring/proactive-monitoring'\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger'\r\n\r\nexport interface MonitoringStats {\r\n  totalErrors: number\r\n  activePatterns: number\r\n  recentAlerts: number\r\n  systemHealth: SystemHealth\r\n}\r\n\r\nexport interface UseProactiveMonitoringReturn {\r\n  // Estado\r\n  isMonitoring: boolean\r\n  stats: MonitoringStats | null\r\n  config: MonitoringConfig\r\n  errorPatterns: ErrorPattern[]\r\n  loading: boolean\r\n  error: string | null\r\n\r\n  // Acciones\r\n  startMonitoring: () => void\r\n  stopMonitoring: () => void\r\n  reportError: (error: Error | string, context?: Record<string, any>) => Promise<void>\r\n  updateConfig: (newConfig: Partial<MonitoringConfig>) => void\r\n  addErrorPattern: (pattern: ErrorPattern) => void\r\n  removeErrorPattern: (patternId: string) => void\r\n  refreshStats: () => Promise<void>\r\n  \r\n  // Utilidades\r\n  getHealthStatus: () => 'healthy' | 'warning' | 'critical' | 'down' | 'unknown'\r\n  getHealthColor: () => string\r\n  getHealthIcon: () => string\r\n}\r\n\r\n/**\r\n * Hook para gestionar el sistema de monitoreo proactivo\r\n */\r\nexport function useProactiveMonitoring(): UseProactiveMonitoringReturn {\r\n  const [isMonitoring, setIsMonitoring] = useState(false)\r\n  const [stats, setStats] = useState<MonitoringStats | null>(null)\r\n  const [config, setConfig] = useState<MonitoringConfig>(proactiveMonitoring.getConfig())\r\n  const [errorPatterns, setErrorPatterns] = useState<ErrorPattern[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // Cargar datos iniciales\r\n  useEffect(() => {\r\n    loadInitialData()\r\n  }, [])\r\n\r\n  // Actualizar estad\xEDsticas peri\xF3dicamente\r\n  useEffect(() => {\r\n    if (!isMonitoring) {return}\r\n\r\n    const interval = setInterval(() => {\r\n      refreshStats()\r\n    }, 30000) // Cada 30 segundos\r\n\r\n    return () => clearInterval(interval)\r\n  }, [isMonitoring])\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      // Cargar configuraci\xF3n\r\n      const currentConfig = proactiveMonitoring.getConfig()\r\n      setConfig(currentConfig)\r\n      setIsMonitoring(currentConfig.enabled)\r\n\r\n      // Cargar patrones de error\r\n      const patterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(patterns)\r\n\r\n      // Cargar estad\xEDsticas\r\n      await refreshStats()\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error loading monitoring data'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to load monitoring data', { error: err }, LogCategory.SYSTEM)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const startMonitoring = useCallback(() => {\r\n    try {\r\n      proactiveMonitoring.start()\r\n      setIsMonitoring(true)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring started via hook', {}, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to start monitoring'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to start monitoring', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const stopMonitoring = useCallback(() => {\r\n    try {\r\n      proactiveMonitoring.stop()\r\n      setIsMonitoring(false)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring stopped via hook', {}, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to stop monitoring'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to stop monitoring', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const handleReportError = useCallback(async (error: Error | string, context?: Record<string, any>) => {\r\n    try {\r\n      await reportError(error, context)\r\n      // Actualizar estad\xEDsticas despu\xE9s de reportar error\r\n      await refreshStats()\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to report error'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to report error', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const updateConfig = useCallback((newConfig: Partial<MonitoringConfig>) => {\r\n    try {\r\n      proactiveMonitoring.updateConfig(newConfig)\r\n      const updatedConfig = proactiveMonitoring.getConfig()\r\n      setConfig(updatedConfig)\r\n      setIsMonitoring(updatedConfig.enabled)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Monitoring config updated', { newConfig }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update config'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to update config', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const addErrorPattern = useCallback((pattern: ErrorPattern) => {\r\n    try {\r\n      proactiveMonitoring.addErrorPattern(pattern)\r\n      const updatedPatterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(updatedPatterns)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Error pattern added', { patternId: pattern.id }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to add error pattern'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to add error pattern', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const removeErrorPattern = useCallback((patternId: string) => {\r\n    try {\r\n      proactiveMonitoring.removeErrorPattern(patternId)\r\n      const updatedPatterns = proactiveMonitoring.getErrorPatterns()\r\n      setErrorPatterns(updatedPatterns)\r\n      setError(null)\r\n      logger.info(LogLevel.INFO, 'Error pattern removed', { patternId }, LogCategory.SYSTEM)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove error pattern'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to remove error pattern', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const refreshStats = useCallback(async () => {\r\n    try {\r\n      const newStats = await proactiveMonitoring.getMonitoringStats()\r\n      setStats(newStats)\r\n      setError(null)\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to refresh stats'\r\n      setError(errorMessage)\r\n      logger.error(LogLevel.ERROR, 'Failed to refresh stats', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  const getHealthStatus = useCallback((): 'healthy' | 'warning' | 'critical' | 'down' | 'unknown' => {\r\n    if (!stats?.systemHealth) {return 'unknown'}\r\n    return stats.systemHealth.status\r\n  }, [stats])\r\n\r\n  const getHealthColor = useCallback((): string => {\r\n    const status = getHealthStatus()\r\n    switch (status) {\r\n      case 'healthy':\r\n        return 'text-green-500'\r\n      case 'warning':\r\n        return 'text-yellow-500'\r\n      case 'critical':\r\n        return 'text-red-500'\r\n      case 'down':\r\n        return 'text-red-700'\r\n      default:\r\n        return 'text-gray-500'\r\n    }\r\n  }, [getHealthStatus])\r\n\r\n  const getHealthIcon = useCallback((): string => {\r\n    const status = getHealthStatus()\r\n    switch (status) {\r\n      case 'healthy':\r\n        return '\u2705'\r\n      case 'warning':\r\n        return '\u26A0\uFE0F'\r\n      case 'critical':\r\n        return '\uD83D\uDEA8'\r\n      case 'down':\r\n        return '\u274C'\r\n      default:\r\n        return '\u2753'\r\n    }\r\n  }, [getHealthStatus])\r\n\r\n  return {\r\n    // Estado\r\n    isMonitoring,\r\n    stats,\r\n    config,\r\n    errorPatterns,\r\n    loading,\r\n    error,\r\n\r\n    // Acciones\r\n    startMonitoring,\r\n    stopMonitoring,\r\n    reportError: handleReportError,\r\n    updateConfig,\r\n    addErrorPattern,\r\n    removeErrorPattern,\r\n    refreshStats,\r\n\r\n    // Utilidades\r\n    getHealthStatus,\r\n    getHealthColor,\r\n    getHealthIcon\r\n  }\r\n}\r\n\r\n/**\r\n * Hook simplificado para solo reportar errores\r\n */\r\nexport function useErrorReporting() {\r\n  const reportErrorCallback = useCallback(async (error: Error | string, context?: Record<string, any>) => {\r\n    try {\r\n      await reportError(error, context)\r\n    } catch (err) {\r\n      logger.error(LogLevel.ERROR, 'Failed to report error', { error: err }, LogCategory.SYSTEM)\r\n    }\r\n  }, [])\r\n\r\n  return { reportError: reportErrorCallback }\r\n}\r\n\r\n/**\r\n * Hook para monitorear la salud del sistema en tiempo real\r\n */\r\nexport function useSystemHealth() {\r\n  const [health, setHealth] = useState<SystemHealth | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const loadHealth = async () => {\r\n      try {\r\n        const stats = await proactiveMonitoring.getMonitoringStats()\r\n        setHealth(stats.systemHealth)\r\n      } catch (err) {\r\n        logger.error(LogLevel.ERROR, 'Failed to load system health', { error: err }, LogCategory.SYSTEM)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadHealth()\r\n\r\n    // Actualizar cada minuto\r\n    const interval = setInterval(loadHealth, 60000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return { health, loading }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["useErrorReporting", "useProactiveMonitoring", "useSystemHealth", "isMonitoring", "setIsMonitoring", "useState", "stats", "setStats", "config", "setConfig", "proactiveMonitoring", "getConfig", "errorPatterns", "setErrorPatterns", "loading", "setLoading", "error", "setError", "useEffect", "loadInitialData", "interval", "setInterval", "refreshStats", "clearInterval", "currentConfig", "enabled", "patterns", "getErrorPatterns", "err", "errorMessage", "Error", "message", "logger", "LogLevel", "ERROR", "LogCategory", "SYSTEM", "startMonitoring", "useCallback", "start", "info", "INFO", "stopMonitoring", "stop", "handleReportError", "context", "reportError", "updateConfig", "newConfig", "updatedConfig", "addErrorPattern", "pattern", "updatedPatterns", "patternId", "id", "removeErrorPattern", "newStats", "getMonitoringStats", "getHealthStatus", "systemHealth", "status", "getHealthColor", "getHealthIcon", "reportErrorCallback", "health", "setHealth", "loadHealth"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c35a22a1b02afc5dadff6fe38ea421c23b568fda"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2rm5l7d1nt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2rm5l7d1nt();
cov_2rm5l7d1nt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2rm5l7d1nt().f[0]++;
  cov_2rm5l7d1nt().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2rm5l7d1nt().s[3]++;
_export(exports, {
  get useErrorReporting() {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[1]++;
    cov_2rm5l7d1nt().s[4]++;
    return useErrorReporting;
  },
  get useProactiveMonitoring() {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[2]++;
    cov_2rm5l7d1nt().s[5]++;
    return useProactiveMonitoring;
  },
  get useSystemHealth() {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[3]++;
    cov_2rm5l7d1nt().s[6]++;
    return useSystemHealth;
  }
});
const _react =
/* istanbul ignore next */
(cov_2rm5l7d1nt().s[7]++, require("react"));
const _proactivemonitoring =
/* istanbul ignore next */
(cov_2rm5l7d1nt().s[8]++, require("../lib/monitoring/proactive-monitoring"));
const _logger =
/* istanbul ignore next */
(cov_2rm5l7d1nt().s[9]++, require("../lib/enterprise/logger"));
function useProactiveMonitoring() {
  /* istanbul ignore next */
  cov_2rm5l7d1nt().f[4]++;
  const [isMonitoring, setIsMonitoring] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[10]++, (0, _react.useState)(false));
  const [stats, setStats] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[11]++, (0, _react.useState)(null));
  const [config, setConfig] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[12]++, (0, _react.useState)(_proactivemonitoring.proactiveMonitoring.getConfig()));
  const [errorPatterns, setErrorPatterns] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[13]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[14]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[15]++, (0, _react.useState)(null));
  // Cargar datos iniciales
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[16]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[5]++;
    cov_2rm5l7d1nt().s[17]++;
    loadInitialData();
  }, []);
  // Actualizar estadísticas periódicamente
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[18]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[6]++;
    cov_2rm5l7d1nt().s[19]++;
    if (!isMonitoring) {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().b[0][0]++;
      cov_2rm5l7d1nt().s[20]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2rm5l7d1nt().b[0][1]++;
    }
    const interval =
    /* istanbul ignore next */
    (cov_2rm5l7d1nt().s[21]++, setInterval(() => {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().f[7]++;
      cov_2rm5l7d1nt().s[22]++;
      refreshStats();
    }, 30000)) // Cada 30 segundos
    ;
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[23]++;
    return () => {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().f[8]++;
      cov_2rm5l7d1nt().s[24]++;
      return clearInterval(interval);
    };
  }, [isMonitoring]);
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[25]++;
  const loadInitialData = async () => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[9]++;
    cov_2rm5l7d1nt().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[27]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[28]++;
      setError(null);
      // Cargar configuración
      const currentConfig =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[29]++, _proactivemonitoring.proactiveMonitoring.getConfig());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[30]++;
      setConfig(currentConfig);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[31]++;
      setIsMonitoring(currentConfig.enabled);
      // Cargar patrones de error
      const patterns =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[32]++, _proactivemonitoring.proactiveMonitoring.getErrorPatterns());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[33]++;
      setErrorPatterns(patterns);
      // Cargar estadísticas
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[34]++;
      await refreshStats();
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[35]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[1][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[1][1]++, 'Error loading monitoring data'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[36]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[37]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to load monitoring data', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    } finally {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[38]++;
      setLoading(false);
    }
  };
  const startMonitoring =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[39]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[10]++;
    cov_2rm5l7d1nt().s[40]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[41]++;
      _proactivemonitoring.proactiveMonitoring.start();
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[42]++;
      setIsMonitoring(true);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[43]++;
      setError(null);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[44]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Monitoring started via hook', {}, _logger.LogCategory.SYSTEM);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[45]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[2][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[2][1]++, 'Failed to start monitoring'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[46]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[47]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to start monitoring', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const stopMonitoring =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[48]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[11]++;
    cov_2rm5l7d1nt().s[49]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[50]++;
      _proactivemonitoring.proactiveMonitoring.stop();
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[51]++;
      setIsMonitoring(false);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[52]++;
      setError(null);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[53]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Monitoring stopped via hook', {}, _logger.LogCategory.SYSTEM);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[54]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[3][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[3][1]++, 'Failed to stop monitoring'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[55]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[56]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to stop monitoring', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const handleReportError =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[57]++, (0, _react.useCallback)(async (error, context) => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[12]++;
    cov_2rm5l7d1nt().s[58]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[59]++;
      await (0, _proactivemonitoring.reportError)(error, context);
      // Actualizar estadísticas después de reportar error
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[60]++;
      await refreshStats();
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[61]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[4][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[4][1]++, 'Failed to report error'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[62]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[63]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report error', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const updateConfig =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[64]++, (0, _react.useCallback)(newConfig => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[13]++;
    cov_2rm5l7d1nt().s[65]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[66]++;
      _proactivemonitoring.proactiveMonitoring.updateConfig(newConfig);
      const updatedConfig =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[67]++, _proactivemonitoring.proactiveMonitoring.getConfig());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[68]++;
      setConfig(updatedConfig);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[69]++;
      setIsMonitoring(updatedConfig.enabled);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[70]++;
      setError(null);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[71]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Monitoring config updated', {
        newConfig
      }, _logger.LogCategory.SYSTEM);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[72]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[5][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[5][1]++, 'Failed to update config'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[73]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[74]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to update config', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const addErrorPattern =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[75]++, (0, _react.useCallback)(pattern => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[14]++;
    cov_2rm5l7d1nt().s[76]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[77]++;
      _proactivemonitoring.proactiveMonitoring.addErrorPattern(pattern);
      const updatedPatterns =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[78]++, _proactivemonitoring.proactiveMonitoring.getErrorPatterns());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[79]++;
      setErrorPatterns(updatedPatterns);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[80]++;
      setError(null);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[81]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern added', {
        patternId: pattern.id
      }, _logger.LogCategory.SYSTEM);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[82]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[6][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[6][1]++, 'Failed to add error pattern'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[83]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[84]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to add error pattern', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const removeErrorPattern =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[85]++, (0, _react.useCallback)(patternId => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[15]++;
    cov_2rm5l7d1nt().s[86]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[87]++;
      _proactivemonitoring.proactiveMonitoring.removeErrorPattern(patternId);
      const updatedPatterns =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[88]++, _proactivemonitoring.proactiveMonitoring.getErrorPatterns());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[89]++;
      setErrorPatterns(updatedPatterns);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[90]++;
      setError(null);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[91]++;
      _logger.logger.info(_logger.LogLevel.INFO, 'Error pattern removed', {
        patternId
      }, _logger.LogCategory.SYSTEM);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[92]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[7][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[7][1]++, 'Failed to remove error pattern'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[93]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[94]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to remove error pattern', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const refreshStats =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[95]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[16]++;
    cov_2rm5l7d1nt().s[96]++;
    try {
      const newStats =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[97]++, await _proactivemonitoring.proactiveMonitoring.getMonitoringStats());
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[98]++;
      setStats(newStats);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[99]++;
      setError(null);
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().s[100]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[8][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2rm5l7d1nt().b[8][1]++, 'Failed to refresh stats'));
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[101]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[102]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to refresh stats', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  const getHealthStatus =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[103]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[17]++;
    cov_2rm5l7d1nt().s[104]++;
    if (!stats?.systemHealth) {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().b[9][0]++;
      cov_2rm5l7d1nt().s[105]++;
      return 'unknown';
    } else
    /* istanbul ignore next */
    {
      cov_2rm5l7d1nt().b[9][1]++;
    }
    cov_2rm5l7d1nt().s[106]++;
    return stats.systemHealth.status;
  }, [stats]));
  const getHealthColor =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[107]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[18]++;
    const status =
    /* istanbul ignore next */
    (cov_2rm5l7d1nt().s[108]++, getHealthStatus());
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[109]++;
    switch (status) {
      case 'healthy':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[10][0]++;
        cov_2rm5l7d1nt().s[110]++;
        return 'text-green-500';
      case 'warning':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[10][1]++;
        cov_2rm5l7d1nt().s[111]++;
        return 'text-yellow-500';
      case 'critical':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[10][2]++;
        cov_2rm5l7d1nt().s[112]++;
        return 'text-red-500';
      case 'down':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[10][3]++;
        cov_2rm5l7d1nt().s[113]++;
        return 'text-red-700';
      default:
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[10][4]++;
        cov_2rm5l7d1nt().s[114]++;
        return 'text-gray-500';
    }
  }, [getHealthStatus]));
  const getHealthIcon =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[115]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[19]++;
    const status =
    /* istanbul ignore next */
    (cov_2rm5l7d1nt().s[116]++, getHealthStatus());
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[117]++;
    switch (status) {
      case 'healthy':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[11][0]++;
        cov_2rm5l7d1nt().s[118]++;
        return '✅';
      case 'warning':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[11][1]++;
        cov_2rm5l7d1nt().s[119]++;
        return '⚠️';
      case 'critical':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[11][2]++;
        cov_2rm5l7d1nt().s[120]++;
        return '🚨';
      case 'down':
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[11][3]++;
        cov_2rm5l7d1nt().s[121]++;
        return '❌';
      default:
        /* istanbul ignore next */
        cov_2rm5l7d1nt().b[11][4]++;
        cov_2rm5l7d1nt().s[122]++;
        return '❓';
    }
  }, [getHealthStatus]));
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[123]++;
  return {
    // Estado
    isMonitoring,
    stats,
    config,
    errorPatterns,
    loading,
    error,
    // Acciones
    startMonitoring,
    stopMonitoring,
    reportError: handleReportError,
    updateConfig,
    addErrorPattern,
    removeErrorPattern,
    refreshStats,
    // Utilidades
    getHealthStatus,
    getHealthColor,
    getHealthIcon
  };
}
function useErrorReporting() {
  /* istanbul ignore next */
  cov_2rm5l7d1nt().f[20]++;
  const reportErrorCallback =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[124]++, (0, _react.useCallback)(async (error, context) => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[21]++;
    cov_2rm5l7d1nt().s[125]++;
    try {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[126]++;
      await (0, _proactivemonitoring.reportError)(error, context);
    } catch (err) {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().s[127]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to report error', {
        error: err
      }, _logger.LogCategory.SYSTEM);
    }
  }, []));
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[128]++;
  return {
    reportError: reportErrorCallback
  };
}
function useSystemHealth() {
  /* istanbul ignore next */
  cov_2rm5l7d1nt().f[22]++;
  const [health, setHealth] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[129]++, (0, _react.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2rm5l7d1nt().s[130]++, (0, _react.useState)(true));
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[131]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2rm5l7d1nt().f[23]++;
    cov_2rm5l7d1nt().s[132]++;
    const loadHealth = async () => {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().f[24]++;
      cov_2rm5l7d1nt().s[133]++;
      try {
        const stats =
        /* istanbul ignore next */
        (cov_2rm5l7d1nt().s[134]++, await _proactivemonitoring.proactiveMonitoring.getMonitoringStats());
        /* istanbul ignore next */
        cov_2rm5l7d1nt().s[135]++;
        setHealth(stats.systemHealth);
      } catch (err) {
        /* istanbul ignore next */
        cov_2rm5l7d1nt().s[136]++;
        _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to load system health', {
          error: err
        }, _logger.LogCategory.SYSTEM);
      } finally {
        /* istanbul ignore next */
        cov_2rm5l7d1nt().s[137]++;
        setLoading(false);
      }
    };
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[138]++;
    loadHealth();
    // Actualizar cada minuto
    const interval =
    /* istanbul ignore next */
    (cov_2rm5l7d1nt().s[139]++, setInterval(loadHealth, 60000));
    /* istanbul ignore next */
    cov_2rm5l7d1nt().s[140]++;
    return () => {
      /* istanbul ignore next */
      cov_2rm5l7d1nt().f[25]++;
      cov_2rm5l7d1nt().s[141]++;
      return clearInterval(interval);
    };
  }, []);
  /* istanbul ignore next */
  cov_2rm5l7d1nt().s[142]++;
  return {
    health,
    loading
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnJtNWw3ZDFudCIsImFjdHVhbENvdmVyYWdlIiwicyIsInVzZUVycm9yUmVwb3J0aW5nIiwiZiIsInVzZVByb2FjdGl2ZU1vbml0b3JpbmciLCJ1c2VTeXN0ZW1IZWFsdGgiLCJpc01vbml0b3JpbmciLCJzZXRJc01vbml0b3JpbmciLCJfcmVhY3QiLCJ1c2VTdGF0ZSIsInN0YXRzIiwic2V0U3RhdHMiLCJjb25maWciLCJzZXRDb25maWciLCJfcHJvYWN0aXZlbW9uaXRvcmluZyIsInByb2FjdGl2ZU1vbml0b3JpbmciLCJnZXRDb25maWciLCJlcnJvclBhdHRlcm5zIiwic2V0RXJyb3JQYXR0ZXJucyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciIsInVzZUVmZmVjdCIsImxvYWRJbml0aWFsRGF0YSIsImIiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwicmVmcmVzaFN0YXRzIiwiY2xlYXJJbnRlcnZhbCIsImN1cnJlbnRDb25maWciLCJlbmFibGVkIiwicGF0dGVybnMiLCJnZXRFcnJvclBhdHRlcm5zIiwiZXJyIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJtZXNzYWdlIiwiX2xvZ2dlciIsImxvZ2dlciIsIkxvZ0xldmVsIiwiRVJST1IiLCJMb2dDYXRlZ29yeSIsIlNZU1RFTSIsInN0YXJ0TW9uaXRvcmluZyIsInVzZUNhbGxiYWNrIiwic3RhcnQiLCJpbmZvIiwiSU5GTyIsInN0b3BNb25pdG9yaW5nIiwic3RvcCIsImhhbmRsZVJlcG9ydEVycm9yIiwiY29udGV4dCIsInJlcG9ydEVycm9yIiwidXBkYXRlQ29uZmlnIiwibmV3Q29uZmlnIiwidXBkYXRlZENvbmZpZyIsImFkZEVycm9yUGF0dGVybiIsInBhdHRlcm4iLCJ1cGRhdGVkUGF0dGVybnMiLCJwYXR0ZXJuSWQiLCJpZCIsInJlbW92ZUVycm9yUGF0dGVybiIsIm5ld1N0YXRzIiwiZ2V0TW9uaXRvcmluZ1N0YXRzIiwiZ2V0SGVhbHRoU3RhdHVzIiwic3lzdGVtSGVhbHRoIiwic3RhdHVzIiwiZ2V0SGVhbHRoQ29sb3IiLCJnZXRIZWFsdGhJY29uIiwicmVwb3J0RXJyb3JDYWxsYmFjayIsImhlYWx0aCIsInNldEhlYWx0aCIsImxvYWRIZWFsdGgiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXG1hcnRpXFxEZXNrdG9wXFxERVNBUlJPTExPU1dcXEJPSUxFUlBMQVRURSBFLUNPTU1FUkNFXFxzcmNcXGhvb2tzXFx1c2VQcm9hY3RpdmVNb25pdG9yaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xyXG5cclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHtcclxuICBwcm9hY3RpdmVNb25pdG9yaW5nLFxyXG4gIHJlcG9ydEVycm9yLFxyXG4gIFN5c3RlbUhlYWx0aCxcclxuICBFcnJvclBhdHRlcm4sXHJcbiAgTW9uaXRvcmluZ0NvbmZpZ1xyXG59IGZyb20gJy4uL2xpYi9tb25pdG9yaW5nL3Byb2FjdGl2ZS1tb25pdG9yaW5nJ1xyXG5pbXBvcnQgeyBsb2dnZXIsIExvZ0xldmVsLCBMb2dDYXRlZ29yeSB9IGZyb20gJ0AvbGliL2VudGVycHJpc2UvbG9nZ2VyJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNb25pdG9yaW5nU3RhdHMge1xyXG4gIHRvdGFsRXJyb3JzOiBudW1iZXJcclxuICBhY3RpdmVQYXR0ZXJuczogbnVtYmVyXHJcbiAgcmVjZW50QWxlcnRzOiBudW1iZXJcclxuICBzeXN0ZW1IZWFsdGg6IFN5c3RlbUhlYWx0aFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVByb2FjdGl2ZU1vbml0b3JpbmdSZXR1cm4ge1xyXG4gIC8vIEVzdGFkb1xyXG4gIGlzTW9uaXRvcmluZzogYm9vbGVhblxyXG4gIHN0YXRzOiBNb25pdG9yaW5nU3RhdHMgfCBudWxsXHJcbiAgY29uZmlnOiBNb25pdG9yaW5nQ29uZmlnXHJcbiAgZXJyb3JQYXR0ZXJuczogRXJyb3JQYXR0ZXJuW11cclxuICBsb2FkaW5nOiBib29sZWFuXHJcbiAgZXJyb3I6IHN0cmluZyB8IG51bGxcclxuXHJcbiAgLy8gQWNjaW9uZXNcclxuICBzdGFydE1vbml0b3Jpbmc6ICgpID0+IHZvaWRcclxuICBzdG9wTW9uaXRvcmluZzogKCkgPT4gdm9pZFxyXG4gIHJlcG9ydEVycm9yOiAoZXJyb3I6IEVycm9yIHwgc3RyaW5nLCBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PikgPT4gUHJvbWlzZTx2b2lkPlxyXG4gIHVwZGF0ZUNvbmZpZzogKG5ld0NvbmZpZzogUGFydGlhbDxNb25pdG9yaW5nQ29uZmlnPikgPT4gdm9pZFxyXG4gIGFkZEVycm9yUGF0dGVybjogKHBhdHRlcm46IEVycm9yUGF0dGVybikgPT4gdm9pZFxyXG4gIHJlbW92ZUVycm9yUGF0dGVybjogKHBhdHRlcm5JZDogc3RyaW5nKSA9PiB2b2lkXHJcbiAgcmVmcmVzaFN0YXRzOiAoKSA9PiBQcm9taXNlPHZvaWQ+XHJcbiAgXHJcbiAgLy8gVXRpbGlkYWRlc1xyXG4gIGdldEhlYWx0aFN0YXR1czogKCkgPT4gJ2hlYWx0aHknIHwgJ3dhcm5pbmcnIHwgJ2NyaXRpY2FsJyB8ICdkb3duJyB8ICd1bmtub3duJ1xyXG4gIGdldEhlYWx0aENvbG9yOiAoKSA9PiBzdHJpbmdcclxuICBnZXRIZWFsdGhJY29uOiAoKSA9PiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIEhvb2sgcGFyYSBnZXN0aW9uYXIgZWwgc2lzdGVtYSBkZSBtb25pdG9yZW8gcHJvYWN0aXZvXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJvYWN0aXZlTW9uaXRvcmluZygpOiBVc2VQcm9hY3RpdmVNb25pdG9yaW5nUmV0dXJuIHtcclxuICBjb25zdCBbaXNNb25pdG9yaW5nLCBzZXRJc01vbml0b3JpbmddID0gdXNlU3RhdGUoZmFsc2UpXHJcbiAgY29uc3QgW3N0YXRzLCBzZXRTdGF0c10gPSB1c2VTdGF0ZTxNb25pdG9yaW5nU3RhdHMgfCBudWxsPihudWxsKVxyXG4gIGNvbnN0IFtjb25maWcsIHNldENvbmZpZ10gPSB1c2VTdGF0ZTxNb25pdG9yaW5nQ29uZmlnPihwcm9hY3RpdmVNb25pdG9yaW5nLmdldENvbmZpZygpKVxyXG4gIGNvbnN0IFtlcnJvclBhdHRlcm5zLCBzZXRFcnJvclBhdHRlcm5zXSA9IHVzZVN0YXRlPEVycm9yUGF0dGVybltdPihbXSlcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXHJcblxyXG4gIC8vIENhcmdhciBkYXRvcyBpbmljaWFsZXNcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbG9hZEluaXRpYWxEYXRhKClcclxuICB9LCBbXSlcclxuXHJcbiAgLy8gQWN0dWFsaXphciBlc3RhZMOtc3RpY2FzIHBlcmnDs2RpY2FtZW50ZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWlzTW9uaXRvcmluZykge3JldHVybn1cclxuXHJcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgcmVmcmVzaFN0YXRzKClcclxuICAgIH0sIDMwMDAwKSAvLyBDYWRhIDMwIHNlZ3VuZG9zXHJcblxyXG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXHJcbiAgfSwgW2lzTW9uaXRvcmluZ10pXHJcblxyXG4gIGNvbnN0IGxvYWRJbml0aWFsRGF0YSA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHNldExvYWRpbmcodHJ1ZSlcclxuICAgICAgc2V0RXJyb3IobnVsbClcclxuXHJcbiAgICAgIC8vIENhcmdhciBjb25maWd1cmFjacOzblxyXG4gICAgICBjb25zdCBjdXJyZW50Q29uZmlnID0gcHJvYWN0aXZlTW9uaXRvcmluZy5nZXRDb25maWcoKVxyXG4gICAgICBzZXRDb25maWcoY3VycmVudENvbmZpZylcclxuICAgICAgc2V0SXNNb25pdG9yaW5nKGN1cnJlbnRDb25maWcuZW5hYmxlZClcclxuXHJcbiAgICAgIC8vIENhcmdhciBwYXRyb25lcyBkZSBlcnJvclxyXG4gICAgICBjb25zdCBwYXR0ZXJucyA9IHByb2FjdGl2ZU1vbml0b3JpbmcuZ2V0RXJyb3JQYXR0ZXJucygpXHJcbiAgICAgIHNldEVycm9yUGF0dGVybnMocGF0dGVybnMpXHJcblxyXG4gICAgICAvLyBDYXJnYXIgZXN0YWTDrXN0aWNhc1xyXG4gICAgICBhd2FpdCByZWZyZXNoU3RhdHMoKVxyXG5cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ0Vycm9yIGxvYWRpbmcgbW9uaXRvcmluZyBkYXRhJ1xyXG4gICAgICBzZXRFcnJvcihlcnJvck1lc3NhZ2UpXHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dMZXZlbC5FUlJPUiwgJ0ZhaWxlZCB0byBsb2FkIG1vbml0b3JpbmcgZGF0YScsIHsgZXJyb3I6IGVyciB9LCBMb2dDYXRlZ29yeS5TWVNURU0pXHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc3RhcnRNb25pdG9yaW5nID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcHJvYWN0aXZlTW9uaXRvcmluZy5zdGFydCgpXHJcbiAgICAgIHNldElzTW9uaXRvcmluZyh0cnVlKVxyXG4gICAgICBzZXRFcnJvcihudWxsKVxyXG4gICAgICBsb2dnZXIuaW5mbyhMb2dMZXZlbC5JTkZPLCAnTW9uaXRvcmluZyBzdGFydGVkIHZpYSBob29rJywge30sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBzdGFydCBtb25pdG9yaW5nJ1xyXG4gICAgICBzZXRFcnJvcihlcnJvck1lc3NhZ2UpXHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dMZXZlbC5FUlJPUiwgJ0ZhaWxlZCB0byBzdGFydCBtb25pdG9yaW5nJywgeyBlcnJvcjogZXJyIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH1cclxuICB9LCBbXSlcclxuXHJcbiAgY29uc3Qgc3RvcE1vbml0b3JpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBwcm9hY3RpdmVNb25pdG9yaW5nLnN0b3AoKVxyXG4gICAgICBzZXRJc01vbml0b3JpbmcoZmFsc2UpXHJcbiAgICAgIHNldEVycm9yKG51bGwpXHJcbiAgICAgIGxvZ2dlci5pbmZvKExvZ0xldmVsLklORk8sICdNb25pdG9yaW5nIHN0b3BwZWQgdmlhIGhvb2snLCB7fSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHN0b3AgbW9uaXRvcmluZydcclxuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKVxyXG4gICAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gc3RvcCBtb25pdG9yaW5nJywgeyBlcnJvcjogZXJyIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH1cclxuICB9LCBbXSlcclxuXHJcbiAgY29uc3QgaGFuZGxlUmVwb3J0RXJyb3IgPSB1c2VDYWxsYmFjayhhc3luYyAoZXJyb3I6IEVycm9yIHwgc3RyaW5nLCBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgcmVwb3J0RXJyb3IoZXJyb3IsIGNvbnRleHQpXHJcbiAgICAgIC8vIEFjdHVhbGl6YXIgZXN0YWTDrXN0aWNhcyBkZXNwdcOpcyBkZSByZXBvcnRhciBlcnJvclxyXG4gICAgICBhd2FpdCByZWZyZXNoU3RhdHMoKVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHJlcG9ydCBlcnJvcidcclxuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKVxyXG4gICAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gcmVwb3J0IGVycm9yJywgeyBlcnJvcjogZXJyIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH1cclxuICB9LCBbXSlcclxuXHJcbiAgY29uc3QgdXBkYXRlQ29uZmlnID0gdXNlQ2FsbGJhY2soKG5ld0NvbmZpZzogUGFydGlhbDxNb25pdG9yaW5nQ29uZmlnPikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcHJvYWN0aXZlTW9uaXRvcmluZy51cGRhdGVDb25maWcobmV3Q29uZmlnKVxyXG4gICAgICBjb25zdCB1cGRhdGVkQ29uZmlnID0gcHJvYWN0aXZlTW9uaXRvcmluZy5nZXRDb25maWcoKVxyXG4gICAgICBzZXRDb25maWcodXBkYXRlZENvbmZpZylcclxuICAgICAgc2V0SXNNb25pdG9yaW5nKHVwZGF0ZWRDb25maWcuZW5hYmxlZClcclxuICAgICAgc2V0RXJyb3IobnVsbClcclxuICAgICAgbG9nZ2VyLmluZm8oTG9nTGV2ZWwuSU5GTywgJ01vbml0b3JpbmcgY29uZmlnIHVwZGF0ZWQnLCB7IG5ld0NvbmZpZyB9LCBMb2dDYXRlZ29yeS5TWVNURU0pXHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdGYWlsZWQgdG8gdXBkYXRlIGNvbmZpZydcclxuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKVxyXG4gICAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gdXBkYXRlIGNvbmZpZycsIHsgZXJyb3I6IGVyciB9LCBMb2dDYXRlZ29yeS5TWVNURU0pXHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIGNvbnN0IGFkZEVycm9yUGF0dGVybiA9IHVzZUNhbGxiYWNrKChwYXR0ZXJuOiBFcnJvclBhdHRlcm4pID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHByb2FjdGl2ZU1vbml0b3JpbmcuYWRkRXJyb3JQYXR0ZXJuKHBhdHRlcm4pXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRQYXR0ZXJucyA9IHByb2FjdGl2ZU1vbml0b3JpbmcuZ2V0RXJyb3JQYXR0ZXJucygpXHJcbiAgICAgIHNldEVycm9yUGF0dGVybnModXBkYXRlZFBhdHRlcm5zKVxyXG4gICAgICBzZXRFcnJvcihudWxsKVxyXG4gICAgICBsb2dnZXIuaW5mbyhMb2dMZXZlbC5JTkZPLCAnRXJyb3IgcGF0dGVybiBhZGRlZCcsIHsgcGF0dGVybklkOiBwYXR0ZXJuLmlkIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBhZGQgZXJyb3IgcGF0dGVybidcclxuICAgICAgc2V0RXJyb3IoZXJyb3JNZXNzYWdlKVxyXG4gICAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gYWRkIGVycm9yIHBhdHRlcm4nLCB7IGVycm9yOiBlcnIgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxyXG4gICAgfVxyXG4gIH0sIFtdKVxyXG5cclxuICBjb25zdCByZW1vdmVFcnJvclBhdHRlcm4gPSB1c2VDYWxsYmFjaygocGF0dGVybklkOiBzdHJpbmcpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHByb2FjdGl2ZU1vbml0b3JpbmcucmVtb3ZlRXJyb3JQYXR0ZXJuKHBhdHRlcm5JZClcclxuICAgICAgY29uc3QgdXBkYXRlZFBhdHRlcm5zID0gcHJvYWN0aXZlTW9uaXRvcmluZy5nZXRFcnJvclBhdHRlcm5zKClcclxuICAgICAgc2V0RXJyb3JQYXR0ZXJucyh1cGRhdGVkUGF0dGVybnMpXHJcbiAgICAgIHNldEVycm9yKG51bGwpXHJcbiAgICAgIGxvZ2dlci5pbmZvKExvZ0xldmVsLklORk8sICdFcnJvciBwYXR0ZXJuIHJlbW92ZWQnLCB7IHBhdHRlcm5JZCB9LCBMb2dDYXRlZ29yeS5TWVNURU0pXHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdGYWlsZWQgdG8gcmVtb3ZlIGVycm9yIHBhdHRlcm4nXHJcbiAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSlcclxuICAgICAgbG9nZ2VyLmVycm9yKExvZ0xldmVsLkVSUk9SLCAnRmFpbGVkIHRvIHJlbW92ZSBlcnJvciBwYXR0ZXJuJywgeyBlcnJvcjogZXJyIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgIH1cclxuICB9LCBbXSlcclxuXHJcbiAgY29uc3QgcmVmcmVzaFN0YXRzID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgbmV3U3RhdHMgPSBhd2FpdCBwcm9hY3RpdmVNb25pdG9yaW5nLmdldE1vbml0b3JpbmdTdGF0cygpXHJcbiAgICAgIHNldFN0YXRzKG5ld1N0YXRzKVxyXG4gICAgICBzZXRFcnJvcihudWxsKVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHJlZnJlc2ggc3RhdHMnXHJcbiAgICAgIHNldEVycm9yKGVycm9yTWVzc2FnZSlcclxuICAgICAgbG9nZ2VyLmVycm9yKExvZ0xldmVsLkVSUk9SLCAnRmFpbGVkIHRvIHJlZnJlc2ggc3RhdHMnLCB7IGVycm9yOiBlcnIgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxyXG4gICAgfVxyXG4gIH0sIFtdKVxyXG5cclxuICBjb25zdCBnZXRIZWFsdGhTdGF0dXMgPSB1c2VDYWxsYmFjaygoKTogJ2hlYWx0aHknIHwgJ3dhcm5pbmcnIHwgJ2NyaXRpY2FsJyB8ICdkb3duJyB8ICd1bmtub3duJyA9PiB7XHJcbiAgICBpZiAoIXN0YXRzPy5zeXN0ZW1IZWFsdGgpIHtyZXR1cm4gJ3Vua25vd24nfVxyXG4gICAgcmV0dXJuIHN0YXRzLnN5c3RlbUhlYWx0aC5zdGF0dXNcclxuICB9LCBbc3RhdHNdKVxyXG5cclxuICBjb25zdCBnZXRIZWFsdGhDb2xvciA9IHVzZUNhbGxiYWNrKCgpOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3Qgc3RhdHVzID0gZ2V0SGVhbHRoU3RhdHVzKClcclxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XHJcbiAgICAgIGNhc2UgJ2hlYWx0aHknOlxyXG4gICAgICAgIHJldHVybiAndGV4dC1ncmVlbi01MDAnXHJcbiAgICAgIGNhc2UgJ3dhcm5pbmcnOlxyXG4gICAgICAgIHJldHVybiAndGV4dC15ZWxsb3ctNTAwJ1xyXG4gICAgICBjYXNlICdjcml0aWNhbCc6XHJcbiAgICAgICAgcmV0dXJuICd0ZXh0LXJlZC01MDAnXHJcbiAgICAgIGNhc2UgJ2Rvd24nOlxyXG4gICAgICAgIHJldHVybiAndGV4dC1yZWQtNzAwJ1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiAndGV4dC1ncmF5LTUwMCdcclxuICAgIH1cclxuICB9LCBbZ2V0SGVhbHRoU3RhdHVzXSlcclxuXHJcbiAgY29uc3QgZ2V0SGVhbHRoSWNvbiA9IHVzZUNhbGxiYWNrKCgpOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3Qgc3RhdHVzID0gZ2V0SGVhbHRoU3RhdHVzKClcclxuICAgIHN3aXRjaCAoc3RhdHVzKSB7XHJcbiAgICAgIGNhc2UgJ2hlYWx0aHknOlxyXG4gICAgICAgIHJldHVybiAn4pyFJ1xyXG4gICAgICBjYXNlICd3YXJuaW5nJzpcclxuICAgICAgICByZXR1cm4gJ+KaoO+4jydcclxuICAgICAgY2FzZSAnY3JpdGljYWwnOlxyXG4gICAgICAgIHJldHVybiAn8J+aqCdcclxuICAgICAgY2FzZSAnZG93bic6XHJcbiAgICAgICAgcmV0dXJuICfinYwnXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICfinZMnXHJcbiAgICB9XHJcbiAgfSwgW2dldEhlYWx0aFN0YXR1c10pXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAvLyBFc3RhZG9cclxuICAgIGlzTW9uaXRvcmluZyxcclxuICAgIHN0YXRzLFxyXG4gICAgY29uZmlnLFxyXG4gICAgZXJyb3JQYXR0ZXJucyxcclxuICAgIGxvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuXHJcbiAgICAvLyBBY2Npb25lc1xyXG4gICAgc3RhcnRNb25pdG9yaW5nLFxyXG4gICAgc3RvcE1vbml0b3JpbmcsXHJcbiAgICByZXBvcnRFcnJvcjogaGFuZGxlUmVwb3J0RXJyb3IsXHJcbiAgICB1cGRhdGVDb25maWcsXHJcbiAgICBhZGRFcnJvclBhdHRlcm4sXHJcbiAgICByZW1vdmVFcnJvclBhdHRlcm4sXHJcbiAgICByZWZyZXNoU3RhdHMsXHJcblxyXG4gICAgLy8gVXRpbGlkYWRlc1xyXG4gICAgZ2V0SGVhbHRoU3RhdHVzLFxyXG4gICAgZ2V0SGVhbHRoQ29sb3IsXHJcbiAgICBnZXRIZWFsdGhJY29uXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogSG9vayBzaW1wbGlmaWNhZG8gcGFyYSBzb2xvIHJlcG9ydGFyIGVycm9yZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VFcnJvclJlcG9ydGluZygpIHtcclxuICBjb25zdCByZXBvcnRFcnJvckNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKGVycm9yOiBFcnJvciB8IHN0cmluZywgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IHJlcG9ydEVycm9yKGVycm9yLCBjb250ZXh0KVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihMb2dMZXZlbC5FUlJPUiwgJ0ZhaWxlZCB0byByZXBvcnQgZXJyb3InLCB7IGVycm9yOiBlcnIgfSwgTG9nQ2F0ZWdvcnkuU1lTVEVNKVxyXG4gICAgfVxyXG4gIH0sIFtdKVxyXG5cclxuICByZXR1cm4geyByZXBvcnRFcnJvcjogcmVwb3J0RXJyb3JDYWxsYmFjayB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIb29rIHBhcmEgbW9uaXRvcmVhciBsYSBzYWx1ZCBkZWwgc2lzdGVtYSBlbiB0aWVtcG8gcmVhbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN5c3RlbUhlYWx0aCgpIHtcclxuICBjb25zdCBbaGVhbHRoLCBzZXRIZWFsdGhdID0gdXNlU3RhdGU8U3lzdGVtSGVhbHRoIHwgbnVsbD4obnVsbClcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgbG9hZEhlYWx0aCA9IGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IHByb2FjdGl2ZU1vbml0b3JpbmcuZ2V0TW9uaXRvcmluZ1N0YXRzKClcclxuICAgICAgICBzZXRIZWFsdGgoc3RhdHMuc3lzdGVtSGVhbHRoKVxyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoTG9nTGV2ZWwuRVJST1IsICdGYWlsZWQgdG8gbG9hZCBzeXN0ZW0gaGVhbHRoJywgeyBlcnJvcjogZXJyIH0sIExvZ0NhdGVnb3J5LlNZU1RFTSlcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEhlYWx0aCgpXHJcblxyXG4gICAgLy8gQWN0dWFsaXphciBjYWRhIG1pbnV0b1xyXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChsb2FkSGVhbHRoLCA2MDAwMClcclxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKVxyXG4gIH0sIFtdKVxyXG5cclxuICByZXR1cm4geyBoZWFsdGgsIGxvYWRpbmcgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQThDZ0I7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BZ05BQyxrQkFBQTtJQUFBO0lBQUFILGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7V0FBQUMsaUJBQUE7O01BaE5BRSx1QkFBQTtJQUFBO0lBQUFMLGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7V0FBQUcsc0JBQUE7O01BK05BQyxnQkFBQTtJQUFBO0lBQUFOLGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7V0FBQUksZUFBQTs7Ozs7a0NBM1FpQzs7O2tDQU8xQzs7O2tDQUN1QztBQW9DdkMsU0FBU0QsdUJBQUE7RUFBQTtFQUFBTCxjQUFBLEdBQUFJLENBQUE7RUFDZCxNQUFNLENBQUNHLFlBQUEsRUFBY0MsZUFBQSxDQUFnQjtFQUFBO0VBQUEsQ0FBQVIsY0FBQSxHQUFBRSxDQUFBLFFBQUcsSUFBQU8sTUFBQSxDQUFBQyxRQUFRLEVBQUM7RUFDakQsTUFBTSxDQUFDQyxLQUFBLEVBQU9DLFFBQUEsQ0FBUztFQUFBO0VBQUEsQ0FBQVosY0FBQSxHQUFBRSxDQUFBLFFBQUcsSUFBQU8sTUFBQSxDQUFBQyxRQUFRLEVBQXlCO0VBQzNELE1BQU0sQ0FBQ0csTUFBQSxFQUFRQyxTQUFBLENBQVU7RUFBQTtFQUFBLENBQUFkLGNBQUEsR0FBQUUsQ0FBQSxRQUFHLElBQUFPLE1BQUEsQ0FBQUMsUUFBUSxFQUFtQkssb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUNDLFNBQVM7RUFDcEYsTUFBTSxDQUFDQyxhQUFBLEVBQWVDLGdCQUFBLENBQWlCO0VBQUE7RUFBQSxDQUFBbkIsY0FBQSxHQUFBRSxDQUFBLFFBQUcsSUFBQU8sTUFBQSxDQUFBQyxRQUFRLEVBQWlCLEVBQUU7RUFDckUsTUFBTSxDQUFDVSxPQUFBLEVBQVNDLFVBQUEsQ0FBVztFQUFBO0VBQUEsQ0FBQXJCLGNBQUEsR0FBQUUsQ0FBQSxRQUFHLElBQUFPLE1BQUEsQ0FBQUMsUUFBUSxFQUFDO0VBQ3ZDLE1BQU0sQ0FBQ1ksS0FBQSxFQUFPQyxRQUFBLENBQVM7RUFBQTtFQUFBLENBQUF2QixjQUFBLEdBQUFFLENBQUEsUUFBRyxJQUFBTyxNQUFBLENBQUFDLFFBQVEsRUFBZ0I7RUFFbEQ7RUFBQTtFQUFBVixjQUFBLEdBQUFFLENBQUE7RUFDQSxJQUFBTyxNQUFBLENBQUFlLFNBQVMsRUFBQztJQUFBO0lBQUF4QixjQUFBLEdBQUFJLENBQUE7SUFBQUosY0FBQSxHQUFBRSxDQUFBO0lBQ1J1QixlQUFBO0VBQ0YsR0FBRyxFQUFFO0VBRUw7RUFBQTtFQUFBekIsY0FBQSxHQUFBRSxDQUFBO0VBQ0EsSUFBQU8sTUFBQSxDQUFBZSxTQUFTLEVBQUM7SUFBQTtJQUFBeEIsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUUsQ0FBQTtJQUNSLElBQUksQ0FBQ0ssWUFBQSxFQUFjO01BQUE7TUFBQVAsY0FBQSxHQUFBMEIsQ0FBQTtNQUFBMUIsY0FBQSxHQUFBRSxDQUFBO01BQUM7SUFBTTtJQUFBO0lBQUE7TUFBQUYsY0FBQSxHQUFBMEIsQ0FBQTtJQUFBO0lBRTFCLE1BQU1DLFFBQUE7SUFBQTtJQUFBLENBQUEzQixjQUFBLEdBQUFFLENBQUEsUUFBVzBCLFdBQUEsQ0FBWTtNQUFBO01BQUE1QixjQUFBLEdBQUFJLENBQUE7TUFBQUosY0FBQSxHQUFBRSxDQUFBO01BQzNCMkIsWUFBQTtJQUNGLEdBQUcsUUFBTztJQUFBOzs7SUFFVixPQUFPLE1BQU07TUFBQTtNQUFBN0IsY0FBQSxHQUFBSSxDQUFBO01BQUFKLGNBQUEsR0FBQUUsQ0FBQTtNQUFBLE9BQUE0QixhQUFBLENBQWNILFFBQUE7SUFBQTtFQUM3QixHQUFHLENBQUNwQixZQUFBLENBQWE7RUFBQTtFQUFBUCxjQUFBLEdBQUFFLENBQUE7RUFFakIsTUFBTXVCLGVBQUEsR0FBa0IsTUFBQUEsQ0FBQTtJQUFBO0lBQUF6QixjQUFBLEdBQUFJLENBQUE7SUFBQUosY0FBQSxHQUFBRSxDQUFBO0lBQ3RCLElBQUk7TUFBQTtNQUFBRixjQUFBLEdBQUFFLENBQUE7TUFDRm1CLFVBQUEsQ0FBVztNQUFBO01BQUFyQixjQUFBLEdBQUFFLENBQUE7TUFDWHFCLFFBQUEsQ0FBUztNQUVUO01BQ0EsTUFBTVEsYUFBQTtNQUFBO01BQUEsQ0FBQS9CLGNBQUEsR0FBQUUsQ0FBQSxRQUFnQmEsb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUNDLFNBQVM7TUFBQTtNQUFBakIsY0FBQSxHQUFBRSxDQUFBO01BQ25EWSxTQUFBLENBQVVpQixhQUFBO01BQUE7TUFBQS9CLGNBQUEsR0FBQUUsQ0FBQTtNQUNWTSxlQUFBLENBQWdCdUIsYUFBQSxDQUFjQyxPQUFPO01BRXJDO01BQ0EsTUFBTUMsUUFBQTtNQUFBO01BQUEsQ0FBQWpDLGNBQUEsR0FBQUUsQ0FBQSxRQUFXYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQ2tCLGdCQUFnQjtNQUFBO01BQUFsQyxjQUFBLEdBQUFFLENBQUE7TUFDckRpQixnQkFBQSxDQUFpQmMsUUFBQTtNQUVqQjtNQUFBO01BQUFqQyxjQUFBLEdBQUFFLENBQUE7TUFDQSxNQUFNMkIsWUFBQTtJQUVSLEVBQUUsT0FBT00sR0FBQSxFQUFLO01BQ1osTUFBTUMsWUFBQTtNQUFBO01BQUEsQ0FBQXBDLGNBQUEsR0FBQUUsQ0FBQSxRQUFlaUMsR0FBQSxZQUFlRSxLQUFBO01BQUE7TUFBQSxDQUFBckMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFRUyxHQUFBLENBQUlHLE9BQU87TUFBQTtNQUFBLENBQUF0QyxjQUFBLEdBQUEwQixDQUFBLFVBQUc7TUFBQTtNQUFBMUIsY0FBQSxHQUFBRSxDQUFBO01BQzFEcUIsUUFBQSxDQUFTYSxZQUFBO01BQUE7TUFBQXBDLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNsQixLQUFLLENBQUNpQixPQUFBLENBQUFFLFFBQVEsQ0FBQ0MsS0FBSyxFQUFFLGtDQUFrQztRQUFFcEIsS0FBQSxFQUFPYTtNQUFJLEdBQUdJLE9BQUEsQ0FBQUksV0FBVyxDQUFDQyxNQUFNO0lBQ25HLFVBQVU7TUFBQTtNQUFBNUMsY0FBQSxHQUFBRSxDQUFBO01BQ1JtQixVQUFBLENBQVc7SUFDYjtFQUNGO0VBRUEsTUFBTXdCLGVBQUE7RUFBQTtFQUFBLENBQUE3QyxjQUFBLEdBQUFFLENBQUEsUUFBa0IsSUFBQU8sTUFBQSxDQUFBcUMsV0FBVyxFQUFDO0lBQUE7SUFBQTlDLGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7SUFDbEMsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQytCLEtBQUs7TUFBQTtNQUFBL0MsY0FBQSxHQUFBRSxDQUFBO01BQ3pCTSxlQUFBLENBQWdCO01BQUE7TUFBQVIsY0FBQSxHQUFBRSxDQUFBO01BQ2hCcUIsUUFBQSxDQUFTO01BQUE7TUFBQXZCLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNRLElBQUksQ0FBQ1QsT0FBQSxDQUFBRSxRQUFRLENBQUNRLElBQUksRUFBRSwrQkFBK0IsQ0FBQyxHQUFHVixPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUNsRixFQUFFLE9BQU9ULEdBQUEsRUFBSztNQUNaLE1BQU1DLFlBQUE7TUFBQTtNQUFBLENBQUFwQyxjQUFBLEdBQUFFLENBQUEsUUFBZWlDLEdBQUEsWUFBZUUsS0FBQTtNQUFBO01BQUEsQ0FBQXJDLGNBQUEsR0FBQTBCLENBQUEsVUFBUVMsR0FBQSxDQUFJRyxPQUFPO01BQUE7TUFBQSxDQUFBdEMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFHO01BQUE7TUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtNQUMxRHFCLFFBQUEsQ0FBU2EsWUFBQTtNQUFBO01BQUFwQyxjQUFBLEdBQUFFLENBQUE7TUFDVHFDLE9BQUEsQ0FBQUMsTUFBTSxDQUFDbEIsS0FBSyxDQUFDaUIsT0FBQSxDQUFBRSxRQUFRLENBQUNDLEtBQUssRUFBRSw4QkFBOEI7UUFBRXBCLEtBQUEsRUFBT2E7TUFBSSxHQUFHSSxPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUMvRjtFQUNGLEdBQUcsRUFBRTtFQUVMLE1BQU1NLGNBQUE7RUFBQTtFQUFBLENBQUFsRCxjQUFBLEdBQUFFLENBQUEsUUFBaUIsSUFBQU8sTUFBQSxDQUFBcUMsV0FBVyxFQUFDO0lBQUE7SUFBQTlDLGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7SUFDakMsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQ21DLElBQUk7TUFBQTtNQUFBbkQsY0FBQSxHQUFBRSxDQUFBO01BQ3hCTSxlQUFBLENBQWdCO01BQUE7TUFBQVIsY0FBQSxHQUFBRSxDQUFBO01BQ2hCcUIsUUFBQSxDQUFTO01BQUE7TUFBQXZCLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNRLElBQUksQ0FBQ1QsT0FBQSxDQUFBRSxRQUFRLENBQUNRLElBQUksRUFBRSwrQkFBK0IsQ0FBQyxHQUFHVixPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUNsRixFQUFFLE9BQU9ULEdBQUEsRUFBSztNQUNaLE1BQU1DLFlBQUE7TUFBQTtNQUFBLENBQUFwQyxjQUFBLEdBQUFFLENBQUEsUUFBZWlDLEdBQUEsWUFBZUUsS0FBQTtNQUFBO01BQUEsQ0FBQXJDLGNBQUEsR0FBQTBCLENBQUEsVUFBUVMsR0FBQSxDQUFJRyxPQUFPO01BQUE7TUFBQSxDQUFBdEMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFHO01BQUE7TUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtNQUMxRHFCLFFBQUEsQ0FBU2EsWUFBQTtNQUFBO01BQUFwQyxjQUFBLEdBQUFFLENBQUE7TUFDVHFDLE9BQUEsQ0FBQUMsTUFBTSxDQUFDbEIsS0FBSyxDQUFDaUIsT0FBQSxDQUFBRSxRQUFRLENBQUNDLEtBQUssRUFBRSw2QkFBNkI7UUFBRXBCLEtBQUEsRUFBT2E7TUFBSSxHQUFHSSxPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUM5RjtFQUNGLEdBQUcsRUFBRTtFQUVMLE1BQU1RLGlCQUFBO0VBQUE7RUFBQSxDQUFBcEQsY0FBQSxHQUFBRSxDQUFBLFFBQW9CLElBQUFPLE1BQUEsQ0FBQXFDLFdBQVcsRUFBQyxPQUFPeEIsS0FBQSxFQUF1QitCLE9BQUE7SUFBQTtJQUFBckQsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUUsQ0FBQTtJQUNsRSxJQUFJO01BQUE7TUFBQUYsY0FBQSxHQUFBRSxDQUFBO01BQ0YsTUFBTSxJQUFBYSxvQkFBQSxDQUFBdUMsV0FBVyxFQUFDaEMsS0FBQSxFQUFPK0IsT0FBQTtNQUN6QjtNQUFBO01BQUFyRCxjQUFBLEdBQUFFLENBQUE7TUFDQSxNQUFNMkIsWUFBQTtJQUNSLEVBQUUsT0FBT00sR0FBQSxFQUFLO01BQ1osTUFBTUMsWUFBQTtNQUFBO01BQUEsQ0FBQXBDLGNBQUEsR0FBQUUsQ0FBQSxRQUFlaUMsR0FBQSxZQUFlRSxLQUFBO01BQUE7TUFBQSxDQUFBckMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFRUyxHQUFBLENBQUlHLE9BQU87TUFBQTtNQUFBLENBQUF0QyxjQUFBLEdBQUEwQixDQUFBLFVBQUc7TUFBQTtNQUFBMUIsY0FBQSxHQUFBRSxDQUFBO01BQzFEcUIsUUFBQSxDQUFTYSxZQUFBO01BQUE7TUFBQXBDLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNsQixLQUFLLENBQUNpQixPQUFBLENBQUFFLFFBQVEsQ0FBQ0MsS0FBSyxFQUFFLDBCQUEwQjtRQUFFcEIsS0FBQSxFQUFPYTtNQUFJLEdBQUdJLE9BQUEsQ0FBQUksV0FBVyxDQUFDQyxNQUFNO0lBQzNGO0VBQ0YsR0FBRyxFQUFFO0VBRUwsTUFBTVcsWUFBQTtFQUFBO0VBQUEsQ0FBQXZELGNBQUEsR0FBQUUsQ0FBQSxRQUFlLElBQUFPLE1BQUEsQ0FBQXFDLFdBQVcsRUFBRVUsU0FBQTtJQUFBO0lBQUF4RCxjQUFBLEdBQUFJLENBQUE7SUFBQUosY0FBQSxHQUFBRSxDQUFBO0lBQ2hDLElBQUk7TUFBQTtNQUFBRixjQUFBLEdBQUFFLENBQUE7TUFDRmEsb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUN1QyxZQUFZLENBQUNDLFNBQUE7TUFDakMsTUFBTUMsYUFBQTtNQUFBO01BQUEsQ0FBQXpELGNBQUEsR0FBQUUsQ0FBQSxRQUFnQmEsb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUNDLFNBQVM7TUFBQTtNQUFBakIsY0FBQSxHQUFBRSxDQUFBO01BQ25EWSxTQUFBLENBQVUyQyxhQUFBO01BQUE7TUFBQXpELGNBQUEsR0FBQUUsQ0FBQTtNQUNWTSxlQUFBLENBQWdCaUQsYUFBQSxDQUFjekIsT0FBTztNQUFBO01BQUFoQyxjQUFBLEdBQUFFLENBQUE7TUFDckNxQixRQUFBLENBQVM7TUFBQTtNQUFBdkIsY0FBQSxHQUFBRSxDQUFBO01BQ1RxQyxPQUFBLENBQUFDLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDVCxPQUFBLENBQUFFLFFBQVEsQ0FBQ1EsSUFBSSxFQUFFLDZCQUE2QjtRQUFFTztNQUFVLEdBQUdqQixPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUMzRixFQUFFLE9BQU9ULEdBQUEsRUFBSztNQUNaLE1BQU1DLFlBQUE7TUFBQTtNQUFBLENBQUFwQyxjQUFBLEdBQUFFLENBQUEsUUFBZWlDLEdBQUEsWUFBZUUsS0FBQTtNQUFBO01BQUEsQ0FBQXJDLGNBQUEsR0FBQTBCLENBQUEsVUFBUVMsR0FBQSxDQUFJRyxPQUFPO01BQUE7TUFBQSxDQUFBdEMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFHO01BQUE7TUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtNQUMxRHFCLFFBQUEsQ0FBU2EsWUFBQTtNQUFBO01BQUFwQyxjQUFBLEdBQUFFLENBQUE7TUFDVHFDLE9BQUEsQ0FBQUMsTUFBTSxDQUFDbEIsS0FBSyxDQUFDaUIsT0FBQSxDQUFBRSxRQUFRLENBQUNDLEtBQUssRUFBRSwyQkFBMkI7UUFBRXBCLEtBQUEsRUFBT2E7TUFBSSxHQUFHSSxPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtJQUM1RjtFQUNGLEdBQUcsRUFBRTtFQUVMLE1BQU1jLGVBQUE7RUFBQTtFQUFBLENBQUExRCxjQUFBLEdBQUFFLENBQUEsUUFBa0IsSUFBQU8sTUFBQSxDQUFBcUMsV0FBVyxFQUFFYSxPQUFBO0lBQUE7SUFBQTNELGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7SUFDbkMsSUFBSTtNQUFBO01BQUFGLGNBQUEsR0FBQUUsQ0FBQTtNQUNGYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQzBDLGVBQWUsQ0FBQ0MsT0FBQTtNQUNwQyxNQUFNQyxlQUFBO01BQUE7TUFBQSxDQUFBNUQsY0FBQSxHQUFBRSxDQUFBLFFBQWtCYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQ2tCLGdCQUFnQjtNQUFBO01BQUFsQyxjQUFBLEdBQUFFLENBQUE7TUFDNURpQixnQkFBQSxDQUFpQnlDLGVBQUE7TUFBQTtNQUFBNUQsY0FBQSxHQUFBRSxDQUFBO01BQ2pCcUIsUUFBQSxDQUFTO01BQUE7TUFBQXZCLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNRLElBQUksQ0FBQ1QsT0FBQSxDQUFBRSxRQUFRLENBQUNRLElBQUksRUFBRSx1QkFBdUI7UUFBRVksU0FBQSxFQUFXRixPQUFBLENBQVFHO01BQUcsR0FBR3ZCLE9BQUEsQ0FBQUksV0FBVyxDQUFDQyxNQUFNO0lBQ2pHLEVBQUUsT0FBT1QsR0FBQSxFQUFLO01BQ1osTUFBTUMsWUFBQTtNQUFBO01BQUEsQ0FBQXBDLGNBQUEsR0FBQUUsQ0FBQSxRQUFlaUMsR0FBQSxZQUFlRSxLQUFBO01BQUE7TUFBQSxDQUFBckMsY0FBQSxHQUFBMEIsQ0FBQSxVQUFRUyxHQUFBLENBQUlHLE9BQU87TUFBQTtNQUFBLENBQUF0QyxjQUFBLEdBQUEwQixDQUFBLFVBQUc7TUFBQTtNQUFBMUIsY0FBQSxHQUFBRSxDQUFBO01BQzFEcUIsUUFBQSxDQUFTYSxZQUFBO01BQUE7TUFBQXBDLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNsQixLQUFLLENBQUNpQixPQUFBLENBQUFFLFFBQVEsQ0FBQ0MsS0FBSyxFQUFFLCtCQUErQjtRQUFFcEIsS0FBQSxFQUFPYTtNQUFJLEdBQUdJLE9BQUEsQ0FBQUksV0FBVyxDQUFDQyxNQUFNO0lBQ2hHO0VBQ0YsR0FBRyxFQUFFO0VBRUwsTUFBTW1CLGtCQUFBO0VBQUE7RUFBQSxDQUFBL0QsY0FBQSxHQUFBRSxDQUFBLFFBQXFCLElBQUFPLE1BQUEsQ0FBQXFDLFdBQVcsRUFBRWUsU0FBQTtJQUFBO0lBQUE3RCxjQUFBLEdBQUFJLENBQUE7SUFBQUosY0FBQSxHQUFBRSxDQUFBO0lBQ3RDLElBQUk7TUFBQTtNQUFBRixjQUFBLEdBQUFFLENBQUE7TUFDRmEsb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUMrQyxrQkFBa0IsQ0FBQ0YsU0FBQTtNQUN2QyxNQUFNRCxlQUFBO01BQUE7TUFBQSxDQUFBNUQsY0FBQSxHQUFBRSxDQUFBLFFBQWtCYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQ2tCLGdCQUFnQjtNQUFBO01BQUFsQyxjQUFBLEdBQUFFLENBQUE7TUFDNURpQixnQkFBQSxDQUFpQnlDLGVBQUE7TUFBQTtNQUFBNUQsY0FBQSxHQUFBRSxDQUFBO01BQ2pCcUIsUUFBQSxDQUFTO01BQUE7TUFBQXZCLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUMsT0FBQSxDQUFBQyxNQUFNLENBQUNRLElBQUksQ0FBQ1QsT0FBQSxDQUFBRSxRQUFRLENBQUNRLElBQUksRUFBRSx5QkFBeUI7UUFBRVk7TUFBVSxHQUFHdEIsT0FBQSxDQUFBSSxXQUFXLENBQUNDLE1BQU07SUFDdkYsRUFBRSxPQUFPVCxHQUFBLEVBQUs7TUFDWixNQUFNQyxZQUFBO01BQUE7TUFBQSxDQUFBcEMsY0FBQSxHQUFBRSxDQUFBLFFBQWVpQyxHQUFBLFlBQWVFLEtBQUE7TUFBQTtNQUFBLENBQUFyQyxjQUFBLEdBQUEwQixDQUFBLFVBQVFTLEdBQUEsQ0FBSUcsT0FBTztNQUFBO01BQUEsQ0FBQXRDLGNBQUEsR0FBQTBCLENBQUEsVUFBRztNQUFBO01BQUExQixjQUFBLEdBQUFFLENBQUE7TUFDMURxQixRQUFBLENBQVNhLFlBQUE7TUFBQTtNQUFBcEMsY0FBQSxHQUFBRSxDQUFBO01BQ1RxQyxPQUFBLENBQUFDLE1BQU0sQ0FBQ2xCLEtBQUssQ0FBQ2lCLE9BQUEsQ0FBQUUsUUFBUSxDQUFDQyxLQUFLLEVBQUUsa0NBQWtDO1FBQUVwQixLQUFBLEVBQU9hO01BQUksR0FBR0ksT0FBQSxDQUFBSSxXQUFXLENBQUNDLE1BQU07SUFDbkc7RUFDRixHQUFHLEVBQUU7RUFFTCxNQUFNZixZQUFBO0VBQUE7RUFBQSxDQUFBN0IsY0FBQSxHQUFBRSxDQUFBLFFBQWUsSUFBQU8sTUFBQSxDQUFBcUMsV0FBVyxFQUFDO0lBQUE7SUFBQTlDLGNBQUEsR0FBQUksQ0FBQTtJQUFBSixjQUFBLEdBQUFFLENBQUE7SUFDL0IsSUFBSTtNQUNGLE1BQU04RCxRQUFBO01BQUE7TUFBQSxDQUFBaEUsY0FBQSxHQUFBRSxDQUFBLFFBQVcsTUFBTWEsb0JBQUEsQ0FBQUMsbUJBQW1CLENBQUNpRCxrQkFBa0I7TUFBQTtNQUFBakUsY0FBQSxHQUFBRSxDQUFBO01BQzdEVSxRQUFBLENBQVNvRCxRQUFBO01BQUE7TUFBQWhFLGNBQUEsR0FBQUUsQ0FBQTtNQUNUcUIsUUFBQSxDQUFTO0lBQ1gsRUFBRSxPQUFPWSxHQUFBLEVBQUs7TUFDWixNQUFNQyxZQUFBO01BQUE7TUFBQSxDQUFBcEMsY0FBQSxHQUFBRSxDQUFBLFNBQWVpQyxHQUFBLFlBQWVFLEtBQUE7TUFBQTtNQUFBLENBQUFyQyxjQUFBLEdBQUEwQixDQUFBLFVBQVFTLEdBQUEsQ0FBSUcsT0FBTztNQUFBO01BQUEsQ0FBQXRDLGNBQUEsR0FBQTBCLENBQUEsVUFBRztNQUFBO01BQUExQixjQUFBLEdBQUFFLENBQUE7TUFDMURxQixRQUFBLENBQVNhLFlBQUE7TUFBQTtNQUFBcEMsY0FBQSxHQUFBRSxDQUFBO01BQ1RxQyxPQUFBLENBQUFDLE1BQU0sQ0FBQ2xCLEtBQUssQ0FBQ2lCLE9BQUEsQ0FBQUUsUUFBUSxDQUFDQyxLQUFLLEVBQUUsMkJBQTJCO1FBQUVwQixLQUFBLEVBQU9hO01BQUksR0FBR0ksT0FBQSxDQUFBSSxXQUFXLENBQUNDLE1BQU07SUFDNUY7RUFDRixHQUFHLEVBQUU7RUFFTCxNQUFNc0IsZUFBQTtFQUFBO0VBQUEsQ0FBQWxFLGNBQUEsR0FBQUUsQ0FBQSxTQUFrQixJQUFBTyxNQUFBLENBQUFxQyxXQUFXLEVBQUM7SUFBQTtJQUFBOUMsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUUsQ0FBQTtJQUNsQyxJQUFJLENBQUNTLEtBQUEsRUFBT3dELFlBQUEsRUFBYztNQUFBO01BQUFuRSxjQUFBLEdBQUEwQixDQUFBO01BQUExQixjQUFBLEdBQUFFLENBQUE7TUFBQyxPQUFPO0lBQVM7SUFBQTtJQUFBO01BQUFGLGNBQUEsR0FBQTBCLENBQUE7SUFBQTtJQUFBMUIsY0FBQSxHQUFBRSxDQUFBO0lBQzNDLE9BQU9TLEtBQUEsQ0FBTXdELFlBQVksQ0FBQ0MsTUFBTTtFQUNsQyxHQUFHLENBQUN6RCxLQUFBLENBQU07RUFFVixNQUFNMEQsY0FBQTtFQUFBO0VBQUEsQ0FBQXJFLGNBQUEsR0FBQUUsQ0FBQSxTQUFpQixJQUFBTyxNQUFBLENBQUFxQyxXQUFXLEVBQUM7SUFBQTtJQUFBOUMsY0FBQSxHQUFBSSxDQUFBO0lBQ2pDLE1BQU1nRSxNQUFBO0lBQUE7SUFBQSxDQUFBcEUsY0FBQSxHQUFBRSxDQUFBLFNBQVNnRSxlQUFBO0lBQUE7SUFBQWxFLGNBQUEsR0FBQUUsQ0FBQTtJQUNmLFFBQVFrRSxNQUFBO01BQ04sS0FBSztRQUFBO1FBQUFwRSxjQUFBLEdBQUEwQixDQUFBO1FBQUExQixjQUFBLEdBQUFFLENBQUE7UUFDSCxPQUFPO01BQ1QsS0FBSztRQUFBO1FBQUFGLGNBQUEsR0FBQTBCLENBQUE7UUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtRQUNILE9BQU87TUFDVCxLQUFLO1FBQUE7UUFBQUYsY0FBQSxHQUFBMEIsQ0FBQTtRQUFBMUIsY0FBQSxHQUFBRSxDQUFBO1FBQ0gsT0FBTztNQUNULEtBQUs7UUFBQTtRQUFBRixjQUFBLEdBQUEwQixDQUFBO1FBQUExQixjQUFBLEdBQUFFLENBQUE7UUFDSCxPQUFPO01BQ1Q7UUFBQTtRQUFBRixjQUFBLEdBQUEwQixDQUFBO1FBQUExQixjQUFBLEdBQUFFLENBQUE7UUFDRSxPQUFPO0lBQ1g7RUFDRixHQUFHLENBQUNnRSxlQUFBLENBQWdCO0VBRXBCLE1BQU1JLGFBQUE7RUFBQTtFQUFBLENBQUF0RSxjQUFBLEdBQUFFLENBQUEsU0FBZ0IsSUFBQU8sTUFBQSxDQUFBcUMsV0FBVyxFQUFDO0lBQUE7SUFBQTlDLGNBQUEsR0FBQUksQ0FBQTtJQUNoQyxNQUFNZ0UsTUFBQTtJQUFBO0lBQUEsQ0FBQXBFLGNBQUEsR0FBQUUsQ0FBQSxTQUFTZ0UsZUFBQTtJQUFBO0lBQUFsRSxjQUFBLEdBQUFFLENBQUE7SUFDZixRQUFRa0UsTUFBQTtNQUNOLEtBQUs7UUFBQTtRQUFBcEUsY0FBQSxHQUFBMEIsQ0FBQTtRQUFBMUIsY0FBQSxHQUFBRSxDQUFBO1FBQ0gsT0FBTztNQUNULEtBQUs7UUFBQTtRQUFBRixjQUFBLEdBQUEwQixDQUFBO1FBQUExQixjQUFBLEdBQUFFLENBQUE7UUFDSCxPQUFPO01BQ1QsS0FBSztRQUFBO1FBQUFGLGNBQUEsR0FBQTBCLENBQUE7UUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtRQUNILE9BQU87TUFDVCxLQUFLO1FBQUE7UUFBQUYsY0FBQSxHQUFBMEIsQ0FBQTtRQUFBMUIsY0FBQSxHQUFBRSxDQUFBO1FBQ0gsT0FBTztNQUNUO1FBQUE7UUFBQUYsY0FBQSxHQUFBMEIsQ0FBQTtRQUFBMUIsY0FBQSxHQUFBRSxDQUFBO1FBQ0UsT0FBTztJQUNYO0VBQ0YsR0FBRyxDQUFDZ0UsZUFBQSxDQUFnQjtFQUFBO0VBQUFsRSxjQUFBLEdBQUFFLENBQUE7RUFFcEIsT0FBTztJQUNMO0lBQ0FLLFlBQUE7SUFDQUksS0FBQTtJQUNBRSxNQUFBO0lBQ0FLLGFBQUE7SUFDQUUsT0FBQTtJQUNBRSxLQUFBO0lBRUE7SUFDQXVCLGVBQUE7SUFDQUssY0FBQTtJQUNBSSxXQUFBLEVBQWFGLGlCQUFBO0lBQ2JHLFlBQUE7SUFDQUcsZUFBQTtJQUNBSyxrQkFBQTtJQUNBbEMsWUFBQTtJQUVBO0lBQ0FxQyxlQUFBO0lBQ0FHLGNBQUE7SUFDQUM7RUFDRjtBQUNGO0FBS08sU0FBU25FLGtCQUFBO0VBQUE7RUFBQUgsY0FBQSxHQUFBSSxDQUFBO0VBQ2QsTUFBTW1FLG1CQUFBO0VBQUE7RUFBQSxDQUFBdkUsY0FBQSxHQUFBRSxDQUFBLFNBQXNCLElBQUFPLE1BQUEsQ0FBQXFDLFdBQVcsRUFBQyxPQUFPeEIsS0FBQSxFQUF1QitCLE9BQUE7SUFBQTtJQUFBckQsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUUsQ0FBQTtJQUNwRSxJQUFJO01BQUE7TUFBQUYsY0FBQSxHQUFBRSxDQUFBO01BQ0YsTUFBTSxJQUFBYSxvQkFBQSxDQUFBdUMsV0FBVyxFQUFDaEMsS0FBQSxFQUFPK0IsT0FBQTtJQUMzQixFQUFFLE9BQU9sQixHQUFBLEVBQUs7TUFBQTtNQUFBbkMsY0FBQSxHQUFBRSxDQUFBO01BQ1pxQyxPQUFBLENBQUFDLE1BQU0sQ0FBQ2xCLEtBQUssQ0FBQ2lCLE9BQUEsQ0FBQUUsUUFBUSxDQUFDQyxLQUFLLEVBQUUsMEJBQTBCO1FBQUVwQixLQUFBLEVBQU9hO01BQUksR0FBR0ksT0FBQSxDQUFBSSxXQUFXLENBQUNDLE1BQU07SUFDM0Y7RUFDRixHQUFHLEVBQUU7RUFBQTtFQUFBNUMsY0FBQSxHQUFBRSxDQUFBO0VBRUwsT0FBTztJQUFFb0QsV0FBQSxFQUFhaUI7RUFBb0I7QUFDNUM7QUFLTyxTQUFTakUsZ0JBQUE7RUFBQTtFQUFBTixjQUFBLEdBQUFJLENBQUE7RUFDZCxNQUFNLENBQUNvRSxNQUFBLEVBQVFDLFNBQUEsQ0FBVTtFQUFBO0VBQUEsQ0FBQXpFLGNBQUEsR0FBQUUsQ0FBQSxTQUFHLElBQUFPLE1BQUEsQ0FBQUMsUUFBUSxFQUFzQjtFQUMxRCxNQUFNLENBQUNVLE9BQUEsRUFBU0MsVUFBQSxDQUFXO0VBQUE7RUFBQSxDQUFBckIsY0FBQSxHQUFBRSxDQUFBLFNBQUcsSUFBQU8sTUFBQSxDQUFBQyxRQUFRLEVBQUM7RUFBQTtFQUFBVixjQUFBLEdBQUFFLENBQUE7RUFFdkMsSUFBQU8sTUFBQSxDQUFBZSxTQUFTLEVBQUM7SUFBQTtJQUFBeEIsY0FBQSxHQUFBSSxDQUFBO0lBQUFKLGNBQUEsR0FBQUUsQ0FBQTtJQUNSLE1BQU13RSxVQUFBLEdBQWEsTUFBQUEsQ0FBQTtNQUFBO01BQUExRSxjQUFBLEdBQUFJLENBQUE7TUFBQUosY0FBQSxHQUFBRSxDQUFBO01BQ2pCLElBQUk7UUFDRixNQUFNUyxLQUFBO1FBQUE7UUFBQSxDQUFBWCxjQUFBLEdBQUFFLENBQUEsU0FBUSxNQUFNYSxvQkFBQSxDQUFBQyxtQkFBbUIsQ0FBQ2lELGtCQUFrQjtRQUFBO1FBQUFqRSxjQUFBLEdBQUFFLENBQUE7UUFDMUR1RSxTQUFBLENBQVU5RCxLQUFBLENBQU13RCxZQUFZO01BQzlCLEVBQUUsT0FBT2hDLEdBQUEsRUFBSztRQUFBO1FBQUFuQyxjQUFBLEdBQUFFLENBQUE7UUFDWnFDLE9BQUEsQ0FBQUMsTUFBTSxDQUFDbEIsS0FBSyxDQUFDaUIsT0FBQSxDQUFBRSxRQUFRLENBQUNDLEtBQUssRUFBRSxnQ0FBZ0M7VUFBRXBCLEtBQUEsRUFBT2E7UUFBSSxHQUFHSSxPQUFBLENBQUFJLFdBQVcsQ0FBQ0MsTUFBTTtNQUNqRyxVQUFVO1FBQUE7UUFBQTVDLGNBQUEsR0FBQUUsQ0FBQTtRQUNSbUIsVUFBQSxDQUFXO01BQ2I7SUFDRjtJQUFBO0lBQUFyQixjQUFBLEdBQUFFLENBQUE7SUFFQXdFLFVBQUE7SUFFQTtJQUNBLE1BQU0vQyxRQUFBO0lBQUE7SUFBQSxDQUFBM0IsY0FBQSxHQUFBRSxDQUFBLFNBQVcwQixXQUFBLENBQVk4QyxVQUFBLEVBQVk7SUFBQTtJQUFBMUUsY0FBQSxHQUFBRSxDQUFBO0lBQ3pDLE9BQU8sTUFBTTtNQUFBO01BQUFGLGNBQUEsR0FBQUksQ0FBQTtNQUFBSixjQUFBLEdBQUFFLENBQUE7TUFBQSxPQUFBNEIsYUFBQSxDQUFjSCxRQUFBO0lBQUE7RUFDN0IsR0FBRyxFQUFFO0VBQUE7RUFBQTNCLGNBQUEsR0FBQUUsQ0FBQTtFQUVMLE9BQU87SUFBRXNFLE1BQUE7SUFBUXBEO0VBQVE7QUFDM0IiLCJpZ25vcmVMaXN0IjpbXX0=