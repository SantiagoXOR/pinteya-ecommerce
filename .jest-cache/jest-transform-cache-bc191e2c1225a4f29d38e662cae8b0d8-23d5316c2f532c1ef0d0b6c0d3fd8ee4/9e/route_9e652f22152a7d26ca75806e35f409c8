861a8f951debd6669e1b1af5cd245652
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _supabase = require("../../../lib/integrations/supabase");
const _validations = require("../../../lib/validations");
const _ratelimiter = require("../../../lib/rate-limiting/rate-limiter");
const _apitimeouts = require("../../../lib/config/api-timeouts");
const _securitylogger = require("../../../lib/logging/security-logger");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const runtime = 'nodejs';
async function GET(request) {
    // Crear logger de seguridad con contexto
    const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
    // Aplicar rate limiting
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.products, async ()=>{
        try {
            const { searchParams } = new URL(request.url);
            // Extraer parámetros de query
            const queryParams = {
                category: searchParams.get('category') || undefined,
                categories: searchParams.get('categories')?.split(',').filter(Boolean) || undefined,
                brand: searchParams.get('brand') || undefined,
                brands: searchParams.get('brands')?.split(',').filter(Boolean) || undefined,
                paintType: searchParams.get('paintType') || undefined,
                paintTypes: searchParams.get('paintTypes')?.split(',').filter(Boolean) || undefined,
                priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,
                priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,
                search: searchParams.get('search') || undefined,
                page: searchParams.get('page') ? Number(searchParams.get('page')) : 1,
                limit: searchParams.get('limit') ? Number(searchParams.get('limit')) : 12,
                sortBy: searchParams.get('sortBy') || 'created_at',
                sortOrder: searchParams.get('sortOrder') || 'desc'
            };
            // Validar parámetros de manera segura
            const validationResult = (0, _validations.safeValidateData)(_validations.ProductFiltersSchema, queryParams);
            if (!validationResult.success) {
                // Log de error de validación con contexto de seguridad
                securityLogger.log({
                    type: 'validation_error',
                    severity: 'medium',
                    message: 'Invalid parameters in products API',
                    context: securityLogger.context,
                    metadata: {
                        validationError: validationResult.error,
                        queryParams
                    }
                });
                const errorResponse = {
                    data: null,
                    success: false,
                    error: `Parámetros inválidos: ${validationResult.error}`
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 400
                });
            }
            const filters = validationResult.data;
            // Log de acceso a datos con contexto
            securityLogger.log({
                type: 'data_access',
                severity: 'low',
                message: 'Products API accessed',
                context: securityLogger.context,
                metadata: {
                    filters: filters,
                    hasSearch: !!filters.search,
                    hasFilters: !!(filters.category || filters.brand || filters.paintType)
                }
            });
            const supabase = (0, _supabase.getSupabaseClient)();
            // Verificar que el cliente de Supabase esté disponible
            if (!supabase) {
                securityLogger.logApiError(securityLogger.context, new Error('Supabase client not available'), {
                    service: 'supabase'
                });
                const errorResponse = {
                    data: null,
                    success: false,
                    error: 'Servicio de base de datos no disponible'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 503
                });
            }
            // Construir query base optimizada (solo campos necesarios)
            // Usar timeout centralizado para operaciones de base de datos
            const result = await (0, _apitimeouts.withDatabaseTimeout)(async (signal)=>{
                let query = supabase.from('products').select(`
              id, name, slug, price, discounted_price, brand, stock, images,
              category:categories(id, name, slug)
            `, {
                    count: 'exact'
                });
                // Aplicar filtros
                if (filters.category) {
                    // Primero obtener el ID de la categoría por su slug
                    const { data: categoryData } = await supabase.from('categories').select('id').eq('slug', filters.category).single();
                    if (categoryData) {
                        query = query.eq('category_id', categoryData.id);
                    }
                }
                // Filtro por múltiples categorías (nuevo)
                if (filters.categories && filters.categories.length > 0) {
                    const { data: categoriesData } = await supabase.from('categories').select('id').in('slug', filters.categories);
                    if (categoriesData && categoriesData.length > 0) {
                        const categoryIds = categoriesData.map((cat)=>cat.id);
                        query = query.in('category_id', categoryIds);
                    }
                }
                if (filters.brand) {
                    query = query.eq('brand', filters.brand);
                }
                // Filtro por múltiples marcas (nuevo)
                if (filters.brands && filters.brands.length > 0) {
                    query = query.in('brand', filters.brands);
                }
                // Filtro por tipo de pintura (nuevo)
                if (filters.paintType) {
                    query = query.eq('paint_type', filters.paintType);
                }
                // Filtro por múltiples tipos de pintura (nuevo)
                if (filters.paintTypes && filters.paintTypes.length > 0) {
                    query = query.in('paint_type', filters.paintTypes);
                }
                if (filters.priceMin) {
                    query = query.gte('price', filters.priceMin);
                }
                if (filters.priceMax) {
                    query = query.lte('price', filters.priceMax);
                }
                if (filters.search) {
                    query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,brand.ilike.%${filters.search}%`);
                }
                // Filtro por productos con descuento real (discounted_price < price)
                if (filters.hasDiscount) {
                    query = query.not('discounted_price', 'is', null).lt('discounted_price', 'price');
                }
                // Solo productos con stock (temporalmente comentado para testing)
                // query = query.gt('stock', 0);
                // Ordenamiento
                const orderColumn = filters.sortBy === 'created_at' ? 'created_at' : filters.sortBy === 'brand' ? 'brand' : filters.sortBy || 'created_at';
                query = query.order(orderColumn, {
                    ascending: filters.sortOrder === 'asc'
                });
                // Paginación
                const page = filters.page || 1;
                const limit = filters.limit || 10;
                const from = (page - 1) * limit;
                const to = from + limit - 1;
                query = query.range(from, to);
                // Ejecutar query con timeout
                return await query;
            }, _apitimeouts.API_TIMEOUTS.database);
            const { data: products, error, count } = result;
            if (error) {
                // Log de error de base de datos con contexto de seguridad
                securityLogger.logApiError(securityLogger.context, new Error(`Supabase error: ${error.message}`), {
                    supabaseError: error,
                    filters: filters,
                    operation: 'products_query'
                });
                const errorResponse = {
                    data: null,
                    success: false,
                    error: error.message || 'Error obteniendo productos de la base de datos'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 500
                });
            }
            // Calcular información de paginación
            const page = filters.page || 1;
            const limit = filters.limit || 10;
            const totalPages = Math.ceil((count || 0) / limit);
            // Log de operación exitosa
            securityLogger.log({
                type: 'data_access',
                severity: 'low',
                message: 'Products retrieved successfully',
                context: securityLogger.context,
                metadata: {
                    productsCount: products?.length || 0,
                    totalCount: count || 0,
                    page,
                    limit,
                    filters: filters
                }
            });
            const response = {
                data: products || [],
                pagination: {
                    page,
                    limit,
                    total: count || 0,
                    totalPages
                },
                success: true,
                message: `${products?.length || 0} productos encontrados`
            };
            // Agregar headers de cache para mejorar performance
            return _server.NextResponse.json(response, {
                headers: {
                    'Cache-Control': 'public, s-maxage=60, stale-while-revalidate=300',
                    'Content-Type': 'application/json'
                }
            });
        } catch (error) {
            // Log de error general con contexto de seguridad
            securityLogger.logApiError(securityLogger.context, error, {
                operation: 'products_get',
                stage: 'database_operation'
            });
            const errorResponse = {
                data: null,
                success: false,
                error: error.message || 'Error interno del servidor'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
    });
    // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla
    if (rateLimitResult instanceof _server.NextResponse) {
        // Log de rate limit excedido
        securityLogger.logRateLimitExceeded(securityLogger.context, {
            endpoint: '/api/products',
            method: 'GET'
        });
        return rateLimitResult;
    }
    return rateLimitResult;
}
async function POST(request) {
    // Crear logger de seguridad con contexto
    const securityLogger = (0, _securitylogger.createSecurityLogger)(request);
    // Aplicar rate limiting para operaciones de creación
    const rateLimitResult = await (0, _ratelimiter.withRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.creation, async ()=>{
        try {
            // ENTERPRISE: Usar nueva autenticación enterprise para admin
            const { requireAdminAuth } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../lib/auth/enterprise-auth-utils")));
            const authResult = await requireAdminAuth(request, [
                'products_create'
            ]);
            if (!authResult.success) {
                // Log de intento de acceso no autorizado
                securityLogger.logPermissionDenied(securityLogger.context, 'products', 'create');
                return _server.NextResponse.json({
                    error: authResult.error,
                    code: authResult.code,
                    enterprise: true,
                    timestamp: new Date().toISOString()
                }, {
                    status: authResult.status || 401
                });
            }
            const context = authResult.context;
            // Actualizar contexto del logger con información del usuario
            securityLogger.context.userId = context.userId;
            const body = await request.json();
            // Log de acción administrativa
            securityLogger.logAdminAction(securityLogger.context, 'create_product', {
                productName: body.name,
                category: body.category_id
            });
            // Validar datos del producto
            const productData = (0, _validations.validateData)(_validations.ProductSchema, body);
            const supabase = (0, _supabase.getSupabaseClient)(true) // Usar cliente admin
            ;
            // Verificar que el cliente administrativo esté disponible
            if (!supabase) {
                securityLogger.logApiError(securityLogger.context, new Error('Admin Supabase client not available'), {
                    service: 'supabase_admin'
                });
                const errorResponse = {
                    data: null,
                    success: false,
                    error: 'Servicio administrativo no disponible'
                };
                return _server.NextResponse.json(errorResponse, {
                    status: 503
                });
            }
            // Crear slug si no se proporciona
            if (!productData.slug) {
                productData.slug = productData.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
            }
            // Insertar producto con timeout
            const result = await (0, _apitimeouts.withDatabaseTimeout)(async (signal)=>{
                return await supabase.from('products').insert(productData).select(`
              *,
              category:categories(id, name, slug)
            `).single();
            }, _apitimeouts.API_TIMEOUTS.admin);
            const { data: product, error } = result;
            if (error) {
                securityLogger.logApiError(securityLogger.context, new Error(`Product creation failed: ${error.message}`), {
                    supabaseError: error,
                    productData: {
                        ...productData,
                        images: '[REDACTED]'
                    }
                });
                (0, _supabase.handleSupabaseError)(error, 'POST /api/products');
            }
            // Log de creación exitosa
            securityLogger.logAdminAction(securityLogger.context, 'product_created_successfully', {
                productId: product?.id,
                productName: product?.name,
                category: product?.category?.name
            });
            const response = {
                data: product,
                success: true,
                message: 'Producto creado exitosamente'
            };
            return _server.NextResponse.json(response, {
                status: 201
            });
        } catch (error) {
            // Log de error general en creación de producto
            securityLogger.logApiError(securityLogger.context, error, {
                operation: 'product_creation',
                stage: 'general_error'
            });
            const errorResponse = {
                data: null,
                success: false,
                error: error.message || 'Error interno del servidor'
            };
            return _server.NextResponse.json(errorResponse, {
                status: 500
            });
        }
    });
    // Si withRateLimit devuelve una respuesta (rate limit excedido), devolverla
    if (rateLimitResult instanceof _server.NextResponse) {
        // Log de rate limit excedido para creación
        securityLogger.logRateLimitExceeded(securityLogger.context, {
            endpoint: '/api/products',
            method: 'POST',
            operation: 'product_creation'
        });
        return rateLimitResult;
    }
    return rateLimitResult;
}

//# sourceMappingURL=data:application/json;base64,