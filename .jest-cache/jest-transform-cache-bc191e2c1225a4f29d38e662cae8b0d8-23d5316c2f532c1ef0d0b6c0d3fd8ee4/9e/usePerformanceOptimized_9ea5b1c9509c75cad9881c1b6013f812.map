{"version":3,"names":["cov_qnkyr4mku","actualCoverage","s","default","f","_default","performanceUtils","usePerformanceOptimized","withPerformanceTracking","config","b","trackRender","trackMemory","componentName","threshold","renderStartTime","_react","useRef","measurements","Map","metricsRef","renderTime","memoryUsage","loadTime","componentSize","startMeasurement","useCallback","name","current","set","performance","now","endMeasurement","startTime","get","duration","delete","console","warn","toFixed","useEffect","useMemo","window","memory","usage","usedJSHeapSize","optimizationAnalysis","metrics","recommendations","score","push","Math","max","isOptimized","optimizationScore","Component","PerformanceTrackedComponent","props","mountTime","process","env","NODE_ENV","log","_jsxruntime","jsx","measureFunction","fn","args","start","result","debounce","func","wait","timeout","clearTimeout","setTimeout","throttle","limit","inThrottle","getBrowserMetrics","navigation","getEntriesByType","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","loadComplete","loadEventEnd","loadEventStart","firstPaint","getEntriesByName","firstContentfulPaint"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\performance\\usePerformanceOptimized.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - PERFORMANCE OPTIMIZED HOOK\r\n// Hook para optimización de performance con métricas en tiempo real\r\n// ===================================\r\n\r\nimport { useEffect, useRef, useCallback, useMemo } from 'react';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\ninterface PerformanceMetrics {\r\n  renderTime: number;\r\n  memoryUsage: number;\r\n  loadTime: number;\r\n  componentSize: number;\r\n}\r\n\r\ninterface PerformanceConfig {\r\n  trackRender?: boolean;\r\n  trackMemory?: boolean;\r\n  componentName?: string;\r\n  threshold?: number;\r\n}\r\n\r\ninterface PerformanceHookReturn {\r\n  metrics: PerformanceMetrics;\r\n  isOptimized: boolean;\r\n  optimizationScore: number;\r\n  recommendations: string[];\r\n  startMeasurement: (name: string) => void;\r\n  endMeasurement: (name: string) => number;\r\n}\r\n\r\n// ===================================\r\n// PERFORMANCE OPTIMIZED HOOK\r\n// ===================================\r\n\r\nexport function usePerformanceOptimized(\r\n  config: PerformanceConfig = {}\r\n): PerformanceHookReturn {\r\n  const {\r\n    trackRender = true,\r\n    trackMemory = true,\r\n    componentName = 'Unknown',\r\n    threshold = 16 // 60fps = 16ms per frame\r\n  } = config;\r\n\r\n  const renderStartTime = useRef<number>(0);\r\n  const measurements = useRef<Map<string, number>>(new Map());\r\n  const metricsRef = useRef<PerformanceMetrics>({\r\n    renderTime: 0,\r\n    memoryUsage: 0,\r\n    loadTime: 0,\r\n    componentSize: 0\r\n  });\r\n\r\n  // ===================================\r\n  // MEASUREMENT FUNCTIONS\r\n  // ===================================\r\n\r\n  const startMeasurement = useCallback((name: string) => {\r\n    measurements.current.set(name, performance.now());\r\n  }, []);\r\n\r\n  const endMeasurement = useCallback((name: string): number => {\r\n    const startTime = measurements.current.get(name);\r\n    if (!startTime) return 0;\r\n    \r\n    const duration = performance.now() - startTime;\r\n    measurements.current.delete(name);\r\n    \r\n    // Log si excede el threshold\r\n    if (duration > threshold) {\r\n      console.warn(`[Performance] ${componentName}.${name}: ${duration.toFixed(2)}ms (threshold: ${threshold}ms)`);\r\n    }\r\n    \r\n    return duration;\r\n  }, [componentName, threshold]);\r\n\r\n  // ===================================\r\n  // RENDER TRACKING\r\n  // ===================================\r\n\r\n  useEffect(() => {\r\n    if (!trackRender) return;\r\n\r\n    renderStartTime.current = performance.now();\r\n    \r\n    return () => {\r\n      const renderTime = performance.now() - renderStartTime.current;\r\n      metricsRef.current.renderTime = renderTime;\r\n      \r\n      if (renderTime > threshold) {\r\n        console.warn(`[Performance] ${componentName} render: ${renderTime.toFixed(2)}ms`);\r\n      }\r\n    };\r\n  });\r\n\r\n  // ===================================\r\n  // MEMORY TRACKING\r\n  // ===================================\r\n\r\n  const memoryUsage = useMemo(() => {\r\n    if (!trackMemory || typeof window === 'undefined') return 0;\r\n\r\n    // @ts-ignore - performance.memory es experimental\r\n    const memory = (performance as any).memory;\r\n    if (!memory) return 0;\r\n\r\n    const usage = memory.usedJSHeapSize / 1024 / 1024; // MB\r\n    metricsRef.current.memoryUsage = usage;\r\n    \r\n    return usage;\r\n  }, [trackMemory]);\r\n\r\n  // ===================================\r\n  // OPTIMIZATION ANALYSIS\r\n  // ===================================\r\n\r\n  const optimizationAnalysis = useMemo(() => {\r\n    const metrics = metricsRef.current;\r\n    const recommendations: string[] = [];\r\n    let score = 100;\r\n\r\n    // Analizar render time\r\n    if (metrics.renderTime > threshold) {\r\n      score -= 20;\r\n      recommendations.push(`Render time (${metrics.renderTime.toFixed(2)}ms) excede threshold (${threshold}ms). Considera React.memo o useMemo.`);\r\n    }\r\n\r\n    // Analizar memory usage\r\n    if (metrics.memoryUsage > 50) { // 50MB\r\n      score -= 15;\r\n      recommendations.push(`Uso de memoria alto (${metrics.memoryUsage.toFixed(2)}MB). Revisa memory leaks.`);\r\n    }\r\n\r\n    // Recomendaciones generales\r\n    if (score < 80) {\r\n      recommendations.push('Considera implementar lazy loading para componentes pesados.');\r\n      recommendations.push('Usa React.memo para componentes que no cambian frecuentemente.');\r\n      recommendations.push('Implementa useMemo y useCallback para cálculos costosos.');\r\n    }\r\n\r\n    return {\r\n      score: Math.max(0, score),\r\n      recommendations,\r\n      isOptimized: score >= 80\r\n    };\r\n  }, [threshold]);\r\n\r\n  // ===================================\r\n  // RETURN VALUE\r\n  // ===================================\r\n\r\n  return {\r\n    metrics: {\r\n      ...metricsRef.current,\r\n      memoryUsage\r\n    },\r\n    isOptimized: optimizationAnalysis.isOptimized,\r\n    optimizationScore: optimizationAnalysis.score,\r\n    recommendations: optimizationAnalysis.recommendations,\r\n    startMeasurement,\r\n    endMeasurement\r\n  };\r\n}\r\n\r\n// ===================================\r\n// PERFORMANCE HOC\r\n// ===================================\r\n\r\nexport function withPerformanceTracking<T extends object>(\r\n  Component: React.ComponentType<T>,\r\n  componentName?: string\r\n) {\r\n  return function PerformanceTrackedComponent(props: T) {\r\n    const { startMeasurement, endMeasurement, isOptimized, optimizationScore } = \r\n      usePerformanceOptimized({ componentName: componentName || Component.name });\r\n\r\n    useEffect(() => {\r\n      startMeasurement('mount');\r\n      return () => {\r\n        const mountTime = endMeasurement('mount');\r\n        \r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.log(`[Performance] ${componentName || Component.name}:`, {\r\n            mountTime: `${mountTime.toFixed(2)}ms`,\r\n            isOptimized,\r\n            score: `${optimizationScore}/100`\r\n          });\r\n        }\r\n      };\r\n    }, [startMeasurement, endMeasurement, isOptimized, optimizationScore]);\r\n\r\n    return <Component {...props} />;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// PERFORMANCE UTILITIES\r\n// ===================================\r\n\r\nexport const performanceUtils = {\r\n  /**\r\n   * Medir tiempo de ejecución de una función\r\n   */\r\n  measureFunction: <T extends (...args: any[]) => any>(\r\n    fn: T,\r\n    name: string\r\n  ): T => {\r\n    return ((...args: Parameters<T>) => {\r\n      const start = performance.now();\r\n      const result = fn(...args);\r\n      const duration = performance.now() - start;\r\n      \r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log(`[Performance] ${name}: ${duration.toFixed(2)}ms`);\r\n      }\r\n      \r\n      return result;\r\n    }) as T;\r\n  },\r\n\r\n  /**\r\n   * Debounce optimizado para performance\r\n   */\r\n  debounce: <T extends (...args: any[]) => any>(\r\n    func: T,\r\n    wait: number\r\n  ): T => {\r\n    let timeout: NodeJS.Timeout;\r\n    \r\n    return ((...args: Parameters<T>) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func(...args), wait);\r\n    }) as T;\r\n  },\r\n\r\n  /**\r\n   * Throttle optimizado para performance\r\n   */\r\n  throttle: <T extends (...args: any[]) => any>(\r\n    func: T,\r\n    limit: number\r\n  ): T => {\r\n    let inThrottle: boolean;\r\n    \r\n    return ((...args: Parameters<T>) => {\r\n      if (!inThrottle) {\r\n        func(...args);\r\n        inThrottle = true;\r\n        setTimeout(() => inThrottle = false, limit);\r\n      }\r\n    }) as T;\r\n  },\r\n\r\n  /**\r\n   * Obtener métricas de performance del navegador\r\n   */\r\n  getBrowserMetrics: () => {\r\n    if (typeof window === 'undefined') return null;\r\n\r\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\r\n    \r\n    return {\r\n      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n      loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\r\n      firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0,\r\n      firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0,\r\n      // @ts-ignore\r\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0\r\n    };\r\n  }\r\n};\r\n\r\nexport default usePerformanceOptimized;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}