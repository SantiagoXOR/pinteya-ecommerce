{"version":3,"names":["cov_1tjb6j05ib","actualCoverage","s","POST","f","runtime","request","session","_config","auth","user","email","b","_server","NextResponse","json","error","status","supabase","_server1","createClient","data","driver","driverError","from","select","eq","single","body","orderId","deliveryLocation","deliveryNotes","deliveryPhoto","recipientName","deliveryTime","order","orderError","fulfillment_status","updateError","update","updated_at","Date","toISOString","notes","trim","console","deliveryRecord","order_id","driver_id","id","delivery_time","delivery_location","JSON","stringify","delivery_notes","recipient_name","delivery_photo","created_at","deliveryError","insert","warn","err","updatedOrder","fetchError","activity_type","location","order_number","success","message","orderNumber","name","first_name","last_name","deliveryDetails","hasPhoto"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\complete-delivery\\route.ts"],"sourcesContent":["// Configuraci칩n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para marcar entregas como completadas\r\n * POST /api/driver/complete-delivery\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\n\r\n\r\n\r\ninterface CompleteDeliveryRequest {\r\n  orderId: number;\r\n  deliveryLocation?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  deliveryNotes?: string;\r\n  deliveryPhoto?: string; // Base64 encoded image\r\n  recipientName?: string;\r\n  deliveryTime?: string;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci칩n\r\n    const session = await auth();\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Configurar Supabase\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que el usuario sea un driver\r\n    const { data: driver, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, first_name, last_name, status')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (driverError || !driver) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    const body: CompleteDeliveryRequest = await request.json();\r\n    const { \r\n      orderId, \r\n      deliveryLocation, \r\n      deliveryNotes, \r\n      deliveryPhoto, \r\n      recipientName,\r\n      deliveryTime \r\n    } = body;\r\n\r\n    if (!orderId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de orden requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la orden existe y est치 pendiente\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, fulfillment_status, total, order_number')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      return NextResponse.json(\r\n        { error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (order.fulfillment_status === 'fulfilled') {\r\n      return NextResponse.json(\r\n        { error: 'Esta orden ya fue entregada' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar el estado de la orden\r\n    const { error: updateError } = await supabase\r\n      .from('orders')\r\n      .update({\r\n        fulfillment_status: 'fulfilled',\r\n        updated_at: new Date().toISOString(),\r\n        notes: deliveryNotes ? `${order.notes || ''}\\n\\nEntrega completada: ${deliveryNotes}`.trim() : order.notes\r\n      })\r\n      .eq('id', orderId);\r\n\r\n    if (updateError) {\r\n      console.error('Error updating order:', updateError);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar la orden' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Crear registro de entrega\r\n    const deliveryRecord = {\r\n      order_id: orderId,\r\n      driver_id: driver.id,\r\n      delivery_time: deliveryTime || new Date().toISOString(),\r\n      delivery_location: deliveryLocation ? JSON.stringify(deliveryLocation) : null,\r\n      delivery_notes: deliveryNotes || null,\r\n      recipient_name: recipientName || null,\r\n      delivery_photo: deliveryPhoto || null,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    // Intentar insertar en tabla de entregas (si existe)\r\n    try {\r\n      const { error: deliveryError } = await supabase\r\n        .from('deliveries')\r\n        .insert(deliveryRecord);\r\n\r\n      if (deliveryError) {\r\n        console.warn('Could not insert delivery record:', deliveryError);\r\n        // No fallar si la tabla no existe, solo logear\r\n      }\r\n    } catch (err) {\r\n      console.warn('Deliveries table might not exist:', err);\r\n    }\r\n\r\n    // Obtener informaci칩n actualizada de la orden\r\n    const { data: updatedOrder, error: fetchError } = await supabase\r\n      .from('orders')\r\n      .select(`\r\n        id,\r\n        total,\r\n        status,\r\n        fulfillment_status,\r\n        order_number,\r\n        shipping_address,\r\n        created_at,\r\n        updated_at,\r\n        order_items (\r\n          id,\r\n          quantity,\r\n          price,\r\n          products (\r\n            name\r\n          )\r\n        )\r\n      `)\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      console.error('Error fetching updated order:', fetchError);\r\n    }\r\n\r\n    // Registrar actividad del driver\r\n    try {\r\n      await supabase\r\n        .from('driver_activities')\r\n        .insert({\r\n          driver_id: driver.id,\r\n          activity_type: 'delivery_completed',\r\n          order_id: orderId,\r\n          location: deliveryLocation ? JSON.stringify(deliveryLocation) : null,\r\n          notes: `Entrega completada para orden ${order.order_number || `#${orderId}`}`,\r\n          created_at: new Date().toISOString()\r\n        });\r\n    } catch (err) {\r\n      console.warn('Could not log driver activity:', err);\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Entrega marcada como completada exitosamente',\r\n      data: {\r\n        orderId,\r\n        orderNumber: order.order_number || `#${orderId}`,\r\n        deliveryTime: deliveryTime || new Date().toISOString(),\r\n        driver: {\r\n          id: driver.id,\r\n          name: `${driver.first_name} ${driver.last_name}`\r\n        },\r\n        order: updatedOrder || order,\r\n        deliveryDetails: {\r\n          location: deliveryLocation,\r\n          notes: deliveryNotes,\r\n          recipientName,\r\n          hasPhoto: !!deliveryPhoto\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in complete-delivery API:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}