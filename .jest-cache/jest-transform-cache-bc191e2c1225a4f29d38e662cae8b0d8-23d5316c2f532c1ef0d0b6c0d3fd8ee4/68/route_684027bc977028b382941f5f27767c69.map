{"version":3,"names":["cov_1tc3svulig","actualCoverage","s","DELETE","f","GET","PATCH","POST","runtime","validateAdmin","console","log","session","_config","auth","b","user","error","status","email","supabase","_server1","createAdminClient","data","userProfile","userError","from","select","eq","single","roleData","roleError","role_id","role_name","success","userId","id","request","validation","_server","NextResponse","json","createClient","searchParams","URL","url","get","driverId","limit","parseInt","offset","query","order","ascending","range","routes","processedRoutes","map","route","shipments","waypoints","start_location","body","name","total_distance","estimated_time","driver_id","vehicle","optimization_score","Array","isArray","routeError","insert","created_at","Date","toISOString","updated_at","length","shipmentIds","filter","Boolean","updateError","update","route_id","in","updates","existingRoute","checkError","deleteError","delete"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTIÓN DE RUTAS OPTIMIZADAS\r\n// Ruta: /api/admin/logistics/routes\r\n// Descripción: CRUD para rutas de logística optimizadas\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient, createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\ninterface OptimizedRoute {\r\n  id?: string;\r\n  name: string;\r\n  shipments: any[];\r\n  total_distance: number;\r\n  estimated_time: number;\r\n  driver_id?: string;\r\n  vehicle?: string;\r\n  status: 'planned' | 'active' | 'completed';\r\n  start_location?: { lat: number; lng: number };\r\n  waypoints: { lat: number; lng: number }[];\r\n  optimization_score: number;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// =====================================================\r\n// VALIDACIÓN DE ADMIN\r\n// =====================================================\r\n\r\nasync function validateAdmin() {\r\n  try {\r\n    console.log('[ROUTES API] Iniciando validación de admin...');\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user) {\r\n      console.log('[ROUTES API] No hay sesión o usuario');\r\n      return { error: 'No autenticado', status: 401 };\r\n    }\r\n\r\n    console.log('[ROUTES API] Usuario autenticado:', session.user.email);\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar si el usuario es admin\r\n    console.log('[ROUTES API] Buscando perfil de usuario para:', session.user.email);\r\n    const { data: userProfile, error: userError } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, role_id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (userError || !userProfile) {\r\n      console.log('[ROUTES API] Error al buscar usuario:', userError);\r\n      return { error: 'Usuario no encontrado', status: 404 };\r\n    }\r\n\r\n    console.log('[ROUTES API] Perfil encontrado:', userProfile);\r\n\r\n    // Obtener el rol del usuario\r\n    const { data: roleData, error: roleError } = await supabase\r\n      .from('user_roles')\r\n      .select('role_name')\r\n      .eq('id', userProfile.role_id)\r\n      .single();\r\n\r\n    if (roleError || !roleData || roleData.role_name !== 'admin') {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { success: true, userId: session.user.id, email: userProfile.email, supabase };\r\n  } catch (error) {\r\n    console.error('Error en validación de admin:', error);\r\n    return { error: 'Error interno del servidor', status: 500 };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER RUTAS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Parámetros de consulta\r\n    const status = searchParams.get('status');\r\n    const driverId = searchParams.get('driver_id');\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n\r\n    // Construir consulta\r\n    let query = supabase\r\n      .from('optimized_routes')\r\n      .select(`\r\n        *,\r\n        driver:logistics_drivers!driver_id (\r\n          id,\r\n          name,\r\n          phone,\r\n          vehicle_type,\r\n          license_plate,\r\n          status\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    if (driverId) {\r\n      query = query.eq('driver_id', driverId);\r\n    }\r\n\r\n    const { data: routes, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error al obtener rutas:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener rutas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Procesar datos para incluir shipments\r\n    const processedRoutes = routes?.map(route => ({\r\n      ...route,\r\n      shipments: route.shipments || [],\r\n      waypoints: route.waypoints || [],\r\n      start_location: route.start_location || null\r\n    })) || [];\r\n\r\n    return NextResponse.json(processedRoutes);\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR NUEVA RUTA\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      name,\r\n      shipments,\r\n      total_distance,\r\n      estimated_time,\r\n      driver_id,\r\n      vehicle,\r\n      status = 'planned',\r\n      start_location,\r\n      waypoints,\r\n      optimization_score\r\n    }: OptimizedRoute = body;\r\n\r\n    // Validaciones\r\n    if (!name || !shipments || !Array.isArray(shipments)) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de ruta inválidos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (typeof total_distance !== 'number' || typeof estimated_time !== 'number') {\r\n      return NextResponse.json(\r\n        { error: 'Distancia y tiempo deben ser números' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Crear la ruta\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .insert({\r\n        name,\r\n        shipments,\r\n        total_distance,\r\n        estimated_time,\r\n        driver_id: driver_id || null,\r\n        vehicle: vehicle || null,\r\n        status,\r\n        start_location: start_location || null,\r\n        waypoints: waypoints || [],\r\n        optimization_score: optimization_score || 0,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (routeError) {\r\n      console.error('Error al crear ruta:', routeError);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si hay envíos, actualizar su route_id\r\n    if (shipments.length > 0) {\r\n      const shipmentIds = shipments.map(s => s.id).filter(Boolean);\r\n      \r\n      if (shipmentIds.length > 0) {\r\n        const { error: updateError } = await supabase\r\n          .from('shipments')\r\n          .update({ route_id: route.id })\r\n          .in('id', shipmentIds);\r\n\r\n        if (updateError) {\r\n          console.error('Error al actualizar envíos con route_id:', updateError);\r\n          // No fallar la creación de la ruta por esto\r\n        }\r\n      }\r\n    }\r\n\r\n    return NextResponse.json(route, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error en POST /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH: ACTUALIZAR RUTA\r\n// =====================================================\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { id, ...updates } = body;\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Actualizar la ruta\r\n    const { data: route, error } = await supabase\r\n      .from('optimized_routes')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar ruta:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(route);\r\n\r\n  } catch (error) {\r\n    console.error('Error en PATCH /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// DELETE: ELIMINAR RUTA\r\n// =====================================================\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que la ruta existe y no está activa\r\n    const { data: existingRoute, error: checkError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, status, shipments')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (checkError || !existingRoute) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRoute.status === 'active') {\r\n      return NextResponse.json(\r\n        { error: 'No se puede eliminar una ruta activa' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Limpiar route_id de los envíos\r\n    if (existingRoute.shipments && Array.isArray(existingRoute.shipments)) {\r\n      const shipmentIds = existingRoute.shipments.map((s: any) => s.id).filter(Boolean);\r\n      \r\n      if (shipmentIds.length > 0) {\r\n        await supabase\r\n          .from('shipments')\r\n          .update({ route_id: null })\r\n          .in('id', shipmentIds);\r\n      }\r\n    }\r\n\r\n    // Eliminar la ruta\r\n    const { error: deleteError } = await supabase\r\n      .from('optimized_routes')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (deleteError) {\r\n      console.error('Error al eliminar ruta:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsuFsB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MA2OAC,OAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,MAAA;;MA3OAE,IAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,GAAA;;MAmLAC,MAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,KAAA;;MArGAC,KAAA;IAAA;IAAAP,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAK,IAAA;;MApKTC,QAAA;IAAA;IAAAR,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAM,OAAA;;;;;kCAQ6B;;;mCACM;;;mCAC3B;AAVd,MAAMA,OAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,QAAU;AAgCvB;AACA;AACA;AAEA,eAAeO,cAAA;EAAA;EAAAT,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACb,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACFQ,OAAA,CAAQC,GAAG,CAAC;IACZ,MAAMC,OAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAW,OAAA,CAAAC,IAAI;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAE1B;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,WAACH,OAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAe,CAAA,UAAW,CAACH,OAAA,CAAQI,IAAI,GAAE;MAAA;MAAAhB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC7BQ,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAX,cAAA,GAAAE,CAAA;MACZ,OAAO;QAAEe,KAAA,EAAO;QAAkBC,MAAA,EAAQ;MAAI;IAChD;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEAQ,OAAA,CAAQC,GAAG,CAAC,qCAAqCC,OAAA,CAAQI,IAAI,CAACG,KAAK;IACnE,MAAMC,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,IAAAmB,QAAA,CAAAC,iBAAiB;IAElC;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACAQ,OAAA,CAAQC,GAAG,CAAC,iDAAiDC,OAAA,CAAQI,IAAI,CAACG,KAAK;IAC/E,MAAM;MAAEI,IAAA,EAAMC,WAAW;MAAEP,KAAA,EAAOQ;IAAS,CAAE;IAAA;IAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAG,MAAMkB,QAAA,CACnDM,IAAI,CAAC,iBACLC,MAAM,CAAC,kBACPC,EAAE,CAAC,SAAShB,OAAA,CAAQI,IAAI,CAACG,KAAK,EAC9BU,MAAM;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAET;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,UAAAU,SAAA;IAAA;IAAA,CAAAzB,cAAA,GAAAe,CAAA,UAAa,CAACS,WAAA,GAAa;MAAA;MAAAxB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC7BQ,OAAA,CAAQC,GAAG,CAAC,yCAAyCc,SAAA;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACrD,OAAO;QAAEe,KAAA,EAAO;QAAyBC,MAAA,EAAQ;MAAI;IACvD;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEAQ,OAAA,CAAQC,GAAG,CAAC,mCAAmCa,WAAA;IAE/C;IACA,MAAM;MAAED,IAAA,EAAMO,QAAQ;MAAEb,KAAA,EAAOc;IAAS,CAAE;IAAA;IAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAG,MAAMkB,QAAA,CAChDM,IAAI,CAAC,cACLC,MAAM,CAAC,aACPC,EAAE,CAAC,MAAMJ,WAAA,CAAYQ,OAAO,EAC5BH,MAAM;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAET;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,UAAAgB,SAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAe,CAAA,UAAa,CAACe,QAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAe,CAAA,UAAYe,QAAA,CAASG,SAAS,KAAK,UAAS;MAAA;MAAAjC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC5D,OAAO;QAAEe,KAAA,EAAO;QAA4DC,MAAA,EAAQ;MAAI;IAC1F;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAO;MAAEgC,OAAA,EAAS;MAAMC,MAAA,EAAQvB,OAAA,CAAQI,IAAI,CAACoB,EAAE;MAAEjB,KAAA,EAAOK,WAAA,CAAYL,KAAK;MAAEC;IAAS;EACtF,EAAE,OAAOH,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdQ,OAAA,CAAQO,KAAK,CAAC,iCAAiCA,KAAA;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC/C,OAAO;MAAEe,KAAA,EAAO;MAA8BC,MAAA,EAAQ;IAAI;EAC5D;AACF;AAMO,eAAeb,IAAIgC,OAAoB;EAAA;EAAArC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAMoC,UAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAa,MAAMO,aAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACzB,IAAIoC,UAAA,CAAWrB,KAAK,EAAE;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACpB,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAOqB,UAAA,CAAWrB;MAAM,GAC1B;QAAEC,MAAA,EAAQoB,UAAA,CAAWpB;MAAO;IAEhC;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAMK,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAAmB,QAAA,CAAAqB,YAAY;IACnC,MAAM;MAAEC;IAAY,CAAE;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAG,IAAI0C,GAAA,CAAIP,OAAA,CAAQQ,GAAG;IAE5C;IACA,MAAM3B,MAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAASyC,YAAA,CAAaG,GAAG,CAAC;IAChC,MAAMC,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAWyC,YAAA,CAAaG,GAAG,CAAC;IAClC,MAAME,KAAA;IAAA;IAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAQ+C,QAAA;IAAS;IAAA,CAAAjD,cAAA,GAAAe,CAAA,UAAA4B,YAAA,CAAaG,GAAG,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAe,CAAA,UAAY;IACpD,MAAMmC,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAS+C,QAAA;IAAS;IAAA,CAAAjD,cAAA,GAAAe,CAAA,UAAA4B,YAAA,CAAaG,GAAG,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAe,CAAA,UAAa;IAEtD;IACA,IAAIoC,KAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAQkB,QAAA,CACTM,IAAI,CAAC,oBACLC,MAAM,CAAC;;;;;;;;;;OAUP,EACAyB,KAAK,CAAC,cAAc;MAAEC,SAAA,EAAW;IAAM,GACvCC,KAAK,CAACJ,MAAA,EAAQA,MAAA,GAASF,KAAA,GAAQ;IAElC;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IACA,IAAIgB,MAAA,EAAQ;MAAA;MAAAlB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACViD,KAAA,GAAQA,KAAA,CAAMvB,EAAE,CAAC,UAAUV,MAAA;IAC7B;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,IAAI6C,QAAA,EAAU;MAAA;MAAA/C,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACZiD,KAAA,GAAQA,KAAA,CAAMvB,EAAE,CAAC,aAAamB,QAAA;IAChC;IAAA;IAAA;MAAA/C,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAM;MAAEQ,IAAA,EAAMgC,MAAM;MAAEtC;IAAK,CAAE;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAG,MAAMiD,KAAA;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IAEtC,IAAIe,KAAA,EAAO;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACTQ,OAAA,CAAQO,KAAK,CAAC,2BAA2BA,KAAA;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MACzC,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAyB,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA;IACA,MAAMyC,eAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA;IAAkB;IAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAwC,MAAA,EAAQE,GAAA,CAAIC,KAAA,IAAU;MAAA;MAAA1D,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA;QAC5C,GAAGwD,KAAK;QACRC,SAAA;QAAW;QAAA,CAAA3D,cAAA,GAAAe,CAAA,WAAA2C,KAAA,CAAMC,SAAS;QAAA;QAAA,CAAA3D,cAAA,GAAAe,CAAA,WAAI,EAAE;QAChC6C,SAAA;QAAW;QAAA,CAAA5D,cAAA,GAAAe,CAAA,WAAA2C,KAAA,CAAME,SAAS;QAAA;QAAA,CAAA5D,cAAA,GAAAe,CAAA,WAAI,EAAE;QAChC8C,cAAA;QAAgB;QAAA,CAAA7D,cAAA,GAAAe,CAAA,WAAA2C,KAAA,CAAMG,cAAc;QAAA;QAAA,CAAA7D,cAAA,GAAAe,CAAA,WAAI;MAC1C;IAAA;IAAA;IAAA,CAAAf,cAAA,GAAAe,CAAA,WAAO,EAAE;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAET,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACe,eAAA;EAE3B,EAAE,OAAOvC,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdQ,OAAA,CAAQO,KAAK,CAAC,6CAA6CA,KAAA;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC3D,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAExB,KAAA,EAAO;IAA6B,GACtC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAMO,eAAeX,KAAK8B,OAAoB;EAAA;EAAArC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAMoC,UAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAa,MAAMO,aAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACzB,IAAIoC,UAAA,CAAWrB,KAAK,EAAE;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACpB,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAOqB,UAAA,CAAWrB;MAAM,GAC1B;QAAEC,MAAA,EAAQoB,UAAA,CAAWpB;MAAO;IAEhC;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAM+C,IAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAO,MAAMmC,OAAA,CAAQI,IAAI;IAC/B,MAAM;MACJsB,IAAI;MACJJ,SAAS;MACTK,cAAc;MACdC,cAAc;MACdC,SAAS;MACTC,OAAO;MACPjD,MAAA;MAAA;MAAA,CAAAlB,cAAA,GAAAe,CAAA,WAAS,SAAS;MAClB8C,cAAc;MACdD,SAAS;MACTQ;IAAkB,CACnB;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAmB4D,IAAA;IAEpB;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,YAACgD,IAAA;IAAA;IAAA,CAAA/D,cAAA,GAAAe,CAAA,WAAQ,CAAC4C,SAAA;IAAA;IAAA,CAAA3D,cAAA,GAAAe,CAAA,WAAa,CAACsD,KAAA,CAAMC,OAAO,CAACX,SAAA,IAAY;MAAA;MAAA3D,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACpD,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAA0B,GACnC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,kBAAOiD,cAAA,KAAmB;IAAA;IAAA,CAAAhE,cAAA,GAAAe,CAAA,WAAY,OAAOkD,cAAA,KAAmB,WAAU;MAAA;MAAAjE,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC5E,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAuC,GAChD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAMK,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAAmB,QAAA,CAAAqB,YAAY;IAEnC;IACA,MAAM;MAAEnB,IAAA,EAAMmC,KAAK;MAAEzC,KAAA,EAAOsD;IAAU,CAAE;IAAA;IAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAG,MAAMkB,QAAA,CAC9CM,IAAI,CAAC,oBACL8C,MAAM,CAAC;MACNT,IAAA;MACAJ,SAAA;MACAK,cAAA;MACAC,cAAA;MACAC,SAAA;MAAW;MAAA,CAAAlE,cAAA,GAAAe,CAAA,WAAAmD,SAAA;MAAA;MAAA,CAAAlE,cAAA,GAAAe,CAAA,WAAa;MACxBoD,OAAA;MAAS;MAAA,CAAAnE,cAAA,GAAAe,CAAA,WAAAoD,OAAA;MAAA;MAAA,CAAAnE,cAAA,GAAAe,CAAA,WAAW;MACpBG,MAAA;MACA2C,cAAA;MAAgB;MAAA,CAAA7D,cAAA,GAAAe,CAAA,WAAA8C,cAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAe,CAAA,WAAkB;MAClC6C,SAAA;MAAW;MAAA,CAAA5D,cAAA,GAAAe,CAAA,WAAA6C,SAAA;MAAA;MAAA,CAAA5D,cAAA,GAAAe,CAAA,WAAa,EAAE;MAC1BqD,kBAAA;MAAoB;MAAA,CAAApE,cAAA,GAAAe,CAAA,WAAAqD,kBAAA;MAAA;MAAA,CAAApE,cAAA,GAAAe,CAAA,WAAsB;MAC1C0D,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;MAClCC,UAAA,EAAY,IAAIF,IAAA,GAAOC,WAAW;IACpC,GACChD,MAAM,GACNE,MAAM;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAET,IAAIqE,UAAA,EAAY;MAAA;MAAAvE,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACdQ,OAAA,CAAQO,KAAK,CAAC,wBAAwBsD,UAAA;MAAA;MAAAvE,cAAA,GAAAE,CAAA;MACtC,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAsB,GAC/B;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAIyD,SAAA,CAAUkB,MAAM,GAAG,GAAG;MAAA;MAAA7E,cAAA,GAAAe,CAAA;MACxB,MAAM+D,WAAA;MAAA;MAAA,CAAA9E,cAAA,GAAAE,CAAA,QAAcyD,SAAA,CAAUF,GAAG,CAACvD,CAAA,IAAK;QAAA;QAAAF,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAE,CAAA;QAAA,OAAAA,CAAA,CAAEkC,EAAE;MAAF,CAAE,EAAE2C,MAAM,CAACC,OAAA;MAAA;MAAAhF,cAAA,GAAAE,CAAA;MAEpD,IAAI4E,WAAA,CAAYD,MAAM,GAAG,GAAG;QAAA;QAAA7E,cAAA,GAAAe,CAAA;QAC1B,MAAM;UAAEE,KAAA,EAAOgE;QAAW,CAAE;QAAA;QAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAG,MAAMkB,QAAA,CAClCM,IAAI,CAAC,aACLwD,MAAM,CAAC;UAAEC,QAAA,EAAUzB,KAAA,CAAMtB;QAAG,GAC5BgD,EAAE,CAAC,MAAMN,WAAA;QAAA;QAAA9E,cAAA,GAAAE,CAAA;QAEZ,IAAI+E,WAAA,EAAa;UAAA;UAAAjF,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UACfQ,OAAA,CAAQO,KAAK,CAAC,4CAA4CgE,WAAA;UAC1D;QACF;QAAA;QAAA;UAAAjF,cAAA,GAAAe,CAAA;QAAA;MACF;MAAA;MAAA;QAAAf,cAAA,GAAAe,CAAA;MAAA;IACF;IAAA;IAAA;MAAAf,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACiB,KAAA,EAAO;MAAExC,MAAA,EAAQ;IAAI;EAEhD,EAAE,OAAOD,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdQ,OAAA,CAAQO,KAAK,CAAC,8CAA8CA,KAAA;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC5D,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAExB,KAAA,EAAO;IAA6B,GACtC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAMO,eAAeZ,MAAM+B,OAAoB;EAAA;EAAArC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC9C,IAAI;IACF,MAAMoC,UAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAa,MAAMO,aAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACzB,IAAIoC,UAAA,CAAWrB,KAAK,EAAE;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACpB,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAOqB,UAAA,CAAWrB;MAAM,GAC1B;QAAEC,MAAA,EAAQoB,UAAA,CAAWpB;MAAO;IAEhC;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAM+C,IAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAO,MAAMmC,OAAA,CAAQI,IAAI;IAC/B,MAAM;MAAEL,EAAE;MAAE,GAAGiD;IAAA,CAAS;IAAA;IAAA,CAAArF,cAAA,GAAAE,CAAA,QAAG4D,IAAA;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IAE3B,IAAI,CAACkC,EAAA,EAAI;MAAA;MAAApC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACP,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAuB,GAChC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAMK,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAAmB,QAAA,CAAAqB,YAAY;IAEnC;IACA,MAAM;MAAEnB,IAAA,EAAMmC,KAAK;MAAEzC;IAAK,CAAE;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAG,MAAMkB,QAAA,CAClCM,IAAI,CAAC,oBACLwD,MAAM,CAAC;MACN,GAAGG,OAAO;MACVT,UAAA,EAAY,IAAIF,IAAA,GAAOC,WAAW;IACpC,GACC/C,EAAE,CAAC,MAAMQ,EAAA,EACTT,MAAM,GACNE,MAAM;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAET,IAAIe,KAAA,EAAO;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACTQ,OAAA,CAAQO,KAAK,CAAC,6BAA6BA,KAAA;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MAC3C,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAA2B,GACpC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACiB,KAAA;EAE3B,EAAE,OAAOzC,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdQ,OAAA,CAAQO,KAAK,CAAC,+CAA+CA,KAAA;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC7D,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAExB,KAAA,EAAO;IAA6B,GACtC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAMO,eAAef,OAAOkC,OAAoB;EAAA;EAAArC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC/C,IAAI;IACF,MAAMoC,UAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAa,MAAMO,aAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACzB,IAAIoC,UAAA,CAAWrB,KAAK,EAAE;MAAA;MAAAjB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACpB,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAOqB,UAAA,CAAWrB;MAAM,GAC1B;QAAEC,MAAA,EAAQoB,UAAA,CAAWpB;MAAO;IAEhC;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAM;MAAE4B;IAAY,CAAE;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,SAAG,IAAI0C,GAAA,CAAIP,OAAA,CAAQQ,GAAG;IAC5C,MAAMT,EAAA;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA,SAAKyC,YAAA,CAAaG,GAAG,CAAC;IAAA;IAAA9C,cAAA,GAAAE,CAAA;IAE5B,IAAI,CAACkC,EAAA,EAAI;MAAA;MAAApC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACP,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAuB,GAChC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA,MAAMK,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,SAAW,MAAM,IAAAmB,QAAA,CAAAqB,YAAY;IAEnC;IACA,MAAM;MAAEnB,IAAA,EAAM+D,aAAa;MAAErE,KAAA,EAAOsE;IAAU,CAAE;IAAA;IAAA,CAAAvF,cAAA,GAAAE,CAAA,SAAG,MAAMkB,QAAA,CACtDM,IAAI,CAAC,oBACLC,MAAM,CAAC,yBACPC,EAAE,CAAC,MAAMQ,EAAA,EACTP,MAAM;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IAET;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAwE,UAAA;IAAA;IAAA,CAAAvF,cAAA,GAAAe,CAAA,WAAc,CAACuE,aAAA,GAAe;MAAA;MAAAtF,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAChC,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAqB,GAC9B;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,IAAIoF,aAAA,CAAcpE,MAAM,KAAK,UAAU;MAAA;MAAAlB,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACrC,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAuC,GAChD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAEA;IAAAf,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,WAAAuE,aAAA,CAAc3B,SAAS;IAAA;IAAA,CAAA3D,cAAA,GAAAe,CAAA,WAAIsD,KAAA,CAAMC,OAAO,CAACgB,aAAA,CAAc3B,SAAS,IAAG;MAAA;MAAA3D,cAAA,GAAAe,CAAA;MACrE,MAAM+D,WAAA;MAAA;MAAA,CAAA9E,cAAA,GAAAE,CAAA,SAAcoF,aAAA,CAAc3B,SAAS,CAACF,GAAG,CAAEvD,CAAA,IAAW;QAAA;QAAAF,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAE,CAAA;QAAA,OAAAA,CAAA,CAAEkC,EAAE;MAAF,CAAE,EAAE2C,MAAM,CAACC,OAAA;MAAA;MAAAhF,cAAA,GAAAE,CAAA;MAEzE,IAAI4E,WAAA,CAAYD,MAAM,GAAG,GAAG;QAAA;QAAA7E,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QAC1B,MAAMkB,QAAA,CACHM,IAAI,CAAC,aACLwD,MAAM,CAAC;UAAEC,QAAA,EAAU;QAAK,GACxBC,EAAE,CAAC,MAAMN,WAAA;MACd;MAAA;MAAA;QAAA9E,cAAA,GAAAe,CAAA;MAAA;IACF;IAAA;IAAA;MAAAf,cAAA,GAAAe,CAAA;IAAA;IAEA;IACA,MAAM;MAAEE,KAAA,EAAOuE;IAAW,CAAE;IAAA;IAAA,CAAAxF,cAAA,GAAAE,CAAA,SAAG,MAAMkB,QAAA,CAClCM,IAAI,CAAC,oBACL+D,MAAM,GACN7D,EAAE,CAAC,MAAMQ,EAAA;IAAA;IAAApC,cAAA,GAAAE,CAAA;IAEZ,IAAIsF,WAAA,EAAa;MAAA;MAAAxF,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACfQ,OAAA,CAAQO,KAAK,CAAC,2BAA2BuE,WAAA;MAAA;MAAAxF,cAAA,GAAAE,CAAA;MACzC,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAExB,KAAA,EAAO;MAAyB,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEP,OAAA,EAAS;IAAK;EAE3C,EAAE,OAAOjB,KAAA,EAAO;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACdQ,OAAA,CAAQO,KAAK,CAAC,gDAAgDA,KAAA;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC9D,OAAOqC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAExB,KAAA,EAAO;IAA6B,GACtC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}