7271355b33a9fa4f6db1baa713db460e
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1tc3svulig() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\route.ts";
  var hash = "2ccad81617ed5cbb5a517b65dfe80d85307cd9a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 20
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "9": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "10": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 75
        }
      },
      "11": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 57
        }
      },
      "12": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "13": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 69
        }
      },
      "15": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 64
        }
      },
      "18": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 77
        }
      },
      "20": {
        start: {
          line: 48,
          column: 25
        },
        end: {
          line: 48,
          column: 58
        }
      },
      "21": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 89
        }
      },
      "22": {
        start: {
          line: 51,
          column: 56
        },
        end: {
          line: 51,
          column: 158
        }
      },
      "23": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 76
        }
      },
      "25": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "26": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "27": {
        start: {
          line: 61,
          column: 53
        },
        end: {
          line: 61,
          column: 145
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "29": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "30": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 10
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "33": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "34": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 48
        }
      },
      "35": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "36": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "37": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 59
        }
      },
      "38": {
        start: {
          line: 93,
          column: 33
        },
        end: {
          line: 93,
          column: 53
        }
      },
      "39": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "40": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 54
        }
      },
      "41": {
        start: {
          line: 97,
          column: 22
        },
        end: {
          line: 97,
          column: 65
        }
      },
      "42": {
        start: {
          line: 98,
          column: 23
        },
        end: {
          line: 98,
          column: 66
        }
      },
      "43": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 112,
          column: 44
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "45": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "46": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "47": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 52
        }
      },
      "48": {
        start: {
          line: 120,
          column: 40
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "49": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "50": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 60
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "52": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "53": {
        start: {
          line: 130,
          column: 54
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "54": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 58
        }
      },
      "55": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 74
        }
      },
      "56": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "57": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 220,
          column: 5
        }
      },
      "58": {
        start: {
          line: 148,
          column: 27
        },
        end: {
          line: 148,
          column: 48
        }
      },
      "59": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "60": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "61": {
        start: {
          line: 156,
          column: 21
        },
        end: {
          line: 156,
          column: 41
        }
      },
      "62": {
        start: {
          line: 157,
          column: 155
        },
        end: {
          line: 157,
          column: 159
        }
      },
      "63": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "64": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "65": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "66": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "67": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 59
        }
      },
      "68": {
        start: {
          line: 175,
          column: 51
        },
        end: {
          line: 188,
          column: 28
        }
      },
      "69": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "70": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 62
        }
      },
      "71": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "72": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "73": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 72
        }
      },
      "74": {
        start: {
          line: 199,
          column: 51
        },
        end: {
          line: 199,
          column: 55
        }
      },
      "75": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "76": {
        start: {
          line: 201,
          column: 47
        },
        end: {
          line: 203,
          column: 40
        }
      },
      "77": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "78": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 205,
          column: 91
        }
      },
      "79": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "80": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 75
        }
      },
      "81": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "82": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 263,
          column: 5
        }
      },
      "83": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 224,
          column: 48
        }
      },
      "84": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "85": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "86": {
        start: {
          line: 232,
          column: 21
        },
        end: {
          line: 232,
          column: 41
        }
      },
      "87": {
        start: {
          line: 233,
          column: 35
        },
        end: {
          line: 233,
          column: 39
        }
      },
      "88": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "89": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "90": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 241,
          column: 59
        }
      },
      "91": {
        start: {
          line: 243,
          column: 39
        },
        end: {
          line: 246,
          column: 41
        }
      },
      "92": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "93": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 62
        }
      },
      "94": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "95": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 48
        }
      },
      "96": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 76
        }
      },
      "97": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "98": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 330,
          column: 5
        }
      },
      "99": {
        start: {
          line: 267,
          column: 27
        },
        end: {
          line: 267,
          column: 48
        }
      },
      "100": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "101": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "102": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 53
        }
      },
      "103": {
        start: {
          line: 276,
          column: 19
        },
        end: {
          line: 276,
          column: 41
        }
      },
      "104": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "105": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "106": {
        start: {
          line: 284,
          column: 25
        },
        end: {
          line: 284,
          column: 59
        }
      },
      "107": {
        start: {
          line: 286,
          column: 59
        },
        end: {
          line: 286,
          column: 152
        }
      },
      "108": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "109": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 292,
          column: 15
        }
      },
      "110": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "111": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 299,
          column: 15
        }
      },
      "112": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "113": {
        start: {
          line: 303,
          column: 32
        },
        end: {
          line: 303,
          column: 86
        }
      },
      "114": {
        start: {
          line: 303,
          column: 65
        },
        end: {
          line: 303,
          column: 69
        }
      },
      "115": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "116": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 307,
          column: 41
        }
      },
      "117": {
        start: {
          line: 311,
          column: 39
        },
        end: {
          line: 311,
          column: 100
        }
      },
      "118": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "119": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 66
        }
      },
      "120": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "121": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 322,
          column: 11
        }
      },
      "122": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 77
        }
      },
      "123": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 329,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "validateAdmin",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 28
          }
        },
        loc: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 36
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 18
          }
        },
        loc: {
          start: {
            line: 82,
            column: 28
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 130,
            column: 44
          },
          end: {
            line: 130,
            column: 45
          }
        },
        loc: {
          start: {
            line: 130,
            column: 54
          },
          end: {
            line: 135,
            column: 13
          }
        },
        line: 130
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 146,
            column: 15
          },
          end: {
            line: 146,
            column: 19
          }
        },
        loc: {
          start: {
            line: 146,
            column: 29
          },
          end: {
            line: 221,
            column: 1
          }
        },
        line: 146
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 199,
            column: 46
          },
          end: {
            line: 199,
            column: 47
          }
        },
        loc: {
          start: {
            line: 199,
            column: 51
          },
          end: {
            line: 199,
            column: 55
          }
        },
        line: 199
      },
      "11": {
        name: "PATCH",
        decl: {
          start: {
            line: 222,
            column: 15
          },
          end: {
            line: 222,
            column: 20
          }
        },
        loc: {
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 264,
            column: 1
          }
        },
        line: 222
      },
      "12": {
        name: "DELETE",
        decl: {
          start: {
            line: 265,
            column: 15
          },
          end: {
            line: 265,
            column: 21
          }
        },
        loc: {
          start: {
            line: 265,
            column: 31
          },
          end: {
            line: 331,
            column: 1
          }
        },
        line: 265
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 303,
            column: 60
          },
          end: {
            line: 303,
            column: 61
          }
        },
        loc: {
          start: {
            line: 303,
            column: 65
          },
          end: {
            line: 303,
            column: 69
          }
        },
        line: 303
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 40,
            column: 20
          }
        }, {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 37
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 21
          }
        }, {
          start: {
            line: 52,
            column: 25
          },
          end: {
            line: 52,
            column: 37
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 21
          }
        }, {
          start: {
            line: 62,
            column: 25
          },
          end: {
            line: 62,
            column: 34
          }
        }, {
          start: {
            line: 62,
            column: 38
          },
          end: {
            line: 62,
            column: 68
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 97,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 97,
            column: 56
          }
        }, {
          start: {
            line: 97,
            column: 60
          },
          end: {
            line: 97,
            column: 64
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 32
          },
          end: {
            line: 98,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 32
          },
          end: {
            line: 98,
            column: 58
          }
        }, {
          start: {
            line: 98,
            column: 62
          },
          end: {
            line: 98,
            column: 65
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 135,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 135,
            column: 15
          }
        }, {
          start: {
            line: 135,
            column: 19
          },
          end: {
            line: 135,
            column: 21
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 132,
            column: 27
          },
          end: {
            line: 132,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 27
          },
          end: {
            line: 132,
            column: 42
          }
        }, {
          start: {
            line: 132,
            column: 46
          },
          end: {
            line: 132,
            column: 48
          }
        }],
        line: 132
      },
      "14": {
        loc: {
          start: {
            line: 133,
            column: 27
          },
          end: {
            line: 133,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 27
          },
          end: {
            line: 133,
            column: 42
          }
        }, {
          start: {
            line: 133,
            column: 46
          },
          end: {
            line: 133,
            column: 48
          }
        }],
        line: 133
      },
      "15": {
        loc: {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 52
          }
        }, {
          start: {
            line: 134,
            column: 56
          },
          end: {
            line: 134,
            column: 60
          }
        }],
        line: 134
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 85
          },
          end: {
            line: 157,
            column: 103
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 157,
            column: 94
          },
          end: {
            line: 157,
            column: 103
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "19": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 17
          }
        }, {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 159,
            column: 31
          }
        }, {
          start: {
            line: 159,
            column: 35
          },
          end: {
            line: 159,
            column: 60
          }
        }],
        line: 159
      },
      "20": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "21": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 46
          }
        }, {
          start: {
            line: 166,
            column: 50
          },
          end: {
            line: 166,
            column: 84
          }
        }],
        line: 166
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 23
          },
          end: {
            line: 180,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 23
          },
          end: {
            line: 180,
            column: 32
          }
        }, {
          start: {
            line: 180,
            column: 36
          },
          end: {
            line: 180,
            column: 40
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 181,
            column: 21
          },
          end: {
            line: 181,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 21
          },
          end: {
            line: 181,
            column: 28
          }
        }, {
          start: {
            line: 181,
            column: 32
          },
          end: {
            line: 181,
            column: 36
          }
        }],
        line: 181
      },
      "24": {
        loc: {
          start: {
            line: 183,
            column: 28
          },
          end: {
            line: 183,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 28
          },
          end: {
            line: 183,
            column: 42
          }
        }, {
          start: {
            line: 183,
            column: 46
          },
          end: {
            line: 183,
            column: 50
          }
        }],
        line: 183
      },
      "25": {
        loc: {
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 32
          }
        }, {
          start: {
            line: 184,
            column: 36
          },
          end: {
            line: 184,
            column: 38
          }
        }],
        line: 184
      },
      "26": {
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 50
          }
        }, {
          start: {
            line: 185,
            column: 54
          },
          end: {
            line: 185,
            column: 55
          }
        }],
        line: 185
      },
      "27": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "28": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "29": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "30": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "31": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "32": {
        loc: {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "33": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "34": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "35": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "36": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 293,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "37": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 22
          }
        }, {
          start: {
            line: 287,
            column: 26
          },
          end: {
            line: 287,
            column: 40
          }
        }],
        line: 287
      },
      "38": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "39": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "40": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 35
          }
        }, {
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 302,
            column: 77
          }
        }],
        line: 302
      },
      "41": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "42": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: GESTI\xD3N DE RUTAS OPTIMIZADAS\r\n// Ruta: /api/admin/logistics/routes\r\n// Descripci\xF3n: CRUD para rutas de log\xEDstica optimizadas\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient, createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n// =====================================================\r\n// INTERFACES\r\n// =====================================================\r\n\r\ninterface OptimizedRoute {\r\n  id?: string;\r\n  name: string;\r\n  shipments: any[];\r\n  total_distance: number;\r\n  estimated_time: number;\r\n  driver_id?: string;\r\n  vehicle?: string;\r\n  status: 'planned' | 'active' | 'completed';\r\n  start_location?: { lat: number; lng: number };\r\n  waypoints: { lat: number; lng: number }[];\r\n  optimization_score: number;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n// =====================================================\r\n// VALIDACI\xD3N DE ADMIN\r\n// =====================================================\r\n\r\nasync function validateAdmin() {\r\n  try {\r\n    console.log('[ROUTES API] Iniciando validaci\xF3n de admin...');\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user) {\r\n      console.log('[ROUTES API] No hay sesi\xF3n o usuario');\r\n      return { error: 'No autenticado', status: 401 };\r\n    }\r\n\r\n    console.log('[ROUTES API] Usuario autenticado:', session.user.email);\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar si el usuario es admin\r\n    console.log('[ROUTES API] Buscando perfil de usuario para:', session.user.email);\r\n    const { data: userProfile, error: userError } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, role_id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (userError || !userProfile) {\r\n      console.log('[ROUTES API] Error al buscar usuario:', userError);\r\n      return { error: 'Usuario no encontrado', status: 404 };\r\n    }\r\n\r\n    console.log('[ROUTES API] Perfil encontrado:', userProfile);\r\n\r\n    // Obtener el rol del usuario\r\n    const { data: roleData, error: roleError } = await supabase\r\n      .from('user_roles')\r\n      .select('role_name')\r\n      .eq('id', userProfile.role_id)\r\n      .single();\r\n\r\n    if (roleError || !roleData || roleData.role_name !== 'admin') {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { success: true, userId: session.user.id, email: userProfile.email, supabase };\r\n  } catch (error) {\r\n    console.error('Error en validaci\xF3n de admin:', error);\r\n    return { error: 'Error interno del servidor', status: 500 };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER RUTAS\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Par\xE1metros de consulta\r\n    const status = searchParams.get('status');\r\n    const driverId = searchParams.get('driver_id');\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n\r\n    // Construir consulta\r\n    let query = supabase\r\n      .from('optimized_routes')\r\n      .select(`\r\n        *,\r\n        driver:logistics_drivers!driver_id (\r\n          id,\r\n          name,\r\n          phone,\r\n          vehicle_type,\r\n          license_plate,\r\n          status\r\n        )\r\n      `)\r\n      .order('created_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    // Aplicar filtros\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    if (driverId) {\r\n      query = query.eq('driver_id', driverId);\r\n    }\r\n\r\n    const { data: routes, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error al obtener rutas:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener rutas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Procesar datos para incluir shipments\r\n    const processedRoutes = routes?.map(route => ({\r\n      ...route,\r\n      shipments: route.shipments || [],\r\n      waypoints: route.waypoints || [],\r\n      start_location: route.start_location || null\r\n    })) || [];\r\n\r\n    return NextResponse.json(processedRoutes);\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// POST: CREAR NUEVA RUTA\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const {\r\n      name,\r\n      shipments,\r\n      total_distance,\r\n      estimated_time,\r\n      driver_id,\r\n      vehicle,\r\n      status = 'planned',\r\n      start_location,\r\n      waypoints,\r\n      optimization_score\r\n    }: OptimizedRoute = body;\r\n\r\n    // Validaciones\r\n    if (!name || !shipments || !Array.isArray(shipments)) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de ruta inv\xE1lidos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (typeof total_distance !== 'number' || typeof estimated_time !== 'number') {\r\n      return NextResponse.json(\r\n        { error: 'Distancia y tiempo deben ser n\xFAmeros' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Crear la ruta\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .insert({\r\n        name,\r\n        shipments,\r\n        total_distance,\r\n        estimated_time,\r\n        driver_id: driver_id || null,\r\n        vehicle: vehicle || null,\r\n        status,\r\n        start_location: start_location || null,\r\n        waypoints: waypoints || [],\r\n        optimization_score: optimization_score || 0,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (routeError) {\r\n      console.error('Error al crear ruta:', routeError);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Si hay env\xEDos, actualizar su route_id\r\n    if (shipments.length > 0) {\r\n      const shipmentIds = shipments.map(s => s.id).filter(Boolean);\r\n      \r\n      if (shipmentIds.length > 0) {\r\n        const { error: updateError } = await supabase\r\n          .from('shipments')\r\n          .update({ route_id: route.id })\r\n          .in('id', shipmentIds);\r\n\r\n        if (updateError) {\r\n          console.error('Error al actualizar env\xEDos con route_id:', updateError);\r\n          // No fallar la creaci\xF3n de la ruta por esto\r\n        }\r\n      }\r\n    }\r\n\r\n    return NextResponse.json(route, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error en POST /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH: ACTUALIZAR RUTA\r\n// =====================================================\r\n\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { id, ...updates } = body;\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Actualizar la ruta\r\n    const { data: route, error } = await supabase\r\n      .from('optimized_routes')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar ruta:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(route);\r\n\r\n  } catch (error) {\r\n    console.error('Error en PATCH /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// DELETE: ELIMINAR RUTA\r\n// =====================================================\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que la ruta existe y no est\xE1 activa\r\n    const { data: existingRoute, error: checkError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, status, shipments')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (checkError || !existingRoute) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    if (existingRoute.status === 'active') {\r\n      return NextResponse.json(\r\n        { error: 'No se puede eliminar una ruta activa' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Limpiar route_id de los env\xEDos\r\n    if (existingRoute.shipments && Array.isArray(existingRoute.shipments)) {\r\n      const shipmentIds = existingRoute.shipments.map((s: any) => s.id).filter(Boolean);\r\n      \r\n      if (shipmentIds.length > 0) {\r\n        await supabase\r\n          .from('shipments')\r\n          .update({ route_id: null })\r\n          .in('id', shipmentIds);\r\n      }\r\n    }\r\n\r\n    // Eliminar la ruta\r\n    const { error: deleteError } = await supabase\r\n      .from('optimized_routes')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (deleteError) {\r\n      console.error('Error al eliminar ruta:', deleteError);\r\n      return NextResponse.json(\r\n        { error: 'Error al eliminar ruta' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n\r\n  } catch (error) {\r\n    console.error('Error en DELETE /api/admin/logistics/routes:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "PATCH", "POST", "runtime", "validateAdmin", "console", "log", "session", "auth", "user", "error", "status", "email", "supabase", "createAdminClient", "data", "userProfile", "userError", "from", "select", "eq", "single", "roleData", "roleError", "role_id", "role_name", "success", "userId", "id", "request", "validation", "NextResponse", "json", "createClient", "searchParams", "URL", "url", "get", "driverId", "limit", "parseInt", "offset", "query", "order", "ascending", "range", "routes", "processedRoutes", "map", "route", "shipments", "waypoints", "start_location", "body", "name", "total_distance", "estimated_time", "driver_id", "vehicle", "optimization_score", "Array", "isArray", "routeError", "insert", "created_at", "Date", "toISOString", "updated_at", "length", "shipmentIds", "s", "filter", "Boolean", "updateError", "update", "route_id", "in", "updates", "existingRoute", "checkError", "deleteError", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2ccad81617ed5cbb5a517b65dfe80d85307cd9a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1tc3svulig = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tc3svulig();
cov_1tc3svulig().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1tc3svulig().f[0]++;
  cov_1tc3svulig().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1tc3svulig().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1tc3svulig().f[1]++;
    cov_1tc3svulig().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1tc3svulig().f[2]++;
    cov_1tc3svulig().s[5]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_1tc3svulig().f[3]++;
    cov_1tc3svulig().s[6]++;
    return PATCH;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1tc3svulig().f[4]++;
    cov_1tc3svulig().s[7]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1tc3svulig().f[5]++;
    cov_1tc3svulig().s[8]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1tc3svulig().s[9]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1tc3svulig().s[10]++, require("../../../../../lib/integrations/supabase/server"));
const _config =
/* istanbul ignore next */
(cov_1tc3svulig().s[11]++, require("../../../../../lib/auth/config"));
const runtime =
/* istanbul ignore next */
(cov_1tc3svulig().s[12]++, 'nodejs');
// =====================================================
// VALIDACIÃN DE ADMIN
// =====================================================
async function validateAdmin() {
  /* istanbul ignore next */
  cov_1tc3svulig().f[6]++;
  cov_1tc3svulig().s[13]++;
  try {
    /* istanbul ignore next */
    cov_1tc3svulig().s[14]++;
    console.log('[ROUTES API] Iniciando validaciÃ³n de admin...');
    const session =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[15]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_1tc3svulig().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[1][0]++, !session) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[1][1]++, !session.user)) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[0][0]++;
      cov_1tc3svulig().s[17]++;
      console.log('[ROUTES API] No hay sesiÃ³n o usuario');
      /* istanbul ignore next */
      cov_1tc3svulig().s[18]++;
      return {
        error: 'No autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[0][1]++;
    }
    cov_1tc3svulig().s[19]++;
    console.log('[ROUTES API] Usuario autenticado:', session.user.email);
    const supabase =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[20]++, (0, _server1.createAdminClient)());
    // Verificar si el usuario es admin
    /* istanbul ignore next */
    cov_1tc3svulig().s[21]++;
    console.log('[ROUTES API] Buscando perfil de usuario para:', session.user.email);
    const {
      data: userProfile,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[22]++, await supabase.from('user_profiles').select('email, role_id').eq('email', session.user.email).single());
    /* istanbul ignore next */
    cov_1tc3svulig().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[3][0]++, userError) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[3][1]++, !userProfile)) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[2][0]++;
      cov_1tc3svulig().s[24]++;
      console.log('[ROUTES API] Error al buscar usuario:', userError);
      /* istanbul ignore next */
      cov_1tc3svulig().s[25]++;
      return {
        error: 'Usuario no encontrado',
        status: 404
      };
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[2][1]++;
    }
    cov_1tc3svulig().s[26]++;
    console.log('[ROUTES API] Perfil encontrado:', userProfile);
    // Obtener el rol del usuario
    const {
      data: roleData,
      error: roleError
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[27]++, await supabase.from('user_roles').select('role_name').eq('id', userProfile.role_id).single());
    /* istanbul ignore next */
    cov_1tc3svulig().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[5][0]++, roleError) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[5][1]++, !roleData) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[5][2]++, roleData.role_name !== 'admin')) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[4][0]++;
      cov_1tc3svulig().s[29]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[4][1]++;
    }
    cov_1tc3svulig().s[30]++;
    return {
      success: true,
      userId: session.user.id,
      email: userProfile.email,
      supabase
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[31]++;
    console.error('Error en validaciÃ³n de admin:', error);
    /* istanbul ignore next */
    cov_1tc3svulig().s[32]++;
    return {
      error: 'Error interno del servidor',
      status: 500
    };
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_1tc3svulig().f[7]++;
  cov_1tc3svulig().s[33]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[34]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1tc3svulig().s[35]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[6][0]++;
      cov_1tc3svulig().s[36]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[6][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[37]++, await (0, _server1.createClient)());
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[38]++, new URL(request.url));
    // ParÃ¡metros de consulta
    const status =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[39]++, searchParams.get('status'));
    const driverId =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[40]++, searchParams.get('driver_id'));
    const limit =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[41]++, parseInt(
    /* istanbul ignore next */
    (cov_1tc3svulig().b[7][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[7][1]++, '50')));
    const offset =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[42]++, parseInt(
    /* istanbul ignore next */
    (cov_1tc3svulig().b[8][0]++, searchParams.get('offset')) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[8][1]++, '0')));
    // Construir consulta
    let query =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[43]++, supabase.from('optimized_routes').select(`
        *,
        driver:logistics_drivers!driver_id (
          id,
          name,
          phone,
          vehicle_type,
          license_plate,
          status
        )
      `).order('created_at', {
      ascending: false
    }).range(offset, offset + limit - 1));
    // Aplicar filtros
    /* istanbul ignore next */
    cov_1tc3svulig().s[44]++;
    if (status) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[9][0]++;
      cov_1tc3svulig().s[45]++;
      query = query.eq('status', status);
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[9][1]++;
    }
    cov_1tc3svulig().s[46]++;
    if (driverId) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[10][0]++;
      cov_1tc3svulig().s[47]++;
      query = query.eq('driver_id', driverId);
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[10][1]++;
    }
    const {
      data: routes,
      error
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[48]++, await query);
    /* istanbul ignore next */
    cov_1tc3svulig().s[49]++;
    if (error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[11][0]++;
      cov_1tc3svulig().s[50]++;
      console.error('Error al obtener rutas:', error);
      /* istanbul ignore next */
      cov_1tc3svulig().s[51]++;
      return _server.NextResponse.json({
        error: 'Error al obtener rutas'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[11][1]++;
    }
    // Procesar datos para incluir shipments
    const processedRoutes =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[52]++,
    /* istanbul ignore next */
    (cov_1tc3svulig().b[12][0]++, routes?.map(route => {
      /* istanbul ignore next */
      cov_1tc3svulig().f[8]++;
      cov_1tc3svulig().s[53]++;
      return {
        ...route,
        shipments:
        /* istanbul ignore next */
        (cov_1tc3svulig().b[13][0]++, route.shipments) ||
        /* istanbul ignore next */
        (cov_1tc3svulig().b[13][1]++, []),
        waypoints:
        /* istanbul ignore next */
        (cov_1tc3svulig().b[14][0]++, route.waypoints) ||
        /* istanbul ignore next */
        (cov_1tc3svulig().b[14][1]++, []),
        start_location:
        /* istanbul ignore next */
        (cov_1tc3svulig().b[15][0]++, route.start_location) ||
        /* istanbul ignore next */
        (cov_1tc3svulig().b[15][1]++, null)
      };
    })) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[12][1]++, []));
    /* istanbul ignore next */
    cov_1tc3svulig().s[54]++;
    return _server.NextResponse.json(processedRoutes);
  } catch (error) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[55]++;
    console.error('Error en GET /api/admin/logistics/routes:', error);
    /* istanbul ignore next */
    cov_1tc3svulig().s[56]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1tc3svulig().f[9]++;
  cov_1tc3svulig().s[57]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[58]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1tc3svulig().s[59]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[16][0]++;
      cov_1tc3svulig().s[60]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[16][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[61]++, await request.json());
    const {
      name,
      shipments,
      total_distance,
      estimated_time,
      driver_id,
      vehicle,
      status =
      /* istanbul ignore next */
      (cov_1tc3svulig().b[17][0]++, 'planned'),
      start_location,
      waypoints,
      optimization_score
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[62]++, body);
    // Validaciones
    /* istanbul ignore next */
    cov_1tc3svulig().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[19][0]++, !name) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[19][1]++, !shipments) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[19][2]++, !Array.isArray(shipments))) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[18][0]++;
      cov_1tc3svulig().s[64]++;
      return _server.NextResponse.json({
        error: 'Datos de ruta invÃ¡lidos'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[18][1]++;
    }
    cov_1tc3svulig().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[21][0]++, typeof total_distance !== 'number') ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[21][1]++, typeof estimated_time !== 'number')) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[20][0]++;
      cov_1tc3svulig().s[66]++;
      return _server.NextResponse.json({
        error: 'Distancia y tiempo deben ser nÃºmeros'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[20][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[67]++, await (0, _server1.createClient)());
    // Crear la ruta
    const {
      data: route,
      error: routeError
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[68]++, await supabase.from('optimized_routes').insert({
      name,
      shipments,
      total_distance,
      estimated_time,
      driver_id:
      /* istanbul ignore next */
      (cov_1tc3svulig().b[22][0]++, driver_id) ||
      /* istanbul ignore next */
      (cov_1tc3svulig().b[22][1]++, null),
      vehicle:
      /* istanbul ignore next */
      (cov_1tc3svulig().b[23][0]++, vehicle) ||
      /* istanbul ignore next */
      (cov_1tc3svulig().b[23][1]++, null),
      status,
      start_location:
      /* istanbul ignore next */
      (cov_1tc3svulig().b[24][0]++, start_location) ||
      /* istanbul ignore next */
      (cov_1tc3svulig().b[24][1]++, null),
      waypoints:
      /* istanbul ignore next */
      (cov_1tc3svulig().b[25][0]++, waypoints) ||
      /* istanbul ignore next */
      (cov_1tc3svulig().b[25][1]++, []),
      optimization_score:
      /* istanbul ignore next */
      (cov_1tc3svulig().b[26][0]++, optimization_score) ||
      /* istanbul ignore next */
      (cov_1tc3svulig().b[26][1]++, 0),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_1tc3svulig().s[69]++;
    if (routeError) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[27][0]++;
      cov_1tc3svulig().s[70]++;
      console.error('Error al crear ruta:', routeError);
      /* istanbul ignore next */
      cov_1tc3svulig().s[71]++;
      return _server.NextResponse.json({
        error: 'Error al crear ruta'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[27][1]++;
    }
    // Si hay envÃ­os, actualizar su route_id
    cov_1tc3svulig().s[72]++;
    if (shipments.length > 0) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[28][0]++;
      const shipmentIds =
      /* istanbul ignore next */
      (cov_1tc3svulig().s[73]++, shipments.map(s => {
        /* istanbul ignore next */
        cov_1tc3svulig().f[10]++;
        cov_1tc3svulig().s[74]++;
        return s.id;
      }).filter(Boolean));
      /* istanbul ignore next */
      cov_1tc3svulig().s[75]++;
      if (shipmentIds.length > 0) {
        /* istanbul ignore next */
        cov_1tc3svulig().b[29][0]++;
        const {
          error: updateError
        } =
        /* istanbul ignore next */
        (cov_1tc3svulig().s[76]++, await supabase.from('shipments').update({
          route_id: route.id
        }).in('id', shipmentIds));
        /* istanbul ignore next */
        cov_1tc3svulig().s[77]++;
        if (updateError) {
          /* istanbul ignore next */
          cov_1tc3svulig().b[30][0]++;
          cov_1tc3svulig().s[78]++;
          console.error('Error al actualizar envÃ­os con route_id:', updateError);
          // No fallar la creaciÃ³n de la ruta por esto
        } else
        /* istanbul ignore next */
        {
          cov_1tc3svulig().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1tc3svulig().b[29][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[28][1]++;
    }
    cov_1tc3svulig().s[79]++;
    return _server.NextResponse.json(route, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[80]++;
    console.error('Error en POST /api/admin/logistics/routes:', error);
    /* istanbul ignore next */
    cov_1tc3svulig().s[81]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function PATCH(request) {
  /* istanbul ignore next */
  cov_1tc3svulig().f[11]++;
  cov_1tc3svulig().s[82]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[83]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1tc3svulig().s[84]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[31][0]++;
      cov_1tc3svulig().s[85]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[31][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[86]++, await request.json());
    const {
      id,
      ...updates
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[87]++, body);
    /* istanbul ignore next */
    cov_1tc3svulig().s[88]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[32][0]++;
      cov_1tc3svulig().s[89]++;
      return _server.NextResponse.json({
        error: 'ID de ruta requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[32][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[90]++, await (0, _server1.createClient)());
    // Actualizar la ruta
    const {
      data: route,
      error
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[91]++, await supabase.from('optimized_routes').update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq('id', id).select().single());
    /* istanbul ignore next */
    cov_1tc3svulig().s[92]++;
    if (error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[33][0]++;
      cov_1tc3svulig().s[93]++;
      console.error('Error al actualizar ruta:', error);
      /* istanbul ignore next */
      cov_1tc3svulig().s[94]++;
      return _server.NextResponse.json({
        error: 'Error al actualizar ruta'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[33][1]++;
    }
    cov_1tc3svulig().s[95]++;
    return _server.NextResponse.json(route);
  } catch (error) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[96]++;
    console.error('Error en PATCH /api/admin/logistics/routes:', error);
    /* istanbul ignore next */
    cov_1tc3svulig().s[97]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_1tc3svulig().f[12]++;
  cov_1tc3svulig().s[98]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[99]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1tc3svulig().s[100]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[34][0]++;
      cov_1tc3svulig().s[101]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[34][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[102]++, new URL(request.url));
    const id =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[103]++, searchParams.get('id'));
    /* istanbul ignore next */
    cov_1tc3svulig().s[104]++;
    if (!id) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[35][0]++;
      cov_1tc3svulig().s[105]++;
      return _server.NextResponse.json({
        error: 'ID de ruta requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[35][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[106]++, await (0, _server1.createClient)());
    // Verificar que la ruta existe y no estÃ¡ activa
    const {
      data: existingRoute,
      error: checkError
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[107]++, await supabase.from('optimized_routes').select('id, status, shipments').eq('id', id).single());
    /* istanbul ignore next */
    cov_1tc3svulig().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[37][0]++, checkError) ||
    /* istanbul ignore next */
    (cov_1tc3svulig().b[37][1]++, !existingRoute)) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[36][0]++;
      cov_1tc3svulig().s[109]++;
      return _server.NextResponse.json({
        error: 'Ruta no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[36][1]++;
    }
    cov_1tc3svulig().s[110]++;
    if (existingRoute.status === 'active') {
      /* istanbul ignore next */
      cov_1tc3svulig().b[38][0]++;
      cov_1tc3svulig().s[111]++;
      return _server.NextResponse.json({
        error: 'No se puede eliminar una ruta activa'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[38][1]++;
    }
    // Limpiar route_id de los envÃ­os
    cov_1tc3svulig().s[112]++;
    if (
    /* istanbul ignore next */
    (cov_1tc3svulig().b[40][0]++, existingRoute.shipments) &&
    /* istanbul ignore next */
    (cov_1tc3svulig().b[40][1]++, Array.isArray(existingRoute.shipments))) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[39][0]++;
      const shipmentIds =
      /* istanbul ignore next */
      (cov_1tc3svulig().s[113]++, existingRoute.shipments.map(s => {
        /* istanbul ignore next */
        cov_1tc3svulig().f[13]++;
        cov_1tc3svulig().s[114]++;
        return s.id;
      }).filter(Boolean));
      /* istanbul ignore next */
      cov_1tc3svulig().s[115]++;
      if (shipmentIds.length > 0) {
        /* istanbul ignore next */
        cov_1tc3svulig().b[41][0]++;
        cov_1tc3svulig().s[116]++;
        await supabase.from('shipments').update({
          route_id: null
        }).in('id', shipmentIds);
      } else
      /* istanbul ignore next */
      {
        cov_1tc3svulig().b[41][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[39][1]++;
    }
    // Eliminar la ruta
    const {
      error: deleteError
    } =
    /* istanbul ignore next */
    (cov_1tc3svulig().s[117]++, await supabase.from('optimized_routes').delete().eq('id', id));
    /* istanbul ignore next */
    cov_1tc3svulig().s[118]++;
    if (deleteError) {
      /* istanbul ignore next */
      cov_1tc3svulig().b[42][0]++;
      cov_1tc3svulig().s[119]++;
      console.error('Error al eliminar ruta:', deleteError);
      /* istanbul ignore next */
      cov_1tc3svulig().s[120]++;
      return _server.NextResponse.json({
        error: 'Error al eliminar ruta'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1tc3svulig().b[42][1]++;
    }
    cov_1tc3svulig().s[121]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1tc3svulig().s[122]++;
    console.error('Error en DELETE /api/admin/logistics/routes:', error);
    /* istanbul ignore next */
    cov_1tc3svulig().s[123]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,