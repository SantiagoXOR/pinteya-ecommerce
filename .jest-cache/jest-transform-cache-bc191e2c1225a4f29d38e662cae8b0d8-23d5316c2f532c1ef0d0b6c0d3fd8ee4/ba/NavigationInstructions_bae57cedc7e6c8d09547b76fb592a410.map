{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\NavigationInstructions.tsx"],"sourcesContent":["/**\r\n * Componente de instrucciones de navegación turn-by-turn\r\n * Muestra direcciones paso a paso de forma clara y legible\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { \r\n  ArrowUp, \r\n  ArrowDown, \r\n  ArrowLeft, \r\n  ArrowRight,\r\n  RotateCcw,\r\n  Navigation,\r\n  MapPin,\r\n  Clock\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/core/utils';\r\n\r\ninterface NavigationStep {\r\n  instruction: string;\r\n  distance: string;\r\n  duration: string;\r\n  maneuver: string;\r\n  coordinates: { lat: number; lng: number };\r\n}\r\n\r\ninterface NavigationInstructionsProps {\r\n  instructions: NavigationStep[];\r\n  currentLocation: { lat: number; lng: number } | null;\r\n}\r\n\r\nexport function NavigationInstructions({\r\n  instructions,\r\n  currentLocation\r\n}: NavigationInstructionsProps) {\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n  const [nextStepIndex, setNextStepIndex] = useState(1);\r\n\r\n  const currentStep = instructions[currentStepIndex];\r\n  const nextStep = instructions[nextStepIndex];\r\n\r\n  // Calcular distancia entre dos puntos\r\n  const calculateDistance = (\r\n    point1: { lat: number; lng: number },\r\n    point2: { lat: number; lng: number }\r\n  ) => {\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = (point2.lat - point1.lat) * Math.PI / 180;\r\n    const dLon = (point2.lng - point1.lng) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c * 1000; // Convertir a metros\r\n  };\r\n\r\n  // Actualizar paso actual basado en la ubicación\r\n  useEffect(() => {\r\n    if (!currentLocation || !instructions.length) return;\r\n\r\n    // Encontrar el paso más cercano a la ubicación actual\r\n    let closestStepIndex = 0;\r\n    let minDistance = Infinity;\r\n\r\n    instructions.forEach((step, index) => {\r\n      const distance = calculateDistance(currentLocation, step.coordinates);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closestStepIndex = index;\r\n      }\r\n    });\r\n\r\n    // Solo actualizar si estamos cerca del siguiente paso (menos de 50 metros)\r\n    if (minDistance < 50 && closestStepIndex !== currentStepIndex) {\r\n      setCurrentStepIndex(closestStepIndex);\r\n      setNextStepIndex(Math.min(closestStepIndex + 1, instructions.length - 1));\r\n    }\r\n  }, [currentLocation, instructions]);\r\n\r\n  const getManeuverIcon = (maneuver: string) => {\r\n    const iconClass = \"h-8 w-8 text-white\";\r\n    \r\n    switch (maneuver.toLowerCase()) {\r\n      case 'turn-left':\r\n      case 'turn-slight-left':\r\n        return <ArrowLeft className={iconClass} />;\r\n      case 'turn-right':\r\n      case 'turn-slight-right':\r\n        return <ArrowRight className={iconClass} />;\r\n      case 'straight':\r\n      case 'continue':\r\n        return <ArrowUp className={iconClass} />;\r\n      case 'u-turn':\r\n        return <RotateCcw className={iconClass} />;\r\n      case 'roundabout':\r\n        return <RotateCcw className={iconClass} />;\r\n      default:\r\n        return <Navigation className={iconClass} />;\r\n    }\r\n  };\r\n\r\n  const getManeuverColor = (maneuver: string) => {\r\n    switch (maneuver.toLowerCase()) {\r\n      case 'turn-left':\r\n      case 'turn-slight-left':\r\n        return 'bg-blue-600';\r\n      case 'turn-right':\r\n      case 'turn-slight-right':\r\n        return 'bg-green-600';\r\n      case 'straight':\r\n      case 'continue':\r\n        return 'bg-gray-600';\r\n      case 'u-turn':\r\n        return 'bg-red-600';\r\n      case 'roundabout':\r\n        return 'bg-purple-600';\r\n      default:\r\n        return 'bg-blue-600';\r\n    }\r\n  };\r\n\r\n  if (!currentStep) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {/* Instrucción principal */}\r\n      <Card className=\"bg-white shadow-lg\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className={cn(\r\n              \"rounded-full p-3 flex-shrink-0\",\r\n              getManeuverColor(currentStep.maneuver)\r\n            )}>\r\n              {getManeuverIcon(currentStep.maneuver)}\r\n            </div>\r\n            \r\n            <div className=\"flex-1 min-w-0\">\r\n              <p className=\"text-lg font-semibold text-gray-900 leading-tight\">\r\n                {currentStep.instruction}\r\n              </p>\r\n              <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\r\n                <div className=\"flex items-center space-x-1\">\r\n                  <MapPin className=\"h-4 w-4\" />\r\n                  <span>{currentStep.distance}</span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-1\">\r\n                  <Clock className=\"h-4 w-4\" />\r\n                  <span>{currentStep.duration}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Próxima instrucción */}\r\n      {nextStep && nextStepIndex < instructions.length && (\r\n        <Card className=\"bg-gray-50 border-gray-200\">\r\n          <CardContent className=\"p-3\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className={cn(\r\n                \"rounded-full p-2 flex-shrink-0\",\r\n                getManeuverColor(nextStep.maneuver),\r\n                \"opacity-70\"\r\n              )}>\r\n                {getManeuverIcon(nextStep.maneuver)}\r\n              </div>\r\n              \r\n              <div className=\"flex-1 min-w-0\">\r\n                <p className=\"text-sm font-medium text-gray-700 leading-tight\">\r\n                  Luego: {nextStep.instruction}\r\n                </p>\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                  {nextStep.distance}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Progreso de la ruta */}\r\n      <Card className=\"bg-blue-50 border-blue-200\">\r\n        <CardContent className=\"p-3\">\r\n          <div className=\"flex items-center justify-between text-sm\">\r\n            <span className=\"text-blue-800 font-medium\">\r\n              Paso {currentStepIndex + 1} de {instructions.length}\r\n            </span>\r\n            <div className=\"flex-1 mx-3\">\r\n              <div className=\"bg-blue-200 rounded-full h-2\">\r\n                <div \r\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                  style={{ \r\n                    width: `${((currentStepIndex + 1) / instructions.length) * 100}%` \r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <span className=\"text-blue-600 text-xs\">\r\n              {Math.round(((currentStepIndex + 1) / instructions.length) * 100)}%\r\n            </span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["NavigationInstructions","instructions","currentLocation","currentStepIndex","setCurrentStepIndex","useState","nextStepIndex","setNextStepIndex","currentStep","nextStep","calculateDistance","point1","point2","R","dLat","lat","Math","PI","dLon","lng","a","sin","cos","c","atan2","sqrt","useEffect","length","closestStepIndex","minDistance","Infinity","forEach","step","index","distance","coordinates","min","getManeuverIcon","maneuver","iconClass","toLowerCase","ArrowLeft","className","ArrowRight","ArrowUp","RotateCcw","Navigation","getManeuverColor","div","Card","CardContent","cn","p","instruction","MapPin","span","Clock","duration","style","width","round"],"mappings":"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"}