{"version":3,"names":["cov_2jy0vjem40","actualCoverage","s","GET","f","PUT","runtime","request","authResult","_adminauth","getAuthenticatedAdmin","b","isAdmin","userId","_server","NextResponse","json","success","error","status","config","metrics","enabled","flushInterval","retentionDays","aggregationPeriods","alerts","escalationEnabled","defaultCooldown","maxAlertsPerHour","circuitBreakers","configs","mercadopago_critical","_circuitbreaker","mercadoPagoCriticalBreaker","getMetrics","mercadopago_standard","mercadoPagoStandardBreaker","webhook_processing","webhookProcessingBreaker","dashboard","refreshInterval","maxDataPoints","cacheTimeout","compliance","auditEnabled","retentionPolicies","authentication","payment_processing","security_violation","data_access","encryptionEnabled","stats","getSystemStats","_logger","logger","info","LogLevel","INFO","configSections","Object","keys","length","LogCategory","SYSTEM","data","timestamp","Date","toISOString","ERROR","Error","message","body","section","updateResult","updateMetricsConfig","updateAlertsConfig","updateCircuitBreakersConfig","updateDashboardConfig","updateComplianceConfig","changes","updated","supabase","_supabase","getSupabaseClient","total","last24h","active","auditEvents","now","metricsStats","from","select","gte","count","totalMetrics","head","alertsStats","eq","totalAlerts","auditStats","totalAuditEvents","validFields","updates","field","undefined","reset","includes","mercadopago_critical_reset","mercadopago_standard_reset","webhook_processing_reset"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\config\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - MONITORING CONFIGURATION API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\r\nimport { enterpriseMetrics } from '@/lib/monitoring/enterprise-metrics';\r\nimport { enterpriseAlertSystem } from '@/lib/monitoring/alert-system';\r\nimport { \r\n  mercadoPagoCriticalBreaker, \r\n  mercadoPagoStandardBreaker, \r\n  webhookProcessingBreaker \r\n} from '@/lib/integrations/mercadopago/circuit-breaker';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\ninterface MonitoringConfig {\r\n  metrics: {\r\n    enabled: boolean;\r\n    flushInterval: number;\r\n    retentionDays: number;\r\n    aggregationPeriods: string[];\r\n  };\r\n  alerts: {\r\n    enabled: boolean;\r\n    escalationEnabled: boolean;\r\n    defaultCooldown: number;\r\n    maxAlertsPerHour: number;\r\n  };\r\n  circuitBreakers: {\r\n    enabled: boolean;\r\n    configs: Record<string, any>;\r\n  };\r\n  dashboard: {\r\n    refreshInterval: number;\r\n    maxDataPoints: number;\r\n    cacheTimeout: number;\r\n  };\r\n  compliance: {\r\n    auditEnabled: boolean;\r\n    retentionPolicies: Record<string, number>;\r\n    encryptionEnabled: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * GET /api/admin/monitoring/config\r\n * Obtiene la configuración actual del sistema de monitoreo\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Obtener configuración actual\r\n    const config: MonitoringConfig = {\r\n      metrics: {\r\n        enabled: true,\r\n        flushInterval: 30000, // 30 segundos\r\n        retentionDays: 30,\r\n        aggregationPeriods: ['1m', '5m', '1h', '1d', '7d']\r\n      },\r\n      alerts: {\r\n        enabled: true,\r\n        escalationEnabled: true,\r\n        defaultCooldown: 5, // minutos\r\n        maxAlertsPerHour: 100\r\n      },\r\n      circuitBreakers: {\r\n        enabled: true,\r\n        configs: {\r\n          mercadopago_critical: mercadoPagoCriticalBreaker.getMetrics(),\r\n          mercadopago_standard: mercadoPagoStandardBreaker.getMetrics(),\r\n          webhook_processing: webhookProcessingBreaker.getMetrics()\r\n        }\r\n      },\r\n      dashboard: {\r\n        refreshInterval: 5000, // 5 segundos\r\n        maxDataPoints: 100,\r\n        cacheTimeout: 30 // segundos\r\n      },\r\n      compliance: {\r\n        auditEnabled: true,\r\n        retentionPolicies: {\r\n          authentication: 365,\r\n          payment_processing: 2555, // 7 años\r\n          security_violation: 2555,\r\n          data_access: 1095 // 3 años\r\n        },\r\n        encryptionEnabled: true\r\n      }\r\n    };\r\n\r\n    // Obtener estadísticas del sistema\r\n    const stats = await getSystemStats();\r\n\r\n    logger.info(LogLevel.INFO, 'Monitoring configuration retrieved', {\r\n      userId: authResult.userId,\r\n      configSections: Object.keys(config).length\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        config,\r\n        stats,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to get monitoring configuration', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * PUT /api/admin/monitoring/config\r\n * Actualiza la configuración del sistema de monitoreo\r\n */\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { section, config } = body;\r\n\r\n    if (!section || !config) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Faltan parámetros: section y config'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar y aplicar configuración según la sección\r\n    let updateResult: any = {};\r\n\r\n    switch (section) {\r\n      case 'metrics':\r\n        updateResult = await updateMetricsConfig(config, authResult.userId);\r\n        break;\r\n      case 'alerts':\r\n        updateResult = await updateAlertsConfig(config, authResult.userId);\r\n        break;\r\n      case 'circuitBreakers':\r\n        updateResult = await updateCircuitBreakersConfig(config, authResult.userId);\r\n        break;\r\n      case 'dashboard':\r\n        updateResult = await updateDashboardConfig(config, authResult.userId);\r\n        break;\r\n      case 'compliance':\r\n        updateResult = await updateComplianceConfig(config, authResult.userId);\r\n        break;\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Sección de configuración no válida'\r\n        }, { status: 400 });\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Monitoring configuration updated: ${section}`, {\r\n      userId: authResult.userId,\r\n      section,\r\n      changes: Object.keys(config).length\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        section,\r\n        updated: updateResult,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to update monitoring configuration', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene estadísticas del sistema\r\n */\r\nasync function getSystemStats() {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    return {\r\n      metrics: { total: 0, last24h: 0 },\r\n      alerts: { active: 0, total: 0 },\r\n      auditEvents: { total: 0, last24h: 0 }\r\n    };\r\n  }\r\n\r\n  const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\r\n\r\n  // Estadísticas de métricas\r\n  const { data: metricsStats } = await supabase\r\n    .from('enterprise_metrics')\r\n    .select('id, timestamp')\r\n    .gte('timestamp', last24h);\r\n\r\n  const { count: totalMetrics } = await supabase\r\n    .from('enterprise_metrics')\r\n    .select('*', { count: 'exact', head: true });\r\n\r\n  // Estadísticas de alertas\r\n  const { data: alertsStats } = await supabase\r\n    .from('enterprise_alerts')\r\n    .select('id, status, triggered_at')\r\n    .eq('status', 'active');\r\n\r\n  const { count: totalAlerts } = await supabase\r\n    .from('enterprise_alerts')\r\n    .select('*', { count: 'exact', head: true });\r\n\r\n  // Estadísticas de auditoría\r\n  const { data: auditStats } = await supabase\r\n    .from('audit_events')\r\n    .select('id, timestamp')\r\n    .gte('timestamp', last24h);\r\n\r\n  const { count: totalAuditEvents } = await supabase\r\n    .from('audit_events')\r\n    .select('*', { count: 'exact', head: true });\r\n\r\n  return {\r\n    metrics: {\r\n      total: totalMetrics || 0,\r\n      last24h: metricsStats?.length || 0\r\n    },\r\n    alerts: {\r\n      active: alertsStats?.length || 0,\r\n      total: totalAlerts || 0\r\n    },\r\n    auditEvents: {\r\n      total: totalAuditEvents || 0,\r\n      last24h: auditStats?.length || 0\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Actualiza configuración de métricas\r\n */\r\nasync function updateMetricsConfig(config: any, userId: string) {\r\n  // TODO: Implementar actualización de configuración de métricas\r\n  // Por ahora solo validamos y retornamos confirmación\r\n  \r\n  const validFields = ['enabled', 'flushInterval', 'retentionDays', 'aggregationPeriods'];\r\n  const updates: Record<string, any> = {};\r\n\r\n  for (const field of validFields) {\r\n    if (config[field] !== undefined) {\r\n      updates[field] = config[field];\r\n    }\r\n  }\r\n\r\n  return {\r\n    updated: updates,\r\n    message: 'Metrics configuration updated successfully'\r\n  };\r\n}\r\n\r\n/**\r\n * Actualiza configuración de alertas\r\n */\r\nasync function updateAlertsConfig(config: any, userId: string) {\r\n  const validFields = ['enabled', 'escalationEnabled', 'defaultCooldown', 'maxAlertsPerHour'];\r\n  const updates: Record<string, any> = {};\r\n\r\n  for (const field of validFields) {\r\n    if (config[field] !== undefined) {\r\n      updates[field] = config[field];\r\n    }\r\n  }\r\n\r\n  return {\r\n    updated: updates,\r\n    message: 'Alerts configuration updated successfully'\r\n  };\r\n}\r\n\r\n/**\r\n * Actualiza configuración de circuit breakers\r\n */\r\nasync function updateCircuitBreakersConfig(config: any, userId: string) {\r\n  const updates: Record<string, any> = {};\r\n\r\n  if (config.enabled !== undefined) {\r\n    updates.enabled = config.enabled;\r\n  }\r\n\r\n  // Reset circuit breakers si se solicita\r\n  if (config.reset) {\r\n    if (config.reset.includes('mercadopago_critical')) {\r\n      mercadoPagoCriticalBreaker.reset();\r\n      updates.mercadopago_critical_reset = true;\r\n    }\r\n    if (config.reset.includes('mercadopago_standard')) {\r\n      mercadoPagoStandardBreaker.reset();\r\n      updates.mercadopago_standard_reset = true;\r\n    }\r\n    if (config.reset.includes('webhook_processing')) {\r\n      webhookProcessingBreaker.reset();\r\n      updates.webhook_processing_reset = true;\r\n    }\r\n  }\r\n\r\n  return {\r\n    updated: updates,\r\n    message: 'Circuit breakers configuration updated successfully'\r\n  };\r\n}\r\n\r\n/**\r\n * Actualiza configuración del dashboard\r\n */\r\nasync function updateDashboardConfig(config: any, userId: string) {\r\n  const validFields = ['refreshInterval', 'maxDataPoints', 'cacheTimeout'];\r\n  const updates: Record<string, any> = {};\r\n\r\n  for (const field of validFields) {\r\n    if (config[field] !== undefined) {\r\n      updates[field] = config[field];\r\n    }\r\n  }\r\n\r\n  return {\r\n    updated: updates,\r\n    message: 'Dashboard configuration updated successfully'\r\n  };\r\n}\r\n\r\n/**\r\n * Actualiza configuración de compliance\r\n */\r\nasync function updateComplianceConfig(config: any, userId: string) {\r\n  const validFields = ['auditEnabled', 'retentionPolicies', 'encryptionEnabled'];\r\n  const updates: Record<string, any> = {};\r\n\r\n  for (const field of validFields) {\r\n    if (config[field] !== undefined) {\r\n      updates[field] = config[field];\r\n    }\r\n  }\r\n\r\n  return {\r\n    updated: updates,\r\n    message: 'Compliance configuration updated successfully'\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}