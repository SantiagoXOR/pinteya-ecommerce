{"version":3,"names":["GET","cov_rqzpocc2","f","s","POST","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","CreateShipmentFromOrderSchema","_zod","z","object","carrier_id","number","int","positive","shipping_service","string","min","items","array","order_item_id","uuid","quantity","pickup_address","street_name","street_number","city_name","state_name","zip_code","country","default","optional","delivery_address","apartment","weight_kg","dimensions_cm","special_instructions","notes","estimated_delivery_date","generateShipmentNumber","timestamp","Date","now","toString","random","Math","substr","toUpperCase","slice","validateOrderAccess","orderId","userId","data","order","error","from","select","eq","single","b","Error","message","includes","status","createShipmentRecord","orderData","validatedData","shipmentNumber","totalWeight","order_items","reduce","sum","item","itemWeight","products","deliveryAddress","shipping_address","shipment","insert","shipment_number","order_id","id","created_at","toISOString","updated_at","createShipmentItems","shipmentId","orderItems","requestedItems","shipmentItems","map","reqItem","orderItem","find","oi","shipment_id","product_id","createInitialTrackingEvent","description","occurred_at","console","updateOrderStatus","update","request","params","session","_auth","auth","user","_server","NextResponse","json","body","validationResult","safeParse","success","details","errors","carrier","carrierError","completeShipment","fetchError","log","name","user_id","shipments","ascending"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\shipments\\route.ts"],"sourcesContent":["// =====================================================\r\n// API: INTEGRACIÓN ÓRDENES-LOGÍSTICA\r\n// Ruta: /api/admin/orders/[id]/shipments\r\n// Descripción: Crear y gestionar envíos desde órdenes\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// CONFIGURACIÓN\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nconst CreateShipmentFromOrderSchema = z.object({\r\n  carrier_id: z.number().int().positive(),\r\n  shipping_service: z.string().min(1),\r\n  items: z.array(z.object({\r\n    order_item_id: z.string().uuid(),\r\n    quantity: z.number().int().positive()\r\n  })).min(1),\r\n  pickup_address: z.object({\r\n    street_name: z.string(),\r\n    street_number: z.string(),\r\n    city_name: z.string(),\r\n    state_name: z.string(),\r\n    zip_code: z.string(),\r\n    country: z.string().default('Argentina')\r\n  }).optional(),\r\n  delivery_address: z.object({\r\n    street_name: z.string(),\r\n    street_number: z.string(),\r\n    apartment: z.string().optional(),\r\n    city_name: z.string(),\r\n    state_name: z.string(),\r\n    zip_code: z.string(),\r\n    country: z.string().default('Argentina')\r\n  }),\r\n  weight_kg: z.number().positive().optional(),\r\n  dimensions_cm: z.string().optional(),\r\n  special_instructions: z.string().optional(),\r\n  notes: z.string().optional(),\r\n  estimated_delivery_date: z.string().optional()\r\n});\r\n\r\n// =====================================================\r\n// FUNCIONES AUXILIARES\r\n// =====================================================\r\n\r\nfunction generateShipmentNumber(): string {\r\n  const timestamp = Date.now().toString();\r\n  const random = Math.random().toString(36).substr(2, 5).toUpperCase();\r\n  return `SHP-${timestamp.slice(-8)}-${random}`;\r\n}\r\n\r\nasync function validateOrderAccess(orderId: string, userId: string): Promise<any> {\r\n  const { data: order, error } = await supabase\r\n    .from('orders')\r\n    .select(`\r\n      id,\r\n      order_number,\r\n      status,\r\n      payment_status,\r\n      total,\r\n      shipping_address,\r\n      user_profiles (\r\n        id,\r\n        name,\r\n        email\r\n      ),\r\n      order_items (\r\n        id,\r\n        product_id,\r\n        quantity,\r\n        unit_price,\r\n        products (\r\n          id,\r\n          name,\r\n          weight_kg,\r\n          dimensions_cm\r\n        )\r\n      )\r\n    `)\r\n    .eq('id', orderId)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new Error(`Error obteniendo orden: ${error.message}`);\r\n  }\r\n\r\n  if (!order) {\r\n    throw new Error('Orden no encontrada');\r\n  }\r\n\r\n  // Verificar que la orden esté en estado válido para envío\r\n  if (!['confirmed', 'processing'].includes(order.status)) {\r\n    throw new Error(`La orden debe estar confirmada o en procesamiento para crear envío. Estado actual: ${order.status}`);\r\n  }\r\n\r\n  return order;\r\n}\r\n\r\nasync function createShipmentRecord(orderData: any, validatedData: any): Promise<any> {\r\n  const shipmentNumber = generateShipmentNumber();\r\n  \r\n  // Calcular peso total si no se proporciona\r\n  let totalWeight = validatedData.weight_kg;\r\n  if (!totalWeight) {\r\n    totalWeight = orderData.order_items.reduce((sum: number, item: any) => {\r\n      const itemWeight = item.products?.weight_kg || 0.5; // Peso por defecto 500g\r\n      return sum + (itemWeight * item.quantity);\r\n    }, 0);\r\n  }\r\n\r\n  // Usar dirección de envío de la orden si no se proporciona\r\n  const deliveryAddress = validatedData.delivery_address || orderData.shipping_address;\r\n\r\n  const { data: shipment, error } = await supabase\r\n    .from('shipments')\r\n    .insert({\r\n      shipment_number: shipmentNumber,\r\n      order_id: orderData.id,\r\n      status: 'pending',\r\n      carrier_id: validatedData.carrier_id,\r\n      shipping_service: validatedData.shipping_service,\r\n      pickup_address: validatedData.pickup_address,\r\n      delivery_address: deliveryAddress,\r\n      weight_kg: totalWeight,\r\n      dimensions_cm: validatedData.dimensions_cm,\r\n      special_instructions: validatedData.special_instructions,\r\n      notes: validatedData.notes,\r\n      estimated_delivery_date: validatedData.estimated_delivery_date,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .select(`\r\n      *,\r\n      carrier:couriers(id, name, code, logo_url)\r\n    `)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new Error(`Error creando envío: ${error.message}`);\r\n  }\r\n\r\n  return shipment;\r\n}\r\n\r\nasync function createShipmentItems(shipmentId: string, orderItems: any[], requestedItems: any[]): Promise<void> {\r\n  const shipmentItems = requestedItems.map(reqItem => {\r\n    const orderItem = orderItems.find(oi => oi.id === reqItem.order_item_id);\r\n    if (!orderItem) {\r\n      throw new Error(`Item de orden no encontrado: ${reqItem.order_item_id}`);\r\n    }\r\n\r\n    if (reqItem.quantity > orderItem.quantity) {\r\n      throw new Error(`Cantidad solicitada (${reqItem.quantity}) excede cantidad disponible (${orderItem.quantity})`);\r\n    }\r\n\r\n    return {\r\n      shipment_id: shipmentId,\r\n      order_item_id: reqItem.order_item_id,\r\n      product_id: orderItem.product_id,\r\n      quantity: reqItem.quantity,\r\n      weight_kg: (orderItem.products?.weight_kg || 0.5) * reqItem.quantity,\r\n      created_at: new Date().toISOString()\r\n    };\r\n  });\r\n\r\n  const { error } = await supabase\r\n    .from('shipment_items')\r\n    .insert(shipmentItems);\r\n\r\n  if (error) {\r\n    throw new Error(`Error creando items de envío: ${error.message}`);\r\n  }\r\n}\r\n\r\nasync function createInitialTrackingEvent(shipmentId: string): Promise<void> {\r\n  const { error } = await supabase\r\n    .from('tracking_events')\r\n    .insert({\r\n      shipment_id: shipmentId,\r\n      status: 'pending',\r\n      description: 'Envío creado desde orden - Pendiente de confirmación',\r\n      occurred_at: new Date().toISOString(),\r\n      created_at: new Date().toISOString()\r\n    });\r\n\r\n  if (error) {\r\n    console.error('Error creando evento de tracking inicial:', error);\r\n    // No lanzar error, es opcional\r\n  }\r\n}\r\n\r\nasync function updateOrderStatus(orderId: string): Promise<void> {\r\n  // Actualizar estado de la orden a \"shipped\" si todos los items tienen envío\r\n  const { error } = await supabase\r\n    .from('orders')\r\n    .update({ \r\n      status: 'processing', // Cambiar a processing mientras se confirma el envío\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('id', orderId);\r\n\r\n  if (error) {\r\n    console.error('Error actualizando estado de orden:', error);\r\n    // No lanzar error, es opcional\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER POST - CREAR ENVÍO DESDE ORDEN\r\n// =====================================================\r\n\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = CreateShipmentFromOrderSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Datos de envío inválidos', \r\n          details: validationResult.error.errors \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const validatedData = validationResult.data;\r\n\r\n    // Validar acceso a la orden y obtener datos\r\n    const orderData = await validateOrderAccess(orderId, session.user.id!);\r\n\r\n    // Verificar que el carrier existe\r\n    const { data: carrier, error: carrierError } = await supabase\r\n      .from('couriers')\r\n      .select('id, name, is_active')\r\n      .eq('id', validatedData.carrier_id)\r\n      .eq('is_active', true)\r\n      .single();\r\n\r\n    if (carrierError || !carrier) {\r\n      return NextResponse.json(\r\n        { error: 'Carrier no encontrado o inactivo' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Crear el envío\r\n    const shipment = await createShipmentRecord(orderData, validatedData);\r\n\r\n    // Crear los items del envío\r\n    await createShipmentItems(shipment.id, orderData.order_items, validatedData.items);\r\n\r\n    // Crear evento de tracking inicial\r\n    await createInitialTrackingEvent(shipment.id);\r\n\r\n    // Actualizar estado de la orden\r\n    await updateOrderStatus(orderId);\r\n\r\n    // Obtener el envío completo con todos los datos\r\n    const { data: completeShipment, error: fetchError } = await supabase\r\n      .from('shipments')\r\n      .select(`\r\n        *,\r\n        carrier:couriers(id, name, code, logo_url),\r\n        items:shipment_items(\r\n          id, quantity, weight_kg,\r\n          order_item:order_items(\r\n            id, quantity, unit_price,\r\n            product:products(id, name, sku)\r\n          )\r\n        ),\r\n        tracking_events(\r\n          id, status, description, occurred_at\r\n        )\r\n      `)\r\n      .eq('id', shipment.id)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      console.error('Error obteniendo envío completo:', fetchError);\r\n    }\r\n\r\n    console.log('✅ Envío creado exitosamente:', {\r\n      shipment_id: shipment.id,\r\n      shipment_number: shipment.shipment_number,\r\n      order_id: orderId,\r\n      carrier: carrier.name,\r\n      user_id: session.user.id\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Envío creado exitosamente',\r\n      data: completeShipment || shipment\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error creando envío desde orden:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - OBTENER ENVÍOS DE UNA ORDEN\r\n// =====================================================\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const orderId = params.id;\r\n\r\n    // Obtener envíos de la orden\r\n    const { data: shipments, error } = await supabase\r\n      .from('shipments')\r\n      .select(`\r\n        *,\r\n        carrier:couriers(id, name, code, logo_url),\r\n        items:shipment_items(\r\n          id, quantity, weight_kg,\r\n          order_item:order_items(\r\n            id, quantity, unit_price,\r\n            product:products(id, name, sku)\r\n          )\r\n        ),\r\n        tracking_events(\r\n          id, status, description, occurred_at, location\r\n        )\r\n      `)\r\n      .eq('order_id', orderId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: shipments || []\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Error obteniendo envíos de orden:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}