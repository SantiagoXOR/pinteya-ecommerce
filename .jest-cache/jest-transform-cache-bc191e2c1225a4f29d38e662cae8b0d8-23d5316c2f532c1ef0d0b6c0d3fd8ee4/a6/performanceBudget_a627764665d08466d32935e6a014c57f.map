{"version":3,"names":["cov_zeetmlbdt","actualCoverage","s","PERFORMANCE_BUDGETS","f","PerformanceBudgetMonitor","default","_default","usePerformanceBudget","LCP","FID","CLS","FCP","TTI","totalJSSize","totalCSSSize","totalImageSize","totalRequests","totalTransferSize","constructor","metrics","observers","window","b","initializeObservers","lcpObserver","PerformanceObserver","list","entries","getEntries","lastEntry","length","recordMetric","startTime","observe","entryTypes","push","fidObserver","forEach","entry","fidEntry","processingStart","clsObserver","clsValue","clsEntry","hadRecentInput","value","navObserver","navEntry","firstContentfulPaint","domInteractive","type","currentUrl","location","pathname","timestamp","Date","now","existingMetrics","find","m","url","violations","score","checkViolations","calculateScore","Object","key","budgetKey","budget","undefined","violation","toFixed","weights","totalScore","totalWeight","weight","Math","max","min","getCurrentMetrics","filter","sort","a","getAllMetrics","getCurrentViolations","current","getCurrentScore","isWithinBudget","generateReport","recommendations","includes","summary","withinBudget","cleanup","observer","disconnect","globalMonitor","monitor"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\utils\\performanceBudget.ts"],"sourcesContent":["// ===================================\r\n// PERFORMANCE BUDGET MONITORING\r\n// Sistema de monitoreo de presupuesto de performance\r\n// ===================================\r\n\r\ninterface PerformanceBudget {\r\n  // Core Web Vitals\r\n  LCP: number; // Largest Contentful Paint (ms)\r\n  FID: number; // First Input Delay (ms)\r\n  CLS: number; // Cumulative Layout Shift (score)\r\n  \r\n  // Loading Performance\r\n  FCP: number; // First Contentful Paint (ms)\r\n  TTI: number; // Time to Interactive (ms)\r\n  \r\n  // Bundle Size\r\n  totalJSSize: number; // Total JavaScript size (KB)\r\n  totalCSSSize: number; // Total CSS size (KB)\r\n  totalImageSize: number; // Total image size (KB)\r\n  \r\n  // Network\r\n  totalRequests: number; // Total number of requests\r\n  totalTransferSize: number; // Total transfer size (KB)\r\n}\r\n\r\n// Presupuestos objetivo para Pinteya E-commerce\r\nexport const PERFORMANCE_BUDGETS: PerformanceBudget = {\r\n  // Core Web Vitals (valores \"Good\" según Google)\r\n  LCP: 2500,  // < 2.5s\r\n  FID: 100,   // < 100ms\r\n  CLS: 0.1,   // < 0.1\r\n\r\n  // Loading Performance\r\n  FCP: 1800,  // < 1.8s\r\n  TTI: 3800,  // < 3.8s\r\n\r\n  // Bundle Size (optimizado para e-commerce)\r\n  totalJSSize: 500,   // < 500KB\r\n  totalCSSSize: 100,  // < 100KB\r\n  totalImageSize: 1000, // < 1MB\r\n\r\n  // Network\r\n  totalRequests: 50,    // < 50 requests\r\n  totalTransferSize: 2000, // < 2MB\r\n};\r\n\r\ninterface PerformanceMetrics {\r\n  timestamp: number;\r\n  url: string;\r\n  metrics: Partial<PerformanceBudget>;\r\n  violations: string[];\r\n  score: number; // 0-100\r\n}\r\n\r\n/**\r\n * Clase para monitorear performance budget\r\n */\r\nexport class PerformanceBudgetMonitor {\r\n  private metrics: PerformanceMetrics[] = [];\r\n  private observers: PerformanceObserver[] = [];\r\n\r\n  constructor() {\r\n    if (typeof window !== 'undefined') {\r\n      this.initializeObservers();\r\n    }\r\n  }\r\n\r\n  private initializeObservers() {\r\n    // Observer para Core Web Vitals\r\n    if ('PerformanceObserver' in window) {\r\n      // LCP Observer\r\n      const lcpObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        const lastEntry = entries[entries.length - 1] as any;\r\n        if (lastEntry) {\r\n          this.recordMetric('LCP', lastEntry.startTime);\r\n        }\r\n      });\r\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n      this.observers.push(lcpObserver);\r\n\r\n      // FID Observer\r\n      const fidObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: PerformanceEntry) => {\r\n          const fidEntry = entry as PerformanceEventTiming;\r\n          this.recordMetric('FID', fidEntry.processingStart - fidEntry.startTime);\r\n        });\r\n      });\r\n      fidObserver.observe({ entryTypes: ['first-input'] });\r\n      this.observers.push(fidObserver);\r\n\r\n      // CLS Observer\r\n      const clsObserver = new PerformanceObserver((list) => {\r\n        let clsValue = 0;\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: PerformanceEntry) => {\r\n          const clsEntry = entry as LayoutShift;\r\n          if (!clsEntry.hadRecentInput) {\r\n            clsValue += clsEntry.value;\r\n          }\r\n        });\r\n        this.recordMetric('CLS', clsValue);\r\n      });\r\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n      this.observers.push(clsObserver);\r\n\r\n      // Navigation Observer\r\n      const navObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: PerformanceEntry) => {\r\n          const navEntry = entry as PerformanceNavigationTiming;\r\n          this.recordMetric('FCP', navEntry.firstContentfulPaint || 0);\r\n          this.recordMetric('TTI', navEntry.domInteractive);\r\n        });\r\n      });\r\n      navObserver.observe({ entryTypes: ['navigation'] });\r\n      this.observers.push(navObserver);\r\n    }\r\n  }\r\n\r\n  private recordMetric(type: keyof PerformanceBudget, value: number) {\r\n    const currentUrl = window.location.pathname;\r\n    const timestamp = Date.now();\r\n\r\n    // Buscar métricas existentes para esta URL\r\n    let existingMetrics = this.metrics.find(m => \r\n      m.url === currentUrl && \r\n      timestamp - m.timestamp < 5000 // Agrupar métricas de los últimos 5 segundos\r\n    );\r\n\r\n    if (!existingMetrics) {\r\n      existingMetrics = {\r\n        timestamp,\r\n        url: currentUrl,\r\n        metrics: {},\r\n        violations: [],\r\n        score: 0,\r\n      };\r\n      this.metrics.push(existingMetrics);\r\n    }\r\n\r\n    existingMetrics.metrics[type] = value;\r\n    this.checkViolations(existingMetrics);\r\n    this.calculateScore(existingMetrics);\r\n  }\r\n\r\n  private checkViolations(metrics: PerformanceMetrics) {\r\n    metrics.violations = [];\r\n\r\n    Object.entries(metrics.metrics).forEach(([key, value]) => {\r\n      const budgetKey = key as keyof PerformanceBudget;\r\n      const budget = PERFORMANCE_BUDGETS[budgetKey];\r\n      \r\n      if (value !== undefined && value > budget) {\r\n        const violation = `${key}: ${value.toFixed(2)} exceeds budget of ${budget}`;\r\n        metrics.violations.push(violation);\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateScore(metrics: PerformanceMetrics): void {\r\n    const weights = {\r\n      LCP: 25,\r\n      FID: 25,\r\n      CLS: 25,\r\n      FCP: 10,\r\n      TTI: 10,\r\n      totalJSSize: 3,\r\n      totalCSSSize: 1,\r\n      totalImageSize: 1,\r\n    };\r\n\r\n    let totalScore = 0;\r\n    let totalWeight = 0;\r\n\r\n    Object.entries(metrics.metrics).forEach(([key, value]) => {\r\n      const budgetKey = key as keyof typeof weights;\r\n      const weight = weights[budgetKey];\r\n      \r\n      if (weight && value !== undefined) {\r\n        const budget = PERFORMANCE_BUDGETS[budgetKey as keyof PerformanceBudget];\r\n        const score = Math.max(0, Math.min(100, 100 - ((value - budget) / budget) * 100));\r\n        \r\n        totalScore += score * weight;\r\n        totalWeight += weight;\r\n      }\r\n    });\r\n\r\n    metrics.score = totalWeight > 0 ? totalScore / totalWeight : 0;\r\n  }\r\n\r\n  /**\r\n   * Obtener métricas actuales\r\n   */\r\n  getCurrentMetrics(): PerformanceMetrics | null {\r\n    const currentUrl = window.location.pathname;\r\n    return this.metrics\r\n      .filter(m => m.url === currentUrl)\r\n      .sort((a, b) => b.timestamp - a.timestamp)[0] || null;\r\n  }\r\n\r\n  /**\r\n   * Obtener todas las métricas\r\n   */\r\n  getAllMetrics(): PerformanceMetrics[] {\r\n    return [...this.metrics];\r\n  }\r\n\r\n  /**\r\n   * Obtener violaciones actuales\r\n   */\r\n  getCurrentViolations(): string[] {\r\n    const current = this.getCurrentMetrics();\r\n    return current ? current.violations : [];\r\n  }\r\n\r\n  /**\r\n   * Obtener score actual\r\n   */\r\n  getCurrentScore(): number {\r\n    const current = this.getCurrentMetrics();\r\n    return current ? current.score : 0;\r\n  }\r\n\r\n  /**\r\n   * Verificar si se cumple el presupuesto\r\n   */\r\n  isWithinBudget(): boolean {\r\n    const violations = this.getCurrentViolations();\r\n    return violations.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Generar reporte de performance\r\n   */\r\n  generateReport(): {\r\n    summary: {\r\n      score: number;\r\n      violations: number;\r\n      withinBudget: boolean;\r\n    };\r\n    metrics: PerformanceMetrics | null;\r\n    recommendations: string[];\r\n  } {\r\n    const current = this.getCurrentMetrics();\r\n    const violations = this.getCurrentViolations();\r\n    \r\n    const recommendations: string[] = [];\r\n    \r\n    if (current) {\r\n      // Generar recomendaciones basadas en violaciones\r\n      violations.forEach(violation => {\r\n        if (violation.includes('LCP')) {\r\n          recommendations.push('Optimizar imágenes y lazy loading para mejorar LCP');\r\n        }\r\n        if (violation.includes('FID')) {\r\n          recommendations.push('Reducir JavaScript blocking y optimizar event handlers');\r\n        }\r\n        if (violation.includes('CLS')) {\r\n          recommendations.push('Definir dimensiones de imágenes y evitar content shifts');\r\n        }\r\n        if (violation.includes('totalJSSize')) {\r\n          recommendations.push('Implementar code splitting y tree shaking');\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      summary: {\r\n        score: this.getCurrentScore(),\r\n        violations: violations.length,\r\n        withinBudget: this.isWithinBudget(),\r\n      },\r\n      metrics: current,\r\n      recommendations,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Limpiar observers\r\n   */\r\n  cleanup() {\r\n    this.observers.forEach(observer => observer.disconnect());\r\n    this.observers = [];\r\n  }\r\n}\r\n\r\n// Instancia global del monitor\r\nlet globalMonitor: PerformanceBudgetMonitor | null = null;\r\n\r\n/**\r\n * Hook para usar el monitor de performance budget\r\n */\r\nexport const usePerformanceBudget = () => {\r\n  if (typeof window === 'undefined') {\r\n    return {\r\n      monitor: null,\r\n      getCurrentMetrics: () => null,\r\n      getCurrentScore: () => 0,\r\n      getCurrentViolations: () => [],\r\n      isWithinBudget: () => true,\r\n      generateReport: () => ({\r\n        summary: { score: 0, violations: 0, withinBudget: true },\r\n        metrics: null,\r\n        recommendations: [],\r\n      }),\r\n    };\r\n  }\r\n\r\n  if (!globalMonitor) {\r\n    globalMonitor = new PerformanceBudgetMonitor();\r\n  }\r\n\r\n  return {\r\n    monitor: globalMonitor,\r\n    getCurrentMetrics: () => globalMonitor!.getCurrentMetrics(),\r\n    getCurrentScore: () => globalMonitor!.getCurrentScore(),\r\n    getCurrentViolations: () => globalMonitor!.getCurrentViolations(),\r\n    isWithinBudget: () => globalMonitor!.isWithinBudget(),\r\n    generateReport: () => globalMonitor!.generateReport(),\r\n  };\r\n};\r\n\r\nexport default PerformanceBudgetMonitor;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}