a39adc9d5e5f1359d617e684ad40ec7d
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_1lo60sfsov() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\metrics\\route.ts";
  var hash = "996ecaabb0a814f46719c2f47c4534d9bb39d9f7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\metrics\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 59
        }
      },
      "9": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 68
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 57
        }
      },
      "11": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 24
        }
      },
      "12": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "13": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 72
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "15": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 34
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "17": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "18": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 122
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "21": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 54,
          column: 53
        }
      },
      "22": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 68
        }
      },
      "23": {
        start: {
          line: 56,
          column: 25
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "24": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "26": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 102
        }
      },
      "27": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "28": {
        start: {
          line: 77,
          column: 69
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "29": {
        start: {
          line: 83,
          column: 30
        },
        end: {
          line: 83,
          column: 127
        }
      },
      "30": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 84,
          column: 125
        }
      },
      "31": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 77
        }
      },
      "32": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 283
        }
      },
      "33": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 87,
          column: 67
        }
      },
      "34": {
        start: {
          line: 88,
          column: 35
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "35": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 53
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "37": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "38": {
        start: {
          line: 117,
          column: 31
        },
        end: {
          line: 117,
          column: 53
        }
      },
      "39": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "40": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "41": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 32
        }
      },
      "42": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 72
        }
      },
      "43": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "44": {
        start: {
          line: 139,
          column: 21
        },
        end: {
          line: 139,
          column: 34
        }
      },
      "45": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "46": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 146,
          column: 15
        }
      },
      "47": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 122
        }
      },
      "48": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "49": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "50": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 159,
          column: 41
        }
      },
      "51": {
        start: {
          line: 160,
          column: 49
        },
        end: {
          line: 160,
          column: 53
        }
      },
      "52": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "53": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 167,
          column: 14
        }
      },
      "54": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 168,
          column: 29
        }
      },
      "55": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "56": {
        start: {
          line: 171,
          column: 34
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "57": {
        start: {
          line: 176,
          column: 33
        },
        end: {
          line: 176,
          column: 49
        }
      },
      "58": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "59": {
        start: {
          line: 178,
          column: 38
        },
        end: {
          line: 178,
          column: 85
        }
      },
      "60": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "61": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 188,
          column: 27
        }
      },
      "62": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 201,
          column: 21
        }
      },
      "63": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 200,
          column: 27
        }
      },
      "64": {
        start: {
          line: 203,
          column: 42
        },
        end: {
          line: 203,
          column: 96
        }
      },
      "65": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 214,
          column: 21
        }
      },
      "66": {
        start: {
          line: 205,
          column: 24
        },
        end: {
          line: 213,
          column: 27
        }
      },
      "67": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "68": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "69": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      },
      "70": {
        start: {
          line: 238,
          column: 31
        },
        end: {
          line: 238,
          column: 53
        }
      },
      "71": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "72": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 134,
            column: 19
          }
        },
        loc: {
          start: {
            line: 134,
            column: 29
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 134
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 59
          }
        }, {
          start: {
            line: 30,
            column: 63
          },
          end: {
            line: 30,
            column: 72
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 35
          },
          end: {
            line: 55,
            column: 60
          }
        }, {
          start: {
            line: 55,
            column: 64
          },
          end: {
            line: 55,
            column: 67
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 85,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 73
          }
        }, {
          start: {
            line: 85,
            column: 76
          },
          end: {
            line: 85,
            column: 77
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 32
          },
          end: {
            line: 86,
            column: 283
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 52
          },
          end: {
            line: 86,
            column: 279
          }
        }, {
          start: {
            line: 86,
            column: 282
          },
          end: {
            line: 86,
            column: 283
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 59
          }
        }, {
          start: {
            line: 136,
            column: 63
          },
          end: {
            line: 136,
            column: 72
          }
        }],
        line: 136
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "11": {
        loc: {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "12": {
        loc: {
          start: {
            line: 179,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 20
          },
          end: {
            line: 189,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 38
          },
          end: {
            line: 182,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 56
          },
          end: {
            line: 182,
            column: 66
          }
        }, {
          start: {
            line: 182,
            column: 69
          },
          end: {
            line: 182,
            column: 78
          }
        }],
        line: 182
      },
      "14": {
        loc: {
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 201,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 201,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "15": {
        loc: {
          start: {
            line: 194,
            column: 38
          },
          end: {
            line: 194,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 75
          },
          end: {
            line: 194,
            column: 85
          }
        }, {
          start: {
            line: 194,
            column: 88
          },
          end: {
            line: 194,
            column: 97
          }
        }],
        line: 194
      },
      "16": {
        loc: {
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 214,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 214,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "17": {
        loc: {
          start: {
            line: 207,
            column: 38
          },
          end: {
            line: 207,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 60
          },
          end: {
            line: 207,
            column: 70
          }
        }, {
          start: {
            line: 207,
            column: 73
          },
          end: {
            line: 207,
            column: 82
          }
        }],
        line: 207
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\metrics\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { metricsCollector, MercadoPagoMetrics } from '@/lib/enterprise/metrics';\r\nimport { checkRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticaci\xF3n (solo usuarios autenticados pueden ver m\xE9tricas)\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Authentication required',\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Rate limiting para API de m\xE9tricas\r\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    if (!rateLimitResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      }, { status: 429 });\r\n    }\r\n\r\n    // Obtener par\xE1metros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const hoursBack = parseInt(searchParams.get('hours') || '1');\r\n    const endpoint = searchParams.get('endpoint');\r\n\r\n    logger.info(LogCategory.API, 'Metrics API request', {\r\n      userId: user.id,\r\n      hoursBack,\r\n      endpoint,\r\n      clientIP,\r\n    });\r\n\r\n    // Si se especifica un endpoint, retornar m\xE9tricas espec\xEDficas\r\n    if (endpoint) {\r\n      const metrics = await metricsCollector.getApiMetrics(endpoint, 'POST', hoursBack);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          endpoint,\r\n          timeRange: `${hoursBack}h`,\r\n          metrics,\r\n          timestamp: Date.now(),\r\n        },\r\n      });\r\n    }\r\n\r\n    // Obtener m\xE9tricas completas de MercadoPago\r\n    const [paymentCreation, paymentQueries, webhookProcessing] = await Promise.all([\r\n      metricsCollector.getApiMetrics('create-preference', 'POST', hoursBack),\r\n      metricsCollector.getApiMetrics('payment-info', 'GET', hoursBack),\r\n      metricsCollector.getApiMetrics('webhook', 'POST', hoursBack),\r\n    ]);\r\n\r\n    // Calcular m\xE9tricas generales de salud\r\n    const totalRequests = paymentCreation.requests.total + paymentQueries.requests.total + webhookProcessing.requests.total;\r\n    const totalErrors = paymentCreation.requests.error + paymentQueries.requests.error + webhookProcessing.requests.error;\r\n    const errorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;\r\n\r\n    const avgResponseTime = totalRequests > 0 ? \r\n      (paymentCreation.response_times.avg * paymentCreation.requests.total +\r\n       paymentQueries.response_times.avg * paymentQueries.requests.total +\r\n       webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests : 0;\r\n\r\n    const uptimePercentage = Math.max(0, 100 - (errorRate * 100));\r\n\r\n    const mercadoPagoMetrics: MercadoPagoMetrics = {\r\n      payment_creation: paymentCreation,\r\n      payment_queries: paymentQueries,\r\n      webhook_processing: webhookProcessing,\r\n      overall_health: {\r\n        uptime_percentage: uptimePercentage,\r\n        avg_response_time: avgResponseTime,\r\n        error_rate: errorRate,\r\n        last_incident: null, // TODO: Implementar detecci\xF3n de incidentes\r\n      },\r\n    };\r\n\r\n    const processingTime = Date.now() - startTime;\r\n\r\n    logger.performance(LogLevel.INFO, 'Metrics API response generated', {\r\n      operation: 'metrics-api',\r\n      duration: processingTime,\r\n      statusCode: 200,\r\n    }, {\r\n      userId: user.id,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        timeRange: `${hoursBack}h`,\r\n        metrics: mercadoPagoMetrics,\r\n        timestamp: Date.now(),\r\n        processingTime,\r\n      },\r\n    });\r\n\r\n  } catch (error: any) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Metrics API error', {\r\n      operation: 'metrics-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      timestamp: Date.now(),\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Endpoint para obtener alertas activas\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Authentication required',\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    if (!rateLimitResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      }, { status: 429 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, alertType, threshold } = body;\r\n\r\n    if (action === 'check_alerts') {\r\n      // Obtener m\xE9tricas recientes para verificar alertas\r\n      const recentMetrics = await Promise.all([\r\n        metricsCollector.getApiMetrics('create-preference', 'POST', 0.25), // \xDAltimos 15 minutos\r\n        metricsCollector.getApiMetrics('payment-info', 'GET', 0.25),\r\n        metricsCollector.getApiMetrics('webhook', 'POST', 0.25),\r\n      ]);\r\n\r\n      const alerts = [];\r\n\r\n      // Verificar alertas de tasa de error\r\n      for (const [index, metrics] of recentMetrics.entries()) {\r\n        const endpoints = ['create-preference', 'payment-info', 'webhook'];\r\n        const endpoint = endpoints[index];\r\n        \r\n        if (metrics.requests.total > 0) {\r\n          const errorRate = metrics.requests.error / metrics.requests.total;\r\n          \r\n          if (errorRate > 0.05) { // 5% de tasa de error\r\n            alerts.push({\r\n              type: 'error_rate',\r\n              severity: errorRate > 0.1 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: errorRate,\r\n              threshold: 0.05,\r\n              message: `High error rate detected on ${endpoint}: ${(errorRate * 100).toFixed(2)}%`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n\r\n          // Verificar tiempo de respuesta P95\r\n          if (metrics.response_times.p95 > 5000) { // 5 segundos\r\n            alerts.push({\r\n              type: 'response_time',\r\n              severity: metrics.response_times.p95 > 10000 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: metrics.response_times.p95,\r\n              threshold: 5000,\r\n              message: `High response time detected on ${endpoint}: ${metrics.response_times.p95}ms (P95)`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n\r\n          // Verificar rate limiting\r\n          const rateLimitRate = metrics.requests.rate_limited / metrics.requests.total;\r\n          if (rateLimitRate > 0.1) { // 10% de requests limitados\r\n            alerts.push({\r\n              type: 'rate_limit',\r\n              severity: rateLimitRate > 0.2 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: rateLimitRate,\r\n              threshold: 0.1,\r\n              message: `High rate limiting detected on ${endpoint}: ${(rateLimitRate * 100).toFixed(2)}%`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      logger.info(LogCategory.API, 'Alerts checked', {\r\n        userId: user.id,\r\n        alertsFound: alerts.length,\r\n        clientIP,\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          alerts,\r\n          timestamp: Date.now(),\r\n          checkDuration: Date.now() - startTime,\r\n        },\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Invalid action',\r\n    }, { status: 400 });\r\n\r\n  } catch (error: any) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Metrics alerts API error', {\r\n      operation: 'metrics-alerts-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      timestamp: Date.now(),\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "request", "startTime", "Date", "now", "clientIP", "headers", "get", "user", "session", "NextResponse", "json", "success", "error", "status", "rateLimitResult", "checkRateLimit", "RATE_LIMIT_CONFIGS", "QUERY_API", "retryAfter", "searchParams", "URL", "url", "hoursBack", "parseInt", "endpoint", "logger", "info", "LogCategory", "API", "userId", "id", "metrics", "metricsCollector", "getApiMetrics", "data", "timeRange", "timestamp", "paymentCreation", "paymentQueries", "webhookProcessing", "Promise", "all", "totalRequests", "requests", "total", "totalErrors", "errorRate", "avgResponseTime", "response_times", "avg", "uptimePercentage", "Math", "max", "mercadoPagoMetrics", "payment_creation", "payment_queries", "webhook_processing", "overall_health", "uptime_percentage", "avg_response_time", "error_rate", "last_incident", "processingTime", "performance", "LogLevel", "INFO", "operation", "duration", "statusCode", "ERROR", "body", "action", "alertType", "threshold", "recentMetrics", "alerts", "index", "entries", "endpoints", "push", "type", "severity", "value", "message", "toFixed", "p95", "rateLimitRate", "rate_limited", "alertsFound", "length", "checkDuration"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "996ecaabb0a814f46719c2f47c4534d9bb39d9f7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lo60sfsov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lo60sfsov();
cov_1lo60sfsov().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1lo60sfsov().f[0]++;
  cov_1lo60sfsov().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1lo60sfsov().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1lo60sfsov().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1lo60sfsov().f[1]++;
    cov_1lo60sfsov().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1lo60sfsov().f[2]++;
    cov_1lo60sfsov().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_1lo60sfsov().f[3]++;
    cov_1lo60sfsov().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_1lo60sfsov().s[7]++, require("next/server"));
const _metrics =
/* istanbul ignore next */
(cov_1lo60sfsov().s[8]++, require("../../../lib/enterprise/metrics"));
const _ratelimiter =
/* istanbul ignore next */
(cov_1lo60sfsov().s[9]++, require("../../../lib/enterprise/rate-limiter"));
const _logger =
/* istanbul ignore next */
(cov_1lo60sfsov().s[10]++, require("../../../lib/enterprise/logger"));
const runtime =
/* istanbul ignore next */
(cov_1lo60sfsov().s[11]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_1lo60sfsov().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_1lo60sfsov().s[12]++, Date.now());
  const clientIP =
  /* istanbul ignore next */
  (cov_1lo60sfsov().s[13]++,
  /* istanbul ignore next */
  (cov_1lo60sfsov().b[0][0]++, request.headers.get('x-forwarded-for')) ||
  /* istanbul ignore next */
  (cov_1lo60sfsov().b[0][1]++, 'unknown'));
  /* istanbul ignore next */
  cov_1lo60sfsov().s[14]++;
  try {
    // Verificar autenticaciÃ³n (solo usuarios autenticados pueden ver mÃ©tricas)
    const user =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[15]++, session?.user);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[16]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[1][0]++;
      cov_1lo60sfsov().s[17]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[1][1]++;
    }
    // Rate limiting para API de mÃ©tricas
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[18]++, await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API));
    /* istanbul ignore next */
    cov_1lo60sfsov().s[19]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[2][0]++;
      cov_1lo60sfsov().s[20]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Rate limit exceeded',
        retryAfter: rateLimitResult.retryAfter
      }, {
        status: 429
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[2][1]++;
    }
    // Obtener parÃ¡metros de consulta
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[21]++, new URL(request.url));
    const hoursBack =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[22]++, parseInt(
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[3][0]++, searchParams.get('hours')) ||
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[3][1]++, '1')));
    const endpoint =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[23]++, searchParams.get('endpoint'));
    /* istanbul ignore next */
    cov_1lo60sfsov().s[24]++;
    _logger.logger.info(_logger.LogCategory.API, 'Metrics API request', {
      userId: user.id,
      hoursBack,
      endpoint,
      clientIP
    });
    // Si se especifica un endpoint, retornar mÃ©tricas especÃ­ficas
    /* istanbul ignore next */
    cov_1lo60sfsov().s[25]++;
    if (endpoint) {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[4][0]++;
      const metrics =
      /* istanbul ignore next */
      (cov_1lo60sfsov().s[26]++, await _metrics.metricsCollector.getApiMetrics(endpoint, 'POST', hoursBack));
      /* istanbul ignore next */
      cov_1lo60sfsov().s[27]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          endpoint,
          timeRange: `${hoursBack}h`,
          metrics,
          timestamp: Date.now()
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[4][1]++;
    }
    // Obtener mÃ©tricas completas de MercadoPago
    const [paymentCreation, paymentQueries, webhookProcessing] =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[28]++, await Promise.all([_metrics.metricsCollector.getApiMetrics('create-preference', 'POST', hoursBack), _metrics.metricsCollector.getApiMetrics('payment-info', 'GET', hoursBack), _metrics.metricsCollector.getApiMetrics('webhook', 'POST', hoursBack)]));
    // Calcular mÃ©tricas generales de salud
    const totalRequests =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[29]++, paymentCreation.requests.total + paymentQueries.requests.total + webhookProcessing.requests.total);
    const totalErrors =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[30]++, paymentCreation.requests.error + paymentQueries.requests.error + webhookProcessing.requests.error);
    const errorRate =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[31]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[5][0]++, totalErrors / totalRequests) :
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[5][1]++, 0));
    const avgResponseTime =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[32]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[6][0]++, (paymentCreation.response_times.avg * paymentCreation.requests.total + paymentQueries.response_times.avg * paymentQueries.requests.total + webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests) :
    /* istanbul ignore next */
    (cov_1lo60sfsov().b[6][1]++, 0));
    const uptimePercentage =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[33]++, Math.max(0, 100 - errorRate * 100));
    const mercadoPagoMetrics =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[34]++, {
      payment_creation: paymentCreation,
      payment_queries: paymentQueries,
      webhook_processing: webhookProcessing,
      overall_health: {
        uptime_percentage: uptimePercentage,
        avg_response_time: avgResponseTime,
        error_rate: errorRate,
        last_incident: null
      }
    });
    const processingTime =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[35]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[36]++;
    _logger.logger.performance(_logger.LogLevel.INFO, 'Metrics API response generated', {
      operation: 'metrics-api',
      duration: processingTime,
      statusCode: 200
    }, {
      userId: user.id
    });
    /* istanbul ignore next */
    cov_1lo60sfsov().s[37]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        timeRange: `${hoursBack}h`,
        metrics: mercadoPagoMetrics,
        timestamp: Date.now(),
        processingTime
      }
    });
  } catch (error) {
    const processingTime =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[38]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[39]++;
    _logger.logger.performance(_logger.LogLevel.ERROR, 'Metrics API error', {
      operation: 'metrics-api',
      duration: processingTime,
      statusCode: 500
    }, {
      clientIP
    });
    /* istanbul ignore next */
    cov_1lo60sfsov().s[40]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Internal server error',
      timestamp: Date.now()
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1lo60sfsov().f[5]++;
  const startTime =
  /* istanbul ignore next */
  (cov_1lo60sfsov().s[41]++, Date.now());
  const clientIP =
  /* istanbul ignore next */
  (cov_1lo60sfsov().s[42]++,
  /* istanbul ignore next */
  (cov_1lo60sfsov().b[7][0]++, request.headers.get('x-forwarded-for')) ||
  /* istanbul ignore next */
  (cov_1lo60sfsov().b[7][1]++, 'unknown'));
  /* istanbul ignore next */
  cov_1lo60sfsov().s[43]++;
  try {
    // Verificar autenticaciÃ³n
    const user =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[44]++, session?.user);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[45]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[8][0]++;
      cov_1lo60sfsov().s[46]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[8][1]++;
    }
    // Rate limiting
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[47]++, await (0, _ratelimiter.checkRateLimit)(request, _ratelimiter.RATE_LIMIT_CONFIGS.QUERY_API));
    /* istanbul ignore next */
    cov_1lo60sfsov().s[48]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[9][0]++;
      cov_1lo60sfsov().s[49]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Rate limit exceeded',
        retryAfter: rateLimitResult.retryAfter
      }, {
        status: 429
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[9][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[50]++, await request.json());
    const {
      action,
      alertType,
      threshold
    } =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[51]++, body);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[52]++;
    if (action === 'check_alerts') {
      /* istanbul ignore next */
      cov_1lo60sfsov().b[10][0]++;
      // Obtener mÃ©tricas recientes para verificar alertas
      const recentMetrics =
      /* istanbul ignore next */
      (cov_1lo60sfsov().s[53]++, await Promise.all([_metrics.metricsCollector.getApiMetrics('create-preference', 'POST', 0.25), _metrics.metricsCollector.getApiMetrics('payment-info', 'GET', 0.25), _metrics.metricsCollector.getApiMetrics('webhook', 'POST', 0.25)]));
      const alerts =
      /* istanbul ignore next */
      (cov_1lo60sfsov().s[54]++, []);
      // Verificar alertas de tasa de error
      /* istanbul ignore next */
      cov_1lo60sfsov().s[55]++;
      for (const [index, metrics] of recentMetrics.entries()) {
        const endpoints =
        /* istanbul ignore next */
        (cov_1lo60sfsov().s[56]++, ['create-preference', 'payment-info', 'webhook']);
        const endpoint =
        /* istanbul ignore next */
        (cov_1lo60sfsov().s[57]++, endpoints[index]);
        /* istanbul ignore next */
        cov_1lo60sfsov().s[58]++;
        if (metrics.requests.total > 0) {
          /* istanbul ignore next */
          cov_1lo60sfsov().b[11][0]++;
          const errorRate =
          /* istanbul ignore next */
          (cov_1lo60sfsov().s[59]++, metrics.requests.error / metrics.requests.total);
          /* istanbul ignore next */
          cov_1lo60sfsov().s[60]++;
          if (errorRate > 0.05) {
            /* istanbul ignore next */
            cov_1lo60sfsov().b[12][0]++;
            cov_1lo60sfsov().s[61]++;
            alerts.push({
              type: 'error_rate',
              severity: errorRate > 0.1 ?
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[13][0]++, 'critical') :
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[13][1]++, 'warning'),
              endpoint,
              value: errorRate,
              threshold: 0.05,
              message: `High error rate detected on ${endpoint}: ${(errorRate * 100).toFixed(2)}%`,
              timestamp: Date.now()
            });
          } else
          /* istanbul ignore next */
          {
            cov_1lo60sfsov().b[12][1]++;
          }
          // Verificar tiempo de respuesta P95
          cov_1lo60sfsov().s[62]++;
          if (metrics.response_times.p95 > 5000) {
            /* istanbul ignore next */
            cov_1lo60sfsov().b[14][0]++;
            cov_1lo60sfsov().s[63]++;
            alerts.push({
              type: 'response_time',
              severity: metrics.response_times.p95 > 10000 ?
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[15][0]++, 'critical') :
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[15][1]++, 'warning'),
              endpoint,
              value: metrics.response_times.p95,
              threshold: 5000,
              message: `High response time detected on ${endpoint}: ${metrics.response_times.p95}ms (P95)`,
              timestamp: Date.now()
            });
          } else
          /* istanbul ignore next */
          {
            cov_1lo60sfsov().b[14][1]++;
          }
          // Verificar rate limiting
          const rateLimitRate =
          /* istanbul ignore next */
          (cov_1lo60sfsov().s[64]++, metrics.requests.rate_limited / metrics.requests.total);
          /* istanbul ignore next */
          cov_1lo60sfsov().s[65]++;
          if (rateLimitRate > 0.1) {
            /* istanbul ignore next */
            cov_1lo60sfsov().b[16][0]++;
            cov_1lo60sfsov().s[66]++;
            alerts.push({
              type: 'rate_limit',
              severity: rateLimitRate > 0.2 ?
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[17][0]++, 'critical') :
              /* istanbul ignore next */
              (cov_1lo60sfsov().b[17][1]++, 'warning'),
              endpoint,
              value: rateLimitRate,
              threshold: 0.1,
              message: `High rate limiting detected on ${endpoint}: ${(rateLimitRate * 100).toFixed(2)}%`,
              timestamp: Date.now()
            });
          } else
          /* istanbul ignore next */
          {
            cov_1lo60sfsov().b[16][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1lo60sfsov().b[11][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1lo60sfsov().s[67]++;
      _logger.logger.info(_logger.LogCategory.API, 'Alerts checked', {
        userId: user.id,
        alertsFound: alerts.length,
        clientIP
      });
      /* istanbul ignore next */
      cov_1lo60sfsov().s[68]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          alerts,
          timestamp: Date.now(),
          checkDuration: Date.now() - startTime
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lo60sfsov().b[10][1]++;
    }
    cov_1lo60sfsov().s[69]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Invalid action'
    }, {
      status: 400
    });
  } catch (error) {
    const processingTime =
    /* istanbul ignore next */
    (cov_1lo60sfsov().s[70]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1lo60sfsov().s[71]++;
    _logger.logger.performance(_logger.LogLevel.ERROR, 'Metrics alerts API error', {
      operation: 'metrics-alerts-api',
      duration: processingTime,
      statusCode: 500
    }, {
      clientIP
    });
    /* istanbul ignore next */
    cov_1lo60sfsov().s[72]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Internal server error',
      timestamp: Date.now()
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,