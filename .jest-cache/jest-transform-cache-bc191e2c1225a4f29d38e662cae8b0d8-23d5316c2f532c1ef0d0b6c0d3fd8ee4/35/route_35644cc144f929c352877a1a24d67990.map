{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\categories\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - API DE CATEGORÍAS\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase'\nimport { validateData, CategoryFiltersSchema, CategorySchema } from '@/lib/validations'\nimport { ApiResponse } from '@/types/api'\nimport { Category } from '@/types/database'\n\n// ===================================\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\n// ===================================\nimport { withRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/rate-limiting/rate-limiter'\nimport { API_TIMEOUTS, withDatabaseTimeout, getEndpointTimeouts } from '@/lib/config/api-timeouts'\nimport { createSecurityLogger } from '@/lib/logging/security-logger'\n\n// ===================================\n// GET /api/categories - Obtener categorías\n// ===================================\nexport async function GET(request: NextRequest) {\n  // Crear logger de seguridad con contexto\n  const securityLogger = createSecurityLogger(request)\n\n  // Aplicar rate limiting para APIs de categorías\n  const rateLimitResult = await withRateLimit(\n    request,\n    RATE_LIMIT_CONFIGS.products, // Usar config de productos para categorías\n    async () => {\n      // Log de acceso a la API\n      securityLogger.log({\n        type: 'data_access',\n        severity: 'low',\n        message: 'Categories API accessed',\n        context: securityLogger.context,\n        metadata: {\n          endpoint: '/api/categories',\n          method: 'GET',\n          userAgent: request.headers.get('user-agent'),\n        },\n      })\n\n      try {\n        const { searchParams } = new URL(request.url)\n\n        // Extraer parámetros de query\n        const queryParams = {\n          search: searchParams.get('search') || undefined,\n        }\n\n        // Validar parámetros (simplificado para la estructura actual)\n        const filters = {\n          search: queryParams.search,\n        }\n\n        const supabase = getSupabaseClient()\n\n        // Verificar que el cliente de Supabase esté disponible\n        if (!supabase) {\n          console.error('Cliente de Supabase no disponible en GET /api/categories')\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: 'Servicio de base de datos no disponible',\n          }\n          return NextResponse.json(errorResponse, { status: 503 })\n        }\n\n        // Construir query base - simplificado para la estructura actual\n        const baseQuery = supabase\n          .from('categories')\n          .select(\n            `\n        *,\n        products_count:products(count)\n      `\n          )\n          .order('name')\n\n        // Aplicar filtros\n        let query = baseQuery\n        if (filters.search) {\n          query = query.ilike('name', `%${filters.search}%`)\n        }\n\n        // Ejecutar query con timeout de base de datos\n        const { data: categories, error } = await withDatabaseTimeout(async signal => {\n          return await query.abortSignal(signal)\n        }, API_TIMEOUTS.database)\n\n        if (error) {\n          console.error('Error en GET /api/categories:', error)\n\n          // Log de error de seguridad\n          securityLogger.logApiError(\n            securityLogger.context,\n            new Error(`Database error: ${error.message}`),\n            {\n              endpoint: '/api/categories',\n              operation: 'select_categories',\n            }\n          )\n\n          const errorResponse: ApiResponse<null> = {\n            data: null,\n            success: false,\n            error: error.message || 'Error obteniendo categorías',\n          }\n          return NextResponse.json(errorResponse, { status: 500 })\n        }\n\n        // Procesar datos para incluir conteo de productos\n        const processedCategories =\n          categories?.map(category => ({\n            ...category,\n            products_count: category.products_count?.[0]?.count || 0,\n          })) || []\n\n        // Log de operación exitosa\n        securityLogger.log({\n          type: 'data_access',\n          severity: 'low',\n          message: 'Categories retrieved successfully',\n          context: securityLogger.context,\n          metadata: {\n            categoriesCount: processedCategories.length,\n            hasSearch: !!filters.search,\n            searchTerm: filters.search,\n          },\n        })\n\n        const response: ApiResponse<Category[]> = {\n          data: processedCategories,\n          success: true,\n          message: `${processedCategories.length} categorías encontradas`,\n        }\n\n        return NextResponse.json(response)\n      } catch (error: any) {\n        console.error('Error en GET /api/categories:', error)\n\n        // Log de error de seguridad\n        securityLogger.logApiError(\n          securityLogger.context,\n          error instanceof Error ? error : new Error('Unknown error'),\n          {\n            endpoint: '/api/categories',\n          }\n        )\n\n        const errorResponse: ApiResponse<null> = {\n          data: null,\n          success: false,\n          error: error.message || 'Error interno del servidor',\n        }\n\n        return NextResponse.json(errorResponse, { status: 500 })\n      }\n    }\n  )\n\n  // Manejar rate limit excedido\n  if (rateLimitResult instanceof NextResponse) {\n    securityLogger.logRateLimitExceeded(securityLogger.context, {\n      endpoint: '/api/categories',\n      method: 'GET',\n    })\n    return rateLimitResult\n  }\n\n  return rateLimitResult\n}\n\n// ===================================\n// POST /api/categories - Crear categoría (Admin)\n// ===================================\nexport async function POST(request: NextRequest) {\n  try {\n    // ENTERPRISE: Usar nueva autenticación enterprise para admin\n    const { requireAdminAuth } = await import('@/lib/auth/enterprise-auth-utils')\n\n    const authResult = await requireAdminAuth(request, ['categories_create'])\n\n    if (!authResult.success) {\n      return NextResponse.json(\n        {\n          error: authResult.error,\n          code: authResult.code,\n          enterprise: true,\n          timestamp: new Date().toISOString(),\n        },\n        { status: authResult.status || 401 }\n      )\n    }\n\n    const context = authResult.context!\n\n    const body = await request.json()\n\n    // Validar datos de la categoría\n    const categoryData = validateData(CategorySchema, body)\n\n    const supabase = getSupabaseClient(true) // Usar cliente admin\n\n    // Verificar que el cliente administrativo esté disponible\n    if (!supabase) {\n      console.error('Cliente administrativo de Supabase no disponible en POST /api/categories')\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio administrativo no disponible',\n      }\n      return NextResponse.json(errorResponse, { status: 503 })\n    }\n\n    // Crear slug si no se proporciona\n    if (!categoryData.slug) {\n      categoryData.slug = categoryData.name\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '')\n    }\n\n    // Insertar categoría\n    const { data: category, error } = await supabase\n      .from('categories')\n      .insert(categoryData)\n      .select()\n      .single()\n\n    if (error) {\n      handleSupabaseError(error, 'POST /api/categories')\n    }\n\n    const response: ApiResponse<Category> = {\n      data: category,\n      success: true,\n      message: 'Categoría creada exitosamente',\n    }\n\n    return NextResponse.json(response, { status: 201 })\n  } catch (error: any) {\n    console.error('Error en POST /api/categories:', error)\n\n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    }\n\n    return NextResponse.json(errorResponse, { status: 500 })\n  }\n}\n"],"names":["GET","POST","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","products","log","type","severity","message","context","metadata","endpoint","method","userAgent","headers","get","searchParams","URL","url","queryParams","search","undefined","filters","supabase","getSupabaseClient","console","error","errorResponse","data","success","NextResponse","json","status","baseQuery","from","select","order","query","ilike","categories","withDatabaseTimeout","signal","abortSignal","API_TIMEOUTS","database","logApiError","Error","operation","processedCategories","map","category","products_count","count","categoriesCount","length","hasSearch","searchTerm","response","logRateLimitExceeded","requireAdminAuth","authResult","code","enterprise","timestamp","Date","toISOString","body","categoryData","validateData","CategorySchema","slug","name","toLowerCase","replace","insert","single","handleSupabaseError"],"mappings":"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"}