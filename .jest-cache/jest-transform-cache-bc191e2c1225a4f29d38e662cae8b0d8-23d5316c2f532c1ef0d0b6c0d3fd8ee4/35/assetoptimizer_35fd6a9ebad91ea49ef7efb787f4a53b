2604f3e3b49e66963960b2af9d2a852b
// ===================================
// PINTEYA E-COMMERCE - ASSET OPTIMIZER
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ASSET_CONFIGS () {
        return ASSET_CONFIGS;
    },
    get AssetOptimizer () {
        return AssetOptimizer;
    },
    get AssetUtils () {
        return AssetUtils;
    },
    get assetOptimizer () {
        return assetOptimizer;
    }
});
const _logger = require("./enterprise/logger");
const ASSET_CONFIGS = {
    // Para imágenes de productos
    PRODUCT_IMAGES: {
        compress: true,
        quality: 85,
        format: 'webp',
        maxWidth: 800,
        maxHeight: 600,
        lazy: true
    },
    // Para iconos de pago
    PAYMENT_ICONS: {
        compress: true,
        quality: 90,
        format: 'webp',
        maxWidth: 64,
        maxHeight: 64,
        lazy: false
    },
    // Para imágenes de hero/banner
    HERO_IMAGES: {
        compress: true,
        quality: 80,
        format: 'webp',
        maxWidth: 1920,
        maxHeight: 1080,
        lazy: true
    },
    // Para avatares de usuario
    AVATARS: {
        compress: true,
        quality: 85,
        format: 'webp',
        maxWidth: 200,
        maxHeight: 200,
        lazy: true
    }
};
class AssetOptimizer {
    constructor(){}
    static getInstance() {
        if (!AssetOptimizer.instance) {
            AssetOptimizer.instance = new AssetOptimizer();
        }
        return AssetOptimizer.instance;
    }
    /**
   * Optimiza una URL de imagen
   */ optimizeImageUrl(originalUrl, config = ASSET_CONFIGS.PRODUCT_IMAGES) {
        try {
            // Si es una URL externa, aplicar parámetros de optimización
            if (originalUrl.startsWith('http')) {
                const url = new URL(originalUrl);
                // Para Supabase Storage, agregar parámetros de transformación
                if (url.hostname.includes('supabase')) {
                    const params = new URLSearchParams();
                    if (config.maxWidth) {
                        params.set('width', config.maxWidth.toString());
                    }
                    if (config.maxHeight) {
                        params.set('height', config.maxHeight.toString());
                    }
                    if (config.quality) {
                        params.set('quality', config.quality.toString());
                    }
                    if (config.format) {
                        params.set('format', config.format);
                    }
                    if (params.toString()) {
                        url.search = params.toString();
                    }
                }
                return url.toString();
            }
            // Para URLs locales, mantener como están
            return originalUrl;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Image URL optimization failed', error);
            return originalUrl;
        }
    }
    /**
   * Genera srcSet para imágenes responsivas
   */ generateSrcSet(baseUrl, config = ASSET_CONFIGS.PRODUCT_IMAGES) {
        try {
            const sizes = [
                {
                    width: 320,
                    suffix: 'sm'
                },
                {
                    width: 640,
                    suffix: 'md'
                },
                {
                    width: 1024,
                    suffix: 'lg'
                },
                {
                    width: 1920,
                    suffix: 'xl'
                }
            ];
            const srcSet = sizes.filter((size)=>!config.maxWidth || size.width <= config.maxWidth).map((size)=>{
                const optimizedConfig = {
                    ...config,
                    maxWidth: size.width
                };
                const url = this.optimizeImageUrl(baseUrl, optimizedConfig);
                return `${url} ${size.width}w`;
            }).join(', ');
            return srcSet;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'SrcSet generation failed', error);
            return baseUrl;
        }
    }
    /**
   * Genera sizes attribute para imágenes responsivas
   */ generateSizes(breakpoints) {
        return breakpoints.map((bp)=>`${bp.condition} ${bp.size}`).join(', ');
    }
    /**
   * Precarga assets críticos
   */ preloadCriticalAssets(assets) {
        if (typeof window === 'undefined') {
            return;
        }
        assets.forEach((asset)=>{
            try {
                const link = document.createElement('link');
                link.rel = 'preload';
                link.href = asset.url;
                switch(asset.type){
                    case 'image':
                        link.as = 'image';
                        break;
                    case 'font':
                        link.as = 'font';
                        link.crossOrigin = 'anonymous';
                        break;
                    case 'style':
                        link.as = 'style';
                        break;
                }
                document.head.appendChild(link);
                _logger.logger.info(_logger.LogCategory.API, 'Asset preloaded');
            } catch (error) {
                _logger.logger.error(_logger.LogCategory.API, 'Asset preload failed', error);
            }
        });
    }
    /**
   * Lazy load de imágenes con Intersection Observer
   */ setupLazyLoading() {
        if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {
            return;
        }
        const imageObserver = new IntersectionObserver((entries, observer)=>{
            entries.forEach((entry)=>{
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.removeAttribute('data-src');
                    }
                    if (img.dataset.srcset) {
                        img.srcset = img.dataset.srcset;
                        img.removeAttribute('data-srcset');
                    }
                    img.classList.remove('lazy');
                    observer.unobserve(img);
                    _logger.logger.info(_logger.LogCategory.API, 'Lazy image loaded');
                }
            });
        }, {
            rootMargin: '50px 0px',
            threshold: 0.01
        });
        // Observar todas las imágenes lazy
        document.querySelectorAll('img[data-src]').forEach((img)=>{
            imageObserver.observe(img);
        });
    }
    /**
   * Optimiza CSS crítico
   */ optimizeCriticalCSS(criticalSelectors) {
        try {
            // En una implementación real, esto extraería CSS crítico
            // Por ahora, retornamos un placeholder
            const criticalCSS = criticalSelectors.map((selector)=>`${selector} { /* critical styles */ }`).join('\n');
            _logger.logger.info(_logger.LogCategory.API, 'Critical CSS optimized');
            return criticalCSS;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'Critical CSS optimization failed', error);
            return '';
        }
    }
    /**
   * Comprime y optimiza JSON para APIs
   */ optimizeJsonResponse(data) {
        try {
            // Remover propiedades null/undefined
            const cleaned = this.removeNullValues(data);
            // Comprimir JSON (sin espacios)
            const compressed = JSON.stringify(cleaned);
            _logger.logger.info(_logger.LogCategory.API, 'JSON response optimized');
            return compressed;
        } catch (error) {
            _logger.logger.error(_logger.LogCategory.API, 'JSON optimization failed', error);
            // En caso de error (como objetos circulares), retornar string simple
            try {
                return JSON.stringify({
                    error: 'Serialization failed'
                });
            } catch  {
                return '{"error":"Serialization failed"}';
            }
        }
    }
    /**
   * Remueve valores null/undefined de objetos
   */ removeNullValues(obj) {
        if (obj === null || obj === undefined) {
            return undefined;
        }
        if (Array.isArray(obj)) {
            return obj.map((item)=>this.removeNullValues(item)).filter((item)=>item !== undefined);
        }
        if (typeof obj === 'object') {
            const cleaned = {};
            for (const [key, value] of Object.entries(obj)){
                const cleanedValue = this.removeNullValues(value);
                if (cleanedValue !== undefined) {
                    cleaned[key] = cleanedValue;
                }
            }
            return cleaned;
        }
        return obj;
    }
}
const assetOptimizer = AssetOptimizer.getInstance();
const AssetUtils = {
    /**
   * Optimiza imagen de producto
   */ optimizeProductImage (url) {
        return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES);
    },
    /**
   * Optimiza icono de pago
   */ optimizePaymentIcon (url) {
        return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PAYMENT_ICONS);
    },
    /**
   * Genera imagen responsiva para productos
   */ generateProductImageProps (url) {
        return {
            src: assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES),
            srcSet: assetOptimizer.generateSrcSet(url, ASSET_CONFIGS.PRODUCT_IMAGES),
            sizes: assetOptimizer.generateSizes([
                {
                    condition: '(max-width: 640px)',
                    size: '100vw'
                },
                {
                    condition: '(max-width: 1024px)',
                    size: '50vw'
                },
                {
                    condition: '',
                    size: '33vw'
                }
            ]),
            loading: 'lazy',
            decoding: 'async'
        };
    },
    /**
   * Precarga assets críticos de pago
   */ preloadPaymentAssets () {
        const criticalAssets = [
            {
                url: '/images/logo/visa.svg',
                type: 'image'
            },
            {
                url: '/images/logo/mastercard.svg',
                type: 'image'
            },
            {
                url: '/images/logo/mercadopago.svg',
                type: 'image'
            }
        ];
        assetOptimizer.preloadCriticalAssets(criticalAssets);
    },
    /**
   * Inicializa optimizaciones en el cliente
   */ initializeClientOptimizations () {
        if (typeof window === 'undefined') {
            return;
        }
        // Configurar lazy loading
        assetOptimizer.setupLazyLoading();
        // Precargar assets críticos
        AssetUtils.preloadPaymentAssets();
        _logger.logger.info(_logger.LogCategory.API, 'Client asset optimizations initialized');
    }
};

//# sourceMappingURL=data:application/json;base64,