{"version":3,"names":["cov_1fou906fvb","actualCoverage","s","createStrictApiError","f","createStrictApiResponse","isStrictApiError","isStrictApiResponse","isValidPagination","isValidStrictOrder","toStrictOrdersResponse","obj","b","success","timestamp","error","pagination","page","limit","total","totalPages","hasNextPage","hasPreviousPage","order","hasId","id","hasTotal","hasCreatedAt","created_at","hasStatus","status","code","Date","toISOString","path","response","data","orders","Array","isArray","transformedOrders","map","String","user_id","Number","metadata","validOrders","filter","length","Math","ceil","filters","analytics","message","Error","details"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\types\\api-strict.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - STRICT API TYPES\r\n// Tipos TypeScript estrictos para prevenir errores de API\r\n// ===================================\r\n\r\nimport { OrderEnterprise, OrderStatus, PaymentStatus, FulfillmentStatus } from './orders-enterprise';\r\n\r\n// ===================================\r\n// TIPOS BASE ESTRICTOS\r\n// ===================================\r\n\r\n/**\r\n * Tipo base para respuestas de API con validación estricta\r\n */\r\nexport interface StrictApiResponse<T> {\r\n  readonly success: true;\r\n  readonly data: T;\r\n  readonly message?: string;\r\n  readonly timestamp: string;\r\n}\r\n\r\nexport interface StrictApiError {\r\n  readonly success: false;\r\n  readonly error: string;\r\n  readonly code?: string;\r\n  readonly details?: Record<string, unknown>;\r\n  readonly timestamp: string;\r\n  readonly path: string;\r\n}\r\n\r\n/**\r\n * Union type para respuestas de API que garantiza type safety\r\n */\r\nexport type ApiResult<T> = StrictApiResponse<T> | StrictApiError;\r\n\r\n// ===================================\r\n// TIPOS DE PAGINACIÓN ESTRICTOS\r\n// ===================================\r\n\r\n/**\r\n * Paginación con validación estricta de tipos\r\n */\r\nexport interface StrictPagination {\r\n  readonly page: number & { __brand: 'PositiveInteger' };\r\n  readonly limit: number & { __brand: 'PositiveInteger' };\r\n  readonly total: number & { __brand: 'NonNegativeInteger' };\r\n  readonly totalPages: number & { __brand: 'NonNegativeInteger' };\r\n  readonly hasNextPage: boolean;\r\n  readonly hasPreviousPage: boolean;\r\n}\r\n\r\n/**\r\n * Respuesta paginada con tipos estrictos\r\n */\r\nexport interface StrictPaginatedResponse<T> {\r\n  readonly success: true;\r\n  readonly data: {\r\n    readonly items: readonly T[];\r\n    readonly pagination: StrictPagination;\r\n    readonly filters?: Record<string, unknown>;\r\n  };\r\n  readonly message?: string;\r\n  readonly timestamp: string;\r\n}\r\n\r\n// ===================================\r\n// TIPOS ESPECÍFICOS PARA ÓRDENES\r\n// ===================================\r\n\r\n/**\r\n * Orden con validación estricta de campos requeridos\r\n */\r\nexport interface StrictOrderEnterprise {\r\n  readonly id: string | number; // Flexible para string o number\r\n  readonly order_number?: string & { __brand: 'OrderNumber' }; // Opcional\r\n  readonly user_id?: string | number; // Opcional y flexible\r\n  readonly status: OrderStatus;\r\n  readonly payment_status?: PaymentStatus; // Opcional\r\n  readonly fulfillment_status?: FulfillmentStatus; // Opcional\r\n  readonly total: number & { __brand: 'PositiveAmount' };\r\n  readonly currency?: string & { __brand: 'CurrencyCode' }; // Opcional\r\n  readonly created_at: string & { __brand: 'ISODateString' };\r\n  readonly updated_at?: string & { __brand: 'ISODateString' }; // Opcional\r\n  \r\n  // Campos opcionales con tipos estrictos\r\n  readonly shipping_address?: StrictAddress;\r\n  readonly billing_address?: StrictAddress;\r\n  readonly notes?: string & { __brand: 'NonEmptyString' };\r\n  readonly admin_notes?: string & { __brand: 'NonEmptyString' };\r\n  readonly tracking_number?: string & { __brand: 'TrackingNumber' };\r\n  readonly carrier?: string & { __brand: 'CarrierName' };\r\n  readonly estimated_delivery?: string & { __brand: 'ISODateString' };\r\n  readonly metadata: Record<string, unknown>;\r\n  \r\n  // Relaciones con tipos estrictos\r\n  readonly user_profiles?: StrictUserProfile | null;\r\n  readonly order_items?: readonly StrictOrderItem[];\r\n  readonly status_history?: readonly StrictOrderStatusHistory[];\r\n  readonly order_notes?: readonly StrictOrderNote[];\r\n}\r\n\r\n/**\r\n * Perfil de usuario con validación estricta\r\n */\r\nexport interface StrictUserProfile {\r\n  readonly id: string & { __brand: 'UserId' };\r\n  readonly name: string & { __brand: 'NonEmptyString' };\r\n  readonly email: string & { __brand: 'EmailAddress' };\r\n  readonly phone?: string & { __brand: 'PhoneNumber' };\r\n  readonly avatar_url?: string & { __brand: 'URL' };\r\n}\r\n\r\n/**\r\n * Item de orden con validación estricta\r\n */\r\nexport interface StrictOrderItem {\r\n  readonly id: string & { __brand: 'OrderItemId' };\r\n  readonly order_id: string & { __brand: 'OrderId' };\r\n  readonly product_id: number & { __brand: 'ProductId' };\r\n  readonly quantity: number & { __brand: 'PositiveInteger' };\r\n  readonly unit_price: number & { __brand: 'PositiveAmount' };\r\n  readonly total_price: number & { __brand: 'PositiveAmount' };\r\n  readonly product_name: string & { __brand: 'NonEmptyString' };\r\n  readonly product_sku?: string & { __brand: 'SKU' };\r\n}\r\n\r\n/**\r\n * Dirección con validación estricta\r\n */\r\nexport interface StrictAddress {\r\n  readonly street: string & { __brand: 'NonEmptyString' };\r\n  readonly city: string & { __brand: 'NonEmptyString' };\r\n  readonly state: string & { __brand: 'NonEmptyString' };\r\n  readonly postal_code: string & { __brand: 'PostalCode' };\r\n  readonly country: string & { __brand: 'CountryCode' };\r\n  readonly phone?: string & { __brand: 'PhoneNumber' };\r\n}\r\n\r\n/**\r\n * Historial de estado con validación estricta\r\n */\r\nexport interface StrictOrderStatusHistory {\r\n  readonly id: string & { __brand: 'StatusHistoryId' };\r\n  readonly order_id: string & { __brand: 'OrderId' };\r\n  readonly from_status: OrderStatus | null;\r\n  readonly to_status: OrderStatus;\r\n  readonly reason?: string & { __brand: 'NonEmptyString' };\r\n  readonly admin_id?: string & { __brand: 'AdminId' };\r\n  readonly created_at: string & { __brand: 'ISODateString' };\r\n}\r\n\r\n/**\r\n * Nota de orden con validación estricta\r\n */\r\nexport interface StrictOrderNote {\r\n  readonly id: string & { __brand: 'OrderNoteId' };\r\n  readonly order_id: string & { __brand: 'OrderId' };\r\n  readonly content: string & { __brand: 'NonEmptyString' };\r\n  readonly is_admin_note: boolean;\r\n  readonly admin_id?: string & { __brand: 'AdminId' };\r\n  readonly created_at: string & { __brand: 'ISODateString' };\r\n}\r\n\r\n// ===================================\r\n// RESPUESTAS ESPECÍFICAS DE API\r\n// ===================================\r\n\r\n/**\r\n * Respuesta de lista de órdenes con tipos estrictos\r\n */\r\nexport interface StrictOrdersListResponse {\r\n  readonly success: true;\r\n  readonly data: {\r\n    readonly orders: readonly StrictOrderEnterprise[];\r\n    readonly pagination: StrictPagination;\r\n    readonly filters: {\r\n      readonly search?: string;\r\n      readonly status?: OrderStatus;\r\n      readonly payment_status?: PaymentStatus;\r\n      readonly fulfillment_status?: FulfillmentStatus;\r\n      readonly date_from?: string & { __brand: 'ISODateString' };\r\n      readonly date_to?: string & { __brand: 'ISODateString' };\r\n    };\r\n    readonly analytics?: {\r\n      readonly total_orders: number & { __brand: 'NonNegativeInteger' };\r\n      readonly total_revenue: number & { __brand: 'NonNegativeAmount' };\r\n      readonly pending_orders: number & { __brand: 'NonNegativeInteger' };\r\n      readonly completed_orders: number & { __brand: 'NonNegativeInteger' };\r\n      readonly today_revenue: number & { __brand: 'NonNegativeAmount' };\r\n    };\r\n  };\r\n  readonly message?: string;\r\n  readonly timestamp: string;\r\n}\r\n\r\n/**\r\n * Respuesta de orden individual con tipos estrictos\r\n */\r\nexport interface StrictOrderDetailResponse {\r\n  readonly success: true;\r\n  readonly data: {\r\n    readonly order: StrictOrderEnterprise;\r\n    readonly timeline?: readonly StrictOrderStatusHistory[];\r\n    readonly related_orders?: readonly Pick<StrictOrderEnterprise, 'id' | 'order_number' | 'status' | 'total'>[];\r\n  };\r\n  readonly message?: string;\r\n  readonly timestamp: string;\r\n}\r\n\r\n// ===================================\r\n// VALIDADORES DE TIPOS\r\n// ===================================\r\n\r\n/**\r\n * Validador para verificar si un objeto es una respuesta de API válida\r\n */\r\nexport function isStrictApiResponse<T>(obj: unknown): obj is StrictApiResponse<T> {\r\n  return (\r\n    typeof obj === 'object' &&\r\n    obj !== null &&\r\n    'success' in obj &&\r\n    obj.success === true &&\r\n    'data' in obj &&\r\n    'timestamp' in obj &&\r\n    typeof (obj as any).timestamp === 'string'\r\n  );\r\n}\r\n\r\n/**\r\n * Validador para verificar si un objeto es un error de API válido\r\n */\r\nexport function isStrictApiError(obj: unknown): obj is StrictApiError {\r\n  return (\r\n    typeof obj === 'object' &&\r\n    obj !== null &&\r\n    'success' in obj &&\r\n    obj.success === false &&\r\n    'error' in obj &&\r\n    typeof (obj as any).error === 'string' &&\r\n    'timestamp' in obj &&\r\n    typeof (obj as any).timestamp === 'string'\r\n  );\r\n}\r\n\r\n/**\r\n * Validador para verificar si una paginación es válida\r\n */\r\nexport function isValidPagination(obj: unknown): obj is StrictPagination {\r\n  if (typeof obj !== 'object' || obj === null) {return false;}\r\n  \r\n  const pagination = obj as any;\r\n  return (\r\n    typeof pagination.page === 'number' &&\r\n    typeof pagination.limit === 'number' &&\r\n    typeof pagination.total === 'number' &&\r\n    typeof pagination.totalPages === 'number' &&\r\n    typeof pagination.hasNextPage === 'boolean' &&\r\n    typeof pagination.hasPreviousPage === 'boolean' &&\r\n    pagination.page > 0 &&\r\n    pagination.limit > 0 &&\r\n    pagination.total >= 0 &&\r\n    pagination.totalPages >= 0\r\n  );\r\n}\r\n\r\n/**\r\n * Validador para verificar si una orden es válida (versión más flexible)\r\n */\r\nexport function isValidStrictOrder(obj: unknown): obj is StrictOrderEnterprise {\r\n  if (typeof obj !== 'object' || obj === null) {\r\n    return false;\r\n  }\r\n  \r\n  const order = obj as any;\r\n  \r\n  // Validaciones mínimas - solo campos absolutamente esenciales\r\n  const hasId = order.id && (typeof order.id === 'string' || typeof order.id === 'number');\r\n  const hasTotal = typeof order.total === 'number' && order.total >= 0;\r\n  const hasCreatedAt = order.created_at && typeof order.created_at === 'string';\r\n  const hasStatus = order.status && typeof order.status === 'string';\r\n  \r\n  // Solo requerir los campos absolutamente esenciales\r\n  return hasId && hasTotal && hasCreatedAt && hasStatus;\r\n}\r\n\r\n// ===================================\r\n// UTILIDADES DE TRANSFORMACIÓN\r\n// ===================================\r\n\r\n/**\r\n * Transforma una respuesta de API no tipada a una respuesta estricta\r\n */\r\nexport function toStrictOrdersResponse(obj: unknown): StrictOrdersListResponse | StrictApiError {\r\n  try {\r\n    if (!isStrictApiResponse(obj)) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid API response format',\r\n        code: 'INVALID_RESPONSE_FORMAT',\r\n        timestamp: new Date().toISOString(),\r\n        path: '/api/admin/orders'\r\n      };\r\n    }\r\n\r\n    const response = obj as any;\r\n    \r\n    // Validar estructura de datos\r\n    if (!response.data || typeof response.data !== 'object') {\r\n      return {\r\n        success: false,\r\n        error: 'Missing or invalid data field',\r\n        code: 'INVALID_DATA_FIELD',\r\n        timestamp: new Date().toISOString(),\r\n        path: '/api/admin/orders'\r\n      };\r\n    }\r\n\r\n    // Validar órdenes\r\n    const orders = response.data.orders || [];\r\n    if (!Array.isArray(orders)) {\r\n      return {\r\n        success: false,\r\n        error: 'Orders field must be an array',\r\n        code: 'INVALID_ORDERS_FIELD',\r\n        timestamp: new Date().toISOString(),\r\n        path: '/api/admin/orders'\r\n      };\r\n    }\r\n\r\n    // Validar paginación\r\n    const pagination = response.data.pagination;\r\n    if (pagination && !isValidPagination(pagination)) {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid pagination format',\r\n        code: 'INVALID_PAGINATION',\r\n        timestamp: new Date().toISOString(),\r\n        path: '/api/admin/orders'\r\n      };\r\n    }\r\n\r\n    // Transformar órdenes para asegurar compatibilidad\r\n    \r\n    // Transformar órdenes para normalizar tipos\r\n    const transformedOrders = orders.map((order: any) => ({\r\n      ...order,\r\n      id: String(order.id), // Convertir ID a string para compatibilidad frontend\r\n      user_id: order.user_id ? String(order.user_id) : order.user_id,\r\n      total: Number(order.total) || 0,\r\n      created_at: order.created_at || new Date().toISOString(),\r\n      status: order.status || 'pending',\r\n      metadata: order.metadata || {}\r\n    }));\r\n    \r\n    const validOrders = transformedOrders.filter(isValidStrictOrder);\r\n    \r\n    // Crear respuesta estricta con valores por defecto seguros\r\n    return {\r\n      success: true,\r\n      data: {\r\n        orders: validOrders,\r\n        pagination: pagination || {\r\n          page: 1 as any,\r\n          limit: 20 as any,\r\n          total: orders.length as any,\r\n          totalPages: Math.ceil(orders.length / 20) as any,\r\n          hasNextPage: false,\r\n          hasPreviousPage: false\r\n        },\r\n        filters: response.data.filters || {},\r\n        analytics: response.data.analytics\r\n      },\r\n      message: response.message,\r\n      timestamp: response.timestamp || new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to parse API response: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      code: 'PARSE_ERROR',\r\n      timestamp: new Date().toISOString(),\r\n      path: '/api/admin/orders'\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Crea una respuesta de error estricta\r\n */\r\nexport function createStrictApiError(\r\n  error: string,\r\n  code?: string,\r\n  details?: Record<string, unknown>,\r\n  path?: string\r\n): StrictApiError {\r\n  return {\r\n    success: false,\r\n    error,\r\n    code,\r\n    details,\r\n    timestamp: new Date().toISOString(),\r\n    path: path || '/api/unknown'\r\n  };\r\n}\r\n\r\n/**\r\n * Crea una respuesta exitosa estricta\r\n */\r\nexport function createStrictApiResponse<T>(\r\n  data: T,\r\n  message?: string\r\n): StrictApiResponse<T> {\r\n  return {\r\n    success: true,\r\n    data,\r\n    message,\r\n    timestamp: new Date().toISOString()\r\n  };\r\n}\r\n\r\n// ===================================\r\n// TIPOS DE UTILIDAD\r\n// ===================================\r\n\r\n/**\r\n * Extrae el tipo de datos de una respuesta de API\r\n */\r\nexport type ExtractApiData<T> = T extends StrictApiResponse<infer U> ? U : never;\r\n\r\n/**\r\n * Hace que todos los campos de un tipo sean de solo lectura recursivamente\r\n */\r\nexport type DeepReadonly<T> = {\r\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\r\n};\r\n\r\n/**\r\n * Tipo para funciones que manejan respuestas de API\r\n */\r\nexport type ApiHandler<T, R = void> = (response: ApiResult<T>) => R | Promise<R>;\r\n\r\n/**\r\n * Tipo para opciones de configuración de API\r\n */\r\nexport interface StrictApiOptions {\r\n  readonly timeout?: number;\r\n  readonly retries?: number;\r\n  readonly validateResponse?: boolean;\r\n  readonly throwOnError?: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingskYgB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAAAC,qBAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,oBAAA;;MAmBAE,wBAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,uBAAA;;MAjLAC,iBAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,gBAAA;;MAfAC,oBAAA;IAAA;IAAAP,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAK,mBAAA;;MA+BAC,kBAAA;IAAA;IAAAR,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAM,iBAAA;;MAqBAC,mBAAA;IAAA;IAAAT,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAO,kBAAA;;MAwBAC,uBAAA;IAAA;IAAAV,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAQ,sBAAA;;;AA5ET,SAASH,oBAAuBI,GAAY;EAAA;EAAAX,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACjD,OACE,2BAAAF,cAAA,GAAAY,CAAA,iBAAOD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACfD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACR,aAAaD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACbD,GAAA,CAAIE,OAAO,KAAK;EAAA;EAAA,CAAAb,cAAA,GAAAY,CAAA,UAChB,UAAUD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACV,eAAeD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACf,OAAOD,GAAC,CAAYG,SAAS,KAAK;AAEtC;AAKO,SAASR,iBAAiBK,GAAY;EAAA;EAAAX,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC3C,OACE,2BAAAF,cAAA,GAAAY,CAAA,iBAAOD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACfD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACR,aAAaD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACbD,GAAA,CAAIE,OAAO,KAAK;EAAA;EAAA,CAAAb,cAAA,GAAAY,CAAA,UAChB,WAAWD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACX,OAAOD,GAAC,CAAYI,KAAK,KAAK;EAAA;EAAA,CAAAf,cAAA,GAAAY,CAAA,UAC9B,eAAeD,GAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UACf,OAAOD,GAAC,CAAYG,SAAS,KAAK;AAEtC;AAKO,SAASN,kBAAkBG,GAAY;EAAA;EAAAX,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC5C;EAAI;EAAA,CAAAF,cAAA,GAAAY,CAAA,iBAAOD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UAAYD,GAAA,KAAQ,OAAM;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAAC,OAAO;EAAM;EAAA;EAAA;IAAAF,cAAA,GAAAY,CAAA;EAAA;EAE3D,MAAMI,UAAA;EAAA;EAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAaS,GAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EACnB,OACE,2BAAAF,cAAA,GAAAY,CAAA,iBAAOI,UAAA,CAAWC,IAAI,KAAK;EAAA;EAAA,CAAAjB,cAAA,GAAAY,CAAA,UAC3B,OAAOI,UAAA,CAAWE,KAAK,KAAK;EAAA;EAAA,CAAAlB,cAAA,GAAAY,CAAA,UAC5B,OAAOI,UAAA,CAAWG,KAAK,KAAK;EAAA;EAAA,CAAAnB,cAAA,GAAAY,CAAA,UAC5B,OAAOI,UAAA,CAAWI,UAAU,KAAK;EAAA;EAAA,CAAApB,cAAA,GAAAY,CAAA,UACjC,OAAOI,UAAA,CAAWK,WAAW,KAAK;EAAA;EAAA,CAAArB,cAAA,GAAAY,CAAA,UAClC,OAAOI,UAAA,CAAWM,eAAe,KAAK;EAAA;EAAA,CAAAtB,cAAA,GAAAY,CAAA,UACtCI,UAAA,CAAWC,IAAI,GAAG;EAAA;EAAA,CAAAjB,cAAA,GAAAY,CAAA,UAClBI,UAAA,CAAWE,KAAK,GAAG;EAAA;EAAA,CAAAlB,cAAA,GAAAY,CAAA,UACnBI,UAAA,CAAWG,KAAK,IAAI;EAAA;EAAA,CAAAnB,cAAA,GAAAY,CAAA,UACpBI,UAAA,CAAWI,UAAU,IAAI;AAE7B;AAKO,SAASX,mBAAmBE,GAAY;EAAA;EAAAX,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7C;EAAI;EAAA,CAAAF,cAAA,GAAAY,CAAA,iBAAOD,GAAA,KAAQ;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,UAAYD,GAAA,KAAQ,OAAM;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAC3C,OAAO;EACT;EAAA;EAAA;IAAAF,cAAA,GAAAY,CAAA;EAAA;EAEA,MAAMW,KAAA;EAAA;EAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAQS,GAAA;EAEd;EACA,MAAMa,KAAA;EAAA;EAAA,CAAAxB,cAAA,GAAAE,CAAA;EAAQ;EAAA,CAAAF,cAAA,GAAAY,CAAA,UAAAW,KAAA,CAAME,EAAE;EAAK;EAAA,CAAAzB,cAAA,GAAAY,CAAA,iBAAOW,KAAA,CAAME,EAAE,KAAK;EAAA;EAAA,CAAAzB,cAAA,GAAAY,CAAA,UAAY,OAAOW,KAAA,CAAME,EAAE,KAAK,QAAO;EACtF,MAAMC,QAAA;EAAA;EAAA,CAAA1B,cAAA,GAAAE,CAAA;EAAW;EAAA,CAAAF,cAAA,GAAAY,CAAA,iBAAOW,KAAA,CAAMJ,KAAK,KAAK;EAAA;EAAA,CAAAnB,cAAA,GAAAY,CAAA,UAAYW,KAAA,CAAMJ,KAAK,IAAI;EACnE,MAAMQ,YAAA;EAAA;EAAA,CAAA3B,cAAA,GAAAE,CAAA;EAAe;EAAA,CAAAF,cAAA,GAAAY,CAAA,UAAAW,KAAA,CAAMK,UAAU;EAAA;EAAA,CAAA5B,cAAA,GAAAY,CAAA,UAAI,OAAOW,KAAA,CAAMK,UAAU,KAAK;EACrE,MAAMC,SAAA;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA;EAAY;EAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAW,KAAA,CAAMO,MAAM;EAAA;EAAA,CAAA9B,cAAA,GAAAY,CAAA,WAAI,OAAOW,KAAA,CAAMO,MAAM,KAAK;EAE1D;EAAA;EAAA9B,cAAA,GAAAE,CAAA;EACA,OAAO,2BAAAF,cAAA,GAAAY,CAAA,WAAAY,KAAA;EAAA;EAAA,CAAAxB,cAAA,GAAAY,CAAA,WAASc,QAAA;EAAA;EAAA,CAAA1B,cAAA,GAAAY,CAAA,WAAYe,YAAA;EAAA;EAAA,CAAA3B,cAAA,GAAAY,CAAA,WAAgBiB,SAAA;AAC9C;AASO,SAASnB,uBAAuBC,GAAY;EAAA;EAAAX,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACjD,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACF,IAAI,CAACK,mBAAA,CAAoBI,GAAA,GAAM;MAAA;MAAAX,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC7B,OAAO;QACLW,OAAA,EAAS;QACTE,KAAA,EAAO;QACPgB,IAAA,EAAM;QACNjB,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;QACjCC,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAAlC,cAAA,GAAAY,CAAA;IAAA;IAEA,MAAMuB,QAAA;IAAA;IAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAWS,GAAA;IAEjB;IAAA;IAAAX,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,YAACuB,QAAA,CAASC,IAAI;IAAA;IAAA,CAAApC,cAAA,GAAAY,CAAA,WAAI,OAAOuB,QAAA,CAASC,IAAI,KAAK,WAAU;MAAA;MAAApC,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACvD,OAAO;QACLW,OAAA,EAAS;QACTE,KAAA,EAAO;QACPgB,IAAA,EAAM;QACNjB,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;QACjCC,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAAlC,cAAA,GAAAY,CAAA;IAAA;IAEA;IACA,MAAMyB,MAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA;IAAS;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAuB,QAAA,CAASC,IAAI,CAACC,MAAM;IAAA;IAAA,CAAArC,cAAA,GAAAY,CAAA,WAAI,EAAE;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACzC,IAAI,CAACoC,KAAA,CAAMC,OAAO,CAACF,MAAA,GAAS;MAAA;MAAArC,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC1B,OAAO;QACLW,OAAA,EAAS;QACTE,KAAA,EAAO;QACPgB,IAAA,EAAM;QACNjB,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;QACjCC,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAAlC,cAAA,GAAAY,CAAA;IAAA;IAEA;IACA,MAAMI,UAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAaiC,QAAA,CAASC,IAAI,CAACpB,UAAU;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAC3C;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAI,UAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAY,CAAA,WAAc,CAACJ,iBAAA,CAAkBQ,UAAA,IAAa;MAAA;MAAAhB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAChD,OAAO;QACLW,OAAA,EAAS;QACTE,KAAA,EAAO;QACPgB,IAAA,EAAM;QACNjB,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;QACjCC,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAAlC,cAAA,GAAAY,CAAA;IAAA;IAEA;IAEA;IACA,MAAM4B,iBAAA;IAAA;IAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAoBmC,MAAA,CAAOI,GAAG,CAAElB,KAAA,IAAgB;MAAA;MAAAvB,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA;QACpD,GAAGqB,KAAK;QACRE,EAAA,EAAIiB,MAAA,CAAOnB,KAAA,CAAME,EAAE;QACnBkB,OAAA,EAASpB,KAAA,CAAMoB,OAAO;QAAA;QAAA,CAAA3C,cAAA,GAAAY,CAAA,WAAG8B,MAAA,CAAOnB,KAAA,CAAMoB,OAAO;QAAA;QAAA,CAAA3C,cAAA,GAAAY,CAAA,WAAIW,KAAA,CAAMoB,OAAO;QAC9DxB,KAAA;QAAO;QAAA,CAAAnB,cAAA,GAAAY,CAAA,WAAAgC,MAAA,CAAOrB,KAAA,CAAMJ,KAAK;QAAA;QAAA,CAAAnB,cAAA,GAAAY,CAAA,WAAK;QAC9BgB,UAAA;QAAY;QAAA,CAAA5B,cAAA,GAAAY,CAAA,WAAAW,KAAA,CAAMK,UAAU;QAAA;QAAA,CAAA5B,cAAA,GAAAY,CAAA,WAAI,IAAIoB,IAAA,GAAOC,WAAW;QACtDH,MAAA;QAAQ;QAAA,CAAA9B,cAAA,GAAAY,CAAA,WAAAW,KAAA,CAAMO,MAAM;QAAA;QAAA,CAAA9B,cAAA,GAAAY,CAAA,WAAI;QACxBiC,QAAA;QAAU;QAAA,CAAA7C,cAAA,GAAAY,CAAA,WAAAW,KAAA,CAAMsB,QAAQ;QAAA;QAAA,CAAA7C,cAAA,GAAAY,CAAA,WAAI,CAAC;MAC/B;IAAA;IAEA,MAAMkC,WAAA;IAAA;IAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAcsC,iBAAA,CAAkBO,MAAM,CAACtC,kBAAA;IAE7C;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACA,OAAO;MACLW,OAAA,EAAS;MACTuB,IAAA,EAAM;QACJC,MAAA,EAAQS,WAAA;QACR9B,UAAA;QAAY;QAAA,CAAAhB,cAAA,GAAAY,CAAA,WAAAI,UAAA;QAAA;QAAA,CAAAhB,cAAA,GAAAY,CAAA,WAAc;UACxBK,IAAA,EAAM;UACNC,KAAA,EAAO;UACPC,KAAA,EAAOkB,MAAA,CAAOW,MAAM;UACpB5B,UAAA,EAAY6B,IAAA,CAAKC,IAAI,CAACb,MAAA,CAAOW,MAAM,GAAG;UACtC3B,WAAA,EAAa;UACbC,eAAA,EAAiB;QACnB;QACA6B,OAAA;QAAS;QAAA,CAAAnD,cAAA,GAAAY,CAAA,WAAAuB,QAAA,CAASC,IAAI,CAACe,OAAO;QAAA;QAAA,CAAAnD,cAAA,GAAAY,CAAA,WAAI,CAAC;QACnCwC,SAAA,EAAWjB,QAAA,CAASC,IAAI,CAACgB;MAC3B;MACAC,OAAA,EAASlB,QAAA,CAASkB,OAAO;MACzBvC,SAAA;MAAW;MAAA,CAAAd,cAAA,GAAAY,CAAA,WAAAuB,QAAA,CAASrB,SAAS;MAAA;MAAA,CAAAd,cAAA,GAAAY,CAAA,WAAI,IAAIoB,IAAA,GAAOC,WAAW;IACzD;EACF,EAAE,OAAOlB,KAAA,EAAO;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACd,OAAO;MACLW,OAAA,EAAS;MACTE,KAAA,EAAO,iCAAiCA,KAAA,YAAiBuC,KAAA;MAAA;MAAA,CAAAtD,cAAA,GAAAY,CAAA,WAAQG,KAAA,CAAMsC,OAAO;MAAA;MAAA,CAAArD,cAAA,GAAAY,CAAA,WAAG,kBAAiB;MAClGmB,IAAA,EAAM;MACNjB,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;MACjCC,IAAA,EAAM;IACR;EACF;AACF;AAKO,SAAS/B,qBACdY,KAAa,EACbgB,IAAa,EACbwB,OAAiC,EACjCrB,IAAa;EAAA;EAAAlC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAEb,OAAO;IACLW,OAAA,EAAS;IACTE,KAAA;IACAgB,IAAA;IACAwB,OAAA;IACAzC,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;IACjCC,IAAA;IAAM;IAAA,CAAAlC,cAAA,GAAAY,CAAA,WAAAsB,IAAA;IAAA;IAAA,CAAAlC,cAAA,GAAAY,CAAA,WAAQ;EAChB;AACF;AAKO,SAASP,wBACd+B,IAAO,EACPiB,OAAgB;EAAA;EAAArD,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAEhB,OAAO;IACLW,OAAA,EAAS;IACTuB,IAAA;IACAiB,OAAA;IACAvC,SAAA,EAAW,IAAIkB,IAAA,GAAOC,WAAW;EACnC;AACF","ignoreList":[]}