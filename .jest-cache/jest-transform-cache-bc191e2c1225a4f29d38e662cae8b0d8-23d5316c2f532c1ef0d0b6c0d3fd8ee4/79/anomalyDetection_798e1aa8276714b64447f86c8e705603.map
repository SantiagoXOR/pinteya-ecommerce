{"version":3,"names":["AnomalyDetector","cov_8r5qg2g7","f","s","analyzeSessionForAnomalies","getInstance","instance","b","analyzeSession","sessionData","anomalies","userPattern","getUserBehaviorPattern","userId","ipAnomaly","detectIPAnomaly","isAnomalous","push","deviceAnomaly","detectDeviceAnomaly","timeAnomaly","detectTimeAnomaly","concurrentAnomaly","detectConcurrentSessionsAnomaly","travelAnomaly","detectImpossibleTravelAnomaly","error","console","thirtyDaysAgo","Date","now","toISOString","data","sessions","_supabase","supabaseAdmin","from","select","eq","gte","length","commonIPs","commonDevices","commonLocations","typicalLoginHours","averageSessionDuration","lastSeenDevices","ipCounts","reduce","acc","session","ip_address","Object","entries","filter","_","count","map","ip","deviceCounts","device_name","device","loginHours","created_at","getHours","hourCounts","hour","parseInt","sessionDurations","created","getTime","lastActivity","last_activity","a","deviceName","lastSeen","sort","trustLevel","Math","min","isNewIP","includes","ipAddress","severity","type","description","metadata","newIP","knownIPs","sessionId","recommendations","deviceType","userAgent","split","isNewDevice","some","toLowerCase","newDevice","knownDevices","loginHour","timestamp","isUnusualTime","hourDifferences","abs","minDifference","typicalHours","hourDifference","activeSessions","uniqueIPs","Set","size","uniqueDevices","totalSessions","recentSessions","neq","order","ascending","limit","lastSession","timeDiff","timeDiffMinutes","previousIP","currentIP","timeDifferenceMinutes","round","createSecurityAlert","anomaly","insert","user_id","title","join","detector","log"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\security\\anomalyDetection.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - SISTEMA DE DETECCIÓN DE ANOMALÍAS\r\n// ===================================\r\n\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para detección de anomalías\r\nexport interface AnomalyDetectionResult {\r\n  isAnomalous: boolean;\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  type: string;\r\n  description: string;\r\n  metadata: Record<string, any>;\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface SessionAnalysis {\r\n  userId: string;\r\n  sessionId: string;\r\n  ipAddress: string;\r\n  userAgent: string;\r\n  deviceType: string;\r\n  location?: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface UserBehaviorPattern {\r\n  userId: string;\r\n  commonIPs: string[];\r\n  commonDevices: string[];\r\n  commonLocations: string[];\r\n  typicalLoginHours: number[];\r\n  averageSessionDuration: number;\r\n  lastSeenDevices: Array<{\r\n    deviceName: string;\r\n    lastSeen: string;\r\n    trustLevel: number;\r\n  }>;\r\n}\r\n\r\n// Clase principal para detección de anomalías\r\nexport class AnomalyDetector {\r\n  private static instance: AnomalyDetector;\r\n  \r\n  public static getInstance(): AnomalyDetector {\r\n    if (!AnomalyDetector.instance) {\r\n      AnomalyDetector.instance = new AnomalyDetector();\r\n    }\r\n    return AnomalyDetector.instance;\r\n  }\r\n\r\n  // Analizar nueva sesión para detectar anomalías\r\n  async analyzeSession(sessionData: SessionAnalysis): Promise<AnomalyDetectionResult[]> {\r\n    const anomalies: AnomalyDetectionResult[] = [];\r\n    \r\n    try {\r\n      // Obtener patrón de comportamiento del usuario\r\n      const userPattern = await this.getUserBehaviorPattern(sessionData.userId);\r\n      \r\n      // Detectar IP nueva o sospechosa\r\n      const ipAnomaly = await this.detectIPAnomaly(sessionData, userPattern);\r\n      if (ipAnomaly.isAnomalous) {\r\n        anomalies.push(ipAnomaly);\r\n      }\r\n      \r\n      // Detectar dispositivo nuevo\r\n      const deviceAnomaly = await this.detectDeviceAnomaly(sessionData, userPattern);\r\n      if (deviceAnomaly.isAnomalous) {\r\n        anomalies.push(deviceAnomaly);\r\n      }\r\n      \r\n      // Detectar horario inusual\r\n      const timeAnomaly = await this.detectTimeAnomaly(sessionData, userPattern);\r\n      if (timeAnomaly.isAnomalous) {\r\n        anomalies.push(timeAnomaly);\r\n      }\r\n      \r\n      // Detectar múltiples sesiones simultáneas\r\n      const concurrentAnomaly = await this.detectConcurrentSessionsAnomaly(sessionData);\r\n      if (concurrentAnomaly.isAnomalous) {\r\n        anomalies.push(concurrentAnomaly);\r\n      }\r\n      \r\n      // Detectar velocidad de viaje imposible\r\n      const travelAnomaly = await this.detectImpossibleTravelAnomaly(sessionData, userPattern);\r\n      if (travelAnomaly.isAnomalous) {\r\n        anomalies.push(travelAnomaly);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error en detección de anomalías:', error);\r\n    }\r\n    \r\n    return anomalies;\r\n  }\r\n\r\n  // Obtener patrón de comportamiento del usuario\r\n  private async getUserBehaviorPattern(userId: string): Promise<UserBehaviorPattern> {\r\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\r\n    \r\n    // Obtener sesiones de los últimos 30 días\r\n    const { data: sessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .gte('created_at', thirtyDaysAgo);\r\n    \r\n    if (!sessions || sessions.length === 0) {\r\n      return {\r\n        userId,\r\n        commonIPs: [],\r\n        commonDevices: [],\r\n        commonLocations: [],\r\n        typicalLoginHours: [],\r\n        averageSessionDuration: 0,\r\n        lastSeenDevices: [],\r\n      };\r\n    }\r\n    \r\n    // Analizar IPs comunes\r\n    const ipCounts = sessions.reduce((acc, session) => {\r\n      acc[session.ip_address] = (acc[session.ip_address] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    const commonIPs = Object.entries(ipCounts)\r\n      .filter(([_, count]) => count >= 3)\r\n      .map(([ip]) => ip);\r\n    \r\n    // Analizar dispositivos comunes\r\n    const deviceCounts = sessions.reduce((acc, session) => {\r\n      acc[session.device_name] = (acc[session.device_name] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n    \r\n    const commonDevices = Object.entries(deviceCounts)\r\n      .filter(([_, count]) => count >= 2)\r\n      .map(([device]) => device);\r\n    \r\n    // Analizar horarios típicos\r\n    const loginHours = sessions.map(session => \r\n      new Date(session.created_at).getHours()\r\n    );\r\n    \r\n    const hourCounts = loginHours.reduce((acc, hour) => {\r\n      acc[hour] = (acc[hour] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<number, number>);\r\n    \r\n    const typicalLoginHours = Object.entries(hourCounts)\r\n      .filter(([_, count]) => count >= 2)\r\n      .map(([hour]) => parseInt(hour));\r\n    \r\n    // Calcular duración promedio de sesión\r\n    const sessionDurations = sessions.map(session => {\r\n      const created = new Date(session.created_at).getTime();\r\n      const lastActivity = new Date(session.last_activity).getTime();\r\n      return lastActivity - created;\r\n    });\r\n    \r\n    const averageSessionDuration = sessionDurations.length > 0 \r\n      ? sessionDurations.reduce((a, b) => a + b, 0) / sessionDurations.length \r\n      : 0;\r\n    \r\n    // Dispositivos vistos recientemente\r\n    const lastSeenDevices = Object.entries(deviceCounts)\r\n      .map(([device, count]) => ({\r\n        deviceName: device,\r\n        lastSeen: sessions\r\n          .filter(s => s.device_name === device)\r\n          .sort((a, b) => new Date(b.last_activity).getTime() - new Date(a.last_activity).getTime())[0]\r\n          ?.last_activity || '',\r\n        trustLevel: Math.min(count / 10, 1), // Nivel de confianza basado en frecuencia\r\n      }))\r\n      .sort((a, b) => new Date(b.lastSeen).getTime() - new Date(a.lastSeen).getTime());\r\n    \r\n    return {\r\n      userId,\r\n      commonIPs,\r\n      commonDevices,\r\n      commonLocations: [], // TODO: Implementar geolocalización\r\n      typicalLoginHours,\r\n      averageSessionDuration,\r\n      lastSeenDevices,\r\n    };\r\n  }\r\n\r\n  // Detectar anomalía de IP\r\n  private async detectIPAnomaly(\r\n    sessionData: SessionAnalysis, \r\n    userPattern: UserBehaviorPattern\r\n  ): Promise<AnomalyDetectionResult> {\r\n    const isNewIP = !userPattern.commonIPs.includes(sessionData.ipAddress);\r\n    \r\n    if (isNewIP && userPattern.commonIPs.length > 0) {\r\n      return {\r\n        isAnomalous: true,\r\n        severity: 'medium',\r\n        type: 'new_ip_address',\r\n        description: 'Inicio de sesión desde una nueva dirección IP',\r\n        metadata: {\r\n          newIP: sessionData.ipAddress,\r\n          knownIPs: userPattern.commonIPs,\r\n          sessionId: sessionData.sessionId,\r\n        },\r\n        recommendations: [\r\n          'Verificar si el inicio de sesión fue autorizado',\r\n          'Considerar marcar el dispositivo como confiable si es legítimo',\r\n          'Revisar actividad reciente en la cuenta',\r\n        ],\r\n      };\r\n    }\r\n    \r\n    return { isAnomalous: false, severity: 'low', type: '', description: '', metadata: {}, recommendations: [] };\r\n  }\r\n\r\n  // Detectar anomalía de dispositivo\r\n  private async detectDeviceAnomaly(\r\n    sessionData: SessionAnalysis, \r\n    userPattern: UserBehaviorPattern\r\n  ): Promise<AnomalyDetectionResult> {\r\n    const deviceName = `${sessionData.deviceType} ${sessionData.userAgent.split(' ')[0]}`;\r\n    const isNewDevice = !userPattern.commonDevices.some(device => \r\n      device.toLowerCase().includes(sessionData.deviceType.toLowerCase())\r\n    );\r\n    \r\n    if (isNewDevice && userPattern.commonDevices.length > 0) {\r\n      return {\r\n        isAnomalous: true,\r\n        severity: 'medium',\r\n        type: 'new_device',\r\n        description: 'Inicio de sesión desde un nuevo dispositivo',\r\n        metadata: {\r\n          newDevice: deviceName,\r\n          deviceType: sessionData.deviceType,\r\n          userAgent: sessionData.userAgent,\r\n          knownDevices: userPattern.commonDevices,\r\n        },\r\n        recommendations: [\r\n          'Verificar si el dispositivo es de confianza',\r\n          'Considerar activar autenticación de dos factores',\r\n          'Revisar configuración de alertas de seguridad',\r\n        ],\r\n      };\r\n    }\r\n    \r\n    return { isAnomalous: false, severity: 'low', type: '', description: '', metadata: {}, recommendations: [] };\r\n  }\r\n\r\n  // Detectar anomalía de horario\r\n  private async detectTimeAnomaly(\r\n    sessionData: SessionAnalysis, \r\n    userPattern: UserBehaviorPattern\r\n  ): Promise<AnomalyDetectionResult> {\r\n    const loginHour = new Date(sessionData.timestamp).getHours();\r\n    const isUnusualTime = userPattern.typicalLoginHours.length > 0 && \r\n                         !userPattern.typicalLoginHours.includes(loginHour);\r\n    \r\n    // Solo considerar anómalo si es muy fuera del patrón (más de 6 horas de diferencia)\r\n    if (isUnusualTime && userPattern.typicalLoginHours.length >= 5) {\r\n      const hourDifferences = userPattern.typicalLoginHours.map(hour => \r\n        Math.min(Math.abs(hour - loginHour), 24 - Math.abs(hour - loginHour))\r\n      );\r\n      const minDifference = Math.min(...hourDifferences);\r\n      \r\n      if (minDifference >= 6) {\r\n        return {\r\n          isAnomalous: true,\r\n          severity: 'low',\r\n          type: 'unusual_time',\r\n          description: 'Inicio de sesión en horario inusual',\r\n          metadata: {\r\n            loginHour,\r\n            typicalHours: userPattern.typicalLoginHours,\r\n            hourDifference: minDifference,\r\n          },\r\n          recommendations: [\r\n            'Verificar si el horario corresponde a tu zona horaria',\r\n            'Considerar si estás viajando o en una ubicación diferente',\r\n          ],\r\n        };\r\n      }\r\n    }\r\n    \r\n    return { isAnomalous: false, severity: 'low', type: '', description: '', metadata: {}, recommendations: [] };\r\n  }\r\n\r\n  // Detectar múltiples sesiones concurrentes\r\n  private async detectConcurrentSessionsAnomaly(\r\n    sessionData: SessionAnalysis\r\n  ): Promise<AnomalyDetectionResult> {\r\n    const { data: activeSessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('id, ip_address, device_name')\r\n      .eq('user_id', sessionData.userId)\r\n      .gte('last_activity', new Date(Date.now() - 60 * 60 * 1000).toISOString()); // Últimas 1 hora\r\n    \r\n    if (activeSessions && activeSessions.length > 3) {\r\n      const uniqueIPs = new Set(activeSessions.map(s => s.ip_address)).size;\r\n      const uniqueDevices = new Set(activeSessions.map(s => s.device_name)).size;\r\n      \r\n      if (uniqueIPs > 2 || uniqueDevices > 3) {\r\n        return {\r\n          isAnomalous: true,\r\n          severity: 'high',\r\n          type: 'multiple_concurrent_sessions',\r\n          description: 'Múltiples sesiones activas desde diferentes ubicaciones o dispositivos',\r\n          metadata: {\r\n            totalSessions: activeSessions.length,\r\n            uniqueIPs,\r\n            uniqueDevices,\r\n            sessions: activeSessions,\r\n          },\r\n          recommendations: [\r\n            'Revisar todas las sesiones activas',\r\n            'Cerrar sesiones no autorizadas',\r\n            'Cambiar contraseña si es necesario',\r\n            'Activar autenticación de dos factores',\r\n          ],\r\n        };\r\n      }\r\n    }\r\n    \r\n    return { isAnomalous: false, severity: 'low', type: '', description: '', metadata: {}, recommendations: [] };\r\n  }\r\n\r\n  // Detectar viaje imposible (placeholder - requiere geolocalización)\r\n  private async detectImpossibleTravelAnomaly(\r\n    sessionData: SessionAnalysis, \r\n    userPattern: UserBehaviorPattern\r\n  ): Promise<AnomalyDetectionResult> {\r\n    // TODO: Implementar detección de viaje imposible con geolocalización\r\n    // Por ahora, solo detectamos cambios rápidos de IP\r\n    \r\n    const { data: recentSessions } = await supabaseAdmin\r\n      .from('user_sessions')\r\n      .select('ip_address, created_at')\r\n      .eq('user_id', sessionData.userId)\r\n      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // Última hora\r\n      .neq('ip_address', sessionData.ipAddress)\r\n      .order('created_at', { ascending: false })\r\n      .limit(1);\r\n    \r\n    if (recentSessions && recentSessions.length > 0) {\r\n      const lastSession = recentSessions[0];\r\n      const timeDiff = new Date(sessionData.timestamp).getTime() - new Date(lastSession.created_at).getTime();\r\n      const timeDiffMinutes = timeDiff / (1000 * 60);\r\n      \r\n      // Si hay cambio de IP en menos de 30 minutos, podría ser sospechoso\r\n      if (timeDiffMinutes < 30) {\r\n        return {\r\n          isAnomalous: true,\r\n          severity: 'medium',\r\n          type: 'rapid_location_change',\r\n          description: 'Cambio rápido de ubicación detectado',\r\n          metadata: {\r\n            previousIP: lastSession.ip_address,\r\n            currentIP: sessionData.ipAddress,\r\n            timeDifferenceMinutes: Math.round(timeDiffMinutes),\r\n          },\r\n          recommendations: [\r\n            'Verificar si estás usando VPN o proxy',\r\n            'Confirmar que ambos inicios de sesión son legítimos',\r\n            'Revisar configuración de red',\r\n          ],\r\n        };\r\n      }\r\n    }\r\n    \r\n    return { isAnomalous: false, severity: 'low', type: '', description: '', metadata: {}, recommendations: [] };\r\n  }\r\n\r\n  // Crear alerta de seguridad\r\n  async createSecurityAlert(\r\n    userId: string, \r\n    anomaly: AnomalyDetectionResult\r\n  ): Promise<void> {\r\n    try {\r\n      await supabaseAdmin\r\n        .from('user_security_alerts')\r\n        .insert({\r\n          user_id: userId,\r\n          type: anomaly.type,\r\n          severity: anomaly.severity,\r\n          title: anomaly.description,\r\n          description: `${anomaly.description}. ${anomaly.recommendations.join(' ')}`,\r\n          metadata: anomaly.metadata,\r\n        });\r\n    } catch (error) {\r\n      console.error('Error creando alerta de seguridad:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Función de utilidad para analizar sesión\r\nexport async function analyzeSessionForAnomalies(sessionData: SessionAnalysis): Promise<void> {\r\n  const detector = AnomalyDetector.getInstance();\r\n  const anomalies = await detector.analyzeSession(sessionData);\r\n  \r\n  // Crear alertas para anomalías detectadas\r\n  for (const anomaly of anomalies) {\r\n    if (anomaly.isAnomalous) {\r\n      await detector.createSecurityAlert(sessionData.userId, anomaly);\r\n      \r\n      // Log para debugging\r\n      console.log(`[ANOMALY DETECTED] ${anomaly.type} - ${anomaly.description}`, {\r\n        userId: sessionData.userId,\r\n        severity: anomaly.severity,\r\n        metadata: anomaly.metadata,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}