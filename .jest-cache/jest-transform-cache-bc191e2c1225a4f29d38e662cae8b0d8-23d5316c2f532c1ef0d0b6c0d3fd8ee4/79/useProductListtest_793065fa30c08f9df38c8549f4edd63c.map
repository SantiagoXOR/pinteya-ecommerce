{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\__tests__\\useProductList.test.ts"],"sourcesContent":["/**\r\n * @jest-environment jsdom\r\n */\r\n\r\nimport { renderHook, waitFor } from '@testing-library/react';\r\nimport { useProductList } from '../useProductList';\r\n\r\n// Mock fetch globally\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('useProductList Hook', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    console.log = jest.fn();\r\n    console.error = jest.fn();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('should initialize with correct default state', () => {\r\n    // Mock successful API response\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({\r\n        success: true,\r\n        data: {\r\n          products: [],\r\n          total: 0,\r\n          pagination: {\r\n            page: 1,\r\n            limit: 25,\r\n            offset: 0,\r\n            totalPages: 0,\r\n            hasMore: false,\r\n            hasPrevious: false\r\n          }\r\n        },\r\n        meta: {\r\n          timestamp: '2025-08-23T00:00:00Z',\r\n          method: 'GET',\r\n          user: 'test-user',\r\n          role: 'admin'\r\n        }\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    // Initial state should have loading true\r\n    expect(result.current.isLoading).toBe(true);\r\n    expect(result.current.products).toEqual([]);\r\n    expect(result.current.error).toBe(null);\r\n  });\r\n\r\n  it('should fetch products successfully', async () => {\r\n    const mockProducts = [\r\n      {\r\n        id: 1,\r\n        name: 'Test Product 1',\r\n        description: 'Test Description 1',\r\n        price: 1000,\r\n        stock: 50,\r\n        category_id: 1,\r\n        images: {\r\n          main: '/test1.jpg',\r\n          gallery: [],\r\n          previews: [],\r\n          thumbnails: []\r\n        },\r\n        created_at: '2025-01-01T00:00:00Z',\r\n        updated_at: '2025-01-01T00:00:00Z',\r\n        category_name: 'Test Category'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Test Product 2',\r\n        description: 'Test Description 2',\r\n        price: 2000,\r\n        stock: 30,\r\n        category_id: 2,\r\n        images: {\r\n          main: '/test2.jpg',\r\n          gallery: [],\r\n          previews: [],\r\n          thumbnails: []\r\n        },\r\n        created_at: '2025-01-01T00:00:00Z',\r\n        updated_at: '2025-01-01T00:00:00Z',\r\n        category_name: 'Test Category 2'\r\n      }\r\n    ];\r\n\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({\r\n        success: true,\r\n        data: {\r\n          products: mockProducts,\r\n          total: 2,\r\n          pagination: {\r\n            page: 1,\r\n            limit: 25,\r\n            offset: 0,\r\n            totalPages: 1,\r\n            hasMore: false,\r\n            hasPrevious: false\r\n          }\r\n        },\r\n        meta: {\r\n          timestamp: '2025-08-23T00:00:00Z',\r\n          method: 'GET',\r\n          user: 'test-user',\r\n          role: 'admin'\r\n        }\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.products).toEqual(mockProducts);\r\n    expect(result.current.error).toBe(null);\r\n    expect(global.fetch).toHaveBeenCalledWith('/api/admin/products-direct?limit=25');\r\n  });\r\n\r\n  it('should handle API errors correctly', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: false,\r\n      status: 500,\r\n      statusText: 'Internal Server Error'\r\n    });\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.products).toEqual([]);\r\n    expect(result.current.error).toBe('Error 500: Internal Server Error');\r\n  });\r\n\r\n  it('should handle network errors correctly', async () => {\r\n    (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.products).toEqual([]);\r\n    expect(result.current.error).toBe('Network error');\r\n  });\r\n\r\n  it('should handle invalid API response structure', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({\r\n        success: false,\r\n        error: 'Invalid request'\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.products).toEqual([]);\r\n    expect(result.current.error).toBe('Estructura de respuesta inválida');\r\n  });\r\n\r\n  it('should handle missing products array in response', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({\r\n        success: true,\r\n        data: {\r\n          total: 0,\r\n          pagination: {\r\n            page: 1,\r\n            limit: 25,\r\n            offset: 0,\r\n            totalPages: 0,\r\n            hasMore: false,\r\n            hasPrevious: false\r\n          }\r\n        }\r\n      })\r\n    });\r\n\r\n    const { result } = renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(result.current.isLoading).toBe(false);\r\n    });\r\n\r\n    expect(result.current.products).toEqual([]);\r\n    expect(result.current.error).toBe('Estructura de respuesta inválida');\r\n  });\r\n\r\n  it('should call fetch with correct URL and parameters', async () => {\r\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n      ok: true,\r\n      json: async () => ({\r\n        success: true,\r\n        data: {\r\n          products: [],\r\n          total: 0,\r\n          pagination: {\r\n            page: 1,\r\n            limit: 25,\r\n            offset: 0,\r\n            totalPages: 0,\r\n            hasMore: false,\r\n            hasPrevious: false\r\n          }\r\n        }\r\n      })\r\n    });\r\n\r\n    renderHook(() => useProductList());\r\n\r\n    await waitFor(() => {\r\n      expect(global.fetch).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    expect(global.fetch).toHaveBeenCalledWith('/api/admin/products-direct?limit=25');\r\n  });\r\n\r\n  it('should export correct TypeScript types', () => {\r\n    // This test ensures the types are properly exported\r\n    const { result } = renderHook(() => useProductList());\r\n    \r\n    // TypeScript compilation will fail if types are incorrect\r\n    expect(typeof result.current.products).toBe('object');\r\n    expect(typeof result.current.isLoading).toBe('boolean');\r\n    expect(result.current.error === null || typeof result.current.error === 'string').toBe(true);\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["global","fetch","jest","fn","describe","beforeEach","clearAllMocks","console","log","error","afterEach","restoreAllMocks","it","mockResolvedValueOnce","ok","json","success","data","products","total","pagination","page","limit","offset","totalPages","hasMore","hasPrevious","meta","timestamp","method","user","role","result","renderHook","useProductList","expect","current","isLoading","toBe","toEqual","mockProducts","id","name","description","price","stock","category_id","images","main","gallery","previews","thumbnails","created_at","updated_at","category_name","waitFor","toHaveBeenCalledWith","status","statusText","mockRejectedValueOnce","Error","toHaveBeenCalledTimes"],"mappings":"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"}