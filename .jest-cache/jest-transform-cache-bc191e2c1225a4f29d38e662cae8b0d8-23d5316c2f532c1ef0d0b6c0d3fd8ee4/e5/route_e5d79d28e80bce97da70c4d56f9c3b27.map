{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\profile\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE PERFIL DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { logProfileActivity, getRequestInfo } from '@/lib/activity/activityLogger';\r\n\r\n// ===================================\r\n// MEJORAS DE SEGURIDAD - ALTA PRIORIDAD\r\n// ===================================\r\nimport {\r\n  withRateLimit,\r\n  RATE_LIMIT_CONFIGS\r\n} from '@/lib/rate-limiting/rate-limiter';\r\nimport {\r\n  API_TIMEOUTS,\r\n  withDatabaseTimeout,\r\n  getEndpointTimeouts\r\n} from '@/lib/config/api-timeouts';\r\nimport { createSecurityLogger } from '@/lib/logging/security-logger';\r\n\r\n// ===================================\r\n// GET - Obtener perfil de usuario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  // Crear logger de seguridad con contexto\r\n  const securityLogger = createSecurityLogger(request);\r\n\r\n  // Aplicar rate limiting para APIs de usuario\r\n  const rateLimitResult = await withRateLimit(\r\n    request,\r\n    RATE_LIMIT_CONFIGS.auth,\r\n    async () => {\r\n      // Log de acceso a la API\r\n      securityLogger.log({\r\n        type: 'api_access',\r\n        endpoint: '/api/user/profile',\r\n        method: 'GET',\r\n        userAgent: request.headers.get('user-agent'),\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      try {\r\n        // Verificar que el cliente administrativo esté disponible\r\n        if (!supabaseAdmin) {\r\n          console.error('Cliente administrativo de Supabase no disponible en GET /api/user/profile');\r\n\r\n          // Log de error de seguridad\r\n          securityLogger.log({\r\n            type: 'service_unavailable',\r\n            service: 'supabase_admin',\r\n            endpoint: '/api/user/profile'\r\n          });\r\n\r\n          return NextResponse.json(\r\n            { error: 'Servicio de base de datos no disponible' },\r\n            { status: 503 }\r\n          );\r\n        }\r\n\r\n        // Autenticación con Clerk\r\n        const session = await auth();\r\n        if (!session?.user) {\r\n          // Log de intento de acceso no autorizado\r\n          securityLogger.log({\r\n            type: 'unauthorized_access',\r\n            endpoint: '/api/user/profile',\r\n            reason: 'no_session'\r\n          });\r\n\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Usuario no autenticado',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 401 });\r\n        }\r\n\r\n        // Buscar usuario en Supabase\r\n        const userId = session.user.id;\r\n        const { data: user, error } = await withDatabaseTimeout(\r\n          supabaseAdmin\r\n            .from('users')\r\n            .select('*')\r\n            .eq('clerk_id', userId)\r\n            .single(),\r\n          API_TIMEOUTS.database\r\n        );\r\n\r\n        if (error && error.code !== 'PGRST116') {\r\n          console.error('Error al obtener usuario:', error);\r\n\r\n          // Log de error de base de datos\r\n          securityLogger.logApiError(\r\n            error.message,\r\n            '/api/user/profile'\r\n          );\r\n\r\n          return NextResponse.json(\r\n            { error: 'Error al obtener perfil de usuario' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        // Si no existe el usuario, crear uno demo\r\n        if (!user) {\r\n      const { data: newUser, error: createError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert([\r\n          {\r\n            clerk_id: userId,\r\n            email: 'usuario@demo.com',\r\n            name: 'Usuario Demo',\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (createError) {\r\n        console.error('Error al crear usuario demo:', createError);\r\n        return NextResponse.json(\r\n          { error: 'Error al crear perfil de usuario' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        user: newUser,\r\n      });\r\n    }\r\n\r\n        // Log de operación exitosa\r\n        securityLogger.log({\r\n          type: 'user_profile_retrieved',\r\n          userId: userId,\r\n          hasUser: !!user\r\n        });\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          user,\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error en GET /api/user/profile:', error);\r\n\r\n        // Log de error de seguridad\r\n        securityLogger.logApiError(\r\n          error instanceof Error ? error.message : 'Unknown error',\r\n          '/api/user/profile'\r\n        );\r\n\r\n        return NextResponse.json(\r\n          { error: 'Error interno del servidor' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  // Manejar rate limit excedido\r\n  if (rateLimitResult instanceof NextResponse) {\r\n    securityLogger.logRateLimitExceeded(\r\n      securityLogger.context,\r\n      { endpoint: '/api/user/profile', method: 'GET' }\r\n    );\r\n    return rateLimitResult;\r\n  }\r\n\r\n  return rateLimitResult;\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar perfil de usuario\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    // Verificar que el cliente administrativo esté disponible\r\n    if (!supabaseAdmin) {\r\n      console.error('Cliente administrativo de Supabase no disponible en PUT /api/user/profile');\r\n      return NextResponse.json(\r\n        { error: 'Servicio de base de datos no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Autenticación con Clerk\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Usuario no autenticado',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 401 });\r\n    }\r\n    const userId = session.user.id;\r\n    const body = await request.json();\r\n\r\n    // Validar datos requeridos\r\n    const { name, email, phone } = body;\r\n    if (!name || !email) {\r\n      return NextResponse.json(\r\n        { error: 'Nombre y email son requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar usuario en Supabase\r\n    const { data: updatedUser, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({\r\n        name,\r\n        email,\r\n        phone: phone || null,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('clerk_id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al actualizar perfil de usuario' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar actividad de actualización de perfil\r\n    const requestInfo = getRequestInfo(request);\r\n    await logProfileActivity(\r\n      updatedUser.id,\r\n      'update_profile',\r\n      {\r\n        fields_updated: Object.keys(body),\r\n        previous_name: updatedUser.name !== name ? 'changed' : 'unchanged',\r\n        previous_email: updatedUser.email !== email ? 'changed' : 'unchanged',\r\n        previous_phone: updatedUser.phone !== phone ? 'changed' : 'unchanged',\r\n      },\r\n      requestInfo\r\n    );\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      user: updatedUser,\r\n      message: 'Perfil actualizado correctamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en PUT /api/user/profile:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["GET","PUT","runtime","request","securityLogger","createSecurityLogger","rateLimitResult","withRateLimit","RATE_LIMIT_CONFIGS","auth","log","type","endpoint","method","userAgent","headers","get","timestamp","Date","toISOString","supabaseAdmin","console","error","service","NextResponse","json","status","session","user","reason","errorResponse","data","success","userId","id","withDatabaseTimeout","from","select","eq","single","API_TIMEOUTS","database","code","logApiError","message","newUser","createError","insert","clerk_id","email","name","hasUser","Error","logRateLimitExceeded","context","body","phone","updatedUser","update","updated_at","requestInfo","getRequestInfo","logProfileActivity","fields_updated","Object","keys","previous_name","previous_email","previous_phone"],"mappings":"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"}