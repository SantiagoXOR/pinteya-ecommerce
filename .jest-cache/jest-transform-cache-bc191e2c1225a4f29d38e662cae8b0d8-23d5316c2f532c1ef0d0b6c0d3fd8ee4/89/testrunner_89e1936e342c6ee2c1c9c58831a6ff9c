6b749a4e613c96ae300667e0e37edbe7
#!/usr/bin/env node
"use strict";

/* istanbul ignore next */
function cov_2f9c2hg43v() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\test-runner.ts";
  var hash = "d26ea20ecd9fdab6c2de112352c249001c07d163";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\test-runner.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "3": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 51
        }
      },
      "4": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 85
        }
      },
      "5": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "6": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "8": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "9": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "10": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "11": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 83
        }
      },
      "12": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "13": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "14": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "15": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 43
        }
      },
      "16": {
        start: {
          line: 57,
          column: 26
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "17": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 46
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "19": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 67
        }
      },
      "20": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 73
        }
      },
      "21": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 67
        }
      },
      "22": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 44
        }
      },
      "23": {
        start: {
          line: 72,
          column: 35
        },
        end: {
          line: 72,
          column: 71
        }
      },
      "24": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 53
        }
      },
      "25": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "26": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 42
        }
      },
      "27": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 66
        }
      },
      "28": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 42
        }
      },
      "29": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 66
        }
      },
      "30": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "31": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 68
        }
      },
      "32": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 41
        }
      },
      "33": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 87
        }
      },
      "34": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 59
        }
      },
      "35": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 46
        }
      },
      "36": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 27
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 84
        }
      },
      "38": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 41
        }
      },
      "39": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 87
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 24
        }
      },
      "41": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 36
        }
      },
      "42": {
        start: {
          line: 103,
          column: 22
        },
        end: {
          line: 103,
          column: 27
        }
      },
      "43": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "44": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "45": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 106,
          column: 33
        }
      },
      "46": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "47": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 109,
          column: 78
        }
      },
      "48": {
        start: {
          line: 111,
          column: 27
        },
        end: {
          line: 111,
          column: 55
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 37
        }
      },
      "50": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 43
        }
      },
      "51": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 51
        }
      },
      "52": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 28
        }
      },
      "53": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 69
        }
      },
      "54": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 67
        }
      },
      "55": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 34
        }
      },
      "56": {
        start: {
          line: 121,
          column: 25
        },
        end: {
          line: 121,
          column: 64
        }
      },
      "57": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "58": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "59": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "60": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "61": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 52
        }
      },
      "62": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 147,
          column: 19
        }
      },
      "63": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 60
        }
      },
      "64": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "65": {
        start: {
          line: 172,
          column: 58
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "66": {
        start: {
          line: 191,
          column: 39
        },
        end: {
          line: 191,
          column: 163
        }
      },
      "67": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 112
        }
      },
      "68": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 84
        }
      },
      "69": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 57
        }
      },
      "70": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 43
        }
      },
      "71": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 49
        }
      },
      "72": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 36
        }
      },
      "73": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 64
        }
      },
      "74": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 64
        }
      },
      "75": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 64
        }
      },
      "76": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 67
        }
      },
      "77": {
        start: {
          line: 206,
          column: 28
        },
        end: {
          line: 206,
          column: 103
        }
      },
      "78": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 68
        }
      },
      "79": {
        start: {
          line: 208,
          column: 32
        },
        end: {
          line: 208,
          column: 68
        }
      },
      "80": {
        start: {
          line: 209,
          column: 32
        },
        end: {
          line: 209,
          column: 75
        }
      },
      "81": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 83
        }
      },
      "82": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 48
        }
      },
      "83": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "84": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 58
        }
      },
      "85": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 36
        }
      },
      "86": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "87": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 75
        }
      },
      "88": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 111
        }
      },
      "89": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 225,
          column: 45
        }
      },
      "90": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 42
        }
      },
      "91": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 66
        }
      },
      "92": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "93": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 71
        }
      },
      "94": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 22
        }
      },
      "95": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 67
        }
      },
      "96": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 72
        }
      },
      "97": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 32
        }
      },
      "98": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 309,
          column: 1
        }
      },
      "99": {
        start: {
          line: 247,
          column: 17
        },
        end: {
          line: 247,
          column: 38
        }
      },
      "100": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 27
        }
      },
      "101": {
        start: {
          line: 249,
          column: 19
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "102": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 308,
          column: 5
        }
      },
      "103": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 60
        }
      },
      "104": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 263,
          column: 15
        }
      },
      "105": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 62
        }
      },
      "106": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 67
        }
      },
      "107": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 32
        }
      },
      "108": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 18
        }
      },
      "109": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 274,
          column: 15
        }
      },
      "110": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 60
        }
      },
      "111": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 32
        }
      },
      "112": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 77
        }
      },
      "113": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 32
        }
      },
      "114": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 18
        }
      },
      "115": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 302,
          column: 3
        }
      },
      "116": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 18
        }
      },
      "117": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 63
        }
      },
      "118": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 90
        }
      },
      "119": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 36,
            column: 7
          }
        },
        loc: {
          start: {
            line: 36,
            column: 26
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 38
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 6
          },
          end: {
            line: 136,
            column: 7
          }
        },
        loc: {
          start: {
            line: 136,
            column: 32
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 154,
            column: 6
          },
          end: {
            line: 154,
            column: 7
          }
        },
        loc: {
          start: {
            line: 154,
            column: 48
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 154
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 172,
            column: 49
          },
          end: {
            line: 172,
            column: 50
          }
        },
        loc: {
          start: {
            line: 172,
            column: 58
          },
          end: {
            line: 182,
            column: 17
          }
        },
        line: 172
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 198,
            column: 6
          },
          end: {
            line: 198,
            column: 7
          }
        },
        loc: {
          start: {
            line: 198,
            column: 35
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 198
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 212,
            column: 36
          },
          end: {
            line: 212,
            column: 37
          }
        },
        loc: {
          start: {
            line: 212,
            column: 57
          },
          end: {
            line: 214,
            column: 9
          }
        },
        line: 212
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 224,
            column: 7
          }
        },
        loc: {
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 224
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 230,
            column: 6
          },
          end: {
            line: 230,
            column: 7
          }
        },
        loc: {
          start: {
            line: 230,
            column: 58
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 230
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 258,
            column: 50
          },
          end: {
            line: 258,
            column: 51
          }
        },
        loc: {
          start: {
            line: 258,
            column: 61
          },
          end: {
            line: 260,
            column: 13
          }
        },
        line: 258
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 260,
            column: 21
          },
          end: {
            line: 260,
            column: 22
          }
        },
        loc: {
          start: {
            line: 260,
            column: 30
          },
          end: {
            line: 263,
            column: 13
          }
        },
        line: 260
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 268,
            column: 61
          },
          end: {
            line: 268,
            column: 62
          }
        },
        loc: {
          start: {
            line: 268,
            column: 65
          },
          end: {
            line: 271,
            column: 13
          }
        },
        line: 268
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 271,
            column: 21
          },
          end: {
            line: 271,
            column: 22
          }
        },
        loc: {
          start: {
            line: 271,
            column: 30
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 271
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 21,
            column: 27
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        }, {
          start: {
            line: 77,
            column: 23
          },
          end: {
            line: 80,
            column: 17
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 83,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 83,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 43
          },
          end: {
            line: 117,
            column: 54
          }
        }, {
          start: {
            line: 117,
            column: 57
          },
          end: {
            line: 117,
            column: 68
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 161,
            column: 29
          },
          end: {
            line: 161,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 54
          },
          end: {
            line: 161,
            column: 100
          }
        }, {
          start: {
            line: 161,
            column: 103
          },
          end: {
            line: 161,
            column: 104
          }
        }],
        line: 161
      },
      "7": {
        loc: {
          start: {
            line: 187,
            column: 29
          },
          end: {
            line: 187,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 29
          },
          end: {
            line: 187,
            column: 49
          }
        }, {
          start: {
            line: 187,
            column: 53
          },
          end: {
            line: 187,
            column: 66
          }
        }],
        line: 187
      },
      "8": {
        loc: {
          start: {
            line: 206,
            column: 28
          },
          end: {
            line: 206,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 53
          },
          end: {
            line: 206,
            column: 99
          }
        }, {
          start: {
            line: 206,
            column: 102
          },
          end: {
            line: 206,
            column: 103
          }
        }],
        line: 206
      },
      "9": {
        loc: {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: 218,
            column: 15
          },
          end: {
            line: 220,
            column: 9
          }
        }],
        line: 216
      },
      "10": {
        loc: {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 230,
            column: 54
          },
          end: {
            line: 230,
            column: 56
          }
        }],
        line: 230
      },
      "11": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 233,
            column: 23
          }
        }, {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 28
          }
        }, {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 22
          }
        }, {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 241,
            column: 32
          }
        }],
        line: 232
      },
      "12": {
        loc: {
          start: {
            line: 246,
            column: 0
          },
          end: {
            line: 309,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 0
          },
          end: {
            line: 309,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "13": {
        loc: {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 250,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 250,
            column: 42
          }
        }, {
          start: {
            line: 250,
            column: 46
          },
          end: {
            line: 250,
            column: 69
          }
        }],
        line: 250
      },
      "14": {
        loc: {
          start: {
            line: 252,
            column: 21
          },
          end: {
            line: 252,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 21
          },
          end: {
            line: 252,
            column: 45
          }
        }, {
          start: {
            line: 252,
            column: 49
          },
          end: {
            line: 252,
            column: 59
          }
        }],
        line: 252
      },
      "15": {
        loc: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 255,
            column: 19
          }
        }, {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 264,
            column: 18
          }
        }, {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 265,
            column: 19
          }
        }, {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 22
          }
        }, {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 275,
            column: 18
          }
        }, {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 276,
            column: 20
          }
        }, {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 277,
            column: 22
          }
        }, {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 303,
            column: 18
          }
        }, {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 307,
            column: 28
          }
        }],
        line: 254
      },
      "16": {
        loc: {
          start: {
            line: 259,
            column: 29
          },
          end: {
            line: 259,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 55
          },
          end: {
            line: 259,
            column: 56
          }
        }, {
          start: {
            line: 259,
            column: 59
          },
          end: {
            line: 259,
            column: 60
          }
        }],
        line: 259
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\test-runner.ts"],
      sourcesContent: ["#!/usr/bin/env node\r\n\r\nimport { SampleE2ETest } from './sample-e2e-test';\r\nimport { AutomatedTestFramework } from './automated-test-framework';\r\nimport { ScreenshotManager } from './screenshot-manager';\r\nimport { ReportGenerator } from './report-generator';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\n/**\r\n * Runner principal para ejecutar tests automatizados\r\n */\r\nexport class TestRunner {\r\n  private config: TestRunnerConfig;\r\n\r\n  constructor(config: Partial<TestRunnerConfig> = {}) {\r\n    this.config = {\r\n      baseUrl: 'http://localhost:3000',\r\n      outputDir: path.join(process.cwd(), 'test-reports'),\r\n      screenshotsDir: path.join(process.cwd(), 'test-screenshots'),\r\n      browserType: 'chromium',\r\n      headless: false,\r\n      timeout: 30000,\r\n      retries: 1,\r\n      parallel: false,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta todos los tests disponibles\r\n   */\r\n  async runAllTests(): Promise<TestRunResults> {\r\n    console.log('\uD83D\uDE80 Iniciando ejecuci\xF3n de tests automatizados');\r\n    console.log(`\uD83D\uDCCD URL Base: ${this.config.baseUrl}`);\r\n    console.log(`\uD83D\uDCC1 Directorio de reportes: ${this.config.outputDir}`);\r\n    console.log(`\uD83D\uDCF8 Directorio de screenshots: ${this.config.screenshotsDir}`);\r\n    console.log('\\n' + '='.repeat(60));\r\n\r\n    const results: TestRunResults = {\r\n      totalTests: 0,\r\n      passedTests: 0,\r\n      failedTests: 0,\r\n      skippedTests: 0,\r\n      startTime: new Date(),\r\n      endTime: new Date(),\r\n      duration: 0,\r\n      testResults: [],\r\n      reportPaths: []\r\n    };\r\n\r\n    try {\r\n      // Crear directorios necesarios\r\n      await this.ensureDirectories();\r\n\r\n      // Lista de tests a ejecutar\r\n      const tests = [\r\n        {\r\n          name: 'E2E Purchase Flow Test',\r\n          description: 'Test completo del flujo de compra',\r\n          testClass: SampleE2ETest,\r\n          priority: 'high'\r\n        }\r\n        // Aqu\xED se pueden agregar m\xE1s tests en el futuro\r\n      ];\r\n\r\n      results.totalTests = tests.length;\r\n\r\n      // Ejecutar cada test\r\n      for (const testConfig of tests) {\r\n        console.log(`\\n\uD83E\uDDEA Ejecutando: ${testConfig.name}`);\r\n        console.log(`\uD83D\uDCDD Descripci\xF3n: ${testConfig.description}`);\r\n        console.log(`\u26A1 Prioridad: ${testConfig.priority}`);\r\n        console.log('-'.repeat(40));\r\n\r\n        const testResult = await this.runSingleTest(testConfig);\r\n        results.testResults.push(testResult);\r\n\r\n        if (testResult.success) {\r\n          results.passedTests++;\r\n          console.log(`\u2705 ${testConfig.name} - EXITOSO`);\r\n        } else {\r\n          results.failedTests++;\r\n          console.log(`\u274C ${testConfig.name} - FALLIDO`);\r\n        }\r\n\r\n        if (testResult.reportPath) {\r\n          results.reportPaths.push(testResult.reportPath);\r\n        }\r\n      }\r\n\r\n      results.endTime = new Date();\r\n      results.duration = results.endTime.getTime() - results.startTime.getTime();\r\n\r\n      // Generar reporte consolidado\r\n      await this.generateConsolidatedReport(results);\r\n\r\n      // Mostrar resumen final\r\n      this.displayFinalSummary(results);\r\n\r\n      return results;\r\n\r\n    } catch (error) {\r\n      console.error('\uD83D\uDCA5 Error cr\xEDtico durante la ejecuci\xF3n de tests:', error);\r\n      results.endTime = new Date();\r\n      results.duration = results.endTime.getTime() - results.startTime.getTime();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test individual\r\n   */\r\n  private async runSingleTest(testConfig: any): Promise<TestResult> {\r\n    const startTime = new Date();\r\n    let success = false;\r\n    let error: string | null = null;\r\n    let reportPath: string | null = null;\r\n    let htmlReportPath: string | null = null;\r\n\r\n    try {\r\n      // Crear instancia del test\r\n      const testInstance = new testConfig.testClass(this.config.baseUrl);\r\n      \r\n      // Ejecutar el test\r\n      const result = await testInstance.runTest();\r\n      \r\n      success = result.success;\r\n      reportPath = result.reportPath;\r\n      htmlReportPath = result.htmlReportPath;\r\n\r\n    } catch (err) {\r\n      success = false;\r\n      error = err instanceof Error ? err.message : String(err);\r\n      console.error(`\u274C Error en ${testConfig.name}:`, error);\r\n    }\r\n\r\n    const endTime = new Date();\r\n    const duration = endTime.getTime() - startTime.getTime();\r\n\r\n    return {\r\n      name: testConfig.name,\r\n      description: testConfig.description,\r\n      success,\r\n      error,\r\n      startTime,\r\n      endTime,\r\n      duration,\r\n      reportPath,\r\n      htmlReportPath\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Asegura que los directorios necesarios existan\r\n   */\r\n  private async ensureDirectories(): Promise<void> {\r\n    const directories = [\r\n      this.config.outputDir,\r\n      this.config.screenshotsDir\r\n    ];\r\n\r\n    for (const dir of directories) {\r\n      try {\r\n        await fs.access(dir);\r\n      } catch {\r\n        await fs.mkdir(dir, { recursive: true });\r\n        console.log(`\uD83D\uDCC1 Directorio creado: ${dir}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera un reporte consolidado de todos los tests\r\n   */\r\n  private async generateConsolidatedReport(results: TestRunResults): Promise<void> {\r\n    const reportData = {\r\n      summary: {\r\n        totalTests: results.totalTests,\r\n        passedTests: results.passedTests,\r\n        failedTests: results.failedTests,\r\n        skippedTests: results.skippedTests,\r\n        successRate: results.totalTests > 0 ? (results.passedTests / results.totalTests) * 100 : 0,\r\n        startTime: results.startTime.toISOString(),\r\n        endTime: results.endTime.toISOString(),\r\n        duration: results.duration\r\n      },\r\n      configuration: {\r\n        baseUrl: this.config.baseUrl,\r\n        browserType: this.config.browserType,\r\n        headless: this.config.headless,\r\n        timeout: this.config.timeout\r\n      },\r\n      testResults: results.testResults.map(test => ({\r\n        name: test.name,\r\n        description: test.description,\r\n        success: test.success,\r\n        error: test.error,\r\n        duration: test.duration,\r\n        startTime: test.startTime.toISOString(),\r\n        endTime: test.endTime.toISOString(),\r\n        reportPath: test.reportPath,\r\n        htmlReportPath: test.htmlReportPath\r\n      })),\r\n      metadata: {\r\n        generatedAt: new Date().toISOString(),\r\n        framework: 'AutomatedTestFramework',\r\n        version: '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development'\r\n      }\r\n    };\r\n\r\n    // Guardar reporte JSON consolidado\r\n    const consolidatedReportPath = path.join(\r\n      this.config.outputDir,\r\n      `consolidated-test-report-${new Date().toISOString().replace(/[:.]/g, '-')}.json`\r\n    );\r\n\r\n    await fs.writeFile(\r\n      consolidatedReportPath,\r\n      JSON.stringify(reportData, null, 2),\r\n      'utf-8'\r\n    );\r\n\r\n    console.log(`\\n\uD83D\uDCCA Reporte consolidado generado: ${consolidatedReportPath}`);\r\n    results.reportPaths.push(consolidatedReportPath);\r\n  }\r\n\r\n  /**\r\n   * Muestra el resumen final de la ejecuci\xF3n\r\n   */\r\n  private displayFinalSummary(results: TestRunResults): void {\r\n    console.log('\\n' + '='.repeat(60));\r\n    console.log('\uD83D\uDCCA RESUMEN FINAL DE TESTS');\r\n    console.log('='.repeat(60));\r\n    console.log(`\uD83D\uDCC8 Total de tests: ${results.totalTests}`);\r\n    console.log(`\u2705 Tests exitosos: ${results.passedTests}`);\r\n    console.log(`\u274C Tests fallidos: ${results.failedTests}`);\r\n    console.log(`\u23ED\uFE0F  Tests omitidos: ${results.skippedTests}`);\r\n    \r\n    const successRate = results.totalTests > 0 ? (results.passedTests / results.totalTests) * 100 : 0;\r\n    console.log(`\uD83D\uDCCA Tasa de \xE9xito: ${successRate.toFixed(1)}%`);\r\n    \r\n    const durationMinutes = Math.floor(results.duration / 60000);\r\n    const durationSeconds = Math.floor((results.duration % 60000) / 1000);\r\n    console.log(`\u23F1\uFE0F  Duraci\xF3n total: ${durationMinutes}m ${durationSeconds}s`);\r\n    \r\n    console.log('\\n\uD83D\uDCC1 Reportes generados:');\r\n    results.reportPaths.forEach((reportPath, index) => {\r\n      console.log(`   ${index + 1}. ${reportPath}`);\r\n    });\r\n    \r\n    console.log('='.repeat(60));\r\n    \r\n    if (results.failedTests === 0) {\r\n      console.log('\uD83C\uDF89 \xA1Todos los tests se ejecutaron exitosamente!');\r\n    } else {\r\n      console.log(`\u26A0\uFE0F  ${results.failedTests} test(s) fallaron. Revisa los reportes para m\xE1s detalles.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta tests con configuraci\xF3n personalizada\r\n   */\r\n  static async runWithConfig(config: Partial<TestRunnerConfig>): Promise<TestRunResults> {\r\n    const runner = new TestRunner(config);\r\n    return await runner.runAllTests();\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un test espec\xEDfico por nombre\r\n   */\r\n  static async runSpecificTest(testName: string, config: Partial<TestRunnerConfig> = {}): Promise<void> {\r\n    console.log(`\uD83C\uDFAF Ejecutando test espec\xEDfico: ${testName}`);\r\n    \r\n    switch (testName.toLowerCase()) {\r\n      case 'e2e':\r\n      case 'purchase':\r\n      case 'sample':\r\n        await SampleE2ETest.run(config.baseUrl);\r\n        break;\r\n      default:\r\n        console.error(`\u274C Test no encontrado: ${testName}`);\r\n        console.log('Tests disponibles: e2e, purchase, sample');\r\n        process.exit(1);\r\n    }\r\n  }\r\n}\r\n\r\n// Interfaces\r\ninterface TestRunnerConfig {\r\n  baseUrl: string;\r\n  outputDir: string;\r\n  screenshotsDir: string;\r\n  browserType: 'chromium' | 'firefox' | 'webkit';\r\n  headless: boolean;\r\n  timeout: number;\r\n  retries: number;\r\n  parallel: boolean;\r\n}\r\n\r\ninterface TestResult {\r\n  name: string;\r\n  description: string;\r\n  success: boolean;\r\n  error: string | null;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  duration: number;\r\n  reportPath: string | null;\r\n  htmlReportPath?: string | null;\r\n}\r\n\r\ninterface TestRunResults {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  skippedTests: number;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  duration: number;\r\n  testResults: TestResult[];\r\n  reportPaths: string[];\r\n}\r\n\r\n// CLI Support\r\nif (require.main === module) {\r\n  const args = process.argv.slice(2);\r\n  const command = args[0];\r\n  \r\n  const config: Partial<TestRunnerConfig> = {\r\n    baseUrl: process.env.TEST_BASE_URL || 'http://localhost:3000',\r\n    headless: process.env.TEST_HEADLESS === 'true',\r\n    browserType: (process.env.TEST_BROWSER as any) || 'chromium'\r\n  };\r\n\r\n  switch (command) {\r\n    case 'all':\r\n    case undefined:\r\n      console.log('\uD83D\uDE80 Ejecutando todos los tests...');\r\n      TestRunner.runWithConfig(config)\r\n        .then(results => {\r\n          process.exit(results.failedTests > 0 ? 1 : 0);\r\n        })\r\n        .catch(error => {\r\n          console.error('\uD83D\uDCA5 Error ejecutando tests:', error);\r\n          process.exit(1);\r\n        });\r\n      break;\r\n      \r\n    case 'e2e':\r\n    case 'sample':\r\n    case 'purchase':\r\n      TestRunner.runSpecificTest(command, config)\r\n        .then(() => {\r\n          console.log('\u2705 Test espec\xEDfico completado');\r\n          process.exit(0);\r\n        })\r\n        .catch(error => {\r\n          console.error('\uD83D\uDCA5 Error ejecutando test espec\xEDfico:', error);\r\n          process.exit(1);\r\n        });\r\n      break;\r\n      \r\n    case 'help':\r\n    case '--help':\r\n    case '-h':\r\n      console.log(`\r\n\uD83E\uDDEA Test Runner - Automated Testing Framework\r\n\r\nUso:\r\n  npm run test:e2e [comando] [opciones]\r\n\r\nComandos:\r\n  all, (vac\xEDo)    Ejecutar todos los tests\r\n  e2e             Ejecutar test E2E espec\xEDfico\r\n  sample          Ejecutar test de ejemplo\r\n  purchase        Ejecutar test de flujo de compra\r\n  help            Mostrar esta ayuda\r\n\r\nVariables de entorno:\r\n  TEST_BASE_URL   URL base para los tests (default: http://localhost:3000)\r\n  TEST_HEADLESS   Ejecutar en modo headless (default: false)\r\n  TEST_BROWSER    Navegador a usar: chromium, firefox, webkit (default: chromium)\r\n\r\nEjemplos:\r\n  npm run test:e2e\r\n  npm run test:e2e e2e\r\n  TEST_HEADLESS=true npm run test:e2e all\r\n  TEST_BASE_URL=http://localhost:4000 npm run test:e2e sample\r\n`);\r\n      break;\r\n      \r\n    default:\r\n      console.error(`\u274C Comando desconocido: ${command}`);\r\n      console.log('Usa \"npm run test:e2e help\" para ver los comandos disponibles.');\r\n      process.exit(1);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["TestRunner", "config", "baseUrl", "outputDir", "path", "join", "process", "cwd", "screenshotsDir", "browserType", "headless", "timeout", "retries", "parallel", "runAllTests", "console", "log", "repeat", "results", "totalTests", "passedTests", "failedTests", "skippedTests", "startTime", "Date", "endTime", "duration", "testResults", "reportPaths", "ensureDirectories", "tests", "name", "description", "testClass", "SampleE2ETest", "priority", "length", "testConfig", "testResult", "runSingleTest", "push", "success", "reportPath", "getTime", "generateConsolidatedReport", "displayFinalSummary", "error", "htmlReportPath", "testInstance", "result", "runTest", "err", "Error", "message", "String", "directories", "dir", "fs", "access", "mkdir", "recursive", "reportData", "summary", "successRate", "toISOString", "configuration", "map", "test", "metadata", "generatedAt", "framework", "version", "environment", "env", "NODE_ENV", "consolidatedReportPath", "replace", "writeFile", "JSON", "stringify", "toFixed", "durationMinutes", "Math", "floor", "durationSeconds", "forEach", "index", "runWithConfig", "runner", "runSpecificTest", "testName", "toLowerCase", "run", "exit", "require", "main", "module", "args", "argv", "slice", "command", "TEST_BASE_URL", "TEST_HEADLESS", "TEST_BROWSER", "undefined", "then", "catch"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d26ea20ecd9fdab6c2de112352c249001c07d163"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2f9c2hg43v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2f9c2hg43v();
cov_2f9c2hg43v().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2f9c2hg43v().s[1]++;
Object.defineProperty(exports, "TestRunner", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[0]++;
    cov_2f9c2hg43v().s[2]++;
    return TestRunner;
  }
});
const _samplee2etest =
/* istanbul ignore next */
(cov_2f9c2hg43v().s[3]++, require("./sample-e2e-test"));
const _promises =
/* istanbul ignore next */
(/*#__PURE__*/cov_2f9c2hg43v().s[4]++, _interop_require_default(require("node:fs/promises")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_2f9c2hg43v().s[5]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2f9c2hg43v().f[1]++;
  cov_2f9c2hg43v().s[6]++;
  return /* istanbul ignore next */(cov_2f9c2hg43v().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2f9c2hg43v().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2f9c2hg43v().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2f9c2hg43v().b[0][1]++, {
    default: obj
  });
}
class TestRunner {
  constructor(config =
  /* istanbul ignore next */
  (cov_2f9c2hg43v().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[2]++;
    cov_2f9c2hg43v().s[7]++;
    this.config = {
      baseUrl: 'http://localhost:3000',
      outputDir: _path.default.join(process.cwd(), 'test-reports'),
      screenshotsDir: _path.default.join(process.cwd(), 'test-screenshots'),
      browserType: 'chromium',
      headless: false,
      timeout: 30000,
      retries: 1,
      parallel: false,
      ...config
    };
  }
  /**
  * Ejecuta todos los tests disponibles
  */
  async runAllTests() {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[3]++;
    cov_2f9c2hg43v().s[8]++;
    console.log('🚀 Iniciando ejecución de tests automatizados');
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[9]++;
    console.log(`📍 URL Base: ${this.config.baseUrl}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[10]++;
    console.log(`📁 Directorio de reportes: ${this.config.outputDir}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[11]++;
    console.log(`📸 Directorio de screenshots: ${this.config.screenshotsDir}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[12]++;
    console.log('\n' + '='.repeat(60));
    const results =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[13]++, {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      skippedTests: 0,
      startTime: new Date(),
      endTime: new Date(),
      duration: 0,
      testResults: [],
      reportPaths: []
    });
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[14]++;
    try {
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[15]++;
      // Crear directorios necesarios
      await this.ensureDirectories();
      // Lista de tests a ejecutar
      const tests =
      /* istanbul ignore next */
      (cov_2f9c2hg43v().s[16]++, [{
        name: 'E2E Purchase Flow Test',
        description: 'Test completo del flujo de compra',
        testClass: _samplee2etest.SampleE2ETest,
        priority: 'high'
      }]);
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[17]++;
      results.totalTests = tests.length;
      // Ejecutar cada test
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[18]++;
      for (const testConfig of tests) {
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[19]++;
        console.log(`\n🧪 Ejecutando: ${testConfig.name}`);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[20]++;
        console.log(`📝 Descripción: ${testConfig.description}`);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[21]++;
        console.log(`⚡ Prioridad: ${testConfig.priority}`);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[22]++;
        console.log('-'.repeat(40));
        const testResult =
        /* istanbul ignore next */
        (cov_2f9c2hg43v().s[23]++, await this.runSingleTest(testConfig));
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[24]++;
        results.testResults.push(testResult);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[25]++;
        if (testResult.success) {
          /* istanbul ignore next */
          cov_2f9c2hg43v().b[3][0]++;
          cov_2f9c2hg43v().s[26]++;
          results.passedTests++;
          /* istanbul ignore next */
          cov_2f9c2hg43v().s[27]++;
          console.log(`✅ ${testConfig.name} - EXITOSO`);
        } else {
          /* istanbul ignore next */
          cov_2f9c2hg43v().b[3][1]++;
          cov_2f9c2hg43v().s[28]++;
          results.failedTests++;
          /* istanbul ignore next */
          cov_2f9c2hg43v().s[29]++;
          console.log(`❌ ${testConfig.name} - FALLIDO`);
        }
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[30]++;
        if (testResult.reportPath) {
          /* istanbul ignore next */
          cov_2f9c2hg43v().b[4][0]++;
          cov_2f9c2hg43v().s[31]++;
          results.reportPaths.push(testResult.reportPath);
        } else
        /* istanbul ignore next */
        {
          cov_2f9c2hg43v().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[32]++;
      results.endTime = new Date();
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[33]++;
      results.duration = results.endTime.getTime() - results.startTime.getTime();
      // Generar reporte consolidado
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[34]++;
      await this.generateConsolidatedReport(results);
      // Mostrar resumen final
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[35]++;
      this.displayFinalSummary(results);
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[36]++;
      return results;
    } catch (error) {
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[37]++;
      console.error('💥 Error crítico durante la ejecución de tests:', error);
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[38]++;
      results.endTime = new Date();
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[39]++;
      results.duration = results.endTime.getTime() - results.startTime.getTime();
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[40]++;
      throw error;
    }
  }
  /**
  * Ejecuta un test individual
  */
  async runSingleTest(testConfig) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[41]++, new Date());
    let success =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[42]++, false);
    let error =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[43]++, null);
    let reportPath =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[44]++, null);
    let htmlReportPath =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[45]++, null);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[46]++;
    try {
      // Crear instancia del test
      const testInstance =
      /* istanbul ignore next */
      (cov_2f9c2hg43v().s[47]++, new testConfig.testClass(this.config.baseUrl));
      // Ejecutar el test
      const result =
      /* istanbul ignore next */
      (cov_2f9c2hg43v().s[48]++, await testInstance.runTest());
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[49]++;
      success = result.success;
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[50]++;
      reportPath = result.reportPath;
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[51]++;
      htmlReportPath = result.htmlReportPath;
    } catch (err) {
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[52]++;
      success = false;
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[53]++;
      error = err instanceof Error ?
      /* istanbul ignore next */
      (cov_2f9c2hg43v().b[5][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2f9c2hg43v().b[5][1]++, String(err));
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[54]++;
      console.error(`❌ Error en ${testConfig.name}:`, error);
    }
    const endTime =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[55]++, new Date());
    const duration =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[56]++, endTime.getTime() - startTime.getTime());
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[57]++;
    return {
      name: testConfig.name,
      description: testConfig.description,
      success,
      error,
      startTime,
      endTime,
      duration,
      reportPath,
      htmlReportPath
    };
  }
  /**
  * Asegura que los directorios necesarios existan
  */
  async ensureDirectories() {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[5]++;
    const directories =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[58]++, [this.config.outputDir, this.config.screenshotsDir]);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[59]++;
    for (const dir of directories) {
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[60]++;
      try {
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[61]++;
        await _promises.default.access(dir);
      } catch {
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[62]++;
        await _promises.default.mkdir(dir, {
          recursive: true
        });
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[63]++;
        console.log(`📁 Directorio creado: ${dir}`);
      }
    }
  }
  /**
  * Genera un reporte consolidado de todos los tests
  */
  async generateConsolidatedReport(results) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[6]++;
    const reportData =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[64]++, {
      summary: {
        totalTests: results.totalTests,
        passedTests: results.passedTests,
        failedTests: results.failedTests,
        skippedTests: results.skippedTests,
        successRate: results.totalTests > 0 ?
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[6][0]++, results.passedTests / results.totalTests * 100) :
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[6][1]++, 0),
        startTime: results.startTime.toISOString(),
        endTime: results.endTime.toISOString(),
        duration: results.duration
      },
      configuration: {
        baseUrl: this.config.baseUrl,
        browserType: this.config.browserType,
        headless: this.config.headless,
        timeout: this.config.timeout
      },
      testResults: results.testResults.map(test => {
        /* istanbul ignore next */
        cov_2f9c2hg43v().f[7]++;
        cov_2f9c2hg43v().s[65]++;
        return {
          name: test.name,
          description: test.description,
          success: test.success,
          error: test.error,
          duration: test.duration,
          startTime: test.startTime.toISOString(),
          endTime: test.endTime.toISOString(),
          reportPath: test.reportPath,
          htmlReportPath: test.htmlReportPath
        };
      }),
      metadata: {
        generatedAt: new Date().toISOString(),
        framework: 'AutomatedTestFramework',
        version: '1.0.0',
        environment:
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[7][0]++, process.env.NODE_ENV) ||
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[7][1]++, 'development')
      }
    });
    // Guardar reporte JSON consolidado
    const consolidatedReportPath =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[66]++, _path.default.join(this.config.outputDir, `consolidated-test-report-${new Date().toISOString().replace(/[:.]/g, '-')}.json`));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[67]++;
    await _promises.default.writeFile(consolidatedReportPath, JSON.stringify(reportData, null, 2), 'utf-8');
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[68]++;
    console.log(`\n📊 Reporte consolidado generado: ${consolidatedReportPath}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[69]++;
    results.reportPaths.push(consolidatedReportPath);
  }
  /**
  * Muestra el resumen final de la ejecución
  */
  displayFinalSummary(results) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[8]++;
    cov_2f9c2hg43v().s[70]++;
    console.log('\n' + '='.repeat(60));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[71]++;
    console.log('📊 RESUMEN FINAL DE TESTS');
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[72]++;
    console.log('='.repeat(60));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[73]++;
    console.log(`📈 Total de tests: ${results.totalTests}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[74]++;
    console.log(`✅ Tests exitosos: ${results.passedTests}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[75]++;
    console.log(`❌ Tests fallidos: ${results.failedTests}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[76]++;
    console.log(`⏭️  Tests omitidos: ${results.skippedTests}`);
    const successRate =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[77]++, results.totalTests > 0 ?
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[8][0]++, results.passedTests / results.totalTests * 100) :
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[8][1]++, 0));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[78]++;
    console.log(`📊 Tasa de éxito: ${successRate.toFixed(1)}%`);
    const durationMinutes =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[79]++, Math.floor(results.duration / 60000));
    const durationSeconds =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[80]++, Math.floor(results.duration % 60000 / 1000));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[81]++;
    console.log(`⏱️  Duración total: ${durationMinutes}m ${durationSeconds}s`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[82]++;
    console.log('\n📁 Reportes generados:');
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[83]++;
    results.reportPaths.forEach((reportPath, index) => {
      /* istanbul ignore next */
      cov_2f9c2hg43v().f[9]++;
      cov_2f9c2hg43v().s[84]++;
      console.log(`   ${index + 1}. ${reportPath}`);
    });
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[85]++;
    console.log('='.repeat(60));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[86]++;
    if (results.failedTests === 0) {
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[9][0]++;
      cov_2f9c2hg43v().s[87]++;
      console.log('🎉 ¡Todos los tests se ejecutaron exitosamente!');
    } else {
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[9][1]++;
      cov_2f9c2hg43v().s[88]++;
      console.log(`⚠️  ${results.failedTests} test(s) fallaron. Revisa los reportes para más detalles.`);
    }
  }
  /**
  * Ejecuta tests con configuración personalizada
  */
  static async runWithConfig(config) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[10]++;
    const runner =
    /* istanbul ignore next */
    (cov_2f9c2hg43v().s[89]++, new TestRunner(config));
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[90]++;
    return await runner.runAllTests();
  }
  /**
  * Ejecuta un test específico por nombre
  */
  static async runSpecificTest(testName, config =
  /* istanbul ignore next */
  (cov_2f9c2hg43v().b[10][0]++, {})) {
    /* istanbul ignore next */
    cov_2f9c2hg43v().f[11]++;
    cov_2f9c2hg43v().s[91]++;
    console.log(`🎯 Ejecutando test específico: ${testName}`);
    /* istanbul ignore next */
    cov_2f9c2hg43v().s[92]++;
    switch (testName.toLowerCase()) {
      case 'e2e':
        /* istanbul ignore next */
        cov_2f9c2hg43v().b[11][0]++;
      case 'purchase':
        /* istanbul ignore next */
        cov_2f9c2hg43v().b[11][1]++;
      case 'sample':
        /* istanbul ignore next */
        cov_2f9c2hg43v().b[11][2]++;
        cov_2f9c2hg43v().s[93]++;
        await _samplee2etest.SampleE2ETest.run(config.baseUrl);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[94]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2f9c2hg43v().b[11][3]++;
        cov_2f9c2hg43v().s[95]++;
        console.error(`❌ Test no encontrado: ${testName}`);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[96]++;
        console.log('Tests disponibles: e2e, purchase, sample');
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[97]++;
        process.exit(1);
    }
  }
}
// CLI Support
/* istanbul ignore next */
cov_2f9c2hg43v().s[98]++;
if (require.main === module) {
  /* istanbul ignore next */
  cov_2f9c2hg43v().b[12][0]++;
  const args =
  /* istanbul ignore next */
  (cov_2f9c2hg43v().s[99]++, process.argv.slice(2));
  const command =
  /* istanbul ignore next */
  (cov_2f9c2hg43v().s[100]++, args[0]);
  const config =
  /* istanbul ignore next */
  (cov_2f9c2hg43v().s[101]++, {
    baseUrl:
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[13][0]++, process.env.TEST_BASE_URL) ||
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[13][1]++, 'http://localhost:3000'),
    headless: process.env.TEST_HEADLESS === 'true',
    browserType:
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[14][0]++, process.env.TEST_BROWSER) ||
    /* istanbul ignore next */
    (cov_2f9c2hg43v().b[14][1]++, 'chromium')
  });
  /* istanbul ignore next */
  cov_2f9c2hg43v().s[102]++;
  switch (command) {
    case 'all':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][0]++;
    case undefined:
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][1]++;
      cov_2f9c2hg43v().s[103]++;
      console.log('🚀 Ejecutando todos los tests...');
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[104]++;
      TestRunner.runWithConfig(config).then(results => {
        /* istanbul ignore next */
        cov_2f9c2hg43v().f[12]++;
        cov_2f9c2hg43v().s[105]++;
        process.exit(results.failedTests > 0 ?
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[16][0]++, 1) :
        /* istanbul ignore next */
        (cov_2f9c2hg43v().b[16][1]++, 0));
      }).catch(error => {
        /* istanbul ignore next */
        cov_2f9c2hg43v().f[13]++;
        cov_2f9c2hg43v().s[106]++;
        console.error('💥 Error ejecutando tests:', error);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[107]++;
        process.exit(1);
      });
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[108]++;
      break;
    case 'e2e':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][2]++;
    case 'sample':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][3]++;
    case 'purchase':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][4]++;
      cov_2f9c2hg43v().s[109]++;
      TestRunner.runSpecificTest(command, config).then(() => {
        /* istanbul ignore next */
        cov_2f9c2hg43v().f[14]++;
        cov_2f9c2hg43v().s[110]++;
        console.log('✅ Test específico completado');
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[111]++;
        process.exit(0);
      }).catch(error => {
        /* istanbul ignore next */
        cov_2f9c2hg43v().f[15]++;
        cov_2f9c2hg43v().s[112]++;
        console.error('💥 Error ejecutando test específico:', error);
        /* istanbul ignore next */
        cov_2f9c2hg43v().s[113]++;
        process.exit(1);
      });
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[114]++;
      break;
    case 'help':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][5]++;
    case '--help':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][6]++;
    case '-h':
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][7]++;
      cov_2f9c2hg43v().s[115]++;
      console.log(`
🧪 Test Runner - Automated Testing Framework

Uso:
  npm run test:e2e [comando] [opciones]

Comandos:
  all, (vacío)    Ejecutar todos los tests
  e2e             Ejecutar test E2E específico
  sample          Ejecutar test de ejemplo
  purchase        Ejecutar test de flujo de compra
  help            Mostrar esta ayuda

Variables de entorno:
  TEST_BASE_URL   URL base para los tests (default: http://localhost:3000)
  TEST_HEADLESS   Ejecutar en modo headless (default: false)
  TEST_BROWSER    Navegador a usar: chromium, firefox, webkit (default: chromium)

Ejemplos:
  npm run test:e2e
  npm run test:e2e e2e
  TEST_HEADLESS=true npm run test:e2e all
  TEST_BASE_URL=http://localhost:4000 npm run test:e2e sample
`);
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[116]++;
      break;
    default:
      /* istanbul ignore next */
      cov_2f9c2hg43v().b[15][8]++;
      cov_2f9c2hg43v().s[117]++;
      console.error(`❌ Comando desconocido: ${command}`);
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[118]++;
      console.log('Usa "npm run test:e2e help" para ver los comandos disponibles.');
      /* istanbul ignore next */
      cov_2f9c2hg43v().s[119]++;
      process.exit(1);
  }
} else
/* istanbul ignore next */
{
  cov_2f9c2hg43v().b[12][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,