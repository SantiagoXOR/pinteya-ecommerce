bb404439c318ba275deff2ba470ac07e
// ===================================
// PINTEYA E-COMMERCE - TIMEOUT CONFIGURATION
// ===================================
/**
 * Configuración centralizada de timeouts para toda la aplicación
 * Todos los valores están en milisegundos
 */ /**
 * Timeouts para APIs externas
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CACHE_TIMEOUTS () {
        return CACHE_TIMEOUTS;
    },
    get COMMON_TIMEOUTS () {
        return COMMON_TIMEOUTS;
    },
    get DATABASE_TIMEOUTS () {
        return DATABASE_TIMEOUTS;
    },
    get DEFAULT_FETCH_CONFIG () {
        return DEFAULT_FETCH_CONFIG;
    },
    get ENVIRONMENT_TIMEOUTS () {
        return ENVIRONMENT_TIMEOUTS;
    },
    get EXTERNAL_API_TIMEOUTS () {
        return EXTERNAL_API_TIMEOUTS;
    },
    get FILE_TIMEOUTS () {
        return FILE_TIMEOUTS;
    },
    get INTERNAL_API_TIMEOUTS () {
        return INTERNAL_API_TIMEOUTS;
    },
    get MONITORING_TIMEOUTS () {
        return MONITORING_TIMEOUTS;
    },
    get RETRY_CONFIG () {
        return RETRY_CONFIG;
    },
    get TEST_TIMEOUTS () {
        return TEST_TIMEOUTS;
    },
    get TimeoutUtils () {
        return TimeoutUtils;
    }
});
const EXTERNAL_API_TIMEOUTS = {
    // MercadoPago
    MERCADOPAGO: {
        PAYMENT_CREATION: 15000,
        PAYMENT_STATUS: 10000,
        WEBHOOK_PROCESSING: 5000,
        PREFERENCE_CREATION: 12000,
        REFUND_PROCESSING: 20000
    },
    // APIs de terceros generales
    THIRD_PARTY: {
        DEFAULT: 10000,
        SLOW_OPERATIONS: 30000,
        FAST_OPERATIONS: 5000
    },
    // Servicios de email
    EMAIL: {
        SEND_EMAIL: 15000,
        TEMPLATE_PROCESSING: 8000
    },
    // Servicios de notificaciones
    NOTIFICATIONS: {
        PUSH_NOTIFICATION: 10000,
        SMS: 12000,
        SLACK_WEBHOOK: 8000
    }
};
const DATABASE_TIMEOUTS = {
    // Operaciones de lectura
    READ: {
        SIMPLE_QUERY: 5000,
        COMPLEX_QUERY: 15000,
        AGGREGATION: 20000,
        SEARCH: 10000
    },
    // Operaciones de escritura
    WRITE: {
        INSERT: 8000,
        UPDATE: 10000,
        DELETE: 12000,
        BULK_OPERATIONS: 30000
    },
    // Transacciones
    TRANSACTION: {
        SIMPLE: 15000,
        COMPLEX: 30000,
        MIGRATION: 60000
    },
    // Conexiones
    CONNECTION: {
        ACQUIRE: 5000,
        IDLE_TIMEOUT: 300000,
        LIFETIME: 1800000
    }
};
const CACHE_TIMEOUTS = {
    // Redis
    REDIS: {
        CONNECT: 5000,
        COMMAND: 3000,
        PIPELINE: 10000
    },
    // Cache en memoria
    MEMORY: {
        OPERATION: 1000,
        CLEANUP: 5000
    },
    // CDN
    CDN: {
        PURGE: 30000,
        UPLOAD: 60000
    }
};
const INTERNAL_API_TIMEOUTS = {
    // APIs de productos
    PRODUCTS: {
        LIST: 8000,
        DETAIL: 5000,
        SEARCH: 10000,
        CREATE: 12000,
        UPDATE: 10000,
        DELETE: 8000
    },
    // APIs de usuarios
    USERS: {
        AUTHENTICATION: 8000,
        PROFILE: 5000,
        UPDATE_PROFILE: 10000,
        PASSWORD_RESET: 15000
    },
    // APIs de órdenes
    ORDERS: {
        CREATE: 15000,
        LIST: 8000,
        DETAIL: 5000,
        UPDATE_STATUS: 10000,
        CANCEL: 12000
    },
    // APIs de carrito
    CART: {
        ADD_ITEM: 5000,
        REMOVE_ITEM: 3000,
        UPDATE_QUANTITY: 4000,
        CLEAR: 3000,
        CHECKOUT: 20000
    },
    // APIs de categorías
    CATEGORIES: {
        LIST: 5000,
        DETAIL: 3000,
        CREATE: 8000,
        UPDATE: 6000
    },
    // APIs de búsqueda
    SEARCH: {
        PRODUCTS: 10000,
        SUGGESTIONS: 5000,
        TRENDING: 8000,
        FILTERS: 6000
    }
};
const FILE_TIMEOUTS = {
    // Upload de archivos
    UPLOAD: {
        SMALL_FILE: 30000,
        MEDIUM_FILE: 60000,
        LARGE_FILE: 180000
    },
    // Procesamiento de imágenes
    IMAGE_PROCESSING: {
        RESIZE: 15000,
        OPTIMIZATION: 20000,
        THUMBNAIL: 10000
    },
    // Operaciones de archivos
    FILE_OPERATIONS: {
        READ: 10000,
        WRITE: 15000,
        DELETE: 5000,
        COPY: 20000
    }
};
const MONITORING_TIMEOUTS = {
    // Métricas
    METRICS: {
        COLLECTION: 5000,
        AGGREGATION: 10000,
        EXPORT: 30000
    },
    // Alertas
    ALERTS: {
        SEND: 8000,
        WEBHOOK: 10000,
        EMAIL: 15000
    },
    // Health checks
    HEALTH_CHECK: {
        SIMPLE: 3000,
        DETAILED: 10000,
        EXTERNAL_SERVICES: 15000
    }
};
const TEST_TIMEOUTS = {
    // Tests unitarios
    UNIT: {
        DEFAULT: 5000,
        ASYNC_OPERATIONS: 10000
    },
    // Tests de integración
    INTEGRATION: {
        API_CALLS: 15000,
        DATABASE_OPERATIONS: 20000,
        EXTERNAL_SERVICES: 30000
    },
    // Tests E2E
    E2E: {
        PAGE_LOAD: 30000,
        USER_INTERACTION: 10000,
        FORM_SUBMISSION: 20000
    }
};
const ENVIRONMENT_TIMEOUTS = {
    development: {
        multiplier: 2,
        maxTimeout: 60000
    },
    staging: {
        multiplier: 1.5,
        maxTimeout: 45000
    },
    production: {
        multiplier: 1,
        maxTimeout: 30000
    }
};
const RETRY_CONFIG = {
    // Configuración por defecto
    DEFAULT: {
        maxRetries: 3,
        baseDelay: 1000,
        maxDelay: 10000,
        backoffMultiplier: 2
    },
    // APIs críticas
    CRITICAL: {
        maxRetries: 5,
        baseDelay: 500,
        maxDelay: 5000,
        backoffMultiplier: 1.5
    },
    // APIs no críticas
    NON_CRITICAL: {
        maxRetries: 2,
        baseDelay: 2000,
        maxDelay: 15000,
        backoffMultiplier: 3
    }
};
class TimeoutUtils {
    /**
   * Obtiene timeout ajustado por ambiente
   */ static getEnvironmentTimeout(baseTimeout) {
        const env = process.env.NODE_ENV || 'development';
        const config = ENVIRONMENT_TIMEOUTS[env] || ENVIRONMENT_TIMEOUTS.development;
        const adjustedTimeout = Math.min(baseTimeout * config.multiplier, config.maxTimeout);
        return Math.round(adjustedTimeout);
    }
    /**
   * Crea AbortController con timeout
   */ static createTimeoutController(timeout) {
        const controller = new AbortController();
        setTimeout(()=>{
            controller.abort();
        }, timeout);
        return controller;
    }
    /**
   * Wrapper para promesas con timeout
   */ static withTimeout(promise, timeout, errorMessage) {
        return Promise.race([
            promise,
            new Promise((_, reject)=>{
                setTimeout(()=>{
                    reject(new Error(errorMessage || `Operation timed out after ${timeout}ms`));
                }, timeout);
            })
        ]);
    }
    /**
   * Implementa retry con backoff exponencial
   */ static async withRetry(operation, config = RETRY_CONFIG.DEFAULT) {
        let lastError;
        for(let attempt = 0; attempt <= config.maxRetries; attempt++){
            try {
                return await operation();
            } catch (error) {
                lastError = error;
                if (attempt === config.maxRetries) {
                    throw lastError;
                }
                const delay = Math.min(config.baseDelay * Math.pow(config.backoffMultiplier, attempt), config.maxDelay);
                await new Promise((resolve)=>setTimeout(resolve, delay));
            }
        }
        throw lastError;
    }
    /**
   * Obtiene timeout para operación específica
   */ static getTimeout(category, operation) {
        const timeoutMap = {
            'external-api': EXTERNAL_API_TIMEOUTS,
            database: DATABASE_TIMEOUTS,
            cache: CACHE_TIMEOUTS,
            'internal-api': INTERNAL_API_TIMEOUTS,
            file: FILE_TIMEOUTS,
            monitoring: MONITORING_TIMEOUTS,
            test: TEST_TIMEOUTS
        };
        const categoryConfig = timeoutMap[category];
        if (!categoryConfig) {
            return this.getEnvironmentTimeout(10000) // 10 segundos por defecto
            ;
        }
        // Navegar por la estructura anidada
        const parts = operation.split('.');
        let current = categoryConfig;
        for (const part of parts){
            if (current[part] !== undefined) {
                current = current[part];
            } else {
                return this.getEnvironmentTimeout(10000) // Fallback
                ;
            }
        }
        return this.getEnvironmentTimeout(typeof current === 'number' ? current : 10000);
    }
}
const COMMON_TIMEOUTS = {
    VERY_SHORT: TimeoutUtils.getEnvironmentTimeout(2000),
    SHORT: TimeoutUtils.getEnvironmentTimeout(5000),
    MEDIUM: TimeoutUtils.getEnvironmentTimeout(10000),
    LONG: TimeoutUtils.getEnvironmentTimeout(20000),
    VERY_LONG: TimeoutUtils.getEnvironmentTimeout(60000)
};
const DEFAULT_FETCH_CONFIG = {
    timeout: COMMON_TIMEOUTS.MEDIUM,
    retries: RETRY_CONFIG.DEFAULT.maxRetries,
    headers: {
        'Content-Type': 'application/json'
    }
};

//# sourceMappingURL=data:application/json;base64,