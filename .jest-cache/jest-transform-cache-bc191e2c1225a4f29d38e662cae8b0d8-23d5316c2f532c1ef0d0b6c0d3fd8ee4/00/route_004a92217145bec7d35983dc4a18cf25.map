{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\brands\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\nexport const runtime = 'nodejs'\n\n// ===================================\n// PINTEYA E-COMMERCE - API DE MARCAS\n// ===================================\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getSupabaseClient, handleSupabaseError } from '@/lib/integrations/supabase'\nimport { ApiResponse } from '@/types/api'\n\n// ===================================\n// TIPOS PARA MARCAS\n// ===================================\nexport interface Brand {\n  name: string\n  products_count: number\n}\n\nexport interface BrandFilters {\n  search?: string\n  minProducts?: number\n}\n\n// ===================================\n// GET /api/brands - Obtener marcas disponibles\n// ===================================\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n\n    // Extraer parámetros de query\n    const filters: BrandFilters = {\n      search: searchParams.get('search') || undefined,\n      minProducts: searchParams.get('minProducts') ? Number(searchParams.get('minProducts')) : 1,\n    }\n\n    const supabase = getSupabaseClient()\n\n    // Verificar que el cliente de Supabase esté disponible\n    if (!supabase) {\n      console.error('Cliente de Supabase no disponible en GET /api/brands')\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio de base de datos no disponible',\n      }\n      return NextResponse.json(errorResponse, { status: 503 })\n    }\n\n    // Construir query para obtener marcas con conteo de productos\n    let query = supabase.from('products').select('brand').not('brand', 'is', null).gt('stock', 0) // Solo productos con stock\n\n    // Aplicar filtro de búsqueda si existe\n    if (filters.search) {\n      query = query.ilike('brand', `%${filters.search}%`)\n    }\n\n    // Ejecutar query\n    const { data: products, error } = await query\n\n    if (error) {\n      handleSupabaseError(error, 'GET /api/brands')\n    }\n\n    // Procesar datos para obtener marcas únicas con conteo\n    const brandCounts: Record<string, number> = {}\n\n    products?.forEach(product => {\n      if (product.brand) {\n        brandCounts[product.brand] = (brandCounts[product.brand] || 0) + 1\n      }\n    })\n\n    // Convertir a array y filtrar por mínimo de productos\n    const brands: Brand[] = Object.entries(brandCounts)\n      .filter(([_, count]) => count >= (filters.minProducts || 1))\n      .map(([name, products_count]) => ({\n        name,\n        products_count,\n      }))\n      .sort((a, b) => {\n        // Ordenar por número de productos (descendente) y luego por nombre\n        if (a.products_count !== b.products_count) {\n          return b.products_count - a.products_count\n        }\n        return a.name.localeCompare(b.name)\n      })\n\n    const response: ApiResponse<Brand[]> = {\n      data: brands,\n      success: true,\n      message: `${brands.length} marcas encontradas`,\n    }\n\n    return NextResponse.json(response)\n  } catch (error: any) {\n    console.error('Error en GET /api/brands:', error)\n\n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    }\n\n    return NextResponse.json(errorResponse, { status: 500 })\n  }\n}\n\n// ===================================\n// GET /api/brands/stats - Estadísticas de marcas\n// ===================================\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = getSupabaseClient()\n\n    if (!supabase) {\n      console.error('Cliente de Supabase no disponible en POST /api/brands')\n      const errorResponse: ApiResponse<null> = {\n        data: null,\n        success: false,\n        error: 'Servicio de base de datos no disponible',\n      }\n      return NextResponse.json(errorResponse, { status: 503 })\n    }\n\n    // Obtener estadísticas detalladas de marcas\n    const { data: products, error } = await supabase\n      .from('products')\n      .select('brand, price, discounted_price, stock, category_id')\n      .not('brand', 'is', null)\n\n    if (error) {\n      handleSupabaseError(error, 'POST /api/brands (stats)')\n    }\n\n    // Calcular estadísticas por marca\n    const brandStats: Record<\n      string,\n      {\n        name: string\n        products_count: number\n        total_stock: number\n        avg_price: number\n        min_price: number\n        max_price: number\n        discounted_products: number\n      }\n    > = {}\n\n    products?.forEach(product => {\n      if (product.brand) {\n        if (!brandStats[product.brand]) {\n          brandStats[product.brand] = {\n            name: product.brand,\n            products_count: 0,\n            total_stock: 0,\n            avg_price: 0,\n            min_price: Infinity,\n            max_price: 0,\n            discounted_products: 0,\n          }\n        }\n\n        const stats = brandStats[product.brand]\n        const currentPrice = product.discounted_price || product.price\n\n        stats.products_count++\n        stats.total_stock += product.stock || 0\n        stats.min_price = Math.min(stats.min_price, currentPrice)\n        stats.max_price = Math.max(stats.max_price, currentPrice)\n\n        if (product.discounted_price && product.discounted_price < product.price) {\n          stats.discounted_products++\n        }\n      }\n    })\n\n    // Calcular precio promedio y finalizar estadísticas\n    const finalStats = Object.values(brandStats)\n      .map(stats => {\n        const brandProducts = products?.filter(p => p.brand === stats.name) || []\n        const totalPrice = brandProducts.reduce(\n          (sum, p) => sum + (p.discounted_price || p.price),\n          0\n        )\n\n        return {\n          ...stats,\n          avg_price: Math.round(totalPrice / stats.products_count),\n          min_price: stats.min_price === Infinity ? 0 : stats.min_price,\n        }\n      })\n      .sort((a, b) => b.products_count - a.products_count)\n\n    const response: ApiResponse<typeof finalStats> = {\n      data: finalStats,\n      success: true,\n      message: `Estadísticas de ${finalStats.length} marcas calculadas`,\n    }\n\n    return NextResponse.json(response)\n  } catch (error: any) {\n    console.error('Error en POST /api/brands (stats):', error)\n\n    const errorResponse: ApiResponse<null> = {\n      data: null,\n      success: false,\n      error: error.message || 'Error interno del servidor',\n    }\n\n    return NextResponse.json(errorResponse, { status: 500 })\n  }\n}\n"],"names":["GET","POST","runtime","request","searchParams","URL","url","filters","search","get","undefined","minProducts","Number","supabase","getSupabaseClient","console","error","errorResponse","data","success","NextResponse","json","status","query","from","select","not","gt","ilike","products","handleSupabaseError","brandCounts","forEach","product","brand","brands","Object","entries","filter","_","count","map","name","products_count","sort","a","b","localeCompare","response","message","length","brandStats","total_stock","avg_price","min_price","Infinity","max_price","discounted_products","stats","currentPrice","discounted_price","price","stock","Math","min","max","finalStats","values","brandProducts","p","totalPrice","reduce","sum","round"],"mappings":"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"}