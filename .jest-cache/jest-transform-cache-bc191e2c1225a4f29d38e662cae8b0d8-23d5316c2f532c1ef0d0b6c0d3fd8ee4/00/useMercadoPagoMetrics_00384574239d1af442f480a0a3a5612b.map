{"version":3,"names":["useMercadoPagoAlerts","cov_204aep4t6i","f","s","useMercadoPagoBasicMetrics","useMercadoPagoMetrics","options","b","refreshInterval","autoRefresh","onError","onAlert","metrics","setMetrics","_react","useState","isLoading","setIsLoading","error","setError","lastUpdate","setLastUpdate","fetchMetrics","useCallback","response","fetch","method","headers","ok","Error","status","statusText","data","json","success","Date","alerts","length","_logger","logger","info","LogCategory","API","err","errorMessage","message","resetMetrics","refresh","useEffect","interval","setInterval","clearInterval","totalRequests","realTimeMetrics","successRate","errorRate","averageResponseTime","criticalAlerts","filter","alert","type","warningAlerts","infoAlerts","hasAlerts","hasCriticalAlerts"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useMercadoPagoMetrics.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - MERCADOPAGO METRICS HOOK\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { logger, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Tipos para métricas de MercadoPago\r\nexport interface MercadoPagoMetrics {\r\n  realTimeMetrics: {\r\n    totalRequests: number;\r\n    successRate: number;\r\n    errorRate: number;\r\n    averageResponseTime: number;\r\n    rateLimitHits: number;\r\n    retryAttempts: number;\r\n  };\r\n  endpointMetrics: {\r\n    createPreference: EndpointMetric;\r\n    webhook: EndpointMetric;\r\n    paymentQuery: EndpointMetric;\r\n  };\r\n  systemHealth: {\r\n    redisStatus: 'connected' | 'disconnected';\r\n    lastUpdate: string;\r\n    uptime: number;\r\n  };\r\n  alerts: Alert[];\r\n}\r\n\r\nexport interface EndpointMetric {\r\n  requests: number;\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n}\r\n\r\nexport interface Alert {\r\n  type: 'warning' | 'error' | 'info';\r\n  message: string;\r\n  timestamp: string;\r\n  endpoint?: string;\r\n}\r\n\r\ninterface UseMetricsOptions {\r\n  refreshInterval?: number; // en milisegundos\r\n  autoRefresh?: boolean;\r\n  onError?: (error: Error) => void;\r\n  onAlert?: (alerts: Alert[]) => void;\r\n}\r\n\r\ninterface UseMetricsReturn {\r\n  metrics: MercadoPagoMetrics | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  lastUpdate: Date | null;\r\n  refresh: () => Promise<void>;\r\n  resetMetrics: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * Hook para obtener y gestionar métricas de MercadoPago en tiempo real\r\n */\r\nexport function useMercadoPagoMetrics(options: UseMetricsOptions = {}): UseMetricsReturn {\r\n  const {\r\n    refreshInterval = 30000, // 30 segundos por defecto\r\n    autoRefresh = true,\r\n    onError,\r\n    onAlert,\r\n  } = options;\r\n\r\n  const [metrics, setMetrics] = useState<MercadoPagoMetrics | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\r\n\r\n  /**\r\n   * Función para obtener métricas del servidor\r\n   */\r\n  const fetchMetrics = useCallback(async (): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/admin/mercadopago/metrics', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.success) {\r\n        throw new Error(data.error || 'Error desconocido');\r\n      }\r\n\r\n      setMetrics(data.data);\r\n      setLastUpdate(new Date());\r\n\r\n      // Notificar alertas si hay callback\r\n      if (onAlert && data.data.alerts.length > 0) {\r\n        onAlert(data.data.alerts);\r\n      }\r\n\r\n      logger.info(LogCategory.API, 'MercadoPago metrics updated successfully');\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      \r\n      logger.error(LogCategory.API, 'Error fetching MercadoPago metrics', err as Error);\r\n\r\n      // Notificar error si hay callback\r\n      if (onError) {\r\n        onError(err as Error);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [onError, onAlert]);\r\n\r\n  /**\r\n   * Función para reiniciar métricas\r\n   */\r\n  const resetMetrics = useCallback(async (): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const response = await fetch('/api/admin/mercadopago/metrics', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.success) {\r\n        throw new Error(data.error || 'Error desconocido');\r\n      }\r\n\r\n      // Refrescar métricas después del reset\r\n      await fetchMetrics();\r\n\r\n      logger.info(LogCategory.API, 'MercadoPago metrics reset successfully');\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n      setError(errorMessage);\r\n      \r\n      logger.error(LogCategory.API, 'Error resetting MercadoPago metrics', err as Error);\r\n\r\n      if (onError) {\r\n        onError(err as Error);\r\n      }\r\n    }\r\n  }, [fetchMetrics, onError]);\r\n\r\n  /**\r\n   * Función pública para refrescar métricas manualmente\r\n   */\r\n  const refresh = useCallback(async (): Promise<void> => {\r\n    await fetchMetrics();\r\n  }, [fetchMetrics]);\r\n\r\n  // Efecto para carga inicial\r\n  useEffect(() => {\r\n    fetchMetrics();\r\n  }, [fetchMetrics]);\r\n\r\n  // Efecto para auto-refresh\r\n  useEffect(() => {\r\n    if (!autoRefresh || refreshInterval <= 0) {\r\n      return;\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      fetchMetrics();\r\n    }, refreshInterval);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [autoRefresh, refreshInterval, fetchMetrics]);\r\n\r\n  // Efecto para limpiar error cuando se obtienen métricas exitosamente\r\n  useEffect(() => {\r\n    if (metrics && error) {\r\n      setError(null);\r\n    }\r\n  }, [metrics, error]);\r\n\r\n  return {\r\n    metrics,\r\n    isLoading,\r\n    error,\r\n    lastUpdate,\r\n    refresh,\r\n    resetMetrics,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook simplificado para métricas básicas\r\n */\r\nexport function useMercadoPagoBasicMetrics() {\r\n  const { metrics, isLoading, error } = useMercadoPagoMetrics({\r\n    refreshInterval: 60000, // 1 minuto\r\n    autoRefresh: true,\r\n  });\r\n\r\n  return {\r\n    totalRequests: metrics?.realTimeMetrics.totalRequests || 0,\r\n    successRate: metrics?.realTimeMetrics.successRate || 0,\r\n    errorRate: metrics?.realTimeMetrics.errorRate || 0,\r\n    averageResponseTime: metrics?.realTimeMetrics.averageResponseTime || 0,\r\n    isLoading,\r\n    error,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook para alertas de MercadoPago\r\n */\r\nexport function useMercadoPagoAlerts() {\r\n  const { metrics } = useMercadoPagoMetrics({\r\n    refreshInterval: 15000, // 15 segundos para alertas\r\n    autoRefresh: true,\r\n  });\r\n\r\n  const criticalAlerts = metrics?.alerts.filter(alert => alert.type === 'error') || [];\r\n  const warningAlerts = metrics?.alerts.filter(alert => alert.type === 'warning') || [];\r\n  const infoAlerts = metrics?.alerts.filter(alert => alert.type === 'info') || [];\r\n\r\n  return {\r\n    alerts: metrics?.alerts || [],\r\n    criticalAlerts,\r\n    warningAlerts,\r\n    infoAlerts,\r\n    hasAlerts: (metrics?.alerts.length || 0) > 0,\r\n    hasCriticalAlerts: criticalAlerts.length > 0,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}