{"version":3,"names":["cov_193ds5znpz","actualCoverage","s","GET","f","PATCH","POST","runtime","request","authResult","_adminauth","getAuthenticatedAdmin","b","isAdmin","userId","_server","NextResponse","json","success","error","status","searchParams","nextUrl","get","level","limit","parseInt","offset","supabase","_supabase","getSupabaseClient","Error","query","from","select","order","ascending","range","eq","data","alerts","message","stats","gte","Date","now","toISOString","statistics","total","length","byLevel","info","filter","warning","critical","emergency","byStatus","active","acknowledged","resolved","suppressed","_logger","logger","LogLevel","INFO","alertsCount","filters","LogCategory","SYSTEM","pagination","ERROR","body","type","config","name","description","metricName","condition","threshold","cooldownMinutes","channels","escalationRules","tags","enabled","undefined","ruleId","Math","random","toString","substr","_alertsystem","enterpriseAlertSystem","setAlertRule","id","metadata","createdBy","createdAt","notificationType","channelConfig","levels","rateLimit","channelId","setNotificationChannel","conditions","actions","escalationId","setEscalationRule","alertId","action","acknowledgeAlert","resolveAlert"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\alerts\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ALERTS MANAGEMENT API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getAuthenticatedAdmin } from '@/lib/auth/admin-auth';\r\nimport { \r\n  enterpriseAlertSystem,\r\n  AlertLevel,\r\n  NotificationType,\r\n  AlertStatus\r\n} from '@/lib/monitoring/alert-system';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * GET /api/admin/monitoring/alerts\r\n * Obtiene alertas activas y configuración\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const searchParams = request.nextUrl.searchParams;\r\n    const status = searchParams.get('status') as AlertStatus | null;\r\n    const level = searchParams.get('level') as AlertLevel | null;\r\n    const limit = parseInt(searchParams.get('limit') || '50');\r\n    const offset = parseInt(searchParams.get('offset') || '0');\r\n\r\n    // Obtener alertas de la base de datos\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      throw new Error('Supabase client not available');\r\n    }\r\n\r\n    let query = supabase\r\n      .from('enterprise_alerts')\r\n      .select('*')\r\n      .order('triggered_at', { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    if (status) {\r\n      query = query.eq('status', status);\r\n    }\r\n\r\n    if (level) {\r\n      query = query.eq('level', level);\r\n    }\r\n\r\n    const { data: alerts, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to fetch alerts: ${error.message}`);\r\n    }\r\n\r\n    // Obtener estadísticas\r\n    const { data: stats } = await supabase\r\n      .from('enterprise_alerts')\r\n      .select('level, status')\r\n      .gte('triggered_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());\r\n\r\n    const statistics = {\r\n      total: stats?.length || 0,\r\n      byLevel: {\r\n        info: stats?.filter(s => s.level === 'info').length || 0,\r\n        warning: stats?.filter(s => s.level === 'warning').length || 0,\r\n        critical: stats?.filter(s => s.level === 'critical').length || 0,\r\n        emergency: stats?.filter(s => s.level === 'emergency').length || 0\r\n      },\r\n      byStatus: {\r\n        active: stats?.filter(s => s.status === 'active').length || 0,\r\n        acknowledged: stats?.filter(s => s.status === 'acknowledged').length || 0,\r\n        resolved: stats?.filter(s => s.status === 'resolved').length || 0,\r\n        suppressed: stats?.filter(s => s.status === 'suppressed').length || 0\r\n      }\r\n    };\r\n\r\n    logger.info(LogLevel.INFO, 'Alerts retrieved', {\r\n      userId: authResult.userId,\r\n      alertsCount: alerts?.length || 0,\r\n      filters: { status, level, limit, offset }\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        alerts: alerts || [],\r\n        statistics,\r\n        pagination: {\r\n          limit,\r\n          offset,\r\n          total: statistics.total\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to get alerts', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring/alerts\r\n * Crea una nueva regla de alerta o canal de notificación\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { type, config } = body;\r\n\r\n    if (type === 'alert_rule') {\r\n      // Crear regla de alerta\r\n      const {\r\n        name,\r\n        description,\r\n        metricName,\r\n        condition,\r\n        threshold,\r\n        level,\r\n        cooldownMinutes,\r\n        channels,\r\n        escalationRules,\r\n        tags,\r\n        enabled = true\r\n      } = config;\r\n\r\n      // Validar datos requeridos\r\n      if (!name || !metricName || !condition || threshold === undefined || !level) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Faltan campos requeridos'\r\n        }, { status: 400 });\r\n      }\r\n\r\n      const ruleId = `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      enterpriseAlertSystem.setAlertRule({\r\n        id: ruleId,\r\n        name,\r\n        description: description || '',\r\n        enabled,\r\n        metricName,\r\n        condition,\r\n        threshold,\r\n        level,\r\n        cooldownMinutes: cooldownMinutes || 5,\r\n        channels: channels || ['default_log'],\r\n        escalationRules: escalationRules || [],\r\n        tags: tags || {},\r\n        metadata: {\r\n          createdBy: authResult.userId,\r\n          createdAt: new Date().toISOString()\r\n        }\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'Alert rule created', {\r\n        ruleId,\r\n        name,\r\n        metricName,\r\n        level,\r\n        createdBy: authResult.userId\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: { ruleId, name, enabled }\r\n      });\r\n\r\n    } else if (type === 'notification_channel') {\r\n      // Crear canal de notificación\r\n      const {\r\n        name,\r\n        notificationType,\r\n        channelConfig,\r\n        enabled = true,\r\n        levels,\r\n        rateLimit\r\n      } = config;\r\n\r\n      if (!name || !notificationType || !levels) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Faltan campos requeridos para el canal'\r\n        }, { status: 400 });\r\n      }\r\n\r\n      const channelId = `channel_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      enterpriseAlertSystem.setNotificationChannel({\r\n        id: channelId,\r\n        type: notificationType,\r\n        name,\r\n        config: channelConfig || {},\r\n        enabled,\r\n        levels,\r\n        rateLimit\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'Notification channel created', {\r\n        channelId,\r\n        name,\r\n        type: notificationType,\r\n        createdBy: authResult.userId\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: { channelId, name, type: notificationType, enabled }\r\n      });\r\n\r\n    } else if (type === 'escalation_rule') {\r\n      // Crear regla de escalamiento\r\n      const {\r\n        name,\r\n        conditions,\r\n        actions,\r\n        enabled = true\r\n      } = config;\r\n\r\n      if (!name || !conditions || !actions) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Faltan campos requeridos para la regla de escalamiento'\r\n        }, { status: 400 });\r\n      }\r\n\r\n      const escalationId = `escalation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      enterpriseAlertSystem.setEscalationRule({\r\n        id: escalationId,\r\n        name,\r\n        enabled,\r\n        conditions,\r\n        actions\r\n      });\r\n\r\n      logger.info(LogLevel.INFO, 'Escalation rule created', {\r\n        escalationId,\r\n        name,\r\n        createdBy: authResult.userId\r\n      }, LogCategory.SYSTEM);\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: { escalationId, name, enabled }\r\n      });\r\n\r\n    } else {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Tipo de configuración no válido'\r\n      }, { status: 400 });\r\n    }\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to create alert configuration', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n/**\r\n * PATCH /api/admin/monitoring/alerts\r\n * Actualiza estado de alertas (acknowledge, resolve)\r\n */\r\nexport async function PATCH(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const authResult = await getAuthenticatedAdmin(request);\r\n    \r\n    if (!authResult.isAdmin || !authResult.userId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Acceso no autorizado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { alertId, action } = body;\r\n\r\n    if (!alertId || !action) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Faltan alertId y action'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    let success = false;\r\n\r\n    switch (action) {\r\n      case 'acknowledge':\r\n        success = await enterpriseAlertSystem.acknowledgeAlert(alertId, authResult.userId);\r\n        break;\r\n      case 'resolve':\r\n        success = await enterpriseAlertSystem.resolveAlert(alertId, authResult.userId);\r\n        break;\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Acción no válida'\r\n        }, { status: 400 });\r\n    }\r\n\r\n    if (!success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'No se pudo actualizar la alerta'\r\n      }, { status: 404 });\r\n    }\r\n\r\n    logger.info(LogLevel.INFO, `Alert ${action}d`, {\r\n      alertId,\r\n      action,\r\n      userId: authResult.userId\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: { alertId, action, status: 'updated' }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'Failed to update alert', {\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    }, LogCategory.SYSTEM);\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Error interno del servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}