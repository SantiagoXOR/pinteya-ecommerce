{"version":3,"names":["cov_78rrlaw26","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","b","_server","NextResponse","json","error","status","searchParams","URL","url","daysToKeep","parseInt","get","dryRun","supabase","_supabase","getSupabaseClient","cutoffTimestamp","Math","floor","Date","now","count","from","select","head","lt","console","success","wouldDelete","cutoffDate","toISOString","data","rpc","days_to_keep","result","deleted","deleted_count","sizeFreed","size_freed","cleanupDate","cleanup_date","stats","statsError","distribution","distError","order","ascending","limit","dayDistribution","forEach","event","date","created_at","split","statsResult","totalEvents","total_events","tableSize","table_size","avgEventsPerDay","avg_events_per_day","oldestEvent","oldest_event","newestEvent","newest_event","compressionRatio","compression_ratio","recommendations","generateCleanupRecommendations","push","type","message","action","priority"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\analytics\\cleanup\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API PARA LIMPIEZA AUTOMÁTICA DE ANALYTICS - PINTEYA E-COMMERCE\r\n * Gestiona la limpieza automática de eventos antiguos y estadísticas\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\n/**\r\n * POST /api/admin/analytics/cleanup\r\n * Ejecutar limpieza de eventos antiguos (solo admins)\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const daysToKeep = parseInt(searchParams.get('days') || '30');\r\n    const dryRun = searchParams.get('dryRun') === 'true';\r\n\r\n    // Validar parámetros\r\n    if (daysToKeep < 1 || daysToKeep > 365) {\r\n      return NextResponse.json(\r\n        { error: 'Días a mantener debe estar entre 1 y 365' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient(true); // Usar cliente admin\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { error: 'Servicio administrativo no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    if (dryRun) {\r\n      // Simular limpieza - solo contar registros\r\n      const cutoffTimestamp = Math.floor(Date.now() / 1000) - (daysToKeep * 24 * 60 * 60);\r\n      \r\n      const { count, error } = await supabase\r\n        .from('analytics_events_optimized')\r\n        .select('*', { count: 'exact', head: true })\r\n        .lt('created_at', cutoffTimestamp);\r\n\r\n      if (error) {\r\n        console.error('Error en dry run de limpieza:', error);\r\n        return NextResponse.json(\r\n          { error: 'Error en simulación de limpieza' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        dryRun: true,\r\n        wouldDelete: count || 0,\r\n        daysToKeep,\r\n        cutoffDate: new Date(cutoffTimestamp * 1000).toISOString()\r\n      });\r\n    }\r\n\r\n    // Ejecutar limpieza real\r\n    const { data, error } = await supabase.rpc('cleanup_old_analytics_events', {\r\n      days_to_keep: daysToKeep\r\n    });\r\n\r\n    if (error) {\r\n      console.error('Error ejecutando limpieza:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error ejecutando limpieza automática' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const result = data?.[0];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      deleted: result?.deleted_count || 0,\r\n      sizeFreed: result?.size_freed || '0 bytes',\r\n      cleanupDate: result?.cleanup_date,\r\n      daysToKeep\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en API de limpieza:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/admin/analytics/cleanup\r\n * Obtener estadísticas de analytics y limpieza\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación de admin\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {\r\n      return NextResponse.json(\r\n        { error: 'Servicio administrativo no disponible' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Obtener estadísticas generales\r\n    const { data: stats, error: statsError } = await supabase.rpc('get_analytics_stats');\r\n\r\n    if (statsError) {\r\n      console.error('Error obteniendo estadísticas:', statsError);\r\n      return NextResponse.json(\r\n        { error: 'Error obteniendo estadísticas' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener distribución por días\r\n    const { data: distribution, error: distError } = await supabase\r\n      .from('analytics_events_optimized')\r\n      .select('created_at')\r\n      .order('created_at', { ascending: false })\r\n      .limit(1000);\r\n\r\n    if (distError) {\r\n      console.error('Error obteniendo distribución:', distError);\r\n    }\r\n\r\n    // Calcular distribución por días\r\n    const dayDistribution: Record<string, number> = {};\r\n    if (distribution) {\r\n      distribution.forEach(event => {\r\n        const date = new Date(event.created_at * 1000).toISOString().split('T')[0];\r\n        dayDistribution[date] = (dayDistribution[date] || 0) + 1;\r\n      });\r\n    }\r\n\r\n    const statsResult = stats?.[0];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      stats: {\r\n        totalEvents: statsResult?.total_events || 0,\r\n        tableSize: statsResult?.table_size || '0 bytes',\r\n        avgEventsPerDay: statsResult?.avg_events_per_day || 0,\r\n        oldestEvent: statsResult?.oldest_event,\r\n        newestEvent: statsResult?.newest_event,\r\n        compressionRatio: statsResult?.compression_ratio || 0,\r\n      },\r\n      distribution: dayDistribution,\r\n      recommendations: generateCleanupRecommendations(statsResult)\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET analytics cleanup:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Generar recomendaciones de limpieza\r\n */\r\nfunction generateCleanupRecommendations(stats: Record<string, unknown> | null) {\r\n  const recommendations = [];\r\n  \r\n  if (!stats) {return recommendations;}\r\n\r\n  const totalEvents = stats.total_events || 0;\r\n  const avgEventsPerDay = stats.avg_events_per_day || 0;\r\n\r\n  // Recomendación basada en volumen\r\n  if (totalEvents > 10000) {\r\n    recommendations.push({\r\n      type: 'warning',\r\n      message: 'Alto volumen de eventos detectado',\r\n      action: 'Considerar limpieza de eventos mayores a 30 días',\r\n      priority: 'high'\r\n    });\r\n  }\r\n\r\n  // Recomendación basada en crecimiento\r\n  if (avgEventsPerDay > 100) {\r\n    recommendations.push({\r\n      type: 'info',\r\n      message: 'Crecimiento rápido de eventos',\r\n      action: 'Configurar limpieza automática semanal',\r\n      priority: 'medium'\r\n    });\r\n  }\r\n\r\n  // Recomendación de compresión\r\n  if (stats.compression_ratio < 200) {\r\n    recommendations.push({\r\n      type: 'success',\r\n      message: 'Excelente ratio de compresión',\r\n      action: 'Sistema optimizado funcionando correctamente',\r\n      priority: 'low'\r\n    });\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}