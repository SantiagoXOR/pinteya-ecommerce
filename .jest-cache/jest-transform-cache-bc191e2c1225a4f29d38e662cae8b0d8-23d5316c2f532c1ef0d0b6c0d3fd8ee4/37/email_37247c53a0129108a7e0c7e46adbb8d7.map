{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\notifications\\email.ts"],"sourcesContent":["'use client'\n\nimport { toast } from '@/components/ui/use-toast'\n\nexport interface EmailNotificationConfig {\n  to: string | string[]\n  subject: string\n  template: string\n  data?: Record<string, any>\n  priority?: 'low' | 'normal' | 'high'\n  scheduledAt?: Date\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  htmlContent: string\n  textContent?: string\n  variables: string[]\n}\n\nexport class EmailNotificationService {\n  private static instance: EmailNotificationService\n  private apiEndpoint = '/api/notifications/email'\n\n  static getInstance(): EmailNotificationService {\n    if (!EmailNotificationService.instance) {\n      EmailNotificationService.instance = new EmailNotificationService()\n    }\n    return EmailNotificationService.instance\n  }\n\n  async sendNotification(config: EmailNotificationConfig): Promise<boolean> {\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(config),\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al enviar notificación por email')\n      }\n\n      const result = await response.json()\n      return result.success\n    } catch (error) {\n      console.error('Error sending email notification:', error)\n      toast({\n        title: 'Error',\n        description: 'No se pudo enviar la notificación por email',\n        variant: 'destructive',\n      })\n      return false\n    }\n  }\n\n  async sendOrderConfirmation(orderData: {\n    customerEmail: string\n    orderId: string\n    customerName: string\n    items: Array<{ name: string; quantity: number; price: number }>\n    total: number\n    shippingAddress: any\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: orderData.customerEmail,\n      subject: `Confirmación de pedido #${orderData.orderId}`,\n      template: 'order-confirmation',\n      data: orderData,\n      priority: 'high',\n    })\n  }\n\n  async sendShippingNotification(shippingData: {\n    customerEmail: string\n    orderId: string\n    trackingNumber: string\n    estimatedDelivery: string\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: shippingData.customerEmail,\n      subject: `Tu pedido #${shippingData.orderId} está en camino`,\n      template: 'shipping-notification',\n      data: shippingData,\n      priority: 'normal',\n    })\n  }\n\n  async sendPasswordReset(userData: {\n    email: string\n    resetToken: string\n    userName: string\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: userData.email,\n      subject: 'Restablecer contraseña',\n      template: 'password-reset',\n      data: userData,\n      priority: 'high',\n    })\n  }\n\n  async sendWelcomeEmail(userData: {\n    email: string\n    userName: string\n    verificationToken?: string\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: userData.email,\n      subject: '¡Bienvenido a nuestra tienda!',\n      template: 'welcome',\n      data: userData,\n      priority: 'normal',\n    })\n  }\n\n  async sendLowStockAlert(productData: {\n    adminEmails: string[]\n    productName: string\n    currentStock: number\n    minimumStock: number\n    productId: string\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: productData.adminEmails,\n      subject: `Alerta: Stock bajo - ${productData.productName}`,\n      template: 'low-stock-alert',\n      data: productData,\n      priority: 'high',\n    })\n  }\n\n  async sendOrderStatusUpdate(statusData: {\n    customerEmail: string\n    orderId: string\n    newStatus: string\n    customerName: string\n    statusMessage?: string\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: statusData.customerEmail,\n      subject: `Actualización de pedido #${statusData.orderId}`,\n      template: 'order-status-update',\n      data: statusData,\n      priority: 'normal',\n    })\n  }\n\n  async sendPromotionalEmail(promoData: {\n    recipients: string[]\n    subject: string\n    promoCode?: string\n    discount?: number\n    validUntil?: string\n    products?: Array<{ name: string; price: number; image: string }>\n  }): Promise<boolean> {\n    return this.sendNotification({\n      to: promoData.recipients,\n      subject: promoData.subject,\n      template: 'promotional',\n      data: promoData,\n      priority: 'low',\n    })\n  }\n\n  async getEmailTemplates(): Promise<EmailTemplate[]> {\n    try {\n      const response = await fetch('/api/notifications/email/templates')\n      if (!response.ok) {\n        throw new Error('Error al obtener plantillas')\n      }\n      return await response.json()\n    } catch (error) {\n      console.error('Error fetching email templates:', error)\n      return []\n    }\n  }\n\n  async scheduleEmail(config: EmailNotificationConfig): Promise<boolean> {\n    if (!config.scheduledAt) {\n      throw new Error('scheduledAt is required for scheduled emails')\n    }\n\n    try {\n      const response = await fetch('/api/notifications/email/schedule', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(config),\n      })\n\n      if (!response.ok) {\n        throw new Error('Error al programar email')\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error scheduling email:', error)\n      return false\n    }\n  }\n}\n\n// Instancia singleton para uso global\nexport const emailService = EmailNotificationService.getInstance()\n\n// Funciones de conveniencia\nexport const sendOrderConfirmation = (\n  orderData: Parameters<EmailNotificationService['sendOrderConfirmation']>[0]\n) => emailService.sendOrderConfirmation(orderData)\n\nexport const sendShippingNotification = (\n  shippingData: Parameters<EmailNotificationService['sendShippingNotification']>[0]\n) => emailService.sendShippingNotification(shippingData)\n\nexport const sendPasswordReset = (\n  userData: Parameters<EmailNotificationService['sendPasswordReset']>[0]\n) => emailService.sendPasswordReset(userData)\n\nexport const sendWelcomeEmail = (\n  userData: Parameters<EmailNotificationService['sendWelcomeEmail']>[0]\n) => emailService.sendWelcomeEmail(userData)\n\nexport const sendLowStockAlert = (\n  productData: Parameters<EmailNotificationService['sendLowStockAlert']>[0]\n) => emailService.sendLowStockAlert(productData)\n"],"names":["EmailNotificationService","emailService","sendLowStockAlert","sendOrderConfirmation","sendPasswordReset","sendShippingNotification","sendWelcomeEmail","getInstance","instance","sendNotification","config","response","fetch","apiEndpoint","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","toast","title","description","variant","orderData","to","customerEmail","subject","orderId","template","data","priority","shippingData","userData","email","productData","adminEmails","productName","sendOrderStatusUpdate","statusData","sendPromotionalEmail","promoData","recipients","getEmailTemplates","scheduleEmail","scheduledAt"],"mappings":"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"}