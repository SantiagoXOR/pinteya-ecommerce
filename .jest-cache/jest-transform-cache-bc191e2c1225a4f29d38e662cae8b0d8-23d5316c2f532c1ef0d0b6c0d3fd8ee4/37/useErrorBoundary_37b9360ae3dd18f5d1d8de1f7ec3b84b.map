{"version":3,"names":["cov_n6u8pe1zh","actualCoverage","s","useAsyncErrorBoundary","f","useCriticalErrorBoundary","useErrorBoundary","useErrorMetrics","options","b","onError","enableRetry","maxRetries","retryDelay","component","level","hasError","setHasError","_react","useState","error","setError","retryCount","setRetryCount","isRetrying","setIsRetrying","errorMetrics","setErrorMetrics","healthStatus","setHealthStatus","_errorboundarymanager","errorBoundaryManager","getHealthStatus","captureError","useCallback","context","errorId","Date","now","Math","random","toString","substr","reportError","console","retry","warn","delay","pow","Promise","resolve","setTimeout","prev","log","retryError","reset","useEffect","handleErrorUpdate","errorMetric","slice","addErrorListener","removeErrorListener","errorType","name","toLowerCase","includes","autoRetryDelay","timeoutId","clearTimeout","cleanup","clearOldErrors","intervalId","setInterval","clearInterval","asyncFn","dependencies","errorBoundary","data","setData","isLoading","setIsLoading","execute","result","onSuccess","operation","onFinally","errorInfo","window","fetch","method","headers","body","JSON","stringify","message","stack","timestamp","url","location","href","catch","metrics","setMetrics","getErrorMetrics","updateMetrics","refresh"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\error-boundary\\useErrorBoundary.ts"],"sourcesContent":["'use client';\r\n\r\n// ===================================\r\n// USE ERROR BOUNDARY HOOK\r\n// ===================================\r\n// Hook para manejo programático de errores y integración con Error Boundaries\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { errorBoundaryManager } from '@/lib/error-boundary/error-boundary-manager';\r\nimport type { ErrorMetrics } from '@/lib/error-boundary/error-boundary-manager';\r\n\r\n// ===================================\r\n// INTERFACES\r\n// ===================================\r\n\r\ninterface UseErrorBoundaryOptions {\r\n  onError?: (error: Error, errorInfo: any) => void;\r\n  enableRetry?: boolean;\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n  component?: string;\r\n  level?: 'page' | 'section' | 'component';\r\n}\r\n\r\ninterface UseErrorBoundaryReturn {\r\n  // Estado\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  retryCount: number;\r\n  isRetrying: boolean;\r\n  \r\n  // Acciones\r\n  captureError: (error: Error, context?: any) => void;\r\n  retry: () => void;\r\n  reset: () => void;\r\n  \r\n  // Métricas\r\n  errorMetrics: ErrorMetrics[];\r\n  healthStatus: ReturnType<typeof errorBoundaryManager.getHealthStatus>;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport const useErrorBoundary = (options: UseErrorBoundaryOptions = {}): UseErrorBoundaryReturn => {\r\n  const {\r\n    onError,\r\n    enableRetry = true,\r\n    maxRetries = 3,\r\n    retryDelay = 1000,\r\n    component = 'unknown',\r\n    level = 'component'\r\n  } = options;\r\n\r\n  // Estado local\r\n  const [hasError, setHasError] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const [isRetrying, setIsRetrying] = useState(false);\r\n  const [errorMetrics, setErrorMetrics] = useState<ErrorMetrics[]>([]);\r\n  const [healthStatus, setHealthStatus] = useState(errorBoundaryManager.getHealthStatus());\r\n\r\n  // ===================================\r\n  // CAPTURA DE ERRORES\r\n  // ===================================\r\n\r\n  const captureError = useCallback((error: Error, context: any = {}) => {\r\n    const errorId = `hook_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Actualizar estado local\r\n    setHasError(true);\r\n    setError(error);\r\n\r\n    // Reportar al manager\r\n    errorBoundaryManager.reportError(error, context, {\r\n      errorId,\r\n      level,\r\n      component,\r\n      retryCount\r\n    });\r\n\r\n    // Callback personalizado\r\n    if (onError) {\r\n      onError(error, { ...context, errorId, component, level });\r\n    }\r\n\r\n    console.error(`🚨 Error captured by useErrorBoundary (${component}):`, error);\r\n  }, [onError, level, component, retryCount]);\r\n\r\n  // ===================================\r\n  // MANEJO DE REINTENTOS\r\n  // ===================================\r\n\r\n  const retry = useCallback(async () => {\r\n    if (!enableRetry || retryCount >= maxRetries) {\r\n      console.warn('🔄 Retry not available or max retries reached');\r\n      return;\r\n    }\r\n\r\n    setIsRetrying(true);\r\n    \r\n    try {\r\n      // Esperar delay con backoff exponencial\r\n      const delay = retryDelay * Math.pow(2, retryCount);\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n\r\n      // Incrementar contador\r\n      setRetryCount(prev => prev + 1);\r\n      \r\n      // Reset error state\r\n      setHasError(false);\r\n      setError(null);\r\n      \r\n      console.log(`🔄 Retry attempt ${retryCount + 1} for component ${component}`);\r\n      \r\n    } catch (retryError) {\r\n      console.error('❌ Error during retry:', retryError);\r\n      captureError(retryError as Error, { context: 'retry_failed' });\r\n    } finally {\r\n      setIsRetrying(false);\r\n    }\r\n  }, [enableRetry, retryCount, maxRetries, retryDelay, component, captureError]);\r\n\r\n  // ===================================\r\n  // RESET\r\n  // ===================================\r\n\r\n  const reset = useCallback(() => {\r\n    setHasError(false);\r\n    setError(null);\r\n    setRetryCount(0);\r\n    setIsRetrying(false);\r\n    \r\n    console.log(`🔄 Error boundary reset for component ${component}`);\r\n  }, [component]);\r\n\r\n  // ===================================\r\n  // EFECTOS\r\n  // ===================================\r\n\r\n  // Listener para métricas de errores\r\n  useEffect(() => {\r\n    const handleErrorUpdate = (errorMetric: ErrorMetrics) => {\r\n      setErrorMetrics(prev => [errorMetric, ...prev.slice(0, 9)]); // Mantener últimos 10\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    };\r\n\r\n    errorBoundaryManager.addErrorListener(handleErrorUpdate);\r\n\r\n    return () => {\r\n      errorBoundaryManager.removeErrorListener(handleErrorUpdate);\r\n    };\r\n  }, []);\r\n\r\n  // Auto-retry para ciertos tipos de errores\r\n  useEffect(() => {\r\n    if (hasError && error && enableRetry && retryCount < maxRetries) {\r\n      const errorType = error.name.toLowerCase();\r\n      \r\n      // Auto-retry para errores de red\r\n      if (errorType.includes('network') || errorType.includes('fetch')) {\r\n        const autoRetryDelay = 2000 + (retryCount * 1000);\r\n        const timeoutId = setTimeout(retry, autoRetryDelay);\r\n        \r\n        return () => clearTimeout(timeoutId);\r\n      }\r\n    }\r\n  }, [hasError, error, enableRetry, retryCount, maxRetries, retry]);\r\n\r\n  // Cleanup de métricas antiguas\r\n  useEffect(() => {\r\n    const cleanup = () => {\r\n      errorBoundaryManager.clearOldErrors();\r\n    };\r\n\r\n    const intervalId = setInterval(cleanup, 60000); // Cada minuto\r\n    \r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado\r\n    hasError,\r\n    error,\r\n    retryCount,\r\n    isRetrying,\r\n    \r\n    // Acciones\r\n    captureError,\r\n    retry,\r\n    reset,\r\n    \r\n    // Métricas\r\n    errorMetrics,\r\n    healthStatus\r\n  };\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA ASYNC OPERATIONS\r\n// ===================================\r\n\r\ninterface UseAsyncErrorBoundaryOptions extends UseErrorBoundaryOptions {\r\n  onSuccess?: (data: any) => void;\r\n  onFinally?: () => void;\r\n}\r\n\r\nexport const useAsyncErrorBoundary = <T = any>(\r\n  asyncFn: () => Promise<T>,\r\n  dependencies: any[] = [],\r\n  options: UseAsyncErrorBoundaryOptions = {}\r\n) => {\r\n  const errorBoundary = useErrorBoundary(options);\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const execute = useCallback(async () => {\r\n    setIsLoading(true);\r\n    errorBoundary.reset();\r\n\r\n    try {\r\n      const result = await asyncFn();\r\n      setData(result);\r\n      \r\n      if (options.onSuccess) {\r\n        options.onSuccess(result);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      errorBoundary.captureError(error as Error, {\r\n        context: 'async_operation',\r\n        operation: asyncFn.name || 'anonymous'\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n      \r\n      if (options.onFinally) {\r\n        options.onFinally();\r\n      }\r\n    }\r\n  }, [asyncFn, errorBoundary, options]);\r\n\r\n  // Auto-execute en cambios de dependencias\r\n  useEffect(() => {\r\n    execute();\r\n  }, dependencies);\r\n\r\n  return {\r\n    ...errorBoundary,\r\n    data,\r\n    isLoading,\r\n    execute\r\n  };\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA COMPONENTES CRÍTICOS\r\n// ===================================\r\n\r\nexport const useCriticalErrorBoundary = (component: string) => {\r\n  return useErrorBoundary({\r\n    component,\r\n    level: 'page',\r\n    enableRetry: true,\r\n    maxRetries: 2,\r\n    retryDelay: 2000,\r\n    onError: (error, errorInfo) => {\r\n      // Reportar errores críticos inmediatamente\r\n      console.error(`🚨 CRITICAL ERROR in ${component}:`, error);\r\n      \r\n      // Enviar notificación urgente\r\n      if (typeof window !== 'undefined') {\r\n        fetch('/api/monitoring/critical-error', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            component,\r\n            error: {\r\n              name: error.name,\r\n              message: error.message,\r\n              stack: error.stack\r\n            },\r\n            errorInfo,\r\n            timestamp: Date.now(),\r\n            url: window.location.href\r\n          })\r\n        }).catch(console.error);\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// ===================================\r\n// HOOK PARA MÉTRICAS GLOBALES\r\n// ===================================\r\n\r\nexport const useErrorMetrics = () => {\r\n  const [metrics, setMetrics] = useState(errorBoundaryManager.getErrorMetrics());\r\n  const [healthStatus, setHealthStatus] = useState(errorBoundaryManager.getHealthStatus());\r\n\r\n  useEffect(() => {\r\n    const updateMetrics = () => {\r\n      setMetrics(errorBoundaryManager.getErrorMetrics());\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    };\r\n\r\n    // Actualizar métricas cada 30 segundos\r\n    const intervalId = setInterval(updateMetrics, 30000);\r\n    \r\n    // Listener para actualizaciones inmediatas\r\n    const handleErrorUpdate = () => {\r\n      updateMetrics();\r\n    };\r\n\r\n    errorBoundaryManager.addErrorListener(handleErrorUpdate);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      errorBoundaryManager.removeErrorListener(handleErrorUpdate);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    metrics,\r\n    healthStatus,\r\n    refresh: () => {\r\n      setMetrics(errorBoundaryManager.getErrorMetrics());\r\n      setHealthStatus(errorBoundaryManager.getHealthStatus());\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}