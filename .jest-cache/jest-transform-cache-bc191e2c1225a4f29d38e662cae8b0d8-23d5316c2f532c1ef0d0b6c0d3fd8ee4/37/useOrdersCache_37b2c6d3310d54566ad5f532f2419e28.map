{"version":3,"names":["cov_1gj0haahcs","actualCoverage","s","useOrdersCache","CACHE_CONFIG","MAX_SIZE","CLEANUP_INTERVAL","MIN_REQUEST_INTERVAL","cache","Map","pendingRequests","requestTimestamps","getCacheKey","filters","f","normalizedFilters","Object","keys","sort","reduce","result","key","value","b","undefined","JSON","stringify","cleanupExpiredCache","cacheTimeout","now","Date","expiredKeys","forEach","entry","timestamp","push","delete","size","entries","Array","from","a","toDelete","slice","process","env","NODE_ENV","console","log","expired","length","currentSize","maxSize","options","lastCleanupRef","_react","useRef","getCachedData","useCallback","enableCache","get","isExpired","substring","age","cacheSize","data","setCachedData","requestId","Math","random","toString","substr","set","current","cleanupInterval","clearCache","clear","isRequestTooRecent","lastRequestTime","timeSinceLastRequest","minRequestInterval","setPendingRequest","promise","finally","getPendingRequest","getCacheStats"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useOrdersCache.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ORDERS CACHE HOOK\r\n// Hook especializado para manejo de cache de órdenes\r\n// ===================================\r\n\r\nimport { useCallback, useRef } from 'react';\r\nimport { StrictOrdersListResponse } from '@/types/api-strict';\r\nimport { StrictOrderFilters } from './useOrdersEnterpriseStrict';\r\n\r\n// ===================================\r\n// TIPOS Y CONFIGURACIÓN\r\n// ===================================\r\n\r\ninterface CacheEntry {\r\n  data: StrictOrdersListResponse;\r\n  timestamp: number;\r\n  filters: StrictOrderFilters;\r\n  requestId: string;\r\n}\r\n\r\ninterface CacheOptions {\r\n  enableCache: boolean;\r\n  cacheTimeout: number;\r\n  maxSize?: number;\r\n  cleanupInterval?: number;\r\n  minRequestInterval?: number;\r\n}\r\n\r\n// Configuración de cache\r\nconst CACHE_CONFIG = {\r\n  MAX_SIZE: 50,\r\n  CLEANUP_INTERVAL: 10 * 60 * 1000, // 10 minutos\r\n  MIN_REQUEST_INTERVAL: 1000, // 1 segundo mínimo entre peticiones idénticas\r\n} as const;\r\n\r\n// ===================================\r\n// CACHE GLOBAL\r\n// ===================================\r\n\r\n// Cache compartido entre instancias del hook\r\nconst cache = new Map<string, CacheEntry>();\r\nconst pendingRequests = new Map<string, Promise<any>>();\r\nconst requestTimestamps = new Map<string, number>();\r\n\r\n// ===================================\r\n// UTILIDADES DE CACHE\r\n// ===================================\r\n\r\nfunction getCacheKey(filters: StrictOrderFilters): string {\r\n  // Crear clave más estable ordenando las propiedades y normalizando valores\r\n  const normalizedFilters = Object.keys(filters)\r\n    .sort()\r\n    .reduce((result, key) => {\r\n      const value = filters[key as keyof StrictOrderFilters];\r\n      // Normalizar valores para evitar claves duplicadas\r\n      if (value !== undefined && value !== null && value !== '' && value !== 'all') {\r\n        result[key] = value;\r\n      }\r\n      return result;\r\n    }, {} as any);\r\n  return JSON.stringify(normalizedFilters);\r\n}\r\n\r\nfunction cleanupExpiredCache(cacheTimeout: number): void {\r\n  const now = Date.now();\r\n  const expiredKeys: string[] = [];\r\n  \r\n  cache.forEach((entry, key) => {\r\n    if (now - entry.timestamp > cacheTimeout) {\r\n      expiredKeys.push(key);\r\n    }\r\n  });\r\n  \r\n  expiredKeys.forEach(key => {\r\n    cache.delete(key);\r\n    requestTimestamps.delete(key);\r\n  });\r\n  \r\n  // Limpiar cache si está muy grande\r\n  if (cache.size > CACHE_CONFIG.MAX_SIZE) {\r\n    const entries = Array.from(cache.entries());\r\n    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n    \r\n    const toDelete = entries.slice(0, cache.size - CACHE_CONFIG.MAX_SIZE);\r\n    toDelete.forEach(([key]) => {\r\n      cache.delete(key);\r\n      requestTimestamps.delete(key);\r\n    });\r\n  }\r\n  \r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log('[useOrdersCache] Cache cleanup completed:', {\r\n      expired: expiredKeys.length,\r\n      currentSize: cache.size,\r\n      maxSize: CACHE_CONFIG.MAX_SIZE\r\n    });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// HOOK DE CACHE\r\n// ===================================\r\n\r\nexport interface UseOrdersCacheReturn {\r\n  getCachedData: (filters: StrictOrderFilters) => StrictOrdersListResponse | null;\r\n  setCachedData: (filters: StrictOrderFilters, data: StrictOrdersListResponse) => void;\r\n  clearCache: () => void;\r\n  isRequestTooRecent: (filters: StrictOrderFilters) => boolean;\r\n  setPendingRequest: (filters: StrictOrderFilters, promise: Promise<any>) => void;\r\n  getPendingRequest: (filters: StrictOrderFilters) => Promise<any> | null;\r\n  getCacheStats: () => { size: number; maxSize: number; pendingRequests: number };\r\n}\r\n\r\nexport function useOrdersCache(options: CacheOptions): UseOrdersCacheReturn {\r\n  const lastCleanupRef = useRef<number>(Date.now());\r\n  \r\n  const getCachedData = useCallback((filters: StrictOrderFilters): StrictOrdersListResponse | null => {\r\n    if (!options.enableCache) {return null;}\r\n    \r\n    const key = getCacheKey(filters);\r\n    const entry = cache.get(key);\r\n    \r\n    if (!entry) {return null;}\r\n    \r\n    const isExpired = Date.now() - entry.timestamp > options.cacheTimeout;\r\n    if (isExpired) {\r\n      cache.delete(key);\r\n      requestTimestamps.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    // Log de cache hit en desarrollo\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[useOrdersCache] Cache hit:', { \r\n        key: key.substring(0, 100) + '...', \r\n        age: Date.now() - entry.timestamp,\r\n        cacheSize: cache.size \r\n      });\r\n    }\r\n    \r\n    return entry.data;\r\n  }, [options.enableCache, options.cacheTimeout]);\r\n  \r\n  const setCachedData = useCallback((filters: StrictOrderFilters, data: StrictOrdersListResponse): void => {\r\n    if (!options.enableCache) {return;}\r\n    \r\n    const key = getCacheKey(filters);\r\n    const requestId = Math.random().toString(36).substr(2, 9);\r\n    \r\n    cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      filters,\r\n      requestId\r\n    });\r\n    \r\n    requestTimestamps.set(key, Date.now());\r\n    \r\n    // Cleanup automático periódico\r\n    const now = Date.now();\r\n    if (now - lastCleanupRef.current > (options.cleanupInterval || CACHE_CONFIG.CLEANUP_INTERVAL)) {\r\n      cleanupExpiredCache(options.cacheTimeout);\r\n      lastCleanupRef.current = now;\r\n    }\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[useOrdersCache] Data cached:', {\r\n        key: key.substring(0, 100) + '...',\r\n        cacheSize: cache.size,\r\n        requestId\r\n      });\r\n    }\r\n  }, [options.enableCache, options.cacheTimeout, options.cleanupInterval]);\r\n  \r\n  const clearCache = useCallback((): void => {\r\n    cache.clear();\r\n    pendingRequests.clear();\r\n    requestTimestamps.clear();\r\n    \r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('[useOrdersCache] Cache cleared');\r\n    }\r\n  }, []);\r\n  \r\n  const isRequestTooRecent = useCallback((filters: StrictOrderFilters): boolean => {\r\n    const key = getCacheKey(filters);\r\n    const lastRequestTime = requestTimestamps.get(key);\r\n    \r\n    if (!lastRequestTime) {return false;}\r\n    \r\n    const timeSinceLastRequest = Date.now() - lastRequestTime;\r\n    return timeSinceLastRequest < (options.minRequestInterval || CACHE_CONFIG.MIN_REQUEST_INTERVAL);\r\n  }, [options.minRequestInterval]);\r\n  \r\n  const setPendingRequest = useCallback((filters: StrictOrderFilters, promise: Promise<any>): void => {\r\n    const key = getCacheKey(filters);\r\n    pendingRequests.set(key, promise);\r\n    \r\n    // Limpiar cuando la promesa se resuelve\r\n    promise.finally(() => {\r\n      pendingRequests.delete(key);\r\n    });\r\n  }, []);\r\n  \r\n  const getPendingRequest = useCallback((filters: StrictOrderFilters): Promise<any> | null => {\r\n    const key = getCacheKey(filters);\r\n    return pendingRequests.get(key) || null;\r\n  }, []);\r\n  \r\n  const getCacheStats = useCallback(() => ({\r\n    size: cache.size,\r\n    maxSize: options.maxSize || CACHE_CONFIG.MAX_SIZE,\r\n    pendingRequests: pendingRequests.size\r\n  }), [options.maxSize]);\r\n  \r\n  return {\r\n    getCachedData,\r\n    setCachedData,\r\n    clearCache,\r\n    isRequestTooRecent,\r\n    setPendingRequest,\r\n    getPendingRequest,\r\n    getCacheStats\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}