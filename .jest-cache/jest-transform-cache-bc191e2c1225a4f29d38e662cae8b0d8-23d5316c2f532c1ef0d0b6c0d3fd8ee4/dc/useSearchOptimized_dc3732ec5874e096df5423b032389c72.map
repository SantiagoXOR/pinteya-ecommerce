{"version":3,"names":["default","cov_h8yk55n0a","f","s","_default","useSearchOptimized","options","b","debounceMs","maxSuggestions","searchLimit","saveRecentSearches","enablePrefetch","onSearch","onSuggestionSelect","query","setQuery","_react","useState","debouncedQuery","setDebouncedQuery","recentSearches","setRecentSearches","hasSearched","setHasSearched","queryClient","_reactquery","useQueryClient","errorHandler","_useSearchErrorHandler","useSearchErrorHandler","toastHandler","_useSearchToast","useSearchToast","navigation","_useSearchNavigation","useSearchNavigation","scrollToTop","onBeforeNavigate","url","console","log","onAfterNavigate","trendingSearches","trackSearch","_useTrendingSearches","useTrendingSearches","limit","enabled","process","env","NODE_ENV","length","trendingSearchesData","map","t","id","recentSearchesList","addSearch","addRecentSearch","getRecentSearches","_useRecentSearches","useRecentSearches","maxSearches","_shop","SEARCH_CONSTANTS","MAX_RECENT_SEARCHES","enablePersistence","expirationDays","RECENT_SEARCHES_EXPIRATION_DAYS","updateDebouncedQuery","_usedebounce","useDebouncedCallback","value","trim","NEXT_PUBLIC_DEBUG_SEARCH","maxWait","leading","trailing","data","searchResults","isLoading","error","isFetching","isStale","dataUpdatedAt","useQuery","queryKey","_queryclient","searchQueryKeys","search","queryFn","signal","searchQuery","encodeURIComponent","response","fetch","method","headers","ok","status","Error","json","products","searchQueryConfig","suggestions","useMemo","allSuggestions","hasQuery","Array","isArray","productSuggestions","product","toString","type","title","name","subtitle","category","image","images","previews","thumbnails","badge","stock","href","push","hasData","hasProducts","dataLength","productsLength","keys","Object","recentSuggestions","index","remainingSlots","trendingSuggestions","slice","trending","count","undefined","finalSuggestions","searchWithDebounce","useCallback","prefetchQuery","_products","searchProducts","prefetchSearch","executeSearch","catch","warn","navigateToSearch","showSuccessToast","handleError","selectSuggestion","suggestion","navigateToProduct","showInfoToast","clearSearch","removeQueries","searches","initialize","saved","localStorage","getItem","includes","removeItem","parsed","JSON","parse","cleanup","cancel","useEffect","results","message","searchError","currentError","isRetrying","retryCount","toasts","clearError","retryManually","removeToast","clearToasts","invalidateSearch","invalidateQueries","navigateToCategory","prefetchSearchPage","prefetchProductPage","prefetchProduct","getCurrentSearchQuery","buildSearchUrl"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useSearchOptimized.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useSearchOptimized - Sistema de b√∫squeda con TanStack Query\r\n// ===================================\r\n\r\nimport { useState, useCallback, useEffect, useRef, useMemo } from 'react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { useDebouncedCallback } from 'use-debounce';\r\nimport { searchProducts } from '@/lib/api/products';\r\nimport { ProductWithCategory } from '@/types/api';\r\nimport { searchQueryKeys, searchQueryConfig } from '@/lib/query-client';\r\nimport { useSearchErrorHandler } from './useSearchErrorHandler';\r\nimport { useSearchToast } from './useSearchToast';\r\nimport { useSearchNavigation } from './useSearchNavigation';\r\nimport { useTrendingSearches } from './useTrendingSearches';\r\nimport { useRecentSearches } from './useRecentSearches';\r\nimport { SEARCH_CONSTANTS } from '@/constants/shop';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface SearchSuggestion {\r\n  id: string;\r\n  type: 'product' | 'category' | 'recent' | 'trending';\r\n  title: string;\r\n  subtitle?: string;\r\n  image?: string;\r\n  badge?: string;\r\n  href: string;\r\n}\r\n\r\nexport interface UseSearchOptimizedOptions {\r\n  /** Tiempo de debounce en milisegundos */\r\n  debounceMs?: number;\r\n  /** N√∫mero m√°ximo de sugerencias */\r\n  maxSuggestions?: number;\r\n  /** L√≠mite de resultados de b√∫squeda */\r\n  searchLimit?: number;\r\n  /** Guardar b√∫squedas recientes */\r\n  saveRecentSearches?: boolean;\r\n  /** Habilitar prefetch de sugerencias */\r\n  enablePrefetch?: boolean;\r\n  /** Callback cuando se realiza una b√∫squeda */\r\n  onSearch?: (query: string, results: ProductWithCategory[]) => void;\r\n  /** Callback cuando se selecciona una sugerencia */\r\n  onSuggestionSelect?: (suggestion: SearchSuggestion) => void;\r\n}\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useSearchOptimized(options: UseSearchOptimizedOptions = {}) {\r\n  const {\r\n    debounceMs = 150,\r\n    maxSuggestions = 6,\r\n    searchLimit = 12,\r\n    saveRecentSearches = true,\r\n    enablePrefetch = true,\r\n    onSearch,\r\n    onSuggestionSelect,\r\n  } = options;\r\n\r\n  // Estados locales\r\n  const [query, setQuery] = useState('');\r\n  const [debouncedQuery, setDebouncedQuery] = useState('');\r\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n\r\n  // Hooks externos\r\n  const queryClient = useQueryClient();\r\n  const errorHandler = useSearchErrorHandler();\r\n  const toastHandler = useSearchToast();\r\n  const navigation = useSearchNavigation({\r\n    scrollToTop: true,\r\n    onBeforeNavigate: (url) => console.log('üîç Navegando a:', url),\r\n    onAfterNavigate: (url) => console.log('‚úÖ Navegaci√≥n completada:', url),\r\n  });\r\n\r\n  // Hooks para trending y recent searches\r\n  const { trendingSearches, trackSearch } = useTrendingSearches({\r\n    limit: 4,\r\n    enabled: true\r\n  });\r\n\r\n  // Debug para trending searches\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log('üî• useSearchOptimized: Trending searches state:', {\r\n      trendingSearches: trendingSearches?.length || 0,\r\n      trendingSearchesData: trendingSearches?.map(t => ({ id: t.id, query: t.query })) || []\r\n    });\r\n  }\r\n\r\n  const {\r\n    recentSearches: recentSearchesList,\r\n    addSearch: addRecentSearch,\r\n    getRecentSearches\r\n  } = useRecentSearches({\r\n    maxSearches: SEARCH_CONSTANTS.MAX_RECENT_SEARCHES,\r\n    enablePersistence: saveRecentSearches,\r\n    expirationDays: SEARCH_CONSTANTS.RECENT_SEARCHES_EXPIRATION_DAYS\r\n  });\r\n\r\n  // ===================================\r\n  // DEBOUNCED QUERY UPDATE\r\n  // ===================================\r\n\r\n  const updateDebouncedQuery = useDebouncedCallback(\r\n    (value: string) => {\r\n      setDebouncedQuery(value);\r\n\r\n      // Analytics tracking\r\n      if (value.trim() && process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n        console.log('üîç useSearchOptimized: Query enabled condition will be:', !!value?.trim());\r\n      }\r\n    },\r\n    debounceMs,\r\n    {\r\n      maxWait: 2000,\r\n      leading: false,\r\n      trailing: true,\r\n    }\r\n  );\r\n\r\n  // ===================================\r\n  // TANSTACK QUERY INTEGRATION\r\n  // ===================================\r\n\r\n  // Query principal para b√∫squedas\r\n  const { \r\n    data: searchResults, \r\n    isLoading, \r\n    error, \r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt \r\n  } = useQuery({\r\n    queryKey: searchQueryKeys.search(debouncedQuery),\r\n    queryFn: async ({ queryKey, signal }) => {\r\n      const [, , searchQuery] = queryKey;\r\n      if (!searchQuery?.trim()) {return [];}\r\n\r\n\r\n      try {\r\n        // Usar la API de b√∫squeda correcta\r\n        const url = `/api/search?q=${encodeURIComponent(searchQuery)}&limit=${maxSuggestions}`;\r\n\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          signal, // Usar AbortController\r\n        });\r\n\r\n        if (!response.ok) {\r\n          console.error('üîç useSearchOptimized: API response not ok:', response.status);\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data.products || [];\r\n      } catch (error) {\r\n        console.error('üîç useSearchOptimized: API call failed:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    enabled: !!debouncedQuery?.trim() && debouncedQuery.length >= 2,\r\n    ...searchQueryConfig,\r\n  });\r\n\r\n  // ===================================\r\n  // SUGGESTIONS GENERATION\r\n  // ===================================\r\n\r\n  if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n    console.log('üîç useSearchOptimized: Current state before suggestions:', {\r\n      query,\r\n      debouncedQuery,\r\n      searchResults: searchResults?.length || 0,\r\n      isLoading,\r\n      error: !!error\r\n    });\r\n  }\r\n\r\n  const suggestions: SearchSuggestion[] = useMemo(() => {\r\n    const allSuggestions: SearchSuggestion[] = [];\r\n    const hasQuery = !!debouncedQuery?.trim();\r\n\r\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n      console.log('üîç useSearchOptimized: query (current):', `\"${query}\"`);\r\n      console.log('üîç useSearchOptimized: searchResults isArray:', Array.isArray(searchResults));\r\n    }\r\n\r\n    if (hasQuery) {\r\n      // CUANDO HAY TEXTO: Priorizar productos SIEMPRE\r\n\r\n      // Extraer productos de la respuesta de la API\r\n      let products = [];\r\n\r\n      // Si searchResults es un array directamente\r\n      if (Array.isArray(searchResults)) {\r\n        products = searchResults;\r\n      }\r\n      // Si searchResults es un objeto con propiedad data (respuesta de API)\r\n      else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.data)) {\r\n        products = searchResults.data;\r\n      }\r\n      // Si searchResults es un objeto con propiedad products\r\n      else if (searchResults && typeof searchResults === 'object' && Array.isArray(searchResults.products)) {\r\n        products = searchResults.products;\r\n      }\r\n\r\n      if (products.length > 0) {\r\n        const productSuggestions = products.map((product: ProductWithCategory) => {\r\n          return {\r\n            id: product.id.toString(),\r\n            type: 'product' as const,\r\n            title: product.name,\r\n            subtitle: product.category?.name,\r\n            image: product.images?.previews?.[0] || product.images?.thumbnails?.[0],\r\n            badge: product.stock > 0 ? 'En stock' : 'Sin stock',\r\n            href: `/products/${product.id}`,\r\n          };\r\n        });\r\n        allSuggestions.push(...productSuggestions);\r\n      } else {\r\n        if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n          console.log('üîç useSearchOptimized: searchResults structure:', {\r\n            isArray: Array.isArray(searchResults),\r\n            hasData: searchResults?.data ? 'yes' : 'no',\r\n            hasProducts: searchResults?.products ? 'yes' : 'no',\r\n            dataLength: searchResults?.data?.length,\r\n            productsLength: searchResults?.products?.length,\r\n            keys: searchResults ? Object.keys(searchResults) : 'null'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Solo agregar recent/trending si hay muy pocos productos\r\n      if (allSuggestions.length < 2) {\r\n        const recentSuggestions = getRecentSearches(2).map((search, index) => ({\r\n          id: `recent-${index}`,\r\n          type: 'recent' as const,\r\n          title: search,\r\n          href: `/shop?q=${encodeURIComponent(search)}`,\r\n        }));\r\n        allSuggestions.push(...recentSuggestions);\r\n      }\r\n    } else {\r\n      // CUANDO NO HAY TEXTO: Mostrar trending y recent\r\n\r\n      // Agregar b√∫squedas recientes primero\r\n      const recentSuggestions = getRecentSearches(3).map((search, index) => ({\r\n        id: `recent-${index}`,\r\n        type: 'recent' as const,\r\n        title: search,\r\n        href: `/shop?q=${encodeURIComponent(search)}`,\r\n      }));\r\n      allSuggestions.push(...recentSuggestions);\r\n\r\n      // Agregar trending searches\r\n      if (allSuggestions.length < maxSuggestions) {\r\n        const remainingSlots = maxSuggestions - allSuggestions.length;\r\n        const trendingSuggestions = trendingSearches.slice(0, remainingSlots).map(trending => ({\r\n          id: trending.id,\r\n          type: 'trending' as const,\r\n          title: trending.query,\r\n          href: trending.href,\r\n          badge: trending.count ? `${trending.count}` : undefined\r\n        }));\r\n        allSuggestions.push(...trendingSuggestions);\r\n      }\r\n    }\r\n\r\n    const finalSuggestions = allSuggestions.slice(0, maxSuggestions);\r\n    if (process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_DEBUG_SEARCH === 'true') {\r\n      console.log('üîç useSearchOptimized: Final suggestions types:', finalSuggestions.map(s => s.type));\r\n      console.log('üîç useSearchOptimized: Final suggestions titles:', finalSuggestions.map(s => s.title));\r\n    }\r\n\r\n    return finalSuggestions;\r\n  }, [debouncedQuery, searchResults, isLoading, error, maxSuggestions, trendingSearches]);\r\n\r\n\r\n  // ===================================\r\n  // SEARCH FUNCTIONS\r\n  // ===================================\r\n\r\n  const searchWithDebounce = useCallback((searchQuery: string) => {\r\n    setQuery(searchQuery);\r\n    updateDebouncedQuery(searchQuery);\r\n\r\n    // Prefetch si est√° habilitado y la query es v√°lida\r\n    if (enablePrefetch && searchQuery.trim().length >= 1) {\r\n      // Prefetch de datos de b√∫squeda\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      });\r\n\r\n      // Prefetch de p√°gina de resultados\r\n      navigation.prefetchSearch(searchQuery.trim());\r\n    }\r\n  }, [updateDebouncedQuery, enablePrefetch, queryClient, maxSuggestions, navigation]);\r\n\r\n  const executeSearch = useCallback(async (searchQuery: string) => {\r\n    if (!searchQuery.trim()) {return;}\r\n\r\n    try {\r\n      setHasSearched(true);\r\n      \r\n      // Guardar en historial usando el hook\r\n      if (saveRecentSearches) {\r\n        addRecentSearch(searchQuery.trim());\r\n      }\r\n\r\n      // Registrar en trending searches\r\n      trackSearch(searchQuery.trim()).catch(console.warn);\r\n\r\n      // Navegar a p√°gina de resultados usando navegaci√≥n optimizada\r\n      navigation.navigateToSearch(searchQuery.trim());\r\n\r\n      // Callback externo\r\n      if (onSearch && searchResults) {\r\n        onSearch(searchQuery, searchResults);\r\n      }\r\n\r\n      toastHandler.showSuccessToast(searchQuery, searchResults?.length || 0);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå useSearchOptimized: Error en executeSearch:', error);\r\n      errorHandler.handleError(error);\r\n    }\r\n  }, [saveRecentSearches, recentSearches, navigation, onSearch, searchResults, toastHandler, errorHandler]);\r\n\r\n  const selectSuggestion = useCallback((suggestion: SearchSuggestion) => {\r\n\r\n    // Navegar seg√∫n el tipo de sugerencia\r\n    if (suggestion.type === 'product') {\r\n      navigation.navigateToProduct(suggestion.id);\r\n    } else {\r\n      // Para b√∫squedas recientes o trending, navegar a b√∫squeda\r\n      navigation.navigateToSearch(suggestion.title);\r\n    }\r\n\r\n    // Callback externo\r\n    if (onSuggestionSelect) {\r\n      onSuggestionSelect(suggestion);\r\n    }\r\n\r\n    toastHandler.showInfoToast(`${suggestion.type === 'product' ? 'Producto' : 'B√∫squeda'} seleccionado`, suggestion.title);\r\n  }, [navigation, onSuggestionSelect, toastHandler]);\r\n\r\n  const clearSearch = useCallback(() => {\r\n    setQuery('');\r\n    setDebouncedQuery('');\r\n    setHasSearched(false);\r\n    \r\n    // Limpiar cache de b√∫squedas si es necesario\r\n    queryClient.removeQueries({ queryKey: searchQueryKeys.searches() });\r\n  }, [queryClient]);\r\n\r\n  // ===================================\r\n  // LIFECYCLE\r\n  // ===================================\r\n\r\n  const initialize = useCallback(() => {\r\n    // Cargar b√∫squedas recientes\r\n    if (saveRecentSearches) {\r\n      try {\r\n        const saved = localStorage.getItem('pinteya-recent-searches');\r\n        if (saved && saved.trim() !== '' && saved !== '\"\"' && saved !== \"''\") {\r\n          // Validar que no est√© corrupto\r\n          if (saved.includes('\"\"') && saved.length < 5) {\r\n            console.warn('Detected corrupted recent searches data, cleaning up');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n            return;\r\n          }\r\n\r\n          const parsed = JSON.parse(saved);\r\n          // Verificar que sea un array v√°lido\r\n          if (Array.isArray(parsed)) {\r\n            setRecentSearches(parsed);\r\n          } else {\r\n            console.warn('Invalid recent searches format, resetting');\r\n            localStorage.removeItem('pinteya-recent-searches');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error cargando b√∫squedas recientes:', error);\r\n        // Limpiar datos corruptos\r\n        localStorage.removeItem('pinteya-recent-searches');\r\n      }\r\n    }\r\n  }, [saveRecentSearches]);\r\n\r\n  const cleanup = useCallback(() => {\r\n    // Limpiar debounce y cache si es necesario\r\n    updateDebouncedQuery.cancel();\r\n  }, [updateDebouncedQuery]);\r\n\r\n  // Inicializar al montar\r\n  useEffect(() => {\r\n    initialize();\r\n    return cleanup;\r\n  }, [initialize, cleanup]);\r\n\r\n  // ===================================\r\n  // RETURN\r\n  // ===================================\r\n\r\n  return {\r\n    // Estado de b√∫squeda\r\n    query,\r\n    results: searchResults || [],\r\n    suggestions,\r\n    isLoading,\r\n    error: error?.message || null,\r\n    hasSearched,\r\n    recentSearches: recentSearchesList,\r\n    trendingSearches,\r\n\r\n    // Estados de TanStack Query\r\n    isFetching,\r\n    isStale,\r\n    dataUpdatedAt,\r\n\r\n    // Estado de errores y toasts\r\n    searchError: errorHandler.currentError,\r\n    isRetrying: errorHandler.isRetrying,\r\n    retryCount: errorHandler.retryCount,\r\n    toasts: toastHandler.toasts,\r\n\r\n    // Funciones principales\r\n    searchWithDebounce,\r\n    executeSearch,\r\n    selectSuggestion,\r\n    clearSearch,\r\n    initialize,\r\n    cleanup,\r\n\r\n    // Funciones de manejo de errores\r\n    clearError: errorHandler.clearError,\r\n    retryManually: errorHandler.retryManually,\r\n\r\n    // Funciones de toast\r\n    removeToast: toastHandler.removeToast,\r\n    clearToasts: toastHandler.clearToasts,\r\n\r\n    // Utilidades de cache\r\n    invalidateSearch: (searchQuery: string) =>\r\n      queryClient.invalidateQueries({ queryKey: searchQueryKeys.search(searchQuery) }),\r\n    prefetchSearch: (searchQuery: string) =>\r\n      queryClient.prefetchQuery({\r\n        queryKey: searchQueryKeys.search(searchQuery),\r\n        queryFn: () => searchProducts(searchQuery, maxSuggestions),\r\n        ...searchQueryConfig,\r\n      }),\r\n\r\n    // Funciones de navegaci√≥n optimizada\r\n    navigateToSearch: navigation.navigateToSearch,\r\n    navigateToProduct: navigation.navigateToProduct,\r\n    navigateToCategory: navigation.navigateToCategory,\r\n    prefetchSearchPage: navigation.prefetchSearch,\r\n    prefetchProductPage: navigation.prefetchProduct,\r\n    getCurrentSearchQuery: navigation.getCurrentSearchQuery,\r\n    buildSearchUrl: navigation.buildSearchUrl,\r\n  };\r\n}\r\n\r\nexport default useSearchOptimized;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}