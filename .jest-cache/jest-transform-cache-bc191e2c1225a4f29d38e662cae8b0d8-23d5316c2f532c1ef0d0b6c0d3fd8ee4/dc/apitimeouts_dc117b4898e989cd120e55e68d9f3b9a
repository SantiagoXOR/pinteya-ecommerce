bffc6da7a7fe0b9185dbfd90c452467b
// ===================================
// PINTEYA E-COMMERCE - CONFIGURACIÓN CENTRALIZADA DE TIMEOUTS
// ===================================
// Configuración centralizada para todos los timeouts de APIs
// con valores por defecto y variables de entorno
// ===================================
// TIPOS Y INTERFACES
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get API_TIMEOUTS () {
        return API_TIMEOUTS;
    },
    get ENDPOINT_TIMEOUTS () {
        return ENDPOINT_TIMEOUTS;
    },
    get createTimeoutController () {
        return createTimeoutController;
    },
    get fetchWithTimeout () {
        return fetchWithTimeout;
    },
    get getEndpointTimeouts () {
        return getEndpointTimeouts;
    },
    get getTimeout () {
        return getTimeout;
    },
    get logTimeoutConfig () {
        return logTimeoutConfig;
    },
    get validateTimeoutConfig () {
        return validateTimeoutConfig;
    },
    get withDatabaseTimeout () {
        return withDatabaseTimeout;
    },
    get withExternalTimeout () {
        return withExternalTimeout;
    },
    get withTimeout () {
        return withTimeout;
    }
});
// ===================================
// CONFIGURACIÓN BASE DE TIMEOUTS
// ===================================
const DEFAULT_TIMEOUTS = {
    // Timeout por defecto para operaciones generales
    default: 30000,
    // Timeout para operaciones de base de datos
    database: 15000,
    // Timeout para APIs externas (MercadoPago, etc.)
    external: 45000,
    // Timeout para uploads de archivos
    upload: 120000,
    // Timeout para operaciones de pago
    payment: 60000,
    // Timeout para operaciones de autenticación
    auth: 20000,
    // Timeout para operaciones administrativas
    admin: 45000,
    // Timeout para webhooks
    webhook: 10000,
    // Timeout para envío de emails
    email: 30000,
    // Timeout para procesamiento de imágenes
    image: 90000
};
// ===================================
// FUNCIÓN PARA OBTENER TIMEOUT DESDE ENV
// ===================================
function getTimeoutFromEnv(key, defaultValue) {
    const envValue = process.env[`API_TIMEOUT_${key.toUpperCase()}`];
    if (!envValue) {
        return defaultValue;
    }
    const parsed = parseInt(envValue, 10);
    if (isNaN(parsed) || parsed <= 0) {
        console.warn(`[TIMEOUT_CONFIG] Invalid timeout value for ${key}: ${envValue}, using default: ${defaultValue}`);
        return defaultValue;
    }
    return parsed;
}
const API_TIMEOUTS = {
    default: getTimeoutFromEnv('DEFAULT', DEFAULT_TIMEOUTS.default),
    database: getTimeoutFromEnv('DATABASE', DEFAULT_TIMEOUTS.database),
    external: getTimeoutFromEnv('EXTERNAL', DEFAULT_TIMEOUTS.external),
    upload: getTimeoutFromEnv('UPLOAD', DEFAULT_TIMEOUTS.upload),
    payment: getTimeoutFromEnv('PAYMENT', DEFAULT_TIMEOUTS.payment),
    auth: getTimeoutFromEnv('AUTH', DEFAULT_TIMEOUTS.auth),
    admin: getTimeoutFromEnv('ADMIN', DEFAULT_TIMEOUTS.admin),
    webhook: getTimeoutFromEnv('WEBHOOK', DEFAULT_TIMEOUTS.webhook),
    email: getTimeoutFromEnv('EMAIL', DEFAULT_TIMEOUTS.email),
    image: getTimeoutFromEnv('IMAGE', DEFAULT_TIMEOUTS.image)
};
const ENDPOINT_TIMEOUTS = {
    // APIs de productos
    '/api/products': {
        connection: 5000,
        request: API_TIMEOUTS.database,
        response: 10000,
        total: API_TIMEOUTS.database + 15000
    },
    // APIs de órdenes
    '/api/orders': {
        connection: 5000,
        request: API_TIMEOUTS.database,
        response: 15000,
        total: API_TIMEOUTS.database + 20000
    },
    // APIs de pagos
    '/api/payments': {
        connection: 10000,
        request: API_TIMEOUTS.payment,
        response: 20000,
        total: Math.max(API_TIMEOUTS.payment + 30000, API_TIMEOUTS.external)
    },
    // APIs de autenticación
    '/api/auth': {
        connection: 3000,
        request: API_TIMEOUTS.auth,
        response: 5000,
        total: API_TIMEOUTS.auth + 8000
    },
    // APIs administrativas
    '/api/admin': {
        connection: 5000,
        request: API_TIMEOUTS.admin,
        response: 15000,
        total: API_TIMEOUTS.admin + 20000
    },
    // Webhooks
    '/api/webhooks': {
        connection: 2000,
        request: API_TIMEOUTS.webhook,
        response: 3000,
        total: API_TIMEOUTS.webhook + 5000
    },
    // APIs de upload
    '/api/upload': {
        connection: 10000,
        request: API_TIMEOUTS.upload,
        response: 30000,
        total: API_TIMEOUTS.upload + 40000
    }
};
function getTimeout(type) {
    return API_TIMEOUTS[type];
}
function getEndpointTimeouts(path) {
    // Buscar coincidencia exacta primero
    if (ENDPOINT_TIMEOUTS[path]) {
        return ENDPOINT_TIMEOUTS[path];
    }
    // Buscar coincidencia por prefijo
    const matchingPath = Object.keys(ENDPOINT_TIMEOUTS).find((key)=>path.startsWith(key));
    if (matchingPath) {
        return ENDPOINT_TIMEOUTS[matchingPath];
    }
    // Fallback a timeouts por defecto
    return {
        connection: 5000,
        request: API_TIMEOUTS.default,
        response: 10000,
        total: API_TIMEOUTS.default
    };
}
function createTimeoutController(timeout) {
    const controller = new AbortController();
    const timeoutId = setTimeout(()=>{
        controller.abort();
    }, timeout);
    return {
        controller,
        timeoutId
    };
}
async function fetchWithTimeout(url, options = {}) {
    const timeout = options.timeout || API_TIMEOUTS.default;
    const { controller, timeoutId } = createTimeoutController(timeout);
    try {
        const response = await fetch(url, {
            ...options,
            signal: controller.signal
        });
        clearTimeout(timeoutId);
        return response;
    } catch (error) {
        clearTimeout(timeoutId);
        if (error instanceof Error && error.name === 'AbortError') {
            throw new Error(`Request timeout after ${timeout}ms`);
        }
        throw error;
    }
}
function withDatabaseTimeout(operation, timeout = API_TIMEOUTS.database) {
    const { controller, timeoutId } = createTimeoutController(timeout);
    return operation(controller.signal).finally(()=>clearTimeout(timeoutId));
}
function withExternalTimeout(operation, timeout = API_TIMEOUTS.external) {
    const { controller, timeoutId } = createTimeoutController(timeout);
    return operation(controller.signal).finally(()=>clearTimeout(timeoutId));
}
function withTimeout(operation, timeout = API_TIMEOUTS.default) {
    return new Promise((resolve, reject)=>{
        const timeoutId = setTimeout(()=>{
            reject(new Error(`Operation timeout after ${timeout}ms`));
        }, timeout);
        operation().then(resolve).catch(reject).finally(()=>clearTimeout(timeoutId));
    });
}
function logTimeoutConfig() {
    console.log('[TIMEOUT_CONFIG] Configuración de timeouts cargada:', {
        environment: process.env.NODE_ENV,
        timeouts: API_TIMEOUTS,
        customEnvVars: Object.keys(process.env).filter((key)=>key.startsWith('API_TIMEOUT_')).reduce((acc, key)=>{
            acc[key] = process.env[key];
            return acc;
        }, {})
    });
}
function validateTimeoutConfig() {
    const errors = [];
    Object.entries(API_TIMEOUTS).forEach(([key, value])=>{
        if (typeof value !== 'number' || value <= 0) {
            errors.push(`Invalid timeout for ${key}: ${value}`);
        }
        if (value > 300000) {
            // 5 minutos máximo
            errors.push(`Timeout too high for ${key}: ${value}ms (max: 300000ms)`);
        }
    });
    if (errors.length > 0) {
        console.error('[TIMEOUT_CONFIG] Validation errors:', errors);
        return false;
    }
    return true;
}
// ===================================
// INICIALIZACIÓN
// ===================================
// Validar configuración al cargar el módulo
if (process.env.NODE_ENV !== 'test') {
    validateTimeoutConfig();
    if (process.env.NODE_ENV === 'development') {
        logTimeoutConfig();
    }
}

//# sourceMappingURL=data:application/json;base64,