348e66e4930bc6f90202969a32da6ed4
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2ofg602dqh() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products-test\\route.ts";
  var hash = "bfe2f0b9e7dd3d31bc33709ba3179320aa7b18c1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products-test\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "8": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "9": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "10": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 57
        }
      },
      "13": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 87
        }
      },
      "14": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "15": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 32,
          column: 66
        }
      },
      "16": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 68
        }
      },
      "17": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 41
        }
      },
      "18": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "19": {
        start: {
          line: 41,
          column: 49
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "22": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 54
        }
      },
      "23": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "24": {
        start: {
          line: 69,
          column: 36
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "25": {
        start: {
          line: 69,
          column: 62
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "26": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "28": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "29": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "30": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 56
        }
      },
      "31": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 18
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 50
          },
          end: {
            line: 69,
            column: 51
          }
        },
        loc: {
          start: {
            line: 69,
            column: 62
          },
          end: {
            line: 75,
            column: 13
          }
        },
        line: 69
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 58
          }
        }, {
          start: {
            line: 32,
            column: 62
          },
          end: {
            line: 32,
            column: 65
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 60
          }
        }, {
          start: {
            line: 33,
            column: 64
          },
          end: {
            line: 33,
            column: 67
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 75,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 75,
            column: 15
          }
        }, {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 21
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 74,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 74,
            column: 55
          }
        }, {
          start: {
            line: 74,
            column: 59
          },
          end: {
            line: 74,
            column: 63
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 28
          }
        }, {
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 85,
            column: 33
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 43
          },
          end: {
            line: 89,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 43
          },
          end: {
            line: 89,
            column: 48
          }
        }, {
          start: {
            line: 89,
            column: 52
          },
          end: {
            line: 89,
            column: 53
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 102,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 102,
            column: 59
          }
        }, {
          start: {
            line: 102,
            column: 62
          },
          end: {
            line: 102,
            column: 77
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 103,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 44
          },
          end: {
            line: 103,
            column: 55
          }
        }, {
          start: {
            line: 103,
            column: 58
          },
          end: {
            line: 103,
            column: 67
          }
        }],
        line: 103
      },
      "9": {
        loc: {
          start: {
            line: 104,
            column: 18
          },
          end: {
            line: 104,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 43
          },
          end: {
            line: 104,
            column: 53
          }
        }, {
          start: {
            line: 104,
            column: 56
          },
          end: {
            line: 104,
            column: 70
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products-test\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\r\n\r\n/**\r\n * GET /api/admin/products-test\r\n * Minimal test API to isolate the authResult issue\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('\uD83E\uDDEA Products Test API: Starting...');\r\n\r\n    // Create Supabase client\r\n    const supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\n    // Get query parameters\r\n    const url = new URL(request.url);\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const limit = parseInt(url.searchParams.get('limit') || '5');\r\n    const offset = (page - 1) * limit;\r\n\r\n    console.log('\uD83E\uDDEA Products Test API: Query params', { page, limit, offset });\r\n\r\n    // Simple query\r\n    const { data: products, error, count } = await supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        price,\r\n        stock,\r\n        categories (\r\n          name\r\n        )\r\n      `, { count: 'exact' })\r\n      .range(offset, offset + limit - 1)\r\n      .order('created_at', { ascending: false });\r\n\r\n    console.log('\uD83E\uDDEA Products Test API: Query result', {\r\n      error: error?.message,\r\n      count,\r\n      productsLength: products?.length\r\n    });\r\n\r\n    if (error) {\r\n      console.error('\u274C Supabase error:', error);\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Database query failed',\r\n          details: error.message\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Transform products\r\n    const transformedProducts = products?.map(product => ({\r\n      id: product.id,\r\n      name: product.name,\r\n      price: product.price,\r\n      stock: product.stock,\r\n      category_name: product.categories?.name || null\r\n    })) || [];\r\n\r\n    console.log('\u2705 Products Test API: Success', {\r\n      total: count,\r\n      returned: transformedProducts.length\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Test API working correctly',\r\n      data: {\r\n        products: transformedProducts,\r\n        total: count || 0,\r\n        pagination: {\r\n          page,\r\n          limit,\r\n          totalPages: Math.ceil((count || 0) / limit)\r\n        }\r\n      },\r\n      meta: {\r\n        timestamp: new Date().toISOString(),\r\n        api: 'products-test',\r\n        version: '1.0.0'\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Fatal error in products test API:', error);\r\n    \r\n    // Detailed error logging\r\n    const errorDetails = {\r\n      message: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined,\r\n      name: error instanceof Error ? error.name : 'UnknownError'\r\n    };\r\n\r\n    console.error('\u274C Error details:', errorDetails);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Internal server error',\r\n        details: errorDetails.message,\r\n        debug: {\r\n          errorName: errorDetails.name,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "runtime", "supabaseUrl", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "supabaseServiceKey", "SUPABASE_SERVICE_ROLE_KEY", "request", "console", "log", "supabase", "createClient", "url", "URL", "page", "parseInt", "searchParams", "get", "limit", "offset", "data", "products", "error", "count", "from", "select", "range", "order", "ascending", "message", "productsLength", "length", "NextResponse", "json", "details", "status", "transformedProducts", "map", "product", "id", "name", "price", "stock", "category_name", "categories", "total", "returned", "success", "pagination", "totalPages", "Math", "ceil", "meta", "timestamp", "Date", "toISOString", "api", "version", "errorDetails", "Error", "stack", "undefined", "debug", "errorName"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bfe2f0b9e7dd3d31bc33709ba3179320aa7b18c1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ofg602dqh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ofg602dqh();
cov_2ofg602dqh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ofg602dqh().f[0]++;
  cov_2ofg602dqh().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ofg602dqh().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2ofg602dqh().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2ofg602dqh().f[1]++;
    cov_2ofg602dqh().s[4]++;
    return GET;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2ofg602dqh().f[2]++;
    cov_2ofg602dqh().s[5]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ofg602dqh().s[6]++, require("next/server"));
const _supabasejs =
/* istanbul ignore next */
(cov_2ofg602dqh().s[7]++, require("@supabase/supabase-js"));
const runtime =
/* istanbul ignore next */
(cov_2ofg602dqh().s[8]++, 'nodejs');
const supabaseUrl =
/* istanbul ignore next */
(cov_2ofg602dqh().s[9]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
const supabaseServiceKey =
/* istanbul ignore next */
(cov_2ofg602dqh().s[10]++, process.env.SUPABASE_SERVICE_ROLE_KEY);
async function GET(request) {
  /* istanbul ignore next */
  cov_2ofg602dqh().f[3]++;
  cov_2ofg602dqh().s[11]++;
  try {
    /* istanbul ignore next */
    cov_2ofg602dqh().s[12]++;
    console.log('ğ§ª Products Test API: Starting...');
    // Create Supabase client
    const supabase =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[13]++, (0, _supabasejs.createClient)(supabaseUrl, supabaseServiceKey));
    // Get query parameters
    const url =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[14]++, new URL(request.url));
    const page =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[15]++, parseInt(
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[0][0]++, url.searchParams.get('page')) ||
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[0][1]++, '1')));
    const limit =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[16]++, parseInt(
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[1][0]++, url.searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[1][1]++, '5')));
    const offset =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[17]++, (page - 1) * limit);
    /* istanbul ignore next */
    cov_2ofg602dqh().s[18]++;
    console.log('ğ§ª Products Test API: Query params', {
      page,
      limit,
      offset
    });
    // Simple query
    const {
      data: products,
      error,
      count
    } =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[19]++, await supabase.from('products').select(`
        id,
        name,
        price,
        stock,
        categories (
          name
        )
      `, {
      count: 'exact'
    }).range(offset, offset + limit - 1).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_2ofg602dqh().s[20]++;
    console.log('ğ§ª Products Test API: Query result', {
      error: error?.message,
      count,
      productsLength: products?.length
    });
    /* istanbul ignore next */
    cov_2ofg602dqh().s[21]++;
    if (error) {
      /* istanbul ignore next */
      cov_2ofg602dqh().b[2][0]++;
      cov_2ofg602dqh().s[22]++;
      console.error('â Supabase error:', error);
      /* istanbul ignore next */
      cov_2ofg602dqh().s[23]++;
      return _server.NextResponse.json({
        error: 'Database query failed',
        details: error.message
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ofg602dqh().b[2][1]++;
    }
    // Transform products
    const transformedProducts =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[24]++,
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[3][0]++, products?.map(product => {
      /* istanbul ignore next */
      cov_2ofg602dqh().f[4]++;
      cov_2ofg602dqh().s[25]++;
      return {
        id: product.id,
        name: product.name,
        price: product.price,
        stock: product.stock,
        category_name:
        /* istanbul ignore next */
        (cov_2ofg602dqh().b[4][0]++, product.categories?.name) ||
        /* istanbul ignore next */
        (cov_2ofg602dqh().b[4][1]++, null)
      };
    })) ||
    /* istanbul ignore next */
    (cov_2ofg602dqh().b[3][1]++, []));
    /* istanbul ignore next */
    cov_2ofg602dqh().s[26]++;
    console.log('â Products Test API: Success', {
      total: count,
      returned: transformedProducts.length
    });
    /* istanbul ignore next */
    cov_2ofg602dqh().s[27]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Test API working correctly',
      data: {
        products: transformedProducts,
        total:
        /* istanbul ignore next */
        (cov_2ofg602dqh().b[5][0]++, count) ||
        /* istanbul ignore next */
        (cov_2ofg602dqh().b[5][1]++, 0),
        pagination: {
          page,
          limit,
          totalPages: Math.ceil((
          /* istanbul ignore next */
          (cov_2ofg602dqh().b[6][0]++, count) ||
          /* istanbul ignore next */
          (cov_2ofg602dqh().b[6][1]++, 0)) / limit)
        }
      },
      meta: {
        timestamp: new Date().toISOString(),
        api: 'products-test',
        version: '1.0.0'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ofg602dqh().s[28]++;
    console.error('â Fatal error in products test API:', error);
    // Detailed error logging
    const errorDetails =
    /* istanbul ignore next */
    (cov_2ofg602dqh().s[29]++, {
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[7][1]++, 'Unknown error'),
      stack: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[8][0]++, error.stack) :
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[8][1]++, undefined),
      name: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[9][0]++, error.name) :
      /* istanbul ignore next */
      (cov_2ofg602dqh().b[9][1]++, 'UnknownError')
    });
    /* istanbul ignore next */
    cov_2ofg602dqh().s[30]++;
    console.error('â Error details:', errorDetails);
    /* istanbul ignore next */
    cov_2ofg602dqh().s[31]++;
    return _server.NextResponse.json({
      error: 'Internal server error',
      details: errorDetails.message,
      debug: {
        errorName: errorDetails.name,
        timestamp: new Date().toISOString()
      }
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,