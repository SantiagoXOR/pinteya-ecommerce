{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\contexts\\DriverContext.tsx"],"sourcesContent":["/**\r\n * Contexto global para la aplicación de drivers\r\n * Maneja estado de ubicación, rutas asignadas y sincronización en tiempo real\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\ninterface Driver {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  vehicle_type: string;\r\n  license_plate: string;\r\n  status: 'available' | 'busy' | 'offline';\r\n  current_location?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n}\r\n\r\ninterface RouteAssignment {\r\n  id: string;\r\n  name: string;\r\n  status: 'planned' | 'active' | 'completed';\r\n  shipments: any[];\r\n  waypoints: Array<{ lat: number; lng: number }>;\r\n  total_distance: number;\r\n  estimated_time: number;\r\n  optimization_score: number;\r\n}\r\n\r\ninterface DriverState {\r\n  driver: Driver | null;\r\n  currentRoute: RouteAssignment | null;\r\n  assignedRoutes: RouteAssignment[];\r\n  currentLocation: { lat: number; lng: number } | null;\r\n  isTracking: boolean;\r\n  isOnline: boolean;\r\n  notifications: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ntype DriverAction =\r\n  | { type: 'SET_DRIVER'; payload: Driver }\r\n  | { type: 'SET_CURRENT_ROUTE'; payload: RouteAssignment }\r\n  | { type: 'SET_ASSIGNED_ROUTES'; payload: RouteAssignment[] }\r\n  | { type: 'UPDATE_LOCATION'; payload: { lat: number; lng: number } }\r\n  | { type: 'SET_TRACKING'; payload: boolean }\r\n  | { type: 'SET_ONLINE'; payload: boolean }\r\n  | { type: 'ADD_NOTIFICATION'; payload: any }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'COMPLETE_DELIVERY'; payload: string }\r\n  | { type: 'START_ROUTE'; payload: string }\r\n  | { type: 'COMPLETE_ROUTE'; payload: string };\r\n\r\n// =====================================================\r\n// REDUCER\r\n// =====================================================\r\n\r\nconst initialState: DriverState = {\r\n  driver: null,\r\n  currentRoute: null,\r\n  assignedRoutes: [],\r\n  currentLocation: null,\r\n  isTracking: false,\r\n  isOnline: false,\r\n  notifications: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nfunction driverReducer(state: DriverState, action: DriverAction): DriverState {\r\n  switch (action.type) {\r\n    case 'SET_DRIVER':\r\n      return { ...state, driver: action.payload };\r\n    \r\n    case 'SET_CURRENT_ROUTE':\r\n      return { ...state, currentRoute: action.payload };\r\n    \r\n    case 'SET_ASSIGNED_ROUTES':\r\n      return { ...state, assignedRoutes: action.payload };\r\n    \r\n    case 'UPDATE_LOCATION':\r\n      return { \r\n        ...state, \r\n        currentLocation: action.payload,\r\n        driver: state.driver ? {\r\n          ...state.driver,\r\n          current_location: action.payload\r\n        } : null\r\n      };\r\n    \r\n    case 'SET_TRACKING':\r\n      return { ...state, isTracking: action.payload };\r\n    \r\n    case 'SET_ONLINE':\r\n      return { ...state, isOnline: action.payload };\r\n    \r\n    case 'ADD_NOTIFICATION':\r\n      return { \r\n        ...state, \r\n        notifications: [action.payload, ...state.notifications.slice(0, 9)]\r\n      };\r\n    \r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'START_ROUTE':\r\n      return {\r\n        ...state,\r\n        currentRoute: state.assignedRoutes.find(r => r.id === action.payload) || null,\r\n        assignedRoutes: state.assignedRoutes.map(route =>\r\n          route.id === action.payload\r\n            ? { ...route, status: 'active' as const }\r\n            : route\r\n        )\r\n      };\r\n    \r\n    case 'COMPLETE_ROUTE':\r\n      return {\r\n        ...state,\r\n        currentRoute: null,\r\n        assignedRoutes: state.assignedRoutes.map(route =>\r\n          route.id === action.payload\r\n            ? { ...route, status: 'completed' as const }\r\n            : route\r\n        )\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// CONTEXTO\r\n// =====================================================\r\n\r\ninterface DriverContextType {\r\n  state: DriverState;\r\n  dispatch: React.Dispatch<DriverAction>;\r\n  \r\n  // Acciones específicas\r\n  startLocationTracking: () => void;\r\n  stopLocationTracking: () => void;\r\n  updateDriverLocation: (location: { lat: number; lng: number }) => void;\r\n  startRoute: (routeId: string) => void;\r\n  completeRoute: (routeId: string) => void;\r\n  completeDelivery: (shipmentId: string) => void;\r\n  goOnline: () => void;\r\n  goOffline: () => void;\r\n}\r\n\r\nconst DriverContext = createContext<DriverContextType | undefined>(undefined);\r\n\r\n// =====================================================\r\n// PROVIDER\r\n// =====================================================\r\n\r\nexport function DriverProvider({ children }: { children: React.ReactNode }) {\r\n  const [state, dispatch] = useReducer(driverReducer, initialState);\r\n  const { data: session } = useSession();\r\n\r\n  // Inicializar driver al cargar\r\n  useEffect(() => {\r\n    if (session?.user?.email) {\r\n      loadDriverData();\r\n    }\r\n  }, [session]);\r\n\r\n  // Funciones del contexto\r\n  const loadDriverData = async () => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    try {\r\n      const response = await fetch('/api/driver/profile');\r\n      const data = await response.json();\r\n      \r\n      if (data.driver) {\r\n        dispatch({ type: 'SET_DRIVER', payload: data.driver });\r\n        dispatch({ type: 'SET_ASSIGNED_ROUTES', payload: data.routes || [] });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Error cargando datos del driver' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const startLocationTracking = () => {\r\n    if ('geolocation' in navigator) {\r\n      dispatch({ type: 'SET_TRACKING', payload: true });\r\n\r\n      // Intentar primero con alta precisión\r\n      const tryHighAccuracy = () => {\r\n        const watchId = navigator.geolocation.watchPosition(\r\n          (position) => {\r\n            const location = {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude\r\n            };\r\n            updateDriverLocation(location);\r\n          },\r\n          (error) => {\r\n            console.warn('High accuracy geolocation failed, trying standard accuracy:', error);\r\n            // Si falla con alta precisión, intentar con precisión estándar\r\n            tryStandardAccuracy();\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 10000,\r\n            maximumAge: 30000\r\n          }\r\n        );\r\n\r\n        // Guardar watchId para poder detener el tracking\r\n        (window as any).driverLocationWatchId = watchId;\r\n      };\r\n\r\n      // Función de respaldo con precisión estándar\r\n      const tryStandardAccuracy = () => {\r\n        const watchId = navigator.geolocation.watchPosition(\r\n          (position) => {\r\n            const location = {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude\r\n            };\r\n            updateDriverLocation(location);\r\n          },\r\n          (error) => {\r\n            console.error('Error tracking location:', error);\r\n            dispatch({ type: 'SET_ERROR', payload: 'Error obteniendo ubicación' });\r\n          },\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 10000,\r\n            maximumAge: 5000\r\n          }\r\n        );\r\n\r\n        // Guardar watchId para poder detener el tracking\r\n        (window as any).driverLocationWatchId = watchId;\r\n      };\r\n\r\n      // Iniciar con alta precisión\r\n      tryHighAccuracy();\r\n    }\r\n  };\r\n\r\n  const stopLocationTracking = () => {\r\n    dispatch({ type: 'SET_TRACKING', payload: false });\r\n    if ((window as any).driverLocationWatchId) {\r\n      navigator.geolocation.clearWatch((window as any).driverLocationWatchId);\r\n    }\r\n  };\r\n\r\n  const updateDriverLocation = async (location: { lat: number; lng: number }) => {\r\n    dispatch({ type: 'UPDATE_LOCATION', payload: location });\r\n    \r\n    // Enviar ubicación al servidor\r\n    try {\r\n      await fetch('/api/driver/location', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ location })\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating location:', error);\r\n    }\r\n  };\r\n\r\n  const startRoute = (routeId: string) => {\r\n    dispatch({ type: 'START_ROUTE', payload: routeId });\r\n    startLocationTracking();\r\n  };\r\n\r\n  const completeRoute = (routeId: string) => {\r\n    dispatch({ type: 'COMPLETE_ROUTE', payload: routeId });\r\n    stopLocationTracking();\r\n  };\r\n\r\n  const completeDelivery = (shipmentId: string) => {\r\n    dispatch({ type: 'COMPLETE_DELIVERY', payload: shipmentId });\r\n  };\r\n\r\n  const goOnline = () => {\r\n    dispatch({ type: 'SET_ONLINE', payload: true });\r\n    startLocationTracking();\r\n  };\r\n\r\n  const goOffline = () => {\r\n    dispatch({ type: 'SET_ONLINE', payload: false });\r\n    stopLocationTracking();\r\n  };\r\n\r\n  const contextValue: DriverContextType = {\r\n    state,\r\n    dispatch,\r\n    startLocationTracking,\r\n    stopLocationTracking,\r\n    updateDriverLocation,\r\n    startRoute,\r\n    completeRoute,\r\n    completeDelivery,\r\n    goOnline,\r\n    goOffline,\r\n  };\r\n\r\n  return (\r\n    <DriverContext.Provider value={contextValue}>\r\n      {children}\r\n    </DriverContext.Provider>\r\n  );\r\n}\r\n\r\n// =====================================================\r\n// HOOK\r\n// =====================================================\r\n\r\nexport function useDriver() {\r\n  const context = useContext(DriverContext);\r\n  if (context === undefined) {\r\n    throw new Error('useDriver must be used within a DriverProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["DriverProvider","useDriver","initialState","driver","currentRoute","assignedRoutes","currentLocation","isTracking","isOnline","notifications","loading","error","driverReducer","state","action","type","payload","current_location","slice","find","r","id","map","route","status","DriverContext","createContext","undefined","children","dispatch","useReducer","data","session","useSession","useEffect","user","email","loadDriverData","response","fetch","json","routes","startLocationTracking","navigator","tryHighAccuracy","watchId","geolocation","watchPosition","position","location","lat","coords","latitude","lng","longitude","updateDriverLocation","console","warn","tryStandardAccuracy","enableHighAccuracy","timeout","maximumAge","window","driverLocationWatchId","stopLocationTracking","clearWatch","method","headers","body","JSON","stringify","startRoute","routeId","completeRoute","completeDelivery","shipmentId","goOnline","goOffline","contextValue","Provider","value","context","useContext","Error"],"mappings":"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"}