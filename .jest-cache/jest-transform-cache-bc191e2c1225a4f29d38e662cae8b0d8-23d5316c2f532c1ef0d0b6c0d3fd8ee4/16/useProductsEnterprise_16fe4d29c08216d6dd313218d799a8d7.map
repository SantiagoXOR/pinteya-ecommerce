{"version":3,"names":["useProductsEnterprise","initialFilters","cov_z2ob2nblo","f","queryClient","s","_reactquery","useQueryClient","filters","setFilters","_react","useState","page","limit","sort_by","sort_order","status","stock_status","data","productsData","isLoading","productsLoading","error","productsError","refetch","refetchProducts","useQuery","queryKey","queryFn","params","URLSearchParams","Object","entries","forEach","key","value","b","undefined","append","toString","response","fetch","ok","Error","statusText","json","staleTime","refetchOnWindowFocus","statsData","statsLoading","statsError","categoriesData","categoriesLoading","createProductMutation","useMutation","mutationFn","productData","method","headers","body","JSON","stringify","onSuccess","invalidateQueries","updateProductMutation","id","bulkOperationMutation","operation","importProductsMutation","file","formData","FormData","updateFilters","useCallback","newFilters","prev","resetFilters","createProduct","mutateAsync","updateProduct","bulkUpdateStatus","productIds","product_ids","bulkUpdateCategory","categoryId","category_id","bulkDelete","importProducts","exportProducts","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","split","appendChild","click","revokeObjectURL","removeChild","derivedMetrics","totalPages","pagination","total_pages","totalProducts","total_count","currentPage","hasNextPage","hasPrevPage","stockHealthScore","active_products","total_products","toFixed","lowStockPercentage","low_stock_products","averageStockValue","total_value","products","stats","categories","isLoadingProducts","isLoadingStats","isLoadingCategories","isCreating","isPending","isUpdating","isBulkOperating","isImporting","totalItems","hasNext","hasPrev","goToPage","nextPage","prevPage"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useProductsEnterprise.ts"],"sourcesContent":["// =====================================================\r\n// HOOK: useProductsEnterprise\r\n// Descripción: Hook enterprise para gestión avanzada de productos\r\n// Incluye: Import/Export, Variantes, Inventario, Operaciones masivas\r\n// =====================================================\r\n\r\n'use client';\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\nexport interface ProductVariant {\r\n  id: string;\r\n  product_id: string;\r\n  name: string;\r\n  sku: string;\r\n  price: number;\r\n  stock: number;\r\n  attributes: Record<string, string>; // { color: 'rojo', size: 'M' }\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  description: string;\r\n  price: number;\r\n  discounted_price?: number;\r\n  stock: number;\r\n  category_id: number;\r\n  category_name?: string;\r\n  brand?: string;\r\n  sku?: string;\r\n  images: string[];\r\n  is_active: boolean;\r\n  is_featured: boolean;\r\n  variants?: ProductVariant[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductFilters {\r\n  page: number;\r\n  limit: number;\r\n  search?: string;\r\n  category_id?: number;\r\n  brand?: string;\r\n  status?: 'active' | 'inactive' | 'all';\r\n  stock_status?: 'in_stock' | 'low_stock' | 'out_of_stock' | 'all';\r\n  price_min?: number;\r\n  price_max?: number;\r\n  sort_by?: 'name' | 'price' | 'stock' | 'created_at';\r\n  sort_order?: 'asc' | 'desc';\r\n}\r\n\r\nexport interface ProductStats {\r\n  total_products: number;\r\n  active_products: number;\r\n  inactive_products: number;\r\n  low_stock_products: number;\r\n  out_of_stock_products: number;\r\n  total_value: number;\r\n  average_price: number;\r\n  featured_products: number;\r\n}\r\n\r\nexport interface BulkOperation {\r\n  operation: 'update_status' | 'update_category' | 'update_price' | 'delete';\r\n  product_ids: string[];\r\n  data?: any;\r\n}\r\n\r\nexport interface ImportResult {\r\n  success: boolean;\r\n  imported_count: number;\r\n  failed_count: number;\r\n  errors: Array<{ row: number; error: string }>;\r\n}\r\n\r\n// =====================================================\r\n// HOOK PRINCIPAL\r\n// =====================================================\r\n\r\nexport function useProductsEnterprise(initialFilters?: Partial<ProductFilters>) {\r\n  const queryClient = useQueryClient();\r\n  \r\n  // Estado local para filtros\r\n  const [filters, setFilters] = useState<ProductFilters>({\r\n    page: 1,\r\n    limit: 25,\r\n    sort_by: 'created_at',\r\n    sort_order: 'desc',\r\n    status: 'all',\r\n    stock_status: 'all',\r\n    ...initialFilters\r\n  });\r\n\r\n  // =====================================================\r\n  // QUERIES\r\n  // =====================================================\r\n\r\n  // Query para lista de productos\r\n  const {\r\n    data: productsData,\r\n    isLoading: productsLoading,\r\n    error: productsError,\r\n    refetch: refetchProducts\r\n  } = useQuery({\r\n    queryKey: ['admin-products', filters],\r\n    queryFn: async () => {\r\n      const params = new URLSearchParams();\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null && value !== '' && value !== 'all') {\r\n          params.append(key, value.toString());\r\n        }\r\n      });\r\n\r\n      const response = await fetch(`/api/admin/products?${params}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 30000,\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // Query para estadísticas\r\n  const {\r\n    data: statsData,\r\n    isLoading: statsLoading,\r\n    error: statsError\r\n  } = useQuery({\r\n    queryKey: ['admin-products-stats'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/admin/products/stats');\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 60000,\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // Query para categorías\r\n  const {\r\n    data: categoriesData,\r\n    isLoading: categoriesLoading\r\n  } = useQuery({\r\n    queryKey: ['admin-categories'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/admin/categories');\r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n    },\r\n    staleTime: 300000, // 5 minutos\r\n    refetchOnWindowFocus: false\r\n  });\r\n\r\n  // =====================================================\r\n  // MUTATIONS\r\n  // =====================================================\r\n\r\n  // Mutation para crear producto\r\n  const createProductMutation = useMutation({\r\n    mutationFn: async (productData: Partial<Product>) => {\r\n      const response = await fetch('/api/admin/products', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(productData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products-stats'] });\r\n    }\r\n  });\r\n\r\n  // Mutation para actualizar producto\r\n  const updateProductMutation = useMutation({\r\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Product> }) => {\r\n      const response = await fetch(`/api/admin/products/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products-stats'] });\r\n    }\r\n  });\r\n\r\n  // Mutation para operaciones masivas\r\n  const bulkOperationMutation = useMutation({\r\n    mutationFn: async (operation: BulkOperation) => {\r\n      const response = await fetch('/api/admin/products/bulk', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(operation)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products-stats'] });\r\n    }\r\n  });\r\n\r\n  // Mutation para importar productos\r\n  const importProductsMutation = useMutation({\r\n    mutationFn: async (file: File) => {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      const response = await fetch('/api/admin/products/import', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products'] });\r\n      queryClient.invalidateQueries({ queryKey: ['admin-products-stats'] });\r\n    }\r\n  });\r\n\r\n  // =====================================================\r\n  // FUNCIONES AUXILIARES\r\n  // =====================================================\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<ProductFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n  }, []);\r\n\r\n  const resetFilters = useCallback(() => {\r\n    setFilters({\r\n      page: 1,\r\n      limit: 25,\r\n      sort_by: 'created_at',\r\n      sort_order: 'desc',\r\n      status: 'all',\r\n      stock_status: 'all'\r\n    });\r\n  }, []);\r\n\r\n  const createProduct = useCallback((productData: Partial<Product>) => {\r\n    return createProductMutation.mutateAsync(productData);\r\n  }, [createProductMutation]);\r\n\r\n  const updateProduct = useCallback((id: string, data: Partial<Product>) => {\r\n    return updateProductMutation.mutateAsync({ id, data });\r\n  }, [updateProductMutation]);\r\n\r\n  const bulkUpdateStatus = useCallback((productIds: string[], status: 'active' | 'inactive') => {\r\n    return bulkOperationMutation.mutateAsync({\r\n      operation: 'update_status',\r\n      product_ids: productIds,\r\n      data: { status }\r\n    });\r\n  }, [bulkOperationMutation]);\r\n\r\n  const bulkUpdateCategory = useCallback((productIds: string[], categoryId: number) => {\r\n    return bulkOperationMutation.mutateAsync({\r\n      operation: 'update_category',\r\n      product_ids: productIds,\r\n      data: { category_id: categoryId }\r\n    });\r\n  }, [bulkOperationMutation]);\r\n\r\n  const bulkDelete = useCallback((productIds: string[]) => {\r\n    return bulkOperationMutation.mutateAsync({\r\n      operation: 'delete',\r\n      product_ids: productIds\r\n    });\r\n  }, [bulkOperationMutation]);\r\n\r\n  const importProducts = useCallback((file: File) => {\r\n    return importProductsMutation.mutateAsync(file);\r\n  }, [importProductsMutation]);\r\n\r\n  const exportProducts = useCallback(async () => {\r\n    const params = new URLSearchParams();\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '' && value !== 'all') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response = await fetch(`/api/admin/products/export?${params}`);\r\n    if (!response.ok) {\r\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const blob = await response.blob();\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `productos-${new Date().toISOString().split('T')[0]}.csv`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n  }, [filters]);\r\n\r\n  // =====================================================\r\n  // MÉTRICAS DERIVADAS\r\n  // =====================================================\r\n\r\n  const derivedMetrics = {\r\n    totalPages: productsData?.pagination?.total_pages || 0,\r\n    totalProducts: productsData?.pagination?.total_count || 0,\r\n    currentPage: filters.page,\r\n    hasNextPage: filters.page < (productsData?.pagination?.total_pages || 0),\r\n    hasPrevPage: filters.page > 1,\r\n    \r\n    // Estadísticas calculadas\r\n    stockHealthScore: statsData?.data ? \r\n      ((statsData.data.active_products / statsData.data.total_products) * 100).toFixed(1) : '0',\r\n    \r\n    lowStockPercentage: statsData?.data ? \r\n      ((statsData.data.low_stock_products / statsData.data.total_products) * 100).toFixed(1) : '0',\r\n    \r\n    averageStockValue: statsData?.data ? \r\n      (statsData.data.total_value / statsData.data.total_products).toFixed(0) : '0'\r\n  };\r\n\r\n  // =====================================================\r\n  // RETURN\r\n  // =====================================================\r\n\r\n  return {\r\n    // Datos\r\n    products: productsData?.data || [],\r\n    stats: statsData?.data || null,\r\n    categories: categoriesData?.data || [],\r\n    \r\n    // Estados de carga\r\n    isLoading: productsLoading || statsLoading,\r\n    isLoadingProducts: productsLoading,\r\n    isLoadingStats: statsLoading,\r\n    isLoadingCategories: categoriesLoading,\r\n    \r\n    // Errores\r\n    error: productsError || statsError,\r\n    productsError,\r\n    statsError,\r\n    \r\n    // Filtros y paginación\r\n    filters,\r\n    updateFilters,\r\n    resetFilters,\r\n    \r\n    // Acciones CRUD\r\n    createProduct,\r\n    updateProduct,\r\n    refetchProducts,\r\n    \r\n    // Operaciones masivas\r\n    bulkUpdateStatus,\r\n    bulkUpdateCategory,\r\n    bulkDelete,\r\n    \r\n    // Import/Export\r\n    importProducts,\r\n    exportProducts,\r\n    \r\n    // Estados de mutations\r\n    isCreating: createProductMutation.isPending,\r\n    isUpdating: updateProductMutation.isPending,\r\n    isBulkOperating: bulkOperationMutation.isPending,\r\n    isImporting: importProductsMutation.isPending,\r\n    \r\n    // Métricas derivadas\r\n    derivedMetrics,\r\n    \r\n    // Paginación helpers\r\n    pagination: {\r\n      currentPage: filters.page,\r\n      totalPages: derivedMetrics.totalPages,\r\n      totalItems: derivedMetrics.totalProducts,\r\n      hasNext: derivedMetrics.hasNextPage,\r\n      hasPrev: derivedMetrics.hasPrevPage,\r\n      goToPage: (page: number) => updateFilters({ page }),\r\n      nextPage: () => derivedMetrics.hasNextPage && updateFilters({ page: filters.page + 1 }),\r\n      prevPage: () => derivedMetrics.hasPrevPage && updateFilters({ page: filters.page - 1 })\r\n    }\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}