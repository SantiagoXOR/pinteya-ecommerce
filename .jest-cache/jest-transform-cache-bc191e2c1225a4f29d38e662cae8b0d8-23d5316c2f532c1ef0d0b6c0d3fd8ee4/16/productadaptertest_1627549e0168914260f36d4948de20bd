1e1bc6759d600cd23fedf4975ccb71ec
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _productadapter = require("../../../lib/adapters/product-adapter");
describe('Product Image Validation Functions', ()=>{
    describe('getValidImageUrl', ()=>{
        it('should return the image URL when it is valid', ()=>{
            const validUrl = 'https://example.com/image.jpg';
            expect((0, _productadapter.getValidImageUrl)(validUrl)).toBe(validUrl);
        });
        it('should return placeholder when image URL is empty string', ()=>{
            const emptyUrl = '';
            const result = (0, _productadapter.getValidImageUrl)(emptyUrl);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when image URL is only whitespace', ()=>{
            const whitespaceUrl = '   ';
            const result = (0, _productadapter.getValidImageUrl)(whitespaceUrl);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when image URL is undefined', ()=>{
            const result = (0, _productadapter.getValidImageUrl)(undefined);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when image URL is null', ()=>{
            const result = (0, _productadapter.getValidImageUrl)(null);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should trim whitespace from valid URLs', ()=>{
            const urlWithWhitespace = '  https://example.com/image.jpg  ';
            const result = (0, _productadapter.getValidImageUrl)(urlWithWhitespace);
            expect(result).toBe('https://example.com/image.jpg');
        });
        it('should use custom fallback when provided', ()=>{
            const customFallback = '/custom/placeholder.png';
            const result = (0, _productadapter.getValidImageUrl)('', customFallback);
            expect(result).toBe(customFallback);
        });
    });
    describe('getThumbnailImage', ()=>{
        it('should return valid thumbnail from imgs property', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        'https://example.com/thumb.jpg'
                    ],
                    previews: [
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            const result = (0, _productadapter.getThumbnailImage)(product);
            expect(result).toBe('https://example.com/thumb.jpg');
        });
        it('should return placeholder when thumbnail is empty string', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        ''
                    ],
                    previews: [
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            const result = (0, _productadapter.getThumbnailImage)(product);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when no thumbnails exist', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [],
                    previews: [
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            const result = (0, _productadapter.getThumbnailImage)(product);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when imgs is undefined', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5
            };
            const result = (0, _productadapter.getThumbnailImage)(product);
            expect(result).toBe('/images/products/placeholder.svg');
        });
    });
    describe('getPreviewImage', ()=>{
        it('should return valid preview from imgs property', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        'https://example.com/thumb.jpg'
                    ],
                    previews: [
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            const result = (0, _productadapter.getPreviewImage)(product);
            expect(result).toBe('https://example.com/preview.jpg');
        });
        it('should return placeholder when preview is empty string', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        'https://example.com/thumb.jpg'
                    ],
                    previews: [
                        ''
                    ]
                }
            };
            const result = (0, _productadapter.getPreviewImage)(product);
            expect(result).toBe('/images/products/placeholder.svg');
        });
        it('should return placeholder when no previews exist', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        'https://example.com/thumb.jpg'
                    ],
                    previews: []
                }
            };
            const result = (0, _productadapter.getPreviewImage)(product);
            expect(result).toBe('/images/products/placeholder.svg');
        });
    });
    describe('Edge Cases', ()=>{
        it('should handle products with images property instead of imgs', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                images: {
                    thumbnails: [
                        'https://example.com/thumb.jpg'
                    ],
                    previews: [
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            const thumbnailResult = (0, _productadapter.getThumbnailImage)(product);
            const previewResult = (0, _productadapter.getPreviewImage)(product);
            expect(thumbnailResult).toBe('https://example.com/thumb.jpg');
            expect(previewResult).toBe('https://example.com/preview.jpg');
        });
        it('should handle mixed empty and valid URLs in arrays', ()=>{
            const product = {
                id: 1,
                title: 'Test Product',
                price: 100,
                discountedPrice: 90,
                reviews: 5,
                imgs: {
                    thumbnails: [
                        '',
                        '  ',
                        'https://example.com/thumb.jpg'
                    ],
                    previews: [
                        '',
                        'https://example.com/preview.jpg'
                    ]
                }
            };
            // Should still return placeholder because first element is empty
            const thumbnailResult = (0, _productadapter.getThumbnailImage)(product);
            const previewResult = (0, _productadapter.getPreviewImage)(product);
            expect(thumbnailResult).toBe('/images/products/placeholder.svg');
            expect(previewResult).toBe('/images/products/placeholder.svg');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,