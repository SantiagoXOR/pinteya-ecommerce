e652fffc0cc0fe459831f27fcea0c100
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _globals = require("@jest/globals");
const _react = require("@testing-library/react");
const _react1 = require("next-auth/react");
const _navigation = require("next/navigation");
const _DriverNavigation = require("../../src/components/driver/DriverNavigation");
const _DeliveryCard = require("../../src/components/driver/DeliveryCard");
const _NavigationInstructions = require("../../src/components/driver/NavigationInstructions");
const _page = /*#__PURE__*/ _interop_require_default(require("../../src/app/driver/dashboard/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock de NextAuth
_globals.jest.mock('next-auth/react');
// Mock de Next.js router
_globals.jest.mock('next/navigation', ()=>({
        useRouter: _globals.jest.fn(),
        useParams: _globals.jest.fn(()=>({
                id: 'route-1'
            })),
        usePathname: _globals.jest.fn(()=>'/driver/dashboard')
    }));
// Mock del contexto de drivers
_globals.jest.mock('@/contexts/DriverContext', ()=>({
        useDriver: _globals.jest.fn(),
        DriverProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            })
    }));
// Mock de Google Maps
_globals.jest.mock('@vis.gl/react-google-maps', ()=>({
        APIProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "api-provider",
                children: children
            }),
        Map: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "google-map",
                children: children
            }),
        Marker: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "marker"
            }),
        DirectionsRenderer: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "directions-renderer"
            })
    }));
(0, _globals.describe)('Driver Components Unit Tests', ()=>{
    const mockUseSession = _react1.useSession;
    const mockUseRouter = _navigation.useRouter;
    const mockUseDriver = require('@/contexts/DriverContext').useDriver;
    const mockDriverState = {
        driver: {
            id: 'driver-1',
            name: 'Carlos Rodríguez',
            email: 'carlos@pinteya.com',
            vehicle_type: 'Van',
            license_plate: 'ABC123',
            status: 'available'
        },
        currentRoute: null,
        assignedRoutes: [],
        currentLocation: {
            lat: -34.6037,
            lng: -58.3816
        },
        isTracking: false,
        isOnline: true,
        notifications: [],
        loading: false,
        error: null
    };
    const mockDriverActions = {
        startLocationTracking: _globals.jest.fn(),
        stopLocationTracking: _globals.jest.fn(),
        updateDriverLocation: _globals.jest.fn(),
        startRoute: _globals.jest.fn(),
        completeRoute: _globals.jest.fn(),
        completeDelivery: _globals.jest.fn(),
        goOnline: _globals.jest.fn(),
        goOffline: _globals.jest.fn()
    };
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        mockUseSession.mockReturnValue({
            data: {
                user: {
                    email: 'carlos@pinteya.com',
                    name: 'Carlos Rodríguez'
                }
            },
            status: 'authenticated'
        });
        mockUseRouter.mockReturnValue({
            push: _globals.jest.fn(),
            replace: _globals.jest.fn(),
            back: _globals.jest.fn()
        });
        mockUseDriver.mockReturnValue({
            state: mockDriverState,
            ...mockDriverActions
        });
    });
    (0, _globals.describe)('DriverNavigation Component', ()=>{
        (0, _globals.it)('should render navigation items correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DriverNavigation.DriverNavigation, {}));
            (0, _globals.expect)(_react.screen.getByText('Inicio')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Rutas')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Entregas')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Perfil')).toBeInTheDocument();
        });
        (0, _globals.it)('should show driver name and online status', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DriverNavigation.DriverNavigation, {}));
            (0, _globals.expect)(_react.screen.getByText('Carlos Rodríguez')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('En línea')).toBeInTheDocument();
        });
        (0, _globals.it)('should show offline status when driver is offline', ()=>{
            mockUseDriver.mockReturnValue({
                state: {
                    ...mockDriverState,
                    isOnline: false
                },
                ...mockDriverActions
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DriverNavigation.DriverNavigation, {}));
            (0, _globals.expect)(_react.screen.getByText('Desconectado')).toBeInTheDocument();
        });
        (0, _globals.it)('should show active route indicator', ()=>{
            const activeRoute = {
                id: 'route-1',
                name: 'Ruta Centro',
                status: 'active',
                shipments: [],
                waypoints: [],
                total_distance: 10,
                estimated_time: 60,
                optimization_score: 85
            };
            mockUseDriver.mockReturnValue({
                state: {
                    ...mockDriverState,
                    currentRoute: activeRoute
                },
                ...mockDriverActions
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DriverNavigation.DriverNavigation, {}));
            (0, _globals.expect)(_react.screen.getByText('Ruta Activa')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('DeliveryCard Component', ()=>{
        const mockDelivery = {
            id: 'delivery-1',
            tracking_number: 'TRK-001',
            customer_name: 'Juan Pérez',
            customer_phone: '+54 11 1234-5678',
            destination: {
                address: 'Av. Corrientes 1234',
                city: 'Buenos Aires',
                postal_code: '1043',
                coordinates: {
                    lat: -34.6037,
                    lng: -58.3816
                },
                notes: 'Timbre 2B'
            },
            items: [
                {
                    name: 'Producto 1',
                    quantity: 2,
                    weight: 1.5
                }
            ],
            status: 'confirmed',
            estimated_delivery_time: '14:00 - 18:00',
            special_instructions: 'Llamar antes de llegar',
            requires_signature: true,
            cash_on_delivery: 5000
        };
        const mockProps = {
            delivery: mockDelivery,
            isActive: true,
            onComplete: _globals.jest.fn(),
            onStartNavigation: _globals.jest.fn(),
            isNavigating: false
        };
        (0, _globals.it)('should render delivery information correctly', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Juan Pérez')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('TRK-001')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Av. Corrientes 1234')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Buenos Aires, 1043')).toBeInTheDocument();
        });
        (0, _globals.it)('should show special instructions', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Llamar antes de llegar')).toBeInTheDocument();
        });
        (0, _globals.it)('should show cash on delivery amount', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Cobrar: $5.000')).toBeInTheDocument();
        });
        (0, _globals.it)('should call onStartNavigation when navigation button is clicked', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            const navButton = _react.screen.getByText('Navegar');
            _react.fireEvent.click(navButton);
            (0, _globals.expect)(mockProps.onStartNavigation).toHaveBeenCalled();
        });
        (0, _globals.it)('should call onComplete when complete button is clicked', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            const completeButton = _react.screen.getByText('Marcar como Entregado');
            _react.fireEvent.click(completeButton);
            (0, _globals.expect)(mockProps.onComplete).toHaveBeenCalled();
        });
        (0, _globals.it)('should show call and SMS buttons when phone is available', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DeliveryCard.DeliveryCard, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Llamar')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('SMS')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('NavigationInstructions Component', ()=>{
        const mockInstructions = [
            {
                instruction: 'Head north on Av. Corrientes',
                distance: '500 m',
                duration: '2 mins',
                maneuver: 'straight',
                coordinates: {
                    lat: -34.6037,
                    lng: -58.3816
                }
            },
            {
                instruction: 'Turn right onto Av. 9 de Julio',
                distance: '1.2 km',
                duration: '4 mins',
                maneuver: 'turn-right',
                coordinates: {
                    lat: -34.6000,
                    lng: -58.3816
                }
            }
        ];
        const mockProps = {
            instructions: mockInstructions,
            currentLocation: {
                lat: -34.6037,
                lng: -58.3816
            }
        };
        (0, _globals.it)('should render current instruction', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationInstructions.NavigationInstructions, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Head north on Av. Corrientes')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('500 m')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('2 mins')).toBeInTheDocument();
        });
        (0, _globals.it)('should show next instruction', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationInstructions.NavigationInstructions, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Luego: Turn right onto Av. 9 de Julio')).toBeInTheDocument();
        });
        (0, _globals.it)('should show progress indicator', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationInstructions.NavigationInstructions, {
                ...mockProps
            }));
            (0, _globals.expect)(_react.screen.getByText('Paso 1 de 2')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('50%')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('DriverDashboardPage Component', ()=>{
        (0, _globals.it)('should render dashboard with driver information', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _globals.expect)(_react.screen.getByText('Estado del Driver')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Van - ABC123')).toBeInTheDocument();
        });
        (0, _globals.it)('should show online/offline controls', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _globals.expect)(_react.screen.getByText('En Línea')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Desconectar')).toBeInTheDocument();
        });
        (0, _globals.it)('should call goOnline when connect button is clicked', ()=>{
            mockUseDriver.mockReturnValue({
                state: {
                    ...mockDriverState,
                    isOnline: false
                },
                ...mockDriverActions
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const connectButton = _react.screen.getByText('Conectarse');
            _react.fireEvent.click(connectButton);
            (0, _globals.expect)(mockDriverActions.goOnline).toHaveBeenCalled();
        });
        (0, _globals.it)('should show current location when available', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _globals.expect)(_react.screen.getByText(/Ubicación: -34.6037, -58.3816/)).toBeInTheDocument();
        });
        (0, _globals.it)('should show today statistics', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            (0, _globals.expect)(_react.screen.getByText('Estadísticas de Hoy')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Entregas')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Distancia')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Tiempo Activo')).toBeInTheDocument();
            (0, _globals.expect)(_react.screen.getByText('Eficiencia')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,