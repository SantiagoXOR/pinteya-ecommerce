{"version":3,"names":["addressSchema","cov_2cs5dl9xec","f","s","sanitizePhoneNumber","sanitizePostalCode","sanitizeString","sanitizeTrackingNumber","shipmentSchema","validateAddress","validateCoordinates","validateDNI","validateDeliveryDate","validateDimensions","validateEmail","validatePackageValue","validatePhoneNumber","validatePostalCode","validateShipment","validateShippingCost","validateTrackingNumber","validateWeight","_zod","z","object","street","string","min","number","apartment","optional","neighborhood","city","state","postal_code","country","default","latitude","longitude","reference","tracking_number","courier_id","service_type","enum","origin_address","destination_address","package_details","weight","dimensions","length","width","height","declared_value","description","estimated_delivery","special_instructions","email","emailRegex","test","phone","cleanPhone","replace","phoneRegex","b","dni","cleanDNI","dniRegex","cuitRegex","parseInt","postalCode","postalCodeRegex","trackingNumber","trackingRegex","lat","lng","date","deliveryDate","Date","today","maxDate","setDate","getDate","cost","value","input","trim","substring","toUpperCase","address","parse","isValid","errors","error","ZodError","map","err","message","shipment"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\utils\\validation.ts"],"sourcesContent":["// =====================================================\r\n// UTILIDADES: VALIDACIÓN DE DATOS\r\n// Descripción: Funciones para validar datos de logística\r\n// Basado en: Zod + patrones enterprise\r\n// =====================================================\r\n\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport const addressSchema = z.object({\r\n  street: z.string().min(1, 'La calle es requerida'),\r\n  number: z.string().min(1, 'El número es requerido'),\r\n  apartment: z.string().optional(),\r\n  neighborhood: z.string().min(1, 'El barrio es requerido'),\r\n  city: z.string().min(1, 'La ciudad es requerida'),\r\n  state: z.string().min(1, 'La provincia es requerida'),\r\n  postal_code: z.string().min(4, 'El código postal debe tener al menos 4 dígitos'),\r\n  country: z.string().default('AR'),\r\n  latitude: z.number().optional(),\r\n  longitude: z.number().optional(),\r\n  reference: z.string().optional()\r\n});\r\n\r\nexport const shipmentSchema = z.object({\r\n  tracking_number: z.string().min(1, 'El número de tracking es requerido'),\r\n  courier_id: z.number().min(1, 'El courier es requerido'),\r\n  service_type: z.enum(['standard', 'express', 'next_day', 'same_day']),\r\n  origin_address: addressSchema,\r\n  destination_address: addressSchema,\r\n  package_details: z.object({\r\n    weight: z.number().min(0.1, 'El peso debe ser mayor a 0'),\r\n    dimensions: z.object({\r\n      length: z.number().min(1, 'El largo debe ser mayor a 0'),\r\n      width: z.number().min(1, 'El ancho debe ser mayor a 0'),\r\n      height: z.number().min(1, 'La altura debe ser mayor a 0')\r\n    }),\r\n    declared_value: z.number().min(0, 'El valor declarado debe ser mayor o igual a 0'),\r\n    description: z.string().min(1, 'La descripción es requerida')\r\n  }),\r\n  estimated_delivery: z.string().optional(),\r\n  special_instructions: z.string().optional()\r\n});\r\n\r\n// =====================================================\r\n// FUNCIONES DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport function validateEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nexport function validatePhoneNumber(phone: string): boolean {\r\n  // Formato argentino: +54 9 351 123 4567, +54 351 123-4567, 351 123 4567, etc.\r\n  // Limpiar el teléfono de espacios, guiones y paréntesis\r\n  const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\r\n\r\n  // Patrones aceptados:\r\n  // +54351234567 (con código país)\r\n  // +549351234567 (con código país y 9)\r\n  // 351234567 (sin código país)\r\n  const phoneRegex = /^(\\+54(9)?)?\\d{10}$|^\\d{10}$/;\r\n\r\n  return phoneRegex.test(cleanPhone) && cleanPhone.length >= 10;\r\n}\r\n\r\nexport function validateDNI(dni: string): boolean {\r\n  // Limpiar el DNI de espacios, guiones y puntos\r\n  const cleanDNI = dni.replace(/[\\s\\-\\.]/g, '');\r\n\r\n  // Patrones aceptados:\r\n  // DNI: 8 dígitos (12345678)\r\n  // CUIT: 11 dígitos (20123456789)\r\n  const dniRegex = /^\\d{8}$/;\r\n  const cuitRegex = /^\\d{11}$/;\r\n\r\n  if (dniRegex.test(cleanDNI)) {\r\n    // Validar DNI (8 dígitos)\r\n    return cleanDNI.length === 8 && parseInt(cleanDNI) > 0;\r\n  } else if (cuitRegex.test(cleanDNI)) {\r\n    // Validar CUIT (11 dígitos) - validación básica\r\n    return cleanDNI.length === 11 && parseInt(cleanDNI) > 0;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function validatePostalCode(postalCode: string): boolean {\r\n  // Código postal argentino: 4 dígitos\r\n  const postalCodeRegex = /^\\d{4}$/;\r\n  return postalCodeRegex.test(postalCode);\r\n}\r\n\r\nexport function validateTrackingNumber(trackingNumber: string): boolean {\r\n  // Formato general: al menos 6 caracteres alfanuméricos\r\n  const trackingRegex = /^[A-Z0-9]{6,}$/i;\r\n  return trackingRegex.test(trackingNumber);\r\n}\r\n\r\nexport function validateCoordinates(lat: number, lng: number): boolean {\r\n  return (\r\n    lat >= -90 && lat <= 90 &&\r\n    lng >= -180 && lng <= 180\r\n  );\r\n}\r\n\r\nexport function validateWeight(weight: number): boolean {\r\n  return weight > 0 && weight <= 1000; // Máximo 1000kg\r\n}\r\n\r\nexport function validateDimensions(dimensions: {\r\n  length: number;\r\n  width: number;\r\n  height: number;\r\n}): boolean {\r\n  const { length, width, height } = dimensions;\r\n  return (\r\n    length > 0 && length <= 200 && // Máximo 200cm\r\n    width > 0 && width <= 200 &&\r\n    height > 0 && height <= 200\r\n  );\r\n}\r\n\r\n// =====================================================\r\n// VALIDACIONES DE NEGOCIO\r\n// =====================================================\r\n\r\nexport function validateDeliveryDate(date: string): boolean {\r\n  const deliveryDate = new Date(date);\r\n  const today = new Date();\r\n  const maxDate = new Date();\r\n  maxDate.setDate(today.getDate() + 30); // Máximo 30 días\r\n  \r\n  return deliveryDate >= today && deliveryDate <= maxDate;\r\n}\r\n\r\nexport function validateShippingCost(cost: number): boolean {\r\n  return cost >= 0 && cost <= 100000; // Máximo $100,000\r\n}\r\n\r\nexport function validatePackageValue(value: number): boolean {\r\n  return value >= 0 && value <= 1000000; // Máximo $1,000,000\r\n}\r\n\r\n// =====================================================\r\n// SANITIZACIÓN DE DATOS\r\n// =====================================================\r\n\r\nexport function sanitizeString(input: string): string {\r\n  return input.trim().replace(/[<>]/g, '');\r\n}\r\n\r\nexport function sanitizePhoneNumber(phone: string): string {\r\n  return phone.replace(/\\D/g, '');\r\n}\r\n\r\nexport function sanitizePostalCode(postalCode: string): string {\r\n  return postalCode.replace(/\\D/g, '').substring(0, 4);\r\n}\r\n\r\nexport function sanitizeTrackingNumber(trackingNumber: string): string {\r\n  return trackingNumber.toUpperCase().replace(/[^A-Z0-9]/g, '');\r\n}\r\n\r\n// =====================================================\r\n// TIPOS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport type ValidationResult = {\r\n  isValid: boolean;\r\n  errors: string[];\r\n};\r\n\r\nexport function validateAddress(address: any): ValidationResult {\r\n  try {\r\n    addressSchema.parse(address);\r\n    return { isValid: true, errors: [] };\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        isValid: false,\r\n        errors: error.errors.map(err => err.message)\r\n      };\r\n    }\r\n    return { isValid: false, errors: ['Error de validación desconocido'] };\r\n  }\r\n}\r\n\r\nexport function validateShipment(shipment: any): ValidationResult {\r\n  try {\r\n    shipmentSchema.parse(shipment);\r\n    return { isValid: true, errors: [] };\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        isValid: false,\r\n        errors: error.errors.map(err => err.message)\r\n      };\r\n    }\r\n    return { isValid: false, errors: ['Error de validación desconocido'] };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}