{"version":3,"names":["default","cov_1g17izhoio","f","s","_default","useComponentPerformance","usePerformanceTracking","defaultOptions","enabled","endpoint","batchSize","flushInterval","includeUserAgent","includeConnection","enableProductionMonitoring","process","env","NODE_ENV","options","b","config","metricsQueue","_react","useRef","observers","flushTimer","trackWebVital","trackPerformance","_productionmonitoring","useProductionMonitoring","sendMetrics","useCallback","metrics","length","validMetrics","filter","metric","Object","keys","console","warn","payload","url","window","location","pathname","userAgent","navigator","undefined","connection","getConnectionInfo","timestamp","Date","now","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","error","queueMetric","current","push","entries","forEach","key","value","flushMetrics","useEffect","lcpObserver","PerformanceObserver","list","getEntries","lastEntry","LCP","startTime","observe","entryTypes","e","fidObserver","entry","FID","processingStart","clsValue","clsObserver","hadRecentInput","CLS","navObserver","FCP","firstContentfulPaint","TTI","domInteractive","setInterval","observer","disconnect","clearInterval","trackRenderTime","componentName","renderTime","name","category","metadata","trackBundleSize","scripts","Array","from","document","querySelectorAll","totalSize","script","src","includes","bundleSize","getCurrentMetrics","navigation","performance","getEntriesByType","isEnabled","queueSize","mozConnection","webkitConnection","effectiveType","downlink","measureOperation","operationName","operation","start","end"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\usePerformanceTracking.ts"],"sourcesContent":["// ===================================\r\n// HOOK: usePerformanceTracking - Tracking automático de performance\r\n// ===================================\r\n\r\nimport { useEffect, useCallback, useRef } from 'react';\r\nimport { productionMonitor, useProductionMonitoring } from '../config/production-monitoring';\r\n\r\ninterface PerformanceData {\r\n  LCP?: number;\r\n  FID?: number;\r\n  CLS?: number;\r\n  FCP?: number;\r\n  TTI?: number;\r\n  renderTime?: number;\r\n  bundleSize?: number;\r\n}\r\n\r\ninterface TrackingOptions {\r\n  enabled?: boolean;\r\n  endpoint?: string;\r\n  batchSize?: number;\r\n  flushInterval?: number;\r\n  includeUserAgent?: boolean;\r\n  includeConnection?: boolean;\r\n  enableProductionMonitoring?: boolean;\r\n}\r\n\r\nconst defaultOptions: TrackingOptions = {\r\n  enabled: true,\r\n  endpoint: '/api/admin/performance/metrics',\r\n  batchSize: 10,\r\n  flushInterval: 30000, // 30 segundos\r\n  includeUserAgent: true,\r\n  includeConnection: true,\r\n  enableProductionMonitoring: process.env.NODE_ENV === 'production',\r\n};\r\n\r\n/**\r\n * Hook para tracking automático de métricas de performance\r\n */\r\nexport const usePerformanceTracking = (options: TrackingOptions = {}) => {\r\n  const config = { ...defaultOptions, ...options };\r\n  const metricsQueue = useRef<PerformanceData[]>([]);\r\n  const observers = useRef<PerformanceObserver[]>([]);\r\n  const flushTimer = useRef<NodeJS.Timeout | null>(null);\r\n  const { trackWebVital, trackPerformance } = useProductionMonitoring();\r\n\r\n  // Función para enviar métricas al servidor\r\n  const sendMetrics = useCallback(async (metrics: PerformanceData[]) => {\r\n    if (!config.enabled || metrics.length === 0) {return;}\r\n\r\n    try {\r\n      // Agregar validación de métricas\r\n      const validMetrics = metrics.filter(metric => \r\n        metric && typeof metric === 'object' && Object.keys(metric).length > 0\r\n      );\r\n\r\n      if (validMetrics.length === 0) {\r\n        console.warn('No valid metrics to send');\r\n        return;\r\n      }\r\n\r\n      const payload = {\r\n        metrics: validMetrics, // Enviar todas las métricas válidas\r\n        url: window.location.pathname,\r\n        userAgent: config.includeUserAgent ? navigator.userAgent : undefined,\r\n        connection: config.includeConnection ? getConnectionInfo() : undefined,\r\n        timestamp: Date.now(),\r\n        batchSize: validMetrics.length\r\n      };\r\n\r\n      const response = await fetch(config.endpoint!, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.warn('Failed to send performance metrics:', error);\r\n      // En caso de error, no reintentar automáticamente para evitar spam\r\n    }\r\n  }, [config]);\r\n\r\n  // Función para agregar métrica a la cola\r\n  const queueMetric = useCallback((metric: PerformanceData) => {\r\n    metricsQueue.current.push(metric);\r\n\r\n    // Send to production monitoring if enabled\r\n    if (config.enableProductionMonitoring) {\r\n      Object.entries(metric).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          trackWebVital(key, value, `${key}-${Date.now()}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Flush si alcanzamos el tamaño del batch\r\n    if (metricsQueue.current.length >= config.batchSize!) {\r\n      flushMetrics();\r\n    }\r\n  }, [config.batchSize, config.enableProductionMonitoring, trackWebVital]);\r\n\r\n  // Función para enviar todas las métricas en cola\r\n  const flushMetrics = useCallback(() => {\r\n    if (metricsQueue.current.length > 0) {\r\n      sendMetrics([...metricsQueue.current]);\r\n      metricsQueue.current = [];\r\n    }\r\n  }, [sendMetrics]);\r\n\r\n  // Inicializar observers de performance\r\n  useEffect(() => {\r\n    if (!config.enabled || typeof window === 'undefined') {return;}\r\n\r\n    // Observer para LCP (Largest Contentful Paint)\r\n    if ('PerformanceObserver' in window) {\r\n      try {\r\n        const lcpObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          const lastEntry = entries[entries.length - 1] as any;\r\n          if (lastEntry) {\r\n            queueMetric({ LCP: lastEntry.startTime });\r\n          }\r\n        });\r\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n        observers.current.push(lcpObserver);\r\n      } catch (e) {\r\n        console.warn('LCP observer not supported');\r\n      }\r\n\r\n      // Observer para FID (First Input Delay)\r\n      try {\r\n        const fidObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry: any) => {\r\n            queueMetric({ FID: entry.processingStart - entry.startTime });\r\n          });\r\n        });\r\n        fidObserver.observe({ entryTypes: ['first-input'] });\r\n        observers.current.push(fidObserver);\r\n      } catch (e) {\r\n        console.warn('FID observer not supported');\r\n      }\r\n\r\n      // Observer para CLS (Cumulative Layout Shift)\r\n      try {\r\n        let clsValue = 0;\r\n        const clsObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry: any) => {\r\n            if (!entry.hadRecentInput) {\r\n              clsValue += entry.value;\r\n            }\r\n          });\r\n          queueMetric({ CLS: clsValue });\r\n        });\r\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n        observers.current.push(clsObserver);\r\n      } catch (e) {\r\n        console.warn('CLS observer not supported');\r\n      }\r\n\r\n      // Observer para Navigation Timing\r\n      try {\r\n        const navObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry: any) => {\r\n            queueMetric({\r\n              FCP: entry.firstContentfulPaint,\r\n              TTI: entry.domInteractive,\r\n            });\r\n          });\r\n        });\r\n        navObserver.observe({ entryTypes: ['navigation'] });\r\n        observers.current.push(navObserver);\r\n      } catch (e) {\r\n        console.warn('Navigation observer not supported');\r\n      }\r\n    }\r\n\r\n    // Configurar timer para flush automático\r\n    flushTimer.current = setInterval(flushMetrics, config.flushInterval);\r\n\r\n    // Cleanup al desmontar\r\n    return () => {\r\n      observers.current.forEach(observer => observer.disconnect());\r\n      observers.current = [];\r\n      \r\n      if (flushTimer.current) {\r\n        clearInterval(flushTimer.current);\r\n        flushTimer.current = null;\r\n      }\r\n      \r\n      // Flush final\r\n      flushMetrics();\r\n    };\r\n  }, [config.enabled, config.flushInterval, queueMetric, flushMetrics]);\r\n\r\n  // Función manual para trackear render time\r\n  const trackRenderTime = useCallback((componentName: string, renderTime: number) => {\r\n    // Send to production monitoring\r\n    if (config.enableProductionMonitoring) {\r\n      trackPerformance({\r\n        name: 'renderTime',\r\n        value: renderTime,\r\n        category: 'component',\r\n        metadata: { componentName },\r\n      });\r\n    }\r\n\r\n    queueMetric({ \r\n      renderTime,\r\n      // Agregar información del componente como metadata\r\n    });\r\n  }, [queueMetric, config.enableProductionMonitoring, trackPerformance]);\r\n\r\n  // Función para trackear bundle size\r\n  const trackBundleSize = useCallback(() => {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    // Calcular tamaño aproximado del bundle basado en scripts cargados\r\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\r\n    let totalSize = 0;\r\n\r\n    scripts.forEach(script => {\r\n      const src = (script as HTMLScriptElement).src;\r\n      if (src.includes('_next') || src.includes('chunk')) {\r\n        // Estimación basada en el nombre del archivo\r\n        totalSize += 100; // KB estimado por chunk\r\n      }\r\n    });\r\n\r\n    queueMetric({ bundleSize: totalSize });\r\n  }, [queueMetric]);\r\n\r\n  // Función para obtener métricas actuales\r\n  const getCurrentMetrics = useCallback((): PerformanceData | null => {\r\n    if (typeof window === 'undefined') {return null;}\r\n\r\n    const navigation = performance.getEntriesByType('navigation')[0] as any;\r\n    if (!navigation) {return null;}\r\n\r\n    return {\r\n      FCP: navigation.firstContentfulPaint,\r\n      TTI: navigation.domInteractive,\r\n      renderTime: performance.now(),\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    trackRenderTime,\r\n    trackBundleSize,\r\n    getCurrentMetrics,\r\n    flushMetrics,\r\n    isEnabled: config.enabled,\r\n    queueSize: metricsQueue.current.length,\r\n  };\r\n};\r\n\r\n// Función helper para obtener información de conexión\r\nfunction getConnectionInfo(): string {\r\n  if (typeof navigator === 'undefined') {return 'unknown';}\r\n  \r\n  const connection = (navigator as any).connection || \r\n                    (navigator as any).mozConnection || \r\n                    (navigator as any).webkitConnection;\r\n  \r\n  if (connection) {\r\n    return `${connection.effectiveType || 'unknown'} (${connection.downlink || 'unknown'}Mbps)`;\r\n  }\r\n  \r\n  return 'unknown';\r\n}\r\n\r\n/**\r\n * Hook simplificado para componentes que quieren trackear su render time\r\n */\r\nexport const useComponentPerformance = (componentName: string) => {\r\n  const { trackRenderTime } = usePerformanceTracking();\r\n  const startTime = useRef<number>(0);\r\n\r\n  useEffect(() => {\r\n    startTime.current = performance.now();\r\n    \r\n    return () => {\r\n      const renderTime = performance.now() - startTime.current;\r\n      trackRenderTime(componentName, renderTime);\r\n    };\r\n  }, [componentName, trackRenderTime]);\r\n\r\n  const measureOperation = useCallback((operationName: string, operation: () => void) => {\r\n    const start = performance.now();\r\n    operation();\r\n    const end = performance.now();\r\n    trackRenderTime(`${componentName}.${operationName}`, end - start);\r\n  }, [componentName, trackRenderTime]);\r\n\r\n  return { measureOperation };\r\n};\r\n\r\nexport default usePerformanceTracking;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}