{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\utils\\validation.ts"],"sourcesContent":["// =====================================================\r\n// UTILIDADES: VALIDACIÓN DE DATOS\r\n// Descripción: Funciones para validar datos de logística\r\n// Basado en: Zod + patrones enterprise\r\n// =====================================================\r\n\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport const addressSchema = z.object({\r\n  street: z.string().min(1, 'La calle es requerida'),\r\n  number: z.string().min(1, 'El número es requerido'),\r\n  apartment: z.string().optional(),\r\n  neighborhood: z.string().min(1, 'El barrio es requerido'),\r\n  city: z.string().min(1, 'La ciudad es requerida'),\r\n  state: z.string().min(1, 'La provincia es requerida'),\r\n  postal_code: z.string().min(4, 'El código postal debe tener al menos 4 dígitos'),\r\n  country: z.string().default('AR'),\r\n  latitude: z.number().optional(),\r\n  longitude: z.number().optional(),\r\n  reference: z.string().optional()\r\n});\r\n\r\nexport const shipmentSchema = z.object({\r\n  tracking_number: z.string().min(1, 'El número de tracking es requerido'),\r\n  courier_id: z.number().min(1, 'El courier es requerido'),\r\n  service_type: z.enum(['standard', 'express', 'next_day', 'same_day']),\r\n  origin_address: addressSchema,\r\n  destination_address: addressSchema,\r\n  package_details: z.object({\r\n    weight: z.number().min(0.1, 'El peso debe ser mayor a 0'),\r\n    dimensions: z.object({\r\n      length: z.number().min(1, 'El largo debe ser mayor a 0'),\r\n      width: z.number().min(1, 'El ancho debe ser mayor a 0'),\r\n      height: z.number().min(1, 'La altura debe ser mayor a 0')\r\n    }),\r\n    declared_value: z.number().min(0, 'El valor declarado debe ser mayor o igual a 0'),\r\n    description: z.string().min(1, 'La descripción es requerida')\r\n  }),\r\n  estimated_delivery: z.string().optional(),\r\n  special_instructions: z.string().optional()\r\n});\r\n\r\n// =====================================================\r\n// FUNCIONES DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport function validateEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nexport function validatePhoneNumber(phone: string): boolean {\r\n  // Formato argentino: +54 9 351 123 4567, +54 351 123-4567, 351 123 4567, etc.\r\n  // Limpiar el teléfono de espacios, guiones y paréntesis\r\n  const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\r\n\r\n  // Patrones aceptados:\r\n  // +54351234567 (con código país)\r\n  // +549351234567 (con código país y 9)\r\n  // 351234567 (sin código país)\r\n  const phoneRegex = /^(\\+54(9)?)?\\d{10}$|^\\d{10}$/;\r\n\r\n  return phoneRegex.test(cleanPhone) && cleanPhone.length >= 10;\r\n}\r\n\r\nexport function validateDNI(dni: string): boolean {\r\n  // Limpiar el DNI de espacios, guiones y puntos\r\n  const cleanDNI = dni.replace(/[\\s\\-\\.]/g, '');\r\n\r\n  // Patrones aceptados:\r\n  // DNI: 8 dígitos (12345678)\r\n  // CUIT: 11 dígitos (20123456789)\r\n  const dniRegex = /^\\d{8}$/;\r\n  const cuitRegex = /^\\d{11}$/;\r\n\r\n  if (dniRegex.test(cleanDNI)) {\r\n    // Validar DNI (8 dígitos)\r\n    return cleanDNI.length === 8 && parseInt(cleanDNI) > 0;\r\n  } else if (cuitRegex.test(cleanDNI)) {\r\n    // Validar CUIT (11 dígitos) - validación básica\r\n    return cleanDNI.length === 11 && parseInt(cleanDNI) > 0;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function validatePostalCode(postalCode: string): boolean {\r\n  // Código postal argentino: 4 dígitos\r\n  const postalCodeRegex = /^\\d{4}$/;\r\n  return postalCodeRegex.test(postalCode);\r\n}\r\n\r\nexport function validateTrackingNumber(trackingNumber: string): boolean {\r\n  // Formato general: al menos 6 caracteres alfanuméricos\r\n  const trackingRegex = /^[A-Z0-9]{6,}$/i;\r\n  return trackingRegex.test(trackingNumber);\r\n}\r\n\r\nexport function validateCoordinates(lat: number, lng: number): boolean {\r\n  return (\r\n    lat >= -90 && lat <= 90 &&\r\n    lng >= -180 && lng <= 180\r\n  );\r\n}\r\n\r\nexport function validateWeight(weight: number): boolean {\r\n  return weight > 0 && weight <= 1000; // Máximo 1000kg\r\n}\r\n\r\nexport function validateDimensions(dimensions: {\r\n  length: number;\r\n  width: number;\r\n  height: number;\r\n}): boolean {\r\n  const { length, width, height } = dimensions;\r\n  return (\r\n    length > 0 && length <= 200 && // Máximo 200cm\r\n    width > 0 && width <= 200 &&\r\n    height > 0 && height <= 200\r\n  );\r\n}\r\n\r\n// =====================================================\r\n// VALIDACIONES DE NEGOCIO\r\n// =====================================================\r\n\r\nexport function validateDeliveryDate(date: string): boolean {\r\n  const deliveryDate = new Date(date);\r\n  const today = new Date();\r\n  const maxDate = new Date();\r\n  maxDate.setDate(today.getDate() + 30); // Máximo 30 días\r\n  \r\n  return deliveryDate >= today && deliveryDate <= maxDate;\r\n}\r\n\r\nexport function validateShippingCost(cost: number): boolean {\r\n  return cost >= 0 && cost <= 100000; // Máximo $100,000\r\n}\r\n\r\nexport function validatePackageValue(value: number): boolean {\r\n  return value >= 0 && value <= 1000000; // Máximo $1,000,000\r\n}\r\n\r\n// =====================================================\r\n// SANITIZACIÓN DE DATOS\r\n// =====================================================\r\n\r\nexport function sanitizeString(input: string): string {\r\n  return input.trim().replace(/[<>]/g, '');\r\n}\r\n\r\nexport function sanitizePhoneNumber(phone: string): string {\r\n  return phone.replace(/\\D/g, '');\r\n}\r\n\r\nexport function sanitizePostalCode(postalCode: string): string {\r\n  return postalCode.replace(/\\D/g, '').substring(0, 4);\r\n}\r\n\r\nexport function sanitizeTrackingNumber(trackingNumber: string): string {\r\n  return trackingNumber.toUpperCase().replace(/[^A-Z0-9]/g, '');\r\n}\r\n\r\n// =====================================================\r\n// TIPOS DE VALIDACIÓN\r\n// =====================================================\r\n\r\nexport type ValidationResult = {\r\n  isValid: boolean;\r\n  errors: string[];\r\n};\r\n\r\nexport function validateAddress(address: any): ValidationResult {\r\n  try {\r\n    addressSchema.parse(address);\r\n    return { isValid: true, errors: [] };\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        isValid: false,\r\n        errors: error.errors.map(err => err.message)\r\n      };\r\n    }\r\n    return { isValid: false, errors: ['Error de validación desconocido'] };\r\n  }\r\n}\r\n\r\nexport function validateShipment(shipment: any): ValidationResult {\r\n  try {\r\n    shipmentSchema.parse(shipment);\r\n    return { isValid: true, errors: [] };\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        isValid: false,\r\n        errors: error.errors.map(err => err.message)\r\n      };\r\n    }\r\n    return { isValid: false, errors: ['Error de validación desconocido'] };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["addressSchema","sanitizePhoneNumber","sanitizePostalCode","sanitizeString","sanitizeTrackingNumber","shipmentSchema","validateAddress","validateCoordinates","validateDNI","validateDeliveryDate","validateDimensions","validateEmail","validatePackageValue","validatePhoneNumber","validatePostalCode","validateShipment","validateShippingCost","validateTrackingNumber","validateWeight","z","object","street","string","min","number","apartment","optional","neighborhood","city","state","postal_code","country","default","latitude","longitude","reference","tracking_number","courier_id","service_type","enum","origin_address","destination_address","package_details","weight","dimensions","length","width","height","declared_value","description","estimated_delivery","special_instructions","email","emailRegex","test","phone","cleanPhone","replace","phoneRegex","dni","cleanDNI","dniRegex","cuitRegex","parseInt","postalCode","postalCodeRegex","trackingNumber","trackingRegex","lat","lng","date","deliveryDate","Date","today","maxDate","setDate","getDate","cost","value","input","trim","substring","toUpperCase","address","parse","isValid","errors","error","ZodError","map","err","message","shipment"],"mappings":"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"}