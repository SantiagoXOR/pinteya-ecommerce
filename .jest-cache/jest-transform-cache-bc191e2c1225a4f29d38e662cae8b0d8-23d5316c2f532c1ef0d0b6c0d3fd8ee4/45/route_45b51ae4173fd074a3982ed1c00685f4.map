{"version":3,"names":["cov_2jqmf9rr90","actualCoverage","s","GET","f","POST","runtime","MAX_BULK_OPERATIONS","BATCH_SIZE","BulkUserOperationSchema","_zod","z","object","operation","enum","user_ids","array","string","uuid","min","max","data","role","optional","export_format","include_orders","boolean","date_range","start","end","BulkExportSchema","filters","is_active","created_after","created_before","has_orders","min_orders","number","min_spent","format","default","include_addresses","validateAdminAuth","b","process","env","NODE_ENV","BYPASS_AUTH","user","id","email","name","userId","session","_config","auth","error","status","isAdmin","_logger","logger","log","LogLevel","ERROR","LogCategory","AUTH","processUsersInBatches","userIds","processor","results","i","length","batch","slice","batchResults","push","Promise","resolve","setTimeout","bulkActivateUsers","adminUserId","result","success","failed","errors","_supabase","supabaseAdmin","from","update","updated_at","Date","toISOString","in","neq","select","forEach","user_id","message","failedIds","filter","some","u","bulkDeactivateUsers","bulkUpdateRole","newRole","admin","updateUserById","user_metadata","authError","WARN","bulkDeleteUsers","usersWithOrders","userIdsWithOrders","Set","map","o","deletableUserIds","has","deleteUser","delete","exportUsers","includeOrders","includeAddresses","query","eq","undefined","gte","lte","users","order","ascending","Error","processedUsers","orderStats","ordersByUser","reduce","acc","count","total_spent","completed_orders","total","orders_count","total_count","export_date","filters_applied","request","startTime","now","rateLimitResult","_ratelimiting","checkRateLimit","windowMs","_ratelimiter","RATE_LIMIT_CONFIGS","maxRequests","Math","floor","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","body","validationResult","safeParse","exportData","includes","processed_users","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","INFO","ADMIN","userCount","successCount","failedCount","nextResponse","API","searchParams","URL","url","exportParams","get","parseInt","parseFloat"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\users\\bulk\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - ADMIN USERS BULK OPERATIONS API ENTERPRISE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { ApiResponse } from '@/types/api';\r\nimport { z } from 'zod';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { checkRateLimit } from '@/lib/auth/rate-limiting';\r\nimport { addRateLimitHeaders, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\n\r\nconst MAX_BULK_OPERATIONS = 100;\r\nconst BATCH_SIZE = 10;\r\n\r\n// ===================================\r\n// SCHEMAS DE VALIDACIÓN\r\n// ===================================\r\n\r\nconst BulkUserOperationSchema = z.object({\r\n  operation: z.enum(['activate', 'deactivate', 'delete', 'update_role', 'export']),\r\n  user_ids: z.array(z.string().uuid()).min(1, 'Debe seleccionar al menos un usuario').max(MAX_BULK_OPERATIONS, `Máximo ${MAX_BULK_OPERATIONS} usuarios por operación`),\r\n  data: z.object({\r\n    role: z.enum(['user', 'admin', 'moderator']).optional(),\r\n    export_format: z.enum(['csv', 'json', 'xlsx']).optional(),\r\n    include_orders: z.boolean().optional(),\r\n    date_range: z.object({\r\n      start: z.string().optional(),\r\n      end: z.string().optional()\r\n    }).optional()\r\n  }).optional()\r\n});\r\n\r\nconst BulkExportSchema = z.object({\r\n  filters: z.object({\r\n    role: z.enum(['user', 'admin', 'moderator']).optional(),\r\n    is_active: z.boolean().optional(),\r\n    created_after: z.string().optional(),\r\n    created_before: z.string().optional(),\r\n    has_orders: z.boolean().optional(),\r\n    min_orders: z.number().min(0).optional(),\r\n    min_spent: z.number().min(0).optional()\r\n  }).optional(),\r\n  format: z.enum(['csv', 'json', 'xlsx']).default('csv'),\r\n  include_orders: z.boolean().default(false),\r\n  include_addresses: z.boolean().default(false)\r\n});\r\n\r\n// ===================================\r\n// TIPOS DE DATOS\r\n// ===================================\r\n\r\ninterface BulkOperationResult {\r\n  success: number;\r\n  failed: number;\r\n  errors: Array<{\r\n    user_id: string;\r\n    error: string;\r\n  }>;\r\n  processed_users?: any[];\r\n}\r\n\r\ninterface ExportData {\r\n  users: any[];\r\n  total_count: number;\r\n  export_date: string;\r\n  filters_applied: any;\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE AUTENTICACIÓN ADMIN\r\n// ===================================\r\n\r\nasync function validateAdminAuth() {\r\n  try {\r\n    // BYPASS TEMPORAL PARA DESARROLLO\r\n    if (process.env.NODE_ENV === 'development' && process.env.BYPASS_AUTH === 'true') {\r\n      return {\r\n        user: {\r\n          id: 'dev-admin',\r\n          email: 'santiago@xor.com.ar',\r\n          name: 'Dev Admin'\r\n        },\r\n        userId: 'dev-admin'\r\n      };\r\n    }\r\n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return { error: 'Usuario no autenticado', status: 401 };\r\n    }\r\n\r\n    // Verificar si es admin\r\n    const isAdmin = session.user.email === 'santiago@xor.com.ar';\r\n    if (!isAdmin) {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { user: session.user, userId: session.user.id };\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUTH, 'Error en validación admin', { error });\r\n    return { error: 'Error de autenticación', status: 500 };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\n\r\nasync function processUsersInBatches<T>(\r\n  userIds: string[],\r\n  processor: (batch: string[]) => Promise<T[]>\r\n): Promise<T[]> {\r\n  const results: T[] = [];\r\n  \r\n  for (let i = 0; i < userIds.length; i += BATCH_SIZE) {\r\n    const batch = userIds.slice(i, i + BATCH_SIZE);\r\n    const batchResults = await processor(batch);\r\n    results.push(...batchResults);\r\n    \r\n    // Pequeña pausa entre lotes para evitar sobrecarga\r\n    if (i + BATCH_SIZE < userIds.length) {\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n\r\nasync function bulkActivateUsers(userIds: string[], adminUserId: string): Promise<BulkOperationResult> {\r\n  const result: BulkOperationResult = {\r\n    success: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n\r\n  await processUsersInBatches(userIds, async (batch) => {\r\n    try {\r\n      const { data, error } = await supabaseAdmin\r\n        .from('users')\r\n        .update({ \r\n          is_active: true,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .in('id', batch)\r\n        .neq('id', adminUserId) // Prevenir auto-modificación\r\n        .select('id');\r\n\r\n      if (error) {\r\n        batch.forEach(id => {\r\n          result.errors.push({ user_id: id, error: error.message });\r\n          result.failed++;\r\n        });\r\n      } else {\r\n        result.success += data?.length || 0;\r\n        const failedIds = batch.filter(id => !data?.some(u => u.id === id));\r\n        failedIds.forEach(id => {\r\n          result.errors.push({ user_id: id, error: 'Usuario no encontrado o no se pudo activar' });\r\n          result.failed++;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      batch.forEach(id => {\r\n        result.errors.push({ user_id: id, error: 'Error interno' });\r\n        result.failed++;\r\n      });\r\n    }\r\n    return [];\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function bulkDeactivateUsers(userIds: string[], adminUserId: string): Promise<BulkOperationResult> {\r\n  const result: BulkOperationResult = {\r\n    success: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n\r\n  await processUsersInBatches(userIds, async (batch) => {\r\n    try {\r\n      const { data, error } = await supabaseAdmin\r\n        .from('users')\r\n        .update({ \r\n          is_active: false,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .in('id', batch)\r\n        .neq('id', adminUserId) // Prevenir auto-desactivación\r\n        .select('id');\r\n\r\n      if (error) {\r\n        batch.forEach(id => {\r\n          result.errors.push({ user_id: id, error: error.message });\r\n          result.failed++;\r\n        });\r\n      } else {\r\n        result.success += data?.length || 0;\r\n        const failedIds = batch.filter(id => !data?.some(u => u.id === id));\r\n        failedIds.forEach(id => {\r\n          result.errors.push({ user_id: id, error: 'Usuario no encontrado o no se pudo desactivar' });\r\n          result.failed++;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      batch.forEach(id => {\r\n        result.errors.push({ user_id: id, error: 'Error interno' });\r\n        result.failed++;\r\n      });\r\n    }\r\n    return [];\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function bulkUpdateRole(userIds: string[], newRole: string, adminUserId: string): Promise<BulkOperationResult> {\r\n  const result: BulkOperationResult = {\r\n    success: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n\r\n  await processUsersInBatches(userIds, async (batch) => {\r\n    try {\r\n      const { data, error } = await supabaseAdmin\r\n        .from('users')\r\n        .update({ \r\n          role: newRole,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .in('id', batch)\r\n        .neq('id', adminUserId) // Prevenir auto-modificación de rol\r\n        .select('id, email');\r\n\r\n      if (error) {\r\n        batch.forEach(id => {\r\n          result.errors.push({ user_id: id, error: error.message });\r\n          result.failed++;\r\n        });\r\n      } else {\r\n        result.success += data?.length || 0;\r\n        \r\n        // Actualizar también en Auth metadata\r\n        for (const user of data || []) {\r\n          try {\r\n            await supabaseAdmin.auth.admin.updateUserById(user.id, {\r\n              user_metadata: { role: newRole }\r\n            });\r\n          } catch (authError) {\r\n            logger.log(LogLevel.WARN, LogCategory.AUTH, 'Error actualizando rol en Auth', { \r\n              userId: user.id, \r\n              authError \r\n            });\r\n          }\r\n        }\r\n        \r\n        const failedIds = batch.filter(id => !data?.some(u => u.id === id));\r\n        failedIds.forEach(id => {\r\n          result.errors.push({ user_id: id, error: 'Usuario no encontrado o no se pudo actualizar' });\r\n          result.failed++;\r\n        });\r\n      }\r\n    } catch (error) {\r\n      batch.forEach(id => {\r\n        result.errors.push({ user_id: id, error: 'Error interno' });\r\n        result.failed++;\r\n      });\r\n    }\r\n    return [];\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function bulkDeleteUsers(userIds: string[], adminUserId: string): Promise<BulkOperationResult> {\r\n  const result: BulkOperationResult = {\r\n    success: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n\r\n  // Verificar que ningún usuario tenga órdenes\r\n  const { data: usersWithOrders } = await supabaseAdmin\r\n    .from('orders')\r\n    .select('user_id')\r\n    .in('user_id', userIds);\r\n\r\n  const userIdsWithOrders = new Set(usersWithOrders?.map(o => o.user_id) || []);\r\n  \r\n  // Filtrar usuarios que se pueden eliminar\r\n  const deletableUserIds = userIds.filter(id => \r\n    id !== adminUserId && !userIdsWithOrders.has(id)\r\n  );\r\n  \r\n  // Marcar como error los que no se pueden eliminar\r\n  userIds.forEach(id => {\r\n    if (id === adminUserId) {\r\n      result.errors.push({ user_id: id, error: 'No puedes eliminar tu propia cuenta' });\r\n      result.failed++;\r\n    } else if (userIdsWithOrders.has(id)) {\r\n      result.errors.push({ user_id: id, error: 'Usuario tiene órdenes asociadas' });\r\n      result.failed++;\r\n    }\r\n  });\r\n\r\n  if (deletableUserIds.length === 0) {\r\n    return result;\r\n  }\r\n\r\n  await processUsersInBatches(deletableUserIds, async (batch) => {\r\n    try {\r\n      // Eliminar de Auth primero\r\n      for (const userId of batch) {\r\n        try {\r\n          await supabaseAdmin.auth.admin.deleteUser(userId);\r\n        } catch (authError) {\r\n          result.errors.push({ user_id: userId, error: 'Error eliminando de autenticación' });\r\n          result.failed++;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Eliminar perfiles\r\n      const { data, error } = await supabaseAdmin\r\n        .from('users')\r\n        .delete()\r\n        .in('id', batch)\r\n        .select('id');\r\n\r\n      if (error) {\r\n        batch.forEach(id => {\r\n          result.errors.push({ user_id: id, error: error.message });\r\n          result.failed++;\r\n        });\r\n      } else {\r\n        result.success += data?.length || 0;\r\n      }\r\n    } catch (error) {\r\n      batch.forEach(id => {\r\n        result.errors.push({ user_id: id, error: 'Error interno' });\r\n        result.failed++;\r\n      });\r\n    }\r\n    return [];\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nasync function exportUsers(filters: any, format: string, includeOrders: boolean, includeAddresses: boolean): Promise<ExportData> {\r\n  let query = supabaseAdmin\r\n    .from('users')\r\n    .select(`\r\n      id,\r\n      email,\r\n      name,\r\n      role,\r\n      is_active,\r\n      phone,\r\n      created_at,\r\n      updated_at,\r\n      last_login,\r\n      ${includeAddresses ? 'address,' : ''}\r\n      avatar_url\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (filters?.role) {\r\n    query = query.eq('role', filters.role);\r\n  }\r\n  if (filters?.is_active !== undefined) {\r\n    query = query.eq('is_active', filters.is_active);\r\n  }\r\n  if (filters?.created_after) {\r\n    query = query.gte('created_at', filters.created_after);\r\n  }\r\n  if (filters?.created_before) {\r\n    query = query.lte('created_at', filters.created_before);\r\n  }\r\n\r\n  const { data: users, error } = await query.order('created_at', { ascending: false });\r\n\r\n  if (error) {\r\n    throw new Error(`Error exportando usuarios: ${error.message}`);\r\n  }\r\n\r\n  let processedUsers = users || [];\r\n\r\n  // Incluir estadísticas de órdenes si se solicita\r\n  if (includeOrders) {\r\n    const userIds = processedUsers.map(u => u.id);\r\n    const { data: orderStats } = await supabaseAdmin\r\n      .from('orders')\r\n      .select('user_id, total, status')\r\n      .in('user_id', userIds);\r\n\r\n    const ordersByUser = (orderStats || []).reduce((acc, order) => {\r\n      if (!acc[order.user_id]) {\r\n        acc[order.user_id] = { count: 0, total_spent: 0, completed_orders: 0 };\r\n      }\r\n      acc[order.user_id].count++;\r\n      if (order.status === 'completed') {\r\n        acc[order.user_id].completed_orders++;\r\n        acc[order.user_id].total_spent += order.total || 0;\r\n      }\r\n      return acc;\r\n    }, {} as Record<string, any>);\r\n\r\n    processedUsers = processedUsers.map(user => ({\r\n      ...user,\r\n      orders_count: ordersByUser[user.id]?.count || 0,\r\n      completed_orders: ordersByUser[user.id]?.completed_orders || 0,\r\n      total_spent: ordersByUser[user.id]?.total_spent || 0\r\n    }));\r\n  }\r\n\r\n  // Aplicar filtros adicionales basados en órdenes\r\n  if (filters?.has_orders !== undefined) {\r\n    processedUsers = processedUsers.filter(user => \r\n      filters.has_orders ? (user.orders_count || 0) > 0 : (user.orders_count || 0) === 0\r\n    );\r\n  }\r\n  if (filters?.min_orders) {\r\n    processedUsers = processedUsers.filter(user => (user.orders_count || 0) >= filters.min_orders);\r\n  }\r\n  if (filters?.min_spent) {\r\n    processedUsers = processedUsers.filter(user => (user.total_spent || 0) >= filters.min_spent);\r\n  }\r\n\r\n  return {\r\n    users: processedUsers,\r\n    total_count: processedUsers.length,\r\n    export_date: new Date().toISOString(),\r\n    filters_applied: filters\r\n  };\r\n}\r\n\r\n// ===================================\r\n// POST - Operaciones masivas\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: Math.floor(RATE_LIMIT_CONFIGS.admin.maxRequests / 2), // Más restrictivo para operaciones masivas\r\n        message: 'Demasiadas operaciones masivas'\r\n      },\r\n      'admin-users-bulk'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = BulkUserOperationSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Datos de operación masiva inválidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const { operation, user_ids, data } = validationResult.data;\r\n    let result: BulkOperationResult;\r\n\r\n    // Ejecutar operación según el tipo\r\n    switch (operation) {\r\n      case 'activate':\r\n        result = await bulkActivateUsers(user_ids, authResult.userId!);\r\n        break;\r\n      \r\n      case 'deactivate':\r\n        result = await bulkDeactivateUsers(user_ids, authResult.userId!);\r\n        break;\r\n      \r\n      case 'update_role':\r\n        if (!data?.role) {\r\n          const errorResponse: ApiResponse<null> = {\r\n            data: null,\r\n            success: false,\r\n            error: 'Rol requerido para actualización masiva',\r\n          };\r\n          return NextResponse.json(errorResponse, { status: 400 });\r\n        }\r\n        result = await bulkUpdateRole(user_ids, data.role, authResult.userId!);\r\n        break;\r\n      \r\n      case 'delete':\r\n        result = await bulkDeleteUsers(user_ids, authResult.userId!);\r\n        break;\r\n      \r\n      case 'export':\r\n        const exportData = await exportUsers(\r\n          {}, // Filtros vacíos, se usan los user_ids\r\n          data?.export_format || 'csv',\r\n          data?.include_orders || false,\r\n          false\r\n        );\r\n        \r\n        // Filtrar solo los usuarios solicitados\r\n        exportData.users = exportData.users.filter(user => user_ids.includes(user.id));\r\n        exportData.total_count = exportData.users.length;\r\n        \r\n        result = {\r\n          success: exportData.users.length,\r\n          failed: 0,\r\n          errors: [],\r\n          processed_users: exportData.users\r\n        };\r\n        break;\r\n      \r\n      default:\r\n        const errorResponse: ApiResponse<null> = {\r\n          data: null,\r\n          success: false,\r\n          error: 'Operación no soportada',\r\n        };\r\n        return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/bulk',\r\n      method: 'POST',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Operación masiva de usuarios ejecutada', {\r\n      adminUserId: authResult.userId,\r\n      operation,\r\n      userCount: user_ids.length,\r\n      successCount: result.success,\r\n      failedCount: result.failed\r\n    });\r\n\r\n    const response: ApiResponse<BulkOperationResult> = {\r\n      data: result,\r\n      success: true,\r\n      message: `Operación ${operation} completada. ${result.success} exitosos, ${result.failed} fallidos.`\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/users/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/bulk',\r\n      method: 'POST',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET - Exportar usuarios con filtros\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message || 'Demasiadas solicitudes administrativas'\r\n      },\r\n      'admin-users-export'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Parsear parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const exportParams = {\r\n      filters: {\r\n        role: searchParams.get('role') || undefined,\r\n        is_active: searchParams.get('is_active') ? searchParams.get('is_active') === 'true' : undefined,\r\n        created_after: searchParams.get('created_after') || undefined,\r\n        created_before: searchParams.get('created_before') || undefined,\r\n        has_orders: searchParams.get('has_orders') ? searchParams.get('has_orders') === 'true' : undefined,\r\n        min_orders: searchParams.get('min_orders') ? parseInt(searchParams.get('min_orders')!) : undefined,\r\n        min_spent: searchParams.get('min_spent') ? parseFloat(searchParams.get('min_spent')!) : undefined\r\n      },\r\n      format: (searchParams.get('format') as 'csv' | 'json' | 'xlsx') || 'csv',\r\n      include_orders: searchParams.get('include_orders') === 'true',\r\n      include_addresses: searchParams.get('include_addresses') === 'true'\r\n    };\r\n\r\n    // Validar parámetros\r\n    const validationResult = BulkExportSchema.safeParse(exportParams);\r\n    if (!validationResult.success) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: 'Parámetros de exportación inválidos',\r\n      };\r\n      return NextResponse.json(errorResponse, { status: 400 });\r\n    }\r\n\r\n    const { filters, format, include_orders, include_addresses } = validationResult.data;\r\n\r\n    // Exportar usuarios\r\n    const exportData = await exportUsers(filters, format, include_orders, include_addresses);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/bulk',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    // Log de auditoría\r\n    logger.log(LogLevel.INFO, LogCategory.ADMIN, 'Exportación de usuarios realizada', {\r\n      adminUserId: authResult.userId,\r\n      format,\r\n      userCount: exportData.total_count,\r\n      filters\r\n    });\r\n\r\n    const response: ApiResponse<ExportData> = {\r\n      data: exportData,\r\n      success: true,\r\n      message: `${exportData.total_count} usuarios exportados exitosamente`\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/users/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/users/bulk',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}