1b8233d707fcd91f9c952d4ca3354390
/**
 * Hook para geolocalizaci√≥n autom√°tica y detecci√≥n de zona de entrega
 * Detecta la ubicaci√≥n del usuario y determina la zona de entrega m√°s cercana
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useGeolocation", {
    enumerable: true,
    get: function() {
        return useGeolocation;
    }
});
const _react = require("react");
// Zonas de entrega con coordenadas aproximadas
const DELIVERY_ZONES = [
    {
        id: 'cordoba-capital',
        name: 'C√≥rdoba Capital',
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 15
    },
    {
        id: 'cordoba-interior',
        name: 'Interior de C√≥rdoba',
        available: true,
        coordinates: {
            lat: -31.4201,
            lng: -64.1888
        },
        radius: 100
    },
    {
        id: 'buenos-aires',
        name: 'Buenos Aires',
        available: false,
        coordinates: {
            lat: -34.6118,
            lng: -58.396
        },
        radius: 50
    },
    {
        id: 'rosario',
        name: 'Rosario',
        available: false,
        coordinates: {
            lat: -32.9442,
            lng: -60.6505
        },
        radius: 30
    }
];
// Funci√≥n para calcular distancia entre dos puntos (f√≥rmula de Haversine)
function calculateDistance(lat1, lng1, lat2, lng2) {
    const R = 6371 // Radio de la Tierra en km
    ;
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}
// Funci√≥n para detectar la zona m√°s cercana
function detectNearestZone(userLat, userLng) {
    let nearestZone = null;
    let minDistance = Infinity;
    for (const zone of DELIVERY_ZONES){
        if (zone.coordinates) {
            const distance = calculateDistance(userLat, userLng, zone.coordinates.lat, zone.coordinates.lng);
            console.log(`üó∫Ô∏è Distance to ${zone.name}: ${distance.toFixed(2)}km (radius: ${zone.radius}km)`);
            // Verificar si est√° dentro del radio de la zona
            if (zone.radius && distance <= zone.radius && distance < minDistance) {
                nearestZone = zone;
                minDistance = distance;
            } else {}
        } else {}
    }
    // Si no encuentra una zona espec√≠fica, usar C√≥rdoba Interior como fallback
    const fallbackZone = DELIVERY_ZONES.find((zone)=>zone.id === 'cordoba-interior');
    const result = nearestZone || fallbackZone || null;
    return result;
}
const useGeolocation = ()=>{
    const [state, setState] = (0, _react.useState)({
        location: null,
        isLoading: false,
        error: null,
        permissionStatus: 'unknown',
        detectedZone: null
    });
    // Funci√≥n para solicitar geolocalizaci√≥n
    const requestLocation = (0, _react.useCallback)(()=>{
        if (!navigator.geolocation) {
            setState((prev)=>({
                    ...prev,
                    error: 'Geolocalizaci√≥n no soportada por este navegador',
                    permissionStatus: 'denied'
                }));
            return;
        }
        setState((prev)=>{
            const newState = {
                ...prev,
                isLoading: true,
                error: null
            };
            return newState;
        });
        // Usar Promise para mejor manejo de errores
        const getCurrentPositionPromise = ()=>{
            return new Promise((resolve, reject)=>{
                navigator.geolocation.getCurrentPosition(resolve, reject, {
                    enableHighAccuracy: false,
                    timeout: 30000,
                    maximumAge: 0
                });
            });
        };
        // Ejecutar con async/await para mejor control
        getCurrentPositionPromise().then((position)=>{
            const { latitude, longitude, accuracy } = position.coords;
            const detectedZone = detectNearestZone(latitude, longitude);
            // Usar setTimeout para asegurar que el setState se ejecute en el pr√≥ximo tick
            setTimeout(()=>{
                setState((prev)=>{
                    const newState = {
                        ...prev,
                        location: {
                            lat: latitude,
                            lng: longitude
                        },
                        detectedZone,
                        isLoading: false,
                        permissionStatus: 'granted',
                        error: null
                    };
                    return newState;
                });
            }, 0);
        }).catch((error)=>{
            let errorMessage = 'Error al obtener ubicaci√≥n';
            let permissionStatus = 'unknown';
            switch(error.code){
                case error.PERMISSION_DENIED:
                    errorMessage = 'Permisos de ubicaci√≥n denegados';
                    permissionStatus = 'denied';
                    break;
                case error.POSITION_UNAVAILABLE:
                    errorMessage = 'Ubicaci√≥n no disponible';
                    break;
                case error.TIMEOUT:
                    errorMessage = 'Tiempo de espera agotado';
                    break;
            }
            // Tambi√©n usar setTimeout para el manejo de errores
            setTimeout(()=>{
                setState((prev)=>({
                        ...prev,
                        error: errorMessage,
                        isLoading: false,
                        permissionStatus
                    }));
            }, 0);
        });
    }, []);
    // Verificar permisos al montar el componente
    (0, _react.useEffect)(()=>{
        if ('permissions' in navigator) {
            navigator.permissions.query({
                name: 'geolocation'
            }).then((result)=>{
                setState((prev)=>({
                        ...prev,
                        permissionStatus: result.state
                    }));
                // Si ya tiene permisos, solicitar ubicaci√≥n autom√°ticamente
                if (result.state === 'granted') {
                // No solicitar autom√°ticamente para evitar bucles infinitos
                } else if (result.state === 'prompt') {
                // No solicitar autom√°ticamente si es 'prompt' para evitar popup inesperado
                } else {}
            }).catch((error)=>{
                setState((prev)=>({
                        ...prev,
                        permissionStatus: 'unknown'
                    }));
            });
        } else {
            setState((prev)=>({
                    ...prev,
                    permissionStatus: 'unknown'
                }));
        }
    }, []); // Sin dependencias para evitar bucles
    // Funci√≥n para obtener todas las zonas disponibles
    const getAvailableZones = (0, _react.useCallback)(()=>{
        return DELIVERY_ZONES;
    }, []);
    // Funci√≥n para seleccionar zona manualmente
    const selectZone = (0, _react.useCallback)((zoneId)=>{
        const zone = DELIVERY_ZONES.find((z)=>z.id === zoneId);
        if (zone) {
            setState((prev)=>({
                    ...prev,
                    detectedZone: zone
                }));
        }
    }, []);
    // Funci√≥n de test para simular geolocalizaci√≥n exitosa
    const testLocation = (0, _react.useCallback)((lat = -31.4201, lng = -64.1888)=>{
        const detectedZone = detectNearestZone(lat, lng);
        setState((prev)=>{
            const newState = {
                ...prev,
                location: {
                    lat,
                    lng
                },
                detectedZone,
                isLoading: false,
                permissionStatus: 'granted',
                error: null
            };
            return newState;
        });
    }, []);
    return {
        ...state,
        requestLocation,
        getAvailableZones,
        selectZone,
        deliveryZones: DELIVERY_ZONES,
        testLocation
    };
};

//# sourceMappingURL=data:application/json;base64,