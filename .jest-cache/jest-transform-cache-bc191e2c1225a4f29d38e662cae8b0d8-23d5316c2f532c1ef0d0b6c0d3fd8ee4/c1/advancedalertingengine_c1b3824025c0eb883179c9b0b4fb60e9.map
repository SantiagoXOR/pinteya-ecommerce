{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\advanced-alerting-engine.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADVANCED ALERTING ENGINE\r\n// ===================================\r\n\r\nimport { logger, LogCategory } from '../enterprise/logger';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Canales de notificación disponibles\r\n */\r\nexport enum AlertChannel {\r\n  EMAIL = 'email',\r\n  SLACK = 'slack',\r\n  WEBHOOK = 'webhook',\r\n  SMS = 'sms',\r\n  DISCORD = 'discord',\r\n  TEAMS = 'teams',\r\n  CONSOLE = 'console'\r\n}\r\n\r\n/**\r\n * Tipos de alerta\r\n */\r\nexport enum AlertType {\r\n  PERFORMANCE = 'performance',\r\n  ERROR = 'error',\r\n  CAPACITY = 'capacity',\r\n  AVAILABILITY = 'availability',\r\n  SECURITY = 'security',\r\n  BUSINESS = 'business'\r\n}\r\n\r\n/**\r\n * Severidad de alerta\r\n */\r\nexport enum AlertSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n/**\r\n * Estado de alerta\r\n */\r\nexport enum AlertStatus {\r\n  ACTIVE = 'active',\r\n  ACKNOWLEDGED = 'acknowledged',\r\n  RESOLVED = 'resolved',\r\n  SUPPRESSED = 'suppressed'\r\n}\r\n\r\n/**\r\n * Configuración de canal de alerta\r\n */\r\nexport interface AlertChannelConfig {\r\n  channel: AlertChannel;\r\n  enabled: boolean;\r\n  config: {\r\n    // Email\r\n    recipients?: string[];\r\n    smtpConfig?: {\r\n      host: string;\r\n      port: number;\r\n      secure: boolean;\r\n      auth: { user: string; pass: string };\r\n    };\r\n    \r\n    // Slack\r\n    webhookUrl?: string;\r\n    slackChannel?: string;\r\n    \r\n    // Webhook\r\n    url?: string;\r\n    headers?: Record<string, string>;\r\n    \r\n    // SMS\r\n    provider?: 'twilio' | 'aws-sns';\r\n    phoneNumbers?: string[];\r\n    \r\n    // Discord\r\n    discordWebhook?: string;\r\n    \r\n    // Teams\r\n    teamsWebhook?: string;\r\n  };\r\n  filters?: {\r\n    severities?: AlertSeverity[];\r\n    types?: AlertType[];\r\n    keywords?: string[];\r\n  };\r\n  rateLimiting?: {\r\n    maxAlertsPerHour: number;\r\n    cooldownMinutes: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Política de escalación\r\n */\r\nexport interface EscalationPolicy {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  rules: EscalationRule[];\r\n}\r\n\r\n/**\r\n * Regla de escalación\r\n */\r\nexport interface EscalationRule {\r\n  level: number;\r\n  delayMinutes: number;\r\n  channels: AlertChannel[];\r\n  conditions?: {\r\n    severities?: AlertSeverity[];\r\n    types?: AlertType[];\r\n    unacknowledgedOnly?: boolean;\r\n  };\r\n  recipients?: {\r\n    emails?: string[];\r\n    phones?: string[];\r\n    slackUsers?: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Alerta avanzada\r\n */\r\nexport interface AdvancedAlert {\r\n  id: string;\r\n  type: AlertType;\r\n  severity: AlertSeverity;\r\n  status: AlertStatus;\r\n  title: string;\r\n  message: string;\r\n  details: Record<string, unknown>;\r\n  source: string;\r\n  timestamp: number;\r\n  acknowledgedBy?: string;\r\n  acknowledgedAt?: number;\r\n  resolvedBy?: string;\r\n  resolvedAt?: number;\r\n  escalationLevel: number;\r\n  escalatedAt?: number;\r\n  suppressedUntil?: number;\r\n  tags: string[];\r\n  fingerprint: string; // Para deduplicación\r\n  relatedAlerts: string[];\r\n  metrics?: {\r\n    value: number;\r\n    threshold: number;\r\n    unit: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Configuración de supresión\r\n */\r\nexport interface SuppressionRule {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  conditions: {\r\n    types?: AlertType[];\r\n    severities?: AlertSeverity[];\r\n    sources?: string[];\r\n    keywords?: string[];\r\n    timeWindows?: Array<{\r\n      start: string; // HH:MM\r\n      end: string;   // HH:MM\r\n      days: number[]; // 0-6 (domingo-sábado)\r\n    }>;\r\n  };\r\n  duration?: number; // minutos\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas de canales\r\n */\r\nexport const DEFAULT_CHANNEL_CONFIGS: AlertChannelConfig[] = [\r\n  {\r\n    channel: AlertChannel.EMAIL,\r\n    enabled: true,\r\n    config: {\r\n      recipients: ['admin@pinteya.com', 'dev@pinteya.com']\r\n    },\r\n    filters: {\r\n      severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n    },\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 10,\r\n      cooldownMinutes: 5\r\n    }\r\n  },\r\n  {\r\n    channel: AlertChannel.SLACK,\r\n    enabled: true,\r\n    config: {\r\n      webhookUrl: process.env.SLACK_WEBHOOK_URL,\r\n      slackChannel: '#alerts'\r\n    },\r\n    filters: {\r\n      severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n    },\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 20,\r\n      cooldownMinutes: 2\r\n    }\r\n  },\r\n  {\r\n    channel: AlertChannel.CONSOLE,\r\n    enabled: true,\r\n    config: {},\r\n    rateLimiting: {\r\n      maxAlertsPerHour: 100,\r\n      cooldownMinutes: 0\r\n    }\r\n  }\r\n];\r\n\r\n/**\r\n * Política de escalación por defecto\r\n */\r\nexport const DEFAULT_ESCALATION_POLICY: EscalationPolicy = {\r\n  id: 'default',\r\n  name: 'Política de Escalación por Defecto',\r\n  enabled: true,\r\n  rules: [\r\n    {\r\n      level: 1,\r\n      delayMinutes: 0,\r\n      channels: [AlertChannel.SLACK, AlertChannel.CONSOLE],\r\n      conditions: {\r\n        severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL]\r\n      }\r\n    },\r\n    {\r\n      level: 2,\r\n      delayMinutes: 15,\r\n      channels: [AlertChannel.EMAIL],\r\n      conditions: {\r\n        severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL],\r\n        unacknowledgedOnly: true\r\n      }\r\n    },\r\n    {\r\n      level: 3,\r\n      delayMinutes: 60,\r\n      channels: [AlertChannel.SMS],\r\n      conditions: {\r\n        severities: [AlertSeverity.CRITICAL],\r\n        unacknowledgedOnly: true\r\n      },\r\n      recipients: {\r\n        phones: ['+5491123456789'] // Número de emergencia\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Motor de alertas avanzado\r\n */\r\nexport class AdvancedAlertingEngine {\r\n  private static instance: AdvancedAlertingEngine;\r\n  private redis = getRedisClient();\r\n  private alerts: Map<string, AdvancedAlert> = new Map();\r\n  private channelConfigs: Map<AlertChannel, AlertChannelConfig> = new Map();\r\n  private escalationPolicies: Map<string, EscalationPolicy> = new Map();\r\n  private suppressionRules: Map<string, SuppressionRule> = new Map();\r\n  private escalationTimers: Map<string, NodeJS.Timeout> = new Map();\r\n  private rateLimitCounters: Map<string, { count: number; resetTime: number }> = new Map();\r\n\r\n  private constructor() {\r\n    this.initializeDefaultConfigs();\r\n  }\r\n\r\n  static getInstance(): AdvancedAlertingEngine {\r\n    if (!AdvancedAlertingEngine.instance) {\r\n      AdvancedAlertingEngine.instance = new AdvancedAlertingEngine();\r\n    }\r\n    return AdvancedAlertingEngine.instance;\r\n  }\r\n\r\n  /**\r\n   * Inicializa configuraciones por defecto\r\n   */\r\n  private initializeDefaultConfigs(): void {\r\n    // Configurar canales por defecto\r\n    DEFAULT_CHANNEL_CONFIGS.forEach(config => {\r\n      this.channelConfigs.set(config.channel, config);\r\n    });\r\n\r\n    // Configurar política de escalación por defecto\r\n    this.escalationPolicies.set(DEFAULT_ESCALATION_POLICY.id, DEFAULT_ESCALATION_POLICY);\r\n\r\n    logger.info(LogCategory.MONITORING, 'Advanced Alerting Engine initialized');\r\n  }\r\n\r\n  /**\r\n   * Crea y procesa una nueva alerta\r\n   */\r\n  async createAlert(\r\n    type: AlertType,\r\n    severity: AlertSeverity,\r\n    title: string,\r\n    message: string,\r\n    details: Record<string, unknown> = {},\r\n    source: string = 'system',\r\n    tags: string[] = []\r\n  ): Promise<string> {\r\n    // Generar fingerprint para deduplicación\r\n    const fingerprint = this.generateFingerprint(type, title, source);\r\n    \r\n    // Verificar si ya existe una alerta similar activa\r\n    const existingAlert = this.findExistingAlert(fingerprint);\r\n    if (existingAlert && existingAlert.status === AlertStatus.ACTIVE) {\r\n      // Actualizar alerta existente en lugar de crear nueva\r\n      return this.updateExistingAlert(existingAlert.id, details);\r\n    }\r\n\r\n    // Verificar reglas de supresión\r\n    if (await this.isAlertSuppressed(type, severity, source, title)) {\r\n      logger.info(LogCategory.MONITORING, `Alert suppressed: ${title}`);\r\n      return '';\r\n    }\r\n\r\n    const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const alert: AdvancedAlert = {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      status: AlertStatus.ACTIVE,\r\n      title,\r\n      message,\r\n      details,\r\n      source,\r\n      timestamp: Date.now(),\r\n      escalationLevel: 0,\r\n      tags,\r\n      fingerprint,\r\n      relatedAlerts: []\r\n    };\r\n\r\n    this.alerts.set(alertId, alert);\r\n\r\n    // Persistir en Redis\r\n    await this.persistAlert(alert);\r\n\r\n    // Procesar alerta inmediatamente\r\n    await this.processAlert(alert);\r\n\r\n    // Programar escalación si es necesario\r\n    this.scheduleEscalation(alert);\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert created: ${title}`, {\r\n      id: alertId,\r\n      type,\r\n      severity,\r\n      source\r\n    });\r\n\r\n    return alertId;\r\n  }\r\n\r\n  /**\r\n   * Procesa una alerta enviándola a los canales apropiados\r\n   */\r\n  private async processAlert(alert: AdvancedAlert): Promise<void> {\r\n    const applicableChannels = this.getApplicableChannels(alert);\r\n    \r\n    const sendPromises = applicableChannels.map(async (channelConfig) => {\r\n      try {\r\n        // Verificar rate limiting\r\n        if (!this.checkRateLimit(channelConfig)) {\r\n          logger.warn(LogCategory.MONITORING, `Rate limit exceeded for channel ${channelConfig.channel}`);\r\n          return;\r\n        }\r\n\r\n        await this.sendToChannel(alert, channelConfig);\r\n        this.updateRateLimit(channelConfig);\r\n        \r\n      } catch (error) {\r\n        logger.error(LogCategory.MONITORING, `Error sending alert to ${channelConfig.channel}`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(sendPromises);\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a un canal específico\r\n   */\r\n  private async sendToChannel(alert: AdvancedAlert, channelConfig: AlertChannelConfig): Promise<void> {\r\n    switch (channelConfig.channel) {\r\n      case AlertChannel.EMAIL:\r\n        await this.sendEmailAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.SLACK:\r\n        await this.sendSlackAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.WEBHOOK:\r\n        await this.sendWebhookAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.SMS:\r\n        await this.sendSMSAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.DISCORD:\r\n        await this.sendDiscordAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.TEAMS:\r\n        await this.sendTeamsAlert(alert, channelConfig);\r\n        break;\r\n      \r\n      case AlertChannel.CONSOLE:\r\n        this.sendConsoleAlert(alert);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por email\r\n   */\r\n  private async sendEmailAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    // Implementación de envío de email\r\n    // En implementación real, usar nodemailer o servicio de email\r\n    logger.info(LogCategory.MONITORING, `Email alert sent: ${alert.title}`, {\r\n      recipients: config.config.recipients\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Slack\r\n   */\r\n  private async sendSlackAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.webhookUrl) {return;}\r\n\r\n    const payload = {\r\n      text: `🚨 ${this.getSeverityEmoji(alert.severity)} ${alert.title}`,\r\n      attachments: [\r\n        {\r\n          color: this.getSeverityColor(alert.severity),\r\n          fields: [\r\n            { title: 'Tipo', value: alert.type, short: true },\r\n            { title: 'Severidad', value: alert.severity, short: true },\r\n            { title: 'Fuente', value: alert.source, short: true },\r\n            { title: 'Timestamp', value: new Date(alert.timestamp).toISOString(), short: true }\r\n          ],\r\n          text: alert.message,\r\n          footer: `Alert ID: ${alert.id}`\r\n        }\r\n      ]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.webhookUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Slack webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Slack alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Slack alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por webhook\r\n   */\r\n  private async sendWebhookAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.url) {return;}\r\n\r\n    try {\r\n      const response = await fetch(config.config.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...config.config.headers\r\n        },\r\n        body: JSON.stringify({\r\n          alert,\r\n          timestamp: Date.now(),\r\n          source: 'pinteya-ecommerce'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Webhook alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending webhook alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta por SMS\r\n   */\r\n  private async sendSMSAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    // Implementación de SMS (Twilio, AWS SNS, etc.)\r\n    logger.info(LogCategory.MONITORING, `SMS alert sent: ${alert.title}`, {\r\n      phones: config.config.phoneNumbers\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Discord\r\n   */\r\n  private async sendDiscordAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.discordWebhook) {return;}\r\n\r\n    const embed = {\r\n      title: `🚨 ${alert.title}`,\r\n      description: alert.message,\r\n      color: this.getSeverityColorHex(alert.severity),\r\n      fields: [\r\n        { name: 'Tipo', value: alert.type, inline: true },\r\n        { name: 'Severidad', value: alert.severity, inline: true },\r\n        { name: 'Fuente', value: alert.source, inline: true }\r\n      ],\r\n      timestamp: new Date(alert.timestamp).toISOString(),\r\n      footer: { text: `Alert ID: ${alert.id}` }\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.discordWebhook, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ embeds: [embed] })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Discord webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Discord alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Discord alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a Teams\r\n   */\r\n  private async sendTeamsAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\r\n    if (!config.config.teamsWebhook) {return;}\r\n\r\n    const card = {\r\n      \"@type\": \"MessageCard\",\r\n      \"@context\": \"http://schema.org/extensions\",\r\n      \"themeColor\": this.getSeverityColorHex(alert.severity),\r\n      \"summary\": alert.title,\r\n      \"sections\": [\r\n        {\r\n          \"activityTitle\": `🚨 ${alert.title}`,\r\n          \"activitySubtitle\": alert.message,\r\n          \"facts\": [\r\n            { \"name\": \"Tipo\", \"value\": alert.type },\r\n            { \"name\": \"Severidad\", \"value\": alert.severity },\r\n            { \"name\": \"Fuente\", \"value\": alert.source },\r\n            { \"name\": \"Timestamp\", \"value\": new Date(alert.timestamp).toISOString() }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(config.config.teamsWebhook, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(card)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Teams webhook failed: ${response.status}`);\r\n      }\r\n\r\n      logger.info(LogCategory.MONITORING, `Teams alert sent: ${alert.title}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error sending Teams alert', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envía alerta a consola\r\n   */\r\n  private sendConsoleAlert(alert: AdvancedAlert): void {\r\n    const emoji = this.getSeverityEmoji(alert.severity);\r\n    console.log(`${emoji} [${alert.severity.toUpperCase()}] ${alert.title}`);\r\n    console.log(`   Message: ${alert.message}`);\r\n    console.log(`   Source: ${alert.source} | Type: ${alert.type}`);\r\n    console.log(`   ID: ${alert.id} | Time: ${new Date(alert.timestamp).toISOString()}`);\r\n  }\r\n\r\n  /**\r\n   * Obtiene canales aplicables para una alerta\r\n   */\r\n  private getApplicableChannels(alert: AdvancedAlert): AlertChannelConfig[] {\r\n    return Array.from(this.channelConfigs.values()).filter(config => {\r\n      if (!config.enabled) {return false;}\r\n\r\n      const { filters } = config;\r\n      if (!filters) {return true;}\r\n\r\n      // Filtrar por severidad\r\n      if (filters.severities && !filters.severities.includes(alert.severity)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtrar por tipo\r\n      if (filters.types && !filters.types.includes(alert.type)) {\r\n        return false;\r\n      }\r\n\r\n      // Filtrar por keywords\r\n      if (filters.keywords) {\r\n        const text = `${alert.title} ${alert.message}`.toLowerCase();\r\n        const hasKeyword = filters.keywords.some(keyword => \r\n          text.includes(keyword.toLowerCase())\r\n        );\r\n        if (!hasKeyword) {return false;}\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verifica rate limiting\r\n   */\r\n  private checkRateLimit(config: AlertChannelConfig): boolean {\r\n    if (!config.rateLimiting) {return true;}\r\n\r\n    const key = `${config.channel}_rate_limit`;\r\n    const now = Date.now();\r\n    const counter = this.rateLimitCounters.get(key);\r\n\r\n    if (!counter || now > counter.resetTime) {\r\n      // Reset counter\r\n      this.rateLimitCounters.set(key, {\r\n        count: 0,\r\n        resetTime: now + (60 * 60 * 1000) // 1 hora\r\n      });\r\n      return true;\r\n    }\r\n\r\n    return counter.count < config.rateLimiting.maxAlertsPerHour;\r\n  }\r\n\r\n  /**\r\n   * Actualiza contador de rate limiting\r\n   */\r\n  private updateRateLimit(config: AlertChannelConfig): void {\r\n    if (!config.rateLimiting) {return;}\r\n\r\n    const key = `${config.channel}_rate_limit`;\r\n    const counter = this.rateLimitCounters.get(key);\r\n    \r\n    if (counter) {\r\n      counter.count++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programa escalación de alerta\r\n   */\r\n  private scheduleEscalation(alert: AdvancedAlert): void {\r\n    const policy = this.escalationPolicies.get('default');\r\n    if (!policy || !policy.enabled) {return;}\r\n\r\n    const nextRule = policy.rules.find(rule => rule.level > alert.escalationLevel);\r\n    if (!nextRule) {return;}\r\n\r\n    const delay = nextRule.delayMinutes * 60 * 1000;\r\n    \r\n    const timer = setTimeout(async () => {\r\n      await this.escalateAlert(alert.id, nextRule);\r\n    }, delay);\r\n\r\n    this.escalationTimers.set(alert.id, timer);\r\n  }\r\n\r\n  /**\r\n   * Escala una alerta\r\n   */\r\n  private async escalateAlert(alertId: string, rule: EscalationRule): Promise<void> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {return;}\r\n\r\n    // Verificar condiciones de escalación\r\n    if (rule.conditions?.unacknowledgedOnly && alert.status === AlertStatus.ACKNOWLEDGED) {\r\n      return;\r\n    }\r\n\r\n    if (rule.conditions?.severities && !rule.conditions.severities.includes(alert.severity)) {\r\n      return;\r\n    }\r\n\r\n    if (rule.conditions?.types && !rule.conditions.types.includes(alert.type)) {\r\n      return;\r\n    }\r\n\r\n    // Actualizar nivel de escalación\r\n    alert.escalationLevel = rule.level;\r\n    alert.escalatedAt = Date.now();\r\n\r\n    // Enviar a canales de escalación\r\n    const escalationChannels = rule.channels.map(channel => \r\n      this.channelConfigs.get(channel)\r\n    ).filter(Boolean) as AlertChannelConfig[];\r\n\r\n    for (const channelConfig of escalationChannels) {\r\n      await this.sendToChannel(alert, channelConfig);\r\n    }\r\n\r\n    // Programar siguiente escalación\r\n    this.scheduleEscalation(alert);\r\n\r\n    logger.warn(LogCategory.MONITORING, `Alert escalated to level ${rule.level}: ${alert.title}`, {\r\n      alertId,\r\n      level: rule.level\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reconoce una alerta\r\n   */\r\n  acknowledgeAlert(alertId: string, acknowledgedBy: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {return false;}\r\n\r\n    alert.status = AlertStatus.ACKNOWLEDGED;\r\n    alert.acknowledgedBy = acknowledgedBy;\r\n    alert.acknowledgedAt = Date.now();\r\n\r\n    // Cancelar escalación\r\n    const timer = this.escalationTimers.get(alertId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.escalationTimers.delete(alertId);\r\n    }\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert acknowledged: ${alert.title}`, {\r\n      alertId,\r\n      acknowledgedBy\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Resuelve una alerta\r\n   */\r\n  resolveAlert(alertId: string, resolvedBy: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert || alert.status === AlertStatus.RESOLVED) {return false;}\r\n\r\n    alert.status = AlertStatus.RESOLVED;\r\n    alert.resolvedBy = resolvedBy;\r\n    alert.resolvedAt = Date.now();\r\n\r\n    // Cancelar escalación\r\n    const timer = this.escalationTimers.get(alertId);\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      this.escalationTimers.delete(alertId);\r\n    }\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert resolved: ${alert.title}`, {\r\n      alertId,\r\n      resolvedBy\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Suprime una alerta\r\n   */\r\n  suppressAlert(alertId: string, durationMinutes: number, reason: string): boolean {\r\n    const alert = this.alerts.get(alertId);\r\n    if (!alert) {return false;}\r\n\r\n    alert.status = AlertStatus.SUPPRESSED;\r\n    alert.suppressedUntil = Date.now() + (durationMinutes * 60 * 1000);\r\n\r\n    logger.info(LogCategory.MONITORING, `Alert suppressed: ${alert.title}`, {\r\n      alertId,\r\n      durationMinutes,\r\n      reason\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Obtiene alertas activas\r\n   */\r\n  getActiveAlerts(): AdvancedAlert[] {\r\n    return Array.from(this.alerts.values()).filter(alert => \r\n      alert.status === AlertStatus.ACTIVE || alert.status === AlertStatus.ACKNOWLEDGED\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas de alertas\r\n   */\r\n  getAlertStats(): {\r\n    total: number;\r\n    active: number;\r\n    acknowledged: number;\r\n    resolved: number;\r\n    suppressed: number;\r\n    bySeverity: Record<AlertSeverity, number>;\r\n    byType: Record<AlertType, number>;\r\n  } {\r\n    const alerts = Array.from(this.alerts.values());\r\n    \r\n    const stats = {\r\n      total: alerts.length,\r\n      active: 0,\r\n      acknowledged: 0,\r\n      resolved: 0,\r\n      suppressed: 0,\r\n      bySeverity: {\r\n        [AlertSeverity.LOW]: 0,\r\n        [AlertSeverity.MEDIUM]: 0,\r\n        [AlertSeverity.HIGH]: 0,\r\n        [AlertSeverity.CRITICAL]: 0\r\n      },\r\n      byType: {\r\n        [AlertType.PERFORMANCE]: 0,\r\n        [AlertType.ERROR]: 0,\r\n        [AlertType.CAPACITY]: 0,\r\n        [AlertType.AVAILABILITY]: 0,\r\n        [AlertType.SECURITY]: 0,\r\n        [AlertType.BUSINESS]: 0\r\n      }\r\n    };\r\n\r\n    alerts.forEach(alert => {\r\n      switch (alert.status) {\r\n        case AlertStatus.ACTIVE:\r\n          stats.active++;\r\n          break;\r\n        case AlertStatus.ACKNOWLEDGED:\r\n          stats.acknowledged++;\r\n          break;\r\n        case AlertStatus.RESOLVED:\r\n          stats.resolved++;\r\n          break;\r\n        case AlertStatus.SUPPRESSED:\r\n          stats.suppressed++;\r\n          break;\r\n      }\r\n\r\n      stats.bySeverity[alert.severity]++;\r\n      stats.byType[alert.type]++;\r\n    });\r\n\r\n    return stats;\r\n  }\r\n\r\n  // ===================================\r\n  // MÉTODOS AUXILIARES\r\n  // ===================================\r\n\r\n  private generateFingerprint(type: AlertType, title: string, source: string): string {\r\n    const content = `${type}:${title}:${source}`;\r\n    return Buffer.from(content).toString('base64').slice(0, 16);\r\n  }\r\n\r\n  private findExistingAlert(fingerprint: string): AdvancedAlert | undefined {\r\n    return Array.from(this.alerts.values()).find(alert => \r\n      alert.fingerprint === fingerprint && alert.status === AlertStatus.ACTIVE\r\n    );\r\n  }\r\n\r\n  private async updateExistingAlert(alertId: string, newDetails: Record<string, unknown>): Promise<string> {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert) {\r\n      alert.details = { ...alert.details, ...newDetails };\r\n      alert.timestamp = Date.now(); // Actualizar timestamp\r\n      await this.persistAlert(alert);\r\n    }\r\n    return alertId;\r\n  }\r\n\r\n  private async isAlertSuppressed(\r\n    type: AlertType,\r\n    severity: AlertSeverity,\r\n    source: string,\r\n    title: string\r\n  ): Promise<boolean> {\r\n    // Verificar reglas de supresión\r\n    for (const rule of this.suppressionRules.values()) {\r\n      if (!rule.enabled) {continue;}\r\n\r\n      const { conditions } = rule;\r\n      \r\n      if (conditions.types && !conditions.types.includes(type)) {continue;}\r\n      if (conditions.severities && !conditions.severities.includes(severity)) {continue;}\r\n      if (conditions.sources && !conditions.sources.includes(source)) {continue;}\r\n      \r\n      if (conditions.keywords) {\r\n        const text = title.toLowerCase();\r\n        const hasKeyword = conditions.keywords.some(keyword => \r\n          text.includes(keyword.toLowerCase())\r\n        );\r\n        if (!hasKeyword) {continue;}\r\n      }\r\n\r\n      // Verificar ventanas de tiempo\r\n      if (conditions.timeWindows) {\r\n        const now = new Date();\r\n        const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\r\n        const currentDay = now.getDay();\r\n        \r\n        const inTimeWindow = conditions.timeWindows.some(window => {\r\n          return window.days.includes(currentDay) &&\r\n                 currentTime >= window.start &&\r\n                 currentTime <= window.end;\r\n        });\r\n        \r\n        if (!inTimeWindow) {continue;}\r\n      }\r\n\r\n      return true; // Alerta suprimida\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private async persistAlert(alert: AdvancedAlert): Promise<void> {\r\n    try {\r\n      await this.redis.setex(\r\n        `alert:${alert.id}`,\r\n        86400 * 30, // 30 días\r\n        JSON.stringify(alert)\r\n      );\r\n    } catch (error) {\r\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error);\r\n    }\r\n  }\r\n\r\n  private getSeverityEmoji(severity: AlertSeverity): string {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return '🟡';\r\n      case AlertSeverity.MEDIUM: return '🟠';\r\n      case AlertSeverity.HIGH: return '🔴';\r\n      case AlertSeverity.CRITICAL: return '🚨';\r\n      default: return '⚪';\r\n    }\r\n  }\r\n\r\n  private getSeverityColor(severity: AlertSeverity): string {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return '#ffeb3b';\r\n      case AlertSeverity.MEDIUM: return '#ff9800';\r\n      case AlertSeverity.HIGH: return '#f44336';\r\n      case AlertSeverity.CRITICAL: return '#d32f2f';\r\n      default: return '#9e9e9e';\r\n    }\r\n  }\r\n\r\n  private getSeverityColorHex(severity: AlertSeverity): number {\r\n    switch (severity) {\r\n      case AlertSeverity.LOW: return 0xffeb3b;\r\n      case AlertSeverity.MEDIUM: return 0xff9800;\r\n      case AlertSeverity.HIGH: return 0xf44336;\r\n      case AlertSeverity.CRITICAL: return 0xd32f2f;\r\n      default: return 0x9e9e9e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configurar canales de alerta\r\n   */\r\n  configureChannel(channel: AlertChannel, config: Partial<AlertChannelConfig>): void {\r\n    const existing = this.channelConfigs.get(channel) || {\r\n      channel,\r\n      enabled: false,\r\n      config: {}\r\n    };\r\n\r\n    this.channelConfigs.set(channel, { ...existing, ...config });\r\n    logger.info(LogCategory.MONITORING, `Alert channel configured: ${channel}`);\r\n  }\r\n\r\n  /**\r\n   * Configurar política de escalación\r\n   */\r\n  configureEscalationPolicy(policy: EscalationPolicy): void {\r\n    this.escalationPolicies.set(policy.id, policy);\r\n    logger.info(LogCategory.MONITORING, `Escalation policy configured: ${policy.name}`);\r\n  }\r\n\r\n  /**\r\n   * Agregar regla de supresión\r\n   */\r\n  addSuppressionRule(rule: SuppressionRule): void {\r\n    this.suppressionRules.set(rule.id, rule);\r\n    logger.info(LogCategory.MONITORING, `Suppression rule added: ${rule.name}`);\r\n  }\r\n\r\n  /**\r\n   * Destructor\r\n   */\r\n  destroy(): void {\r\n    this.escalationTimers.forEach(timer => clearTimeout(timer));\r\n    this.escalationTimers.clear();\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const advancedAlertingEngine = AdvancedAlertingEngine.getInstance();\r\n\r\n/**\r\n * Utilidades para alertas avanzadas\r\n */\r\nexport const AdvancedAlertingUtils = {\r\n  /**\r\n   * Crea alerta de performance\r\n   */\r\n  async createPerformanceAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.PERFORMANCE,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'performance-monitor'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Crea alerta de error\r\n   */\r\n  async createErrorAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.HIGH,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.ERROR,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'error-tracker'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Crea alerta de capacidad\r\n   */\r\n  async createCapacityAlert(\r\n    title: string,\r\n    message: string,\r\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\r\n    details: Record<string, unknown> = {}\r\n  ): Promise<string> {\r\n    return advancedAlertingEngine.createAlert(\r\n      AlertType.CAPACITY,\r\n      severity,\r\n      title,\r\n      message,\r\n      details,\r\n      'capacity-monitor'\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Obtiene resumen de alertas\r\n   */\r\n  getAlertSummary(): {\r\n    activeCount: number;\r\n    criticalCount: number;\r\n    lastAlert?: AdvancedAlert;\r\n  } {\r\n    const activeAlerts = advancedAlertingEngine.getActiveAlerts();\r\n    const criticalAlerts = activeAlerts.filter(a => a.severity === AlertSeverity.CRITICAL);\r\n    const lastAlert = activeAlerts.sort((a, b) => b.timestamp - a.timestamp)[0];\r\n\r\n    return {\r\n      activeCount: activeAlerts.length,\r\n      criticalCount: criticalAlerts.length,\r\n      lastAlert\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["AdvancedAlertingEngine","AdvancedAlertingUtils","AlertChannel","AlertSeverity","AlertStatus","AlertType","DEFAULT_CHANNEL_CONFIGS","DEFAULT_ESCALATION_POLICY","advancedAlertingEngine","channel","enabled","config","recipients","filters","severities","rateLimiting","maxAlertsPerHour","cooldownMinutes","webhookUrl","process","env","SLACK_WEBHOOK_URL","slackChannel","id","name","rules","level","delayMinutes","channels","conditions","unacknowledgedOnly","phones","redis","getRedisClient","alerts","Map","channelConfigs","escalationPolicies","suppressionRules","escalationTimers","rateLimitCounters","initializeDefaultConfigs","getInstance","instance","forEach","set","logger","info","LogCategory","MONITORING","createAlert","type","severity","title","message","details","source","tags","fingerprint","generateFingerprint","existingAlert","findExistingAlert","status","updateExistingAlert","isAlertSuppressed","alertId","Date","now","Math","random","toString","substr","alert","timestamp","escalationLevel","relatedAlerts","persistAlert","processAlert","scheduleEscalation","applicableChannels","getApplicableChannels","sendPromises","map","channelConfig","checkRateLimit","warn","sendToChannel","updateRateLimit","error","Promise","allSettled","sendEmailAlert","sendSlackAlert","sendWebhookAlert","sendSMSAlert","sendDiscordAlert","sendTeamsAlert","sendConsoleAlert","payload","text","getSeverityEmoji","attachments","color","getSeverityColor","fields","value","short","toISOString","footer","response","fetch","method","headers","body","JSON","stringify","ok","Error","url","phoneNumbers","discordWebhook","embed","description","getSeverityColorHex","inline","embeds","teamsWebhook","card","emoji","console","log","toUpperCase","Array","from","values","filter","includes","types","keywords","toLowerCase","hasKeyword","some","keyword","key","counter","get","resetTime","count","policy","nextRule","find","rule","delay","timer","setTimeout","escalateAlert","escalatedAt","escalationChannels","Boolean","acknowledgeAlert","acknowledgedBy","acknowledgedAt","clearTimeout","delete","resolveAlert","resolvedBy","resolvedAt","suppressAlert","durationMinutes","reason","suppressedUntil","getActiveAlerts","getAlertStats","stats","total","length","active","acknowledged","resolved","suppressed","bySeverity","byType","content","Buffer","slice","newDetails","sources","timeWindows","currentTime","getHours","padStart","getMinutes","currentDay","getDay","inTimeWindow","window","days","start","end","setex","configureChannel","existing","configureEscalationPolicy","addSuppressionRule","destroy","clear","createPerformanceAlert","createErrorAlert","createCapacityAlert","getAlertSummary","activeAlerts","criticalAlerts","a","lastAlert","sort","b","activeCount","criticalCount"],"mappings":"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"}