{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-monitoring-manager.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ENTERPRISE MONITORING MANAGER\n// Sistema de monitoreo enterprise con error tracking, performance y analytics\n// ===================================\n\n// Importar performance hooks solo en servidor\nconst perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null\n\n// ===================================\n// TIPOS Y INTERFACES ESPECÍFICAS\n// ===================================\n\n// Tipos base para métricas\ntype MetricValue = number\ntype MetricTimestamp = Date\ntype MetricContext = Record<string, string | number | boolean>\n\n// Interfaces específicas para Core Web Vitals\ninterface CoreWebVitals {\n  lcp?: MetricValue // Largest Contentful Paint\n  fid?: MetricValue // First Input Delay\n  cls?: MetricValue // Cumulative Layout Shift\n}\n\n// Interfaces específicas para métricas personalizadas\ninterface CustomPerformanceMetrics {\n  loadTime: MetricValue\n  renderTime: MetricValue\n  memoryUsage: MetricValue\n  bundleSize: MetricValue\n}\n\n// Interfaces específicas para métricas de API\ninterface ApiMetrics {\n  apiResponseTime: MetricValue\n  apiErrorRate: MetricValue\n}\n\n// Interfaces específicas para métricas de usuario\ninterface UserMetrics {\n  sessionDuration: MetricValue\n  pageViews: MetricValue\n  bounceRate: MetricValue\n}\n\n// Interface específica para contexto de métricas\ninterface MetricsContext {\n  page: string\n  userId?: string\n  sessionId: string\n  device: string\n  browser: string\n}\n\ninterface ErrorEvent {\n  id: string\n  timestamp: MetricTimestamp\n  message: string\n  stack?: string\n  level: 'info' | 'warning' | 'error' | 'critical'\n  context: {\n    userId?: string\n    sessionId: string\n    url: string\n    userAgent: string\n    component?: string\n    action?: string\n  }\n  tags: string[]\n  fingerprint: string\n  count: number\n}\n\ninterface PerformanceMetrics {\n  timestamp: MetricTimestamp\n  metrics: CoreWebVitals & CustomPerformanceMetrics & ApiMetrics & UserMetrics\n  context: MetricsContext\n}\n\n// Tipos específicos para alertas\ntype AlertSeverity = 'low' | 'medium' | 'high' | 'critical'\ntype AlertOperator = '>' | '<' | '=' | '>=' | '<='\ntype AlertMetricName = string\n\n// Interface específica para contexto de alertas\ninterface AlertContext {\n  page?: string\n  userId?: string\n  sessionId?: string\n  component?: string\n  action?: string\n  metadata?: Record<string, string | number | boolean>\n}\n\n// Interfaces específicas para configuración de monitoreo\ninterface ErrorTrackingConfig {\n  enabled: boolean\n  sampleRate: number\n  ignoreErrors: string[]\n  maxBreadcrumbs: number\n}\n\ninterface PerformanceThresholds {\n  lcp: MetricValue\n  fid: MetricValue\n  cls: MetricValue\n  loadTime: MetricValue\n}\n\ninterface PerformanceConfig {\n  enabled: boolean\n  sampleRate: number\n  thresholds: PerformanceThresholds\n}\n\ninterface AlertChannels {\n  email?: string[]\n  slack?: string\n  webhook?: string\n}\n\ninterface AlertsConfig {\n  enabled: boolean\n  channels: AlertChannels\n}\n\ninterface AlertRule {\n  id: string\n  name: string\n  metric: AlertMetricName\n  threshold: MetricValue\n  operator: AlertOperator\n  severity: AlertSeverity\n  enabled: boolean\n  cooldown: number // minutes\n  lastTriggered?: MetricTimestamp\n}\n\ninterface AlertEvent {\n  id: string\n  ruleId: string\n  timestamp: MetricTimestamp\n  severity: AlertSeverity\n  message: string\n  value: MetricValue\n  threshold: MetricValue\n  context: AlertContext\n  acknowledged: boolean\n  resolvedAt?: MetricTimestamp\n}\n\ninterface MonitoringConfig {\n  errorTracking: ErrorTrackingConfig\n  performance: PerformanceConfig\n  alerts: AlertsConfig\n}\n\n// ===================================\n// INTERFACES\n// ===================================\n\n// Interface para Navigation Timing\ninterface NavigationTiming extends PerformanceEntry {\n  loadEventEnd: number\n  loadEventStart: number\n  domContentLoadedEventEnd: number\n  domContentLoadedEventStart: number\n}\n\n// Interface para Performance Memory\ninterface PerformanceMemory {\n  usedJSHeapSize: number\n}\n\ninterface PerformanceWithMemory extends Performance {\n  memory?: PerformanceMemory\n}\n\n// ===================================\n// ENTERPRISE MONITORING MANAGER\n// ===================================\n// CLASE PRINCIPAL\n// ===================================\n\nclass EnterpriseMonitoringManager {\n  private static instance: EnterpriseMonitoringManager\n  private config: MonitoringConfig\n  private errors: Map<string, ErrorEvent> = new Map()\n  private performanceData: PerformanceMetrics[] = []\n  private alertRules: Map<string, AlertRule> = new Map()\n  private activeAlerts: Map<string, AlertEvent> = new Map()\n  private sessionId: string\n\n  constructor(config: MonitoringConfig) {\n    this.config = config\n    this.sessionId = this.generateSessionId()\n    this.initializeDefaultAlertRules()\n    this.startPerformanceMonitoring()\n  }\n\n  static getInstance(config?: MonitoringConfig): EnterpriseMonitoringManager {\n    if (!EnterpriseMonitoringManager.instance) {\n      if (!config) {\n        throw new Error('Configuration required for first initialization')\n      }\n      EnterpriseMonitoringManager.instance = new EnterpriseMonitoringManager(config)\n    }\n    return EnterpriseMonitoringManager.instance\n  }\n\n  // ===================================\n  // ERROR TRACKING\n  // ===================================\n\n  /**\n   * Capturar y procesar error\n   */\n  captureError(\n    error: Error | string,\n    level: ErrorEvent['level'] = 'error',\n    context: Partial<ErrorEvent['context']> = {},\n    tags: string[] = []\n  ): string {\n    if (!this.config.errorTracking.enabled) {\n      return ''\n    }\n\n    // Sample rate check\n    if (Math.random() > this.config.errorTracking.sampleRate) {\n      return ''\n    }\n\n    const errorMessage = typeof error === 'string' ? error : error.message\n    const stack = typeof error === 'string' ? undefined : error.stack\n\n    // Check if error should be ignored\n    if (this.config.errorTracking.ignoreErrors.some(pattern => errorMessage.includes(pattern))) {\n      return ''\n    }\n\n    const fingerprint = this.generateErrorFingerprint(errorMessage, stack)\n    const errorId = this.generateErrorId()\n\n    const errorEvent: ErrorEvent = {\n      id: errorId,\n      timestamp: new Date(),\n      message: errorMessage,\n      stack,\n      level,\n      context: {\n        sessionId: this.sessionId,\n        url: typeof window !== 'undefined' ? window.location.href : '',\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        ...context,\n      },\n      tags,\n      fingerprint,\n      count: 1,\n    }\n\n    // Check if error already exists (deduplication)\n    const existingError = Array.from(this.errors.values()).find(e => e.fingerprint === fingerprint)\n\n    if (existingError) {\n      existingError.count++\n      existingError.timestamp = new Date()\n    } else {\n      this.errors.set(errorId, errorEvent)\n    }\n\n    // Check alert rules\n    this.checkErrorAlerts(errorEvent)\n\n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('[Monitoring] Error captured:', errorEvent)\n    }\n\n    return errorId\n  }\n\n  /**\n   * Obtener errores con filtros\n   */\n  getErrors(\n    filters: {\n      level?: ErrorEvent['level']\n      timeRange?: { start: Date; end: Date }\n      component?: string\n      limit?: number\n    } = {}\n  ): ErrorEvent[] {\n    let errors = Array.from(this.errors.values())\n\n    // Apply filters\n    if (filters.level) {\n      errors = errors.filter(e => e.level === filters.level)\n    }\n\n    if (filters.timeRange) {\n      errors = errors.filter(\n        e => e.timestamp >= filters.timeRange!.start && e.timestamp <= filters.timeRange!.end\n      )\n    }\n\n    if (filters.component) {\n      errors = errors.filter(e => e.context.component === filters.component)\n    }\n\n    // Sort by timestamp (newest first)\n    errors.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n\n    // Apply limit\n    if (filters.limit) {\n      errors = errors.slice(0, filters.limit)\n    }\n\n    return errors\n  }\n\n  // ===================================\n  // PERFORMANCE MONITORING\n  // ===================================\n\n  /**\n   * Inicializar monitoreo de performance\n   */\n  private startPerformanceMonitoring(): void {\n    if (!this.config.performance.enabled || typeof window === 'undefined') {\n      return\n    }\n\n    // Monitor Core Web Vitals\n    this.monitorWebVitals()\n\n    // Monitor custom metrics every 30 seconds\n    setInterval(() => {\n      this.capturePerformanceMetrics()\n    }, 30000)\n\n    // Monitor page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.capturePerformanceMetrics()\n      }\n    })\n  }\n\n  /**\n   * Monitorear Core Web Vitals\n   */\n  private monitorWebVitals(): void {\n    // LCP - Largest Contentful Paint\n    new PerformanceObserver(entryList => {\n      const entries = entryList.getEntries()\n      const lastEntry = entries[entries.length - 1]\n      this.recordMetric('lcp', lastEntry.startTime)\n    }).observe({ entryTypes: ['largest-contentful-paint'] })\n\n    // FID - First Input Delay\n    // Interfaces para Performance Observer entries\n    interface PerformanceEventTiming extends PerformanceEntry {\n      processingStart: number\n      startTime: number\n    }\n\n    interface LayoutShiftEntry extends PerformanceEntry {\n      value: number\n      hadRecentInput: boolean\n    }\n\n    new PerformanceObserver(entryList => {\n      const entries = entryList.getEntries()\n      entries.forEach((entry: PerformanceEventTiming) => {\n        this.recordMetric('fid', entry.processingStart - entry.startTime)\n      })\n    }).observe({ entryTypes: ['first-input'] })\n\n    // CLS - Cumulative Layout Shift\n    let clsValue = 0\n    new PerformanceObserver(entryList => {\n      const entries = entryList.getEntries()\n      entries.forEach((entry: LayoutShiftEntry) => {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value\n        }\n      })\n      this.recordMetric('cls', clsValue)\n    }).observe({ entryTypes: ['layout-shift'] })\n  }\n\n  /**\n   * Capturar métricas de performance\n   */\n  capturePerformanceMetrics(): void {\n    if (!this.config.performance.enabled) {\n      return\n    }\n\n    // Sample rate check\n    if (Math.random() > this.config.performance.sampleRate) {\n      return\n    }\n\n    const metrics: PerformanceMetrics = {\n      timestamp: new Date(),\n      metrics: {\n        loadTime: this.getLoadTime(),\n        renderTime: this.getRenderTime(),\n        memoryUsage: this.getMemoryUsage(),\n        bundleSize: this.getBundleSize(),\n        apiResponseTime: this.getAverageApiResponseTime(),\n        apiErrorRate: this.getApiErrorRate(),\n        sessionDuration: this.getSessionDuration(),\n        pageViews: this.getPageViews(),\n        bounceRate: this.getBounceRate(),\n      },\n      context: {\n        page: typeof window !== 'undefined' ? window.location.pathname : '',\n        sessionId: this.sessionId,\n        device: this.getDeviceType(),\n        browser: this.getBrowserType(),\n        userId: this.getUserId(),\n      },\n    }\n\n    this.performanceData.push(metrics)\n\n    // Keep only last 1000 entries\n    if (this.performanceData.length > 1000) {\n      this.performanceData = this.performanceData.slice(-1000)\n    }\n\n    // Check performance alerts\n    this.checkPerformanceAlerts(metrics)\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Monitoring] Performance metrics captured:', metrics)\n    }\n  }\n\n  /**\n   * Registrar métrica específica\n   */\n  recordMetric(name: string, value: number, context: MetricContext = {}): void {\n    const metric = {\n      name,\n      value,\n      timestamp: new Date(),\n      context: {\n        sessionId: this.sessionId,\n        ...context,\n      },\n    }\n\n    // Check if metric triggers alerts\n    this.checkMetricAlerts(name, value)\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[Monitoring] Metric recorded: ${name} = ${value}`, metric)\n    }\n  }\n\n  // ===================================\n  // ALERT SYSTEM\n  // ===================================\n\n  /**\n   * Inicializar reglas de alerta por defecto\n   */\n  private initializeDefaultAlertRules(): void {\n    const defaultRules: AlertRule[] = [\n      {\n        id: 'high-error-rate',\n        name: 'High Error Rate',\n        metric: 'error_rate',\n        threshold: 0.05, // 5%\n        operator: '>',\n        severity: 'high',\n        enabled: true,\n        cooldown: 15,\n      },\n      {\n        id: 'slow-page-load',\n        name: 'Slow Page Load',\n        metric: 'load_time',\n        threshold: 3000, // 3 seconds\n        operator: '>',\n        severity: 'medium',\n        enabled: true,\n        cooldown: 10,\n      },\n      {\n        id: 'high-memory-usage',\n        name: 'High Memory Usage',\n        metric: 'memory_usage',\n        threshold: 100, // 100MB\n        operator: '>',\n        severity: 'medium',\n        enabled: true,\n        cooldown: 20,\n      },\n      {\n        id: 'poor-lcp',\n        name: 'Poor Largest Contentful Paint',\n        metric: 'lcp',\n        threshold: 2500, // 2.5 seconds\n        operator: '>',\n        severity: 'medium',\n        enabled: true,\n        cooldown: 15,\n      },\n    ]\n\n    defaultRules.forEach(rule => {\n      this.alertRules.set(rule.id, rule)\n    })\n  }\n\n  /**\n   * Verificar alertas de errores\n   */\n  private checkErrorAlerts(errorEvent: ErrorEvent): void {\n    // Calculate error rate\n    const recentErrors = this.getErrors({\n      timeRange: {\n        start: new Date(Date.now() - 5 * 60 * 1000), // Last 5 minutes\n        end: new Date(),\n      },\n    })\n\n    const errorRate = recentErrors.length / 100 // Assuming 100 requests per 5 minutes\n\n    this.checkMetricAlerts('error_rate', errorRate)\n\n    // Check for critical errors\n    if (errorEvent.level === 'critical') {\n      this.triggerAlert('critical-error', {\n        message: `Critical error occurred: ${errorEvent.message}`,\n        value: 1,\n        threshold: 0,\n        context: errorEvent,\n      })\n    }\n  }\n\n  /**\n   * Verificar alertas de performance\n   */\n  private checkPerformanceAlerts(metrics: PerformanceMetrics): void {\n    const { metrics: m } = metrics\n\n    // Check each metric against alert rules\n    Object.entries(m).forEach(([metricName, value]) => {\n      if (typeof value === 'number') {\n        this.checkMetricAlerts(metricName, value)\n      }\n    })\n  }\n\n  /**\n   * Verificar alertas para una métrica específica\n   */\n  private checkMetricAlerts(metricName: string, value: number): void {\n    const relevantRules = Array.from(this.alertRules.values()).filter(\n      rule => rule.metric === metricName && rule.enabled\n    )\n\n    relevantRules.forEach(rule => {\n      const shouldTrigger = this.evaluateAlertCondition(rule, value)\n\n      if (shouldTrigger && this.canTriggerAlert(rule)) {\n        this.triggerAlert(rule.id, {\n          message: `${rule.name}: ${metricName} is ${value} (threshold: ${rule.threshold})`,\n          value,\n          threshold: rule.threshold,\n          context: { metricName, rule },\n        })\n      }\n    })\n  }\n\n  /**\n   * Evaluar condición de alerta\n   */\n  private evaluateAlertCondition(rule: AlertRule, value: number): boolean {\n    switch (rule.operator) {\n      case '>':\n        return value > rule.threshold\n      case '<':\n        return value < rule.threshold\n      case '>=':\n        return value >= rule.threshold\n      case '<=':\n        return value <= rule.threshold\n      case '=':\n        return value === rule.threshold\n      default:\n        return false\n    }\n  }\n\n  /**\n   * Verificar si se puede disparar alerta (cooldown)\n   */\n  private canTriggerAlert(rule: AlertRule): boolean {\n    if (!rule.lastTriggered) {\n      return true\n    }\n\n    const cooldownMs = rule.cooldown * 60 * 1000\n    const timeSinceLastTrigger = Date.now() - rule.lastTriggered.getTime()\n\n    return timeSinceLastTrigger >= cooldownMs\n  }\n\n  /**\n   * Disparar alerta\n   */\n  private triggerAlert(\n    ruleId: string,\n    alertData: {\n      message: string\n      value: number\n      threshold: number\n      context: AlertContext\n    }\n  ): void {\n    const rule = this.alertRules.get(ruleId)\n    if (!rule) {\n      return\n    }\n\n    const alertId = this.generateAlertId()\n    const alert: AlertEvent = {\n      id: alertId,\n      ruleId,\n      timestamp: new Date(),\n      severity: rule.severity,\n      message: alertData.message,\n      value: alertData.value,\n      threshold: alertData.threshold,\n      context: alertData.context,\n      acknowledged: false,\n    }\n\n    this.activeAlerts.set(alertId, alert)\n    rule.lastTriggered = new Date()\n\n    // Send notifications\n    this.sendAlertNotifications(alert)\n\n    console.warn('[Monitoring] Alert triggered:', alert)\n  }\n\n  /**\n   * Enviar notificaciones de alerta\n   */\n  private async sendAlertNotifications(alert: AlertEvent): Promise<void> {\n    if (!this.config.alerts.enabled) {\n      return\n    }\n\n    const { channels } = this.config.alerts\n\n    // Email notifications\n    if (channels.email && channels.email.length > 0) {\n      // Implementation would integrate with email service\n      console.log(`[Monitoring] Email alert sent to: ${channels.email.join(', ')}`)\n    }\n\n    // Slack notifications\n    if (channels.slack) {\n      // Implementation would integrate with Slack webhook\n      console.log(`[Monitoring] Slack alert sent to: ${channels.slack}`)\n    }\n\n    // Webhook notifications\n    if (channels.webhook) {\n      try {\n        // Implementation would send HTTP POST to webhook\n        console.log(`[Monitoring] Webhook alert sent to: ${channels.webhook}`)\n      } catch (error) {\n        console.error('[Monitoring] Failed to send webhook alert:', error)\n      }\n    }\n  }\n\n  // ===================================\n  // UTILITY METHODS\n  // ===================================\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateErrorId(): string {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateAlertId(): string {\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateErrorFingerprint(message: string, stack?: string): string {\n    const content = `${message}${stack || ''}`\n    // Simple hash function for fingerprinting\n    let hash = 0\n    for (let i = 0; i < content.length; i++) {\n      const char = content.charCodeAt(i)\n      hash = (hash << 5) - hash + char\n      hash = hash & hash // Convert to 32-bit integer\n    }\n    return hash.toString(36)\n  }\n\n  private getLoadTime(): number {\n    if (typeof window === 'undefined' || !performance || !performance.getEntriesByType) {\n      return 0\n    }\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as NavigationTiming\n      return navigation ? navigation.loadEventEnd - navigation.loadEventStart : 0\n    } catch (error) {\n      return 0\n    }\n  }\n\n  private getRenderTime(): number {\n    if (typeof window === 'undefined' || !performance || !performance.getEntriesByType) {\n      return 0\n    }\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as NavigationTiming\n      return navigation\n        ? navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart\n        : 0\n    } catch (error) {\n      return 0\n    }\n  }\n\n  private getMemoryUsage(): number {\n    if (typeof window === 'undefined' || !(performance as PerformanceWithMemory).memory) {\n      return 0\n    }\n    return (performance as PerformanceWithMemory).memory!.usedJSHeapSize / 1024 / 1024 // MB\n  }\n\n  private getBundleSize(): number {\n    // This would be calculated based on loaded resources\n    return 0 // Placeholder\n  }\n\n  private getAverageApiResponseTime(): number {\n    // This would be calculated from API call metrics\n    return 0 // Placeholder\n  }\n\n  private getApiErrorRate(): number {\n    // This would be calculated from API call metrics\n    return 0 // Placeholder\n  }\n\n  private getSessionDuration(): number {\n    return Date.now() - parseInt(this.sessionId.split('_')[1])\n  }\n\n  private getPageViews(): number {\n    // This would be tracked separately\n    return 1 // Placeholder\n  }\n\n  private getBounceRate(): number {\n    // This would be calculated from user behavior\n    return 0 // Placeholder\n  }\n\n  private getDeviceType(): string {\n    if (typeof window === 'undefined') {\n      return 'unknown'\n    }\n    const width = window.innerWidth\n    if (width < 768) {\n      return 'mobile'\n    }\n    if (width < 1024) {\n      return 'tablet'\n    }\n    return 'desktop'\n  }\n\n  private getBrowserType(): string {\n    if (typeof navigator === 'undefined') {\n      return 'unknown'\n    }\n    const userAgent = navigator.userAgent\n    if (userAgent.includes('Chrome')) {\n      return 'chrome'\n    }\n    if (userAgent.includes('Firefox')) {\n      return 'firefox'\n    }\n    if (userAgent.includes('Safari')) {\n      return 'safari'\n    }\n    if (userAgent.includes('Edge')) {\n      return 'edge'\n    }\n    return 'other'\n  }\n\n  private getUserId(): string | undefined {\n    // This would be retrieved from authentication context\n    return undefined // Placeholder\n  }\n\n  // ===================================\n  // PUBLIC API\n  // ===================================\n\n  /**\n   * Obtener métricas de performance\n   */\n  getPerformanceMetrics(timeRange?: { start: Date; end: Date }): PerformanceMetrics[] {\n    let data = this.performanceData\n\n    if (timeRange) {\n      data = data.filter(m => m.timestamp >= timeRange.start && m.timestamp <= timeRange.end)\n    }\n\n    return data\n  }\n\n  /**\n   * Obtener alertas activas\n   */\n  getActiveAlerts(): AlertEvent[] {\n    return Array.from(this.activeAlerts.values())\n      .filter(alert => !alert.resolvedAt)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n  }\n\n  /**\n   * Reconocer alerta\n   */\n  acknowledgeAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.acknowledged = true\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Resolver alerta\n   */\n  resolveAlert(alertId: string): boolean {\n    const alert = this.activeAlerts.get(alertId)\n    if (alert) {\n      alert.resolvedAt = new Date()\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Obtener resumen de monitoreo\n   */\n  getMonitoringSummary() {\n    const now = new Date()\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000)\n\n    const recentErrors = this.getErrors({\n      timeRange: { start: oneHourAgo, end: now },\n    })\n\n    const recentMetrics = this.getPerformanceMetrics({\n      start: oneHourAgo,\n      end: now,\n    })\n\n    const activeAlerts = this.getActiveAlerts()\n\n    return {\n      errors: {\n        total: recentErrors.length,\n        critical: recentErrors.filter(e => e.level === 'critical').length,\n        warning: recentErrors.filter(e => e.level === 'warning').length,\n      },\n      performance: {\n        averageLoadTime:\n          recentMetrics.length > 0\n            ? recentMetrics.reduce((sum, m) => sum + m.metrics.loadTime, 0) / recentMetrics.length\n            : 0,\n        averageMemoryUsage:\n          recentMetrics.length > 0\n            ? recentMetrics.reduce((sum, m) => sum + m.metrics.memoryUsage, 0) /\n              recentMetrics.length\n            : 0,\n      },\n      alerts: {\n        active: activeAlerts.length,\n        critical: activeAlerts.filter(a => a.severity === 'critical').length,\n        unacknowledged: activeAlerts.filter(a => !a.acknowledged).length,\n      },\n      system: {\n        uptime: this.getSessionDuration(),\n        sessionId: this.sessionId,\n      },\n    }\n  }\n}\n\n// ===================================\n// EXPORTS\n// ===================================\n\nexport default EnterpriseMonitoringManager\n\nexport type { ErrorEvent, PerformanceMetrics, AlertRule, AlertEvent, MonitoringConfig }\n"],"names":["perfHooks","window","require","EnterpriseMonitoringManager","config","errors","Map","performanceData","alertRules","activeAlerts","sessionId","generateSessionId","initializeDefaultAlertRules","startPerformanceMonitoring","getInstance","instance","Error","captureError","error","level","context","tags","errorTracking","enabled","Math","random","sampleRate","errorMessage","message","stack","undefined","ignoreErrors","some","pattern","includes","fingerprint","generateErrorFingerprint","errorId","generateErrorId","errorEvent","id","timestamp","Date","url","location","href","userAgent","navigator","count","existingError","Array","from","values","find","e","set","checkErrorAlerts","process","env","NODE_ENV","console","getErrors","filters","filter","timeRange","start","end","component","sort","a","b","getTime","limit","slice","performance","monitorWebVitals","setInterval","capturePerformanceMetrics","document","addEventListener","visibilityState","PerformanceObserver","entryList","entries","getEntries","lastEntry","length","recordMetric","startTime","observe","entryTypes","forEach","entry","processingStart","clsValue","hadRecentInput","value","metrics","loadTime","getLoadTime","renderTime","getRenderTime","memoryUsage","getMemoryUsage","bundleSize","getBundleSize","apiResponseTime","getAverageApiResponseTime","apiErrorRate","getApiErrorRate","sessionDuration","getSessionDuration","pageViews","getPageViews","bounceRate","getBounceRate","page","pathname","device","getDeviceType","browser","getBrowserType","userId","getUserId","push","checkPerformanceAlerts","log","name","metric","checkMetricAlerts","defaultRules","threshold","operator","severity","cooldown","rule","recentErrors","now","errorRate","triggerAlert","m","Object","metricName","relevantRules","shouldTrigger","evaluateAlertCondition","canTriggerAlert","lastTriggered","cooldownMs","timeSinceLastTrigger","ruleId","alertData","get","alertId","generateAlertId","alert","acknowledged","sendAlertNotifications","warn","alerts","channels","email","join","slack","webhook","toString","substr","content","hash","i","char","charCodeAt","getEntriesByType","navigation","loadEventEnd","loadEventStart","domContentLoadedEventEnd","domContentLoadedEventStart","memory","usedJSHeapSize","parseInt","split","width","innerWidth","getPerformanceMetrics","data","getActiveAlerts","resolvedAt","acknowledgeAlert","resolveAlert","getMonitoringSummary","oneHourAgo","recentMetrics","total","critical","warning","averageLoadTime","reduce","sum","averageMemoryUsage","active","unacknowledged","system","uptime"],"mappings":"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"}