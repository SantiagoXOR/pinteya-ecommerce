{"version":3,"names":["RATE_LIMIT_CONFIGS","cov_163ccm1dcr","f","s","checkRateLimit","createRateLimitMiddleware","createRateLimiter","keyGenerators","withRateLimit","PRODUCTION_CONFIGS","public","windowMs","maxRequests","message","products","search","DEVELOPMENT_CONFIGS","isRateLimitingEnabled","process","env","DISABLE_RATE_LIMITING","b","isDevelopment","NODE_ENV","baseConfigs","auth","admin","payment","creation","webhook","console","log","environment","rateLimitingEnabled","disableRateLimiting","productLimits","searchLimits","MemoryStore","get","key","data","store","Date","now","resetTime","delete","set","value","ttl","setTimeout","increment","existing","newData","count","updatedData","Map","defaultStore","ip","req","forwarded","headers","split","user","userId","endpoint","url","URL","pathname","combined","config","finalConfig","standardHeaders","legacyHeaders","keyGenerator","result","allowed","limit","remaining","Math","max","retryAfter","ceil","error","Headers","toString","toISOString","warn","userAgent","_server","NextResponse","JSON","stringify","status","next","handler"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\rate-limiting\\rate-limiter.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - RATE LIMITING MIDDLEWARE\r\n// ===================================\r\n// Sistema de rate limiting enterprise con configuración flexible\r\n// y logging estructurado para APIs críticas\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { headers } from 'next/headers';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface RateLimitConfig {\r\n  windowMs: number;           // Ventana de tiempo en milisegundos\r\n  maxRequests: number;        // Máximo de requests por ventana\r\n  keyGenerator?: (req: NextRequest) => string;  // Generador de clave personalizado\r\n  skipSuccessfulRequests?: boolean;             // Omitir requests exitosos\r\n  skipFailedRequests?: boolean;                 // Omitir requests fallidos\r\n  message?: string;           // Mensaje de error personalizado\r\n  headers?: boolean;          // Incluir headers de rate limit\r\n  standardHeaders?: boolean;  // Usar headers estándar RFC\r\n  legacyHeaders?: boolean;    // Incluir headers legacy\r\n}\r\n\r\nexport interface RateLimitResult {\r\n  allowed: boolean;\r\n  limit: number;\r\n  remaining: number;\r\n  resetTime: number;\r\n  retryAfter?: number;\r\n}\r\n\r\nexport interface RateLimitStore {\r\n  get(key: string): Promise<{ count: number; resetTime: number } | null>;\r\n  set(key: string, value: { count: number; resetTime: number }, ttl: number): Promise<void>;\r\n  increment(key: string, ttl: number): Promise<{ count: number; resetTime: number }>;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIONES PREDEFINIDAS\r\n// ===================================\r\n\r\n// Configuraciones base para producción\r\nconst PRODUCTION_CONFIGS = {\r\n  public: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: 1000,         // 1000 requests por ventana\r\n    message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.',\r\n  },\r\n  products: {\r\n    windowMs: 5 * 60 * 1000,   // 5 minutos\r\n    maxRequests: 200,          // 200 requests por ventana\r\n    message: 'Límite de consultas de productos excedido. Intente en 5 minutos.',\r\n  },\r\n  search: {\r\n    windowMs: 5 * 60 * 1000,   // 5 minutos\r\n    maxRequests: 150,          // 150 requests por ventana\r\n    message: 'Límite de búsquedas excedido. Intente en 5 minutos.',\r\n  },\r\n};\r\n\r\n// Configuraciones relajadas para desarrollo\r\nconst DEVELOPMENT_CONFIGS = {\r\n  public: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: 10000,        // 10000 requests por ventana (muy generoso)\r\n    message: 'Demasiadas solicitudes. Intente nuevamente en 15 minutos.',\r\n  },\r\n  products: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: 1000,         // 1000 requests por minuto (muy generoso)\r\n    message: 'Límite de consultas de productos excedido. Intente en 1 minuto.',\r\n  },\r\n  search: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: 500,          // 500 requests por minuto (muy generoso)\r\n    message: 'Límite de búsquedas excedido. Intente en 1 minuto.',\r\n  },\r\n};\r\n\r\n// ===================================\r\n// HELPER PARA VERIFICAR SI RATE LIMITING ESTÁ HABILITADO\r\n// ===================================\r\n\r\nfunction isRateLimitingEnabled(): boolean {\r\n  // Permitir deshabilitar rate limiting en desarrollo con variable de entorno\r\n  if (process.env.DISABLE_RATE_LIMITING === 'true') {\r\n    return false;\r\n  }\r\n\r\n  // En desarrollo, usar rate limiting relajado pero habilitado por defecto\r\n  return true;\r\n}\r\n\r\n// Seleccionar configuración según el entorno\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\nconst baseConfigs = isDevelopment ? DEVELOPMENT_CONFIGS : PRODUCTION_CONFIGS;\r\n\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // APIs públicas - límites generosos\r\n  public: baseConfigs.public,\r\n\r\n  // APIs de productos - límites moderados\r\n  products: baseConfigs.products,\r\n\r\n  // APIs de búsqueda - límites moderados\r\n  search: baseConfigs.search,\r\n  \r\n  // APIs de autenticación - límites estrictos\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: isDevelopment ? 100 : 10,  // 100 en dev, 10 en prod\r\n    message: 'Demasiados intentos de autenticación. Intente en 15 minutos.',\r\n  },\r\n\r\n  // APIs de admin - límites moderados pero monitoreados\r\n  admin: {\r\n    windowMs: 10 * 60 * 1000,  // 10 minutos\r\n    maxRequests: isDevelopment ? 1000 : 100,  // 1000 en dev, 100 en prod\r\n    message: 'Límite de operaciones administrativas excedido.',\r\n  },\r\n\r\n  // APIs de pagos - límites muy estrictos\r\n  payment: {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos\r\n    maxRequests: isDevelopment ? 100 : 30,  // 100 en dev, 30 en prod\r\n    message: 'Límite de operaciones de pago excedido. Intente en 15 minutos.',\r\n  },\r\n\r\n  // APIs de creación - límites estrictos\r\n  creation: {\r\n    windowMs: 10 * 60 * 1000,  // 10 minutos\r\n    maxRequests: isDevelopment ? 200 : 20,  // 200 en dev, 20 en prod\r\n    message: 'Límite de creación de recursos excedido.',\r\n  },\r\n\r\n  // Webhooks - límites rápidos pero altos\r\n  webhook: {\r\n    windowMs: 1 * 60 * 1000,   // 1 minuto\r\n    maxRequests: isDevelopment ? 1000 : 100,  // 1000 en dev, 100 en prod\r\n    message: 'Límite de webhooks excedido. Intente en 1 minuto.',\r\n  }\r\n} as const;\r\n\r\n// ===================================\r\n// LOGGING DE CONFIGURACIÓN\r\n// ===================================\r\n\r\n// Log de configuración al cargar el módulo\r\nif (process.env.NODE_ENV === 'development') {\r\n  console.log('[RATE_LIMITER] Configuración cargada:', {\r\n    environment: process.env.NODE_ENV,\r\n    rateLimitingEnabled: isRateLimitingEnabled(),\r\n    disableRateLimiting: process.env.DISABLE_RATE_LIMITING,\r\n    productLimits: {\r\n      windowMs: RATE_LIMIT_CONFIGS.products.windowMs / 1000 / 60 + ' minutos',\r\n      maxRequests: RATE_LIMIT_CONFIGS.products.maxRequests\r\n    },\r\n    searchLimits: {\r\n      windowMs: RATE_LIMIT_CONFIGS.search.windowMs / 1000 / 60 + ' minutos',\r\n      maxRequests: RATE_LIMIT_CONFIGS.search.maxRequests\r\n    }\r\n  });\r\n}\r\n\r\n// ===================================\r\n// STORE EN MEMORIA (PARA DESARROLLO)\r\n// ===================================\r\n\r\nclass MemoryStore implements RateLimitStore {\r\n  private store = new Map<string, { count: number; resetTime: number }>();\r\n\r\n  async get(key: string): Promise<{ count: number; resetTime: number } | null> {\r\n    const data = this.store.get(key);\r\n    if (!data) {return null;}\r\n    \r\n    // Limpiar datos expirados\r\n    if (Date.now() > data.resetTime) {\r\n      this.store.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return data;\r\n  }\r\n\r\n  async set(key: string, value: { count: number; resetTime: number }, ttl: number): Promise<void> {\r\n    this.store.set(key, value);\r\n    \r\n    // Limpiar automáticamente después del TTL\r\n    setTimeout(() => {\r\n      this.store.delete(key);\r\n    }, ttl);\r\n  }\r\n\r\n  async increment(key: string, ttl: number): Promise<{ count: number; resetTime: number }> {\r\n    const now = Date.now();\r\n    const existing = await this.get(key);\r\n    \r\n    if (!existing) {\r\n      const newData = { count: 1, resetTime: now + ttl };\r\n      await this.set(key, newData, ttl);\r\n      return newData;\r\n    }\r\n    \r\n    const updatedData = { ...existing, count: existing.count + 1 };\r\n    await this.set(key, updatedData, existing.resetTime - now);\r\n    return updatedData;\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL DEL STORE\r\n// ===================================\r\n\r\nconst defaultStore = new MemoryStore();\r\n\r\n// ===================================\r\n// GENERADORES DE CLAVE\r\n// ===================================\r\n\r\nexport const keyGenerators = {\r\n  // Por IP\r\n  ip: (req: NextRequest): string => {\r\n    const forwarded = req.headers.get('x-forwarded-for');\r\n    const ip = forwarded ? forwarded.split(',')[0] : req.headers.get('x-real-ip') || 'unknown';\r\n    return `ip:${ip}`;\r\n  },\r\n  \r\n  // Por usuario autenticado (requiere implementación específica)\r\n  user: (req: NextRequest): string => {\r\n    // TODO: Implementar extracción de user ID desde token/session\r\n    const userId = req.headers.get('x-user-id') || 'anonymous';\r\n    return `user:${userId}`;\r\n  },\r\n  \r\n  // Por endpoint específico\r\n  endpoint: (req: NextRequest): string => {\r\n    const url = new URL(req.url);\r\n    return `endpoint:${url.pathname}`;\r\n  },\r\n  \r\n  // Combinado IP + endpoint\r\n  combined: (req: NextRequest): string => {\r\n    const ip = keyGenerators.ip(req);\r\n    const endpoint = keyGenerators.endpoint(req);\r\n    return `${ip}:${endpoint}`;\r\n  }\r\n};\r\n\r\n// ===================================\r\n// FACTORY PARA CREAR RATE LIMITERS\r\n// ===================================\r\n\r\n/**\r\n * Crea un rate limiter con configuración específica\r\n */\r\nexport function createRateLimiter(\r\n  config: Partial<RateLimitConfig> = {},\r\n  store: RateLimitStore = defaultStore\r\n) {\r\n  const finalConfig: RateLimitConfig = {\r\n    windowMs: 15 * 60 * 1000,  // 15 minutos por defecto\r\n    maxRequests: 100,          // 100 requests por defecto\r\n    message: 'Rate limit exceeded',\r\n    headers: true,\r\n    standardHeaders: true,\r\n    legacyHeaders: true,\r\n    ...config\r\n  };\r\n\r\n  return async (req: NextRequest): Promise<RateLimitResult> => {\r\n    return await checkRateLimit(req, finalConfig, store);\r\n  };\r\n}\r\n\r\n// ===================================\r\n// FUNCIÓN PRINCIPAL DE RATE LIMITING\r\n// ===================================\r\n\r\nexport async function checkRateLimit(\r\n  req: NextRequest,\r\n  config: RateLimitConfig,\r\n  store: RateLimitStore = defaultStore\r\n): Promise<RateLimitResult> {\r\n  const keyGenerator = config.keyGenerator || keyGenerators.combined;\r\n  const key = keyGenerator(req);\r\n  \r\n  try {\r\n    const data = await store.increment(key, config.windowMs);\r\n    \r\n    const result: RateLimitResult = {\r\n      allowed: data.count <= config.maxRequests,\r\n      limit: config.maxRequests,\r\n      remaining: Math.max(0, config.maxRequests - data.count),\r\n      resetTime: data.resetTime,\r\n    };\r\n    \r\n    if (!result.allowed) {\r\n      result.retryAfter = Math.ceil((data.resetTime - Date.now()) / 1000);\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('[RATE_LIMITER] Error checking rate limit:', error);\r\n    \r\n    // En caso de error, permitir la request (fail-open)\r\n    return {\r\n      allowed: true,\r\n      limit: config.maxRequests,\r\n      remaining: config.maxRequests,\r\n      resetTime: Date.now() + config.windowMs,\r\n    };\r\n  }\r\n}\r\n\r\n// ===================================\r\n// MIDDLEWARE DE RATE LIMITING\r\n// ===================================\r\n\r\nexport function createRateLimitMiddleware(config: RateLimitConfig) {\r\n  return async (req: NextRequest): Promise<NextResponse | null> => {\r\n    const result = await checkRateLimit(req, config);\r\n    \r\n    // Crear headers de rate limit\r\n    const headers = new Headers();\r\n    \r\n    if (config.headers !== false) {\r\n      if (config.standardHeaders !== false) {\r\n        // Headers estándar RFC 6585\r\n        headers.set('RateLimit-Limit', result.limit.toString());\r\n        headers.set('RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());\r\n      }\r\n      \r\n      if (config.legacyHeaders !== false) {\r\n        // Headers legacy para compatibilidad\r\n        headers.set('X-RateLimit-Limit', result.limit.toString());\r\n        headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n      }\r\n    }\r\n    \r\n    if (!result.allowed) {\r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n      \r\n      // Log del rate limit excedido\r\n      console.warn('[RATE_LIMITER] Rate limit exceeded:', {\r\n        key: config.keyGenerator ? config.keyGenerator(req) : 'combined',\r\n        limit: result.limit,\r\n        resetTime: new Date(result.resetTime).toISOString(),\r\n        userAgent: req.headers.get('user-agent'),\r\n        ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip'),\r\n      });\r\n      \r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: 'Rate limit exceeded',\r\n          message: config.message || 'Too many requests',\r\n          retryAfter: result.retryAfter,\r\n        }),\r\n        {\r\n          status: 429,\r\n          headers,\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Request permitida, agregar headers informativos\r\n    return NextResponse.next({\r\n      headers,\r\n    });\r\n  };\r\n}\r\n\r\n// ===================================\r\n// HELPER PARA APLICAR RATE LIMITING\r\n// ===================================\r\n\r\nexport async function withRateLimit<T>(\r\n  req: NextRequest,\r\n  config: RateLimitConfig,\r\n  handler: () => Promise<T>\r\n): Promise<T | NextResponse> {\r\n  // Si rate limiting está deshabilitado, ejecutar directamente el handler\r\n  if (!isRateLimitingEnabled()) {\r\n    return await handler();\r\n  }\r\n\r\n  const result = await checkRateLimit(req, config);\r\n\r\n  if (!result.allowed) {\r\n    // Crear headers de rate limit\r\n    const headers = new Headers();\r\n\r\n    if (config.headers !== false) {\r\n      if (config.standardHeaders !== false) {\r\n        // Headers estándar RFC 6585\r\n        headers.set('RateLimit-Limit', result.limit.toString());\r\n        headers.set('RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('RateLimit-Reset', new Date(result.resetTime).toISOString());\r\n      }\r\n\r\n      if (config.legacyHeaders !== false) {\r\n        // Headers legacy para compatibilidad\r\n        headers.set('X-RateLimit-Limit', result.limit.toString());\r\n        headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n        headers.set('X-RateLimit-Reset', Math.ceil(result.resetTime / 1000).toString());\r\n      }\r\n    }\r\n\r\n    if (result.retryAfter) {\r\n      headers.set('Retry-After', result.retryAfter.toString());\r\n    }\r\n\r\n    // Log del rate limit excedido\r\n    console.warn('[RATE_LIMITER] Rate limit exceeded:', {\r\n      key: config.keyGenerator ? config.keyGenerator(req) : 'combined',\r\n      limit: result.limit,\r\n      resetTime: new Date(result.resetTime).toISOString(),\r\n      userAgent: req.headers.get('user-agent'),\r\n      ip: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip'),\r\n    });\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Rate limit exceeded',\r\n        message: config.message || 'Too many requests',\r\n        retryAfter: result.retryAfter,\r\n      }),\r\n      {\r\n        status: 429,\r\n        headers,\r\n      }\r\n    );\r\n  }\r\n\r\n  return handler();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}