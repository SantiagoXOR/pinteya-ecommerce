4571f7e1351e979d1cd9b29b390e8abb
// ===================================
// TESTS: useSearchErrorHandler Hook - Manejo robusto de errores
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useSearchErrorHandler = require("../../hooks/useSearchErrorHandler");
// ===================================
// SETUP
// ===================================
beforeEach(()=>{
    jest.clearAllMocks();
    jest.useFakeTimers();
    // Mock console methods to reduce noise
    jest.spyOn(console, 'warn').mockImplementation(()=>{});
    jest.spyOn(console, 'error').mockImplementation(()=>{});
});
afterEach(()=>{
    jest.useRealTimers();
    jest.restoreAllMocks();
});
// ===================================
// TESTS BÁSICOS
// ===================================
describe('useSearchErrorHandler Hook', ()=>{
    it('should initialize with default state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        expect(result.current.currentError).toBe(null);
        expect(result.current.retryCount).toBe(0);
        expect(result.current.isRetrying).toBe(false);
        expect(result.current.hasError).toBe(false);
    });
    it('should accept custom retry configuration', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                retryConfig: {
                    maxRetries: 5,
                    baseDelay: 500
                }
            }));
        expect(result.current.retryConfig.maxRetries).toBe(5);
        expect(result.current.retryConfig.baseDelay).toBe(500);
    });
});
// ===================================
// TESTS DE CLASIFICACIÓN DE ERRORES
// ===================================
describe('useSearchErrorHandler - Error Classification', ()=>{
    it('should classify network errors correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        const networkError = new TypeError('fetch failed');
        networkError.name = 'TypeError';
        (0, _react.act)(()=>{
            const error = result.current.handleError(networkError);
            expect(error.type).toBe('network');
            expect(error.retryable).toBe(true);
            expect(error.message).toContain('conexión');
        });
    });
    it('should classify timeout errors correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        const timeoutError = new Error('timeout');
        timeoutError.name = 'AbortError';
        (0, _react.act)(()=>{
            const error = result.current.handleError(timeoutError);
            expect(error.type).toBe('timeout');
            expect(error.retryable).toBe(true);
            expect(error.message).toContain('tardó demasiado');
        });
    });
    it('should classify server errors correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        const serverError = {
            status: 500,
            message: 'Internal Server Error'
        };
        (0, _react.act)(()=>{
            const error = result.current.handleError(serverError);
            expect(error.type).toBe('server');
            expect(error.retryable).toBe(true);
            expect(error.code).toBe('500');
        });
    });
    it('should classify validation errors correctly', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        const validationError = {
            status: 400,
            message: 'Bad Request'
        };
        (0, _react.act)(()=>{
            const error = result.current.handleError(validationError);
            expect(error.type).toBe('validation');
            expect(error.retryable).toBe(false);
            expect(error.code).toBe('400');
        });
    });
});
// ===================================
// TESTS DE RETRY AUTOMÁTICO
// ===================================
describe('useSearchErrorHandler - Retry Logic', ()=>{
    it('should retry failed operations with exponential backoff', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                retryConfig: {
                    maxRetries: 3,
                    baseDelay: 100,
                    backoffFactor: 2
                }
            }));
        let callCount = 0;
        const failingOperation = jest.fn().mockImplementation(()=>{
            callCount++;
            if (callCount < 3) {
                throw new Error('Network error');
            }
            return Promise.resolve('success');
        });
        let executePromise;
        await (0, _react.act)(async ()=>{
            executePromise = result.current.executeWithRetry(failingOperation, 'test operation');
        });
        // Avanzar timers para los retries
        await (0, _react.act)(async ()=>{
            jest.advanceTimersByTime(100); // Primer retry
            await Promise.resolve();
            jest.advanceTimersByTime(200); // Segundo retry
            await Promise.resolve();
        });
        const result_value = await executePromise;
        expect(result_value).toBe('success');
        expect(failingOperation).toHaveBeenCalledTimes(3);
    });
    it('should not retry non-retryable errors', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        const error = new Error('Bad Request');
        error.status = 400;
        const nonRetryableOperation = jest.fn().mockRejectedValue(error);
        await (0, _react.act)(async ()=>{
            await expect(result.current.executeWithRetry(nonRetryableOperation, 'validation test')).rejects.toThrow();
        });
        expect(nonRetryableOperation).toHaveBeenCalledTimes(1);
    });
    it('should stop retrying after max attempts', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                retryConfig: {
                    maxRetries: 2,
                    baseDelay: 1
                }
            }));
        const alwaysFailingOperation = jest.fn().mockRejectedValue(new Error('Persistent error'));
        // Usar real timers para este test
        jest.useRealTimers();
        await expect(result.current.executeWithRetry(alwaysFailingOperation, 'persistent failure test')).rejects.toThrow('Persistent error');
        expect(alwaysFailingOperation).toHaveBeenCalledTimes(3); // Original + 2 retries
        // Restaurar fake timers
        jest.useFakeTimers();
    });
});
// ===================================
// TESTS DE CALLBACKS
// ===================================
describe('useSearchErrorHandler - Callbacks', ()=>{
    it('should call onError callback when error occurs', ()=>{
        const onError = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                onError
            }));
        const testError = new Error('Test error');
        (0, _react.act)(()=>{
            result.current.handleError(testError);
        });
        expect(onError).toHaveBeenCalledWith(expect.objectContaining({
            type: 'unknown',
            message: 'Test error',
            retryable: true
        }));
    });
    it('should call onRetrySuccess callback on successful retry', async ()=>{
        const onRetrySuccess = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                onRetrySuccess,
                retryConfig: {
                    maxRetries: 2,
                    baseDelay: 50
                }
            }));
        let callCount = 0;
        const retryOperation = jest.fn().mockImplementation(()=>{
            callCount++;
            if (callCount === 1) {
                throw new Error('First failure');
            }
            return Promise.resolve('success');
        });
        let executePromise;
        await (0, _react.act)(async ()=>{
            executePromise = result.current.executeWithRetry(retryOperation);
        });
        await (0, _react.act)(async ()=>{
            jest.advanceTimersByTime(50);
            await Promise.resolve();
        });
        await executePromise;
        expect(onRetrySuccess).toHaveBeenCalled();
    });
    it('should call onRetryFailed callback when all retries fail', async ()=>{
        const onRetryFailed = jest.fn();
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                onRetryFailed,
                retryConfig: {
                    maxRetries: 1,
                    baseDelay: 1
                }
            }));
        const failingOperation = jest.fn().mockRejectedValue(new Error('Always fails'));
        // Usar real timers para este test
        jest.useRealTimers();
        await expect(result.current.executeWithRetry(failingOperation)).rejects.toThrow();
        expect(onRetryFailed).toHaveBeenCalledWith(expect.objectContaining({
            type: 'unknown',
            message: 'Always fails'
        }), 1 // número de intentos
        );
        // Restaurar fake timers
        jest.useFakeTimers();
    });
});
// ===================================
// TESTS DE ESTADO
// ===================================
describe('useSearchErrorHandler - State Management', ()=>{
    it('should update retry state during retries', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)({
                retryConfig: {
                    maxRetries: 2,
                    baseDelay: 50
                }
            }));
        let callCount = 0;
        const retryOperation = jest.fn().mockImplementation(()=>{
            callCount++;
            if (callCount < 3) {
                throw new Error('Retry test');
            }
            return Promise.resolve('success');
        });
        let executePromise;
        await (0, _react.act)(async ()=>{
            executePromise = result.current.executeWithRetry(retryOperation);
        });
        // Verificar estado durante primer retry
        await (0, _react.act)(async ()=>{
            jest.advanceTimersByTime(50);
            await Promise.resolve();
        });
        expect(result.current.isRetrying).toBe(true);
        expect(result.current.retryCount).toBe(1);
        // Completar la operación
        await (0, _react.act)(async ()=>{
            jest.advanceTimersByTime(100);
            await Promise.resolve();
        });
        await executePromise;
        expect(result.current.isRetrying).toBe(false);
        expect(result.current.retryCount).toBe(0);
    });
    it('should clear error state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useSearchErrorHandler.useSearchErrorHandler)());
        // Simular error
        (0, _react.act)(()=>{
            result.current.handleError(new Error('Test error'));
        });
        expect(result.current.hasError).toBe(true);
        // Limpiar error
        (0, _react.act)(()=>{
            result.current.clearError();
        });
        expect(result.current.hasError).toBe(false);
        expect(result.current.currentError).toBe(null);
        expect(result.current.retryCount).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;base64,