{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useSearchErrorHandler.test.tsx"],"sourcesContent":["// ===================================\n// TESTS: useSearchErrorHandler Hook - Manejo robusto de errores\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { useSearchErrorHandler } from '@/hooks/useSearchErrorHandler'\n\n// ===================================\n// SETUP\n// ===================================\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  jest.useFakeTimers()\n  // Mock console methods to reduce noise\n  jest.spyOn(console, 'warn').mockImplementation(() => {})\n  jest.spyOn(console, 'error').mockImplementation(() => {})\n})\n\nafterEach(() => {\n  jest.useRealTimers()\n  jest.restoreAllMocks()\n})\n\n// ===================================\n// TESTS BÁSICOS\n// ===================================\n\ndescribe('useSearchErrorHandler Hook', () => {\n  it('should initialize with default state', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    expect(result.current.currentError).toBe(null)\n    expect(result.current.retryCount).toBe(0)\n    expect(result.current.isRetrying).toBe(false)\n    expect(result.current.hasError).toBe(false)\n  })\n\n  it('should accept custom retry configuration', () => {\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        retryConfig: {\n          maxRetries: 5,\n          baseDelay: 500,\n        },\n      })\n    )\n\n    expect(result.current.retryConfig.maxRetries).toBe(5)\n    expect(result.current.retryConfig.baseDelay).toBe(500)\n  })\n})\n\n// ===================================\n// TESTS DE CLASIFICACIÓN DE ERRORES\n// ===================================\n\ndescribe('useSearchErrorHandler - Error Classification', () => {\n  it('should classify network errors correctly', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    const networkError = new TypeError('fetch failed')\n    networkError.name = 'TypeError'\n\n    act(() => {\n      const error = result.current.handleError(networkError)\n      expect(error.type).toBe('network')\n      expect(error.retryable).toBe(true)\n      expect(error.message).toContain('conexión')\n    })\n  })\n\n  it('should classify timeout errors correctly', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    const timeoutError = new Error('timeout')\n    timeoutError.name = 'AbortError'\n\n    act(() => {\n      const error = result.current.handleError(timeoutError)\n      expect(error.type).toBe('timeout')\n      expect(error.retryable).toBe(true)\n      expect(error.message).toContain('tardó demasiado')\n    })\n  })\n\n  it('should classify server errors correctly', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    const serverError = { status: 500, message: 'Internal Server Error' }\n\n    act(() => {\n      const error = result.current.handleError(serverError)\n      expect(error.type).toBe('server')\n      expect(error.retryable).toBe(true)\n      expect(error.code).toBe('500')\n    })\n  })\n\n  it('should classify validation errors correctly', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    const validationError = { status: 400, message: 'Bad Request' }\n\n    act(() => {\n      const error = result.current.handleError(validationError)\n      expect(error.type).toBe('validation')\n      expect(error.retryable).toBe(false)\n      expect(error.code).toBe('400')\n    })\n  })\n})\n\n// ===================================\n// TESTS DE RETRY AUTOMÁTICO\n// ===================================\n\ndescribe('useSearchErrorHandler - Retry Logic', () => {\n  it('should retry failed operations with exponential backoff', async () => {\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        retryConfig: {\n          maxRetries: 3,\n          baseDelay: 100,\n          backoffFactor: 2,\n        },\n      })\n    )\n\n    let callCount = 0\n    const failingOperation = jest.fn().mockImplementation(() => {\n      callCount++\n      if (callCount < 3) {\n        throw new Error('Network error')\n      }\n      return Promise.resolve('success')\n    })\n\n    let executePromise: Promise<any>\n\n    await act(async () => {\n      executePromise = result.current.executeWithRetry(failingOperation, 'test operation')\n    })\n\n    // Avanzar timers para los retries\n    await act(async () => {\n      jest.advanceTimersByTime(100) // Primer retry\n      await Promise.resolve()\n      jest.advanceTimersByTime(200) // Segundo retry\n      await Promise.resolve()\n    })\n\n    const result_value = await executePromise!\n\n    expect(result_value).toBe('success')\n    expect(failingOperation).toHaveBeenCalledTimes(3)\n  })\n\n  it('should not retry non-retryable errors', async () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    const error = new Error('Bad Request')\n    ;(error as any).status = 400\n    const nonRetryableOperation = jest.fn().mockRejectedValue(error)\n\n    await act(async () => {\n      await expect(\n        result.current.executeWithRetry(nonRetryableOperation, 'validation test')\n      ).rejects.toThrow()\n    })\n\n    expect(nonRetryableOperation).toHaveBeenCalledTimes(1)\n  })\n\n  it('should stop retrying after max attempts', async () => {\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        retryConfig: { maxRetries: 2, baseDelay: 1 }, // Delay muy pequeño\n      })\n    )\n\n    const alwaysFailingOperation = jest.fn().mockRejectedValue(new Error('Persistent error'))\n\n    // Usar real timers para este test\n    jest.useRealTimers()\n\n    await expect(\n      result.current.executeWithRetry(alwaysFailingOperation, 'persistent failure test')\n    ).rejects.toThrow('Persistent error')\n\n    expect(alwaysFailingOperation).toHaveBeenCalledTimes(3) // Original + 2 retries\n\n    // Restaurar fake timers\n    jest.useFakeTimers()\n  })\n})\n\n// ===================================\n// TESTS DE CALLBACKS\n// ===================================\n\ndescribe('useSearchErrorHandler - Callbacks', () => {\n  it('should call onError callback when error occurs', () => {\n    const onError = jest.fn()\n    const { result } = renderHook(() => useSearchErrorHandler({ onError }))\n\n    const testError = new Error('Test error')\n\n    act(() => {\n      result.current.handleError(testError)\n    })\n\n    expect(onError).toHaveBeenCalledWith(\n      expect.objectContaining({\n        type: 'unknown',\n        message: 'Test error',\n        retryable: true,\n      })\n    )\n  })\n\n  it('should call onRetrySuccess callback on successful retry', async () => {\n    const onRetrySuccess = jest.fn()\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        onRetrySuccess,\n        retryConfig: { maxRetries: 2, baseDelay: 50 },\n      })\n    )\n\n    let callCount = 0\n    const retryOperation = jest.fn().mockImplementation(() => {\n      callCount++\n      if (callCount === 1) {\n        throw new Error('First failure')\n      }\n      return Promise.resolve('success')\n    })\n\n    let executePromise: Promise<any>\n\n    await act(async () => {\n      executePromise = result.current.executeWithRetry(retryOperation)\n    })\n\n    await act(async () => {\n      jest.advanceTimersByTime(50)\n      await Promise.resolve()\n    })\n\n    await executePromise!\n\n    expect(onRetrySuccess).toHaveBeenCalled()\n  })\n\n  it('should call onRetryFailed callback when all retries fail', async () => {\n    const onRetryFailed = jest.fn()\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        onRetryFailed,\n        retryConfig: { maxRetries: 1, baseDelay: 1 }, // Delay muy pequeño\n      })\n    )\n\n    const failingOperation = jest.fn().mockRejectedValue(new Error('Always fails'))\n\n    // Usar real timers para este test\n    jest.useRealTimers()\n\n    await expect(result.current.executeWithRetry(failingOperation)).rejects.toThrow()\n\n    expect(onRetryFailed).toHaveBeenCalledWith(\n      expect.objectContaining({\n        type: 'unknown',\n        message: 'Always fails',\n      }),\n      1 // número de intentos\n    )\n\n    // Restaurar fake timers\n    jest.useFakeTimers()\n  })\n})\n\n// ===================================\n// TESTS DE ESTADO\n// ===================================\n\ndescribe('useSearchErrorHandler - State Management', () => {\n  it('should update retry state during retries', async () => {\n    const { result } = renderHook(() =>\n      useSearchErrorHandler({\n        retryConfig: { maxRetries: 2, baseDelay: 50 },\n      })\n    )\n\n    let callCount = 0\n    const retryOperation = jest.fn().mockImplementation(() => {\n      callCount++\n      if (callCount < 3) {\n        throw new Error('Retry test')\n      }\n      return Promise.resolve('success')\n    })\n\n    let executePromise: Promise<any>\n\n    await act(async () => {\n      executePromise = result.current.executeWithRetry(retryOperation)\n    })\n\n    // Verificar estado durante primer retry\n    await act(async () => {\n      jest.advanceTimersByTime(50)\n      await Promise.resolve()\n    })\n\n    expect(result.current.isRetrying).toBe(true)\n    expect(result.current.retryCount).toBe(1)\n\n    // Completar la operación\n    await act(async () => {\n      jest.advanceTimersByTime(100)\n      await Promise.resolve()\n    })\n\n    await executePromise!\n\n    expect(result.current.isRetrying).toBe(false)\n    expect(result.current.retryCount).toBe(0)\n  })\n\n  it('should clear error state', () => {\n    const { result } = renderHook(() => useSearchErrorHandler())\n\n    // Simular error\n    act(() => {\n      result.current.handleError(new Error('Test error'))\n    })\n\n    expect(result.current.hasError).toBe(true)\n\n    // Limpiar error\n    act(() => {\n      result.current.clearError()\n    })\n\n    expect(result.current.hasError).toBe(false)\n    expect(result.current.currentError).toBe(null)\n    expect(result.current.retryCount).toBe(0)\n  })\n})\n"],"names":["beforeEach","jest","clearAllMocks","useFakeTimers","spyOn","console","mockImplementation","afterEach","useRealTimers","restoreAllMocks","describe","it","result","renderHook","useSearchErrorHandler","expect","current","currentError","toBe","retryCount","isRetrying","hasError","retryConfig","maxRetries","baseDelay","networkError","TypeError","name","act","error","handleError","type","retryable","message","toContain","timeoutError","Error","serverError","status","code","validationError","backoffFactor","callCount","failingOperation","fn","Promise","resolve","executePromise","executeWithRetry","advanceTimersByTime","result_value","toHaveBeenCalledTimes","nonRetryableOperation","mockRejectedValue","rejects","toThrow","alwaysFailingOperation","onError","testError","toHaveBeenCalledWith","objectContaining","onRetrySuccess","retryOperation","toHaveBeenCalled","onRetryFailed","clearError"],"mappings":"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"}