716547c4e94919186eb67cf12c925fcd
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get SlackNotificationService () {
        return SlackNotificationService;
    },
    get sendErrorAlert () {
        return sendErrorAlert;
    },
    get sendLowStockAlert () {
        return sendLowStockAlert;
    },
    get sendOrderAlert () {
        return sendOrderAlert;
    },
    get sendSalesReport () {
        return sendSalesReport;
    },
    get sendSystemAlert () {
        return sendSystemAlert;
    },
    get slackService () {
        return slackService;
    }
});
const _usetoast = require("../../components/ui/use-toast");
class SlackNotificationService {
    static getInstance() {
        if (!SlackNotificationService.instance) {
            SlackNotificationService.instance = new SlackNotificationService();
        }
        return SlackNotificationService.instance;
    }
    configure(config) {
        this.webhookUrl = config.webhookUrl || null;
        this.botToken = config.botToken || null;
    }
    async sendNotification(config) {
        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });
            if (!response.ok) {
                throw new Error('Error al enviar notificación a Slack');
            }
            const result = await response.json();
            return result.success;
        } catch (error) {
            console.error('Error sending Slack notification:', error);
            (0, _usetoast.toast)({
                title: 'Error',
                description: 'No se pudo enviar la notificación a Slack',
                variant: 'destructive'
            });
            return false;
        }
    }
    async sendOrderAlert(orderData) {
        const attachment = {
            color: 'good',
            title: `Nueva orden #${orderData.orderId}`,
            fields: [
                {
                    title: 'Cliente',
                    value: orderData.customerName,
                    short: true
                },
                {
                    title: 'Total',
                    value: `$${orderData.total.toFixed(2)}`,
                    short: true
                },
                {
                    title: 'Estado',
                    value: orderData.status,
                    short: true
                },
                {
                    title: 'Productos',
                    value: orderData.items.map((item)=>`${item.name} (x${item.quantity})`).join('\n'),
                    short: false
                }
            ],
            footer: 'Sistema E-commerce',
            ts: Math.floor(Date.now() / 1000)
        };
        return this.sendNotification({
            channel: '#orders',
            message: `Nueva orden recibida: #${orderData.orderId}`,
            attachments: [
                attachment
            ],
            priority: 'normal'
        });
    }
    async sendLowStockAlert(productData) {
        const attachment = {
            color: 'warning',
            title: '⚠️ Alerta de Stock Bajo',
            fields: [
                {
                    title: 'Producto',
                    value: productData.productName,
                    short: true
                },
                {
                    title: 'Stock Actual',
                    value: productData.currentStock.toString(),
                    short: true
                },
                {
                    title: 'Stock Mínimo',
                    value: productData.minimumStock.toString(),
                    short: true
                },
                {
                    title: 'ID Producto',
                    value: productData.productId,
                    short: true
                }
            ],
            footer: 'Sistema de Inventario',
            ts: Math.floor(Date.now() / 1000)
        };
        return this.sendNotification({
            channel: '#inventory',
            message: `🚨 Stock bajo detectado para: ${productData.productName}`,
            attachments: [
                attachment
            ],
            priority: 'high'
        });
    }
    async sendErrorAlert(errorData) {
        const colorMap = {
            low: 'good',
            medium: 'warning',
            high: 'danger',
            critical: 'danger'
        };
        const attachment = {
            color: colorMap[errorData.severity],
            title: `🚨 Error ${errorData.severity.toUpperCase()}`,
            fields: [
                {
                    title: 'Error',
                    value: errorData.error,
                    short: false
                },
                {
                    title: 'Contexto',
                    value: errorData.context,
                    short: false
                },
                {
                    title: 'Usuario',
                    value: errorData.userId || 'N/A',
                    short: true
                },
                {
                    title: 'Severidad',
                    value: errorData.severity.toUpperCase(),
                    short: true
                }
            ],
            footer: 'Sistema de Monitoreo',
            ts: Math.floor(errorData.timestamp.getTime() / 1000)
        };
        return this.sendNotification({
            channel: '#errors',
            message: `Error detectado en el sistema`,
            attachments: [
                attachment
            ],
            priority: errorData.severity === 'critical' ? 'critical' : 'high'
        });
    }
    async sendSalesReport(reportData) {
        const attachment = {
            color: 'good',
            title: `📊 Reporte de Ventas - ${reportData.period}`,
            fields: [
                {
                    title: 'Ventas Totales',
                    value: `$${reportData.totalSales.toFixed(2)}`,
                    short: true
                },
                {
                    title: 'Órdenes Totales',
                    value: reportData.totalOrders.toString(),
                    short: true
                },
                {
                    title: 'Valor Promedio por Orden',
                    value: `$${reportData.averageOrderValue.toFixed(2)}`,
                    short: true
                },
                {
                    title: 'Top Productos',
                    value: reportData.topProducts.map((p)=>`${p.name}: ${p.sales} ventas`).join('\n'),
                    short: false
                }
            ],
            footer: 'Reporte Automático',
            ts: Math.floor(Date.now() / 1000)
        };
        return this.sendNotification({
            channel: '#sales',
            message: `Reporte de ventas generado para ${reportData.period}`,
            attachments: [
                attachment
            ],
            priority: 'low'
        });
    }
    async sendSystemAlert(alertData) {
        const colorMap = {
            info: 'good',
            warning: 'warning',
            error: 'danger'
        };
        const emojiMap = {
            info: 'ℹ️',
            warning: '⚠️',
            error: '🚨'
        };
        const attachment = {
            color: colorMap[alertData.severity],
            title: `${emojiMap[alertData.severity]} ${alertData.title}`,
            text: alertData.message,
            fields: alertData.details ? Object.entries(alertData.details).map(([key, value])=>({
                    title: key,
                    value: String(value),
                    short: true
                })) : undefined,
            footer: 'Sistema de Alertas',
            ts: Math.floor(Date.now() / 1000)
        };
        return this.sendNotification({
            channel: '#system',
            message: alertData.message,
            attachments: [
                attachment
            ],
            priority: alertData.severity === 'error' ? 'high' : 'normal'
        });
    }
    async testConnection() {
        try {
            const response = await fetch('/api/notifications/slack/test', {
                method: 'POST'
            });
            return response.ok;
        } catch (error) {
            console.error('Error testing Slack connection:', error);
            return false;
        }
    }
    constructor(){
        this.webhookUrl = null;
        this.botToken = null;
        this.apiEndpoint = '/api/notifications/slack';
    }
}
const slackService = SlackNotificationService.getInstance();
const sendOrderAlert = (orderData)=>slackService.sendOrderAlert(orderData);
const sendLowStockAlert = (productData)=>slackService.sendLowStockAlert(productData);
const sendErrorAlert = (errorData)=>slackService.sendErrorAlert(errorData);
const sendSalesReport = (reportData)=>slackService.sendSalesReport(reportData);
const sendSystemAlert = (alertData)=>slackService.sendSystemAlert(alertData);

//# sourceMappingURL=data:application/json;base64,