4ab7b455734359dd8ab5eea4b1a63e87
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useNotifications", {
    enumerable: true,
    get: function() {
        return useNotifications;
    }
});
const _react = require("react");
const _sonner = require("sonner");
function useNotifications() {
    // Función para enviar notificación por email
    const sendEmailNotification = (0, _react.useCallback)(async (data)=>{
        try {
            const response = await fetch('/api/user/notifications/email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                throw new Error('Error al enviar notificación por email');
            }
            const result = await response.json();
            return result.success;
        } catch (error) {
            console.error('Error al enviar notificación por email:', error);
            return false;
        }
    }, []);
    // Función para mostrar toast notification
    const showToast = (0, _react.useCallback)((message, type = 'success', duration)=>{
        const toastOptions = duration ? {
            duration
        } : undefined;
        switch(type){
            case 'success':
                _sonner.toast.success(message, toastOptions);
                break;
            case 'error':
                _sonner.toast.error(message, toastOptions);
                break;
            case 'info':
                _sonner.toast.info(message, toastOptions);
                break;
            case 'warning':
                _sonner.toast.warning(message, toastOptions);
                break;
        }
    }, []);
    // Notificar cambios de perfil
    const notifyProfileChange = (0, _react.useCallback)(async (message, emailData, options = {})=>{
        const { showToast: shouldShowToast = true, sendEmail = false, toastType = 'success', toastDuration } = options;
        // Mostrar toast notification
        if (shouldShowToast) {
            showToast(message, toastType, toastDuration);
        }
        // Enviar notificación por email si es necesario
        if (sendEmail && emailData) {
            try {
                const emailSent = await sendEmailNotification(emailData);
                if (emailSent) {
                    console.log('✅ Email notification sent for profile change');
                } else {
                    console.warn('⚠️ Failed to send email notification for profile change');
                }
            } catch (error) {
                console.error('❌ Error sending email notification:', error);
            }
        }
    }, [
        showToast,
        sendEmailNotification
    ]);
    // Notificar cambios de avatar
    const notifyAvatarChange = (0, _react.useCallback)(async (message, options = {})=>{
        const { showToast: shouldShowToast = true, toastType = 'success', toastDuration } = options;
        if (shouldShowToast) {
            showToast(message, toastType, toastDuration);
        }
    }, [
        showToast
    ]);
    // Notificar cambios de direcciones
    const notifyAddressChange = (0, _react.useCallback)(async (message, options = {})=>{
        const { showToast: shouldShowToast = true, toastType = 'success', toastDuration } = options;
        if (shouldShowToast) {
            showToast(message, toastType, toastDuration);
        }
    }, [
        showToast
    ]);
    // Notificar alertas de seguridad
    const notifySecurityAlert = (0, _react.useCallback)(async (message, emailData, options = {})=>{
        const { showToast: shouldShowToast = true, sendEmail = true, toastType = 'warning', toastDuration = 8000 } = options;
        // Mostrar toast notification
        if (shouldShowToast) {
            showToast(message, toastType, toastDuration);
        }
        // Enviar notificación por email
        if (sendEmail && emailData) {
            try {
                const emailSent = await sendEmailNotification(emailData);
                if (emailSent) {
                    console.log('✅ Security alert email sent');
                } else {
                    console.warn('⚠️ Failed to send security alert email');
                }
            } catch (error) {
                console.error('❌ Error sending security alert email:', error);
            }
        }
    }, [
        showToast,
        sendEmailNotification
    ]);
    return {
        notifyProfileChange,
        notifyAvatarChange,
        notifyAddressChange,
        notifySecurityAlert,
        sendEmailNotification
    };
}

//# sourceMappingURL=data:application/json;base64,