{"version":3,"names":["cov_qq33314ke","actualCoverage","s","GET","f","POST","runtime","getSystemHealthMetrics","startTime","Date","now","rateLimitMetrics","_metrics","metricsCollector","getMetrics","rateLimitHealth","status","errors","b","uptime","Math","floor","lastCheck","toISOString","responseTime","averageResponseTime","errorRate","totalRequests","cacheMetrics","_enterprisecachesystem","enterpriseCacheSystem","cacheKeys","Object","keys","avgCacheResponseTime","length","reduce","sum","key","avgResponseTime","cacheHealth","hits","misses","auditHealth","validationHealth","error","console","getSecurityMetrics","auditingStats","totalEvents","criticalEvents","anomaliesDetected","lastIncident","validationStats","totalValidations","failedValidations","attacksBlocked","successRate","rateLimitingStats","blockedRequests","allowedRequests","topBlockedIPs","getCacheMetrics","hitRate","totalHits","totalMisses","memoryUsage","evictions","topKeys","totalMemoryUsage","totalEvictions","map","sort","a","slice","getPerformanceMetrics","mercadoPagoMetrics","getMercadoPagoMetrics","warn","apiResponseTimes","p50","payment_creation","response_times","p95","p99","throughput","requests","total","payment_queries","errorRates","overall_health","error_rate","process","resourceUsage","cpu","random","memory","heapUsed","heapTotal","disk","request","authResult","_enterpriseauthutils","requireAdminAuth","isValid","_server","NextResponse","json","code","enterprise","context","systemHealth","security","cache","performance","Promise","all","enterpriseMetrics","lastUpdated","_enterpriseauditsystem","enterpriseAuditSystem","logEnterpriseEvent","user_id","userId","event_type","event_category","severity","description","metadata","metrics_types","access_type","ip_address","ipAddress","user_agent","userAgent","response","success","data","requester","role","permissions","metrics","collection_time_ms","getTime","systems_monitored","cache_keys_tracked","timestamp","action","triggered_by","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\enterprise-metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de Métricas Enterprise\r\n * Proporciona métricas completas de todos los sistemas enterprise\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\ninterface SystemHealth {\r\n  status: 'healthy' | 'warning' | 'critical' | 'unknown';\r\n  uptime: number;\r\n  lastCheck: string;\r\n  responseTime: number;\r\n  errorRate: number;\r\n}\r\n\r\ninterface SecurityMetrics {\r\n  rateLimitingStats: {\r\n    totalRequests: number;\r\n    blockedRequests: number;\r\n    allowedRequests: number;\r\n    topBlockedIPs: Array<{ ip: string; count: number }>;\r\n    averageResponseTime: number;\r\n  };\r\n  auditingStats: {\r\n    totalEvents: number;\r\n    criticalEvents: number;\r\n    anomaliesDetected: number;\r\n    lastIncident: string | null;\r\n  };\r\n  validationStats: {\r\n    totalValidations: number;\r\n    failedValidations: number;\r\n    attacksBlocked: number;\r\n    successRate: number;\r\n  };\r\n}\r\n\r\ninterface CacheMetrics {\r\n  hitRate: number;\r\n  totalHits: number;\r\n  totalMisses: number;\r\n  averageResponseTime: number;\r\n  memoryUsage: number;\r\n  evictions: number;\r\n  topKeys: Array<{ key: string; hits: number }>;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  apiResponseTimes: {\r\n    p50: number;\r\n    p95: number;\r\n    p99: number;\r\n  };\r\n  throughput: number;\r\n  errorRates: {\r\n    '4xx': number;\r\n    '5xx': number;\r\n  };\r\n  resourceUsage: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n  };\r\n}\r\n\r\ninterface EnterpriseMetrics {\r\n  systemHealth: Record<string, SystemHealth>;\r\n  security: SecurityMetrics;\r\n  cache: CacheMetrics;\r\n  performance: PerformanceMetrics;\r\n  lastUpdated: string;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE RECOLECCIÓN DE MÉTRICAS\r\n// =====================================================\r\n\r\n/**\r\n * Obtiene métricas de salud del sistema\r\n */\r\nasync function getSystemHealthMetrics(): Promise<Record<string, SystemHealth>> {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Obtener métricas de rate limiting\r\n    const rateLimitMetrics = metricsCollector.getMetrics();\r\n    const rateLimitHealth: SystemHealth = {\r\n      status: rateLimitMetrics.errors > 100 ? 'warning' : 'healthy',\r\n      uptime: Math.floor((Date.now() - startTime) / 1000), // Simplificado\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: rateLimitMetrics.averageResponseTime || 0,\r\n      errorRate: rateLimitMetrics.totalRequests > 0 ? \r\n        rateLimitMetrics.errors / rateLimitMetrics.totalRequests : 0\r\n    };\r\n\r\n    // Obtener métricas de cache\r\n    const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n    const cacheKeys = Object.keys(cacheMetrics);\r\n    const avgCacheResponseTime = cacheKeys.length > 0 ?\r\n      cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length : 0;\r\n    \r\n    const cacheHealth: SystemHealth = {\r\n      status: avgCacheResponseTime > 100 ? 'warning' : 'healthy',\r\n      uptime: 2592000, // 30 días (simplificado)\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: avgCacheResponseTime,\r\n      errorRate: cacheKeys.length > 0 ?\r\n        cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].errors, 0) / \r\n        cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits + cacheMetrics[key].misses, 1) : 0\r\n    };\r\n\r\n    // Métricas de auditoría (simuladas por ahora)\r\n    const auditHealth: SystemHealth = {\r\n      status: 'healthy',\r\n      uptime: 2592000,\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: 120,\r\n      errorRate: 0.002\r\n    };\r\n\r\n    // Métricas de validación (simuladas por ahora)\r\n    const validationHealth: SystemHealth = {\r\n      status: 'healthy',\r\n      uptime: 2580000,\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: 85,\r\n      errorRate: 0.015\r\n    };\r\n\r\n    return {\r\n      'Rate Limiting': rateLimitHealth,\r\n      'Cache': cacheHealth,\r\n      'Auditoría': auditHealth,\r\n      'Validación': validationHealth\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting system health:', error);\r\n    \r\n    // Retornar métricas por defecto en caso de error\r\n    return {\r\n      'Rate Limiting': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Cache': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Auditoría': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Validación': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene métricas de seguridad\r\n */\r\nasync function getSecurityMetrics(): Promise<SecurityMetrics> {\r\n  try {\r\n    // Métricas de rate limiting\r\n    const rateLimitMetrics = metricsCollector.getMetrics();\r\n    \r\n    // Métricas de auditoría (simuladas - en producción vendrían del sistema de auditoría)\r\n    const auditingStats = {\r\n      totalEvents: 850000,\r\n      criticalEvents: 125,\r\n      anomaliesDetected: 45,\r\n      lastIncident: '2025-01-31T10:30:00Z'\r\n    };\r\n\r\n    // Métricas de validación (simuladas - en producción vendrían del sistema de validación)\r\n    const validationStats = {\r\n      totalValidations: 2100000,\r\n      failedValidations: 31500,\r\n      attacksBlocked: 8500,\r\n      successRate: 0.985\r\n    };\r\n\r\n    return {\r\n      rateLimitingStats: {\r\n        totalRequests: rateLimitMetrics.totalRequests || 0,\r\n        blockedRequests: rateLimitMetrics.blockedRequests || 0,\r\n        allowedRequests: rateLimitMetrics.allowedRequests || 0,\r\n        topBlockedIPs: rateLimitMetrics.topBlockedIPs || [],\r\n        averageResponseTime: rateLimitMetrics.averageResponseTime || 0\r\n      },\r\n      auditingStats,\r\n      validationStats\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting security metrics:', error);\r\n    \r\n    return {\r\n      rateLimitingStats: {\r\n        totalRequests: 0,\r\n        blockedRequests: 0,\r\n        allowedRequests: 0,\r\n        topBlockedIPs: [],\r\n        averageResponseTime: 0\r\n      },\r\n      auditingStats: {\r\n        totalEvents: 0,\r\n        criticalEvents: 0,\r\n        anomaliesDetected: 0,\r\n        lastIncident: null\r\n      },\r\n      validationStats: {\r\n        totalValidations: 0,\r\n        failedValidations: 0,\r\n        attacksBlocked: 0,\r\n        successRate: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene métricas de cache\r\n */\r\nasync function getCacheMetrics(): Promise<CacheMetrics> {\r\n  try {\r\n    const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n    const cacheKeys = Object.keys(cacheMetrics);\r\n    \r\n    if (cacheKeys.length === 0) {\r\n      return {\r\n        hitRate: 0,\r\n        totalHits: 0,\r\n        totalMisses: 0,\r\n        averageResponseTime: 0,\r\n        memoryUsage: 0,\r\n        evictions: 0,\r\n        topKeys: []\r\n      };\r\n    }\r\n\r\n    const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0);\r\n    const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0);\r\n    const totalRequests = totalHits + totalMisses;\r\n    const hitRate = totalRequests > 0 ? totalHits / totalRequests : 0;\r\n    \r\n    const averageResponseTime = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length;\r\n    \r\n    const totalMemoryUsage = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].memoryUsage, 0);\r\n    \r\n    const totalEvictions = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].evictions, 0);\r\n\r\n    // Top keys por hits\r\n    const topKeys = cacheKeys\r\n      .map(key => ({ key, hits: cacheMetrics[key].hits }))\r\n      .sort((a, b) => b.hits - a.hits)\r\n      .slice(0, 10);\r\n\r\n    return {\r\n      hitRate,\r\n      totalHits,\r\n      totalMisses,\r\n      averageResponseTime,\r\n      memoryUsage: totalMemoryUsage,\r\n      evictions: totalEvictions,\r\n      topKeys\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting cache metrics:', error);\r\n    \r\n    return {\r\n      hitRate: 0,\r\n      totalHits: 0,\r\n      totalMisses: 0,\r\n      averageResponseTime: 0,\r\n      memoryUsage: 0,\r\n      evictions: 0,\r\n      topKeys: []\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene métricas de performance\r\n */\r\nasync function getPerformanceMetrics(): Promise<PerformanceMetrics> {\r\n  try {\r\n    // Obtener métricas de MercadoPago si están disponibles\r\n    let mercadoPagoMetrics;\r\n    try {\r\n      mercadoPagoMetrics = await metricsCollector.getMercadoPagoMetrics();\r\n    } catch (error) {\r\n      console.warn('[ENTERPRISE_METRICS] MercadoPago metrics not available:', error);\r\n      mercadoPagoMetrics = null;\r\n    }\r\n\r\n    // Calcular métricas de performance\r\n    const apiResponseTimes = mercadoPagoMetrics ? {\r\n      p50: mercadoPagoMetrics.payment_creation.response_times.p50 || 120,\r\n      p95: mercadoPagoMetrics.payment_creation.response_times.p95 || 450,\r\n      p99: mercadoPagoMetrics.payment_creation.response_times.p99 || 850\r\n    } : {\r\n      p50: 120,\r\n      p95: 450,\r\n      p99: 850\r\n    };\r\n\r\n    const throughput = mercadoPagoMetrics ? \r\n      mercadoPagoMetrics.payment_creation.requests.total + \r\n      mercadoPagoMetrics.payment_queries.requests.total : 2500;\r\n\r\n    const errorRates = mercadoPagoMetrics ? {\r\n      '4xx': mercadoPagoMetrics.overall_health.error_rate * 0.7, // Aproximación\r\n      '5xx': mercadoPagoMetrics.overall_health.error_rate * 0.3\r\n    } : {\r\n      '4xx': 0.025,\r\n      '5xx': 0.008\r\n    };\r\n\r\n    // Métricas de recursos del sistema\r\n    const memoryUsage = process.memoryUsage();\r\n    const resourceUsage = {\r\n      cpu: Math.random() * 40 + 30, // Simulado - en producción usar librerías como 'os-utils'\r\n      memory: (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100,\r\n      disk: Math.random() * 30 + 40 // Simulado\r\n    };\r\n\r\n    return {\r\n      apiResponseTimes,\r\n      throughput,\r\n      errorRates,\r\n      resourceUsage\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting performance metrics:', error);\r\n    \r\n    return {\r\n      apiResponseTimes: {\r\n        p50: 0,\r\n        p95: 0,\r\n        p99: 0\r\n      },\r\n      throughput: 0,\r\n      errorRates: {\r\n        '4xx': 0,\r\n        '5xx': 0\r\n      },\r\n      resourceUsage: {\r\n        cpu: 0,\r\n        memory: 0,\r\n        disk: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER PRINCIPAL\r\n// =====================================================\r\n\r\n/**\r\n * GET /api/admin/monitoring/enterprise-metrics\r\n * Obtiene métricas completas de todos los sistemas enterprise\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'monitoring_access']);\r\n    \r\n    if (!authResult.isValid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Recopilar métricas de todos los sistemas\r\n    const [systemHealth, security, cache, performance] = await Promise.all([\r\n      getSystemHealthMetrics(),\r\n      getSecurityMetrics(),\r\n      getCacheMetrics(),\r\n      getPerformanceMetrics()\r\n    ]);\r\n\r\n    const enterpriseMetrics: EnterpriseMetrics = {\r\n      systemHealth,\r\n      security,\r\n      cache,\r\n      performance,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n\r\n    // Registrar acceso a métricas en auditoría\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'METRICS_ACCESS' as any,\r\n      event_category: 'monitoring',\r\n      severity: 'low' as any,\r\n      description: 'Enterprise metrics accessed',\r\n      metadata: {\r\n        metrics_types: ['system_health', 'security', 'cache', 'performance'],\r\n        access_type: 'dashboard'\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const response = {\r\n      success: true,\r\n      data: enterpriseMetrics,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        metrics: {\r\n          collection_time_ms: Date.now() - new Date(enterpriseMetrics.lastUpdated).getTime(),\r\n          systems_monitored: Object.keys(systemHealth).length,\r\n          cache_keys_tracked: Object.keys(cache).length\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS_API] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener métricas enterprise',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring/enterprise-metrics\r\n * Fuerza actualización de métricas\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'monitoring_write']);\r\n    \r\n    if (!authResult.isValid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Forzar actualización de métricas\r\n    // En una implementación real, esto podría limpiar caches, reiniciar contadores, etc.\r\n    \r\n    // Registrar acción de actualización forzada\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'METRICS_REFRESH' as any,\r\n      event_category: 'monitoring',\r\n      severity: 'medium' as any,\r\n      description: 'Forced metrics refresh',\r\n      metadata: {\r\n        action: 'force_refresh',\r\n        triggered_by: 'admin_dashboard'\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const response = {\r\n      success: true,\r\n      message: 'Métricas actualizadas correctamente',\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        action: 'metrics_refresh',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS_API] Error in POST:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al actualizar métricas',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}