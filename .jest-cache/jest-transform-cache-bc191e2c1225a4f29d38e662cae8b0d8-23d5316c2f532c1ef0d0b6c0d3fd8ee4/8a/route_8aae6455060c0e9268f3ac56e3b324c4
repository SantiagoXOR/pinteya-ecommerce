56c4d3ef6bfd2fcc613e8498c0fb5668
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_qq33314ke() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\enterprise-metrics\\route.ts";
  var hash = "4f48421a9109dd56a73af887cd88aa51a003a935";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\enterprise-metrics\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 85
        }
      },
      "9": {
        start: {
          line: 25,
          column: 31
        },
        end: {
          line: 25,
          column: 93
        }
      },
      "10": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 97
        }
      },
      "11": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 65
        }
      },
      "12": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "13": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 32
        }
      },
      "14": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "15": {
        start: {
          line: 38,
          column: 33
        },
        end: {
          line: 38,
          column: 71
        }
      },
      "16": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "17": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 86
        }
      },
      "18": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 51
        }
      },
      "19": {
        start: {
          line: 49,
          column: 37
        },
        end: {
          line: 49,
          column: 155
        }
      },
      "20": {
        start: {
          line: 49,
          column: 89
        },
        end: {
          line: 49,
          column: 128
        }
      },
      "21": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 55,
          column: 75
        },
        end: {
          line: 55,
          column: 105
        }
      },
      "23": {
        start: {
          line: 55,
          column: 141
        },
        end: {
          line: 55,
          column: 196
        }
      },
      "24": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "25": {
        start: {
          line: 66,
          column: 33
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "26": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 82
        }
      },
      "28": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "29": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "30": {
        start: {
          line: 119,
          column: 33
        },
        end: {
          line: 119,
          column: 71
        }
      },
      "31": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "32": {
        start: {
          line: 128,
          column: 32
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "33": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "34": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 85
        }
      },
      "35": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "36": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 219,
          column: 5
        }
      },
      "37": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 174,
          column: 86
        }
      },
      "38": {
        start: {
          line: 175,
          column: 26
        },
        end: {
          line: 175,
          column: 51
        }
      },
      "39": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "40": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "41": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 187,
          column: 87
        }
      },
      "42": {
        start: {
          line: 187,
          column: 55
        },
        end: {
          line: 187,
          column: 83
        }
      },
      "43": {
        start: {
          line: 188,
          column: 28
        },
        end: {
          line: 188,
          column: 91
        }
      },
      "44": {
        start: {
          line: 188,
          column: 57
        },
        end: {
          line: 188,
          column: 87
        }
      },
      "45": {
        start: {
          line: 189,
          column: 30
        },
        end: {
          line: 189,
          column: 53
        }
      },
      "46": {
        start: {
          line: 190,
          column: 24
        },
        end: {
          line: 190,
          column: 73
        }
      },
      "47": {
        start: {
          line: 191,
          column: 36
        },
        end: {
          line: 191,
          column: 127
        }
      },
      "48": {
        start: {
          line: 191,
          column: 65
        },
        end: {
          line: 191,
          column: 104
        }
      },
      "49": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 101
        }
      },
      "50": {
        start: {
          line: 192,
          column: 62
        },
        end: {
          line: 192,
          column: 97
        }
      },
      "51": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 193,
          column: 97
        }
      },
      "52": {
        start: {
          line: 193,
          column: 60
        },
        end: {
          line: 193,
          column: 93
        }
      },
      "53": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 198,
          column: 58
        }
      },
      "54": {
        start: {
          line: 195,
          column: 46
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "55": {
        start: {
          line: 198,
          column: 29
        },
        end: {
          line: 198,
          column: 44
        }
      },
      "56": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 207,
          column: 10
        }
      },
      "57": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 82
        }
      },
      "58": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "59": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "60": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "61": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 89
        }
      },
      "62": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 91
        }
      },
      "63": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "64": {
        start: {
          line: 234,
          column: 33
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "65": {
        start: {
          line: 243,
          column: 27
        },
        end: {
          line: 243,
          column: 157
        }
      },
      "66": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "67": {
        start: {
          line: 252,
          column: 28
        },
        end: {
          line: 252,
          column: 49
        }
      },
      "68": {
        start: {
          line: 253,
          column: 30
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "69": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "70": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 88
        }
      },
      "71": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 282,
          column: 10
        }
      },
      "72": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 363,
          column: 5
        }
      },
      "73": {
        start: {
          line: 288,
          column: 27
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "74": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "75": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 299,
          column: 15
        }
      },
      "76": {
        start: {
          line: 301,
          column: 24
        },
        end: {
          line: 301,
          column: 42
        }
      },
      "77": {
        start: {
          line: 303,
          column: 61
        },
        end: {
          line: 308,
          column: 10
        }
      },
      "78": {
        start: {
          line: 309,
          column: 34
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "79": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 334,
          column: 20
        }
      },
      "80": {
        start: {
          line: 335,
          column: 25
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "81": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 51
        }
      },
      "82": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 64
        }
      },
      "83": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 362,
          column: 11
        }
      },
      "84": {
        start: {
          line: 366,
          column: 4
        },
        end: {
          line: 421,
          column: 5
        }
      },
      "85": {
        start: {
          line: 368,
          column: 27
        },
        end: {
          line: 371,
          column: 10
        }
      },
      "86": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "87": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "88": {
        start: {
          line: 381,
          column: 24
        },
        end: {
          line: 381,
          column: 42
        }
      },
      "89": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 397,
          column: 20
        }
      },
      "90": {
        start: {
          line: 398,
          column: 25
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "91": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 51
        }
      },
      "92": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 72
        }
      },
      "93": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 420,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "getSystemHealthMetrics",
        decl: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 34,
            column: 41
          }
        },
        loc: {
          start: {
            line: 34,
            column: 44
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 49,
            column: 77
          },
          end: {
            line: 49,
            column: 78
          }
        },
        loc: {
          start: {
            line: 49,
            column: 89
          },
          end: {
            line: 49,
            column: 128
          }
        },
        line: 49
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 55,
            column: 63
          },
          end: {
            line: 55,
            column: 64
          }
        },
        loc: {
          start: {
            line: 55,
            column: 75
          },
          end: {
            line: 55,
            column: 105
          }
        },
        line: 55
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 55,
            column: 129
          },
          end: {
            line: 55,
            column: 130
          }
        },
        loc: {
          start: {
            line: 55,
            column: 141
          },
          end: {
            line: 55,
            column: 196
          }
        },
        line: 55
      },
      "8": {
        name: "getSecurityMetrics",
        decl: {
          start: {
            line: 116,
            column: 19
          },
          end: {
            line: 116,
            column: 37
          }
        },
        loc: {
          start: {
            line: 116,
            column: 40
          },
          end: {
            line: 169,
            column: 1
          }
        },
        line: 116
      },
      "9": {
        name: "getCacheMetrics",
        decl: {
          start: {
            line: 172,
            column: 19
          },
          end: {
            line: 172,
            column: 34
          }
        },
        loc: {
          start: {
            line: 172,
            column: 37
          },
          end: {
            line: 220,
            column: 1
          }
        },
        line: 172
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 187,
            column: 43
          },
          end: {
            line: 187,
            column: 44
          }
        },
        loc: {
          start: {
            line: 187,
            column: 55
          },
          end: {
            line: 187,
            column: 83
          }
        },
        line: 187
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 188,
            column: 45
          },
          end: {
            line: 188,
            column: 46
          }
        },
        loc: {
          start: {
            line: 188,
            column: 57
          },
          end: {
            line: 188,
            column: 87
          }
        },
        line: 188
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 191,
            column: 53
          },
          end: {
            line: 191,
            column: 54
          }
        },
        loc: {
          start: {
            line: 191,
            column: 65
          },
          end: {
            line: 191,
            column: 104
          }
        },
        line: 191
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 192,
            column: 50
          },
          end: {
            line: 192,
            column: 51
          }
        },
        loc: {
          start: {
            line: 192,
            column: 62
          },
          end: {
            line: 192,
            column: 97
          }
        },
        line: 192
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 193,
            column: 48
          },
          end: {
            line: 193,
            column: 49
          }
        },
        loc: {
          start: {
            line: 193,
            column: 60
          },
          end: {
            line: 193,
            column: 93
          }
        },
        line: 193
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 195,
            column: 38
          },
          end: {
            line: 195,
            column: 39
          }
        },
        loc: {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 198,
            column: 13
          }
        },
        line: 195
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 198,
            column: 21
          },
          end: {
            line: 198,
            column: 22
          }
        },
        loc: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 44
          }
        },
        line: 198
      },
      "17": {
        name: "getPerformanceMetrics",
        decl: {
          start: {
            line: 223,
            column: 19
          },
          end: {
            line: 223,
            column: 40
          }
        },
        loc: {
          start: {
            line: 223,
            column: 43
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 223
      },
      "18": {
        name: "GET",
        decl: {
          start: {
            line: 285,
            column: 15
          },
          end: {
            line: 285,
            column: 18
          }
        },
        loc: {
          start: {
            line: 285,
            column: 28
          },
          end: {
            line: 364,
            column: 1
          }
        },
        line: 285
      },
      "19": {
        name: "POST",
        decl: {
          start: {
            line: 365,
            column: 15
          },
          end: {
            line: 365,
            column: 19
          }
        },
        loc: {
          start: {
            line: 365,
            column: 29
          },
          end: {
            line: 422,
            column: 1
          }
        },
        line: 365
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 40,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 52
          },
          end: {
            line: 40,
            column: 61
          }
        }, {
          start: {
            line: 40,
            column: 64
          },
          end: {
            line: 40,
            column: 73
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 43,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 43,
            column: 62
          }
        }, {
          start: {
            line: 43,
            column: 66
          },
          end: {
            line: 43,
            column: 67
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 23
          },
          end: {
            line: 44,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 60
          },
          end: {
            line: 44,
            column: 116
          }
        }, {
          start: {
            line: 44,
            column: 119
          },
          end: {
            line: 44,
            column: 120
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 155
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 60
          },
          end: {
            line: 49,
            column: 151
          }
        }, {
          start: {
            line: 49,
            column: 154
          },
          end: {
            line: 49,
            column: 155
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 20
          },
          end: {
            line: 51,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 49
          },
          end: {
            line: 51,
            column: 58
          }
        }, {
          start: {
            line: 51,
            column: 61
          },
          end: {
            line: 51,
            column: 70
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 23
          },
          end: {
            line: 55,
            column: 204
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 46
          },
          end: {
            line: 55,
            column: 200
          }
        }, {
          start: {
            line: 55,
            column: 203
          },
          end: {
            line: 55,
            column: 204
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 136,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 136,
            column: 61
          }
        }, {
          start: {
            line: 136,
            column: 65
          },
          end: {
            line: 136,
            column: 66
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 137,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 137,
            column: 65
          }
        }, {
          start: {
            line: 137,
            column: 69
          },
          end: {
            line: 137,
            column: 70
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 33
          },
          end: {
            line: 138,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 33
          },
          end: {
            line: 138,
            column: 65
          }
        }, {
          start: {
            line: 138,
            column: 69
          },
          end: {
            line: 138,
            column: 70
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 31
          },
          end: {
            line: 139,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 31
          },
          end: {
            line: 139,
            column: 61
          }
        }, {
          start: {
            line: 139,
            column: 65
          },
          end: {
            line: 139,
            column: 67
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 140,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 140,
            column: 73
          }
        }, {
          start: {
            line: 140,
            column: 77
          },
          end: {
            line: 140,
            column: 78
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 190,
            column: 24
          },
          end: {
            line: 190,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 44
          },
          end: {
            line: 190,
            column: 69
          }
        }, {
          start: {
            line: 190,
            column: 72
          },
          end: {
            line: 190,
            column: 73
          }
        }],
        line: 190
      },
      "13": {
        loc: {
          start: {
            line: 234,
            column: 33
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 54
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 242,
            column: 9
          }
        }],
        line: 234
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 17
          },
          end: {
            line: 235,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 17
          },
          end: {
            line: 235,
            column: 71
          }
        }, {
          start: {
            line: 235,
            column: 75
          },
          end: {
            line: 235,
            column: 78
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 236,
            column: 17
          },
          end: {
            line: 236,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 17
          },
          end: {
            line: 236,
            column: 71
          }
        }, {
          start: {
            line: 236,
            column: 75
          },
          end: {
            line: 236,
            column: 78
          }
        }],
        line: 236
      },
      "16": {
        loc: {
          start: {
            line: 237,
            column: 17
          },
          end: {
            line: 237,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 17
          },
          end: {
            line: 237,
            column: 71
          }
        }, {
          start: {
            line: 237,
            column: 75
          },
          end: {
            line: 237,
            column: 78
          }
        }],
        line: 237
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 27
          },
          end: {
            line: 243,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 243,
            column: 150
          }
        }, {
          start: {
            line: 243,
            column: 153
          },
          end: {
            line: 243,
            column: 157
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 27
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 48
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 250,
            column: 9
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 300,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "20": {
        loc: {
          start: {
            line: 298,
            column: 24
          },
          end: {
            line: 298,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 24
          },
          end: {
            line: 298,
            column: 41
          }
        }, {
          start: {
            line: 298,
            column: 45
          },
          end: {
            line: 298,
            column: 48
          }
        }],
        line: 298
      },
      "21": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "22": {
        loc: {
          start: {
            line: 378,
            column: 24
          },
          end: {
            line: 378,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 24
          },
          end: {
            line: 378,
            column: 41
          }
        }, {
          start: {
            line: 378,
            column: 45
          },
          end: {
            line: 378,
            column: 48
          }
        }],
        line: 378
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\monitoring\\enterprise-metrics\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API de M\xE9tricas Enterprise\r\n * Proporciona m\xE9tricas completas de todos los sistemas enterprise\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/enterprise-auth-utils';\r\nimport { enterpriseAuditSystem } from '@/lib/security/enterprise-audit-system';\r\nimport { enterpriseCacheSystem } from '@/lib/optimization/enterprise-cache-system';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// =====================================================\r\n// TIPOS E INTERFACES\r\n// =====================================================\r\n\r\ninterface SystemHealth {\r\n  status: 'healthy' | 'warning' | 'critical' | 'unknown';\r\n  uptime: number;\r\n  lastCheck: string;\r\n  responseTime: number;\r\n  errorRate: number;\r\n}\r\n\r\ninterface SecurityMetrics {\r\n  rateLimitingStats: {\r\n    totalRequests: number;\r\n    blockedRequests: number;\r\n    allowedRequests: number;\r\n    topBlockedIPs: Array<{ ip: string; count: number }>;\r\n    averageResponseTime: number;\r\n  };\r\n  auditingStats: {\r\n    totalEvents: number;\r\n    criticalEvents: number;\r\n    anomaliesDetected: number;\r\n    lastIncident: string | null;\r\n  };\r\n  validationStats: {\r\n    totalValidations: number;\r\n    failedValidations: number;\r\n    attacksBlocked: number;\r\n    successRate: number;\r\n  };\r\n}\r\n\r\ninterface CacheMetrics {\r\n  hitRate: number;\r\n  totalHits: number;\r\n  totalMisses: number;\r\n  averageResponseTime: number;\r\n  memoryUsage: number;\r\n  evictions: number;\r\n  topKeys: Array<{ key: string; hits: number }>;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  apiResponseTimes: {\r\n    p50: number;\r\n    p95: number;\r\n    p99: number;\r\n  };\r\n  throughput: number;\r\n  errorRates: {\r\n    '4xx': number;\r\n    '5xx': number;\r\n  };\r\n  resourceUsage: {\r\n    cpu: number;\r\n    memory: number;\r\n    disk: number;\r\n  };\r\n}\r\n\r\ninterface EnterpriseMetrics {\r\n  systemHealth: Record<string, SystemHealth>;\r\n  security: SecurityMetrics;\r\n  cache: CacheMetrics;\r\n  performance: PerformanceMetrics;\r\n  lastUpdated: string;\r\n}\r\n\r\n// =====================================================\r\n// FUNCIONES DE RECOLECCI\xD3N DE M\xC9TRICAS\r\n// =====================================================\r\n\r\n/**\r\n * Obtiene m\xE9tricas de salud del sistema\r\n */\r\nasync function getSystemHealthMetrics(): Promise<Record<string, SystemHealth>> {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Obtener m\xE9tricas de rate limiting\r\n    const rateLimitMetrics = metricsCollector.getMetrics();\r\n    const rateLimitHealth: SystemHealth = {\r\n      status: rateLimitMetrics.errors > 100 ? 'warning' : 'healthy',\r\n      uptime: Math.floor((Date.now() - startTime) / 1000), // Simplificado\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: rateLimitMetrics.averageResponseTime || 0,\r\n      errorRate: rateLimitMetrics.totalRequests > 0 ? \r\n        rateLimitMetrics.errors / rateLimitMetrics.totalRequests : 0\r\n    };\r\n\r\n    // Obtener m\xE9tricas de cache\r\n    const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n    const cacheKeys = Object.keys(cacheMetrics);\r\n    const avgCacheResponseTime = cacheKeys.length > 0 ?\r\n      cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length : 0;\r\n    \r\n    const cacheHealth: SystemHealth = {\r\n      status: avgCacheResponseTime > 100 ? 'warning' : 'healthy',\r\n      uptime: 2592000, // 30 d\xEDas (simplificado)\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: avgCacheResponseTime,\r\n      errorRate: cacheKeys.length > 0 ?\r\n        cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].errors, 0) / \r\n        cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits + cacheMetrics[key].misses, 1) : 0\r\n    };\r\n\r\n    // M\xE9tricas de auditor\xEDa (simuladas por ahora)\r\n    const auditHealth: SystemHealth = {\r\n      status: 'healthy',\r\n      uptime: 2592000,\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: 120,\r\n      errorRate: 0.002\r\n    };\r\n\r\n    // M\xE9tricas de validaci\xF3n (simuladas por ahora)\r\n    const validationHealth: SystemHealth = {\r\n      status: 'healthy',\r\n      uptime: 2580000,\r\n      lastCheck: new Date().toISOString(),\r\n      responseTime: 85,\r\n      errorRate: 0.015\r\n    };\r\n\r\n    return {\r\n      'Rate Limiting': rateLimitHealth,\r\n      'Cache': cacheHealth,\r\n      'Auditor\xEDa': auditHealth,\r\n      'Validaci\xF3n': validationHealth\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting system health:', error);\r\n    \r\n    // Retornar m\xE9tricas por defecto en caso de error\r\n    return {\r\n      'Rate Limiting': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Cache': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Auditor\xEDa': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      },\r\n      'Validaci\xF3n': {\r\n        status: 'unknown',\r\n        uptime: 0,\r\n        lastCheck: new Date().toISOString(),\r\n        responseTime: 0,\r\n        errorRate: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene m\xE9tricas de seguridad\r\n */\r\nasync function getSecurityMetrics(): Promise<SecurityMetrics> {\r\n  try {\r\n    // M\xE9tricas de rate limiting\r\n    const rateLimitMetrics = metricsCollector.getMetrics();\r\n    \r\n    // M\xE9tricas de auditor\xEDa (simuladas - en producci\xF3n vendr\xEDan del sistema de auditor\xEDa)\r\n    const auditingStats = {\r\n      totalEvents: 850000,\r\n      criticalEvents: 125,\r\n      anomaliesDetected: 45,\r\n      lastIncident: '2025-01-31T10:30:00Z'\r\n    };\r\n\r\n    // M\xE9tricas de validaci\xF3n (simuladas - en producci\xF3n vendr\xEDan del sistema de validaci\xF3n)\r\n    const validationStats = {\r\n      totalValidations: 2100000,\r\n      failedValidations: 31500,\r\n      attacksBlocked: 8500,\r\n      successRate: 0.985\r\n    };\r\n\r\n    return {\r\n      rateLimitingStats: {\r\n        totalRequests: rateLimitMetrics.totalRequests || 0,\r\n        blockedRequests: rateLimitMetrics.blockedRequests || 0,\r\n        allowedRequests: rateLimitMetrics.allowedRequests || 0,\r\n        topBlockedIPs: rateLimitMetrics.topBlockedIPs || [],\r\n        averageResponseTime: rateLimitMetrics.averageResponseTime || 0\r\n      },\r\n      auditingStats,\r\n      validationStats\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting security metrics:', error);\r\n    \r\n    return {\r\n      rateLimitingStats: {\r\n        totalRequests: 0,\r\n        blockedRequests: 0,\r\n        allowedRequests: 0,\r\n        topBlockedIPs: [],\r\n        averageResponseTime: 0\r\n      },\r\n      auditingStats: {\r\n        totalEvents: 0,\r\n        criticalEvents: 0,\r\n        anomaliesDetected: 0,\r\n        lastIncident: null\r\n      },\r\n      validationStats: {\r\n        totalValidations: 0,\r\n        failedValidations: 0,\r\n        attacksBlocked: 0,\r\n        successRate: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene m\xE9tricas de cache\r\n */\r\nasync function getCacheMetrics(): Promise<CacheMetrics> {\r\n  try {\r\n    const cacheMetrics = enterpriseCacheSystem.getMetrics();\r\n    const cacheKeys = Object.keys(cacheMetrics);\r\n    \r\n    if (cacheKeys.length === 0) {\r\n      return {\r\n        hitRate: 0,\r\n        totalHits: 0,\r\n        totalMisses: 0,\r\n        averageResponseTime: 0,\r\n        memoryUsage: 0,\r\n        evictions: 0,\r\n        topKeys: []\r\n      };\r\n    }\r\n\r\n    const totalHits = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].hits, 0);\r\n    const totalMisses = cacheKeys.reduce((sum, key) => sum + cacheMetrics[key].misses, 0);\r\n    const totalRequests = totalHits + totalMisses;\r\n    const hitRate = totalRequests > 0 ? totalHits / totalRequests : 0;\r\n    \r\n    const averageResponseTime = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].avgResponseTime, 0) / cacheKeys.length;\r\n    \r\n    const totalMemoryUsage = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].memoryUsage, 0);\r\n    \r\n    const totalEvictions = cacheKeys.reduce((sum, key) => \r\n      sum + cacheMetrics[key].evictions, 0);\r\n\r\n    // Top keys por hits\r\n    const topKeys = cacheKeys\r\n      .map(key => ({ key, hits: cacheMetrics[key].hits }))\r\n      .sort((a, b) => b.hits - a.hits)\r\n      .slice(0, 10);\r\n\r\n    return {\r\n      hitRate,\r\n      totalHits,\r\n      totalMisses,\r\n      averageResponseTime,\r\n      memoryUsage: totalMemoryUsage,\r\n      evictions: totalEvictions,\r\n      topKeys\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting cache metrics:', error);\r\n    \r\n    return {\r\n      hitRate: 0,\r\n      totalHits: 0,\r\n      totalMisses: 0,\r\n      averageResponseTime: 0,\r\n      memoryUsage: 0,\r\n      evictions: 0,\r\n      topKeys: []\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene m\xE9tricas de performance\r\n */\r\nasync function getPerformanceMetrics(): Promise<PerformanceMetrics> {\r\n  try {\r\n    // Obtener m\xE9tricas de MercadoPago si est\xE1n disponibles\r\n    let mercadoPagoMetrics;\r\n    try {\r\n      mercadoPagoMetrics = await metricsCollector.getMercadoPagoMetrics();\r\n    } catch (error) {\r\n      console.warn('[ENTERPRISE_METRICS] MercadoPago metrics not available:', error);\r\n      mercadoPagoMetrics = null;\r\n    }\r\n\r\n    // Calcular m\xE9tricas de performance\r\n    const apiResponseTimes = mercadoPagoMetrics ? {\r\n      p50: mercadoPagoMetrics.payment_creation.response_times.p50 || 120,\r\n      p95: mercadoPagoMetrics.payment_creation.response_times.p95 || 450,\r\n      p99: mercadoPagoMetrics.payment_creation.response_times.p99 || 850\r\n    } : {\r\n      p50: 120,\r\n      p95: 450,\r\n      p99: 850\r\n    };\r\n\r\n    const throughput = mercadoPagoMetrics ? \r\n      mercadoPagoMetrics.payment_creation.requests.total + \r\n      mercadoPagoMetrics.payment_queries.requests.total : 2500;\r\n\r\n    const errorRates = mercadoPagoMetrics ? {\r\n      '4xx': mercadoPagoMetrics.overall_health.error_rate * 0.7, // Aproximaci\xF3n\r\n      '5xx': mercadoPagoMetrics.overall_health.error_rate * 0.3\r\n    } : {\r\n      '4xx': 0.025,\r\n      '5xx': 0.008\r\n    };\r\n\r\n    // M\xE9tricas de recursos del sistema\r\n    const memoryUsage = process.memoryUsage();\r\n    const resourceUsage = {\r\n      cpu: Math.random() * 40 + 30, // Simulado - en producci\xF3n usar librer\xEDas como 'os-utils'\r\n      memory: (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100,\r\n      disk: Math.random() * 30 + 40 // Simulado\r\n    };\r\n\r\n    return {\r\n      apiResponseTimes,\r\n      throughput,\r\n      errorRates,\r\n      resourceUsage\r\n    };\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS] Error getting performance metrics:', error);\r\n    \r\n    return {\r\n      apiResponseTimes: {\r\n        p50: 0,\r\n        p95: 0,\r\n        p99: 0\r\n      },\r\n      throughput: 0,\r\n      errorRates: {\r\n        '4xx': 0,\r\n        '5xx': 0\r\n      },\r\n      resourceUsage: {\r\n        cpu: 0,\r\n        memory: 0,\r\n        disk: 0\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER PRINCIPAL\r\n// =====================================================\r\n\r\n/**\r\n * GET /api/admin/monitoring/enterprise-metrics\r\n * Obtiene m\xE9tricas completas de todos los sistemas enterprise\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'monitoring_access']);\r\n    \r\n    if (!authResult.isValid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Recopilar m\xE9tricas de todos los sistemas\r\n    const [systemHealth, security, cache, performance] = await Promise.all([\r\n      getSystemHealthMetrics(),\r\n      getSecurityMetrics(),\r\n      getCacheMetrics(),\r\n      getPerformanceMetrics()\r\n    ]);\r\n\r\n    const enterpriseMetrics: EnterpriseMetrics = {\r\n      systemHealth,\r\n      security,\r\n      cache,\r\n      performance,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n\r\n    // Registrar acceso a m\xE9tricas en auditor\xEDa\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'METRICS_ACCESS' as any,\r\n      event_category: 'monitoring',\r\n      severity: 'low' as any,\r\n      description: 'Enterprise metrics accessed',\r\n      metadata: {\r\n        metrics_types: ['system_health', 'security', 'cache', 'performance'],\r\n        access_type: 'dashboard'\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const response = {\r\n      success: true,\r\n      data: enterpriseMetrics,\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role,\r\n          permissions: context.permissions\r\n        },\r\n        metrics: {\r\n          collection_time_ms: Date.now() - new Date(enterpriseMetrics.lastUpdated).getTime(),\r\n          systems_monitored: Object.keys(systemHealth).length,\r\n          cache_keys_tracked: Object.keys(cache).length\r\n        }\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS_API] Error:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al obtener m\xE9tricas enterprise',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/monitoring/enterprise-metrics\r\n * Fuerza actualizaci\xF3n de m\xE9tricas\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n admin\r\n    const authResult = await requireAdminAuth(request, ['admin_access', 'monitoring_write']);\r\n    \r\n    if (!authResult.isValid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const context = authResult.context!;\r\n\r\n    // Forzar actualizaci\xF3n de m\xE9tricas\r\n    // En una implementaci\xF3n real, esto podr\xEDa limpiar caches, reiniciar contadores, etc.\r\n    \r\n    // Registrar acci\xF3n de actualizaci\xF3n forzada\r\n    await enterpriseAuditSystem.logEnterpriseEvent({\r\n      user_id: context.userId,\r\n      event_type: 'METRICS_REFRESH' as any,\r\n      event_category: 'monitoring',\r\n      severity: 'medium' as any,\r\n      description: 'Forced metrics refresh',\r\n      metadata: {\r\n        action: 'force_refresh',\r\n        triggered_by: 'admin_dashboard'\r\n      },\r\n      ip_address: context.ipAddress,\r\n      user_agent: context.userAgent\r\n    }, context);\r\n\r\n    const response = {\r\n      success: true,\r\n      message: 'M\xE9tricas actualizadas correctamente',\r\n      enterprise: {\r\n        requester: {\r\n          userId: context.userId,\r\n          role: context.role\r\n        },\r\n        action: 'metrics_refresh',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[ENTERPRISE_METRICS_API] Error in POST:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno al actualizar m\xE9tricas',\r\n        code: 'INTERNAL_ERROR',\r\n        enterprise: true,\r\n        timestamp: new Date().toISOString()\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "getSystemHealthMetrics", "startTime", "Date", "now", "rateLimitMetrics", "metricsCollector", "getMetrics", "rateLimitHealth", "status", "errors", "uptime", "Math", "floor", "lastCheck", "toISOString", "responseTime", "averageResponseTime", "errorRate", "totalRequests", "cacheMetrics", "enterpriseCacheSystem", "cacheKeys", "Object", "keys", "avgCacheResponseTime", "length", "reduce", "sum", "key", "avgResponseTime", "cacheHealth", "hits", "misses", "auditHealth", "validationHealth", "error", "console", "getSecurityMetrics", "auditingStats", "totalEvents", "criticalEvents", "anomaliesDetected", "lastIncident", "validationStats", "totalValidations", "failedValidations", "attacksBlocked", "successRate", "rateLimitingStats", "blockedRequests", "allowedRequests", "topBlockedIPs", "getCacheMetrics", "hitRate", "totalHits", "totalMisses", "memoryUsage", "evictions", "topKeys", "totalMemoryUsage", "totalEvictions", "map", "sort", "a", "b", "slice", "getPerformanceMetrics", "mercadoPagoMetrics", "getMercadoPagoMetrics", "warn", "apiResponseTimes", "p50", "payment_creation", "response_times", "p95", "p99", "throughput", "requests", "total", "payment_queries", "errorRates", "overall_health", "error_rate", "process", "resourceUsage", "cpu", "random", "memory", "heapUsed", "heapTotal", "disk", "request", "authResult", "requireAdminAuth", "isValid", "NextResponse", "json", "code", "enterprise", "context", "systemHealth", "security", "cache", "performance", "Promise", "all", "enterpriseMetrics", "lastUpdated", "enterpriseAuditSystem", "logEnterpriseEvent", "user_id", "userId", "event_type", "event_category", "severity", "description", "metadata", "metrics_types", "access_type", "ip_address", "ipAddress", "user_agent", "userAgent", "response", "success", "data", "requester", "role", "permissions", "metrics", "collection_time_ms", "getTime", "systems_monitored", "cache_keys_tracked", "timestamp", "action", "triggered_by", "message"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4f48421a9109dd56a73af887cd88aa51a003a935"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_qq33314ke = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_qq33314ke();
cov_qq33314ke().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_qq33314ke().f[0]++;
  cov_qq33314ke().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_qq33314ke().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_qq33314ke().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_qq33314ke().f[1]++;
    cov_qq33314ke().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_qq33314ke().f[2]++;
    cov_qq33314ke().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_qq33314ke().f[3]++;
    cov_qq33314ke().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_qq33314ke().s[7]++, require("next/server"));
const _enterpriseauthutils =
/* istanbul ignore next */
(cov_qq33314ke().s[8]++, require("../../../../../lib/auth/enterprise-auth-utils"));
const _enterpriseauditsystem =
/* istanbul ignore next */
(cov_qq33314ke().s[9]++, require("../../../../../lib/security/enterprise-audit-system"));
const _enterprisecachesystem =
/* istanbul ignore next */
(cov_qq33314ke().s[10]++, require("../../../../../lib/optimization/enterprise-cache-system"));
const _metrics =
/* istanbul ignore next */
(cov_qq33314ke().s[11]++, require("../../../../../lib/enterprise/metrics"));
const runtime =
/* istanbul ignore next */
(cov_qq33314ke().s[12]++, 'nodejs');
// =====================================================
// FUNCIONES DE RECOLECCIÃN DE MÃTRICAS
// =====================================================
/**
 * Obtiene mÃ©tricas de salud del sistema
 */
async function getSystemHealthMetrics() {
  /* istanbul ignore next */
  cov_qq33314ke().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_qq33314ke().s[13]++, Date.now());
  /* istanbul ignore next */
  cov_qq33314ke().s[14]++;
  try {
    // Obtener mÃ©tricas de rate limiting
    const rateLimitMetrics =
    /* istanbul ignore next */
    (cov_qq33314ke().s[15]++, _metrics.metricsCollector.getMetrics());
    const rateLimitHealth =
    /* istanbul ignore next */
    (cov_qq33314ke().s[16]++, {
      status: rateLimitMetrics.errors > 100 ?
      /* istanbul ignore next */
      (cov_qq33314ke().b[0][0]++, 'warning') :
      /* istanbul ignore next */
      (cov_qq33314ke().b[0][1]++, 'healthy'),
      uptime: Math.floor((Date.now() - startTime) / 1000),
      lastCheck: new Date().toISOString(),
      responseTime:
      /* istanbul ignore next */
      (cov_qq33314ke().b[1][0]++, rateLimitMetrics.averageResponseTime) ||
      /* istanbul ignore next */
      (cov_qq33314ke().b[1][1]++, 0),
      errorRate: rateLimitMetrics.totalRequests > 0 ?
      /* istanbul ignore next */
      (cov_qq33314ke().b[2][0]++, rateLimitMetrics.errors / rateLimitMetrics.totalRequests) :
      /* istanbul ignore next */
      (cov_qq33314ke().b[2][1]++, 0)
    });
    // Obtener mÃ©tricas de cache
    const cacheMetrics =
    /* istanbul ignore next */
    (cov_qq33314ke().s[17]++, _enterprisecachesystem.enterpriseCacheSystem.getMetrics());
    const cacheKeys =
    /* istanbul ignore next */
    (cov_qq33314ke().s[18]++, Object.keys(cacheMetrics));
    const avgCacheResponseTime =
    /* istanbul ignore next */
    (cov_qq33314ke().s[19]++, cacheKeys.length > 0 ?
    /* istanbul ignore next */
    (cov_qq33314ke().b[3][0]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[5]++;
      cov_qq33314ke().s[20]++;
      return sum + cacheMetrics[key].avgResponseTime;
    }, 0) / cacheKeys.length) :
    /* istanbul ignore next */
    (cov_qq33314ke().b[3][1]++, 0));
    const cacheHealth =
    /* istanbul ignore next */
    (cov_qq33314ke().s[21]++, {
      status: avgCacheResponseTime > 100 ?
      /* istanbul ignore next */
      (cov_qq33314ke().b[4][0]++, 'warning') :
      /* istanbul ignore next */
      (cov_qq33314ke().b[4][1]++, 'healthy'),
      uptime: 2592000,
      lastCheck: new Date().toISOString(),
      responseTime: avgCacheResponseTime,
      errorRate: cacheKeys.length > 0 ?
      /* istanbul ignore next */
      (cov_qq33314ke().b[5][0]++, cacheKeys.reduce((sum, key) => {
        /* istanbul ignore next */
        cov_qq33314ke().f[6]++;
        cov_qq33314ke().s[22]++;
        return sum + cacheMetrics[key].errors;
      }, 0) / cacheKeys.reduce((sum, key) => {
        /* istanbul ignore next */
        cov_qq33314ke().f[7]++;
        cov_qq33314ke().s[23]++;
        return sum + cacheMetrics[key].hits + cacheMetrics[key].misses;
      }, 1)) :
      /* istanbul ignore next */
      (cov_qq33314ke().b[5][1]++, 0)
    });
    // MÃ©tricas de auditorÃ­a (simuladas por ahora)
    const auditHealth =
    /* istanbul ignore next */
    (cov_qq33314ke().s[24]++, {
      status: 'healthy',
      uptime: 2592000,
      lastCheck: new Date().toISOString(),
      responseTime: 120,
      errorRate: 0.002
    });
    // MÃ©tricas de validaciÃ³n (simuladas por ahora)
    const validationHealth =
    /* istanbul ignore next */
    (cov_qq33314ke().s[25]++, {
      status: 'healthy',
      uptime: 2580000,
      lastCheck: new Date().toISOString(),
      responseTime: 85,
      errorRate: 0.015
    });
    /* istanbul ignore next */
    cov_qq33314ke().s[26]++;
    return {
      'Rate Limiting': rateLimitHealth,
      'Cache': cacheHealth,
      'AuditorÃ­a': auditHealth,
      'ValidaciÃ³n': validationHealth
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[27]++;
    console.error('[ENTERPRISE_METRICS] Error getting system health:', error);
    // Retornar mÃ©tricas por defecto en caso de error
    /* istanbul ignore next */
    cov_qq33314ke().s[28]++;
    return {
      'Rate Limiting': {
        status: 'unknown',
        uptime: 0,
        lastCheck: new Date().toISOString(),
        responseTime: 0,
        errorRate: 0
      },
      'Cache': {
        status: 'unknown',
        uptime: 0,
        lastCheck: new Date().toISOString(),
        responseTime: 0,
        errorRate: 0
      },
      'AuditorÃ­a': {
        status: 'unknown',
        uptime: 0,
        lastCheck: new Date().toISOString(),
        responseTime: 0,
        errorRate: 0
      },
      'ValidaciÃ³n': {
        status: 'unknown',
        uptime: 0,
        lastCheck: new Date().toISOString(),
        responseTime: 0,
        errorRate: 0
      }
    };
  }
}
/**
 * Obtiene mÃ©tricas de seguridad
 */
async function getSecurityMetrics() {
  /* istanbul ignore next */
  cov_qq33314ke().f[8]++;
  cov_qq33314ke().s[29]++;
  try {
    // MÃ©tricas de rate limiting
    const rateLimitMetrics =
    /* istanbul ignore next */
    (cov_qq33314ke().s[30]++, _metrics.metricsCollector.getMetrics());
    // MÃ©tricas de auditorÃ­a (simuladas - en producciÃ³n vendrÃ­an del sistema de auditorÃ­a)
    const auditingStats =
    /* istanbul ignore next */
    (cov_qq33314ke().s[31]++, {
      totalEvents: 850000,
      criticalEvents: 125,
      anomaliesDetected: 45,
      lastIncident: '2025-01-31T10:30:00Z'
    });
    // MÃ©tricas de validaciÃ³n (simuladas - en producciÃ³n vendrÃ­an del sistema de validaciÃ³n)
    const validationStats =
    /* istanbul ignore next */
    (cov_qq33314ke().s[32]++, {
      totalValidations: 2100000,
      failedValidations: 31500,
      attacksBlocked: 8500,
      successRate: 0.985
    });
    /* istanbul ignore next */
    cov_qq33314ke().s[33]++;
    return {
      rateLimitingStats: {
        totalRequests:
        /* istanbul ignore next */
        (cov_qq33314ke().b[6][0]++, rateLimitMetrics.totalRequests) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[6][1]++, 0),
        blockedRequests:
        /* istanbul ignore next */
        (cov_qq33314ke().b[7][0]++, rateLimitMetrics.blockedRequests) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[7][1]++, 0),
        allowedRequests:
        /* istanbul ignore next */
        (cov_qq33314ke().b[8][0]++, rateLimitMetrics.allowedRequests) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[8][1]++, 0),
        topBlockedIPs:
        /* istanbul ignore next */
        (cov_qq33314ke().b[9][0]++, rateLimitMetrics.topBlockedIPs) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[9][1]++, []),
        averageResponseTime:
        /* istanbul ignore next */
        (cov_qq33314ke().b[10][0]++, rateLimitMetrics.averageResponseTime) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[10][1]++, 0)
      },
      auditingStats,
      validationStats
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[34]++;
    console.error('[ENTERPRISE_METRICS] Error getting security metrics:', error);
    /* istanbul ignore next */
    cov_qq33314ke().s[35]++;
    return {
      rateLimitingStats: {
        totalRequests: 0,
        blockedRequests: 0,
        allowedRequests: 0,
        topBlockedIPs: [],
        averageResponseTime: 0
      },
      auditingStats: {
        totalEvents: 0,
        criticalEvents: 0,
        anomaliesDetected: 0,
        lastIncident: null
      },
      validationStats: {
        totalValidations: 0,
        failedValidations: 0,
        attacksBlocked: 0,
        successRate: 0
      }
    };
  }
}
/**
 * Obtiene mÃ©tricas de cache
 */
async function getCacheMetrics() {
  /* istanbul ignore next */
  cov_qq33314ke().f[9]++;
  cov_qq33314ke().s[36]++;
  try {
    const cacheMetrics =
    /* istanbul ignore next */
    (cov_qq33314ke().s[37]++, _enterprisecachesystem.enterpriseCacheSystem.getMetrics());
    const cacheKeys =
    /* istanbul ignore next */
    (cov_qq33314ke().s[38]++, Object.keys(cacheMetrics));
    /* istanbul ignore next */
    cov_qq33314ke().s[39]++;
    if (cacheKeys.length === 0) {
      /* istanbul ignore next */
      cov_qq33314ke().b[11][0]++;
      cov_qq33314ke().s[40]++;
      return {
        hitRate: 0,
        totalHits: 0,
        totalMisses: 0,
        averageResponseTime: 0,
        memoryUsage: 0,
        evictions: 0,
        topKeys: []
      };
    } else
    /* istanbul ignore next */
    {
      cov_qq33314ke().b[11][1]++;
    }
    const totalHits =
    /* istanbul ignore next */
    (cov_qq33314ke().s[41]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[10]++;
      cov_qq33314ke().s[42]++;
      return sum + cacheMetrics[key].hits;
    }, 0));
    const totalMisses =
    /* istanbul ignore next */
    (cov_qq33314ke().s[43]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[11]++;
      cov_qq33314ke().s[44]++;
      return sum + cacheMetrics[key].misses;
    }, 0));
    const totalRequests =
    /* istanbul ignore next */
    (cov_qq33314ke().s[45]++, totalHits + totalMisses);
    const hitRate =
    /* istanbul ignore next */
    (cov_qq33314ke().s[46]++, totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_qq33314ke().b[12][0]++, totalHits / totalRequests) :
    /* istanbul ignore next */
    (cov_qq33314ke().b[12][1]++, 0));
    const averageResponseTime =
    /* istanbul ignore next */
    (cov_qq33314ke().s[47]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[12]++;
      cov_qq33314ke().s[48]++;
      return sum + cacheMetrics[key].avgResponseTime;
    }, 0) / cacheKeys.length);
    const totalMemoryUsage =
    /* istanbul ignore next */
    (cov_qq33314ke().s[49]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[13]++;
      cov_qq33314ke().s[50]++;
      return sum + cacheMetrics[key].memoryUsage;
    }, 0));
    const totalEvictions =
    /* istanbul ignore next */
    (cov_qq33314ke().s[51]++, cacheKeys.reduce((sum, key) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[14]++;
      cov_qq33314ke().s[52]++;
      return sum + cacheMetrics[key].evictions;
    }, 0));
    // Top keys por hits
    const topKeys =
    /* istanbul ignore next */
    (cov_qq33314ke().s[53]++, cacheKeys.map(key => {
      /* istanbul ignore next */
      cov_qq33314ke().f[15]++;
      cov_qq33314ke().s[54]++;
      return {
        key,
        hits: cacheMetrics[key].hits
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_qq33314ke().f[16]++;
      cov_qq33314ke().s[55]++;
      return b.hits - a.hits;
    }).slice(0, 10));
    /* istanbul ignore next */
    cov_qq33314ke().s[56]++;
    return {
      hitRate,
      totalHits,
      totalMisses,
      averageResponseTime,
      memoryUsage: totalMemoryUsage,
      evictions: totalEvictions,
      topKeys
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[57]++;
    console.error('[ENTERPRISE_METRICS] Error getting cache metrics:', error);
    /* istanbul ignore next */
    cov_qq33314ke().s[58]++;
    return {
      hitRate: 0,
      totalHits: 0,
      totalMisses: 0,
      averageResponseTime: 0,
      memoryUsage: 0,
      evictions: 0,
      topKeys: []
    };
  }
}
/**
 * Obtiene mÃ©tricas de performance
 */
async function getPerformanceMetrics() {
  /* istanbul ignore next */
  cov_qq33314ke().f[17]++;
  cov_qq33314ke().s[59]++;
  try {
    // Obtener mÃ©tricas de MercadoPago si estÃ¡n disponibles
    let mercadoPagoMetrics;
    /* istanbul ignore next */
    cov_qq33314ke().s[60]++;
    try {
      /* istanbul ignore next */
      cov_qq33314ke().s[61]++;
      mercadoPagoMetrics = await _metrics.metricsCollector.getMercadoPagoMetrics();
    } catch (error) {
      /* istanbul ignore next */
      cov_qq33314ke().s[62]++;
      console.warn('[ENTERPRISE_METRICS] MercadoPago metrics not available:', error);
      /* istanbul ignore next */
      cov_qq33314ke().s[63]++;
      mercadoPagoMetrics = null;
    }
    // Calcular mÃ©tricas de performance
    const apiResponseTimes =
    /* istanbul ignore next */
    (cov_qq33314ke().s[64]++, mercadoPagoMetrics ?
    /* istanbul ignore next */
    (cov_qq33314ke().b[13][0]++, {
      p50:
      /* istanbul ignore next */
      (cov_qq33314ke().b[14][0]++, mercadoPagoMetrics.payment_creation.response_times.p50) ||
      /* istanbul ignore next */
      (cov_qq33314ke().b[14][1]++, 120),
      p95:
      /* istanbul ignore next */
      (cov_qq33314ke().b[15][0]++, mercadoPagoMetrics.payment_creation.response_times.p95) ||
      /* istanbul ignore next */
      (cov_qq33314ke().b[15][1]++, 450),
      p99:
      /* istanbul ignore next */
      (cov_qq33314ke().b[16][0]++, mercadoPagoMetrics.payment_creation.response_times.p99) ||
      /* istanbul ignore next */
      (cov_qq33314ke().b[16][1]++, 850)
    }) :
    /* istanbul ignore next */
    (cov_qq33314ke().b[13][1]++, {
      p50: 120,
      p95: 450,
      p99: 850
    }));
    const throughput =
    /* istanbul ignore next */
    (cov_qq33314ke().s[65]++, mercadoPagoMetrics ?
    /* istanbul ignore next */
    (cov_qq33314ke().b[17][0]++, mercadoPagoMetrics.payment_creation.requests.total + mercadoPagoMetrics.payment_queries.requests.total) :
    /* istanbul ignore next */
    (cov_qq33314ke().b[17][1]++, 2500));
    const errorRates =
    /* istanbul ignore next */
    (cov_qq33314ke().s[66]++, mercadoPagoMetrics ?
    /* istanbul ignore next */
    (cov_qq33314ke().b[18][0]++, {
      '4xx': mercadoPagoMetrics.overall_health.error_rate * 0.7,
      '5xx': mercadoPagoMetrics.overall_health.error_rate * 0.3
    }) :
    /* istanbul ignore next */
    (cov_qq33314ke().b[18][1]++, {
      '4xx': 0.025,
      '5xx': 0.008
    }));
    // MÃ©tricas de recursos del sistema
    const memoryUsage =
    /* istanbul ignore next */
    (cov_qq33314ke().s[67]++, process.memoryUsage());
    const resourceUsage =
    /* istanbul ignore next */
    (cov_qq33314ke().s[68]++, {
      cpu: Math.random() * 40 + 30,
      memory: memoryUsage.heapUsed / memoryUsage.heapTotal * 100,
      disk: Math.random() * 30 + 40 // Simulado
    });
    /* istanbul ignore next */
    cov_qq33314ke().s[69]++;
    return {
      apiResponseTimes,
      throughput,
      errorRates,
      resourceUsage
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[70]++;
    console.error('[ENTERPRISE_METRICS] Error getting performance metrics:', error);
    /* istanbul ignore next */
    cov_qq33314ke().s[71]++;
    return {
      apiResponseTimes: {
        p50: 0,
        p95: 0,
        p99: 0
      },
      throughput: 0,
      errorRates: {
        '4xx': 0,
        '5xx': 0
      },
      resourceUsage: {
        cpu: 0,
        memory: 0,
        disk: 0
      }
    };
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_qq33314ke().f[18]++;
  cov_qq33314ke().s[72]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_qq33314ke().s[73]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'monitoring_access']));
    /* istanbul ignore next */
    cov_qq33314ke().s[74]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_qq33314ke().b[19][0]++;
      cov_qq33314ke().s[75]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_qq33314ke().b[20][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[20][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_qq33314ke().b[19][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_qq33314ke().s[76]++, authResult.context);
    // Recopilar mÃ©tricas de todos los sistemas
    const [systemHealth, security, cache, performance] =
    /* istanbul ignore next */
    (cov_qq33314ke().s[77]++, await Promise.all([getSystemHealthMetrics(), getSecurityMetrics(), getCacheMetrics(), getPerformanceMetrics()]));
    const enterpriseMetrics =
    /* istanbul ignore next */
    (cov_qq33314ke().s[78]++, {
      systemHealth,
      security,
      cache,
      performance,
      lastUpdated: new Date().toISOString()
    });
    // Registrar acceso a mÃ©tricas en auditorÃ­a
    /* istanbul ignore next */
    cov_qq33314ke().s[79]++;
    await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
      user_id: context.userId,
      event_type: 'METRICS_ACCESS',
      event_category: 'monitoring',
      severity: 'low',
      description: 'Enterprise metrics accessed',
      metadata: {
        metrics_types: ['system_health', 'security', 'cache', 'performance'],
        access_type: 'dashboard'
      },
      ip_address: context.ipAddress,
      user_agent: context.userAgent
    }, context);
    const response =
    /* istanbul ignore next */
    (cov_qq33314ke().s[80]++, {
      success: true,
      data: enterpriseMetrics,
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role,
          permissions: context.permissions
        },
        metrics: {
          collection_time_ms: Date.now() - new Date(enterpriseMetrics.lastUpdated).getTime(),
          systems_monitored: Object.keys(systemHealth).length,
          cache_keys_tracked: Object.keys(cache).length
        }
      },
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_qq33314ke().s[81]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[82]++;
    console.error('[ENTERPRISE_METRICS_API] Error:', error);
    /* istanbul ignore next */
    cov_qq33314ke().s[83]++;
    return _server.NextResponse.json({
      error: 'Error interno al obtener mÃ©tricas enterprise',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_qq33314ke().f[19]++;
  cov_qq33314ke().s[84]++;
  try {
    // Verificar autenticaciÃ³n admin
    const authResult =
    /* istanbul ignore next */
    (cov_qq33314ke().s[85]++, await (0, _enterpriseauthutils.requireAdminAuth)(request, ['admin_access', 'monitoring_write']));
    /* istanbul ignore next */
    cov_qq33314ke().s[86]++;
    if (!authResult.isValid) {
      /* istanbul ignore next */
      cov_qq33314ke().b[21][0]++;
      cov_qq33314ke().s[87]++;
      return _server.NextResponse.json({
        error: authResult.error,
        code: authResult.code,
        enterprise: true
      }, {
        status:
        /* istanbul ignore next */
        (cov_qq33314ke().b[22][0]++, authResult.status) ||
        /* istanbul ignore next */
        (cov_qq33314ke().b[22][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_qq33314ke().b[21][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_qq33314ke().s[88]++, authResult.context);
    // Forzar actualizaciÃ³n de mÃ©tricas
    // En una implementaciÃ³n real, esto podrÃ­a limpiar caches, reiniciar contadores, etc.
    // Registrar acciÃ³n de actualizaciÃ³n forzada
    /* istanbul ignore next */
    cov_qq33314ke().s[89]++;
    await _enterpriseauditsystem.enterpriseAuditSystem.logEnterpriseEvent({
      user_id: context.userId,
      event_type: 'METRICS_REFRESH',
      event_category: 'monitoring',
      severity: 'medium',
      description: 'Forced metrics refresh',
      metadata: {
        action: 'force_refresh',
        triggered_by: 'admin_dashboard'
      },
      ip_address: context.ipAddress,
      user_agent: context.userAgent
    }, context);
    const response =
    /* istanbul ignore next */
    (cov_qq33314ke().s[90]++, {
      success: true,
      message: 'MÃ©tricas actualizadas correctamente',
      enterprise: {
        requester: {
          userId: context.userId,
          role: context.role
        },
        action: 'metrics_refresh',
        timestamp: new Date().toISOString()
      }
    });
    /* istanbul ignore next */
    cov_qq33314ke().s[91]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_qq33314ke().s[92]++;
    console.error('[ENTERPRISE_METRICS_API] Error in POST:', error);
    /* istanbul ignore next */
    cov_qq33314ke().s[93]++;
    return _server.NextResponse.json({
      error: 'Error interno al actualizar mÃ©tricas',
      code: 'INTERNAL_ERROR',
      enterprise: true,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcXEzMzMxNGtlIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwiZiIsIlBPU1QiLCJydW50aW1lIiwiZ2V0U3lzdGVtSGVhbHRoTWV0cmljcyIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJyYXRlTGltaXRNZXRyaWNzIiwiX21ldHJpY3MiLCJtZXRyaWNzQ29sbGVjdG9yIiwiZ2V0TWV0cmljcyIsInJhdGVMaW1pdEhlYWx0aCIsInN0YXR1cyIsImVycm9ycyIsImIiLCJ1cHRpbWUiLCJNYXRoIiwiZmxvb3IiLCJsYXN0Q2hlY2siLCJ0b0lTT1N0cmluZyIsInJlc3BvbnNlVGltZSIsImF2ZXJhZ2VSZXNwb25zZVRpbWUiLCJlcnJvclJhdGUiLCJ0b3RhbFJlcXVlc3RzIiwiY2FjaGVNZXRyaWNzIiwiX2VudGVycHJpc2VjYWNoZXN5c3RlbSIsImVudGVycHJpc2VDYWNoZVN5c3RlbSIsImNhY2hlS2V5cyIsIk9iamVjdCIsImtleXMiLCJhdmdDYWNoZVJlc3BvbnNlVGltZSIsImxlbmd0aCIsInJlZHVjZSIsInN1bSIsImtleSIsImF2Z1Jlc3BvbnNlVGltZSIsImNhY2hlSGVhbHRoIiwiaGl0cyIsIm1pc3NlcyIsImF1ZGl0SGVhbHRoIiwidmFsaWRhdGlvbkhlYWx0aCIsImVycm9yIiwiY29uc29sZSIsImdldFNlY3VyaXR5TWV0cmljcyIsImF1ZGl0aW5nU3RhdHMiLCJ0b3RhbEV2ZW50cyIsImNyaXRpY2FsRXZlbnRzIiwiYW5vbWFsaWVzRGV0ZWN0ZWQiLCJsYXN0SW5jaWRlbnQiLCJ2YWxpZGF0aW9uU3RhdHMiLCJ0b3RhbFZhbGlkYXRpb25zIiwiZmFpbGVkVmFsaWRhdGlvbnMiLCJhdHRhY2tzQmxvY2tlZCIsInN1Y2Nlc3NSYXRlIiwicmF0ZUxpbWl0aW5nU3RhdHMiLCJibG9ja2VkUmVxdWVzdHMiLCJhbGxvd2VkUmVxdWVzdHMiLCJ0b3BCbG9ja2VkSVBzIiwiZ2V0Q2FjaGVNZXRyaWNzIiwiaGl0UmF0ZSIsInRvdGFsSGl0cyIsInRvdGFsTWlzc2VzIiwibWVtb3J5VXNhZ2UiLCJldmljdGlvbnMiLCJ0b3BLZXlzIiwidG90YWxNZW1vcnlVc2FnZSIsInRvdGFsRXZpY3Rpb25zIiwibWFwIiwic29ydCIsImEiLCJzbGljZSIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsIm1lcmNhZG9QYWdvTWV0cmljcyIsImdldE1lcmNhZG9QYWdvTWV0cmljcyIsIndhcm4iLCJhcGlSZXNwb25zZVRpbWVzIiwicDUwIiwicGF5bWVudF9jcmVhdGlvbiIsInJlc3BvbnNlX3RpbWVzIiwicDk1IiwicDk5IiwidGhyb3VnaHB1dCIsInJlcXVlc3RzIiwidG90YWwiLCJwYXltZW50X3F1ZXJpZXMiLCJlcnJvclJhdGVzIiwib3ZlcmFsbF9oZWFsdGgiLCJlcnJvcl9yYXRlIiwicHJvY2VzcyIsInJlc291cmNlVXNhZ2UiLCJjcHUiLCJyYW5kb20iLCJtZW1vcnkiLCJoZWFwVXNlZCIsImhlYXBUb3RhbCIsImRpc2siLCJyZXF1ZXN0IiwiYXV0aFJlc3VsdCIsIl9lbnRlcnByaXNlYXV0aHV0aWxzIiwicmVxdWlyZUFkbWluQXV0aCIsImlzVmFsaWQiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImNvZGUiLCJlbnRlcnByaXNlIiwiY29udGV4dCIsInN5c3RlbUhlYWx0aCIsInNlY3VyaXR5IiwiY2FjaGUiLCJwZXJmb3JtYW5jZSIsIlByb21pc2UiLCJhbGwiLCJlbnRlcnByaXNlTWV0cmljcyIsImxhc3RVcGRhdGVkIiwiX2VudGVycHJpc2VhdWRpdHN5c3RlbSIsImVudGVycHJpc2VBdWRpdFN5c3RlbSIsImxvZ0VudGVycHJpc2VFdmVudCIsInVzZXJfaWQiLCJ1c2VySWQiLCJldmVudF90eXBlIiwiZXZlbnRfY2F0ZWdvcnkiLCJzZXZlcml0eSIsImRlc2NyaXB0aW9uIiwibWV0YWRhdGEiLCJtZXRyaWNzX3R5cGVzIiwiYWNjZXNzX3R5cGUiLCJpcF9hZGRyZXNzIiwiaXBBZGRyZXNzIiwidXNlcl9hZ2VudCIsInVzZXJBZ2VudCIsInJlc3BvbnNlIiwic3VjY2VzcyIsImRhdGEiLCJyZXF1ZXN0ZXIiLCJyb2xlIiwicGVybWlzc2lvbnMiLCJtZXRyaWNzIiwiY29sbGVjdGlvbl90aW1lX21zIiwiZ2V0VGltZSIsInN5c3RlbXNfbW9uaXRvcmVkIiwiY2FjaGVfa2V5c190cmFja2VkIiwidGltZXN0YW1wIiwiYWN0aW9uIiwidHJpZ2dlcmVkX2J5IiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXGFkbWluXFxtb25pdG9yaW5nXFxlbnRlcnByaXNlLW1ldHJpY3NcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZ3VyYWNpw7NuIHBhcmEgTm9kZS5qcyBSdW50aW1lXHJcbmV4cG9ydCBjb25zdCBydW50aW1lID0gJ25vZGVqcyc7XHJcblxyXG4vKipcclxuICogQVBJIGRlIE3DqXRyaWNhcyBFbnRlcnByaXNlXHJcbiAqIFByb3BvcmNpb25hIG3DqXRyaWNhcyBjb21wbGV0YXMgZGUgdG9kb3MgbG9zIHNpc3RlbWFzIGVudGVycHJpc2VcclxuICovXHJcblxyXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyByZXF1aXJlQWRtaW5BdXRoIH0gZnJvbSAnQC9saWIvYXV0aC9lbnRlcnByaXNlLWF1dGgtdXRpbHMnO1xyXG5pbXBvcnQgeyBlbnRlcnByaXNlQXVkaXRTeXN0ZW0gfSBmcm9tICdAL2xpYi9zZWN1cml0eS9lbnRlcnByaXNlLWF1ZGl0LXN5c3RlbSc7XHJcbmltcG9ydCB7IGVudGVycHJpc2VDYWNoZVN5c3RlbSB9IGZyb20gJ0AvbGliL29wdGltaXphdGlvbi9lbnRlcnByaXNlLWNhY2hlLXN5c3RlbSc7XHJcbmltcG9ydCB7IG1ldHJpY3NDb2xsZWN0b3IgfSBmcm9tICdAL2xpYi9lbnRlcnByaXNlL21ldHJpY3MnO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gVElQT1MgRSBJTlRFUkZBQ0VTXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbnRlcmZhY2UgU3lzdGVtSGVhbHRoIHtcclxuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCcgfCAndW5rbm93bic7XHJcbiAgdXB0aW1lOiBudW1iZXI7XHJcbiAgbGFzdENoZWNrOiBzdHJpbmc7XHJcbiAgcmVzcG9uc2VUaW1lOiBudW1iZXI7XHJcbiAgZXJyb3JSYXRlOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTZWN1cml0eU1ldHJpY3Mge1xyXG4gIHJhdGVMaW1pdGluZ1N0YXRzOiB7XHJcbiAgICB0b3RhbFJlcXVlc3RzOiBudW1iZXI7XHJcbiAgICBibG9ja2VkUmVxdWVzdHM6IG51bWJlcjtcclxuICAgIGFsbG93ZWRSZXF1ZXN0czogbnVtYmVyO1xyXG4gICAgdG9wQmxvY2tlZElQczogQXJyYXk8eyBpcDogc3RyaW5nOyBjb3VudDogbnVtYmVyIH0+O1xyXG4gICAgYXZlcmFnZVJlc3BvbnNlVGltZTogbnVtYmVyO1xyXG4gIH07XHJcbiAgYXVkaXRpbmdTdGF0czoge1xyXG4gICAgdG90YWxFdmVudHM6IG51bWJlcjtcclxuICAgIGNyaXRpY2FsRXZlbnRzOiBudW1iZXI7XHJcbiAgICBhbm9tYWxpZXNEZXRlY3RlZDogbnVtYmVyO1xyXG4gICAgbGFzdEluY2lkZW50OiBzdHJpbmcgfCBudWxsO1xyXG4gIH07XHJcbiAgdmFsaWRhdGlvblN0YXRzOiB7XHJcbiAgICB0b3RhbFZhbGlkYXRpb25zOiBudW1iZXI7XHJcbiAgICBmYWlsZWRWYWxpZGF0aW9uczogbnVtYmVyO1xyXG4gICAgYXR0YWNrc0Jsb2NrZWQ6IG51bWJlcjtcclxuICAgIHN1Y2Nlc3NSYXRlOiBudW1iZXI7XHJcbiAgfTtcclxufVxyXG5cclxuaW50ZXJmYWNlIENhY2hlTWV0cmljcyB7XHJcbiAgaGl0UmF0ZTogbnVtYmVyO1xyXG4gIHRvdGFsSGl0czogbnVtYmVyO1xyXG4gIHRvdGFsTWlzc2VzOiBudW1iZXI7XHJcbiAgYXZlcmFnZVJlc3BvbnNlVGltZTogbnVtYmVyO1xyXG4gIG1lbW9yeVVzYWdlOiBudW1iZXI7XHJcbiAgZXZpY3Rpb25zOiBudW1iZXI7XHJcbiAgdG9wS2V5czogQXJyYXk8eyBrZXk6IHN0cmluZzsgaGl0czogbnVtYmVyIH0+O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUGVyZm9ybWFuY2VNZXRyaWNzIHtcclxuICBhcGlSZXNwb25zZVRpbWVzOiB7XHJcbiAgICBwNTA6IG51bWJlcjtcclxuICAgIHA5NTogbnVtYmVyO1xyXG4gICAgcDk5OiBudW1iZXI7XHJcbiAgfTtcclxuICB0aHJvdWdocHV0OiBudW1iZXI7XHJcbiAgZXJyb3JSYXRlczoge1xyXG4gICAgJzR4eCc6IG51bWJlcjtcclxuICAgICc1eHgnOiBudW1iZXI7XHJcbiAgfTtcclxuICByZXNvdXJjZVVzYWdlOiB7XHJcbiAgICBjcHU6IG51bWJlcjtcclxuICAgIG1lbW9yeTogbnVtYmVyO1xyXG4gICAgZGlzazogbnVtYmVyO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBFbnRlcnByaXNlTWV0cmljcyB7XHJcbiAgc3lzdGVtSGVhbHRoOiBSZWNvcmQ8c3RyaW5nLCBTeXN0ZW1IZWFsdGg+O1xyXG4gIHNlY3VyaXR5OiBTZWN1cml0eU1ldHJpY3M7XHJcbiAgY2FjaGU6IENhY2hlTWV0cmljcztcclxuICBwZXJmb3JtYW5jZTogUGVyZm9ybWFuY2VNZXRyaWNzO1xyXG4gIGxhc3RVcGRhdGVkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEZVTkNJT05FUyBERSBSRUNPTEVDQ0nDk04gREUgTcOJVFJJQ0FTXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKipcclxuICogT2J0aWVuZSBtw6l0cmljYXMgZGUgc2FsdWQgZGVsIHNpc3RlbWFcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFN5c3RlbUhlYWx0aE1ldHJpY3MoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBTeXN0ZW1IZWFsdGg+PiB7XHJcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICBcclxuICB0cnkge1xyXG4gICAgLy8gT2J0ZW5lciBtw6l0cmljYXMgZGUgcmF0ZSBsaW1pdGluZ1xyXG4gICAgY29uc3QgcmF0ZUxpbWl0TWV0cmljcyA9IG1ldHJpY3NDb2xsZWN0b3IuZ2V0TWV0cmljcygpO1xyXG4gICAgY29uc3QgcmF0ZUxpbWl0SGVhbHRoOiBTeXN0ZW1IZWFsdGggPSB7XHJcbiAgICAgIHN0YXR1czogcmF0ZUxpbWl0TWV0cmljcy5lcnJvcnMgPiAxMDAgPyAnd2FybmluZycgOiAnaGVhbHRoeScsXHJcbiAgICAgIHVwdGltZTogTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSkgLyAxMDAwKSwgLy8gU2ltcGxpZmljYWRvXHJcbiAgICAgIGxhc3RDaGVjazogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICByZXNwb25zZVRpbWU6IHJhdGVMaW1pdE1ldHJpY3MuYXZlcmFnZVJlc3BvbnNlVGltZSB8fCAwLFxyXG4gICAgICBlcnJvclJhdGU6IHJhdGVMaW1pdE1ldHJpY3MudG90YWxSZXF1ZXN0cyA+IDAgPyBcclxuICAgICAgICByYXRlTGltaXRNZXRyaWNzLmVycm9ycyAvIHJhdGVMaW1pdE1ldHJpY3MudG90YWxSZXF1ZXN0cyA6IDBcclxuICAgIH07XHJcblxyXG4gICAgLy8gT2J0ZW5lciBtw6l0cmljYXMgZGUgY2FjaGVcclxuICAgIGNvbnN0IGNhY2hlTWV0cmljcyA9IGVudGVycHJpc2VDYWNoZVN5c3RlbS5nZXRNZXRyaWNzKCk7XHJcbiAgICBjb25zdCBjYWNoZUtleXMgPSBPYmplY3Qua2V5cyhjYWNoZU1ldHJpY3MpO1xyXG4gICAgY29uc3QgYXZnQ2FjaGVSZXNwb25zZVRpbWUgPSBjYWNoZUtleXMubGVuZ3RoID4gMCA/XHJcbiAgICAgIGNhY2hlS2V5cy5yZWR1Y2UoKHN1bSwga2V5KSA9PiBzdW0gKyBjYWNoZU1ldHJpY3Nba2V5XS5hdmdSZXNwb25zZVRpbWUsIDApIC8gY2FjaGVLZXlzLmxlbmd0aCA6IDA7XHJcbiAgICBcclxuICAgIGNvbnN0IGNhY2hlSGVhbHRoOiBTeXN0ZW1IZWFsdGggPSB7XHJcbiAgICAgIHN0YXR1czogYXZnQ2FjaGVSZXNwb25zZVRpbWUgPiAxMDAgPyAnd2FybmluZycgOiAnaGVhbHRoeScsXHJcbiAgICAgIHVwdGltZTogMjU5MjAwMCwgLy8gMzAgZMOtYXMgKHNpbXBsaWZpY2FkbylcclxuICAgICAgbGFzdENoZWNrOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIHJlc3BvbnNlVGltZTogYXZnQ2FjaGVSZXNwb25zZVRpbWUsXHJcbiAgICAgIGVycm9yUmF0ZTogY2FjaGVLZXlzLmxlbmd0aCA+IDAgP1xyXG4gICAgICAgIGNhY2hlS2V5cy5yZWR1Y2UoKHN1bSwga2V5KSA9PiBzdW0gKyBjYWNoZU1ldHJpY3Nba2V5XS5lcnJvcnMsIDApIC8gXHJcbiAgICAgICAgY2FjaGVLZXlzLnJlZHVjZSgoc3VtLCBrZXkpID0+IHN1bSArIGNhY2hlTWV0cmljc1trZXldLmhpdHMgKyBjYWNoZU1ldHJpY3Nba2V5XS5taXNzZXMsIDEpIDogMFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNw6l0cmljYXMgZGUgYXVkaXRvcsOtYSAoc2ltdWxhZGFzIHBvciBhaG9yYSlcclxuICAgIGNvbnN0IGF1ZGl0SGVhbHRoOiBTeXN0ZW1IZWFsdGggPSB7XHJcbiAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxyXG4gICAgICB1cHRpbWU6IDI1OTIwMDAsXHJcbiAgICAgIGxhc3RDaGVjazogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICByZXNwb25zZVRpbWU6IDEyMCxcclxuICAgICAgZXJyb3JSYXRlOiAwLjAwMlxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNw6l0cmljYXMgZGUgdmFsaWRhY2nDs24gKHNpbXVsYWRhcyBwb3IgYWhvcmEpXHJcbiAgICBjb25zdCB2YWxpZGF0aW9uSGVhbHRoOiBTeXN0ZW1IZWFsdGggPSB7XHJcbiAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxyXG4gICAgICB1cHRpbWU6IDI1ODAwMDAsXHJcbiAgICAgIGxhc3RDaGVjazogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICByZXNwb25zZVRpbWU6IDg1LFxyXG4gICAgICBlcnJvclJhdGU6IDAuMDE1XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICdSYXRlIExpbWl0aW5nJzogcmF0ZUxpbWl0SGVhbHRoLFxyXG4gICAgICAnQ2FjaGUnOiBjYWNoZUhlYWx0aCxcclxuICAgICAgJ0F1ZGl0b3LDrWEnOiBhdWRpdEhlYWx0aCxcclxuICAgICAgJ1ZhbGlkYWNpw7NuJzogdmFsaWRhdGlvbkhlYWx0aFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignW0VOVEVSUFJJU0VfTUVUUklDU10gRXJyb3IgZ2V0dGluZyBzeXN0ZW0gaGVhbHRoOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgLy8gUmV0b3JuYXIgbcOpdHJpY2FzIHBvciBkZWZlY3RvIGVuIGNhc28gZGUgZXJyb3JcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdSYXRlIExpbWl0aW5nJzoge1xyXG4gICAgICAgIHN0YXR1czogJ3Vua25vd24nLFxyXG4gICAgICAgIHVwdGltZTogMCxcclxuICAgICAgICBsYXN0Q2hlY2s6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICByZXNwb25zZVRpbWU6IDAsXHJcbiAgICAgICAgZXJyb3JSYXRlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgICdDYWNoZSc6IHtcclxuICAgICAgICBzdGF0dXM6ICd1bmtub3duJyxcclxuICAgICAgICB1cHRpbWU6IDAsXHJcbiAgICAgICAgbGFzdENoZWNrOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgcmVzcG9uc2VUaW1lOiAwLFxyXG4gICAgICAgIGVycm9yUmF0ZTogMFxyXG4gICAgICB9LFxyXG4gICAgICAnQXVkaXRvcsOtYSc6IHtcclxuICAgICAgICBzdGF0dXM6ICd1bmtub3duJyxcclxuICAgICAgICB1cHRpbWU6IDAsXHJcbiAgICAgICAgbGFzdENoZWNrOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgcmVzcG9uc2VUaW1lOiAwLFxyXG4gICAgICAgIGVycm9yUmF0ZTogMFxyXG4gICAgICB9LFxyXG4gICAgICAnVmFsaWRhY2nDs24nOiB7XHJcbiAgICAgICAgc3RhdHVzOiAndW5rbm93bicsXHJcbiAgICAgICAgdXB0aW1lOiAwLFxyXG4gICAgICAgIGxhc3RDaGVjazogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgIHJlc3BvbnNlVGltZTogMCxcclxuICAgICAgICBlcnJvclJhdGU6IDBcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYnRpZW5lIG3DqXRyaWNhcyBkZSBzZWd1cmlkYWRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFNlY3VyaXR5TWV0cmljcygpOiBQcm9taXNlPFNlY3VyaXR5TWV0cmljcz4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBNw6l0cmljYXMgZGUgcmF0ZSBsaW1pdGluZ1xyXG4gICAgY29uc3QgcmF0ZUxpbWl0TWV0cmljcyA9IG1ldHJpY3NDb2xsZWN0b3IuZ2V0TWV0cmljcygpO1xyXG4gICAgXHJcbiAgICAvLyBNw6l0cmljYXMgZGUgYXVkaXRvcsOtYSAoc2ltdWxhZGFzIC0gZW4gcHJvZHVjY2nDs24gdmVuZHLDrWFuIGRlbCBzaXN0ZW1hIGRlIGF1ZGl0b3LDrWEpXHJcbiAgICBjb25zdCBhdWRpdGluZ1N0YXRzID0ge1xyXG4gICAgICB0b3RhbEV2ZW50czogODUwMDAwLFxyXG4gICAgICBjcml0aWNhbEV2ZW50czogMTI1LFxyXG4gICAgICBhbm9tYWxpZXNEZXRlY3RlZDogNDUsXHJcbiAgICAgIGxhc3RJbmNpZGVudDogJzIwMjUtMDEtMzFUMTA6MzA6MDBaJ1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNw6l0cmljYXMgZGUgdmFsaWRhY2nDs24gKHNpbXVsYWRhcyAtIGVuIHByb2R1Y2Npw7NuIHZlbmRyw61hbiBkZWwgc2lzdGVtYSBkZSB2YWxpZGFjacOzbilcclxuICAgIGNvbnN0IHZhbGlkYXRpb25TdGF0cyA9IHtcclxuICAgICAgdG90YWxWYWxpZGF0aW9uczogMjEwMDAwMCxcclxuICAgICAgZmFpbGVkVmFsaWRhdGlvbnM6IDMxNTAwLFxyXG4gICAgICBhdHRhY2tzQmxvY2tlZDogODUwMCxcclxuICAgICAgc3VjY2Vzc1JhdGU6IDAuOTg1XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJhdGVMaW1pdGluZ1N0YXRzOiB7XHJcbiAgICAgICAgdG90YWxSZXF1ZXN0czogcmF0ZUxpbWl0TWV0cmljcy50b3RhbFJlcXVlc3RzIHx8IDAsXHJcbiAgICAgICAgYmxvY2tlZFJlcXVlc3RzOiByYXRlTGltaXRNZXRyaWNzLmJsb2NrZWRSZXF1ZXN0cyB8fCAwLFxyXG4gICAgICAgIGFsbG93ZWRSZXF1ZXN0czogcmF0ZUxpbWl0TWV0cmljcy5hbGxvd2VkUmVxdWVzdHMgfHwgMCxcclxuICAgICAgICB0b3BCbG9ja2VkSVBzOiByYXRlTGltaXRNZXRyaWNzLnRvcEJsb2NrZWRJUHMgfHwgW10sXHJcbiAgICAgICAgYXZlcmFnZVJlc3BvbnNlVGltZTogcmF0ZUxpbWl0TWV0cmljcy5hdmVyYWdlUmVzcG9uc2VUaW1lIHx8IDBcclxuICAgICAgfSxcclxuICAgICAgYXVkaXRpbmdTdGF0cyxcclxuICAgICAgdmFsaWRhdGlvblN0YXRzXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9NRVRSSUNTXSBFcnJvciBnZXR0aW5nIHNlY3VyaXR5IG1ldHJpY3M6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByYXRlTGltaXRpbmdTdGF0czoge1xyXG4gICAgICAgIHRvdGFsUmVxdWVzdHM6IDAsXHJcbiAgICAgICAgYmxvY2tlZFJlcXVlc3RzOiAwLFxyXG4gICAgICAgIGFsbG93ZWRSZXF1ZXN0czogMCxcclxuICAgICAgICB0b3BCbG9ja2VkSVBzOiBbXSxcclxuICAgICAgICBhdmVyYWdlUmVzcG9uc2VUaW1lOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGF1ZGl0aW5nU3RhdHM6IHtcclxuICAgICAgICB0b3RhbEV2ZW50czogMCxcclxuICAgICAgICBjcml0aWNhbEV2ZW50czogMCxcclxuICAgICAgICBhbm9tYWxpZXNEZXRlY3RlZDogMCxcclxuICAgICAgICBsYXN0SW5jaWRlbnQ6IG51bGxcclxuICAgICAgfSxcclxuICAgICAgdmFsaWRhdGlvblN0YXRzOiB7XHJcbiAgICAgICAgdG90YWxWYWxpZGF0aW9uczogMCxcclxuICAgICAgICBmYWlsZWRWYWxpZGF0aW9uczogMCxcclxuICAgICAgICBhdHRhY2tzQmxvY2tlZDogMCxcclxuICAgICAgICBzdWNjZXNzUmF0ZTogMFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE9idGllbmUgbcOpdHJpY2FzIGRlIGNhY2hlXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRDYWNoZU1ldHJpY3MoKTogUHJvbWlzZTxDYWNoZU1ldHJpY3M+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgY2FjaGVNZXRyaWNzID0gZW50ZXJwcmlzZUNhY2hlU3lzdGVtLmdldE1ldHJpY3MoKTtcclxuICAgIGNvbnN0IGNhY2hlS2V5cyA9IE9iamVjdC5rZXlzKGNhY2hlTWV0cmljcyk7XHJcbiAgICBcclxuICAgIGlmIChjYWNoZUtleXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaGl0UmF0ZTogMCxcclxuICAgICAgICB0b3RhbEhpdHM6IDAsXHJcbiAgICAgICAgdG90YWxNaXNzZXM6IDAsXHJcbiAgICAgICAgYXZlcmFnZVJlc3BvbnNlVGltZTogMCxcclxuICAgICAgICBtZW1vcnlVc2FnZTogMCxcclxuICAgICAgICBldmljdGlvbnM6IDAsXHJcbiAgICAgICAgdG9wS2V5czogW11cclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0b3RhbEhpdHMgPSBjYWNoZUtleXMucmVkdWNlKChzdW0sIGtleSkgPT4gc3VtICsgY2FjaGVNZXRyaWNzW2tleV0uaGl0cywgMCk7XHJcbiAgICBjb25zdCB0b3RhbE1pc3NlcyA9IGNhY2hlS2V5cy5yZWR1Y2UoKHN1bSwga2V5KSA9PiBzdW0gKyBjYWNoZU1ldHJpY3Nba2V5XS5taXNzZXMsIDApO1xyXG4gICAgY29uc3QgdG90YWxSZXF1ZXN0cyA9IHRvdGFsSGl0cyArIHRvdGFsTWlzc2VzO1xyXG4gICAgY29uc3QgaGl0UmF0ZSA9IHRvdGFsUmVxdWVzdHMgPiAwID8gdG90YWxIaXRzIC8gdG90YWxSZXF1ZXN0cyA6IDA7XHJcbiAgICBcclxuICAgIGNvbnN0IGF2ZXJhZ2VSZXNwb25zZVRpbWUgPSBjYWNoZUtleXMucmVkdWNlKChzdW0sIGtleSkgPT4gXHJcbiAgICAgIHN1bSArIGNhY2hlTWV0cmljc1trZXldLmF2Z1Jlc3BvbnNlVGltZSwgMCkgLyBjYWNoZUtleXMubGVuZ3RoO1xyXG4gICAgXHJcbiAgICBjb25zdCB0b3RhbE1lbW9yeVVzYWdlID0gY2FjaGVLZXlzLnJlZHVjZSgoc3VtLCBrZXkpID0+IFxyXG4gICAgICBzdW0gKyBjYWNoZU1ldHJpY3Nba2V5XS5tZW1vcnlVc2FnZSwgMCk7XHJcbiAgICBcclxuICAgIGNvbnN0IHRvdGFsRXZpY3Rpb25zID0gY2FjaGVLZXlzLnJlZHVjZSgoc3VtLCBrZXkpID0+IFxyXG4gICAgICBzdW0gKyBjYWNoZU1ldHJpY3Nba2V5XS5ldmljdGlvbnMsIDApO1xyXG5cclxuICAgIC8vIFRvcCBrZXlzIHBvciBoaXRzXHJcbiAgICBjb25zdCB0b3BLZXlzID0gY2FjaGVLZXlzXHJcbiAgICAgIC5tYXAoa2V5ID0+ICh7IGtleSwgaGl0czogY2FjaGVNZXRyaWNzW2tleV0uaGl0cyB9KSlcclxuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuaGl0cyAtIGEuaGl0cylcclxuICAgICAgLnNsaWNlKDAsIDEwKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoaXRSYXRlLFxyXG4gICAgICB0b3RhbEhpdHMsXHJcbiAgICAgIHRvdGFsTWlzc2VzLFxyXG4gICAgICBhdmVyYWdlUmVzcG9uc2VUaW1lLFxyXG4gICAgICBtZW1vcnlVc2FnZTogdG90YWxNZW1vcnlVc2FnZSxcclxuICAgICAgZXZpY3Rpb25zOiB0b3RhbEV2aWN0aW9ucyxcclxuICAgICAgdG9wS2V5c1xyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignW0VOVEVSUFJJU0VfTUVUUklDU10gRXJyb3IgZ2V0dGluZyBjYWNoZSBtZXRyaWNzOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaGl0UmF0ZTogMCxcclxuICAgICAgdG90YWxIaXRzOiAwLFxyXG4gICAgICB0b3RhbE1pc3NlczogMCxcclxuICAgICAgYXZlcmFnZVJlc3BvbnNlVGltZTogMCxcclxuICAgICAgbWVtb3J5VXNhZ2U6IDAsXHJcbiAgICAgIGV2aWN0aW9uczogMCxcclxuICAgICAgdG9wS2V5czogW11cclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogT2J0aWVuZSBtw6l0cmljYXMgZGUgcGVyZm9ybWFuY2VcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFBlcmZvcm1hbmNlTWV0cmljcygpOiBQcm9taXNlPFBlcmZvcm1hbmNlTWV0cmljcz4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBPYnRlbmVyIG3DqXRyaWNhcyBkZSBNZXJjYWRvUGFnbyBzaSBlc3TDoW4gZGlzcG9uaWJsZXNcclxuICAgIGxldCBtZXJjYWRvUGFnb01ldHJpY3M7XHJcbiAgICB0cnkge1xyXG4gICAgICBtZXJjYWRvUGFnb01ldHJpY3MgPSBhd2FpdCBtZXRyaWNzQ29sbGVjdG9yLmdldE1lcmNhZG9QYWdvTWV0cmljcygpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdbRU5URVJQUklTRV9NRVRSSUNTXSBNZXJjYWRvUGFnbyBtZXRyaWNzIG5vdCBhdmFpbGFibGU6JywgZXJyb3IpO1xyXG4gICAgICBtZXJjYWRvUGFnb01ldHJpY3MgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGN1bGFyIG3DqXRyaWNhcyBkZSBwZXJmb3JtYW5jZVxyXG4gICAgY29uc3QgYXBpUmVzcG9uc2VUaW1lcyA9IG1lcmNhZG9QYWdvTWV0cmljcyA/IHtcclxuICAgICAgcDUwOiBtZXJjYWRvUGFnb01ldHJpY3MucGF5bWVudF9jcmVhdGlvbi5yZXNwb25zZV90aW1lcy5wNTAgfHwgMTIwLFxyXG4gICAgICBwOTU6IG1lcmNhZG9QYWdvTWV0cmljcy5wYXltZW50X2NyZWF0aW9uLnJlc3BvbnNlX3RpbWVzLnA5NSB8fCA0NTAsXHJcbiAgICAgIHA5OTogbWVyY2Fkb1BhZ29NZXRyaWNzLnBheW1lbnRfY3JlYXRpb24ucmVzcG9uc2VfdGltZXMucDk5IHx8IDg1MFxyXG4gICAgfSA6IHtcclxuICAgICAgcDUwOiAxMjAsXHJcbiAgICAgIHA5NTogNDUwLFxyXG4gICAgICBwOTk6IDg1MFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0aHJvdWdocHV0ID0gbWVyY2Fkb1BhZ29NZXRyaWNzID8gXHJcbiAgICAgIG1lcmNhZG9QYWdvTWV0cmljcy5wYXltZW50X2NyZWF0aW9uLnJlcXVlc3RzLnRvdGFsICsgXHJcbiAgICAgIG1lcmNhZG9QYWdvTWV0cmljcy5wYXltZW50X3F1ZXJpZXMucmVxdWVzdHMudG90YWwgOiAyNTAwO1xyXG5cclxuICAgIGNvbnN0IGVycm9yUmF0ZXMgPSBtZXJjYWRvUGFnb01ldHJpY3MgPyB7XHJcbiAgICAgICc0eHgnOiBtZXJjYWRvUGFnb01ldHJpY3Mub3ZlcmFsbF9oZWFsdGguZXJyb3JfcmF0ZSAqIDAuNywgLy8gQXByb3hpbWFjacOzblxyXG4gICAgICAnNXh4JzogbWVyY2Fkb1BhZ29NZXRyaWNzLm92ZXJhbGxfaGVhbHRoLmVycm9yX3JhdGUgKiAwLjNcclxuICAgIH0gOiB7XHJcbiAgICAgICc0eHgnOiAwLjAyNSxcclxuICAgICAgJzV4eCc6IDAuMDA4XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE3DqXRyaWNhcyBkZSByZWN1cnNvcyBkZWwgc2lzdGVtYVxyXG4gICAgY29uc3QgbWVtb3J5VXNhZ2UgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XHJcbiAgICBjb25zdCByZXNvdXJjZVVzYWdlID0ge1xyXG4gICAgICBjcHU6IE1hdGgucmFuZG9tKCkgKiA0MCArIDMwLCAvLyBTaW11bGFkbyAtIGVuIHByb2R1Y2Npw7NuIHVzYXIgbGlicmVyw61hcyBjb21vICdvcy11dGlscydcclxuICAgICAgbWVtb3J5OiAobWVtb3J5VXNhZ2UuaGVhcFVzZWQgLyBtZW1vcnlVc2FnZS5oZWFwVG90YWwpICogMTAwLFxyXG4gICAgICBkaXNrOiBNYXRoLnJhbmRvbSgpICogMzAgKyA0MCAvLyBTaW11bGFkb1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhcGlSZXNwb25zZVRpbWVzLFxyXG4gICAgICB0aHJvdWdocHV0LFxyXG4gICAgICBlcnJvclJhdGVzLFxyXG4gICAgICByZXNvdXJjZVVzYWdlXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdbRU5URVJQUklTRV9NRVRSSUNTXSBFcnJvciBnZXR0aW5nIHBlcmZvcm1hbmNlIG1ldHJpY3M6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhcGlSZXNwb25zZVRpbWVzOiB7XHJcbiAgICAgICAgcDUwOiAwLFxyXG4gICAgICAgIHA5NTogMCxcclxuICAgICAgICBwOTk6IDBcclxuICAgICAgfSxcclxuICAgICAgdGhyb3VnaHB1dDogMCxcclxuICAgICAgZXJyb3JSYXRlczoge1xyXG4gICAgICAgICc0eHgnOiAwLFxyXG4gICAgICAgICc1eHgnOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc291cmNlVXNhZ2U6IHtcclxuICAgICAgICBjcHU6IDAsXHJcbiAgICAgICAgbWVtb3J5OiAwLFxyXG4gICAgICAgIGRpc2s6IDBcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEhBTkRMRVIgUFJJTkNJUEFMXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKipcclxuICogR0VUIC9hcGkvYWRtaW4vbW9uaXRvcmluZy9lbnRlcnByaXNlLW1ldHJpY3NcclxuICogT2J0aWVuZSBtw6l0cmljYXMgY29tcGxldGFzIGRlIHRvZG9zIGxvcyBzaXN0ZW1hcyBlbnRlcnByaXNlXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFZlcmlmaWNhciBhdXRlbnRpY2FjacOzbiBhZG1pblxyXG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IHJlcXVpcmVBZG1pbkF1dGgocmVxdWVzdCwgWydhZG1pbl9hY2Nlc3MnLCAnbW9uaXRvcmluZ19hY2Nlc3MnXSk7XHJcbiAgICBcclxuICAgIGlmICghYXV0aFJlc3VsdC5pc1ZhbGlkKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgZXJyb3I6IGF1dGhSZXN1bHQuZXJyb3IsXHJcbiAgICAgICAgICBjb2RlOiBhdXRoUmVzdWx0LmNvZGUsXHJcbiAgICAgICAgICBlbnRlcnByaXNlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IHN0YXR1czogYXV0aFJlc3VsdC5zdGF0dXMgfHwgNDAxIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0gYXV0aFJlc3VsdC5jb250ZXh0ITtcclxuXHJcbiAgICAvLyBSZWNvcGlsYXIgbcOpdHJpY2FzIGRlIHRvZG9zIGxvcyBzaXN0ZW1hc1xyXG4gICAgY29uc3QgW3N5c3RlbUhlYWx0aCwgc2VjdXJpdHksIGNhY2hlLCBwZXJmb3JtYW5jZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgIGdldFN5c3RlbUhlYWx0aE1ldHJpY3MoKSxcclxuICAgICAgZ2V0U2VjdXJpdHlNZXRyaWNzKCksXHJcbiAgICAgIGdldENhY2hlTWV0cmljcygpLFxyXG4gICAgICBnZXRQZXJmb3JtYW5jZU1ldHJpY3MoKVxyXG4gICAgXSk7XHJcblxyXG4gICAgY29uc3QgZW50ZXJwcmlzZU1ldHJpY3M6IEVudGVycHJpc2VNZXRyaWNzID0ge1xyXG4gICAgICBzeXN0ZW1IZWFsdGgsXHJcbiAgICAgIHNlY3VyaXR5LFxyXG4gICAgICBjYWNoZSxcclxuICAgICAgcGVyZm9ybWFuY2UsXHJcbiAgICAgIGxhc3RVcGRhdGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgIH07XHJcblxyXG4gICAgLy8gUmVnaXN0cmFyIGFjY2VzbyBhIG3DqXRyaWNhcyBlbiBhdWRpdG9yw61hXHJcbiAgICBhd2FpdCBlbnRlcnByaXNlQXVkaXRTeXN0ZW0ubG9nRW50ZXJwcmlzZUV2ZW50KHtcclxuICAgICAgdXNlcl9pZDogY29udGV4dC51c2VySWQsXHJcbiAgICAgIGV2ZW50X3R5cGU6ICdNRVRSSUNTX0FDQ0VTUycgYXMgYW55LFxyXG4gICAgICBldmVudF9jYXRlZ29yeTogJ21vbml0b3JpbmcnLFxyXG4gICAgICBzZXZlcml0eTogJ2xvdycgYXMgYW55LFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0VudGVycHJpc2UgbWV0cmljcyBhY2Nlc3NlZCcsXHJcbiAgICAgIG1ldGFkYXRhOiB7XHJcbiAgICAgICAgbWV0cmljc190eXBlczogWydzeXN0ZW1faGVhbHRoJywgJ3NlY3VyaXR5JywgJ2NhY2hlJywgJ3BlcmZvcm1hbmNlJ10sXHJcbiAgICAgICAgYWNjZXNzX3R5cGU6ICdkYXNoYm9hcmQnXHJcbiAgICAgIH0sXHJcbiAgICAgIGlwX2FkZHJlc3M6IGNvbnRleHQuaXBBZGRyZXNzLFxyXG4gICAgICB1c2VyX2FnZW50OiBjb250ZXh0LnVzZXJBZ2VudFxyXG4gICAgfSwgY29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGRhdGE6IGVudGVycHJpc2VNZXRyaWNzLFxyXG4gICAgICBlbnRlcnByaXNlOiB7XHJcbiAgICAgICAgcmVxdWVzdGVyOiB7XHJcbiAgICAgICAgICB1c2VySWQ6IGNvbnRleHQudXNlcklkLFxyXG4gICAgICAgICAgcm9sZTogY29udGV4dC5yb2xlLFxyXG4gICAgICAgICAgcGVybWlzc2lvbnM6IGNvbnRleHQucGVybWlzc2lvbnNcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldHJpY3M6IHtcclxuICAgICAgICAgIGNvbGxlY3Rpb25fdGltZV9tczogRGF0ZS5ub3coKSAtIG5ldyBEYXRlKGVudGVycHJpc2VNZXRyaWNzLmxhc3RVcGRhdGVkKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICBzeXN0ZW1zX21vbml0b3JlZDogT2JqZWN0LmtleXMoc3lzdGVtSGVhbHRoKS5sZW5ndGgsXHJcbiAgICAgICAgICBjYWNoZV9rZXlzX3RyYWNrZWQ6IE9iamVjdC5rZXlzKGNhY2hlKS5sZW5ndGhcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tFTlRFUlBSSVNFX01FVFJJQ1NfQVBJXSBFcnJvcjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAge1xyXG4gICAgICAgIGVycm9yOiAnRXJyb3IgaW50ZXJubyBhbCBvYnRlbmVyIG3DqXRyaWNhcyBlbnRlcnByaXNlJyxcclxuICAgICAgICBjb2RlOiAnSU5URVJOQUxfRVJST1InLFxyXG4gICAgICAgIGVudGVycHJpc2U6IHRydWUsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBPU1QgL2FwaS9hZG1pbi9tb25pdG9yaW5nL2VudGVycHJpc2UtbWV0cmljc1xyXG4gKiBGdWVyemEgYWN0dWFsaXphY2nDs24gZGUgbcOpdHJpY2FzXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBWZXJpZmljYXIgYXV0ZW50aWNhY2nDs24gYWRtaW5cclxuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCByZXF1aXJlQWRtaW5BdXRoKHJlcXVlc3QsIFsnYWRtaW5fYWNjZXNzJywgJ21vbml0b3Jpbmdfd3JpdGUnXSk7XHJcbiAgICBcclxuICAgIGlmICghYXV0aFJlc3VsdC5pc1ZhbGlkKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgZXJyb3I6IGF1dGhSZXN1bHQuZXJyb3IsXHJcbiAgICAgICAgICBjb2RlOiBhdXRoUmVzdWx0LmNvZGUsXHJcbiAgICAgICAgICBlbnRlcnByaXNlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IHN0YXR1czogYXV0aFJlc3VsdC5zdGF0dXMgfHwgNDAxIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0gYXV0aFJlc3VsdC5jb250ZXh0ITtcclxuXHJcbiAgICAvLyBGb3J6YXIgYWN0dWFsaXphY2nDs24gZGUgbcOpdHJpY2FzXHJcbiAgICAvLyBFbiB1bmEgaW1wbGVtZW50YWNpw7NuIHJlYWwsIGVzdG8gcG9kcsOtYSBsaW1waWFyIGNhY2hlcywgcmVpbmljaWFyIGNvbnRhZG9yZXMsIGV0Yy5cclxuICAgIFxyXG4gICAgLy8gUmVnaXN0cmFyIGFjY2nDs24gZGUgYWN0dWFsaXphY2nDs24gZm9yemFkYVxyXG4gICAgYXdhaXQgZW50ZXJwcmlzZUF1ZGl0U3lzdGVtLmxvZ0VudGVycHJpc2VFdmVudCh7XHJcbiAgICAgIHVzZXJfaWQ6IGNvbnRleHQudXNlcklkLFxyXG4gICAgICBldmVudF90eXBlOiAnTUVUUklDU19SRUZSRVNIJyBhcyBhbnksXHJcbiAgICAgIGV2ZW50X2NhdGVnb3J5OiAnbW9uaXRvcmluZycsXHJcbiAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyBhcyBhbnksXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRm9yY2VkIG1ldHJpY3MgcmVmcmVzaCcsXHJcbiAgICAgIG1ldGFkYXRhOiB7XHJcbiAgICAgICAgYWN0aW9uOiAnZm9yY2VfcmVmcmVzaCcsXHJcbiAgICAgICAgdHJpZ2dlcmVkX2J5OiAnYWRtaW5fZGFzaGJvYXJkJ1xyXG4gICAgICB9LFxyXG4gICAgICBpcF9hZGRyZXNzOiBjb250ZXh0LmlwQWRkcmVzcyxcclxuICAgICAgdXNlcl9hZ2VudDogY29udGV4dC51c2VyQWdlbnRcclxuICAgIH0sIGNvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICBtZXNzYWdlOiAnTcOpdHJpY2FzIGFjdHVhbGl6YWRhcyBjb3JyZWN0YW1lbnRlJyxcclxuICAgICAgZW50ZXJwcmlzZToge1xyXG4gICAgICAgIHJlcXVlc3Rlcjoge1xyXG4gICAgICAgICAgdXNlcklkOiBjb250ZXh0LnVzZXJJZCxcclxuICAgICAgICAgIHJvbGU6IGNvbnRleHQucm9sZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uOiAnbWV0cmljc19yZWZyZXNoJyxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tFTlRFUlBSSVNFX01FVFJJQ1NfQVBJXSBFcnJvciBpbiBQT1NUOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7XHJcbiAgICAgICAgZXJyb3I6ICdFcnJvciBpbnRlcm5vIGFsIGFjdHVhbGl6YXIgbcOpdHJpY2FzJyxcclxuICAgICAgICBjb2RlOiAnSU5URVJOQUxfRVJST1InLFxyXG4gICAgICAgIGVudGVycHJpc2U6IHRydWUsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBOGRzQjtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUF2RkFDLElBQUE7SUFBQTtJQUFBSCxhQUFBLEdBQUFJLENBQUE7SUFBQUosYUFBQSxHQUFBRSxDQUFBO1dBQUFDLEdBQUE7O01BdUZBRSxLQUFBO0lBQUE7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