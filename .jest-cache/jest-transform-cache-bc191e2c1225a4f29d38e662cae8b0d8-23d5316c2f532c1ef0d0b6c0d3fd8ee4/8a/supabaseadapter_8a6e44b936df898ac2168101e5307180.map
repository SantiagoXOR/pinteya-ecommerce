{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\supabase\\supabase-adapter.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\r\nimport type { Adapter, AdapterUser, AdapterAccount, AdapterSession, VerificationToken } from '@auth/core/adapters'\r\n\r\nexport interface SupabaseAdapterClientOptions {\r\n  url: string\r\n  secret: string\r\n}\r\n\r\nexport function SupabaseAdapter(options: SupabaseAdapterClientOptions): Adapter {\r\n  const { url, secret } = options\r\n  const supabase = createClient(url, secret, {\r\n    db: { schema: 'public' },\r\n    auth: { persistSession: false }\r\n  })\r\n\r\n  return {\r\n    async createUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] createUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createUser error:', error)\r\n        throw new Error(`Error creating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUser(id) {\r\n      console.log('[CUSTOM_ADAPTER] getUser:', id)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUser error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByEmail(email) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail:', email)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByEmail error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] getUserByEmail success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async getUserByAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount:', { providerAccountId, provider })\r\n      \r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .select(`\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getUserByAccount error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getUserByAccount: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getUserByAccount success:', user)\r\n      \r\n      return {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n        image: user.image,\r\n      }\r\n    },\r\n\r\n    async updateUser(user) {\r\n      console.log('[CUSTOM_ADAPTER] updateUser:', user)\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .update({\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified?.toISOString(),\r\n          image: user.image,\r\n        })\r\n        .eq('id', user.id)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateUser error:', error)\r\n        throw new Error(`Error updating user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateUser success:', data)\r\n      return {\r\n        id: data.id,\r\n        name: data.name,\r\n        email: data.email,\r\n        emailVerified: data.emailVerified ? new Date(data.emailVerified) : null,\r\n        image: data.image,\r\n      }\r\n    },\r\n\r\n    async deleteUser(userId) {\r\n      console.log('[CUSTOM_ADAPTER] deleteUser:', userId)\r\n      const { error } = await supabase\r\n        .from('users')\r\n        .delete()\r\n        .eq('id', userId)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteUser error:', error)\r\n        throw new Error(`Error deleting user: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteUser success')\r\n    },\r\n\r\n    async linkAccount(account) {\r\n      console.log('[CUSTOM_ADAPTER] linkAccount:', account)\r\n      const { data, error } = await supabase\r\n        .from('accounts')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          userId: account.userId,\r\n          type: account.type,\r\n          provider: account.provider,\r\n          providerAccountId: account.providerAccountId,\r\n          refresh_token: account.refresh_token,\r\n          access_token: account.access_token,\r\n          expires_at: account.expires_at,\r\n          token_type: account.token_type,\r\n          scope: account.scope,\r\n          id_token: account.id_token,\r\n          session_state: account.session_state,\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] linkAccount error:', error)\r\n        throw new Error(`Error linking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] linkAccount success:', data)\r\n      return {\r\n        id: data.id,\r\n        userId: data.userId,\r\n        type: data.type,\r\n        provider: data.provider,\r\n        providerAccountId: data.providerAccountId,\r\n        refresh_token: data.refresh_token,\r\n        access_token: data.access_token,\r\n        expires_at: data.expires_at,\r\n        token_type: data.token_type,\r\n        scope: data.scope,\r\n        id_token: data.id_token,\r\n        session_state: data.session_state,\r\n      }\r\n    },\r\n\r\n    async unlinkAccount({ providerAccountId, provider }) {\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount:', { providerAccountId, provider })\r\n      const { error } = await supabase\r\n        .from('accounts')\r\n        .delete()\r\n        .eq('providerAccountId', providerAccountId)\r\n        .eq('provider', provider)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] unlinkAccount error:', error)\r\n        throw new Error(`Error unlinking account: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] unlinkAccount success')\r\n    },\r\n\r\n    async createSession({ sessionToken, userId, expires }) {\r\n      console.log('[CUSTOM_ADAPTER] createSession:', { sessionToken, userId, expires })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .insert({\r\n          id: crypto.randomUUID(),\r\n          sessionToken,\r\n          userId,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createSession error:', error)\r\n        throw new Error(`Error creating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async getSessionAndUser(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser:', sessionToken)\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .select(`\r\n          *,\r\n          users (\r\n            id,\r\n            name,\r\n            email,\r\n            emailVerified,\r\n            image\r\n          )\r\n        `)\r\n        .eq('sessionToken', sessionToken)\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] getSessionAndUser error:', error)\r\n        return null\r\n      }\r\n\r\n      if (!data?.users) {\r\n        console.log('[CUSTOM_ADAPTER] getSessionAndUser: no user found')\r\n        return null\r\n      }\r\n\r\n      const user = Array.isArray(data.users) ? data.users[0] : data.users\r\n      console.log('[CUSTOM_ADAPTER] getSessionAndUser success:', { session: data, user })\r\n      \r\n      return {\r\n        session: {\r\n          id: data.id,\r\n          sessionToken: data.sessionToken,\r\n          userId: data.userId,\r\n          expires: new Date(data.expires),\r\n        },\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          emailVerified: user.emailVerified ? new Date(user.emailVerified) : null,\r\n          image: user.image,\r\n        },\r\n      }\r\n    },\r\n\r\n    async updateSession({ sessionToken, ...session }) {\r\n      console.log('[CUSTOM_ADAPTER] updateSession:', { sessionToken, session })\r\n      const { data, error } = await supabase\r\n        .from('sessions')\r\n        .update({\r\n          expires: session.expires?.toISOString(),\r\n        })\r\n        .eq('sessionToken', sessionToken)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] updateSession error:', error)\r\n        throw new Error(`Error updating session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] updateSession success:', data)\r\n      return {\r\n        id: data.id,\r\n        sessionToken: data.sessionToken,\r\n        userId: data.userId,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async deleteSession(sessionToken) {\r\n      console.log('[CUSTOM_ADAPTER] deleteSession:', sessionToken)\r\n      const { error } = await supabase\r\n        .from('sessions')\r\n        .delete()\r\n        .eq('sessionToken', sessionToken)\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] deleteSession error:', error)\r\n        throw new Error(`Error deleting session: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] deleteSession success')\r\n    },\r\n\r\n    async createVerificationToken({ identifier, expires, token }) {\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken:', { identifier, expires, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .insert({\r\n          identifier,\r\n          token,\r\n          expires: expires.toISOString(),\r\n        })\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] createVerificationToken error:', error)\r\n        throw new Error(`Error creating verification token: ${error.message}`)\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] createVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n\r\n    async useVerificationToken({ identifier, token }) {\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken:', { identifier, token })\r\n      const { data, error } = await supabase\r\n        .from('verification_tokens')\r\n        .delete()\r\n        .eq('identifier', identifier)\r\n        .eq('token', token)\r\n        .select()\r\n        .single()\r\n\r\n      if (error) {\r\n        console.error('[CUSTOM_ADAPTER] useVerificationToken error:', error)\r\n        return null\r\n      }\r\n\r\n      console.log('[CUSTOM_ADAPTER] useVerificationToken success:', data)\r\n      return {\r\n        identifier: data.identifier,\r\n        token: data.token,\r\n        expires: new Date(data.expires),\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["SupabaseAdapter","options","url","secret","supabase","createClient","db","schema","auth","persistSession","createUser","user","console","log","data","error","from","insert","id","crypto","randomUUID","name","email","emailVerified","toISOString","image","select","single","Error","message","Date","getUser","eq","getUserByEmail","getUserByAccount","providerAccountId","provider","users","Array","isArray","updateUser","update","deleteUser","userId","delete","linkAccount","account","type","refresh_token","access_token","expires_at","token_type","scope","id_token","session_state","unlinkAccount","createSession","sessionToken","expires","getSessionAndUser","session","updateSession","deleteSession","createVerificationToken","identifier","token","useVerificationToken"],"mappings":"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"}