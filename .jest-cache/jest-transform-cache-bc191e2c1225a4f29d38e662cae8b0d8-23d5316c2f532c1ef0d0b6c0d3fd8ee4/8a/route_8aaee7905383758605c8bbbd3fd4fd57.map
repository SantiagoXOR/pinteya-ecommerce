{"version":3,"names":["cov_y423xmhfi","actualCoverage","s","GET","f","POST","runtime","request","console","log","authResult","_supabaseauthutils","checkPermission","allowed","b","warn","error","_server","NextResponse","json","code","timestamp","Date","toISOString","status","user","supabase","email","role","url","URL","rawParams","page","searchParams","get","limit","search","category","sortBy","sortOrder","Math","max","parseInt","min","offset","query","from","select","count","or","eq","validSortFields","includes","order","ascending","range","data","products","details","message","transformedProducts","map","product","id","name","description","price","stock","category_id","category_name","categories","images","created_at","updated_at","logAdminAction","undefined","length","filters","total","returned","success","pagination","totalPages","ceil","hasNext","hasPrev","meta","api","version","authenticated","errorDetails","Error","stack","debug","errorName","body","allowedFields","productData","validateInput","trim","categoryError","single","insert","transformedProduct"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products-secure\\route.ts"],"sourcesContent":["// Configuraci√≥n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API segura para gesti√≥n de productos del panel administrativo\r\n * Usa Supabase Auth directamente para evitar conflictos con Clerk\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { \r\n  requireAdminAuth, \r\n  checkPermission, \r\n  logAdminAction, \r\n  validateInput \r\n} from '@/lib/auth/supabase-auth-utils';\r\n\r\n/**\r\n * GET /api/admin/products-secure\r\n * Obtener lista paginada de productos con autenticaci√≥n segura\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('üîí Products Secure API: Starting with authentication...');\r\n\r\n    // Verificar autenticaci√≥n y permisos\r\n    const authResult = await checkPermission(request, 'products', 'read');\r\n\r\n    if (!authResult.allowed) {\r\n      console.warn('‚ùå Authentication failed:', authResult.error);\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: 'AUTH_FAILED',\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user, supabase } = authResult;\r\n    console.log('‚úÖ User authenticated:', user?.email, 'Role:', user?.role);\r\n\r\n    // Obtener y validar par√°metros de query\r\n    const url = new URL(request.url);\r\n    const rawParams = {\r\n      page: url.searchParams.get('page') || '1',\r\n      limit: url.searchParams.get('limit') || '10',\r\n      search: url.searchParams.get('search') || '',\r\n      category: url.searchParams.get('category') || '',\r\n      sortBy: url.searchParams.get('sortBy') || 'created_at',\r\n      sortOrder: url.searchParams.get('sortOrder') || 'desc'\r\n    };\r\n\r\n    // Validar par√°metros\r\n    const page = Math.max(1, parseInt(rawParams.page));\r\n    const limit = Math.min(50, Math.max(1, parseInt(rawParams.limit))); // M√°ximo 50 por p√°gina\r\n    const offset = (page - 1) * limit;\r\n\r\n    console.log('üîç Query params:', { page, limit, offset, search: rawParams.search });\r\n\r\n    // Construir query optimizada\r\n    let query = supabase\r\n      .from('products')\r\n      .select(`\r\n        id,\r\n        name,\r\n        description,\r\n        price,\r\n        stock,\r\n        category_id,\r\n        images,\r\n        created_at,\r\n        updated_at,\r\n        categories (\r\n          id,\r\n          name\r\n        )\r\n      `, { count: 'exact' });\r\n\r\n    // Aplicar filtros\r\n    if (rawParams.search) {\r\n      query = query.or(`name.ilike.%${rawParams.search}%,description.ilike.%${rawParams.search}%`);\r\n    }\r\n\r\n    if (rawParams.category) {\r\n      query = query.eq('category_id', rawParams.category);\r\n    }\r\n\r\n    // Aplicar ordenamiento\r\n    const validSortFields = ['name', 'price', 'stock', 'created_at', 'updated_at'];\r\n    const sortBy = validSortFields.includes(rawParams.sortBy) ? rawParams.sortBy : 'created_at';\r\n    const sortOrder = rawParams.sortOrder === 'asc' ? 'asc' : 'desc';\r\n    \r\n    query = query.order(sortBy, { ascending: sortOrder === 'asc' });\r\n\r\n    // Aplicar paginaci√≥n\r\n    query = query.range(offset, offset + limit - 1);\r\n\r\n    // Ejecutar query\r\n    const { data: products, error, count } = await query;\r\n\r\n    if (error) {\r\n      console.error('‚ùå Supabase error:', error);\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Error al obtener productos',\r\n          details: error.message,\r\n          code: 'DATABASE_ERROR'\r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Transformar productos\r\n    const transformedProducts = products?.map(product => ({\r\n      id: product.id,\r\n      name: product.name,\r\n      description: product.description,\r\n      price: product.price,\r\n      stock: product.stock,\r\n      category_id: product.category_id,\r\n      category_name: product.categories?.name || null,\r\n      images: product.images,\r\n      created_at: product.created_at,\r\n      updated_at: product.updated_at\r\n    })) || [];\r\n\r\n    // Log de acci√≥n administrativa\r\n    await logAdminAction(\r\n      user!.id,\r\n      'READ',\r\n      'products',\r\n      undefined,\r\n      null,\r\n      { count: transformedProducts.length, filters: rawParams }\r\n    );\r\n\r\n    console.log('‚úÖ Products Secure API: Success', {\r\n      total: count,\r\n      returned: transformedProducts.length,\r\n      user: user?.email\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Productos obtenidos exitosamente',\r\n      data: {\r\n        products: transformedProducts,\r\n        total: count || 0,\r\n        pagination: {\r\n          page,\r\n          limit,\r\n          totalPages: Math.ceil((count || 0) / limit),\r\n          hasNext: offset + limit < (count || 0),\r\n          hasPrev: page > 1\r\n        },\r\n        filters: {\r\n          search: rawParams.search,\r\n          category: rawParams.category,\r\n          sortBy,\r\n          sortOrder\r\n        }\r\n      },\r\n      meta: {\r\n        timestamp: new Date().toISOString(),\r\n        api: 'products-secure',\r\n        version: '2.0.0',\r\n        user: user?.email,\r\n        authenticated: true\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Fatal error in products secure API:', error);\r\n    \r\n    const errorDetails = {\r\n      message: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined,\r\n      name: error instanceof Error ? error.name : 'UnknownError'\r\n    };\r\n\r\n    console.error('‚ùå Error details:', errorDetails);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        details: errorDetails.message,\r\n        code: 'INTERNAL_ERROR',\r\n        debug: {\r\n          errorName: errorDetails.name,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/admin/products-secure\r\n * Crear nuevo producto con autenticaci√≥n segura\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('üîí Products Secure API: Creating product...');\r\n\r\n    // Verificar autenticaci√≥n y permisos\r\n    const authResult = await checkPermission(request, 'products', 'create');\r\n\r\n    if (!authResult.allowed) {\r\n      return NextResponse.json(\r\n        { \r\n          error: authResult.error,\r\n          code: 'AUTH_FAILED'\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const { user, supabase } = authResult;\r\n\r\n    // Obtener y validar datos del cuerpo\r\n    const body = await request.json();\r\n    \r\n    const allowedFields = [\r\n      'name', 'description', 'price', 'stock', \r\n      'category_id', 'images', 'status'\r\n    ];\r\n    \r\n    const productData = validateInput(body, allowedFields);\r\n\r\n    // Validaciones espec√≠ficas\r\n    if (!productData.name || productData.name.trim().length < 2) {\r\n      return NextResponse.json(\r\n        { error: 'El nombre del producto es requerido (m√≠nimo 2 caracteres)' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!productData.price || productData.price <= 0) {\r\n      return NextResponse.json(\r\n        { error: 'El precio debe ser mayor a 0' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!productData.category_id) {\r\n      return NextResponse.json(\r\n        { error: 'La categor√≠a es requerida' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la categor√≠a existe\r\n    const { data: category, error: categoryError } = await supabase\r\n      .from('categories')\r\n      .select('id, name')\r\n      .eq('id', productData.category_id)\r\n      .single();\r\n\r\n    if (categoryError || !category) {\r\n      return NextResponse.json(\r\n        { error: 'Categor√≠a no encontrada' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Crear producto\r\n    const { data: product, error } = await supabase\r\n      .from('products')\r\n      .insert({\r\n        ...productData,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select(`\r\n        id,\r\n        name,\r\n        description,\r\n        price,\r\n        stock,\r\n        category_id,\r\n        images,\r\n        created_at,\r\n        updated_at\r\n      `)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating product:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al crear producto', details: error.message },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Transformar respuesta\r\n    const transformedProduct = {\r\n      ...product,\r\n      category_name: category.name\r\n    };\r\n\r\n    // Log de acci√≥n administrativa\r\n    await logAdminAction(\r\n      user!.id,\r\n      'CREATE',\r\n      'product',\r\n      product.id,\r\n      null,\r\n      transformedProduct\r\n    );\r\n\r\n    console.log('‚úÖ Product created successfully:', product.id);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        message: 'Producto creado exitosamente',\r\n        data: transformedProduct\r\n      },\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error in POST products secure API:', error);\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        error: 'Error interno del servidor',\r\n        code: 'INTERNAL_ERROR'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}