{"version":3,"names":["cov_1js9ckycx","actualCoverage","s","GET","f","POST","runtime","request","session","_config","auth","user","b","_server","NextResponse","json","error","status","userEmail","email","data","_supabase","supabaseAdmin","from","select","eq","single","searchParams","URL","url","filters","category","get","undefined","action","startDate","endDate","limit","parseInt","offset","query","id","gte","lte","order","ascending","range","activities","console","countQuery","count","head","stats","getActivityStats","success","pagination","total","hasMore","body","description","metadata","clientIP","getClientIP","userAgent","headers","activityData","user_id","ip_address","user_agent","newActivity","insert","activity","message","userId","categoryStats","Date","now","toISOString","categoryCounts","reduce","acc","item","sevenDaysAgo","dailyActivity","dailyCounts","date","created_at","split","byCategory","byDay","totalActivities","length","forwarded","realIP","trim","ip"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\user\\activity\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - API DE GESTIÓN DE ACTIVIDAD DE USUARIO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n// Tipos para actividad\r\nexport interface UserActivity {\r\n  id: string;\r\n  user_id: string;\r\n  action: string;\r\n  category: 'auth' | 'profile' | 'order' | 'security' | 'session' | 'preference';\r\n  description?: string;\r\n  metadata?: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface ActivityFilters {\r\n  category?: string;\r\n  action?: string;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  limit?: number;\r\n  offset?: number;\r\n}\r\n\r\n// GET - Obtener historial de actividad del usuario\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Obtener parámetros de filtro\r\n    const { searchParams } = new URL(request.url);\r\n    const filters: ActivityFilters = {\r\n      category: searchParams.get('category') || undefined,\r\n      action: searchParams.get('action') || undefined,\r\n      startDate: searchParams.get('startDate') || undefined,\r\n      endDate: searchParams.get('endDate') || undefined,\r\n      limit: parseInt(searchParams.get('limit') || '50'),\r\n      offset: parseInt(searchParams.get('offset') || '0'),\r\n    };\r\n\r\n    // Construir query\r\n    let query = supabaseAdmin\r\n      .from('user_activity')\r\n      .select('*')\r\n      .eq('user_id', user.id);\r\n\r\n    // Aplicar filtros\r\n    if (filters.category) {\r\n      query = query.eq('category', filters.category);\r\n    }\r\n\r\n    if (filters.action) {\r\n      query = query.eq('action', filters.action);\r\n    }\r\n\r\n    if (filters.startDate) {\r\n      query = query.gte('created_at', filters.startDate);\r\n    }\r\n\r\n    if (filters.endDate) {\r\n      query = query.lte('created_at', filters.endDate);\r\n    }\r\n\r\n    // Aplicar paginación y ordenamiento\r\n    query = query\r\n      .order('created_at', { ascending: false })\r\n      .range(filters.offset!, filters.offset! + filters.limit! - 1);\r\n\r\n    const { data: activities, error } = await query;\r\n\r\n    if (error) {\r\n      console.error('Error al obtener actividad:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener historial de actividad' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Obtener conteo total para paginación\r\n    let countQuery = supabaseAdmin\r\n      .from('user_activity')\r\n      .select('*', { count: 'exact', head: true })\r\n      .eq('user_id', user.id);\r\n\r\n    if (filters.category) {\r\n      countQuery = countQuery.eq('category', filters.category);\r\n    }\r\n\r\n    if (filters.action) {\r\n      countQuery = countQuery.eq('action', filters.action);\r\n    }\r\n\r\n    if (filters.startDate) {\r\n      countQuery = countQuery.gte('created_at', filters.startDate);\r\n    }\r\n\r\n    if (filters.endDate) {\r\n      countQuery = countQuery.lte('created_at', filters.endDate);\r\n    }\r\n\r\n    const { count } = await countQuery;\r\n\r\n    // Obtener estadísticas de actividad\r\n    const stats = await getActivityStats(user.id, filters);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      activities: activities || [],\r\n      pagination: {\r\n        total: count || 0,\r\n        limit: filters.limit,\r\n        offset: filters.offset,\r\n        hasMore: (filters.offset! + filters.limit!) < (count || 0),\r\n      },\r\n      stats,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en GET /api/user/activity:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Registrar nueva actividad\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no autenticado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener usuario por email\r\n    const userEmail = session.user.email;\r\n    const { data: user } = await supabaseAdmin\r\n      .from('users')\r\n      .select('id')\r\n      .eq('email', userEmail)\r\n      .single();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'Usuario no encontrado' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, category, description, metadata } = body;\r\n\r\n    // Validar datos requeridos\r\n    if (!action || !category) {\r\n      return NextResponse.json(\r\n        { error: 'Acción y categoría son requeridas' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Obtener información del request\r\n    const clientIP = getClientIP(request);\r\n    const userAgent = request.headers.get('user-agent') || '';\r\n\r\n    // Crear registro de actividad\r\n    const activityData: Omit<UserActivity, 'id' | 'created_at'> = {\r\n      user_id: user.id,\r\n      action,\r\n      category,\r\n      description,\r\n      metadata,\r\n      ip_address: clientIP,\r\n      user_agent: userAgent,\r\n    };\r\n\r\n    const { data: newActivity, error } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .insert(activityData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error al crear actividad:', error);\r\n      return NextResponse.json(\r\n        { error: 'Error al registrar actividad' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      activity: newActivity,\r\n      message: 'Actividad registrada exitosamente',\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en POST /api/user/activity:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función auxiliar para obtener estadísticas de actividad\r\nasync function getActivityStats(userId: string, filters: ActivityFilters) {\r\n  try {\r\n    // Estadísticas por categoría\r\n    const { data: categoryStats } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .select('category')\r\n      .eq('user_id', userId)\r\n      .gte('created_at', filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n    const categoryCounts = categoryStats?.reduce((acc, item) => {\r\n      acc[item.category] = (acc[item.category] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>) || {};\r\n\r\n    // Actividad por día (últimos 7 días)\r\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();\r\n    const { data: dailyActivity } = await supabaseAdmin\r\n      .from('user_activity')\r\n      .select('created_at')\r\n      .eq('user_id', userId)\r\n      .gte('created_at', sevenDaysAgo);\r\n\r\n    const dailyCounts = dailyActivity?.reduce((acc, item) => {\r\n      const date = new Date(item.created_at).toISOString().split('T')[0];\r\n      acc[date] = (acc[date] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>) || {};\r\n\r\n    return {\r\n      byCategory: categoryCounts,\r\n      byDay: dailyCounts,\r\n      totalActivities: categoryStats?.length || 0,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas:', error);\r\n    return {\r\n      byCategory: {},\r\n      byDay: {},\r\n      totalActivities: 0,\r\n    };\r\n  }\r\n}\r\n\r\n// Función auxiliar para obtener IP del cliente\r\nfunction getClientIP(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIP = request.headers.get('x-real-ip');\r\n  \r\n  if (forwarded) {\r\n    return forwarded.split(',')[0].trim();\r\n  }\r\n  \r\n  if (realIP) {\r\n    return realIP;\r\n  }\r\n  \r\n  return request.ip || 'unknown';\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}