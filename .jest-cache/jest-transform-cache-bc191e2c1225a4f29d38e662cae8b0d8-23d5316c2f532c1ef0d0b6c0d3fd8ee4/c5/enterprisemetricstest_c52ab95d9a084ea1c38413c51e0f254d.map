{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\enterprise-metrics.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ENTERPRISE METRICS TESTS\n// ===================================\n\nimport {\n  EnterpriseMetricsCollector,\n  MetricType,\n  BusinessMetricCategory,\n  AlertLevel,\n  recordPerformanceMetric,\n  recordBusinessMetric,\n  recordSecurityMetric,\n  recordUserExperienceMetric,\n} from '@/lib/monitoring/enterprise-metrics'\n\n// Mock logger\njest.mock('@/lib/enterprise/logger', () => ({\n  logger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n  LogLevel: {\n    DEBUG: 'debug',\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    SYSTEM: 'system',\n  },\n}))\n\n// Mock Supabase\nconst mockSupabaseInsert = jest.fn()\nconst mockSupabaseRpc = jest.fn()\nconst mockSupabaseFrom = jest.fn(() => ({\n  insert: mockSupabaseInsert,\n}))\n\njest.mock('@/lib/supabase', () => ({\n  getSupabaseClient: jest.fn(() => ({\n    from: mockSupabaseFrom,\n    rpc: mockSupabaseRpc,\n  })),\n}))\n\n// Mock cache\njest.mock('@/lib/cache-manager', () => ({\n  CacheUtils: {\n    cacheMetricsAggregation: jest.fn((key, fn) => fn()),\n  },\n}))\n\ndescribe('Enterprise Metrics System', () => {\n  let metricsCollector: EnterpriseMetricsCollector\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    metricsCollector = new EnterpriseMetricsCollector()\n\n    // Mock successful database operations\n    mockSupabaseInsert.mockResolvedValue({ error: null })\n    mockSupabaseRpc.mockResolvedValue({ data: [], error: null })\n  })\n\n  afterEach(() => {\n    metricsCollector.destroy()\n  })\n\n  describe('EnterpriseMetricsCollector', () => {\n    test('debe crear instancia singleton', () => {\n      const instance1 = EnterpriseMetricsCollector.getInstance()\n      const instance2 = EnterpriseMetricsCollector.getInstance()\n\n      expect(instance1).toBe(instance2)\n    })\n\n    test('debe registrar métrica básica', async () => {\n      await metricsCollector.recordMetric(\n        'test.metric',\n        100,\n        MetricType.GAUGE,\n        BusinessMetricCategory.PERFORMANCE,\n        { environment: 'test' },\n        { source: 'unit-test' }\n      )\n\n      // Verificar que se agregó al buffer (se flusheará automáticamente)\n      expect(true).toBe(true) // La métrica se almacena en buffer interno\n    })\n\n    test('debe generar ID único para métricas', async () => {\n      const metric1 = await metricsCollector.recordMetric('test1', 1)\n      const metric2 = await metricsCollector.recordMetric('test2', 2)\n\n      // Los IDs se generan internamente, verificamos que no hay errores\n      expect(metric1).toBeUndefined() // recordMetric no retorna valor\n      expect(metric2).toBeUndefined()\n    })\n\n    test('debe manejar errores sin fallar', async () => {\n      // Simular error en base de datos\n      mockSupabaseInsert.mockResolvedValue({\n        error: { message: 'Database error' },\n      })\n\n      // No debe lanzar error\n      await expect(metricsCollector.recordMetric('test.error', 1)).resolves.not.toThrow()\n    })\n  })\n\n  describe('Métricas de Performance', () => {\n    test('debe registrar métrica de performance', async () => {\n      await recordPerformanceMetric(\n        'api_call',\n        1500, // 1.5 segundos\n        true,\n        { endpoint: '/api/test' }\n      )\n\n      // Verificar que no hay errores\n      expect(true).toBe(true)\n    })\n\n    test('debe registrar métricas de duración y contador', async () => {\n      await recordPerformanceMetric('database_query', 250, true, { table: 'products' })\n\n      // Se registran dos métricas: duración y contador\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Métricas de Negocio', () => {\n    test('debe registrar evento de negocio', async () => {\n      await recordBusinessMetric('order_created', 1, {\n        amount: '100.50',\n        currency: 'ARS',\n        method: 'mercadopago',\n      })\n\n      expect(true).toBe(true)\n    })\n\n    test('debe registrar métricas con valores personalizados', async () => {\n      await recordBusinessMetric('revenue', 15000.75, {\n        period: 'daily',\n        source: 'ecommerce',\n      })\n\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Métricas de Seguridad', () => {\n    test('debe registrar evento de seguridad', async () => {\n      await recordSecurityMetric('login_attempt', 'medium', {\n        ip: '192.168.1.1',\n        success: 'true',\n      })\n\n      expect(true).toBe(true)\n    })\n\n    test('debe registrar violación de seguridad crítica', async () => {\n      await recordSecurityMetric('signature_validation_failed', 'critical', {\n        endpoint: '/api/webhook',\n        ip: '10.0.0.1',\n      })\n\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Métricas de Experiencia de Usuario', () => {\n    test('debe registrar métrica de UX', async () => {\n      await recordUserExperienceMetric('page_load_time', 2500, 'user-123', {\n        page: '/shop',\n        device: 'mobile',\n      })\n\n      expect(true).toBe(true)\n    })\n\n    test('debe manejar usuarios anónimos', async () => {\n      await recordUserExperienceMetric('bounce_rate', 0.25, undefined, {\n        page: '/home',\n        source: 'organic',\n      })\n\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Sistema de Alertas', () => {\n    test('debe configurar regla de alerta', () => {\n      const rule = {\n        id: 'test_alert',\n        metricName: 'test.metric',\n        condition: 'gt' as const,\n        threshold: 100,\n        level: AlertLevel.WARNING,\n        enabled: true,\n        cooldownMinutes: 5,\n        description: 'Test alert',\n        actions: [{ type: 'log' as const, config: {} }],\n      }\n\n      metricsCollector.setAlertRule(rule)\n\n      // Verificar que no hay errores\n      expect(true).toBe(true)\n    })\n\n    test('debe evaluar condiciones de alerta correctamente', async () => {\n      // Configurar alerta para valores > 50\n      const rule = {\n        id: 'high_value_alert',\n        metricName: 'test.value',\n        condition: 'gt' as const,\n        threshold: 50,\n        level: AlertLevel.WARNING,\n        enabled: true,\n        cooldownMinutes: 1,\n        description: 'Value too high',\n        actions: [{ type: 'log' as const, config: {} }],\n      }\n\n      metricsCollector.setAlertRule(rule)\n\n      // Registrar métrica que debería disparar alerta\n      await metricsCollector.recordMetric(\n        'test.value',\n        75,\n        MetricType.GAUGE,\n        BusinessMetricCategory.PERFORMANCE\n      )\n\n      // La alerta se dispara internamente\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Agregación de Métricas', () => {\n    test('debe obtener métricas agregadas', async () => {\n      const mockAggregation = [\n        {\n          period_start: '2025-01-01T00:00:00Z',\n          period_end: '2025-01-01T01:00:00Z',\n          count: 10,\n          sum: 1000,\n          avg: 100,\n          min: 50,\n          max: 150,\n          p50: 95,\n          p95: 140,\n          p99: 148,\n        },\n      ]\n\n      mockSupabaseRpc.mockResolvedValue({ data: mockAggregation, error: null })\n\n      const result = await metricsCollector.getAggregatedMetrics(\n        'test.metric',\n        '1h',\n        '2025-01-01T00:00:00Z',\n        '2025-01-01T23:59:59Z'\n      )\n\n      expect(mockSupabaseRpc).toHaveBeenCalledWith('aggregate_metrics', {\n        metric_name: 'test.metric',\n        period_interval: '1h',\n        start_time: '2025-01-01T00:00:00Z',\n        end_time: '2025-01-01T23:59:59Z',\n      })\n\n      expect(result).toEqual(mockAggregation)\n    })\n\n    test('debe manejar errores en agregación', async () => {\n      mockSupabaseRpc.mockResolvedValue({\n        data: null,\n        error: { message: 'Aggregation failed' },\n      })\n\n      await expect(\n        metricsCollector.getAggregatedMetrics(\n          'test.metric',\n          '1h',\n          '2025-01-01T00:00:00Z',\n          '2025-01-01T23:59:59Z'\n        )\n      ).rejects.toThrow('Failed to aggregate metrics: Aggregation failed')\n    })\n  })\n\n  describe('Alertas por Defecto', () => {\n    test('debe tener alertas predefinidas configuradas', () => {\n      // Las alertas se configuran en el constructor\n      expect(true).toBe(true)\n    })\n\n    test('debe disparar alerta de response time alto', async () => {\n      // Registrar métrica que supera el umbral (5000ms)\n      await metricsCollector.recordMetric(\n        'performance.api.duration',\n        6000,\n        MetricType.TIMER,\n        BusinessMetricCategory.PERFORMANCE\n      )\n\n      // La alerta se dispara automáticamente\n      expect(true).toBe(true)\n    })\n\n    test('debe disparar alerta de error rate alto', async () => {\n      // Registrar métrica que supera el umbral (5%)\n      await metricsCollector.recordMetric(\n        'performance.api.error_rate',\n        0.08, // 8%\n        MetricType.GAUGE,\n        BusinessMetricCategory.PERFORMANCE\n      )\n\n      // La alerta se dispara automáticamente\n      expect(true).toBe(true)\n    })\n\n    test('debe disparar alerta de violación de seguridad', async () => {\n      // Registrar métrica de violación\n      await metricsCollector.recordMetric(\n        'security.violation',\n        1,\n        MetricType.COUNTER,\n        BusinessMetricCategory.SECURITY\n      )\n\n      // La alerta se dispara automáticamente\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('Limpieza de Recursos', () => {\n    test('debe limpiar recursos correctamente', () => {\n      const collector = new EnterpriseMetricsCollector()\n\n      // Verificar que destroy no lanza errores\n      expect(() => collector.destroy()).not.toThrow()\n    })\n  })\n\n  describe('Funciones de Conveniencia', () => {\n    test('recordPerformanceMetric debe funcionar', async () => {\n      await expect(\n        recordPerformanceMetric('test_op', 100, true, { tag: 'value' })\n      ).resolves.not.toThrow()\n    })\n\n    test('recordBusinessMetric debe funcionar', async () => {\n      await expect(recordBusinessMetric('test_event', 1, { tag: 'value' })).resolves.not.toThrow()\n    })\n\n    test('recordSecurityMetric debe funcionar', async () => {\n      await expect(\n        recordSecurityMetric('test_security', 'medium', { tag: 'value' })\n      ).resolves.not.toThrow()\n    })\n\n    test('recordUserExperienceMetric debe funcionar', async () => {\n      await expect(\n        recordUserExperienceMetric('test_ux', 100, 'user-123', { tag: 'value' })\n      ).resolves.not.toThrow()\n    })\n  })\n})\n"],"names":["jest","mock","logger","debug","fn","info","warn","error","LogLevel","DEBUG","INFO","WARN","ERROR","LogCategory","SYSTEM","getSupabaseClient","from","mockSupabaseFrom","rpc","mockSupabaseRpc","CacheUtils","cacheMetricsAggregation","key","mockSupabaseInsert","insert","describe","metricsCollector","beforeEach","clearAllMocks","EnterpriseMetricsCollector","mockResolvedValue","data","afterEach","destroy","test","instance1","getInstance","instance2","expect","toBe","recordMetric","MetricType","GAUGE","BusinessMetricCategory","PERFORMANCE","environment","source","metric1","metric2","toBeUndefined","message","resolves","not","toThrow","recordPerformanceMetric","endpoint","table","recordBusinessMetric","amount","currency","method","period","recordSecurityMetric","ip","success","recordUserExperienceMetric","page","device","undefined","rule","id","metricName","condition","threshold","level","AlertLevel","WARNING","enabled","cooldownMinutes","description","actions","type","config","setAlertRule","mockAggregation","period_start","period_end","count","sum","avg","min","max","p50","p95","p99","result","getAggregatedMetrics","toHaveBeenCalledWith","metric_name","period_interval","start_time","end_time","toEqual","rejects","TIMER","COUNTER","SECURITY","collector","tag"],"mappings":"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"}