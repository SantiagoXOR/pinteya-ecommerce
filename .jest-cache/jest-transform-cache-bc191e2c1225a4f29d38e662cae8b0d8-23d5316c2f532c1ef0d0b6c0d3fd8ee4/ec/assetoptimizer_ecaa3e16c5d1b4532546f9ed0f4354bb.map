{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\asset-optimizer.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ASSET OPTIMIZER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\n\r\n// Configuración de optimización de assets\r\ninterface AssetConfig {\r\n  compress: boolean;\r\n  quality?: number;\r\n  format?: 'webp' | 'jpeg' | 'png';\r\n  maxWidth?: number;\r\n  maxHeight?: number;\r\n  lazy?: boolean;\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const ASSET_CONFIGS = {\r\n  // Para imágenes de productos\r\n  PRODUCT_IMAGES: {\r\n    compress: true,\r\n    quality: 85,\r\n    format: 'webp' as const,\r\n    maxWidth: 800,\r\n    maxHeight: 600,\r\n    lazy: true,\r\n  },\r\n  \r\n  // Para iconos de pago\r\n  PAYMENT_ICONS: {\r\n    compress: true,\r\n    quality: 90,\r\n    format: 'webp' as const,\r\n    maxWidth: 64,\r\n    maxHeight: 64,\r\n    lazy: false,\r\n  },\r\n  \r\n  // Para imágenes de hero/banner\r\n  HERO_IMAGES: {\r\n    compress: true,\r\n    quality: 80,\r\n    format: 'webp' as const,\r\n    maxWidth: 1920,\r\n    maxHeight: 1080,\r\n    lazy: true,\r\n  },\r\n  \r\n  // Para avatares de usuario\r\n  AVATARS: {\r\n    compress: true,\r\n    quality: 85,\r\n    format: 'webp' as const,\r\n    maxWidth: 200,\r\n    maxHeight: 200,\r\n    lazy: true,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para optimización de assets\r\n */\r\nexport class AssetOptimizer {\r\n  private static instance: AssetOptimizer;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): AssetOptimizer {\r\n    if (!AssetOptimizer.instance) {\r\n      AssetOptimizer.instance = new AssetOptimizer();\r\n    }\r\n    return AssetOptimizer.instance;\r\n  }\r\n\r\n  /**\r\n   * Optimiza una URL de imagen\r\n   */\r\n  optimizeImageUrl(\r\n    originalUrl: string,\r\n    config: AssetConfig = ASSET_CONFIGS.PRODUCT_IMAGES\r\n  ): string {\r\n    try {\r\n      // Si es una URL externa, aplicar parámetros de optimización\r\n      if (originalUrl.startsWith('http')) {\r\n        const url = new URL(originalUrl);\r\n        \r\n        // Para Supabase Storage, agregar parámetros de transformación\r\n        if (url.hostname.includes('supabase')) {\r\n          const params = new URLSearchParams();\r\n          \r\n          if (config.maxWidth) {\r\n            params.set('width', config.maxWidth.toString());\r\n          }\r\n          \r\n          if (config.maxHeight) {\r\n            params.set('height', config.maxHeight.toString());\r\n          }\r\n          \r\n          if (config.quality) {\r\n            params.set('quality', config.quality.toString());\r\n          }\r\n          \r\n          if (config.format) {\r\n            params.set('format', config.format);\r\n          }\r\n          \r\n          if (params.toString()) {\r\n            url.search = params.toString();\r\n          }\r\n        }\r\n        \r\n        return url.toString();\r\n      }\r\n      \r\n      // Para URLs locales, mantener como están\r\n      return originalUrl;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Image URL optimization failed', error as Error);\r\n      return originalUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera srcSet para imágenes responsivas\r\n   */\r\n  generateSrcSet(\r\n    baseUrl: string,\r\n    config: AssetConfig = ASSET_CONFIGS.PRODUCT_IMAGES\r\n  ): string {\r\n    try {\r\n      const sizes = [\r\n        { width: 320, suffix: 'sm' },\r\n        { width: 640, suffix: 'md' },\r\n        { width: 1024, suffix: 'lg' },\r\n        { width: 1920, suffix: 'xl' },\r\n      ];\r\n\r\n      const srcSet = sizes\r\n        .filter(size => !config.maxWidth || size.width <= config.maxWidth)\r\n        .map(size => {\r\n          const optimizedConfig = { ...config, maxWidth: size.width };\r\n          const url = this.optimizeImageUrl(baseUrl, optimizedConfig);\r\n          return `${url} ${size.width}w`;\r\n        })\r\n        .join(', ');\r\n\r\n      return srcSet;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'SrcSet generation failed', error as Error);\r\n      return baseUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera sizes attribute para imágenes responsivas\r\n   */\r\n  generateSizes(breakpoints: Array<{ condition: string; size: string }>): string {\r\n    return breakpoints\r\n      .map(bp => `${bp.condition} ${bp.size}`)\r\n      .join(', ');\r\n  }\r\n\r\n  /**\r\n   * Precarga assets críticos\r\n   */\r\n  preloadCriticalAssets(assets: Array<{ url: string; type: 'image' | 'font' | 'style' }>): void {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    assets.forEach(asset => {\r\n      try {\r\n        const link = document.createElement('link');\r\n        link.rel = 'preload';\r\n        link.href = asset.url;\r\n        \r\n        switch (asset.type) {\r\n          case 'image':\r\n            link.as = 'image';\r\n            break;\r\n          case 'font':\r\n            link.as = 'font';\r\n            link.crossOrigin = 'anonymous';\r\n            break;\r\n          case 'style':\r\n            link.as = 'style';\r\n            break;\r\n        }\r\n        \r\n        document.head.appendChild(link);\r\n        \r\n        logger.info(LogCategory.API, 'Asset preloaded');\r\n      } catch (error) {\r\n        logger.error(LogCategory.API, 'Asset preload failed', error as Error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lazy load de imágenes con Intersection Observer\r\n   */\r\n  setupLazyLoading(): void {\r\n    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {\r\n      return;\r\n    }\r\n\r\n    const imageObserver = new IntersectionObserver((entries, observer) => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          const img = entry.target as HTMLImageElement;\r\n          \r\n          if (img.dataset.src) {\r\n            img.src = img.dataset.src;\r\n            img.removeAttribute('data-src');\r\n          }\r\n          \r\n          if (img.dataset.srcset) {\r\n            img.srcset = img.dataset.srcset;\r\n            img.removeAttribute('data-srcset');\r\n          }\r\n          \r\n          img.classList.remove('lazy');\r\n          observer.unobserve(img);\r\n          \r\n          logger.info(LogCategory.API, 'Lazy image loaded');\r\n        }\r\n      });\r\n    }, {\r\n      rootMargin: '50px 0px',\r\n      threshold: 0.01,\r\n    });\r\n\r\n    // Observar todas las imágenes lazy\r\n    document.querySelectorAll('img[data-src]').forEach(img => {\r\n      imageObserver.observe(img);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimiza CSS crítico\r\n   */\r\n  optimizeCriticalCSS(criticalSelectors: string[]): string {\r\n    try {\r\n      // En una implementación real, esto extraería CSS crítico\r\n      // Por ahora, retornamos un placeholder\r\n      const criticalCSS = criticalSelectors\r\n        .map(selector => `${selector} { /* critical styles */ }`)\r\n        .join('\\n');\r\n\r\n      logger.info(LogCategory.API, 'Critical CSS optimized');\r\n\r\n      return criticalCSS;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Critical CSS optimization failed', error as Error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Comprime y optimiza JSON para APIs\r\n   */\r\n  optimizeJsonResponse(data: any): string {\r\n    try {\r\n      // Remover propiedades null/undefined\r\n      const cleaned = this.removeNullValues(data);\r\n      \r\n      // Comprimir JSON (sin espacios)\r\n      const compressed = JSON.stringify(cleaned);\r\n      \r\n      logger.info(LogCategory.API, 'JSON response optimized');\r\n\r\n      return compressed;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'JSON optimization failed', error as Error);\r\n      // En caso de error (como objetos circulares), retornar string simple\r\n      try {\r\n        return JSON.stringify({ error: 'Serialization failed' });\r\n      } catch {\r\n        return '{\"error\":\"Serialization failed\"}';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remueve valores null/undefined de objetos\r\n   */\r\n  private removeNullValues(obj: any): any {\r\n    if (obj === null || obj === undefined) {\r\n      return undefined;\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n      return obj.map(item => this.removeNullValues(item)).filter(item => item !== undefined);\r\n    }\r\n    \r\n    if (typeof obj === 'object') {\r\n      const cleaned: any = {};\r\n      for (const [key, value] of Object.entries(obj)) {\r\n        const cleanedValue = this.removeNullValues(value);\r\n        if (cleanedValue !== undefined) {\r\n          cleaned[key] = cleanedValue;\r\n        }\r\n      }\r\n      return cleaned;\r\n    }\r\n    \r\n    return obj;\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const assetOptimizer = AssetOptimizer.getInstance();\r\n\r\n/**\r\n * Funciones de utilidad para optimización de assets\r\n */\r\nexport const AssetUtils = {\r\n  /**\r\n   * Optimiza imagen de producto\r\n   */\r\n  optimizeProductImage(url: string): string {\r\n    return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES);\r\n  },\r\n\r\n  /**\r\n   * Optimiza icono de pago\r\n   */\r\n  optimizePaymentIcon(url: string): string {\r\n    return assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PAYMENT_ICONS);\r\n  },\r\n\r\n  /**\r\n   * Genera imagen responsiva para productos\r\n   */\r\n  generateProductImageProps(url: string) {\r\n    return {\r\n      src: assetOptimizer.optimizeImageUrl(url, ASSET_CONFIGS.PRODUCT_IMAGES),\r\n      srcSet: assetOptimizer.generateSrcSet(url, ASSET_CONFIGS.PRODUCT_IMAGES),\r\n      sizes: assetOptimizer.generateSizes([\r\n        { condition: '(max-width: 640px)', size: '100vw' },\r\n        { condition: '(max-width: 1024px)', size: '50vw' },\r\n        { condition: '', size: '33vw' },\r\n      ]),\r\n      loading: 'lazy' as const,\r\n      decoding: 'async' as const,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Precarga assets críticos de pago\r\n   */\r\n  preloadPaymentAssets(): void {\r\n    const criticalAssets = [\r\n      { url: '/images/logo/visa.svg', type: 'image' as const },\r\n      { url: '/images/logo/mastercard.svg', type: 'image' as const },\r\n      { url: '/images/logo/mercadopago.svg', type: 'image' as const },\r\n    ];\r\n\r\n    assetOptimizer.preloadCriticalAssets(criticalAssets);\r\n  },\r\n\r\n  /**\r\n   * Inicializa optimizaciones en el cliente\r\n   */\r\n  initializeClientOptimizations(): void {\r\n    if (typeof window === 'undefined') {return;}\r\n\r\n    // Configurar lazy loading\r\n    assetOptimizer.setupLazyLoading();\r\n\r\n    // Precargar assets críticos\r\n    AssetUtils.preloadPaymentAssets();\r\n\r\n    logger.info(LogCategory.API, 'Client asset optimizations initialized');\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["ASSET_CONFIGS","AssetOptimizer","AssetUtils","assetOptimizer","PRODUCT_IMAGES","compress","quality","format","maxWidth","maxHeight","lazy","PAYMENT_ICONS","HERO_IMAGES","AVATARS","getInstance","instance","optimizeImageUrl","originalUrl","config","startsWith","url","URL","hostname","includes","params","URLSearchParams","set","toString","search","error","logger","LogCategory","API","generateSrcSet","baseUrl","sizes","width","suffix","srcSet","filter","size","map","optimizedConfig","join","generateSizes","breakpoints","bp","condition","preloadCriticalAssets","assets","window","forEach","asset","link","document","createElement","rel","href","type","as","crossOrigin","head","appendChild","info","setupLazyLoading","imageObserver","IntersectionObserver","entries","observer","entry","isIntersecting","img","target","dataset","src","removeAttribute","srcset","classList","remove","unobserve","rootMargin","threshold","querySelectorAll","observe","optimizeCriticalCSS","criticalSelectors","criticalCSS","selector","optimizeJsonResponse","data","cleaned","removeNullValues","compressed","JSON","stringify","obj","undefined","Array","isArray","item","key","value","Object","cleanedValue","optimizeProductImage","optimizePaymentIcon","generateProductImageProps","loading","decoding","preloadPaymentAssets","criticalAssets","initializeClientOptimizations"],"mappings":"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"}