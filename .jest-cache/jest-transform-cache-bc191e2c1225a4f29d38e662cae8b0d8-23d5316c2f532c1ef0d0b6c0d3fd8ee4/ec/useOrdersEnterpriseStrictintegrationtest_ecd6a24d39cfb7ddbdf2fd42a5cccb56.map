{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\admin\\useOrdersEnterpriseStrict.integration.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - USEORDERSENTERPRISE INTEGRATION TESTS\n// Tests de integración para el hook principal de órdenes\n// ===================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport { useOrdersEnterpriseStrict } from '@/hooks/admin/useOrdersEnterpriseStrict'\n\n// ===================================\n// MOCKS GLOBALES\n// ===================================\n\n// Mock de fetch\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock de localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(),\n}\nObject.defineProperty(window, 'localStorage', { value: mockLocalStorage })\n\n// Mock de AbortController\nconst mockAbort = jest.fn()\nglobal.AbortController = jest.fn(() => ({\n  abort: mockAbort,\n  signal: { aborted: false },\n})) as any\n\n// ===================================\n// DATOS DE PRUEBA\n// ===================================\n\nconst mockOrdersResponse = {\n  orders: [\n    { id: '1', order_number: 'ORD-001', status: 'pending', total: 100 },\n    { id: '2', order_number: 'ORD-002', status: 'confirmed', total: 200 },\n  ],\n  pagination: { page: 1, totalPages: 5, hasNextPage: true },\n  analytics: { totalOrders: 2, totalRevenue: 300 },\n}\n\nconst initialFilters = {\n  page: 1,\n  limit: 20,\n  sort_by: 'created_at',\n  sort_order: 'desc' as const,\n}\n\nconst options = {\n  autoFetch: true,\n  maxRetries: 3,\n  timeout: 10000,\n  enableCache: true,\n}\n\n// ===================================\n// SETUP Y CLEANUP\n// ===================================\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  mockLocalStorage.getItem.mockReturnValue(null)\n\n  // Mock de respuesta exitosa por defecto\n  mockFetch.mockResolvedValue({\n    ok: true,\n    status: 200,\n    json: jest.fn().mockResolvedValue(mockOrdersResponse),\n    headers: new Headers(),\n    statusText: 'OK',\n  })\n})\n\nafterEach(() => {\n  jest.clearAllTimers()\n})\n\n// ===================================\n// TESTS DE INTEGRACIÓN\n// ===================================\n\ndescribe('useOrdersEnterpriseStrict Integration', () => {\n  it('debe inicializarse correctamente con todos los hooks', () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Verificar estado inicial\n    expect(result.current.orders).toEqual([])\n    expect(result.current.pagination).toBeNull()\n    expect(result.current.analytics).toBeNull()\n    expect(result.current.filters).toEqual(initialFilters)\n    expect(result.current.isLoading).toBe(false)\n    expect(result.current.error).toBeNull()\n\n    // Verificar funciones disponibles\n    expect(result.current.fetchOrders).toBeDefined()\n    expect(result.current.updateFilters).toBeDefined()\n    expect(result.current.refreshOrders).toBeDefined()\n    expect(result.current.clearError).toBeDefined()\n    expect(result.current.retryLastRequest).toBeDefined()\n  })\n\n  it('debe realizar fetch automático al inicializar cuando autoFetch está habilitado', async () => {\n    renderHook(() => useOrdersEnterpriseStrict(initialFilters, { ...options, autoFetch: true }))\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/admin/orders?page=1&limit=20&sort_by=created_at&sort_order=desc',\n        expect.any(Object)\n      )\n    })\n  })\n\n  it('debe NO realizar fetch automático cuando autoFetch está deshabilitado', async () => {\n    renderHook(() => useOrdersEnterpriseStrict(initialFilters, { ...options, autoFetch: false }))\n\n    // Esperar un poco para asegurar que no se haga fetch\n    await new Promise(resolve => setTimeout(resolve, 100))\n\n    expect(mockFetch).not.toHaveBeenCalled()\n  })\n\n  it('debe manejar el flujo completo de fetch exitoso', async () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    await waitFor(() => {\n      expect(result.current.orders).toEqual(mockOrdersResponse.orders)\n      expect(result.current.pagination).toEqual(mockOrdersResponse.pagination)\n      expect(result.current.analytics).toEqual(mockOrdersResponse.analytics)\n      expect(result.current.isLoading).toBe(false)\n      expect(result.current.error).toBeNull()\n    })\n  })\n\n  it('debe manejar errores de fetch correctamente', async () => {\n    const errorMessage = 'Network error'\n    mockFetch.mockRejectedValue(new Error(errorMessage))\n\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy()\n      expect(result.current.error?.message).toBe(errorMessage)\n      expect(result.current.isLoading).toBe(false)\n      expect(result.current.orders).toEqual([])\n    })\n  })\n\n  it('debe usar cache cuando está disponible', async () => {\n    // Configurar cache con datos válidos\n    const cacheData = {\n      data: mockOrdersResponse,\n      timestamp: Date.now() - 30000, // 30 segundos atrás\n      filters: initialFilters,\n    }\n    mockLocalStorage.getItem.mockReturnValue(JSON.stringify(cacheData))\n\n    const { result } = renderHook(() =>\n      useOrdersEnterpriseStrict(initialFilters, { ...options, enableCache: true })\n    )\n\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    // Debe usar datos del cache sin hacer fetch\n    expect(result.current.orders).toEqual(mockOrdersResponse.orders)\n    expect(mockFetch).not.toHaveBeenCalled()\n  })\n\n  it('debe actualizar filtros y refetch automáticamente', async () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    const newFilters = { page: 2, status: 'confirmed' }\n\n    await act(async () => {\n      result.current.updateFilters(newFilters)\n    })\n\n    await waitFor(() => {\n      expect(result.current.filters).toEqual({\n        ...initialFilters,\n        ...newFilters,\n      })\n      expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining('page=2'), expect.any(Object))\n    })\n  })\n\n  it('debe implementar retry logic en caso de fallo', async () => {\n    // Fallar las primeras 2 llamadas, exitosa en la 3ra\n    mockFetch\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: jest.fn().mockResolvedValue(mockOrdersResponse),\n      })\n\n    const { result } = renderHook(() =>\n      useOrdersEnterpriseStrict(initialFilters, { ...options, maxRetries: 3 })\n    )\n\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(3)\n      expect(result.current.orders).toEqual(mockOrdersResponse.orders)\n      expect(result.current.error).toBeNull()\n    })\n  })\n\n  it('debe manejar refresh correctamente', async () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Fetch inicial\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    // Limpiar mocks para el refresh\n    jest.clearAllMocks()\n\n    // Refresh\n    await act(async () => {\n      result.current.refreshOrders()\n    })\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  it('debe limpiar errores correctamente', async () => {\n    mockFetch.mockRejectedValue(new Error('Test error'))\n\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Generar error\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    expect(result.current.error).toBeTruthy()\n\n    // Limpiar error\n    act(() => {\n      result.current.clearError()\n    })\n\n    expect(result.current.error).toBeNull()\n  })\n\n  it('debe implementar retry de último request', async () => {\n    mockFetch.mockRejectedValue(new Error('Network error'))\n\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Fetch que falla\n    await act(async () => {\n      await result.current.fetchOrders()\n    })\n\n    expect(result.current.error).toBeTruthy()\n\n    // Configurar fetch exitoso para retry\n    mockFetch.mockResolvedValue({\n      ok: true,\n      status: 200,\n      json: jest.fn().mockResolvedValue(mockOrdersResponse),\n    })\n\n    // Retry\n    await act(async () => {\n      await result.current.retryLastRequest()\n    })\n\n    await waitFor(() => {\n      expect(result.current.orders).toEqual(mockOrdersResponse.orders)\n      expect(result.current.error).toBeNull()\n    })\n  })\n\n  it('debe abortar requests al desmontar', () => {\n    const { unmount } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Iniciar un request\n    act(() => {\n      // El fetch se inicia automáticamente con autoFetch\n    })\n\n    // Desmontar\n    unmount()\n\n    // Debe haber abortado el request\n    expect(mockAbort).toHaveBeenCalled()\n  })\n\n  it('debe manejar múltiples actualizaciones de filtros sin race conditions', async () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Múltiples actualizaciones rápidas\n    await act(async () => {\n      result.current.updateFilters({ page: 2 })\n      result.current.updateFilters({ page: 3 })\n      result.current.updateFilters({ page: 4 })\n    })\n\n    await waitFor(() => {\n      expect(result.current.filters.page).toBe(4)\n    })\n  })\n\n  it('debe mantener consistencia de estado durante operaciones asíncronas', async () => {\n    const { result } = renderHook(() => useOrdersEnterpriseStrict(initialFilters, options))\n\n    // Iniciar fetch\n    act(() => {\n      result.current.fetchOrders()\n    })\n\n    // Verificar estado de loading\n    expect(result.current.isLoading).toBe(true)\n\n    // Esperar a que termine\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false)\n    })\n\n    // Verificar estado final\n    expect(result.current.orders).toEqual(mockOrdersResponse.orders)\n  })\n})\n"],"names":["mockFetch","jest","fn","global","fetch","mockLocalStorage","getItem","setItem","removeItem","clear","length","key","Object","defineProperty","window","value","mockAbort","AbortController","abort","signal","aborted","mockOrdersResponse","orders","id","order_number","status","total","pagination","page","totalPages","hasNextPage","analytics","totalOrders","totalRevenue","initialFilters","limit","sort_by","sort_order","options","autoFetch","maxRetries","timeout","enableCache","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","json","headers","Headers","statusText","afterEach","clearAllTimers","describe","it","result","renderHook","useOrdersEnterpriseStrict","expect","current","toEqual","toBeNull","filters","isLoading","toBe","error","fetchOrders","toBeDefined","updateFilters","refreshOrders","clearError","retryLastRequest","waitFor","toHaveBeenCalledWith","any","Promise","resolve","setTimeout","not","toHaveBeenCalled","act","errorMessage","mockRejectedValue","Error","toBeTruthy","message","cacheData","data","timestamp","Date","now","JSON","stringify","newFilters","stringContaining","mockRejectedValueOnce","mockResolvedValueOnce","toHaveBeenCalledTimes","unmount"],"mappings":"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"}