{"version":3,"names":["cov_1wu7m4dra0","actualCoverage","s","GET","f","POST","runtime","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","message","InventoryFiltersSchema","_zod","z","object","product_id","string","uuid","optional","variant_id","location","low_stock","boolean","out_of_stock","reserved_only","search","page","coerce","number","min","default","limit","max","sort_by","enum","sort_order","StockAdjustmentSchema","adjustment_type","quantity","int","reason","notes","BulkStockAdjustmentSchema","adjustments","array","ReservationSchema","expires_at","MovementFiltersSchema","movement_type","date_from","date_to","validateAdminAuth","session","_config","auth","user","b","error","status","data","profile","from","select","eq","id","single","includes","role","userId","getInventoryItems","filters","query","lt","rpc","gt","or","count","head","offset","order","ascending","range","Error","processedData","map","item","available_stock","current_stock","reserved_stock","is_low_stock","reorder_point","is_out_of_stock","items","total","totalPages","Math","ceil","adjustStock","adjustment","currentInventory","inventoryError","currentStock","newStock","updateError","update","updated_at","Date","toISOString","movementError","insert","previous_stock","new_stock","user_id","created_at","adjustment_quantity","createReservation","reservation","inventory","availableStock","newReservation","reservationError","reference_id","getStockMovements","gte","lte","movements","getInventoryStats","inventoryData","now","last24h","getTime","last7d","last30d","recentMovements","last_24h","filter","m","length","last_7d","last_30d","movementSummary","reduce","acc","movement","uniqueProducts","Set","uniqueVariants","totalStockValue","sum","cost_per_unit","reservedStockValue","lowStockItems","outOfStockItems","locations","topProductsByValue","product_name","product","name","stock_value","sort","a","slice","total_products","size","total_variants","total_stock_value","low_stock_items","out_of_stock_items","reserved_stock_value","recent_movements","top_products_by_value","movement_summary","request","startTime","rateLimitResult","_ratelimiter","checkRateLimit","success","response","_server","NextResponse","json","addRateLimitHeaders","authResult","errorResponse","searchParams","URL","url","action","get","stats","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","nextResponse","parse","pagination","_logger","logger","log","LogLevel","ERROR","LogCategory","API","floor","body","result","bulkAdjustment","results","push","r"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\inventory\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { checkRateLimit, addRateLimitHeaders } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\nconst RATE_LIMIT_CONFIGS = {\r\n  admin: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    maxRequests: 200,\r\n    message: 'Demasiadas solicitudes de inventario'\r\n  }\r\n};\r\n\r\n// ===================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// ===================================\r\nconst InventoryFiltersSchema = z.object({\r\n  product_id: z.string().uuid().optional(),\r\n  variant_id: z.string().uuid().optional(),\r\n  location: z.string().optional(),\r\n  low_stock: z.boolean().optional(),\r\n  out_of_stock: z.boolean().optional(),\r\n  reserved_only: z.boolean().optional(),\r\n  search: z.string().optional(),\r\n  page: z.coerce.number().min(1).default(1),\r\n  limit: z.coerce.number().min(1).max(100).default(20),\r\n  sort_by: z.enum(['product_name', 'current_stock', 'reserved_stock', 'available_stock', 'updated_at']).default('updated_at'),\r\n  sort_order: z.enum(['asc', 'desc']).default('desc')\r\n});\r\n\r\nconst StockAdjustmentSchema = z.object({\r\n  product_id: z.string().uuid(),\r\n  variant_id: z.string().uuid().optional(),\r\n  location: z.string().default('main'),\r\n  adjustment_type: z.enum(['increase', 'decrease', 'set']),\r\n  quantity: z.number().int().min(0),\r\n  reason: z.string().min(1, 'La razón es requerida'),\r\n  notes: z.string().optional()\r\n});\r\n\r\nconst BulkStockAdjustmentSchema = z.object({\r\n  adjustments: z.array(StockAdjustmentSchema).min(1).max(100),\r\n  reason: z.string().min(1, 'La razón es requerida'),\r\n  notes: z.string().optional()\r\n});\r\n\r\nconst ReservationSchema = z.object({\r\n  product_id: z.string().uuid(),\r\n  variant_id: z.string().uuid().optional(),\r\n  location: z.string().default('main'),\r\n  quantity: z.number().int().min(1),\r\n  reason: z.string().min(1, 'La razón es requerida'),\r\n  expires_at: z.string().optional(),\r\n  notes: z.string().optional()\r\n});\r\n\r\nconst MovementFiltersSchema = z.object({\r\n  product_id: z.string().uuid().optional(),\r\n  variant_id: z.string().uuid().optional(),\r\n  location: z.string().optional(),\r\n  movement_type: z.enum(['adjustment', 'sale', 'return', 'transfer', 'reservation', 'release']).optional(),\r\n  date_from: z.string().optional(),\r\n  date_to: z.string().optional(),\r\n  page: z.coerce.number().min(1).default(1),\r\n  limit: z.coerce.number().min(1).max(100).default(20),\r\n  sort_by: z.enum(['created_at', 'quantity', 'movement_type']).default('created_at'),\r\n  sort_order: z.enum(['asc', 'desc']).default('desc')\r\n});\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  pagination?: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\ninterface InventoryItem {\r\n  id: string;\r\n  product_id: string;\r\n  variant_id?: string;\r\n  location: string;\r\n  current_stock: number;\r\n  reserved_stock: number;\r\n  available_stock: number;\r\n  min_stock_level: number;\r\n  max_stock_level?: number;\r\n  reorder_point: number;\r\n  cost_per_unit?: number;\r\n  last_counted_at?: string;\r\n  updated_at: string;\r\n  product: {\r\n    id: string;\r\n    name: string;\r\n    sku: string;\r\n    image_url?: string;\r\n  };\r\n  variant?: {\r\n    id: string;\r\n    name: string;\r\n    sku: string;\r\n  };\r\n  is_low_stock: boolean;\r\n  is_out_of_stock: boolean;\r\n}\r\n\r\ninterface StockMovement {\r\n  id: string;\r\n  product_id: string;\r\n  variant_id?: string;\r\n  location: string;\r\n  movement_type: 'adjustment' | 'sale' | 'return' | 'transfer' | 'reservation' | 'release';\r\n  quantity: number;\r\n  previous_stock: number;\r\n  new_stock: number;\r\n  reason: string;\r\n  notes?: string;\r\n  reference_id?: string;\r\n  user_id: string;\r\n  created_at: string;\r\n  product: {\r\n    name: string;\r\n    sku: string;\r\n  };\r\n  variant?: {\r\n    name: string;\r\n    sku: string;\r\n  };\r\n  user: {\r\n    full_name: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\ninterface StockReservation {\r\n  id: string;\r\n  product_id: string;\r\n  variant_id?: string;\r\n  location: string;\r\n  quantity: number;\r\n  reason: string;\r\n  notes?: string;\r\n  expires_at?: string;\r\n  status: 'active' | 'expired' | 'released';\r\n  user_id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  product: {\r\n    name: string;\r\n    sku: string;\r\n  };\r\n  variant?: {\r\n    name: string;\r\n    sku: string;\r\n  };\r\n}\r\n\r\ninterface InventoryStats {\r\n  total_products: number;\r\n  total_variants: number;\r\n  total_stock_value: number;\r\n  low_stock_items: number;\r\n  out_of_stock_items: number;\r\n  reserved_stock_value: number;\r\n  locations: string[];\r\n  recent_movements: {\r\n    last_24h: number;\r\n    last_7d: number;\r\n    last_30d: number;\r\n  };\r\n  top_products_by_value: Array<{\r\n    product_id: string;\r\n    product_name: string;\r\n    stock_value: number;\r\n    current_stock: number;\r\n  }>;\r\n  movement_summary: Record<string, number>;\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\nasync function validateAdminAuth() {\r\n  const session = await auth();\r\n  \r\n  if (!session?.user) {\r\n    return { error: 'No autorizado', status: 401 };\r\n  }\r\n\r\n  // Verificar rol de administrador o manager\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', session.user.id)\r\n    .single();\r\n\r\n  if (!['admin', 'manager'].includes(profile?.role)) {\r\n    return { error: 'Acceso denegado', status: 403 };\r\n  }\r\n\r\n  return { userId: session.user.id, role: profile.role };\r\n}\r\n\r\nasync function getInventoryItems(filters: z.infer<typeof InventoryFiltersSchema>) {\r\n  let query = supabase\r\n    .from('inventory')\r\n    .select(`\r\n      *,\r\n      product:products!inventory_product_id_fkey(\r\n        id,\r\n        name,\r\n        sku,\r\n        image_url\r\n      ),\r\n      variant:product_variants!inventory_variant_id_fkey(\r\n        id,\r\n        name,\r\n        sku\r\n      )\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (filters.product_id) {\r\n    query = query.eq('product_id', filters.product_id);\r\n  }\r\n\r\n  if (filters.variant_id) {\r\n    query = query.eq('variant_id', filters.variant_id);\r\n  }\r\n\r\n  if (filters.location) {\r\n    query = query.eq('location', filters.location);\r\n  }\r\n\r\n  if (filters.low_stock) {\r\n    query = query.lt('current_stock', supabase.rpc('get_reorder_point'));\r\n  }\r\n\r\n  if (filters.out_of_stock) {\r\n    query = query.eq('current_stock', 0);\r\n  }\r\n\r\n  if (filters.reserved_only) {\r\n    query = query.gt('reserved_stock', 0);\r\n  }\r\n\r\n  if (filters.search) {\r\n    query = query.or(`product.name.ilike.%${filters.search}%,product.sku.ilike.%${filters.search}%,variant.name.ilike.%${filters.search}%,variant.sku.ilike.%${filters.search}%`);\r\n  }\r\n\r\n  // Contar total\r\n  const { count } = await query.select('*', { count: 'exact', head: true });\r\n\r\n  // Aplicar paginación y ordenamiento\r\n  const offset = (filters.page - 1) * filters.limit;\r\n  query = query\r\n    .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\r\n    .range(offset, offset + filters.limit - 1);\r\n\r\n  const { data, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener inventario: ${error.message}`);\r\n  }\r\n\r\n  // Procesar datos para incluir campos calculados\r\n  const processedData = (data || []).map(item => ({\r\n    ...item,\r\n    available_stock: item.current_stock - item.reserved_stock,\r\n    is_low_stock: item.current_stock <= item.reorder_point,\r\n    is_out_of_stock: item.current_stock === 0\r\n  }));\r\n\r\n  return {\r\n    items: processedData,\r\n    total: count || 0,\r\n    totalPages: Math.ceil((count || 0) / filters.limit)\r\n  };\r\n}\r\n\r\nasync function adjustStock(\r\n  adjustment: z.infer<typeof StockAdjustmentSchema>,\r\n  userId: string\r\n) {\r\n  const { data: currentInventory, error: inventoryError } = await supabase\r\n    .from('inventory')\r\n    .select('current_stock')\r\n    .eq('product_id', adjustment.product_id)\r\n    .eq('location', adjustment.location)\r\n    .eq('variant_id', adjustment.variant_id || null)\r\n    .single();\r\n\r\n  if (inventoryError) {\r\n    throw new Error(`Error al obtener inventario actual: ${inventoryError.message}`);\r\n  }\r\n\r\n  const currentStock = currentInventory.current_stock;\r\n  let newStock: number;\r\n\r\n  switch (adjustment.adjustment_type) {\r\n    case 'increase':\r\n      newStock = currentStock + adjustment.quantity;\r\n      break;\r\n    case 'decrease':\r\n      newStock = Math.max(0, currentStock - adjustment.quantity);\r\n      break;\r\n    case 'set':\r\n      newStock = adjustment.quantity;\r\n      break;\r\n    default:\r\n      throw new Error('Tipo de ajuste inválido');\r\n  }\r\n\r\n  // Actualizar inventario\r\n  const { error: updateError } = await supabase\r\n    .from('inventory')\r\n    .update({ \r\n      current_stock: newStock,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('product_id', adjustment.product_id)\r\n    .eq('location', adjustment.location)\r\n    .eq('variant_id', adjustment.variant_id || null);\r\n\r\n  if (updateError) {\r\n    throw new Error(`Error al actualizar inventario: ${updateError.message}`);\r\n  }\r\n\r\n  // Crear movimiento de stock\r\n  const { error: movementError } = await supabase\r\n    .from('stock_movements')\r\n    .insert({\r\n      product_id: adjustment.product_id,\r\n      variant_id: adjustment.variant_id,\r\n      location: adjustment.location,\r\n      movement_type: 'adjustment',\r\n      quantity: adjustment.adjustment_type === 'decrease' ? -adjustment.quantity : adjustment.quantity,\r\n      previous_stock: currentStock,\r\n      new_stock: newStock,\r\n      reason: adjustment.reason,\r\n      notes: adjustment.notes,\r\n      user_id: userId,\r\n      created_at: new Date().toISOString()\r\n    });\r\n\r\n  if (movementError) {\r\n    throw new Error(`Error al crear movimiento de stock: ${movementError.message}`);\r\n  }\r\n\r\n  return {\r\n    previous_stock: currentStock,\r\n    new_stock: newStock,\r\n    adjustment_quantity: adjustment.quantity\r\n  };\r\n}\r\n\r\nasync function createReservation(\r\n  reservation: z.infer<typeof ReservationSchema>,\r\n  userId: string\r\n) {\r\n  // Verificar stock disponible\r\n  const { data: inventory, error: inventoryError } = await supabase\r\n    .from('inventory')\r\n    .select('current_stock, reserved_stock')\r\n    .eq('product_id', reservation.product_id)\r\n    .eq('location', reservation.location)\r\n    .eq('variant_id', reservation.variant_id || null)\r\n    .single();\r\n\r\n  if (inventoryError) {\r\n    throw new Error(`Error al obtener inventario: ${inventoryError.message}`);\r\n  }\r\n\r\n  const availableStock = inventory.current_stock - inventory.reserved_stock;\r\n  if (availableStock < reservation.quantity) {\r\n    throw new Error(`Stock insuficiente. Disponible: ${availableStock}, Solicitado: ${reservation.quantity}`);\r\n  }\r\n\r\n  // Crear reserva\r\n  const { data: newReservation, error: reservationError } = await supabase\r\n    .from('stock_reservations')\r\n    .insert({\r\n      product_id: reservation.product_id,\r\n      variant_id: reservation.variant_id,\r\n      location: reservation.location,\r\n      quantity: reservation.quantity,\r\n      reason: reservation.reason,\r\n      notes: reservation.notes,\r\n      expires_at: reservation.expires_at,\r\n      status: 'active',\r\n      user_id: userId,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (reservationError) {\r\n    throw new Error(`Error al crear reserva: ${reservationError.message}`);\r\n  }\r\n\r\n  // Actualizar stock reservado\r\n  const { error: updateError } = await supabase\r\n    .from('inventory')\r\n    .update({ \r\n      reserved_stock: inventory.reserved_stock + reservation.quantity,\r\n      updated_at: new Date().toISOString()\r\n    })\r\n    .eq('product_id', reservation.product_id)\r\n    .eq('location', reservation.location)\r\n    .eq('variant_id', reservation.variant_id || null);\r\n\r\n  if (updateError) {\r\n    throw new Error(`Error al actualizar stock reservado: ${updateError.message}`);\r\n  }\r\n\r\n  // Crear movimiento de stock\r\n  await supabase\r\n    .from('stock_movements')\r\n    .insert({\r\n      product_id: reservation.product_id,\r\n      variant_id: reservation.variant_id,\r\n      location: reservation.location,\r\n      movement_type: 'reservation',\r\n      quantity: -reservation.quantity,\r\n      previous_stock: inventory.current_stock,\r\n      new_stock: inventory.current_stock,\r\n      reason: reservation.reason,\r\n      notes: reservation.notes,\r\n      reference_id: newReservation.id,\r\n      user_id: userId,\r\n      created_at: new Date().toISOString()\r\n    });\r\n\r\n  return newReservation;\r\n}\r\n\r\nasync function getStockMovements(filters: z.infer<typeof MovementFiltersSchema>) {\r\n  let query = supabase\r\n    .from('stock_movements')\r\n    .select(`\r\n      *,\r\n      product:products!stock_movements_product_id_fkey(\r\n        name,\r\n        sku\r\n      ),\r\n      variant:product_variants!stock_movements_variant_id_fkey(\r\n        name,\r\n        sku\r\n      ),\r\n      user:profiles!stock_movements_user_id_fkey(\r\n        full_name,\r\n        email\r\n      )\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (filters.product_id) {\r\n    query = query.eq('product_id', filters.product_id);\r\n  }\r\n\r\n  if (filters.variant_id) {\r\n    query = query.eq('variant_id', filters.variant_id);\r\n  }\r\n\r\n  if (filters.location) {\r\n    query = query.eq('location', filters.location);\r\n  }\r\n\r\n  if (filters.movement_type) {\r\n    query = query.eq('movement_type', filters.movement_type);\r\n  }\r\n\r\n  if (filters.date_from) {\r\n    query = query.gte('created_at', filters.date_from);\r\n  }\r\n\r\n  if (filters.date_to) {\r\n    query = query.lte('created_at', filters.date_to);\r\n  }\r\n\r\n  // Contar total\r\n  const { count } = await query.select('*', { count: 'exact', head: true });\r\n\r\n  // Aplicar paginación y ordenamiento\r\n  const offset = (filters.page - 1) * filters.limit;\r\n  query = query\r\n    .order(filters.sort_by, { ascending: filters.sort_order === 'asc' })\r\n    .range(offset, offset + filters.limit - 1);\r\n\r\n  const { data, error } = await query;\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener movimientos de stock: ${error.message}`);\r\n  }\r\n\r\n  return {\r\n    movements: data || [],\r\n    total: count || 0,\r\n    totalPages: Math.ceil((count || 0) / filters.limit)\r\n  };\r\n}\r\n\r\nasync function getInventoryStats(): Promise<InventoryStats> {\r\n  // Obtener estadísticas básicas\r\n  const { data: inventoryData, error } = await supabase\r\n    .from('inventory')\r\n    .select(`\r\n      *,\r\n      product:products!inventory_product_id_fkey(\r\n        name,\r\n        sku\r\n      )\r\n    `);\r\n\r\n  if (error) {\r\n    throw new Error(`Error al obtener estadísticas de inventario: ${error.message}`);\r\n  }\r\n\r\n  const inventory = inventoryData || [];\r\n  const now = new Date();\r\n  const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\r\n  const last7d = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n  const last30d = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n\r\n  // Obtener movimientos recientes\r\n  const { data: movements } = await supabase\r\n    .from('stock_movements')\r\n    .select('created_at, movement_type');\r\n\r\n  const recentMovements = {\r\n    last_24h: (movements || []).filter(m => new Date(m.created_at) >= last24h).length,\r\n    last_7d: (movements || []).filter(m => new Date(m.created_at) >= last7d).length,\r\n    last_30d: (movements || []).filter(m => new Date(m.created_at) >= last30d).length\r\n  };\r\n\r\n  // Resumen de movimientos\r\n  const movementSummary = (movements || []).reduce((acc, movement) => {\r\n    acc[movement.movement_type] = (acc[movement.movement_type] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  // Productos únicos y variantes\r\n  const uniqueProducts = new Set(inventory.map(item => item.product_id));\r\n  const uniqueVariants = inventory.filter(item => item.variant_id).length;\r\n\r\n  // Valor total del stock\r\n  const totalStockValue = inventory.reduce((sum, item) => {\r\n    return sum + (item.current_stock * (item.cost_per_unit || 0));\r\n  }, 0);\r\n\r\n  // Stock reservado\r\n  const reservedStockValue = inventory.reduce((sum, item) => {\r\n    return sum + (item.reserved_stock * (item.cost_per_unit || 0));\r\n  }, 0);\r\n\r\n  // Items con stock bajo y sin stock\r\n  const lowStockItems = inventory.filter(item => item.current_stock <= item.reorder_point).length;\r\n  const outOfStockItems = inventory.filter(item => item.current_stock === 0).length;\r\n\r\n  // Ubicaciones únicas\r\n  const locations = [...new Set(inventory.map(item => item.location))];\r\n\r\n  // Top productos por valor\r\n  const topProductsByValue = inventory\r\n    .map(item => ({\r\n      product_id: item.product_id,\r\n      product_name: item.product.name,\r\n      stock_value: item.current_stock * (item.cost_per_unit || 0),\r\n      current_stock: item.current_stock\r\n    }))\r\n    .sort((a, b) => b.stock_value - a.stock_value)\r\n    .slice(0, 10);\r\n\r\n  return {\r\n    total_products: uniqueProducts.size,\r\n    total_variants: uniqueVariants,\r\n    total_stock_value: totalStockValue,\r\n    low_stock_items: lowStockItems,\r\n    out_of_stock_items: outOfStockItems,\r\n    reserved_stock_value: reservedStockValue,\r\n    locations,\r\n    recent_movements: recentMovements,\r\n    top_products_by_value: topProductsByValue,\r\n    movement_summary: movementSummary\r\n  };\r\n}\r\n\r\n// ===================================\r\n// GET - Obtener inventario\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: RATE_LIMIT_CONFIGS.admin.maxRequests,\r\n        message: RATE_LIMIT_CONFIGS.admin.message\r\n      },\r\n      'admin-inventory'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Parsear parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n\r\n    // Manejar diferentes acciones\r\n    if (action === 'stats') {\r\n      // Obtener estadísticas\r\n      const stats = await getInventoryStats();\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/inventory',\r\n        method: 'GET',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<InventoryStats> = {\r\n        data: stats,\r\n        success: true,\r\n        message: 'Estadísticas de inventario obtenidas exitosamente'\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    if (action === 'movements') {\r\n      // Obtener movimientos de stock\r\n      const filters = MovementFiltersSchema.parse({\r\n        product_id: searchParams.get('product_id'),\r\n        variant_id: searchParams.get('variant_id'),\r\n        location: searchParams.get('location'),\r\n        movement_type: searchParams.get('movement_type'),\r\n        date_from: searchParams.get('date_from'),\r\n        date_to: searchParams.get('date_to'),\r\n        page: searchParams.get('page'),\r\n        limit: searchParams.get('limit'),\r\n        sort_by: searchParams.get('sort_by'),\r\n        sort_order: searchParams.get('sort_order')\r\n      });\r\n\r\n      const { movements, total, totalPages } = await getStockMovements(filters);\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/inventory',\r\n        method: 'GET',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<StockMovement[]> = {\r\n        data: movements,\r\n        success: true,\r\n        message: 'Movimientos de stock obtenidos exitosamente',\r\n        pagination: {\r\n          page: filters.page,\r\n          limit: filters.limit,\r\n          total,\r\n          totalPages\r\n        }\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    // Obtener inventario normal\r\n    const filters = InventoryFiltersSchema.parse({\r\n      product_id: searchParams.get('product_id'),\r\n      variant_id: searchParams.get('variant_id'),\r\n      location: searchParams.get('location'),\r\n      low_stock: searchParams.get('low_stock') === 'true',\r\n      out_of_stock: searchParams.get('out_of_stock') === 'true',\r\n      reserved_only: searchParams.get('reserved_only') === 'true',\r\n      search: searchParams.get('search'),\r\n      page: searchParams.get('page'),\r\n      limit: searchParams.get('limit'),\r\n      sort_by: searchParams.get('sort_by'),\r\n      sort_order: searchParams.get('sort_order')\r\n    });\r\n\r\n    const { items, total, totalPages } = await getInventoryItems(filters);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/inventory',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.userId\r\n    });\r\n\r\n    const response: ApiResponse<InventoryItem[]> = {\r\n      data: items,\r\n      success: true,\r\n      message: 'Inventario obtenido exitosamente',\r\n      pagination: {\r\n        page: filters.page,\r\n        limit: filters.limit,\r\n        total,\r\n        totalPages\r\n      }\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    addRateLimitHeaders(nextResponse, rateLimitResult);\r\n    return nextResponse;\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/inventory', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/inventory',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Ajustar stock o crear reserva\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: Math.floor(RATE_LIMIT_CONFIGS.admin.maxRequests / 2),\r\n        message: 'Demasiadas operaciones de inventario'\r\n      },\r\n      'admin-inventory-modify'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      addRateLimitHeaders(response, rateLimitResult);\r\n      return response;\r\n    }\r\n\r\n    // Validar autenticación admin\r\n    const authResult = await validateAdminAuth();\r\n    if (authResult.error) {\r\n      const errorResponse: ApiResponse<null> = {\r\n        data: null,\r\n        success: false,\r\n        error: authResult.error,\r\n      };\r\n      return NextResponse.json(errorResponse, { status: authResult.status });\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const { action } = body;\r\n\r\n    if (action === 'adjust_stock') {\r\n      // Ajuste de stock individual\r\n      const adjustment = StockAdjustmentSchema.parse(body);\r\n      const result = await adjustStock(adjustment, authResult.userId!);\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/inventory',\r\n        method: 'POST',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<typeof result> = {\r\n        data: result,\r\n        success: true,\r\n        message: 'Stock ajustado exitosamente'\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    if (action === 'bulk_adjust') {\r\n      // Ajuste masivo de stock\r\n      const bulkAdjustment = BulkStockAdjustmentSchema.parse(body);\r\n      const results = [];\r\n\r\n      for (const adjustment of bulkAdjustment.adjustments) {\r\n        try {\r\n          const result = await adjustStock({\r\n            ...adjustment,\r\n            reason: bulkAdjustment.reason,\r\n            notes: bulkAdjustment.notes\r\n          }, authResult.userId!);\r\n          results.push({ ...adjustment, result, success: true });\r\n        } catch (error) {\r\n          results.push({ \r\n            ...adjustment, \r\n            error: error instanceof Error ? error.message : 'Error desconocido',\r\n            success: false \r\n          });\r\n        }\r\n      }\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/inventory',\r\n        method: 'POST',\r\n        statusCode: 200,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<typeof results> = {\r\n        data: results,\r\n        success: true,\r\n        message: `Ajuste masivo completado. ${results.filter(r => r.success).length}/${results.length} exitosos`\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response);\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    if (action === 'create_reservation') {\r\n      // Crear reserva de stock\r\n      const reservation = ReservationSchema.parse(body);\r\n      const result = await createReservation(reservation, authResult.userId!);\r\n\r\n      // Registrar métricas\r\n      metricsCollector.recordApiCall({\r\n        endpoint: '/api/admin/inventory',\r\n        method: 'POST',\r\n        statusCode: 201,\r\n        responseTime: Date.now() - startTime,\r\n        userId: authResult.userId\r\n      });\r\n\r\n      const response: ApiResponse<typeof result> = {\r\n        data: result,\r\n        success: true,\r\n        message: 'Reserva de stock creada exitosamente'\r\n      };\r\n\r\n      const nextResponse = NextResponse.json(response, { status: 201 });\r\n      addRateLimitHeaders(nextResponse, rateLimitResult);\r\n      return nextResponse;\r\n    }\r\n\r\n    // Acción no válida\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: 'Acción no válida. Acciones disponibles: adjust_stock, bulk_adjust, create_reservation',\r\n    };\r\n    return NextResponse.json(errorResponse, { status: 400 });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/inventory', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/inventory',\r\n      method: 'POST',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error interno del servidor',\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}