{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\utils\\test-utils.tsx"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - TEST UTILITIES\r\n// ===================================\r\n\r\nimport React, { ReactElement } from 'react';\r\nimport { render, RenderOptions } from '@testing-library/react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\n\r\n// ===================================\r\n// QUERY CLIENT PARA TESTS\r\n// ===================================\r\n\r\n/**\r\n * Crear QueryClient optimizado para tests\r\n * - Sin retry para tests más rápidos\r\n * - Sin cache para tests aislados\r\n * - Sin DevTools para evitar warnings\r\n */\r\nexport const createTestQueryClient = () => new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      retry: false,\r\n      gcTime: 0,\r\n      staleTime: 0,\r\n    },\r\n    mutations: {\r\n      retry: false,\r\n    },\r\n  },\r\n  logger: {\r\n    log: () => {},\r\n    warn: () => {},\r\n    error: () => {},\r\n  },\r\n});\r\n\r\n// ===================================\r\n// WRAPPER PROVIDERS PARA TESTS\r\n// ===================================\r\n\r\ninterface AllTheProvidersProps {\r\n  children: React.ReactNode;\r\n  queryClient?: QueryClient;\r\n}\r\n\r\n/**\r\n * Wrapper que incluye todos los providers necesarios para tests\r\n */\r\nexport const AllTheProviders: React.FC<AllTheProvidersProps> = ({ \r\n  children, \r\n  queryClient = createTestQueryClient() \r\n}) => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\n// ===================================\r\n// CUSTOM RENDER FUNCTION\r\n// ===================================\r\n\r\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\r\n  queryClient?: QueryClient;\r\n}\r\n\r\n/**\r\n * Custom render function que incluye automáticamente los providers\r\n */\r\nexport const renderWithProviders = (\r\n  ui: ReactElement,\r\n  options: CustomRenderOptions = {}\r\n) => {\r\n  const { queryClient, ...renderOptions } = options;\r\n  \r\n  const Wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\r\n    <AllTheProviders queryClient={queryClient}>\r\n      {children}\r\n    </AllTheProviders>\r\n  );\r\n\r\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\r\n};\r\n\r\n// ===================================\r\n// HOOK TESTING UTILITIES\r\n// ===================================\r\n\r\n/**\r\n * Wrapper para testing de hooks que requieren QueryClient\r\n */\r\nexport const createHookWrapper = (queryClient?: QueryClient) => {\r\n  const client = queryClient || createTestQueryClient();\r\n  \r\n  return ({ children }: { children: React.ReactNode }) => (\r\n    <QueryClientProvider client={client}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\n// ===================================\r\n// MOCK UTILITIES\r\n// ===================================\r\n\r\n/**\r\n * Mock de localStorage para tests\r\n */\r\nexport const createMockLocalStorage = () => {\r\n  const store: Record<string, string> = {};\r\n  \r\n  return {\r\n    getItem: jest.fn((key: string) => store[key] || null),\r\n    setItem: jest.fn((key: string, value: string) => {\r\n      store[key] = value;\r\n    }),\r\n    removeItem: jest.fn((key: string) => {\r\n      delete store[key];\r\n    }),\r\n    clear: jest.fn(() => {\r\n      Object.keys(store).forEach(key => delete store[key]);\r\n    }),\r\n    length: Object.keys(store).length,\r\n    key: jest.fn((index: number) => Object.keys(store)[index] || null),\r\n  };\r\n};\r\n\r\n/**\r\n * Mock de sessionStorage para tests\r\n */\r\nexport const createMockSessionStorage = () => createMockLocalStorage();\r\n\r\n// ===================================\r\n// ASYNC UTILITIES\r\n// ===================================\r\n\r\n/**\r\n * Utility para esperar a que TanStack Query complete las operaciones\r\n */\r\nexport const waitForQueryToSettle = async (queryClient: QueryClient) => {\r\n  await queryClient.getQueryCache().clear();\r\n  await queryClient.getMutationCache().clear();\r\n};\r\n\r\n/**\r\n * Utility para limpiar el estado de TanStack Query entre tests\r\n */\r\nexport const cleanupQueryClient = (queryClient: QueryClient) => {\r\n  queryClient.clear();\r\n  queryClient.getQueryCache().clear();\r\n  queryClient.getMutationCache().clear();\r\n};\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\n// Re-export everything from React Testing Library\r\nexport * from '@testing-library/react';\r\n\r\n// Override render method\r\nexport { renderWithProviders as render };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["AllTheProviders","cleanupQueryClient","createHookWrapper","createMockLocalStorage","createMockSessionStorage","createTestQueryClient","render","renderWithProviders","waitForQueryToSettle","QueryClient","defaultOptions","queries","retry","gcTime","staleTime","mutations","logger","log","warn","error","children","queryClient","QueryClientProvider","client","ui","options","renderOptions","Wrapper","wrapper","store","getItem","jest","fn","key","setItem","value","removeItem","clear","Object","keys","forEach","length","index","getQueryCache","getMutationCache"],"mappings":"AAAA,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;;;;;;;;;;;;QA8CzBA;eAAAA;;QAoGAC;eAAAA;;QAxDAC;eAAAA;;QAiBAC;eAAAA;;QAsBAC;eAAAA;;QAjHAC;eAAAA;;QAgJmBC;eAAvBC;;QA5FIA;eAAAA;;QAsEAC;eAAAA;;;;8DAxIuB;qCACE;4BACW;;;;;;;;;;;;;;;;;;;AAY1C,MAAMH,wBAAwB,IAAM,IAAII,uBAAW,CAAC;QACzDC,gBAAgB;YACdC,SAAS;gBACPC,OAAO;gBACPC,QAAQ;gBACRC,WAAW;YACb;YACAC,WAAW;gBACTH,OAAO;YACT;QACF;QACAI,QAAQ;YACNC,KAAK,KAAO;YACZC,MAAM,KAAO;YACbC,OAAO,KAAO;QAChB;IACF;AAcO,MAAMnB,kBAAkD,CAAC,EAC9DoB,QAAQ,EACRC,cAAchB,uBAAuB,EACtC;IACC,qBACE,qBAACiB,+BAAmB;QAACC,QAAQF;kBAC1BD;;AAGP;AAaO,MAAMb,sBAAsB,CACjCiB,IACAC,UAA+B,CAAC,CAAC;IAEjC,MAAM,EAAEJ,WAAW,EAAE,GAAGK,eAAe,GAAGD;IAE1C,MAAME,UAAmD,CAAC,EAAEP,QAAQ,EAAE,iBACpE,qBAACpB;YAAgBqB,aAAaA;sBAC3BD;;IAIL,OAAOd,IAAAA,cAAM,EAACkB,IAAI;QAAEI,SAASD;QAAS,GAAGD,aAAa;IAAC;AACzD;AASO,MAAMxB,oBAAoB,CAACmB;IAChC,MAAME,SAASF,eAAehB;IAE9B,OAAO,CAAC,EAAEe,QAAQ,EAAiC,iBACjD,qBAACE,+BAAmB;YAACC,QAAQA;sBAC1BH;;AAGP;AASO,MAAMjB,yBAAyB;IACpC,MAAM0B,QAAgC,CAAC;IAEvC,OAAO;QACLC,SAASC,KAAKC,EAAE,CAAC,CAACC,MAAgBJ,KAAK,CAACI,IAAI,IAAI;QAChDC,SAASH,KAAKC,EAAE,CAAC,CAACC,KAAaE;YAC7BN,KAAK,CAACI,IAAI,GAAGE;QACf;QACAC,YAAYL,KAAKC,EAAE,CAAC,CAACC;YACnB,OAAOJ,KAAK,CAACI,IAAI;QACnB;QACAI,OAAON,KAAKC,EAAE,CAAC;YACbM,OAAOC,IAAI,CAACV,OAAOW,OAAO,CAACP,CAAAA,MAAO,OAAOJ,KAAK,CAACI,IAAI;QACrD;QACAQ,QAAQH,OAAOC,IAAI,CAACV,OAAOY,MAAM;QACjCR,KAAKF,KAAKC,EAAE,CAAC,CAACU,QAAkBJ,OAAOC,IAAI,CAACV,MAAM,CAACa,MAAM,IAAI;IAC/D;AACF;AAKO,MAAMtC,2BAA2B,IAAMD;AASvC,MAAMK,uBAAuB,OAAOa;IACzC,MAAMA,YAAYsB,aAAa,GAAGN,KAAK;IACvC,MAAMhB,YAAYuB,gBAAgB,GAAGP,KAAK;AAC5C;AAKO,MAAMpC,qBAAqB,CAACoB;IACjCA,YAAYgB,KAAK;IACjBhB,YAAYsB,aAAa,GAAGN,KAAK;IACjChB,YAAYuB,gBAAgB,GAAGP,KAAK;AACtC"}