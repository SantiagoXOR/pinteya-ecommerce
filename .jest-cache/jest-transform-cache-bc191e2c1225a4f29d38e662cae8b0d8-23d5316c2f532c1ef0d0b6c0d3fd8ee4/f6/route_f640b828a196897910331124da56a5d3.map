{"version":3,"names":["cov_kby4pu8de","actualCoverage","s","GET","f","POST","runtime","request","session","_auth","auth","user","id","b","_server","NextResponse","json","error","status","userId","body","driverId","orderId","currentLocation","supabase","_server1","createClient","data","driverData","driverError","from","select","eq","single","orderData","orderError","locationError","upsert","driver_id","order_id","latitude","lat","longitude","lng","speed","heading","accuracy","timestamp","Date","toISOString","updated_at","onConflict","console","historyError","insert","estimatedArrival","averageSpeed","Math","max","estimatedMinutes","now","update","estimated_delivery_time","sendCustomerNotification","customer_id","success","message","customerId","customerData","toLocaleTimeString","user_id","title","type","created_at","url","URL","searchParams","get","locationData","lastUpdate"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\driver\\tracking\\update\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n/**\r\n * API para actualizar el tracking en tiempo real de drivers\r\n * Maneja ubicaciones, progreso de entregas y notificaciones a clientes\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/lib/auth';\r\n\r\ninterface TrackingUpdateRequest {\r\n  driverId: string;\r\n  orderId: string;\r\n  currentLocation: { lat: number; lng: number };\r\n  timestamp: Date;\r\n  speed: number;\r\n  heading: number;\r\n  accuracy: number;\r\n  status: 'en_route' | 'arrived' | 'delayed' | 'offline';\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    const body: TrackingUpdateRequest = await request.json();\r\n    \r\n    // Validar datos requeridos\r\n    if (!body.driverId || !body.orderId || !body.currentLocation) {\r\n      return NextResponse.json(\r\n        { error: 'Datos de tracking incompletos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que el usuario es el driver autorizado\r\n    const { data: driverData, error: driverError } = await supabase\r\n      .from('drivers')\r\n      .select('id, user_id')\r\n      .eq('id', body.driverId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (driverError || !driverData) {\r\n      return NextResponse.json(\r\n        { error: 'Driver no encontrado o no autorizado' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la orden existe y está asignada al driver\r\n    const { data: orderData, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, customer_id, delivery_address')\r\n      .eq('id', body.orderId)\r\n      .eq('driver_id', body.driverId)\r\n      .single();\r\n\r\n    if (orderError || !orderData) {\r\n      return NextResponse.json(\r\n        { error: 'Orden no encontrada o no asignada al driver' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Insertar/actualizar ubicación del driver\r\n    const { error: locationError } = await supabase\r\n      .from('driver_locations')\r\n      .upsert({\r\n        driver_id: body.driverId,\r\n        order_id: body.orderId,\r\n        latitude: body.currentLocation.lat,\r\n        longitude: body.currentLocation.lng,\r\n        speed: body.speed,\r\n        heading: body.heading,\r\n        accuracy: body.accuracy,\r\n        status: body.status,\r\n        timestamp: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      }, {\r\n        onConflict: 'driver_id,order_id'\r\n      });\r\n\r\n    if (locationError) {\r\n      console.error('Error updating driver location:', locationError);\r\n      return NextResponse.json(\r\n        { error: 'Error actualizando ubicación' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Insertar historial de tracking\r\n    const { error: historyError } = await supabase\r\n      .from('tracking_history')\r\n      .insert({\r\n        driver_id: body.driverId,\r\n        order_id: body.orderId,\r\n        latitude: body.currentLocation.lat,\r\n        longitude: body.currentLocation.lng,\r\n        speed: body.speed,\r\n        heading: body.heading,\r\n        accuracy: body.accuracy,\r\n        status: body.status,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n    if (historyError) {\r\n      console.error('Error inserting tracking history:', historyError);\r\n      // No retornar error, el historial es opcional\r\n    }\r\n\r\n    // Calcular ETA estimado basado en distancia y velocidad\r\n    let estimatedArrival = null;\r\n    if (body.speed > 0) {\r\n      // Aquí podrías integrar con Google Maps Distance Matrix API\r\n      // Por ahora, usamos una estimación simple\r\n      const averageSpeed = Math.max(body.speed, 30); // km/h mínimo\r\n      const estimatedMinutes = 15; // Estimación base\r\n      estimatedArrival = new Date(Date.now() + estimatedMinutes * 60 * 1000);\r\n    }\r\n\r\n    // Actualizar ETA en la orden si es necesario\r\n    if (estimatedArrival && body.status === 'en_route') {\r\n      await supabase\r\n        .from('orders')\r\n        .update({\r\n          estimated_delivery_time: estimatedArrival.toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', body.orderId);\r\n    }\r\n\r\n    // Enviar notificación al cliente si hay cambios significativos\r\n    if (body.status === 'arrived' || body.status === 'delayed') {\r\n      await sendCustomerNotification(\r\n        orderData.customer_id,\r\n        body.orderId,\r\n        body.status,\r\n        estimatedArrival\r\n      );\r\n    }\r\n\r\n    // Respuesta exitosa\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Tracking actualizado correctamente',\r\n      data: {\r\n        driverId: body.driverId,\r\n        orderId: body.orderId,\r\n        status: body.status,\r\n        timestamp: new Date().toISOString(),\r\n        estimatedArrival: estimatedArrival?.toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in tracking update:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Función auxiliar para enviar notificaciones a clientes\r\nasync function sendCustomerNotification(\r\n  customerId: string,\r\n  orderId: string,\r\n  status: string,\r\n  estimatedArrival: Date | null\r\n) {\r\n  try {\r\n    const supabase = await createClient();\r\n\r\n    // Obtener información del cliente\r\n    const { data: customerData } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, phone')\r\n      .eq('user_id', customerId)\r\n      .single();\r\n\r\n    if (!customerData) return;\r\n\r\n    let message = '';\r\n    switch (status) {\r\n      case 'arrived':\r\n        message = `¡Tu pedido #${orderId} ha llegado! El driver está en tu ubicación.`;\r\n        break;\r\n      case 'delayed':\r\n        message = `Tu pedido #${orderId} se ha retrasado. ${estimatedArrival ? `Nueva hora estimada: ${estimatedArrival.toLocaleTimeString('es-ES')}` : 'Te notificaremos cuando esté cerca.'}`;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    // Insertar notificación en la base de datos\r\n    await supabase\r\n      .from('notifications')\r\n      .insert({\r\n        user_id: customerId,\r\n        title: 'Actualización de entrega',\r\n        message,\r\n        type: 'delivery_update',\r\n        data: {\r\n          orderId,\r\n          status,\r\n          estimatedArrival: estimatedArrival?.toISOString()\r\n        },\r\n        created_at: new Date().toISOString()\r\n      });\r\n\r\n    // Aquí podrías integrar con servicios de email/SMS\r\n    // Por ejemplo: SendGrid, Twilio, etc.\r\n\r\n  } catch (error) {\r\n    console.error('Error sending customer notification:', error);\r\n  }\r\n}\r\n\r\n// Endpoint para obtener ubicación actual del driver\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { userId } = await auth();\r\n    \r\n    if (!userId) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const url = new URL(request.url);\r\n    const driverId = url.searchParams.get('driverId');\r\n    const orderId = url.searchParams.get('orderId');\r\n\r\n    if (!driverId || !orderId) {\r\n      return NextResponse.json(\r\n        { error: 'Driver ID y Order ID requeridos' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener ubicación actual del driver\r\n    const { data: locationData, error } = await supabase\r\n      .from('driver_locations')\r\n      .select('*')\r\n      .eq('driver_id', driverId)\r\n      .eq('order_id', orderId)\r\n      .single();\r\n\r\n    if (error || !locationData) {\r\n      return NextResponse.json(\r\n        { error: 'Ubicación no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        driverId: locationData.driver_id,\r\n        orderId: locationData.order_id,\r\n        currentLocation: {\r\n          lat: locationData.latitude,\r\n          lng: locationData.longitude\r\n        },\r\n        speed: locationData.speed,\r\n        heading: locationData.heading,\r\n        accuracy: locationData.accuracy,\r\n        status: locationData.status,\r\n        timestamp: locationData.timestamp,\r\n        lastUpdate: locationData.updated_at\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error getting driver location:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}