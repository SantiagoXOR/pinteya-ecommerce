{"version":3,"names":["AutomatedTestFramework","constructor","testName","description","options","cov_1ny1n29570","f","s","screenshotCounter","testId","_uuid","v4","timestamp","Date","toISOString","reportsDir","b","_path","default","join","process","cwd","screenshotsDir","report","id","name","startTime","status","steps","summary","totalSteps","successfulSteps","failedSteps","criticalErrors","warnings","environment","userAgent","navigator","metadata","testVersion","framework","executedBy","tags","executeStep","action","stepId","now","console","log","result","success","screenshot","captureScreenshot","error","Error","message","String","duration","step","toString","substring","undefined","details","expectedResult","actualDuration","category","severity","push","updateSummary","filename","_fs","promises","mkdir","recursive","replace","screenshotPath","screenshotData","writeFile","finishTest","endTime","getTime","reportPath","generateReport","reportFilename","toLowerCase","JSON","stringify","getReport","setEnvironment","env","addMetadata","logAction","data","logged"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-test-framework.ts"],"sourcesContent":["import { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface TestStep {\r\n  id: string;\r\n  description: string;\r\n  action: string;\r\n  timestamp: string;\r\n  duration: number;\r\n  success: boolean;\r\n  screenshot?: string | undefined;\r\n  details: any;\r\n  category: 'setup' | 'action' | 'verification' | 'cleanup';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport interface TestReport {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  startTime: string;\r\n  endTime?: string;\r\n  duration?: number;\r\n  status: 'running' | 'completed' | 'failed' | 'cancelled';\r\n  steps: TestStep[];\r\n  summary: {\r\n    totalSteps: number;\r\n    successfulSteps: number;\r\n    failedSteps: number;\r\n    criticalErrors: number;\r\n    warnings: number;\r\n  };\r\n  environment: {\r\n    browser?: string;\r\n    viewport?: { width: number; height: number };\r\n    userAgent?: string;\r\n    url?: string;\r\n  };\r\n  metadata: {\r\n    testVersion: string;\r\n    framework: string;\r\n    executedBy: string;\r\n    tags: string[];\r\n  };\r\n}\r\n\r\nexport class AutomatedTestFramework {\r\n  private report: TestReport;\r\n  private screenshotCounter: number = 0;\r\n  private reportsDir: string;\r\n  private screenshotsDir: string;\r\n\r\n  constructor(testName: string, description: string, options?: {\r\n    reportsDir?: string;\r\n    screenshotsDir?: string;\r\n    tags?: string[];\r\n  }) {\r\n    const testId = uuidv4();\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    this.reportsDir = options?.reportsDir || path.join(process.cwd(), 'test-reports');\r\n    this.screenshotsDir = options?.screenshotsDir || path.join(process.cwd(), 'test-screenshots');\r\n    \r\n    this.report = {\r\n      id: testId,\r\n      name: testName,\r\n      description,\r\n      startTime: timestamp,\r\n      status: 'running',\r\n      steps: [],\r\n      summary: {\r\n        totalSteps: 0,\r\n        successfulSteps: 0,\r\n        failedSteps: 0,\r\n        criticalErrors: 0,\r\n        warnings: 0\r\n      },\r\n      environment: {\r\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js Environment'\r\n      },\r\n      metadata: {\r\n        testVersion: '1.0.0',\r\n        framework: 'AutomatedTestFramework',\r\n        executedBy: 'System',\r\n        tags: options?.tags || []\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un paso del test con documentaci√≥n autom√°tica\r\n   */\r\n  async executeStep(\r\n    description: string,\r\n    action: () => Promise<any>,\r\n    options?: {\r\n      category?: TestStep['category'];\r\n      severity?: TestStep['severity'];\r\n      captureScreenshot?: boolean;\r\n      expectedResult?: any;\r\n    }\r\n  ): Promise<any> {\r\n    const stepId = uuidv4();\r\n    const startTime = Date.now();\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    console.log(`üîÑ Ejecutando paso: ${description}`);\r\n    \r\n    let result: any;\r\n    let success = false;\r\n    let screenshot: string | undefined;\r\n    \r\n    try {\r\n      // Capturar screenshot antes de la acci√≥n si es requerido\r\n      if (options?.captureScreenshot) {\r\n        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-before`, description);\r\n      }\r\n      \r\n      // Ejecutar la acci√≥n\r\n      result = await action();\r\n      success = true;\r\n      \r\n      console.log(`‚úÖ Paso completado exitosamente: ${description}`);\r\n      \r\n    } catch (error) {\r\n      success = false;\r\n      result = { error: error instanceof Error ? error.message : String(error) };\r\n      console.error(`‚ùå Error en paso: ${description}`, error);\r\n      \r\n      // Capturar screenshot en caso de error\r\n      if (!screenshot) {\r\n        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-error`, `Error: ${description}`);\r\n      }\r\n    }\r\n    \r\n    const duration = Date.now() - startTime;\r\n    \r\n    const step: TestStep = {\r\n      id: stepId,\r\n      description,\r\n      action: action.toString().substring(0, 200) + '...',\r\n      timestamp,\r\n      duration,\r\n      success,\r\n      screenshot: screenshot || undefined,\r\n      details: {\r\n        result,\r\n        expectedResult: options?.expectedResult,\r\n        actualDuration: duration\r\n      },\r\n      category: options?.category || 'action',\r\n      severity: options?.severity || 'medium'\r\n    };\r\n    \r\n    this.report.steps.push(step);\r\n    this.updateSummary(step);\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Captura una screenshot con timestamp\r\n   */\r\n  private async captureScreenshot(filename: string, description: string): Promise<string> {\r\n    try {\r\n      // Asegurar que el directorio existe\r\n      await fs.mkdir(this.screenshotsDir, { recursive: true });\r\n      \r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const screenshotPath = path.join(this.screenshotsDir, `${timestamp}-${filename}.png`);\r\n      \r\n      // En un entorno real, aqu√≠ se capturar√≠a la screenshot\r\n      // Por ahora, creamos un archivo placeholder\r\n      const screenshotData = `Screenshot captured at ${new Date().toISOString()}\\nDescription: ${description}\\nFilename: ${filename}`;\r\n      await fs.writeFile(screenshotPath.replace('.png', '.txt'), screenshotData);\r\n      \r\n      console.log(`üì∏ Screenshot capturada: ${screenshotPath}`);\r\n      return screenshotPath;\r\n      \r\n    } catch (error) {\r\n      console.error('Error capturando screenshot:', error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza el resumen del reporte\r\n   */\r\n  private updateSummary(step: TestStep): void {\r\n    this.report.summary.totalSteps++;\r\n    \r\n    if (step.success) {\r\n      this.report.summary.successfulSteps++;\r\n    } else {\r\n      this.report.summary.failedSteps++;\r\n      \r\n      if (step.severity === 'critical') {\r\n        this.report.summary.criticalErrors++;\r\n      } else if (step.severity === 'high') {\r\n        this.report.summary.warnings++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finaliza el test y genera el reporte\r\n   */\r\n  async finishTest(status: 'completed' | 'failed' | 'cancelled' = 'completed'): Promise<string> {\r\n    const endTime = new Date().toISOString();\r\n    const startTime = new Date(this.report.startTime).getTime();\r\n    const duration = Date.now() - startTime;\r\n    \r\n    this.report.endTime = endTime;\r\n    this.report.duration = duration;\r\n    this.report.status = status;\r\n    \r\n    // Generar reporte final\r\n    const reportPath = await this.generateReport();\r\n    \r\n    console.log(`üìä Test finalizado con estado: ${status}`);\r\n    console.log(`üìÑ Reporte generado: ${reportPath}`);\r\n    console.log(`‚è±Ô∏è  Duraci√≥n total: ${duration}ms`);\r\n    console.log(`üìà Resumen: ${this.report.summary.successfulSteps}/${this.report.summary.totalSteps} pasos exitosos`);\r\n    \r\n    return reportPath;\r\n  }\r\n\r\n  /**\r\n   * Genera el archivo de reporte JSON\r\n   */\r\n  private async generateReport(): Promise<string> {\r\n    try {\r\n      // Asegurar que el directorio existe\r\n      await fs.mkdir(this.reportsDir, { recursive: true });\r\n      \r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const reportFilename = `${this.report.name.replace(/\\s+/g, '-').toLowerCase()}-${timestamp}.json`;\r\n      const reportPath = path.join(this.reportsDir, reportFilename);\r\n      \r\n      // Escribir el reporte\r\n      await fs.writeFile(reportPath, JSON.stringify(this.report, null, 2));\r\n      \r\n      return reportPath;\r\n      \r\n    } catch (error) {\r\n      console.error('Error generando reporte:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el reporte actual\r\n   */\r\n  getReport(): TestReport {\r\n    return { ...this.report };\r\n  }\r\n\r\n  /**\r\n   * Agrega informaci√≥n del entorno\r\n   */\r\n  setEnvironment(env: Partial<TestReport['environment']>): void {\r\n    this.report.environment = { ...this.report.environment, ...env };\r\n  }\r\n\r\n  /**\r\n   * Agrega metadatos adicionales\r\n   */\r\n  addMetadata(metadata: Partial<TestReport['metadata']>): void {\r\n    this.report.metadata = { ...this.report.metadata, ...metadata };\r\n  }\r\n\r\n  /**\r\n   * Agrega un log personalizado\r\n   */\r\n  async logAction(message: string, data?: any): Promise<void> {\r\n    console.log(`üìù ${message}`, data || '');\r\n    \r\n    // Agregar como paso de documentaci√≥n\r\n    await this.executeStep(\r\n      `Log: ${message}`,\r\n      async () => ({ logged: true, data }),\r\n      { category: 'setup', severity: 'low' }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}