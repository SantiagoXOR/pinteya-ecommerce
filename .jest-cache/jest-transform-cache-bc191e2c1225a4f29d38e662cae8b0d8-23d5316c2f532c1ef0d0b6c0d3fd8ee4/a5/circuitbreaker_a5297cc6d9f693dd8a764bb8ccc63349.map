{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\integrations\\mercadopago\\circuit-breaker.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CIRCUIT BREAKER PATTERN ENTERPRISE\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// Estados del Circuit Breaker\r\nexport enum CircuitBreakerState {\r\n  CLOSED = 'CLOSED',     // Funcionamiento normal\r\n  OPEN = 'OPEN',         // Circuito abierto, rechaza requests\r\n  HALF_OPEN = 'HALF_OPEN' // Probando si el servicio se recuperó\r\n}\r\n\r\n// Configuración del Circuit Breaker\r\nexport interface CircuitBreakerConfig {\r\n  failureThreshold: number;      // Número de fallos para abrir el circuito\r\n  recoveryTimeout: number;       // Tiempo antes de intentar recuperación (ms)\r\n  monitoringWindow: number;      // Ventana de monitoreo para contar fallos (ms)\r\n  halfOpenMaxCalls: number;      // Máximo de llamadas en estado HALF_OPEN\r\n  successThreshold: number;      // Éxitos necesarios para cerrar el circuito\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const CIRCUIT_BREAKER_CONFIGS = {\r\n  MERCADOPAGO_CRITICAL: {\r\n    failureThreshold: 5,\r\n    recoveryTimeout: 60000,      // 1 minuto\r\n    monitoringWindow: 120000,    // 2 minutos\r\n    halfOpenMaxCalls: 3,\r\n    successThreshold: 2\r\n  },\r\n  MERCADOPAGO_STANDARD: {\r\n    failureThreshold: 3,\r\n    recoveryTimeout: 30000,      // 30 segundos\r\n    monitoringWindow: 60000,     // 1 minuto\r\n    halfOpenMaxCalls: 2,\r\n    successThreshold: 1\r\n  },\r\n  WEBHOOK_PROCESSING: {\r\n    failureThreshold: 10,\r\n    recoveryTimeout: 15000,      // 15 segundos\r\n    monitoringWindow: 30000,     // 30 segundos\r\n    halfOpenMaxCalls: 5,\r\n    successThreshold: 3\r\n  }\r\n} as const;\r\n\r\n// Métricas del Circuit Breaker\r\ninterface CircuitBreakerMetrics {\r\n  totalCalls: number;\r\n  successfulCalls: number;\r\n  failedCalls: number;\r\n  rejectedCalls: number;\r\n  lastFailureTime: number;\r\n  lastSuccessTime: number;\r\n  stateChanges: number;\r\n}\r\n\r\n// Resultado de ejecución\r\nexport interface CircuitBreakerResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: Error;\r\n  state: CircuitBreakerState;\r\n  executionTime: number;\r\n  wasRejected: boolean;\r\n}\r\n\r\n/**\r\n * Circuit Breaker Enterprise para MercadoPago\r\n * Implementa el patrón Circuit Breaker con estados y recuperación automática\r\n */\r\nexport class CircuitBreaker {\r\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\r\n  private failures: number = 0;\r\n  private successes: number = 0;\r\n  private lastFailureTime: number = 0;\r\n  private lastSuccessTime: number = 0;\r\n  private halfOpenCalls: number = 0;\r\n  private stateChanges: number = 0;\r\n  private metrics: CircuitBreakerMetrics;\r\n\r\n  constructor(\r\n    private name: string,\r\n    private config: CircuitBreakerConfig\r\n  ) {\r\n    this.metrics = {\r\n      totalCalls: 0,\r\n      successfulCalls: 0,\r\n      failedCalls: 0,\r\n      rejectedCalls: 0,\r\n      lastFailureTime: 0,\r\n      lastSuccessTime: 0,\r\n      stateChanges: 0\r\n    };\r\n\r\n    logger.debug(LogLevel.DEBUG, `Circuit Breaker initialized: ${name}`, {\r\n      config: this.config\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una operación protegida por el circuit breaker\r\n   */\r\n  async execute<T>(operation: () => Promise<T>): Promise<CircuitBreakerResult<T>> {\r\n    const startTime = Date.now();\r\n    this.metrics.totalCalls++;\r\n\r\n    // Verificar si debemos rechazar la llamada\r\n    if (this.shouldReject()) {\r\n      this.metrics.rejectedCalls++;\r\n      \r\n      await this.recordMetrics('rejected');\r\n      \r\n      return {\r\n        success: false,\r\n        error: new Error(`Circuit breaker is ${this.state} - operation rejected`),\r\n        state: this.state,\r\n        executionTime: Date.now() - startTime,\r\n        wasRejected: true\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Ejecutar la operación\r\n      const result = await operation();\r\n      \r\n      // Registrar éxito\r\n      await this.onSuccess();\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      await this.recordMetrics('success', executionTime);\r\n      \r\n      return {\r\n        success: true,\r\n        data: result,\r\n        state: this.state,\r\n        executionTime,\r\n        wasRejected: false\r\n      };\r\n\r\n    } catch (error) {\r\n      // Registrar fallo\r\n      await this.onFailure(error as Error);\r\n      \r\n      const executionTime = Date.now() - startTime;\r\n      await this.recordMetrics('failure', executionTime);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error as Error,\r\n        state: this.state,\r\n        executionTime,\r\n        wasRejected: false\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determina si debemos rechazar la operación\r\n   */\r\n  private shouldReject(): boolean {\r\n    const now = Date.now();\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.CLOSED:\r\n        return false;\r\n\r\n      case CircuitBreakerState.OPEN:\r\n        // Verificar si es tiempo de intentar recuperación\r\n        if (now - this.lastFailureTime >= this.config.recoveryTimeout) {\r\n          this.transitionToHalfOpen();\r\n          return false;\r\n        }\r\n        return true;\r\n\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        // Limitar llamadas en estado HALF_OPEN\r\n        return this.halfOpenCalls >= this.config.halfOpenMaxCalls;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja un éxito en la operación\r\n   */\r\n  private async onSuccess(): Promise<void> {\r\n    this.lastSuccessTime = Date.now();\r\n    this.metrics.successfulCalls++;\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        this.successes++;\r\n        this.halfOpenCalls++;\r\n        \r\n        if (this.successes >= this.config.successThreshold) {\r\n          this.transitionToClosed();\r\n        }\r\n        break;\r\n\r\n      case CircuitBreakerState.CLOSED:\r\n        // Reset failure counter en ventana de monitoreo\r\n        if (this.isInMonitoringWindow()) {\r\n          this.failures = 0;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja un fallo en la operación\r\n   */\r\n  private async onFailure(error: Error): Promise<void> {\r\n    this.lastFailureTime = Date.now();\r\n    this.metrics.failedCalls++;\r\n    this.failures++;\r\n\r\n    logger.warn(LogLevel.WARN, `Circuit Breaker failure: ${this.name}`, {\r\n      error: error.message,\r\n      failures: this.failures,\r\n      state: this.state\r\n    }, LogCategory.SYSTEM);\r\n\r\n    switch (this.state) {\r\n      case CircuitBreakerState.CLOSED:\r\n        if (this.failures >= this.config.failureThreshold) {\r\n          this.transitionToOpen();\r\n        }\r\n        break;\r\n\r\n      case CircuitBreakerState.HALF_OPEN:\r\n        this.transitionToOpen();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transición a estado OPEN\r\n   */\r\n  private transitionToOpen(): void {\r\n    this.state = CircuitBreakerState.OPEN;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.halfOpenCalls = 0;\r\n    this.successes = 0;\r\n\r\n    logger.warn(LogLevel.WARN, `Circuit Breaker OPENED: ${this.name}`, {\r\n      failures: this.failures,\r\n      threshold: this.config.failureThreshold\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Transición a estado HALF_OPEN\r\n   */\r\n  private transitionToHalfOpen(): void {\r\n    this.state = CircuitBreakerState.HALF_OPEN;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.halfOpenCalls = 0;\r\n    this.successes = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker HALF-OPEN: ${this.name}`, {\r\n      recoveryTimeout: this.config.recoveryTimeout\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Transición a estado CLOSED\r\n   */\r\n  private transitionToClosed(): void {\r\n    this.state = CircuitBreakerState.CLOSED;\r\n    this.stateChanges++;\r\n    this.metrics.stateChanges++;\r\n    this.failures = 0;\r\n    this.successes = 0;\r\n    this.halfOpenCalls = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker CLOSED: ${this.name}`, {\r\n      successThreshold: this.config.successThreshold\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Verifica si estamos en la ventana de monitoreo\r\n   */\r\n  private isInMonitoringWindow(): boolean {\r\n    const now = Date.now();\r\n    return (now - this.lastFailureTime) <= this.config.monitoringWindow;\r\n  }\r\n\r\n  /**\r\n   * Registra métricas del circuit breaker\r\n   */\r\n  private async recordMetrics(\r\n    operation: 'success' | 'failure' | 'rejected',\r\n    executionTime?: number\r\n  ): Promise<void> {\r\n    try {\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.${operation}`, 1, {\r\n        state: this.state,\r\n        operation\r\n      });\r\n\r\n      if (executionTime) {\r\n        await metricsCollector.recordMetric(\r\n          `circuit_breaker.${this.name}.execution_time`,\r\n          executionTime,\r\n          { state: this.state }\r\n        );\r\n      }\r\n\r\n      // Métricas de estado\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.state_changes`, this.stateChanges);\r\n      await metricsCollector.recordMetric(`circuit_breaker.${this.name}.failure_rate`, \r\n        this.metrics.totalCalls > 0 ? this.metrics.failedCalls / this.metrics.totalCalls : 0\r\n      );\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to record circuit breaker metrics: ${this.name}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado actual del circuit breaker\r\n   */\r\n  getState(): CircuitBreakerState {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Obtiene las métricas del circuit breaker\r\n   */\r\n  getMetrics(): CircuitBreakerMetrics & { state: CircuitBreakerState; config: CircuitBreakerConfig } {\r\n    return {\r\n      ...this.metrics,\r\n      state: this.state,\r\n      config: this.config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fuerza el reset del circuit breaker (solo para testing/admin)\r\n   */\r\n  reset(): void {\r\n    this.state = CircuitBreakerState.CLOSED;\r\n    this.failures = 0;\r\n    this.successes = 0;\r\n    this.halfOpenCalls = 0;\r\n    this.lastFailureTime = 0;\r\n    this.lastSuccessTime = 0;\r\n\r\n    logger.info(LogLevel.INFO, `Circuit Breaker manually reset: ${this.name}`, {}, LogCategory.SYSTEM);\r\n  }\r\n}\r\n\r\n// Instancias globales de circuit breakers\r\nexport const mercadoPagoCriticalBreaker = new CircuitBreaker(\r\n  'mercadopago_critical',\r\n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_CRITICAL\r\n);\r\n\r\nexport const mercadoPagoStandardBreaker = new CircuitBreaker(\r\n  'mercadopago_standard', \r\n  CIRCUIT_BREAKER_CONFIGS.MERCADOPAGO_STANDARD\r\n);\r\n\r\nexport const webhookProcessingBreaker = new CircuitBreaker(\r\n  'webhook_processing',\r\n  CIRCUIT_BREAKER_CONFIGS.WEBHOOK_PROCESSING\r\n);\r\n\r\n/**\r\n * Wrapper para operaciones críticas de MercadoPago\r\n */\r\nexport async function executeMercadoPagoCritical<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return mercadoPagoCriticalBreaker.execute(operation);\r\n}\r\n\r\n/**\r\n * Wrapper para operaciones estándar de MercadoPago\r\n */\r\nexport async function executeMercadoPagoStandard<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return mercadoPagoStandardBreaker.execute(operation);\r\n}\r\n\r\n/**\r\n * Wrapper para procesamiento de webhooks\r\n */\r\nexport async function executeWebhookProcessing<T>(\r\n  operation: () => Promise<T>\r\n): Promise<CircuitBreakerResult<T>> {\r\n  return webhookProcessingBreaker.execute(operation);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["CIRCUIT_BREAKER_CONFIGS","CircuitBreaker","CircuitBreakerState","executeMercadoPagoCritical","executeMercadoPagoStandard","executeWebhookProcessing","mercadoPagoCriticalBreaker","mercadoPagoStandardBreaker","webhookProcessingBreaker","MERCADOPAGO_CRITICAL","failureThreshold","recoveryTimeout","monitoringWindow","halfOpenMaxCalls","successThreshold","MERCADOPAGO_STANDARD","WEBHOOK_PROCESSING","name","config","state","failures","successes","lastFailureTime","lastSuccessTime","halfOpenCalls","stateChanges","metrics","totalCalls","successfulCalls","failedCalls","rejectedCalls","logger","debug","LogLevel","DEBUG","LogCategory","SYSTEM","execute","operation","startTime","Date","now","shouldReject","recordMetrics","success","error","Error","executionTime","wasRejected","result","onSuccess","data","onFailure","transitionToHalfOpen","transitionToClosed","isInMonitoringWindow","warn","WARN","message","transitionToOpen","threshold","info","INFO","metricsCollector","recordMetric","ERROR","getState","getMetrics","reset"],"mappings":"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"}