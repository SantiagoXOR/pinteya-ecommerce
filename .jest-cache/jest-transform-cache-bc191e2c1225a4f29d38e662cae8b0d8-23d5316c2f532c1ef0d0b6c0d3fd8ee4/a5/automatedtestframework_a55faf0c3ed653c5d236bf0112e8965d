0da73af961ff1c12252c47b7c5de95e6
"use strict";

/* istanbul ignore next */
function cov_1ny1n29570() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-test-framework.ts";
  var hash = "f146471a9bf046a58626a4c672917c0874987ec9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-test-framework.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "4": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 69
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "8": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "9": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 99
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 111
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "13": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 38
        }
      },
      "14": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 36
        }
      },
      "15": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 56,
          column: 50
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 58
        }
      },
      "17": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 27
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "20": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 114
        }
      },
      "21": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 27
        }
      },
      "23": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 74
        }
      },
      "24": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 28
        }
      },
      "25": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "26": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 68
        }
      },
      "27": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "28": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 125
        }
      },
      "29": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 47
        }
      },
      "30": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "31": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 37
        }
      },
      "32": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 33
        }
      },
      "33": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "34": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 15
        }
      },
      "36": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 76
        }
      },
      "37": {
        start: {
          line: 111,
          column: 35
        },
        end: {
          line: 111,
          column: 106
        }
      },
      "38": {
        start: {
          line: 114,
          column: 35
        },
        end: {
          line: 114,
          column: 139
        }
      },
      "39": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 97
        }
      },
      "40": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 70
        }
      },
      "41": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 34
        }
      },
      "42": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 65
        }
      },
      "43": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 22
        }
      },
      "44": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 41
        }
      },
      "45": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "46": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 50
        }
      },
      "47": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 46
        }
      },
      "48": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "49": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "50": {
        start: {
          line: 133,
          column: 19
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "51": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 47
        }
      },
      "52": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 48
        }
      },
      "53": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 142,
          column: 67
        }
      },
      "54": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 143,
          column: 47
        }
      },
      "55": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 38
        }
      },
      "56": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 40
        }
      },
      "57": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 36
        }
      },
      "58": {
        start: {
          line: 148,
          column: 27
        },
        end: {
          line: 148,
          column: 54
        }
      },
      "59": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 64
        }
      },
      "60": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "61": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 57
        }
      },
      "62": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 123
        }
      },
      "63": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 26
        }
      },
      "64": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "65": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "66": {
        start: {
          line: 163,
          column: 30
        },
        end: {
          line: 163,
          column: 76
        }
      },
      "67": {
        start: {
          line: 164,
          column: 35
        },
        end: {
          line: 164,
          column: 109
        }
      },
      "68": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 82
        }
      },
      "69": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 91
        }
      },
      "70": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 30
        }
      },
      "71": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 61
        }
      },
      "72": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "73": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "74": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 187,
          column: 10
        }
      },
      "75": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 10
        }
      },
      "76": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 49
        }
      },
      "77": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "78": {
        start: {
          line: 202,
          column: 61
        },
        end: {
          line: 205,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        loc: {
          start: {
            line: 53,
            column: 54
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 104,
            column: 6
          },
          end: {
            line: 104,
            column: 7
          }
        },
        loc: {
          start: {
            line: 104,
            column: 53
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 104
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 6
          },
          end: {
            line: 125,
            column: 7
          }
        },
        loc: {
          start: {
            line: 125,
            column: 26
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 140,
            column: 6
          },
          end: {
            line: 140,
            column: 7
          }
        },
        loc: {
          start: {
            line: 140,
            column: 45
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 140
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 157,
            column: 6
          },
          end: {
            line: 157,
            column: 7
          }
        },
        loc: {
          start: {
            line: 157,
            column: 29
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 157
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 176,
            column: 7
          }
        },
        loc: {
          start: {
            line: 176,
            column: 18
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 176
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 6
          },
          end: {
            line: 183,
            column: 7
          }
        },
        loc: {
          start: {
            line: 183,
            column: 26
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 191,
            column: 6
          },
          end: {
            line: 191,
            column: 7
          }
        },
        loc: {
          start: {
            line: 191,
            column: 28
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 191
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 199,
            column: 6
          },
          end: {
            line: 199,
            column: 7
          }
        },
        loc: {
          start: {
            line: 199,
            column: 37
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 199
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 202,
            column: 50
          },
          end: {
            line: 202,
            column: 51
          }
        },
        loc: {
          start: {
            line: 202,
            column: 61
          },
          end: {
            line: 205,
            column: 13
          }
        },
        line: 202
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 26
          },
          end: {
            line: 24,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 26
          },
          end: {
            line: 24,
            column: 45
          }
        }, {
          start: {
            line: 24,
            column: 49
          },
          end: {
            line: 24,
            column: 98
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 53
          }
        }, {
          start: {
            line: 25,
            column: 57
          },
          end: {
            line: 25,
            column: 110
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 62
          },
          end: {
            line: 41,
            column: 81
          }
        }, {
          start: {
            line: 41,
            column: 84
          },
          end: {
            line: 41,
            column: 105
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 47,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 47,
            column: 35
          }
        }, {
          start: {
            line: 47,
            column: 39
          },
          end: {
            line: 47,
            column: 41
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 61
          }
        }, {
          start: {
            line: 73,
            column: 64
          },
          end: {
            line: 73,
            column: 77
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 34
          }
        }, {
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 89,
            column: 47
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 39
          }
        }, {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 95,
            column: 51
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 96,
            column: 22
          },
          end: {
            line: 96,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 22
          },
          end: {
            line: 96,
            column: 39
          }
        }, {
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 51
          }
        }],
        line: 96
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 136,
            column: 9
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 135,
            column: 13
          }
        }],
        line: 131
      },
      "14": {
        loc: {
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "15": {
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 140,
            column: 32
          },
          end: {
            line: 140,
            column: 43
          }
        }],
        line: 140
      },
      "16": {
        loc: {
          start: {
            line: 200,
            column: 37
          },
          end: {
            line: 200,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 37
          },
          end: {
            line: 200,
            column: 41
          }
        }, {
          start: {
            line: 200,
            column: 45
          },
          end: {
            line: 200,
            column: 47
          }
        }],
        line: 200
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\automated-test-framework.ts"],
      sourcesContent: ["import { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface TestStep {\r\n  id: string;\r\n  description: string;\r\n  action: string;\r\n  timestamp: string;\r\n  duration: number;\r\n  success: boolean;\r\n  screenshot?: string | undefined;\r\n  details: any;\r\n  category: 'setup' | 'action' | 'verification' | 'cleanup';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport interface TestReport {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  startTime: string;\r\n  endTime?: string;\r\n  duration?: number;\r\n  status: 'running' | 'completed' | 'failed' | 'cancelled';\r\n  steps: TestStep[];\r\n  summary: {\r\n    totalSteps: number;\r\n    successfulSteps: number;\r\n    failedSteps: number;\r\n    criticalErrors: number;\r\n    warnings: number;\r\n  };\r\n  environment: {\r\n    browser?: string;\r\n    viewport?: { width: number; height: number };\r\n    userAgent?: string;\r\n    url?: string;\r\n  };\r\n  metadata: {\r\n    testVersion: string;\r\n    framework: string;\r\n    executedBy: string;\r\n    tags: string[];\r\n  };\r\n}\r\n\r\nexport class AutomatedTestFramework {\r\n  private report: TestReport;\r\n  private screenshotCounter: number = 0;\r\n  private reportsDir: string;\r\n  private screenshotsDir: string;\r\n\r\n  constructor(testName: string, description: string, options?: {\r\n    reportsDir?: string;\r\n    screenshotsDir?: string;\r\n    tags?: string[];\r\n  }) {\r\n    const testId = uuidv4();\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    this.reportsDir = options?.reportsDir || path.join(process.cwd(), 'test-reports');\r\n    this.screenshotsDir = options?.screenshotsDir || path.join(process.cwd(), 'test-screenshots');\r\n    \r\n    this.report = {\r\n      id: testId,\r\n      name: testName,\r\n      description,\r\n      startTime: timestamp,\r\n      status: 'running',\r\n      steps: [],\r\n      summary: {\r\n        totalSteps: 0,\r\n        successfulSteps: 0,\r\n        failedSteps: 0,\r\n        criticalErrors: 0,\r\n        warnings: 0\r\n      },\r\n      environment: {\r\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js Environment'\r\n      },\r\n      metadata: {\r\n        testVersion: '1.0.0',\r\n        framework: 'AutomatedTestFramework',\r\n        executedBy: 'System',\r\n        tags: options?.tags || []\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ejecuta un paso del test con documentaci\xF3n autom\xE1tica\r\n   */\r\n  async executeStep(\r\n    description: string,\r\n    action: () => Promise<any>,\r\n    options?: {\r\n      category?: TestStep['category'];\r\n      severity?: TestStep['severity'];\r\n      captureScreenshot?: boolean;\r\n      expectedResult?: any;\r\n    }\r\n  ): Promise<any> {\r\n    const stepId = uuidv4();\r\n    const startTime = Date.now();\r\n    const timestamp = new Date().toISOString();\r\n    \r\n    console.log(`\uD83D\uDD04 Ejecutando paso: ${description}`);\r\n    \r\n    let result: any;\r\n    let success = false;\r\n    let screenshot: string | undefined;\r\n    \r\n    try {\r\n      // Capturar screenshot antes de la acci\xF3n si es requerido\r\n      if (options?.captureScreenshot) {\r\n        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-before`, description);\r\n      }\r\n      \r\n      // Ejecutar la acci\xF3n\r\n      result = await action();\r\n      success = true;\r\n      \r\n      console.log(`\u2705 Paso completado exitosamente: ${description}`);\r\n      \r\n    } catch (error) {\r\n      success = false;\r\n      result = { error: error instanceof Error ? error.message : String(error) };\r\n      console.error(`\u274C Error en paso: ${description}`, error);\r\n      \r\n      // Capturar screenshot en caso de error\r\n      if (!screenshot) {\r\n        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-error`, `Error: ${description}`);\r\n      }\r\n    }\r\n    \r\n    const duration = Date.now() - startTime;\r\n    \r\n    const step: TestStep = {\r\n      id: stepId,\r\n      description,\r\n      action: action.toString().substring(0, 200) + '...',\r\n      timestamp,\r\n      duration,\r\n      success,\r\n      screenshot: screenshot || undefined,\r\n      details: {\r\n        result,\r\n        expectedResult: options?.expectedResult,\r\n        actualDuration: duration\r\n      },\r\n      category: options?.category || 'action',\r\n      severity: options?.severity || 'medium'\r\n    };\r\n    \r\n    this.report.steps.push(step);\r\n    this.updateSummary(step);\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Captura una screenshot con timestamp\r\n   */\r\n  private async captureScreenshot(filename: string, description: string): Promise<string> {\r\n    try {\r\n      // Asegurar que el directorio existe\r\n      await fs.mkdir(this.screenshotsDir, { recursive: true });\r\n      \r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const screenshotPath = path.join(this.screenshotsDir, `${timestamp}-${filename}.png`);\r\n      \r\n      // En un entorno real, aqu\xED se capturar\xEDa la screenshot\r\n      // Por ahora, creamos un archivo placeholder\r\n      const screenshotData = `Screenshot captured at ${new Date().toISOString()}\\nDescription: ${description}\\nFilename: ${filename}`;\r\n      await fs.writeFile(screenshotPath.replace('.png', '.txt'), screenshotData);\r\n      \r\n      console.log(`\uD83D\uDCF8 Screenshot capturada: ${screenshotPath}`);\r\n      return screenshotPath;\r\n      \r\n    } catch (error) {\r\n      console.error('Error capturando screenshot:', error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Actualiza el resumen del reporte\r\n   */\r\n  private updateSummary(step: TestStep): void {\r\n    this.report.summary.totalSteps++;\r\n    \r\n    if (step.success) {\r\n      this.report.summary.successfulSteps++;\r\n    } else {\r\n      this.report.summary.failedSteps++;\r\n      \r\n      if (step.severity === 'critical') {\r\n        this.report.summary.criticalErrors++;\r\n      } else if (step.severity === 'high') {\r\n        this.report.summary.warnings++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finaliza el test y genera el reporte\r\n   */\r\n  async finishTest(status: 'completed' | 'failed' | 'cancelled' = 'completed'): Promise<string> {\r\n    const endTime = new Date().toISOString();\r\n    const startTime = new Date(this.report.startTime).getTime();\r\n    const duration = Date.now() - startTime;\r\n    \r\n    this.report.endTime = endTime;\r\n    this.report.duration = duration;\r\n    this.report.status = status;\r\n    \r\n    // Generar reporte final\r\n    const reportPath = await this.generateReport();\r\n    \r\n    console.log(`\uD83D\uDCCA Test finalizado con estado: ${status}`);\r\n    console.log(`\uD83D\uDCC4 Reporte generado: ${reportPath}`);\r\n    console.log(`\u23F1\uFE0F  Duraci\xF3n total: ${duration}ms`);\r\n    console.log(`\uD83D\uDCC8 Resumen: ${this.report.summary.successfulSteps}/${this.report.summary.totalSteps} pasos exitosos`);\r\n    \r\n    return reportPath;\r\n  }\r\n\r\n  /**\r\n   * Genera el archivo de reporte JSON\r\n   */\r\n  private async generateReport(): Promise<string> {\r\n    try {\r\n      // Asegurar que el directorio existe\r\n      await fs.mkdir(this.reportsDir, { recursive: true });\r\n      \r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n      const reportFilename = `${this.report.name.replace(/\\s+/g, '-').toLowerCase()}-${timestamp}.json`;\r\n      const reportPath = path.join(this.reportsDir, reportFilename);\r\n      \r\n      // Escribir el reporte\r\n      await fs.writeFile(reportPath, JSON.stringify(this.report, null, 2));\r\n      \r\n      return reportPath;\r\n      \r\n    } catch (error) {\r\n      console.error('Error generando reporte:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene el reporte actual\r\n   */\r\n  getReport(): TestReport {\r\n    return { ...this.report };\r\n  }\r\n\r\n  /**\r\n   * Agrega informaci\xF3n del entorno\r\n   */\r\n  setEnvironment(env: Partial<TestReport['environment']>): void {\r\n    this.report.environment = { ...this.report.environment, ...env };\r\n  }\r\n\r\n  /**\r\n   * Agrega metadatos adicionales\r\n   */\r\n  addMetadata(metadata: Partial<TestReport['metadata']>): void {\r\n    this.report.metadata = { ...this.report.metadata, ...metadata };\r\n  }\r\n\r\n  /**\r\n   * Agrega un log personalizado\r\n   */\r\n  async logAction(message: string, data?: any): Promise<void> {\r\n    console.log(`\uD83D\uDCDD ${message}`, data || '');\r\n    \r\n    // Agregar como paso de documentaci\xF3n\r\n    await this.executeStep(\r\n      `Log: ${message}`,\r\n      async () => ({ logged: true, data }),\r\n      { category: 'setup', severity: 'low' }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["AutomatedTestFramework", "testName", "description", "options", "screenshotCounter", "testId", "uuidv4", "timestamp", "Date", "toISOString", "reportsDir", "path", "join", "process", "cwd", "screenshotsDir", "report", "id", "name", "startTime", "status", "steps", "summary", "totalSteps", "successfulSteps", "failedSteps", "criticalErrors", "warnings", "environment", "userAgent", "navigator", "metadata", "testVersion", "framework", "executedBy", "tags", "executeStep", "action", "stepId", "now", "console", "log", "result", "success", "screenshot", "captureScreenshot", "error", "Error", "message", "String", "duration", "step", "toString", "substring", "undefined", "details", "expectedResult", "actualDuration", "category", "severity", "push", "updateSummary", "filename", "fs", "mkdir", "recursive", "replace", "screenshotPath", "screenshotData", "writeFile", "finishTest", "endTime", "getTime", "reportPath", "generateReport", "reportFilename", "toLowerCase", "JSON", "stringify", "getReport", "setEnvironment", "env", "addMetadata", "logAction", "data", "logged"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f146471a9bf046a58626a4c672917c0874987ec9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ny1n29570 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ny1n29570();
cov_1ny1n29570().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ny1n29570().s[1]++;
Object.defineProperty(exports, "AutomatedTestFramework", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ny1n29570().f[0]++;
    cov_1ny1n29570().s[2]++;
    return AutomatedTestFramework;
  }
});
const _fs =
/* istanbul ignore next */
(cov_1ny1n29570().s[3]++, require("fs"));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_1ny1n29570().s[4]++, _interop_require_default(require("path")));
const _uuid =
/* istanbul ignore next */
(cov_1ny1n29570().s[5]++, require("uuid"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1ny1n29570().f[1]++;
  cov_1ny1n29570().s[6]++;
  return /* istanbul ignore next */(cov_1ny1n29570().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1ny1n29570().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1ny1n29570().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1ny1n29570().b[0][1]++, {
    default: obj
  });
}
class AutomatedTestFramework {
  constructor(testName, description, options) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[2]++;
    cov_1ny1n29570().s[7]++;
    this.screenshotCounter = 0;
    const testId =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[8]++, (0, _uuid.v4)());
    const timestamp =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[9]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_1ny1n29570().s[10]++;
    this.reportsDir =
    /* istanbul ignore next */
    (cov_1ny1n29570().b[2][0]++, options?.reportsDir) ||
    /* istanbul ignore next */
    (cov_1ny1n29570().b[2][1]++, _path.default.join(process.cwd(), 'test-reports'));
    /* istanbul ignore next */
    cov_1ny1n29570().s[11]++;
    this.screenshotsDir =
    /* istanbul ignore next */
    (cov_1ny1n29570().b[3][0]++, options?.screenshotsDir) ||
    /* istanbul ignore next */
    (cov_1ny1n29570().b[3][1]++, _path.default.join(process.cwd(), 'test-screenshots'));
    /* istanbul ignore next */
    cov_1ny1n29570().s[12]++;
    this.report = {
      id: testId,
      name: testName,
      description,
      startTime: timestamp,
      status: 'running',
      steps: [],
      summary: {
        totalSteps: 0,
        successfulSteps: 0,
        failedSteps: 0,
        criticalErrors: 0,
        warnings: 0
      },
      environment: {
        userAgent: typeof navigator !== 'undefined' ?
        /* istanbul ignore next */
        (cov_1ny1n29570().b[4][0]++, navigator.userAgent) :
        /* istanbul ignore next */
        (cov_1ny1n29570().b[4][1]++, 'Node.js Environment')
      },
      metadata: {
        testVersion: '1.0.0',
        framework: 'AutomatedTestFramework',
        executedBy: 'System',
        tags:
        /* istanbul ignore next */
        (cov_1ny1n29570().b[5][0]++, options?.tags) ||
        /* istanbul ignore next */
        (cov_1ny1n29570().b[5][1]++, [])
      }
    };
  }
  /**
  * Ejecuta un paso del test con documentación automática
  */
  async executeStep(description, action, options) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[3]++;
    const stepId =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[13]++, (0, _uuid.v4)());
    const startTime =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[14]++, Date.now());
    const timestamp =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[15]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_1ny1n29570().s[16]++;
    console.log(`🔄 Ejecutando paso: ${description}`);
    let result;
    let success =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[17]++, false);
    let screenshot;
    /* istanbul ignore next */
    cov_1ny1n29570().s[18]++;
    try {
      /* istanbul ignore next */
      cov_1ny1n29570().s[19]++;
      // Capturar screenshot antes de la acción si es requerido
      if (options?.captureScreenshot) {
        /* istanbul ignore next */
        cov_1ny1n29570().b[6][0]++;
        cov_1ny1n29570().s[20]++;
        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-before`, description);
      } else
      /* istanbul ignore next */
      {
        cov_1ny1n29570().b[6][1]++;
      }
      // Ejecutar la acción
      cov_1ny1n29570().s[21]++;
      result = await action();
      /* istanbul ignore next */
      cov_1ny1n29570().s[22]++;
      success = true;
      /* istanbul ignore next */
      cov_1ny1n29570().s[23]++;
      console.log(`✅ Paso completado exitosamente: ${description}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1ny1n29570().s[24]++;
      success = false;
      /* istanbul ignore next */
      cov_1ny1n29570().s[25]++;
      result = {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ny1n29570().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ny1n29570().b[7][1]++, String(error))
      };
      /* istanbul ignore next */
      cov_1ny1n29570().s[26]++;
      console.error(`❌ Error en paso: ${description}`, error);
      // Capturar screenshot en caso de error
      /* istanbul ignore next */
      cov_1ny1n29570().s[27]++;
      if (!screenshot) {
        /* istanbul ignore next */
        cov_1ny1n29570().b[8][0]++;
        cov_1ny1n29570().s[28]++;
        screenshot = await this.captureScreenshot(`step-${this.screenshotCounter++}-error`, `Error: ${description}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ny1n29570().b[8][1]++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[29]++, Date.now() - startTime);
    const step =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[30]++, {
      id: stepId,
      description,
      action: action.toString().substring(0, 200) + '...',
      timestamp,
      duration,
      success,
      screenshot:
      /* istanbul ignore next */
      (cov_1ny1n29570().b[9][0]++, screenshot) ||
      /* istanbul ignore next */
      (cov_1ny1n29570().b[9][1]++, undefined),
      details: {
        result,
        expectedResult: options?.expectedResult,
        actualDuration: duration
      },
      category:
      /* istanbul ignore next */
      (cov_1ny1n29570().b[10][0]++, options?.category) ||
      /* istanbul ignore next */
      (cov_1ny1n29570().b[10][1]++, 'action'),
      severity:
      /* istanbul ignore next */
      (cov_1ny1n29570().b[11][0]++, options?.severity) ||
      /* istanbul ignore next */
      (cov_1ny1n29570().b[11][1]++, 'medium')
    });
    /* istanbul ignore next */
    cov_1ny1n29570().s[31]++;
    this.report.steps.push(step);
    /* istanbul ignore next */
    cov_1ny1n29570().s[32]++;
    this.updateSummary(step);
    /* istanbul ignore next */
    cov_1ny1n29570().s[33]++;
    return result;
  }
  /**
  * Captura una screenshot con timestamp
  */
  async captureScreenshot(filename, description) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[4]++;
    cov_1ny1n29570().s[34]++;
    try {
      /* istanbul ignore next */
      cov_1ny1n29570().s[35]++;
      // Asegurar que el directorio existe
      await _fs.promises.mkdir(this.screenshotsDir, {
        recursive: true
      });
      const timestamp =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[36]++, new Date().toISOString().replace(/[:.]/g, '-'));
      const screenshotPath =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[37]++, _path.default.join(this.screenshotsDir, `${timestamp}-${filename}.png`));
      // En un entorno real, aquí se capturaría la screenshot
      // Por ahora, creamos un archivo placeholder
      const screenshotData =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[38]++, `Screenshot captured at ${new Date().toISOString()}\nDescription: ${description}\nFilename: ${filename}`);
      /* istanbul ignore next */
      cov_1ny1n29570().s[39]++;
      await _fs.promises.writeFile(screenshotPath.replace('.png', '.txt'), screenshotData);
      /* istanbul ignore next */
      cov_1ny1n29570().s[40]++;
      console.log(`📸 Screenshot capturada: ${screenshotPath}`);
      /* istanbul ignore next */
      cov_1ny1n29570().s[41]++;
      return screenshotPath;
    } catch (error) {
      /* istanbul ignore next */
      cov_1ny1n29570().s[42]++;
      console.error('Error capturando screenshot:', error);
      /* istanbul ignore next */
      cov_1ny1n29570().s[43]++;
      return '';
    }
  }
  /**
  * Actualiza el resumen del reporte
  */
  updateSummary(step) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[5]++;
    cov_1ny1n29570().s[44]++;
    this.report.summary.totalSteps++;
    /* istanbul ignore next */
    cov_1ny1n29570().s[45]++;
    if (step.success) {
      /* istanbul ignore next */
      cov_1ny1n29570().b[12][0]++;
      cov_1ny1n29570().s[46]++;
      this.report.summary.successfulSteps++;
    } else {
      /* istanbul ignore next */
      cov_1ny1n29570().b[12][1]++;
      cov_1ny1n29570().s[47]++;
      this.report.summary.failedSteps++;
      /* istanbul ignore next */
      cov_1ny1n29570().s[48]++;
      if (step.severity === 'critical') {
        /* istanbul ignore next */
        cov_1ny1n29570().b[13][0]++;
        cov_1ny1n29570().s[49]++;
        this.report.summary.criticalErrors++;
      } else {
        /* istanbul ignore next */
        cov_1ny1n29570().b[13][1]++;
        cov_1ny1n29570().s[50]++;
        if (step.severity === 'high') {
          /* istanbul ignore next */
          cov_1ny1n29570().b[14][0]++;
          cov_1ny1n29570().s[51]++;
          this.report.summary.warnings++;
        } else
        /* istanbul ignore next */
        {
          cov_1ny1n29570().b[14][1]++;
        }
      }
    }
  }
  /**
  * Finaliza el test y genera el reporte
  */
  async finishTest(status =
  /* istanbul ignore next */
  (cov_1ny1n29570().b[15][0]++, 'completed')) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[6]++;
    const endTime =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[52]++, new Date().toISOString());
    const startTime =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[53]++, new Date(this.report.startTime).getTime());
    const duration =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[54]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1ny1n29570().s[55]++;
    this.report.endTime = endTime;
    /* istanbul ignore next */
    cov_1ny1n29570().s[56]++;
    this.report.duration = duration;
    /* istanbul ignore next */
    cov_1ny1n29570().s[57]++;
    this.report.status = status;
    // Generar reporte final
    const reportPath =
    /* istanbul ignore next */
    (cov_1ny1n29570().s[58]++, await this.generateReport());
    /* istanbul ignore next */
    cov_1ny1n29570().s[59]++;
    console.log(`📊 Test finalizado con estado: ${status}`);
    /* istanbul ignore next */
    cov_1ny1n29570().s[60]++;
    console.log(`📄 Reporte generado: ${reportPath}`);
    /* istanbul ignore next */
    cov_1ny1n29570().s[61]++;
    console.log(`⏱️  Duración total: ${duration}ms`);
    /* istanbul ignore next */
    cov_1ny1n29570().s[62]++;
    console.log(`📈 Resumen: ${this.report.summary.successfulSteps}/${this.report.summary.totalSteps} pasos exitosos`);
    /* istanbul ignore next */
    cov_1ny1n29570().s[63]++;
    return reportPath;
  }
  /**
  * Genera el archivo de reporte JSON
  */
  async generateReport() {
    /* istanbul ignore next */
    cov_1ny1n29570().f[7]++;
    cov_1ny1n29570().s[64]++;
    try {
      /* istanbul ignore next */
      cov_1ny1n29570().s[65]++;
      // Asegurar que el directorio existe
      await _fs.promises.mkdir(this.reportsDir, {
        recursive: true
      });
      const timestamp =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[66]++, new Date().toISOString().replace(/[:.]/g, '-'));
      const reportFilename =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[67]++, `${this.report.name.replace(/\s+/g, '-').toLowerCase()}-${timestamp}.json`);
      const reportPath =
      /* istanbul ignore next */
      (cov_1ny1n29570().s[68]++, _path.default.join(this.reportsDir, reportFilename));
      // Escribir el reporte
      /* istanbul ignore next */
      cov_1ny1n29570().s[69]++;
      await _fs.promises.writeFile(reportPath, JSON.stringify(this.report, null, 2));
      /* istanbul ignore next */
      cov_1ny1n29570().s[70]++;
      return reportPath;
    } catch (error) {
      /* istanbul ignore next */
      cov_1ny1n29570().s[71]++;
      console.error('Error generando reporte:', error);
      /* istanbul ignore next */
      cov_1ny1n29570().s[72]++;
      throw error;
    }
  }
  /**
  * Obtiene el reporte actual
  */
  getReport() {
    /* istanbul ignore next */
    cov_1ny1n29570().f[8]++;
    cov_1ny1n29570().s[73]++;
    return {
      ...this.report
    };
  }
  /**
  * Agrega información del entorno
  */
  setEnvironment(env) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[9]++;
    cov_1ny1n29570().s[74]++;
    this.report.environment = {
      ...this.report.environment,
      ...env
    };
  }
  /**
  * Agrega metadatos adicionales
  */
  addMetadata(metadata) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[10]++;
    cov_1ny1n29570().s[75]++;
    this.report.metadata = {
      ...this.report.metadata,
      ...metadata
    };
  }
  /**
  * Agrega un log personalizado
  */
  async logAction(message, data) {
    /* istanbul ignore next */
    cov_1ny1n29570().f[11]++;
    cov_1ny1n29570().s[76]++;
    console.log(`📝 ${message}`,
    /* istanbul ignore next */
    (cov_1ny1n29570().b[16][0]++, data) ||
    /* istanbul ignore next */
    (cov_1ny1n29570().b[16][1]++, ''));
    // Agregar como paso de documentación
    /* istanbul ignore next */
    cov_1ny1n29570().s[77]++;
    await this.executeStep(`Log: ${message}`, async () => {
      /* istanbul ignore next */
      cov_1ny1n29570().f[12]++;
      cov_1ny1n29570().s[78]++;
      return {
        logged: true,
        data
      };
    }, {
      category: 'setup',
      severity: 'low'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,