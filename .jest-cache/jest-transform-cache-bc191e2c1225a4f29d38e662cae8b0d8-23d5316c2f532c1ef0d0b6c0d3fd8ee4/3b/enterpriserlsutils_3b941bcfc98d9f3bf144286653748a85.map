{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\auth\\enterprise-rls-utils.ts"],"sourcesContent":["/**\n * Utilidades RLS Enterprise\n * Integración entre Row Level Security de Supabase y autenticación enterprise\n */\n\nimport { createClient } from '@supabase/supabase-js'\nimport { supabaseAdmin } from '@/lib/integrations/supabase'\nimport type { EnterpriseAuthContext } from './enterprise-auth-utils'\n\n// =====================================================\n// TIPOS Y INTERFACES\n// =====================================================\n\nexport interface RLSContext {\n  userId: string\n  supabaseUserId?: string\n  role: 'admin' | 'user' | 'moderator'\n  permissions: string[]\n  isActive: boolean\n}\n\nexport interface RLSValidationResult {\n  valid: boolean\n  context?: RLSContext\n  error?: string\n  code?: string\n}\n\nexport interface RLSQueryOptions {\n  enforceRLS?: boolean\n  bypassRLS?: boolean\n  adminOverride?: boolean\n  auditLog?: boolean\n}\n\n// =====================================================\n// FUNCIONES DE VALIDACIÓN RLS\n// =====================================================\n\n/**\n * Valida el contexto RLS para un usuario\n */\nexport async function validateRLSContext(\n  enterpriseContext: EnterpriseAuthContext\n): Promise<RLSValidationResult> {\n  try {\n    if (!supabaseAdmin) {\n      return {\n        valid: false,\n        error: 'Supabase admin client no disponible',\n        code: 'SUPABASE_UNAVAILABLE',\n      }\n    }\n\n    // Obtener información del usuario desde Supabase\n    const { data: userProfile, error: profileError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('id, supabase_user_id, role_id, permissions, is_active, user_roles(role_name)')\n      .eq('clerk_user_id', enterpriseContext.userId)\n      .single()\n\n    if (profileError) {\n      console.error('[RLS] Error obteniendo perfil de usuario:', profileError)\n      return {\n        valid: false,\n        error: 'Error obteniendo perfil de usuario',\n        code: 'PROFILE_ERROR',\n      }\n    }\n\n    if (!userProfile || !userProfile.is_active) {\n      return {\n        valid: false,\n        error: 'Usuario inactivo o no encontrado',\n        code: 'USER_INACTIVE',\n      }\n    }\n\n    // Crear contexto RLS\n    const rlsContext: RLSContext = {\n      userId: enterpriseContext.userId,\n      supabaseUserId: userProfile.supabase_user_id,\n      role: (userProfile.user_roles as any)?.role_name || 'user',\n      permissions: userProfile.permissions || [],\n      isActive: userProfile.is_active,\n    }\n\n    return {\n      valid: true,\n      context: rlsContext,\n    }\n  } catch (error) {\n    console.error('[RLS] Error validando contexto RLS:', error)\n    return {\n      valid: false,\n      error: 'Error interno validando RLS',\n      code: 'INTERNAL_ERROR',\n    }\n  }\n}\n\n/**\n * Crea un cliente Supabase con contexto de usuario para RLS\n */\nexport function createUserSupabaseClient(\n  supabaseUserId: string,\n  accessToken?: string\n): ReturnType<typeof createClient> | null {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n    if (!supabaseUrl || !supabaseAnonKey) {\n      console.error('[RLS] Configuración de Supabase no disponible')\n      return null\n    }\n\n    // Crear cliente con contexto de usuario\n    const client = createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n      },\n      global: {\n        headers: {\n          'X-User-ID': supabaseUserId,\n          ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n        },\n      },\n    })\n\n    return client\n  } catch (error) {\n    console.error('[RLS] Error creando cliente Supabase de usuario:', error)\n    return null\n  }\n}\n\n/**\n * Ejecuta una consulta con contexto RLS\n */\nexport async function executeWithRLS<T>(\n  enterpriseContext: EnterpriseAuthContext,\n  queryFunction: (client: any, rlsContext: RLSContext) => Promise<T>,\n  options: RLSQueryOptions = {}\n): Promise<{ success: boolean; data?: T; error?: string; code?: string }> {\n  try {\n    // Validar contexto RLS\n    const rlsValidation = await validateRLSContext(enterpriseContext)\n    if (!rlsValidation.valid) {\n      return {\n        success: false,\n        error: rlsValidation.error,\n        code: rlsValidation.code,\n      }\n    }\n\n    const rlsContext = rlsValidation.context!\n\n    // Determinar qué cliente usar\n    let client\n    if (options.bypassRLS && enterpriseContext.role === 'admin') {\n      // Admin puede usar cliente administrativo para bypass RLS\n      client = supabaseAdmin\n      console.log('[RLS] Usando cliente admin para bypass RLS')\n    } else if (rlsContext.supabaseUserId) {\n      // Usar cliente con contexto de usuario para RLS\n      client = createUserSupabaseClient(rlsContext.supabaseUserId)\n      if (!client) {\n        return {\n          success: false,\n          error: 'Error creando cliente de usuario',\n          code: 'CLIENT_ERROR',\n        }\n      }\n      console.log('[RLS] Usando cliente de usuario con RLS')\n    } else {\n      // Fallback a cliente admin\n      client = supabaseAdmin\n      console.log('[RLS] Usando cliente admin como fallback')\n    }\n\n    // Ejecutar consulta\n    const result = await queryFunction(client, rlsContext)\n\n    // Log de auditoría si está habilitado\n    if (options.auditLog) {\n      await logRLSOperation(enterpriseContext, 'query_executed', {\n        bypassRLS: options.bypassRLS,\n        adminOverride: options.adminOverride,\n        success: true,\n      })\n    }\n\n    return {\n      success: true,\n      data: result,\n    }\n  } catch (error) {\n    console.error('[RLS] Error ejecutando consulta con RLS:', error)\n\n    // Log de auditoría para errores\n    if (options.auditLog) {\n      await logRLSOperation(enterpriseContext, 'query_error', {\n        error: error.message,\n        bypassRLS: options.bypassRLS,\n        adminOverride: options.adminOverride,\n      })\n    }\n\n    return {\n      success: false,\n      error: 'Error ejecutando consulta',\n      code: 'QUERY_ERROR',\n    }\n  }\n}\n\n/**\n * Verifica permisos específicos para operaciones RLS\n */\nexport function checkRLSPermission(\n  rlsContext: RLSContext,\n  requiredPermission: string,\n  resourceOwner?: string\n): boolean {\n  // Admin siempre tiene acceso\n  if (rlsContext.role === 'admin') {\n    return true\n  }\n\n  // Verificar permiso específico\n  if (rlsContext.permissions.includes(requiredPermission)) {\n    return true\n  }\n\n  // Verificar si es el propietario del recurso\n  if (resourceOwner && resourceOwner === rlsContext.userId) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Crea filtros RLS para consultas\n */\nexport function createRLSFilters(rlsContext: RLSContext, tableName: string): Record<string, any> {\n  const filters: Record<string, any> = {}\n\n  switch (tableName) {\n    case 'user_profiles':\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\n        // Los usuarios solo pueden ver su propio perfil\n        filters.clerk_user_id = rlsContext.userId\n      }\n      break\n\n    case 'orders':\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\n        // Los usuarios solo pueden ver sus propias órdenes\n        filters.user_id = rlsContext.userId\n      }\n      break\n\n    case 'products':\n      if (rlsContext.role !== 'admin' && rlsContext.role !== 'moderator') {\n        // Los usuarios solo pueden ver productos activos\n        filters.is_active = true\n      }\n      break\n\n    default:\n      // Sin filtros adicionales para otras tablas\n      break\n  }\n\n  return filters\n}\n\n/**\n * Middleware RLS para APIs\n */\nexport function withRLS(options: RLSQueryOptions = {}) {\n  return function (handler: Function) {\n    return async (request: any, ...args: any[]) => {\n      try {\n        // Obtener contexto enterprise del request\n        const enterpriseContext = (request as any).enterpriseAuth\n\n        if (!enterpriseContext) {\n          const errorResponse = {\n            success: false,\n            error: 'Contexto enterprise no disponible',\n            code: 'NO_ENTERPRISE_CONTEXT',\n            timestamp: new Date().toISOString(),\n          }\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any\n            return res.status(401).json(errorResponse)\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: 401,\n              headers: { 'Content-Type': 'application/json' },\n            })\n          }\n        }\n\n        // Validar contexto RLS\n        const rlsValidation = await validateRLSContext(enterpriseContext)\n        if (!rlsValidation.valid) {\n          const errorResponse = {\n            success: false,\n            error: rlsValidation.error,\n            code: rlsValidation.code,\n            rls: true,\n            timestamp: new Date().toISOString(),\n          }\n\n          if ('query' in request) {\n            // Pages Router\n            const res = args[0] as any\n            return res.status(403).json(errorResponse)\n          } else {\n            // App Router\n            return new Response(JSON.stringify(errorResponse), {\n              status: 403,\n              headers: { 'Content-Type': 'application/json' },\n            })\n          }\n        }\n\n        // Añadir contexto RLS al request\n        ;(request as any).rlsContext = rlsValidation.context\n\n        return handler(request, ...args)\n      } catch (error) {\n        console.error('[RLS] Error en middleware RLS:', error)\n\n        const errorResponse = {\n          success: false,\n          error: 'Error interno en middleware RLS',\n          code: 'RLS_MIDDLEWARE_ERROR',\n          timestamp: new Date().toISOString(),\n        }\n\n        if ('query' in request) {\n          // Pages Router\n          const res = args[0] as any\n          return res.status(500).json(errorResponse)\n        } else {\n          // App Router\n          return new Response(JSON.stringify(errorResponse), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' },\n          })\n        }\n      }\n    }\n  }\n}\n\n// =====================================================\n// FUNCIONES DE AUDITORÍA\n// =====================================================\n\n/**\n * Log de operaciones RLS para auditoría\n */\nasync function logRLSOperation(\n  enterpriseContext: EnterpriseAuthContext,\n  operation: string,\n  metadata: any\n): Promise<void> {\n  try {\n    if (!supabaseAdmin) {\n      return\n    }\n\n    await supabaseAdmin.from('security_audit_logs').insert({\n      user_id: enterpriseContext.userId,\n      event_type: 'RLS_OPERATION',\n      event_category: 'database_access',\n      severity: 'info',\n      description: `RLS operation: ${operation}`,\n      metadata: {\n        operation,\n        role: enterpriseContext.role,\n        permissions: enterpriseContext.permissions,\n        security_level: enterpriseContext.securityLevel,\n        ...metadata,\n      },\n      ip_address: enterpriseContext.ipAddress,\n      user_agent: enterpriseContext.userAgent,\n      created_at: new Date().toISOString(),\n    })\n  } catch (error) {\n    console.error('[RLS] Error logging RLS operation:', error)\n  }\n}\n\n// =====================================================\n// UTILIDADES DE TESTING\n// =====================================================\n\n/**\n * Función para testing de políticas RLS\n */\nexport async function testRLSPolicies(\n  tableName: string,\n  testCases: Array<{\n    name: string\n    userRole: 'admin' | 'user' | 'moderator'\n    operation: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE'\n    expectedResult: 'allow' | 'deny'\n    testData?: any\n  }>\n): Promise<Array<{ name: string; passed: boolean; error?: string }>> {\n  const results = []\n\n  for (const testCase of testCases) {\n    try {\n      // Implementar lógica de testing específica\n      // Esta función se puede expandir para testing automatizado\n      results.push({\n        name: testCase.name,\n        passed: true, // Placeholder\n      })\n    } catch (error) {\n      results.push({\n        name: testCase.name,\n        passed: false,\n        error: error.message,\n      })\n    }\n  }\n\n  return results\n}\n"],"names":["checkRLSPermission","createRLSFilters","createUserSupabaseClient","executeWithRLS","testRLSPolicies","validateRLSContext","withRLS","enterpriseContext","supabaseAdmin","valid","error","code","data","userProfile","profileError","from","select","eq","userId","single","console","is_active","rlsContext","supabaseUserId","supabase_user_id","role","user_roles","role_name","permissions","isActive","context","accessToken","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseAnonKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","client","createClient","auth","autoRefreshToken","persistSession","global","headers","Authorization","queryFunction","options","rlsValidation","success","bypassRLS","log","result","auditLog","logRLSOperation","adminOverride","message","requiredPermission","resourceOwner","includes","tableName","filters","clerk_user_id","user_id","handler","request","args","enterpriseAuth","errorResponse","timestamp","Date","toISOString","res","status","json","Response","JSON","stringify","rls","operation","metadata","insert","event_type","event_category","severity","description","security_level","securityLevel","ip_address","ipAddress","user_agent","userAgent","created_at","testCases","results","testCase","push","name","passed"],"mappings":"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"}