d35135aa896a7766a4e920c79073f266
// ===================================
// HOOK: useFilterAnalytics - Sistema de Analytics para Filtros
// ===================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFilterAnalytics", {
    enumerable: true,
    get: function() {
        return useFilterAnalytics;
    }
});
const _react = require("react");
// ===================================
// UTILIDADES
// ===================================
// Generar ID de sesión único
const generateSessionId = ()=>{
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};
// Obtener o crear session ID
const getSessionId = ()=>{
    if (typeof window === 'undefined') {
        return generateSessionId();
    }
    let sessionId = sessionStorage.getItem('filter_analytics_session');
    if (!sessionId) {
        sessionId = generateSessionId();
        sessionStorage.setItem('filter_analytics_session', sessionId);
    }
    return sessionId;
};
// Enviar evento a Google Analytics 4
const sendToGA4 = (event)=>{
    if (typeof window === 'undefined' || !window.gtag) {
        return;
    }
    window.gtag('event', event.action, {
        event_category: event.category,
        event_label: event.label,
        value: event.value,
        custom_map: event.custom_parameters,
        session_id: event.session_id,
        page_location: event.page_url,
        page_title: event.page_title
    });
};
// Enviar evento a Supabase Analytics
const sendToSupabase = async (event)=>{
    try {
        await fetch('/api/analytics/events', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(event)
        });
    } catch (error) {
        console.warn('Failed to send analytics event to Supabase:', error);
    }
};
function useFilterAnalytics(options = {}) {
    const { enabled = true, debug = process.env.NODE_ENV === 'development', sessionId: providedSessionId, userId } = options;
    const sessionId = (0, _react.useRef)(providedSessionId || getSessionId());
    const startTime = (0, _react.useRef)(Date.now());
    // Función para crear evento base
    const createBaseEvent = (0, _react.useCallback)((action, label, value, customParameters)=>{
        return {
            event: `filter_${action}`,
            category: 'filter',
            action,
            label,
            value,
            custom_parameters: customParameters,
            timestamp: Date.now(),
            session_id: sessionId.current,
            user_id: userId,
            page_url: typeof window !== 'undefined' ? window.location.href : '',
            page_title: typeof window !== 'undefined' ? document.title : ''
        };
    }, [
        userId
    ]);
    // Función para enviar evento
    const trackEvent = (0, _react.useCallback)(async (event)=>{
        if (!enabled) {
            return;
        }
        if (debug) {}
        // Enviar a múltiples destinos
        try {
            // Google Analytics 4
            sendToGA4(event);
            // Supabase Analytics
            await sendToSupabase(event);
        } catch (error) {
            console.warn('Analytics tracking error:', error);
        }
    }, [
        enabled,
        debug
    ]);
    // ===================================
    // MÉTODOS DE TRACKING ESPECÍFICOS
    // ===================================
    const trackFilterApplied = (0, _react.useCallback)((filterType, filterValue, resultsCount)=>{
        const timeToApply = Date.now() - startTime.current;
        const event = createBaseEvent('applied', `${filterType}:${filterValue}`, resultsCount, {
            filter_type: filterType,
            filter_value: filterValue,
            results_count: resultsCount,
            time_to_apply: timeToApply
        });
        trackEvent(event);
        startTime.current = Date.now(); // Reset para próxima medición
    }, [
        createBaseEvent,
        trackEvent
    ]);
    const trackFilterRemoved = (0, _react.useCallback)((filterType, filterValue, remainingFilters)=>{
        const event = createBaseEvent('removed', `${filterType}:${filterValue}`, remainingFilters, {
            filter_type: filterType,
            filter_value: filterValue,
            remaining_filters: remainingFilters
        });
        trackEvent(event);
    }, [
        createBaseEvent,
        trackEvent
    ]);
    const trackFiltersCleared = (0, _react.useCallback)((totalFiltersCleared, filterTypes)=>{
        const event = createBaseEvent('cleared', 'all_filters', totalFiltersCleared, {
            total_filters_cleared: totalFiltersCleared,
            filter_types: filterTypes
        });
        trackEvent(event);
    }, [
        createBaseEvent,
        trackEvent
    ]);
    const trackSearchPerformed = (0, _react.useCallback)((query, resultsCount, hasFilters, filterCount)=>{
        const event = createBaseEvent('search', query, resultsCount, {
            query,
            results_count: resultsCount,
            has_filters: hasFilters,
            filter_count: filterCount
        });
        trackEvent(event);
    }, [
        createBaseEvent,
        trackEvent
    ]);
    const trackPaginationUsed = (0, _react.useCallback)((fromPage, toPage, totalPages, resultsPerPage)=>{
        const event = createBaseEvent('pagination', `${fromPage}_to_${toPage}`, toPage, {
            from_page: fromPage,
            to_page: toPage,
            total_pages: totalPages,
            results_per_page: resultsPerPage
        });
        trackEvent(event);
    }, [
        createBaseEvent,
        trackEvent
    ]);
    const trackSortChanged = (0, _react.useCallback)((fromSort, toSort, resultsCount)=>{
        const event = createBaseEvent('sort_changed', `${fromSort}_to_${toSort}`, resultsCount, {
            from_sort: fromSort,
            to_sort: toSort,
            results_count: resultsCount
        });
        trackEvent(event);
    }, [
        createBaseEvent,
        trackEvent
    ]);
    // Tracking automático de cambios en filtros
    const trackFilterChanges = (0, _react.useCallback)((previousFilters, currentFilters, resultsCount)=>{
        // Detectar filtros añadidos
        const addedCategories = currentFilters.categories.filter((cat)=>!previousFilters.categories.includes(cat));
        const addedBrands = currentFilters.brands.filter((brand)=>!previousFilters.brands.includes(brand));
        // Detectar filtros removidos
        const removedCategories = previousFilters.categories.filter((cat)=>!currentFilters.categories.includes(cat));
        const removedBrands = previousFilters.brands.filter((brand)=>!currentFilters.brands.includes(brand));
        // Track filtros añadidos
        addedCategories.forEach((category)=>{
            trackFilterApplied('category', category, resultsCount);
        });
        addedBrands.forEach((brand)=>{
            trackFilterApplied('brand', brand, resultsCount);
        });
        // Track filtros removidos
        const remainingFilters = currentFilters.categories.length + currentFilters.brands.length;
        removedCategories.forEach((category)=>{
            trackFilterRemoved('category', category, remainingFilters);
        });
        removedBrands.forEach((brand)=>{
            trackFilterRemoved('brand', brand, remainingFilters);
        });
        // Track cambios de precio
        if (previousFilters.priceMin !== currentFilters.priceMin || previousFilters.priceMax !== currentFilters.priceMax) {
            const priceRange = `${currentFilters.priceMin || 0}-${currentFilters.priceMax || 'max'}`;
            trackFilterApplied('price_range', priceRange, resultsCount);
        }
        // Track cambios de búsqueda
        if (previousFilters.search !== currentFilters.search && currentFilters.search) {
            const hasFilters = currentFilters.categories.length > 0 || currentFilters.brands.length > 0;
            const filterCount = currentFilters.categories.length + currentFilters.brands.length;
            trackSearchPerformed(currentFilters.search, resultsCount, hasFilters, filterCount);
        }
        // Track cambios de ordenamiento
        if (previousFilters.sortBy !== currentFilters.sortBy) {
            trackSortChanged(previousFilters.sortBy, currentFilters.sortBy, resultsCount);
        }
        // Track cambios de página
        if (previousFilters.page !== currentFilters.page) {
            trackPaginationUsed(previousFilters.page, currentFilters.page, Math.ceil(resultsCount / currentFilters.limit), currentFilters.limit);
        }
    }, [
        trackFilterApplied,
        trackFilterRemoved,
        trackSearchPerformed,
        trackSortChanged,
        trackPaginationUsed
    ]);
    // Tracking de sesión al montar
    (0, _react.useEffect)(()=>{
        if (!enabled) {
            return;
        }
        const event = createBaseEvent('session_started', 'filter_system', 1, {
            user_agent: typeof window !== 'undefined' ? navigator.userAgent : '',
            screen_resolution: typeof window !== 'undefined' ? `${window.screen.width}x${window.screen.height}` : '',
            viewport_size: typeof window !== 'undefined' ? `${window.innerWidth}x${window.innerHeight}` : ''
        });
        trackEvent(event);
        // Cleanup al desmontar
        return ()=>{
            const endEvent = createBaseEvent('session_ended', 'filter_system', 1, {
                session_duration: Date.now() - startTime.current
            });
            trackEvent(endEvent);
        };
    }, [
        enabled,
        createBaseEvent,
        trackEvent
    ]);
    return {
        // Métodos de tracking específicos
        trackFilterApplied,
        trackFilterRemoved,
        trackFiltersCleared,
        trackSearchPerformed,
        trackPaginationUsed,
        trackSortChanged,
        trackFilterChanges,
        // Método genérico
        trackEvent,
        // Información de sesión
        sessionId: sessionId.current,
        userId,
        enabled
    };
}

//# sourceMappingURL=data:application/json;base64,