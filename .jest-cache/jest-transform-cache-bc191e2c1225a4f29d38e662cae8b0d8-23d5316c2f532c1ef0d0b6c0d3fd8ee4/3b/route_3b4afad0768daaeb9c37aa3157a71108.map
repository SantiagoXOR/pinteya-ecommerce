{"version":3,"names":["cov_16ch85ahy2","actualCoverage","s","GET","f","POST","runtime","RATE_LIMIT_CONFIGS","admin","windowMs","maxRequests","BulkCategoryActionSchema","_zod","z","object","action","enum","category_ids","array","string","uuid","min","max","data","parent_id","optional","nullable","sort_order","number","int","is_active","boolean","is_featured","BulkCategoryExportSchema","format","default","filters","search","fields","BulkCategoryImportSchema","name","slug","description","parent_slug","meta_title","meta_description","meta_keywords","options","update_existing","skip_duplicates","getCategoriesByIds","categoryIds","supabase","_server1","createClient","categories","error","from","select","in","b","Error","message","executeBulkAction","userId","getSupabaseClient","result","success_count","error_count","errors","processed_categories","foundIds","map","c","id","notFoundIds","filter","includes","forEach","push","category_id","length","updateData","shouldUpdate","categoryId","isCircular","checkCircularHierarchy","category_name","find","i","sortOrder","update","updated_at","Date","toISOString","eq","categoriesWithProducts","product_count","category","subcategories","parentIds","Set","parentId","parentCategory","childCount","categoriesToDelete","some","e","deletedCategories","deleteError","delete","Object","keys","idsToUpdate","updatedCategories","updateError","logBulkAuditAction","exportCategories","query","undefined","is","or","order","ascending","processedData","processed","image_url","parent_name","parent","created_at","filtered","field","hasOwnProperty","total","exported_at","importCategories","importData","existingCategories","existingSlugs","existingNames","toLowerCase","categoryData","replace","isDuplicateSlug","has","isDuplicateName","insertData","existingCategory","updatedCategory","single","newCategory","insert","add","currentParentId","visited","details","auditEntries","table_name","record_id","user_id","old_values","new_values","ip_address","user_agent","_logger","logger","log","LogLevel","ERROR","LogCategory","AUDIT","request","startTime","now","rateLimitResult","_ratelimiter","checkRateLimit","success","response","_server","NextResponse","json","status","authResult","_adminauth","requireAdminAuth","code","enterprise","timestamp","url","URL","searchParams","get","split","exportParams","parse","exportResult","_metrics","metricsCollector","recordApiCall","endpoint","method","statusCode","responseTime","user","meta","nextResponse","API","errorResponse","Math","floor","body","operation","importParams","bulkParams"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\categories\\bulk\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { createClient } from '@/lib/integrations/supabase/server';\r\nimport { requireAdminAuth } from '@/lib/auth/admin-auth';\r\nimport { checkRateLimit } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { metricsCollector } from '@/lib/enterprise/metrics';\r\n\r\n// ===================================\r\n// CONFIGURACIÓN\r\n// ===================================\r\nconst RATE_LIMIT_CONFIGS = {\r\n  admin: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    maxRequests: 50, // Más restrictivo para operaciones masivas\r\n  },\r\n};\r\n\r\n// ===================================\r\n// ESQUEMAS DE VALIDACIÓN\r\n// ===================================\r\nconst BulkCategoryActionSchema = z.object({\r\n  action: z.enum(['activate', 'deactivate', 'feature', 'unfeature', 'delete', 'update_parent', 'reorder']),\r\n  category_ids: z.array(z.string().uuid('ID de categoría inválido')).min(1, 'Debe seleccionar al menos una categoría').max(100, 'Máximo 100 categorías por operación'),\r\n  data: z.object({\r\n    parent_id: z.string().uuid('ID de categoría padre inválido').optional().nullable(),\r\n    sort_order: z.number().int().min(0).optional(),\r\n    is_active: z.boolean().optional(),\r\n    is_featured: z.boolean().optional(),\r\n  }).optional(),\r\n});\r\n\r\nconst BulkCategoryExportSchema = z.object({\r\n  format: z.enum(['csv', 'json', 'xlsx']).default('csv'),\r\n  filters: z.object({\r\n    is_active: z.boolean().optional(),\r\n    is_featured: z.boolean().optional(),\r\n    parent_id: z.string().uuid().optional().nullable(),\r\n    search: z.string().optional(),\r\n  }).optional(),\r\n  fields: z.array(z.string()).optional(),\r\n});\r\n\r\nconst BulkCategoryImportSchema = z.object({\r\n  format: z.enum(['csv', 'json']),\r\n  data: z.array(z.object({\r\n    name: z.string().min(1, 'El nombre es requerido'),\r\n    slug: z.string().optional(),\r\n    description: z.string().optional(),\r\n    parent_slug: z.string().optional(), // Para referenciar por slug\r\n    is_active: z.boolean().default(true),\r\n    is_featured: z.boolean().default(false),\r\n    sort_order: z.number().int().min(0).default(0),\r\n    meta_title: z.string().optional(),\r\n    meta_description: z.string().optional(),\r\n    meta_keywords: z.string().optional(),\r\n  })).min(1, 'Debe proporcionar al menos una categoría').max(1000, 'Máximo 1000 categorías por importación'),\r\n  options: z.object({\r\n    update_existing: z.boolean().default(false),\r\n    skip_duplicates: z.boolean().default(true),\r\n  }).optional(),\r\n});\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  meta?: {\r\n    total?: number;\r\n    processed?: number;\r\n    errors?: any[];\r\n  };\r\n}\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  description?: string;\r\n  image_url?: string;\r\n  parent_id?: string;\r\n  is_active: boolean;\r\n  is_featured: boolean;\r\n  sort_order: number;\r\n  product_count: number;\r\n  meta_title?: string;\r\n  meta_description?: string;\r\n  meta_keywords?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface BulkOperationResult {\r\n  success_count: number;\r\n  error_count: number;\r\n  errors: Array<{\r\n    category_id?: string;\r\n    category_name?: string;\r\n    error: string;\r\n  }>;\r\n  processed_categories: Category[];\r\n}\r\n\r\n// ===================================\r\n// FUNCIONES AUXILIARES\r\n// ===================================\r\nasync function getCategoriesByIds(categoryIds: string[]): Promise<Category[]> {\r\n  const supabase = await createClient();\r\n\r\n  const { data: categories, error } = await supabase\r\n    .from('categories')\r\n    .select('*')\r\n    .in('id', categoryIds);\r\n\r\n  if (error) {\r\n    throw new Error(`Error obteniendo categorías: ${error.message}`);\r\n  }\r\n\r\n  return categories || [];\r\n}\r\n\r\nasync function executeBulkAction(\r\n  action: string,\r\n  categoryIds: string[],\r\n  data?: any,\r\n  userId?: string\r\n): Promise<BulkOperationResult> {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Cliente administrativo de Supabase no disponible');\r\n  }\r\n\r\n  const result: BulkOperationResult = {\r\n    success_count: 0,\r\n    error_count: 0,\r\n    errors: [],\r\n    processed_categories: []\r\n  };\r\n\r\n  // Obtener categorías existentes\r\n  const categories = await getCategoriesByIds(categoryIds);\r\n  const foundIds = categories.map(c => c.id);\r\n  const notFoundIds = categoryIds.filter(id => !foundIds.includes(id));\r\n\r\n  // Agregar errores para categorías no encontradas\r\n  notFoundIds.forEach(id => {\r\n    result.errors.push({\r\n      category_id: id,\r\n      error: 'Categoría no encontrada'\r\n    });\r\n    result.error_count++;\r\n  });\r\n\r\n  if (foundIds.length === 0) {\r\n    return result;\r\n  }\r\n\r\n  try {\r\n    let updateData: any = {};\r\n    let shouldUpdate = true;\r\n\r\n    switch (action) {\r\n      case 'activate':\r\n        updateData = { is_active: true };\r\n        break;\r\n      case 'deactivate':\r\n        updateData = { is_active: false };\r\n        break;\r\n      case 'feature':\r\n        updateData = { is_featured: true };\r\n        break;\r\n      case 'unfeature':\r\n        updateData = { is_featured: false };\r\n        break;\r\n      case 'update_parent':\r\n        updateData = { parent_id: data?.parent_id || null };\r\n        \r\n        // Verificar jerarquías circulares\r\n        if (data?.parent_id) {\r\n          for (const categoryId of foundIds) {\r\n            const isCircular = await checkCircularHierarchy(categoryId, data.parent_id);\r\n            if (isCircular) {\r\n              result.errors.push({\r\n                category_id: categoryId,\r\n                category_name: categories.find(c => c.id === categoryId)?.name,\r\n                error: 'Crearía una jerarquía circular'\r\n              });\r\n              result.error_count++;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case 'reorder':\r\n        // Para reordenar, necesitamos manejar cada categoría individualmente\r\n        shouldUpdate = false;\r\n        for (let i = 0; i < foundIds.length; i++) {\r\n          const categoryId = foundIds[i];\r\n          const sortOrder = (data?.sort_order || 0) + i;\r\n          \r\n          const { error } = await supabase\r\n            .from('categories')\r\n            .update({ \r\n              sort_order: sortOrder,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', categoryId);\r\n\r\n          if (error) {\r\n            result.errors.push({\r\n              category_id: categoryId,\r\n              category_name: categories.find(c => c.id === categoryId)?.name,\r\n              error: error.message\r\n            });\r\n            result.error_count++;\r\n          } else {\r\n            result.success_count++;\r\n          }\r\n        }\r\n        break;\r\n      case 'delete':\r\n        // Verificar que las categorías no tengan productos o subcategorías\r\n        const categoriesWithProducts = categories.filter(c => c.product_count > 0);\r\n        if (categoriesWithProducts.length > 0) {\r\n          categoriesWithProducts.forEach(category => {\r\n            result.errors.push({\r\n              category_id: category.id,\r\n              category_name: category.name,\r\n              error: `Tiene ${category.product_count} productos asociados`\r\n            });\r\n            result.error_count++;\r\n          });\r\n        }\r\n\r\n        // Verificar subcategorías\r\n        const { data: subcategories } = await supabase\r\n          .from('categories')\r\n          .select('id, name, parent_id')\r\n          .in('parent_id', foundIds);\r\n\r\n        if (subcategories && subcategories.length > 0) {\r\n          const parentIds = [...new Set(subcategories.map(s => s.parent_id))];\r\n          parentIds.forEach(parentId => {\r\n            const parentCategory = categories.find(c => c.id === parentId);\r\n            const childCount = subcategories.filter(s => s.parent_id === parentId).length;\r\n            result.errors.push({\r\n              category_id: parentId!,\r\n              category_name: parentCategory?.name,\r\n              error: `Tiene ${childCount} subcategorías`\r\n            });\r\n            result.error_count++;\r\n          });\r\n        }\r\n\r\n        // Eliminar solo las categorías que no tienen restricciones\r\n        const categoriesToDelete = foundIds.filter(id => \r\n          !result.errors.some(e => e.category_id === id)\r\n        );\r\n\r\n        if (categoriesToDelete.length > 0) {\r\n          const { data: deletedCategories, error: deleteError } = await supabase\r\n            .from('categories')\r\n            .delete()\r\n            .in('id', categoriesToDelete)\r\n            .select();\r\n\r\n          if (deleteError) {\r\n            categoriesToDelete.forEach(id => {\r\n              result.errors.push({\r\n                category_id: id,\r\n                category_name: categories.find(c => c.id === id)?.name,\r\n                error: deleteError.message\r\n              });\r\n              result.error_count++;\r\n            });\r\n          } else {\r\n            result.success_count = deletedCategories?.length || 0;\r\n            result.processed_categories = deletedCategories || [];\r\n          }\r\n        }\r\n        shouldUpdate = false;\r\n        break;\r\n      default:\r\n        throw new Error(`Acción '${action}' no implementada`);\r\n    }\r\n\r\n    if (shouldUpdate && Object.keys(updateData).length > 0) {\r\n      // Filtrar IDs que no tuvieron errores\r\n      const idsToUpdate = foundIds.filter(id => \r\n        !result.errors.some(e => e.category_id === id)\r\n      );\r\n\r\n      if (idsToUpdate.length > 0) {\r\n        const { data: updatedCategories, error: updateError } = await supabase\r\n          .from('categories')\r\n          .update({\r\n            ...updateData,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', idsToUpdate)\r\n          .select();\r\n\r\n        if (updateError) {\r\n          idsToUpdate.forEach(id => {\r\n            result.errors.push({\r\n              category_id: id,\r\n              category_name: categories.find(c => c.id === id)?.name,\r\n              error: updateError.message\r\n            });\r\n            result.error_count++;\r\n          });\r\n        } else {\r\n          result.success_count = updatedCategories?.length || 0;\r\n          result.processed_categories = updatedCategories || [];\r\n        }\r\n      }\r\n    }\r\n\r\n    // Registrar auditoría para operaciones exitosas\r\n    if (userId && result.success_count > 0) {\r\n      await logBulkAuditAction(action, result.processed_categories.map(c => c.id), userId, {\r\n        action,\r\n        data,\r\n        result: {\r\n          success_count: result.success_count,\r\n          error_count: result.error_count\r\n        }\r\n      });\r\n    }\r\n\r\n  } catch (error: any) {\r\n    // Si hay un error general, marcarlo para todas las categorías\r\n    foundIds.forEach(id => {\r\n      if (!result.errors.some(e => e.category_id === id)) {\r\n        result.errors.push({\r\n          category_id: id,\r\n          category_name: categories.find(c => c.id === id)?.name,\r\n          error: error.message || 'Error desconocido'\r\n        });\r\n        result.error_count++;\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function exportCategories(filters: any, format: string, fields?: string[]): Promise<any> {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Cliente administrativo de Supabase no disponible');\r\n  }\r\n\r\n  let query = supabase\r\n    .from('categories')\r\n    .select(`\r\n      id,\r\n      name,\r\n      slug,\r\n      description,\r\n      image_url,\r\n      parent_id,\r\n      is_active,\r\n      is_featured,\r\n      sort_order,\r\n      product_count,\r\n      meta_title,\r\n      meta_description,\r\n      meta_keywords,\r\n      created_at,\r\n      updated_at,\r\n      parent:parent_id(name, slug)\r\n    `);\r\n\r\n  // Aplicar filtros\r\n  if (filters?.is_active !== undefined) {\r\n    query = query.eq('is_active', filters.is_active);\r\n  }\r\n  if (filters?.is_featured !== undefined) {\r\n    query = query.eq('is_featured', filters.is_featured);\r\n  }\r\n  if (filters?.parent_id !== undefined) {\r\n    if (filters.parent_id === null) {\r\n      query = query.is('parent_id', null);\r\n    } else {\r\n      query = query.eq('parent_id', filters.parent_id);\r\n    }\r\n  }\r\n  if (filters?.search) {\r\n    query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);\r\n  }\r\n\r\n  const { data: categories, error } = await query.order('sort_order', { ascending: true });\r\n\r\n  if (error) {\r\n    throw new Error(`Error exportando categorías: ${error.message}`);\r\n  }\r\n\r\n  // Procesar datos según el formato\r\n  const processedData = categories?.map(category => {\r\n    const processed: any = {\r\n      id: category.id,\r\n      name: category.name,\r\n      slug: category.slug,\r\n      description: category.description || '',\r\n      image_url: category.image_url || '',\r\n      parent_name: category.parent?.name || '',\r\n      is_active: category.is_active,\r\n      is_featured: category.is_featured,\r\n      sort_order: category.sort_order,\r\n      product_count: category.product_count,\r\n      meta_title: category.meta_title || '',\r\n      meta_description: category.meta_description || '',\r\n      meta_keywords: category.meta_keywords || '',\r\n      created_at: category.created_at,\r\n      updated_at: category.updated_at\r\n    };\r\n\r\n    // Filtrar campos si se especificaron\r\n    if (fields && fields.length > 0) {\r\n      const filtered: any = {};\r\n      fields.forEach(field => {\r\n        if (processed.hasOwnProperty(field)) {\r\n          filtered[field] = processed[field];\r\n        }\r\n      });\r\n      return filtered;\r\n    }\r\n\r\n    return processed;\r\n  }) || [];\r\n\r\n  return {\r\n    data: processedData,\r\n    total: processedData.length,\r\n    format,\r\n    exported_at: new Date().toISOString()\r\n  };\r\n}\r\n\r\nasync function importCategories(importData: any, options: any, userId: string): Promise<BulkOperationResult> {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    throw new Error('Cliente administrativo de Supabase no disponible');\r\n  }\r\n\r\n  const result: BulkOperationResult = {\r\n    success_count: 0,\r\n    error_count: 0,\r\n    errors: [],\r\n    processed_categories: []\r\n  };\r\n\r\n  // Obtener categorías existentes para verificar duplicados\r\n  const { data: existingCategories } = await supabase\r\n    .from('categories')\r\n    .select('id, name, slug');\r\n\r\n  const existingSlugs = new Set(existingCategories?.map(c => c.slug) || []);\r\n  const existingNames = new Set(existingCategories?.map(c => c.name.toLowerCase()) || []);\r\n\r\n  // Procesar cada categoría\r\n  for (let i = 0; i < importData.length; i++) {\r\n    const categoryData = importData[i];\r\n    \r\n    try {\r\n      // Generar slug si no existe\r\n      if (!categoryData.slug) {\r\n        categoryData.slug = categoryData.name\r\n          .toLowerCase()\r\n          .replace(/[^a-z0-9]+/g, '-')\r\n          .replace(/(^-|-$)/g, '');\r\n      }\r\n\r\n      // Verificar duplicados\r\n      const isDuplicateSlug = existingSlugs.has(categoryData.slug);\r\n      const isDuplicateName = existingNames.has(categoryData.name.toLowerCase());\r\n\r\n      if ((isDuplicateSlug || isDuplicateName) && options?.skip_duplicates) {\r\n        result.errors.push({\r\n          category_name: categoryData.name,\r\n          error: 'Categoría duplicada (omitida)'\r\n        });\r\n        result.error_count++;\r\n        continue;\r\n      }\r\n\r\n      // Resolver parent_id si se proporciona parent_slug\r\n      let parentId = null;\r\n      if (categoryData.parent_slug) {\r\n        const parentCategory = existingCategories?.find(c => c.slug === categoryData.parent_slug);\r\n        if (parentCategory) {\r\n          parentId = parentCategory.id;\r\n        } else {\r\n          result.errors.push({\r\n            category_name: categoryData.name,\r\n            error: `Categoría padre no encontrada: ${categoryData.parent_slug}`\r\n          });\r\n          result.error_count++;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      const insertData = {\r\n        name: categoryData.name,\r\n        slug: categoryData.slug,\r\n        description: categoryData.description || null,\r\n        parent_id: parentId,\r\n        is_active: categoryData.is_active ?? true,\r\n        is_featured: categoryData.is_featured ?? false,\r\n        sort_order: categoryData.sort_order ?? 0,\r\n        meta_title: categoryData.meta_title || null,\r\n        meta_description: categoryData.meta_description || null,\r\n        meta_keywords: categoryData.meta_keywords || null,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      if (isDuplicateSlug && options?.update_existing) {\r\n        // Actualizar categoría existente\r\n        const existingCategory = existingCategories?.find(c => c.slug === categoryData.slug);\r\n        if (existingCategory) {\r\n          const { data: updatedCategory, error } = await supabase\r\n            .from('categories')\r\n            .update(insertData)\r\n            .eq('id', existingCategory.id)\r\n            .select()\r\n            .single();\r\n\r\n          if (error) {\r\n            result.errors.push({\r\n              category_name: categoryData.name,\r\n              error: `Error actualizando: ${error.message}`\r\n            });\r\n            result.error_count++;\r\n          } else {\r\n            result.processed_categories.push(updatedCategory);\r\n            result.success_count++;\r\n          }\r\n        }\r\n      } else {\r\n        // Crear nueva categoría\r\n        const { data: newCategory, error } = await supabase\r\n          .from('categories')\r\n          .insert(insertData)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) {\r\n          result.errors.push({\r\n            category_name: categoryData.name,\r\n            error: `Error creando: ${error.message}`\r\n          });\r\n          result.error_count++;\r\n        } else {\r\n          result.processed_categories.push(newCategory);\r\n          result.success_count++;\r\n          existingSlugs.add(newCategory.slug);\r\n          existingNames.add(newCategory.name.toLowerCase());\r\n        }\r\n      }\r\n\r\n    } catch (error: any) {\r\n      result.errors.push({\r\n        category_name: categoryData.name || `Fila ${i + 1}`,\r\n        error: error.message || 'Error desconocido'\r\n      });\r\n      result.error_count++;\r\n    }\r\n  }\r\n\r\n  // Registrar auditoría\r\n  if (result.success_count > 0) {\r\n    await logBulkAuditAction('import', result.processed_categories.map(c => c.id), userId, {\r\n      action: 'import',\r\n      options,\r\n      result: {\r\n        success_count: result.success_count,\r\n        error_count: result.error_count\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nasync function checkCircularHierarchy(categoryId: string, parentId: string): Promise<boolean> {\r\n  const supabase = getSupabaseClient(true);\r\n  \r\n  if (!supabase) {\r\n    return false;\r\n  }\r\n\r\n  if (categoryId === parentId) {\r\n    return true;\r\n  }\r\n\r\n  let currentParentId = parentId;\r\n  const visited = new Set<string>();\r\n\r\n  while (currentParentId && !visited.has(currentParentId)) {\r\n    visited.add(currentParentId);\r\n\r\n    if (currentParentId === categoryId) {\r\n      return true;\r\n    }\r\n\r\n    const { data: parent } = await supabase\r\n      .from('categories')\r\n      .select('parent_id')\r\n      .eq('id', currentParentId)\r\n      .single();\r\n\r\n    currentParentId = parent?.parent_id;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nasync function logBulkAuditAction(action: string, categoryIds: string[], userId: string, details?: any): Promise<void> {\r\n  try {\r\n    const supabase = getSupabaseClient(true);\r\n    if (!supabase) {return;}\r\n\r\n    const auditEntries = categoryIds.map(categoryId => ({\r\n      table_name: 'categories',\r\n      record_id: categoryId,\r\n      action: `bulk_${action}`,\r\n      user_id: userId,\r\n      old_values: null,\r\n      new_values: details || null,\r\n      ip_address: null,\r\n      user_agent: null,\r\n      created_at: new Date().toISOString()\r\n    }));\r\n\r\n    await supabase.from('audit_logs').insert(auditEntries);\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.AUDIT, 'Error registrando auditoría masiva', { error, action, categoryIds });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// GET /api/admin/categories/bulk - Exportar categorías (Admin)\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      RATE_LIMIT_CONFIGS.admin,\r\n      'admin-categories-bulk-export'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      // Rate limit headers are handled internally\r\n      return response;\r\n    }\r\n\r\n    // Verificar autenticación de admin\r\n    const authResult = await requireAdminAuth(request, ['categories_read']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const url = new URL(request.url);\r\n    const format = url.searchParams.get('format') || 'csv';\r\n    const fields = url.searchParams.get('fields')?.split(',');\r\n    \r\n    // Parsear filtros\r\n    const filters: any = {};\r\n    if (url.searchParams.get('is_active') !== null) {\r\n      filters.is_active = url.searchParams.get('is_active') === 'true';\r\n    }\r\n    if (url.searchParams.get('is_featured') !== null) {\r\n      filters.is_featured = url.searchParams.get('is_featured') === 'true';\r\n    }\r\n    if (url.searchParams.get('parent_id')) {\r\n      filters.parent_id = url.searchParams.get('parent_id');\r\n    }\r\n    if (url.searchParams.get('search')) {\r\n      filters.search = url.searchParams.get('search');\r\n    }\r\n\r\n    // Validar parámetros\r\n    const exportParams = BulkCategoryExportSchema.parse({\r\n      format,\r\n      filters,\r\n      fields\r\n    });\r\n\r\n    // Exportar categorías\r\n    const exportResult = await exportCategories(exportParams.filters, exportParams.format, exportParams.fields);\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/categories/bulk',\r\n      method: 'GET',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.user?.id\r\n    });\r\n\r\n    const response: ApiResponse<typeof exportResult> = {\r\n      data: exportResult,\r\n      success: true,\r\n      message: `${exportResult.total} categorías exportadas en formato ${format}`,\r\n      meta: {\r\n        total: exportResult.total\r\n      }\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    // Rate limit headers are handled internally\r\n    return nextResponse;\r\n\r\n  } catch (error: any) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en GET /api/admin/categories/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/categories/bulk',\r\n      method: 'GET',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error.message || 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor'\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST /api/admin/categories/bulk - Operaciones masivas e importación (Admin)\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Rate limiting más restrictivo para operaciones masivas\r\n    const rateLimitResult = await checkRateLimit(\r\n      request,\r\n      {\r\n        windowMs: RATE_LIMIT_CONFIGS.admin.windowMs,\r\n        maxRequests: Math.floor(RATE_LIMIT_CONFIGS.admin.maxRequests / 4),\r\n        message: 'Demasiadas operaciones masivas'\r\n      },\r\n      'admin-categories-bulk-operations'\r\n    );\r\n\r\n    if (!rateLimitResult.success) {\r\n      const response = NextResponse.json(\r\n        { error: rateLimitResult.message },\r\n        { status: 429 }\r\n      );\r\n      // Rate limit headers are handled internally\r\n      return response;\r\n    }\r\n\r\n    // Verificar autenticación de admin\r\n    const authResult = await requireAdminAuth(request, ['categories_create', 'categories_update', 'categories_delete']);\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        {\r\n          error: authResult.error,\r\n          code: authResult.code,\r\n          enterprise: true,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { operation } = body;\r\n\r\n    let result: BulkOperationResult;\r\n    let message: string;\r\n\r\n    if (operation === 'import') {\r\n      // Importación de categorías\r\n      const importParams = BulkCategoryImportSchema.parse(body);\r\n      result = await importCategories(importParams.data, importParams.options, authResult.user?.id!);\r\n      message = `Importación completada: ${result.success_count} categorías procesadas, ${result.error_count} errores`;\r\n    } else {\r\n      // Operaciones masivas estándar\r\n      const bulkParams = BulkCategoryActionSchema.parse(body);\r\n      result = await executeBulkAction(\r\n        bulkParams.action,\r\n        bulkParams.category_ids,\r\n        bulkParams.data,\r\n        authResult.user?.id\r\n      );\r\n      message = `Operación '${bulkParams.action}' completada: ${result.success_count} categorías procesadas, ${result.error_count} errores`;\r\n    }\r\n\r\n    // Registrar métricas\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/categories/bulk',\r\n      method: 'POST',\r\n      statusCode: 200,\r\n      responseTime: Date.now() - startTime,\r\n      userId: authResult.user?.id\r\n    });\r\n\r\n    const response: ApiResponse<BulkOperationResult> = {\r\n      data: result,\r\n      success: true,\r\n      message,\r\n      meta: {\r\n        total: result.success_count + result.error_count,\r\n        processed: result.success_count,\r\n        errors: result.errors\r\n      }\r\n    };\r\n\r\n    const nextResponse = NextResponse.json(response);\r\n    // Rate limit headers are handled internally\r\n    return nextResponse;\r\n\r\n  } catch (error: any) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Error en POST /api/admin/categories/bulk', { error });\r\n\r\n    // Registrar métricas de error\r\n    metricsCollector.recordApiCall({\r\n      endpoint: '/api/admin/categories/bulk',\r\n      method: 'POST',\r\n      statusCode: 500,\r\n      responseTime: Date.now() - startTime,\r\n      error: error.message || 'Unknown error'\r\n    });\r\n\r\n    const errorResponse: ApiResponse<null> = {\r\n      data: null,\r\n      success: false,\r\n      error: error.message || 'Error interno del servidor'\r\n    };\r\n\r\n    return NextResponse.json(errorResponse, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}