{"version":3,"names":["CACHE_CONFIGS","cov_7leq7z489","f","s","CacheManager","CacheUtils","cacheManager","cached","MERCADOPAGO_RESPONSE","ttl","prefix","compress","serialize","PAYMENT_INFO","SYSTEM_CONFIG","PRODUCT_DATA","USER_SESSION","constructor","getInstance","instance","b","generateKey","config","key","data","serialized","JSON","stringify","toString","length","simpleCompress","error","_logger","logger","LogCategory","API","deserialize","deserialized","startsWith","simpleDecompress","parse","replace","get","startTime","Date","now","cacheKey","_redis","redisCache","info","result","set","value","success","delete","del","getOrSet","fetcher","catch","warn","invalidatePattern","pattern","fullPattern","getStats","hits","misses","hitRate","totalKeys","clear","keyGenerator","target","propertyName","descriptor","method","args","apply","cacheMercadoPagoResponse","cachePaymentInfo","paymentId","cacheProductData","productId","invalidatePayment","invalidateProduct"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CACHE MANAGER\r\n// ===================================\r\n\r\nimport { redisCache } from './integrations/redis';\r\nimport { logger, LogLevel, LogCategory } from './enterprise/logger';\r\n\r\n// Configuración de cache\r\nexport interface CacheConfig {\r\n  ttl: number;           // Time to live en segundos\r\n  prefix: string;        // Prefijo para las claves\r\n  compress?: boolean;    // Comprimir datos grandes\r\n  serialize?: boolean;   // Serializar objetos complejos\r\n}\r\n\r\n// Configuraciones predefinidas\r\nexport const CACHE_CONFIGS = {\r\n  // Para respuestas de MercadoPago (corta duración)\r\n  MERCADOPAGO_RESPONSE: {\r\n    ttl: 300,              // 5 minutos\r\n    prefix: 'mp_response',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para información de pagos (duración media)\r\n  PAYMENT_INFO: {\r\n    ttl: 1800,             // 30 minutos\r\n    prefix: 'payment_info',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para configuraciones del sistema (larga duración)\r\n  SYSTEM_CONFIG: {\r\n    ttl: 3600,             // 1 hora\r\n    prefix: 'sys_config',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para datos de productos (duración media)\r\n  PRODUCT_DATA: {\r\n    ttl: 900,              // 15 minutos\r\n    prefix: 'product',\r\n    compress: true,\r\n    serialize: true,\r\n  },\r\n  \r\n  // Para sesiones de usuario (corta duración)\r\n  USER_SESSION: {\r\n    ttl: 600,              // 10 minutos\r\n    prefix: 'user_session',\r\n    compress: false,\r\n    serialize: true,\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Clase principal para manejo de cache\r\n */\r\nexport class CacheManager {\r\n  private static instance: CacheManager;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): CacheManager {\r\n    if (!CacheManager.instance) {\r\n      CacheManager.instance = new CacheManager();\r\n    }\r\n    return CacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Genera clave de cache\r\n   */\r\n  private generateKey(config: CacheConfig, key: string): string {\r\n    return `cache:${config.prefix}:${key}`;\r\n  }\r\n\r\n  /**\r\n   * Serializa datos para almacenamiento\r\n   */\r\n  private serialize(data: any, config: CacheConfig): string {\r\n    try {\r\n      let serialized = config.serialize ? JSON.stringify(data) : data.toString();\r\n      \r\n      if (config.compress && serialized.length > 1000) {\r\n        // Implementación básica de compresión (en producción usar zlib)\r\n        serialized = this.simpleCompress(serialized);\r\n      }\r\n      \r\n      return serialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Serialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deserializa datos del cache\r\n   */\r\n  private deserialize(data: string, config: CacheConfig): any {\r\n    try {\r\n      let deserialized = data;\r\n      \r\n      if (config.compress && data.startsWith('COMPRESSED:')) {\r\n        deserialized = this.simpleDecompress(data);\r\n      }\r\n      \r\n      return config.serialize ? JSON.parse(deserialized) : deserialized;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Deserialization error', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compresión simple (placeholder para implementación real)\r\n   */\r\n  private simpleCompress(data: string): string {\r\n    // En producción, usar zlib o similar\r\n    return `COMPRESSED:${data}`;\r\n  }\r\n\r\n  /**\r\n   * Descompresión simple (placeholder para implementación real)\r\n   */\r\n  private simpleDecompress(data: string): string {\r\n    return data.replace('COMPRESSED:', '');\r\n  }\r\n\r\n  /**\r\n   * Obtiene un valor del cache\r\n   */\r\n  async get<T>(key: string, config: CacheConfig): Promise<T | null> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const cached = await redisCache.get(cacheKey);\r\n      \r\n      if (cached === null) {\r\n        logger.info(LogCategory.API, 'Cache miss');\r\n        return null;\r\n      }\r\n\r\n      const result = this.deserialize(cached, config);\r\n      \r\n      logger.info(LogCategory.API, 'Cache hit');\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache get error', error as Error);\r\n      return null; // Fallar silenciosamente para no afectar la aplicación\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Establece un valor en el cache\r\n   */\r\n  async set<T>(key: string, value: T, config: CacheConfig): Promise<boolean> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const serialized = this.serialize(value, config);\r\n      const success = await redisCache.set(cacheKey, serialized, config.ttl);\r\n      \r\n      logger.info(LogCategory.API, 'Cache set');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache set error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Elimina un valor del cache\r\n   */\r\n  async delete(key: string, config: CacheConfig): Promise<boolean> {\r\n    const cacheKey = this.generateKey(config, key);\r\n\r\n    try {\r\n      const success = await redisCache.del(cacheKey);\r\n      \r\n      logger.info(LogCategory.API, 'Cache delete');\r\n\r\n      return success;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache delete error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene o establece un valor (patrón cache-aside)\r\n   */\r\n  async getOrSet<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheConfig\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache primero\r\n    const cached = await this.get<T>(key, config);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n\r\n    // Si no está en cache, obtener del origen\r\n    const startTime = Date.now();\r\n    try {\r\n      const value = await fetcher();\r\n      \r\n      // Almacenar en cache de forma asíncrona\r\n      this.set(key, value, config).catch(error => {\r\n        logger.warn(LogCategory.API, 'Background cache set failed');\r\n      });\r\n\r\n      logger.info(LogCategory.API, 'Cache miss - fetched from source');\r\n\r\n      return value;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Fetcher error in getOrSet', error as Error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por patrón\r\n   */\r\n  async invalidatePattern(pattern: string, config: CacheConfig): Promise<number> {\r\n    const fullPattern = this.generateKey(config, pattern);\r\n    \r\n    try {\r\n      // En Redis real, usaríamos SCAN + DEL para patrones\r\n      // Por simplicidad, aquí solo registramos la operación\r\n      logger.info(LogCategory.API, 'Cache invalidation requested');\r\n\r\n      // TODO: Implementar invalidación real por patrón\r\n      return 0;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache invalidation error', error as Error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene estadísticas del cache\r\n   */\r\n  async getStats(): Promise<{\r\n    hits: number;\r\n    misses: number;\r\n    hitRate: number;\r\n    totalKeys: number;\r\n  }> {\r\n    try {\r\n      // En implementación real, obtendríamos estas métricas de Redis\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache stats error', error as Error);\r\n      return {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        totalKeys: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpia todo el cache de un prefijo\r\n   */\r\n  async clear(config: CacheConfig): Promise<boolean> {\r\n    try {\r\n      logger.info(LogCategory.API, 'Cache clear requested');\r\n\r\n      // TODO: Implementar limpieza real por prefijo\r\n      return true;\r\n    } catch (error) {\r\n      logger.error(LogCategory.API, 'Cache clear error', error as Error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const cacheManager = CacheManager.getInstance();\r\n\r\n/**\r\n * Decorador para cachear resultados de funciones\r\n */\r\nexport function cached(config: CacheConfig, keyGenerator?: (...args: any[]) => string) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;\r\n      \r\n      return cacheManager.getOrSet(\r\n        key,\r\n        () => method.apply(this, args),\r\n        config\r\n      );\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * Funciones de utilidad para casos comunes\r\n */\r\nexport const CacheUtils = {\r\n  /**\r\n   * Cache para respuestas de MercadoPago\r\n   */\r\n  async cacheMercadoPagoResponse<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(key, fetcher, CACHE_CONFIGS.MERCADOPAGO_RESPONSE);\r\n  },\r\n\r\n  /**\r\n   * Cache para información de pagos\r\n   */\r\n  async cachePaymentInfo<T>(paymentId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`payment:${paymentId}`, fetcher, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Cache para datos de productos\r\n   */\r\n  async cacheProductData<T>(productId: string, fetcher: () => Promise<T>): Promise<T> {\r\n    return cacheManager.getOrSet(`product:${productId}`, fetcher, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un pago específico\r\n   */\r\n  async invalidatePayment(paymentId: string): Promise<boolean> {\r\n    return cacheManager.delete(`payment:${paymentId}`, CACHE_CONFIGS.PAYMENT_INFO);\r\n  },\r\n\r\n  /**\r\n   * Invalida cache de un producto específico\r\n   */\r\n  async invalidateProduct(productId: string): Promise<boolean> {\r\n    return cacheManager.delete(`product:${productId}`, CACHE_CONFIGS.PRODUCT_DATA);\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}