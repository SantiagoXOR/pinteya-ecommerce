3691a8e0e57b6688c9a008ad72580104
/**
 * Tests de integración para las APIs del sistema de drivers
 * Verifica todas las funcionalidades de las APIs implementadas
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _server = require("next/server");
const _route = require("../../src/app/api/driver/profile/route");
const _route1 = require("../../src/app/api/driver/routes/[id]/route");
const _route2 = require("../../src/app/api/driver/location/route");
const _route3 = require("../../src/app/api/driver/navigation/directions/route");
const _route4 = require("../../src/app/api/driver/deliveries/route");
// Mock de NextAuth
_globals.jest.mock('@/auth', ()=>({
        auth: _globals.jest.fn()
    }));
// Mock de Supabase
_globals.jest.mock('@/lib/supabase/server', ()=>({
        createClient: _globals.jest.fn()
    }));
(0, _globals.describe)('Driver APIs Integration Tests', ()=>{
    const mockAuth = require('@/auth').auth;
    const mockCreateClient = require('@/lib/supabase/server').createClient;
    const mockSession = {
        user: {
            email: 'carlos@pinteya.com',
            name: 'Carlos Rodríguez'
        }
    };
    const mockDriver = {
        id: 'driver-1',
        name: 'Carlos Rodríguez',
        email: 'carlos@pinteya.com',
        phone: '+54 11 1234-5678',
        vehicle_type: 'Van',
        license_plate: 'ABC123',
        status: 'available',
        current_location: {
            lat: -34.6037,
            lng: -58.3816
        }
    };
    const mockSupabaseClient = {
        from: _globals.jest.fn(()=>({
                select: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                single: _globals.jest.fn(()=>Promise.resolve({
                                        data: mockDriver,
                                        error: null
                                    })),
                                order: _globals.jest.fn(()=>Promise.resolve({
                                        data: [],
                                        error: null
                                    }))
                            })),
                        in: _globals.jest.fn(()=>({
                                order: _globals.jest.fn(()=>Promise.resolve({
                                        data: [],
                                        error: null
                                    }))
                            })),
                        gte: _globals.jest.fn(()=>({
                                lte: _globals.jest.fn(()=>Promise.resolve({
                                        data: [],
                                        error: null
                                    }))
                            }))
                    })),
                update: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                select: _globals.jest.fn(()=>({
                                        single: _globals.jest.fn(()=>Promise.resolve({
                                                data: mockDriver,
                                                error: null
                                            }))
                                    }))
                            }))
                    })),
                insert: _globals.jest.fn(()=>Promise.resolve({
                        data: null,
                        error: null
                    }))
            }))
    };
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        mockAuth.mockResolvedValue(mockSession);
        mockCreateClient.mockResolvedValue(mockSupabaseClient);
    });
    (0, _globals.describe)('Driver Profile API', ()=>{
        (0, _globals.it)('should get driver profile successfully', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/driver/profile');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.driver).toBeDefined();
            (0, _globals.expect)(data.driver.email).toBe('carlos@pinteya.com');
            (0, _globals.expect)(data.routes).toBeDefined();
            (0, _globals.expect)(data.todayStats).toBeDefined();
        });
        (0, _globals.it)('should update driver profile successfully', async ()=>{
            const requestBody = {
                status: 'busy',
                current_location: {
                    lat: -34.6118,
                    lng: -58.3960
                }
            };
            const request = new _server.NextRequest('http://localhost:3000/api/driver/profile', {
                method: 'PUT',
                body: JSON.stringify(requestBody)
            });
            const response = await (0, _route.PUT)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.driver).toBeDefined();
        });
        (0, _globals.it)('should return 401 for unauthenticated request', async ()=>{
            mockAuth.mockResolvedValue(null);
            const request = new _server.NextRequest('http://localhost:3000/api/driver/profile');
            const response = await (0, _route.GET)(request);
            (0, _globals.expect)(response.status).toBe(401);
        });
    });
    (0, _globals.describe)('Driver Location API', ()=>{
        (0, _globals.it)('should update location successfully', async ()=>{
            const requestBody = {
                location: {
                    lat: -34.6037,
                    lng: -58.3816
                },
                speed: 25,
                heading: 180,
                accuracy: 5
            };
            const request = new _server.NextRequest('http://localhost:3000/api/driver/location', {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });
            const response = await (0, _route2.POST)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.location).toBeDefined();
            (0, _globals.expect)(data.driver).toBeDefined();
        });
        (0, _globals.it)('should get current location successfully', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/driver/location');
            const response = await (0, _route2.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.location).toBeDefined();
            (0, _globals.expect)(data.status).toBeDefined();
        });
        (0, _globals.it)('should validate location data', async ()=>{
            const requestBody = {
                location: {
                    lat: 'invalid',
                    lng: -58.3816
                }
            };
            const request = new _server.NextRequest('http://localhost:3000/api/driver/location', {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });
            const response = await (0, _route2.POST)(request);
            (0, _globals.expect)(response.status).toBe(400);
        });
    });
    (0, _globals.describe)('Driver Routes API', ()=>{
        (0, _globals.it)('should get route details successfully', async ()=>{
            const mockRoute = {
                id: 'route-1',
                name: 'Ruta Centro',
                shipments: [
                    {
                        id: 'shipment-1',
                        customer_name: 'Cliente Test',
                        destination: {
                            address: 'Av. Corrientes 1234',
                            coordinates: {
                                lat: -34.6037,
                                lng: -58.3816
                            }
                        }
                    }
                ]
            };
            mockSupabaseClient.from().select().eq().single.mockResolvedValue({
                data: mockRoute,
                error: null
            });
            const request = new _server.NextRequest('http://localhost:3000/api/driver/routes/route-1');
            const response = await (0, _route1.GET)(request, {
                params: {
                    id: 'route-1'
                }
            });
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.id).toBe('route-1');
            (0, _globals.expect)(data.shipments).toBeDefined();
        });
    });
    (0, _globals.describe)('Driver Navigation API', ()=>{
        (0, _globals.it)('should calculate directions successfully', async ()=>{
            // Mock Google Directions API response
            global.fetch = _globals.jest.fn(()=>Promise.resolve({
                    json: ()=>Promise.resolve({
                            status: 'OK',
                            routes: [
                                {
                                    legs: [
                                        {
                                            distance: {
                                                value: 5000,
                                                text: '5.0 km'
                                            },
                                            duration: {
                                                value: 900,
                                                text: '15 mins'
                                            },
                                            steps: [
                                                {
                                                    html_instructions: 'Head north on Av. Corrientes',
                                                    distance: {
                                                        text: '500 m'
                                                    },
                                                    duration: {
                                                        text: '2 mins'
                                                    },
                                                    maneuver: 'straight',
                                                    start_location: {
                                                        lat: -34.6037,
                                                        lng: -58.3816
                                                    },
                                                    end_location: {
                                                        lat: -34.6000,
                                                        lng: -58.3816
                                                    }
                                                }
                                            ]
                                        }
                                    ],
                                    overview_polyline: {
                                        points: 'encoded_polyline'
                                    },
                                    bounds: {},
                                    waypoint_order: []
                                }
                            ]
                        })
                }));
            const requestBody = {
                origin: {
                    lat: -34.6037,
                    lng: -58.3816
                },
                destination: {
                    lat: -34.6118,
                    lng: -58.3960
                }
            };
            const request = new _server.NextRequest('http://localhost:3000/api/driver/navigation/directions', {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });
            const response = await (0, _route3.POST)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.route).toBeDefined();
            (0, _globals.expect)(data.instructions).toBeDefined();
            (0, _globals.expect)(data.summary).toBeDefined();
        });
    });
    (0, _globals.describe)('Driver Deliveries API', ()=>{
        (0, _globals.it)('should get deliveries successfully', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/driver/deliveries');
            const response = await (0, _route4.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.deliveries).toBeDefined();
            (0, _globals.expect)(data.stats).toBeDefined();
        });
        (0, _globals.it)('should update delivery status successfully', async ()=>{
            const requestBody = {
                delivery_id: 'delivery-1',
                route_id: 'route-1',
                status: 'delivered',
                delivery_notes: 'Entregado exitosamente'
            };
            const request = new _server.NextRequest('http://localhost:3000/api/driver/deliveries', {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });
            const response = await (0, _route4.POST)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.status).toBe('delivered');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,