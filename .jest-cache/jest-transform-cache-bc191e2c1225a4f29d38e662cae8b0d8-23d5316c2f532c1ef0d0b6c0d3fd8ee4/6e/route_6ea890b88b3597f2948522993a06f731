32f09820b14cd0f787ef7d85a24c40be
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2k4gxa9uwy() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\generate-screenshots\\route.ts";
  var hash = "6d5044ce1e5d6e4f962d807e70690ca224c6483d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\generate-screenshots\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "8": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 27,
          column: 23
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "10": {
        start: {
          line: 28,
          column: 14
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "11": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "12": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "14": {
        start: {
          line: 36,
          column: 18
        },
        end: {
          line: 36,
          column: 59
        }
      },
      "15": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "16": {
        start: {
          line: 39,
          column: 21
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 87
        }
      },
      "20": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 36
        }
      },
      "21": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "23": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 110
        }
      },
      "24": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "25": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 98
        }
      },
      "26": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 22
        }
      },
      "27": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 106
        }
      },
      "28": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 22
        }
      },
      "29": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "30": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "31": {
        start: {
          line: 73,
          column: 32
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "32": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "33": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "35": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "36": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 63
        }
      },
      "37": {
        start: {
          line: 91,
          column: 39
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "38": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "39": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "40": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 54
        }
      },
      "41": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 44
        }
      },
      "42": {
        start: {
          line: 105,
          column: 36
        },
        end: {
          line: 105,
          column: 95
        }
      },
      "43": {
        start: {
          line: 105,
          column: 57
        },
        end: {
          line: 105,
          column: 94
        }
      },
      "44": {
        start: {
          line: 106,
          column: 36
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "45": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 110,
          column: 30
        }
      },
      "46": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 108,
          column: 69
        }
      },
      "47": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 45
        }
      },
      "48": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 100
        }
      },
      "50": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "51": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 65
        }
      },
      "52": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "53": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "54": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "55": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "56": {
        start: {
          line: 141,
          column: 33
        },
        end: {
          line: 141,
          column: 53
        }
      },
      "57": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 142,
          column: 45
        }
      },
      "58": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "59": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "60": {
        start: {
          line: 152,
          column: 19
        },
        end: {
          line: 152,
          column: 41
        }
      },
      "61": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 94
        }
      },
      "62": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "63": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 155,
          column: 58
        }
      },
      "64": {
        start: {
          line: 156,
          column: 36
        },
        end: {
          line: 156,
          column: 102
        }
      },
      "65": {
        start: {
          line: 156,
          column: 57
        },
        end: {
          line: 156,
          column: 101
        }
      },
      "66": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "67": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "68": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 63
        }
      },
      "69": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "70": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 237,
          column: 5
        }
      },
      "71": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 53
        }
      },
      "72": {
        start: {
          line: 186,
          column: 21
        },
        end: {
          line: 186,
          column: 45
        }
      },
      "73": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 187,
          column: 55
        }
      },
      "74": {
        start: {
          line: 189,
          column: 19
        },
        end: {
          line: 189,
          column: 41
        }
      },
      "75": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 190,
          column: 94
        }
      },
      "76": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "77": {
        start: {
          line: 192,
          column: 26
        },
        end: {
          line: 192,
          column: 58
        }
      },
      "78": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 193,
          column: 32
        }
      },
      "79": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "80": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 197,
          column: 17
        }
      },
      "81": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 196,
          column: 29
        }
      },
      "82": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 201,
          column: 17
        }
      },
      "83": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 29
        }
      },
      "84": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "85": {
        start: {
          line: 204,
          column: 37
        },
        end: {
          line: 204,
          column: 77
        }
      },
      "86": {
        start: {
          line: 205,
          column: 34
        },
        end: {
          line: 205,
          column: 57
        }
      },
      "87": {
        start: {
          line: 206,
          column: 37
        },
        end: {
          line: 206,
          column: 92
        }
      },
      "88": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 209,
          column: 21
        }
      },
      "89": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 33
        }
      },
      "90": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 212,
          column: 73
        }
      },
      "91": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 42
        }
      },
      "92": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 31
        }
      },
      "93": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 65
        }
      },
      "94": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "95": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "96": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 62
        }
      },
      "97": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 33
          }
        },
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "POST",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 19
          }
        },
        loc: {
          start: {
            line: 37,
            column: 29
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 37
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 105,
            column: 49
          },
          end: {
            line: 105,
            column: 50
          }
        },
        loc: {
          start: {
            line: 105,
            column: 57
          },
          end: {
            line: 105,
            column: 94
          }
        },
        line: 105
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 107,
            column: 52
          },
          end: {
            line: 107,
            column: 53
          }
        },
        loc: {
          start: {
            line: 107,
            column: 60
          },
          end: {
            line: 110,
            column: 13
          }
        },
        line: 107
      },
      "9": {
        name: "GET",
        decl: {
          start: {
            line: 139,
            column: 15
          },
          end: {
            line: 139,
            column: 18
          }
        },
        loc: {
          start: {
            line: 139,
            column: 28
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 139
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 156,
            column: 49
          },
          end: {
            line: 156,
            column: 50
          }
        },
        loc: {
          start: {
            line: 156,
            column: 57
          },
          end: {
            line: 156,
            column: 101
          }
        },
        line: 156
      },
      "11": {
        name: "DELETE",
        decl: {
          start: {
            line: 183,
            column: 15
          },
          end: {
            line: 183,
            column: 21
          }
        },
        loc: {
          start: {
            line: 183,
            column: 31
          },
          end: {
            line: 238,
            column: 1
          }
        },
        line: 183
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 38
          }
        }, {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 33,
            column: 5
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 11
          },
          end: {
            line: 31,
            column: 14
          }
        }, {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 31,
            column: 32
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 22
          }
        }, {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 22
          }
        }, {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 22
          }
        }, {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 69,
            column: 19
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 22
          }
        }, {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 53
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 31
          },
          end: {
            line: 109,
            column: 39
          }
        }, {
          start: {
            line: 109,
            column: 42
          },
          end: {
            line: 109,
            column: 44
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 124,
            column: 25
          },
          end: {
            line: 124,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 25
          },
          end: {
            line: 124,
            column: 41
          }
        }, {
          start: {
            line: 124,
            column: 45
          },
          end: {
            line: 124,
            column: 61
          }
        }],
        line: 124
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 133,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 44
          },
          end: {
            line: 133,
            column: 57
          }
        }, {
          start: {
            line: 133,
            column: 60
          },
          end: {
            line: 133,
            column: 79
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 156,
            column: 57
          },
          end: {
            line: 156,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 57
          },
          end: {
            line: 156,
            column: 76
          }
        }, {
          start: {
            line: 156,
            column: 80
          },
          end: {
            line: 156,
            column: 101
          }
        }],
        line: 156
      },
      "12": {
        loc: {
          start: {
            line: 177,
            column: 19
          },
          end: {
            line: 177,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 44
          },
          end: {
            line: 177,
            column: 57
          }
        }, {
          start: {
            line: 177,
            column: 60
          },
          end: {
            line: 177,
            column: 79
          }
        }],
        line: 177
      },
      "13": {
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 197,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 197,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "14": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "15": {
        loc: {
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 199,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 199,
            column: 24
          }
        }, {
          start: {
            line: 199,
            column: 28
          },
          end: {
            line: 199,
            column: 48
          }
        }],
        line: 199
      },
      "16": {
        loc: {
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "17": {
        loc: {
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 209,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 209,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "18": {
        loc: {
          start: {
            line: 233,
            column: 19
          },
          end: {
            line: 233,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 44
          },
          end: {
            line: 233,
            column: 57
          }
        }, {
          start: {
            line: 233,
            column: 60
          },
          end: {
            line: 233,
            column: 79
          }
        }],
        line: 233
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\generate-screenshots\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// API ENDPOINT PARA GENERAR SCREENSHOTS AUTOM\xC1TICAMENTE\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { exec } from 'child_process'\r\nimport { promisify } from 'util'\r\nimport path from 'path'\r\n\r\nconst execAsync = promisify(exec)\r\n\r\ninterface GenerateScreenshotsRequest {\r\n  flow: 'checkout' | 'admin' | 'shop'\r\n  force?: boolean\r\n}\r\n\r\ninterface GenerateScreenshotsResponse {\r\n  success: boolean\r\n  count?: number\r\n  screenshots?: string[]\r\n  error?: string\r\n  duration?: number\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: GenerateScreenshotsRequest = await request.json()\r\n    \r\n    if (!body.flow) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Par\xE1metro \"flow\" es requerido'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    console.log(`\uD83D\uDE80 Iniciando generaci\xF3n de screenshots para flujo: ${body.flow}`)\r\n    \r\n    const startTime = Date.now()\r\n    \r\n    // Determinar qu\xE9 script ejecutar\r\n    let scriptPath: string\r\n    const scriptArgs: string[] = []\r\n    \r\n    switch (body.flow) {\r\n      case 'checkout':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'generate-checkout-screenshots.js')\r\n        break\r\n      case 'admin':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'admin-panel-audit.js')\r\n        break\r\n      case 'shop':\r\n        scriptPath = path.join(process.cwd(), 'scripts', 'generate-shop-screenshots.js')\r\n        break\r\n      default:\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: `Flujo no soportado: ${body.flow}`\r\n        }, { status: 400 })\r\n    }\r\n\r\n    // Verificar que el servidor est\xE9 corriendo\r\n    try {\r\n      const healthCheck = await fetch('http://localhost:3000/api/health', {\r\n        method: 'GET',\r\n        timeout: 5000\r\n      })\r\n      \r\n      if (!healthCheck.ok) {\r\n        throw new Error('Servidor no disponible')\r\n      }\r\n    } catch (healthError) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'El servidor debe estar corriendo en localhost:3000 para generar screenshots'\r\n      }, { status: 503 })\r\n    }\r\n\r\n    // Ejecutar script de generaci\xF3n\r\n    try {\r\n      console.log(`\uD83D\uDCF8 Ejecutando script: ${scriptPath}`)\r\n      \r\n      const { stdout, stderr } = await execAsync(`node \"${scriptPath}\"`, {\r\n        cwd: process.cwd(),\r\n        timeout: 120000, // 2 minutos timeout\r\n        env: {\r\n          ...process.env,\r\n          NODE_ENV: 'development'\r\n        }\r\n      })\r\n\r\n      if (stderr && !stderr.includes('Warning')) {\r\n        console.warn('Advertencias del script:', stderr)\r\n      }\r\n\r\n      console.log('Salida del script:', stdout)\r\n\r\n      // Parsear resultados del script\r\n      const lines = stdout.split('\\n')\r\n      const screenshotLines = lines.filter(line => line.includes('Screenshot guardado:'))\r\n      const screenshotCount = screenshotLines.length\r\n\r\n      const screenshots = screenshotLines.map(line => {\r\n        const match = line.match(/Screenshot guardado: (.+)/)\r\n        return match ? match[1] : ''\r\n      }).filter(Boolean)\r\n\r\n      const duration = Date.now() - startTime\r\n\r\n      console.log(`\u2705 Generaci\xF3n completada: ${screenshotCount} screenshots en ${duration}ms`)\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        count: screenshotCount,\r\n        screenshots,\r\n        duration\r\n      })\r\n\r\n    } catch (execError: any) {\r\n      console.error('Error ejecutando script:', execError)\r\n      \r\n      return NextResponse.json({\r\n        success: false,\r\n        error: `Error ejecutando script: ${execError.message}`,\r\n        details: execError.stderr || execError.stdout\r\n      }, { status: 500 })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error general:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint GET para verificar estado\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const flow = searchParams.get('flow')\r\n\r\n    if (!flow) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Par\xE1metro \"flow\" es requerido'\r\n      }, { status: 400 })\r\n    }\r\n\r\n    // Verificar si existen screenshots para el flujo\r\n    const fs = require('fs/promises')\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      const flowScreenshots = files.filter((file: string) => \r\n        file.includes(flow) && file.endsWith('.png')\r\n      )\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        flow,\r\n        exists: flowScreenshots.length > 0,\r\n        count: flowScreenshots.length,\r\n        screenshots: flowScreenshots\r\n      })\r\n\r\n    } catch (dirError) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        flow,\r\n        exists: false,\r\n        count: 0,\r\n        screenshots: []\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error verificando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n// Endpoint DELETE para limpiar screenshots\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const flow = searchParams.get('flow')\r\n    const olderThan = searchParams.get('olderThan') // en horas\r\n\r\n    const fs = require('fs/promises')\r\n    const screenshotsDir = path.join(process.cwd(), 'public', 'test-screenshots')\r\n    \r\n    try {\r\n      const files = await fs.readdir(screenshotsDir)\r\n      let deletedCount = 0\r\n\r\n      for (const file of files) {\r\n        if (!file.endsWith('.png')) {continue}\r\n\r\n        // Filtrar por flujo si se especifica\r\n        if (flow && !file.includes(flow)) {continue}\r\n\r\n        // Filtrar por antig\xFCedad si se especifica\r\n        if (olderThan) {\r\n          const filepath = path.join(screenshotsDir, file)\r\n          const stats = await fs.stat(filepath)\r\n          const hoursOld = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60)\r\n          \r\n          if (hoursOld <= parseInt(olderThan)) {continue}\r\n        }\r\n\r\n        // Eliminar archivo\r\n        const filepath = path.join(screenshotsDir, file)\r\n        await fs.unlink(filepath)\r\n        deletedCount++\r\n        console.log(`\uD83D\uDDD1\uFE0F Screenshot eliminado: ${file}`)\r\n      }\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount,\r\n        message: `${deletedCount} screenshots eliminados`\r\n      })\r\n\r\n    } catch (dirError) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        deletedCount: 0,\r\n        message: 'Directorio de screenshots no existe'\r\n      })\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error eliminando screenshots:', error)\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Error desconocido'\r\n    }, { status: 500 })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "POST", "runtime", "execAsync", "promisify", "exec", "request", "body", "json", "flow", "NextResponse", "success", "error", "status", "console", "log", "startTime", "Date", "now", "scriptPath", "scriptArgs", "path", "join", "process", "cwd", "healthCheck", "fetch", "method", "timeout", "ok", "Error", "healthError", "stdout", "stderr", "env", "NODE_ENV", "includes", "warn", "lines", "split", "screenshotLines", "filter", "line", "screenshotCount", "length", "screenshots", "map", "match", "Boolean", "duration", "count", "execError", "message", "details", "searchParams", "URL", "url", "get", "fs", "require", "screenshotsDir", "files", "readdir", "flowScreenshots", "file", "endsWith", "exists", "dirError", "olderThan", "deletedCount", "filepath", "stats", "stat", "hoursOld", "mtime", "getTime", "parseInt", "unlink"],
      mappings: "AAAA,qCAAqC;;;;;;;;;;;;QAgMfA;eAAAA;;QAnDAC;eAAAA;;QAlHAC;eAAAA;;QA1BTC;eAAAA;;;wBAM6B;+BACrB;sBACK;6DACT;;;;;;AATV,MAAMA,UAAU;AAWvB,MAAMC,YAAYC,IAAAA,eAAS,EAACC,mBAAI;AAezB,eAAeJ,KAAKK,OAAoB;IAC7C,IAAI;QACF,MAAMC,OAAmC,MAAMD,QAAQE,IAAI;QAE3D,IAAI,CAACD,KAAKE,IAAI,EAAE;YACd,OAAOC,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTC,OAAO;YACT,GAAG;gBAAEC,QAAQ;YAAI;QACnB;QAEAC,QAAQC,GAAG,CAAC,CAAC,mDAAmD,EAAER,KAAKE,IAAI,EAAE;QAE7E,MAAMO,YAAYC,KAAKC,GAAG;QAE1B,iCAAiC;QACjC,IAAIC;QACJ,MAAMC,aAAuB,EAAE;QAE/B,OAAQb,KAAKE,IAAI;YACf,KAAK;gBACHU,aAAaE,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,WAAW;gBACjD;YACF,KAAK;gBACHL,aAAaE,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,WAAW;gBACjD;YACF,KAAK;gBACHL,aAAaE,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,WAAW;gBACjD;YACF;gBACE,OAAOd,oBAAY,CAACF,IAAI,CAAC;oBACvBG,SAAS;oBACTC,OAAO,CAAC,oBAAoB,EAAEL,KAAKE,IAAI,EAAE;gBAC3C,GAAG;oBAAEI,QAAQ;gBAAI;QACrB;QAEA,2CAA2C;QAC3C,IAAI;YACF,MAAMY,cAAc,MAAMC,MAAM,oCAAoC;gBAClEC,QAAQ;gBACRC,SAAS;YACX;YAEA,IAAI,CAACH,YAAYI,EAAE,EAAE;gBACnB,MAAM,IAAIC,MAAM;YAClB;QACF,EAAE,OAAOC,aAAa;YACpB,OAAOrB,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTC,OAAO;YACT,GAAG;gBAAEC,QAAQ;YAAI;QACnB;QAEA,gCAAgC;QAChC,IAAI;YACFC,QAAQC,GAAG,CAAC,CAAC,sBAAsB,EAAEI,YAAY;YAEjD,MAAM,EAAEa,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM9B,UAAU,CAAC,MAAM,EAAEgB,WAAW,CAAC,CAAC,EAAE;gBACjEK,KAAKD,QAAQC,GAAG;gBAChBI,SAAS;gBACTM,KAAK;oBACH,GAAGX,QAAQW,GAAG;oBACdC,UAAU;gBACZ;YACF;YAEA,IAAIF,UAAU,CAACA,OAAOG,QAAQ,CAAC,YAAY;gBACzCtB,QAAQuB,IAAI,CAAC,4BAA4BJ;YAC3C;YAEAnB,QAAQC,GAAG,CAAC,sBAAsBiB;YAElC,gCAAgC;YAChC,MAAMM,QAAQN,OAAOO,KAAK,CAAC;YAC3B,MAAMC,kBAAkBF,MAAMG,MAAM,CAACC,CAAAA,OAAQA,KAAKN,QAAQ,CAAC;YAC3D,MAAMO,kBAAkBH,gBAAgBI,MAAM;YAE9C,MAAMC,cAAcL,gBAAgBM,GAAG,CAACJ,CAAAA;gBACtC,MAAMK,QAAQL,KAAKK,KAAK,CAAC;gBACzB,OAAOA,QAAQA,KAAK,CAAC,EAAE,GAAG;YAC5B,GAAGN,MAAM,CAACO;YAEV,MAAMC,WAAWhC,KAAKC,GAAG,KAAKF;YAE9BF,QAAQC,GAAG,CAAC,CAAC,yBAAyB,EAAE4B,gBAAgB,gBAAgB,EAAEM,SAAS,EAAE,CAAC;YAEtF,OAAOvC,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTuC,OAAOP;gBACPE;gBACAI;YACF;QAEF,EAAE,OAAOE,WAAgB;YACvBrC,QAAQF,KAAK,CAAC,4BAA4BuC;YAE1C,OAAOzC,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTC,OAAO,CAAC,yBAAyB,EAAEuC,UAAUC,OAAO,EAAE;gBACtDC,SAASF,UAAUlB,MAAM,IAAIkB,UAAUnB,MAAM;YAC/C,GAAG;gBAAEnB,QAAQ;YAAI;QACnB;IAEF,EAAE,OAAOD,OAAO;QACdE,QAAQF,KAAK,CAAC,kBAAkBA;QAEhC,OAAOF,oBAAY,CAACF,IAAI,CAAC;YACvBG,SAAS;YACTC,OAAOA,iBAAiBkB,QAAQlB,MAAMwC,OAAO,GAAG;QAClD,GAAG;YAAEvC,QAAQ;QAAI;IACnB;AACF;AAGO,eAAeb,IAAIM,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEgD,YAAY,EAAE,GAAG,IAAIC,IAAIjD,QAAQkD,GAAG;QAC5C,MAAM/C,OAAO6C,aAAaG,GAAG,CAAC;QAE9B,IAAI,CAAChD,MAAM;YACT,OAAOC,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTC,OAAO;YACT,GAAG;gBAAEC,QAAQ;YAAI;QACnB;QAEA,iDAAiD;QACjD,MAAM6C,KAAKC,QAAQ;QACnB,MAAMC,iBAAiBvC,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,UAAU;QAE1D,IAAI;YACF,MAAMqC,QAAQ,MAAMH,GAAGI,OAAO,CAACF;YAC/B,MAAMG,kBAAkBF,MAAMpB,MAAM,CAAC,CAACuB,OACpCA,KAAK5B,QAAQ,CAAC3B,SAASuD,KAAKC,QAAQ,CAAC;YAGvC,OAAOvD,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTF;gBACAyD,QAAQH,gBAAgBnB,MAAM,GAAG;gBACjCM,OAAOa,gBAAgBnB,MAAM;gBAC7BC,aAAakB;YACf;QAEF,EAAE,OAAOI,UAAU;YACjB,OAAOzD,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACTF;gBACAyD,QAAQ;gBACRhB,OAAO;gBACPL,aAAa,EAAE;YACjB;QACF;IAEF,EAAE,OAAOjC,OAAO;QACdE,QAAQF,KAAK,CAAC,kCAAkCA;QAEhD,OAAOF,oBAAY,CAACF,IAAI,CAAC;YACvBG,SAAS;YACTC,OAAOA,iBAAiBkB,QAAQlB,MAAMwC,OAAO,GAAG;QAClD,GAAG;YAAEvC,QAAQ;QAAI;IACnB;AACF;AAGO,eAAed,OAAOO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAEgD,YAAY,EAAE,GAAG,IAAIC,IAAIjD,QAAQkD,GAAG;QAC5C,MAAM/C,OAAO6C,aAAaG,GAAG,CAAC;QAC9B,MAAMW,YAAYd,aAAaG,GAAG,CAAC,aAAa,WAAW;;QAE3D,MAAMC,KAAKC,QAAQ;QACnB,MAAMC,iBAAiBvC,aAAI,CAACC,IAAI,CAACC,QAAQC,GAAG,IAAI,UAAU;QAE1D,IAAI;YACF,MAAMqC,QAAQ,MAAMH,GAAGI,OAAO,CAACF;YAC/B,IAAIS,eAAe;YAEnB,KAAK,MAAML,QAAQH,MAAO;gBACxB,IAAI,CAACG,KAAKC,QAAQ,CAAC,SAAS;oBAAC;gBAAQ;gBAErC,qCAAqC;gBACrC,IAAIxD,QAAQ,CAACuD,KAAK5B,QAAQ,CAAC3B,OAAO;oBAAC;gBAAQ;gBAE3C,0CAA0C;gBAC1C,IAAI2D,WAAW;oBACb,MAAME,WAAWjD,aAAI,CAACC,IAAI,CAACsC,gBAAgBI;oBAC3C,MAAMO,QAAQ,MAAMb,GAAGc,IAAI,CAACF;oBAC5B,MAAMG,WAAW,AAACxD,CAAAA,KAAKC,GAAG,KAAKqD,MAAMG,KAAK,CAACC,OAAO,EAAC,IAAM,CAAA,OAAO,KAAK,EAAC;oBAEtE,IAAIF,YAAYG,SAASR,YAAY;wBAAC;oBAAQ;gBAChD;gBAEA,mBAAmB;gBACnB,MAAME,WAAWjD,aAAI,CAACC,IAAI,CAACsC,gBAAgBI;gBAC3C,MAAMN,GAAGmB,MAAM,CAACP;gBAChBD;gBACAvD,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEiD,MAAM;YACjD;YAEA,OAAOtD,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACT0D;gBACAjB,SAAS,GAAGiB,aAAa,uBAAuB,CAAC;YACnD;QAEF,EAAE,OAAOF,UAAU;YACjB,OAAOzD,oBAAY,CAACF,IAAI,CAAC;gBACvBG,SAAS;gBACT0D,cAAc;gBACdjB,SAAS;YACX;QACF;IAEF,EAAE,OAAOxC,OAAO;QACdE,QAAQF,KAAK,CAAC,iCAAiCA;QAE/C,OAAOF,oBAAY,CAACF,IAAI,CAAC;YACvBG,SAAS;YACTC,OAAOA,iBAAiBkB,QAAQlB,MAAMwC,OAAO,GAAG;QAClD,GAAG;YAAEvC,QAAQ;QAAI;IACnB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6d5044ce1e5d6e4f962d807e70690ca224c6483d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2k4gxa9uwy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2k4gxa9uwy();
cov_2k4gxa9uwy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2k4gxa9uwy().f[0]++;
  cov_2k4gxa9uwy().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2k4gxa9uwy().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().f[1]++;
    cov_2k4gxa9uwy().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().f[2]++;
    cov_2k4gxa9uwy().s[5]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().f[3]++;
    cov_2k4gxa9uwy().s[6]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().f[4]++;
    cov_2k4gxa9uwy().s[7]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2k4gxa9uwy().s[8]++, require("next/server"));
const _child_process =
/* istanbul ignore next */
(cov_2k4gxa9uwy().s[9]++, require("child_process"));
const _util =
/* istanbul ignore next */
(cov_2k4gxa9uwy().s[10]++, require("util"));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_2k4gxa9uwy().s[11]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2k4gxa9uwy().f[5]++;
  cov_2k4gxa9uwy().s[12]++;
  return /* istanbul ignore next */(cov_2k4gxa9uwy().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2k4gxa9uwy().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2k4gxa9uwy().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2k4gxa9uwy().b[0][1]++, {
    default: obj
  });
}
const runtime =
/* istanbul ignore next */
(cov_2k4gxa9uwy().s[13]++, 'nodejs');
const execAsync =
/* istanbul ignore next */
(cov_2k4gxa9uwy().s[14]++, (0, _util.promisify)(_child_process.exec));
async function POST(request) {
  /* istanbul ignore next */
  cov_2k4gxa9uwy().f[6]++;
  cov_2k4gxa9uwy().s[15]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[16]++, await request.json());
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[17]++;
    if (!body.flow) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().b[2][0]++;
      cov_2k4gxa9uwy().s[18]++;
      return _server.NextResponse.json({
        success: false,
        error: 'ParÃ¡metro "flow" es requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2k4gxa9uwy().b[2][1]++;
    }
    cov_2k4gxa9uwy().s[19]++;
    console.log(`ğ Iniciando generaciÃ³n de screenshots para flujo: ${body.flow}`);
    const startTime =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[20]++, Date.now());
    // Determinar quÃ© script ejecutar
    let scriptPath;
    const scriptArgs =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[21]++, []);
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[22]++;
    switch (body.flow) {
      case 'checkout':
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[3][0]++;
        cov_2k4gxa9uwy().s[23]++;
        scriptPath = _path.default.join(process.cwd(), 'scripts', 'generate-checkout-screenshots.js');
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[24]++;
        break;
      case 'admin':
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[3][1]++;
        cov_2k4gxa9uwy().s[25]++;
        scriptPath = _path.default.join(process.cwd(), 'scripts', 'admin-panel-audit.js');
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[26]++;
        break;
      case 'shop':
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[3][2]++;
        cov_2k4gxa9uwy().s[27]++;
        scriptPath = _path.default.join(process.cwd(), 'scripts', 'generate-shop-screenshots.js');
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[28]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[3][3]++;
        cov_2k4gxa9uwy().s[29]++;
        return _server.NextResponse.json({
          success: false,
          error: `Flujo no soportado: ${body.flow}`
        }, {
          status: 400
        });
    }
    // Verificar que el servidor estÃ© corriendo
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[30]++;
    try {
      const healthCheck =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[31]++, await fetch('http://localhost:3000/api/health', {
        method: 'GET',
        timeout: 5000
      }));
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[32]++;
      if (!healthCheck.ok) {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[4][0]++;
        cov_2k4gxa9uwy().s[33]++;
        throw new Error('Servidor no disponible');
      } else
      /* istanbul ignore next */
      {
        cov_2k4gxa9uwy().b[4][1]++;
      }
    } catch (healthError) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[34]++;
      return _server.NextResponse.json({
        success: false,
        error: 'El servidor debe estar corriendo en localhost:3000 para generar screenshots'
      }, {
        status: 503
      });
    }
    // Ejecutar script de generaciÃ³n
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[36]++;
      console.log(`ğ¸ Ejecutando script: ${scriptPath}`);
      const {
        stdout,
        stderr
      } =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[37]++, await execAsync(`node "${scriptPath}"`, {
        cwd: process.cwd(),
        timeout: 120000,
        env: {
          ...process.env,
          NODE_ENV: 'development'
        }
      }));
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[6][0]++, stderr) &&
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[6][1]++, !stderr.includes('Warning'))) {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().b[5][0]++;
        cov_2k4gxa9uwy().s[39]++;
        console.warn('Advertencias del script:', stderr);
      } else
      /* istanbul ignore next */
      {
        cov_2k4gxa9uwy().b[5][1]++;
      }
      cov_2k4gxa9uwy().s[40]++;
      console.log('Salida del script:', stdout);
      // Parsear resultados del script
      const lines =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[41]++, stdout.split('\n'));
      const screenshotLines =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[42]++, lines.filter(line => {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().f[7]++;
        cov_2k4gxa9uwy().s[43]++;
        return line.includes('Screenshot guardado:');
      }));
      const screenshotCount =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[44]++, screenshotLines.length);
      const screenshots =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[45]++, screenshotLines.map(line => {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().f[8]++;
        const match =
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().s[46]++, line.match(/Screenshot guardado: (.+)/));
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[47]++;
        return match ?
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[7][0]++, match[1]) :
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[7][1]++, '');
      }).filter(Boolean));
      const duration =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[48]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[49]++;
      console.log(`â GeneraciÃ³n completada: ${screenshotCount} screenshots en ${duration}ms`);
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[50]++;
      return _server.NextResponse.json({
        success: true,
        count: screenshotCount,
        screenshots,
        duration
      });
    } catch (execError) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[51]++;
      console.error('Error ejecutando script:', execError);
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[52]++;
      return _server.NextResponse.json({
        success: false,
        error: `Error ejecutando script: ${execError.message}`,
        details:
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[8][0]++, execError.stderr) ||
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[8][1]++, execError.stdout)
      }, {
        status: 500
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[53]++;
    console.error('Error general:', error);
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[54]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[9][1]++, 'Error desconocido')
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2k4gxa9uwy().f[9]++;
  cov_2k4gxa9uwy().s[55]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[56]++, new URL(request.url));
    const flow =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[57]++, searchParams.get('flow'));
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[58]++;
    if (!flow) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().b[10][0]++;
      cov_2k4gxa9uwy().s[59]++;
      return _server.NextResponse.json({
        success: false,
        error: 'ParÃ¡metro "flow" es requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2k4gxa9uwy().b[10][1]++;
    }
    // Verificar si existen screenshots para el flujo
    const fs =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[60]++, require('fs/promises'));
    const screenshotsDir =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[61]++, _path.default.join(process.cwd(), 'public', 'test-screenshots'));
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[62]++;
    try {
      const files =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[63]++, await fs.readdir(screenshotsDir));
      const flowScreenshots =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[64]++, files.filter(file => {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().f[10]++;
        cov_2k4gxa9uwy().s[65]++;
        return /* istanbul ignore next */(cov_2k4gxa9uwy().b[11][0]++, file.includes(flow)) &&
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[11][1]++, file.endsWith('.png'));
      }));
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[66]++;
      return _server.NextResponse.json({
        success: true,
        flow,
        exists: flowScreenshots.length > 0,
        count: flowScreenshots.length,
        screenshots: flowScreenshots
      });
    } catch (dirError) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[67]++;
      return _server.NextResponse.json({
        success: true,
        flow,
        exists: false,
        count: 0,
        screenshots: []
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[68]++;
    console.error('Error verificando screenshots:', error);
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[69]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[12][1]++, 'Error desconocido')
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_2k4gxa9uwy().f[11]++;
  cov_2k4gxa9uwy().s[70]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[71]++, new URL(request.url));
    const flow =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[72]++, searchParams.get('flow'));
    const olderThan =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[73]++, searchParams.get('olderThan')) // en horas
    ;
    const fs =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[74]++, require('fs/promises'));
    const screenshotsDir =
    /* istanbul ignore next */
    (cov_2k4gxa9uwy().s[75]++, _path.default.join(process.cwd(), 'public', 'test-screenshots'));
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[76]++;
    try {
      const files =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[77]++, await fs.readdir(screenshotsDir));
      let deletedCount =
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().s[78]++, 0);
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[79]++;
      for (const file of files) {
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[80]++;
        if (!file.endsWith('.png')) {
          /* istanbul ignore next */
          cov_2k4gxa9uwy().b[13][0]++;
          cov_2k4gxa9uwy().s[81]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2k4gxa9uwy().b[13][1]++;
        }
        // Filtrar por flujo si se especifica
        cov_2k4gxa9uwy().s[82]++;
        if (
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[15][0]++, flow) &&
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().b[15][1]++, !file.includes(flow))) {
          /* istanbul ignore next */
          cov_2k4gxa9uwy().b[14][0]++;
          cov_2k4gxa9uwy().s[83]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_2k4gxa9uwy().b[14][1]++;
        }
        // Filtrar por antigÃ¼edad si se especifica
        cov_2k4gxa9uwy().s[84]++;
        if (olderThan) {
          /* istanbul ignore next */
          cov_2k4gxa9uwy().b[16][0]++;
          const filepath =
          /* istanbul ignore next */
          (cov_2k4gxa9uwy().s[85]++, _path.default.join(screenshotsDir, file));
          const stats =
          /* istanbul ignore next */
          (cov_2k4gxa9uwy().s[86]++, await fs.stat(filepath));
          const hoursOld =
          /* istanbul ignore next */
          (cov_2k4gxa9uwy().s[87]++, (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60));
          /* istanbul ignore next */
          cov_2k4gxa9uwy().s[88]++;
          if (hoursOld <= parseInt(olderThan)) {
            /* istanbul ignore next */
            cov_2k4gxa9uwy().b[17][0]++;
            cov_2k4gxa9uwy().s[89]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_2k4gxa9uwy().b[17][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2k4gxa9uwy().b[16][1]++;
        }
        // Eliminar archivo
        const filepath =
        /* istanbul ignore next */
        (cov_2k4gxa9uwy().s[90]++, _path.default.join(screenshotsDir, file));
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[91]++;
        await fs.unlink(filepath);
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[92]++;
        deletedCount++;
        /* istanbul ignore next */
        cov_2k4gxa9uwy().s[93]++;
        console.log(`ğï¸ Screenshot eliminado: ${file}`);
      }
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[94]++;
      return _server.NextResponse.json({
        success: true,
        deletedCount,
        message: `${deletedCount} screenshots eliminados`
      });
    } catch (dirError) {
      /* istanbul ignore next */
      cov_2k4gxa9uwy().s[95]++;
      return _server.NextResponse.json({
        success: true,
        deletedCount: 0,
        message: 'Directorio de screenshots no existe'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[96]++;
    console.error('Error eliminando screenshots:', error);
    /* istanbul ignore next */
    cov_2k4gxa9uwy().s[97]++;
    return _server.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2k4gxa9uwy().b[18][1]++, 'Error desconocido')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,