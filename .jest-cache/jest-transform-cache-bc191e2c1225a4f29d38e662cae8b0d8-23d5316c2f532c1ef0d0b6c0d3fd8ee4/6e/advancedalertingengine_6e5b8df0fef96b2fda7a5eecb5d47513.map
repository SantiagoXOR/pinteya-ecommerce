{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\advanced-alerting-engine.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - ADVANCED ALERTING ENGINE\n// ===================================\n\nimport { logger, LogCategory } from '../enterprise/logger'\nimport { getRedisClient } from '../integrations/redis'\n\n/**\n * Canales de notificación disponibles\n */\nexport enum AlertChannel {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  WEBHOOK = 'webhook',\n  SMS = 'sms',\n  DISCORD = 'discord',\n  TEAMS = 'teams',\n  CONSOLE = 'console',\n}\n\n/**\n * Tipos de alerta\n */\nexport enum AlertType {\n  PERFORMANCE = 'performance',\n  ERROR = 'error',\n  CAPACITY = 'capacity',\n  AVAILABILITY = 'availability',\n  SECURITY = 'security',\n  BUSINESS = 'business',\n}\n\n/**\n * Severidad de alerta\n */\nexport enum AlertSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\n/**\n * Estado de alerta\n */\nexport enum AlertStatus {\n  ACTIVE = 'active',\n  ACKNOWLEDGED = 'acknowledged',\n  RESOLVED = 'resolved',\n  SUPPRESSED = 'suppressed',\n}\n\n/**\n * Configuración de canal de alerta\n */\nexport interface AlertChannelConfig {\n  channel: AlertChannel\n  enabled: boolean\n  config: {\n    // Email\n    recipients?: string[]\n    smtpConfig?: {\n      host: string\n      port: number\n      secure: boolean\n      auth: { user: string; pass: string }\n    }\n\n    // Slack\n    webhookUrl?: string\n    slackChannel?: string\n\n    // Webhook\n    url?: string\n    headers?: Record<string, string>\n\n    // SMS\n    provider?: 'twilio' | 'aws-sns'\n    phoneNumbers?: string[]\n\n    // Discord\n    discordWebhook?: string\n\n    // Teams\n    teamsWebhook?: string\n  }\n  filters?: {\n    severities?: AlertSeverity[]\n    types?: AlertType[]\n    keywords?: string[]\n  }\n  rateLimiting?: {\n    maxAlertsPerHour: number\n    cooldownMinutes: number\n  }\n}\n\n/**\n * Política de escalación\n */\nexport interface EscalationPolicy {\n  id: string\n  name: string\n  enabled: boolean\n  rules: EscalationRule[]\n}\n\n/**\n * Regla de escalación\n */\nexport interface EscalationRule {\n  level: number\n  delayMinutes: number\n  channels: AlertChannel[]\n  conditions?: {\n    severities?: AlertSeverity[]\n    types?: AlertType[]\n    unacknowledgedOnly?: boolean\n  }\n  recipients?: {\n    emails?: string[]\n    phones?: string[]\n    slackUsers?: string[]\n  }\n}\n\n/**\n * Alerta avanzada\n */\nexport interface AdvancedAlert {\n  id: string\n  type: AlertType\n  severity: AlertSeverity\n  status: AlertStatus\n  title: string\n  message: string\n  details: Record<string, unknown>\n  source: string\n  timestamp: number\n  acknowledgedBy?: string\n  acknowledgedAt?: number\n  resolvedBy?: string\n  resolvedAt?: number\n  escalationLevel: number\n  escalatedAt?: number\n  suppressedUntil?: number\n  tags: string[]\n  fingerprint: string // Para deduplicación\n  relatedAlerts: string[]\n  metrics?: {\n    value: number\n    threshold: number\n    unit: string\n  }\n}\n\n/**\n * Configuración de supresión\n */\nexport interface SuppressionRule {\n  id: string\n  name: string\n  enabled: boolean\n  conditions: {\n    types?: AlertType[]\n    severities?: AlertSeverity[]\n    sources?: string[]\n    keywords?: string[]\n    timeWindows?: Array<{\n      start: string // HH:MM\n      end: string // HH:MM\n      days: number[] // 0-6 (domingo-sábado)\n    }>\n  }\n  duration?: number // minutos\n  reason: string\n}\n\n/**\n * Configuraciones predefinidas de canales\n */\nexport const DEFAULT_CHANNEL_CONFIGS: AlertChannelConfig[] = [\n  {\n    channel: AlertChannel.EMAIL,\n    enabled: true,\n    config: {\n      recipients: ['admin@pinteya.com', 'dev@pinteya.com'],\n    },\n    filters: {\n      severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL],\n    },\n    rateLimiting: {\n      maxAlertsPerHour: 10,\n      cooldownMinutes: 5,\n    },\n  },\n  {\n    channel: AlertChannel.SLACK,\n    enabled: true,\n    config: {\n      webhookUrl: process.env.SLACK_WEBHOOK_URL,\n      slackChannel: '#alerts',\n    },\n    filters: {\n      severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL],\n    },\n    rateLimiting: {\n      maxAlertsPerHour: 20,\n      cooldownMinutes: 2,\n    },\n  },\n  {\n    channel: AlertChannel.CONSOLE,\n    enabled: true,\n    config: {},\n    rateLimiting: {\n      maxAlertsPerHour: 100,\n      cooldownMinutes: 0,\n    },\n  },\n]\n\n/**\n * Política de escalación por defecto\n */\nexport const DEFAULT_ESCALATION_POLICY: EscalationPolicy = {\n  id: 'default',\n  name: 'Política de Escalación por Defecto',\n  enabled: true,\n  rules: [\n    {\n      level: 1,\n      delayMinutes: 0,\n      channels: [AlertChannel.SLACK, AlertChannel.CONSOLE],\n      conditions: {\n        severities: [AlertSeverity.MEDIUM, AlertSeverity.HIGH, AlertSeverity.CRITICAL],\n      },\n    },\n    {\n      level: 2,\n      delayMinutes: 15,\n      channels: [AlertChannel.EMAIL],\n      conditions: {\n        severities: [AlertSeverity.HIGH, AlertSeverity.CRITICAL],\n        unacknowledgedOnly: true,\n      },\n    },\n    {\n      level: 3,\n      delayMinutes: 60,\n      channels: [AlertChannel.SMS],\n      conditions: {\n        severities: [AlertSeverity.CRITICAL],\n        unacknowledgedOnly: true,\n      },\n      recipients: {\n        phones: ['+5491123456789'], // Número de emergencia\n      },\n    },\n  ],\n}\n\n/**\n * Motor de alertas avanzado\n */\nexport class AdvancedAlertingEngine {\n  private static instance: AdvancedAlertingEngine\n  private redis = getRedisClient()\n  private alerts: Map<string, AdvancedAlert> = new Map()\n  private channelConfigs: Map<AlertChannel, AlertChannelConfig> = new Map()\n  private escalationPolicies: Map<string, EscalationPolicy> = new Map()\n  private suppressionRules: Map<string, SuppressionRule> = new Map()\n  private escalationTimers: Map<string, NodeJS.Timeout> = new Map()\n  private rateLimitCounters: Map<string, { count: number; resetTime: number }> = new Map()\n\n  private constructor() {\n    this.initializeDefaultConfigs()\n  }\n\n  static getInstance(): AdvancedAlertingEngine {\n    if (!AdvancedAlertingEngine.instance) {\n      AdvancedAlertingEngine.instance = new AdvancedAlertingEngine()\n    }\n    return AdvancedAlertingEngine.instance\n  }\n\n  /**\n   * Inicializa configuraciones por defecto\n   */\n  private initializeDefaultConfigs(): void {\n    // Configurar canales por defecto\n    DEFAULT_CHANNEL_CONFIGS.forEach(config => {\n      this.channelConfigs.set(config.channel, config)\n    })\n\n    // Configurar política de escalación por defecto\n    this.escalationPolicies.set(DEFAULT_ESCALATION_POLICY.id, DEFAULT_ESCALATION_POLICY)\n\n    logger.info(LogCategory.MONITORING, 'Advanced Alerting Engine initialized')\n  }\n\n  /**\n   * Crea y procesa una nueva alerta\n   */\n  async createAlert(\n    type: AlertType,\n    severity: AlertSeverity,\n    title: string,\n    message: string,\n    details: Record<string, unknown> = {},\n    source: string = 'system',\n    tags: string[] = []\n  ): Promise<string> {\n    // Generar fingerprint para deduplicación\n    const fingerprint = this.generateFingerprint(type, title, source)\n\n    // Verificar si ya existe una alerta similar activa\n    const existingAlert = this.findExistingAlert(fingerprint)\n    if (existingAlert && existingAlert.status === AlertStatus.ACTIVE) {\n      // Actualizar alerta existente en lugar de crear nueva\n      return this.updateExistingAlert(existingAlert.id, details)\n    }\n\n    // Verificar reglas de supresión\n    if (await this.isAlertSuppressed(type, severity, source, title)) {\n      logger.info(LogCategory.MONITORING, `Alert suppressed: ${title}`)\n      return ''\n    }\n\n    const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    const alert: AdvancedAlert = {\n      id: alertId,\n      type,\n      severity,\n      status: AlertStatus.ACTIVE,\n      title,\n      message,\n      details,\n      source,\n      timestamp: Date.now(),\n      escalationLevel: 0,\n      tags,\n      fingerprint,\n      relatedAlerts: [],\n    }\n\n    this.alerts.set(alertId, alert)\n\n    // Persistir en Redis\n    await this.persistAlert(alert)\n\n    // Procesar alerta inmediatamente\n    await this.processAlert(alert)\n\n    // Programar escalación si es necesario\n    this.scheduleEscalation(alert)\n\n    logger.info(LogCategory.MONITORING, `Alert created: ${title}`, {\n      id: alertId,\n      type,\n      severity,\n      source,\n    })\n\n    return alertId\n  }\n\n  /**\n   * Procesa una alerta enviándola a los canales apropiados\n   */\n  private async processAlert(alert: AdvancedAlert): Promise<void> {\n    const applicableChannels = this.getApplicableChannels(alert)\n\n    const sendPromises = applicableChannels.map(async channelConfig => {\n      try {\n        // Verificar rate limiting\n        if (!this.checkRateLimit(channelConfig)) {\n          logger.warn(\n            LogCategory.MONITORING,\n            `Rate limit exceeded for channel ${channelConfig.channel}`\n          )\n          return\n        }\n\n        await this.sendToChannel(alert, channelConfig)\n        this.updateRateLimit(channelConfig)\n      } catch (error) {\n        logger.error(\n          LogCategory.MONITORING,\n          `Error sending alert to ${channelConfig.channel}`,\n          error as Error\n        )\n      }\n    })\n\n    await Promise.allSettled(sendPromises)\n  }\n\n  /**\n   * Envía alerta a un canal específico\n   */\n  private async sendToChannel(\n    alert: AdvancedAlert,\n    channelConfig: AlertChannelConfig\n  ): Promise<void> {\n    switch (channelConfig.channel) {\n      case AlertChannel.EMAIL:\n        await this.sendEmailAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.SLACK:\n        await this.sendSlackAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.WEBHOOK:\n        await this.sendWebhookAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.SMS:\n        await this.sendSMSAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.DISCORD:\n        await this.sendDiscordAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.TEAMS:\n        await this.sendTeamsAlert(alert, channelConfig)\n        break\n\n      case AlertChannel.CONSOLE:\n        this.sendConsoleAlert(alert)\n        break\n    }\n  }\n\n  /**\n   * Envía alerta por email\n   */\n  private async sendEmailAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    // Implementación de envío de email\n    // En implementación real, usar nodemailer o servicio de email\n    logger.info(LogCategory.MONITORING, `Email alert sent: ${alert.title}`, {\n      recipients: config.config.recipients,\n    })\n  }\n\n  /**\n   * Envía alerta a Slack\n   */\n  private async sendSlackAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    if (!config.config.webhookUrl) {\n      return\n    }\n\n    const payload = {\n      text: `🚨 ${this.getSeverityEmoji(alert.severity)} ${alert.title}`,\n      attachments: [\n        {\n          color: this.getSeverityColor(alert.severity),\n          fields: [\n            { title: 'Tipo', value: alert.type, short: true },\n            { title: 'Severidad', value: alert.severity, short: true },\n            { title: 'Fuente', value: alert.source, short: true },\n            { title: 'Timestamp', value: new Date(alert.timestamp).toISOString(), short: true },\n          ],\n          text: alert.message,\n          footer: `Alert ID: ${alert.id}`,\n        },\n      ],\n    }\n\n    try {\n      const response = await fetch(config.config.webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Slack webhook failed: ${response.status}`)\n      }\n\n      logger.info(LogCategory.MONITORING, `Slack alert sent: ${alert.title}`)\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error sending Slack alert', error as Error)\n    }\n  }\n\n  /**\n   * Envía alerta por webhook\n   */\n  private async sendWebhookAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    if (!config.config.url) {\n      return\n    }\n\n    try {\n      const response = await fetch(config.config.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...config.config.headers,\n        },\n        body: JSON.stringify({\n          alert,\n          timestamp: Date.now(),\n          source: 'pinteya-ecommerce',\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Webhook failed: ${response.status}`)\n      }\n\n      logger.info(LogCategory.MONITORING, `Webhook alert sent: ${alert.title}`)\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error sending webhook alert', error as Error)\n    }\n  }\n\n  /**\n   * Envía alerta por SMS\n   */\n  private async sendSMSAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    // Implementación de SMS (Twilio, AWS SNS, etc.)\n    logger.info(LogCategory.MONITORING, `SMS alert sent: ${alert.title}`, {\n      phones: config.config.phoneNumbers,\n    })\n  }\n\n  /**\n   * Envía alerta a Discord\n   */\n  private async sendDiscordAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    if (!config.config.discordWebhook) {\n      return\n    }\n\n    const embed = {\n      title: `🚨 ${alert.title}`,\n      description: alert.message,\n      color: this.getSeverityColorHex(alert.severity),\n      fields: [\n        { name: 'Tipo', value: alert.type, inline: true },\n        { name: 'Severidad', value: alert.severity, inline: true },\n        { name: 'Fuente', value: alert.source, inline: true },\n      ],\n      timestamp: new Date(alert.timestamp).toISOString(),\n      footer: { text: `Alert ID: ${alert.id}` },\n    }\n\n    try {\n      const response = await fetch(config.config.discordWebhook, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ embeds: [embed] }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Discord webhook failed: ${response.status}`)\n      }\n\n      logger.info(LogCategory.MONITORING, `Discord alert sent: ${alert.title}`)\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error sending Discord alert', error as Error)\n    }\n  }\n\n  /**\n   * Envía alerta a Teams\n   */\n  private async sendTeamsAlert(alert: AdvancedAlert, config: AlertChannelConfig): Promise<void> {\n    if (!config.config.teamsWebhook) {\n      return\n    }\n\n    const card = {\n      '@type': 'MessageCard',\n      '@context': 'http://schema.org/extensions',\n      themeColor: this.getSeverityColorHex(alert.severity),\n      summary: alert.title,\n      sections: [\n        {\n          activityTitle: `🚨 ${alert.title}`,\n          activitySubtitle: alert.message,\n          facts: [\n            { name: 'Tipo', value: alert.type },\n            { name: 'Severidad', value: alert.severity },\n            { name: 'Fuente', value: alert.source },\n            { name: 'Timestamp', value: new Date(alert.timestamp).toISOString() },\n          ],\n        },\n      ],\n    }\n\n    try {\n      const response = await fetch(config.config.teamsWebhook, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(card),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Teams webhook failed: ${response.status}`)\n      }\n\n      logger.info(LogCategory.MONITORING, `Teams alert sent: ${alert.title}`)\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error sending Teams alert', error as Error)\n    }\n  }\n\n  /**\n   * Envía alerta a consola\n   */\n  private sendConsoleAlert(alert: AdvancedAlert): void {\n    const emoji = this.getSeverityEmoji(alert.severity)\n    console.log(`${emoji} [${alert.severity.toUpperCase()}] ${alert.title}`)\n    console.log(`   Message: ${alert.message}`)\n    console.log(`   Source: ${alert.source} | Type: ${alert.type}`)\n    console.log(`   ID: ${alert.id} | Time: ${new Date(alert.timestamp).toISOString()}`)\n  }\n\n  /**\n   * Obtiene canales aplicables para una alerta\n   */\n  private getApplicableChannels(alert: AdvancedAlert): AlertChannelConfig[] {\n    return Array.from(this.channelConfigs.values()).filter(config => {\n      if (!config.enabled) {\n        return false\n      }\n\n      const { filters } = config\n      if (!filters) {\n        return true\n      }\n\n      // Filtrar por severidad\n      if (filters.severities && !filters.severities.includes(alert.severity)) {\n        return false\n      }\n\n      // Filtrar por tipo\n      if (filters.types && !filters.types.includes(alert.type)) {\n        return false\n      }\n\n      // Filtrar por keywords\n      if (filters.keywords) {\n        const text = `${alert.title} ${alert.message}`.toLowerCase()\n        const hasKeyword = filters.keywords.some(keyword => text.includes(keyword.toLowerCase()))\n        if (!hasKeyword) {\n          return false\n        }\n      }\n\n      return true\n    })\n  }\n\n  /**\n   * Verifica rate limiting\n   */\n  private checkRateLimit(config: AlertChannelConfig): boolean {\n    if (!config.rateLimiting) {\n      return true\n    }\n\n    const key = `${config.channel}_rate_limit`\n    const now = Date.now()\n    const counter = this.rateLimitCounters.get(key)\n\n    if (!counter || now > counter.resetTime) {\n      // Reset counter\n      this.rateLimitCounters.set(key, {\n        count: 0,\n        resetTime: now + 60 * 60 * 1000, // 1 hora\n      })\n      return true\n    }\n\n    return counter.count < config.rateLimiting.maxAlertsPerHour\n  }\n\n  /**\n   * Actualiza contador de rate limiting\n   */\n  private updateRateLimit(config: AlertChannelConfig): void {\n    if (!config.rateLimiting) {\n      return\n    }\n\n    const key = `${config.channel}_rate_limit`\n    const counter = this.rateLimitCounters.get(key)\n\n    if (counter) {\n      counter.count++\n    }\n  }\n\n  /**\n   * Programa escalación de alerta\n   */\n  private scheduleEscalation(alert: AdvancedAlert): void {\n    const policy = this.escalationPolicies.get('default')\n    if (!policy || !policy.enabled) {\n      return\n    }\n\n    const nextRule = policy.rules.find(rule => rule.level > alert.escalationLevel)\n    if (!nextRule) {\n      return\n    }\n\n    const delay = nextRule.delayMinutes * 60 * 1000\n\n    const timer = setTimeout(async () => {\n      await this.escalateAlert(alert.id, nextRule)\n    }, delay)\n\n    this.escalationTimers.set(alert.id, timer)\n  }\n\n  /**\n   * Escala una alerta\n   */\n  private async escalateAlert(alertId: string, rule: EscalationRule): Promise<void> {\n    const alert = this.alerts.get(alertId)\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\n      return\n    }\n\n    // Verificar condiciones de escalación\n    if (rule.conditions?.unacknowledgedOnly && alert.status === AlertStatus.ACKNOWLEDGED) {\n      return\n    }\n\n    if (rule.conditions?.severities && !rule.conditions.severities.includes(alert.severity)) {\n      return\n    }\n\n    if (rule.conditions?.types && !rule.conditions.types.includes(alert.type)) {\n      return\n    }\n\n    // Actualizar nivel de escalación\n    alert.escalationLevel = rule.level\n    alert.escalatedAt = Date.now()\n\n    // Enviar a canales de escalación\n    const escalationChannels = rule.channels\n      .map(channel => this.channelConfigs.get(channel))\n      .filter(Boolean) as AlertChannelConfig[]\n\n    for (const channelConfig of escalationChannels) {\n      await this.sendToChannel(alert, channelConfig)\n    }\n\n    // Programar siguiente escalación\n    this.scheduleEscalation(alert)\n\n    logger.warn(LogCategory.MONITORING, `Alert escalated to level ${rule.level}: ${alert.title}`, {\n      alertId,\n      level: rule.level,\n    })\n  }\n\n  /**\n   * Reconoce una alerta\n   */\n  acknowledgeAlert(alertId: string, acknowledgedBy: string): boolean {\n    const alert = this.alerts.get(alertId)\n    if (!alert || alert.status !== AlertStatus.ACTIVE) {\n      return false\n    }\n\n    alert.status = AlertStatus.ACKNOWLEDGED\n    alert.acknowledgedBy = acknowledgedBy\n    alert.acknowledgedAt = Date.now()\n\n    // Cancelar escalación\n    const timer = this.escalationTimers.get(alertId)\n    if (timer) {\n      clearTimeout(timer)\n      this.escalationTimers.delete(alertId)\n    }\n\n    logger.info(LogCategory.MONITORING, `Alert acknowledged: ${alert.title}`, {\n      alertId,\n      acknowledgedBy,\n    })\n\n    return true\n  }\n\n  /**\n   * Resuelve una alerta\n   */\n  resolveAlert(alertId: string, resolvedBy: string): boolean {\n    const alert = this.alerts.get(alertId)\n    if (!alert || alert.status === AlertStatus.RESOLVED) {\n      return false\n    }\n\n    alert.status = AlertStatus.RESOLVED\n    alert.resolvedBy = resolvedBy\n    alert.resolvedAt = Date.now()\n\n    // Cancelar escalación\n    const timer = this.escalationTimers.get(alertId)\n    if (timer) {\n      clearTimeout(timer)\n      this.escalationTimers.delete(alertId)\n    }\n\n    logger.info(LogCategory.MONITORING, `Alert resolved: ${alert.title}`, {\n      alertId,\n      resolvedBy,\n    })\n\n    return true\n  }\n\n  /**\n   * Suprime una alerta\n   */\n  suppressAlert(alertId: string, durationMinutes: number, reason: string): boolean {\n    const alert = this.alerts.get(alertId)\n    if (!alert) {\n      return false\n    }\n\n    alert.status = AlertStatus.SUPPRESSED\n    alert.suppressedUntil = Date.now() + durationMinutes * 60 * 1000\n\n    logger.info(LogCategory.MONITORING, `Alert suppressed: ${alert.title}`, {\n      alertId,\n      durationMinutes,\n      reason,\n    })\n\n    return true\n  }\n\n  /**\n   * Obtiene alertas activas\n   */\n  getActiveAlerts(): AdvancedAlert[] {\n    return Array.from(this.alerts.values()).filter(\n      alert => alert.status === AlertStatus.ACTIVE || alert.status === AlertStatus.ACKNOWLEDGED\n    )\n  }\n\n  /**\n   * Obtiene estadísticas de alertas\n   */\n  getAlertStats(): {\n    total: number\n    active: number\n    acknowledged: number\n    resolved: number\n    suppressed: number\n    bySeverity: Record<AlertSeverity, number>\n    byType: Record<AlertType, number>\n  } {\n    const alerts = Array.from(this.alerts.values())\n\n    const stats = {\n      total: alerts.length,\n      active: 0,\n      acknowledged: 0,\n      resolved: 0,\n      suppressed: 0,\n      bySeverity: {\n        [AlertSeverity.LOW]: 0,\n        [AlertSeverity.MEDIUM]: 0,\n        [AlertSeverity.HIGH]: 0,\n        [AlertSeverity.CRITICAL]: 0,\n      },\n      byType: {\n        [AlertType.PERFORMANCE]: 0,\n        [AlertType.ERROR]: 0,\n        [AlertType.CAPACITY]: 0,\n        [AlertType.AVAILABILITY]: 0,\n        [AlertType.SECURITY]: 0,\n        [AlertType.BUSINESS]: 0,\n      },\n    }\n\n    alerts.forEach(alert => {\n      switch (alert.status) {\n        case AlertStatus.ACTIVE:\n          stats.active++\n          break\n        case AlertStatus.ACKNOWLEDGED:\n          stats.acknowledged++\n          break\n        case AlertStatus.RESOLVED:\n          stats.resolved++\n          break\n        case AlertStatus.SUPPRESSED:\n          stats.suppressed++\n          break\n      }\n\n      stats.bySeverity[alert.severity]++\n      stats.byType[alert.type]++\n    })\n\n    return stats\n  }\n\n  // ===================================\n  // MÉTODOS AUXILIARES\n  // ===================================\n\n  private generateFingerprint(type: AlertType, title: string, source: string): string {\n    const content = `${type}:${title}:${source}`\n    return Buffer.from(content).toString('base64').slice(0, 16)\n  }\n\n  private findExistingAlert(fingerprint: string): AdvancedAlert | undefined {\n    return Array.from(this.alerts.values()).find(\n      alert => alert.fingerprint === fingerprint && alert.status === AlertStatus.ACTIVE\n    )\n  }\n\n  private async updateExistingAlert(\n    alertId: string,\n    newDetails: Record<string, unknown>\n  ): Promise<string> {\n    const alert = this.alerts.get(alertId)\n    if (alert) {\n      alert.details = { ...alert.details, ...newDetails }\n      alert.timestamp = Date.now() // Actualizar timestamp\n      await this.persistAlert(alert)\n    }\n    return alertId\n  }\n\n  private async isAlertSuppressed(\n    type: AlertType,\n    severity: AlertSeverity,\n    source: string,\n    title: string\n  ): Promise<boolean> {\n    // Verificar reglas de supresión\n    for (const rule of this.suppressionRules.values()) {\n      if (!rule.enabled) {\n        continue\n      }\n\n      const { conditions } = rule\n\n      if (conditions.types && !conditions.types.includes(type)) {\n        continue\n      }\n      if (conditions.severities && !conditions.severities.includes(severity)) {\n        continue\n      }\n      if (conditions.sources && !conditions.sources.includes(source)) {\n        continue\n      }\n\n      if (conditions.keywords) {\n        const text = title.toLowerCase()\n        const hasKeyword = conditions.keywords.some(keyword => text.includes(keyword.toLowerCase()))\n        if (!hasKeyword) {\n          continue\n        }\n      }\n\n      // Verificar ventanas de tiempo\n      if (conditions.timeWindows) {\n        const now = new Date()\n        const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`\n        const currentDay = now.getDay()\n\n        const inTimeWindow = conditions.timeWindows.some(window => {\n          return (\n            window.days.includes(currentDay) &&\n            currentTime >= window.start &&\n            currentTime <= window.end\n          )\n        })\n\n        if (!inTimeWindow) {\n          continue\n        }\n      }\n\n      return true // Alerta suprimida\n    }\n\n    return false\n  }\n\n  private async persistAlert(alert: AdvancedAlert): Promise<void> {\n    try {\n      await this.redis.setex(\n        `alert:${alert.id}`,\n        86400 * 30, // 30 días\n        JSON.stringify(alert)\n      )\n    } catch (error) {\n      logger.error(LogCategory.MONITORING, 'Error persisting alert', error as Error)\n    }\n  }\n\n  private getSeverityEmoji(severity: AlertSeverity): string {\n    switch (severity) {\n      case AlertSeverity.LOW:\n        return '🟡'\n      case AlertSeverity.MEDIUM:\n        return '🟠'\n      case AlertSeverity.HIGH:\n        return '🔴'\n      case AlertSeverity.CRITICAL:\n        return '🚨'\n      default:\n        return '⚪'\n    }\n  }\n\n  private getSeverityColor(severity: AlertSeverity): string {\n    switch (severity) {\n      case AlertSeverity.LOW:\n        return '#ffeb3b'\n      case AlertSeverity.MEDIUM:\n        return '#ff9800'\n      case AlertSeverity.HIGH:\n        return '#f44336'\n      case AlertSeverity.CRITICAL:\n        return '#d32f2f'\n      default:\n        return '#9e9e9e'\n    }\n  }\n\n  private getSeverityColorHex(severity: AlertSeverity): number {\n    switch (severity) {\n      case AlertSeverity.LOW:\n        return 0xffeb3b\n      case AlertSeverity.MEDIUM:\n        return 0xff9800\n      case AlertSeverity.HIGH:\n        return 0xf44336\n      case AlertSeverity.CRITICAL:\n        return 0xd32f2f\n      default:\n        return 0x9e9e9e\n    }\n  }\n\n  /**\n   * Configurar canales de alerta\n   */\n  configureChannel(channel: AlertChannel, config: Partial<AlertChannelConfig>): void {\n    const existing = this.channelConfigs.get(channel) || {\n      channel,\n      enabled: false,\n      config: {},\n    }\n\n    this.channelConfigs.set(channel, { ...existing, ...config })\n    logger.info(LogCategory.MONITORING, `Alert channel configured: ${channel}`)\n  }\n\n  /**\n   * Configurar política de escalación\n   */\n  configureEscalationPolicy(policy: EscalationPolicy): void {\n    this.escalationPolicies.set(policy.id, policy)\n    logger.info(LogCategory.MONITORING, `Escalation policy configured: ${policy.name}`)\n  }\n\n  /**\n   * Agregar regla de supresión\n   */\n  addSuppressionRule(rule: SuppressionRule): void {\n    this.suppressionRules.set(rule.id, rule)\n    logger.info(LogCategory.MONITORING, `Suppression rule added: ${rule.name}`)\n  }\n\n  /**\n   * Destructor\n   */\n  destroy(): void {\n    this.escalationTimers.forEach(timer => clearTimeout(timer))\n    this.escalationTimers.clear()\n  }\n}\n\n// Instancia singleton\nexport const advancedAlertingEngine = AdvancedAlertingEngine.getInstance()\n\n/**\n * Utilidades para alertas avanzadas\n */\nexport const AdvancedAlertingUtils = {\n  /**\n   * Crea alerta de performance\n   */\n  async createPerformanceAlert(\n    title: string,\n    message: string,\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\n    details: Record<string, unknown> = {}\n  ): Promise<string> {\n    return advancedAlertingEngine.createAlert(\n      AlertType.PERFORMANCE,\n      severity,\n      title,\n      message,\n      details,\n      'performance-monitor'\n    )\n  },\n\n  /**\n   * Crea alerta de error\n   */\n  async createErrorAlert(\n    title: string,\n    message: string,\n    severity: AlertSeverity = AlertSeverity.HIGH,\n    details: Record<string, unknown> = {}\n  ): Promise<string> {\n    return advancedAlertingEngine.createAlert(\n      AlertType.ERROR,\n      severity,\n      title,\n      message,\n      details,\n      'error-tracker'\n    )\n  },\n\n  /**\n   * Crea alerta de capacidad\n   */\n  async createCapacityAlert(\n    title: string,\n    message: string,\n    severity: AlertSeverity = AlertSeverity.MEDIUM,\n    details: Record<string, unknown> = {}\n  ): Promise<string> {\n    return advancedAlertingEngine.createAlert(\n      AlertType.CAPACITY,\n      severity,\n      title,\n      message,\n      details,\n      'capacity-monitor'\n    )\n  },\n\n  /**\n   * Obtiene resumen de alertas\n   */\n  getAlertSummary(): {\n    activeCount: number\n    criticalCount: number\n    lastAlert?: AdvancedAlert\n  } {\n    const activeAlerts = advancedAlertingEngine.getActiveAlerts()\n    const criticalAlerts = activeAlerts.filter(a => a.severity === AlertSeverity.CRITICAL)\n    const lastAlert = activeAlerts.sort((a, b) => b.timestamp - a.timestamp)[0]\n\n    return {\n      activeCount: activeAlerts.length,\n      criticalCount: criticalAlerts.length,\n      lastAlert,\n    }\n  },\n}\n"],"names":["AdvancedAlertingEngine","AdvancedAlertingUtils","AlertChannel","AlertSeverity","AlertStatus","AlertType","DEFAULT_CHANNEL_CONFIGS","DEFAULT_ESCALATION_POLICY","advancedAlertingEngine","channel","enabled","config","recipients","filters","severities","rateLimiting","maxAlertsPerHour","cooldownMinutes","webhookUrl","process","env","SLACK_WEBHOOK_URL","slackChannel","id","name","rules","level","delayMinutes","channels","conditions","unacknowledgedOnly","phones","redis","getRedisClient","alerts","Map","channelConfigs","escalationPolicies","suppressionRules","escalationTimers","rateLimitCounters","initializeDefaultConfigs","getInstance","instance","forEach","set","logger","info","LogCategory","MONITORING","createAlert","type","severity","title","message","details","source","tags","fingerprint","generateFingerprint","existingAlert","findExistingAlert","status","updateExistingAlert","isAlertSuppressed","alertId","Date","now","Math","random","toString","substr","alert","timestamp","escalationLevel","relatedAlerts","persistAlert","processAlert","scheduleEscalation","applicableChannels","getApplicableChannels","sendPromises","map","channelConfig","checkRateLimit","warn","sendToChannel","updateRateLimit","error","Promise","allSettled","sendEmailAlert","sendSlackAlert","sendWebhookAlert","sendSMSAlert","sendDiscordAlert","sendTeamsAlert","sendConsoleAlert","payload","text","getSeverityEmoji","attachments","color","getSeverityColor","fields","value","short","toISOString","footer","response","fetch","method","headers","body","JSON","stringify","ok","Error","url","phoneNumbers","discordWebhook","embed","description","getSeverityColorHex","inline","embeds","teamsWebhook","card","themeColor","summary","sections","activityTitle","activitySubtitle","facts","emoji","console","log","toUpperCase","Array","from","values","filter","includes","types","keywords","toLowerCase","hasKeyword","some","keyword","key","counter","get","resetTime","count","policy","nextRule","find","rule","delay","timer","setTimeout","escalateAlert","escalatedAt","escalationChannels","Boolean","acknowledgeAlert","acknowledgedBy","acknowledgedAt","clearTimeout","delete","resolveAlert","resolvedBy","resolvedAt","suppressAlert","durationMinutes","reason","suppressedUntil","getActiveAlerts","getAlertStats","stats","total","length","active","acknowledged","resolved","suppressed","bySeverity","byType","content","Buffer","slice","newDetails","sources","timeWindows","currentTime","getHours","padStart","getMinutes","currentDay","getDay","inTimeWindow","window","days","start","end","setex","configureChannel","existing","configureEscalationPolicy","addSuppressionRule","destroy","clear","createPerformanceAlert","createErrorAlert","createCapacityAlert","getAlertSummary","activeAlerts","criticalAlerts","a","lastAlert","sort","b","activeCount","criticalCount"],"mappings":"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"}