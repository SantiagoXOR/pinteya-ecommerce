c2f45485565a7274db784fd1180f5d8f
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_19xv1lwg91() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\ab-testing\\route.ts";
  var hash = "f3302ea08b2bb676a9d2db45e988daa20931ac8d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\ab-testing\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 20
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 19
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "10": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "11": {
        start: {
          line: 33,
          column: 30
        },
        end: {
          line: 33,
          column: 83
        }
      },
      "12": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "14": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "15": {
        start: {
          line: 38,
          column: 33
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "16": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 49
        }
      },
      "17": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 49
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "19": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 113
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "21": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "22": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 92
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "24": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 62,
          column: 88
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "26": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 114
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "28": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "29": {
        start: {
          line: 89,
          column: 21
        },
        end: {
          line: 89,
          column: 41
        }
      },
      "30": {
        start: {
          line: 90,
          column: 40
        },
        end: {
          line: 90,
          column: 44
        }
      },
      "31": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "32": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "33": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "34": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "35": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 128,
          column: 19
        }
      },
      "36": {
        start: {
          line: 132,
          column: 23
        },
        end: {
          line: 136,
          column: 10
        }
      },
      "37": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 36
        }
      },
      "38": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "39": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 115
        }
      },
      "40": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "41": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "42": {
        start: {
          line: 168,
          column: 21
        },
        end: {
          line: 168,
          column: 41
        }
      },
      "43": {
        start: {
          line: 169,
          column: 47
        },
        end: {
          line: 169,
          column: 51
        }
      },
      "44": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "45": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "46": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "47": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "48": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 113
        }
      },
      "49": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 204,
          column: 36
        }
      },
      "50": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "51": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 114
        }
      },
      "52": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      },
      "53": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 261,
          column: 5
        }
      },
      "54": {
        start: {
          line: 228,
          column: 33
        },
        end: {
          line: 228,
          column: 53
        }
      },
      "55": {
        start: {
          line: 229,
          column: 23
        },
        end: {
          line: 229,
          column: 49
        }
      },
      "56": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "57": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "58": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 36
        }
      },
      "59": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "60": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 117
        }
      },
      "61": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "62": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 271,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "GET",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 18
          }
        },
        loc: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 36
      },
      "8": {
        name: "POST",
        decl: {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 87,
            column: 19
          }
        },
        loc: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 87
      },
      "9": {
        name: "PUT",
        decl: {
          start: {
            line: 166,
            column: 15
          },
          end: {
            line: 166,
            column: 18
          }
        },
        loc: {
          start: {
            line: 166,
            column: 28
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 166
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 226,
            column: 15
          },
          end: {
            line: 226,
            column: 21
          }
        },
        loc: {
          start: {
            line: 226,
            column: 31
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 226
      },
      "11": {
        name: "OPTIONS",
        decl: {
          start: {
            line: 263,
            column: 15
          },
          end: {
            line: 263,
            column: 22
          }
        },
        loc: {
          start: {
            line: 263,
            column: 32
          },
          end: {
            line: 272,
            column: 1
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 41,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 41,
            column: 18
          }
        }, {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 41,
            column: 42
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 21
          },
          end: {
            line: 81,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 46
          },
          end: {
            line: 81,
            column: 59
          }
        }, {
          start: {
            line: 81,
            column: 62
          },
          end: {
            line: 81,
            column: 77
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 17
          }
        }, {
          start: {
            line: 92,
            column: 21
          },
          end: {
            line: 92,
            column: 25
          }
        }, {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 92,
            column: 38
          }
        }, {
          start: {
            line: 92,
            column: 42
          },
          end: {
            line: 92,
            column: 66
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "7": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 122,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 122,
            column: 29
          }
        }, {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 50
          }
        }],
        line: 122
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 21
          },
          end: {
            line: 160,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 46
          },
          end: {
            line: 160,
            column: 59
          }
        }, {
          start: {
            line: 160,
            column: 62
          },
          end: {
            line: 160,
            column: 77
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "10": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 19
          }
        }, {
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 33
          }
        }, {
          start: {
            line: 171,
            column: 37
          },
          end: {
            line: 171,
            column: 45
          }
        }],
        line: 171
      },
      "11": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "12": {
        loc: {
          start: {
            line: 220,
            column: 21
          },
          end: {
            line: 220,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 46
          },
          end: {
            line: 220,
            column: 59
          }
        }, {
          start: {
            line: 220,
            column: 62
          },
          end: {
            line: 220,
            column: 77
          }
        }],
        line: 220
      },
      "13": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "14": {
        loc: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 46
          },
          end: {
            line: 257,
            column: 59
          }
        }, {
          start: {
            line: 257,
            column: 62
          },
          end: {
            line: 257,
            column: 77
          }
        }],
        line: 257
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\ab-testing\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - A/B TESTING API\r\n// API espec\xEDfica para gesti\xF3n de A/B tests de metadata SEO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { enhancedSEOOptimizationTools } from '@/lib/seo/seo-optimization-tools';\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\n\r\n// ===================================\r\n// GET - Obtener informaci\xF3n de A/B tests\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const testId = searchParams.get('testId');\r\n    const action = searchParams.get('action');\r\n\r\n    if (testId && action === 'analyze') {\r\n      // Analizar resultados de un test espec\xEDfico\r\n      const results = await enhancedSEOOptimizationTools.analyzeABTestResults(testId);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: results\r\n      });\r\n    }\r\n\r\n    if (testId) {\r\n      // Obtener informaci\xF3n de un test espec\xEDfico\r\n      const stats = enhancedSEOOptimizationTools.getUsageStats();\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          testId,\r\n          message: 'Use POST with action=analyze_ab_test to get detailed results',\r\n          activeTests: stats.activeABTests\r\n        }\r\n      });\r\n    }\r\n\r\n    // Obtener estad\xEDsticas generales de A/B testing\r\n    const stats = enhancedSEOOptimizationTools.getUsageStats();\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        activeTests: stats.activeABTests,\r\n        endpoints: {\r\n          'GET ?testId=xxx': 'Get test info',\r\n          'GET ?testId=xxx&action=analyze': 'Analyze test results',\r\n          'POST': 'Create new A/B test',\r\n          'PUT': 'Update test metrics',\r\n          'DELETE ?testId=xxx': 'Stop/cancel test'\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API GET error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Crear nuevo A/B test\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, url, variants } = body;\r\n\r\n    // Validar par\xE1metros requeridos\r\n    if (!name || !url || !variants || !Array.isArray(variants)) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'name, url, and variants array are required',\r\n        example: {\r\n          name: 'Product Page Title Test',\r\n          url: '/products/pintura-interior',\r\n          variants: [\r\n            {\r\n              name: 'Control',\r\n              metadata: {\r\n                title: 'Pintura Interior - Pinteya',\r\n                description: 'Compra pintura interior de calidad'\r\n              }\r\n            },\r\n            {\r\n              name: 'Variant A',\r\n              metadata: {\r\n                title: 'Pintura Interior Premium - Colores Vibrantes | Pinteya',\r\n                description: 'Descubre nuestra pintura interior premium con colores vibrantes y acabado duradero. \xA1Env\xEDo gratis!'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar que cada variante tenga la estructura correcta\r\n    for (const variant of variants) {\r\n      if (!variant.name || !variant.metadata) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Each variant must have name and metadata properties'\r\n        }, { status: 400 });\r\n      }\r\n    }\r\n\r\n    // Crear el A/B test\r\n    const testId = await enhancedSEOOptimizationTools.createABTest({\r\n      name,\r\n      url,\r\n      variants\r\n    });\r\n\r\n    logger.info(LogLevel.INFO, 'A/B test created successfully', {\r\n      testId,\r\n      name,\r\n      url,\r\n      variantsCount: variants.length\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        testId,\r\n        message: 'A/B test created successfully',\r\n        name,\r\n        url,\r\n        variants: variants.length,\r\n        status: 'running',\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API POST error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to create A/B test',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar m\xE9tricas de A/B test\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { testId, variantId, metrics } = body;\r\n\r\n    // Validar par\xE1metros requeridos\r\n    if (!testId || !variantId || !metrics) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'testId, variantId, and metrics are required',\r\n        example: {\r\n          testId: 'ab_test_1234567890_abc123',\r\n          variantId: 'variant_0',\r\n          metrics: {\r\n            impressions: 100,\r\n            clicks: 5,\r\n            conversions: 1,\r\n            revenue: 25.99\r\n          }\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar que metrics sea un objeto\r\n    if (typeof metrics !== 'object') {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'metrics must be an object with impressions, clicks, conversions, and/or revenue'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Actualizar m\xE9tricas\r\n    await enhancedSEOOptimizationTools.updateABTestMetrics(testId, variantId, metrics);\r\n\r\n    logger.info(LogLevel.INFO, 'A/B test metrics updated', {\r\n      testId,\r\n      variantId,\r\n      metrics\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'A/B test metrics updated successfully',\r\n        testId,\r\n        variantId,\r\n        updatedMetrics: metrics,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API PUT error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to update A/B test metrics',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Detener/cancelar A/B test\r\n// ===================================\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const testId = searchParams.get('testId');\r\n\r\n    if (!testId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'testId parameter is required'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // En una implementaci\xF3n real, aqu\xED se marcar\xEDa el test como cancelado\r\n    // Por ahora, solo registramos la acci\xF3n\r\n    logger.info(LogLevel.INFO, 'A/B test cancellation requested', {\r\n      testId\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'A/B test cancellation requested',\r\n        testId,\r\n        status: 'cancelled',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API DELETE error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to cancel A/B test',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// OPCIONES CORS\r\n// ===================================\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["DELETE", "GET", "OPTIONS", "POST", "PUT", "runtime", "request", "searchParams", "URL", "url", "testId", "get", "action", "results", "enhancedSEOOptimizationTools", "analyzeABTestResults", "NextResponse", "json", "success", "data", "stats", "getUsageStats", "message", "activeTests", "activeABTests", "endpoints", "error", "logger", "LogLevel", "ERROR", "LogCategory", "SEO", "details", "Error", "status", "body", "name", "variants", "Array", "isArray", "example", "metadata", "title", "description", "variant", "createABTest", "info", "INFO", "variantsCount", "length", "createdAt", "Date", "toISOString", "variantId", "metrics", "impressions", "clicks", "conversions", "revenue", "updateABTestMetrics", "updatedMetrics", "timestamp", "headers"],
      mappings: "AAAA,qCAAqC;;;;;;;;;;;;QAiOfA;eAAAA;;QAlNAC;eAAAA;;QA4PAC;eAAAA;;QA/LAC;eAAAA;;QAoFAC;eAAAA;;QA/JTC;eAAAA;;;wBAO6B;sCACG;wBACC;AATvC,MAAMA,UAAU;AAchB,eAAeJ,IAAIK,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;QAC5C,MAAMC,SAASH,aAAaI,GAAG,CAAC;QAChC,MAAMC,SAASL,aAAaI,GAAG,CAAC;QAEhC,IAAID,UAAUE,WAAW,WAAW;YAClC,4CAA4C;YAC5C,MAAMC,UAAU,MAAMC,kDAA4B,CAACC,oBAAoB,CAACL;YAExE,OAAOM,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTC,MAAMN;YACR;QACF;QAEA,IAAIH,QAAQ;YACV,4CAA4C;YAC5C,MAAMU,QAAQN,kDAA4B,CAACO,aAAa;YAExD,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTC,MAAM;oBACJT;oBACAY,SAAS;oBACTC,aAAaH,MAAMI,aAAa;gBAClC;YACF;QACF;QAEA,gDAAgD;QAChD,MAAMJ,QAAQN,kDAA4B,CAACO,aAAa;QAExD,OAAOL,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAM;gBACJI,aAAaH,MAAMI,aAAa;gBAChCC,WAAW;oBACT,mBAAmB;oBACnB,kCAAkC;oBAClC,QAAQ;oBACR,OAAO;oBACP,sBAAsB;gBACxB;YACF;QACF;IAEF,EAAE,OAAOC,OAAO;QACdC,cAAM,CAACD,KAAK,CAACE,gBAAQ,CAACC,KAAK,EAAE,6BAA6BH,OAAgBI,mBAAW,CAACC,GAAG;QAEzF,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTQ,OAAO;YACPM,SAASN,iBAAiBO,QAAQP,MAAMJ,OAAO,GAAG;QACpD,GAAG;YAAEY,QAAQ;QAAI;IACnB;AACF;AAKO,eAAe/B,KAAKG,OAAoB;IAC7C,IAAI;QACF,MAAM6B,OAAO,MAAM7B,QAAQW,IAAI;QAC/B,MAAM,EAAEmB,IAAI,EAAE3B,GAAG,EAAE4B,QAAQ,EAAE,GAAGF;QAEhC,gCAAgC;QAChC,IAAI,CAACC,QAAQ,CAAC3B,OAAO,CAAC4B,YAAY,CAACC,MAAMC,OAAO,CAACF,WAAW;YAC1D,OAAOrB,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTQ,OAAO;gBACPc,SAAS;oBACPJ,MAAM;oBACN3B,KAAK;oBACL4B,UAAU;wBACR;4BACED,MAAM;4BACNK,UAAU;gCACRC,OAAO;gCACPC,aAAa;4BACf;wBACF;wBACA;4BACEP,MAAM;4BACNK,UAAU;gCACRC,OAAO;gCACPC,aAAa;4BACf;wBACF;qBACD;gBACH;YACF,GAAG;gBAAET,QAAQ;YAAI;QACnB;QAEA,yDAAyD;QACzD,KAAK,MAAMU,WAAWP,SAAU;YAC9B,IAAI,CAACO,QAAQR,IAAI,IAAI,CAACQ,QAAQH,QAAQ,EAAE;gBACtC,OAAOzB,oBAAY,CAACC,IAAI,CAAC;oBACvBC,SAAS;oBACTQ,OAAO;gBACT,GAAG;oBAAEQ,QAAQ;gBAAI;YACnB;QACF;QAEA,oBAAoB;QACpB,MAAMxB,SAAS,MAAMI,kDAA4B,CAAC+B,YAAY,CAAC;YAC7DT;YACA3B;YACA4B;QACF;QAEAV,cAAM,CAACmB,IAAI,CAAClB,gBAAQ,CAACmB,IAAI,EAAE,iCAAiC;YAC1DrC;YACA0B;YACA3B;YACAuC,eAAeX,SAASY,MAAM;QAChC,GAAGnB,mBAAW,CAACC,GAAG;QAElB,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAM;gBACJT;gBACAY,SAAS;gBACTc;gBACA3B;gBACA4B,UAAUA,SAASY,MAAM;gBACzBf,QAAQ;gBACRgB,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;IAEF,EAAE,OAAO1B,OAAO;QACdC,cAAM,CAACD,KAAK,CAACE,gBAAQ,CAACC,KAAK,EAAE,8BAA8BH,OAAgBI,mBAAW,CAACC,GAAG;QAE1F,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTQ,OAAO;YACPM,SAASN,iBAAiBO,QAAQP,MAAMJ,OAAO,GAAG;QACpD,GAAG;YAAEY,QAAQ;QAAI;IACnB;AACF;AAKO,eAAe9B,IAAIE,OAAoB;IAC5C,IAAI;QACF,MAAM6B,OAAO,MAAM7B,QAAQW,IAAI;QAC/B,MAAM,EAAEP,MAAM,EAAE2C,SAAS,EAAEC,OAAO,EAAE,GAAGnB;QAEvC,gCAAgC;QAChC,IAAI,CAACzB,UAAU,CAAC2C,aAAa,CAACC,SAAS;YACrC,OAAOtC,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTQ,OAAO;gBACPc,SAAS;oBACP9B,QAAQ;oBACR2C,WAAW;oBACXC,SAAS;wBACPC,aAAa;wBACbC,QAAQ;wBACRC,aAAa;wBACbC,SAAS;oBACX;gBACF;YACF,GAAG;gBAAExB,QAAQ;YAAI;QACnB;QAEA,oCAAoC;QACpC,IAAI,OAAOoB,YAAY,UAAU;YAC/B,OAAOtC,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTQ,OAAO;YACT,GAAG;gBAAEQ,QAAQ;YAAI;QACnB;QAEA,sBAAsB;QACtB,MAAMpB,kDAA4B,CAAC6C,mBAAmB,CAACjD,QAAQ2C,WAAWC;QAE1E3B,cAAM,CAACmB,IAAI,CAAClB,gBAAQ,CAACmB,IAAI,EAAE,4BAA4B;YACrDrC;YACA2C;YACAC;QACF,GAAGxB,mBAAW,CAACC,GAAG;QAElB,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAM;gBACJG,SAAS;gBACTZ;gBACA2C;gBACAO,gBAAgBN;gBAChBO,WAAW,IAAIV,OAAOC,WAAW;YACnC;QACF;IAEF,EAAE,OAAO1B,OAAO;QACdC,cAAM,CAACD,KAAK,CAACE,gBAAQ,CAACC,KAAK,EAAE,6BAA6BH,OAAgBI,mBAAW,CAACC,GAAG;QAEzF,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTQ,OAAO;YACPM,SAASN,iBAAiBO,QAAQP,MAAMJ,OAAO,GAAG;QACpD,GAAG;YAAEY,QAAQ;QAAI;IACnB;AACF;AAKO,eAAelC,OAAOM,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;QAC5C,MAAMC,SAASH,aAAaI,GAAG,CAAC;QAEhC,IAAI,CAACD,QAAQ;YACX,OAAOM,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTQ,OAAO;YACT,GAAG;gBAAEQ,QAAQ;YAAI;QACnB;QAEA,sEAAsE;QACtE,wCAAwC;QACxCP,cAAM,CAACmB,IAAI,CAAClB,gBAAQ,CAACmB,IAAI,EAAE,mCAAmC;YAC5DrC;QACF,GAAGoB,mBAAW,CAACC,GAAG;QAElB,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAM;gBACJG,SAAS;gBACTZ;gBACAwB,QAAQ;gBACR2B,WAAW,IAAIV,OAAOC,WAAW;YACnC;QACF;IAEF,EAAE,OAAO1B,OAAO;QACdC,cAAM,CAACD,KAAK,CAACE,gBAAQ,CAACC,KAAK,EAAE,gCAAgCH,OAAgBI,mBAAW,CAACC,GAAG;QAE5F,OAAOf,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTQ,OAAO;YACPM,SAASN,iBAAiBO,QAAQP,MAAMJ,OAAO,GAAG;QACpD,GAAG;YAAEY,QAAQ;QAAI;IACnB;AACF;AAKO,eAAehC,QAAQI,OAAoB;IAChD,OAAO,IAAIU,oBAAY,CAAC,MAAM;QAC5BkB,QAAQ;QACR4B,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f3302ea08b2bb676a9d2db45e988daa20931ac8d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19xv1lwg91 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19xv1lwg91();
cov_19xv1lwg91().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[0]++;
  cov_19xv1lwg91().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_19xv1lwg91().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_19xv1lwg91().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[1]++;
    cov_19xv1lwg91().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[2]++;
    cov_19xv1lwg91().s[5]++;
    return GET;
  },
  get OPTIONS() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[3]++;
    cov_19xv1lwg91().s[6]++;
    return OPTIONS;
  },
  get POST() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[4]++;
    cov_19xv1lwg91().s[7]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[5]++;
    cov_19xv1lwg91().s[8]++;
    return PUT;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_19xv1lwg91().f[6]++;
    cov_19xv1lwg91().s[9]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_19xv1lwg91().s[10]++, require("next/server"));
const _seooptimizationtools =
/* istanbul ignore next */
(cov_19xv1lwg91().s[11]++, require("../../../../lib/seo/seo-optimization-tools"));
const _logger =
/* istanbul ignore next */
(cov_19xv1lwg91().s[12]++, require("../../../../lib/enterprise/logger"));
const runtime =
/* istanbul ignore next */
(cov_19xv1lwg91().s[13]++, 'nodejs');
async function GET(request) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[7]++;
  cov_19xv1lwg91().s[14]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[15]++, new URL(request.url));
    const testId =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[16]++, searchParams.get('testId'));
    const action =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[17]++, searchParams.get('action'));
    /* istanbul ignore next */
    cov_19xv1lwg91().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[1][0]++, testId) &&
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[1][1]++, action === 'analyze')) {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[0][0]++;
      // Analizar resultados de un test especÃ­fico
      const results =
      /* istanbul ignore next */
      (cov_19xv1lwg91().s[19]++, await _seooptimizationtools.enhancedSEOOptimizationTools.analyzeABTestResults(testId));
      /* istanbul ignore next */
      cov_19xv1lwg91().s[20]++;
      return _server.NextResponse.json({
        success: true,
        data: results
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[0][1]++;
    }
    cov_19xv1lwg91().s[21]++;
    if (testId) {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[2][0]++;
      // Obtener informaciÃ³n de un test especÃ­fico
      const stats =
      /* istanbul ignore next */
      (cov_19xv1lwg91().s[22]++, _seooptimizationtools.enhancedSEOOptimizationTools.getUsageStats());
      /* istanbul ignore next */
      cov_19xv1lwg91().s[23]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          testId,
          message: 'Use POST with action=analyze_ab_test to get detailed results',
          activeTests: stats.activeABTests
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[2][1]++;
    }
    // Obtener estadÃ­sticas generales de A/B testing
    const stats =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[24]++, _seooptimizationtools.enhancedSEOOptimizationTools.getUsageStats());
    /* istanbul ignore next */
    cov_19xv1lwg91().s[25]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        activeTests: stats.activeABTests,
        endpoints: {
          'GET ?testId=xxx': 'Get test info',
          'GET ?testId=xxx&action=analyze': 'Analyze test results',
          'POST': 'Create new A/B test',
          'PUT': 'Update test metrics',
          'DELETE ?testId=xxx': 'Stop/cancel test'
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_19xv1lwg91().s[26]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'A/B testing API GET error', error, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[27]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to process request',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[3][0]++, error.message) :
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[3][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[8]++;
  cov_19xv1lwg91().s[28]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[29]++, await request.json());
    const {
      name,
      url,
      variants
    } =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[30]++, body);
    // Validar parÃ¡metros requeridos
    /* istanbul ignore next */
    cov_19xv1lwg91().s[31]++;
    if (
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[5][0]++, !name) ||
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[5][1]++, !url) ||
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[5][2]++, !variants) ||
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[5][3]++, !Array.isArray(variants))) {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[4][0]++;
      cov_19xv1lwg91().s[32]++;
      return _server.NextResponse.json({
        success: false,
        error: 'name, url, and variants array are required',
        example: {
          name: 'Product Page Title Test',
          url: '/products/pintura-interior',
          variants: [{
            name: 'Control',
            metadata: {
              title: 'Pintura Interior - Pinteya',
              description: 'Compra pintura interior de calidad'
            }
          }, {
            name: 'Variant A',
            metadata: {
              title: 'Pintura Interior Premium - Colores Vibrantes | Pinteya',
              description: 'Descubre nuestra pintura interior premium con colores vibrantes y acabado duradero. Â¡EnvÃ­o gratis!'
            }
          }]
        }
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[4][1]++;
    }
    // Validar que cada variante tenga la estructura correcta
    cov_19xv1lwg91().s[33]++;
    for (const variant of variants) {
      /* istanbul ignore next */
      cov_19xv1lwg91().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[7][0]++, !variant.name) ||
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[7][1]++, !variant.metadata)) {
        /* istanbul ignore next */
        cov_19xv1lwg91().b[6][0]++;
        cov_19xv1lwg91().s[35]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Each variant must have name and metadata properties'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_19xv1lwg91().b[6][1]++;
      }
    }
    // Crear el A/B test
    const testId =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[36]++, await _seooptimizationtools.enhancedSEOOptimizationTools.createABTest({
      name,
      url,
      variants
    }));
    /* istanbul ignore next */
    cov_19xv1lwg91().s[37]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'A/B test created successfully', {
      testId,
      name,
      url,
      variantsCount: variants.length
    }, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[38]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        testId,
        message: 'A/B test created successfully',
        name,
        url,
        variants: variants.length,
        status: 'running',
        createdAt: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_19xv1lwg91().s[39]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'A/B testing API POST error', error, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[40]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to create A/B test',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[8][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function PUT(request) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[9]++;
  cov_19xv1lwg91().s[41]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[42]++, await request.json());
    const {
      testId,
      variantId,
      metrics
    } =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[43]++, body);
    // Validar parÃ¡metros requeridos
    /* istanbul ignore next */
    cov_19xv1lwg91().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[10][0]++, !testId) ||
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[10][1]++, !variantId) ||
    /* istanbul ignore next */
    (cov_19xv1lwg91().b[10][2]++, !metrics)) {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[9][0]++;
      cov_19xv1lwg91().s[45]++;
      return _server.NextResponse.json({
        success: false,
        error: 'testId, variantId, and metrics are required',
        example: {
          testId: 'ab_test_1234567890_abc123',
          variantId: 'variant_0',
          metrics: {
            impressions: 100,
            clicks: 5,
            conversions: 1,
            revenue: 25.99
          }
        }
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[9][1]++;
    }
    // Validar que metrics sea un objeto
    cov_19xv1lwg91().s[46]++;
    if (typeof metrics !== 'object') {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[11][0]++;
      cov_19xv1lwg91().s[47]++;
      return _server.NextResponse.json({
        success: false,
        error: 'metrics must be an object with impressions, clicks, conversions, and/or revenue'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[11][1]++;
    }
    // Actualizar mÃ©tricas
    cov_19xv1lwg91().s[48]++;
    await _seooptimizationtools.enhancedSEOOptimizationTools.updateABTestMetrics(testId, variantId, metrics);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[49]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'A/B test metrics updated', {
      testId,
      variantId,
      metrics
    }, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[50]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        message: 'A/B test metrics updated successfully',
        testId,
        variantId,
        updatedMetrics: metrics,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_19xv1lwg91().s[51]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'A/B testing API PUT error', error, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[52]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to update A/B test metrics',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[12][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[10]++;
  cov_19xv1lwg91().s[53]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[54]++, new URL(request.url));
    const testId =
    /* istanbul ignore next */
    (cov_19xv1lwg91().s[55]++, searchParams.get('testId'));
    /* istanbul ignore next */
    cov_19xv1lwg91().s[56]++;
    if (!testId) {
      /* istanbul ignore next */
      cov_19xv1lwg91().b[13][0]++;
      cov_19xv1lwg91().s[57]++;
      return _server.NextResponse.json({
        success: false,
        error: 'testId parameter is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_19xv1lwg91().b[13][1]++;
    }
    // En una implementaciÃ³n real, aquÃ­ se marcarÃ­a el test como cancelado
    // Por ahora, solo registramos la acciÃ³n
    cov_19xv1lwg91().s[58]++;
    _logger.logger.info(_logger.LogLevel.INFO, 'A/B test cancellation requested', {
      testId
    }, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[59]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        message: 'A/B test cancellation requested',
        testId,
        status: 'cancelled',
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_19xv1lwg91().s[60]++;
    _logger.logger.error(_logger.LogLevel.ERROR, 'A/B testing API DELETE error', error, _logger.LogCategory.SEO);
    /* istanbul ignore next */
    cov_19xv1lwg91().s[61]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to cancel A/B test',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_19xv1lwg91().b[14][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function OPTIONS(request) {
  /* istanbul ignore next */
  cov_19xv1lwg91().f[11]++;
  cov_19xv1lwg91().s[62]++;
  return new _server.NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,