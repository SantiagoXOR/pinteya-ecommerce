643d1a335c6d7c06f924a3f9beee9eac
/**
 * useCategoryNavigation Hook Tests
 * Enterprise-ready test suite for category navigation logic
 * Pinteya E-commerce
 */ "use strict";
// Mock Next.js navigation hooks
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(),
        useSearchParams: jest.fn(),
        usePathname: jest.fn(()=>'/')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _navigation = require("next/navigation");
const _useCategoryNavigation = require("../../hooks/useCategoryNavigation");
// Mock analytics
const mockGtag = jest.fn();
Object.defineProperty(window, 'gtag', {
    value: mockGtag,
    writable: true
});
describe('useCategoryNavigation Hook', ()=>{
    const mockPush = jest.fn();
    const mockGet = jest.fn();
    const mockForEach = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup router mock
        _navigation.useRouter.mockReturnValue({
            push: mockPush
        });
        // Setup search params mock
        _navigation.useSearchParams.mockReturnValue({
            get: mockGet,
            forEach: mockForEach
        });
        // Setup pathname mock
        _navigation.usePathname.mockReturnValue('/');
        // Reset analytics mock
        mockGtag.mockClear();
    });
    describe('Navigation Functions', ()=>{
        it('navigates to filtered view with categories', async ()=>{
            mockGet.mockReturnValue(null);
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    enableAnalytics: true
                }));
            const categories = [
                'cat1',
                'cat2'
            ];
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered(categories);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/?categories=cat1%2Ccat2');
        });
        it('navigates to home (clears filters)', async ()=>{
            mockGet.mockReturnValue('cat1,cat2');
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    enableAnalytics: true
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToHome();
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/');
        });
        it('preserves other URL parameters when enabled', async ()=>{
            mockGet.mockImplementation((key)=>{
                if (key === 'categories') {
                    return null;
                }
                if (key === 'search') {
                    return 'test';
                }
                return null;
            });
            mockForEach.mockImplementation((callback)=>{
                callback('test', 'search');
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    preserveParams: true,
                    enableAnalytics: true
                }));
            const categories = [
                'cat1'
            ];
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered(categories);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/?search=test&categories=cat1');
        });
        it('does not preserve other parameters when disabled', async ()=>{
            mockGet.mockImplementation((key)=>{
                if (key === 'categories') {
                    return null;
                }
                if (key === 'search') {
                    return 'test';
                }
                return null;
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    preserveParams: false,
                    enableAnalytics: true
                }));
            const categories = [
                'cat1'
            ];
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered(categories);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/?categories=cat1');
        });
    });
    describe('URL Building', ()=>{
        it('builds correct URL with single category', ()=>{
            mockGet.mockReturnValue(null);
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            const url = result.current.getCurrentUrl();
            expect(url).toBe('/');
        });
        it('builds correct URL with multiple categories', ()=>{
            mockGet.mockReturnValue('cat1,cat2,cat3');
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            const url = result.current.getCurrentUrl();
            expect(url).toBe('/?categories=cat1%2Ccat2%2Ccat3');
        });
        it('handles empty categories correctly', ()=>{
            mockGet.mockReturnValue('');
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            const url = result.current.getCurrentUrl();
            expect(url).toBe('/');
        });
    });
    describe('Navigation State', ()=>{
        it('tracks navigation state correctly', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            expect(result.current.isNavigating).toBe(false);
            (0, _react.act)(()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
            });
            expect(result.current.isNavigating).toBe(true);
            // Wait for navigation to complete
            await (0, _react.act)(async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, 500));
            });
            expect(result.current.isNavigating).toBe(false);
        });
    });
    describe('Analytics Tracking', ()=>{
        it('tracks navigation analytics when enabled', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    enableAnalytics: true
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered([
                    'cat1',
                    'cat2'
                ]);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockGtag).toHaveBeenCalledWith('event', 'category_navigation', expect.objectContaining({
                event_category: 'navigation',
                event_label: 'filter',
                value: 2
            }));
        });
        it('tracks clear navigation analytics', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    enableAnalytics: true
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToHome();
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockGtag).toHaveBeenCalledWith('event', 'category_navigation', expect.objectContaining({
                event_category: 'navigation',
                event_label: 'clear',
                value: 0
            }));
        });
        it('does not track analytics when disabled', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    enableAnalytics: false
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockGtag).not.toHaveBeenCalled();
        });
    });
    describe('Configuration Options', ()=>{
        it('uses custom parameter name', async ()=>{
            mockGet.mockReturnValue(null);
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    paramName: 'filters'
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/?filters=cat1');
        });
        it('uses custom base path', async ()=>{
            mockGet.mockReturnValue(null);
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    basePath: '/shop'
                }));
            await (0, _react.act)(async ()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
                // Wait for debounce
                await new Promise((resolve)=>setTimeout(resolve, 400));
            });
            expect(mockPush).toHaveBeenCalledWith('/shop?categories=cat1');
        });
        it('respects custom debounce delay', async ()=>{
            jest.useFakeTimers();
            mockGet.mockReturnValue(null);
            mockForEach.mockImplementation(()=>{}); // No other params
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)({
                    debounceDelay: 100
                }));
            (0, _react.act)(()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
            });
            expect(mockPush).not.toHaveBeenCalled();
            (0, _react.act)(()=>{
                jest.advanceTimersByTime(100);
            });
            expect(mockPush).toHaveBeenCalledWith('/?categories=cat1');
            jest.useRealTimers();
        });
    });
    describe('Error Handling', ()=>{
        it('handles navigation errors gracefully', ()=>{
            // Test that the hook doesn't crash when navigation fails
            mockPush.mockImplementation(()=>{
                throw new Error('Navigation failed');
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            // Should not throw when navigation fails
            expect(()=>{
                result.current.navigateToFiltered([
                    'cat1'
                ]);
            }).not.toThrow();
        });
    });
    describe('Cleanup', ()=>{
        it('cleans up debounce timer on unmount', ()=>{
            // This test verifies that the hook cleans up properly
            // The actual cleanup is handled internally by the hook
            const { unmount } = (0, _react.renderHook)(()=>(0, _useCategoryNavigation.useCategoryNavigation)());
            // Should unmount without errors
            expect(()=>unmount()).not.toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,