{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\notifications\\slack.ts"],"sourcesContent":["'use client'\r\n\r\nimport { toast } from '@/components/ui/use-toast'\r\n\r\nexport interface SlackNotificationConfig {\r\n  channel: string\r\n  message: string\r\n  username?: string\r\n  iconEmoji?: string\r\n  attachments?: SlackAttachment[]\r\n  blocks?: SlackBlock[]\r\n  threadTs?: string\r\n  priority?: 'low' | 'normal' | 'high' | 'critical'\r\n}\r\n\r\nexport interface SlackAttachment {\r\n  color?: 'good' | 'warning' | 'danger' | string\r\n  title?: string\r\n  titleLink?: string\r\n  text?: string\r\n  fields?: Array<{\r\n    title: string\r\n    value: string\r\n    short?: boolean\r\n  }>\r\n  footer?: string\r\n  ts?: number\r\n}\r\n\r\nexport interface SlackBlock {\r\n  type: string\r\n  text?: {\r\n    type: string\r\n    text: string\r\n  }\r\n  elements?: any[]\r\n  accessory?: any\r\n}\r\n\r\nexport class SlackNotificationService {\r\n  private static instance: SlackNotificationService\r\n  private webhookUrl: string | null = null\r\n  private botToken: string | null = null\r\n  private apiEndpoint = '/api/notifications/slack'\r\n\r\n  static getInstance(): SlackNotificationService {\r\n    if (!SlackNotificationService.instance) {\r\n      SlackNotificationService.instance = new SlackNotificationService()\r\n    }\r\n    return SlackNotificationService.instance\r\n  }\r\n\r\n  configure(config: { webhookUrl?: string; botToken?: string }) {\r\n    this.webhookUrl = config.webhookUrl || null\r\n    this.botToken = config.botToken || null\r\n  }\r\n\r\n  async sendNotification(config: SlackNotificationConfig): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(this.apiEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(config)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al enviar notificaci√≥n a Slack')\r\n      }\r\n\r\n      const result = await response.json()\r\n      return result.success\r\n    } catch (error) {\r\n      console.error('Error sending Slack notification:', error)\r\n      toast({\r\n        title: 'Error',\r\n        description: 'No se pudo enviar la notificaci√≥n a Slack',\r\n        variant: 'destructive'\r\n      })\r\n      return false\r\n    }\r\n  }\r\n\r\n  async sendOrderAlert(orderData: {\r\n    orderId: string\r\n    customerName: string\r\n    total: number\r\n    items: Array<{ name: string; quantity: number }>\r\n    status: string\r\n  }): Promise<boolean> {\r\n    const attachment: SlackAttachment = {\r\n      color: 'good',\r\n      title: `Nueva orden #${orderData.orderId}`,\r\n      fields: [\r\n        {\r\n          title: 'Cliente',\r\n          value: orderData.customerName,\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Total',\r\n          value: `$${orderData.total.toFixed(2)}`,\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Estado',\r\n          value: orderData.status,\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Productos',\r\n          value: orderData.items.map(item => `${item.name} (x${item.quantity})`).join('\\n'),\r\n          short: false\r\n        }\r\n      ],\r\n      footer: 'Sistema E-commerce',\r\n      ts: Math.floor(Date.now() / 1000)\r\n    }\r\n\r\n    return this.sendNotification({\r\n      channel: '#orders',\r\n      message: `Nueva orden recibida: #${orderData.orderId}`,\r\n      attachments: [attachment],\r\n      priority: 'normal'\r\n    })\r\n  }\r\n\r\n  async sendLowStockAlert(productData: {\r\n    productName: string\r\n    currentStock: number\r\n    minimumStock: number\r\n    productId: string\r\n  }): Promise<boolean> {\r\n    const attachment: SlackAttachment = {\r\n      color: 'warning',\r\n      title: '‚ö†Ô∏è Alerta de Stock Bajo',\r\n      fields: [\r\n        {\r\n          title: 'Producto',\r\n          value: productData.productName,\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Stock Actual',\r\n          value: productData.currentStock.toString(),\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Stock M√≠nimo',\r\n          value: productData.minimumStock.toString(),\r\n          short: true\r\n        },\r\n        {\r\n          title: 'ID Producto',\r\n          value: productData.productId,\r\n          short: true\r\n        }\r\n      ],\r\n      footer: 'Sistema de Inventario',\r\n      ts: Math.floor(Date.now() / 1000)\r\n    }\r\n\r\n    return this.sendNotification({\r\n      channel: '#inventory',\r\n      message: `üö® Stock bajo detectado para: ${productData.productName}`,\r\n      attachments: [attachment],\r\n      priority: 'high'\r\n    })\r\n  }\r\n\r\n  async sendErrorAlert(errorData: {\r\n    error: string\r\n    context: string\r\n    userId?: string\r\n    timestamp: Date\r\n    severity: 'low' | 'medium' | 'high' | 'critical'\r\n  }): Promise<boolean> {\r\n    const colorMap = {\r\n      low: 'good',\r\n      medium: 'warning',\r\n      high: 'danger',\r\n      critical: 'danger'\r\n    }\r\n\r\n    const attachment: SlackAttachment = {\r\n      color: colorMap[errorData.severity],\r\n      title: `üö® Error ${errorData.severity.toUpperCase()}`,\r\n      fields: [\r\n        {\r\n          title: 'Error',\r\n          value: errorData.error,\r\n          short: false\r\n        },\r\n        {\r\n          title: 'Contexto',\r\n          value: errorData.context,\r\n          short: false\r\n        },\r\n        {\r\n          title: 'Usuario',\r\n          value: errorData.userId || 'N/A',\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Severidad',\r\n          value: errorData.severity.toUpperCase(),\r\n          short: true\r\n        }\r\n      ],\r\n      footer: 'Sistema de Monitoreo',\r\n      ts: Math.floor(errorData.timestamp.getTime() / 1000)\r\n    }\r\n\r\n    return this.sendNotification({\r\n      channel: '#errors',\r\n      message: `Error detectado en el sistema`,\r\n      attachments: [attachment],\r\n      priority: errorData.severity === 'critical' ? 'critical' : 'high'\r\n    })\r\n  }\r\n\r\n  async sendSalesReport(reportData: {\r\n    period: string\r\n    totalSales: number\r\n    totalOrders: number\r\n    averageOrderValue: number\r\n    topProducts: Array<{ name: string; sales: number }>\r\n  }): Promise<boolean> {\r\n    const attachment: SlackAttachment = {\r\n      color: 'good',\r\n      title: `üìä Reporte de Ventas - ${reportData.period}`,\r\n      fields: [\r\n        {\r\n          title: 'Ventas Totales',\r\n          value: `$${reportData.totalSales.toFixed(2)}`,\r\n          short: true\r\n        },\r\n        {\r\n          title: '√ìrdenes Totales',\r\n          value: reportData.totalOrders.toString(),\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Valor Promedio por Orden',\r\n          value: `$${reportData.averageOrderValue.toFixed(2)}`,\r\n          short: true\r\n        },\r\n        {\r\n          title: 'Top Productos',\r\n          value: reportData.topProducts.map(p => `${p.name}: ${p.sales} ventas`).join('\\n'),\r\n          short: false\r\n        }\r\n      ],\r\n      footer: 'Reporte Autom√°tico',\r\n      ts: Math.floor(Date.now() / 1000)\r\n    }\r\n\r\n    return this.sendNotification({\r\n      channel: '#sales',\r\n      message: `Reporte de ventas generado para ${reportData.period}`,\r\n      attachments: [attachment],\r\n      priority: 'low'\r\n    })\r\n  }\r\n\r\n  async sendSystemAlert(alertData: {\r\n    title: string\r\n    message: string\r\n    severity: 'info' | 'warning' | 'error'\r\n    details?: Record<string, any>\r\n  }): Promise<boolean> {\r\n    const colorMap = {\r\n      info: 'good',\r\n      warning: 'warning',\r\n      error: 'danger'\r\n    }\r\n\r\n    const emojiMap = {\r\n      info: '‚ÑπÔ∏è',\r\n      warning: '‚ö†Ô∏è',\r\n      error: 'üö®'\r\n    }\r\n\r\n    const attachment: SlackAttachment = {\r\n      color: colorMap[alertData.severity],\r\n      title: `${emojiMap[alertData.severity]} ${alertData.title}`,\r\n      text: alertData.message,\r\n      fields: alertData.details ? Object.entries(alertData.details).map(([key, value]) => ({\r\n        title: key,\r\n        value: String(value),\r\n        short: true\r\n      })) : undefined,\r\n      footer: 'Sistema de Alertas',\r\n      ts: Math.floor(Date.now() / 1000)\r\n    }\r\n\r\n    return this.sendNotification({\r\n      channel: '#system',\r\n      message: alertData.message,\r\n      attachments: [attachment],\r\n      priority: alertData.severity === 'error' ? 'high' : 'normal'\r\n    })\r\n  }\r\n\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch('/api/notifications/slack/test', {\r\n        method: 'POST'\r\n      })\r\n      return response.ok\r\n    } catch (error) {\r\n      console.error('Error testing Slack connection:', error)\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n// Instancia singleton para uso global\r\nexport const slackService = SlackNotificationService.getInstance()\r\n\r\n// Funciones de conveniencia\r\nexport const sendOrderAlert = (orderData: Parameters<SlackNotificationService['sendOrderAlert']>[0]) => \r\n  slackService.sendOrderAlert(orderData)\r\n\r\nexport const sendLowStockAlert = (productData: Parameters<SlackNotificationService['sendLowStockAlert']>[0]) => \r\n  slackService.sendLowStockAlert(productData)\r\n\r\nexport const sendErrorAlert = (errorData: Parameters<SlackNotificationService['sendErrorAlert']>[0]) => \r\n  slackService.sendErrorAlert(errorData)\r\n\r\nexport const sendSalesReport = (reportData: Parameters<SlackNotificationService['sendSalesReport']>[0]) => \r\n  slackService.sendSalesReport(reportData)\r\n\r\nexport const sendSystemAlert = (alertData: Parameters<SlackNotificationService['sendSystemAlert']>[0]) => \r\n  slackService.sendSystemAlert(alertData)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["SlackNotificationService","sendErrorAlert","sendLowStockAlert","sendOrderAlert","sendSalesReport","sendSystemAlert","slackService","getInstance","instance","configure","config","webhookUrl","botToken","sendNotification","response","fetch","apiEndpoint","method","headers","body","JSON","stringify","ok","Error","result","json","success","error","console","toast","title","description","variant","orderData","attachment","color","orderId","fields","value","customerName","short","total","toFixed","status","items","map","item","name","quantity","join","footer","ts","Math","floor","Date","now","channel","message","attachments","priority","productData","productName","currentStock","toString","minimumStock","productId","errorData","colorMap","low","medium","high","critical","severity","toUpperCase","context","userId","timestamp","getTime","reportData","period","totalSales","totalOrders","averageOrderValue","topProducts","p","sales","alertData","info","warning","emojiMap","text","details","Object","entries","key","String","undefined","testConnection"],"mappings":"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"}