{"version":3,"names":["cov_1r1lm44xnt","actualCoverage","s","useAdminDashboardStats","f","stats","setStats","_react","useState","loading","setLoading","error","setError","data","session","_react1","useSession","useEffect","fetchDashboardStats","productsResponse","ordersResponse","usersResponse","Promise","allSettled","fetch","headers","credentials","productStats","totalProducts","activeProducts","lowStockProducts","noStockProducts","b","status","value","ok","json","success","total_products","active_products","low_stock_products","no_stock_products","orderStats","totalOrders","pendingOrders","completedOrders","totalRevenue","todayRevenue","total_orders","pending_orders","completed_orders","total_revenue","today_revenue","userStats","totalUsers","activeUsers","total_users","active_users","combinedStats","err","console","errorMessage","Error","message","log","response","products","length","withStock","filter","p","stock","lowStock","noStock","warn","fallbackError","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","calculateChange","current","previous","type","change","absChange","Math","abs","toFixed","refetch"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\admin\\useAdminDashboardStats.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\n\r\ninterface DashboardStats {\r\n  totalProducts: number;\r\n  activeProducts: number;\r\n  lowStockProducts: number;\r\n  noStockProducts: number;\r\n  totalOrders: number;\r\n  pendingOrders: number;\r\n  completedOrders: number;\r\n  totalRevenue: number;\r\n  todayRevenue: number;\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n}\r\n\r\ninterface QuickStat {\r\n  title: string;\r\n  value: string;\r\n  change: string;\r\n  changeType: 'positive' | 'negative' | 'neutral';\r\n  icon: any;\r\n}\r\n\r\nexport function useAdminDashboardStats() {\r\n  const [stats, setStats] = useState<DashboardStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { data: session } = useSession();\r\n\r\n  useEffect(() => {\r\n    fetchDashboardStats();\r\n  }, []);\r\n\r\n  const fetchDashboardStats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // NextAuth.js maneja las cookies de sesión automáticamente\r\n      // No necesitamos obtener token manualmente\r\n\r\n      // Hacer requests paralelos a diferentes APIs (con manejo de errores individual)\r\n      const [productsResponse, ordersResponse, usersResponse] = await Promise.allSettled([\r\n        fetch('/api/admin/products/stats', {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        }),\r\n        fetch('/api/admin/orders/stats', {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        }),\r\n        fetch('/api/admin/users/stats', {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        })\r\n      ]);\r\n\r\n      // Procesar respuesta de productos\r\n      let productStats = {\r\n        totalProducts: 0,\r\n        activeProducts: 0,\r\n        lowStockProducts: 0,\r\n        noStockProducts: 0\r\n      };\r\n\r\n      if (productsResponse.status === 'fulfilled' && productsResponse.value.ok) {\r\n        const data = await productsResponse.value.json();\r\n        if (data.success && data.stats) {\r\n          productStats = {\r\n            totalProducts: data.stats.total_products || 0,\r\n            activeProducts: data.stats.active_products || 0,\r\n            lowStockProducts: data.stats.low_stock_products || 0,\r\n            noStockProducts: data.stats.no_stock_products || 0\r\n          };\r\n        }\r\n      }\r\n\r\n      // Procesar respuesta de órdenes (con fallback si no existe la API)\r\n      let orderStats = {\r\n        totalOrders: 0,\r\n        pendingOrders: 0,\r\n        completedOrders: 0,\r\n        totalRevenue: 0,\r\n        todayRevenue: 0\r\n      };\r\n\r\n      if (ordersResponse.status === 'fulfilled' && ordersResponse.value.ok) {\r\n        const data = await ordersResponse.value.json();\r\n        if (data.success && data.stats) {\r\n          orderStats = {\r\n            totalOrders: data.stats.total_orders || 0,\r\n            pendingOrders: data.stats.pending_orders || 0,\r\n            completedOrders: data.stats.completed_orders || 0,\r\n            totalRevenue: data.stats.total_revenue || 0,\r\n            todayRevenue: data.stats.today_revenue || 0\r\n          };\r\n        }\r\n      }\r\n\r\n      // Procesar respuesta de usuarios (con fallback si no existe la API)\r\n      let userStats = {\r\n        totalUsers: 0,\r\n        activeUsers: 0\r\n      };\r\n\r\n      if (usersResponse.status === 'fulfilled' && usersResponse.value.ok) {\r\n        const data = await usersResponse.value.json();\r\n        if (data.success && data.stats) {\r\n          userStats = {\r\n            totalUsers: data.stats.total_users || 0,\r\n            activeUsers: data.stats.active_users || 0\r\n          };\r\n        }\r\n      }\r\n\r\n      // Combinar todas las estadísticas\r\n      const combinedStats: DashboardStats = {\r\n        ...productStats,\r\n        ...orderStats,\r\n        ...userStats\r\n      };\r\n\r\n      setStats(combinedStats);\r\n    } catch (err) {\r\n      console.error('Error fetching dashboard stats:', err);\r\n      const errorMessage = err instanceof Error ? err.message : 'Error desconocido';\r\n\r\n      // No establecer error inmediatamente, intentar fallback primero\r\n      console.log('Intentando fallback con API pública de productos...');\r\n\r\n      // Fallback: obtener estadísticas básicas directamente de la API pública\r\n      try {\r\n        const response = await fetch('/api/products', {\r\n          credentials: 'include'\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const products = data.data || [];\r\n\r\n          const totalProducts = products.length;\r\n          const withStock = products.filter((p: any) => p.stock && p.stock > 0).length;\r\n          const lowStock = products.filter((p: any) => p.stock && p.stock > 0 && p.stock <= 10).length;\r\n          const noStock = products.filter((p: any) => !p.stock || p.stock === 0).length;\r\n\r\n          setStats({\r\n            totalProducts,\r\n            activeProducts: withStock,\r\n            lowStockProducts: lowStock,\r\n            noStockProducts: noStock,\r\n            totalOrders: 0,\r\n            pendingOrders: 0,\r\n            completedOrders: 0,\r\n            totalRevenue: 0,\r\n            todayRevenue: 0,\r\n            totalUsers: 0,\r\n            activeUsers: 0\r\n          });\r\n\r\n          // Solo mostrar warning, no error completo\r\n          setError(`Usando datos básicos: ${errorMessage}`);\r\n          console.log('Fallback exitoso con API pública');\r\n        } else {\r\n          console.warn('API pública falló, usando datos estáticos');\r\n          // Fallback final con datos conocidos\r\n          setStats({\r\n            totalProducts: 53,\r\n            activeProducts: 53,\r\n            lowStockProducts: 4,\r\n            noStockProducts: 0,\r\n            totalOrders: 0,\r\n            pendingOrders: 0,\r\n            completedOrders: 0,\r\n            totalRevenue: 0,\r\n            todayRevenue: 0,\r\n            totalUsers: 0,\r\n            activeUsers: 0\r\n          });\r\n          setError(`Usando datos estáticos: ${errorMessage}`);\r\n        }\r\n      } catch (fallbackError) {\r\n        console.error('Error en fallback:', fallbackError);\r\n        // Fallback final con datos estáticos\r\n        setStats({\r\n          totalProducts: 53,\r\n          activeProducts: 53,\r\n          lowStockProducts: 4,\r\n          noStockProducts: 0,\r\n          totalOrders: 0,\r\n          pendingOrders: 0,\r\n          completedOrders: 0,\r\n          totalRevenue: 0,\r\n          todayRevenue: 0,\r\n          totalUsers: 0,\r\n          activeUsers: 0\r\n        });\r\n        setError(`Fallback completo falló: ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number): string => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount);\r\n  };\r\n\r\n  const calculateChange = (current: number, previous: number): { value: string; type: 'positive' | 'negative' | 'neutral' } => {\r\n    if (previous === 0) {\r\n      return { value: '+100%', type: 'positive' };\r\n    }\r\n    \r\n    const change = ((current - previous) / previous) * 100;\r\n    const absChange = Math.abs(change);\r\n    \r\n    if (absChange < 1) {\r\n      return { value: '0%', type: 'neutral' };\r\n    }\r\n    \r\n    return {\r\n      value: `${change > 0 ? '+' : ''}${change.toFixed(1)}%`,\r\n      type: change > 0 ? 'positive' : 'negative'\r\n    };\r\n  };\r\n\r\n  return {\r\n    stats,\r\n    loading,\r\n    error,\r\n    refetch: fetchDashboardStats,\r\n    formatCurrency,\r\n    calculateChange\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}