848b7c48a9dd57b57a47d250200ffaac
/**
 * Hook de Toast General para Pinteya E-commerce
 * Compatible con shadcn/ui y tests enterprise
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get reducer () {
        return reducer;
    },
    get toast () {
        return toast;
    },
    get useToast () {
        return useToast;
    }
});
const _react = require("react");
// ===================================
// CONFIGURACIÃ“N
// ===================================
const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;
// ===================================
// ESTADO GLOBAL
// ===================================
let count = 0;
function genId() {
    count = (count + 1) % Number.MAX_VALUE;
    return count.toString();
}
const toastTimeouts = new Map();
const addToRemoveQueue = (toastId)=>{
    if (toastTimeouts.has(toastId)) {
        return;
    }
    const timeout = setTimeout(()=>{
        toastTimeouts.delete(toastId);
        dispatch({
            type: 'REMOVE_TOAST',
            toastId: toastId
        });
    }, TOAST_REMOVE_DELAY);
    toastTimeouts.set(toastId, timeout);
};
const reducer = (state, action)=>{
    switch(action.type){
        case 'ADD_TOAST':
            return [
                action.toast,
                ...state
            ].slice(0, TOAST_LIMIT);
        case 'UPDATE_TOAST':
            return state.map((t)=>t.id === action.toast.id ? {
                    ...t,
                    ...action.toast
                } : t);
        case 'DISMISS_TOAST':
            {
                const { toastId } = action;
                if (toastId) {
                    addToRemoveQueue(toastId);
                } else {
                    state.forEach((toast)=>{
                        addToRemoveQueue(toast.id);
                    });
                }
                return state.map((t)=>t.id === toastId || toastId === undefined ? {
                        ...t,
                        open: false
                    } : t);
            }
        case 'REMOVE_TOAST':
            if (action.toastId === undefined) {
                return [];
            }
            return state.filter((t)=>t.id !== action.toastId);
    }
};
// ===================================
// LISTENERS
// ===================================
const listeners = [];
let memoryState = [];
function dispatch(action) {
    memoryState = reducer(memoryState, action);
    listeners.forEach((listener)=>{
        listener(memoryState);
    });
}
function toast({ ...props }) {
    const id = genId();
    const update = (props)=>dispatch({
            type: 'UPDATE_TOAST',
            toast: {
                ...props,
                id
            }
        });
    const dismiss = ()=>dispatch({
            type: 'DISMISS_TOAST',
            toastId: id
        });
    dispatch({
        type: 'ADD_TOAST',
        toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open)=>{
                if (!open) {
                    dismiss();
                }
            }
        }
    });
    return {
        id: id,
        dismiss,
        update
    };
}
// ===================================
// HOOK PRINCIPAL
// ===================================
function useToast() {
    const [state, setState] = (0, _react.useState)(memoryState);
    (0, _react.useState)(()=>{
        listeners.push(setState);
        return ()=>{
            const index = listeners.indexOf(setState);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        };
    });
    return {
        ...state,
        toast,
        dismiss: (toastId)=>dispatch({
                type: 'DISMISS_TOAST',
                toastId
            })
    };
}

//# sourceMappingURL=data:application/json;base64,