12801745d24583482c080fbb2c392a5d
/**
 * useCategoryData Hook
 * Manages category data fetching, caching, and state
 * Pinteya E-commerce - Enterprise-ready implementation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get clearCategoryCache () {
        return clearCategoryCache;
    },
    get /**
 * Default export for convenience
 */ default () {
        return _default;
    },
    get preloadCategoryImages () {
        return preloadCategoryImages;
    },
    get useCategoryData () {
        return useCategoryData;
    }
});
const _react = require("react");
/**
 * In-memory cache for category data
 */ const categoryCache = new Map();
/**
 * Default categories data (fallback) - ELIMINADO
 * DATOS HARDCODEADOS ELIMINADOS - Ahora usa solo API real de Supabase
 * Las categorías se obtienen dinámicamente desde /api/categories
 */ const DEFAULT_CATEGORIES = [];
const useCategoryData = (options = {})=>{
    const { autoFetch = true, cacheDuration = 5 * 60 * 1000, enableBackgroundRefresh = true, refreshInterval = 30 * 60 * 1000, maxCategories = 20, enableAnalytics = true, fallbackCategories = [], apiEndpoint = '/api/categories' } = options;
    const [categories, setCategories] = (0, _react.useState)(fallbackCategories);
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    /**
   * Generate cache key based on options
   */ const cacheKey = (0, _react.useMemo)(()=>{
        return `categories_${maxCategories}_${apiEndpoint}`;
    }, [
        maxCategories,
        apiEndpoint
    ]);
    /**
   * Check if cached data is valid
   */ const isCacheValid = (0, _react.useCallback)((cache)=>{
        return Date.now() < cache.expiresAt;
    }, []);
    /**
   * Get data from cache if valid
   */ const getCachedData = (0, _react.useCallback)(()=>{
        const cached = categoryCache.get(cacheKey);
        if (cached && isCacheValid(cached)) {
            return cached.data;
        }
        return null;
    }, [
        cacheKey,
        isCacheValid
    ]);
    /**
   * Store data in cache
   */ const setCachedData = (0, _react.useCallback)((data)=>{
        const now = Date.now();
        categoryCache.set(cacheKey, {
            data,
            timestamp: now,
            expiresAt: now + cacheDuration
        });
    }, [
        cacheKey,
        cacheDuration
    ]);
    /**
   * Track analytics event
   */ const trackAnalytics = (0, _react.useCallback)((event, data)=>{
        if (!enableAnalytics) {
            return;
        }
        if (typeof window !== 'undefined' && window.gtag) {
            window.gtag('event', 'category_data', {
                event_category: 'data',
                event_label: event,
                custom_parameters: data
            });
        }
        if (process.env.NODE_ENV === 'development') {}
    }, [
        enableAnalytics
    ]);
    /**
   * Fetch categories from API
   */ const fetchCategories = (0, _react.useCallback)(async ()=>{
        try {
            const response = await fetch(apiEndpoint);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const result = await response.json();
            // Handle different API response formats
            let categoriesData;
            if (Array.isArray(result)) {
                categoriesData = result;
            } else if (result.data && Array.isArray(result.data)) {
                categoriesData = result.data;
            } else if (result.categories && Array.isArray(result.categories)) {
                categoriesData = result.categories;
            } else {
                throw new Error('Invalid API response format');
            }
            // Validate and transform data
            const validCategories = categoriesData.filter((cat)=>typeof cat === 'object' && cat !== null && (typeof cat.id === 'string' || typeof cat.id === 'number') && typeof cat.name === 'string').slice(0, maxCategories).map((cat)=>({
                    id: cat.slug || cat.id.toString(),
                    name: cat.name,
                    icon: cat.image_url || (cat.icon ? cat.icon : '/images/categories/placeholder.png'),
                    description: cat.description || `Productos de ${cat.name.toLowerCase()}`,
                    isAvailable: cat.isAvailable ?? true,
                    // Keep additional API fields for compatibility
                    products_count: cat.products_count || 0,
                    slug: cat.slug,
                    parent_id: cat.parent_id,
                    image_url: cat.image_url,
                    created_at: cat.created_at,
                    updated_at: cat.updated_at
                }));
            trackAnalytics('fetch_success', {
                count: validCategories.length
            });
            return validCategories;
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            trackAnalytics('fetch_error', {
                error: errorMessage
            });
            throw new Error(`Failed to fetch categories: ${errorMessage}`);
        }
    }, [
        apiEndpoint,
        maxCategories,
        trackAnalytics
    ]);
    /**
   * Refresh categories data
   */ const refresh = (0, _react.useCallback)(async ()=>{
        setLoading(true);
        setError(null);
        try {
            // Check cache first
            const cachedData = getCachedData();
            if (cachedData && !enableBackgroundRefresh) {
                setCategories(cachedData);
                setLoading(false);
                return;
            }
            // Fetch fresh data
            const freshData = await fetchCategories();
            // Update state and cache
            setCategories(freshData);
            setCachedData(freshData);
            setError(null);
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Failed to load categories';
            setError(errorMessage);
            // Use cached data as fallback if available
            const cachedData = getCachedData();
            if (cachedData) {
                setCategories(cachedData);
            } else {
                setCategories(fallbackCategories);
            }
            console.error('Category data error:', error);
        } finally{
            setLoading(false);
        }
    }, [
        getCachedData,
        enableBackgroundRefresh,
        fetchCategories,
        setCachedData,
        fallbackCategories
    ]);
    /**
   * Get category by ID
   */ const getCategoryById = (0, _react.useCallback)((id)=>{
        return categories.find((cat)=>cat.id === id);
    }, [
        categories
    ]);
    /**
   * Initial data load
   */ (0, _react.useEffect)(()=>{
        if (autoFetch) {
            refresh();
        }
    }, [
        autoFetch
    ]); // Removed refresh dependency to prevent infinite loop
    /**
   * Background refresh interval
   */ (0, _react.useEffect)(()=>{
        if (!enableBackgroundRefresh || refreshInterval <= 0) {
            return;
        }
        const interval = setInterval(()=>{
            refresh();
        }, refreshInterval);
        return ()=>clearInterval(interval);
    }, [
        enableBackgroundRefresh,
        refreshInterval
    ]); // Removed refresh dependency to prevent infinite loop
    /**
   * Memoized return object for performance
   */ const returnValue = (0, _react.useMemo)(()=>({
            categories,
            loading,
            error,
            refresh,
            getCategoryById
        }), [
        categories,
        loading,
        error,
        refresh,
        getCategoryById
    ]);
    return returnValue;
};
const preloadCategoryImages = (categories)=>{
    if (typeof window === 'undefined') {
        return;
    }
    categories.forEach((category)=>{
        if (category && category.icon) {
            const img = new Image();
            img.src = category.icon;
        }
    });
};
const clearCategoryCache = ()=>{
    categoryCache.clear();
};
const _default = useCategoryData;

//# sourceMappingURL=data:application/json;base64,