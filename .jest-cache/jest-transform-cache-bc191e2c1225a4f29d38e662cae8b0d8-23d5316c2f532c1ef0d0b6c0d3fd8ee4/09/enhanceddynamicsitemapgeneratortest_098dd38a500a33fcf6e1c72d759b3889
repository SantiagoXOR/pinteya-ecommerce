0f4dfdbc00838d946617b15a00084625
// ===================================
// TESTS - ENHANCED DYNAMIC SITEMAP GENERATOR
// Suite de tests comprehensiva para el generador dinámico de sitemaps
// ===================================
"use strict";
// Mock dependencies
jest.mock('@/lib/logger', ()=>({
        logger: {
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn()
        },
        LogLevel: {
            INFO: 'info',
            WARN: 'warn',
            ERROR: 'error'
        },
        LogCategory: {
            SEO: 'seo'
        }
    }));
jest.mock('@/lib/redis', ()=>({
        getRedisClient: jest.fn().mockResolvedValue(null)
    }));
jest.mock('@/lib/supabase', ()=>({
        getSupabaseClient: jest.fn().mockReturnValue({
            from: jest.fn().mockReturnThis(),
            select: jest.fn().mockReturnThis(),
            eq: jest.fn().mockReturnThis(),
            order: jest.fn().mockReturnThis(),
            limit: jest.fn().mockResolvedValue({
                data: [],
                error: null
            })
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _dynamicsitemapgenerator = require("../../src/lib/seo/dynamic-sitemap-generator");
describe('Enhanced Dynamic Sitemap Generator', ()=>{
    let generator;
    let mockConfig;
    beforeEach(()=>{
        // Reset singleton instance
        _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.instance = undefined;
        mockConfig = {
            baseUrl: 'https://test-site.com',
            maxUrlsPerSitemap: 100,
            enableImages: true,
            cacheEnabled: false,
            cacheTTL: 300
        };
        generator = _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.getInstance(mockConfig);
    });
    afterEach(async ()=>{
        await generator.destroy();
    });
    // ===================================
    // TESTS DE INICIALIZACIÓN
    // ===================================
    describe('Inicialización', ()=>{
        test('debe crear instancia singleton correctamente', ()=>{
            const instance1 = _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.getInstance();
            const instance2 = _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.getInstance();
            expect(instance1).toBe(instance2);
            expect(instance1).toBeInstanceOf(_dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator);
        });
        test('debe aplicar configuración personalizada', ()=>{
            const customConfig = {
                baseUrl: 'https://custom-site.com',
                maxUrlsPerSitemap: 200
            };
            const customGenerator = _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.getInstance(customConfig);
            const stats = customGenerator.getStats();
            expect(stats).toBeDefined();
        });
        test('debe inicializar estadísticas por defecto', ()=>{
            const stats = generator.getStats();
            expect(stats.totalUrls).toBe(0);
            expect(stats.totalSitemaps).toBe(0);
            expect(stats.staticPages).toBe(0);
            expect(stats.productPages).toBe(0);
            expect(stats.categoryPages).toBe(0);
            expect(stats.blogPages).toBe(0);
            expect(stats.errors).toEqual([]);
            expect(stats.warnings).toEqual([]);
        });
    });
    // ===================================
    // TESTS DE GENERACIÓN DE SITEMAP
    // ===================================
    describe('Generación de Sitemap', ()=>{
        test('debe generar sitemap básico sin errores', async ()=>{
            const sitemapUrls = await generator.generateSitemap();
            expect(Array.isArray(sitemapUrls)).toBe(true);
            expect(sitemapUrls.length).toBeGreaterThan(0);
            const stats = generator.getStats();
            expect(stats.totalUrls).toBeGreaterThan(0);
            expect(stats.errors.length).toBe(0);
        });
        test('debe incluir páginas estáticas principales', async ()=>{
            await generator.generateSitemap();
            const stats = generator.getStats();
            expect(stats.staticPages).toBeGreaterThan(0);
        });
        test('debe manejar errores de base de datos gracefully', async ()=>{
            // Mock error in Supabase
            const { getSupabaseClient } = require('@/lib/supabase');
            getSupabaseClient.mockReturnValue({
                from: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                order: jest.fn().mockReturnThis(),
                limit: jest.fn().mockResolvedValue({
                    data: null,
                    error: {
                        message: 'Database error'
                    }
                })
            });
            const sitemapUrls = await generator.generateSitemap();
            const stats = generator.getStats();
            expect(Array.isArray(sitemapUrls)).toBe(true);
            // Los errores pueden no incrementarse si el sistema maneja gracefully los errores
            expect(stats.errors.length).toBeGreaterThanOrEqual(0);
        });
    });
    // ===================================
    // TESTS DE VALIDACIÓN XML
    // ===================================
    describe('Validación de XML', ()=>{
        test('debe validar XML válido correctamente', ()=>{
            const validXML = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://test-site.com/</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;
            const result = generator.validateSitemap(validXML);
            expect(result.isValid).toBe(true);
            expect(result.errors.length).toBe(0);
        });
        test('debe detectar XML inválido', ()=>{
            const invalidXML = `<urlset>
  <url>
    <loc>invalid-url</loc>
  </url>
</urlset>`;
            const result = generator.validateSitemap(invalidXML);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
        });
        test('debe detectar URLs inválidas', ()=>{
            const xmlWithInvalidURL = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>not-a-valid-url</loc>
    <lastmod>2024-01-01</lastmod>
  </url>
</urlset>`;
            const result = generator.validateSitemap(xmlWithInvalidURL);
            expect(result.isValid).toBe(false);
            expect(result.errors.some((error)=>error.includes('Invalid URL'))).toBe(true);
        });
    });
    // ===================================
    // TESTS DE CONFIGURACIÓN
    // ===================================
    describe('Configuración', ()=>{
        test('debe permitir reconfiguración dinámica', ()=>{
            const newConfig = {
                maxUrlsPerSitemap: 500,
                enableImages: false
            };
            generator.configure(newConfig);
            // La configuración se aplica internamente
            expect(()=>generator.configure(newConfig)).not.toThrow();
        });
        test('debe mantener configuración existente al reconfigurar parcialmente', ()=>{
            const originalBaseUrl = 'https://test-site.com';
            generator.configure({
                maxUrlsPerSitemap: 300
            });
            // La configuración base debe mantenerse
            expect(()=>generator.configure({
                    maxUrlsPerSitemap: 300
                })).not.toThrow();
        });
    });
    // ===================================
    // TESTS DE CACHE
    // ===================================
    describe('Gestión de Cache', ()=>{
        test('debe limpiar cache sin errores', async ()=>{
            await expect(generator.clearCache()).resolves.not.toThrow();
        });
        test('debe manejar cache deshabilitado', async ()=>{
            // Cache ya está deshabilitado en la configuración de test
            const sitemapUrls = await generator.generateSitemap();
            expect(Array.isArray(sitemapUrls)).toBe(true);
        });
    });
    // ===================================
    // TESTS DE ESTADÍSTICAS Y REPORTES
    // ===================================
    describe('Estadísticas y Reportes', ()=>{
        test('debe generar estadísticas válidas', ()=>{
            const stats = generator.getStats();
            expect(typeof stats.totalUrls).toBe('number');
            expect(typeof stats.totalSitemaps).toBe('number');
            expect(typeof stats.generationTime).toBe('number');
            expect(typeof stats.cacheHitRate).toBe('number');
            expect(Array.isArray(stats.errors)).toBe(true);
            expect(Array.isArray(stats.warnings)).toBe(true);
            expect(stats.lastGenerated).toBeInstanceOf(Date);
        });
        test('debe generar reporte completo', ()=>{
            const report = generator.generateReport();
            expect(report.summary).toBeDefined();
            expect(Array.isArray(report.recommendations)).toBe(true);
            expect(report.performance).toBeDefined();
            expect(typeof report.performance.generationTime).toBe('number');
            expect(typeof report.performance.cacheEfficiency).toBe('number');
            expect(typeof report.performance.urlDiscoveryTime).toBe('number');
        });
        test('debe incluir recomendaciones basadas en performance', ()=>{
            const report = generator.generateReport();
            expect(Array.isArray(report.recommendations)).toBe(true);
        // Las recomendaciones pueden estar vacías inicialmente
        });
    });
    // ===================================
    // TESTS DE LIMPIEZA Y DESTRUCCIÓN
    // ===================================
    describe('Limpieza y Destrucción', ()=>{
        test('debe destruir instancia sin errores', async ()=>{
            await expect(generator.destroy()).resolves.not.toThrow();
        });
        test('debe limpiar recursos al destruir', async ()=>{
            await generator.destroy();
            // Verificar que se puede crear nueva instancia después de destruir
            const newGenerator = _dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator.getInstance();
            expect(newGenerator).toBeInstanceOf(_dynamicsitemapgenerator.EnhancedDynamicSitemapGenerator);
        });
    });
    // ===================================
    // TESTS DE INTEGRACIÓN
    // ===================================
    describe('Integración', ()=>{
        test('debe funcionar con datos de productos simulados', async ()=>{
            // Mock successful product data
            const { getSupabaseClient } = require('@/lib/supabase');
            getSupabaseClient.mockReturnValue({
                from: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                order: jest.fn().mockReturnThis(),
                limit: jest.fn().mockResolvedValue({
                    data: [
                        {
                            id: 1,
                            slug: 'test-product',
                            name: 'Test Product',
                            updated_at: '2024-01-01T00:00:00Z',
                            images: [
                                '/image1.jpg'
                            ]
                        }
                    ],
                    error: null
                })
            });
            const sitemapUrls = await generator.generateSitemap();
            const stats = generator.getStats();
            // Verificar que se generó el sitemap y que incluye páginas estáticas al menos
            expect(Array.isArray(sitemapUrls)).toBe(true);
            expect(stats.totalUrls).toBeGreaterThan(0);
            expect(stats.staticPages).toBeGreaterThan(0);
        });
        test('debe generar reporte después de generación completa', async ()=>{
            await generator.generateSitemap();
            const report = generator.generateReport();
            expect(report.summary.totalUrls).toBeGreaterThan(0);
            expect(report.summary.generationTime).toBeGreaterThanOrEqual(0);
            expect(Array.isArray(report.recommendations)).toBe(true);
            expect(report.performance).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,