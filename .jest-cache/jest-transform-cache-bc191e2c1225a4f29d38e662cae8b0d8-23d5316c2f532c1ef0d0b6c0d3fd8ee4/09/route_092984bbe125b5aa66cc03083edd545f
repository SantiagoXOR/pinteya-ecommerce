eb33b0b3bb44bba3ef4f40a3d3035365
/**
 * API para obtener detalles específicos de una ruta asignada al driver
 * GET /api/driver/routes/[id]
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get PUT () {
        return PUT;
    }
});
const _server = require("next/server");
const _auth = require("../../../../../auth");
const _server1 = require("../../../../../lib/integrations/supabase/server");
async function GET(request, { params }) {
    try {
        const routeId = params.id;
        // Para pruebas, devolver datos de ejemplo
        const routeData = {
            id: routeId,
            name: `Ruta de Entrega #${routeId}`,
            total_distance: 35.6,
            estimated_time: 2640,
            status: 'active',
            shipments: [
                {
                    id: routeId,
                    orderNumber: `#${routeId}`,
                    tracking_number: `TRK-${routeId}`,
                    customer_name: 'Cliente de Prueba',
                    customer_phone: '+54 351 123-4567',
                    destination: {
                        address: 'Av. Colón 1234, Piso 2, Depto A, Córdoba, Córdoba 5000',
                        city: 'Córdoba',
                        postal_code: '5000',
                        coordinates: {
                            lat: -31.4084841,
                            lng: -64.1917654
                        }
                    },
                    items: [
                        {
                            name: 'Producto de Prueba',
                            quantity: 1,
                            weight: 1
                        }
                    ],
                    status: 'confirmed',
                    estimated_delivery_time: '14:00 - 18:00',
                    requires_signature: false
                }
            ],
            waypoints: [
                {
                    lat: -31.4084841,
                    lng: -64.1917654
                }
            ],
            driver: {
                id: 'driver-1',
                name: 'Santiago Martinez'
            },
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
        return _server.NextResponse.json(routeData);
    } catch (error) {
        console.error('Error in driver route API:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}
async function PUT(request, { params }) {
    try {
        // Verificar autenticación
        const session = await (0, _auth.auth)();
        if (!session?.user?.email) {
            return _server.NextResponse.json({
                error: 'No autorizado'
            }, {
                status: 401
            });
        }
        const routeId = params.id;
        const body = await request.json();
        const { status, shipments, current_shipment_index } = body;
        const supabase = await (0, _server1.createClient)();
        // Obtener información del driver
        const { data: driver, error: driverError } = await supabase.from('drivers').select('id').eq('email', session.user.email).single();
        if (driverError || !driver) {
            return _server.NextResponse.json({
                error: 'Driver no encontrado'
            }, {
                status: 404
            });
        }
        // Actualizar la ruta
        const updateData = {
            updated_at: new Date().toISOString()
        };
        if (status) updateData.status = status;
        if (shipments) updateData.shipments = shipments;
        const { data: updatedRoute, error: updateError } = await supabase.from('optimized_routes').update(updateData).eq('id', routeId).eq('driver_id', driver.id).select().single();
        if (updateError) {
            console.error('Error updating route:', updateError);
            return _server.NextResponse.json({
                error: 'Error actualizando ruta'
            }, {
                status: 500
            });
        }
        return _server.NextResponse.json(updatedRoute);
    } catch (error) {
        console.error('Error in driver route update API:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,