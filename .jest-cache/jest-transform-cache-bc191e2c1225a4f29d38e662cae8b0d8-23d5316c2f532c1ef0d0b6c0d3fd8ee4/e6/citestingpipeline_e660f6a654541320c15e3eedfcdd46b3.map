{"version":3,"names":["cov_24c6n53n8j","actualCoverage","s","CI_CONFIGS","f","ciTestingPipeline","default","_default","CITestingPipeline","getInstance","instance","b","runPipeline","config","startTime","performance","now","suites","errors","recommendations","console","log","environment","runRegression","regressionSuite","runRegressionTests","push","failedTests","runPerformance","performanceSuite","runPerformanceTests","runAccessibility","accessibilitySuite","runAccessibilityTests","runSecurity","securitySuite","runSecurityTests","duration","summary","calculateSummary","success","length","failOnError","result","notifications","slack","email","sendNotifications","toFixed","passedTests","totalTests","error","errorMessage","Error","message","threshold","components","apis","_automatedtestingmanager","automatedTestingManager","pages","tests","dependencyTest","testDependencyVulnerabilities","configTest","testSecurityConfiguration","authTest","testAuthenticationSecurity","rateLimitTest","testRateLimitingSecurity","name","filter","t","status","skippedTests","vulnerabilities","Math","floor","random","undefined","details","issues","process","env","NEXTAUTH_SECRET","SUPABASE_SERVICE_ROLE_KEY","join","authStrength","rateLimitActive","reduce","sum","suite","successRate","formatNotificationMessage","map","e","r","trim","development","staging","SLACK_WEBHOOK_URL","production","NOTIFICATION_EMAILS","split"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\testing\\ci-testing-pipeline.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - CI TESTING PIPELINE\r\n// Pipeline de testing automatizado para integración continua\r\n// ===================================\r\n\r\nimport { automatedTestingManager } from './automated-testing-manager';\r\nimport type { TestSuite, RegressionTestConfig } from './automated-testing-manager';\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\ninterface PipelineConfig {\r\n  environment: 'development' | 'staging' | 'production';\r\n  runRegression: boolean;\r\n  runPerformance: boolean;\r\n  runAccessibility: boolean;\r\n  runSecurity: boolean;\r\n  failOnError: boolean;\r\n  notifications: {\r\n    slack?: string;\r\n    email?: string[];\r\n  };\r\n}\r\n\r\ninterface PipelineResult {\r\n  success: boolean;\r\n  duration: number;\r\n  suites: TestSuite[];\r\n  summary: {\r\n    totalTests: number;\r\n    passedTests: number;\r\n    failedTests: number;\r\n    successRate: number;\r\n  };\r\n  errors: string[];\r\n  recommendations: string[];\r\n}\r\n\r\ninterface SecurityTestResult {\r\n  vulnerabilities: Array<{\r\n    severity: 'low' | 'medium' | 'high' | 'critical';\r\n    type: string;\r\n    description: string;\r\n    file?: string;\r\n  }>;\r\n  score: number;\r\n}\r\n\r\n// ===================================\r\n// CI TESTING PIPELINE\r\n// ===================================\r\n\r\nclass CITestingPipeline {\r\n  private static instance: CITestingPipeline;\r\n\r\n  static getInstance(): CITestingPipeline {\r\n    if (!CITestingPipeline.instance) {\r\n      CITestingPipeline.instance = new CITestingPipeline();\r\n    }\r\n    return CITestingPipeline.instance;\r\n  }\r\n\r\n  /**\r\n   * Ejecutar pipeline completo de testing\r\n   */\r\n  async runPipeline(config: PipelineConfig): Promise<PipelineResult> {\r\n    const startTime = performance.now();\r\n    const suites: TestSuite[] = [];\r\n    const errors: string[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    console.log(`[CI Pipeline] Iniciando pipeline en ambiente ${config.environment}...`);\r\n\r\n    try {\r\n      // 1. Tests de Regresión\r\n      if (config.runRegression) {\r\n        console.log('[CI Pipeline] Ejecutando tests de regresión...');\r\n        const regressionSuite = await this.runRegressionTests(config.environment);\r\n        suites.push(regressionSuite);\r\n        \r\n        if (regressionSuite.failedTests > 0) {\r\n          errors.push(`${regressionSuite.failedTests} tests de regresión fallaron`);\r\n          recommendations.push('Revisar cambios recientes que puedan haber causado regresiones');\r\n        }\r\n      }\r\n\r\n      // 2. Tests de Performance\r\n      if (config.runPerformance) {\r\n        console.log('[CI Pipeline] Ejecutando tests de performance...');\r\n        const performanceSuite = await this.runPerformanceTests();\r\n        suites.push(performanceSuite);\r\n        \r\n        if (performanceSuite.failedTests > 0) {\r\n          errors.push(`${performanceSuite.failedTests} tests de performance fallaron`);\r\n          recommendations.push('Optimizar componentes que exceden los thresholds de performance');\r\n        }\r\n      }\r\n\r\n      // 3. Tests de Accesibilidad\r\n      if (config.runAccessibility) {\r\n        console.log('[CI Pipeline] Ejecutando tests de accesibilidad...');\r\n        const accessibilitySuite = await this.runAccessibilityTests();\r\n        suites.push(accessibilitySuite);\r\n        \r\n        if (accessibilitySuite.failedTests > 0) {\r\n          errors.push(`${accessibilitySuite.failedTests} tests de accesibilidad fallaron`);\r\n          recommendations.push('Corregir violaciones de accesibilidad para mejorar la experiencia del usuario');\r\n        }\r\n      }\r\n\r\n      // 4. Tests de Seguridad\r\n      if (config.runSecurity) {\r\n        console.log('[CI Pipeline] Ejecutando tests de seguridad...');\r\n        const securitySuite = await this.runSecurityTests();\r\n        suites.push(securitySuite);\r\n        \r\n        if (securitySuite.failedTests > 0) {\r\n          errors.push(`${securitySuite.failedTests} tests de seguridad fallaron`);\r\n          recommendations.push('Corregir vulnerabilidades de seguridad inmediatamente');\r\n        }\r\n      }\r\n\r\n      const duration = performance.now() - startTime;\r\n      const summary = this.calculateSummary(suites);\r\n      const success = errors.length === 0 || !config.failOnError;\r\n\r\n      const result: PipelineResult = {\r\n        success,\r\n        duration,\r\n        suites,\r\n        summary,\r\n        errors,\r\n        recommendations\r\n      };\r\n\r\n      // Enviar notificaciones si están configuradas\r\n      if (config.notifications.slack || config.notifications.email) {\r\n        await this.sendNotifications(result, config.notifications);\r\n      }\r\n\r\n      console.log(`[CI Pipeline] Pipeline completado en ${duration.toFixed(2)}ms`);\r\n      console.log(`[CI Pipeline] Resultado: ${success ? 'ÉXITO' : 'FALLO'}`);\r\n      console.log(`[CI Pipeline] Tests: ${summary.passedTests}/${summary.totalTests} pasaron`);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime;\r\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\r\n      \r\n      console.error(`[CI Pipeline] Error en pipeline: ${errorMessage}`);\r\n      \r\n      return {\r\n        success: false,\r\n        duration,\r\n        suites,\r\n        summary: this.calculateSummary(suites),\r\n        errors: [errorMessage, ...errors],\r\n        recommendations: ['Revisar logs del pipeline para identificar la causa del error', ...recommendations]\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de regresión\r\n   */\r\n  private async runRegressionTests(environment: string): Promise<TestSuite> {\r\n    const config: RegressionTestConfig = {\r\n      threshold: environment === 'production' ? 0.05 : 0.1, // 5% en prod, 10% en dev\r\n      components: [\r\n        'ShopDetails',\r\n        'ProductGallery',\r\n        'CheckoutForm',\r\n        'UserDashboard',\r\n        'AdminDashboard'\r\n      ],\r\n      apis: [\r\n        '/api/products',\r\n        '/api/cart',\r\n        '/api/orders',\r\n        '/api/auth',\r\n        '/api/admin/dashboard'\r\n      ]\r\n    };\r\n\r\n    return await automatedTestingManager.runRegressionTests(config);\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de performance\r\n   */\r\n  private async runPerformanceTests(): Promise<TestSuite> {\r\n    const components = [\r\n      'HomePage',\r\n      'ProductPage',\r\n      'CartPage',\r\n      'CheckoutPage',\r\n      'AdminPage'\r\n    ];\r\n\r\n    return await automatedTestingManager.runPerformanceTests(components);\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de accesibilidad\r\n   */\r\n  private async runAccessibilityTests(): Promise<TestSuite> {\r\n    const pages = [\r\n      '/',\r\n      '/products',\r\n      '/cart',\r\n      '/checkout',\r\n      '/admin'\r\n    ];\r\n\r\n    return await automatedTestingManager.runAccessibilityTests(pages);\r\n  }\r\n\r\n  /**\r\n   * Ejecutar tests de seguridad\r\n   */\r\n  private async runSecurityTests(): Promise<TestSuite> {\r\n    const startTime = performance.now();\r\n    const tests = [];\r\n\r\n    // Test de vulnerabilidades de dependencias\r\n    const dependencyTest = await this.testDependencyVulnerabilities();\r\n    tests.push(dependencyTest);\r\n\r\n    // Test de configuración de seguridad\r\n    const configTest = await this.testSecurityConfiguration();\r\n    tests.push(configTest);\r\n\r\n    // Test de autenticación\r\n    const authTest = await this.testAuthenticationSecurity();\r\n    tests.push(authTest);\r\n\r\n    // Test de rate limiting\r\n    const rateLimitTest = await this.testRateLimitingSecurity();\r\n    tests.push(rateLimitTest);\r\n\r\n    const duration = performance.now() - startTime;\r\n    \r\n    return {\r\n      name: 'Security Tests',\r\n      tests,\r\n      totalTests: tests.length,\r\n      passedTests: tests.filter(t => t.status === 'passed').length,\r\n      failedTests: tests.filter(t => t.status === 'failed').length,\r\n      skippedTests: tests.filter(t => t.status === 'skipped').length,\r\n      duration\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test de vulnerabilidades de dependencias\r\n   */\r\n  private async testDependencyVulnerabilities() {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Simular audit de dependencias\r\n      const vulnerabilities = Math.floor(Math.random() * 3); // 0-2 vulnerabilities\r\n      \r\n      return {\r\n        name: 'Dependency Vulnerabilities',\r\n        status: vulnerabilities === 0 ? 'passed' : 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: vulnerabilities > 0 ? `${vulnerabilities} vulnerabilidades encontradas` : undefined,\r\n        details: { vulnerabilities }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        name: 'Dependency Vulnerabilities Error',\r\n        status: 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de configuración de seguridad\r\n   */\r\n  private async testSecurityConfiguration() {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Verificar configuraciones de seguridad\r\n      const issues = [];\r\n      \r\n      // Verificar variables de entorno\r\n      if (!process.env.NEXTAUTH_SECRET) {\r\n        issues.push('NEXTAUTH_SECRET no configurado');\r\n      }\r\n      \r\n      if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n        issues.push('SUPABASE_SERVICE_ROLE_KEY no configurado');\r\n      }\r\n\r\n      return {\r\n        name: 'Security Configuration',\r\n        status: issues.length === 0 ? 'passed' : 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: issues.length > 0 ? issues.join(', ') : undefined,\r\n        details: { issues }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        name: 'Security Configuration Error',\r\n        status: 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de seguridad de autenticación\r\n   */\r\n  private async testAuthenticationSecurity() {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Simular test de autenticación\r\n      const authStrength = Math.random() * 100; // 0-100% strength\r\n      \r\n      return {\r\n        name: 'Authentication Security',\r\n        status: authStrength >= 80 ? 'passed' : 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: authStrength < 80 ? `Fortaleza de autenticación ${authStrength.toFixed(1)}% < 80%` : undefined,\r\n        details: { authStrength }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        name: 'Authentication Security Error',\r\n        status: 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test de rate limiting\r\n   */\r\n  private async testRateLimitingSecurity() {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Simular test de rate limiting\r\n      const rateLimitActive = Math.random() > 0.2; // 80% chance active\r\n      \r\n      return {\r\n        name: 'Rate Limiting Security',\r\n        status: rateLimitActive ? 'passed' : 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: !rateLimitActive ? 'Rate limiting no está activo en todos los endpoints' : undefined,\r\n        details: { rateLimitActive }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        name: 'Rate Limiting Security Error',\r\n        status: 'failed' as const,\r\n        duration: performance.now() - startTime,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calcular resumen de tests\r\n   */\r\n  private calculateSummary(suites: TestSuite[]) {\r\n    const totalTests = suites.reduce((sum, suite) => sum + suite.totalTests, 0);\r\n    const passedTests = suites.reduce((sum, suite) => sum + suite.passedTests, 0);\r\n    const failedTests = suites.reduce((sum, suite) => sum + suite.failedTests, 0);\r\n\r\n    return {\r\n      totalTests,\r\n      passedTests,\r\n      failedTests,\r\n      successRate: totalTests > 0 ? (passedTests / totalTests) * 100 : 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enviar notificaciones\r\n   */\r\n  private async sendNotifications(result: PipelineResult, notifications: PipelineConfig['notifications']) {\r\n    const message = this.formatNotificationMessage(result);\r\n    \r\n    if (notifications.slack) {\r\n      console.log(`[CI Pipeline] Enviando notificación a Slack: ${notifications.slack}`);\r\n      // Aquí se implementaría la integración con Slack\r\n    }\r\n    \r\n    if (notifications.email && notifications.email.length > 0) {\r\n      console.log(`[CI Pipeline] Enviando notificación por email a: ${notifications.email.join(', ')}`);\r\n      // Aquí se implementaría la integración con email\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formatear mensaje de notificación\r\n   */\r\n  private formatNotificationMessage(result: PipelineResult): string {\r\n    const status = result.success ? '✅ ÉXITO' : '❌ FALLO';\r\n    const duration = (result.duration / 1000).toFixed(2);\r\n    \r\n    return `\r\n🧪 **Pipeline de Testing Completado**\r\n\r\n**Estado**: ${status}\r\n**Duración**: ${duration}s\r\n**Tests**: ${result.summary.passedTests}/${result.summary.totalTests} pasaron (${result.summary.successRate.toFixed(1)}%)\r\n\r\n${result.errors.length > 0 ? `**Errores**:\\n${result.errors.map(e => `• ${e}`).join('\\n')}` : ''}\r\n\r\n${result.recommendations.length > 0 ? `**Recomendaciones**:\\n${result.recommendations.map(r => `• ${r}`).join('\\n')}` : ''}\r\n    `.trim();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACIONES PREDEFINIDAS\r\n// ===================================\r\n\r\nexport const CI_CONFIGS = {\r\n  development: {\r\n    environment: 'development' as const,\r\n    runRegression: true,\r\n    runPerformance: true,\r\n    runAccessibility: false,\r\n    runSecurity: false,\r\n    failOnError: false,\r\n    notifications: {}\r\n  },\r\n  \r\n  staging: {\r\n    environment: 'staging' as const,\r\n    runRegression: true,\r\n    runPerformance: true,\r\n    runAccessibility: true,\r\n    runSecurity: true,\r\n    failOnError: true,\r\n    notifications: {\r\n      slack: process.env.SLACK_WEBHOOK_URL\r\n    }\r\n  },\r\n  \r\n  production: {\r\n    environment: 'production' as const,\r\n    runRegression: true,\r\n    runPerformance: true,\r\n    runAccessibility: true,\r\n    runSecurity: true,\r\n    failOnError: true,\r\n    notifications: {\r\n      slack: process.env.SLACK_WEBHOOK_URL,\r\n      email: process.env.NOTIFICATION_EMAILS?.split(',') || []\r\n    }\r\n  }\r\n};\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport const ciTestingPipeline = CITestingPipeline.getInstance();\r\n\r\nexport default {\r\n  ciTestingPipeline,\r\n  CITestingPipeline,\r\n  CI_CONFIGS\r\n};\r\n\r\nexport type {\r\n  PipelineConfig,\r\n  PipelineResult,\r\n  SecurityTestResult\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}