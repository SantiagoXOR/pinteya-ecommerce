{"version":3,"names":["cov_1lo60sfsov","actualCoverage","s","GET","f","POST","runtime","request","startTime","Date","now","clientIP","b","headers","get","user","session","_server","NextResponse","json","success","error","status","rateLimitResult","_ratelimiter","checkRateLimit","RATE_LIMIT_CONFIGS","QUERY_API","retryAfter","searchParams","URL","url","hoursBack","parseInt","endpoint","_logger","logger","info","LogCategory","API","userId","id","metrics","_metrics","metricsCollector","getApiMetrics","data","timeRange","timestamp","paymentCreation","paymentQueries","webhookProcessing","Promise","all","totalRequests","requests","total","totalErrors","errorRate","avgResponseTime","response_times","avg","uptimePercentage","Math","max","mercadoPagoMetrics","payment_creation","payment_queries","webhook_processing","overall_health","uptime_percentage","avg_response_time","error_rate","last_incident","processingTime","performance","LogLevel","INFO","operation","duration","statusCode","ERROR","body","action","alertType","threshold","recentMetrics","alerts","index","entries","endpoints","push","type","severity","value","message","toFixed","p95","rateLimitRate","rate_limited","alertsFound","length","checkDuration"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\metrics\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - METRICS API\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { metricsCollector, MercadoPagoMetrics } from '@/lib/enterprise/metrics';\r\nimport { checkRateLimit, RATE_LIMIT_CONFIGS } from '@/lib/enterprise/rate-limiter';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { auth } from '@/lib/auth/config';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación (solo usuarios autenticados pueden ver métricas)\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Authentication required',\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Rate limiting para API de métricas\r\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    if (!rateLimitResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      }, { status: 429 });\r\n    }\r\n\r\n    // Obtener parámetros de consulta\r\n    const { searchParams } = new URL(request.url);\r\n    const hoursBack = parseInt(searchParams.get('hours') || '1');\r\n    const endpoint = searchParams.get('endpoint');\r\n\r\n    logger.info(LogCategory.API, 'Metrics API request', {\r\n      userId: user.id,\r\n      hoursBack,\r\n      endpoint,\r\n      clientIP,\r\n    });\r\n\r\n    // Si se especifica un endpoint, retornar métricas específicas\r\n    if (endpoint) {\r\n      const metrics = await metricsCollector.getApiMetrics(endpoint, 'POST', hoursBack);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          endpoint,\r\n          timeRange: `${hoursBack}h`,\r\n          metrics,\r\n          timestamp: Date.now(),\r\n        },\r\n      });\r\n    }\r\n\r\n    // Obtener métricas completas de MercadoPago\r\n    const [paymentCreation, paymentQueries, webhookProcessing] = await Promise.all([\r\n      metricsCollector.getApiMetrics('create-preference', 'POST', hoursBack),\r\n      metricsCollector.getApiMetrics('payment-info', 'GET', hoursBack),\r\n      metricsCollector.getApiMetrics('webhook', 'POST', hoursBack),\r\n    ]);\r\n\r\n    // Calcular métricas generales de salud\r\n    const totalRequests = paymentCreation.requests.total + paymentQueries.requests.total + webhookProcessing.requests.total;\r\n    const totalErrors = paymentCreation.requests.error + paymentQueries.requests.error + webhookProcessing.requests.error;\r\n    const errorRate = totalRequests > 0 ? totalErrors / totalRequests : 0;\r\n\r\n    const avgResponseTime = totalRequests > 0 ? \r\n      (paymentCreation.response_times.avg * paymentCreation.requests.total +\r\n       paymentQueries.response_times.avg * paymentQueries.requests.total +\r\n       webhookProcessing.response_times.avg * webhookProcessing.requests.total) / totalRequests : 0;\r\n\r\n    const uptimePercentage = Math.max(0, 100 - (errorRate * 100));\r\n\r\n    const mercadoPagoMetrics: MercadoPagoMetrics = {\r\n      payment_creation: paymentCreation,\r\n      payment_queries: paymentQueries,\r\n      webhook_processing: webhookProcessing,\r\n      overall_health: {\r\n        uptime_percentage: uptimePercentage,\r\n        avg_response_time: avgResponseTime,\r\n        error_rate: errorRate,\r\n        last_incident: null, // TODO: Implementar detección de incidentes\r\n      },\r\n    };\r\n\r\n    const processingTime = Date.now() - startTime;\r\n\r\n    logger.performance(LogLevel.INFO, 'Metrics API response generated', {\r\n      operation: 'metrics-api',\r\n      duration: processingTime,\r\n      statusCode: 200,\r\n    }, {\r\n      userId: user.id,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        timeRange: `${hoursBack}h`,\r\n        metrics: mercadoPagoMetrics,\r\n        timestamp: Date.now(),\r\n        processingTime,\r\n      },\r\n    });\r\n\r\n  } catch (error: any) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Metrics API error', {\r\n      operation: 'metrics-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      timestamp: Date.now(),\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Endpoint para obtener alertas activas\r\nexport async function POST(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\r\n\r\n  try {\r\n    // Verificar autenticación\r\n    const user = session?.user;\r\n    if (!session?.user) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Authentication required',\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Rate limiting\r\n    const rateLimitResult = await checkRateLimit(request, RATE_LIMIT_CONFIGS.QUERY_API);\r\n    if (!rateLimitResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Rate limit exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      }, { status: 429 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, alertType, threshold } = body;\r\n\r\n    if (action === 'check_alerts') {\r\n      // Obtener métricas recientes para verificar alertas\r\n      const recentMetrics = await Promise.all([\r\n        metricsCollector.getApiMetrics('create-preference', 'POST', 0.25), // Últimos 15 minutos\r\n        metricsCollector.getApiMetrics('payment-info', 'GET', 0.25),\r\n        metricsCollector.getApiMetrics('webhook', 'POST', 0.25),\r\n      ]);\r\n\r\n      const alerts = [];\r\n\r\n      // Verificar alertas de tasa de error\r\n      for (const [index, metrics] of recentMetrics.entries()) {\r\n        const endpoints = ['create-preference', 'payment-info', 'webhook'];\r\n        const endpoint = endpoints[index];\r\n        \r\n        if (metrics.requests.total > 0) {\r\n          const errorRate = metrics.requests.error / metrics.requests.total;\r\n          \r\n          if (errorRate > 0.05) { // 5% de tasa de error\r\n            alerts.push({\r\n              type: 'error_rate',\r\n              severity: errorRate > 0.1 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: errorRate,\r\n              threshold: 0.05,\r\n              message: `High error rate detected on ${endpoint}: ${(errorRate * 100).toFixed(2)}%`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n\r\n          // Verificar tiempo de respuesta P95\r\n          if (metrics.response_times.p95 > 5000) { // 5 segundos\r\n            alerts.push({\r\n              type: 'response_time',\r\n              severity: metrics.response_times.p95 > 10000 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: metrics.response_times.p95,\r\n              threshold: 5000,\r\n              message: `High response time detected on ${endpoint}: ${metrics.response_times.p95}ms (P95)`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n\r\n          // Verificar rate limiting\r\n          const rateLimitRate = metrics.requests.rate_limited / metrics.requests.total;\r\n          if (rateLimitRate > 0.1) { // 10% de requests limitados\r\n            alerts.push({\r\n              type: 'rate_limit',\r\n              severity: rateLimitRate > 0.2 ? 'critical' : 'warning',\r\n              endpoint,\r\n              value: rateLimitRate,\r\n              threshold: 0.1,\r\n              message: `High rate limiting detected on ${endpoint}: ${(rateLimitRate * 100).toFixed(2)}%`,\r\n              timestamp: Date.now(),\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      logger.info(LogCategory.API, 'Alerts checked', {\r\n        userId: user.id,\r\n        alertsFound: alerts.length,\r\n        clientIP,\r\n      });\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          alerts,\r\n          timestamp: Date.now(),\r\n          checkDuration: Date.now() - startTime,\r\n        },\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Invalid action',\r\n    }, { status: 400 });\r\n\r\n  } catch (error: any) {\r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    logger.performance(LogLevel.ERROR, 'Metrics alerts API error', {\r\n      operation: 'metrics-alerts-api',\r\n      duration: processingTime,\r\n      statusCode: 500,\r\n    }, {\r\n      clientIP,\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      timestamp: Date.now(),\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}