{"version":3,"names":["cov_19y2coeblh","actualCoverage","s","GET","f","runtime","request","authResult","_adminauth","requireAdminAuth","success","b","_server","NextResponse","json","error","status","data","stats","_supabase","supabaseAdmin","rpc","console","totalResult","activeResult","lowStockResult","noStockResult","Promise","all","from","select","count","head","gt","lte","or","fallbackStats","total_products","active_products","low_stock_products","no_stock_products","source","timestamp","Date","toISOString","productStats"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\stats\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAdminAuth } from '@/lib/auth/admin-auth';\r\nimport { supabaseAdmin } from '@/lib/integrations/supabase';\r\n\r\n/**\r\n * GET /api/admin/products/stats\r\n * Obtener estadísticas reales de productos desde Supabase\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticación y permisos de admin\r\n    const authResult = await requireAdminAuth();\r\n\r\n    if (!authResult.success) {\r\n      return NextResponse.json(\r\n        { error: authResult.error },\r\n        { status: authResult.status || 401 }\r\n      );\r\n    }\r\n\r\n    // Obtener estadísticas usando una sola query optimizada\r\n    const { data: stats, error } = await supabaseAdmin.rpc('get_product_stats');\r\n\r\n    if (error) {\r\n      console.error('Error obteniendo estadísticas de productos:', error);\r\n\r\n      // Fallback: calcular estadísticas manualmente\r\n      const [totalResult, activeResult, lowStockResult, noStockResult] = await Promise.all([\r\n        supabaseAdmin.from('products').select('id', { count: 'exact', head: true }),\r\n        supabaseAdmin.from('products').select('id', { count: 'exact', head: true }).gt('stock', 0),\r\n        supabaseAdmin.from('products').select('id', { count: 'exact', head: true }).gt('stock', 0).lte('stock', 10),\r\n        supabaseAdmin.from('products').select('id', { count: 'exact', head: true }).or('stock.eq.0,stock.is.null')\r\n      ]);\r\n\r\n      const fallbackStats = {\r\n        total_products: totalResult.count || 0,\r\n        active_products: activeResult.count || 0,\r\n        low_stock_products: lowStockResult.count || 0,\r\n        no_stock_products: noStockResult.count || 0\r\n      };\r\n\r\n      return NextResponse.json({\r\n        success: true,\r\n        stats: fallbackStats,\r\n        source: 'fallback',\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    const productStats = stats?.[0] || {\r\n      total_products: 0,\r\n      active_products: 0,\r\n      low_stock_products: 0,\r\n      no_stock_products: 0\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      stats: productStats,\r\n      source: 'database_function',\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/products/stats:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}