789026a9dbfadf55ceda496c277bdc81
// =====================================================
// API: ASIGNAR DRIVER A RUTA
// Ruta: /api/admin/logistics/routes/[id]/assign-driver
// DescripciÃ³n: Asignar conductor a una ruta especÃ­fica
// =====================================================
"use strict";

/* istanbul ignore next */
function cov_1m69zw6ysz() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\[id]\\assign-driver\\route.ts";
  var hash = "7a055a693cd63e6bffbb0673085ab645ae042612";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\[id]\\assign-driver\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 19
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 21
        }
      },
      "6": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 38
        }
      },
      "7": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 81
        }
      },
      "8": {
        start: {
          line: 26,
          column: 14
        },
        end: {
          line: 26,
          column: 50
        }
      },
      "9": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "10": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 47
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 14
        }
      },
      "13": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 58
        }
      },
      "14": {
        start: {
          line: 41,
          column: 56
        },
        end: {
          line: 41,
          column: 158
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "17": {
        start: {
          line: 49,
          column: 53
        },
        end: {
          line: 49,
          column: 145
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "19": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "21": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "22": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "23": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "24": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "25": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "26": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "27": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 33
        }
      },
      "28": {
        start: {
          line: 81,
          column: 21
        },
        end: {
          line: 81,
          column: 41
        }
      },
      "29": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 82,
          column: 34
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "31": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "32": {
        start: {
          line: 90,
          column: 25
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "33": {
        start: {
          line: 92,
          column: 51
        },
        end: {
          line: 92,
          column: 181
        }
      },
      "34": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "35": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "37": {
        start: {
          line: 103,
          column: 57
        },
        end: {
          line: 103,
          column: 181
        }
      },
      "38": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "39": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "40": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "41": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "42": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 119,
          column: 94
        }
      },
      "43": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "44": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 125,
          column: 19
        }
      },
      "45": {
        start: {
          line: 128,
          column: 69
        },
        end: {
          line: 128,
          column: 171
        }
      },
      "46": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "47": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 86
        }
      },
      "48": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 135,
          column: 19
        }
      },
      "49": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "50": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 142,
          column: 19
        }
      },
      "51": {
        start: {
          line: 145,
          column: 63
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "52": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "53": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 71
        }
      },
      "54": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "55": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "56": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 171,
          column: 39
        }
      },
      "57": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "58": {
        start: {
          line: 180,
          column: 36
        },
        end: {
          line: 180,
          column: 51
        }
      },
      "59": {
        start: {
          line: 182,
          column: 63
        },
        end: {
          line: 185,
          column: 50
        }
      },
      "60": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "61": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 74
        }
      },
      "62": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "63": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "64": {
        start: {
          line: 197,
          column: 52
        },
        end: {
          line: 197,
          column: 160
        }
      },
      "65": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 203,
          column: 17
        }
      },
      "66": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 202,
          column: 49
        }
      },
      "67": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "68": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 95
        }
      },
      "69": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "70": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 295,
          column: 5
        }
      },
      "71": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 48
        }
      },
      "72": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "73": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "74": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 33
        }
      },
      "75": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "76": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "77": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 237,
          column: 59
        }
      },
      "78": {
        start: {
          line: 239,
          column: 51
        },
        end: {
          line: 239,
          column: 173
        }
      },
      "79": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "80": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 245,
          column: 15
        }
      },
      "81": {
        start: {
          line: 247,
          column: 31
        },
        end: {
          line: 247,
          column: 90
        }
      },
      "82": {
        start: {
          line: 249,
          column: 64
        },
        end: {
          line: 260,
          column: 10
        }
      },
      "83": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "84": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 81
        }
      },
      "85": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "86": {
        start: {
          line: 270,
          column: 32
        },
        end: {
          line: 276,
          column: 21
        }
      },
      "87": {
        start: {
          line: 270,
          column: 65
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "88": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 84
        }
      },
      "89": {
        start: {
          line: 278,
          column: 37
        },
        end: {
          line: 278,
          column: 82
        }
      },
      "90": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "91": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 93
        }
      },
      "92": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "validateAdmin",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 28
          }
        },
        loc: {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 30
      },
      "4": {
        name: "PATCH",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 20
          }
        },
        loc: {
          start: {
            line: 70,
            column: 42
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 70
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 219,
            column: 15
          },
          end: {
            line: 219,
            column: 18
          }
        },
        loc: {
          start: {
            line: 219,
            column: 40
          },
          end: {
            line: 296,
            column: 1
          }
        },
        line: 219
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 270,
            column: 54
          },
          end: {
            line: 270,
            column: 55
          }
        },
        loc: {
          start: {
            line: 270,
            column: 65
          },
          end: {
            line: 276,
            column: 13
          }
        },
        line: 270
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 278,
            column: 29
          },
          end: {
            line: 278,
            column: 30
          }
        },
        loc: {
          start: {
            line: 278,
            column: 37
          },
          end: {
            line: 278,
            column: 82
          }
        },
        line: 278
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 20
          }
        }, {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 37
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 21
          }
        }, {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 42,
            column: 37
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 21
          }
        }, {
          start: {
            line: 50,
            column: 25
          },
          end: {
            line: 50,
            column: 34
          }
        }, {
          start: {
            line: 50,
            column: 38
          },
          end: {
            line: 50,
            column: 68
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 22
          }
        }, {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 93,
            column: 32
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: 177,
            column: 15
          },
          end: {
            line: 209,
            column: 9
          }
        }],
        line: 101
      },
      "11": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "12": {
        loc: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 104,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 104,
            column: 27
          }
        }, {
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 38
          }
        }],
        line: 104
      },
      "13": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 68
          },
          end: {
            line: 119,
            column: 90
          }
        }, {
          start: {
            line: 119,
            column: 93
          },
          end: {
            line: 119,
            column: 94
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "18": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 28
          }
        }, {
          start: {
            line: 137,
            column: 32
          },
          end: {
            line: 137,
            column: 55
          }
        }],
        line: 137
      },
      "19": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "20": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "21": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "22": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "23": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 203,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 203,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "24": {
        loc: {
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 199,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 199,
            column: 38
          }
        }, {
          start: {
            line: 199,
            column: 42
          },
          end: {
            line: 199,
            column: 72
          }
        }],
        line: 199
      },
      "25": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "26": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "27": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "28": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 22
          }
        }, {
          start: {
            line: 240,
            column: 26
          },
          end: {
            line: 240,
            column: 32
          }
        }],
        line: 240
      },
      "29": {
        loc: {
          start: {
            line: 247,
            column: 31
          },
          end: {
            line: 247,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 64
          },
          end: {
            line: 247,
            column: 86
          }
        }, {
          start: {
            line: 247,
            column: 89
          },
          end: {
            line: 247,
            column: 90
          }
        }],
        line: 247
      },
      "30": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "31": {
        loc: {
          start: {
            line: 270,
            column: 32
          },
          end: {
            line: 276,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 32
          },
          end: {
            line: 276,
            column: 15
          }
        }, {
          start: {
            line: 276,
            column: 19
          },
          end: {
            line: 276,
            column: 21
          }
        }],
        line: 270
      },
      "32": {
        loc: {
          start: {
            line: 272,
            column: 49
          },
          end: {
            line: 272,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 89
          },
          end: {
            line: 272,
            column: 91
          }
        }, {
          start: {
            line: 272,
            column: 94
          },
          end: {
            line: 272,
            column: 95
          }
        }],
        line: 272
      },
      "33": {
        loc: {
          start: {
            line: 272,
            column: 100
          },
          end: {
            line: 272,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 132
          },
          end: {
            line: 272,
            column: 134
          }
        }, {
          start: {
            line: 272,
            column: 137
          },
          end: {
            line: 272,
            column: 138
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\logistics\\routes\\[id]\\assign-driver\\route.ts"],
      sourcesContent: ["// =====================================================\r\n// API: ASIGNAR DRIVER A RUTA\r\n// Ruta: /api/admin/logistics/routes/[id]/assign-driver\r\n// Descripci\xF3n: Asignar conductor a una ruta espec\xEDfica\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient, createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { auth } from '@/auth';\r\n\r\n// =====================================================\r\n// VALIDACI\xD3N DE ADMIN\r\n// =====================================================\r\n\r\nasync function validateAdmin() {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user) {\r\n      return { error: 'No autenticado', status: 401 };\r\n    }\r\n\r\n    const supabase = createAdminClient();\r\n\r\n    // Verificar si el usuario es admin\r\n    const { data: userProfile, error: userError } = await supabase\r\n      .from('user_profiles')\r\n      .select('email, role_id')\r\n      .eq('email', session.user.email)\r\n      .single();\r\n\r\n    if (userError || !userProfile) {\r\n      return { error: 'Usuario no encontrado', status: 404 };\r\n    }\r\n\r\n    // Obtener el rol del usuario\r\n    const { data: roleData, error: roleError } = await supabase\r\n      .from('user_roles')\r\n      .select('role_name')\r\n      .eq('id', userProfile.role_id)\r\n      .single();\r\n\r\n    if (roleError || !roleData || roleData.role_name !== 'admin') {\r\n      return { error: 'Acceso denegado - Se requieren permisos de administrador', status: 403 };\r\n    }\r\n\r\n    return { success: true, userId: session.user.id, email: userProfile.email, supabase };\r\n  } catch (error) {\r\n    console.error('Error en validaci\xF3n de admin:', error);\r\n    return { error: 'Error interno del servidor', status: 500 };\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// PATCH: ASIGNAR DRIVER A RUTA\r\n// =====================================================\r\n\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const routeId = params.id;\r\n    const body = await request.json();\r\n    const { driver_id } = body;\r\n\r\n    if (!routeId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Verificar que la ruta existe\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, status, shipments, total_distance, estimated_time')\r\n      .eq('id', routeId)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Si se est\xE1 asignando un driver\r\n    if (driver_id) {\r\n      // Verificar que el driver existe y est\xE1 disponible\r\n      const { data: driver, error: driverError } = await supabase\r\n        .from('logistics_drivers')\r\n        .select('id, name, status, max_capacity, vehicle_type')\r\n        .eq('id', driver_id)\r\n        .single();\r\n\r\n      if (driverError || !driver) {\r\n        return NextResponse.json(\r\n          { error: 'Driver no encontrado' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      if (driver.status !== 'available') {\r\n        return NextResponse.json(\r\n          { error: 'El driver no est\xE1 disponible' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Verificar capacidad del veh\xEDculo\r\n      const shipmentsCount = Array.isArray(route.shipments) ? route.shipments.length : 0;\r\n      if (shipmentsCount > driver.max_capacity) {\r\n        return NextResponse.json(\r\n          { \r\n            error: `El veh\xEDculo del driver tiene capacidad para ${driver.max_capacity} env\xEDos, pero la ruta tiene ${shipmentsCount}` \r\n          },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Verificar que el driver no tenga otras rutas activas\r\n      const { data: activeRoutes, error: activeRoutesError } = await supabase\r\n        .from('optimized_routes')\r\n        .select('id')\r\n        .eq('driver_id', driver_id)\r\n        .eq('status', 'active');\r\n\r\n      if (activeRoutesError) {\r\n        console.error('Error al verificar rutas activas:', activeRoutesError);\r\n        return NextResponse.json(\r\n          { error: 'Error al verificar disponibilidad del driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      if (activeRoutes && activeRoutes.length > 0) {\r\n        return NextResponse.json(\r\n          { error: 'El driver ya tiene rutas activas asignadas' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      // Asignar driver a la ruta\r\n      const { data: updatedRoute, error: updateError } = await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          driver_id: driver_id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', routeId)\r\n        .select(`\r\n          *,\r\n          driver:driver_id (\r\n            id,\r\n            name,\r\n            phone,\r\n            vehicle_type,\r\n            license_plate,\r\n            status\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error al asignar driver:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al asignar driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      // Actualizar estado del driver a busy si la ruta est\xE1 activa\r\n      if (route.status === 'active') {\r\n        await supabase\r\n          .from('logistics_drivers')\r\n          .update({ status: 'busy' })\r\n          .eq('id', driver_id);\r\n      }\r\n\r\n      return NextResponse.json({\r\n        ...updatedRoute,\r\n        message: `Driver ${driver.name} asignado exitosamente a la ruta`\r\n      });\r\n\r\n    } else {\r\n      // Desasignar driver (driver_id = null)\r\n      \r\n      // Obtener el driver actual para liberarlo\r\n      const currentDriverId = route.driver_id;\r\n      \r\n      // Desasignar driver de la ruta\r\n      const { data: updatedRoute, error: updateError } = await supabase\r\n        .from('optimized_routes')\r\n        .update({\r\n          driver_id: null,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', routeId)\r\n        .select()\r\n        .single();\r\n\r\n      if (updateError) {\r\n        console.error('Error al desasignar driver:', updateError);\r\n        return NextResponse.json(\r\n          { error: 'Error al desasignar driver' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      // Si hab\xEDa un driver asignado, verificar si puede volver a available\r\n      if (currentDriverId) {\r\n        // Verificar si el driver tiene otras rutas activas\r\n        const { data: otherActiveRoutes } = await supabase\r\n          .from('optimized_routes')\r\n          .select('id')\r\n          .eq('driver_id', currentDriverId)\r\n          .eq('status', 'active');\r\n\r\n        // Si no tiene otras rutas activas, marcarlo como available\r\n        if (!otherActiveRoutes || otherActiveRoutes.length === 0) {\r\n          await supabase\r\n            .from('logistics_drivers')\r\n            .update({ status: 'available' })\r\n            .eq('id', currentDriverId);\r\n        }\r\n      }\r\n\r\n      return NextResponse.json({\r\n        ...updatedRoute,\r\n        message: 'Driver desasignado exitosamente de la ruta'\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error en PATCH /api/admin/logistics/routes/[id]/assign-driver:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// GET: OBTENER DRIVERS DISPONIBLES PARA LA RUTA\r\n// =====================================================\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const validation = await validateAdmin();\r\n    if (validation.error) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: validation.status }\r\n      );\r\n    }\r\n\r\n    const routeId = params.id;\r\n\r\n    if (!routeId) {\r\n      return NextResponse.json(\r\n        { error: 'ID de ruta requerido' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const supabase = await createClient();\r\n\r\n    // Obtener informaci\xF3n de la ruta\r\n    const { data: route, error: routeError } = await supabase\r\n      .from('optimized_routes')\r\n      .select('id, shipments, total_distance, estimated_time')\r\n      .eq('id', routeId)\r\n      .single();\r\n\r\n    if (routeError || !route) {\r\n      return NextResponse.json(\r\n        { error: 'Ruta no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const shipmentsCount = Array.isArray(route.shipments) ? route.shipments.length : 0;\r\n\r\n    // Obtener drivers disponibles con capacidad suficiente\r\n    const { data: availableDrivers, error: driversError } = await supabase\r\n      .from('logistics_drivers')\r\n      .select(`\r\n        id,\r\n        name,\r\n        phone,\r\n        vehicle_type,\r\n        license_plate,\r\n        status,\r\n        max_capacity,\r\n        current_location\r\n      `)\r\n      .eq('status', 'available')\r\n      .gte('max_capacity', shipmentsCount)\r\n      .order('name', { ascending: true });\r\n\r\n    if (driversError) {\r\n      console.error('Error al obtener drivers disponibles:', driversError);\r\n      return NextResponse.json(\r\n        { error: 'Error al obtener drivers disponibles' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Enriquecer datos con informaci\xF3n de compatibilidad\r\n    const enrichedDrivers = availableDrivers?.map(driver => ({\r\n      ...driver,\r\n      compatibility_score: Math.round(\r\n        (driver.max_capacity >= shipmentsCount ? 50 : 0) +\r\n        (driver.status === 'available' ? 30 : 0) +\r\n        (Math.random() * 20) // Factor aleatorio para simular otros criterios\r\n      ),\r\n      capacity_utilization: Math.round((shipmentsCount / driver.max_capacity) * 100),\r\n      estimated_completion: new Date(\r\n        Date.now() + route.estimated_time * 60 * 1000\r\n      ).toISOString()\r\n    })) || [];\r\n\r\n    // Ordenar por score de compatibilidad\r\n    enrichedDrivers.sort((a, b) => b.compatibility_score - a.compatibility_score);\r\n\r\n    return NextResponse.json({\r\n      route: {\r\n        id: route.id,\r\n        shipments_count: shipmentsCount,\r\n        total_distance: route.total_distance,\r\n        estimated_time: route.estimated_time\r\n      },\r\n      available_drivers: enrichedDrivers\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error en GET /api/admin/logistics/routes/[id]/assign-driver:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],
      names: ["GET", "PATCH", "validateAdmin", "session", "auth", "user", "error", "status", "supabase", "createAdminClient", "data", "userProfile", "userError", "from", "select", "eq", "email", "single", "roleData", "roleError", "role_id", "role_name", "success", "userId", "id", "console", "request", "params", "validation", "NextResponse", "json", "routeId", "body", "driver_id", "createClient", "route", "routeError", "driver", "driverError", "shipmentsCount", "Array", "isArray", "shipments", "length", "max_capacity", "activeRoutes", "activeRoutesError", "updatedRoute", "updateError", "update", "updated_at", "Date", "toISOString", "message", "name", "currentDriverId", "otherActiveRoutes", "availableDrivers", "driversError", "gte", "order", "ascending", "enrichedDrivers", "map", "compatibility_score", "Math", "round", "random", "capacity_utilization", "estimated_completion", "now", "estimated_time", "sort", "a", "b", "shipments_count", "total_distance", "available_drivers"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7a055a693cd63e6bffbb0673085ab645ae042612"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1m69zw6ysz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1m69zw6ysz();
cov_1m69zw6ysz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1m69zw6ysz().f[0]++;
  cov_1m69zw6ysz().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1m69zw6ysz().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1m69zw6ysz().f[1]++;
    cov_1m69zw6ysz().s[4]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_1m69zw6ysz().f[2]++;
    cov_1m69zw6ysz().s[5]++;
    return PATCH;
  }
});
const _server =
/* istanbul ignore next */
(cov_1m69zw6ysz().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1m69zw6ysz().s[7]++, require("../../../../../../../lib/integrations/supabase/server"));
const _auth =
/* istanbul ignore next */
(cov_1m69zw6ysz().s[8]++, require("../../../../../../../auth"));
// =====================================================
// VALIDACIÃN DE ADMIN
// =====================================================
async function validateAdmin() {
  /* istanbul ignore next */
  cov_1m69zw6ysz().f[3]++;
  cov_1m69zw6ysz().s[9]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[10]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[1][0]++, !session) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[1][1]++, !session.user)) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[0][0]++;
      cov_1m69zw6ysz().s[12]++;
      return {
        error: 'No autenticado',
        status: 401
      };
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[0][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[13]++, (0, _server1.createAdminClient)());
    // Verificar si el usuario es admin
    const {
      data: userProfile,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[14]++, await supabase.from('user_profiles').select('email, role_id').eq('email', session.user.email).single());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[3][0]++, userError) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[3][1]++, !userProfile)) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[2][0]++;
      cov_1m69zw6ysz().s[16]++;
      return {
        error: 'Usuario no encontrado',
        status: 404
      };
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[2][1]++;
    }
    // Obtener el rol del usuario
    const {
      data: roleData,
      error: roleError
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[17]++, await supabase.from('user_roles').select('role_name').eq('id', userProfile.role_id).single());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[5][0]++, roleError) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[5][1]++, !roleData) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[5][2]++, roleData.role_name !== 'admin')) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[4][0]++;
      cov_1m69zw6ysz().s[19]++;
      return {
        error: 'Acceso denegado - Se requieren permisos de administrador',
        status: 403
      };
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[4][1]++;
    }
    cov_1m69zw6ysz().s[20]++;
    return {
      success: true,
      userId: session.user.id,
      email: userProfile.email,
      supabase
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[21]++;
    console.error('Error en validaciÃ³n de admin:', error);
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[22]++;
    return {
      error: 'Error interno del servidor',
      status: 500
    };
  }
}
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1m69zw6ysz().f[4]++;
  cov_1m69zw6ysz().s[23]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[24]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[25]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[6][0]++;
      cov_1m69zw6ysz().s[26]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[6][1]++;
    }
    const routeId =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[27]++, params.id);
    const body =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[28]++, await request.json());
    const {
      driver_id
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[29]++, body);
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[30]++;
    if (!routeId) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[7][0]++;
      cov_1m69zw6ysz().s[31]++;
      return _server.NextResponse.json({
        error: 'ID de ruta requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[7][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[32]++, await (0, _server1.createClient)());
    // Verificar que la ruta existe
    const {
      data: route,
      error: routeError
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[33]++, await supabase.from('optimized_routes').select('id, status, shipments, total_distance, estimated_time').eq('id', routeId).single());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[9][0]++, routeError) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[9][1]++, !route)) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[8][0]++;
      cov_1m69zw6ysz().s[35]++;
      return _server.NextResponse.json({
        error: 'Ruta no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[8][1]++;
    }
    // Si se estÃ¡ asignando un driver
    cov_1m69zw6ysz().s[36]++;
    if (driver_id) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[10][0]++;
      // Verificar que el driver existe y estÃ¡ disponible
      const {
        data: driver,
        error: driverError
      } =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[37]++, await supabase.from('logistics_drivers').select('id, name, status, max_capacity, vehicle_type').eq('id', driver_id).single());
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[12][0]++, driverError) ||
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[12][1]++, !driver)) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[11][0]++;
        cov_1m69zw6ysz().s[39]++;
        return _server.NextResponse.json({
          error: 'Driver no encontrado'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[11][1]++;
      }
      cov_1m69zw6ysz().s[40]++;
      if (driver.status !== 'available') {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[13][0]++;
        cov_1m69zw6ysz().s[41]++;
        return _server.NextResponse.json({
          error: 'El driver no estÃ¡ disponible'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[13][1]++;
      }
      // Verificar capacidad del vehÃ­culo
      const shipmentsCount =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[42]++, Array.isArray(route.shipments) ?
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[14][0]++, route.shipments.length) :
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[14][1]++, 0));
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[43]++;
      if (shipmentsCount > driver.max_capacity) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[15][0]++;
        cov_1m69zw6ysz().s[44]++;
        return _server.NextResponse.json({
          error: `El vehÃ­culo del driver tiene capacidad para ${driver.max_capacity} envÃ­os, pero la ruta tiene ${shipmentsCount}`
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[15][1]++;
      }
      // Verificar que el driver no tenga otras rutas activas
      const {
        data: activeRoutes,
        error: activeRoutesError
      } =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[45]++, await supabase.from('optimized_routes').select('id').eq('driver_id', driver_id).eq('status', 'active'));
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[46]++;
      if (activeRoutesError) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[16][0]++;
        cov_1m69zw6ysz().s[47]++;
        console.error('Error al verificar rutas activas:', activeRoutesError);
        /* istanbul ignore next */
        cov_1m69zw6ysz().s[48]++;
        return _server.NextResponse.json({
          error: 'Error al verificar disponibilidad del driver'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[16][1]++;
      }
      cov_1m69zw6ysz().s[49]++;
      if (
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[18][0]++, activeRoutes) &&
      /* istanbul ignore next */
      (cov_1m69zw6ysz().b[18][1]++, activeRoutes.length > 0)) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[17][0]++;
        cov_1m69zw6ysz().s[50]++;
        return _server.NextResponse.json({
          error: 'El driver ya tiene rutas activas asignadas'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[17][1]++;
      }
      // Asignar driver a la ruta
      const {
        data: updatedRoute,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[51]++, await supabase.from('optimized_routes').update({
        driver_id: driver_id,
        updated_at: new Date().toISOString()
      }).eq('id', routeId).select(`
          *,
          driver:driver_id (
            id,
            name,
            phone,
            vehicle_type,
            license_plate,
            status
          )
        `).single());
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[52]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[19][0]++;
        cov_1m69zw6ysz().s[53]++;
        console.error('Error al asignar driver:', updateError);
        /* istanbul ignore next */
        cov_1m69zw6ysz().s[54]++;
        return _server.NextResponse.json({
          error: 'Error al asignar driver'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[19][1]++;
      }
      // Actualizar estado del driver a busy si la ruta estÃ¡ activa
      cov_1m69zw6ysz().s[55]++;
      if (route.status === 'active') {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[20][0]++;
        cov_1m69zw6ysz().s[56]++;
        await supabase.from('logistics_drivers').update({
          status: 'busy'
        }).eq('id', driver_id);
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[20][1]++;
      }
      cov_1m69zw6ysz().s[57]++;
      return _server.NextResponse.json({
        ...updatedRoute,
        message: `Driver ${driver.name} asignado exitosamente a la ruta`
      });
    } else {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[10][1]++;
      // Desasignar driver (driver_id = null)
      // Obtener el driver actual para liberarlo
      const currentDriverId =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[58]++, route.driver_id);
      // Desasignar driver de la ruta
      const {
        data: updatedRoute,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_1m69zw6ysz().s[59]++, await supabase.from('optimized_routes').update({
        driver_id: null,
        updated_at: new Date().toISOString()
      }).eq('id', routeId).select().single());
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[60]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[21][0]++;
        cov_1m69zw6ysz().s[61]++;
        console.error('Error al desasignar driver:', updateError);
        /* istanbul ignore next */
        cov_1m69zw6ysz().s[62]++;
        return _server.NextResponse.json({
          error: 'Error al desasignar driver'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[21][1]++;
      }
      // Si habÃ­a un driver asignado, verificar si puede volver a available
      cov_1m69zw6ysz().s[63]++;
      if (currentDriverId) {
        /* istanbul ignore next */
        cov_1m69zw6ysz().b[22][0]++;
        // Verificar si el driver tiene otras rutas activas
        const {
          data: otherActiveRoutes
        } =
        /* istanbul ignore next */
        (cov_1m69zw6ysz().s[64]++, await supabase.from('optimized_routes').select('id').eq('driver_id', currentDriverId).eq('status', 'active'));
        // Si no tiene otras rutas activas, marcarlo como available
        /* istanbul ignore next */
        cov_1m69zw6ysz().s[65]++;
        if (
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[24][0]++, !otherActiveRoutes) ||
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[24][1]++, otherActiveRoutes.length === 0)) {
          /* istanbul ignore next */
          cov_1m69zw6ysz().b[23][0]++;
          cov_1m69zw6ysz().s[66]++;
          await supabase.from('logistics_drivers').update({
            status: 'available'
          }).eq('id', currentDriverId);
        } else
        /* istanbul ignore next */
        {
          cov_1m69zw6ysz().b[23][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1m69zw6ysz().b[22][1]++;
      }
      cov_1m69zw6ysz().s[67]++;
      return _server.NextResponse.json({
        ...updatedRoute,
        message: 'Driver desasignado exitosamente de la ruta'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[68]++;
    console.error('Error en PATCH /api/admin/logistics/routes/[id]/assign-driver:', error);
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[69]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1m69zw6ysz().f[5]++;
  cov_1m69zw6ysz().s[70]++;
  try {
    const validation =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[71]++, await validateAdmin());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[72]++;
    if (validation.error) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[25][0]++;
      cov_1m69zw6ysz().s[73]++;
      return _server.NextResponse.json({
        error: validation.error
      }, {
        status: validation.status
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[25][1]++;
    }
    const routeId =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[74]++, params.id);
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[75]++;
    if (!routeId) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[26][0]++;
      cov_1m69zw6ysz().s[76]++;
      return _server.NextResponse.json({
        error: 'ID de ruta requerido'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[26][1]++;
    }
    const supabase =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[77]++, await (0, _server1.createClient)());
    // Obtener informaciÃ³n de la ruta
    const {
      data: route,
      error: routeError
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[78]++, await supabase.from('optimized_routes').select('id, shipments, total_distance, estimated_time').eq('id', routeId).single());
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[28][0]++, routeError) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[28][1]++, !route)) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[27][0]++;
      cov_1m69zw6ysz().s[80]++;
      return _server.NextResponse.json({
        error: 'Ruta no encontrada'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[27][1]++;
    }
    const shipmentsCount =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[81]++, Array.isArray(route.shipments) ?
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[29][0]++, route.shipments.length) :
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[29][1]++, 0));
    // Obtener drivers disponibles con capacidad suficiente
    const {
      data: availableDrivers,
      error: driversError
    } =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[82]++, await supabase.from('logistics_drivers').select(`
        id,
        name,
        phone,
        vehicle_type,
        license_plate,
        status,
        max_capacity,
        current_location
      `).eq('status', 'available').gte('max_capacity', shipmentsCount).order('name', {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[83]++;
    if (driversError) {
      /* istanbul ignore next */
      cov_1m69zw6ysz().b[30][0]++;
      cov_1m69zw6ysz().s[84]++;
      console.error('Error al obtener drivers disponibles:', driversError);
      /* istanbul ignore next */
      cov_1m69zw6ysz().s[85]++;
      return _server.NextResponse.json({
        error: 'Error al obtener drivers disponibles'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m69zw6ysz().b[30][1]++;
    }
    // Enriquecer datos con informaciÃ³n de compatibilidad
    const enrichedDrivers =
    /* istanbul ignore next */
    (cov_1m69zw6ysz().s[86]++,
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[31][0]++, availableDrivers?.map(driver => {
      /* istanbul ignore next */
      cov_1m69zw6ysz().f[6]++;
      cov_1m69zw6ysz().s[87]++;
      return {
        ...driver,
        compatibility_score: Math.round((driver.max_capacity >= shipmentsCount ?
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[32][0]++, 50) :
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[32][1]++, 0)) + (driver.status === 'available' ?
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[33][0]++, 30) :
        /* istanbul ignore next */
        (cov_1m69zw6ysz().b[33][1]++, 0)) + Math.random() * 20 // Factor aleatorio para simular otros criterios
        ),
        capacity_utilization: Math.round(shipmentsCount / driver.max_capacity * 100),
        estimated_completion: new Date(Date.now() + route.estimated_time * 60 * 1000).toISOString()
      };
    })) ||
    /* istanbul ignore next */
    (cov_1m69zw6ysz().b[31][1]++, []));
    // Ordenar por score de compatibilidad
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[88]++;
    enrichedDrivers.sort((a, b) => {
      /* istanbul ignore next */
      cov_1m69zw6ysz().f[7]++;
      cov_1m69zw6ysz().s[89]++;
      return b.compatibility_score - a.compatibility_score;
    });
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[90]++;
    return _server.NextResponse.json({
      route: {
        id: route.id,
        shipments_count: shipmentsCount,
        total_distance: route.total_distance,
        estimated_time: route.estimated_time
      },
      available_drivers: enrichedDrivers
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[91]++;
    console.error('Error en GET /api/admin/logistics/routes/[id]/assign-driver:', error);
    /* istanbul ignore next */
    cov_1m69zw6ysz().s[92]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMW02OXp3NnlzeiIsImYiLCJzIiwiUEFUQ0giLCJ2YWxpZGF0ZUFkbWluIiwic2Vzc2lvbiIsIl9hdXRoIiwiYXV0aCIsImIiLCJ1c2VyIiwiZXJyb3IiLCJzdGF0dXMiLCJzdXBhYmFzZSIsIl9zZXJ2ZXIxIiwiY3JlYXRlQWRtaW5DbGllbnQiLCJkYXRhIiwidXNlclByb2ZpbGUiLCJ1c2VyRXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJlbWFpbCIsInNpbmdsZSIsInJvbGVEYXRhIiwicm9sZUVycm9yIiwicm9sZV9pZCIsInJvbGVfbmFtZSIsInN1Y2Nlc3MiLCJ1c2VySWQiLCJpZCIsImNvbnNvbGUiLCJyZXF1ZXN0IiwicGFyYW1zIiwidmFsaWRhdGlvbiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwicm91dGVJZCIsImJvZHkiLCJkcml2ZXJfaWQiLCJjcmVhdGVDbGllbnQiLCJyb3V0ZSIsInJvdXRlRXJyb3IiLCJkcml2ZXIiLCJkcml2ZXJFcnJvciIsInNoaXBtZW50c0NvdW50IiwiQXJyYXkiLCJpc0FycmF5Iiwic2hpcG1lbnRzIiwibGVuZ3RoIiwibWF4X2NhcGFjaXR5IiwiYWN0aXZlUm91dGVzIiwiYWN0aXZlUm91dGVzRXJyb3IiLCJ1cGRhdGVkUm91dGUiLCJ1cGRhdGVFcnJvciIsInVwZGF0ZSIsInVwZGF0ZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJtZXNzYWdlIiwibmFtZSIsImN1cnJlbnREcml2ZXJJZCIsIm90aGVyQWN0aXZlUm91dGVzIiwiYXZhaWxhYmxlRHJpdmVycyIsImRyaXZlcnNFcnJvciIsImd0ZSIsIm9yZGVyIiwiYXNjZW5kaW5nIiwiZW5yaWNoZWREcml2ZXJzIiwibWFwIiwiY29tcGF0aWJpbGl0eV9zY29yZSIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNhcGFjaXR5X3V0aWxpemF0aW9uIiwiZXN0aW1hdGVkX2NvbXBsZXRpb24iLCJub3ciLCJlc3RpbWF0ZWRfdGltZSIsInNvcnQiLCJhIiwic2hpcG1lbnRzX2NvdW50IiwidG90YWxfZGlzdGFuY2UiLCJhdmFpbGFibGVfZHJpdmVycyJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXGFkbWluXFxsb2dpc3RpY3NcXHJvdXRlc1xcW2lkXVxcYXNzaWduLWRyaXZlclxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQVBJOiBBU0lHTkFSIERSSVZFUiBBIFJVVEFcclxuLy8gUnV0YTogL2FwaS9hZG1pbi9sb2dpc3RpY3Mvcm91dGVzL1tpZF0vYXNzaWduLWRyaXZlclxyXG4vLyBEZXNjcmlwY2nDs246IEFzaWduYXIgY29uZHVjdG9yIGEgdW5hIHJ1dGEgZXNwZWPDrWZpY2FcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCwgY3JlYXRlQWRtaW5DbGllbnQgfSBmcm9tICdAL2xpYi9pbnRlZ3JhdGlvbnMvc3VwYWJhc2Uvc2VydmVyJztcclxuaW1wb3J0IHsgYXV0aCB9IGZyb20gJ0AvYXV0aCc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBWQUxJREFDScOTTiBERSBBRE1JTlxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVBZG1pbigpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcclxuXHJcbiAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24udXNlcikge1xyXG4gICAgICByZXR1cm4geyBlcnJvcjogJ05vIGF1dGVudGljYWRvJywgc3RhdHVzOiA0MDEgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUFkbWluQ2xpZW50KCk7XHJcblxyXG4gICAgLy8gVmVyaWZpY2FyIHNpIGVsIHVzdWFyaW8gZXMgYWRtaW5cclxuICAgIGNvbnN0IHsgZGF0YTogdXNlclByb2ZpbGUsIGVycm9yOiB1c2VyRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcclxuICAgICAgLnNlbGVjdCgnZW1haWwsIHJvbGVfaWQnKVxyXG4gICAgICAuZXEoJ2VtYWlsJywgc2Vzc2lvbi51c2VyLmVtYWlsKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKHVzZXJFcnJvciB8fCAhdXNlclByb2ZpbGUpIHtcclxuICAgICAgcmV0dXJuIHsgZXJyb3I6ICdVc3VhcmlvIG5vIGVuY29udHJhZG8nLCBzdGF0dXM6IDQwNCB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9idGVuZXIgZWwgcm9sIGRlbCB1c3VhcmlvXHJcbiAgICBjb25zdCB7IGRhdGE6IHJvbGVEYXRhLCBlcnJvcjogcm9sZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgndXNlcl9yb2xlcycpXHJcbiAgICAgIC5zZWxlY3QoJ3JvbGVfbmFtZScpXHJcbiAgICAgIC5lcSgnaWQnLCB1c2VyUHJvZmlsZS5yb2xlX2lkKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKHJvbGVFcnJvciB8fCAhcm9sZURhdGEgfHwgcm9sZURhdGEucm9sZV9uYW1lICE9PSAnYWRtaW4nKSB7XHJcbiAgICAgIHJldHVybiB7IGVycm9yOiAnQWNjZXNvIGRlbmVnYWRvIC0gU2UgcmVxdWllcmVuIHBlcm1pc29zIGRlIGFkbWluaXN0cmFkb3InLCBzdGF0dXM6IDQwMyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIHVzZXJJZDogc2Vzc2lvbi51c2VyLmlkLCBlbWFpbDogdXNlclByb2ZpbGUuZW1haWwsIHN1cGFiYXNlIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIHZhbGlkYWNpw7NuIGRlIGFkbWluOicsIGVycm9yKTtcclxuICAgIHJldHVybiB7IGVycm9yOiAnRXJyb3IgaW50ZXJubyBkZWwgc2Vydmlkb3InLCBzdGF0dXM6IDUwMCB9O1xyXG4gIH1cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gUEFUQ0g6IEFTSUdOQVIgRFJJVkVSIEEgUlVUQVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBBVENIKFxyXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxyXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiB7IGlkOiBzdHJpbmcgfSB9XHJcbikge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gYXdhaXQgdmFsaWRhdGVBZG1pbigpO1xyXG4gICAgaWYgKHZhbGlkYXRpb24uZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IgfSxcclxuICAgICAgICB7IHN0YXR1czogdmFsaWRhdGlvbi5zdGF0dXMgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJvdXRlSWQgPSBwYXJhbXMuaWQ7XHJcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XHJcbiAgICBjb25zdCB7IGRyaXZlcl9pZCB9ID0gYm9keTtcclxuXHJcbiAgICBpZiAoIXJvdXRlSWQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdJRCBkZSBydXRhIHJlcXVlcmlkbycgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGF3YWl0IGNyZWF0ZUNsaWVudCgpO1xyXG5cclxuICAgIC8vIFZlcmlmaWNhciBxdWUgbGEgcnV0YSBleGlzdGVcclxuICAgIGNvbnN0IHsgZGF0YTogcm91dGUsIGVycm9yOiByb3V0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3B0aW1pemVkX3JvdXRlcycpXHJcbiAgICAgIC5zZWxlY3QoJ2lkLCBzdGF0dXMsIHNoaXBtZW50cywgdG90YWxfZGlzdGFuY2UsIGVzdGltYXRlZF90aW1lJylcclxuICAgICAgLmVxKCdpZCcsIHJvdXRlSWQpXHJcbiAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICBpZiAocm91dGVFcnJvciB8fCAhcm91dGUpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdSdXRhIG5vIGVuY29udHJhZGEnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2kgc2UgZXN0w6EgYXNpZ25hbmRvIHVuIGRyaXZlclxyXG4gICAgaWYgKGRyaXZlcl9pZCkge1xyXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIGVsIGRyaXZlciBleGlzdGUgeSBlc3TDoSBkaXNwb25pYmxlXHJcbiAgICAgIGNvbnN0IHsgZGF0YTogZHJpdmVyLCBlcnJvcjogZHJpdmVyRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ2xvZ2lzdGljc19kcml2ZXJzJylcclxuICAgICAgICAuc2VsZWN0KCdpZCwgbmFtZSwgc3RhdHVzLCBtYXhfY2FwYWNpdHksIHZlaGljbGVfdHlwZScpXHJcbiAgICAgICAgLmVxKCdpZCcsIGRyaXZlcl9pZClcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAoZHJpdmVyRXJyb3IgfHwgIWRyaXZlcikge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdEcml2ZXIgbm8gZW5jb250cmFkbycgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA0MDQgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkcml2ZXIuc3RhdHVzICE9PSAnYXZhaWxhYmxlJykge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFbCBkcml2ZXIgbm8gZXN0w6EgZGlzcG9uaWJsZScgfSxcclxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZlcmlmaWNhciBjYXBhY2lkYWQgZGVsIHZlaMOtY3Vsb1xyXG4gICAgICBjb25zdCBzaGlwbWVudHNDb3VudCA9IEFycmF5LmlzQXJyYXkocm91dGUuc2hpcG1lbnRzKSA/IHJvdXRlLnNoaXBtZW50cy5sZW5ndGggOiAwO1xyXG4gICAgICBpZiAoc2hpcG1lbnRzQ291bnQgPiBkcml2ZXIubWF4X2NhcGFjaXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgeyBcclxuICAgICAgICAgICAgZXJyb3I6IGBFbCB2ZWjDrWN1bG8gZGVsIGRyaXZlciB0aWVuZSBjYXBhY2lkYWQgcGFyYSAke2RyaXZlci5tYXhfY2FwYWNpdHl9IGVudsOtb3MsIHBlcm8gbGEgcnV0YSB0aWVuZSAke3NoaXBtZW50c0NvdW50fWAgXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBkcml2ZXIgbm8gdGVuZ2Egb3RyYXMgcnV0YXMgYWN0aXZhc1xyXG4gICAgICBjb25zdCB7IGRhdGE6IGFjdGl2ZVJvdXRlcywgZXJyb3I6IGFjdGl2ZVJvdXRlc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKCdvcHRpbWl6ZWRfcm91dGVzJylcclxuICAgICAgICAuc2VsZWN0KCdpZCcpXHJcbiAgICAgICAgLmVxKCdkcml2ZXJfaWQnLCBkcml2ZXJfaWQpXHJcbiAgICAgICAgLmVxKCdzdGF0dXMnLCAnYWN0aXZlJyk7XHJcblxyXG4gICAgICBpZiAoYWN0aXZlUm91dGVzRXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCB2ZXJpZmljYXIgcnV0YXMgYWN0aXZhczonLCBhY3RpdmVSb3V0ZXNFcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIHZlcmlmaWNhciBkaXNwb25pYmlsaWRhZCBkZWwgZHJpdmVyJyB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGFjdGl2ZVJvdXRlcyAmJiBhY3RpdmVSb3V0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICAgIHsgZXJyb3I6ICdFbCBkcml2ZXIgeWEgdGllbmUgcnV0YXMgYWN0aXZhcyBhc2lnbmFkYXMnIH0sXHJcbiAgICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBc2lnbmFyIGRyaXZlciBhIGxhIHJ1dGFcclxuICAgICAgY29uc3QgeyBkYXRhOiB1cGRhdGVkUm91dGUsIGVycm9yOiB1cGRhdGVFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAuZnJvbSgnb3B0aW1pemVkX3JvdXRlcycpXHJcbiAgICAgICAgLnVwZGF0ZSh7XHJcbiAgICAgICAgICBkcml2ZXJfaWQ6IGRyaXZlcl9pZCxcclxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmVxKCdpZCcsIHJvdXRlSWQpXHJcbiAgICAgICAgLnNlbGVjdChgXHJcbiAgICAgICAgICAqLFxyXG4gICAgICAgICAgZHJpdmVyOmRyaXZlcl9pZCAoXHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBwaG9uZSxcclxuICAgICAgICAgICAgdmVoaWNsZV90eXBlLFxyXG4gICAgICAgICAgICBsaWNlbnNlX3BsYXRlLFxyXG4gICAgICAgICAgICBzdGF0dXNcclxuICAgICAgICAgIClcclxuICAgICAgICBgKVxyXG4gICAgICAgIC5zaW5nbGUoKTtcclxuXHJcbiAgICAgIGlmICh1cGRhdGVFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIGFzaWduYXIgZHJpdmVyOicsIHVwZGF0ZUVycm9yKTtcclxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgICB7IGVycm9yOiAnRXJyb3IgYWwgYXNpZ25hciBkcml2ZXInIH0sXHJcbiAgICAgICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBY3R1YWxpemFyIGVzdGFkbyBkZWwgZHJpdmVyIGEgYnVzeSBzaSBsYSBydXRhIGVzdMOhIGFjdGl2YVxyXG4gICAgICBpZiAocm91dGUuc3RhdHVzID09PSAnYWN0aXZlJykge1xyXG4gICAgICAgIGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAuZnJvbSgnbG9naXN0aWNzX2RyaXZlcnMnKVxyXG4gICAgICAgICAgLnVwZGF0ZSh7IHN0YXR1czogJ2J1c3knIH0pXHJcbiAgICAgICAgICAuZXEoJ2lkJywgZHJpdmVyX2lkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgICAuLi51cGRhdGVkUm91dGUsXHJcbiAgICAgICAgbWVzc2FnZTogYERyaXZlciAke2RyaXZlci5uYW1lfSBhc2lnbmFkbyBleGl0b3NhbWVudGUgYSBsYSBydXRhYFxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBEZXNhc2lnbmFyIGRyaXZlciAoZHJpdmVyX2lkID0gbnVsbClcclxuICAgICAgXHJcbiAgICAgIC8vIE9idGVuZXIgZWwgZHJpdmVyIGFjdHVhbCBwYXJhIGxpYmVyYXJsb1xyXG4gICAgICBjb25zdCBjdXJyZW50RHJpdmVySWQgPSByb3V0ZS5kcml2ZXJfaWQ7XHJcbiAgICAgIFxyXG4gICAgICAvLyBEZXNhc2lnbmFyIGRyaXZlciBkZSBsYSBydXRhXHJcbiAgICAgIGNvbnN0IHsgZGF0YTogdXBkYXRlZFJvdXRlLCBlcnJvcjogdXBkYXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oJ29wdGltaXplZF9yb3V0ZXMnKVxyXG4gICAgICAgIC51cGRhdGUoe1xyXG4gICAgICAgICAgZHJpdmVyX2lkOiBudWxsLFxyXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZXEoJ2lkJywgcm91dGVJZClcclxuICAgICAgICAuc2VsZWN0KClcclxuICAgICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgICBpZiAodXBkYXRlRXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCBkZXNhc2lnbmFyIGRyaXZlcjonLCB1cGRhdGVFcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIGRlc2FzaWduYXIgZHJpdmVyJyB9LFxyXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU2kgaGFiw61hIHVuIGRyaXZlciBhc2lnbmFkbywgdmVyaWZpY2FyIHNpIHB1ZWRlIHZvbHZlciBhIGF2YWlsYWJsZVxyXG4gICAgICBpZiAoY3VycmVudERyaXZlcklkKSB7XHJcbiAgICAgICAgLy8gVmVyaWZpY2FyIHNpIGVsIGRyaXZlciB0aWVuZSBvdHJhcyBydXRhcyBhY3RpdmFzXHJcbiAgICAgICAgY29uc3QgeyBkYXRhOiBvdGhlckFjdGl2ZVJvdXRlcyB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAgIC5mcm9tKCdvcHRpbWl6ZWRfcm91dGVzJylcclxuICAgICAgICAgIC5zZWxlY3QoJ2lkJylcclxuICAgICAgICAgIC5lcSgnZHJpdmVyX2lkJywgY3VycmVudERyaXZlcklkKVxyXG4gICAgICAgICAgLmVxKCdzdGF0dXMnLCAnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgIC8vIFNpIG5vIHRpZW5lIG90cmFzIHJ1dGFzIGFjdGl2YXMsIG1hcmNhcmxvIGNvbW8gYXZhaWxhYmxlXHJcbiAgICAgICAgaWYgKCFvdGhlckFjdGl2ZVJvdXRlcyB8fCBvdGhlckFjdGl2ZVJvdXRlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAgIC5mcm9tKCdsb2dpc3RpY3NfZHJpdmVycycpXHJcbiAgICAgICAgICAgIC51cGRhdGUoeyBzdGF0dXM6ICdhdmFpbGFibGUnIH0pXHJcbiAgICAgICAgICAgIC5lcSgnaWQnLCBjdXJyZW50RHJpdmVySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgICAuLi51cGRhdGVkUm91dGUsXHJcbiAgICAgICAgbWVzc2FnZTogJ0RyaXZlciBkZXNhc2lnbmFkbyBleGl0b3NhbWVudGUgZGUgbGEgcnV0YSdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBlbiBQQVRDSCAvYXBpL2FkbWluL2xvZ2lzdGljcy9yb3V0ZXMvW2lkXS9hc3NpZ24tZHJpdmVyOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBHRVQ6IE9CVEVORVIgRFJJVkVSUyBESVNQT05JQkxFUyBQQVJBIExBIFJVVEFcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXHJcbiAgcmVxdWVzdDogTmV4dFJlcXVlc3QsXHJcbiAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IHsgaWQ6IHN0cmluZyB9IH1cclxuKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB2YWxpZGF0ZUFkbWluKCk7XHJcbiAgICBpZiAodmFsaWRhdGlvbi5lcnJvcikge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogdmFsaWRhdGlvbi5lcnJvciB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiB2YWxpZGF0aW9uLnN0YXR1cyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgcm91dGVJZCA9IHBhcmFtcy5pZDtcclxuXHJcbiAgICBpZiAoIXJvdXRlSWQpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdJRCBkZSBydXRhIHJlcXVlcmlkbycgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdXBhYmFzZSA9IGF3YWl0IGNyZWF0ZUNsaWVudCgpO1xyXG5cclxuICAgIC8vIE9idGVuZXIgaW5mb3JtYWNpw7NuIGRlIGxhIHJ1dGFcclxuICAgIGNvbnN0IHsgZGF0YTogcm91dGUsIGVycm9yOiByb3V0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnb3B0aW1pemVkX3JvdXRlcycpXHJcbiAgICAgIC5zZWxlY3QoJ2lkLCBzaGlwbWVudHMsIHRvdGFsX2Rpc3RhbmNlLCBlc3RpbWF0ZWRfdGltZScpXHJcbiAgICAgIC5lcSgnaWQnLCByb3V0ZUlkKVxyXG4gICAgICAuc2luZ2xlKCk7XHJcblxyXG4gICAgaWYgKHJvdXRlRXJyb3IgfHwgIXJvdXRlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnUnV0YSBubyBlbmNvbnRyYWRhJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNoaXBtZW50c0NvdW50ID0gQXJyYXkuaXNBcnJheShyb3V0ZS5zaGlwbWVudHMpID8gcm91dGUuc2hpcG1lbnRzLmxlbmd0aCA6IDA7XHJcblxyXG4gICAgLy8gT2J0ZW5lciBkcml2ZXJzIGRpc3BvbmlibGVzIGNvbiBjYXBhY2lkYWQgc3VmaWNpZW50ZVxyXG4gICAgY29uc3QgeyBkYXRhOiBhdmFpbGFibGVEcml2ZXJzLCBlcnJvcjogZHJpdmVyc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgnbG9naXN0aWNzX2RyaXZlcnMnKVxyXG4gICAgICAuc2VsZWN0KGBcclxuICAgICAgICBpZCxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIHBob25lLFxyXG4gICAgICAgIHZlaGljbGVfdHlwZSxcclxuICAgICAgICBsaWNlbnNlX3BsYXRlLFxyXG4gICAgICAgIHN0YXR1cyxcclxuICAgICAgICBtYXhfY2FwYWNpdHksXHJcbiAgICAgICAgY3VycmVudF9sb2NhdGlvblxyXG4gICAgICBgKVxyXG4gICAgICAuZXEoJ3N0YXR1cycsICdhdmFpbGFibGUnKVxyXG4gICAgICAuZ3RlKCdtYXhfY2FwYWNpdHknLCBzaGlwbWVudHNDb3VudClcclxuICAgICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSk7XHJcblxyXG4gICAgaWYgKGRyaXZlcnNFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCBvYnRlbmVyIGRyaXZlcnMgZGlzcG9uaWJsZXM6JywgZHJpdmVyc0Vycm9yKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdFcnJvciBhbCBvYnRlbmVyIGRyaXZlcnMgZGlzcG9uaWJsZXMnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRW5yaXF1ZWNlciBkYXRvcyBjb24gaW5mb3JtYWNpw7NuIGRlIGNvbXBhdGliaWxpZGFkXHJcbiAgICBjb25zdCBlbnJpY2hlZERyaXZlcnMgPSBhdmFpbGFibGVEcml2ZXJzPy5tYXAoZHJpdmVyID0+ICh7XHJcbiAgICAgIC4uLmRyaXZlcixcclxuICAgICAgY29tcGF0aWJpbGl0eV9zY29yZTogTWF0aC5yb3VuZChcclxuICAgICAgICAoZHJpdmVyLm1heF9jYXBhY2l0eSA+PSBzaGlwbWVudHNDb3VudCA/IDUwIDogMCkgK1xyXG4gICAgICAgIChkcml2ZXIuc3RhdHVzID09PSAnYXZhaWxhYmxlJyA/IDMwIDogMCkgK1xyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpICogMjApIC8vIEZhY3RvciBhbGVhdG9yaW8gcGFyYSBzaW11bGFyIG90cm9zIGNyaXRlcmlvc1xyXG4gICAgICApLFxyXG4gICAgICBjYXBhY2l0eV91dGlsaXphdGlvbjogTWF0aC5yb3VuZCgoc2hpcG1lbnRzQ291bnQgLyBkcml2ZXIubWF4X2NhcGFjaXR5KSAqIDEwMCksXHJcbiAgICAgIGVzdGltYXRlZF9jb21wbGV0aW9uOiBuZXcgRGF0ZShcclxuICAgICAgICBEYXRlLm5vdygpICsgcm91dGUuZXN0aW1hdGVkX3RpbWUgKiA2MCAqIDEwMDBcclxuICAgICAgKS50b0lTT1N0cmluZygpXHJcbiAgICB9KSkgfHwgW107XHJcblxyXG4gICAgLy8gT3JkZW5hciBwb3Igc2NvcmUgZGUgY29tcGF0aWJpbGlkYWRcclxuICAgIGVucmljaGVkRHJpdmVycy5zb3J0KChhLCBiKSA9PiBiLmNvbXBhdGliaWxpdHlfc2NvcmUgLSBhLmNvbXBhdGliaWxpdHlfc2NvcmUpO1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHJvdXRlOiB7XHJcbiAgICAgICAgaWQ6IHJvdXRlLmlkLFxyXG4gICAgICAgIHNoaXBtZW50c19jb3VudDogc2hpcG1lbnRzQ291bnQsXHJcbiAgICAgICAgdG90YWxfZGlzdGFuY2U6IHJvdXRlLnRvdGFsX2Rpc3RhbmNlLFxyXG4gICAgICAgIGVzdGltYXRlZF90aW1lOiByb3V0ZS5lc3RpbWF0ZWRfdGltZVxyXG4gICAgICB9LFxyXG4gICAgICBhdmFpbGFibGVfZHJpdmVyczogZW5yaWNoZWREcml2ZXJzXHJcbiAgICB9KTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIEdFVCAvYXBpL2FkbWluL2xvZ2lzdGljcy9yb3V0ZXMvW2lkXS9hc3NpZ24tZHJpdmVyOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQTZQc0JBLElBQUE7SUFBQTtJQUFB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QUlMLGNBQUE7UUFBQTtRQUFBLENBQUE3QyxjQUFBLEdBQUFRLENBQUEsV0FBaUI7UUFBQTtRQUFBLENBQUFSLGNBQUEsR0FBQVEsQ0FBQSxXQUFLLE9BQzdDbUMsTUFBQSxDQUFPaEMsTUFBTSxLQUFLO1FBQUE7UUFBQSxDQUFBWCxjQUFBLEdBQUFRLENBQUEsV0FBYztRQUFBO1FBQUEsQ0FBQVIsY0FBQSxHQUFBUSxDQUFBLFdBQUssTUFDckMrRCxJQUFBLENBQUtFLE1BQU0sS0FBSyxHQUFJOztRQUV2QkMsb0JBQUEsRUFBc0JILElBQUEsQ0FBS0MsS0FBSyxDQUFDM0IsY0FBQyxHQUFpQkYsTUFBQSxDQUFPTyxZQUFZLEdBQUk7UUFDMUV5QixvQkFBQSxFQUFzQixJQUFJbEIsSUFBQSxDQUN4QkEsSUFBQSxDQUFLbUIsR0FBRyxLQUFLbkMsS0FBQSxDQUFNb0MsY0FBYyxHQUFHLEtBQUssTUFDekNuQixXQUFXO01BQ2Y7SUFBQTtJQUFBO0lBQUEsQ0FBQTFELGNBQUEsR0FBQVEsQ0FBQSxXQUFPLEVBQUU7SUFFVDtJQUFBO0lBQUFSLGNBQUEsR0FBQUUsQ0FBQTtJQUNBa0UsZUFBQSxDQUFnQlUsSUFBSSxDQUFDLENBQUNDLENBQUEsRUFBR3ZFLENBQUEsS0FBTTtNQUFBO01BQUFSLGNBQUEsR0FBQUMsQ0FBQTtNQUFBRCxjQUFBLEdBQUFFLENBQUE7TUFBQSxPQUFBTSxDQUFBLENBQUU4RCxtQkFBbUIsR0FBR1MsQ0FBQSxDQUFFVCxtQkFBbUI7SUFBbkIsQ0FBbUI7SUFBQTtJQUFBdEUsY0FBQSxHQUFBRSxDQUFBO0lBRTVFLE9BQU9nQyxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQ3ZCSyxLQUFBLEVBQU87UUFDTFosRUFBQSxFQUFJWSxLQUFBLENBQU1aLEVBQUU7UUFDWm1ELGVBQUEsRUFBaUJuQyxjQUFBO1FBQ2pCb0MsY0FBQSxFQUFnQnhDLEtBQUEsQ0FBTXdDLGNBQWM7UUFDcENKLGNBQUEsRUFBZ0JwQyxLQUFBLENBQU1vQztNQUN4QjtNQUNBSyxpQkFBQSxFQUFtQmQ7SUFDckI7RUFFRixFQUFFLE9BQU8xRCxLQUFBLEVBQU87SUFBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDZDRCLE9BQUEsQ0FBUXBCLEtBQUssQ0FBQyxnRUFBZ0VBLEtBQUE7SUFBQTtJQUFBVixjQUFBLEdBQUFFLENBQUE7SUFDOUUsT0FBT2dDLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO01BQUUxQixLQUFBLEVBQU87SUFBNkIsR0FDdEM7TUFBRUMsTUFBQSxFQUFRO0lBQUk7RUFFbEI7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==