14b6fda0180607185c640b240ff540ec
// ===================================
// PINTEYA E-COMMERCE - ENTERPRISE METRICS SYSTEM
// ===================================
"use strict";

/* istanbul ignore next */
function cov_1gwtlw1wry() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-metrics.ts";
  var hash = "72f90b217f53d30b8945637ef1b759391233eb7e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-metrics.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 42
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 39
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 36
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "13": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 47
        }
      },
      "14": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 44,
          column: 53
        }
      },
      "15": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "16": {
        start: {
          line: 47,
          column: 17
        },
        end: {
          line: 47,
          column: 21
        }
      },
      "17": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 55,
          column: 1
        }
      },
      "18": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "19": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 63
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 77
        }
      },
      "21": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "22": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 38
        }
      },
      "23": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 34
        }
      },
      "24": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 42
        }
      },
      "25": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 34
        }
      },
      "26": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "27": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 22
        }
      },
      "28": {
        start: {
          line: 64,
          column: 43
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "29": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 58
        }
      },
      "30": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "31": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 52
        }
      },
      "32": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 64
        }
      },
      "33": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 66
        }
      },
      "34": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 34
        }
      },
      "35": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "36": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 32
        }
      },
      "37": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 38
        }
      },
      "38": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 40
        }
      },
      "39": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "40": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 22
        }
      },
      "41": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 36
        }
      },
      "42": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "43": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 32
        }
      },
      "44": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "45": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "46": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 33
        }
      },
      "47": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "48": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 83
        }
      },
      "49": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "50": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "51": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "52": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 44
        }
      },
      "53": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "54": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 43
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 124,
          column: 43
        }
      },
      "56": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "57": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "58": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 89
        }
      },
      "59": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "60": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "61": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 43
        }
      },
      "62": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 168,
          column: 39
        }
      },
      "63": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "64": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "65": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 25
        }
      },
      "66": {
        start: {
          line: 178,
          column: 34
        },
        end: {
          line: 178,
          column: 133
        }
      },
      "67": {
        start: {
          line: 178,
          column: 87
        },
        end: {
          line: 178,
          column: 132
        }
      },
      "68": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "69": {
        start: {
          line: 180,
          column: 36
        },
        end: {
          line: 180,
          column: 71
        }
      },
      "70": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 88
        }
      },
      "71": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "72": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 29
        }
      },
      "73": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 98
        }
      },
      "74": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "75": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 54
        }
      },
      "76": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "77": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 41
        }
      },
      "78": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 42
        }
      },
      "79": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 41
        }
      },
      "80": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 42
        }
      },
      "81": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 43
        }
      },
      "82": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 29
        }
      },
      "83": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 69
        }
      },
      "84": {
        start: {
          line: 217,
          column: 22
        },
        end: {
          line: 217,
          column: 193
        }
      },
      "85": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "86": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "87": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 56
        }
      },
      "88": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 242,
          column: 43
        }
      },
      "89": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "90": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "91": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 254,
          column: 51
        }
      },
      "92": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 26
        }
      },
      "93": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 265,
          column: 21
        }
      },
      "94": {
        start: {
          line: 258,
          column: 24
        },
        end: {
          line: 264,
          column: 27
        }
      },
      "95": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 26
        }
      },
      "96": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 271,
          column: 51
        }
      },
      "97": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 26
        }
      },
      "98": {
        start: {
          line: 275,
          column: 20
        },
        end: {
          line: 277,
          column: 51
        }
      },
      "99": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 26
        }
      },
      "100": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 284,
          column: 43
        }
      },
      "101": {
        start: {
          line: 290,
          column: 25
        },
        end: {
          line: 290,
          column: 93
        }
      },
      "102": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "103": {
        start: {
          line: 293,
          column: 29
        },
        end: {
          line: 293,
          column: 67
        }
      },
      "104": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "105": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 65
        }
      },
      "106": {
        start: {
          line: 298,
          column: 36
        },
        end: {
          line: 303,
          column: 14
        }
      },
      "107": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "108": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 81
        }
      },
      "109": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 30
        }
      },
      "110": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "111": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 75
        }
      },
      "112": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 31
        }
      },
      "113": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 321,
          column: 9
        }
      },
      "114": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "115": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "116": {
        start: {
          line: 323,
          column: 28
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "117": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 36
        }
      },
      "118": {
        start: {
          line: 327,
          column: 29
        },
        end: {
          line: 327,
          column: 67
        }
      },
      "119": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "120": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 144
        }
      },
      "121": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 23
        }
      },
      "122": {
        start: {
          line: 332,
          column: 30
        },
        end: {
          line: 341,
          column: 20
        }
      },
      "123": {
        start: {
          line: 332,
          column: 102
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "124": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "125": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 346,
          column: 47
        }
      },
      "126": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 142
        }
      },
      "127": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 43
        }
      },
      "128": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 375,
          column: 11
        }
      },
      "129": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 392,
          column: 11
        }
      },
      "130": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 409,
          column: 11
        }
      },
      "131": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 416,
          column: 18
        }
      },
      "132": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 415,
          column: 32
        }
      },
      "133": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "134": {
        start: {
          line: 422,
          column: 29
        },
        end: {
          line: 422,
          column: 67
        }
      },
      "135": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "136": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 23
        }
      },
      "137": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 437,
          column: 15
        }
      },
      "138": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 442,
          column: 43
        }
      },
      "139": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 81
        }
      },
      "140": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "141": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 52
        }
      },
      "142": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 55
        }
      },
      "143": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 56
        }
      },
      "144": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 57
        }
      },
      "145": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 52
        }
      },
      "146": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 80
        }
      },
      "147": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "148": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 46
        }
      },
      "149": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 38
        }
      },
      "150": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 28
        }
      },
      "151": {
        start: {
          line: 481,
          column: 26
        },
        end: {
          line: 481,
          column: 66
        }
      },
      "152": {
        start: {
          line: 482,
          column: 32
        },
        end: {
          line: 482,
          column: 97
        }
      },
      "153": {
        start: {
          line: 483,
          column: 29
        },
        end: {
          line: 483,
          column: 91
        }
      },
      "154": {
        start: {
          line: 484,
          column: 29
        },
        end: {
          line: 484,
          column: 91
        }
      },
      "155": {
        start: {
          line: 485,
          column: 35
        },
        end: {
          line: 485,
          column: 103
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 38
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 32
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 35
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 38
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 56,
            column: 32
          }
        },
        loc: {
          start: {
            line: 56,
            column: 52
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 56
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 64,
            column: 44
          }
        },
        loc: {
          start: {
            line: 64,
            column: 76
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 64
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 72,
            column: 31
          },
          end: {
            line: 72,
            column: 32
          }
        },
        loc: {
          start: {
            line: 72,
            column: 52
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 72
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 17
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 80
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 88
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 96,
            column: 6
          },
          end: {
            line: 96,
            column: 7
          }
        },
        loc: {
          start: {
            line: 96,
            column: 101
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 96
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 129,
            column: 6
          },
          end: {
            line: 129,
            column: 7
          }
        },
        loc: {
          start: {
            line: 129,
            column: 77
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 129
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 141,
            column: 6
          },
          end: {
            line: 141,
            column: 7
          }
        },
        loc: {
          start: {
            line: 141,
            column: 62
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 146,
            column: 6
          },
          end: {
            line: 146,
            column: 7
          }
        },
        loc: {
          start: {
            line: 146,
            column: 61
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 146
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 154,
            column: 6
          },
          end: {
            line: 154,
            column: 7
          }
        },
        loc: {
          start: {
            line: 154,
            column: 73
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 154
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 162,
            column: 7
          }
        },
        loc: {
          start: {
            line: 162,
            column: 25
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 162
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 172,
            column: 6
          },
          end: {
            line: 172,
            column: 7
          }
        },
        loc: {
          start: {
            line: 172,
            column: 32
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 172
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 178,
            column: 78
          },
          end: {
            line: 178,
            column: 79
          }
        },
        loc: {
          start: {
            line: 178,
            column: 87
          },
          end: {
            line: 178,
            column: 132
          }
        },
        line: 178
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 195,
            column: 6
          },
          end: {
            line: 195,
            column: 7
          }
        },
        loc: {
          start: {
            line: 195,
            column: 53
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 195
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 213,
            column: 6
          },
          end: {
            line: 213,
            column: 7
          }
        },
        loc: {
          start: {
            line: 213,
            column: 39
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 213
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 247,
            column: 6
          },
          end: {
            line: 247,
            column: 7
          }
        },
        loc: {
          start: {
            line: 247,
            column: 46
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 247
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 289,
            column: 6
          },
          end: {
            line: 289,
            column: 7
          }
        },
        loc: {
          start: {
            line: 289,
            column: 73
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 289
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 292,
            column: 26
          },
          end: {
            line: 292,
            column: 27
          }
        },
        loc: {
          start: {
            line: 292,
            column: 36
          },
          end: {
            line: 308,
            column: 9
          }
        },
        line: 292
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 318,
            column: 6
          },
          end: {
            line: 318,
            column: 7
          }
        },
        loc: {
          start: {
            line: 318,
            column: 27
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 318
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 332,
            column: 91
          },
          end: {
            line: 332,
            column: 92
          }
        },
        loc: {
          start: {
            line: 332,
            column: 102
          },
          end: {
            line: 341,
            column: 17
          }
        },
        line: 332
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 358,
            column: 6
          },
          end: {
            line: 358,
            column: 7
          }
        },
        loc: {
          start: {
            line: 358,
            column: 32
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 358
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 413,
            column: 6
          },
          end: {
            line: 413,
            column: 7
          }
        },
        loc: {
          start: {
            line: 413,
            column: 26
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 413
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 414,
            column: 41
          },
          end: {
            line: 414,
            column: 42
          }
        },
        loc: {
          start: {
            line: 414,
            column: 45
          },
          end: {
            line: 416,
            column: 9
          }
        },
        line: 414
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 420,
            column: 6
          },
          end: {
            line: 420,
            column: 7
          }
        },
        loc: {
          start: {
            line: 420,
            column: 30
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 420
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 447,
            column: 6
          },
          end: {
            line: 447,
            column: 7
          }
        },
        loc: {
          start: {
            line: 447,
            column: 25
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 447
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 452,
            column: 6
          },
          end: {
            line: 452,
            column: 7
          }
        },
        loc: {
          start: {
            line: 452,
            column: 39
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 452
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 468,
            column: 6
          },
          end: {
            line: 468,
            column: 7
          }
        },
        loc: {
          start: {
            line: 468,
            column: 24
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 468
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 473,
            column: 6
          },
          end: {
            line: 473,
            column: 7
          }
        },
        loc: {
          start: {
            line: 473,
            column: 16
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 473
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 0
          },
          end: {
            line: 55,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 0
          },
          end: {
            line: 55,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "2": {
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 96,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 45
          },
          end: {
            line: 96,
            column: 52
          }
        }],
        line: 96
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 54
          },
          end: {
            line: 96,
            column: 78
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 65
          },
          end: {
            line: 96,
            column: 78
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 80
          },
          end: {
            line: 96,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 87
          },
          end: {
            line: 96,
            column: 89
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 121,
            column: 23
          },
          end: {
            line: 121,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 48
          },
          end: {
            line: 121,
            column: 61
          }
        }, {
          start: {
            line: 121,
            column: 64
          },
          end: {
            line: 121,
            column: 79
          }
        }],
        line: 121
      },
      "6": {
        loc: {
          start: {
            line: 129,
            column: 66
          },
          end: {
            line: 129,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 73
          },
          end: {
            line: 129,
            column: 75
          }
        }],
        line: 129
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 40
          },
          end: {
            line: 141,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 141,
            column: 49
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 141,
            column: 51
          },
          end: {
            line: 141,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 141,
            column: 58
          },
          end: {
            line: 141,
            column: 60
          }
        }],
        line: 141
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 50
          },
          end: {
            line: 146,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 146,
            column: 57
          },
          end: {
            line: 146,
            column: 59
          }
        }],
        line: 146
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 62
          },
          end: {
            line: 154,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 154,
            column: 69
          },
          end: {
            line: 154,
            column: 71
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 26
          }
        }, {
          start: {
            line: 157,
            column: 30
          },
          end: {
            line: 157,
            column: 41
          }
        }],
        line: 157
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 174,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 174,
            column: 29
          }
        }, {
          start: {
            line: 174,
            column: 33
          },
          end: {
            line: 174,
            column: 64
          }
        }],
        line: 174
      },
      "14": {
        loc: {
          start: {
            line: 178,
            column: 87
          },
          end: {
            line: 178,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 87
          },
          end: {
            line: 178,
            column: 111
          }
        }, {
          start: {
            line: 178,
            column: 115
          },
          end: {
            line: 178,
            column: 132
          }
        }],
        line: 178
      },
      "15": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "18": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 198,
            column: 41
          }
        }, {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 200,
            column: 42
          }
        }, {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 202,
            column: 41
          }
        }, {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 204,
            column: 42
          }
        }, {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 206,
            column: 43
          }
        }, {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 208,
            column: 29
          }
        }],
        line: 196
      },
      "19": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "20": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 250,
            column: 16
          },
          end: {
            line: 255,
            column: 26
          }
        }, {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 266,
            column: 26
          }
        }, {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 272,
            column: 26
          }
        }, {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 278,
            column: 26
          }
        }],
        line: 249
      },
      "21": {
        loc: {
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 265,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 265,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "22": {
        loc: {
          start: {
            line: 282,
            column: 23
          },
          end: {
            line: 282,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 61
          }
        }, {
          start: {
            line: 282,
            column: 64
          },
          end: {
            line: 282,
            column: 79
          }
        }],
        line: 282
      },
      "23": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "24": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "25": {
        loc: {
          start: {
            line: 307,
            column: 19
          },
          end: {
            line: 307,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 19
          },
          end: {
            line: 307,
            column: 23
          }
        }, {
          start: {
            line: 307,
            column: 27
          },
          end: {
            line: 307,
            column: 29
          }
        }],
        line: 307
      },
      "26": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: 312,
            column: 15
          },
          end: {
            line: 314,
            column: 9
          }
        }],
        line: 310
      },
      "27": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 22
          }
        }, {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 310,
            column: 55
          }
        }],
        line: 310
      },
      "28": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 321,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "29": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "30": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: 347,
            column: 19
          },
          end: {
            line: 349,
            column: 13
          }
        }],
        line: 342
      },
      "31": {
        loc: {
          start: {
            line: 352,
            column: 23
          },
          end: {
            line: 352,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 48
          },
          end: {
            line: 352,
            column: 61
          }
        }, {
          start: {
            line: 352,
            column: 64
          },
          end: {
            line: 352,
            column: 79
          }
        }],
        line: 352
      },
      "32": {
        loc: {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "33": {
        loc: {
          start: {
            line: 440,
            column: 23
          },
          end: {
            line: 440,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 440,
            column: 48
          },
          end: {
            line: 440,
            column: 61
          }
        }, {
          start: {
            line: 440,
            column: 64
          },
          end: {
            line: 440,
            column: 79
          }
        }],
        line: 440
      },
      "34": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 455,
            column: 52
          }
        }, {
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 457,
            column: 55
          }
        }, {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 459,
            column: 56
          }
        }, {
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 461,
            column: 57
          }
        }, {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 463,
            column: 52
          }
        }],
        line: 453
      },
      "35": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0, 0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\monitoring\\enterprise-metrics.ts"],
      sourcesContent: ["// ===================================\r\n// PINTEYA E-COMMERCE - ENTERPRISE METRICS SYSTEM\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\nimport { getSupabaseClient } from '@/lib/integrations/supabase';\r\nimport { enterpriseAlertSystem, AlertLevel as AlertSystemLevel } from './alert-system';\r\n\r\n// \u2705 IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente\r\nlet CacheUtils: any = null;\r\nif (typeof window === 'undefined') {\r\n  // Solo en servidor\r\n  try {\r\n    CacheUtils = require('@/lib/cache-manager').CacheUtils;\r\n  } catch (error) {\r\n    console.warn('[EnterpriseMetrics] CacheUtils not available:', error);\r\n  }\r\n}\r\n\r\n// Tipos de m\xE9tricas enterprise\r\nexport enum MetricType {\r\n  COUNTER = 'counter',           // Contador incremental\r\n  GAUGE = 'gauge',              // Valor actual\r\n  HISTOGRAM = 'histogram',       // Distribuci\xF3n de valores\r\n  TIMER = 'timer',              // Medici\xF3n de tiempo\r\n  RATE = 'rate'                 // Tasa por unidad de tiempo\r\n}\r\n\r\n// Categor\xEDas de m\xE9tricas de negocio\r\nexport enum BusinessMetricCategory {\r\n  PERFORMANCE = 'performance',\r\n  SECURITY = 'security',\r\n  BUSINESS = 'business',\r\n  INFRASTRUCTURE = 'infrastructure',\r\n  USER_EXPERIENCE = 'user_experience'\r\n}\r\n\r\n// Niveles de alerta\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning',\r\n  CRITICAL = 'critical',\r\n  EMERGENCY = 'emergency'\r\n}\r\n\r\n// M\xE9trica enterprise\r\nexport interface EnterpriseMetric {\r\n  id: string;\r\n  name: string;\r\n  type: MetricType;\r\n  category: BusinessMetricCategory;\r\n  value: number;\r\n  timestamp: string;\r\n  tags: Record<string, string>;\r\n  metadata?: Record<string, any>;\r\n  aggregationPeriod?: string; // '1m', '5m', '1h', '1d'\r\n}\r\n\r\n// Configuraci\xF3n de alerta\r\nexport interface AlertRule {\r\n  id: string;\r\n  metricName: string;\r\n  condition: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\r\n  threshold: number;\r\n  level: AlertLevel;\r\n  enabled: boolean;\r\n  cooldownMinutes: number;\r\n  description: string;\r\n  actions: AlertAction[];\r\n}\r\n\r\n// Acci\xF3n de alerta\r\nexport interface AlertAction {\r\n  type: 'email' | 'webhook' | 'log' | 'slack';\r\n  config: Record<string, any>;\r\n}\r\n\r\n// Alerta activa\r\nexport interface ActiveAlert {\r\n  id: string;\r\n  ruleId: string;\r\n  metricName: string;\r\n  level: AlertLevel;\r\n  message: string;\r\n  value: number;\r\n  threshold: number;\r\n  triggeredAt: string;\r\n  resolvedAt?: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Agregaci\xF3n temporal\r\nexport interface MetricAggregation {\r\n  period: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  count: number;\r\n  sum: number;\r\n  avg: number;\r\n  min: number;\r\n  max: number;\r\n  p50: number;\r\n  p95: number;\r\n  p99: number;\r\n}\r\n\r\n/**\r\n * Sistema de M\xE9tricas Enterprise con agregaci\xF3n temporal y alertas\r\n */\r\nexport class EnterpriseMetricsCollector {\r\n  private static instance: EnterpriseMetricsCollector;\r\n  private alertRules: Map<string, AlertRule> = new Map();\r\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\r\n  private metricsBuffer: EnterpriseMetric[] = [];\r\n  private flushInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.initializeDefaultAlerts();\r\n    this.startMetricsFlush();\r\n  }\r\n\r\n  static getInstance(): EnterpriseMetricsCollector {\r\n    if (!EnterpriseMetricsCollector.instance) {\r\n      EnterpriseMetricsCollector.instance = new EnterpriseMetricsCollector();\r\n    }\r\n    return EnterpriseMetricsCollector.instance;\r\n  }\r\n\r\n  /**\r\n   * Registra una m\xE9trica enterprise\r\n   */\r\n  async recordMetric(\r\n    name: string,\r\n    value: number,\r\n    type: MetricType = MetricType.GAUGE,\r\n    category: BusinessMetricCategory = BusinessMetricCategory.PERFORMANCE,\r\n    tags: Record<string, string> = {},\r\n    metadata?: Record<string, any>\r\n  ): Promise<void> {\r\n    try {\r\n      const metric: EnterpriseMetric = {\r\n        id: this.generateMetricId(),\r\n        name,\r\n        type,\r\n        category,\r\n        value,\r\n        timestamp: new Date().toISOString(),\r\n        tags,\r\n        metadata\r\n      };\r\n\r\n      // Agregar a buffer para flush batch\r\n      this.metricsBuffer.push(metric);\r\n\r\n      // Verificar alertas\r\n      await this.checkAlerts(metric);\r\n\r\n      // Log para debugging\r\n      logger.debug(LogLevel.DEBUG, `Metric recorded: ${name}`, {\r\n        value,\r\n        type,\r\n        category,\r\n        tags\r\n      }, LogCategory.SYSTEM);\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to record metric: ${name}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        value,\r\n        type\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * M\xE9tricas de performance espec\xEDficas\r\n   */\r\n  async recordPerformanceMetric(\r\n    operation: string,\r\n    duration: number,\r\n    success: boolean,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `performance.${operation}.duration`,\r\n      duration,\r\n      MetricType.TIMER,\r\n      BusinessMetricCategory.PERFORMANCE,\r\n      { ...tags, success: success.toString() }\r\n    );\r\n\r\n    await this.recordMetric(\r\n      `performance.${operation}.count`,\r\n      1,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.PERFORMANCE,\r\n      { ...tags, success: success.toString() }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * M\xE9tricas de negocio espec\xEDficas\r\n   */\r\n  async recordBusinessMetric(\r\n    event: string,\r\n    value: number = 1,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `business.${event}`,\r\n      value,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.BUSINESS,\r\n      tags\r\n    );\r\n  }\r\n\r\n  /**\r\n   * M\xE9tricas de seguridad espec\xEDficas\r\n   */\r\n  async recordSecurityMetric(\r\n    event: string,\r\n    severity: 'low' | 'medium' | 'high' | 'critical',\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `security.${event}`,\r\n      1,\r\n      MetricType.COUNTER,\r\n      BusinessMetricCategory.SECURITY,\r\n      { ...tags, severity }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * M\xE9tricas de experiencia de usuario\r\n   */\r\n  async recordUserExperienceMetric(\r\n    metric: string,\r\n    value: number,\r\n    userId?: string,\r\n    tags: Record<string, string> = {}\r\n  ): Promise<void> {\r\n    await this.recordMetric(\r\n      `ux.${metric}`,\r\n      value,\r\n      MetricType.GAUGE,\r\n      BusinessMetricCategory.USER_EXPERIENCE,\r\n      { ...tags, userId: userId || 'anonymous' }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Configura una regla de alerta\r\n   */\r\n  setAlertRule(rule: AlertRule): void {\r\n    this.alertRules.set(rule.id, rule);\r\n    logger.info(LogLevel.INFO, `Alert rule configured: ${rule.id}`, {\r\n      metricName: rule.metricName,\r\n      threshold: rule.threshold,\r\n      level: rule.level\r\n    }, LogCategory.SYSTEM);\r\n  }\r\n\r\n  /**\r\n   * Verifica alertas para una m\xE9trica\r\n   */\r\n  private async checkAlerts(metric: EnterpriseMetric): Promise<void> {\r\n    for (const rule of this.alertRules.values()) {\r\n      if (!rule.enabled || rule.metricName !== metric.name) {\r\n        continue;\r\n      }\r\n\r\n      // Verificar si ya hay una alerta activa en cooldown\r\n      const existingAlert = Array.from(this.activeAlerts.values())\r\n        .find(alert => alert.ruleId === rule.id && !alert.resolvedAt);\r\n\r\n      if (existingAlert) {\r\n        const cooldownEnd = new Date(existingAlert.triggeredAt);\r\n        cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);\r\n        \r\n        if (new Date() < cooldownEnd) {\r\n          continue; // A\xFAn en cooldown\r\n        }\r\n      }\r\n\r\n      // Evaluar condici\xF3n\r\n      const triggered = this.evaluateCondition(metric.value, rule.condition, rule.threshold);\r\n\r\n      if (triggered) {\r\n        await this.triggerAlert(rule, metric);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eval\xFAa condici\xF3n de alerta\r\n   */\r\n  private evaluateCondition(value: number, condition: string, threshold: number): boolean {\r\n    switch (condition) {\r\n      case 'gt': return value > threshold;\r\n      case 'gte': return value >= threshold;\r\n      case 'lt': return value < threshold;\r\n      case 'lte': return value <= threshold;\r\n      case 'eq': return value === threshold;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispara una alerta usando el sistema enterprise\r\n   */\r\n  private async triggerAlert(rule: AlertRule, metric: EnterpriseMetric): Promise<void> {\r\n    // Convertir nivel de alerta al sistema enterprise\r\n    const alertLevel = this.convertToAlertSystemLevel(rule.level);\r\n\r\n    // Usar el sistema de alertas enterprise\r\n    const alert = await enterpriseAlertSystem.triggerAlert(\r\n      rule.id,\r\n      rule.metricName,\r\n      metric.value,\r\n      `${rule.description} - Value: ${metric.value}, Threshold: ${rule.threshold}`\r\n    );\r\n\r\n    if (alert) {\r\n      // Mantener referencia local para compatibilidad\r\n      const localAlert: ActiveAlert = {\r\n        id: alert.id,\r\n        ruleId: alert.ruleId,\r\n        metricName: alert.metricName,\r\n        level: rule.level,\r\n        message: alert.message,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggeredAt: alert.triggeredAt,\r\n        metadata: {\r\n          metric: metric,\r\n          rule: rule\r\n        }\r\n      };\r\n\r\n      this.activeAlerts.set(alert.id, localAlert);\r\n\r\n      // Log alerta\r\n      logger.warn(LogLevel.WARN, `Alert triggered via enterprise system: ${rule.id}`, {\r\n        alertId: alert.id,\r\n        level: alert.level,\r\n        metricName: alert.metricName,\r\n        value: alert.value,\r\n        threshold: alert.threshold\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta acci\xF3n de alerta\r\n   */\r\n  private async executeAlertAction(action: AlertAction, alert: ActiveAlert): Promise<void> {\r\n    try {\r\n      switch (action.type) {\r\n        case 'log':\r\n          logger.error(LogLevel.ERROR, `ALERT: ${alert.message}`, {\r\n            alertId: alert.id,\r\n            level: alert.level\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n\r\n        case 'webhook':\r\n          if (action.config.url) {\r\n            await fetch(action.config.url, {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(alert)\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'email':\r\n          // TODO: Implementar env\xEDo de email\r\n          logger.info(LogLevel.INFO, `Email alert would be sent to: ${action.config.to}`, {\r\n            alertId: alert.id\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n\r\n        case 'slack':\r\n          // TODO: Implementar notificaci\xF3n Slack\r\n          logger.info(LogLevel.INFO, `Slack alert would be sent to: ${action.config.channel}`, {\r\n            alertId: alert.id\r\n          }, LogCategory.SYSTEM);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, `Failed to execute alert action: ${action.type}`, {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene m\xE9tricas agregadas\r\n   */\r\n  async getAggregatedMetrics(\r\n    metricName: string,\r\n    period: '1m' | '5m' | '1h' | '1d' | '7d',\r\n    startTime: string,\r\n    endTime: string\r\n  ): Promise<MetricAggregation[]> {\r\n    const cacheKey = `metrics:aggregated:${metricName}:${period}:${startTime}:${endTime}`;\r\n    \r\n    // \u2705 CACHE CONDICIONAL: Solo usar cache en servidor\r\n    const fetchData = async () => {\r\n      const supabase = getSupabaseClient(true);\r\n\r\n      if (!supabase) {\r\n        throw new Error('Supabase client not available');\r\n      }\r\n\r\n      // Query con agregaci\xF3n SQL\r\n      const { data, error } = await supabase.rpc('aggregate_metrics', {\r\n        metric_name: metricName,\r\n        period_interval: period,\r\n        start_time: startTime,\r\n        end_time: endTime\r\n      });\r\n\r\n      if (error) {\r\n        throw new Error(`Failed to aggregate metrics: ${error.message}`);\r\n      }\r\n\r\n      return data || [];\r\n    };\r\n\r\n    // Usar cache solo si est\xE1 disponible (servidor)\r\n    if (CacheUtils && typeof window === 'undefined') {\r\n      return CacheUtils.cacheMetricsAggregation(cacheKey, fetchData);\r\n    } else {\r\n      return fetchData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush m\xE9tricas a base de datos\r\n   */\r\n  private async flushMetrics(): Promise<void> {\r\n    if (this.metricsBuffer.length === 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const metrics = [...this.metricsBuffer];\r\n      this.metricsBuffer = [];\r\n\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {\r\n        logger.error(LogLevel.ERROR, 'Supabase client not available for metrics flush', {}, LogCategory.SYSTEM);\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('enterprise_metrics')\r\n        .insert(metrics.map(metric => ({\r\n          id: metric.id,\r\n          name: metric.name,\r\n          type: metric.type,\r\n          category: metric.category,\r\n          value: metric.value,\r\n          timestamp: metric.timestamp,\r\n          tags: metric.tags,\r\n          metadata: metric.metadata\r\n        })));\r\n\r\n      if (error) {\r\n        logger.error(LogLevel.ERROR, 'Failed to flush metrics to database', {\r\n          error: error.message,\r\n          metricsCount: metrics.length\r\n        }, LogCategory.SYSTEM);\r\n      } else {\r\n        logger.debug(LogLevel.DEBUG, `Flushed ${metrics.length} metrics to database`, {}, LogCategory.SYSTEM);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Error during metrics flush', {\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inicializa alertas por defecto\r\n   */\r\n  private initializeDefaultAlerts(): void {\r\n    // Alerta de response time alto\r\n    this.setAlertRule({\r\n      id: 'high_response_time',\r\n      metricName: 'performance.api.duration',\r\n      condition: 'gt',\r\n      threshold: 5000, // 5 segundos\r\n      level: AlertLevel.WARNING,\r\n      enabled: true,\r\n      cooldownMinutes: 5,\r\n      description: 'API response time is too high',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n\r\n    // Alerta de error rate alto\r\n    this.setAlertRule({\r\n      id: 'high_error_rate',\r\n      metricName: 'performance.api.error_rate',\r\n      condition: 'gt',\r\n      threshold: 0.05, // 5%\r\n      level: AlertLevel.CRITICAL,\r\n      enabled: true,\r\n      cooldownMinutes: 2,\r\n      description: 'API error rate is too high',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n\r\n    // Alerta de violaciones de seguridad\r\n    this.setAlertRule({\r\n      id: 'security_violations',\r\n      metricName: 'security.violation',\r\n      condition: 'gte',\r\n      threshold: 1,\r\n      level: AlertLevel.EMERGENCY,\r\n      enabled: true,\r\n      cooldownMinutes: 1,\r\n      description: 'Security violation detected',\r\n      actions: [{ type: 'log', config: {} }]\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inicia flush autom\xE1tico de m\xE9tricas\r\n   */\r\n  private startMetricsFlush(): void {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushMetrics();\r\n    }, 30000); // Flush cada 30 segundos\r\n  }\r\n\r\n  /**\r\n   * Almacena alerta en base de datos\r\n   */\r\n  private async storeAlert(alert: ActiveAlert): Promise<void> {\r\n    try {\r\n      const supabase = getSupabaseClient(true);\r\n      if (!supabase) {return;}\r\n\r\n      await supabase.from('enterprise_alerts').insert({\r\n        id: alert.id,\r\n        rule_id: alert.ruleId,\r\n        metric_name: alert.metricName,\r\n        level: alert.level,\r\n        message: alert.message,\r\n        value: alert.value,\r\n        threshold: alert.threshold,\r\n        triggered_at: alert.triggeredAt,\r\n        resolved_at: alert.resolvedAt,\r\n        metadata: alert.metadata\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogLevel.ERROR, 'Failed to store alert', {\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        alertId: alert.id\r\n      }, LogCategory.SYSTEM);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera ID \xFAnico para m\xE9trica\r\n   */\r\n  private generateMetricId(): string {\r\n    return `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Convierte nivel de alerta al sistema enterprise\r\n   */\r\n  private convertToAlertSystemLevel(level: AlertLevel): AlertSystemLevel {\r\n    switch (level) {\r\n      case AlertLevel.INFO:\r\n        return AlertSystemLevel.INFO;\r\n      case AlertLevel.WARNING:\r\n        return AlertSystemLevel.WARNING;\r\n      case AlertLevel.CRITICAL:\r\n        return AlertSystemLevel.CRITICAL;\r\n      case AlertLevel.EMERGENCY:\r\n        return AlertSystemLevel.EMERGENCY;\r\n      default:\r\n        return AlertSystemLevel.INFO;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera ID \xFAnico para alerta\r\n   */\r\n  private generateAlertId(): string {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Limpia recursos\r\n   */\r\n  destroy(): void {\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n      this.flushInterval = null;\r\n    }\r\n    this.flushMetrics(); // Flush final\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const enterpriseMetrics = EnterpriseMetricsCollector.getInstance();\r\n\r\n// Funciones de conveniencia\r\nexport const recordPerformanceMetric = enterpriseMetrics.recordPerformanceMetric.bind(enterpriseMetrics);\r\nexport const recordBusinessMetric = enterpriseMetrics.recordBusinessMetric.bind(enterpriseMetrics);\r\nexport const recordSecurityMetric = enterpriseMetrics.recordSecurityMetric.bind(enterpriseMetrics);\r\nexport const recordUserExperienceMetric = enterpriseMetrics.recordUserExperienceMetric.bind(enterpriseMetrics);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["AlertLevel", "BusinessMetricCategory", "EnterpriseMetricsCollector", "MetricType", "enterpriseMetrics", "recordBusinessMetric", "recordPerformanceMetric", "recordSecurityMetric", "recordUserExperienceMetric", "CacheUtils", "window", "require", "error", "console", "warn", "alertRules", "Map", "activeAlerts", "metricsBuffer", "flushInterval", "initializeDefaultAlerts", "startMetricsFlush", "getInstance", "instance", "recordMetric", "name", "value", "type", "category", "tags", "metadata", "metric", "id", "generateMetricId", "timestamp", "Date", "toISOString", "push", "checkAlerts", "logger", "debug", "LogLevel", "DEBUG", "LogCategory", "SYSTEM", "ERROR", "Error", "message", "operation", "duration", "success", "toString", "event", "severity", "userId", "setAlertRule", "rule", "set", "info", "INFO", "metricName", "threshold", "level", "values", "enabled", "existingAlert", "Array", "from", "find", "alert", "ruleId", "resolvedAt", "cooldownEnd", "triggeredAt", "setMinutes", "getMinutes", "cooldownMinutes", "triggered", "evaluateCondition", "condition", "triggerAlert", "alertLevel", "convertToAlertSystemLevel", "enterpriseAlertSystem", "description", "localAlert", "WARN", "alertId", "executeAlertAction", "action", "config", "url", "fetch", "method", "headers", "body", "JSON", "stringify", "to", "channel", "getAggregatedMetrics", "period", "startTime", "endTime", "cacheKey", "fetchData", "supabase", "getSupabaseClient", "data", "rpc", "metric_name", "period_interval", "start_time", "end_time", "cacheMetricsAggregation", "flushMetrics", "length", "metrics", "insert", "map", "metricsCount", "actions", "setInterval", "storeAlert", "rule_id", "triggered_at", "resolved_at", "now", "Math", "random", "substr", "AlertSystemLevel", "WARNING", "CRITICAL", "EMERGENCY", "generateAlertId", "destroy", "clearInterval", "bind"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72f90b217f53d30b8945637ef1b759391233eb7e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gwtlw1wry = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gwtlw1wry();
cov_1gwtlw1wry().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1gwtlw1wry().f[0]++;
  cov_1gwtlw1wry().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1gwtlw1wry().s[3]++;
_export(exports, {
  get AlertLevel() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[1]++;
    cov_1gwtlw1wry().s[4]++;
    return AlertLevel;
  },
  get BusinessMetricCategory() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[2]++;
    cov_1gwtlw1wry().s[5]++;
    return BusinessMetricCategory;
  },
  get EnterpriseMetricsCollector() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[3]++;
    cov_1gwtlw1wry().s[6]++;
    return EnterpriseMetricsCollector;
  },
  get MetricType() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[4]++;
    cov_1gwtlw1wry().s[7]++;
    return MetricType;
  },
  get enterpriseMetrics() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[5]++;
    cov_1gwtlw1wry().s[8]++;
    return enterpriseMetrics;
  },
  get recordBusinessMetric() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[6]++;
    cov_1gwtlw1wry().s[9]++;
    return recordBusinessMetric;
  },
  get recordPerformanceMetric() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[7]++;
    cov_1gwtlw1wry().s[10]++;
    return recordPerformanceMetric;
  },
  get recordSecurityMetric() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[8]++;
    cov_1gwtlw1wry().s[11]++;
    return recordSecurityMetric;
  },
  get recordUserExperienceMetric() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[9]++;
    cov_1gwtlw1wry().s[12]++;
    return recordUserExperienceMetric;
  }
});
const _logger =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[13]++, require("../enterprise/logger"));
const _supabase =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[14]++, require("../integrations/supabase"));
const _alertsystem =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[15]++, require("./alert-system"));
// ✅ IMPORT CONDICIONAL: Solo cargar CacheUtils en servidor para evitar errores de ioredis en cliente
let CacheUtils =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[16]++, null);
/* istanbul ignore next */
cov_1gwtlw1wry().s[17]++;
if (typeof window === 'undefined') {
  /* istanbul ignore next */
  cov_1gwtlw1wry().b[0][0]++;
  cov_1gwtlw1wry().s[18]++;
  // Solo en servidor
  try {
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[19]++;
    CacheUtils = require('@/lib/cache-manager').CacheUtils;
  } catch (error) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[20]++;
    console.warn('[EnterpriseMetrics] CacheUtils not available:', error);
  }
} else
/* istanbul ignore next */
{
  cov_1gwtlw1wry().b[0][1]++;
}
var MetricType =
/* istanbul ignore next */
(/*#__PURE__*/cov_1gwtlw1wry().s[21]++, function (MetricType) {
  /* istanbul ignore next */
  cov_1gwtlw1wry().f[10]++;
  cov_1gwtlw1wry().s[22]++;
  MetricType["COUNTER"] = "counter";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[23]++;
  MetricType["GAUGE"] = "gauge";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[24]++;
  MetricType["HISTOGRAM"] = "histogram";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[25]++;
  MetricType["TIMER"] = "timer";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[26]++;
  MetricType["RATE"] = "rate"; // Tasa por unidad de tiempo
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[27]++;
  return MetricType;
}({}));
var BusinessMetricCategory =
/* istanbul ignore next */
(/*#__PURE__*/cov_1gwtlw1wry().s[28]++, function (BusinessMetricCategory) {
  /* istanbul ignore next */
  cov_1gwtlw1wry().f[11]++;
  cov_1gwtlw1wry().s[29]++;
  BusinessMetricCategory["PERFORMANCE"] = "performance";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[30]++;
  BusinessMetricCategory["SECURITY"] = "security";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[31]++;
  BusinessMetricCategory["BUSINESS"] = "business";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[32]++;
  BusinessMetricCategory["INFRASTRUCTURE"] = "infrastructure";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[33]++;
  BusinessMetricCategory["USER_EXPERIENCE"] = "user_experience";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[34]++;
  return BusinessMetricCategory;
}({}));
var AlertLevel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1gwtlw1wry().s[35]++, function (AlertLevel) {
  /* istanbul ignore next */
  cov_1gwtlw1wry().f[12]++;
  cov_1gwtlw1wry().s[36]++;
  AlertLevel["INFO"] = "info";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[37]++;
  AlertLevel["WARNING"] = "warning";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[38]++;
  AlertLevel["CRITICAL"] = "critical";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[39]++;
  AlertLevel["EMERGENCY"] = "emergency";
  /* istanbul ignore next */
  cov_1gwtlw1wry().s[40]++;
  return AlertLevel;
}({}));
class EnterpriseMetricsCollector {
  constructor() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[13]++;
    cov_1gwtlw1wry().s[41]++;
    this.alertRules = new Map();
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[42]++;
    this.activeAlerts = new Map();
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[43]++;
    this.metricsBuffer = [];
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[44]++;
    this.flushInterval = null;
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[45]++;
    this.initializeDefaultAlerts();
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[46]++;
    this.startMetricsFlush();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[14]++;
    cov_1gwtlw1wry().s[47]++;
    if (!EnterpriseMetricsCollector.instance) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[1][0]++;
      cov_1gwtlw1wry().s[48]++;
      EnterpriseMetricsCollector.instance = new EnterpriseMetricsCollector();
    } else
    /* istanbul ignore next */
    {
      cov_1gwtlw1wry().b[1][1]++;
    }
    cov_1gwtlw1wry().s[49]++;
    return EnterpriseMetricsCollector.instance;
  }
  /**
  * Registra una métrica enterprise
  */
  async recordMetric(name, value, type =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[2][0]++, "gauge"), category =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[3][0]++, "performance"), tags =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[4][0]++, {}), metadata) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[15]++;
    cov_1gwtlw1wry().s[50]++;
    try {
      const metric =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[51]++, {
        id: this.generateMetricId(),
        name,
        type,
        category,
        value,
        timestamp: new Date().toISOString(),
        tags,
        metadata
      });
      // Agregar a buffer para flush batch
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[52]++;
      this.metricsBuffer.push(metric);
      // Verificar alertas
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[53]++;
      await this.checkAlerts(metric);
      // Log para debugging
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[54]++;
      _logger.logger.debug(_logger.LogLevel.DEBUG, `Metric recorded: ${name}`, {
        value,
        type,
        category,
        tags
      }, _logger.LogCategory.SYSTEM);
    } catch (error) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[55]++;
      _logger.logger.error(_logger.LogLevel.ERROR, `Failed to record metric: ${name}`, {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[5][1]++, 'Unknown error'),
        value,
        type
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Métricas de performance específicas
  */
  async recordPerformanceMetric(operation, duration, success, tags =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[6][0]++, {})) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[16]++;
    cov_1gwtlw1wry().s[56]++;
    await this.recordMetric(`performance.${operation}.duration`, duration, "timer", "performance", {
      ...tags,
      success: success.toString()
    });
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[57]++;
    await this.recordMetric(`performance.${operation}.count`, 1, "counter", "performance", {
      ...tags,
      success: success.toString()
    });
  }
  /**
  * Métricas de negocio específicas
  */
  async recordBusinessMetric(event, value =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[7][0]++, 1), tags =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[17]++;
    cov_1gwtlw1wry().s[58]++;
    await this.recordMetric(`business.${event}`, value, "counter", "business", tags);
  }
  /**
  * Métricas de seguridad específicas
  */
  async recordSecurityMetric(event, severity, tags =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[18]++;
    cov_1gwtlw1wry().s[59]++;
    await this.recordMetric(`security.${event}`, 1, "counter", "security", {
      ...tags,
      severity
    });
  }
  /**
  * Métricas de experiencia de usuario
  */
  async recordUserExperienceMetric(metric, value, userId, tags =
  /* istanbul ignore next */
  (cov_1gwtlw1wry().b[10][0]++, {})) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[19]++;
    cov_1gwtlw1wry().s[60]++;
    await this.recordMetric(`ux.${metric}`, value, "gauge", "user_experience", {
      ...tags,
      userId:
      /* istanbul ignore next */
      (cov_1gwtlw1wry().b[11][0]++, userId) ||
      /* istanbul ignore next */
      (cov_1gwtlw1wry().b[11][1]++, 'anonymous')
    });
  }
  /**
  * Configura una regla de alerta
  */
  setAlertRule(rule) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[20]++;
    cov_1gwtlw1wry().s[61]++;
    this.alertRules.set(rule.id, rule);
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[62]++;
    _logger.logger.info(_logger.LogLevel.INFO, `Alert rule configured: ${rule.id}`, {
      metricName: rule.metricName,
      threshold: rule.threshold,
      level: rule.level
    }, _logger.LogCategory.SYSTEM);
  }
  /**
  * Verifica alertas para una métrica
  */
  async checkAlerts(metric) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[21]++;
    cov_1gwtlw1wry().s[63]++;
    for (const rule of this.alertRules.values()) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[64]++;
      if (
      /* istanbul ignore next */
      (cov_1gwtlw1wry().b[13][0]++, !rule.enabled) ||
      /* istanbul ignore next */
      (cov_1gwtlw1wry().b[13][1]++, rule.metricName !== metric.name)) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[12][0]++;
        cov_1gwtlw1wry().s[65]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[12][1]++;
      }
      // Verificar si ya hay una alerta activa en cooldown
      const existingAlert =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[66]++, Array.from(this.activeAlerts.values()).find(alert => {
        /* istanbul ignore next */
        cov_1gwtlw1wry().f[22]++;
        cov_1gwtlw1wry().s[67]++;
        return /* istanbul ignore next */(cov_1gwtlw1wry().b[14][0]++, alert.ruleId === rule.id) &&
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[14][1]++, !alert.resolvedAt);
      }));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[68]++;
      if (existingAlert) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[15][0]++;
        const cooldownEnd =
        /* istanbul ignore next */
        (cov_1gwtlw1wry().s[69]++, new Date(existingAlert.triggeredAt));
        /* istanbul ignore next */
        cov_1gwtlw1wry().s[70]++;
        cooldownEnd.setMinutes(cooldownEnd.getMinutes() + rule.cooldownMinutes);
        /* istanbul ignore next */
        cov_1gwtlw1wry().s[71]++;
        if (new Date() < cooldownEnd) {
          /* istanbul ignore next */
          cov_1gwtlw1wry().b[16][0]++;
          cov_1gwtlw1wry().s[72]++;
          continue; // Aún en cooldown
        } else
        /* istanbul ignore next */
        {
          cov_1gwtlw1wry().b[16][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[15][1]++;
      }
      // Evaluar condición
      const triggered =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[73]++, this.evaluateCondition(metric.value, rule.condition, rule.threshold));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[74]++;
      if (triggered) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[17][0]++;
        cov_1gwtlw1wry().s[75]++;
        await this.triggerAlert(rule, metric);
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[17][1]++;
      }
    }
  }
  /**
  * Evalúa condición de alerta
  */
  evaluateCondition(value, condition, threshold) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[23]++;
    cov_1gwtlw1wry().s[76]++;
    switch (condition) {
      case 'gt':
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][0]++;
        cov_1gwtlw1wry().s[77]++;
        return value > threshold;
      case 'gte':
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][1]++;
        cov_1gwtlw1wry().s[78]++;
        return value >= threshold;
      case 'lt':
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][2]++;
        cov_1gwtlw1wry().s[79]++;
        return value < threshold;
      case 'lte':
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][3]++;
        cov_1gwtlw1wry().s[80]++;
        return value <= threshold;
      case 'eq':
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][4]++;
        cov_1gwtlw1wry().s[81]++;
        return value === threshold;
      default:
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[18][5]++;
        cov_1gwtlw1wry().s[82]++;
        return false;
    }
  }
  /**
  * Dispara una alerta usando el sistema enterprise
  */
  async triggerAlert(rule, metric) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[24]++;
    // Convertir nivel de alerta al sistema enterprise
    const alertLevel =
    /* istanbul ignore next */
    (cov_1gwtlw1wry().s[83]++, this.convertToAlertSystemLevel(rule.level));
    // Usar el sistema de alertas enterprise
    const alert =
    /* istanbul ignore next */
    (cov_1gwtlw1wry().s[84]++, await _alertsystem.enterpriseAlertSystem.triggerAlert(rule.id, rule.metricName, metric.value, `${rule.description} - Value: ${metric.value}, Threshold: ${rule.threshold}`));
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[85]++;
    if (alert) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[19][0]++;
      // Mantener referencia local para compatibilidad
      const localAlert =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[86]++, {
        id: alert.id,
        ruleId: alert.ruleId,
        metricName: alert.metricName,
        level: rule.level,
        message: alert.message,
        value: alert.value,
        threshold: alert.threshold,
        triggeredAt: alert.triggeredAt,
        metadata: {
          metric: metric,
          rule: rule
        }
      });
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[87]++;
      this.activeAlerts.set(alert.id, localAlert);
      // Log alerta
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[88]++;
      _logger.logger.warn(_logger.LogLevel.WARN, `Alert triggered via enterprise system: ${rule.id}`, {
        alertId: alert.id,
        level: alert.level,
        metricName: alert.metricName,
        value: alert.value,
        threshold: alert.threshold
      }, _logger.LogCategory.SYSTEM);
    } else
    /* istanbul ignore next */
    {
      cov_1gwtlw1wry().b[19][1]++;
    }
  }
  /**
  * Ejecuta acción de alerta
  */
  async executeAlertAction(action, alert) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[25]++;
    cov_1gwtlw1wry().s[89]++;
    try {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[90]++;
      switch (action.type) {
        case 'log':
          /* istanbul ignore next */
          cov_1gwtlw1wry().b[20][0]++;
          cov_1gwtlw1wry().s[91]++;
          _logger.logger.error(_logger.LogLevel.ERROR, `ALERT: ${alert.message}`, {
            alertId: alert.id,
            level: alert.level
          }, _logger.LogCategory.SYSTEM);
          /* istanbul ignore next */
          cov_1gwtlw1wry().s[92]++;
          break;
        case 'webhook':
          /* istanbul ignore next */
          cov_1gwtlw1wry().b[20][1]++;
          cov_1gwtlw1wry().s[93]++;
          if (action.config.url) {
            /* istanbul ignore next */
            cov_1gwtlw1wry().b[21][0]++;
            cov_1gwtlw1wry().s[94]++;
            await fetch(action.config.url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(alert)
            });
          } else
          /* istanbul ignore next */
          {
            cov_1gwtlw1wry().b[21][1]++;
          }
          cov_1gwtlw1wry().s[95]++;
          break;
        case 'email':
          /* istanbul ignore next */
          cov_1gwtlw1wry().b[20][2]++;
          cov_1gwtlw1wry().s[96]++;
          // TODO: Implementar envío de email
          _logger.logger.info(_logger.LogLevel.INFO, `Email alert would be sent to: ${action.config.to}`, {
            alertId: alert.id
          }, _logger.LogCategory.SYSTEM);
          /* istanbul ignore next */
          cov_1gwtlw1wry().s[97]++;
          break;
        case 'slack':
          /* istanbul ignore next */
          cov_1gwtlw1wry().b[20][3]++;
          cov_1gwtlw1wry().s[98]++;
          // TODO: Implementar notificación Slack
          _logger.logger.info(_logger.LogLevel.INFO, `Slack alert would be sent to: ${action.config.channel}`, {
            alertId: alert.id
          }, _logger.LogCategory.SYSTEM);
          /* istanbul ignore next */
          cov_1gwtlw1wry().s[99]++;
          break;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[100]++;
      _logger.logger.error(_logger.LogLevel.ERROR, `Failed to execute alert action: ${action.type}`, {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[22][1]++, 'Unknown error'),
        alertId: alert.id
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Obtiene métricas agregadas
  */
  async getAggregatedMetrics(metricName, period, startTime, endTime) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[26]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1gwtlw1wry().s[101]++, `metrics:aggregated:${metricName}:${period}:${startTime}:${endTime}`);
    // ✅ CACHE CONDICIONAL: Solo usar cache en servidor
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[102]++;
    const fetchData = async () => {
      /* istanbul ignore next */
      cov_1gwtlw1wry().f[27]++;
      const supabase =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[103]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[104]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[23][0]++;
        cov_1gwtlw1wry().s[105]++;
        throw new Error('Supabase client not available');
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[23][1]++;
      }
      // Query con agregación SQL
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[106]++, await supabase.rpc('aggregate_metrics', {
        metric_name: metricName,
        period_interval: period,
        start_time: startTime,
        end_time: endTime
      }));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[107]++;
      if (error) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[24][0]++;
        cov_1gwtlw1wry().s[108]++;
        throw new Error(`Failed to aggregate metrics: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[24][1]++;
      }
      cov_1gwtlw1wry().s[109]++;
      return /* istanbul ignore next */(cov_1gwtlw1wry().b[25][0]++, data) ||
      /* istanbul ignore next */
      (cov_1gwtlw1wry().b[25][1]++, []);
    };
    // Usar cache solo si está disponible (servidor)
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[110]++;
    if (
    /* istanbul ignore next */
    (cov_1gwtlw1wry().b[27][0]++, CacheUtils) &&
    /* istanbul ignore next */
    (cov_1gwtlw1wry().b[27][1]++, typeof window === 'undefined')) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[26][0]++;
      cov_1gwtlw1wry().s[111]++;
      return CacheUtils.cacheMetricsAggregation(cacheKey, fetchData);
    } else {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[26][1]++;
      cov_1gwtlw1wry().s[112]++;
      return fetchData();
    }
  }
  /**
  * Flush métricas a base de datos
  */
  async flushMetrics() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[28]++;
    cov_1gwtlw1wry().s[113]++;
    if (this.metricsBuffer.length === 0) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[28][0]++;
      cov_1gwtlw1wry().s[114]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1gwtlw1wry().b[28][1]++;
    }
    cov_1gwtlw1wry().s[115]++;
    try {
      const metrics =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[116]++, [...this.metricsBuffer]);
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[117]++;
      this.metricsBuffer = [];
      const supabase =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[118]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[119]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[29][0]++;
        cov_1gwtlw1wry().s[120]++;
        _logger.logger.error(_logger.LogLevel.ERROR, 'Supabase client not available for metrics flush', {}, _logger.LogCategory.SYSTEM);
        /* istanbul ignore next */
        cov_1gwtlw1wry().s[121]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[29][1]++;
      }
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[122]++, await supabase.from('enterprise_metrics').insert(metrics.map(metric => {
        /* istanbul ignore next */
        cov_1gwtlw1wry().f[29]++;
        cov_1gwtlw1wry().s[123]++;
        return {
          id: metric.id,
          name: metric.name,
          type: metric.type,
          category: metric.category,
          value: metric.value,
          timestamp: metric.timestamp,
          tags: metric.tags,
          metadata: metric.metadata
        };
      })));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[124]++;
      if (error) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[30][0]++;
        cov_1gwtlw1wry().s[125]++;
        _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to flush metrics to database', {
          error: error.message,
          metricsCount: metrics.length
        }, _logger.LogCategory.SYSTEM);
      } else {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[30][1]++;
        cov_1gwtlw1wry().s[126]++;
        _logger.logger.debug(_logger.LogLevel.DEBUG, `Flushed ${metrics.length} metrics to database`, {}, _logger.LogCategory.SYSTEM);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[127]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Error during metrics flush', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[31][1]++, 'Unknown error')
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Inicializa alertas por defecto
  */
  initializeDefaultAlerts() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[30]++;
    cov_1gwtlw1wry().s[128]++;
    // Alerta de response time alto
    this.setAlertRule({
      id: 'high_response_time',
      metricName: 'performance.api.duration',
      condition: 'gt',
      threshold: 5000,
      level: "warning",
      enabled: true,
      cooldownMinutes: 5,
      description: 'API response time is too high',
      actions: [{
        type: 'log',
        config: {}
      }]
    });
    // Alerta de error rate alto
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[129]++;
    this.setAlertRule({
      id: 'high_error_rate',
      metricName: 'performance.api.error_rate',
      condition: 'gt',
      threshold: 0.05,
      level: "critical",
      enabled: true,
      cooldownMinutes: 2,
      description: 'API error rate is too high',
      actions: [{
        type: 'log',
        config: {}
      }]
    });
    // Alerta de violaciones de seguridad
    /* istanbul ignore next */
    cov_1gwtlw1wry().s[130]++;
    this.setAlertRule({
      id: 'security_violations',
      metricName: 'security.violation',
      condition: 'gte',
      threshold: 1,
      level: "emergency",
      enabled: true,
      cooldownMinutes: 1,
      description: 'Security violation detected',
      actions: [{
        type: 'log',
        config: {}
      }]
    });
  }
  /**
  * Inicia flush automático de métricas
  */
  startMetricsFlush() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[31]++;
    cov_1gwtlw1wry().s[131]++;
    this.flushInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1gwtlw1wry().f[32]++;
      cov_1gwtlw1wry().s[132]++;
      this.flushMetrics();
    }, 30000); // Flush cada 30 segundos
  }
  /**
  * Almacena alerta en base de datos
  */
  async storeAlert(alert) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[33]++;
    cov_1gwtlw1wry().s[133]++;
    try {
      const supabase =
      /* istanbul ignore next */
      (cov_1gwtlw1wry().s[134]++, (0, _supabase.getSupabaseClient)(true));
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[135]++;
      if (!supabase) {
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[32][0]++;
        cov_1gwtlw1wry().s[136]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1gwtlw1wry().b[32][1]++;
      }
      cov_1gwtlw1wry().s[137]++;
      await supabase.from('enterprise_alerts').insert({
        id: alert.id,
        rule_id: alert.ruleId,
        metric_name: alert.metricName,
        level: alert.level,
        message: alert.message,
        value: alert.value,
        threshold: alert.threshold,
        triggered_at: alert.triggeredAt,
        resolved_at: alert.resolvedAt,
        metadata: alert.metadata
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[138]++;
      _logger.logger.error(_logger.LogLevel.ERROR, 'Failed to store alert', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1gwtlw1wry().b[33][1]++, 'Unknown error'),
        alertId: alert.id
      }, _logger.LogCategory.SYSTEM);
    }
  }
  /**
  * Genera ID único para métrica
  */
  generateMetricId() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[34]++;
    cov_1gwtlw1wry().s[139]++;
    return `metric_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
  * Convierte nivel de alerta al sistema enterprise
  */
  convertToAlertSystemLevel(level) {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[35]++;
    cov_1gwtlw1wry().s[140]++;
    switch (level) {
      case "info":
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[34][0]++;
        cov_1gwtlw1wry().s[141]++;
        return _alertsystem.AlertLevel.INFO;
      case "warning":
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[34][1]++;
        cov_1gwtlw1wry().s[142]++;
        return _alertsystem.AlertLevel.WARNING;
      case "critical":
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[34][2]++;
        cov_1gwtlw1wry().s[143]++;
        return _alertsystem.AlertLevel.CRITICAL;
      case "emergency":
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[34][3]++;
        cov_1gwtlw1wry().s[144]++;
        return _alertsystem.AlertLevel.EMERGENCY;
      default:
        /* istanbul ignore next */
        cov_1gwtlw1wry().b[34][4]++;
        cov_1gwtlw1wry().s[145]++;
        return _alertsystem.AlertLevel.INFO;
    }
  }
  /**
  * Genera ID único para alerta
  */
  generateAlertId() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[36]++;
    cov_1gwtlw1wry().s[146]++;
    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
  * Limpia recursos
  */
  destroy() {
    /* istanbul ignore next */
    cov_1gwtlw1wry().f[37]++;
    cov_1gwtlw1wry().s[147]++;
    if (this.flushInterval) {
      /* istanbul ignore next */
      cov_1gwtlw1wry().b[35][0]++;
      cov_1gwtlw1wry().s[148]++;
      clearInterval(this.flushInterval);
      /* istanbul ignore next */
      cov_1gwtlw1wry().s[149]++;
      this.flushInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1gwtlw1wry().b[35][1]++;
    }
    cov_1gwtlw1wry().s[150]++;
    this.flushMetrics(); // Flush final
  }
}
const enterpriseMetrics =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[151]++, EnterpriseMetricsCollector.getInstance());
const recordPerformanceMetric =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[152]++, enterpriseMetrics.recordPerformanceMetric.bind(enterpriseMetrics));
const recordBusinessMetric =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[153]++, enterpriseMetrics.recordBusinessMetric.bind(enterpriseMetrics));
const recordSecurityMetric =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[154]++, enterpriseMetrics.recordSecurityMetric.bind(enterpriseMetrics));
const recordUserExperienceMetric =
/* istanbul ignore next */
(cov_1gwtlw1wry().s[155]++, enterpriseMetrics.recordUserExperienceMetric.bind(enterpriseMetrics));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,