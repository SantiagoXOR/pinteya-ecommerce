2df4efbc6c62a79c3aaae48d9f40e904
// ===================================
// PINTEYA E-COMMERCE - AUTOMATED TESTING MANAGER
// Sistema de testing automatizado con regression, performance y accessibility
// ===================================
// Importar performance hooks solo en servidor
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get automatedTestingManager () {
        return automatedTestingManager;
    },
    get default () {
        return _default;
    }
});
const perfHooks = typeof window === 'undefined' ? require('perf_hooks') : null;
// Helper para obtener timestamp de performance
const getPerformanceNow = ()=>{
    if (typeof window !== 'undefined' && window.performance) {
        return window.getPerformanceNow();
    }
    if (perfHooks && perfHooks.performance) {
        return perfHooks.getPerformanceNow();
    }
    return Date.now();
};
// ===================================
// AUTOMATED TESTING MANAGER
// ===================================
class AutomatedTestingManager {
    static getInstance() {
        if (!AutomatedTestingManager.instance) {
            AutomatedTestingManager.instance = new AutomatedTestingManager();
        }
        return AutomatedTestingManager.instance;
    }
    // ===================================
    // REGRESSION TESTING
    // ===================================
    /**
   * Ejecutar tests de regresión
   */ async runRegressionTests(config) {
        const startTime = getPerformanceNow();
        const tests = [];
        console.log('[Testing] Iniciando tests de regresión...');
        // Test de componentes
        for (const component of config.components){
            const testResult = await this.testComponentRegression(component, config.threshold);
            tests.push(testResult);
        }
        // Test de APIs
        for (const api of config.apis){
            const testResult = await this.testApiRegression(api, config.threshold);
            tests.push(testResult);
        }
        const duration = getPerformanceNow() - startTime;
        const suite = {
            name: 'Regression Tests',
            tests,
            totalTests: tests.length,
            passedTests: tests.filter((t)=>t.status === 'passed').length,
            failedTests: tests.filter((t)=>t.status === 'failed').length,
            skippedTests: tests.filter((t)=>t.status === 'skipped').length,
            duration
        };
        this.testResults.set('regression', suite);
        return suite;
    }
    /**
   * Test de regresión de componente
   */ async testComponentRegression(component, threshold) {
        const startTime = getPerformanceNow();
        try {
            // Simular test de componente
            const currentMetrics = await this.measureComponentPerformance(component);
            const baseline = this.performanceBaselines.get(component);
            if (!baseline) {
                // Establecer baseline si no existe
                this.performanceBaselines.set(component, currentMetrics);
                return {
                    name: `${component} - Baseline Set`,
                    status: 'passed',
                    duration: getPerformanceNow() - startTime,
                    details: currentMetrics
                };
            }
            // Comparar con baseline
            const performanceDelta = (currentMetrics.renderTime - baseline.renderTime) / baseline.renderTime;
            if (performanceDelta > threshold) {
                return {
                    name: `${component} - Performance Regression`,
                    status: 'failed',
                    duration: getPerformanceNow() - startTime,
                    error: `Performance degraded by ${(performanceDelta * 100).toFixed(2)}%`,
                    details: {
                        current: currentMetrics,
                        baseline
                    }
                };
            }
            return {
                name: `${component} - Performance Check`,
                status: 'passed',
                duration: getPerformanceNow() - startTime,
                details: {
                    current: currentMetrics,
                    baseline
                }
            };
        } catch (error) {
            return {
                name: `${component} - Error`,
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
   * Test de regresión de API
   */ async testApiRegression(api, threshold) {
        const startTime = getPerformanceNow();
        try {
            // Simular test de API
            const response = await this.testApiEndpoint(api);
            const responseTime = getPerformanceNow() - startTime;
            if (responseTime > threshold) {
                return {
                    name: `${api} - Response Time`,
                    status: 'failed',
                    duration: responseTime,
                    error: `Response time ${responseTime.toFixed(2)}ms exceeds threshold ${threshold}ms`
                };
            }
            return {
                name: `${api} - Response Time`,
                status: 'passed',
                duration: responseTime,
                details: {
                    responseTime,
                    status: response.status
                }
            };
        } catch (error) {
            return {
                name: `${api} - Error`,
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    // ===================================
    // PERFORMANCE TESTING
    // ===================================
    /**
   * Ejecutar tests de performance
   */ async runPerformanceTests(components) {
        const startTime = getPerformanceNow();
        const tests = [];
        console.log('[Testing] Iniciando tests de performance...');
        for (const component of components){
            const testResult = await this.testComponentPerformance(component);
            tests.push(testResult);
        }
        // Test de bundle size
        const bundleTest = await this.testBundleSize();
        tests.push(bundleTest);
        // Test de memory leaks
        const memoryTest = await this.testMemoryLeaks();
        tests.push(memoryTest);
        const duration = getPerformanceNow() - startTime;
        const suite = {
            name: 'Performance Tests',
            tests,
            totalTests: tests.length,
            passedTests: tests.filter((t)=>t.status === 'passed').length,
            failedTests: tests.filter((t)=>t.status === 'failed').length,
            skippedTests: tests.filter((t)=>t.status === 'skipped').length,
            duration
        };
        this.testResults.set('performance', suite);
        return suite;
    }
    /**
   * Medir performance de componente
   */ async measureComponentPerformance(component) {
        // Simular medición de performance
        return {
            loadTime: Math.random() * 100 + 50,
            renderTime: Math.random() * 20 + 5,
            memoryUsage: Math.random() * 10 + 5,
            bundleSize: Math.random() * 50 + 20 // 20-70KB
        };
    }
    /**
   * Test de performance de componente
   */ async testComponentPerformance(component) {
        const startTime = getPerformanceNow();
        try {
            const metrics = await this.measureComponentPerformance(component);
            // Verificar thresholds
            const issues = [];
            if (metrics.renderTime > 16) {
                issues.push('Render time > 16ms');
            }
            if (metrics.memoryUsage > 50) {
                issues.push('Memory usage > 50MB');
            }
            if (metrics.bundleSize > 100) {
                issues.push('Bundle size > 100KB');
            }
            return {
                name: `${component} - Performance`,
                status: issues.length === 0 ? 'passed' : 'failed',
                duration: getPerformanceNow() - startTime,
                error: issues.length > 0 ? issues.join(', ') : undefined,
                details: metrics
            };
        } catch (error) {
            return {
                name: `${component} - Performance Error`,
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
   * Test de bundle size
   */ async testBundleSize() {
        const startTime = getPerformanceNow();
        try {
            // Simular análisis de bundle
            const bundleSize = Math.random() * 1000 + 500; // 500-1500KB
            const threshold = 1000; // 1MB
            return {
                name: 'Bundle Size Check',
                status: bundleSize <= threshold ? 'passed' : 'failed',
                duration: getPerformanceNow() - startTime,
                error: bundleSize > threshold ? `Bundle size ${bundleSize.toFixed(2)}KB exceeds ${threshold}KB` : undefined,
                details: {
                    bundleSize,
                    threshold
                }
            };
        } catch (error) {
            return {
                name: 'Bundle Size Error',
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
   * Test de memory leaks
   */ async testMemoryLeaks() {
        const startTime = getPerformanceNow();
        try {
            // Simular test de memory leaks
            const memoryGrowth = Math.random() * 20; // 0-20MB growth
            const threshold = 10; // 10MB threshold
            return {
                name: 'Memory Leak Check',
                status: memoryGrowth <= threshold ? 'passed' : 'failed',
                duration: getPerformanceNow() - startTime,
                error: memoryGrowth > threshold ? `Memory growth ${memoryGrowth.toFixed(2)}MB exceeds ${threshold}MB` : undefined,
                details: {
                    memoryGrowth,
                    threshold
                }
            };
        } catch (error) {
            return {
                name: 'Memory Leak Error',
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    // ===================================
    // ACCESSIBILITY TESTING
    // ===================================
    /**
   * Ejecutar tests de accesibilidad
   */ async runAccessibilityTests(pages) {
        const startTime = getPerformanceNow();
        const tests = [];
        console.log('[Testing] Iniciando tests de accesibilidad...');
        for (const page of pages){
            const testResult = await this.testPageAccessibility(page);
            tests.push(testResult);
        }
        const duration = getPerformanceNow() - startTime;
        const suite = {
            name: 'Accessibility Tests',
            tests,
            totalTests: tests.length,
            passedTests: tests.filter((t)=>t.status === 'passed').length,
            failedTests: tests.filter((t)=>t.status === 'failed').length,
            skippedTests: tests.filter((t)=>t.status === 'skipped').length,
            duration
        };
        this.testResults.set('accessibility', suite);
        return suite;
    }
    /**
   * Test de accesibilidad de página
   */ async testPageAccessibility(page) {
        const startTime = getPerformanceNow();
        try {
            // Simular test de accesibilidad
            const result = await this.runAccessibilityAudit(page);
            return {
                name: `${page} - Accessibility`,
                status: result.score >= 80 ? 'passed' : 'failed',
                duration: getPerformanceNow() - startTime,
                error: result.score < 80 ? `Accessibility score ${result.score}% below 80%` : undefined,
                details: result
            };
        } catch (error) {
            return {
                name: `${page} - Accessibility Error`,
                status: 'failed',
                duration: getPerformanceNow() - startTime,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    /**
   * Ejecutar auditoría de accesibilidad
   */ async runAccessibilityAudit(page) {
        // Simular auditoría de accesibilidad
        const violations = Math.floor(Math.random() * 5); // 0-4 violations
        const score = Math.max(60, 100 - violations * 10); // 60-100% score
        return {
            violations: Array.from({
                length: violations
            }, (_, i)=>({
                    id: `violation-${i}`,
                    impact: [
                        'minor',
                        'moderate',
                        'serious',
                        'critical'
                    ][Math.floor(Math.random() * 4)],
                    description: `Accessibility violation ${i + 1}`,
                    nodes: Math.floor(Math.random() * 5) + 1
                })),
            passes: Math.floor(Math.random() * 20) + 10,
            incomplete: Math.floor(Math.random() * 3),
            score
        };
    }
    // ===================================
    // UTILITY METHODS
    // ===================================
    /**
   * Test de endpoint de API
   */ async testApiEndpoint(endpoint) {
        // Simular llamada a API
        const responseTime = Math.random() * 200 + 50; // 50-250ms
        const status = Math.random() > 0.1 ? 200 : 500; // 90% success rate
        return {
            status,
            responseTime
        };
    }
    /**
   * Obtener resultados de tests
   */ getTestResults() {
        return this.testResults;
    }
    /**
   * Obtener resumen de tests
   */ getTestSummary() {
        const suites = Array.from(this.testResults.values());
        const totalTests = suites.reduce((sum, suite)=>sum + suite.totalTests, 0);
        const passedTests = suites.reduce((sum, suite)=>sum + suite.passedTests, 0);
        const failedTests = suites.reduce((sum, suite)=>sum + suite.failedTests, 0);
        const totalDuration = suites.reduce((sum, suite)=>sum + suite.duration, 0);
        return {
            totalSuites: suites.length,
            totalTests,
            passedTests,
            failedTests,
            successRate: totalTests > 0 ? passedTests / totalTests * 100 : 0,
            totalDuration
        };
    }
    /**
   * Limpiar resultados
   */ clearResults() {
        this.testResults.clear();
    }
    constructor(){
        this.testResults = new Map();
        this.performanceBaselines = new Map();
    }
}
const automatedTestingManager = AutomatedTestingManager.getInstance();
const _default = {
    automatedTestingManager,
    AutomatedTestingManager
};

//# sourceMappingURL=data:application/json;base64,