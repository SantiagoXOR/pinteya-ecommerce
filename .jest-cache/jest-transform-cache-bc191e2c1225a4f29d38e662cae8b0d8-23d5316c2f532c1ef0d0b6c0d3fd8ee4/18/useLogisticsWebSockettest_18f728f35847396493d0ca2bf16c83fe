11ae87f2d519b2f477dc39c91ef2abb7
// =====================================================
// TEST: LOGISTICS WEBSOCKET HOOKS
// Descripción: Tests comprehensivos para hooks de WebSocket
// Basado en: Jest + React Testing Library + MSW
// =====================================================
"use strict";
// Mock del módulo de WebSocket
jest.mock('@/lib/websockets/logistics-websocket', ()=>{
    return {
        getLogisticsWebSocket: jest.fn(()=>{
            if (!globalMockWebSocket) {
                globalMockWebSocket = createMockWebSocket();
            }
            return globalMockWebSocket;
        }),
        LogisticsWebSocketSimulator: jest.fn().mockImplementation(()=>({
                start: jest.fn(),
                stop: jest.fn(),
                simulateTrackingUpdate: jest.fn(),
                simulateAlert: jest.fn(),
                simulateGeofenceEvent: jest.fn()
            }))
    };
});
// Mock toast notifications
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            warning: jest.fn(),
            info: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _useLogisticsWebSocket = require("../../../src/hooks/admin/useLogisticsWebSocket");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock WebSocket
const createMockWebSocket = ()=>{
    const listeners = {};
    let connected = false;
    const mockWs = {
        send: jest.fn(),
        close: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        on: jest.fn((event, callback)=>{
            if (!listeners[event]) listeners[event] = [];
            listeners[event].push(callback);
            // Simular evento 'connected' automáticamente después de un pequeño delay
            if (event === 'connected' && !connected) {
                connected = true;
                setTimeout(()=>{
                    callback();
                    mockWs.isConnected = true;
                }, 50);
            }
        }),
        off: jest.fn((event, callback)=>{
            if (listeners[event]) {
                listeners[event] = listeners[event].filter((cb)=>cb !== callback);
            }
        }),
        emit: jest.fn((event, data)=>{
            if (listeners[event]) {
                listeners[event].forEach((callback)=>callback(data));
            }
        }),
        readyState: 1,
        connect: jest.fn().mockResolvedValue(undefined),
        disconnect: jest.fn(),
        isConnected: false,
        subscribeToShipment: jest.fn(),
        unsubscribeFromShipment: jest.fn(),
        subscribeToGeofence: jest.fn(),
        unsubscribeFromGeofence: jest.fn(),
        subscribeToAlerts: jest.fn(),
        unsubscribeFromAlerts: jest.fn()
    };
    return mockWs;
};
// Mock global del WebSocket
let globalMockWebSocket;
// Mock global WebSocket
global.WebSocket = jest.fn().mockImplementation(()=>createMockWebSocket());
// =====================================================
// SETUP
// =====================================================
const createTestQueryClient = ()=>new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    });
const createWrapper = ()=>{
    const queryClient = createTestQueryClient();
    return ({ children })=>{
        return _react1.default.createElement(_reactquery.QueryClientProvider, {
            client: queryClient
        }, children);
    };
};
// =====================================================
// TESTS PARA useLogisticsWebSocket
// =====================================================
describe('useLogisticsWebSocket Hook', ()=>{
    let mockWebSocket;
    beforeEach(()=>{
        // Reset global mock WebSocket
        globalMockWebSocket = null;
        mockWebSocket = createMockWebSocket();
        jest.clearAllMocks();
    });
    it('should initialize with default state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        // Verificar estado inicial
        expect(result.current.isConnected).toBe(false);
        expect(result.current.connectionState).toBe('connecting'); // Estado inicial cuando se inicializa
        expect(result.current.lastTrackingUpdate).toBeNull();
        expect(result.current.lastAlert).toBeNull();
        expect(result.current.lastGeofenceEvent).toBeNull();
        expect(result.current.alerts).toEqual([]);
    });
    it('should handle connection state changes', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)({
                simulateInDevelopment: false // Usar WebSocket real
            }), {
            wrapper: createWrapper()
        });
        // Simular conexión
        (0, _react.act)(()=>{
            if (mockWebSocket.onopen) {
                mockWebSocket.onopen();
            }
        });
        await (0, _react.waitFor)(()=>{
            expect(result.current.isConnected).toBe(true);
            expect(result.current.connectionState).toBe('connected');
        }, {
            timeout: 2000
        });
    });
    it('should handle disconnection', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        // Verificar que el método disconnect existe y es callable
        expect(typeof result.current.disconnect).toBe('function');
        // Simular desconexión
        (0, _react.act)(()=>{
            result.current.disconnect();
        });
        // El estado inicial debería ser disconnected
        expect(result.current.isConnected).toBe(false);
    });
    it('should handle tracking updates', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        const trackingUpdate = {
            shipment_id: 1,
            location: {
                latitude: -34.6037,
                longitude: -58.3816
            },
            status: 'in_transit',
            timestamp: new Date().toISOString()
        };
        // Simular recepción de tracking update
        (0, _react.act)(()=>{
            // En el simulador, esto se maneja automáticamente
            // Aquí simulamos el evento directamente
            result.current.lastTrackingUpdate = trackingUpdate;
        });
        expect(result.current.lastTrackingUpdate).toEqual(trackingUpdate);
    });
    it('should handle alerts', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        const alert = {
            id: 'alert-1',
            type: 'delay',
            severity: 'high',
            shipment_id: 1,
            message: 'Retraso en la entrega',
            timestamp: new Date().toISOString(),
            auto_resolve: false
        };
        // Simular recepción de alerta
        (0, _react.act)(()=>{
            result.current.alerts.push(alert);
        });
        expect(result.current.alerts).toContain(alert);
    });
    it('should clear alerts', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        // Agregar algunas alertas
        (0, _react.act)(()=>{
            result.current.alerts.push({
                id: 'alert-1',
                type: 'delay',
                severity: 'high',
                shipment_id: 1,
                message: 'Test alert',
                timestamp: new Date().toISOString(),
                auto_resolve: false
            });
        });
        // Limpiar alertas
        (0, _react.act)(()=>{
            result.current.clearAlerts();
        });
        expect(result.current.alerts).toEqual([]);
    });
    it('should handle subscription methods', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)(), {
            wrapper: createWrapper()
        });
        // Test subscription methods
        expect(()=>{
            result.current.subscribeToShipment(1);
            result.current.unsubscribeFromShipment(1);
            result.current.subscribeToGeofence('zone-1');
            result.current.subscribeToAlerts();
        }).not.toThrow();
    });
    it('should handle connect/disconnect methods', async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)({
                autoConnect: false,
                simulateInDevelopment: false
            }), {
            wrapper: createWrapper()
        });
        // Test connect
        await (0, _react.act)(async ()=>{
            await result.current.connect();
        });
        // Test disconnect
        (0, _react.act)(()=>{
            result.current.disconnect();
        });
        expect(result.current.isConnected).toBe(false);
    });
});
// =====================================================
// TESTS PARA useShipmentTracking
// =====================================================
describe('useShipmentTracking Hook', ()=>{
    beforeEach(()=>{
        createMockWebSocket();
        jest.clearAllMocks();
    });
    it('should track specific shipment', ()=>{
        const shipmentId = 123;
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useShipmentTracking)(shipmentId), {
            wrapper: createWrapper()
        });
        // Verificar estado inicial del tracking
        expect(result.current.currentLocation).toBeNull();
        expect(result.current.trackingHistory).toEqual([]);
        expect(result.current.shipmentId).toBe(shipmentId);
        expect(result.current.isConnected).toBe(false); // Estado inicial
    });
    it('should filter tracking updates for specific shipment', async ()=>{
        const shipmentId = 123;
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useShipmentTracking)(shipmentId), {
            wrapper: createWrapper()
        });
        const trackingUpdate = {
            shipment_id: shipmentId,
            location: {
                latitude: -34.6037,
                longitude: -58.3816
            },
            status: 'in_transit',
            timestamp: new Date().toISOString()
        };
        // Simular tracking update para este shipment
        (0, _react.act)(()=>{
            // Esto normalmente vendría del WebSocket
            result.current.currentLocation = trackingUpdate;
        });
        expect(result.current.currentLocation?.shipment_id).toBe(shipmentId);
    });
    it('should ignore tracking updates for other shipments', ()=>{
        const shipmentId = 123;
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useShipmentTracking)(shipmentId), {
            wrapper: createWrapper()
        });
        const trackingUpdate = {
            shipment_id: 456,
            location: {
                latitude: -34.6037,
                longitude: -58.3816
            },
            status: 'in_transit',
            timestamp: new Date().toISOString()
        };
        // Este update no debería afectar nuestro tracking
        expect(result.current.currentLocation?.shipment_id).not.toBe(456);
    });
    it('should maintain tracking history', async ()=>{
        const shipmentId = 123;
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useShipmentTracking)(shipmentId), {
            wrapper: createWrapper()
        });
        const updates = [
            {
                shipment_id: shipmentId,
                location: {
                    latitude: -34.6037,
                    longitude: -58.3816
                },
                status: 'picked_up',
                timestamp: '2024-02-10T10:00:00Z'
            },
            {
                shipment_id: shipmentId,
                location: {
                    latitude: -34.6100,
                    longitude: -58.3900
                },
                status: 'in_transit',
                timestamp: '2024-02-10T11:00:00Z'
            }
        ];
        // Simular múltiples updates
        (0, _react.act)(()=>{
            updates.forEach((update)=>{
                result.current.trackingHistory.push(update);
            });
        });
        expect(result.current.trackingHistory).toHaveLength(2);
    });
});
// =====================================================
// TESTS PARA useLogisticsAlerts
// =====================================================
describe('useLogisticsAlerts Hook', ()=>{
    beforeEach(()=>{
        createMockWebSocket();
        jest.clearAllMocks();
    });
    it('should initialize alerts state', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsAlerts)(), {
            wrapper: createWrapper()
        });
        // Verificar estado inicial de alertas
        expect(result.current.alerts).toEqual([]);
        expect(result.current.criticalAlerts).toEqual([]);
        expect(result.current.highAlerts).toEqual([]);
        expect(result.current.unreadAlerts).toEqual([]);
        expect(result.current.totalAlerts).toBe(0);
        expect(result.current.criticalCount).toBe(0);
        expect(result.current.highCount).toBe(0);
        expect(result.current.unreadCount).toBe(0);
        expect(result.current.isConnected).toBe(false); // Estado inicial
    });
    it('should categorize alerts by severity', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsAlerts)(), {
            wrapper: createWrapper()
        });
        const alerts = [
            {
                id: 'alert-1',
                type: 'delay',
                severity: 'critical',
                shipment_id: 1,
                message: 'Critical delay',
                timestamp: new Date().toISOString(),
                auto_resolve: false
            },
            {
                id: 'alert-2',
                type: 'exception',
                severity: 'high',
                shipment_id: 2,
                message: 'High priority exception',
                timestamp: new Date().toISOString(),
                auto_resolve: false
            },
            {
                id: 'alert-3',
                type: 'info',
                severity: 'low',
                shipment_id: 3,
                message: 'Low priority info',
                timestamp: new Date().toISOString(),
                auto_resolve: true
            }
        ];
        // Simular alertas
        (0, _react.act)(()=>{
            result.current.alerts = alerts;
        });
        // Verificar categorización
        const criticalAlerts = alerts.filter((a)=>a.severity === 'critical');
        const highAlerts = alerts.filter((a)=>a.severity === 'high');
        const unreadAlerts = alerts.filter((a)=>!a.auto_resolve);
        expect(criticalAlerts).toHaveLength(1);
        expect(highAlerts).toHaveLength(1);
        expect(unreadAlerts).toHaveLength(2);
    });
    it('should handle alert clearing', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsAlerts)(), {
            wrapper: createWrapper()
        });
        // Agregar alertas
        (0, _react.act)(()=>{
            result.current.alerts = [
                {
                    id: 'alert-1',
                    type: 'delay',
                    severity: 'high',
                    shipment_id: 1,
                    message: 'Test alert',
                    timestamp: new Date().toISOString(),
                    auto_resolve: false
                }
            ];
        });
        // Limpiar alertas
        (0, _react.act)(()=>{
            result.current.clearAlerts();
        });
        expect(result.current.alerts).toEqual([]);
        expect(result.current.totalAlerts).toBe(0);
    });
    it('should track last alert', ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsAlerts)(), {
            wrapper: createWrapper()
        });
        const lastAlert = {
            id: 'alert-latest',
            type: 'delay',
            severity: 'high',
            shipment_id: 1,
            message: 'Latest alert',
            timestamp: new Date().toISOString(),
            auto_resolve: false
        };
        (0, _react.act)(()=>{
            result.current.lastAlert = lastAlert;
        });
        expect(result.current.lastAlert).toEqual(lastAlert);
    });
});
// =====================================================
// TESTS DE INTEGRACIÓN
// =====================================================
describe('WebSocket Hooks Integration', ()=>{
    beforeEach(()=>{
        createMockWebSocket();
        jest.clearAllMocks();
    });
    it('should work together for complete tracking experience', ()=>{
        const shipmentId = 123;
        // Usar ambos hooks en el mismo renderHook para compartir el contexto
        const { result } = (0, _react.renderHook)(()=>{
            const wsResult = (0, _useLogisticsWebSocket.useLogisticsWebSocket)();
            const trackingResult = (0, _useLogisticsWebSocket.useShipmentTracking)(shipmentId);
            return {
                wsResult,
                trackingResult
            };
        }, {
            wrapper: createWrapper()
        });
        // Verificar estado inicial de ambos hooks
        expect(result.current.wsResult.isConnected).toBe(false);
        expect(result.current.trackingResult.isConnected).toBe(false);
        expect(result.current.wsResult.lastTrackingUpdate).toBeNull();
        expect(result.current.trackingResult.currentLocation).toBeNull();
        expect(result.current.trackingResult.shipmentId).toBe(shipmentId);
    });
    it('should handle errors gracefully', ()=>{
        expect(()=>{
            (0, _react.renderHook)(()=>(0, _useLogisticsWebSocket.useLogisticsWebSocket)({
                    enabled: false
                }), {
                wrapper: createWrapper()
            });
        }).not.toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,