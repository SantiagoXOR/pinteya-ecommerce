{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\security\\api-security-improvements.test.ts"],"sourcesContent":["// ===================================\r\n// TESTS DE MEJORAS DE SEGURIDAD EN APIs\r\n// ===================================\r\n// Verificar que las mejoras de seguridad se aplicaron correctamente\r\n\r\nimport { NextRequest } from 'next/server';\r\n\r\n// Mock de las dependencias\r\njest.mock('@/lib/rate-limiting/rate-limiter', () => ({\r\n  withRateLimit: jest.fn(),\r\n  RATE_LIMIT_CONFIGS: {\r\n    products: { maxRequests: 100, windowMs: 60000 },\r\n    checkout: { maxRequests: 50, windowMs: 60000 },\r\n    search: { maxRequests: 200, windowMs: 60000 },\r\n    auth: { maxRequests: 30, windowMs: 60000 }\r\n  }\r\n}));\r\n\r\njest.mock('@/lib/config/api-timeouts', () => ({\r\n  API_TIMEOUTS: {\r\n    database: 5000,\r\n    external: 10000\r\n  },\r\n  withDatabaseTimeout: jest.fn(),\r\n  getEndpointTimeouts: jest.fn()\r\n}));\r\n\r\njest.mock('@/lib/logging/security-logger', () => ({\r\n  createSecurityLogger: jest.fn(() => ({\r\n    logEvent: jest.fn(),\r\n    logRateLimitExceeded: jest.fn(),\r\n    context: { ip: '127.0.0.1', userAgent: 'test' }\r\n  }))\r\n}));\r\n\r\njest.mock('@/lib/supabase', () => ({\r\n  getSupabaseClient: jest.fn(() => ({\r\n    from: jest.fn(() => ({\r\n      select: jest.fn(() => ({\r\n        order: jest.fn(() => ({\r\n          data: [],\r\n          error: null\r\n        }))\r\n      }))\r\n    }))\r\n  }))\r\n}));\r\n\r\ndescribe('API Security Improvements', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Rate Limiting Implementation', () => {\r\n    it('should apply rate limiting to checkout API', async () => {\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      const { POST } = require('@/app/api/checkout/validate/route');\r\n      \r\n      // Mock rate limiting success\r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        expect(config).toBeDefined();\r\n        return await handler();\r\n      });\r\n\r\n      const requestBody = {\r\n        customerInfo: {\r\n          firstName: 'Test',\r\n          lastName: 'User',\r\n          email: 'test@example.com',\r\n          phone: '1234567890'\r\n        },\r\n        shippingAddress: {\r\n          streetAddress: '123 Test St',\r\n          city: 'Test City',\r\n          state: 'Test State',\r\n          zipCode: '12345'\r\n        },\r\n        items: [{\r\n          id: '1',\r\n          name: 'Test Product',\r\n          price: 100,\r\n          quantity: 1\r\n        }],\r\n        paymentMethod: 'mercadopago',\r\n        shippingMethod: 'free',\r\n        totals: {\r\n          subtotal: 100,\r\n          shipping: 0,\r\n          total: 100\r\n        }\r\n      };\r\n\r\n      const request = new NextRequest(new Request('http://localhost/api/checkout/validate', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: { 'content-type': 'application/json' }\r\n      }));\r\n\r\n      await POST(request);\r\n\r\n      expect(withRateLimit).toHaveBeenCalledWith(\r\n        expect.any(Object),\r\n        expect.objectContaining({\r\n          maxRequests: expect.any(Number),\r\n          windowMs: expect.any(Number)\r\n        }),\r\n        expect.any(Function)\r\n      );\r\n    });\r\n\r\n    it('should apply rate limiting to categories API', async () => {\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      const { GET } = require('@/app/api/categories/route');\r\n      \r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      await GET(request);\r\n\r\n      expect(withRateLimit).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should apply rate limiting to search trending API', async () => {\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      const { GET } = require('@/app/api/search/trending/route');\r\n      \r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      const request = new NextRequest(new Request('http://localhost/api/search/trending'));\r\n\r\n      await GET(request);\r\n\r\n      expect(withRateLimit).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should apply rate limiting to user profile API', async () => {\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      \r\n      // Mock auth\r\n      jest.mock('@/auth', () => ({\r\n        auth: jest.fn(() => Promise.resolve({\r\n          user: { id: 'test-user-id', email: 'test@example.com' }\r\n        }))\r\n      }));\r\n\r\n      const { GET } = require('@/app/api/user/profile/route');\r\n      \r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      const request = new NextRequest(new Request('http://localhost/api/user/profile'));\r\n\r\n      await GET(request);\r\n\r\n      expect(withRateLimit).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Security Logging Implementation', () => {\r\n    it('should create security logger for all protected APIs', async () => {\r\n      const { createSecurityLogger } = require('@/lib/logging/security-logger');\r\n      const { GET } = require('@/app/api/categories/route');\r\n      \r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      await GET(request);\r\n\r\n      expect(createSecurityLogger).toHaveBeenCalledWith(request);\r\n    });\r\n\r\n    it('should log API access events', async () => {\r\n      const mockLogger = {\r\n        logEvent: jest.fn(),\r\n        logRateLimitExceeded: jest.fn(),\r\n        context: { ip: '127.0.0.1', userAgent: 'test' }\r\n      };\r\n\r\n      const { createSecurityLogger } = require('@/lib/logging/security-logger');\r\n      createSecurityLogger.mockReturnValue(mockLogger);\r\n\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      const { GET } = require('@/app/api/categories/route');\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      await GET(request);\r\n\r\n      expect(mockLogger.logEvent).toHaveBeenCalledWith(\r\n        'api_access',\r\n        'low',\r\n        expect.objectContaining({\r\n          endpoint: '/api/categories',\r\n          method: 'GET'\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Database Timeout Implementation', () => {\r\n    it('should apply database timeouts to database queries', async () => {\r\n      const { withDatabaseTimeout } = require('@/lib/config/api-timeouts');\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      \r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      withDatabaseTimeout.mockImplementation(async (query, timeout) => {\r\n        expect(timeout).toBeDefined();\r\n        return { data: [], error: null };\r\n      });\r\n\r\n      const { GET } = require('@/app/api/categories/route');\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      await GET(request);\r\n\r\n      expect(withDatabaseTimeout).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling and Security', () => {\r\n    it('should handle rate limit exceeded scenarios', async () => {\r\n      const mockLogger = {\r\n        logEvent: jest.fn(),\r\n        logRateLimitExceeded: jest.fn(),\r\n        context: { ip: '127.0.0.1', userAgent: 'test' }\r\n      };\r\n\r\n      const { createSecurityLogger } = require('@/lib/logging/security-logger');\r\n      createSecurityLogger.mockReturnValue(mockLogger);\r\n\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      const { NextResponse } = require('next/server');\r\n      \r\n      // Mock rate limit exceeded\r\n      const rateLimitResponse = NextResponse.json(\r\n        { error: 'Rate limit exceeded' },\r\n        { status: 429 }\r\n      );\r\n      \r\n      withRateLimit.mockResolvedValue(rateLimitResponse);\r\n\r\n      const { GET } = require('@/app/api/categories/route');\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      const response = await GET(request);\r\n\r\n      expect(mockLogger.logRateLimitExceeded).toHaveBeenCalled();\r\n      expect(response.status).toBe(429);\r\n    });\r\n\r\n    it('should log security events for errors', async () => {\r\n      const mockLogger = {\r\n        logEvent: jest.fn(),\r\n        logRateLimitExceeded: jest.fn(),\r\n        context: { ip: '127.0.0.1', userAgent: 'test' }\r\n      };\r\n\r\n      const { createSecurityLogger } = require('@/lib/logging/security-logger');\r\n      createSecurityLogger.mockReturnValue(mockLogger);\r\n\r\n      const { withRateLimit } = require('@/lib/rate-limiting/rate-limiter');\r\n      const { withDatabaseTimeout } = require('@/lib/config/api-timeouts');\r\n      \r\n      withRateLimit.mockImplementation(async (req, config, handler) => {\r\n        return await handler();\r\n      });\r\n\r\n      // Mock database error\r\n      withDatabaseTimeout.mockResolvedValue({\r\n        data: null,\r\n        error: { message: 'Database connection failed' }\r\n      });\r\n\r\n      const { GET } = require('@/app/api/categories/route');\r\n      const request = new NextRequest(new Request('http://localhost/api/categories'));\r\n\r\n      await GET(request);\r\n\r\n      expect(mockLogger.logEvent).toHaveBeenCalledWith(\r\n        'database_error',\r\n        'medium',\r\n        expect.objectContaining({\r\n          error: 'Database connection failed',\r\n          endpoint: '/api/categories'\r\n        })\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","mock","withRateLimit","fn","RATE_LIMIT_CONFIGS","products","maxRequests","windowMs","checkout","search","auth","API_TIMEOUTS","database","external","withDatabaseTimeout","getEndpointTimeouts","createSecurityLogger","logEvent","logRateLimitExceeded","context","ip","userAgent","getSupabaseClient","from","select","order","data","error","describe","beforeEach","clearAllMocks","it","require","POST","mockImplementation","req","config","handler","expect","toBeDefined","requestBody","customerInfo","firstName","lastName","email","phone","shippingAddress","streetAddress","city","state","zipCode","items","id","name","price","quantity","paymentMethod","shippingMethod","totals","subtotal","shipping","total","request","NextRequest","Request","method","body","JSON","stringify","headers","toHaveBeenCalledWith","any","Object","objectContaining","Number","Function","GET","toHaveBeenCalled","Promise","resolve","user","mockLogger","mockReturnValue","endpoint","query","timeout","NextResponse","rateLimitResponse","json","status","mockResolvedValue","response","toBe","message"],"mappings":"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"}