{"version":3,"names":["ADVANCED_CACHE_STRATEGIES","cov_2ps24mzjhd","f","s","AdvancedCacheStrategyManager","CacheStrategy","CacheStrategyUtils","advancedCacheStrategyManager","withCacheStrategy","CRITICAL_SYSTEM_DATA","strategy","ttl","maxAge","priority","tags","warmupEnabled","compressionEnabled","encryptionEnabled","analyticsEnabled","fallbackStrategy","PRODUCT_DATA","staleWhileRevalidate","conditions","type","operator","value","action","modifyTtl","STATIC_ASSETS","PUBLIC_API","USER_DATA","SEARCH_RESULTS","constructor","metrics","Map","strategies","redis","_redis","getRedisClient","Object","entries","forEach","key","config","set","getInstance","instance","b","execute","fetcher","strategyName","context","startTime","Date","now","get","_logger","logger","warn","LogCategory","CACHE","effectiveStrategy","evaluateConditions","result","executeStrategy","recordMetrics","error","info","fallbackConfig","cacheFirst","networkFirst","fastest","adaptive","cacheOnly","cached","getFromCache","data","setToCache","revalidateInBackground","cachePromise","networkPromise","Promise","race","then","source","adaptedStrategy","connectionType","deviceType","adaptedConfig","Error","enterpriseResult","_enterprisecachesystem","enterpriseCacheSystem","_cachemanager","cacheManager","compress","serialize","enableMetrics","modifiedConfig","condition","evaluateCondition","contextValue","userId","location","Array","isArray","includes","success","responseTime","existing","hits","misses","hitRate","avgResponseTime","totalRequests","bytesServed","lastUpdated","getMetrics","getAllMetrics","registerStrategy","name","invalidateByTags","join","warmupCache","keys","fetchers","warmupPromises","map","index","allSettled","keyGenerator","target","propertyName","descriptor","method","args","JSON","stringify","apply","createContext","request","userAgent","headers","detectConnectionType","detectDeviceType","timestamp","test"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\cache\\advanced-cache-strategy-manager.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - ADVANCED CACHE STRATEGY MANAGER\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '../enterprise/logger';\r\nimport { cacheManager, CACHE_CONFIGS } from '../cache-manager';\r\nimport { enterpriseCacheSystem } from '../optimization/enterprise-cache-system';\r\nimport { getRedisClient } from '../integrations/redis';\r\n\r\n/**\r\n * Estrategias de cache disponibles\r\n */\r\nexport enum CacheStrategy {\r\n  CACHE_FIRST = 'cache-first',           // Cache primero, fallback a origen\r\n  NETWORK_FIRST = 'network-first',       // Red primero, fallback a cache\r\n  STALE_WHILE_REVALIDATE = 'stale-while-revalidate', // Cache stale + revalidación en background\r\n  NETWORK_ONLY = 'network-only',         // Solo red, sin cache\r\n  CACHE_ONLY = 'cache-only',            // Solo cache, sin red\r\n  FASTEST = 'fastest',                   // El más rápido entre cache y red\r\n  ADAPTIVE = 'adaptive'                  // Adaptativo basado en condiciones\r\n}\r\n\r\n/**\r\n * Configuración de estrategia de cache\r\n */\r\nexport interface CacheStrategyConfig {\r\n  strategy: CacheStrategy;\r\n  ttl: number;\r\n  maxAge?: number;\r\n  staleWhileRevalidate?: number;\r\n  priority: 'low' | 'normal' | 'high' | 'critical';\r\n  tags?: string[];\r\n  conditions?: CacheCondition[];\r\n  fallbackStrategy?: CacheStrategy;\r\n  warmupEnabled?: boolean;\r\n  compressionEnabled?: boolean;\r\n  encryptionEnabled?: boolean;\r\n  analyticsEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * Condiciones para cache adaptativo\r\n */\r\nexport interface CacheCondition {\r\n  type: 'network' | 'device' | 'time' | 'user' | 'location' | 'load';\r\n  operator: 'eq' | 'gt' | 'lt' | 'gte' | 'lte' | 'in' | 'contains';\r\n  value: any;\r\n  action: 'use' | 'skip' | 'modify';\r\n  modifyTtl?: number;\r\n}\r\n\r\n/**\r\n * Métricas de performance de cache\r\n */\r\nexport interface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  avgResponseTime: number;\r\n  totalRequests: number;\r\n  bytesServed: number;\r\n  lastUpdated: number;\r\n  strategy: CacheStrategy;\r\n}\r\n\r\n/**\r\n * Contexto de ejecución de cache\r\n */\r\nexport interface CacheContext {\r\n  userAgent?: string;\r\n  connectionType?: string;\r\n  deviceType?: 'mobile' | 'tablet' | 'desktop';\r\n  location?: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  timestamp: number;\r\n  priority: 'low' | 'normal' | 'high' | 'critical';\r\n}\r\n\r\n/**\r\n * Configuraciones predefinidas de estrategias\r\n */\r\nexport const ADVANCED_CACHE_STRATEGIES: Record<string, CacheStrategyConfig> = {\r\n  // Estrategia para datos críticos del sistema\r\n  CRITICAL_SYSTEM_DATA: {\r\n    strategy: CacheStrategy.CACHE_FIRST,\r\n    ttl: 3600, // 1 hora\r\n    maxAge: 7200, // 2 horas\r\n    priority: 'critical',\r\n    tags: ['system', 'critical'],\r\n    warmupEnabled: true,\r\n    compressionEnabled: true,\r\n    encryptionEnabled: true,\r\n    analyticsEnabled: true,\r\n    fallbackStrategy: CacheStrategy.NETWORK_FIRST\r\n  },\r\n\r\n  // Estrategia para datos de productos\r\n  PRODUCT_DATA: {\r\n    strategy: CacheStrategy.STALE_WHILE_REVALIDATE,\r\n    ttl: 900, // 15 minutos\r\n    staleWhileRevalidate: 1800, // 30 minutos\r\n    priority: 'high',\r\n    tags: ['products', 'catalog'],\r\n    warmupEnabled: true,\r\n    compressionEnabled: true,\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'load',\r\n        operator: 'gt',\r\n        value: 0.8,\r\n        action: 'modify',\r\n        modifyTtl: 1800 // Extender TTL bajo alta carga\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para contenido estático\r\n  STATIC_ASSETS: {\r\n    strategy: CacheStrategy.CACHE_FIRST,\r\n    ttl: 86400, // 24 horas\r\n    maxAge: 604800, // 7 días\r\n    priority: 'normal',\r\n    tags: ['static', 'assets'],\r\n    compressionEnabled: true,\r\n    analyticsEnabled: false\r\n  },\r\n\r\n  // Estrategia para APIs públicas\r\n  PUBLIC_API: {\r\n    strategy: CacheStrategy.NETWORK_FIRST,\r\n    ttl: 300, // 5 minutos\r\n    priority: 'normal',\r\n    tags: ['api', 'public'],\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'network',\r\n        operator: 'eq',\r\n        value: 'slow',\r\n        action: 'use',\r\n        modifyTtl: 600 // Extender TTL en conexiones lentas\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para datos de usuario\r\n  USER_DATA: {\r\n    strategy: CacheStrategy.ADAPTIVE,\r\n    ttl: 1800, // 30 minutos\r\n    priority: 'high',\r\n    tags: ['user', 'personal'],\r\n    encryptionEnabled: true,\r\n    analyticsEnabled: true,\r\n    conditions: [\r\n      {\r\n        type: 'user',\r\n        operator: 'eq',\r\n        value: 'premium',\r\n        action: 'modify',\r\n        modifyTtl: 3600 // TTL extendido para usuarios premium\r\n      }\r\n    ]\r\n  },\r\n\r\n  // Estrategia para búsquedas\r\n  SEARCH_RESULTS: {\r\n    strategy: CacheStrategy.FASTEST,\r\n    ttl: 600, // 10 minutos\r\n    priority: 'normal',\r\n    tags: ['search', 'results'],\r\n    compressionEnabled: true,\r\n    analyticsEnabled: true\r\n  }\r\n};\r\n\r\n/**\r\n * Manager avanzado de estrategias de cache\r\n */\r\nexport class AdvancedCacheStrategyManager {\r\n  private static instance: AdvancedCacheStrategyManager;\r\n  private metrics: Map<string, CacheMetrics> = new Map();\r\n  private strategies: Map<string, CacheStrategyConfig> = new Map();\r\n  private redis = getRedisClient();\r\n\r\n  private constructor() {\r\n    // Cargar estrategias predefinidas\r\n    Object.entries(ADVANCED_CACHE_STRATEGIES).forEach(([key, config]) => {\r\n      this.strategies.set(key, config);\r\n    });\r\n  }\r\n\r\n  static getInstance(): AdvancedCacheStrategyManager {\r\n    if (!AdvancedCacheStrategyManager.instance) {\r\n      AdvancedCacheStrategyManager.instance = new AdvancedCacheStrategyManager();\r\n    }\r\n    return AdvancedCacheStrategyManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Ejecuta una estrategia de cache\r\n   */\r\n  async execute<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    strategyName: string,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    const startTime = Date.now();\r\n    const strategy = this.strategies.get(strategyName);\r\n    \r\n    if (!strategy) {\r\n      logger.warn(LogCategory.CACHE, `Estrategia de cache no encontrada: ${strategyName}`);\r\n      return fetcher();\r\n    }\r\n\r\n    try {\r\n      // Evaluar condiciones si existen\r\n      const effectiveStrategy = await this.evaluateConditions(strategy, context);\r\n      \r\n      // Ejecutar estrategia\r\n      const result = await this.executeStrategy(key, fetcher, effectiveStrategy, context);\r\n      \r\n      // Registrar métricas\r\n      await this.recordMetrics(strategyName, startTime, true);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      // Registrar métricas de error\r\n      await this.recordMetrics(strategyName, startTime, false);\r\n      \r\n      // Intentar estrategia de fallback\r\n      if (strategy.fallbackStrategy) {\r\n        logger.info(LogCategory.CACHE, `Usando estrategia de fallback: ${strategy.fallbackStrategy}`);\r\n        const fallbackConfig = { ...strategy, strategy: strategy.fallbackStrategy };\r\n        return this.executeStrategy(key, fetcher, fallbackConfig, context);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ejecuta la estrategia específica\r\n   */\r\n  private async executeStrategy<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    switch (config.strategy) {\r\n      case CacheStrategy.CACHE_FIRST:\r\n        return this.cacheFirst(key, fetcher, config);\r\n      \r\n      case CacheStrategy.NETWORK_FIRST:\r\n        return this.networkFirst(key, fetcher, config);\r\n      \r\n      case CacheStrategy.STALE_WHILE_REVALIDATE:\r\n        return this.staleWhileRevalidate(key, fetcher, config);\r\n      \r\n      case CacheStrategy.FASTEST:\r\n        return this.fastest(key, fetcher, config);\r\n      \r\n      case CacheStrategy.ADAPTIVE:\r\n        return this.adaptive(key, fetcher, config, context);\r\n      \r\n      case CacheStrategy.CACHE_ONLY:\r\n        return this.cacheOnly(key, config);\r\n      \r\n      case CacheStrategy.NETWORK_ONLY:\r\n        return fetcher();\r\n      \r\n      default:\r\n        return this.cacheFirst(key, fetcher, config);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Cache First\r\n   */\r\n  private async cacheFirst<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    // Intentar obtener del cache\r\n    const cached = await this.getFromCache<T>(key);\r\n    if (cached !== null) {\r\n      return cached;\r\n    }\r\n\r\n    // Si no está en cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await this.setToCache(key, data, config);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Estrategia Network First\r\n   */\r\n  private async networkFirst<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    try {\r\n      // Intentar obtener de la red\r\n      const data = await fetcher();\r\n      await this.setToCache(key, data, config);\r\n      return data;\r\n    } catch (error) {\r\n      // Si falla la red, intentar cache\r\n      const cached = await this.getFromCache<T>(key);\r\n      if (cached !== null) {\r\n        logger.info(LogCategory.CACHE, `Usando cache como fallback para: ${key}`);\r\n        return cached;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Stale While Revalidate\r\n   */\r\n  private async staleWhileRevalidate<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    const cached = await this.getFromCache<T>(key);\r\n    \r\n    if (cached !== null) {\r\n      // Revalidar en background\r\n      this.revalidateInBackground(key, fetcher, config);\r\n      return cached;\r\n    }\r\n\r\n    // Si no hay cache, obtener de la fuente\r\n    const data = await fetcher();\r\n    await this.setToCache(key, data, config);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Estrategia Fastest (race entre cache y red)\r\n   */\r\n  private async fastest<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<T> {\r\n    const cachePromise = this.getFromCache<T>(key);\r\n    const networkPromise = fetcher();\r\n\r\n    try {\r\n      // Race entre cache y red\r\n      const result = await Promise.race([\r\n        cachePromise.then(cached => ({ source: 'cache', data: cached })),\r\n        networkPromise.then(data => ({ source: 'network', data }))\r\n      ]);\r\n\r\n      if (result.source === 'network') {\r\n        // Si ganó la red, actualizar cache\r\n        await this.setToCache(key, result.data, config);\r\n      }\r\n\r\n      return result.data;\r\n    } catch (error) {\r\n      // Si falla el race, intentar el que no falló\r\n      try {\r\n        const cached = await cachePromise;\r\n        if (cached !== null) {return cached;}\r\n      } catch {}\r\n\r\n      try {\r\n        const data = await networkPromise;\r\n        await this.setToCache(key, data, config);\r\n        return data;\r\n      } catch {}\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estrategia Adaptativa\r\n   */\r\n  private async adaptive<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<T> {\r\n    // Determinar la mejor estrategia basada en el contexto\r\n    let adaptedStrategy = CacheStrategy.CACHE_FIRST;\r\n\r\n    if (context) {\r\n      if (context.connectionType === 'slow' || context.deviceType === 'mobile') {\r\n        adaptedStrategy = CacheStrategy.CACHE_FIRST;\r\n      } else if (context.priority === 'critical') {\r\n        adaptedStrategy = CacheStrategy.FASTEST;\r\n      } else {\r\n        adaptedStrategy = CacheStrategy.STALE_WHILE_REVALIDATE;\r\n      }\r\n    }\r\n\r\n    const adaptedConfig = { ...config, strategy: adaptedStrategy };\r\n    return this.executeStrategy(key, fetcher, adaptedConfig, context);\r\n  }\r\n\r\n  /**\r\n   * Estrategia Cache Only\r\n   */\r\n  private async cacheOnly<T>(key: string, config: CacheStrategyConfig): Promise<T> {\r\n    const cached = await this.getFromCache<T>(key);\r\n    if (cached === null) {\r\n      throw new Error(`Cache miss para key: ${key} (cache-only strategy)`);\r\n    }\r\n    return cached;\r\n  }\r\n\r\n  /**\r\n   * Obtiene datos del cache\r\n   */\r\n  private async getFromCache<T>(key: string): Promise<T | null> {\r\n    try {\r\n      // Intentar cache enterprise primero\r\n      const enterpriseResult = await enterpriseCacheSystem.get<T>(key);\r\n      if (enterpriseResult !== null) {return enterpriseResult;}\r\n\r\n      // Fallback a cache manager básico\r\n      return await cacheManager.get<T>(key);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error obteniendo del cache: ${key}`, error as Error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Guarda datos en el cache\r\n   */\r\n  private async setToCache<T>(key: string, data: T, config: CacheStrategyConfig): Promise<void> {\r\n    try {\r\n      // Usar cache enterprise si está disponible\r\n      await enterpriseCacheSystem.set(key, data, {\r\n        ttl: config.ttl,\r\n        compress: config.compressionEnabled,\r\n        serialize: true,\r\n        enableMetrics: config.analyticsEnabled\r\n      });\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error guardando en cache: ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revalidación en background\r\n   */\r\n  private async revalidateInBackground<T>(\r\n    key: string,\r\n    fetcher: () => Promise<T>,\r\n    config: CacheStrategyConfig\r\n  ): Promise<void> {\r\n    try {\r\n      const data = await fetcher();\r\n      await this.setToCache(key, data, config);\r\n      logger.info(LogCategory.CACHE, `Revalidación completada para: ${key}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, `Error en revalidación: ${key}`, error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evalúa condiciones para estrategia adaptativa\r\n   */\r\n  private async evaluateConditions(\r\n    config: CacheStrategyConfig,\r\n    context?: CacheContext\r\n  ): Promise<CacheStrategyConfig> {\r\n    if (!config.conditions || !context) {return config;}\r\n\r\n    const modifiedConfig = { ...config };\r\n\r\n    for (const condition of config.conditions) {\r\n      if (this.evaluateCondition(condition, context)) {\r\n        if (condition.action === 'modify' && condition.modifyTtl) {\r\n          modifiedConfig.ttl = condition.modifyTtl;\r\n        }\r\n      }\r\n    }\r\n\r\n    return modifiedConfig;\r\n  }\r\n\r\n  /**\r\n   * Evalúa una condición específica\r\n   */\r\n  private evaluateCondition(condition: CacheCondition, context: CacheContext): boolean {\r\n    let contextValue: any;\r\n\r\n    switch (condition.type) {\r\n      case 'device':\r\n        contextValue = context.deviceType;\r\n        break;\r\n      case 'network':\r\n        contextValue = context.connectionType;\r\n        break;\r\n      case 'user':\r\n        contextValue = context.userId;\r\n        break;\r\n      case 'location':\r\n        contextValue = context.location;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    switch (condition.operator) {\r\n      case 'eq':\r\n        return contextValue === condition.value;\r\n      case 'gt':\r\n        return contextValue > condition.value;\r\n      case 'lt':\r\n        return contextValue < condition.value;\r\n      case 'in':\r\n        return Array.isArray(condition.value) && condition.value.includes(contextValue);\r\n      case 'contains':\r\n        return typeof contextValue === 'string' && contextValue.includes(condition.value);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registra métricas de performance\r\n   */\r\n  private async recordMetrics(strategyName: string, startTime: number, success: boolean): Promise<void> {\r\n    const responseTime = Date.now() - startTime;\r\n    const existing = this.metrics.get(strategyName) || {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      avgResponseTime: 0,\r\n      totalRequests: 0,\r\n      bytesServed: 0,\r\n      lastUpdated: Date.now(),\r\n      strategy: this.strategies.get(strategyName)?.strategy || CacheStrategy.CACHE_FIRST\r\n    };\r\n\r\n    existing.totalRequests++;\r\n    if (success) {\r\n      existing.hits++;\r\n    } else {\r\n      existing.misses++;\r\n    }\r\n    \r\n    existing.hitRate = (existing.hits / existing.totalRequests) * 100;\r\n    existing.avgResponseTime = ((existing.avgResponseTime * (existing.totalRequests - 1)) + responseTime) / existing.totalRequests;\r\n    existing.lastUpdated = Date.now();\r\n\r\n    this.metrics.set(strategyName, existing);\r\n  }\r\n\r\n  /**\r\n   * Obtiene métricas de una estrategia\r\n   */\r\n  getMetrics(strategyName: string): CacheMetrics | null {\r\n    return this.metrics.get(strategyName) || null;\r\n  }\r\n\r\n  /**\r\n   * Obtiene todas las métricas\r\n   */\r\n  getAllMetrics(): Record<string, CacheMetrics> {\r\n    const result: Record<string, CacheMetrics> = {};\r\n    this.metrics.forEach((metrics, strategy) => {\r\n      result[strategy] = metrics;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registra una nueva estrategia\r\n   */\r\n  registerStrategy(name: string, config: CacheStrategyConfig): void {\r\n    this.strategies.set(name, config);\r\n    logger.info(LogCategory.CACHE, `Estrategia registrada: ${name}`);\r\n  }\r\n\r\n  /**\r\n   * Invalida cache por tags\r\n   */\r\n  async invalidateByTags(tags: string[]): Promise<void> {\r\n    try {\r\n      await enterpriseCacheSystem.invalidateByTags(tags);\r\n      logger.info(LogCategory.CACHE, `Cache invalidado por tags: ${tags.join(', ')}`);\r\n    } catch (error) {\r\n      logger.error(LogCategory.CACHE, 'Error invalidando cache por tags', error as Error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Precalienta cache para keys específicos\r\n   */\r\n  async warmupCache(keys: string[], fetchers: (() => Promise<any>)[], strategyName: string): Promise<void> {\r\n    const strategy = this.strategies.get(strategyName);\r\n    if (!strategy || !strategy.warmupEnabled) {return;}\r\n\r\n    const warmupPromises = keys.map(async (key, index) => {\r\n      try {\r\n        const fetcher = fetchers[index];\r\n        if (fetcher) {\r\n          await this.execute(key, fetcher, strategyName);\r\n          logger.info(LogCategory.CACHE, `Cache precalentado para: ${key}`);\r\n        }\r\n      } catch (error) {\r\n        logger.error(LogCategory.CACHE, `Error precalentando cache: ${key}`, error as Error);\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(warmupPromises);\r\n  }\r\n}\r\n\r\n// Instancia singleton\r\nexport const advancedCacheStrategyManager = AdvancedCacheStrategyManager.getInstance();\r\n\r\n/**\r\n * Decorador para aplicar estrategias de cache automáticamente\r\n */\r\nexport function withCacheStrategy(strategyName: string, keyGenerator?: (...args: any[]) => string) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const key = keyGenerator ? keyGenerator(...args) : `${propertyName}:${JSON.stringify(args)}`;\r\n      \r\n      return advancedCacheStrategyManager.execute(\r\n        key,\r\n        () => method.apply(this, args),\r\n        strategyName\r\n      );\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * Utilidades para estrategias de cache\r\n */\r\nexport const CacheStrategyUtils = {\r\n  /**\r\n   * Crea contexto de cache basado en request\r\n   */\r\n  createContext(request?: any): CacheContext {\r\n    return {\r\n      userAgent: request?.headers?.['user-agent'],\r\n      connectionType: this.detectConnectionType(request),\r\n      deviceType: this.detectDeviceType(request?.headers?.['user-agent']),\r\n      timestamp: Date.now(),\r\n      priority: 'normal'\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Detecta tipo de conexión\r\n   */\r\n  detectConnectionType(request?: any): string {\r\n    // Lógica para detectar tipo de conexión\r\n    return 'fast'; // Placeholder\r\n  },\r\n\r\n  /**\r\n   * Detecta tipo de dispositivo\r\n   */\r\n  detectDeviceType(userAgent?: string): 'mobile' | 'tablet' | 'desktop' {\r\n    if (!userAgent) {return 'desktop';}\r\n    \r\n    if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {\r\n      return /iPad/.test(userAgent) ? 'tablet' : 'mobile';\r\n    }\r\n    \r\n    return 'desktop';\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}