069377b0d65af02453471f1ed2c36b52
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA PRODUCT TYPES LIST
// ===================================
"use strict";
// Mock del hook useCategoryData
jest.mock('@/hooks/useCategoryData', ()=>({
        useCategoryData: ()=>({
                categories: Object.values(_shop.PRODUCT_CATEGORIES),
                loading: false,
                error: null
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ProductTypesList = /*#__PURE__*/ _interop_require_default(require("../../components/ShopWithSidebar/ProductTypesList"));
const _shop = require("../../constants/shop");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockOnCategorySelect = jest.fn();
const defaultProps = {
    onCategorySelect: mockOnCategorySelect,
    selectedCategory: ''
};
beforeEach(()=>{
    mockOnCategorySelect.mockClear();
});
describe('ProductTypesList', ()=>{
    it('should render component title', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText('Tipos de Productos')).toBeInTheDocument();
    });
    it('should render all product categories', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        Object.values(_shop.PRODUCT_CATEGORIES).forEach((category)=>{
            expect(_react1.screen.getByText(category.name)).toBeInTheDocument();
        });
    });
    it('should render category buttons', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        const buttons = _react1.screen.getAllByRole('button');
        expect(buttons).toHaveLength(Object.keys(_shop.PRODUCT_CATEGORIES).length);
    });
    it('should call onCategorySelect when category is clicked', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        const pinturaButton = _react1.screen.getByText('Pinturas');
        _react1.fireEvent.click(pinturaButton);
        expect(mockOnCategorySelect).toHaveBeenCalledWith('pinturas');
    });
    it('should highlight selected category', ()=>{
        const propsWithSelected = {
            ...defaultProps,
            selectedCategory: 'pinturas'
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...propsWithSelected
        }));
        const pinturaButton = _react1.screen.getByText('Pinturas').closest('button');
        expect(pinturaButton).toHaveClass('bg-primary', 'text-white');
    });
    it('should not highlight unselected categories', ()=>{
        const propsWithSelected = {
            ...defaultProps,
            selectedCategory: 'pinturas'
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...propsWithSelected
        }));
        const herramientasButton = _react1.screen.getByText('Herramientas').closest('button');
        expect(herramientasButton).not.toHaveClass('bg-primary', 'text-white');
        expect(herramientasButton).toHaveClass('hover:bg-gray-100');
    });
    it('should show category descriptions in title attribute', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        Object.values(_shop.PRODUCT_CATEGORIES).forEach((category)=>{
            const button = _react1.screen.getByText(category.name).closest('button');
            expect(button).toHaveAttribute('title', category.description);
        });
    });
    it('should handle multiple category selections', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        const pinturaButton = _react1.screen.getByText('Pinturas');
        const herramientasButton = _react1.screen.getByText('Herramientas');
        _react1.fireEvent.click(pinturaButton);
        expect(mockOnCategorySelect).toHaveBeenCalledWith('pinturas');
        _react1.fireEvent.click(herramientasButton);
        expect(mockOnCategorySelect).toHaveBeenCalledWith('herramientas');
        expect(mockOnCategorySelect).toHaveBeenCalledTimes(2);
    });
    it('should render with proper accessibility attributes', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        const buttons = _react1.screen.getAllByRole('button');
        buttons.forEach((button)=>{
            expect(button).toBeInTheDocument();
            expect(button).toHaveAttribute('title');
        });
    });
    it('should handle empty selected category', ()=>{
        const propsWithEmpty = {
            ...defaultProps,
            selectedCategory: ''
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...propsWithEmpty
        }));
        const buttons = _react1.screen.getAllByRole('button');
        buttons.forEach((button)=>{
            expect(button).not.toHaveClass('bg-primary', 'text-white');
        });
    });
    it('should handle invalid selected category', ()=>{
        const propsWithInvalid = {
            ...defaultProps,
            selectedCategory: 'invalid-category'
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...propsWithInvalid
        }));
        const buttons = _react1.screen.getAllByRole('button');
        buttons.forEach((button)=>{
            expect(button).not.toHaveClass('bg-primary', 'text-white');
        });
    });
    it('should maintain consistent styling', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductTypesList.default, {
            ...defaultProps
        }));
        const container = _react1.screen.getByText('Tipos de Productos').closest('div');
        expect(container).toHaveClass('mb-7.5');
        const title = _react1.screen.getByText('Tipos de Productos');
        expect(title).toHaveClass('font-medium', 'text-dark', 'text-lg', 'mb-4');
        const list = _react1.screen.getByRole('list', {
            hidden: true
        });
        expect(list).toHaveClass('space-y-2');
    });
});

//# sourceMappingURL=data:application/json;base64,