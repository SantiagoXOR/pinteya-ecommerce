ad9778d191912783b0ec175ad30cca03
// ===================================
// API ERROR HANDLER - SISTEMA CENTRALIZADO
// ===================================
// Manejo consistente de errores de API con retry logic,
// logging estructurado y user experience optimizada
"use strict";

/* istanbul ignore next */
function cov_b42js3tko() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-handling\\ApiErrorHandler.ts";
  var hash = "cb766cf8870e13630603cb8f51f885e47ade28bd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-handling\\ApiErrorHandler.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 31
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "7": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 24
        }
      },
      "8": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 33
        }
      },
      "9": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "10": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "11": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "12": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 36
        }
      },
      "13": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "14": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "15": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "16": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 28
        }
      },
      "17": {
        start: {
          line: 84,
          column: 22
        },
        end: {
          line: 84,
          column: 23
        }
      },
      "18": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "19": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "20": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "21": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 59
        }
      },
      "22": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 30
        }
      },
      "23": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 55
        }
      },
      "24": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 26
        }
      },
      "25": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "26": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 73
        }
      },
      "27": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "28": {
        start: {
          line: 100,
          column: 34
        },
        end: {
          line: 100,
          column: 87
        }
      },
      "29": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 44
        }
      },
      "30": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 29
        }
      },
      "31": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 22
        }
      },
      "32": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "33": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 77
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 28
        }
      },
      "35": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 56
        }
      },
      "36": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "37": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 118,
          column: 34
        }
      },
      "38": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "39": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "40": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "41": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 42
        }
      },
      "42": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "43": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "44": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "45": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "46": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "47": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 25
        }
      },
      "48": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "49": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 25
        }
      },
      "50": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 20
        }
      },
      "51": {
        start: {
          line: 165,
          column: 22
        },
        end: {
          line: 165,
          column: 84
        }
      },
      "52": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 50
        }
      },
      "53": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "54": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "55": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 56
        }
      },
      "56": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "57": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 24
        }
      },
      "58": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 21
        }
      },
      "59": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 74
        }
      },
      "60": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "61": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "62": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 63
        }
      },
      "63": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 43
        }
      },
      "64": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 47
        }
      },
      "65": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 48
        }
      },
      "66": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 31
        }
      },
      "67": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "68": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "69": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "70": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 72
        }
      },
      "71": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 51
        }
      },
      "72": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "73": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 48
        }
      },
      "74": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "75": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 43
        }
      },
      "76": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 60
        }
      },
      "77": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "78": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 248,
          column: 15
        }
      },
      "79": {
        start: {
          line: 249,
          column: 15
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "80": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "81": {
        start: {
          line: 254,
          column: 15
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "82": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "83": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 263,
          column: 15
        }
      },
      "84": {
        start: {
          line: 270,
          column: 33
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "85": {
        start: {
          line: 277,
          column: 32
        },
        end: {
          line: 277,
          column: 66
        }
      },
      "86": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "87": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 35
        }
      },
      "88": {
        start: {
          line: 282,
          column: 31
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "89": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "90": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 48
        }
      },
      "91": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 64
        }
      },
      "92": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 59
        }
      },
      "93": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 52
        }
      },
      "94": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 50
        }
      },
      "95": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 42
        }
      },
      "96": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 41
        }
      },
      "97": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 51
        }
      },
      "98": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 63
        }
      },
      "99": {
        start: {
          line: 317,
          column: 38
        },
        end: {
          line: 317,
          column: 61
        }
      },
      "100": {
        start: {
          line: 322,
          column: 22
        },
        end: {
          line: 322,
          column: 24
        }
      },
      "101": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "102": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 327,
          column: 14
        }
      },
      "103": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 21
        }
      },
      "104": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 33
        }
      },
      "105": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 32
        }
      },
      "106": {
        start: {
          line: 338,
          column: 24
        },
        end: {
          line: 338,
          column: 45
        }
      },
      "107": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 340,
          column: 67
        }
      },
      "108": {
        start: {
          line: 343,
          column: 18
        },
        end: {
          line: 343,
          column: 36
        }
      },
      "109": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 344,
          column: 26
        }
      },
      "110": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 345,
          column: 22
        }
      },
      "111": {
        start: {
          line: 346,
          column: 4
        },
        end: {
          line: 346,
          column: 28
        }
      },
      "112": {
        start: {
          line: 347,
          column: 4
        },
        end: {
          line: 347,
          column: 47
        }
      },
      "113": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 348,
          column: 17
        }
      },
      "114": {
        start: {
          line: 350,
          column: 17
        },
        end: {
          line: 350,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 27
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 28
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 71,
            column: 7
          }
        },
        loc: {
          start: {
            line: 71,
            column: 58
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 28
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 153,
            column: 6
          },
          end: {
            line: 153,
            column: 7
          }
        },
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 164,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        loc: {
          start: {
            line: 164,
            column: 38
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 164
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 171,
            column: 6
          },
          end: {
            line: 171,
            column: 7
          }
        },
        loc: {
          start: {
            line: 171,
            column: 30
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 171
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 183,
            column: 6
          },
          end: {
            line: 183,
            column: 7
          }
        },
        loc: {
          start: {
            line: 183,
            column: 32
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 183
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 188,
            column: 6
          },
          end: {
            line: 188,
            column: 7
          }
        },
        loc: {
          start: {
            line: 188,
            column: 46
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 188
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 228,
            column: 6
          },
          end: {
            line: 228,
            column: 7
          }
        },
        loc: {
          start: {
            line: 228,
            column: 53
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 228
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 242,
            column: 6
          },
          end: {
            line: 242,
            column: 7
          }
        },
        loc: {
          start: {
            line: 242,
            column: 37
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 242
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 268,
            column: 7
          }
        },
        loc: {
          start: {
            line: 268,
            column: 38
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 268
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 302,
            column: 6
          },
          end: {
            line: 302,
            column: 7
          }
        },
        loc: {
          start: {
            line: 302,
            column: 36
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 302
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 5
          }
        },
        loc: {
          start: {
            line: 307,
            column: 30
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 307
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 28
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 311
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 316,
            column: 6
          },
          end: {
            line: 316,
            column: 7
          }
        },
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 316
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 317,
            column: 27
          },
          end: {
            line: 317,
            column: 28
          }
        },
        loc: {
          start: {
            line: 317,
            column: 38
          },
          end: {
            line: 317,
            column: 61
          }
        },
        line: 317
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 321,
            column: 6
          },
          end: {
            line: 321,
            column: 7
          }
        },
        loc: {
          start: {
            line: 321,
            column: 22
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 321
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 333,
            column: 6
          },
          end: {
            line: 333,
            column: 7
          }
        },
        loc: {
          start: {
            line: 333,
            column: 24
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 333
      },
      "24": {
        name: "withErrorHandling",
        decl: {
          start: {
            line: 339,
            column: 15
          },
          end: {
            line: 339,
            column: 32
          }
        },
        loc: {
          start: {
            line: 339,
            column: 59
          },
          end: {
            line: 341,
            column: 1
          }
        },
        line: 339
      },
      "25": {
        name: "createApiError",
        decl: {
          start: {
            line: 342,
            column: 9
          },
          end: {
            line: 342,
            column: 23
          }
        },
        loc: {
          start: {
            line: 342,
            column: 56
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 342
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 61,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 27
          }
        }],
        line: 61
      },
      "1": {
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 55
          },
          end: {
            line: 80,
            column: 74
          }
        }, {
          start: {
            line: 80,
            column: 77
          },
          end: {
            line: 80,
            column: 82
          }
        }],
        line: 80
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "4": {
        loc: {
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 99,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 99,
            column: 65
          }
        }, {
          start: {
            line: 99,
            column: 69
          },
          end: {
            line: 99,
            column: 92
          }
        }, {
          start: {
            line: 99,
            column: 96
          },
          end: {
            line: 99,
            column: 148
          }
        }],
        line: 99
      },
      "5": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "8": {
        loc: {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 42
          }
        }, {
          start: {
            line: 120,
            column: 46
          },
          end: {
            line: 120,
            column: 77
          }
        }],
        line: 120
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 27
          },
          end: {
            line: 128,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 27
          },
          end: {
            line: 128,
            column: 45
          }
        }, {
          start: {
            line: 128,
            column: 49
          },
          end: {
            line: 128,
            column: 80
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 37
          }
        }, {
          start: {
            line: 132,
            column: 41
          },
          end: {
            line: 132,
            column: 53
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 25
          },
          end: {
            line: 135,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 25
          },
          end: {
            line: 135,
            column: 38
          }
        }, {
          start: {
            line: 135,
            column: 42
          },
          end: {
            line: 135,
            column: 64
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 32
          }
        }, {
          start: {
            line: 137,
            column: 36
          },
          end: {
            line: 137,
            column: 58
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "15": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "16": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 24
          }
        }, {
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 76
          }
        }],
        line: 157
      },
      "17": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "18": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "19": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 42
          }
        }, {
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 176,
            column: 77
          }
        }],
        line: 176
      },
      "20": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "21": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "22": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 49
          }
        }, {
          start: {
            line: 212,
            column: 53
          },
          end: {
            line: 212,
            column: 76
          }
        }],
        line: 212
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "25": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }],
        line: 244
      },
      "26": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 24
          }
        }, {
          start: {
            line: 244,
            column: 28
          },
          end: {
            line: 244,
            column: 47
          }
        }],
        line: 244
      },
      "27": {
        loc: {
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: 254,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }],
        line: 249
      },
      "28": {
        loc: {
          start: {
            line: 254,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: 259,
            column: 15
          },
          end: {
            line: 264,
            column: 9
          }
        }],
        line: 254
      },
      "29": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 280,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "30": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "31": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 24
          }
        }, {
          start: {
            line: 294,
            column: 28
          },
          end: {
            line: 294,
            column: 56
          }
        }],
        line: 294
      },
      "32": {
        loc: {
          start: {
            line: 303,
            column: 24
          },
          end: {
            line: 303,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 24
          },
          end: {
            line: 303,
            column: 54
          }
        }, {
          start: {
            line: 303,
            column: 58
          },
          end: {
            line: 303,
            column: 59
          }
        }],
        line: 303
      },
      "33": {
        loc: {
          start: {
            line: 312,
            column: 15
          },
          end: {
            line: 312,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 15
          },
          end: {
            line: 312,
            column: 45
          }
        }, {
          start: {
            line: 312,
            column: 49
          },
          end: {
            line: 312,
            column: 50
          }
        }],
        line: 312
      },
      "34": {
        loc: {
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 326,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 326,
            column: 56
          }
        }, {
          start: {
            line: 326,
            column: 60
          },
          end: {
            line: 326,
            column: 61
          }
        }],
        line: 326
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-handling\\ApiErrorHandler.ts"],
      sourcesContent: ["// ===================================\r\n// API ERROR HANDLER - SISTEMA CENTRALIZADO\r\n// ===================================\r\n// Manejo consistente de errores de API con retry logic,\r\n// logging estructurado y user experience optimizada\r\n\r\nimport { toast } from 'react-hot-toast';\r\n\r\n// ===================================\r\n// TIPOS E INTERFACES\r\n// ===================================\r\n\r\nexport interface ApiError extends Error {\r\n  status?: number;\r\n  code?: string;\r\n  details?: any;\r\n  timestamp?: string;\r\n  requestId?: string;\r\n  retryable?: boolean;\r\n}\r\n\r\nexport interface ErrorContext {\r\n  endpoint: string;\r\n  method: string;\r\n  requestData?: any;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  userAgent?: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface RetryConfig {\r\n  maxRetries: number;\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n  backoffFactor: number;\r\n  retryableStatuses: number[];\r\n}\r\n\r\nexport interface ErrorHandlerConfig {\r\n  enableLogging: boolean;\r\n  enableToasts: boolean;\r\n  enableRetry: boolean;\r\n  retryConfig: RetryConfig;\r\n  logEndpoint?: string;\r\n  onError?: (error: ApiError, context: ErrorContext) => void;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACI\xD3N POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_CONFIG: ErrorHandlerConfig = {\r\n  enableLogging: true,\r\n  enableToasts: true,\r\n  enableRetry: true,\r\n  retryConfig: {\r\n    maxRetries: 3,\r\n    baseDelay: 1000,\r\n    maxDelay: 10000,\r\n    backoffFactor: 2,\r\n    retryableStatuses: [408, 429, 500, 502, 503, 504],\r\n  },\r\n  logEndpoint: '/api/errors',\r\n};\r\n\r\n// ===================================\r\n// CLASE PRINCIPAL\r\n// ===================================\r\n\r\nexport class ApiErrorHandler {\r\n  private config: ErrorHandlerConfig;\r\n  private errorCounts: Map<string, number> = new Map();\r\n  private lastErrors: Map<string, number> = new Map();\r\n\r\n  constructor(config: Partial<ErrorHandlerConfig> = {}) {\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n  }\r\n\r\n  /**\r\n   * Maneja errores de API con retry autom\xE1tico\r\n   */\r\n  async handleApiCall<T>(\r\n    apiCall: () => Promise<T>,\r\n    context: Partial<ErrorContext>,\r\n    customConfig?: Partial<ErrorHandlerConfig>\r\n  ): Promise<T> {\r\n    const finalConfig = { ...this.config, ...customConfig };\r\n    const fullContext: ErrorContext = {\r\n      endpoint: 'unknown',\r\n      method: 'GET',\r\n      timestamp: new Date().toISOString(),\r\n      userAgent: typeof window !== 'undefined' ? navigator.userAgent : 'SSR',\r\n      ...context,\r\n    };\r\n\r\n    let lastError: ApiError | null = null;\r\n    let attempt = 0;\r\n\r\n    while (attempt <= finalConfig.retryConfig.maxRetries) {\r\n      try {\r\n        const result = await apiCall();\r\n        \r\n        // Limpiar contadores de error en caso de \xE9xito\r\n        this.clearErrorCount(fullContext.endpoint);\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        lastError = this.normalizeError(error);\r\n        attempt++;\r\n\r\n        // Log del error\r\n        if (finalConfig.enableLogging) {\r\n          await this.logError(lastError, fullContext, attempt);\r\n        }\r\n\r\n        // Verificar si debe reintentar\r\n        if (\r\n          attempt <= finalConfig.retryConfig.maxRetries &&\r\n          finalConfig.enableRetry &&\r\n          this.shouldRetry(lastError, finalConfig.retryConfig)\r\n        ) {\r\n          const delay = this.calculateDelay(attempt, finalConfig.retryConfig);\r\n          await this.sleep(delay);\r\n          continue;\r\n        }\r\n\r\n        // No m\xE1s reintentos, manejar error final\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Manejar error final\r\n    if (lastError) {\r\n      await this.handleFinalError(lastError, fullContext, finalConfig);\r\n      throw lastError;\r\n    }\r\n\r\n    throw new Error('Unexpected error in API call');\r\n  }\r\n\r\n  /**\r\n   * Normaliza errores a formato est\xE1ndar\r\n   */\r\n  private normalizeError(error: any): ApiError {\r\n    if (error instanceof Error) {\r\n      const apiError = error as ApiError;\r\n      \r\n      // Extraer informaci\xF3n adicional si est\xE1 disponible\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        apiError.status = 0;\r\n        apiError.code = 'NETWORK_ERROR';\r\n        apiError.retryable = true;\r\n      }\r\n      \r\n      return {\r\n        ...apiError,\r\n        timestamp: new Date().toISOString(),\r\n        retryable: apiError.retryable ?? this.isRetryableError(apiError),\r\n      };\r\n    }\r\n\r\n    // Error de respuesta HTTP\r\n    if (typeof error === 'object' && error.status) {\r\n      return {\r\n        name: 'ApiError',\r\n        message: error.message || `HTTP ${error.status}`,\r\n        status: error.status,\r\n        code: error.code || `HTTP_${error.status}`,\r\n        details: error.details,\r\n        timestamp: new Date().toISOString(),\r\n        retryable: this.isRetryableStatus(error.status),\r\n      };\r\n    }\r\n\r\n    // Error gen\xE9rico\r\n    return {\r\n      name: 'UnknownError',\r\n      message: String(error),\r\n      timestamp: new Date().toISOString(),\r\n      retryable: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determina si un error es reintentable\r\n   */\r\n  private shouldRetry(error: ApiError, config: RetryConfig): boolean {\r\n    if (!error.retryable) {return false;}\r\n    \r\n    if (error.status && !config.retryableStatuses.includes(error.status)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Calcula el delay para el siguiente intento\r\n   */\r\n  private calculateDelay(attempt: number, config: RetryConfig): number {\r\n    const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\r\n    const jitter = Math.random() * 0.1 * delay; // 10% jitter\r\n    return Math.min(delay + jitter, config.maxDelay);\r\n  }\r\n\r\n  /**\r\n   * Determina si un error es reintentable por defecto\r\n   */\r\n  private isRetryableError(error: ApiError): boolean {\r\n    if (error.status) {\r\n      return this.isRetryableStatus(error.status);\r\n    }\r\n    \r\n    // Errores de red son reintentables\r\n    if (error.code === 'NETWORK_ERROR' || error.message.includes('fetch')) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determina si un status HTTP es reintentable\r\n   */\r\n  private isRetryableStatus(status: number): boolean {\r\n    return this.config.retryConfig.retryableStatuses.includes(status);\r\n  }\r\n\r\n  /**\r\n   * Log estructurado del error\r\n   */\r\n  private async logError(\r\n    error: ApiError, \r\n    context: ErrorContext, \r\n    attempt: number\r\n  ): Promise<void> {\r\n    const logData = {\r\n      error: {\r\n        name: error.name,\r\n        message: error.message,\r\n        status: error.status,\r\n        code: error.code,\r\n        stack: error.stack,\r\n        timestamp: error.timestamp,\r\n      },\r\n      context,\r\n      attempt,\r\n      maxRetries: this.config.retryConfig.maxRetries,\r\n      environment: process.env.NODE_ENV,\r\n    };\r\n\r\n    // Log en consola para desarrollo\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.group(`\uD83D\uDEA8 API Error - Attempt ${attempt}`);\r\n      console.error('Error:', error);\r\n      console.error('Context:', context);\r\n      console.error('Log Data:', logData);\r\n      console.groupEnd();\r\n    }\r\n\r\n    // Enviar a servicio de logging en producci\xF3n\r\n    if (process.env.NODE_ENV === 'production' && this.config.logEndpoint) {\r\n      try {\r\n        await fetch(this.config.logEndpoint, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(logData),\r\n        });\r\n      } catch (loggingError) {\r\n        console.error('Failed to log API error:', loggingError);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja el error final despu\xE9s de todos los reintentos\r\n   */\r\n  private async handleFinalError(\r\n    error: ApiError,\r\n    context: ErrorContext,\r\n    config: ErrorHandlerConfig\r\n  ): Promise<void> {\r\n    // Incrementar contador de errores\r\n    this.incrementErrorCount(context.endpoint);\r\n\r\n    // Mostrar toast si est\xE1 habilitado\r\n    if (config.enableToasts) {\r\n      this.showErrorToast(error, context);\r\n    }\r\n\r\n    // Callback personalizado\r\n    if (config.onError) {\r\n      config.onError(error, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Muestra toast de error apropiado\r\n   */\r\n  private showErrorToast(error: ApiError, context: ErrorContext): void {\r\n    const message = this.getErrorMessage(error, context);\r\n    \r\n    if (error.status && error.status >= 500) {\r\n      toast.error(message, {\r\n        duration: 5000,\r\n        id: `api-error-${context.endpoint}`,\r\n      });\r\n    } else if (error.status === 429) {\r\n      toast.error('Demasiadas solicitudes. Intenta de nuevo en unos momentos.', {\r\n        duration: 4000,\r\n        id: 'rate-limit-error',\r\n      });\r\n    } else if (error.status === 401) {\r\n      toast.error('Sesi\xF3n expirada. Por favor, inicia sesi\xF3n nuevamente.', {\r\n        duration: 6000,\r\n        id: 'auth-error',\r\n      });\r\n    } else {\r\n      toast.error(message, {\r\n        duration: 4000,\r\n        id: `api-error-${error.code}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera mensaje de error user-friendly\r\n   */\r\n  private getErrorMessage(error: ApiError, context: ErrorContext): string {\r\n    // Mensajes espec\xEDficos por endpoint\r\n    const endpointMessages: Record<string, string> = {\r\n      '/api/products': 'Error al cargar productos',\r\n      '/api/search': 'Error en la b\xFAsqueda',\r\n      '/api/cart': 'Error al actualizar el carrito',\r\n      '/api/checkout': 'Error en el proceso de compra',\r\n      '/api/auth': 'Error de autenticaci\xF3n',\r\n    };\r\n\r\n    const endpointMessage = endpointMessages[context.endpoint];\r\n    if (endpointMessage) {\r\n      return endpointMessage;\r\n    }\r\n\r\n    // Mensajes por status code\r\n    const statusMessages: Record<number, string> = {\r\n      400: 'Solicitud inv\xE1lida',\r\n      401: 'No autorizado',\r\n      403: 'Acceso denegado',\r\n      404: 'Recurso no encontrado',\r\n      408: 'Tiempo de espera agotado',\r\n      429: 'Demasiadas solicitudes',\r\n      500: 'Error interno del servidor',\r\n      502: 'Servicio no disponible',\r\n      503: 'Servicio temporalmente no disponible',\r\n      504: 'Tiempo de espera del servidor agotado',\r\n    };\r\n\r\n    if (error.status && statusMessages[error.status]) {\r\n      return statusMessages[error.status];\r\n    }\r\n\r\n    // Mensaje gen\xE9rico\r\n    return 'Ocurri\xF3 un error inesperado. Intenta de nuevo.';\r\n  }\r\n\r\n  /**\r\n   * Utilidades para contadores de error\r\n   */\r\n  private incrementErrorCount(endpoint: string): void {\r\n    const current = this.errorCounts.get(endpoint) || 0;\r\n    this.errorCounts.set(endpoint, current + 1);\r\n    this.lastErrors.set(endpoint, Date.now());\r\n  }\r\n\r\n  private clearErrorCount(endpoint: string): void {\r\n    this.errorCounts.delete(endpoint);\r\n    this.lastErrors.delete(endpoint);\r\n  }\r\n\r\n  private getErrorCount(endpoint: string): number {\r\n    return this.errorCounts.get(endpoint) || 0;\r\n  }\r\n\r\n  /**\r\n   * Utilidad para sleep\r\n   */\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad\xEDsticas de errores\r\n   */\r\n  getErrorStats(): Record<string, { count: number; lastError: number }> {\r\n    const stats: Record<string, { count: number; lastError: number }> = {};\r\n    \r\n    for (const [endpoint, count] of this.errorCounts.entries()) {\r\n      stats[endpoint] = {\r\n        count,\r\n        lastError: this.lastErrors.get(endpoint) || 0,\r\n      };\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Limpia estad\xEDsticas de errores\r\n   */\r\n  clearErrorStats(): void {\r\n    this.errorCounts.clear();\r\n    this.lastErrors.clear();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL\r\n// ===================================\r\n\r\nexport const apiErrorHandler = new ApiErrorHandler();\r\n\r\n// ===================================\r\n// HELPER FUNCTIONS\r\n// ===================================\r\n\r\n/**\r\n * Wrapper para llamadas de API con manejo de errores\r\n */\r\nexport async function withErrorHandling<T>(\r\n  apiCall: () => Promise<T>,\r\n  context: Partial<ErrorContext>,\r\n  config?: Partial<ErrorHandlerConfig>\r\n): Promise<T> {\r\n  return apiErrorHandler.handleApiCall(apiCall, context, config);\r\n}\r\n\r\n/**\r\n * Crea un error de API\r\n */\r\nexport function createApiError(\r\n  message: string,\r\n  status?: number,\r\n  code?: string,\r\n  details?: any\r\n): ApiError {\r\n  const error = new Error(message) as ApiError;\r\n  error.status = status;\r\n  error.code = code;\r\n  error.details = details;\r\n  error.timestamp = new Date().toISOString();\r\n  return error;\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport default ApiErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["ApiErrorHandler", "apiErrorHandler", "createApiError", "withErrorHandling", "DEFAULT_CONFIG", "enableLogging", "enableToasts", "enableRetry", "retryConfig", "maxRetries", "baseDelay", "maxDelay", "backoffFactor", "retryableStatuses", "logEndpoint", "config", "errorCounts", "Map", "lastErrors", "handleApiCall", "apiCall", "context", "customConfig", "finalConfig", "fullContext", "endpoint", "method", "timestamp", "Date", "toISOString", "userAgent", "window", "navigator", "lastError", "attempt", "result", "clearErrorCount", "error", "normalizeError", "logError", "shouldRetry", "delay", "calculateDelay", "sleep", "handleFinalError", "Error", "apiError", "name", "message", "includes", "status", "code", "retryable", "isRetryableError", "details", "isRetryableStatus", "String", "Math", "pow", "jitter", "random", "min", "logData", "stack", "environment", "process", "env", "NODE_ENV", "console", "group", "groupEnd", "fetch", "headers", "body", "JSON", "stringify", "loggingError", "incrementErrorCount", "showErrorToast", "onError", "getErrorMessage", "toast", "duration", "id", "endpointMessages", "endpointMessage", "statusMessages", "current", "get", "set", "now", "delete", "getErrorCount", "ms", "Promise", "resolve", "setTimeout", "getErrorStats", "stats", "count", "entries", "clearErrorStats", "clear"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cb766cf8870e13630603cb8f51f885e47ade28bd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_b42js3tko = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_b42js3tko();
cov_b42js3tko().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_b42js3tko().f[0]++;
  cov_b42js3tko().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_b42js3tko().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_b42js3tko().s[3]++;
_export(exports, {
  get ApiErrorHandler() {
    /* istanbul ignore next */
    cov_b42js3tko().f[1]++;
    cov_b42js3tko().s[4]++;
    return ApiErrorHandler;
  },
  get apiErrorHandler() {
    /* istanbul ignore next */
    cov_b42js3tko().f[2]++;
    cov_b42js3tko().s[5]++;
    return apiErrorHandler;
  },
  get createApiError() {
    /* istanbul ignore next */
    cov_b42js3tko().f[3]++;
    cov_b42js3tko().s[6]++;
    return createApiError;
  },
  get
  // ===================================
  // EXPORTS
  // ===================================
  default() {
    /* istanbul ignore next */
    cov_b42js3tko().f[4]++;
    cov_b42js3tko().s[7]++;
    return _default;
  },
  get withErrorHandling() {
    /* istanbul ignore next */
    cov_b42js3tko().f[5]++;
    cov_b42js3tko().s[8]++;
    return withErrorHandling;
  }
});
const _reacthottoast =
/* istanbul ignore next */
(cov_b42js3tko().s[9]++, require("react-hot-toast"));
// ===================================
// CONFIGURACIÓN POR DEFECTO
// ===================================
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_b42js3tko().s[10]++, {
  enableLogging: true,
  enableToasts: true,
  enableRetry: true,
  retryConfig: {
    maxRetries: 3,
    baseDelay: 1000,
    maxDelay: 10000,
    backoffFactor: 2,
    retryableStatuses: [408, 429, 500, 502, 503, 504]
  },
  logEndpoint: '/api/errors'
});
class ApiErrorHandler {
  constructor(config =
  /* istanbul ignore next */
  (cov_b42js3tko().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_b42js3tko().f[6]++;
    cov_b42js3tko().s[11]++;
    this.errorCounts = new Map();
    /* istanbul ignore next */
    cov_b42js3tko().s[12]++;
    this.lastErrors = new Map();
    /* istanbul ignore next */
    cov_b42js3tko().s[13]++;
    this.config = {
      ...DEFAULT_CONFIG,
      ...config
    };
  }
  /**
  * Maneja errores de API con retry automático
  */
  async handleApiCall(apiCall, context, customConfig) {
    /* istanbul ignore next */
    cov_b42js3tko().f[7]++;
    const finalConfig =
    /* istanbul ignore next */
    (cov_b42js3tko().s[14]++, {
      ...this.config,
      ...customConfig
    });
    const fullContext =
    /* istanbul ignore next */
    (cov_b42js3tko().s[15]++, {
      endpoint: 'unknown',
      method: 'GET',
      timestamp: new Date().toISOString(),
      userAgent: typeof window !== 'undefined' ?
      /* istanbul ignore next */
      (cov_b42js3tko().b[1][0]++, navigator.userAgent) :
      /* istanbul ignore next */
      (cov_b42js3tko().b[1][1]++, 'SSR'),
      ...context
    });
    let lastError =
    /* istanbul ignore next */
    (cov_b42js3tko().s[16]++, null);
    let attempt =
    /* istanbul ignore next */
    (cov_b42js3tko().s[17]++, 0);
    /* istanbul ignore next */
    cov_b42js3tko().s[18]++;
    while (attempt <= finalConfig.retryConfig.maxRetries) {
      /* istanbul ignore next */
      cov_b42js3tko().s[19]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_b42js3tko().s[20]++, await apiCall());
        // Limpiar contadores de error en caso de éxito
        /* istanbul ignore next */
        cov_b42js3tko().s[21]++;
        this.clearErrorCount(fullContext.endpoint);
        /* istanbul ignore next */
        cov_b42js3tko().s[22]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_b42js3tko().s[23]++;
        lastError = this.normalizeError(error);
        /* istanbul ignore next */
        cov_b42js3tko().s[24]++;
        attempt++;
        // Log del error
        /* istanbul ignore next */
        cov_b42js3tko().s[25]++;
        if (finalConfig.enableLogging) {
          /* istanbul ignore next */
          cov_b42js3tko().b[2][0]++;
          cov_b42js3tko().s[26]++;
          await this.logError(lastError, fullContext, attempt);
        } else
        /* istanbul ignore next */
        {
          cov_b42js3tko().b[2][1]++;
        }
        // Verificar si debe reintentar
        cov_b42js3tko().s[27]++;
        if (
        /* istanbul ignore next */
        (cov_b42js3tko().b[4][0]++, attempt <= finalConfig.retryConfig.maxRetries) &&
        /* istanbul ignore next */
        (cov_b42js3tko().b[4][1]++, finalConfig.enableRetry) &&
        /* istanbul ignore next */
        (cov_b42js3tko().b[4][2]++, this.shouldRetry(lastError, finalConfig.retryConfig))) {
          /* istanbul ignore next */
          cov_b42js3tko().b[3][0]++;
          const delay =
          /* istanbul ignore next */
          (cov_b42js3tko().s[28]++, this.calculateDelay(attempt, finalConfig.retryConfig));
          /* istanbul ignore next */
          cov_b42js3tko().s[29]++;
          await this.sleep(delay);
          /* istanbul ignore next */
          cov_b42js3tko().s[30]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_b42js3tko().b[3][1]++;
        }
        cov_b42js3tko().s[31]++;
        break;
      }
    }
    // Manejar error final
    /* istanbul ignore next */
    cov_b42js3tko().s[32]++;
    if (lastError) {
      /* istanbul ignore next */
      cov_b42js3tko().b[5][0]++;
      cov_b42js3tko().s[33]++;
      await this.handleFinalError(lastError, fullContext, finalConfig);
      /* istanbul ignore next */
      cov_b42js3tko().s[34]++;
      throw lastError;
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[5][1]++;
    }
    cov_b42js3tko().s[35]++;
    throw new Error('Unexpected error in API call');
  }
  /**
  * Normaliza errores a formato estándar
  */
  normalizeError(error) {
    /* istanbul ignore next */
    cov_b42js3tko().f[8]++;
    cov_b42js3tko().s[36]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_b42js3tko().b[6][0]++;
      const apiError =
      /* istanbul ignore next */
      (cov_b42js3tko().s[37]++, error);
      // Extraer información adicional si está disponible
      /* istanbul ignore next */
      cov_b42js3tko().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_b42js3tko().b[8][0]++, error.name === 'TypeError') &&
      /* istanbul ignore next */
      (cov_b42js3tko().b[8][1]++, error.message.includes('fetch'))) {
        /* istanbul ignore next */
        cov_b42js3tko().b[7][0]++;
        cov_b42js3tko().s[39]++;
        apiError.status = 0;
        /* istanbul ignore next */
        cov_b42js3tko().s[40]++;
        apiError.code = 'NETWORK_ERROR';
        /* istanbul ignore next */
        cov_b42js3tko().s[41]++;
        apiError.retryable = true;
      } else
      /* istanbul ignore next */
      {
        cov_b42js3tko().b[7][1]++;
      }
      cov_b42js3tko().s[42]++;
      return {
        ...apiError,
        timestamp: new Date().toISOString(),
        retryable:
        /* istanbul ignore next */
        (cov_b42js3tko().b[9][0]++, apiError.retryable) ??
        /* istanbul ignore next */
        (cov_b42js3tko().b[9][1]++, this.isRetryableError(apiError))
      };
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[6][1]++;
    }
    // Error de respuesta HTTP
    cov_b42js3tko().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[11][0]++, typeof error === 'object') &&
    /* istanbul ignore next */
    (cov_b42js3tko().b[11][1]++, error.status)) {
      /* istanbul ignore next */
      cov_b42js3tko().b[10][0]++;
      cov_b42js3tko().s[44]++;
      return {
        name: 'ApiError',
        message:
        /* istanbul ignore next */
        (cov_b42js3tko().b[12][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_b42js3tko().b[12][1]++, `HTTP ${error.status}`),
        status: error.status,
        code:
        /* istanbul ignore next */
        (cov_b42js3tko().b[13][0]++, error.code) ||
        /* istanbul ignore next */
        (cov_b42js3tko().b[13][1]++, `HTTP_${error.status}`),
        details: error.details,
        timestamp: new Date().toISOString(),
        retryable: this.isRetryableStatus(error.status)
      };
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[10][1]++;
    }
    // Error genérico
    cov_b42js3tko().s[45]++;
    return {
      name: 'UnknownError',
      message: String(error),
      timestamp: new Date().toISOString(),
      retryable: false
    };
  }
  /**
  * Determina si un error es reintentable
  */
  shouldRetry(error, config) {
    /* istanbul ignore next */
    cov_b42js3tko().f[9]++;
    cov_b42js3tko().s[46]++;
    if (!error.retryable) {
      /* istanbul ignore next */
      cov_b42js3tko().b[14][0]++;
      cov_b42js3tko().s[47]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[14][1]++;
    }
    cov_b42js3tko().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[16][0]++, error.status) &&
    /* istanbul ignore next */
    (cov_b42js3tko().b[16][1]++, !config.retryableStatuses.includes(error.status))) {
      /* istanbul ignore next */
      cov_b42js3tko().b[15][0]++;
      cov_b42js3tko().s[49]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[15][1]++;
    }
    cov_b42js3tko().s[50]++;
    return true;
  }
  /**
  * Calcula el delay para el siguiente intento
  */
  calculateDelay(attempt, config) {
    /* istanbul ignore next */
    cov_b42js3tko().f[10]++;
    const delay =
    /* istanbul ignore next */
    (cov_b42js3tko().s[51]++, config.baseDelay * Math.pow(config.backoffFactor, attempt - 1));
    const jitter =
    /* istanbul ignore next */
    (cov_b42js3tko().s[52]++, Math.random() * 0.1 * delay); // 10% jitter
    /* istanbul ignore next */
    cov_b42js3tko().s[53]++;
    return Math.min(delay + jitter, config.maxDelay);
  }
  /**
  * Determina si un error es reintentable por defecto
  */
  isRetryableError(error) {
    /* istanbul ignore next */
    cov_b42js3tko().f[11]++;
    cov_b42js3tko().s[54]++;
    if (error.status) {
      /* istanbul ignore next */
      cov_b42js3tko().b[17][0]++;
      cov_b42js3tko().s[55]++;
      return this.isRetryableStatus(error.status);
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[17][1]++;
    }
    // Errores de red son reintentables
    cov_b42js3tko().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[19][0]++, error.code === 'NETWORK_ERROR') ||
    /* istanbul ignore next */
    (cov_b42js3tko().b[19][1]++, error.message.includes('fetch'))) {
      /* istanbul ignore next */
      cov_b42js3tko().b[18][0]++;
      cov_b42js3tko().s[57]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[18][1]++;
    }
    cov_b42js3tko().s[58]++;
    return false;
  }
  /**
  * Determina si un status HTTP es reintentable
  */
  isRetryableStatus(status) {
    /* istanbul ignore next */
    cov_b42js3tko().f[12]++;
    cov_b42js3tko().s[59]++;
    return this.config.retryConfig.retryableStatuses.includes(status);
  }
  /**
  * Log estructurado del error
  */
  async logError(error, context, attempt) {
    /* istanbul ignore next */
    cov_b42js3tko().f[13]++;
    const logData =
    /* istanbul ignore next */
    (cov_b42js3tko().s[60]++, {
      error: {
        name: error.name,
        message: error.message,
        status: error.status,
        code: error.code,
        stack: error.stack,
        timestamp: error.timestamp
      },
      context,
      attempt,
      maxRetries: this.config.retryConfig.maxRetries,
      environment: process.env.NODE_ENV
    });
    // Log en consola para desarrollo
    /* istanbul ignore next */
    cov_b42js3tko().s[61]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_b42js3tko().b[20][0]++;
      cov_b42js3tko().s[62]++;
      console.group(`🚨 API Error - Attempt ${attempt}`);
      /* istanbul ignore next */
      cov_b42js3tko().s[63]++;
      console.error('Error:', error);
      /* istanbul ignore next */
      cov_b42js3tko().s[64]++;
      console.error('Context:', context);
      /* istanbul ignore next */
      cov_b42js3tko().s[65]++;
      console.error('Log Data:', logData);
      /* istanbul ignore next */
      cov_b42js3tko().s[66]++;
      console.groupEnd();
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[20][1]++;
    }
    // Enviar a servicio de logging en producción
    cov_b42js3tko().s[67]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[22][0]++, process.env.NODE_ENV === 'production') &&
    /* istanbul ignore next */
    (cov_b42js3tko().b[22][1]++, this.config.logEndpoint)) {
      /* istanbul ignore next */
      cov_b42js3tko().b[21][0]++;
      cov_b42js3tko().s[68]++;
      try {
        /* istanbul ignore next */
        cov_b42js3tko().s[69]++;
        await fetch(this.config.logEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(logData)
        });
      } catch (loggingError) {
        /* istanbul ignore next */
        cov_b42js3tko().s[70]++;
        console.error('Failed to log API error:', loggingError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[21][1]++;
    }
  }
  /**
  * Maneja el error final después de todos los reintentos
  */
  async handleFinalError(error, context, config) {
    /* istanbul ignore next */
    cov_b42js3tko().f[14]++;
    cov_b42js3tko().s[71]++;
    // Incrementar contador de errores
    this.incrementErrorCount(context.endpoint);
    // Mostrar toast si está habilitado
    /* istanbul ignore next */
    cov_b42js3tko().s[72]++;
    if (config.enableToasts) {
      /* istanbul ignore next */
      cov_b42js3tko().b[23][0]++;
      cov_b42js3tko().s[73]++;
      this.showErrorToast(error, context);
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[23][1]++;
    }
    // Callback personalizado
    cov_b42js3tko().s[74]++;
    if (config.onError) {
      /* istanbul ignore next */
      cov_b42js3tko().b[24][0]++;
      cov_b42js3tko().s[75]++;
      config.onError(error, context);
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[24][1]++;
    }
  }
  /**
  * Muestra toast de error apropiado
  */
  showErrorToast(error, context) {
    /* istanbul ignore next */
    cov_b42js3tko().f[15]++;
    const message =
    /* istanbul ignore next */
    (cov_b42js3tko().s[76]++, this.getErrorMessage(error, context));
    /* istanbul ignore next */
    cov_b42js3tko().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[26][0]++, error.status) &&
    /* istanbul ignore next */
    (cov_b42js3tko().b[26][1]++, error.status >= 500)) {
      /* istanbul ignore next */
      cov_b42js3tko().b[25][0]++;
      cov_b42js3tko().s[78]++;
      _reacthottoast.toast.error(message, {
        duration: 5000,
        id: `api-error-${context.endpoint}`
      });
    } else {
      /* istanbul ignore next */
      cov_b42js3tko().b[25][1]++;
      cov_b42js3tko().s[79]++;
      if (error.status === 429) {
        /* istanbul ignore next */
        cov_b42js3tko().b[27][0]++;
        cov_b42js3tko().s[80]++;
        _reacthottoast.toast.error('Demasiadas solicitudes. Intenta de nuevo en unos momentos.', {
          duration: 4000,
          id: 'rate-limit-error'
        });
      } else {
        /* istanbul ignore next */
        cov_b42js3tko().b[27][1]++;
        cov_b42js3tko().s[81]++;
        if (error.status === 401) {
          /* istanbul ignore next */
          cov_b42js3tko().b[28][0]++;
          cov_b42js3tko().s[82]++;
          _reacthottoast.toast.error('Sesión expirada. Por favor, inicia sesión nuevamente.', {
            duration: 6000,
            id: 'auth-error'
          });
        } else {
          /* istanbul ignore next */
          cov_b42js3tko().b[28][1]++;
          cov_b42js3tko().s[83]++;
          _reacthottoast.toast.error(message, {
            duration: 4000,
            id: `api-error-${error.code}`
          });
        }
      }
    }
  }
  /**
  * Genera mensaje de error user-friendly
  */
  getErrorMessage(error, context) {
    /* istanbul ignore next */
    cov_b42js3tko().f[16]++;
    // Mensajes específicos por endpoint
    const endpointMessages =
    /* istanbul ignore next */
    (cov_b42js3tko().s[84]++, {
      '/api/products': 'Error al cargar productos',
      '/api/search': 'Error en la búsqueda',
      '/api/cart': 'Error al actualizar el carrito',
      '/api/checkout': 'Error en el proceso de compra',
      '/api/auth': 'Error de autenticación'
    });
    const endpointMessage =
    /* istanbul ignore next */
    (cov_b42js3tko().s[85]++, endpointMessages[context.endpoint]);
    /* istanbul ignore next */
    cov_b42js3tko().s[86]++;
    if (endpointMessage) {
      /* istanbul ignore next */
      cov_b42js3tko().b[29][0]++;
      cov_b42js3tko().s[87]++;
      return endpointMessage;
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[29][1]++;
    }
    // Mensajes por status code
    const statusMessages =
    /* istanbul ignore next */
    (cov_b42js3tko().s[88]++, {
      400: 'Solicitud inválida',
      401: 'No autorizado',
      403: 'Acceso denegado',
      404: 'Recurso no encontrado',
      408: 'Tiempo de espera agotado',
      429: 'Demasiadas solicitudes',
      500: 'Error interno del servidor',
      502: 'Servicio no disponible',
      503: 'Servicio temporalmente no disponible',
      504: 'Tiempo de espera del servidor agotado'
    });
    /* istanbul ignore next */
    cov_b42js3tko().s[89]++;
    if (
    /* istanbul ignore next */
    (cov_b42js3tko().b[31][0]++, error.status) &&
    /* istanbul ignore next */
    (cov_b42js3tko().b[31][1]++, statusMessages[error.status])) {
      /* istanbul ignore next */
      cov_b42js3tko().b[30][0]++;
      cov_b42js3tko().s[90]++;
      return statusMessages[error.status];
    } else
    /* istanbul ignore next */
    {
      cov_b42js3tko().b[30][1]++;
    }
    // Mensaje genérico
    cov_b42js3tko().s[91]++;
    return 'Ocurrió un error inesperado. Intenta de nuevo.';
  }
  /**
  * Utilidades para contadores de error
  */
  incrementErrorCount(endpoint) {
    /* istanbul ignore next */
    cov_b42js3tko().f[17]++;
    const current =
    /* istanbul ignore next */
    (cov_b42js3tko().s[92]++,
    /* istanbul ignore next */
    (cov_b42js3tko().b[32][0]++, this.errorCounts.get(endpoint)) ||
    /* istanbul ignore next */
    (cov_b42js3tko().b[32][1]++, 0));
    /* istanbul ignore next */
    cov_b42js3tko().s[93]++;
    this.errorCounts.set(endpoint, current + 1);
    /* istanbul ignore next */
    cov_b42js3tko().s[94]++;
    this.lastErrors.set(endpoint, Date.now());
  }
  clearErrorCount(endpoint) {
    /* istanbul ignore next */
    cov_b42js3tko().f[18]++;
    cov_b42js3tko().s[95]++;
    this.errorCounts.delete(endpoint);
    /* istanbul ignore next */
    cov_b42js3tko().s[96]++;
    this.lastErrors.delete(endpoint);
  }
  getErrorCount(endpoint) {
    /* istanbul ignore next */
    cov_b42js3tko().f[19]++;
    cov_b42js3tko().s[97]++;
    return /* istanbul ignore next */(cov_b42js3tko().b[33][0]++, this.errorCounts.get(endpoint)) ||
    /* istanbul ignore next */
    (cov_b42js3tko().b[33][1]++, 0);
  }
  /**
  * Utilidad para sleep
  */
  sleep(ms) {
    /* istanbul ignore next */
    cov_b42js3tko().f[20]++;
    cov_b42js3tko().s[98]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_b42js3tko().f[21]++;
      cov_b42js3tko().s[99]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
  * Obtiene estadísticas de errores
  */
  getErrorStats() {
    /* istanbul ignore next */
    cov_b42js3tko().f[22]++;
    const stats =
    /* istanbul ignore next */
    (cov_b42js3tko().s[100]++, {});
    /* istanbul ignore next */
    cov_b42js3tko().s[101]++;
    for (const [endpoint, count] of this.errorCounts.entries()) {
      /* istanbul ignore next */
      cov_b42js3tko().s[102]++;
      stats[endpoint] = {
        count,
        lastError:
        /* istanbul ignore next */
        (cov_b42js3tko().b[34][0]++, this.lastErrors.get(endpoint)) ||
        /* istanbul ignore next */
        (cov_b42js3tko().b[34][1]++, 0)
      };
    }
    /* istanbul ignore next */
    cov_b42js3tko().s[103]++;
    return stats;
  }
  /**
  * Limpia estadísticas de errores
  */
  clearErrorStats() {
    /* istanbul ignore next */
    cov_b42js3tko().f[23]++;
    cov_b42js3tko().s[104]++;
    this.errorCounts.clear();
    /* istanbul ignore next */
    cov_b42js3tko().s[105]++;
    this.lastErrors.clear();
  }
}
const apiErrorHandler =
/* istanbul ignore next */
(cov_b42js3tko().s[106]++, new ApiErrorHandler());
async function withErrorHandling(apiCall, context, config) {
  /* istanbul ignore next */
  cov_b42js3tko().f[24]++;
  cov_b42js3tko().s[107]++;
  return apiErrorHandler.handleApiCall(apiCall, context, config);
}
function createApiError(message, status, code, details) {
  /* istanbul ignore next */
  cov_b42js3tko().f[25]++;
  const error =
  /* istanbul ignore next */
  (cov_b42js3tko().s[108]++, new Error(message));
  /* istanbul ignore next */
  cov_b42js3tko().s[109]++;
  error.status = status;
  /* istanbul ignore next */
  cov_b42js3tko().s[110]++;
  error.code = code;
  /* istanbul ignore next */
  cov_b42js3tko().s[111]++;
  error.details = details;
  /* istanbul ignore next */
  cov_b42js3tko().s[112]++;
  error.timestamp = new Date().toISOString();
  /* istanbul ignore next */
  cov_b42js3tko().s[113]++;
  return error;
}
const _default =
/* istanbul ignore next */
(cov_b42js3tko().s[114]++, ApiErrorHandler);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,