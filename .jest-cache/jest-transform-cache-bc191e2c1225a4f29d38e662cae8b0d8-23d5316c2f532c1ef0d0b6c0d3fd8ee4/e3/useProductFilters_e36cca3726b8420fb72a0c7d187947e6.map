{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\hooks\\useProductFilters.ts"],"sourcesContent":["// ===================================\r\n// HOOK: useProductFilters - Optimizado para Performance\r\n// ===================================\r\n\r\nimport { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\nimport { ProductFilters } from '@/types/api';\r\n\r\n// ===================================\r\n// TIPOS\r\n// ===================================\r\n\r\nexport interface ProductFilterState {\r\n  categories: string[];\r\n  brands: string[];\r\n  priceMin?: number;\r\n  priceMax?: number;\r\n  search?: string;\r\n  sortBy: string;\r\n  page: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface UseProductFiltersOptions {\r\n  syncWithUrl?: boolean;\r\n  defaultSort?: string;\r\n  defaultLimit?: number;\r\n  debounceMs?: number;\r\n  onFiltersChange?: (filters: ProductFilterState) => void;\r\n}\r\n\r\nexport interface UseProductFiltersReturn {\r\n  filters: ProductFilterState;\r\n  updateCategories: (categories: string[]) => void;\r\n  updateBrands: (brands: string[]) => void;\r\n  updatePriceRange: (min?: number, max?: number) => void;\r\n  updateSearch: (search: string) => void;\r\n  updateSort: (sort: string) => void;\r\n  updatePage: (page: number) => void;\r\n  updateLimit: (limit: number) => void;\r\n  clearFilters: () => void;\r\n  applyFilters: () => void;\r\n  hasActiveFilters: boolean;\r\n  totalActiveFilters: number;\r\n  isLoading: boolean;\r\n}\r\n\r\n// ===================================\r\n// CONSTANTES\r\n// ===================================\r\n\r\nconst DEFAULT_FILTERS: ProductFilterState = {\r\n  categories: [],\r\n  brands: [],\r\n  priceMin: undefined,\r\n  priceMax: undefined,\r\n  search: '',\r\n  sortBy: 'created_at',\r\n  page: 1,\r\n  limit: 12,\r\n};\r\n\r\n// ===================================\r\n// HOOK PRINCIPAL\r\n// ===================================\r\n\r\nexport function useProductFilters(options: UseProductFiltersOptions = {}): UseProductFiltersReturn {\r\n  const {\r\n    syncWithUrl = true,\r\n    defaultSort = 'created_at',\r\n    defaultLimit = 12,\r\n    debounceMs = 300,\r\n    onFiltersChange,\r\n  } = options;\r\n\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Estado de filtros optimizado\r\n  const [filters, setFilters] = useState<ProductFilterState>(() => ({\r\n    ...DEFAULT_FILTERS,\r\n    sortBy: defaultSort,\r\n    limit: defaultLimit,\r\n  }));\r\n\r\n  // Inicializar y sincronizar filtros desde URL\r\n  useEffect(() => {\r\n    if (!syncWithUrl || !searchParams) {return;}\r\n\r\n    const urlFilters: ProductFilterState = {\r\n      categories: searchParams.get('categories')?.split(',').filter(Boolean) || [],\r\n      brands: searchParams.get('brands')?.split(',').filter(Boolean) || [],\r\n      priceMin: searchParams.get('priceMin') ? Number(searchParams.get('priceMin')) : undefined,\r\n      priceMax: searchParams.get('priceMax') ? Number(searchParams.get('priceMax')) : undefined,\r\n      search: searchParams.get('search') || '',\r\n      sortBy: searchParams.get('sortBy') || defaultSort,\r\n      page: Number(searchParams.get('page')) || 1,\r\n      limit: Number(searchParams.get('limit')) || defaultLimit,\r\n    };\r\n\r\n    setFilters(urlFilters);\r\n  }, [searchParams, syncWithUrl, defaultSort, defaultLimit]); // Actualizar cuando cambien los searchParams\r\n\r\n  // Función optimizada para actualizar URL\r\n  const updateUrl = useCallback((newFilters: ProductFilterState) => {\r\n    if (!syncWithUrl) {return;}\r\n\r\n    const params = new URLSearchParams();\r\n\r\n    // Solo agregar parámetros que tienen valores\r\n    if (newFilters.categories.length > 0) {\r\n      params.set('categories', newFilters.categories.join(','));\r\n    }\r\n    if (newFilters.brands.length > 0) {\r\n      params.set('brands', newFilters.brands.join(','));\r\n    }\r\n    if (newFilters.priceMin !== undefined) {\r\n      params.set('priceMin', newFilters.priceMin.toString());\r\n    }\r\n    if (newFilters.priceMax !== undefined) {\r\n      params.set('priceMax', newFilters.priceMax.toString());\r\n    }\r\n    if (newFilters.search && newFilters.search.trim()) {\r\n      params.set('search', newFilters.search.trim());\r\n    }\r\n    if (newFilters.sortBy !== defaultSort) {\r\n      params.set('sortBy', newFilters.sortBy);\r\n    }\r\n    if (newFilters.page > 1) {\r\n      params.set('page', newFilters.page.toString());\r\n    }\r\n    if (newFilters.limit !== defaultLimit) {\r\n      params.set('limit', newFilters.limit.toString());\r\n    }\r\n\r\n    const newQuery = params.toString();\r\n    const currentQuery = window.location.search.slice(1);\r\n\r\n    if (newQuery !== currentQuery) {\r\n      const newUrl = newQuery \r\n        ? `${window.location.pathname}?${newQuery}`\r\n        : window.location.pathname;\r\n\r\n      router.push(newUrl, { scroll: false });\r\n    }\r\n  }, [syncWithUrl, router, defaultSort, defaultLimit]);\r\n\r\n  // Función optimizada para actualizar filtros\r\n  const updateFilters = useCallback((updates: Partial<ProductFilterState>) => {\r\n    setFilters(prev => {\r\n      const newFilters = { ...prev, ...updates };\r\n      \r\n      // Reset page cuando cambian otros filtros (excepto page)\r\n      if (!updates.hasOwnProperty('page') && Object.keys(updates).length > 0) {\r\n        newFilters.page = 1;\r\n      }\r\n\r\n      // Actualizar URL de forma asíncrona\r\n      setTimeout(() => updateUrl(newFilters), 0);\r\n      \r\n      // Callback opcional\r\n      onFiltersChange?.(newFilters);\r\n      \r\n      return newFilters;\r\n    });\r\n  }, [updateUrl, onFiltersChange]);\r\n\r\n  // Handlers memoizados para evitar re-renders\r\n  const updateCategories = useCallback((categories: string[]) => {\r\n    updateFilters({ categories });\r\n  }, [updateFilters]);\r\n\r\n  const updateBrands = useCallback((brands: string[]) => {\r\n    updateFilters({ brands });\r\n  }, [updateFilters]);\r\n\r\n  const updatePriceRange = useCallback((priceMin?: number, priceMax?: number) => {\r\n    updateFilters({ priceMin, priceMax });\r\n  }, [updateFilters]);\r\n\r\n  const updateSearch = useCallback((search: string) => {\r\n    updateFilters({ search });\r\n  }, [updateFilters]);\r\n\r\n  const updateSort = useCallback((sortBy: string) => {\r\n    updateFilters({ sortBy });\r\n  }, [updateFilters]);\r\n\r\n  const updatePage = useCallback((page: number) => {\r\n    updateFilters({ page });\r\n  }, [updateFilters]);\r\n\r\n  const updateLimit = useCallback((limit: number) => {\r\n    updateFilters({ limit });\r\n  }, [updateFilters]);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    const clearedFilters = {\r\n      ...DEFAULT_FILTERS,\r\n      sortBy: defaultSort,\r\n      limit: defaultLimit,\r\n    };\r\n    setFilters(clearedFilters);\r\n    updateUrl(clearedFilters);\r\n  }, [defaultSort, defaultLimit, updateUrl]);\r\n\r\n  const applyFilters = useCallback(() => {\r\n    // Forzar actualización de URL\r\n    updateUrl(filters);\r\n    onFiltersChange?.(filters);\r\n  }, [filters, updateUrl, onFiltersChange]);\r\n\r\n  // Computed values memoizados\r\n  const hasActiveFilters = useMemo(() => {\r\n    return (\r\n      filters.categories.length > 0 ||\r\n      filters.brands.length > 0 ||\r\n      filters.priceMin !== undefined ||\r\n      filters.priceMax !== undefined ||\r\n      (filters.search && filters.search.trim() !== '') ||\r\n      filters.sortBy !== defaultSort ||\r\n      filters.page > 1\r\n    );\r\n  }, [filters, defaultSort]);\r\n\r\n  const totalActiveFilters = useMemo(() => {\r\n    let count = 0;\r\n    count += filters.categories.length;\r\n    count += filters.brands.length;\r\n    if (filters.priceMin !== undefined || filters.priceMax !== undefined) {count += 1;}\r\n    if (filters.search && filters.search.trim() !== '') {count += 1;}\r\n    return count;\r\n  }, [filters]);\r\n\r\n  return {\r\n    filters,\r\n    updateCategories,\r\n    updateBrands,\r\n    updatePriceRange,\r\n    updateSearch,\r\n    updateSort,\r\n    updatePage,\r\n    updateLimit,\r\n    clearFilters,\r\n    applyFilters,\r\n    hasActiveFilters,\r\n    totalActiveFilters,\r\n    isLoading,\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useProductFilters","DEFAULT_FILTERS","categories","brands","priceMin","undefined","priceMax","search","sortBy","page","limit","options","syncWithUrl","defaultSort","defaultLimit","debounceMs","onFiltersChange","router","useRouter","searchParams","useSearchParams","isLoading","setIsLoading","useState","filters","setFilters","useEffect","urlFilters","get","split","filter","Boolean","Number","updateUrl","useCallback","newFilters","params","URLSearchParams","length","set","join","toString","trim","newQuery","currentQuery","window","location","slice","newUrl","pathname","push","scroll","updateFilters","updates","prev","hasOwnProperty","Object","keys","setTimeout","updateCategories","updateBrands","updatePriceRange","updateSearch","updateSort","updatePage","updateLimit","clearFilters","clearedFilters","applyFilters","hasActiveFilters","useMemo","totalActiveFilters","count"],"mappings":"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"}