{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\__mocks__\\api-mocks.ts"],"sourcesContent":["// ===================================\r\n// MOCKS CENTRALIZADOS PARA APIs - PINTEYA E-COMMERCE\r\n// ===================================\r\n\r\n/**\r\n * Mocks centralizados y reutilizables para todas las APIs del proyecto\r\n * Incluye respuestas realistas y manejo completo de casos edge\r\n */\r\n\r\n// ===================================\r\n// TIPOS Y INTERFACES\r\n// ===================================\r\n\r\nexport interface MockResponseOptions {\r\n  ok?: boolean;\r\n  status?: number;\r\n  statusText?: string;\r\n  delay?: number;\r\n}\r\n\r\nexport interface MockApiResponse {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n  message?: string;\r\n  pagination?: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\n// ===================================\r\n// DATOS MOCK REALISTAS\r\n// ===================================\r\n\r\nexport const mockProducts = [\r\n  {\r\n    id: 1,\r\n    name: 'Pintura Látex Interior Blanco 4L',\r\n    slug: 'pintura-latex-interior-blanco-4l',\r\n    description: 'Pintura látex de alta calidad para interiores, acabado mate',\r\n    price: 2500,\r\n    discounted_price: 2200,\r\n    stock: 15,\r\n    brand: 'Sherwin Williams',\r\n    category_id: 1,\r\n    images: { \r\n      previews: ['/images/products/pintura-latex-blanco.jpg'],\r\n      main: '/images/products/pintura-latex-blanco-main.jpg'\r\n    },\r\n    category: { \r\n      id: 1, \r\n      name: 'Pinturas', \r\n      slug: 'pinturas' \r\n    },\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    updated_at: '2024-01-20T15:30:00Z'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Taladro Percutor 650W',\r\n    slug: 'taladro-percutor-650w',\r\n    description: 'Taladro percutor profesional con mandril de 13mm',\r\n    price: 8500,\r\n    discounted_price: null,\r\n    stock: 8,\r\n    brand: 'Bosch',\r\n    category_id: 2,\r\n    images: { \r\n      previews: ['/images/products/taladro-bosch.jpg'],\r\n      main: '/images/products/taladro-bosch-main.jpg'\r\n    },\r\n    category: { \r\n      id: 2, \r\n      name: 'Herramientas', \r\n      slug: 'herramientas' \r\n    },\r\n    created_at: '2024-01-10T08:00:00Z',\r\n    updated_at: '2024-01-18T12:00:00Z'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Cemento Portland 50kg',\r\n    slug: 'cemento-portland-50kg',\r\n    description: 'Cemento Portland tipo I para construcción general',\r\n    price: 1200,\r\n    discounted_price: 1100,\r\n    stock: 25,\r\n    brand: 'Loma Negra',\r\n    category_id: 3,\r\n    images: { \r\n      previews: ['/images/products/cemento-portland.jpg'],\r\n      main: '/images/products/cemento-portland-main.jpg'\r\n    },\r\n    category: { \r\n      id: 3, \r\n      name: 'Materiales', \r\n      slug: 'materiales' \r\n    },\r\n    created_at: '2024-01-05T09:00:00Z',\r\n    updated_at: '2024-01-22T11:00:00Z'\r\n  }\r\n];\r\n\r\nexport const mockCategories = [\r\n  { id: 1, name: 'Pinturas', slug: 'pinturas', description: 'Pinturas para interior y exterior' },\r\n  { id: 2, name: 'Herramientas', slug: 'herramientas', description: 'Herramientas manuales y eléctricas' },\r\n  { id: 3, name: 'Materiales', slug: 'materiales', description: 'Materiales de construcción' },\r\n  { id: 4, name: 'Ferretería', slug: 'ferreteria', description: 'Artículos de ferretería general' }\r\n];\r\n\r\nexport const mockOrders = [\r\n  {\r\n    id: 1,\r\n    user_id: 'user_123',\r\n    status: 'pending',\r\n    total: 5800,\r\n    items: [\r\n      { product_id: 1, quantity: 2, price: 2200 },\r\n      { product_id: 3, quantity: 1, price: 1100 }\r\n    ],\r\n    created_at: '2024-01-25T14:30:00Z',\r\n    updated_at: '2024-01-25T14:30:00Z'\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 'user_456',\r\n    status: 'confirmed',\r\n    total: 8500,\r\n    items: [\r\n      { product_id: 2, quantity: 1, price: 8500 }\r\n    ],\r\n    created_at: '2024-01-24T10:15:00Z',\r\n    updated_at: '2024-01-24T16:20:00Z'\r\n  }\r\n];\r\n\r\n// ===================================\r\n// HELPER PARA CREAR RESPUESTAS MOCK COMPLETAS\r\n// ===================================\r\n\r\n/**\r\n * Crea una respuesta mock completa compatible con fetch API\r\n */\r\nexport function createMockResponse(\r\n  data: any, \r\n  options: MockResponseOptions = {}\r\n): Response {\r\n  const {\r\n    ok = true,\r\n    status = 200,\r\n    statusText = 'OK',\r\n    delay = 0\r\n  } = options;\r\n\r\n  const response = {\r\n    ok,\r\n    status,\r\n    statusText,\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json',\r\n      'X-Mock-Response': 'true'\r\n    }),\r\n    url: 'http://localhost:3000/api/mock',\r\n    json: async () => {\r\n      if (delay > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n      return data;\r\n    },\r\n    text: async () => {\r\n      if (delay > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n      return JSON.stringify(data);\r\n    },\r\n    clone: jest.fn(() => response),\r\n    arrayBuffer: async () => new ArrayBuffer(0),\r\n    blob: async () => new Blob(),\r\n    formData: async () => new FormData(),\r\n    body: null,\r\n    bodyUsed: false,\r\n    redirected: false,\r\n    type: 'basic' as ResponseType\r\n  } as Response;\r\n\r\n  return response;\r\n}\r\n\r\n// ===================================\r\n// RESPUESTAS MOCK PREDEFINIDAS\r\n// ===================================\r\n\r\nexport const mockApiResponses = {\r\n  // Productos\r\n  products: {\r\n    success: {\r\n      success: true,\r\n      data: mockProducts,\r\n      pagination: {\r\n        page: 1,\r\n        limit: 12,\r\n        total: mockProducts.length,\r\n        totalPages: 1\r\n      }\r\n    },\r\n    empty: {\r\n      success: true,\r\n      data: [],\r\n      pagination: {\r\n        page: 1,\r\n        limit: 12,\r\n        total: 0,\r\n        totalPages: 0\r\n      }\r\n    },\r\n    error: {\r\n      success: false,\r\n      data: [],\r\n      error: 'Error obteniendo productos',\r\n      pagination: {\r\n        page: 1,\r\n        limit: 12,\r\n        total: 0,\r\n        totalPages: 0\r\n      }\r\n    }\r\n  },\r\n\r\n  // Categorías\r\n  categories: {\r\n    success: {\r\n      success: true,\r\n      data: mockCategories\r\n    },\r\n    error: {\r\n      success: false,\r\n      data: [],\r\n      error: 'Error obteniendo categorías'\r\n    }\r\n  },\r\n\r\n  // Órdenes\r\n  orders: {\r\n    success: {\r\n      success: true,\r\n      data: mockOrders,\r\n      pagination: {\r\n        page: 1,\r\n        limit: 10,\r\n        total: mockOrders.length,\r\n        totalPages: 1\r\n      }\r\n    },\r\n    error: {\r\n      success: false,\r\n      data: [],\r\n      error: 'Error obteniendo órdenes',\r\n      pagination: {\r\n        page: 1,\r\n        limit: 10,\r\n        total: 0,\r\n        totalPages: 0\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ===================================\r\n// CONFIGURACIONES MOCK COMUNES\r\n// ===================================\r\n\r\nexport const mockConfigurations = {\r\n  // Respuesta exitosa estándar\r\n  success: () => createMockResponse(mockApiResponses.products.success),\r\n  \r\n  // Error de red\r\n  networkError: () => {\r\n    throw new Error('Network Error');\r\n  },\r\n  \r\n  // Error HTTP 500\r\n  serverError: () => createMockResponse(\r\n    { error: 'Internal Server Error' },\r\n    { ok: false, status: 500, statusText: 'Internal Server Error' }\r\n  ),\r\n  \r\n  // Error HTTP 404\r\n  notFound: () => createMockResponse(\r\n    { error: 'Not Found' },\r\n    { ok: false, status: 404, statusText: 'Not Found' }\r\n  ),\r\n  \r\n  // Error HTTP 400\r\n  badRequest: () => createMockResponse(\r\n    { error: 'Bad Request' },\r\n    { ok: false, status: 400, statusText: 'Bad Request' }\r\n  ),\r\n  \r\n  // Respuesta con delay (para testing de loading states)\r\n  delayed: (data: any = mockApiResponses.products.success, delayMs: number = 1000) => \r\n    createMockResponse(data, { delay: delayMs })\r\n};\r\n\r\n// ===================================\r\n// SETUP HELPER PARA TESTS\r\n// ===================================\r\n\r\n/**\r\n * Configura mocks básicos para fetch en tests\r\n */\r\nexport function setupApiMocks() {\r\n  const mockFetch = jest.fn();\r\n  global.fetch = mockFetch;\r\n  \r\n  // Configuración por defecto: respuesta exitosa\r\n  mockFetch.mockResolvedValue(mockConfigurations.success());\r\n  \r\n  return {\r\n    mockFetch,\r\n    resetMocks: () => {\r\n      jest.clearAllMocks();\r\n      mockFetch.mockResolvedValue(mockConfigurations.success());\r\n    },\r\n    mockSuccess: (data?: any) => {\r\n      mockFetch.mockResolvedValueOnce(createMockResponse(data || mockApiResponses.products.success));\r\n    },\r\n    mockError: (error: string = 'API Error') => {\r\n      mockFetch.mockRejectedValueOnce(new Error(error));\r\n    },\r\n    mockHttpError: (status: number = 500, statusText: string = 'Internal Server Error') => {\r\n      mockFetch.mockResolvedValueOnce(createMockResponse(\r\n        { error: statusText },\r\n        { ok: false, status, statusText }\r\n      ));\r\n    }\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["createMockResponse","mockApiResponses","mockCategories","mockConfigurations","mockOrders","mockProducts","setupApiMocks","id","name","slug","description","price","discounted_price","stock","brand","category_id","images","previews","main","category","created_at","updated_at","user_id","status","total","items","product_id","quantity","data","options","ok","statusText","delay","response","headers","Headers","url","json","Promise","resolve","setTimeout","text","JSON","stringify","clone","jest","fn","arrayBuffer","ArrayBuffer","blob","Blob","formData","FormData","body","bodyUsed","redirected","type","products","success","pagination","page","limit","length","totalPages","empty","error","categories","orders","networkError","Error","serverError","notFound","badRequest","delayed","delayMs","mockFetch","global","fetch","mockResolvedValue","resetMocks","clearAllMocks","mockSuccess","mockResolvedValueOnce","mockError","mockRejectedValueOnce","mockHttpError"],"mappings":"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"}