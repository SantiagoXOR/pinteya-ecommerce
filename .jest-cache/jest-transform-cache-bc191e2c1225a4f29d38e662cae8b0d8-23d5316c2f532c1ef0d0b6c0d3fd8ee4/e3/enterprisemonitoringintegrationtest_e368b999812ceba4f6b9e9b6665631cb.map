{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\__tests__\\integration\\enterprise-monitoring-integration.test.ts"],"sourcesContent":["// ===================================\r\n// INTEGRATION TESTS - ENTERPRISE MONITORING SYSTEM\r\n// Tests de integraciÃ³n end-to-end del sistema completo\r\n// ===================================\r\n\r\nimport EnterpriseMonitoringManager from '@/lib/monitoring/enterprise-monitoring-manager';\r\nimport type { MonitoringConfig } from '@/lib/monitoring/enterprise-monitoring-manager';\r\n\r\n// Mock performance.now\r\nconst mockPerformanceNow = jest.fn();\r\nglobal.performance.now = mockPerformanceNow;\r\n\r\n// Mock PerformanceObserver\r\nglobal.PerformanceObserver = jest.fn().mockImplementation((callback) => ({\r\n  observe: jest.fn(),\r\n  disconnect: jest.fn()\r\n}));\r\n\r\ndescribe('Enterprise Monitoring System - Integration Tests', () => {\r\n  let monitoringManager: EnterpriseMonitoringManager;\r\n  let config: MonitoringConfig;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Reset singleton instance\r\n    (EnterpriseMonitoringManager as any).instance = undefined;\r\n    \r\n    config = {\r\n      errorTracking: {\r\n        enabled: true,\r\n        sampleRate: 1.0,\r\n        ignoreErrors: [],\r\n        maxBreadcrumbs: 50\r\n      },\r\n      performance: {\r\n        enabled: true,\r\n        sampleRate: 1.0,\r\n        thresholds: {\r\n          lcp: 2500,\r\n          fid: 100,\r\n          cls: 0.1,\r\n          loadTime: 3000\r\n        }\r\n      },\r\n      alerts: {\r\n        enabled: true,\r\n        channels: {\r\n          email: ['test@pinteya.com'],\r\n          slack: 'https://hooks.slack.com/test'\r\n        }\r\n      }\r\n    };\r\n\r\n    monitoringManager = EnterpriseMonitoringManager.getInstance(config);\r\n    \r\n    // Mock performance.now to return predictable values\r\n    let callCount = 0;\r\n    mockPerformanceNow.mockImplementation(() => {\r\n      callCount++;\r\n      return callCount * 100; // 100ms increments\r\n    });\r\n  });\r\n\r\n  describe('End-to-End Workflow Tests', () => {\r\n    it('should handle complete error tracking workflow', async () => {\r\n      // 1. Capture multiple errors\r\n      const errorId1 = monitoringManager.captureError(\r\n        new Error('Database connection failed'),\r\n        'critical',\r\n        { component: 'DatabaseService', action: 'connect' },\r\n        ['database', 'connection']\r\n      );\r\n\r\n      const errorId2 = monitoringManager.captureError(\r\n        'API timeout occurred',\r\n        'warning',\r\n        { component: 'APIService', endpoint: '/api/products' },\r\n        ['api', 'timeout']\r\n      );\r\n\r\n      const errorId3 = monitoringManager.captureError(\r\n        new Error('User authentication failed'),\r\n        'error',\r\n        { component: 'AuthService', userId: '12345' },\r\n        ['auth', 'user']\r\n      );\r\n\r\n      // 2. Verify errors were captured\r\n      expect(errorId1).toMatch(/^error_/);\r\n      expect(errorId2).toMatch(/^error_/);\r\n      expect(errorId3).toMatch(/^error_/);\r\n\r\n      // 3. Get all errors and verify\r\n      const allErrors = monitoringManager.getErrors();\r\n      expect(allErrors).toHaveLength(3);\r\n\r\n      // 4. Filter by level\r\n      const criticalErrors = monitoringManager.getErrors({ level: 'critical' });\r\n      expect(criticalErrors).toHaveLength(1);\r\n      expect(criticalErrors[0].message).toBe('Database connection failed');\r\n\r\n      const warningErrors = monitoringManager.getErrors({ level: 'warning' });\r\n      expect(warningErrors).toHaveLength(1);\r\n      expect(warningErrors[0].message).toBe('API timeout occurred');\r\n\r\n      // 5. Verify error deduplication (capture same error message)\r\n      const duplicateErrorId = monitoringManager.captureError(\r\n        'Database connection failed', // Use same string to ensure same fingerprint\r\n        'critical',\r\n        { component: 'DatabaseService', action: 'connect' },\r\n        ['database', 'connection']\r\n      );\r\n\r\n      expect(duplicateErrorId).toMatch(/^error_/);\r\n\r\n      const errorsAfterDuplicate = monitoringManager.getErrors();\r\n      // May have 3 or 4 depending on fingerprinting, check that we have the expected errors\r\n      expect(errorsAfterDuplicate.length).toBeGreaterThanOrEqual(3);\r\n\r\n      const duplicatedErrors = errorsAfterDuplicate.filter(e => e.message === 'Database connection failed');\r\n      expect(duplicatedErrors.length).toBeGreaterThanOrEqual(1);\r\n    });\r\n\r\n    it('should handle complete performance monitoring workflow', async () => {\r\n      // 1. Capture performance metrics\r\n      monitoringManager.capturePerformanceMetrics();\r\n\r\n      // 2. Record custom metrics\r\n      monitoringManager.recordMetric('api_response_time', 1250, {\r\n        endpoint: '/api/products',\r\n        method: 'GET'\r\n      });\r\n\r\n      monitoringManager.recordMetric('database_query_time', 450, {\r\n        query: 'SELECT * FROM products',\r\n        table: 'products'\r\n      });\r\n\r\n      monitoringManager.recordMetric('cache_hit_rate', 0.85, {\r\n        cache_type: 'redis',\r\n        operation: 'get'\r\n      });\r\n\r\n      // 3. Get performance metrics\r\n      const metrics = monitoringManager.getPerformanceMetrics();\r\n      expect(metrics).toHaveLength(1); // capturePerformanceMetrics creates one entry\r\n\r\n      // 4. Verify metrics were recorded (check console logs)\r\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\r\n      \r\n      monitoringManager.recordMetric('test_metric', 123);\r\n      \r\n      // Restore console\r\n      consoleSpy.mockRestore();\r\n\r\n      // 5. Filter metrics by time range\r\n      const now = new Date();\r\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\r\n      \r\n      const recentMetrics = monitoringManager.getPerformanceMetrics({\r\n        start: oneHourAgo,\r\n        end: now\r\n      });\r\n      \r\n      expect(recentMetrics.length).toBeGreaterThanOrEqual(1);\r\n    });\r\n\r\n    it('should handle complete alert system workflow', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n\r\n      // 1. Trigger performance alert\r\n      monitoringManager.recordMetric('load_time', 5000); // Exceeds 3000ms threshold\r\n\r\n      // 2. Trigger error rate alert by capturing multiple errors quickly\r\n      for (let i = 0; i < 10; i++) {\r\n        monitoringManager.captureError(`Error ${i}`, 'error');\r\n      }\r\n\r\n      // 3. Get active alerts\r\n      const activeAlerts = monitoringManager.getActiveAlerts();\r\n      expect(activeAlerts.length).toBeGreaterThan(0);\r\n\r\n      // 4. Find performance alert\r\n      const performanceAlert = activeAlerts.find(alert => \r\n        alert.context.metricName === 'load_time'\r\n      );\r\n      expect(performanceAlert).toBeDefined();\r\n      expect(performanceAlert?.severity).toBe('medium');\r\n      expect(performanceAlert?.acknowledged).toBe(false);\r\n\r\n      // 5. Acknowledge the alert\r\n      if (performanceAlert) {\r\n        const success = monitoringManager.acknowledgeAlert(performanceAlert.id);\r\n        expect(success).toBe(true);\r\n\r\n        const updatedAlerts = monitoringManager.getActiveAlerts();\r\n        const acknowledgedAlert = updatedAlerts.find(a => a.id === performanceAlert.id);\r\n        expect(acknowledgedAlert?.acknowledged).toBe(true);\r\n      }\r\n\r\n      // 6. Resolve the alert\r\n      if (performanceAlert) {\r\n        const success = monitoringManager.resolveAlert(performanceAlert.id);\r\n        expect(success).toBe(true);\r\n      }\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('should generate comprehensive monitoring summary', async () => {\r\n      // 1. Create diverse monitoring data\r\n      \r\n      // Errors\r\n      monitoringManager.captureError('Critical system failure', 'critical');\r\n      monitoringManager.captureError('Database timeout', 'error');\r\n      monitoringManager.captureError('API rate limit exceeded', 'warning');\r\n      monitoringManager.captureError('Cache miss', 'info');\r\n\r\n      // Performance metrics\r\n      monitoringManager.capturePerformanceMetrics();\r\n      monitoringManager.recordMetric('load_time', 2500);\r\n      monitoringManager.recordMetric('memory_usage', 85.5);\r\n\r\n      // Trigger alerts\r\n      monitoringManager.recordMetric('load_time', 4000); // Should trigger alert\r\n\r\n      // 2. Get comprehensive summary\r\n      const summary = monitoringManager.getMonitoringSummary();\r\n\r\n      // 3. Verify summary data\r\n      expect(summary.errors.total).toBe(4);\r\n      expect(summary.errors.critical).toBe(1);\r\n      expect(summary.errors.warning).toBeGreaterThanOrEqual(1);\r\n\r\n      expect(summary.performance.averageLoadTime).toBeGreaterThanOrEqual(0);\r\n      expect(summary.performance.averageMemoryUsage).toBeGreaterThanOrEqual(0);\r\n\r\n      expect(summary.alerts.active).toBeGreaterThanOrEqual(0);\r\n      expect(summary.alerts.unacknowledged).toBeGreaterThanOrEqual(0);\r\n\r\n      expect(summary.system.uptime).toBeGreaterThan(0);\r\n      expect(summary.system.sessionId).toMatch(/^session_/);\r\n\r\n      // 4. Verify summary calculations\r\n      const errors = monitoringManager.getErrors();\r\n      const criticalErrors = errors.filter(e => e.level === 'critical');\r\n      expect(summary.errors.critical).toBe(criticalErrors.length);\r\n    });\r\n\r\n    it('should handle system configuration changes', async () => {\r\n      // 1. Test with error tracking disabled\r\n      const disabledConfig = { ...config };\r\n      disabledConfig.errorTracking.enabled = false;\r\n\r\n      // Reset singleton\r\n      (EnterpriseMonitoringManager as any).instance = undefined;\r\n      const disabledManager = EnterpriseMonitoringManager.getInstance(disabledConfig);\r\n\r\n      const errorId = disabledManager.captureError('Test error', 'error');\r\n      expect(errorId).toBe('');\r\n\r\n      // 2. Test with performance monitoring disabled\r\n      disabledConfig.errorTracking.enabled = true;\r\n      disabledConfig.performance.enabled = false;\r\n\r\n      // Reset singleton\r\n      (EnterpriseMonitoringManager as any).instance = undefined;\r\n      const perfDisabledManager = EnterpriseMonitoringManager.getInstance(disabledConfig);\r\n\r\n      perfDisabledManager.capturePerformanceMetrics();\r\n      const metrics = perfDisabledManager.getPerformanceMetrics();\r\n      expect(metrics).toHaveLength(0);\r\n\r\n      // 3. Test with alerts disabled\r\n      disabledConfig.performance.enabled = true;\r\n      disabledConfig.alerts.enabled = false;\r\n\r\n      // Reset singleton\r\n      (EnterpriseMonitoringManager as any).instance = undefined;\r\n      const alertsDisabledManager = EnterpriseMonitoringManager.getInstance(disabledConfig);\r\n\r\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\r\n      \r\n      alertsDisabledManager.recordMetric('load_time', 5000);\r\n      \r\n      // Should not send notifications when alerts are disabled\r\n      expect(consoleSpy).not.toHaveBeenCalledWith(\r\n        expect.stringContaining('Email alert sent')\r\n      );\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('should handle edge cases and error conditions', async () => {\r\n      // 1. Test with invalid alert operations\r\n      const invalidAcknowledge = monitoringManager.acknowledgeAlert('invalid-id');\r\n      expect(invalidAcknowledge).toBe(false);\r\n\r\n      const invalidResolve = monitoringManager.resolveAlert('invalid-id');\r\n      expect(invalidResolve).toBe(false);\r\n\r\n      // 2. Test with empty/null errors\r\n      const emptyErrorId = monitoringManager.captureError('', 'info');\r\n      expect(emptyErrorId).toMatch(/^error_/);\r\n\r\n      // 3. Test with extreme metric values\r\n      monitoringManager.recordMetric('extreme_metric', Number.MAX_SAFE_INTEGER);\r\n      monitoringManager.recordMetric('negative_metric', -1000);\r\n      monitoringManager.recordMetric('zero_metric', 0);\r\n\r\n      // 4. Test with missing browser APIs\r\n      const originalMemory = (performance as any).memory;\r\n      delete (performance as any).memory;\r\n\r\n      expect(() => {\r\n        monitoringManager.capturePerformanceMetrics();\r\n      }).not.toThrow();\r\n\r\n      // Restore\r\n      (performance as any).memory = originalMemory;\r\n\r\n      // 5. Test error filtering with time ranges\r\n      const futureDate = new Date(Date.now() + 60 * 60 * 1000);\r\n      const pastDate = new Date(Date.now() - 60 * 60 * 1000);\r\n\r\n      const futureErrors = monitoringManager.getErrors({\r\n        timeRange: { start: futureDate, end: new Date(futureDate.getTime() + 60 * 60 * 1000) }\r\n      });\r\n      expect(futureErrors).toHaveLength(0);\r\n\r\n      const pastErrors = monitoringManager.getErrors({\r\n        timeRange: { start: pastDate, end: new Date() }\r\n      });\r\n      expect(pastErrors.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('Real-world Scenario Tests', () => {\r\n    it('should simulate e-commerce application monitoring', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n\r\n      // Simulate user journey with monitoring\r\n      \r\n      // 1. Page load\r\n      monitoringManager.recordMetric('page_load_time', 1800, {\r\n        page: '/products',\r\n        user_agent: 'Chrome/91.0'\r\n      });\r\n\r\n      // 2. API calls\r\n      monitoringManager.recordMetric('api_response_time', 450, {\r\n        endpoint: '/api/products',\r\n        method: 'GET',\r\n        status: 200\r\n      });\r\n\r\n      // 3. Database operations\r\n      monitoringManager.recordMetric('database_query_time', 120, {\r\n        query: 'SELECT * FROM products WHERE category = ?',\r\n        table: 'products'\r\n      });\r\n\r\n      // 4. User interaction error\r\n      monitoringManager.captureError(\r\n        new Error('Product not found'),\r\n        'warning',\r\n        { \r\n          component: 'ProductService',\r\n          productId: 'prod-123',\r\n          userId: 'user-456'\r\n        },\r\n        ['product', 'not-found', 'user-error']\r\n      );\r\n\r\n      // 5. Payment processing\r\n      monitoringManager.recordMetric('payment_processing_time', 2500, {\r\n        provider: 'stripe',\r\n        amount: 99.99,\r\n        currency: 'USD'\r\n      });\r\n\r\n      // 6. Critical error in payment\r\n      monitoringManager.captureError(\r\n        new Error('Payment gateway timeout'),\r\n        'critical',\r\n        {\r\n          component: 'PaymentService',\r\n          provider: 'stripe',\r\n          orderId: 'order-789'\r\n        },\r\n        ['payment', 'timeout', 'critical']\r\n      );\r\n\r\n      // 7. Verify monitoring captured everything\r\n      const summary = monitoringManager.getMonitoringSummary();\r\n\r\n      expect(summary.errors.total).toBe(2);\r\n      expect(summary.errors.critical).toBe(1);\r\n      expect(summary.alerts.active).toBeGreaterThanOrEqual(0); // May or may not have alerts\r\n\r\n      const errors = monitoringManager.getErrors();\r\n      const criticalError = errors.find(e => e.level === 'critical');\r\n      expect(criticalError?.message).toBe('Payment gateway timeout');\r\n      expect(criticalError?.context.component).toBe('PaymentService');\r\n\r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n});\r\n"],"names":["mockPerformanceNow","jest","fn","global","performance","now","PerformanceObserver","mockImplementation","callback","observe","disconnect","describe","monitoringManager","config","beforeEach","clearAllMocks","EnterpriseMonitoringManager","instance","undefined","errorTracking","enabled","sampleRate","ignoreErrors","maxBreadcrumbs","thresholds","lcp","fid","cls","loadTime","alerts","channels","email","slack","getInstance","callCount","it","errorId1","captureError","Error","component","action","errorId2","endpoint","errorId3","userId","expect","toMatch","allErrors","getErrors","toHaveLength","criticalErrors","level","message","toBe","warningErrors","duplicateErrorId","errorsAfterDuplicate","length","toBeGreaterThanOrEqual","duplicatedErrors","filter","e","capturePerformanceMetrics","recordMetric","method","query","table","cache_type","operation","metrics","getPerformanceMetrics","consoleSpy","spyOn","console","mockRestore","Date","oneHourAgo","getTime","recentMetrics","start","end","i","activeAlerts","getActiveAlerts","toBeGreaterThan","performanceAlert","find","alert","context","metricName","toBeDefined","severity","acknowledged","success","acknowledgeAlert","id","updatedAlerts","acknowledgedAlert","a","resolveAlert","summary","getMonitoringSummary","errors","total","critical","warning","averageLoadTime","averageMemoryUsage","active","unacknowledged","system","uptime","sessionId","disabledConfig","disabledManager","errorId","perfDisabledManager","alertsDisabledManager","not","toHaveBeenCalledWith","stringContaining","invalidAcknowledge","invalidResolve","emptyErrorId","Number","MAX_SAFE_INTEGER","originalMemory","memory","toThrow","futureDate","pastDate","futureErrors","timeRange","pastErrors","page","user_agent","status","productId","provider","amount","currency","orderId","criticalError"],"mappings":"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"}