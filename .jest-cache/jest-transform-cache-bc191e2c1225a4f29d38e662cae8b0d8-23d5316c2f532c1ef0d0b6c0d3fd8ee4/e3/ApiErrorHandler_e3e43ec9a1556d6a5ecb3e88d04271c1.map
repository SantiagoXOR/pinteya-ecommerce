{"version":3,"names":["ApiErrorHandler","cov_b42js3tko","f","s","apiErrorHandler","createApiError","default","_default","withErrorHandling","DEFAULT_CONFIG","enableLogging","enableToasts","enableRetry","retryConfig","maxRetries","baseDelay","maxDelay","backoffFactor","retryableStatuses","logEndpoint","constructor","config","b","errorCounts","Map","lastErrors","handleApiCall","apiCall","context","customConfig","finalConfig","fullContext","endpoint","method","timestamp","Date","toISOString","userAgent","window","navigator","lastError","attempt","result","clearErrorCount","error","normalizeError","logError","shouldRetry","delay","calculateDelay","sleep","handleFinalError","Error","apiError","name","message","includes","status","code","retryable","isRetryableError","details","isRetryableStatus","String","Math","pow","jitter","random","min","logData","stack","environment","process","env","NODE_ENV","console","group","groupEnd","fetch","headers","body","JSON","stringify","loggingError","incrementErrorCount","showErrorToast","onError","getErrorMessage","_reacthottoast","toast","duration","id","endpointMessages","endpointMessage","statusMessages","current","get","set","now","delete","getErrorCount","ms","Promise","resolve","setTimeout","getErrorStats","stats","count","entries","clearErrorStats","clear"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\lib\\error-handling\\ApiErrorHandler.ts"],"sourcesContent":["// ===================================\r\n// API ERROR HANDLER - SISTEMA CENTRALIZADO\r\n// ===================================\r\n// Manejo consistente de errores de API con retry logic,\r\n// logging estructurado y user experience optimizada\r\n\r\nimport { toast } from 'react-hot-toast';\r\n\r\n// ===================================\r\n// TIPOS E INTERFACES\r\n// ===================================\r\n\r\nexport interface ApiError extends Error {\r\n  status?: number;\r\n  code?: string;\r\n  details?: any;\r\n  timestamp?: string;\r\n  requestId?: string;\r\n  retryable?: boolean;\r\n}\r\n\r\nexport interface ErrorContext {\r\n  endpoint: string;\r\n  method: string;\r\n  requestData?: any;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  userAgent?: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface RetryConfig {\r\n  maxRetries: number;\r\n  baseDelay: number;\r\n  maxDelay: number;\r\n  backoffFactor: number;\r\n  retryableStatuses: number[];\r\n}\r\n\r\nexport interface ErrorHandlerConfig {\r\n  enableLogging: boolean;\r\n  enableToasts: boolean;\r\n  enableRetry: boolean;\r\n  retryConfig: RetryConfig;\r\n  logEndpoint?: string;\r\n  onError?: (error: ApiError, context: ErrorContext) => void;\r\n}\r\n\r\n// ===================================\r\n// CONFIGURACI√ìN POR DEFECTO\r\n// ===================================\r\n\r\nconst DEFAULT_CONFIG: ErrorHandlerConfig = {\r\n  enableLogging: true,\r\n  enableToasts: true,\r\n  enableRetry: true,\r\n  retryConfig: {\r\n    maxRetries: 3,\r\n    baseDelay: 1000,\r\n    maxDelay: 10000,\r\n    backoffFactor: 2,\r\n    retryableStatuses: [408, 429, 500, 502, 503, 504],\r\n  },\r\n  logEndpoint: '/api/errors',\r\n};\r\n\r\n// ===================================\r\n// CLASE PRINCIPAL\r\n// ===================================\r\n\r\nexport class ApiErrorHandler {\r\n  private config: ErrorHandlerConfig;\r\n  private errorCounts: Map<string, number> = new Map();\r\n  private lastErrors: Map<string, number> = new Map();\r\n\r\n  constructor(config: Partial<ErrorHandlerConfig> = {}) {\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n  }\r\n\r\n  /**\r\n   * Maneja errores de API con retry autom√°tico\r\n   */\r\n  async handleApiCall<T>(\r\n    apiCall: () => Promise<T>,\r\n    context: Partial<ErrorContext>,\r\n    customConfig?: Partial<ErrorHandlerConfig>\r\n  ): Promise<T> {\r\n    const finalConfig = { ...this.config, ...customConfig };\r\n    const fullContext: ErrorContext = {\r\n      endpoint: 'unknown',\r\n      method: 'GET',\r\n      timestamp: new Date().toISOString(),\r\n      userAgent: typeof window !== 'undefined' ? navigator.userAgent : 'SSR',\r\n      ...context,\r\n    };\r\n\r\n    let lastError: ApiError | null = null;\r\n    let attempt = 0;\r\n\r\n    while (attempt <= finalConfig.retryConfig.maxRetries) {\r\n      try {\r\n        const result = await apiCall();\r\n        \r\n        // Limpiar contadores de error en caso de √©xito\r\n        this.clearErrorCount(fullContext.endpoint);\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        lastError = this.normalizeError(error);\r\n        attempt++;\r\n\r\n        // Log del error\r\n        if (finalConfig.enableLogging) {\r\n          await this.logError(lastError, fullContext, attempt);\r\n        }\r\n\r\n        // Verificar si debe reintentar\r\n        if (\r\n          attempt <= finalConfig.retryConfig.maxRetries &&\r\n          finalConfig.enableRetry &&\r\n          this.shouldRetry(lastError, finalConfig.retryConfig)\r\n        ) {\r\n          const delay = this.calculateDelay(attempt, finalConfig.retryConfig);\r\n          await this.sleep(delay);\r\n          continue;\r\n        }\r\n\r\n        // No m√°s reintentos, manejar error final\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Manejar error final\r\n    if (lastError) {\r\n      await this.handleFinalError(lastError, fullContext, finalConfig);\r\n      throw lastError;\r\n    }\r\n\r\n    throw new Error('Unexpected error in API call');\r\n  }\r\n\r\n  /**\r\n   * Normaliza errores a formato est√°ndar\r\n   */\r\n  private normalizeError(error: any): ApiError {\r\n    if (error instanceof Error) {\r\n      const apiError = error as ApiError;\r\n      \r\n      // Extraer informaci√≥n adicional si est√° disponible\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        apiError.status = 0;\r\n        apiError.code = 'NETWORK_ERROR';\r\n        apiError.retryable = true;\r\n      }\r\n      \r\n      return {\r\n        ...apiError,\r\n        timestamp: new Date().toISOString(),\r\n        retryable: apiError.retryable ?? this.isRetryableError(apiError),\r\n      };\r\n    }\r\n\r\n    // Error de respuesta HTTP\r\n    if (typeof error === 'object' && error.status) {\r\n      return {\r\n        name: 'ApiError',\r\n        message: error.message || `HTTP ${error.status}`,\r\n        status: error.status,\r\n        code: error.code || `HTTP_${error.status}`,\r\n        details: error.details,\r\n        timestamp: new Date().toISOString(),\r\n        retryable: this.isRetryableStatus(error.status),\r\n      };\r\n    }\r\n\r\n    // Error gen√©rico\r\n    return {\r\n      name: 'UnknownError',\r\n      message: String(error),\r\n      timestamp: new Date().toISOString(),\r\n      retryable: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determina si un error es reintentable\r\n   */\r\n  private shouldRetry(error: ApiError, config: RetryConfig): boolean {\r\n    if (!error.retryable) {return false;}\r\n    \r\n    if (error.status && !config.retryableStatuses.includes(error.status)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Calcula el delay para el siguiente intento\r\n   */\r\n  private calculateDelay(attempt: number, config: RetryConfig): number {\r\n    const delay = config.baseDelay * Math.pow(config.backoffFactor, attempt - 1);\r\n    const jitter = Math.random() * 0.1 * delay; // 10% jitter\r\n    return Math.min(delay + jitter, config.maxDelay);\r\n  }\r\n\r\n  /**\r\n   * Determina si un error es reintentable por defecto\r\n   */\r\n  private isRetryableError(error: ApiError): boolean {\r\n    if (error.status) {\r\n      return this.isRetryableStatus(error.status);\r\n    }\r\n    \r\n    // Errores de red son reintentables\r\n    if (error.code === 'NETWORK_ERROR' || error.message.includes('fetch')) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determina si un status HTTP es reintentable\r\n   */\r\n  private isRetryableStatus(status: number): boolean {\r\n    return this.config.retryConfig.retryableStatuses.includes(status);\r\n  }\r\n\r\n  /**\r\n   * Log estructurado del error\r\n   */\r\n  private async logError(\r\n    error: ApiError, \r\n    context: ErrorContext, \r\n    attempt: number\r\n  ): Promise<void> {\r\n    const logData = {\r\n      error: {\r\n        name: error.name,\r\n        message: error.message,\r\n        status: error.status,\r\n        code: error.code,\r\n        stack: error.stack,\r\n        timestamp: error.timestamp,\r\n      },\r\n      context,\r\n      attempt,\r\n      maxRetries: this.config.retryConfig.maxRetries,\r\n      environment: process.env.NODE_ENV,\r\n    };\r\n\r\n    // Log en consola para desarrollo\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.group(`üö® API Error - Attempt ${attempt}`);\r\n      console.error('Error:', error);\r\n      console.error('Context:', context);\r\n      console.error('Log Data:', logData);\r\n      console.groupEnd();\r\n    }\r\n\r\n    // Enviar a servicio de logging en producci√≥n\r\n    if (process.env.NODE_ENV === 'production' && this.config.logEndpoint) {\r\n      try {\r\n        await fetch(this.config.logEndpoint, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(logData),\r\n        });\r\n      } catch (loggingError) {\r\n        console.error('Failed to log API error:', loggingError);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja el error final despu√©s de todos los reintentos\r\n   */\r\n  private async handleFinalError(\r\n    error: ApiError,\r\n    context: ErrorContext,\r\n    config: ErrorHandlerConfig\r\n  ): Promise<void> {\r\n    // Incrementar contador de errores\r\n    this.incrementErrorCount(context.endpoint);\r\n\r\n    // Mostrar toast si est√° habilitado\r\n    if (config.enableToasts) {\r\n      this.showErrorToast(error, context);\r\n    }\r\n\r\n    // Callback personalizado\r\n    if (config.onError) {\r\n      config.onError(error, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Muestra toast de error apropiado\r\n   */\r\n  private showErrorToast(error: ApiError, context: ErrorContext): void {\r\n    const message = this.getErrorMessage(error, context);\r\n    \r\n    if (error.status && error.status >= 500) {\r\n      toast.error(message, {\r\n        duration: 5000,\r\n        id: `api-error-${context.endpoint}`,\r\n      });\r\n    } else if (error.status === 429) {\r\n      toast.error('Demasiadas solicitudes. Intenta de nuevo en unos momentos.', {\r\n        duration: 4000,\r\n        id: 'rate-limit-error',\r\n      });\r\n    } else if (error.status === 401) {\r\n      toast.error('Sesi√≥n expirada. Por favor, inicia sesi√≥n nuevamente.', {\r\n        duration: 6000,\r\n        id: 'auth-error',\r\n      });\r\n    } else {\r\n      toast.error(message, {\r\n        duration: 4000,\r\n        id: `api-error-${error.code}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Genera mensaje de error user-friendly\r\n   */\r\n  private getErrorMessage(error: ApiError, context: ErrorContext): string {\r\n    // Mensajes espec√≠ficos por endpoint\r\n    const endpointMessages: Record<string, string> = {\r\n      '/api/products': 'Error al cargar productos',\r\n      '/api/search': 'Error en la b√∫squeda',\r\n      '/api/cart': 'Error al actualizar el carrito',\r\n      '/api/checkout': 'Error en el proceso de compra',\r\n      '/api/auth': 'Error de autenticaci√≥n',\r\n    };\r\n\r\n    const endpointMessage = endpointMessages[context.endpoint];\r\n    if (endpointMessage) {\r\n      return endpointMessage;\r\n    }\r\n\r\n    // Mensajes por status code\r\n    const statusMessages: Record<number, string> = {\r\n      400: 'Solicitud inv√°lida',\r\n      401: 'No autorizado',\r\n      403: 'Acceso denegado',\r\n      404: 'Recurso no encontrado',\r\n      408: 'Tiempo de espera agotado',\r\n      429: 'Demasiadas solicitudes',\r\n      500: 'Error interno del servidor',\r\n      502: 'Servicio no disponible',\r\n      503: 'Servicio temporalmente no disponible',\r\n      504: 'Tiempo de espera del servidor agotado',\r\n    };\r\n\r\n    if (error.status && statusMessages[error.status]) {\r\n      return statusMessages[error.status];\r\n    }\r\n\r\n    // Mensaje gen√©rico\r\n    return 'Ocurri√≥ un error inesperado. Intenta de nuevo.';\r\n  }\r\n\r\n  /**\r\n   * Utilidades para contadores de error\r\n   */\r\n  private incrementErrorCount(endpoint: string): void {\r\n    const current = this.errorCounts.get(endpoint) || 0;\r\n    this.errorCounts.set(endpoint, current + 1);\r\n    this.lastErrors.set(endpoint, Date.now());\r\n  }\r\n\r\n  private clearErrorCount(endpoint: string): void {\r\n    this.errorCounts.delete(endpoint);\r\n    this.lastErrors.delete(endpoint);\r\n  }\r\n\r\n  private getErrorCount(endpoint: string): number {\r\n    return this.errorCounts.get(endpoint) || 0;\r\n  }\r\n\r\n  /**\r\n   * Utilidad para sleep\r\n   */\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Obtiene estad√≠sticas de errores\r\n   */\r\n  getErrorStats(): Record<string, { count: number; lastError: number }> {\r\n    const stats: Record<string, { count: number; lastError: number }> = {};\r\n    \r\n    for (const [endpoint, count] of this.errorCounts.entries()) {\r\n      stats[endpoint] = {\r\n        count,\r\n        lastError: this.lastErrors.get(endpoint) || 0,\r\n      };\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Limpia estad√≠sticas de errores\r\n   */\r\n  clearErrorStats(): void {\r\n    this.errorCounts.clear();\r\n    this.lastErrors.clear();\r\n  }\r\n}\r\n\r\n// ===================================\r\n// INSTANCIA GLOBAL\r\n// ===================================\r\n\r\nexport const apiErrorHandler = new ApiErrorHandler();\r\n\r\n// ===================================\r\n// HELPER FUNCTIONS\r\n// ===================================\r\n\r\n/**\r\n * Wrapper para llamadas de API con manejo de errores\r\n */\r\nexport async function withErrorHandling<T>(\r\n  apiCall: () => Promise<T>,\r\n  context: Partial<ErrorContext>,\r\n  config?: Partial<ErrorHandlerConfig>\r\n): Promise<T> {\r\n  return apiErrorHandler.handleApiCall(apiCall, context, config);\r\n}\r\n\r\n/**\r\n * Crea un error de API\r\n */\r\nexport function createApiError(\r\n  message: string,\r\n  status?: number,\r\n  code?: string,\r\n  details?: any\r\n): ApiError {\r\n  const error = new Error(message) as ApiError;\r\n  error.status = status;\r\n  error.code = code;\r\n  error.details = details;\r\n  error.timestamp = new Date().toISOString();\r\n  return error;\r\n}\r\n\r\n// ===================================\r\n// EXPORTS\r\n// ===================================\r\n\r\nexport default ApiErrorHandler;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}