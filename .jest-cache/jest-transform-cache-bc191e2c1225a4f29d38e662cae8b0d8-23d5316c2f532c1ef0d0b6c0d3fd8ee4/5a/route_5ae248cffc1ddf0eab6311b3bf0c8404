4cc5cfef2e222be9d643323e5ef8d93d
// Configuración para Node.js Runtime
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const _supabase = require("../../../../lib/integrations/supabase");
const _config = require("../../../../lib/auth/config");
const runtime = 'nodejs';
async function GET(request) {
    try {
        // Verificar que el cliente administrativo esté disponible
        if (!_supabase.supabaseAdmin) {
            console.error('Cliente administrativo de Supabase no disponible en GET /api/user/orders');
            return _server.NextResponse.json({
                error: 'Servicio de base de datos no disponible'
            }, {
                status: 503
            });
        }
        // Obtener usuario autenticado usando NextAuth.js
        const session = await (0, _config.auth)();
        if (!session?.user?.id) {
            console.error('Usuario no autenticado en GET /api/user/orders');
            return _server.NextResponse.json({
                error: 'Usuario no autenticado'
            }, {
                status: 401
            });
        }
        // Obtener parámetros de consulta
        const { searchParams } = new URL(request.url);
        const page = parseInt(searchParams.get('page') || '1');
        const limit = parseInt(searchParams.get('limit') || '10');
        const status = searchParams.get('status');
        console.log(`[API] Obteniendo órdenes para usuario: ${session.user.id}`);
        // Construir query base usando directamente el ID del usuario de NextAuth.js
        let query = _supabase.supabaseAdmin.from('orders').select(`
        *,
        order_items (
          id,
          quantity,
          price,
          products (
            id,
            name,
            images
          )
        )
      `).eq('user_id', session.user.id);
        // Filtrar por status si se especifica
        if (status && status !== 'all') {
            query = query.eq('status', status);
        }
        // Aplicar paginación y ordenamiento
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const { data: orders, error, count } = await query.order('created_at', {
            ascending: false
        }).range(from, to);
        if (error) {
            console.error('Error al obtener órdenes:', error);
            return _server.NextResponse.json({
                error: 'Error al obtener órdenes'
            }, {
                status: 500
            });
        }
        // Calcular estadísticas
        const { data: stats } = await _supabase.supabaseAdmin.from('orders').select('status, total').eq('user_id', session.user.id);
        const statistics = {
            total_orders: stats?.length || 0,
            total_spent: stats?.reduce((sum, order)=>sum + parseFloat(order.total), 0) || 0,
            pending_orders: stats?.filter((order)=>order.status === 'pending').length || 0,
            completed_orders: stats?.filter((order)=>order.status === 'delivered').length || 0
        };
        return _server.NextResponse.json({
            success: true,
            data: orders || [],
            pagination: {
                page,
                limit,
                total: count || 0,
                pages: Math.ceil((count || 0) / limit)
            },
            statistics
        });
    } catch (error) {
        console.error('Error en GET /api/user/orders:', error);
        return _server.NextResponse.json({
            error: 'Error interno del servidor'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWFydGlcXERlc2t0b3BcXERFU0FSUk9MTE9TV1xcQk9JTEVSUExBVFRFIEUtQ09NTUVSQ0VcXHNyY1xcYXBwXFxhcGlcXHVzZXJcXG9yZGVyc1xccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29uZmlndXJhY2nDs24gcGFyYSBOb2RlLmpzIFJ1bnRpbWVcclxuZXhwb3J0IGNvbnN0IHJ1bnRpbWUgPSAnbm9kZWpzJztcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFBJTlRFWUEgRS1DT01NRVJDRSAtIEFQSSBERSDDk1JERU5FUyBERSBVU1VBUklPXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBzdXBhYmFzZUFkbWluIH0gZnJvbSAnQC9saWIvaW50ZWdyYXRpb25zL3N1cGFiYXNlJztcclxuaW1wb3J0IHsgYXV0aCB9IGZyb20gJ0AvbGliL2F1dGgvY29uZmlnJztcclxuaW1wb3J0IHsgQXBpUmVzcG9uc2UgfSBmcm9tICdAL3R5cGVzL2FwaSc7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBHRVQgLSBPYnRlbmVyIMOzcmRlbmVzIGRlbCB1c3VhcmlvXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBjbGllbnRlIGFkbWluaXN0cmF0aXZvIGVzdMOpIGRpc3BvbmlibGVcclxuICAgIGlmICghc3VwYWJhc2VBZG1pbikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdDbGllbnRlIGFkbWluaXN0cmF0aXZvIGRlIFN1cGFiYXNlIG5vIGRpc3BvbmlibGUgZW4gR0VUIC9hcGkvdXNlci9vcmRlcnMnKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdTZXJ2aWNpbyBkZSBiYXNlIGRlIGRhdG9zIG5vIGRpc3BvbmlibGUnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDUwMyB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT2J0ZW5lciB1c3VhcmlvIGF1dGVudGljYWRvIHVzYW5kbyBOZXh0QXV0aC5qc1xyXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcclxuXHJcbiAgICBpZiAoIXNlc3Npb24/LnVzZXI/LmlkKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VzdWFyaW8gbm8gYXV0ZW50aWNhZG8gZW4gR0VUIC9hcGkvdXNlci9vcmRlcnMnKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdVc3VhcmlvIG5vIGF1dGVudGljYWRvJyB9LFxyXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9idGVuZXIgcGFyw6FtZXRyb3MgZGUgY29uc3VsdGFcclxuICAgIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcclxuICAgIGNvbnN0IHBhZ2UgPSBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJykgfHwgJzEnKTtcclxuICAgIGNvbnN0IGxpbWl0ID0gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSB8fCAnMTAnKTtcclxuICAgIGNvbnN0IHN0YXR1cyA9IHNlYXJjaFBhcmFtcy5nZXQoJ3N0YXR1cycpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbQVBJXSBPYnRlbmllbmRvIMOzcmRlbmVzIHBhcmEgdXN1YXJpbzogJHtzZXNzaW9uLnVzZXIuaWR9YCk7XHJcblxyXG4gICAgLy8gQ29uc3RydWlyIHF1ZXJ5IGJhc2UgdXNhbmRvIGRpcmVjdGFtZW50ZSBlbCBJRCBkZWwgdXN1YXJpbyBkZSBOZXh0QXV0aC5qc1xyXG4gICAgbGV0IHF1ZXJ5ID0gc3VwYWJhc2VBZG1pblxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLnNlbGVjdChgXHJcbiAgICAgICAgKixcclxuICAgICAgICBvcmRlcl9pdGVtcyAoXHJcbiAgICAgICAgICBpZCxcclxuICAgICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgICBwcm9kdWN0cyAoXHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBpbWFnZXNcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgIGApXHJcbiAgICAgIC5lcSgndXNlcl9pZCcsIHNlc3Npb24udXNlci5pZCk7XHJcblxyXG4gICAgLy8gRmlsdHJhciBwb3Igc3RhdHVzIHNpIHNlIGVzcGVjaWZpY2FcclxuICAgIGlmIChzdGF0dXMgJiYgc3RhdHVzICE9PSAnYWxsJykge1xyXG4gICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdzdGF0dXMnLCBzdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwbGljYXIgcGFnaW5hY2nDs24geSBvcmRlbmFtaWVudG9cclxuICAgIGNvbnN0IGZyb20gPSAocGFnZSAtIDEpICogbGltaXQ7XHJcbiAgICBjb25zdCB0byA9IGZyb20gKyBsaW1pdCAtIDE7XHJcblxyXG4gICAgY29uc3QgeyBkYXRhOiBvcmRlcnMsIGVycm9yLCBjb3VudCB9ID0gYXdhaXQgcXVlcnlcclxuICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXHJcbiAgICAgIC5yYW5nZShmcm9tLCB0byk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIG9idGVuZXIgw7NyZGVuZXM6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0Vycm9yIGFsIG9idGVuZXIgw7NyZGVuZXMnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXIgZXN0YWTDrXN0aWNhc1xyXG4gICAgY29uc3QgeyBkYXRhOiBzdGF0cyB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxyXG4gICAgICAuZnJvbSgnb3JkZXJzJylcclxuICAgICAgLnNlbGVjdCgnc3RhdHVzLCB0b3RhbCcpXHJcbiAgICAgIC5lcSgndXNlcl9pZCcsIHNlc3Npb24udXNlci5pZCk7XHJcblxyXG4gICAgY29uc3Qgc3RhdGlzdGljcyA9IHtcclxuICAgICAgdG90YWxfb3JkZXJzOiBzdGF0cz8ubGVuZ3RoIHx8IDAsXHJcbiAgICAgIHRvdGFsX3NwZW50OiBzdGF0cz8ucmVkdWNlKChzdW0sIG9yZGVyKSA9PiBzdW0gKyBwYXJzZUZsb2F0KG9yZGVyLnRvdGFsKSwgMCkgfHwgMCxcclxuICAgICAgcGVuZGluZ19vcmRlcnM6IHN0YXRzPy5maWx0ZXIob3JkZXIgPT4gb3JkZXIuc3RhdHVzID09PSAncGVuZGluZycpLmxlbmd0aCB8fCAwLFxyXG4gICAgICBjb21wbGV0ZWRfb3JkZXJzOiBzdGF0cz8uZmlsdGVyKG9yZGVyID0+IG9yZGVyLnN0YXR1cyA9PT0gJ2RlbGl2ZXJlZCcpLmxlbmd0aCB8fCAwLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICBkYXRhOiBvcmRlcnMgfHwgW10sXHJcbiAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICBwYWdlLFxyXG4gICAgICAgIGxpbWl0LFxyXG4gICAgICAgIHRvdGFsOiBjb3VudCB8fCAwLFxyXG4gICAgICAgIHBhZ2VzOiBNYXRoLmNlaWwoKGNvdW50IHx8IDApIC8gbGltaXQpLFxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0aXN0aWNzLFxyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGVuIEdFVCAvYXBpL3VzZXIvb3JkZXJzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBlcnJvcjogJ0Vycm9yIGludGVybm8gZGVsIHNlcnZpZG9yJyB9LFxyXG4gICAgICB7IHN0YXR1czogNTAwIH1cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJHRVQiLCJydW50aW1lIiwicmVxdWVzdCIsInN1cGFiYXNlQWRtaW4iLCJjb25zb2xlIiwiZXJyb3IiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwic2Vzc2lvbiIsImF1dGgiLCJ1c2VyIiwiaWQiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJwYWdlIiwicGFyc2VJbnQiLCJnZXQiLCJsaW1pdCIsImxvZyIsInF1ZXJ5IiwiZnJvbSIsInNlbGVjdCIsImVxIiwidG8iLCJkYXRhIiwib3JkZXJzIiwiY291bnQiLCJvcmRlciIsImFzY2VuZGluZyIsInJhbmdlIiwic3RhdHMiLCJzdGF0aXN0aWNzIiwidG90YWxfb3JkZXJzIiwibGVuZ3RoIiwidG90YWxfc3BlbnQiLCJyZWR1Y2UiLCJzdW0iLCJwYXJzZUZsb2F0IiwidG90YWwiLCJwZW5kaW5nX29yZGVycyIsImZpbHRlciIsImNvbXBsZXRlZF9vcmRlcnMiLCJzdWNjZXNzIiwicGFnaW5hdGlvbiIsInBhZ2VzIiwiTWF0aCIsImNlaWwiXSwibWFwcGluZ3MiOiJBQUFBLHFDQUFxQzs7Ozs7Ozs7Ozs7O1FBZWZBO2VBQUFBOztRQWRUQztlQUFBQTs7O3dCQU02QjswQkFDWjt3QkFDVDtBQVJkLE1BQU1BLFVBQVU7QUFjaEIsZUFBZUQsSUFBSUUsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLDBEQUEwRDtRQUMxRCxJQUFJLENBQUNDLHVCQUFhLEVBQUU7WUFDbEJDLFFBQVFDLEtBQUssQ0FBQztZQUNkLE9BQU9DLG9CQUFZLENBQUNDLElBQUksQ0FDdEI7Z0JBQUVGLE9BQU87WUFBMEMsR0FDbkQ7Z0JBQUVHLFFBQVE7WUFBSTtRQUVsQjtRQUVBLGlEQUFpRDtRQUNqRCxNQUFNQyxVQUFVLE1BQU1DLElBQUFBLFlBQUk7UUFFMUIsSUFBSSxDQUFDRCxTQUFTRSxNQUFNQyxJQUFJO1lBQ3RCUixRQUFRQyxLQUFLLENBQUM7WUFDZCxPQUFPQyxvQkFBWSxDQUFDQyxJQUFJLENBQ3RCO2dCQUFFRixPQUFPO1lBQXlCLEdBQ2xDO2dCQUFFRyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxpQ0FBaUM7UUFDakMsTUFBTSxFQUFFSyxZQUFZLEVBQUUsR0FBRyxJQUFJQyxJQUFJWixRQUFRYSxHQUFHO1FBQzVDLE1BQU1DLE9BQU9DLFNBQVNKLGFBQWFLLEdBQUcsQ0FBQyxXQUFXO1FBQ2xELE1BQU1DLFFBQVFGLFNBQVNKLGFBQWFLLEdBQUcsQ0FBQyxZQUFZO1FBQ3BELE1BQU1WLFNBQVNLLGFBQWFLLEdBQUcsQ0FBQztRQUVoQ2QsUUFBUWdCLEdBQUcsQ0FBQyxDQUFDLHVDQUF1QyxFQUFFWCxRQUFRRSxJQUFJLENBQUNDLEVBQUUsRUFBRTtRQUV2RSw0RUFBNEU7UUFDNUUsSUFBSVMsUUFBUWxCLHVCQUFhLENBQ3RCbUIsSUFBSSxDQUFDLFVBQ0xDLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7TUFZVCxDQUFDLEVBQ0FDLEVBQUUsQ0FBQyxXQUFXZixRQUFRRSxJQUFJLENBQUNDLEVBQUU7UUFFaEMsc0NBQXNDO1FBQ3RDLElBQUlKLFVBQVVBLFdBQVcsT0FBTztZQUM5QmEsUUFBUUEsTUFBTUcsRUFBRSxDQUFDLFVBQVVoQjtRQUM3QjtRQUVBLG9DQUFvQztRQUNwQyxNQUFNYyxPQUFPLEFBQUNOLENBQUFBLE9BQU8sQ0FBQSxJQUFLRztRQUMxQixNQUFNTSxLQUFLSCxPQUFPSCxRQUFRO1FBRTFCLE1BQU0sRUFBRU8sTUFBTUMsTUFBTSxFQUFFdEIsS0FBSyxFQUFFdUIsS0FBSyxFQUFFLEdBQUcsTUFBTVAsTUFDMUNRLEtBQUssQ0FBQyxjQUFjO1lBQUVDLFdBQVc7UUFBTSxHQUN2Q0MsS0FBSyxDQUFDVCxNQUFNRztRQUVmLElBQUlwQixPQUFPO1lBQ1RELFFBQVFDLEtBQUssQ0FBQyw2QkFBNkJBO1lBQzNDLE9BQU9DLG9CQUFZLENBQUNDLElBQUksQ0FDdEI7Z0JBQUVGLE9BQU87WUFBMkIsR0FDcEM7Z0JBQUVHLFFBQVE7WUFBSTtRQUVsQjtRQUVBLHdCQUF3QjtRQUN4QixNQUFNLEVBQUVrQixNQUFNTSxLQUFLLEVBQUUsR0FBRyxNQUFNN0IsdUJBQWEsQ0FDeENtQixJQUFJLENBQUMsVUFDTEMsTUFBTSxDQUFDLGlCQUNQQyxFQUFFLENBQUMsV0FBV2YsUUFBUUUsSUFBSSxDQUFDQyxFQUFFO1FBRWhDLE1BQU1xQixhQUFhO1lBQ2pCQyxjQUFjRixPQUFPRyxVQUFVO1lBQy9CQyxhQUFhSixPQUFPSyxPQUFPLENBQUNDLEtBQUtULFFBQVVTLE1BQU1DLFdBQVdWLE1BQU1XLEtBQUssR0FBRyxNQUFNO1lBQ2hGQyxnQkFBZ0JULE9BQU9VLE9BQU9iLENBQUFBLFFBQVNBLE1BQU1yQixNQUFNLEtBQUssV0FBVzJCLFVBQVU7WUFDN0VRLGtCQUFrQlgsT0FBT1UsT0FBT2IsQ0FBQUEsUUFBU0EsTUFBTXJCLE1BQU0sS0FBSyxhQUFhMkIsVUFBVTtRQUNuRjtRQUVBLE9BQU83QixvQkFBWSxDQUFDQyxJQUFJLENBQUM7WUFDdkJxQyxTQUFTO1lBQ1RsQixNQUFNQyxVQUFVLEVBQUU7WUFDbEJrQixZQUFZO2dCQUNWN0I7Z0JBQ0FHO2dCQUNBcUIsT0FBT1osU0FBUztnQkFDaEJrQixPQUFPQyxLQUFLQyxJQUFJLENBQUMsQUFBQ3BCLENBQUFBLFNBQVMsQ0FBQSxJQUFLVDtZQUNsQztZQUNBYztRQUNGO0lBQ0YsRUFBRSxPQUFPNUIsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxPQUFPQyxvQkFBWSxDQUFDQyxJQUFJLENBQ3RCO1lBQUVGLE9BQU87UUFBNkIsR0FDdEM7WUFBRUcsUUFBUTtRQUFJO0lBRWxCO0FBQ0YifQ==