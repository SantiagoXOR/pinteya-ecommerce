{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\hooks\\useCategoryFilter.test.ts"],"sourcesContent":["/**\r\n * useCategoryFilter Hook Tests\r\n * Enterprise-ready test suite for category filter logic\r\n * Pinteya E-commerce\r\n */\r\n\r\nimport { renderHook, act } from '@testing-library/react';\r\nimport { useSearchParams } from 'next/navigation';\r\nimport { useCategoryFilter } from '@/hooks/useCategoryFilter';\r\nimport type { CategoryChangeEvent } from '@/types/categories';\r\n\r\n// Mock Next.js navigation hooks\r\njest.mock('next/navigation', () => ({\r\n  useSearchParams: jest.fn(),\r\n}));\r\n\r\n// Mock analytics\r\nconst mockGtag = jest.fn();\r\nObject.defineProperty(window, 'gtag', {\r\n  value: mockGtag,\r\n  writable: true,\r\n});\r\n\r\ndescribe('useCategoryFilter Hook', () => {\r\n  const mockGet = jest.fn();\r\n  const mockOnCategoryChange = jest.fn();\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Setup search params mock\r\n    (useSearchParams as jest.Mock).mockReturnValue({\r\n      get: mockGet,\r\n      forEach: jest.fn(),\r\n    });\r\n\r\n    // Reset analytics mock\r\n    mockGtag.mockClear();\r\n  });\r\n\r\n  describe('Initialization', () => {\r\n    it('initializes with empty array by default', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => useCategoryFilter());\r\n      \r\n      expect(result.current.selectedCategories).toEqual([]);\r\n      expect(result.current.selectedCount).toBe(0);\r\n    });\r\n\r\n    it('initializes with provided initial categories', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const initialCategories = ['cat1', 'cat2'];\r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          initialCategories,\r\n          syncWithUrl: false \r\n        })\r\n      );\r\n      \r\n      expect(result.current.selectedCategories).toEqual(initialCategories);\r\n      expect(result.current.selectedCount).toBe(2);\r\n    });\r\n\r\n    it('initializes from URL when syncWithUrl is enabled', () => {\r\n      const urlCategories = 'cat1,cat2,cat3';\r\n      mockGet.mockReturnValue(urlCategories);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ syncWithUrl: true })\r\n      );\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1', 'cat2', 'cat3']);\r\n      expect(result.current.selectedCount).toBe(3);\r\n    });\r\n\r\n    it('filters out empty categories from URL', () => {\r\n      const urlCategories = 'cat1,,cat2,';\r\n      mockGet.mockReturnValue(urlCategories);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ syncWithUrl: true })\r\n      );\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1', 'cat2']);\r\n    });\r\n  });\r\n\r\n  describe('Category Selection', () => {\r\n    it('toggles category selection correctly', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          syncWithUrl: false,\r\n          onCategoryChange: mockOnCategoryChange \r\n        })\r\n      );\r\n      \r\n      // Select category\r\n      act(() => {\r\n        result.current.toggleCategory('cat1');\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1']);\r\n      expect(result.current.isSelected('cat1')).toBe(true);\r\n      expect(result.current.selectedCount).toBe(1);\r\n      \r\n      // Verify callback was called\r\n      expect(mockOnCategoryChange).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'select',\r\n          categoryId: 'cat1',\r\n          selectedCategories: ['cat1'],\r\n          previousCategories: [],\r\n        })\r\n      );\r\n    });\r\n\r\n    it('deselects already selected category', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          initialCategories: ['cat1'],\r\n          syncWithUrl: false,\r\n          onCategoryChange: mockOnCategoryChange \r\n        })\r\n      );\r\n      \r\n      // Deselect category\r\n      act(() => {\r\n        result.current.toggleCategory('cat1');\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual([]);\r\n      expect(result.current.isSelected('cat1')).toBe(false);\r\n      expect(result.current.selectedCount).toBe(0);\r\n      \r\n      // Verify callback was called\r\n      expect(mockOnCategoryChange).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'deselect',\r\n          categoryId: 'cat1',\r\n          selectedCategories: [],\r\n          previousCategories: ['cat1'],\r\n        })\r\n      );\r\n    });\r\n\r\n    it('respects maximum selections limit', () => {\r\n      mockGet.mockReturnValue(null);\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          maxSelections: 2,\r\n          syncWithUrl: false \r\n        })\r\n      );\r\n      \r\n      // Select up to limit\r\n      act(() => {\r\n        result.current.toggleCategory('cat1');\r\n        result.current.toggleCategory('cat2');\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1', 'cat2']);\r\n      \r\n      // Try to exceed limit\r\n      act(() => {\r\n        result.current.toggleCategory('cat3');\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1', 'cat2']);\r\n      expect(consoleSpy).toHaveBeenCalledWith('Maximum 2 categories can be selected');\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n\r\n    it('checks if category is selected correctly', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          initialCategories: ['cat1', 'cat2'],\r\n          syncWithUrl: false \r\n        })\r\n      );\r\n      \r\n      expect(result.current.isSelected('cat1')).toBe(true);\r\n      expect(result.current.isSelected('cat2')).toBe(true);\r\n      expect(result.current.isSelected('cat3')).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Bulk Operations', () => {\r\n    it('clears all selections', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          initialCategories: ['cat1', 'cat2'],\r\n          syncWithUrl: false,\r\n          onCategoryChange: mockOnCategoryChange \r\n        })\r\n      );\r\n      \r\n      act(() => {\r\n        result.current.clearAll();\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual([]);\r\n      expect(result.current.selectedCount).toBe(0);\r\n      \r\n      // Verify callback was called\r\n      expect(mockOnCategoryChange).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'clear',\r\n          categoryId: undefined,\r\n          selectedCategories: [],\r\n          previousCategories: ['cat1', 'cat2'],\r\n        })\r\n      );\r\n    });\r\n\r\n    it('does not call callback when clearing empty selection', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          syncWithUrl: false,\r\n          onCategoryChange: mockOnCategoryChange \r\n        })\r\n      );\r\n      \r\n      act(() => {\r\n        result.current.clearAll();\r\n      });\r\n      \r\n      expect(mockOnCategoryChange).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('selects all provided categories', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          syncWithUrl: false,\r\n          onCategoryChange: mockOnCategoryChange \r\n        })\r\n      );\r\n      \r\n      const categoriesToSelect = ['cat1', 'cat2', 'cat3'];\r\n      \r\n      act(() => {\r\n        result.current.selectAll(categoriesToSelect);\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual(categoriesToSelect);\r\n      expect(result.current.selectedCount).toBe(3);\r\n      \r\n      // Verify callback was called\r\n      expect(mockOnCategoryChange).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'selectAll',\r\n          categoryId: undefined,\r\n          selectedCategories: categoriesToSelect,\r\n          previousCategories: [],\r\n        })\r\n      );\r\n    });\r\n\r\n    it('respects max selections when selecting all', () => {\r\n      mockGet.mockReturnValue(null);\r\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          maxSelections: 2,\r\n          syncWithUrl: false \r\n        })\r\n      );\r\n      \r\n      const categoriesToSelect = ['cat1', 'cat2', 'cat3', 'cat4'];\r\n      \r\n      act(() => {\r\n        result.current.selectAll(categoriesToSelect);\r\n      });\r\n      \r\n      expect(result.current.selectedCategories).toEqual(['cat1', 'cat2']);\r\n      expect(consoleSpy).toHaveBeenCalledWith('Only first 2 categories will be selected');\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe('Analytics Tracking', () => {\r\n    it('tracks analytics when enabled', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          syncWithUrl: false,\r\n          enableAnalytics: true \r\n        })\r\n      );\r\n      \r\n      act(() => {\r\n        result.current.toggleCategory('cat1');\r\n      });\r\n      \r\n      expect(mockGtag).toHaveBeenCalledWith(\r\n        'event',\r\n        'category_filter_change',\r\n        expect.objectContaining({\r\n          event_category: 'filters',\r\n          event_label: 'cat1',\r\n          value: 1,\r\n        })\r\n      );\r\n    });\r\n\r\n    it('does not track analytics when disabled', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ \r\n          syncWithUrl: false,\r\n          enableAnalytics: false \r\n        })\r\n      );\r\n      \r\n      act(() => {\r\n        result.current.toggleCategory('cat1');\r\n      });\r\n      \r\n      expect(mockGtag).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('maintains referential equality for stable functions', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result, rerender } = renderHook(() => \r\n        useCategoryFilter({ syncWithUrl: false })\r\n      );\r\n      \r\n      const firstRender = {\r\n        toggleCategory: result.current.toggleCategory,\r\n        clearAll: result.current.clearAll,\r\n        selectAll: result.current.selectAll,\r\n        isSelected: result.current.isSelected,\r\n      };\r\n      \r\n      rerender();\r\n      \r\n      const secondRender = {\r\n        toggleCategory: result.current.toggleCategory,\r\n        clearAll: result.current.clearAll,\r\n        selectAll: result.current.selectAll,\r\n        isSelected: result.current.isSelected,\r\n      };\r\n      \r\n      // Functions should maintain referential equality\r\n      expect(firstRender.toggleCategory).toBe(secondRender.toggleCategory);\r\n      expect(firstRender.clearAll).toBe(secondRender.clearAll);\r\n      expect(firstRender.selectAll).toBe(secondRender.selectAll);\r\n      expect(firstRender.isSelected).toBe(secondRender.isSelected);\r\n    });\r\n  });\r\n\r\n  describe('Edge Cases', () => {\r\n    it('handles invalid URL parameters gracefully', () => {\r\n      mockGet.mockReturnValue('');\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ syncWithUrl: true })\r\n      );\r\n      \r\n      expect(result.current.selectedCategories).toEqual([]);\r\n    });\r\n\r\n    it('handles null URL parameters', () => {\r\n      mockGet.mockReturnValue(null);\r\n      \r\n      const { result } = renderHook(() => \r\n        useCategoryFilter({ syncWithUrl: true })\r\n      );\r\n      \r\n      expect(result.current.selectedCategories).toEqual([]);\r\n    });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["jest","mock","useSearchParams","fn","mockGtag","Object","defineProperty","window","value","writable","describe","mockGet","mockOnCategoryChange","beforeEach","clearAllMocks","mockReturnValue","get","forEach","mockClear","it","result","renderHook","useCategoryFilter","expect","current","selectedCategories","toEqual","selectedCount","toBe","initialCategories","syncWithUrl","urlCategories","onCategoryChange","act","toggleCategory","isSelected","toHaveBeenCalledWith","objectContaining","type","categoryId","previousCategories","consoleSpy","spyOn","console","mockImplementation","maxSelections","mockRestore","clearAll","undefined","not","toHaveBeenCalled","categoriesToSelect","selectAll","enableAnalytics","event_category","event_label","rerender","firstRender","secondRender"],"mappings":"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"}