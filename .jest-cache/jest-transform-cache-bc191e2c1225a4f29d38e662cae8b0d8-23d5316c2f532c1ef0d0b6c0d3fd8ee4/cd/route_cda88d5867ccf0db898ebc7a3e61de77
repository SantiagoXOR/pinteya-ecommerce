b19ccc328fa42f60ba1f3300a27525b5
// ConfiguraciÃ³n para Node.js Runtime
"use strict";

/* istanbul ignore next */
function cov_2ez155zxfn() {
  var path = "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\bulk\\route.ts";
  var hash = "7acf2c65a3593d1bc4e81ec2864d756da3415cc8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\bulk\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 52
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 57
        }
      },
      "10": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "11": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 24
        }
      },
      "12": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 123
        }
      },
      "13": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 57,
          column: 2
        }
      },
      "14": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "15": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "16": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "17": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "18": {
        start: {
          line: 70,
          column: 21
        },
        end: {
          line: 70,
          column: 41
        }
      },
      "19": {
        start: {
          line: 71,
          column: 33
        },
        end: {
          line: 71,
          column: 68
        }
      },
      "20": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "21": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "22": {
        start: {
          line: 80,
          column: 49
        },
        end: {
          line: 80,
          column: 70
        }
      },
      "23": {
        start: {
          line: 82,
          column: 62
        },
        end: {
          line: 82,
          column: 134
        }
      },
      "24": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "25": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 70
        }
      },
      "26": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "27": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "28": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "29": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 99,
          column: 29
        }
      },
      "30": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "31": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "32": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 108,
          column: 23
        }
      },
      "33": {
        start: {
          line: 110,
          column: 71
        },
        end: {
          line: 113,
          column: 53
        }
      },
      "34": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "35": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 38
        }
      },
      "36": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 62
        }
      },
      "37": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 122,
          column: 18
        }
      },
      "38": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 22
        }
      },
      "39": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "40": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 130,
          column: 23
        }
      },
      "41": {
        start: {
          line: 133,
          column: 65
        },
        end: {
          line: 133,
          column: 153
        }
      },
      "42": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "43": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "44": {
        start: {
          line: 141,
          column: 81
        },
        end: {
          line: 144,
          column: 53
        }
      },
      "45": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 147,
          column: 17
        }
      },
      "46": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 46
        }
      },
      "47": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 64
        }
      },
      "48": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 153,
          column: 18
        }
      },
      "49": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 22
        }
      },
      "50": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 162,
          column: 17
        }
      },
      "51": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 161,
          column: 23
        }
      },
      "52": {
        start: {
          line: 164,
          column: 69
        },
        end: {
          line: 164,
          column: 142
        }
      },
      "53": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "54": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 37
        }
      },
      "55": {
        start: {
          line: 169,
          column: 37
        },
        end: {
          line: 183,
          column: 18
        }
      },
      "56": {
        start: {
          line: 170,
          column: 35
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "57": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 175,
          column: 21
        }
      },
      "58": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 91
        }
      },
      "59": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 79
        }
      },
      "60": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 53
        }
      },
      "61": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "62": {
        start: {
          line: 185,
          column: 44
        },
        end: {
          line: 188,
          column: 43
        }
      },
      "63": {
        start: {
          line: 185,
          column: 71
        },
        end: {
          line: 188,
          column: 42
        }
      },
      "64": {
        start: {
          line: 189,
          column: 37
        },
        end: {
          line: 189,
          column: 75
        }
      },
      "65": {
        start: {
          line: 190,
          column: 36
        },
        end: {
          line: 190,
          column: 79
        }
      },
      "66": {
        start: {
          line: 190,
          column: 66
        },
        end: {
          line: 190,
          column: 78
        }
      },
      "67": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "68": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 87
        }
      },
      "69": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "70": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 52
        }
      },
      "71": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 204,
          column: 18
        }
      },
      "72": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 22
        }
      },
      "73": {
        start: {
          line: 208,
          column: 65
        },
        end: {
          line: 211,
          column: 53
        }
      },
      "74": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 214,
          column: 17
        }
      },
      "75": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 38
        }
      },
      "76": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 56
        }
      },
      "77": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 219,
          column: 18
        }
      },
      "78": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 22
        }
      },
      "79": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "80": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "81": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 239,
          column: 11
        }
      },
      "82": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "83": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "84": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 304,
          column: 5
        }
      },
      "85": {
        start: {
          line: 253,
          column: 24
        },
        end: {
          line: 253,
          column: 49
        }
      },
      "86": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "87": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 259,
          column: 15
        }
      },
      "88": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "89": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "90": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 79
        }
      },
      "91": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 58,
            column: 15
          },
          end: {
            line: 58,
            column: 19
          }
        },
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 169,
            column: 57
          },
          end: {
            line: 169,
            column: 58
          }
        },
        loc: {
          start: {
            line: 169,
            column: 68
          },
          end: {
            line: 183,
            column: 17
          }
        },
        line: 169
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 185,
            column: 61
          },
          end: {
            line: 185,
            column: 62
          }
        },
        loc: {
          start: {
            line: 185,
            column: 71
          },
          end: {
            line: 188,
            column: 42
          }
        },
        line: 185
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 190,
            column: 56
          },
          end: {
            line: 190,
            column: 57
          }
        },
        loc: {
          start: {
            line: 190,
            column: 66
          },
          end: {
            line: 190,
            column: 78
          }
        },
        line: 190
      },
      "8": {
        name: "GET",
        decl: {
          start: {
            line: 250,
            column: 15
          },
          end: {
            line: 250,
            column: 18
          }
        },
        loc: {
          start: {
            line: 250,
            column: 28
          },
          end: {
            line: 305,
            column: 1
          }
        },
        line: 250
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "2": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "3": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "4": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 123,
            column: 22
          }
        }, {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 154,
            column: 22
          }
        }, {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 205,
            column: 22
          }
        }, {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 220,
            column: 22
          }
        }, {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 226,
            column: 19
          }
        }],
        line: 101
      },
      "5": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 32
          },
          end: {
            line: 117,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 32
          },
          end: {
            line: 117,
            column: 56
          }
        }, {
          start: {
            line: 117,
            column: 60
          },
          end: {
            line: 117,
            column: 61
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 33
          }
        }, {
          start: {
            line: 134,
            column: 37
          },
          end: {
            line: 134,
            column: 46
          }
        }],
        line: 134
      },
      "11": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 147,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 147,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "12": {
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 58
          }
        }, {
          start: {
            line: 148,
            column: 62
          },
          end: {
            line: 148,
            column: 63
          }
        }],
        line: 148
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "15": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 175,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 175,
            column: 21
          }
        }, {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 175,
            column: 21
          }
        }],
        line: 171
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "18": {
        loc: {
          start: {
            line: 215,
            column: 32
          },
          end: {
            line: 215,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 32
          },
          end: {
            line: 215,
            column: 50
          }
        }, {
          start: {
            line: 215,
            column: 54
          },
          end: {
            line: 215,
            column: 55
          }
        }],
        line: 215
      },
      "19": {
        loc: {
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 244,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 46
          },
          end: {
            line: 244,
            column: 59
          }
        }, {
          start: {
            line: 244,
            column: 62
          },
          end: {
            line: 244,
            column: 77
          }
        }],
        line: 244
      },
      "20": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\products\\bulk\\route.ts"],
      sourcesContent: ["// Configuraci\xF3n para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// =====================================================\r\n// API: OPERACIONES MASIVAS DE PRODUCTOS\r\n// Ruta: /api/admin/products/bulk\r\n// Descripci\xF3n: Operaciones masivas enterprise para productos\r\n// =====================================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { auth } from '@/lib/auth/config';\r\nimport { z } from 'zod';\r\n\r\n// =====================================================\r\n// CONFIGURACI\xD3N\r\n// =====================================================\r\n\r\nconst supabase = createClient(\r\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n\r\n// =====================================================\r\n// ESQUEMAS DE VALIDACI\xD3N\r\n// =====================================================\r\n\r\nconst BulkOperationSchema = z.object({\r\n  operation: z.enum(['update_status', 'update_category', 'update_price', 'delete']),\r\n  product_ids: z.array(z.string().uuid()).min(1, 'Debe seleccionar al menos un producto'),\r\n  data: z.object({\r\n    status: z.enum(['active', 'inactive']).optional(),\r\n    category_id: z.number().int().positive().optional(),\r\n    price_adjustment: z.object({\r\n      type: z.enum(['percentage', 'fixed']),\r\n      value: z.number()\r\n    }).optional()\r\n  }).optional()\r\n});\r\n\r\n// =====================================================\r\n// HANDLER POST - OPERACIONES MASIVAS\r\n// =====================================================\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Validar datos de entrada\r\n    const body = await request.json();\r\n    const validationResult = BulkOperationSchema.safeParse(body);\r\n\r\n    if (!validationResult.success) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Datos de operaci\xF3n inv\xE1lidos', \r\n          details: validationResult.error.errors \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { operation, product_ids, data } = validationResult.data;\r\n\r\n    // Verificar que los productos existen y pertenecen al usuario autorizado\r\n    const { data: existingProducts, error: checkError } = await supabase\r\n      .from('products')\r\n      .select('id, name')\r\n      .in('id', product_ids);\r\n\r\n    if (checkError) {\r\n      console.error('Error verificando productos:', checkError);\r\n      return NextResponse.json(\r\n        { error: 'Error al verificar productos' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    if (existingProducts.length !== product_ids.length) {\r\n      return NextResponse.json(\r\n        { error: 'Algunos productos no fueron encontrados' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    let result;\r\n    let affectedCount = 0;\r\n\r\n    // Ejecutar operaci\xF3n seg\xFAn el tipo\r\n    switch (operation) {\r\n      case 'update_status':\r\n        if (!data?.status) {\r\n          return NextResponse.json(\r\n            { error: 'Estado requerido para operaci\xF3n update_status' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const { data: statusUpdateData, error: statusError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            is_active: data.status === 'active',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (statusError) {\r\n          throw statusError;\r\n        }\r\n\r\n        affectedCount = statusUpdateData?.length || 0;\r\n        result = {\r\n          operation: 'update_status',\r\n          affected_count: affectedCount,\r\n          new_status: data.status\r\n        };\r\n        break;\r\n\r\n      case 'update_category':\r\n        if (!data?.category_id) {\r\n          return NextResponse.json(\r\n            { error: 'ID de categor\xEDa requerido para operaci\xF3n update_category' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Verificar que la categor\xEDa existe\r\n        const { data: category, error: categoryError } = await supabase\r\n          .from('categories')\r\n          .select('id, name')\r\n          .eq('id', data.category_id)\r\n          .single();\r\n\r\n        if (categoryError || !category) {\r\n          return NextResponse.json(\r\n            { error: 'Categor\xEDa no encontrada' },\r\n            { status: 404 }\r\n          );\r\n        }\r\n\r\n        const { data: categoryUpdateData, error: categoryUpdateError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            category_id: data.category_id,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (categoryUpdateError) {\r\n          throw categoryUpdateError;\r\n        }\r\n\r\n        affectedCount = categoryUpdateData?.length || 0;\r\n        result = {\r\n          operation: 'update_category',\r\n          affected_count: affectedCount,\r\n          new_category: category.name\r\n        };\r\n        break;\r\n\r\n      case 'update_price':\r\n        if (!data?.price_adjustment) {\r\n          return NextResponse.json(\r\n            { error: 'Ajuste de precio requerido para operaci\xF3n update_price' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Obtener precios actuales\r\n        const { data: currentProducts, error: priceError } = await supabase\r\n          .from('products')\r\n          .select('id, price')\r\n          .in('id', product_ids);\r\n\r\n        if (priceError) {\r\n          throw priceError;\r\n        }\r\n\r\n        // Calcular nuevos precios\r\n        const priceUpdates = currentProducts.map(product => {\r\n          let newPrice = product.price;\r\n          \r\n          if (data.price_adjustment!.type === 'percentage') {\r\n            newPrice = product.price * (1 + data.price_adjustment!.value / 100);\r\n          } else {\r\n            newPrice = product.price + data.price_adjustment!.value;\r\n          }\r\n\r\n          // Asegurar que el precio no sea negativo\r\n          newPrice = Math.max(0, newPrice);\r\n\r\n          return {\r\n            id: product.id,\r\n            price: Math.round(newPrice * 100) / 100, // Redondear a 2 decimales\r\n            updated_at: new Date().toISOString()\r\n          };\r\n        });\r\n\r\n        // Actualizar precios uno por uno (Supabase no soporta bulk update con diferentes valores)\r\n        const priceUpdatePromises = priceUpdates.map(update =>\r\n          supabase\r\n            .from('products')\r\n            .update({ price: update.price, updated_at: update.updated_at })\r\n            .eq('id', update.id)\r\n        );\r\n\r\n        const priceResults = await Promise.all(priceUpdatePromises);\r\n        const priceErrors = priceResults.filter(result => result.error);\r\n\r\n        if (priceErrors.length > 0) {\r\n          console.error('Errores en actualizaci\xF3n de precios:', priceErrors);\r\n          return NextResponse.json(\r\n            { error: 'Error al actualizar algunos precios' },\r\n            { status: 500 }\r\n          );\r\n        }\r\n\r\n        affectedCount = priceUpdates.length;\r\n        result = {\r\n          operation: 'update_price',\r\n          affected_count: affectedCount,\r\n          price_adjustment: data.price_adjustment\r\n        };\r\n        break;\r\n\r\n      case 'delete':\r\n        // Eliminar productos (soft delete marcando como inactivo)\r\n        const { data: deleteData, error: deleteError } = await supabase\r\n          .from('products')\r\n          .update({ \r\n            is_active: false,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', product_ids)\r\n          .select('id');\r\n\r\n        if (deleteError) {\r\n          throw deleteError;\r\n        }\r\n\r\n        affectedCount = deleteData?.length || 0;\r\n        result = {\r\n          operation: 'delete',\r\n          affected_count: affectedCount\r\n        };\r\n        break;\r\n\r\n      default:\r\n        return NextResponse.json(\r\n          { error: 'Operaci\xF3n no soportada' },\r\n          { status: 400 }\r\n        );\r\n    }\r\n\r\n    // Log de la operaci\xF3n para auditor\xEDa\r\n    console.log(`\u2705 Operaci\xF3n masiva completada:`, {\r\n      operation,\r\n      affected_count: affectedCount,\r\n      user_id: session.user.id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `Operaci\xF3n ${operation} completada exitosamente`,\r\n      data: result\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error en operaci\xF3n masiva:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Error interno del servidor',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// =====================================================\r\n// HANDLER GET - INFORMACI\xD3N DE OPERACIONES\r\n// =====================================================\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar autenticaci\xF3n\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Retornar informaci\xF3n sobre operaciones disponibles\r\n    const operations = {\r\n      update_status: {\r\n        name: 'Actualizar Estado',\r\n        description: 'Activar o desactivar productos en lote',\r\n        required_data: ['status']\r\n      },\r\n      update_category: {\r\n        name: 'Cambiar Categor\xEDa',\r\n        description: 'Mover productos a una nueva categor\xEDa',\r\n        required_data: ['category_id']\r\n      },\r\n      update_price: {\r\n        name: 'Ajustar Precios',\r\n        description: 'Aplicar ajustes de precio por porcentaje o valor fijo',\r\n        required_data: ['price_adjustment']\r\n      },\r\n      delete: {\r\n        name: 'Eliminar Productos',\r\n        description: 'Desactivar productos (soft delete)',\r\n        required_data: []\r\n      }\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        available_operations: operations,\r\n        max_products_per_operation: 100\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Error obteniendo informaci\xF3n de operaciones:', error);\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],
      names: ["GET", "POST", "runtime", "supabase", "createClient", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY", "BulkOperationSchema", "z", "object", "operation", "enum", "product_ids", "array", "string", "uuid", "min", "data", "status", "optional", "category_id", "number", "int", "positive", "price_adjustment", "type", "value", "request", "session", "auth", "user", "NextResponse", "json", "error", "body", "validationResult", "safeParse", "success", "details", "errors", "existingProducts", "checkError", "from", "select", "in", "console", "length", "result", "affectedCount", "statusUpdateData", "statusError", "update", "is_active", "updated_at", "Date", "toISOString", "affected_count", "new_status", "category", "categoryError", "eq", "single", "categoryUpdateData", "categoryUpdateError", "new_category", "name", "currentProducts", "priceError", "priceUpdates", "map", "product", "newPrice", "price", "Math", "max", "id", "round", "priceUpdatePromises", "priceResults", "Promise", "all", "priceErrors", "filter", "deleteData", "deleteError", "log", "user_id", "timestamp", "message", "Error", "operations", "update_status", "description", "required_data", "update_category", "update_price", "delete", "available_operations", "max_products_per_operation"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7acf2c65a3593d1bc4e81ec2864d756da3415cc8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ez155zxfn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ez155zxfn();
cov_2ez155zxfn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ez155zxfn().f[0]++;
  cov_2ez155zxfn().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ez155zxfn().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2ez155zxfn().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2ez155zxfn().f[1]++;
    cov_2ez155zxfn().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2ez155zxfn().f[2]++;
    cov_2ez155zxfn().s[5]++;
    return POST;
  },
  get runtime() {
    /* istanbul ignore next */
    cov_2ez155zxfn().f[3]++;
    cov_2ez155zxfn().s[6]++;
    return runtime;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ez155zxfn().s[7]++, require("next/server"));
const _supabasejs =
/* istanbul ignore next */
(cov_2ez155zxfn().s[8]++, require("@supabase/supabase-js"));
const _config =
/* istanbul ignore next */
(cov_2ez155zxfn().s[9]++, require("../../../../../lib/auth/config"));
const _zod =
/* istanbul ignore next */
(cov_2ez155zxfn().s[10]++, require("zod"));
const runtime =
/* istanbul ignore next */
(cov_2ez155zxfn().s[11]++, 'nodejs');
// =====================================================
// CONFIGURACIÃN
// =====================================================
const supabase =
/* istanbul ignore next */
(cov_2ez155zxfn().s[12]++, (0, _supabasejs.createClient)(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY));
// =====================================================
// ESQUEMAS DE VALIDACIÃN
// =====================================================
const BulkOperationSchema =
/* istanbul ignore next */
(cov_2ez155zxfn().s[13]++, _zod.z.object({
  operation: _zod.z.enum(['update_status', 'update_category', 'update_price', 'delete']),
  product_ids: _zod.z.array(_zod.z.string().uuid()).min(1, 'Debe seleccionar al menos un producto'),
  data: _zod.z.object({
    status: _zod.z.enum(['active', 'inactive']).optional(),
    category_id: _zod.z.number().int().positive().optional(),
    price_adjustment: _zod.z.object({
      type: _zod.z.enum(['percentage', 'fixed']),
      value: _zod.z.number()
    }).optional()
  }).optional()
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2ez155zxfn().f[4]++;
  cov_2ez155zxfn().s[14]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[15]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2ez155zxfn().s[16]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2ez155zxfn().b[0][0]++;
      cov_2ez155zxfn().s[17]++;
      return _server.NextResponse.json({
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ez155zxfn().b[0][1]++;
    }
    // Validar datos de entrada
    const body =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[18]++, await request.json());
    const validationResult =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[19]++, BulkOperationSchema.safeParse(body));
    /* istanbul ignore next */
    cov_2ez155zxfn().s[20]++;
    if (!validationResult.success) {
      /* istanbul ignore next */
      cov_2ez155zxfn().b[1][0]++;
      cov_2ez155zxfn().s[21]++;
      return _server.NextResponse.json({
        error: 'Datos de operaciÃ³n invÃ¡lidos',
        details: validationResult.error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ez155zxfn().b[1][1]++;
    }
    const {
      operation,
      product_ids,
      data
    } =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[22]++, validationResult.data);
    // Verificar que los productos existen y pertenecen al usuario autorizado
    const {
      data: existingProducts,
      error: checkError
    } =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[23]++, await supabase.from('products').select('id, name').in('id', product_ids));
    /* istanbul ignore next */
    cov_2ez155zxfn().s[24]++;
    if (checkError) {
      /* istanbul ignore next */
      cov_2ez155zxfn().b[2][0]++;
      cov_2ez155zxfn().s[25]++;
      console.error('Error verificando productos:', checkError);
      /* istanbul ignore next */
      cov_2ez155zxfn().s[26]++;
      return _server.NextResponse.json({
        error: 'Error al verificar productos'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ez155zxfn().b[2][1]++;
    }
    cov_2ez155zxfn().s[27]++;
    if (existingProducts.length !== product_ids.length) {
      /* istanbul ignore next */
      cov_2ez155zxfn().b[3][0]++;
      cov_2ez155zxfn().s[28]++;
      return _server.NextResponse.json({
        error: 'Algunos productos no fueron encontrados'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ez155zxfn().b[3][1]++;
    }
    let result;
    let affectedCount =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[29]++, 0);
    // Ejecutar operaciÃ³n segÃºn el tipo
    /* istanbul ignore next */
    cov_2ez155zxfn().s[30]++;
    switch (operation) {
      case 'update_status':
        /* istanbul ignore next */
        cov_2ez155zxfn().b[4][0]++;
        cov_2ez155zxfn().s[31]++;
        if (!data?.status) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[5][0]++;
          cov_2ez155zxfn().s[32]++;
          return _server.NextResponse.json({
            error: 'Estado requerido para operaciÃ³n update_status'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[5][1]++;
        }
        const {
          data: statusUpdateData,
          error: statusError
        } =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[33]++, await supabase.from('products').update({
          is_active: data.status === 'active',
          updated_at: new Date().toISOString()
        }).in('id', product_ids).select('id'));
        /* istanbul ignore next */
        cov_2ez155zxfn().s[34]++;
        if (statusError) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[6][0]++;
          cov_2ez155zxfn().s[35]++;
          throw statusError;
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[6][1]++;
        }
        cov_2ez155zxfn().s[36]++;
        affectedCount =
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[7][0]++, statusUpdateData?.length) ||
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[7][1]++, 0);
        /* istanbul ignore next */
        cov_2ez155zxfn().s[37]++;
        result = {
          operation: 'update_status',
          affected_count: affectedCount,
          new_status: data.status
        };
        /* istanbul ignore next */
        cov_2ez155zxfn().s[38]++;
        break;
      case 'update_category':
        /* istanbul ignore next */
        cov_2ez155zxfn().b[4][1]++;
        cov_2ez155zxfn().s[39]++;
        if (!data?.category_id) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[8][0]++;
          cov_2ez155zxfn().s[40]++;
          return _server.NextResponse.json({
            error: 'ID de categorÃ­a requerido para operaciÃ³n update_category'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[8][1]++;
        }
        // Verificar que la categorÃ­a existe
        const {
          data: category,
          error: categoryError
        } =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[41]++, await supabase.from('categories').select('id, name').eq('id', data.category_id).single());
        /* istanbul ignore next */
        cov_2ez155zxfn().s[42]++;
        if (
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[10][0]++, categoryError) ||
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[10][1]++, !category)) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[9][0]++;
          cov_2ez155zxfn().s[43]++;
          return _server.NextResponse.json({
            error: 'CategorÃ­a no encontrada'
          }, {
            status: 404
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[9][1]++;
        }
        const {
          data: categoryUpdateData,
          error: categoryUpdateError
        } =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[44]++, await supabase.from('products').update({
          category_id: data.category_id,
          updated_at: new Date().toISOString()
        }).in('id', product_ids).select('id'));
        /* istanbul ignore next */
        cov_2ez155zxfn().s[45]++;
        if (categoryUpdateError) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[11][0]++;
          cov_2ez155zxfn().s[46]++;
          throw categoryUpdateError;
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[11][1]++;
        }
        cov_2ez155zxfn().s[47]++;
        affectedCount =
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[12][0]++, categoryUpdateData?.length) ||
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[12][1]++, 0);
        /* istanbul ignore next */
        cov_2ez155zxfn().s[48]++;
        result = {
          operation: 'update_category',
          affected_count: affectedCount,
          new_category: category.name
        };
        /* istanbul ignore next */
        cov_2ez155zxfn().s[49]++;
        break;
      case 'update_price':
        /* istanbul ignore next */
        cov_2ez155zxfn().b[4][2]++;
        cov_2ez155zxfn().s[50]++;
        if (!data?.price_adjustment) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[13][0]++;
          cov_2ez155zxfn().s[51]++;
          return _server.NextResponse.json({
            error: 'Ajuste de precio requerido para operaciÃ³n update_price'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[13][1]++;
        }
        // Obtener precios actuales
        const {
          data: currentProducts,
          error: priceError
        } =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[52]++, await supabase.from('products').select('id, price').in('id', product_ids));
        /* istanbul ignore next */
        cov_2ez155zxfn().s[53]++;
        if (priceError) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[14][0]++;
          cov_2ez155zxfn().s[54]++;
          throw priceError;
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[14][1]++;
        }
        // Calcular nuevos precios
        const priceUpdates =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[55]++, currentProducts.map(product => {
          /* istanbul ignore next */
          cov_2ez155zxfn().f[5]++;
          let newPrice =
          /* istanbul ignore next */
          (cov_2ez155zxfn().s[56]++, product.price);
          /* istanbul ignore next */
          cov_2ez155zxfn().s[57]++;
          if (data.price_adjustment.type === 'percentage') {
            /* istanbul ignore next */
            cov_2ez155zxfn().b[15][0]++;
            cov_2ez155zxfn().s[58]++;
            newPrice = product.price * (1 + data.price_adjustment.value / 100);
          } else {
            /* istanbul ignore next */
            cov_2ez155zxfn().b[15][1]++;
            cov_2ez155zxfn().s[59]++;
            newPrice = product.price + data.price_adjustment.value;
          }
          // Asegurar que el precio no sea negativo
          /* istanbul ignore next */
          cov_2ez155zxfn().s[60]++;
          newPrice = Math.max(0, newPrice);
          /* istanbul ignore next */
          cov_2ez155zxfn().s[61]++;
          return {
            id: product.id,
            price: Math.round(newPrice * 100) / 100,
            updated_at: new Date().toISOString()
          };
        }));
        // Actualizar precios uno por uno (Supabase no soporta bulk update con diferentes valores)
        const priceUpdatePromises =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[62]++, priceUpdates.map(update => {
          /* istanbul ignore next */
          cov_2ez155zxfn().f[6]++;
          cov_2ez155zxfn().s[63]++;
          return supabase.from('products').update({
            price: update.price,
            updated_at: update.updated_at
          }).eq('id', update.id);
        }));
        const priceResults =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[64]++, await Promise.all(priceUpdatePromises));
        const priceErrors =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[65]++, priceResults.filter(result => {
          /* istanbul ignore next */
          cov_2ez155zxfn().f[7]++;
          cov_2ez155zxfn().s[66]++;
          return result.error;
        }));
        /* istanbul ignore next */
        cov_2ez155zxfn().s[67]++;
        if (priceErrors.length > 0) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[16][0]++;
          cov_2ez155zxfn().s[68]++;
          console.error('Errores en actualizaciÃ³n de precios:', priceErrors);
          /* istanbul ignore next */
          cov_2ez155zxfn().s[69]++;
          return _server.NextResponse.json({
            error: 'Error al actualizar algunos precios'
          }, {
            status: 500
          });
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[16][1]++;
        }
        cov_2ez155zxfn().s[70]++;
        affectedCount = priceUpdates.length;
        /* istanbul ignore next */
        cov_2ez155zxfn().s[71]++;
        result = {
          operation: 'update_price',
          affected_count: affectedCount,
          price_adjustment: data.price_adjustment
        };
        /* istanbul ignore next */
        cov_2ez155zxfn().s[72]++;
        break;
      case 'delete':
        /* istanbul ignore next */
        cov_2ez155zxfn().b[4][3]++;
        // Eliminar productos (soft delete marcando como inactivo)
        const {
          data: deleteData,
          error: deleteError
        } =
        /* istanbul ignore next */
        (cov_2ez155zxfn().s[73]++, await supabase.from('products').update({
          is_active: false,
          updated_at: new Date().toISOString()
        }).in('id', product_ids).select('id'));
        /* istanbul ignore next */
        cov_2ez155zxfn().s[74]++;
        if (deleteError) {
          /* istanbul ignore next */
          cov_2ez155zxfn().b[17][0]++;
          cov_2ez155zxfn().s[75]++;
          throw deleteError;
        } else
        /* istanbul ignore next */
        {
          cov_2ez155zxfn().b[17][1]++;
        }
        cov_2ez155zxfn().s[76]++;
        affectedCount =
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[18][0]++, deleteData?.length) ||
        /* istanbul ignore next */
        (cov_2ez155zxfn().b[18][1]++, 0);
        /* istanbul ignore next */
        cov_2ez155zxfn().s[77]++;
        result = {
          operation: 'delete',
          affected_count: affectedCount
        };
        /* istanbul ignore next */
        cov_2ez155zxfn().s[78]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2ez155zxfn().b[4][4]++;
        cov_2ez155zxfn().s[79]++;
        return _server.NextResponse.json({
          error: 'OperaciÃ³n no soportada'
        }, {
          status: 400
        });
    }
    // Log de la operaciÃ³n para auditorÃ­a
    /* istanbul ignore next */
    cov_2ez155zxfn().s[80]++;
    console.log(`â OperaciÃ³n masiva completada:`, {
      operation,
      affected_count: affectedCount,
      user_id: session.user.id,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_2ez155zxfn().s[81]++;
    return _server.NextResponse.json({
      success: true,
      message: `OperaciÃ³n ${operation} completada exitosamente`,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ez155zxfn().s[82]++;
    console.error('â Error en operaciÃ³n masiva:', error);
    /* istanbul ignore next */
    cov_2ez155zxfn().s[83]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ez155zxfn().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ez155zxfn().b[19][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2ez155zxfn().f[8]++;
  cov_2ez155zxfn().s[84]++;
  try {
    // Verificar autenticaciÃ³n
    const session =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[85]++, await (0, _config.auth)());
    /* istanbul ignore next */
    cov_2ez155zxfn().s[86]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2ez155zxfn().b[20][0]++;
      cov_2ez155zxfn().s[87]++;
      return _server.NextResponse.json({
        error: 'No autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ez155zxfn().b[20][1]++;
    }
    // Retornar informaciÃ³n sobre operaciones disponibles
    const operations =
    /* istanbul ignore next */
    (cov_2ez155zxfn().s[88]++, {
      update_status: {
        name: 'Actualizar Estado',
        description: 'Activar o desactivar productos en lote',
        required_data: ['status']
      },
      update_category: {
        name: 'Cambiar CategorÃ­a',
        description: 'Mover productos a una nueva categorÃ­a',
        required_data: ['category_id']
      },
      update_price: {
        name: 'Ajustar Precios',
        description: 'Aplicar ajustes de precio por porcentaje o valor fijo',
        required_data: ['price_adjustment']
      },
      delete: {
        name: 'Eliminar Productos',
        description: 'Desactivar productos (soft delete)',
        required_data: []
      }
    });
    /* istanbul ignore next */
    cov_2ez155zxfn().s[89]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        available_operations: operations,
        max_products_per_operation: 100
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ez155zxfn().s[90]++;
    console.error('â Error obteniendo informaciÃ³n de operaciones:', error);
    /* istanbul ignore next */
    cov_2ez155zxfn().s[91]++;
    return _server.NextResponse.json({
      error: 'Error interno del servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,