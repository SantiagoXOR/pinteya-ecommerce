{"version":3,"names":["LiveNavigationMap","mapContainerStyle","cov_1y8xslmtqd","s","width","height","defaultCenter","lat","lng","stops","onCompleteDelivery","onNavigationUpdate","f","currentLocation","setCurrentLocation","_react","useState","directions","setDirections","currentStopIndex","setCurrentStopIndex","selectedStop","setSelectedStop","isNavigating","setIsNavigating","watchId","setWatchId","isGoogleMapsLoaded","setIsGoogleMapsLoaded","mapRef","useRef","useEffect","checkGoogleMaps","b","window","google","maps","setTimeout","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","longitude","error","console","_sonner","toast","length","calculateRoute","directionsService","DirectionsService","currentStop","find","stop","status","coordinates","log","result","route","origin","destination","travelMode","TravelMode","DRIVING","optimizeWaypoints","avoidHighways","avoidTolls","unitSystem","UnitSystem","METRIC","language","region","routes","leg","legs","distance","text","duration","steps","startNavigation","id","watchPosition","sequence","calculateDistance","success","address","enableHighAccuracy","timeout","maximumAge","stopNavigation","clearWatch","info","handleCompleteDelivery","response","fetch","method","headers","body","JSON","stringify","orderId","deliveryLocation","deliveryTime","Date","toISOString","deliveryNotes","ok","Error","json","orderNumber","prev","pos1","pos2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","formatCurrency","amount","Intl","NumberFormat","style","currency","format","_jsxruntime","jsxs","className","_card","Card","jsx","CardHeader","CardTitle","_lucidereact","Navigation","selectedOrders","size","orders","_button","Button","onClick","variant","CardContent","filter","_api","GoogleMap","center","zoom","onLoad","map","current","DirectionsRenderer","options","suppressMarkers","polylineOptions","strokeColor","strokeWeight","Marker","icon","url","scaledSize","Size","title","InfoWindow","onCloseClick","total","items","CheckCircle","index","_badge","Badge"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\components\\driver\\LiveNavigationMap.tsx"],"sourcesContent":["/**\r\n * Componente de navegación GPS en tiempo real para drivers\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, DirectionsRenderer, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Navigation,\r\n  MapPin,\r\n  CheckCircle,\r\n  Clock,\r\n  AlertTriangle,\r\n  Phone,\r\n  Package\r\n} from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface DeliveryStop {\r\n  orderId: number;\r\n  orderNumber: string;\r\n  address: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  sequence: number;\r\n  status: 'pending' | 'current' | 'completed';\r\n  estimatedArrival?: string;\r\n  total: number;\r\n  items: number;\r\n  notes?: string;\r\n}\r\n\r\ninterface LiveNavigationMapProps {\r\n  stops: DeliveryStop[];\r\n  onCompleteDelivery: (orderId: number) => void;\r\n  onNavigationUpdate?: (currentLocation: { lat: number; lng: number }) => void;\r\n}\r\n\r\nconst mapContainerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\nconst defaultCenter = {\r\n  lat: -31.4201,\r\n  lng: -64.1888\r\n};\r\n\r\nexport default function LiveNavigationMap({\r\n  stops,\r\n  onCompleteDelivery,\r\n  onNavigationUpdate\r\n}: LiveNavigationMapProps) {\r\n  const [currentLocation, setCurrentLocation] = useState<{ lat: number; lng: number } | null>(null);\r\n  const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null);\r\n  const [currentStopIndex, setCurrentStopIndex] = useState(0);\r\n  const [selectedStop, setSelectedStop] = useState<DeliveryStop | null>(null);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n  const [watchId, setWatchId] = useState<number | null>(null);\r\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\r\n  const mapRef = useRef<google.maps.Map | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Verificar si Google Maps está cargado\r\n    const checkGoogleMaps = () => {\r\n      if (window.google && window.google.maps) {\r\n        setIsGoogleMapsLoaded(true);\r\n      } else {\r\n        setTimeout(checkGoogleMaps, 100);\r\n      }\r\n    };\r\n    checkGoogleMaps();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Solicitar ubicación actual\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const location = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          };\r\n          setCurrentLocation(location);\r\n          if (onNavigationUpdate) {\r\n            onNavigationUpdate(location);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error('Error getting location:', error);\r\n          toast.error('No se pudo obtener la ubicación actual');\r\n          // Usar ubicación por defecto (Córdoba)\r\n          setCurrentLocation(defaultCenter);\r\n        }\r\n      );\r\n    }\r\n  }, [onNavigationUpdate]);\r\n\r\n  useEffect(() => {\r\n    if (currentLocation && stops.length > 0) {\r\n      calculateRoute();\r\n    }\r\n  }, [currentLocation, stops, currentStopIndex]);\r\n\r\n  const calculateRoute = async () => {\r\n    if (!currentLocation || !window.google || !window.google.maps) return;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n    const currentStop = stops.find(stop => stop.status === 'current');\r\n\r\n    if (!currentStop || !currentStop.coordinates) {\r\n      setDirections(null);\r\n      return;\r\n    }\r\n\r\n    console.log('🗺️ Calculando ruta GPS desde:', currentLocation, 'hacia:', currentStop.coordinates);\r\n\r\n    try {\r\n      const result = await directionsService.route({\r\n        origin: currentLocation,\r\n        destination: currentStop.coordinates,\r\n        travelMode: google.maps.TravelMode.DRIVING,\r\n        optimizeWaypoints: false,\r\n        avoidHighways: false,\r\n        avoidTolls: false,\r\n        unitSystem: google.maps.UnitSystem.METRIC,\r\n        language: 'es',\r\n        region: 'AR'\r\n      });\r\n\r\n      console.log('✅ Ruta GPS calculada exitosamente:', result);\r\n      setDirections(result);\r\n\r\n      // Extraer información de navegación\r\n      const route = result.routes[0];\r\n      const leg = route.legs[0];\r\n\r\n      console.log('📊 Información de ruta:', {\r\n        distance: leg.distance?.text,\r\n        duration: leg.duration?.text,\r\n        steps: leg.steps.length\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error calculating route:', error);\r\n      toast.error('Error al calcular la ruta GPS');\r\n    }\r\n  };\r\n  const startNavigation = () => {\r\n    if (!navigator.geolocation) {\r\n      toast.error('Geolocalización no disponible');\r\n      return;\r\n    }\r\n\r\n    setIsNavigating(true);\r\n\r\n    const id = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const location = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        setCurrentLocation(location);\r\n\r\n        if (onNavigationUpdate) {\r\n          onNavigationUpdate(location);\r\n        }\r\n\r\n        // Verificar si llegamos cerca del destino actual\r\n        const currentStop = stops.find(stop => stop.status === 'current' ||\r\n          (stop.status === 'pending' && stop.sequence === currentStopIndex + 1));\r\n\r\n        if (currentStop && currentStop.coordinates) {\r\n          const distance = calculateDistance(location, currentStop.coordinates);\r\n          if (distance < 0.1) { // 100 metros\r\n            toast.success(`Has llegado a ${currentStop.address}`);\r\n          }\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error watching location:', error);\r\n        toast.error('Error al seguir la ubicación');\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000\r\n      }\r\n    );\r\n\r\n    setWatchId(id);\r\n    toast.success('Navegación iniciada');\r\n  };\r\n\r\n  const stopNavigation = () => {\r\n    if (watchId) {\r\n      navigator.geolocation.clearWatch(watchId);\r\n      setWatchId(null);\r\n    }\r\n    setIsNavigating(false);\r\n    toast.info('Navegación detenida');\r\n  };\r\n\r\n  const handleCompleteDelivery = async (stop: DeliveryStop) => {\r\n    try {\r\n      const response = await fetch('/api/driver/complete-delivery', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          orderId: stop.orderId,\r\n          deliveryLocation: currentLocation,\r\n          deliveryTime: new Date().toISOString(),\r\n          deliveryNotes: `Entregado en ${stop.address}`\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al completar la entrega');\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        toast.success(`Entrega completada: ${stop.orderNumber}`);\r\n        onCompleteDelivery(stop.orderId);\r\n        setCurrentStopIndex(prev => prev + 1);\r\n        setSelectedStop(null);\r\n      } else {\r\n        throw new Error(result.error || 'Error desconocido');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing delivery:', error);\r\n      toast.error('Error al completar la entrega');\r\n    }\r\n  };\r\n\r\n  const calculateDistance = (pos1: { lat: number; lng: number }, pos2: { lat: number; lng: number }) => {\r\n    const R = 6371; // Radio de la Tierra en km\r\n    const dLat = (pos2.lat - pos1.lat) * Math.PI / 180;\r\n    const dLon = (pos2.lng - pos1.lng) * Math.PI / 180;\r\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n              Math.cos(pos1.lat * Math.PI / 180) * Math.cos(pos2.lat * Math.PI / 180) *\r\n              Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Controles de navegación */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Navigation className=\"h-5 w-5\" />\r\n              <span className=\"font-medium\">\r\n                {selectedOrders.size} de {orders.length} órdenes seleccionadas\r\n              </span>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              {!isNavigating ? (\r\n                <Button onClick={startNavigation} size=\"sm\">\r\n                  Iniciar Navegación\r\n                </Button>\r\n              ) : (\r\n                <Button onClick={stopNavigation} variant=\"outline\" size=\"sm\">\r\n                  Detener\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-between text-sm\">\r\n            <span>Paradas restantes: {stops.filter(s => s.status === 'pending').length}</span>\r\n            <span>Completadas: {stops.filter(s => s.status === 'completed').length}</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Mapa */}\r\n      <Card>\r\n        <CardContent className=\"p-0\">\r\n          <GoogleMap\r\n            mapContainerStyle={mapContainerStyle}\r\n            center={currentLocation || defaultCenter}\r\n            zoom={13}\r\n            onLoad={(map) => {\r\n              mapRef.current = map;\r\n            }}\r\n          >\r\n            {/* Mostrar ruta */}\r\n            {directions && (\r\n              <DirectionsRenderer\r\n                directions={directions}\r\n                options={{\r\n                  suppressMarkers: false,\r\n                  polylineOptions: {\r\n                    strokeColor: '#2563eb',\r\n                    strokeWeight: 4\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {/* Marcador de ubicación actual */}\r\n            {currentLocation && window.google && window.google.maps && (\r\n              <Marker\r\n                position={currentLocation}\r\n                icon={{\r\n                  url: '/icons/current-location.png',\r\n                  scaledSize: new google.maps.Size(30, 30)\r\n                }}\r\n                title=\"Tu ubicación\"\r\n              />\r\n            )}\r\n\r\n            {/* Marcadores de paradas */}\r\n            {window.google && window.google.maps && stops.map((stop) => (\r\n              <Marker\r\n                key={stop.orderId}\r\n                position={stop.coordinates || { lat: 0, lng: 0 }}\r\n                onClick={() => setSelectedStop(stop)}\r\n                icon={{\r\n                  url: stop.status === 'completed' ? '/icons/marker-green.png' :\r\n                       stop.status === 'current' ? '/icons/marker-blue.png' : '/icons/marker-red.png',\r\n                  scaledSize: new google.maps.Size(25, 25)\r\n                }}\r\n                title={`${stop.orderNumber} - ${stop.address}`}\r\n              />\r\n            ))}\r\n\r\n            {/* Info window para parada seleccionada */}\r\n            {selectedStop && selectedStop.coordinates && (\r\n              <InfoWindow\r\n                position={selectedStop.coordinates}\r\n                onCloseClick={() => setSelectedStop(null)}\r\n              >\r\n                <div className=\"p-2 max-w-xs\">\r\n                  <h3 className=\"font-semibold\">{selectedStop.orderNumber}</h3>\r\n                  <p className=\"text-sm text-gray-600\">{selectedStop.address}</p>\r\n                  <p className=\"text-sm\">Total: {formatCurrency(selectedStop.total)}</p>\r\n                  <p className=\"text-sm\">Items: {selectedStop.items}</p>\r\n                  {selectedStop.status === 'pending' && (\r\n                    <Button\r\n                      size=\"sm\"\r\n                      className=\"mt-2 w-full\"\r\n                      onClick={() => handleCompleteDelivery(selectedStop)}\r\n                    >\r\n                      <CheckCircle className=\"h-4 w-4 mr-1\" />\r\n                      Completar Entrega\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </InfoWindow>\r\n            )}\r\n          </GoogleMap>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Lista de paradas */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Navigation className=\"h-5 w-5\" />\r\n            Paradas del Recorrido\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {stops.map((stop, index) => (\r\n              <div\r\n                key={stop.orderId}\r\n                className={`p-3 rounded-lg border ${\r\n                  stop.status === 'completed' ? 'bg-green-50 border-green-200' :\r\n                  stop.status === 'current' ? 'bg-blue-50 border-blue-200' :\r\n                  'bg-gray-50 border-gray-200'\r\n                }`}\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\r\n                      stop.status === 'completed' ? 'bg-green-500 text-white' :\r\n                      stop.status === 'current' ? 'bg-blue-500 text-white' :\r\n                      'bg-gray-300 text-gray-700'\r\n                    }`}>\r\n                      {stop.sequence}\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">{stop.orderNumber}</p>\r\n                      <p className=\"text-sm text-gray-600\">{stop.address}</p>\r\n                      <p className=\"text-sm\">\r\n                        {formatCurrency(stop.total)} • {stop.items} items\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant={\r\n                      stop.status === 'completed' ? 'default' :\r\n                      stop.status === 'current' ? 'secondary' :\r\n                      'outline'\r\n                    }>\r\n                      {stop.status === 'completed' ? 'Completada' :\r\n                       stop.status === 'current' ? 'Actual' :\r\n                       'Pendiente'}\r\n                    </Badge>\r\n                    {stop.status === 'pending' && (\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleCompleteDelivery(stop)}\r\n                      >\r\n                        <CheckCircle className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingskDA;;;;;;WAAwBA,iBAAA;;;;;;;;yEAhD2B;;;kCACe;;;kCACT;;;kCAClC;;;kCACD;;;kCASf;;;mCACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBtB,MAAMC,iBAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAoB;EACxBC,KAAA,EAAO;EACPC,MAAA,EAAQ;AACV;AAEA,MAAMC,aAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAgB;EACpBI,GAAA,EAAK,CAAC;EACNC,GAAA,EAAK,CAAC;AACR;AAEe,SAASR,kBAAkB;EACxCS,KAAK;EACLC,kBAAkB;EAClBC;AAAkB,CACK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EACvB,MAAM,CAACC,eAAA,EAAiBC,kBAAA,CAAmB;EAAA;EAAA,CAAAZ,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAsC;EAC5F,MAAM,CAACC,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAAhB,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAsC;EAClF,MAAM,CAACG,gBAAA,EAAkBC,mBAAA,CAAoB;EAAA;EAAA,CAAAlB,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAC;EACzD,MAAM,CAACK,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAApB,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAsB;EACtE,MAAM,CAACO,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAAtB,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAC;EACjD,MAAM,CAACS,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAAxB,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAgB;EACtD,MAAM,CAACW,kBAAA,EAAoBC,qBAAA,CAAsB;EAAA;EAAA,CAAA1B,cAAA,GAAAC,CAAA,QAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAC;EAC7D,MAAMa,MAAA;EAAA;EAAA,CAAA3B,cAAA,GAAAC,CAAA,QAAS,IAAAY,MAAA,CAAAe,MAAM,EAAyB;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAE9C,IAAAY,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA7B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACR;IACA,MAAM6B,eAAA,GAAkBA,CAAA;MAAA;MAAA9B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACtB;MAAI;MAAA,CAAAD,cAAA,GAAA+B,CAAA,WAAAC,MAAA,CAAOC,MAAM;MAAA;MAAA,CAAAjC,cAAA,GAAA+B,CAAA,WAAIC,MAAA,CAAOC,MAAM,CAACC,IAAI,GAAE;QAAA;QAAAlC,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QACvCyB,qBAAA,CAAsB;MACxB,OAAO;QAAA;QAAA1B,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QACLkC,UAAA,CAAWL,eAAA,EAAiB;MAC9B;IACF;IAAA;IAAA9B,cAAA,GAAAC,CAAA;IACA6B,eAAA;EACF,GAAG,EAAE;EAAA;EAAA9B,cAAA,GAAAC,CAAA;EAEL,IAAAY,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA7B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACR;IACA,IAAImC,SAAA,CAAUC,WAAW,EAAE;MAAA;MAAArC,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MACzBmC,SAAA,CAAUC,WAAW,CAACC,kBAAkB,CACrCC,QAAA;QAAA;QAAAvC,cAAA,GAAAU,CAAA;QACC,MAAM8B,QAAA;QAAA;QAAA,CAAAxC,cAAA,GAAAC,CAAA,QAAW;UACfI,GAAA,EAAKkC,QAAA,CAASE,MAAM,CAACC,QAAQ;UAC7BpC,GAAA,EAAKiC,QAAA,CAASE,MAAM,CAACE;QACvB;QAAA;QAAA3C,cAAA,GAAAC,CAAA;QACAW,kBAAA,CAAmB4B,QAAA;QAAA;QAAAxC,cAAA,GAAAC,CAAA;QACnB,IAAIQ,kBAAA,EAAoB;UAAA;UAAAT,cAAA,GAAA+B,CAAA;UAAA/B,cAAA,GAAAC,CAAA;UACtBQ,kBAAA,CAAmB+B,QAAA;QACrB;QAAA;QAAA;UAAAxC,cAAA,GAAA+B,CAAA;QAAA;MACF,GACCa,KAAA;QAAA;QAAA5C,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QACC4C,OAAA,CAAQD,KAAK,CAAC,2BAA2BA,KAAA;QAAA;QAAA5C,cAAA,GAAAC,CAAA;QACzC6C,OAAA,CAAAC,KAAK,CAACH,KAAK,CAAC;QACZ;QAAA;QAAA5C,cAAA,GAAAC,CAAA;QACAW,kBAAA,CAAmBR,aAAA;MACrB;IAEJ;IAAA;IAAA;MAAAJ,cAAA,GAAA+B,CAAA;IAAA;EACF,GAAG,CAACtB,kBAAA,CAAmB;EAAA;EAAAT,cAAA,GAAAC,CAAA;EAEvB,IAAAY,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA7B,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACR;IAAI;IAAA,CAAAD,cAAA,GAAA+B,CAAA,WAAApB,eAAA;IAAA;IAAA,CAAAX,cAAA,GAAA+B,CAAA,WAAmBxB,KAAA,CAAMyC,MAAM,GAAG,IAAG;MAAA;MAAAhD,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MACvCgD,cAAA;IACF;IAAA;IAAA;MAAAjD,cAAA,GAAA+B,CAAA;IAAA;EACF,GAAG,CAACpB,eAAA,EAAiBJ,KAAA,EAAOU,gBAAA,CAAiB;EAAA;EAAAjB,cAAA,GAAAC,CAAA;EAE7C,MAAMgD,cAAA,GAAiB,MAAAA,CAAA;IAAA;IAAAjD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACrB;IAAI;IAAA,CAAAD,cAAA,GAAA+B,CAAA,YAACpB,eAAA;IAAA;IAAA,CAAAX,cAAA,GAAA+B,CAAA,WAAmB,CAACC,MAAA,CAAOC,MAAM;IAAA;IAAA,CAAAjC,cAAA,GAAA+B,CAAA,WAAI,CAACC,MAAA,CAAOC,MAAM,CAACC,IAAI,GAAE;MAAA;MAAAlC,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAD,cAAA,GAAA+B,CAAA;IAAA;IAE/D,MAAMmB,iBAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAC,CAAA,QAAoB,IAAIgC,MAAA,CAAOC,IAAI,CAACiB,iBAAiB;IAC3D,MAAMC,WAAA;IAAA;IAAA,CAAApD,cAAA,GAAAC,CAAA,QAAcM,KAAA,CAAM8C,IAAI,CAACC,IAAA,IAAQ;MAAA;MAAAtD,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MAAA,OAAAqD,IAAA,CAAKC,MAAM,KAAK;IAAA;IAAA;IAAAvD,cAAA,GAAAC,CAAA;IAEvD;IAAI;IAAA,CAAAD,cAAA,GAAA+B,CAAA,YAACqB,WAAA;IAAA;IAAA,CAAApD,cAAA,GAAA+B,CAAA,WAAe,CAACqB,WAAA,CAAYI,WAAW,GAAE;MAAA;MAAAxD,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MAC5Ce,aAAA,CAAc;MAAA;MAAAhB,cAAA,GAAAC,CAAA;MACd;IACF;IAAA;IAAA;MAAAD,cAAA,GAAA+B,CAAA;IAAA;IAAA/B,cAAA,GAAAC,CAAA;IAEA4C,OAAA,CAAQY,GAAG,CAAC,kCAAkC9C,eAAA,EAAiB,UAAUyC,WAAA,CAAYI,WAAW;IAAA;IAAAxD,cAAA,GAAAC,CAAA;IAEhG,IAAI;MACF,MAAMyD,MAAA;MAAA;MAAA,CAAA1D,cAAA,GAAAC,CAAA,QAAS,MAAMiD,iBAAA,CAAkBS,KAAK,CAAC;QAC3CC,MAAA,EAAQjD,eAAA;QACRkD,WAAA,EAAaT,WAAA,CAAYI,WAAW;QACpCM,UAAA,EAAY7B,MAAA,CAAOC,IAAI,CAAC6B,UAAU,CAACC,OAAO;QAC1CC,iBAAA,EAAmB;QACnBC,aAAA,EAAe;QACfC,UAAA,EAAY;QACZC,UAAA,EAAYnC,MAAA,CAAOC,IAAI,CAACmC,UAAU,CAACC,MAAM;QACzCC,QAAA,EAAU;QACVC,MAAA,EAAQ;MACV;MAAA;MAAAxE,cAAA,GAAAC,CAAA;MAEA4C,OAAA,CAAQY,GAAG,CAAC,sCAAsCC,MAAA;MAAA;MAAA1D,cAAA,GAAAC,CAAA;MAClDe,aAAA,CAAc0C,MAAA;MAEd;MACA,MAAMC,KAAA;MAAA;MAAA,CAAA3D,cAAA,GAAAC,CAAA,QAAQyD,MAAA,CAAOe,MAAM,CAAC,EAAE;MAC9B,MAAMC,GAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAC,CAAA,QAAM0D,KAAA,CAAMgB,IAAI,CAAC,EAAE;MAAA;MAAA3E,cAAA,GAAAC,CAAA;MAEzB4C,OAAA,CAAQY,GAAG,CAAC,2BAA2B;QACrCmB,QAAA,EAAUF,GAAA,CAAIE,QAAQ,EAAEC,IAAA;QACxBC,QAAA,EAAUJ,GAAA,CAAII,QAAQ,EAAED,IAAA;QACxBE,KAAA,EAAOL,GAAA,CAAIK,KAAK,CAAC/B;MACnB;IAEF,EAAE,OAAOJ,KAAA,EAAO;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MACd4C,OAAA,CAAQD,KAAK,CAAC,8BAA8BA,KAAA;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MAC5C6C,OAAA,CAAAC,KAAK,CAACH,KAAK,CAAC;IACd;EACF;EAAA;EAAA5C,cAAA,GAAAC,CAAA;EACA,MAAM+E,eAAA,GAAkBA,CAAA;IAAA;IAAAhF,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACtB,IAAI,CAACmC,SAAA,CAAUC,WAAW,EAAE;MAAA;MAAArC,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MAC1B6C,OAAA,CAAAC,KAAK,CAACH,KAAK,CAAC;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MACZ;IACF;IAAA;IAAA;MAAAD,cAAA,GAAA+B,CAAA;IAAA;IAAA/B,cAAA,GAAAC,CAAA;IAEAqB,eAAA,CAAgB;IAEhB,MAAM2D,EAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAC,CAAA,QAAKmC,SAAA,CAAUC,WAAW,CAAC6C,aAAa,CAC3C3C,QAAA;MAAA;MAAAvC,cAAA,GAAAU,CAAA;MACC,MAAM8B,QAAA;MAAA;MAAA,CAAAxC,cAAA,GAAAC,CAAA,QAAW;QACfI,GAAA,EAAKkC,QAAA,CAASE,MAAM,CAACC,QAAQ;QAC7BpC,GAAA,EAAKiC,QAAA,CAASE,MAAM,CAACE;MACvB;MAAA;MAAA3C,cAAA,GAAAC,CAAA;MACAW,kBAAA,CAAmB4B,QAAA;MAAA;MAAAxC,cAAA,GAAAC,CAAA;MAEnB,IAAIQ,kBAAA,EAAoB;QAAA;QAAAT,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QACtBQ,kBAAA,CAAmB+B,QAAA;MACrB;MAAA;MAAA;QAAAxC,cAAA,GAAA+B,CAAA;MAAA;MAEA;MACA,MAAMqB,WAAA;MAAA;MAAA,CAAApD,cAAA,GAAAC,CAAA,QAAcM,KAAA,CAAM8C,IAAI,CAACC,IAAA,IAAQ;QAAA;QAAAtD,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,kCAAAD,cAAA,GAAA+B,CAAA,WAAAuB,IAAA,CAAKC,MAAM,KAAK;QACpD;QAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAAuB,IAAA,CAAKC,MAAM,KAAK;QAAA;QAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAauB,IAAA,CAAK6B,QAAQ,KAAKlE,gBAAA,GAAmB;MAAA;MAAA;MAAAjB,cAAA,GAAAC,CAAA;MAErE;MAAI;MAAA,CAAAD,cAAA,GAAA+B,CAAA,WAAAqB,WAAA;MAAA;MAAA,CAAApD,cAAA,GAAA+B,CAAA,WAAeqB,WAAA,CAAYI,WAAW,GAAE;QAAA;QAAAxD,cAAA,GAAA+B,CAAA;QAC1C,MAAM6C,QAAA;QAAA;QAAA,CAAA5E,cAAA,GAAAC,CAAA,QAAWmF,iBAAA,CAAkB5C,QAAA,EAAUY,WAAA,CAAYI,WAAW;QAAA;QAAAxD,cAAA,GAAAC,CAAA;QACpE,IAAI2E,QAAA,GAAW,KAAK;UAAA;UAAA5E,cAAA,GAAA+B,CAAA;UAAA/B,cAAA,GAAAC,CAAA;UAClB6C,OAAA,CAAAC,KAAK,CAACsC,OAAO,CAAC,iBAAiBjC,WAAA,CAAYkC,OAAO,EAAE;QACtD;QAAA;QAAA;UAAAtF,cAAA,GAAA+B,CAAA;QAAA;MACF;MAAA;MAAA;QAAA/B,cAAA,GAAA+B,CAAA;MAAA;IACF,GACCa,KAAA;MAAA;MAAA5C,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACC4C,OAAA,CAAQD,KAAK,CAAC,4BAA4BA,KAAA;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MAC1C6C,OAAA,CAAAC,KAAK,CAACH,KAAK,CAAC;IACd,GACA;MACE2C,kBAAA,EAAoB;MACpBC,OAAA,EAAS;MACTC,UAAA,EAAY;IACd;IAAA;IAAAzF,cAAA,GAAAC,CAAA;IAGFuB,UAAA,CAAWyD,EAAA;IAAA;IAAAjF,cAAA,GAAAC,CAAA;IACX6C,OAAA,CAAAC,KAAK,CAACsC,OAAO,CAAC;EAChB;EAAA;EAAArF,cAAA,GAAAC,CAAA;EAEA,MAAMyF,cAAA,GAAiBA,CAAA;IAAA;IAAA1F,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACrB,IAAIsB,OAAA,EAAS;MAAA;MAAAvB,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAC,CAAA;MACXmC,SAAA,CAAUC,WAAW,CAACsD,UAAU,CAACpE,OAAA;MAAA;MAAAvB,cAAA,GAAAC,CAAA;MACjCuB,UAAA,CAAW;IACb;IAAA;IAAA;MAAAxB,cAAA,GAAA+B,CAAA;IAAA;IAAA/B,cAAA,GAAAC,CAAA;IACAqB,eAAA,CAAgB;IAAA;IAAAtB,cAAA,GAAAC,CAAA;IAChB6C,OAAA,CAAAC,KAAK,CAAC6C,IAAI,CAAC;EACb;EAAA;EAAA5F,cAAA,GAAAC,CAAA;EAEA,MAAM4F,sBAAA,GAAyB,MAAOvC,IAAA;IAAA;IAAAtD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACpC,IAAI;MACF,MAAM6F,QAAA;MAAA;MAAA,CAAA9F,cAAA,GAAAC,CAAA,SAAW,MAAM8F,KAAA,CAAM,iCAAiC;QAC5DC,MAAA,EAAQ;QACRC,OAAA,EAAS;UACP,gBAAgB;QAClB;QACAC,IAAA,EAAMC,IAAA,CAAKC,SAAS,CAAC;UACnBC,OAAA,EAAS/C,IAAA,CAAK+C,OAAO;UACrBC,gBAAA,EAAkB3F,eAAA;UAClB4F,YAAA,EAAc,IAAIC,IAAA,GAAOC,WAAW;UACpCC,aAAA,EAAe,gBAAgBpD,IAAA,CAAKgC,OAAO;QAC7C;MACF;MAAA;MAAAtF,cAAA,GAAAC,CAAA;MAEA,IAAI,CAAC6F,QAAA,CAASa,EAAE,EAAE;QAAA;QAAA3G,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QAChB,MAAM,IAAI2G,KAAA,CAAM;MAClB;MAAA;MAAA;QAAA5G,cAAA,GAAA+B,CAAA;MAAA;MAEA,MAAM2B,MAAA;MAAA;MAAA,CAAA1D,cAAA,GAAAC,CAAA,SAAS,MAAM6F,QAAA,CAASe,IAAI;MAAA;MAAA7G,cAAA,GAAAC,CAAA;MAElC,IAAIyD,MAAA,CAAO2B,OAAO,EAAE;QAAA;QAAArF,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QAClB6C,OAAA,CAAAC,KAAK,CAACsC,OAAO,CAAC,uBAAuB/B,IAAA,CAAKwD,WAAW,EAAE;QAAA;QAAA9G,cAAA,GAAAC,CAAA;QACvDO,kBAAA,CAAmB8C,IAAA,CAAK+C,OAAO;QAAA;QAAArG,cAAA,GAAAC,CAAA;QAC/BiB,mBAAA,CAAoB6F,IAAA,IAAQ;UAAA;UAAA/G,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAC,CAAA;UAAA,OAAA8G,IAAA,GAAO;QAAA;QAAA;QAAA/G,cAAA,GAAAC,CAAA;QACnCmB,eAAA,CAAgB;MAClB,OAAO;QAAA;QAAApB,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAC,CAAA;QACL,MAAM,IAAI2G,KAAA;QAAM;QAAA,CAAA5G,cAAA,GAAA+B,CAAA,WAAA2B,MAAA,CAAOd,KAAK;QAAA;QAAA,CAAA5C,cAAA,GAAA+B,CAAA,WAAI;MAClC;IACF,EAAE,OAAOa,KAAA,EAAO;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MACd4C,OAAA,CAAQD,KAAK,CAAC,8BAA8BA,KAAA;MAAA;MAAA5C,cAAA,GAAAC,CAAA;MAC5C6C,OAAA,CAAAC,KAAK,CAACH,KAAK,CAAC;IACd;EACF;EAAA;EAAA5C,cAAA,GAAAC,CAAA;EAEA,MAAMmF,iBAAA,GAAoBA,CAAC4B,IAAA,EAAoCC,IAAA;IAAA;IAAAjH,cAAA,GAAAU,CAAA;IAC7D,MAAMwG,CAAA;IAAA;IAAA,CAAAlH,cAAA,GAAAC,CAAA,SAAI,OAAM;IAChB,MAAMkH,IAAA;IAAA;IAAA,CAAAnH,cAAA,GAAAC,CAAA,SAAO,CAACgH,IAAA,CAAK5G,GAAG,GAAG2G,IAAA,CAAK3G,GAAG,IAAI+G,IAAA,CAAKC,EAAE,GAAG;IAC/C,MAAMC,IAAA;IAAA;IAAA,CAAAtH,cAAA,GAAAC,CAAA,SAAO,CAACgH,IAAA,CAAK3G,GAAG,GAAG0G,IAAA,CAAK1G,GAAG,IAAI8G,IAAA,CAAKC,EAAE,GAAG;IAC/C,MAAME,CAAA;IAAA;IAAA,CAAAvH,cAAA,GAAAC,CAAA,SAAImH,IAAA,CAAKI,GAAG,CAACL,IAAA,GAAK,KAAKC,IAAA,CAAKI,GAAG,CAACL,IAAA,GAAK,KACjCC,IAAA,CAAKK,GAAG,CAACT,IAAA,CAAK3G,GAAG,GAAG+G,IAAA,CAAKC,EAAE,GAAG,OAAOD,IAAA,CAAKK,GAAG,CAACR,IAAA,CAAK5G,GAAG,GAAG+G,IAAA,CAAKC,EAAE,GAAG,OACnED,IAAA,CAAKI,GAAG,CAACF,IAAA,GAAK,KAAKF,IAAA,CAAKI,GAAG,CAACF,IAAA,GAAK;IAC3C,MAAMI,CAAA;IAAA;IAAA,CAAA1H,cAAA,GAAAC,CAAA,SAAI,IAAImH,IAAA,CAAKO,KAAK,CAACP,IAAA,CAAKQ,IAAI,CAACL,CAAA,GAAIH,IAAA,CAAKQ,IAAI,CAAC,IAAEL,CAAA;IAAA;IAAAvH,cAAA,GAAAC,CAAA;IACnD,OAAOiH,CAAA,GAAIQ,CAAA;EACb;EAAA;EAAA1H,cAAA,GAAAC,CAAA;EAEA,MAAM4H,cAAA,GAAkBC,MAAA;IAAA;IAAA9H,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACtB,OAAO,IAAI8H,IAAA,CAAKC,YAAY,CAAC,SAAS;MACpCC,KAAA,EAAO;MACPC,QAAA,EAAU;IACZ,GAAGC,MAAM,CAACL,MAAA;EACZ;EAAA;EAAA9H,cAAA,GAAAC,CAAA;EAEA,oBACE,IAAAmI,WAAA,CAAAC,IAAA,EAAC;IAAIC,SAAA,EAAU;4BAEb,IAAAF,WAAA,CAAAC,IAAA,EAACE,KAAA,CAAAC,IAAI;8BACH,IAAAJ,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAG,UAAU;kBACT,iBAAAN,WAAA,CAAAC,IAAA,EAACE,KAAA,CAAAI,SAAS;UAACL,SAAA,EAAU;kCACnB,IAAAF,WAAA,CAAAC,IAAA,EAAC;YAAIC,SAAA,EAAU;oCACb,IAAAF,WAAA,CAAAK,GAAA,EAACG,YAAA,CAAAC,UAAU;cAACP,SAAA,EAAU;6BACtB,IAAAF,WAAA,CAAAC,IAAA,EAAC;cAAKC,SAAA,EAAU;yBACbQ,cAAA,CAAeC,IAAI,EAAC,QAAKC,MAAA,CAAOhG,MAAM,EAAC;;2BAG5C,IAAAoF,WAAA,CAAAK,GAAA,EAAC;YAAIH,SAAA,EAAU;sBACZ,CAACjH,YAAA;YAAA;YAAA,cAAArB,cAAA,GAAA+B,CAAA,WACA,IAAAqG,WAAA,CAAAK,GAAA,EAACQ,OAAA,CAAAC,MAAM;cAACC,OAAA,EAASnE,eAAA;cAAiB+D,IAAA,EAAK;wBAAK;;;uDAI5C,IAAAX,WAAA,CAAAK,GAAA,EAACQ,OAAA,CAAAC,MAAM;cAACC,OAAA,EAASzD,cAAA;cAAgB0D,OAAA,EAAQ;cAAUL,IAAA,EAAK;wBAAK;;;;uBAOrE,IAAAX,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAc,WAAW;kBACV,iBAAAjB,WAAA,CAAAC,IAAA,EAAC;UAAIC,SAAA,EAAU;kCACb,IAAAF,WAAA,CAAAC,IAAA,EAAC;uBAAK,uBAAoB9H,KAAA,CAAM+I,MAAM,CAACrJ,CAAA,IAAK;cAAA;cAAAD,cAAA,GAAAU,CAAA;cAAAV,cAAA,GAAAC,CAAA;cAAA,OAAAA,CAAA,CAAEsD,MAAM,KAAK;YAAA,GAAWP,MAAM;2BAC1E,IAAAoF,WAAA,CAAAC,IAAA,EAAC;uBAAK,iBAAc9H,KAAA,CAAM+I,MAAM,CAACrJ,CAAA,IAAK;cAAA;cAAAD,cAAA,GAAAU,CAAA;cAAAV,cAAA,GAAAC,CAAA;cAAA,OAAAA,CAAA,CAAEsD,MAAM,KAAK;YAAA,GAAaP,MAAM;;;;qBAM5E,IAAAoF,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAC,IAAI;gBACH,iBAAAJ,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAc,WAAW;QAACf,SAAA,EAAU;kBACrB,iBAAAF,WAAA,CAAAC,IAAA,EAACkB,IAAA,CAAAC,SAAS;UACRzJ,iBAAA,EAAmBA,iBAAA;UACnB0J,MAAA;UAAQ;UAAA,CAAAzJ,cAAA,GAAA+B,CAAA,WAAApB,eAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+B,CAAA,WAAmB3B,aAAA;UAC3BsJ,IAAA,EAAM;UACNC,MAAA,EAASC,GAAA;YAAA;YAAA5J,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAC,CAAA;YACP0B,MAAA,CAAOkI,OAAO,GAAGD,GAAA;UACnB;;UAGC;UAAA,CAAA5J,cAAA,GAAA+B,CAAA,WAAAhB,UAAA;UAAA;UAAA,CAAAf,cAAA,GAAA+B,CAAA,wBACC,IAAAqG,WAAA,CAAAK,GAAA,EAACc,IAAA,CAAAO,kBAAkB;YACjB/I,UAAA,EAAYA,UAAA;YACZgJ,OAAA,EAAS;cACPC,eAAA,EAAiB;cACjBC,eAAA,EAAiB;gBACfC,WAAA,EAAa;gBACbC,YAAA,EAAc;cAChB;YACF;;UAKH;UAAA,CAAAnK,cAAA,GAAA+B,CAAA,WAAApB,eAAA;UAAA;UAAA,CAAAX,cAAA,GAAA+B,CAAA,WAAmBC,MAAA,CAAOC,MAAM;UAAA;UAAA,CAAAjC,cAAA,GAAA+B,CAAA,WAAIC,MAAA,CAAOC,MAAM,CAACC,IAAI;UAAA;UAAA,CAAAlC,cAAA,GAAA+B,CAAA,wBACrD,IAAAqG,WAAA,CAAAK,GAAA,EAACc,IAAA,CAAAa,MAAM;YACL7H,QAAA,EAAU5B,eAAA;YACV0J,IAAA,EAAM;cACJC,GAAA,EAAK;cACLC,UAAA,EAAY,IAAItI,MAAA,CAAOC,IAAI,CAACsI,IAAI,CAAC,IAAI;YACvC;YACAC,KAAA,EAAM;;UAKT;UAAA,CAAAzK,cAAA,GAAA+B,CAAA,WAAAC,MAAA,CAAOC,MAAM;UAAA;UAAA,CAAAjC,cAAA,GAAA+B,CAAA,WAAIC,MAAA,CAAOC,MAAM,CAACC,IAAI;UAAA;UAAA,CAAAlC,cAAA,GAAA+B,CAAA,WAAIxB,KAAA,CAAMqJ,GAAG,CAAEtG,IAAA,IACjD;YAAA;YAAAtD,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAC,CAAA;YAAA,OADiD,aACjD,IAAAmI,WAAA,CAAAK,GAAA,EAACc,IAAA,CAAAa,MAAM;cAEL7H,QAAA;cAAU;cAAA,CAAAvC,cAAA,GAAA+B,CAAA,WAAAuB,IAAA,CAAKE,WAAW;cAAA;cAAA,CAAAxD,cAAA,GAAA+B,CAAA,WAAI;gBAAE1B,GAAA,EAAK;gBAAGC,GAAA,EAAK;cAAE;cAC/C6I,OAAA,EAASA,CAAA,KAAM;gBAAA;gBAAAnJ,cAAA,GAAAU,CAAA;gBAAAV,cAAA,GAAAC,CAAA;gBAAA,OAAAmB,eAAA,CAAgBkC,IAAA;cAAA;cAC/B+G,IAAA,EAAM;gBACJC,GAAA,EAAKhH,IAAA,CAAKC,MAAM,KAAK;gBAAA;gBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAc;gBAAA;gBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC9BuB,IAAA,CAAKC,MAAM,KAAK;gBAAA;gBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAY;gBAAA;gBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAA2B;gBAC5DwI,UAAA,EAAY,IAAItI,MAAA,CAAOC,IAAI,CAACsI,IAAI,CAAC,IAAI;cACvC;cACAC,KAAA,EAAO,GAAGnH,IAAA,CAAKwD,WAAW,MAAMxD,IAAA,CAAKgC,OAAO;eARvChC,IAAA,CAAK+C,OAAO;UAAA;UAapB;UAAA,CAAArG,cAAA,GAAA+B,CAAA,WAAAZ,YAAA;UAAA;UAAA,CAAAnB,cAAA,GAAA+B,CAAA,WAAgBZ,YAAA,CAAaqC,WAAW;UAAA;UAAA,CAAAxD,cAAA,GAAA+B,CAAA,wBACvC,IAAAqG,WAAA,CAAAK,GAAA,EAACc,IAAA,CAAAmB,UAAU;YACTnI,QAAA,EAAUpB,YAAA,CAAaqC,WAAW;YAClCmH,YAAA,EAAcA,CAAA,KAAM;cAAA;cAAA3K,cAAA,GAAAU,CAAA;cAAAV,cAAA,GAAAC,CAAA;cAAA,OAAAmB,eAAA,CAAgB;YAAA;sBAEpC,iBAAAgH,WAAA,CAAAC,IAAA,EAAC;cAAIC,SAAA,EAAU;sCACb,IAAAF,WAAA,CAAAK,GAAA,EAAC;gBAAGH,SAAA,EAAU;0BAAiBnH,YAAA,CAAa2F;+BAC5C,IAAAsB,WAAA,CAAAK,GAAA,EAAC;gBAAEH,SAAA,EAAU;0BAAyBnH,YAAA,CAAamE;+BACnD,IAAA8C,WAAA,CAAAC,IAAA,EAAC;gBAAEC,SAAA,EAAU;2BAAU,WAAQT,cAAA,CAAe1G,YAAA,CAAayJ,KAAK;+BAChE,IAAAxC,WAAA,CAAAC,IAAA,EAAC;gBAAEC,SAAA,EAAU;2BAAU,WAAQnH,YAAA,CAAa0J,KAAK;;cAChD;cAAA,CAAA7K,cAAA,GAAA+B,CAAA,WAAAZ,YAAA,CAAaoC,MAAM,KAAK;cAAA;cAAA,CAAAvD,cAAA,GAAA+B,CAAA,wBACvB,IAAAqG,WAAA,CAAAC,IAAA,EAACY,OAAA,CAAAC,MAAM;gBACLH,IAAA,EAAK;gBACLT,SAAA,EAAU;gBACVa,OAAA,EAASA,CAAA,KAAM;kBAAA;kBAAAnJ,cAAA,GAAAU,CAAA;kBAAAV,cAAA,GAAAC,CAAA;kBAAA,OAAA4F,sBAAA,CAAuB1E,YAAA;gBAAA;wCAEtC,IAAAiH,WAAA,CAAAK,GAAA,EAACG,YAAA,CAAAkC,WAAW;kBAACxC,SAAA,EAAU;oBAAiB;;;;;;qBAYxD,IAAAF,WAAA,CAAAC,IAAA,EAACE,KAAA,CAAAC,IAAI;8BACH,IAAAJ,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAG,UAAU;kBACT,iBAAAN,WAAA,CAAAC,IAAA,EAACE,KAAA,CAAAI,SAAS;UAACL,SAAA,EAAU;kCACnB,IAAAF,WAAA,CAAAK,GAAA,EAACG,YAAA,CAAAC,UAAU;YAACP,SAAA,EAAU;cAAY;;uBAItC,IAAAF,WAAA,CAAAK,GAAA,EAACF,KAAA,CAAAc,WAAW;kBACV,iBAAAjB,WAAA,CAAAK,GAAA,EAAC;UAAIH,SAAA,EAAU;oBACZ/H,KAAA,CAAMqJ,GAAG,CAAC,CAACtG,IAAA,EAAMyH,KAAA,KAChB;YAAA;YAAA/K,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAC,CAAA;YAAA,OADgB,aAChB,IAAAmI,WAAA,CAAAK,GAAA,EAAC;cAECH,SAAA,EAAW,yBACThF,IAAA,CAAKC,MAAM,KAAK;cAAA;cAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAc;cAAA;cAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC9BuB,IAAA,CAAKC,MAAM,KAAK;cAAA;cAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAY;cAAA;cAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC5B,gCACA;wBAEF,iBAAAqG,WAAA,CAAAC,IAAA,EAAC;gBAAIC,SAAA,EAAU;wCACb,IAAAF,WAAA,CAAAC,IAAA,EAAC;kBAAIC,SAAA,EAAU;0CACb,IAAAF,WAAA,CAAAK,GAAA,EAAC;oBAAIH,SAAA,EAAW,6EACdhF,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAc;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC9BuB,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAY;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC5B,+BACA;8BACCuB,IAAA,CAAK6B;mCAER,IAAAiD,WAAA,CAAAC,IAAA,EAAC;4CACC,IAAAD,WAAA,CAAAK,GAAA,EAAC;sBAAEH,SAAA,EAAU;gCAAehF,IAAA,CAAKwD;qCACjC,IAAAsB,WAAA,CAAAK,GAAA,EAAC;sBAAEH,SAAA,EAAU;gCAAyBhF,IAAA,CAAKgC;qCAC3C,IAAA8C,WAAA,CAAAC,IAAA,EAAC;sBAAEC,SAAA,EAAU;iCACVT,cAAA,CAAevE,IAAA,CAAKsH,KAAK,GAAE,OAAItH,IAAA,CAAKuH,KAAK,EAAC;;;iCAIjD,IAAAzC,WAAA,CAAAC,IAAA,EAAC;kBAAIC,SAAA,EAAU;0CACb,IAAAF,WAAA,CAAAK,GAAA,EAACuC,MAAA,CAAAC,KAAK;oBAAC7B,OAAA,EACL9F,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAc;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC9BuB,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAY;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC5B;8BAECuB,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAc;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC9BuB,IAAA,CAAKC,MAAM,KAAK;oBAAA;oBAAA,CAAAvD,cAAA,GAAA+B,CAAA,WAAY;oBAAA;oBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAC5B;;kBAEF;kBAAA,CAAA/B,cAAA,GAAA+B,CAAA,WAAAuB,IAAA,CAAKC,MAAM,KAAK;kBAAA;kBAAA,CAAAvD,cAAA,GAAA+B,CAAA,wBACf,IAAAqG,WAAA,CAAAK,GAAA,EAACQ,OAAA,CAAAC,MAAM;oBACLH,IAAA,EAAK;oBACLK,OAAA,EAAQ;oBACRD,OAAA,EAASA,CAAA,KAAM;sBAAA;sBAAAnJ,cAAA,GAAAU,CAAA;sBAAAV,cAAA,GAAAC,CAAA;sBAAA,OAAA4F,sBAAA,CAAuBvC,IAAA;oBAAA;8BAEtC,iBAAA8E,WAAA,CAAAK,GAAA,EAACG,YAAA,CAAAkC,WAAW;sBAACxC,SAAA,EAAU;;;;;eAxC1BhF,IAAA,CAAK+C,OAAO;UAAA;;;;;AAoDjC","ignoreList":[]}