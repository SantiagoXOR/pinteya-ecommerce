{"version":3,"names":["cov_19xv1lwg91","actualCoverage","s","DELETE","f","GET","OPTIONS","POST","PUT","runtime","request","searchParams","URL","url","testId","get","action","b","results","_seooptimizationtools","enhancedSEOOptimizationTools","analyzeABTestResults","_server","NextResponse","json","success","data","stats","getUsageStats","message","activeTests","activeABTests","endpoints","error","_logger","logger","LogLevel","ERROR","LogCategory","SEO","details","Error","status","body","name","variants","Array","isArray","example","metadata","title","description","variant","createABTest","info","INFO","variantsCount","length","createdAt","Date","toISOString","variantId","metrics","impressions","clicks","conversions","revenue","updateABTestMetrics","updatedMetrics","timestamp","headers"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\seo\\ab-testing\\route.ts"],"sourcesContent":["// Configuración para Node.js Runtime\r\nexport const runtime = 'nodejs';\r\n\r\n// ===================================\r\n// PINTEYA E-COMMERCE - A/B TESTING API\r\n// API específica para gestión de A/B tests de metadata SEO\r\n// ===================================\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { enhancedSEOOptimizationTools } from '@/lib/seo/seo-optimization-tools';\r\nimport { logger, LogCategory, LogLevel } from '@/lib/enterprise/logger';\r\n\r\n// ===================================\r\n// GET - Obtener información de A/B tests\r\n// ===================================\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const testId = searchParams.get('testId');\r\n    const action = searchParams.get('action');\r\n\r\n    if (testId && action === 'analyze') {\r\n      // Analizar resultados de un test específico\r\n      const results = await enhancedSEOOptimizationTools.analyzeABTestResults(testId);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: results\r\n      });\r\n    }\r\n\r\n    if (testId) {\r\n      // Obtener información de un test específico\r\n      const stats = enhancedSEOOptimizationTools.getUsageStats();\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          testId,\r\n          message: 'Use POST with action=analyze_ab_test to get detailed results',\r\n          activeTests: stats.activeABTests\r\n        }\r\n      });\r\n    }\r\n\r\n    // Obtener estadísticas generales de A/B testing\r\n    const stats = enhancedSEOOptimizationTools.getUsageStats();\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        activeTests: stats.activeABTests,\r\n        endpoints: {\r\n          'GET ?testId=xxx': 'Get test info',\r\n          'GET ?testId=xxx&action=analyze': 'Analyze test results',\r\n          'POST': 'Create new A/B test',\r\n          'PUT': 'Update test metrics',\r\n          'DELETE ?testId=xxx': 'Stop/cancel test'\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API GET error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// POST - Crear nuevo A/B test\r\n// ===================================\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, url, variants } = body;\r\n\r\n    // Validar parámetros requeridos\r\n    if (!name || !url || !variants || !Array.isArray(variants)) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'name, url, and variants array are required',\r\n        example: {\r\n          name: 'Product Page Title Test',\r\n          url: '/products/pintura-interior',\r\n          variants: [\r\n            {\r\n              name: 'Control',\r\n              metadata: {\r\n                title: 'Pintura Interior - Pinteya',\r\n                description: 'Compra pintura interior de calidad'\r\n              }\r\n            },\r\n            {\r\n              name: 'Variant A',\r\n              metadata: {\r\n                title: 'Pintura Interior Premium - Colores Vibrantes | Pinteya',\r\n                description: 'Descubre nuestra pintura interior premium con colores vibrantes y acabado duradero. ¡Envío gratis!'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar que cada variante tenga la estructura correcta\r\n    for (const variant of variants) {\r\n      if (!variant.name || !variant.metadata) {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Each variant must have name and metadata properties'\r\n        }, { status: 400 });\r\n      }\r\n    }\r\n\r\n    // Crear el A/B test\r\n    const testId = await enhancedSEOOptimizationTools.createABTest({\r\n      name,\r\n      url,\r\n      variants\r\n    });\r\n\r\n    logger.info(LogLevel.INFO, 'A/B test created successfully', {\r\n      testId,\r\n      name,\r\n      url,\r\n      variantsCount: variants.length\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        testId,\r\n        message: 'A/B test created successfully',\r\n        name,\r\n        url,\r\n        variants: variants.length,\r\n        status: 'running',\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API POST error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to create A/B test',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// PUT - Actualizar métricas de A/B test\r\n// ===================================\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { testId, variantId, metrics } = body;\r\n\r\n    // Validar parámetros requeridos\r\n    if (!testId || !variantId || !metrics) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'testId, variantId, and metrics are required',\r\n        example: {\r\n          testId: 'ab_test_1234567890_abc123',\r\n          variantId: 'variant_0',\r\n          metrics: {\r\n            impressions: 100,\r\n            clicks: 5,\r\n            conversions: 1,\r\n            revenue: 25.99\r\n          }\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Validar que metrics sea un objeto\r\n    if (typeof metrics !== 'object') {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'metrics must be an object with impressions, clicks, conversions, and/or revenue'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Actualizar métricas\r\n    await enhancedSEOOptimizationTools.updateABTestMetrics(testId, variantId, metrics);\r\n\r\n    logger.info(LogLevel.INFO, 'A/B test metrics updated', {\r\n      testId,\r\n      variantId,\r\n      metrics\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'A/B test metrics updated successfully',\r\n        testId,\r\n        variantId,\r\n        updatedMetrics: metrics,\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API PUT error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to update A/B test metrics',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// DELETE - Detener/cancelar A/B test\r\n// ===================================\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const testId = searchParams.get('testId');\r\n\r\n    if (!testId) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'testId parameter is required'\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // En una implementación real, aquí se marcaría el test como cancelado\r\n    // Por ahora, solo registramos la acción\r\n    logger.info(LogLevel.INFO, 'A/B test cancellation requested', {\r\n      testId\r\n    }, LogCategory.SEO);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        message: 'A/B test cancellation requested',\r\n        testId,\r\n        status: 'cancelled',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(LogLevel.ERROR, 'A/B testing API DELETE error', error as Error, LogCategory.SEO);\r\n    \r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to cancel A/B test',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ===================================\r\n// OPCIONES CORS\r\n// ===================================\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]}