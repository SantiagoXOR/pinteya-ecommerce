{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\cache-manager.test.ts"],"sourcesContent":["// ===================================\n// PINTEYA E-COMMERCE - CACHE MANAGER TESTS\n// ===================================\n\nimport { CacheManager, cacheManager, CACHE_CONFIGS, CacheUtils } from '@/lib/cache-manager'\n\n// Mock Redis\njest.mock('@/lib/redis', () => ({\n  redisCache: {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n  },\n}))\n\n// Mock logger\njest.mock('@/lib/enterprise/logger', () => ({\n  logger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n  LogLevel: {\n    DEBUG: 'debug',\n    INFO: 'info',\n    WARN: 'warn',\n    ERROR: 'error',\n  },\n  LogCategory: {\n    CACHE: 'cache',\n    SYSTEM: 'system',\n  },\n}))\n\ndescribe('CacheManager', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = CacheManager.getInstance()\n      const instance2 = CacheManager.getInstance()\n\n      expect(instance1).toBe(instance2)\n      expect(instance1).toBe(cacheManager)\n    })\n  })\n\n  describe('get', () => {\n    it('should return cached value when available', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const testData = { id: 1, name: 'Test' }\n\n      redisCache.get.mockResolvedValue(JSON.stringify(testData))\n\n      const result = await cacheManager.get('test-key', CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toEqual(testData)\n      expect(redisCache.get).toHaveBeenCalledWith('cache:product:test-key')\n    })\n\n    it('should return null when cache miss', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      redisCache.get.mockResolvedValue(null)\n\n      const result = await cacheManager.get('missing-key', CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toBeNull()\n    })\n\n    it('should handle errors gracefully', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const { logger } = require('@/lib/enterprise/logger')\n\n      redisCache.get.mockRejectedValue(new Error('Redis error'))\n\n      const result = await cacheManager.get('error-key', CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toBeNull()\n      expect(logger.error).toHaveBeenCalled()\n    })\n  })\n\n  describe('set', () => {\n    it('should store value in cache', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const testData = { id: 1, name: 'Test' }\n\n      redisCache.set.mockResolvedValue(true)\n\n      const result = await cacheManager.set('test-key', testData, CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toBe(true)\n      expect(redisCache.set).toHaveBeenCalledWith(\n        'cache:product:test-key',\n        JSON.stringify(testData),\n        CACHE_CONFIGS.PRODUCT_DATA.ttl\n      )\n    })\n\n    it('should handle serialization errors', async () => {\n      const { logger } = require('@/lib/enterprise/logger')\n\n      // Crear objeto circular que no se puede serializar\n      const circularObj: any = { name: 'test' }\n      circularObj.self = circularObj\n\n      await expect(\n        cacheManager.set('circular-key', circularObj, CACHE_CONFIGS.PRODUCT_DATA)\n      ).resolves.toBe(false)\n\n      expect(logger.error).toHaveBeenCalled()\n    })\n  })\n\n  describe('delete', () => {\n    it('should delete value from cache', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      redisCache.del.mockResolvedValue(true)\n\n      const result = await cacheManager.delete('test-key', CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toBe(true)\n      expect(redisCache.del).toHaveBeenCalledWith('cache:product:test-key')\n    })\n  })\n\n  describe('getOrSet', () => {\n    it('should return cached value if available', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const cachedData = { id: 1, name: 'Cached' }\n      const fetcherFn = jest.fn().mockResolvedValue({ id: 1, name: 'Fresh' })\n\n      redisCache.get.mockResolvedValue(JSON.stringify(cachedData))\n\n      const result = await cacheManager.getOrSet('test-key', fetcherFn, CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toEqual(cachedData)\n      expect(fetcherFn).not.toHaveBeenCalled()\n    })\n\n    it('should fetch and cache value if not in cache', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const freshData = { id: 1, name: 'Fresh' }\n      const fetcherFn = jest.fn().mockResolvedValue(freshData)\n\n      redisCache.get.mockResolvedValue(null)\n      redisCache.set.mockResolvedValue(true)\n\n      const result = await cacheManager.getOrSet('test-key', fetcherFn, CACHE_CONFIGS.PRODUCT_DATA)\n\n      expect(result).toEqual(freshData)\n      expect(fetcherFn).toHaveBeenCalled()\n    })\n\n    it('should propagate fetcher errors', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const fetcherError = new Error('Fetcher failed')\n      const fetcherFn = jest.fn().mockRejectedValue(fetcherError)\n\n      redisCache.get.mockResolvedValue(null)\n\n      await expect(\n        cacheManager.getOrSet('test-key', fetcherFn, CACHE_CONFIGS.PRODUCT_DATA)\n      ).rejects.toThrow('Fetcher failed')\n    })\n  })\n\n  describe('Cache Configurations', () => {\n    it('should have MercadoPago response config', () => {\n      const config = CACHE_CONFIGS.MERCADOPAGO_RESPONSE\n\n      expect(config.ttl).toBe(300)\n      expect(config.prefix).toBe('mp_response')\n      expect(config.compress).toBe(true)\n      expect(config.serialize).toBe(true)\n    })\n\n    it('should have payment info config', () => {\n      const config = CACHE_CONFIGS.PAYMENT_INFO\n\n      expect(config.ttl).toBe(1800)\n      expect(config.prefix).toBe('payment_info')\n      expect(config.serialize).toBe(true)\n    })\n\n    it('should have product data config', () => {\n      const config = CACHE_CONFIGS.PRODUCT_DATA\n\n      expect(config.ttl).toBe(900)\n      expect(config.prefix).toBe('product')\n      expect(config.compress).toBe(true)\n      expect(config.serialize).toBe(true)\n    })\n  })\n\n  describe('Compression', () => {\n    it('should compress large data when enabled', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const largeData = 'x'.repeat(2000) // String > 1000 chars\n\n      redisCache.set.mockResolvedValue(true)\n\n      await cacheManager.set('large-key', largeData, {\n        ...CACHE_CONFIGS.PRODUCT_DATA,\n        compress: true,\n      })\n\n      const setCall = redisCache.set.mock.calls[0]\n      expect(setCall[1]).toContain('COMPRESSED:')\n    })\n\n    it('should decompress data when retrieving', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const originalData = 'test data'\n      const compressedData = `COMPRESSED:\"${originalData}\"`\n\n      redisCache.get.mockResolvedValue(compressedData)\n\n      const result = await cacheManager.get('compressed-key', {\n        ...CACHE_CONFIGS.PRODUCT_DATA,\n        compress: true,\n      })\n\n      expect(result).toBe(originalData)\n    })\n  })\n})\n\ndescribe('CacheUtils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('cacheMercadoPagoResponse', () => {\n    it('should cache MercadoPago response', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const responseData = { id: 'mp123', status: 'approved' }\n      const fetcherFn = jest.fn().mockResolvedValue(responseData)\n\n      redisCache.get.mockResolvedValue(null)\n      redisCache.set.mockResolvedValue(true)\n\n      const result = await CacheUtils.cacheMercadoPagoResponse('test-key', fetcherFn)\n\n      expect(result).toEqual(responseData)\n      expect(fetcherFn).toHaveBeenCalled()\n    })\n  })\n\n  describe('cachePaymentInfo', () => {\n    it('should cache payment info with payment ID', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const paymentData = { id: '123', amount: 100 }\n      const fetcherFn = jest.fn().mockResolvedValue(paymentData)\n\n      redisCache.get.mockResolvedValue(null)\n      redisCache.set.mockResolvedValue(true)\n\n      const result = await CacheUtils.cachePaymentInfo('123', fetcherFn)\n\n      expect(result).toEqual(paymentData)\n      expect(redisCache.get).toHaveBeenCalledWith('cache:payment_info:payment:123')\n    })\n  })\n\n  describe('cacheProductData', () => {\n    it('should cache product data with product ID', async () => {\n      const { redisCache } = require('@/lib/redis')\n      const productData = { id: '456', name: 'Test Product' }\n      const fetcherFn = jest.fn().mockResolvedValue(productData)\n\n      redisCache.get.mockResolvedValue(null)\n      redisCache.set.mockResolvedValue(true)\n\n      const result = await CacheUtils.cacheProductData('456', fetcherFn)\n\n      expect(result).toEqual(productData)\n      expect(redisCache.get).toHaveBeenCalledWith('cache:product:product:456')\n    })\n  })\n\n  describe('invalidatePayment', () => {\n    it('should invalidate payment cache', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      redisCache.del.mockResolvedValue(true)\n\n      const result = await CacheUtils.invalidatePayment('123')\n\n      expect(result).toBe(true)\n      expect(redisCache.del).toHaveBeenCalledWith('cache:payment_info:payment:123')\n    })\n  })\n\n  describe('invalidateProduct', () => {\n    it('should invalidate product cache', async () => {\n      const { redisCache } = require('@/lib/redis')\n\n      redisCache.del.mockResolvedValue(true)\n\n      const result = await CacheUtils.invalidateProduct('456')\n\n      expect(result).toBe(true)\n      expect(redisCache.del).toHaveBeenCalledWith('cache:product:product:456')\n    })\n  })\n})\n"],"names":["jest","mock","redisCache","get","fn","set","del","logger","debug","info","warn","error","LogLevel","DEBUG","INFO","WARN","ERROR","LogCategory","CACHE","SYSTEM","describe","beforeEach","clearAllMocks","it","instance1","CacheManager","getInstance","instance2","expect","toBe","cacheManager","require","testData","id","name","mockResolvedValue","JSON","stringify","result","CACHE_CONFIGS","PRODUCT_DATA","toEqual","toHaveBeenCalledWith","toBeNull","mockRejectedValue","Error","toHaveBeenCalled","ttl","circularObj","self","resolves","delete","cachedData","fetcherFn","getOrSet","not","freshData","fetcherError","rejects","toThrow","config","MERCADOPAGO_RESPONSE","prefix","compress","serialize","PAYMENT_INFO","largeData","repeat","setCall","calls","toContain","originalData","compressedData","responseData","status","CacheUtils","cacheMercadoPagoResponse","paymentData","amount","cachePaymentInfo","productData","cacheProductData","invalidatePayment","invalidateProduct"],"mappings":"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"}