{"version":3,"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\__tests__\\lib\\logger.test.ts"],"sourcesContent":["// ===================================\r\n// PINTEYA E-COMMERCE - LOGGER TESTS\r\n// ===================================\r\n\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n// Mock console methods\r\nconst originalConsole = { ...console };\r\nbeforeEach(() => {\r\n  console.info = jest.fn();\r\n  console.warn = jest.fn();\r\n  console.error = jest.fn();\r\n  console.debug = jest.fn();\r\n});\r\n\r\nafterEach(() => {\r\n  Object.assign(console, originalConsole);\r\n});\r\n\r\ndescribe('StructuredLogger', () => {\r\n  it('should log payment events correctly', () => {\r\n    logger.payment(LogLevel.INFO, 'Test payment', {\r\n      orderId: '123',\r\n      paymentId: 'mp_123',\r\n      amount: 100,\r\n      currency: 'ARS',\r\n      status: 'approved',\r\n      method: 'mercadopago',\r\n    });\r\n\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"category\":\"payment\"')\r\n    );\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"message\":\"Test payment\"')\r\n    );\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"orderId\":\"123\"')\r\n    );\r\n  });\r\n\r\n  it('should log webhook events correctly', () => {\r\n    logger.webhook(LogLevel.INFO, 'Test webhook', {\r\n      type: 'payment',\r\n      action: 'created',\r\n      dataId: 'mp_123',\r\n      isValid: true,\r\n      processingTime: 150,\r\n    });\r\n\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"category\":\"webhook\"')\r\n    );\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"type\":\"payment\"')\r\n    );\r\n  });\r\n\r\n  it('should log security events correctly', () => {\r\n    logger.security(LogLevel.WARN, 'Test security', {\r\n      threat: 'rate_limit',\r\n      blocked: true,\r\n      reason: 'Too many requests',\r\n    });\r\n\r\n    expect(console.warn).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"category\":\"security\"')\r\n    );\r\n    expect(console.warn).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"threat\":\"rate_limit\"')\r\n    );\r\n  });\r\n\r\n  it('should log performance events correctly', () => {\r\n    logger.performance(LogLevel.INFO, 'Test performance', {\r\n      operation: 'test-operation',\r\n      duration: 250,\r\n      endpoint: '/api/test',\r\n      statusCode: 200,\r\n    });\r\n\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"category\":\"performance\"')\r\n    );\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"duration\":250')\r\n    );\r\n  });\r\n\r\n  it('should log errors correctly', () => {\r\n    const testError = new Error('Test error');\r\n    logger.error(LogCategory.API, 'Test error message', testError);\r\n\r\n    expect(console.error).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"category\":\"api\"')\r\n    );\r\n    expect(console.error).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"message\":\"Test error message\"')\r\n    );\r\n    expect(console.error).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"name\":\"Error\"')\r\n    );\r\n  });\r\n\r\n  it('should measure performance correctly', async () => {\r\n    const testFunction = jest.fn().mockResolvedValue('test result');\r\n    \r\n    const result = await logger.measurePerformance('test-operation', testFunction);\r\n    \r\n    expect(result).toBe('test result');\r\n    expect(testFunction).toHaveBeenCalled();\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"operation\":\"test-operation\"')\r\n    );\r\n  });\r\n\r\n  it('should handle sync functions in measurePerformance', () => {\r\n    const testFunction = jest.fn().mockReturnValue('sync result');\r\n    \r\n    const result = logger.measurePerformance('sync-operation', testFunction);\r\n    \r\n    expect(result).toBe('sync result');\r\n    expect(testFunction).toHaveBeenCalled();\r\n    expect(console.info).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"operation\":\"sync-operation\"')\r\n    );\r\n  });\r\n\r\n  it('should handle errors in measurePerformance', async () => {\r\n    const testError = new Error('Test error');\r\n    const testFunction = jest.fn().mockRejectedValue(testError);\r\n    \r\n    await expect(\r\n      logger.measurePerformance('error-operation', testFunction)\r\n    ).rejects.toThrow('Test error');\r\n    \r\n    expect(console.error).toHaveBeenCalledWith(\r\n      expect.stringContaining('\"operation\":\"error-operation\"')\r\n    );\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["originalConsole","console","beforeEach","info","jest","fn","warn","error","debug","afterEach","Object","assign","describe","it","logger","payment","LogLevel","INFO","orderId","paymentId","amount","currency","status","method","expect","toHaveBeenCalledWith","stringContaining","webhook","type","action","dataId","isValid","processingTime","security","WARN","threat","blocked","reason","performance","operation","duration","endpoint","statusCode","testError","Error","LogCategory","API","testFunction","mockResolvedValue","result","measurePerformance","toBe","toHaveBeenCalled","mockReturnValue","mockRejectedValue","rejects","toThrow"],"mappings":"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"}