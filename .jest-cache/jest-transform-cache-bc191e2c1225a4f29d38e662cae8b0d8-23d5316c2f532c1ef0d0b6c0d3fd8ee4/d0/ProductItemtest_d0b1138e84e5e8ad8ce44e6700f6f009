a9462285f1d654568050418065437344
// ===================================
// PINTEYA E-COMMERCE - TESTS PARA PRODUCTITEM COMPONENT
// ===================================
"use strict";
// Mock del contexto de modal - Eliminado ya que QuickViewModalContext fue removido
// const mockOpenModal = jest.fn();
// jest.mock('@/app/context/QuickViewModalContext', () => ({
//   useModalContext: () => ({
//     openModal: mockOpenModal,
//   }),
// }));
// Mock de Next.js Link
jest.mock('next/link', ()=>{
    return ({ children, href })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            children: children
        });
});
// Mock de Next.js Image
jest.mock('next/image', ()=>{
    return ({ src, alt, width, height })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            width: width,
            height: height
        });
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactredux = require("react-redux");
const _toolkit = require("@reduxjs/toolkit");
const _ProductItem = /*#__PURE__*/ _interop_require_default(require("../../components/Common/ProductItem"));
const _cartslice = /*#__PURE__*/ _interop_require_default(require("../../redux/features/cart-slice"));
const _wishlistslice = /*#__PURE__*/ _interop_require_default(require("../../redux/features/wishlist-slice"));
const _quickViewslice = /*#__PURE__*/ _interop_require_default(require("../../redux/features/quickView-slice"));
const _productdetails = /*#__PURE__*/ _interop_require_default(require("../../redux/features/product-details"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Producto de prueba
const mockProduct = {
    id: 1,
    title: 'Pintura Latex Interior Blanco 4L',
    reviews: 25,
    price: 18000,
    discountedPrice: 15000,
    imgs: {
        thumbnails: [
            '/images/products/pintura-latex-blanco-sm.jpg'
        ],
        previews: [
            '/images/products/pintura-latex-blanco.jpg'
        ]
    }
};
// Función helper para renderizar con Redux store
const renderWithStore = (component, initialState = {})=>{
    const store = (0, _toolkit.configureStore)({
        reducer: {
            cartReducer: _cartslice.default,
            wishlistReducer: _wishlistslice.default,
            quickViewReducer: _quickViewslice.default,
            productDetailsReducer: _productdetails.default
        },
        preloadedState: initialState
    });
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
        store: store,
        children: component
    }));
};
describe('ProductItem Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should render product information correctly', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        expect(_react1.screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();
        expect(_react1.screen.getByText((content, element)=>{
            return element?.textContent === '$ 15.000' || content.includes('15.000');
        })).toBeInTheDocument();
        expect(_react1.screen.getByText((content, element)=>{
            return element?.textContent === '$ 18.000' || content.includes('18.000');
        })).toBeInTheDocument();
        // Buscar la imagen principal del producto
        const productImage = _react1.screen.getByAltText('Pintura Latex Interior Blanco 4L');
        expect(productImage).toHaveAttribute('src', '/images/products/pintura-latex-blanco.jpg');
    });
    it('should display product image', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        // Buscar la imagen principal del producto por su alt text
        const productImage = _react1.screen.getByAltText('Pintura Latex Interior Blanco 4L');
        expect(productImage).toBeInTheDocument();
        expect(productImage).toHaveAttribute('src', '/images/products/pintura-latex-blanco.jpg');
        expect(productImage).toHaveClass('object-contain', 'w-full', 'h-full');
    });
    it('should show discounted price and original price', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        // Precio con descuento (formateado con puntos)
        expect(_react1.screen.getByText((content, element)=>{
            return element?.textContent === '$ 15.000' || content.includes('15.000');
        })).toBeInTheDocument();
        // Precio original tachado (formateado con puntos)
        expect(_react1.screen.getByText((content, element)=>{
            return element?.textContent === '$ 18.000' || content.includes('18.000');
        })).toBeInTheDocument();
    });
    it('should handle add to cart action', async ()=>{
        const store = (0, _toolkit.configureStore)({
            reducer: {
                cartReducer: _cartslice.default,
                wishlistReducer: _wishlistslice.default,
                quickViewReducer: _quickViewslice.default,
                productDetailsReducer: _productdetails.default
            }
        });
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
                store: store,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                    item: mockProduct
                })
            }));
        });
        const addToCartButton = _react1.screen.getByText('Agregar al carrito');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(addToCartButton);
        });
        // Verificar que el producto se agregó al carrito
        const state = store.getState();
        expect(state.cartReducer.items).toHaveLength(1);
        expect(state.cartReducer.items[0].id).toBe(mockProduct.id);
        expect(state.cartReducer.items[0].quantity).toBe(1);
    });
    it('should handle add to wishlist action', async ()=>{
        const store = (0, _toolkit.configureStore)({
            reducer: {
                cartReducer: _cartslice.default,
                wishlistReducer: _wishlistslice.default,
                quickViewReducer: _quickViewslice.default,
                productDetailsReducer: _productdetails.default
            }
        });
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
                store: store,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                    item: mockProduct
                })
            }));
        });
        // El ProductCard unificado no tiene botón de wishlist visible
        // Solo verifica que el componente se renderiza correctamente
        expect(_react1.screen.getByTestId('commercial-product-card')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();
    });
    it('should handle quick view action', async ()=>{
        const store = (0, _toolkit.configureStore)({
            reducer: {
                cartReducer: _cartslice.default,
                wishlistReducer: _wishlistslice.default,
                quickViewReducer: _quickViewslice.default,
                productDetailsReducer: _productdetails.default
            }
        });
        await (0, _react1.act)(async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
                store: store,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                    item: mockProduct
                })
            }));
        });
        // El ProductCard unificado no tiene botón de quick view visible
        // Solo verifica que el componente se renderiza correctamente
        expect(_react1.screen.getByTestId('commercial-product-card')).toBeInTheDocument();
        expect(_react1.screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();
    });
    it('should handle product details navigation', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        const productTitle = _react1.screen.getByText('Pintura Latex Interior Blanco 4L');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(productTitle);
        });
        // El ProductCard unificado no tiene link directo, solo el botón de agregar al carrito
        const addToCartButton = _react1.screen.getByTestId('add-to-cart-btn');
        expect(addToCartButton).toBeInTheDocument();
    });
    it('should show hover effects on buttons', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        const addToCartButton = _react1.screen.getByTestId('add-to-cart-btn');
        expect(addToCartButton).toHaveClass('bg-yellow-400');
        // El ProductCard unificado no tiene botón de wishlist visible
        expect(addToCartButton).toBeInTheDocument();
    });
    it('should handle product without discount', async ()=>{
        const productWithoutDiscount = {
            ...mockProduct,
            discountedPrice: mockProduct.price
        };
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: productWithoutDiscount
            }));
        });
        // Solo debería mostrar un precio (sin descuento)
        expect(_react1.screen.getByText((content, element)=>{
            return element?.textContent === '$ 18.000' || content.includes('18.000');
        })).toBeInTheDocument();
        // No debería haber precio tachado
        expect(_react1.screen.queryByText('line-through')).not.toBeInTheDocument();
    });
    it('should handle missing images gracefully', async ()=>{
        const productWithoutImages = {
            ...mockProduct,
            imgs: {
                thumbnails: [],
                previews: []
            }
        };
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: productWithoutImages
            }));
        });
        // El componente debería renderizar sin errores
        expect(_react1.screen.getByText('Pintura Latex Interior Blanco 4L')).toBeInTheDocument();
    });
    it('should have proper accessibility attributes', async ()=>{
        await (0, _react1.act)(async ()=>{
            renderWithStore(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ProductItem.default, {
                item: mockProduct
            }));
        });
        // El ProductCard unificado tiene diferentes atributos de accesibilidad
        const addToCartButton = _react1.screen.getByTestId('add-to-cart-btn');
        expect(addToCartButton).toBeInTheDocument();
        const productCard = _react1.screen.getByTestId('commercial-product-card');
        expect(productCard).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,