0f2167a4441b0cb8d2970e4d9632c1c9
"use strict";
// Mock para Radix UI
jest.mock('@radix-ui/react-checkbox', ()=>({
        ...jest.requireActual('@radix-ui/react-checkbox'),
        Root: ({ children, onCheckedChange, checked, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "checkbox",
                        checked: checked,
                        onChange: (e)=>onCheckedChange?.(e.target.checked),
                        ...props
                    }),
                    children
                ]
            }),
        Indicator: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                children: children
            })
    }));
jest.mock('@radix-ui/react-radio-group', ()=>({
        ...jest.requireActual('@radix-ui/react-radio-group'),
        Root: ({ children, onValueChange, value, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                role: "radiogroup",
                ...props,
                children: children
            }),
        Item: ({ children, value, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "radio",
                        value: value,
                        ...props
                    }),
                    children
                ]
            }),
        Indicator: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _checkbox = require("../../../components/ui/checkbox");
const _radiogroup = require("../../../components/ui/radio-group");
const _textarea = require("../../../components/ui/textarea");
const _form = require("../../../components/ui/form");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Form Components', ()=>{
    describe('Checkbox', ()=>{
        it('renders with label and description', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                label: "Accept terms",
                description: "Please read our terms and conditions"
            }));
            expect(_react.screen.getByText('Accept terms')).toBeInTheDocument();
            expect(_react.screen.getByText('Please read our terms and conditions')).toBeInTheDocument();
        });
        it('shows required indicator', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                label: "Required field",
                required: true
            }));
            expect(_react.screen.getByText('*')).toBeInTheDocument();
        });
        it('displays error message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                label: "Field",
                error: "This field is required"
            }));
            expect(_react.screen.getByText('This field is required')).toBeInTheDocument();
        });
        it('calls onCheckedChange when clicked', async ()=>{
            const user = _userevent.default.setup();
            const onCheckedChange = jest.fn();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                label: "Test checkbox",
                onCheckedChange: onCheckedChange
            }));
            const checkbox = _react.screen.getByRole('checkbox');
            await user.click(checkbox);
            expect(onCheckedChange).toHaveBeenCalledWith(true);
        });
    });
    describe('CheckboxGroup', ()=>{
        it('renders group with label and description', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_checkbox.CheckboxGroup, {
                label: "Preferences",
                description: "Select your preferences",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                        label: "Option 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                        label: "Option 2"
                    })
                ]
            }));
            expect(_react.screen.getByText('Preferences')).toBeInTheDocument();
            expect(_react.screen.getByText('Select your preferences')).toBeInTheDocument();
            expect(_react.screen.getByText('Option 1')).toBeInTheDocument();
            expect(_react.screen.getByText('Option 2')).toBeInTheDocument();
        });
        it('displays error message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.CheckboxGroup, {
                error: "Please select at least one option",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                    label: "Option 1"
                })
            }));
            expect(_react.screen.getByText('Please select at least one option')).toBeInTheDocument();
        });
    });
    describe('RadioGroup', ()=>{
        it('renders with label and items', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_radiogroup.RadioGroup, {
                label: "Choose option",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroupItem, {
                        value: "option1",
                        label: "Option 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroupItem, {
                        value: "option2",
                        label: "Option 2"
                    })
                ]
            }));
            expect(_react.screen.getByText('Choose option')).toBeInTheDocument();
            expect(_react.screen.getByText('Option 1')).toBeInTheDocument();
            expect(_react.screen.getByText('Option 2')).toBeInTheDocument();
        });
        it('shows required indicator', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroup, {
                label: "Required choice",
                required: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroupItem, {
                    value: "option1",
                    label: "Option 1"
                })
            }));
            expect(_react.screen.getByText('*')).toBeInTheDocument();
        });
    });
    describe('Textarea', ()=>{
        it('renders with label and placeholder', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                label: "Message",
                placeholder: "Enter your message"
            }));
            expect(_react.screen.getByText('Message')).toBeInTheDocument();
            expect(_react.screen.getByPlaceholderText('Enter your message')).toBeInTheDocument();
        });
        it('shows character count when enabled', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                showCharCount: true,
                maxLength: 100,
                defaultValue: "Hello"
            }));
            // El componente muestra el contador de caracteres
            expect(_react.screen.getByText(/\/100/)).toBeInTheDocument();
        });
        it('displays error message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                label: "Message",
                error: "Message is required"
            }));
            expect(_react.screen.getByText('Message is required')).toBeInTheDocument();
        });
        it('enforces max length', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                maxLength: 5
            }));
            const textarea = _react.screen.getByRole('textbox');
            await user.type(textarea, 'This is a long message');
            expect(textarea).toHaveValue('This ');
        });
    });
    describe('Form Structure', ()=>{
        it('renders form with sections and rows', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_form.Form, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_form.FormSection, {
                    title: "Personal Info",
                    description: "Your details",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_form.FormRow, {
                        columns: 2,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: "Field 1"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: "Field 2"
                            })
                        ]
                    })
                })
            }));
            expect(_react.screen.getByText('Personal Info')).toBeInTheDocument();
            expect(_react.screen.getByText('Your details')).toBeInTheDocument();
            expect(_react.screen.getByText('Field 1')).toBeInTheDocument();
            expect(_react.screen.getByText('Field 2')).toBeInTheDocument();
        });
    });
    describe('useForm hook', ()=>{
        function TestForm() {
            const { values, errors, handleSubmit, register } = (0, _form.useForm)({
                defaultValues: {
                    name: '',
                    email: ''
                },
                validate: (data)=>{
                    const errors = {};
                    if (!data.name) {
                        errors.name = 'Name required';
                    }
                    if (!data.email) {
                        errors.email = 'Email required';
                    }
                    return Object.keys(errors).length > 0 ? errors : null;
                },
                onSubmit: (data)=>{
                    console.log('Submitted:', data);
                }
            });
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                onSubmit: handleSubmit,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        placeholder: "Name",
                        ...register('name')
                    }),
                    errors.name && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: errors.name
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        placeholder: "Email",
                        ...register('email')
                    }),
                    errors.email && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: errors.email
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        type: "submit",
                        children: "Submit"
                    })
                ]
            });
        }
        it('handles form validation', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {}));
            const submitButton = _react.screen.getByRole('button', {
                name: /submit/i
            });
            await user.click(submitButton);
            expect(_react.screen.getByText('Name required')).toBeInTheDocument();
            expect(_react.screen.getByText('Email required')).toBeInTheDocument();
        });
        it('clears errors when user types', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {}));
            // Submit to show errors
            const submitButton = _react.screen.getByRole('button', {
                name: /submit/i
            });
            await user.click(submitButton);
            expect(_react.screen.getByText('Name required')).toBeInTheDocument();
            // Type in name field
            const nameInput = _react.screen.getByPlaceholderText('Name');
            await user.type(nameInput, 'John');
            expect(_react.screen.queryByText('Name required')).not.toBeInTheDocument();
        });
        it('updates values when user types', async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {}));
            const nameInput = _react.screen.getByPlaceholderText('Name');
            await user.type(nameInput, 'John Doe');
            expect(nameInput).toHaveValue('John Doe');
        });
    });
    describe('Accessibility', ()=>{
        it('checkbox has proper labels', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                label: "Accept terms",
                id: "terms"
            }));
            const checkbox = _react.screen.getByRole('checkbox');
            const label = _react.screen.getByText('Accept terms');
            expect(checkbox).toHaveAttribute('id', 'terms');
            expect(label).toHaveAttribute('for', 'terms');
        });
        it('radio group has proper structure', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_radiogroup.RadioGroup, {
                label: "Choose option",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroupItem, {
                        value: "option1",
                        label: "Option 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_radiogroup.RadioGroupItem, {
                        value: "option2",
                        label: "Option 2"
                    })
                ]
            }));
            expect(_react.screen.getByRole('radiogroup')).toBeInTheDocument();
        });
        it('textarea has proper labeling', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                label: "Message",
                id: "message"
            }));
            const textarea = _react.screen.getByRole('textbox');
            const label = _react.screen.getByText('Message');
            expect(textarea).toHaveAttribute('id', 'message');
            expect(label).toHaveAttribute('for', 'message');
        });
        it('form fields support required attribute', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                        label: "Required checkbox",
                        required: true
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                        label: "Required textarea",
                        required: true
                    })
                ]
            }));
            expect(_react.screen.getAllByText('*')).toHaveLength(2);
        });
    });
    describe('Error States', ()=>{
        it('shows error styling for invalid fields', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_checkbox.Checkbox, {
                        label: "Field",
                        error: "Error message"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                        label: "Field",
                        error: "Error message"
                    })
                ]
            }));
            expect(_react.screen.getAllByText('Error message')).toHaveLength(2);
        });
        it('applies error variant to components', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                variant: "error"
            }));
            const textarea = _react.screen.getByRole('textbox');
            expect(textarea).toHaveClass('border-red-500');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,