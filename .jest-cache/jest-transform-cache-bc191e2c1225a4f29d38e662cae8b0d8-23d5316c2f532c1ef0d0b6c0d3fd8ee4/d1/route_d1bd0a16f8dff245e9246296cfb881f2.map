{"version":3,"names":["cov_1ckvpbnaai","actualCoverage","s","POST","request","params","f","orderId","id","body","json","payment_method","b","notes","session","_auth","auth","user","_server","NextResponse","success","error","status","_logger","logger","log","LogLevel","INFO","LogCategory","API","userId","supabase","_server1","createAdminClient","data","order","orderError","from","select","eq","single","WARN","payment_status","updateData","updated_at","Date","toISOString","updateError","update","ERROR","DATABASE","insert","order_id","previous_status","new_status","changed_by","reason","metadata","JSON","stringify","manual_confirmation","historyError","previousStatus","newStatus","message"],"sources":["C:\\Users\\marti\\Desktop\\DESARROLLOSW\\BOILERPLATTE E-COMMERCE\\src\\app\\api\\admin\\orders\\[id]\\mark-paid\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { auth } from '@/auth';\r\nimport { createAdminClient } from '@/lib/integrations/supabase/server';\r\nimport { logger, LogLevel, LogCategory } from '@/lib/enterprise/logger';\r\n\r\n/**\r\n * POST /api/admin/orders/[id]/mark-paid\r\n * Marca una orden como pagada manualmente\r\n */\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n): Promise<NextResponse> {\r\n  try {\r\n    const orderId = params.id;\r\n    const body = await request.json();\r\n    const { payment_method = 'manual', notes = '' } = body;\r\n\r\n    // Verificar autenticación\r\n    const session = await auth();\r\n    if (!session?.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No autorizado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Marking order as paid manually', { \r\n      orderId,\r\n      userId: session.user.id,\r\n      payment_method\r\n    });\r\n\r\n    // Obtener datos actuales de la orden\r\n    const supabase = createAdminClient();\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .select('id, status, payment_status, total')\r\n      .eq('id', orderId)\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      logger.log(LogLevel.WARN, LogCategory.API, 'Order not found', { orderId, orderError });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Orden no encontrada' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Verificar que la orden esté pendiente de pago\r\n    if (order.payment_status === 'paid') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'La orden ya está marcada como pagada' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Actualizar estado de pago y orden\r\n    const updateData = {\r\n      payment_status: 'paid',\r\n      status: order.status === 'pending' ? 'confirmed' : order.status,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const { error: updateError } = await supabase\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId);\r\n\r\n    if (updateError) {\r\n      logger.log(LogLevel.ERROR, LogCategory.DATABASE, 'Error updating order payment status', { \r\n        orderId,\r\n        updateError \r\n      });\r\n      return NextResponse.json(\r\n        { success: false, error: 'Error al actualizar estado de pago' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Registrar en historial de estados si cambió el status\r\n    if (order.status === 'pending' && updateData.status === 'confirmed') {\r\n      try {\r\n        await supabase\r\n          .from('order_status_history')\r\n          .insert({\r\n            order_id: orderId,\r\n            previous_status: 'pending',\r\n            new_status: 'confirmed',\r\n            changed_by: session.user.id,\r\n            reason: `Pago confirmado manualmente por administrador (${payment_method})`,\r\n            metadata: JSON.stringify({\r\n              payment_method,\r\n              notes,\r\n              manual_confirmation: true\r\n            })\r\n          });\r\n      } catch (historyError) {\r\n        // Si la tabla no existe, continuar sin registrar historial\r\n        logger.log(LogLevel.WARN, LogCategory.DATABASE, 'Could not register status history', { historyError });\r\n      }\r\n    }\r\n\r\n    // TODO: Aquí se podrían agregar acciones adicionales como:\r\n    // - Enviar email de confirmación al cliente\r\n    // - Actualizar inventario\r\n    // - Crear notificaciones\r\n\r\n    logger.log(LogLevel.INFO, LogCategory.API, 'Order marked as paid successfully', {\r\n      orderId,\r\n      previousStatus: order.status,\r\n      newStatus: updateData.status,\r\n      payment_method\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        order_id: orderId,\r\n        payment_status: 'paid',\r\n        status: updateData.status\r\n      },\r\n      message: 'Orden marcada como pagada exitosamente'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.log(LogLevel.ERROR, LogCategory.API, 'Unexpected error marking order as paid', { \r\n      orderId: params.id,\r\n      error \r\n    });\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Error interno del servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]}